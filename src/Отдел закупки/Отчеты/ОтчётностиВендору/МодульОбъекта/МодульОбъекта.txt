
#Область АвтоТест
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
#КонецОбласти
#Область ПрограмныйИнтерфейс
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ОтчетностьВендору			= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить("СписокНоменклатуры",ОтчетностьВендору);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедуриИФункции
Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
		Иначе
			Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНаборДанных()
	УстановитьПривилегированныйРежим(Истина);
	Запрос 		 	= Новый Запрос;
	ТекстЗапроса 	= ПолучитьТекстЗапросаНаборДанных();
	ПериодОтчета 	= ПолучитьЗначениеПараметра("ПериодОтчета");
	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериод", 	ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериод", 	ПериодОтчета.ДатаОкончания);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	Аналитика.Номенклатура КАК Номенклатура
					|ПОМЕСТИТЬ СпрНоменклатура
					|ИЗ
					|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериод, &КонецПериод, , ) КАК ВыручкаИСебестоимостьПродажОбороты
					|		
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
					|ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики

					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВыручкаИСебестоимостьПродажОбороты.Период КАК ДатаПродажи,
					|	ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК Документ,
					|	Аналитика.Номенклатура,
					|	Аналитика.Характеристика,
					|	Аналитика.Склад,
					|	АналитикПоПартнерам.Организация,
					|	ВыручкаИСебестоимостьПродажОбороты.СебестоимостьРеглОборот,
					|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот
					|ПОМЕСТИТЬ КешПродажи
					|ИЗ
					|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
					|			&НачалоПериод,
					|			&КонецПериод,
					|			Регистратор,
					|			АналитикаУчетаНоменклатуры.Номенклатура В (ВЫБРАТЬ Номенклатура  ИЗ  СпрНоменклатура)
					|			) КАК ВыручкаИСебестоимостьПродажОбороты
					|			
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
					|ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики

					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикПоПартнерам
					|ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = АналитикПоПартнерам.КлючАналитики

					|ГДЕ
					|	ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КешПродажи.ДатаПродажи,
					|	КешПродажи.Документ,
					|	КешПродажи.Номенклатура,
					|	КешПродажи.Номенклатура.Артикул КАК Артикул,
					|	КешПродажи.Характеристика,
					|	КешПродажи.Склад,
					|	КешПродажи.Организация,
					|	КешПродажи.СебестоимостьРеглОборот,
					|	КешПродажи.СуммаВыручкиРеглОборот КАК СуммаПродажиГРН,
					|	ЕСТЬNULL(СерийныеНомераНоменклатуры.СерийныеНомера, """") КАК СерийныеНомера
					|ПОМЕСТИТЬ КешСерийниеНомераРТУ
					|ИЗ
					|	КешПродажи КАК КешПродажи
					|		
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
					|				&НачалоПериод,
					|				&КонецПериод,
					|				Регистратор,
					|				Номенклатура В (ВЫБРАТЬ Номенклатура  ИЗ  СпрНоменклатура)
					|				) КАК СерийныеНомераНоменклатуры
					|		
					|ПО КешПродажи.Номенклатура 	= СерийныеНомераНоменклатуры.Номенклатура
					|И КешПродажи.Характеристика 	= СерийныеНомераНоменклатуры.Характеристика
					|И КешПродажи.Склад 			= СерийныеНомераНоменклатуры.Склад
					|И (КешПродажи.Документ 		= (ВЫРАЗИТЬ(СерийныеНомераНоменклатуры.Регистратор КАК Документ.РеализацияТоваровУслуг)))
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КешПродажи.ДатаПродажи,
					|	КешПродажи.Документ,
					|	КешПродажи.Номенклатура,
					|	КешПродажи.Номенклатура.Артикул,
					|	КешПродажи.Характеристика,
					|	КешПродажи.Склад,
					|	КешПродажи.Организация,
					|	КешПродажи.СебестоимостьРеглОборот,
					|	КешПродажи.СуммаВыручкиРеглОборот,
					|	ЕСТЬNULL(СерийныеНомераНоменклатуры.СерийныеНомера, """") КАК СерийныеНомера
					|ПОМЕСТИТЬ КешСерийниеНомераСОрдера
					|ИЗ
					|	КешПродажи КАК КешПродажи
					|		
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
					|				&НачалоПериод,
					|				&КонецПериод,
					|				Регистратор,
					|				Номенклатура В (ВЫБРАТЬ Номенклатура  ИЗ  СпрНоменклатура)
					|				) КАК СерийныеНомераНоменклатуры
					|ПО КешПродажи.Номенклатура 	= СерийныеНомераНоменклатуры.Номенклатура
					|И КешПродажи.Характеристика 	= СерийныеНомераНоменклатуры.Характеристика
					|И КешПродажи.Склад 			= СерийныеНомераНоменклатуры.Склад
					|И (КешПродажи.Документ 		= ВЫРАЗИТЬ(СерийныеНомераНоменклатуры.Регистратор КАК Документ.РасходныйОрдерНаТовары).Распоряжение.Ссылка)
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КешСерийниеНомера.ДатаПродажи,
					|	КешСерийниеНомера.Документ,
					|	КешСерийниеНомера.Номенклатура,
					|	КешСерийниеНомера.Артикул,
					|	КешСерийниеНомера.Характеристика,
					|	КешСерийниеНомера.Склад,
					|	КешСерийниеНомера.Организация,
					|	КешСерийниеНомера.СебестоимостьРеглОборот,
					|	КешСерийниеНомера.СуммаПродажиГРН,
					|	ВЫБОР
					|		КОГДА КешСерийниеНомера.СерийныеНомера = """"
					|			ТОГДА КешСерийниеНомераСОрдера.СерийныеНомера
					|		ИНАЧЕ КешСерийниеНомера.СерийныеНомера
					|	КОНЕЦ КАК СерийныеНомера
					|ИЗ
					|	КешСерийниеНомераРТУ КАК КешСерийниеНомера
					|		
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешСерийниеНомераСОрдера КАК КешСерийниеНомераСОрдера
					|ПО КешСерийниеНомера.Документ 		= КешСерийниеНомераСОрдера.Документ
					|И КешСерийниеНомера.Номенклатура 	= КешСерийниеНомераСОрдера.Номенклатура
					|И КешСерийниеНомера.Склад 			= КешСерийниеНомераСОрдера.Склад
					|И КешСерийниеНомера.Организация 	= КешСерийниеНомераСОрдера.Организация";	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


#Область    СведенияОВнешнемОтчете
Функция 	СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.1";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Отчётность вендору");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "Отчётность вендору'");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Отчётность вендору", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция 	ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура 	ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

#КонецОбласти



