
#Область ПрограммныйИнтерфейс
	
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;                                                                     
	                                                      
	УстановитьПривилегированныйРежим(Истина);	
	
	ЗаказыПоАктуальностиСОбособленнымУчетом	= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 					= Новый Структура;
    ВнешниеНаборыДанных.Вставить("ЗаказыПоАктуальностиСОбособленнымУчетом",ЗаказыПоАктуальностиСОбособленнымУчетом);
	
 	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ПолучитьЗначениеПараметра(ИмяПараметра)

  ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
   Если ПараметрДанных <> Неопределено Тогда
     ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
     Если ПараметрПользовательскойНастройки <> Неопределено Тогда
       Возврат ПараметрПользовательскойНастройки.Значение;
     Иначе
       Возврат ПараметрДанных.Значение;
     КонецЕсли;
   КонецЕсли;

  Возврат Неопределено;

КонецФункции

Функция ПолучитьНаборДанных()
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаНаборДанных();
	ПериодОтчета = ПолучитьЗначениеПараметра("ПериодОтчета");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", 	ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	ПериодОтчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ЛогистическийСклад", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));	//СкладСоборна	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Номенклатура КАК Номенклатура,
			|	ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ЗаказКлиента,
			|	КодСтроки,
			|	КоличествоВЗаказе,
			|	ДатаАктуальности
			|ПОМЕСТИТЬ ОбособленыНоменклатура
			|ИЗ
			|	РегистрСведений.ОбработкаЗаказовКлиентов
			|ГДЕ
			|	ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Дата >=	&НачалоПериода
			|	И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Дата <=	&КонецПериода
			|	И НЕ ДатаАктуальности = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	ЗаказКлиента
			|;
			////////////////////////////////////////////////////////////////////////////////
			//1
			|ВЫБРАТЬ
			|	ТоварыКПоступлениюОбороты.Период КАК ДатаПоступления,
			|	ОбеспечениеЗаказовОбороты.Номенклатура,
			|	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Назначение.Заказ КАК Документ.ЗаказКлиента) КАК Заказ,
			|	ОбеспечениеЗаказовОбороты.НаличиеПодЗаказПриход,
			|	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПеремещениеТоваров) КАК Регистратор,
			|	ОбеспечениеЗаказовОбороты.Склад,
			|	ТоварыКПоступлениюОбороты.КПоступлениюРасход КАК КПоступлению
			|ПОМЕСТИТЬ ПоступленияПоОбеспечению
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
			|												&НачалоПериода,
			|												&КонецПериода,
			|												Регистратор,
			|												Номенклатура В
			|															(ВЫБРАТЬ
			|																ОбособленыНоменклатура.Номенклатура
			|															ИЗ
			|																ОбособленыНоменклатура)
			|												И ВЫРАЗИТЬ(Назначение.Заказ КАК Документ.ЗаказКлиента) В
			|															(ВЫБРАТЬ
			|																ОбособленыНоменклатура.ЗаказКлиента
			|															ИЗ
			|																ОбособленыНоменклатура)
			|												И Склад = &ЛогистическийСклад
			|										 ) КАК ОбеспечениеЗаказовОбороты
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Обороты(
			|															&НачалоПериода,
			|															&КонецПериода,
			|															Регистратор,
			|															Номенклатура В
			|																		(ВЫБРАТЬ
			|																			ОбособленыНоменклатура.Номенклатура
			|																		ИЗ
			|																			ОбособленыНоменклатура)
			|															И Склад = &ЛогистическийСклад
			|															) КАК ТоварыКПоступлениюОбороты
			|															
			|ПО  ОбеспечениеЗаказовОбороты.Номенклатура = ТоварыКПоступлениюОбороты.Номенклатура
			|	И ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПеремещениеТоваров) = ВЫРАЗИТЬ(ТоварыКПоступлениюОбороты.ДокументПоступления КАК Документ.ПеремещениеТоваров)
			|
			|ГДЕ
			|	ОбеспечениеЗаказовОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ОбеспечениеЗаказовОбороты.Период,
			|	ОбеспечениеЗаказовОбороты.Номенклатура,
			|	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Назначение.Заказ КАК Документ.ЗаказКлиента),
			|	ОбеспечениеЗаказовОбороты.НаличиеПодЗаказПриход,
			|	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг),
			|	ОбеспечениеЗаказовОбороты.Склад,
			|	ОбеспечениеЗаказовОбороты.НаличиеПодЗаказПриход
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
			|												&НачалоПериода,
			|												&КонецПериода,
			|												Регистратор,
			|												Номенклатура В
			|														(ВЫБРАТЬ
			|															ОбособленыНоменклатура.Номенклатура
			|														ИЗ
			|															ОбособленыНоменклатура)
			|												И ВЫРАЗИТЬ(Назначение.Заказ КАК Документ.ЗаказКлиента) В
			|													(ВЫБРАТЬ
			|														ОбособленыНоменклатура.ЗаказКлиента
			|													ИЗ
			|														ОбособленыНоменклатура)
			|												И Склад = &ЛогистическийСклад
			|												) КАК ОбеспечениеЗаказовОбороты
			|												
			|ГДЕ
			|	ОбеспечениеЗаказовОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
			|;
			////////////////////////////////////////////////////////////////////////////////
			//2
			|ВЫБРАТЬ
			|	ОбособленыНоменклатура.ЗаказКлиента,
			|	ОбособленыНоменклатура.КодСтроки,
			|	ОбособленыНоменклатура.Номенклатура,
			|	ОбособленыНоменклатура.КоличествоВЗаказе,
			|	ОбособленыНоменклатура.ДатаАктуальности,
			|	СУММА(ОбособленыНоменклатураКопия.КоличествоВЗаказе) - ОбособленыНоменклатура.КоличествоВЗаказе КАК КоличествоВЗаказеДо,
			|	СУММА(ОбособленыНоменклатураКопия.КоличествоВЗаказе) КАК КоличествоВЗаказеПосле
			|	
			|ПОМЕСТИТЬ ОбособленаНоменклатураПоНаростающим
			|ИЗ
			|	ОбособленыНоменклатура КАК ОбособленыНоменклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ОбособленыНоменклатура КАК ОбособленыНоменклатураКопия
			|ПО ОбособленыНоменклатура.ЗаказКлиента = ОбособленыНоменклатураКопия.ЗаказКлиента
			|И ОбособленыНоменклатура.Номенклатура = ОбособленыНоменклатураКопия.Номенклатура
			|И ОбособленыНоменклатура.ДатаАктуальности >= ОбособленыНоменклатураКопия.ДатаАктуальности
			|И (ВЫБОР
			|	КОГДА ОбособленыНоменклатура.ДатаАктуальности = ОбособленыНоменклатураКопия.ДатаАктуальности
			|		ТОГДА ОбособленыНоменклатура.КодСтроки >= ОбособленыНоменклатураКопия.КодСтроки
			|	ИНАЧЕ ИСТИНА
			|КОНЕЦ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбособленыНоменклатура.ЗаказКлиента,
			|	ОбособленыНоменклатура.КодСтроки,
			|	ОбособленыНоменклатура.Номенклатура,
			|	ОбособленыНоменклатура.КоличествоВЗаказе,
			|	ОбособленыНоменклатура.ДатаАктуальности
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбособленыНоменклатура.ЗаказКлиента,
			|	ОбособленыНоменклатура.Номенклатура,
			|	ОбособленыНоменклатура.КоличествоВЗаказе
			|;    
			////////////////////////////////////////////////////////////////////////////////
			//3
			|ВЫБРАТЬ
			|	ПоступленияПоОбеспечению.Заказ,
			|	ПоступленияПоОбеспечению.Регистратор,
			|	ПоступленияПоОбеспечению.Номенклатура,
			|	ПоступленияПоОбеспечению.ДатаПоступления КАК ДатаПоступления,
			|	ПоступленияПоОбеспечению.КПоступлению,
			|	СУММА(ПоступленияПоОбеспечениюКопия.КПоступлению) - ПоступленияПоОбеспечению.КПоступлению КАК КПоступлениюДо,
			|	СУММА(ПоступленияПоОбеспечениюКопия.КПоступлению) КАК КПоступлениюПосле
			|ПОМЕСТИТЬ ПоступленияПоОбеспечениюНаростающие
			|ИЗ
			|	ПоступленияПоОбеспечению КАК ПоступленияПоОбеспечению
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ПоступленияПоОбеспечению КАК ПоступленияПоОбеспечениюКопия
			|ПО ПоступленияПоОбеспечению.Заказ = ПоступленияПоОбеспечениюКопия.Заказ
			|И ПоступленияПоОбеспечению.Номенклатура = ПоступленияПоОбеспечениюКопия.Номенклатура
			|И ПоступленияПоОбеспечению.ДатаПоступления >= ПоступленияПоОбеспечениюКопия.ДатаПоступления
			|И (ВЫБОР
			|	КОГДА ПоступленияПоОбеспечению.ДатаПоступления = ПоступленияПоОбеспечениюКопия.ДатаПоступления
			|		ТОГДА ПоступленияПоОбеспечению.Регистратор >= ПоступленияПоОбеспечениюКопия.Регистратор
			|	ИНАЧЕ ИСТИНА
			|КОНЕЦ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоступленияПоОбеспечению.Заказ,
			|	ПоступленияПоОбеспечению.Регистратор,
			|	ПоступленияПоОбеспечению.Номенклатура,
			|	ПоступленияПоОбеспечению.КПоступлению,
			|	ПоступленияПоОбеспечению.ДатаПоступления

			|ИНДЕКСИРОВАТЬ ПО
			|	ПоступленияПоОбеспечению.Заказ,
			|	ПоступленияПоОбеспечению.Номенклатура  
			|;
			////////////////////////////////////////////////////////////////////////////////
			//4
			|ВЫБРАТЬ
			|	ЗаказКлиента КАК ЗаказКлиента,
			|	Номенклатура КАК Номенклатура,
			|	КоличествоВЗаказеПосле КАК Точка
			|ПОМЕСТИТЬ КешТочки
			|ИЗ
			|	ОбособленаНоменклатураПоНаростающим
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Заказ,
			|	Номенклатура,
			|	КПоступлениюПосле
			|ИЗ
			|	ПоступленияПоОбеспечениюНаростающие    
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаказКлиента,
			|	Номенклатура
			|;                  
			////////////////////////////////////////////////////////////////////////////////
			//5
			|ВЫБРАТЬ
			|	КешТочки.ЗаказКлиента КАК ЗаказКлиента,
			|	КешТочки.Номенклатура,
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КодСтроки, 0) КАК КодСтроки,
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказе, 0) КАК КоличествоВЗаказе,
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле, 0) КАК КоличествоВЗаказеПосле,
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаАктуальности,
			|	МАКСИМУМ(ЕСТЬNULL(ПоступленияПоОбеспечениюНаростающие.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПоступления,
			|	МАКСИМУМ(ЕСТЬNULL(ПоступленияПоОбеспечениюНаростающие.КПоступлениюПосле, 0)) КАК КПоступлениюПосле
			|ПОМЕСТИТЬ ОбъединенияПоНаростающим
			|ИЗ
			|	КешТочки КАК КешТочки
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ ОбособленаНоменклатураПоНаростающим КАК ОбособленаНоменклатураПоНаростающим
			|ПО КешТочки.ЗаказКлиента = ОбособленаНоменклатураПоНаростающим.ЗаказКлиента
			|	И КешТочки.Номенклатура = ОбособленаНоменклатураПоНаростающим.Номенклатура
			|	И КешТочки.Точка <= ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле
			|	И КешТочки.Точка > ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеДо
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ ПоступленияПоОбеспечениюНаростающие КАК ПоступленияПоОбеспечениюНаростающие
			|ПО КешТочки.ЗаказКлиента = ПоступленияПоОбеспечениюНаростающие.Заказ
			|	И КешТочки.Номенклатура = ПоступленияПоОбеспечениюНаростающие.Номенклатура
			|	И КешТочки.Точка <= ПоступленияПоОбеспечениюНаростающие.КПоступлениюПосле
			|	И КешТочки.Точка > ПоступленияПоОбеспечениюНаростающие.КПоступлениюДо
			|
			|СГРУППИРОВАТЬ ПО
			|	КешТочки.ЗаказКлиента,
			|	КешТочки.Номенклатура,
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КодСтроки, 0),
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле, 0),
			|	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказе, 0)
			|;    
			////////////////////////////////////////////////////////////////////////////////
			//6
			|ВЫБРАТЬ
			|	ОбъединенияПоНаростающим.ЗаказКлиента,
			|	ОбъединенияПоНаростающим.Номенклатура,
			|	ОбъединенияПоНаростающим.КодСтроки КАК КодСтроки,
			|	ОбъединенияПоНаростающим.ДатаАктуальности КАК ДатаАктуальности,
			|	ОбъединенияПоНаростающим.ДатаПоступления,
			|   1 КАК КоличествоЗаказов,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(ОбъединенияПоНаростающим.ДатаПоступления, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА 1
			|		КОГДА ОбъединенияПоНаростающим.КПоступлениюПосле < ОбъединенияПоНаростающим.КоличествоВЗаказеПосле
			|			ТОГДА 1
			|		КОГДА ОбъединенияПоНаростающим.ДатаАктуальности < НАЧАЛОПЕРИОДА(ОбъединенияПоНаростающим.ДатаПоступления, ДЕНЬ)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Залет,
			|	ГОД(ОбъединенияПоНаростающим.ЗаказКлиента.Дата) КАК Год,
			|	МЕСЯЦ(ОбъединенияПоНаростающим.ЗаказКлиента.Дата) КАК Месяц,
			|	ОбъединенияПоНаростающим.ЗаказКлиента.Дата КАК Период,
			|	ОбъединенияПоНаростающим.Номенклатура.ВидНоменклатуры КАК ВидыНоменклатуры,
			|	ОбъединенияПоНаростающим.КоличествоВЗаказе
			|ИЗ
			|	ОбъединенияПоНаростающим КАК ОбъединенияПоНаростающим";
Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти 

#Область СведенияОВнешнемОтчете

Функция 	СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.4";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Заказы по актуальности с обособленным учетом");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Заказы по актуальности с обособленным учетом'");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Заказы по актуальности с обособленным учетом", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция 	ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура 	ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
#КонецОбласти
