#Область ПрограммныйИнтерфейс

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;                                                                     
	                                                      
	УстановитьПривилегированныйРежим(Истина);	
	
	ЗаказыПоАктуальностиСОбособленнымУчетом	= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 					= Новый Структура;
    ВнешниеНаборыДанных.Вставить("ЗаказыПоАктуальностиСОбособленнымУчетом",ЗаказыПоАктуальностиСОбособленнымУчетом);
	
 	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ПолучитьЗначениеПараметра(ИмяПараметра)

  ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
   Если ПараметрДанных <> Неопределено Тогда
     ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
     Если ПараметрПользовательскойНастройки <> Неопределено Тогда
       Возврат ПараметрПользовательскойНастройки.Значение;
     Иначе
       Возврат ПараметрДанных.Значение;
     КонецЕсли;
   КонецЕсли;

  Возврат Неопределено;

КонецФункции

Функция ПолучитьНаборДанных()
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаНаборДанных();
	ПериодОтчета = ПолучитьЗначениеПараметра("ПериодОтчета");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", 	ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	ПериодОтчета.ДатаОкончания);
	Запрос.УстановитьПараметр("Сегодня", 		КонецДня(ТекущаяДата()));		
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьНаборДанных()


Функция ПолучитьТекстЗапросаНаборДанных()
ТекстЗапроса = "ВЫБРАТЬ
		|	ОбеспечениеЗаказовОбороты.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ КешНоменклатура
		|
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ОбеспечениеЗаказовОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбеспечениеЗаказовОбороты.Период КАК Период,
		|	ОбеспечениеЗаказовОбороты.Номенклатура КАК Номенклатура,
		|	ОбеспечениеЗаказовОбороты.Назначение КАК Назначение,
		|	ЗаказКлиентаПодЗаказ.Ссылка КАК ЗаказКлиента,
		|	ЗаказКлиентаПодЗаказ.НомерСтроки КАК НомерСтроки,
		|	ЗаказКлиентаПодЗаказ.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ЗаказКлиентаПодЗаказ.Количество КАК Количество,
		|	ЗаказКлиентаПодЗаказ.Склад КАК Склад
		|
		|ПОМЕСТИТЬ КешНоменклатураПодЗаказ
		|
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
		|			&НачалоПериода,&КонецПериода,Месяц,Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ КешНоменклатура)) КАК ОбеспечениеЗаказовОбороты
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаПодЗаказ
		|ПО ОбеспечениеЗаказовОбороты.Назначение.Заказ = ЗаказКлиентаПодЗаказ.Ссылка
		|И ОбеспечениеЗаказовОбороты.Номенклатура = ЗаказКлиентаПодЗаказ.Номенклатура
		|
		|ГДЕ
		|	ЗаказКлиентаПодЗаказ.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
		|	И ЗаказКлиентаПодЗаказ.Отменено = ЛОЖЬ
		|	И ЗаказКлиентаПодЗаказ.ОтменитьЗаказПодЗаказ = ЛОЖЬ

		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Номенклатура,
		|	Назначение,
		|	ЗаказКлиента
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешНоменклатураПодЗаказ.Период,
		|	КешНоменклатураПодЗаказ.ЗаказКлиента КАК ЗаказКлиента,
		|	КешНоменклатураПодЗаказ.Номенклатура КАК Номенклатура,
		|	КешНоменклатураПодЗаказ.Назначение КАК Назначение,
		|	КешНоменклатураПодЗаказ.НомерСтроки,
		|	КешНоменклатураПодЗаказ.Количество,
		|	СУММА(КешНоменклатураПодЗаказКопия.Количество) КАК КоличествоНаростающие,
		|	КешНоменклатураПодЗаказ.Склад КАК Склад
		|
		|ПОМЕСТИТЬ КешНоменклатураПодЗаказНаростающие
		|
		|ИЗ
		|	КешНоменклатураПодЗаказ КАК КешНоменклатураПодЗаказ
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ КешНоменклатураПодЗаказ КАК КешНоменклатураПодЗаказКопия
		|ПО КешНоменклатураПодЗаказ.Период = КешНоменклатураПодЗаказКопия.Период
		|И КешНоменклатураПодЗаказ.Номенклатура = КешНоменклатураПодЗаказКопия.Номенклатура
		|И КешНоменклатураПодЗаказ.Назначение = КешНоменклатураПодЗаказКопия.Назначение
		|И КешНоменклатураПодЗаказ.Склад = КешНоменклатураПодЗаказКопия.Склад
		|И КешНоменклатураПодЗаказ.ЗаказКлиента = КешНоменклатураПодЗаказКопия.ЗаказКлиента
		|И КешНоменклатураПодЗаказ.НомерСтроки >= КешНоменклатураПодЗаказКопия.НомерСтроки

		|СГРУППИРОВАТЬ ПО
		|	КешНоменклатураПодЗаказ.ЗаказКлиента,
		|	КешНоменклатураПодЗаказ.Номенклатура,
		|	КешНоменклатураПодЗаказ.НомерСтроки,
		|	КешНоменклатураПодЗаказ.Количество,
		|	КешНоменклатураПодЗаказ.Назначение,
		|	КешНоменклатураПодЗаказ.Склад,
		|	КешНоменклатураПодЗаказ.Период

		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента,
		|	Номенклатура,
		|	Назначение,
		|	Склад
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешНоменклатураПодЗаказНаростающие.Период КАК Период,
		|	КешНоменклатураПодЗаказНаростающие.ЗаказКлиента КАК ЗаказКлиента,
		|	КешНоменклатураПодЗаказНаростающие.Номенклатура КАК Номенклатура,
		|	КешНоменклатураПодЗаказНаростающие.Назначение КАК Назначение,
		|	КешНоменклатураПодЗаказНаростающие.Склад КАК Склад,
		|	КешНоменклатураПодЗаказНаростающие.НомерСтроки КАК НомерСтроки,
		|	КешНоменклатураПодЗаказНаростающие.Количество КАК Количество,
		|	КешНоменклатураПодЗаказНаростающие.КоличествоНаростающие КАК КоличествоНаростающие,
		|	ДОБАВИТЬКДАТЕ(ОбработкаЗаказовКлиентов.ДатаАктуальности, ДЕНЬ, Склады.СрокПоставки) КАК ДатаАктуальности
		|
		|ПОМЕСТИТЬ ДатаАктуальностиЗаказа
		|
		|ИЗ
		|	КешНоменклатураПодЗаказНаростающие КАК КешНоменклатураПодЗаказНаростающие
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбработкаЗаказовКлиентов КАК ОбработкаЗаказовКлиентов
		|ПО (ОбработкаЗаказовКлиентов.ЗаказКлиента = КешНоменклатураПодЗаказНаростающие.ЗаказКлиента)
		|И (ОбработкаЗаказовКлиентов.Номенклатура = КешНоменклатураПодЗаказНаростающие.Номенклатура)
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|ПО КешНоменклатураПодЗаказНаростающие.Склад = Склады.Ссылка

		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Назначение,
		|	Склад
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаАктуальностиЗаказа.Период КАК Период,
		|	ЕСТЬNULL(ОбеспечениеЗаказовОбороты.Период, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаПоступления,
		|	ДатаАктуальностиЗаказа.ДатаАктуальности КАК ДатаАктуальности,
		|	ДатаАктуальностиЗаказа.Номенклатура КАК Номенклатура,
		|	ДатаАктуальностиЗаказа.Назначение КАК Назначение,
		|	ДатаАктуальностиЗаказа.ЗаказКлиента КАК ЗаказКлиента,
		|	ДатаАктуальностиЗаказа.НомерСтроки КАК НомерСтроки,
		|	ДатаАктуальностиЗаказа.КоличествоНаростающие + ЕСТЬNULL(ОбеспечениеЗаказовОбороты.НаличиеПодЗаказОборот, 0) КАК Обеспечено
		|ПОМЕСТИТЬ ОбеспеченоПодЗаказ
		|ИЗ
		|	ДатаАктуальностиЗаказа КАК ДатаАктуальностиЗаказа
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Обороты(
		|	&НачалоПериода,&КонецПериода,Регистратор, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ КешНоменклатура)) КАК ОбеспечениеЗаказовОбороты
		|ПО (ОбеспечениеЗаказовОбороты.Номенклатура = ДатаАктуальностиЗаказа.Номенклатура)
		|И (ОбеспечениеЗаказовОбороты.Склад = ДатаАктуальностиЗаказа.Склад)
		|И (ОбеспечениеЗаказовОбороты.Назначение = ДатаАктуальностиЗаказа.Назначение)
		|
		|ГДЕ
		|	ОбеспечениеЗаказовОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг

		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Назначение,
		|	ЗаказКлиента,
		|	НомерСтроки
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаАктуальностиЗаказа.Период КАК Период,
		|	ДатаАктуальностиЗаказа.Номенклатура КАК Номенклатура,
		|	ДатаАктуальностиЗаказа.Номенклатура.ВидНоменклатуры КАК ВидыНоменклатуры,
		|	ДатаАктуальностиЗаказа.Назначение КАК Назначение,
		|	ДатаАктуальностиЗаказа.ЗаказКлиента КАК ЗаказКлиента,
		|	ДатаАктуальностиЗаказа.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ОбеспеченоПодЗаказ.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) КАК ДатаПоступления,
		|	ДатаАктуальностиЗаказа.ДатаАктуальности,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(ОбеспеченоПодЗаказ.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)), ДЕНЬ) > ДатаАктуальностиЗаказа.ДатаАктуальности
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(ОбеспеченоПодЗаказ.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) < &Сегодня
		|				И ЕСТЬNULL(ОбеспеченоПодЗаказ.Обеспечено, 0) > 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(ОбеспеченоПодЗаказ.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Залет,
		|	1 КАК КоличествоЗаказов,
		|	ГОД(ДатаАктуальностиЗаказа.Период) КАК Год,
		|	МЕСЯЦ(ДатаАктуальностиЗаказа.Период) КАК Месяц
		|ИЗ
		|
		|	ДатаАктуальностиЗаказа КАК ДатаАктуальностиЗаказа
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ОбеспеченоПодЗаказ КАК ОбеспеченоПодЗаказ
		|ПО ДатаАктуальностиЗаказа.Номенклатура = ОбеспеченоПодЗаказ.Номенклатура
		|И ДатаАктуальностиЗаказа.Назначение 	= ОбеспеченоПодЗаказ.Назначение
		|И ДатаАктуальностиЗаказа.ЗаказКлиента 	= ОбеспеченоПодЗаказ.ЗаказКлиента
		|И ДатаАктуальностиЗаказа.НомерСтроки 	= ОбеспеченоПодЗаказ.НомерСтроки";
Возврат ТекстЗапроса;
КонецФункции
#КонецОбласти

#Область СведенияОВнешнемОтчете
Функция 	СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.2";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Заказы по актуальности с обособленным учетом");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Заказы по актуальности с обособленным учетом'");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Заказы по актуальности с обособленным учетом", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция 	ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура 	ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

	
#КонецОбласти
