
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;		
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Не удалось получить настройки «КТС Помощь». Обратитесь в службу технической поддрежки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПроверитьНастройки(Настройки);
	Настройки.Вставить("ВидНоменклатурыКТСПомощь", Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("91f45981-0c03-11e2-9d4d-001e673c80fc")));
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	ПараметрыКомпоновщика 					= КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПользовательскиеПараметрыКомпоновщика   = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	УстановитьПараметрыДанныхКомпоновщикаНастроек(ПараметрыКомпоновщика, ПользовательскиеПараметрыКомпоновщика, Настройки);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("БонусыМенеджерамЗаСертификаты", ПолучитьБонусыМенеджерамЗаСертификаты(Настройки));
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьНастройки(Настройки)
	
	Если Настройки.Свойство("ПроцентПродажыУслуги") = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не задан процент от продажы услуги «КТС Помощь». Обратитесь в службу технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если Настройки.Свойство("ПроцентИсполненияУслуги") = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не задан процент от исполнения услуги «КТС Помощь». Обратитесь в службу технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если Настройки.Свойство("СвойствоПомощьКТС") = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не задано свойство «КТС Помощь». Обратитесь в службу технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
			
	Если Настройки.Свойство("ПроцентОтПродажыСертификата") = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не задан процент от продажы сертификата на дополнительное обслужывание. Обратитесь в службу технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если Настройки.Свойство("ВидНоменклатурыСертификаты") = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Вид номенклатуры сертификата на дополнительное обслужывание. Обратитесь в службу технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыДанныхКомпоновщикаНастроек(ПараметрыКомпоновщика, ПользовательскиеПараметрыКомпоновщика, Настройки)
	
	ИндетификаторВходнойЦены				= Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85");
	ВидЦеныВходная							= Справочники.ВидыЦен.ПолучитьСсылку(ИндетификаторВходнойЦены);
	ВалютаУправленческогоУчета				= Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегламентированогоУчета			= Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПараметрДанных = ПараметрыКомпоновщика.Найти("ВидЦеныВходная");
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = ПользовательскиеПараметрыКомпоновщика.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			ПараметрПользовательскойНастройки.Значение = ВидЦеныВходная;
		Иначе
			ПараметрДанных.Значение = ВидЦеныВходная;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось получить входную цену.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПараметрДанныхУпрУч = ПараметрыКомпоновщика.Найти("ВалютаУправленческогоУчета");
	Если ПараметрДанныхУпрУч <> Неопределено Тогда
		ПараметрПользовательскойНастройкиУпрУч = ПользовательскиеПараметрыКомпоновщика.Найти(ПараметрДанныхУпрУч.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройкиУпрУч <> Неопределено Тогда
			ПараметрПользовательскойНастройкиУпрУч.Значение = ВалютаУправленческогоУчета;
		Иначе
			ПараметрДанныхУпрУч.Значение = ВалютаУправленческогоУчета;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось получить входную цену.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;

	ПараметрДанныхРеглУч = ПараметрыКомпоновщика.Найти("ВалютаРегламентированогоУчета");
	Если ПараметрДанныхРеглУч <> Неопределено Тогда
		ПараметрПользовательскойНастройкиРеглУч = ПользовательскиеПараметрыКомпоновщика.Найти(ПараметрДанныхУпрУч.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройкиРеглУч <> Неопределено Тогда
			ПараметрПользовательскойНастройкиРеглУч.Значение = ВалютаРегламентированогоУчета;
		Иначе
			ПараметрДанныхРеглУч.Значение = ВалютаРегламентированогоУчета;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось получить входную цену.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПараметрДанных = ПараметрыКомпоновщика.Найти("ВидНоменклатурыКТСПомощь");
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = ПользовательскиеПараметрыКомпоновщика.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			ПараметрПользовательскойНастройки.Значение = Настройки.ВидНоменклатурыКТСПомощь;
		Иначе
			ПараметрДанных.Значение = Настройки.ВидНоменклатурыКТСПомощь;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось получить входную цену.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
		
	ПараметрДанных = ПараметрыКомпоновщика.Найти("ПроцентПродажыУслуги");
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрДанных.Значение = Настройки.ПроцентПродажыУслуги;
	КонецЕсли;
	
	ПараметрДанных = ПараметрыКомпоновщика.Найти("ПроцентИсполненияУслуги");
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрДанных.Значение = Настройки.ПроцентИсполненияУслуги;
	КонецЕсли;
	
	ПараметрДанных = ПараметрыКомпоновщика.Найти("СвойствоПомощьКТС");
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрДанных.Значение = Настройки.СвойствоПомощьКТС;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьБонусыМенеджерамЗаСертификаты(Настройки)

	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолучитьБонусыМенеджерамЗаСертификаты();
	Период = ПолучитьЗначениеПараметра("ПериодОтчета");
	Запрос.УстановитьПараметр("НачалоПериода"				,Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода"				,Период.ДатаОкончания);
	Запрос.УстановитьПараметр("НастройкаСертификатов"		,Настройки.НастройкаСертификатов.Получить());
	Запрос.УстановитьПараметр("ВидНоменклатурыСертификата"	,Настройки.ВидНоменклатурыСертификаты);
	Запрос.УстановитьПараметр("ПроцентОтПродажыСертификата"	,Настройки.ПроцентОтПродажыСертификата);
	Запрос.УстановитьПараметр("ПроцентПродажыУслуги"		,Настройки.ПроцентПродажыУслуги);
	Запрос.УстановитьПараметр("ПроцентИсполненияУслуги"		,Настройки.ПроцентИсполненияУслуги);
	Запрос.УстановитьПараметр("СвойствоПомощьКТС"			,Настройки.СвойствоПомощьКТС);
	Запрос.УстановитьПараметр("ВидНоменклатурыКТСПомощь"	,Настройки.ВидНоменклатурыКТСПомощь);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьБонусыМенеджерамЗаСертификаты()

Функция ТекстЗапросаПолучитьБонусыМенеджерамЗаСертификаты()

	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	НастройкаСертификатов.Сертификат	КАК Номенклатура,
			|	НастройкаСертификатов.Процент 		КАК Процент
			|ПОМЕСТИТЬ НастройкаСертификатов
			|ИЗ
			|	&НастройкаСертификатов КАК НастройкаСертификатов
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сегменты.Номенклатура,
			|	Сегменты.Характеристика,
			|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
			|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
			|ИЗ
			|	РегистрСведений.НоменклатураСегмента КАК Сегменты
			|{ГДЕ
			|	Сегменты.Сегмент.* КАК СегментНоменклатуры,
			|	Сегменты.Номенклатура.* КАК Номенклатура,
			|	Сегменты.Характеристика.* КАК Характеристика}
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сегменты.Номенклатура,
			|	Сегменты.Характеристика,
			|	ИспользуетсяОтборПоСегментуНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БонусыМенеджерам.Номенклатура 																													КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) 																					КАК Характеристика,
			|	БонусыМенеджерам.Организация 																													КАК Организация,
			|	БонусыМенеджерам.СуммаУпрОборот * ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1) * КТСПомощь.Процент / 100 						КАК Бонус,
			|	БонусыМенеджерам.Регистратор 																													КАК Регистратор,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодМесяц, МЕСЯЦ), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодМесяц, МЕСЯЦ), ДЕНЬ) + 1 					КАК ДнейВМесяце,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодКвартал, КВАРТАЛ), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодКвартал, КВАРТАЛ), ДЕНЬ) + 1 			КАК ДнейВКвартале,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодПолугодие, ПОЛУГОДИЕ), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодПолугодие, ПОЛУГОДИЕ), ДЕНЬ) + 1	КАК ДнейВПолугодии,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодГод, ГОД), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодГод, ГОД), ДЕНЬ) + 1 							КАК ДнейВГоду,
			|	БонусыМенеджерам.ПериодДень 																													КАК День,
			|	БонусыМенеджерам.ПериодНеделя 																													КАК Неделя,
			|	БонусыМенеджерам.ПериодДекада 																													КАК Декада,
			|	БонусыМенеджерам.ПериодМесяц 																													КАК Месяц,
			|	БонусыМенеджерам.ПериодКвартал 																													КАК Квартал,
			|	БонусыМенеджерам.ПериодПолугодие 																												КАК Полугодие,
			|	БонусыМенеджерам.ПериодГод 																														КАК Год
			|ИЗ
			|	РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК БонусыМенеджерам
			|		
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК ЗаработокМенеджераМножительПоМесяцам
			|	ПО 
			|		БонусыМенеджерам.ПериодДень >= ЗаработокМенеджераМножительПоМесяцам.НачалоПериода
			|	И	БонусыМенеджерам.ПериодДень < ЗаработокМенеджераМножительПоМесяцам.КонецПериода
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаСертификатов КАК КТСПомощь
			|	ПО 
			|		БонусыМенеджерам.Номенклатура = КТСПомощь.Номенклатура
			|ГДЕ
			|	БонусыМенеджерам.ЗаработокМенеджераУпрОборот = 0
			|{ГДЕ
			|	((БонусыМенеджерам.Номенклатура, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) В
			|			(ВЫБРАТЬ
			|				Номенклатура,
			|				Характеристика
			|			ИЗ
			|				ОтборПоСегментуНоменклатуры
			|			ГДЕ
			|				ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатур))}
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БонусыМенеджерам.Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
			|	БонусыМенеджерам.Организация,
			|	БонусыМенеджерам.СуммаУпрОборот * ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1) * &ПроцентОтПродажыСертификата / 100,
			|	БонусыМенеджерам.Регистратор,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодМесяц, МЕСЯЦ), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодМесяц, МЕСЯЦ), ДЕНЬ) + 1,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодКвартал, КВАРТАЛ), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодКвартал, КВАРТАЛ), ДЕНЬ) + 1,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодПолугодие, ПОЛУГОДИЕ), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодПолугодие, ПОЛУГОДИЕ), ДЕНЬ) + 1,
			|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(БонусыМенеджерам.ПериодГод, ГОД), КОНЕЦПЕРИОДА(БонусыМенеджерам.ПериодГод, ГОД), ДЕНЬ) + 1,
			|	БонусыМенеджерам.ПериодДень,
			|	БонусыМенеджерам.ПериодНеделя,
			|	БонусыМенеджерам.ПериодДекада,
			|	БонусыМенеджерам.ПериодМесяц,
			|	БонусыМенеджерам.ПериодКвартал,
			|	БонусыМенеджерам.ПериодПолугодие,
			|	БонусыМенеджерам.ПериодГод
			|ИЗ
			|	РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Авто,
			|			НЕ Номенклатура В
			|					(ВЫБРАТЬ
			|						Номенклатура
			|					ИЗ
			|						НастройкаСертификатов)) КАК БонусыМенеджерам
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК ЗаработокМенеджераМножительПоМесяцам
			|	ПО 
			|		БонусыМенеджерам.ПериодДень >= ЗаработокМенеджераМножительПоМесяцам.НачалоПериода
			|	И	БонусыМенеджерам.ПериодДень < ЗаработокМенеджераМножительПоМесяцам.КонецПериода
			|
			|ГДЕ
			|	БонусыМенеджерам.ЗаработокМенеджераУпрОборот	= 0
			|И	БонусыМенеджерам.Номенклатура.ВидНоменклатуры	= &ВидНоменклатурыСертификата";	

			
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаПродаж()


Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
   	Если ПараметрДанных <> Неопределено Тогда
    	ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
   		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
     	Иначе
       		Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции
	

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "2.2.20";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Отчет для продактов ["+Версия+"]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Отчет для продактов ["+Версия+"]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Отчет для продактов ["+Версия+"]", "ОДП", "ОткрытиеФормы", Ложь, "ОДП");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Процедура СчитатьДокументыНазначений(МассивНазначений)
	
	//Макет = ПолучитьМакет("МакетДокументыНазначений");
	//
	//Для Инд = 1 По Макет.ВысотаТаблицы Цикл
	//	МассивНазначений.Добавить(Макет.Область(Инд,1).Текст);
	//КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти 
