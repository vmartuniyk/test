
////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС АВТОМАТИЧЕСКИХ ТЕСТОВ

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подготавливает форму документа к работе с DDP 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки DDP для подключения методов на клиенте
//
Процедура ПодготовитьDDPКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	
	ОбъектСсылка = ЭтаФорма.Объект.Ссылка;	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	КонецЕсли;
	
	
КонецПроцедуры // ПодготовитьDDPКРаботе()



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготавливает форму документа к работе с DDP 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки DDP для подключения методов на клиенте
//
Процедура ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Товары", "ПриИзмененииТЗТоваров");	
	
	Команды = ЭтаФорма.Команды;
	Элементы = ЭтаФорма.Элементы;
	
	Реквизиты = Новый Массив; 
	Реквизиты.Добавить(Новый РеквизитФормы("РасботаСDDP", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);	
	ЭтаФорма.РасботаСDDP = ИмяОбработки;
	
	
	Товары = Элементы.Найти("Товары");
	// Создание элемента страницы DDP
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,"ТоварыDDP");
	Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеФлажка);
	Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Нет);
	Параметры.Вставить("ПутьКДанным"		,"Объект.Товары.DDP");
	Параметры.Вставить("Подсказка"			,"Расчитать для товара DDP");
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Товары);         	
	ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, "ТоварыDDP", "Товары", "ТоварыНомерСтроки");
	
	// Создание элемента страницы КурсоваяРазницаDDP
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,"ТоварыКурсоваяРазницаDDP");
	Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Авто);
	Параметры.Вставить("ПутьКДанным"		,"Объект.Товары.КурсоваяРазницаDDP");
	Параметры.Вставить("ТолькоПросмотр"		,Истина);
	Параметры.Вставить("Подсказка"			,"Курсовая разница с учетом DDP");
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	Параметры.Вставить("Ширина"				,7);
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Товары);         	
	ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, "ТоварыКурсоваяРазницаDDP", "Товары", "ТоварыСуммаСНДС");
	
	// Создание элемента страницы СуммаСDDP
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,"ТоварыСуммаСDDP");
	Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Авто);
	Параметры.Вставить("ПутьКДанным"		,"Объект.Товары.СуммаСDDP");
	Параметры.Вставить("ТолькоПросмотр"		,Истина);
	Параметры.Вставить("Подсказка"			,"Сумма с учетом DDP");
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	Параметры.Вставить("Ширина"				,7);
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Товары);         	
	ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, "ТоварыСуммаСDDP", "Товары", "ТоварыКурсоваяРазницаDDP");
	
	
	
	// Условное оформление
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Товары");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.DDP");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыDDP");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение 	= Перечисления.ТипыНоменклатуры.Услуга;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыDDP");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.DDP");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Товары");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;                                    
	ЭлементОтбора.ПравоеЗначение	= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("8014b949-4cca-4dc2-808e-e6fb286406d2"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	
	// Меню работы с DDP
	КоманднаяПанель = Элементы.Товары.КоманднаяПанель;
	Если КоманднаяПанель <> Неопределено Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ПапкаDDP");
		Параметры.Вставить("Заголовок", "DDP");
		Параметры.Вставить("Вид", ВидГруппыФормы.Подменю);
		Параметры.Вставить("Картинка", БиблиотекаКартинок.ОсновнаяВалюта);
		Параметры.Вставить("Подсказка", "Команды для работы с DDP");
		Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
		Параметры.Вставить("Отображение", ОтображениеКнопки.КартинкаИТекст);
		ПапкаКомандDDP = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, КоманднаяПанель);
				
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ОтметитьВсеСтрокиDDP");
		Параметры.Вставить("Действие", "ОтметитьDDP");
		Параметры.Вставить("Заголовок", "Отметить все строки как DDP");
		ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры);
		
		Параметры = Новый Структура; 
		Параметры.Вставить("Имя", "ОтметитьВсеСтрокиDDP");
		Параметры.Вставить("ИмяКоманды", "ОтметитьВсеСтрокиDDP");
		Параметры.Вставить("Заголовок", "Отметить все строки как DDP");
		Параметры.Вставить("Вид", ВидКнопкиФормы.КнопкаКоманднойПанели);
		Параметры.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
		ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ПапкаКомандDDP);
		ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, ПапкаКомандDDP, КоманднаяПанель, Элементы.Найти("ГруппаТоварыЦены"));
	КонецЕсли;

	
КонецПроцедуры // ПодготовитьЗаказПоставщику()



	



// Сведения о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Работа с DDP");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

	
    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Работа с DDP [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Работа с DDP [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "РСDDP");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕОПРЕДЕЛЕНИЯ ОБРАБОТЧИКОВ

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()



// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()


