
#Область ПрограммныйИнтерфейс

Процедура ПроверитьВозможностьПроведенияДокумента(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ЗаказКлиента") 
	  И	 ТипЗнч(Источник) <> Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда	
		Возврат;
	КонецЕсли; 	
	
	Партнер = Источник.Партнер;	
	Сегмент = Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")); // Покупці гурту
	ГруппаДоступа = Справочники.ГруппыДоступаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("49392a71-00f2-11e4-80cd-001e676b0174"));  // Покупці гурту
	
	Если КонтрольПроведенияНеИспользуется(Партнер, Сегмент, ГруппаДоступа) Тогда
		Возврат;	
	КонецЕсли; 
	
	СсылкаНаДокумент = Источник.Ссылка;
	
	ПроверитьТаблицуТоваровНаОднородность(Источник.Дата, Источник.Товары);
		
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") 
	// ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда	
	//Иначе
	//	
	//КонецЕсли;
	
	
	
КонецПроцедуры // ПроверитьВозможностьПроведенияДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьТаблицуТоваровНаОднородность(Дата, ТаблицаТовары)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |	IsNull(ГривневыйТовар, Ложь)
	    |ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АМ_ГривневыйТовар.СрезПоследних(&ДатаДокумента, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаТовары)) КАК АМ_ГривневыйТовар
		|ПО	ТаблицаТовары.Номенклатура = АМ_ГривневыйТовар.Номенклатура
		|";
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары.Выгрузить());
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Сообщить(Выгрузка.Количество());
	Если Выгрузка.Количество() = 2 Тогда
		ВызватьИсключение "Запрещено в одном документе перемешивать гривневый и долларовый товар";	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТаблицуТоваровНаОднородность()

Функция КонтрольПроведенияНеИспользуется(Партнер, Сегмент, Группа) 
	
	КонтрольНеИспользуется = Истина;
	
	Если Партнер.ГруппаДоступа = Группа Тогда
		КонтрольНеИспользуется = Ложь;
		Возврат КонтрольНеИспользуется;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
       	|	ПартнерыСегмента.Сегмент,
       	|	ПартнерыСегмента.Партнер
       	|ИЗ
       	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
       	|ГДЕ
       	|	ПартнерыСегмента.Сегмент = &Сегмент
       	|И 	ПартнерыСегмента.Партнер = &Партнер
		|";
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	КонтрольНеИспользуется = Запрос.Выполнить().Пустой();
	
	Возврат КонтрольНеИспользуется;
	
КонецФункции // КонтрольПроведенияНеИспользуется()

#КонецОбласти

#Область  СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Работа с гривневым товаром");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Обработка предназначена для работы с гривневым товаром [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Работа с гривневым товаром [" + Версия + "]", "АМ_ГР", "ОткрытиеФормы", Ложь, "АМ_ГР");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
