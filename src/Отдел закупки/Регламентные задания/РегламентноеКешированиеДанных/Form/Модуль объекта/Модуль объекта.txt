
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура РегламентноеОбновлениеДополнительныхДанныхНоменклатуры() Экспорт
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Обновление обновление доп. данных номенклатуры'");
    ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Начато обновление дополнительных данных номенклатуры'"));
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапроса_Cache_Номенклатура();
	Запрос.Выполнить();
	
	
	
	СвойствоЗаработок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("904cd00e-c6ba-11e2-b7da-001e673c80fc"));
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоЗаработок);
	
	Запрос.Текст = ПолучитьТекстЗапросаЗаработокМенеджера();
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Розница", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("Входная", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("СвойствоЗаработок", СвойствоЗаработок);
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		Если Выборка.Значение <> 0  Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла; 

	
	
	СвойствоСтараяЦена = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("99ee07fc-c6c9-11e2-b7da-001e673c80fc"));
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоСтараяЦена);
	
	Запрос.Текст = ПолучитьТекстЗапросаСтарыхЦен();
    Запрос.УстановитьПараметр("СвойствоСтараяЦена", СвойствоСтараяЦена);
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		Если Выборка.Значение <> 0  Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЕсли; 
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
	
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Обновлены дополнительные данные номенклатуры'"));
	
КонецПроцедуры

Процедура РегламентноеКешированиеДанныхГрафикаПлатежей() Экспорт

	ТекущаяДата = ТекущаяДата();
	НачалоДня = НачалоДня(ТекущаяДата);
	ЗавтраДня = КонецДня(ТекущаяДата) + 1; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеГрафикаПлатежей();
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));
	
	НаборЗаписей = РегистрыСведений.КТС_ГрафикПлатежейПартнеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(НачалоДня);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ЗавтраДня);
	НаборЗаписей.Отбор.Период.Установить(ЗавтраДня);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры // РегламентноеКешированиеДанныхГрафикаПлатежей()
  


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТекстЗапроса_Cache_Номенклатура()
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//Временная таблица номеклатуры в наличии и актуальной номенклатуры
		|ВЫБРАТЬ
		|	Вл.Номенклатура
		|ПОМЕСТИТЬ Cache_Номенклатура	
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Номенклатура	
		|		ИЗ
		|			РегистрНакопления.ТоварыОрганизаций.Остатки
		|			
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			Номенклатура
		|		ИЗ
		|			РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних
		|       ГДЕ
		|			Актуально
		|	) КАК Вл
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вл.Номенклатура
		|";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапросаЗаработокМенеджера()
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ПроцентНиз.НижняяГраница							КАК НижняяГраница,
		|	IsNull(Минимум(ПроцентВерх.НижняяГраница), 9999999) КАК ВерхняяГраница
		|ПОМЕСТИТЬ ПервыйКешГраниц	
		|Из
		|	РегистрСведений.ktcПроцентыМенеджера КАК ПроцентНиз
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ktcПроцентыМенеджера КАК ПроцентВерх
		|По ПроцентВерх.НижняяГраница > ПроцентНиз.НижняяГраница
        |
		|СГРУППИРОВАТЬ ПО
		|	ПроцентНиз.НижняяГраница
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ПервыйКешГраниц.НижняяГраница	КАК НижняяГраница,
		|	ПервыйКешГраниц.ВерхняяГраница	КАК ВерхняяГраница,
		|	Процент.ЗначениеПорога / 100	КАК Процент	
		|ПОМЕСТИТЬ ВторойКешГраниц
		|ИЗ
		|	ПервыйКешГраниц КАК ПервыйКешГраниц
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ktcПроцентыМенеджера КАК Процент
		|По Процент.НижняяГраница = ПервыйКешГраниц.НижняяГраница
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПервыйКешГраниц;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	(ВалютаВходная.Курс / ВалютаВходная.Кратность) / (ВалютаРозница.Курс / ВалютаРозница.Кратность) КАК Курс 
		|ПОМЕСТИТЬ КешКурсПересчета 		
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = ВЫРАЗИТЬ(&Входная КАК Справочник.ВидыЦен).ВалютаЦены) КАК ВалютаВходная
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ВалютаРозница
		|ПО ВалютаРозница.Валюта = ВЫРАЗИТЬ(&Розница КАК Справочник.ВидыЦен).ВалютаЦены
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СпрНоменклатура.Номенклатура,
		|	ВЫРАЗИТЬ(	ВЫБОР
		|					КОГДА IsNull(БонусыМенеджерам.Используется, Ложь)
		|					ТОГДА БонусыМенеджерам.Бонус
		|					КОГДА IsNull(ЦеныВходная.Цена, 0) = 0 
		|					ТОГДА 0
		|					КОГДА IsNull(ЦеныРозница.Цена, 0) = 0 
		|					ТОГДА 0
		|					ИНАЧЕ ЦеныРозница.Цена * IsNull(ВторойКешГраниц.Процент, 0)
		|				КОНЕЦ * IsNull(МножительПоМесяцам.Коэффициент, 1) КАК Число(10, 2))   КАК ЗаработокМенеджера
		|	
		|ПОМЕСТИТЬ КешЗаработка	
		|ИЗ
		|	Cache_Номенклатура КАК СпрНоменклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &Входная) КАК ЦеныВходная
		|ПО ЦеныВходная.Номенклатура = СпрНоменклатура.Номенклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &Розница) КАК ЦеныРозница
		|ПО ЦеныРозница.Номенклатура = СпрНоменклатура.Номенклатура
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешКурсПересчета КАК КурсПересчета
		|ПО ИСТИНА 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ВторойКешГраниц КАК ВторойКешГраниц
		|ПО ВторойКешГраниц.НижняяГраница <= 	ВЫБОР 
		|											КОГДА IsNull(ЦеныВходная.Цена, 0) = 0 
		|											ТОГДА 0 
		|											ИНАЧЕ (IsNull(ЦеныРозница.Цена, 0) / (IsNull(ЦеныВходная.Цена, 0) * КурсПересчета.Курс) - 1) * 100
		|										КОНЕЦ
		|И	ВторойКешГраниц.ВерхняяГраница > 	ВЫБОР 
		|											КОГДА IsNull(ЦеныВходная.Цена, 0) = 0 
		|											ТОГДА 0 
		|											ИНАЧЕ (IsNull(ЦеныРозница.Цена, 0) / (IsNull(ЦеныВходная.Цена, 0) * КурсПересчета.Курс) - 1) * 100
		|										КОНЕЦ
		|										
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусыМенеджерам КАК БонусыМенеджерам
		|ПО	БонусыМенеджерам.Дата         = &Сегодня
		|И	БонусыМенеджерам.Номенклатура = СпрНоменклатура.Номенклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК МножительПоМесяцам
		|ПО	МножительПоМесяцам.НачалоПериода <= &Сегодня
		|И	МножительПоМесяцам.КонецПериода  >= &Сегодня
        |
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВторойКешГраниц;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешКурсПересчета;
		////////////////////////////////////////////////////////////////////////////////
        //
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДопСведения.Объект КАК Справочник.Номенклатура) 	КАК Номенклатура,
		|	ДопСведения.Значение 										КАК Значение
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДопСведения
		|ГДЕ
		|	ДопСведения.Свойство = &СвойствоЗаработок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура 	
		|;
		////////////////////////////////////////////////////////////////////////////////
        //
		|ВЫБРАТЬ
		|	КешЗаработка.Номенклатура 		КАК Объект,
		|	&СвойствоЗаработок 				КАК Свойство,
		|	КешЗаработка.ЗаработокМенеджера КАК Значение	
		|ИЗ
		|	КешЗаработка КАК КешЗаработка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|ПО	ДопСведения.Номенклатура = КешЗаработка.Номенклатура
   		|
		|ГДЕ
		|	IsNull(ДопСведения.Значение, -1) <> КешЗаработка.ЗаработокМенеджера	
		|";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапросаСтарыхЦен()
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ДействующиеЦены.Период			КАК Период,
		|	ДействующиеЦены.Номенклатура 	КАК Номенклатура,
		|	ДействующиеЦены.ВидЦены			КАК ВидЦены,
		|	ДействующиеЦены.Цена         	КАК Цена
		|ПОМЕСТИТЬ ДействующиеЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &Розница) КАК ДействующиеЦены
		|ИНДЕКСИРОВАТЬ ПО 
		|	Период, 
		|	Номенклатура,
		|	ВидЦены	
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СтарыеЦены.Номенклатура		КАК Номенклатура,
		|	Максимум(СтарыеЦены.Период) КАК Период
		|ПОМЕСТИТЬ СтарыеЦеныПериод			
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК СтарыеЦены
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеЦены КАК ДействующиеЦены
		|ПО	ДействующиеЦены.Период 		 > СтарыеЦены.Период
		|И	ДействующиеЦены.Номенклатура = СтарыеЦены.Номенклатура
		|И	ДействующиеЦены.ВидЦены		 = СтарыеЦены.ВидЦены	
        |
		|СГРУППИРОВАТЬ ПО
		|	СтарыеЦены.Номенклатура
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Номенклатура
		|;	
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СтарыеЦены.Номенклатура	КАК Номенклатура,
		|	СтарыеЦены.Цена		    КАК Цена
		|ПОМЕСТИТЬ СтарыеЦены
		|ИЗ
		|	СтарыеЦеныПериод КАК СтарыеЦеныПериод
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК СтарыеЦены 
		|ПО	СтарыеЦены.Период 		= СтарыеЦеныПериод.Период
		|И	СтарыеЦены.Номенклатура = СтарыеЦеныПериод.Номенклатура
		|И	СтарыеЦены.ВидЦены		= &Розница
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	СтарыеЦены.Номенклатура	
		|;	
		////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтарыеЦеныПериод;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		| 	ДействующиеЦены.Номенклатура КАК Номенклатура,
		| 	ВЫБОР
		| 		КОГДА IsNull(СтарыеЦены.Цена, 0) > ДействующиеЦены.Цена
		| 		ТОГДА СтарыеЦены.Цена
		| 		ИНАЧЕ 0
		| 	КОНЕЦ КАК Значение	
		|ПОМЕСТИТЬ ДанныеКЗаписи
		|ИЗ
		|	ДействующиеЦены КАК ДействующиеЦены
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЦены КАК СтарыеЦены
		|ПО СтарыеЦены.Номенклатура = ДействующиеЦены.Номенклатура	
		|;	
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДействующиеЦены;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтарыеЦены;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДопСведения;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДопСведения.Объект КАК Справочник.Номенклатура) 	КАК Номенклатура,
		|	ДопСведения.Значение 										КАК Значение
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДопСведения
		|ГДЕ
		|	ДопСведения.Свойство = &СвойствоСтараяЦена
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура 	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ДанныеКЗаписи.Номенклатура 	КАК Объект,
		| 	&СвойствоСтараяЦена			КАК Свойство,
		| 	ДанныеКЗаписи.Значение		КАК Значение 	
		|ИЗ
		| 	ДанныеКЗаписи КАК ДанныеКЗаписи
		| 	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|ПО	ДопСведения.Номенклатура = ДанныеКЗаписи.Номенклатура
		| 
		|ГДЕ
		|	IsNull(ДопСведения.Значение, -1) <> ДанныеКЗаписи.Значение
		|;";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапросаДанныеГрафикаПлатежей()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Курсы валют
		|ВЫБРАТЬ
		|	Валюта,
		|	Курс / Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют	
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Аналитика
		|ВЫБРАТЬ
		|	Партнер,
		|	Организация,
		|	КлючАналитики
		|ПОМЕСТИТЬ Аналитика	
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам	
		|ГДЕ
		|	Организация = &Организация
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики		
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Долги
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	Сумма(	ВЫБОР ВалютаУправленческогоУчета.Значение
		|				КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|			КОНЕЦ
		|		  ) КАК Долг	
        |
		|ПОМЕСТИТЬ Долги
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|								
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток 				
		|		ИЗ
		|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
		|	) КАК Долги
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО 	Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Долги.Валюта						
        |
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. ГрафикОплат
		|ВЫБРАТЬ
		|	Ссылка,
		|	МИНИМУМ(ДатаПлатежа) КАК ДатаПлатежа
		|	
		|ПОМЕСТИТЬ ГрафикОплат
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты
		|ГДЕ
		|	Ссылка.Организация  = &Организация
        |
		|СГРУППИРОВАТЬ ПО 
		|	Ссылка
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Возвраты товаров клиентов
		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента)				КАК Регистратор,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента).Валюта		КАК Валюта
		|ПОМЕСТИТЬ ПервыйКеш_Возвраты        
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.ВозвратТоваровОтКлиента
		|И	СуммаОборот <> 0
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	КлючАналитики
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//6. Возвраты товаров клиентов привязаные к реализациям
		|ВЫБРАТЬ
		|	Возвраты.КлючАналитики,
		|	Возвраты.Валюта,										
		|   ВозвратыТовары.ДокументРеализации,
		|   Сумма(ВозвратыТовары.СуммаСНДС) КАК СуммаРасход
		|ПОМЕСТИТЬ ВторойКеш_Возвраты        
		|ИЗ
		|	ПервыйКеш_Возвраты КАК Возвраты
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратыТовары
		|ПО	ВозвратыТовары.Ссылка = Возвраты.Регистратор
        |
		|СГРУППИРОВАТЬ ПО 
		|	Возвраты.КлючАналитики,
		|	Возвраты.Валюта,										
		|   ВозвратыТовары.ДокументРеализации	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//7. Обороты клиентов cache
		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг)				КАК Регистратор,
		|	Регистратор.МоментВремени КАК МоментВремени,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента 	КАК ЗаказКлиента,	
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа  	КАК ДатаПлатежа,
		|	Период,
		|	Валюта,
		|	СуммаПриход,
		|	СуммаОборот
		|		
		|ПОМЕСТИТЬ Cache_Обороты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|И	СуммаОборот <> 0			
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//8. Обороты клиентов
		|ВЫБРАТЬ
		| 	Аналитика.Партнер КАК Партнер,
		|	Обороты.Регистратор,
		|	Обороты.Период,
		|	ВЫБОР
		|		КОГДА Обороты.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка) 
		|		  ИЛИ Обороты.ЗаказКлиента = Неопределено
		|		  ИЛИ Обороты.ЗаказКлиента = NULL
		|		ТОГДА Обороты.ДатаПлатежа
		|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
		|	КОНЕЦ КАК ДатаПлатежа,
		|   	Обороты.МоментВремени,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаПриход 		
		|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ -	ВЫБОР
		|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
		|			  	ТОГДА 0
		|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
		|				ТОГДА Возвраты.СуммаРасход
		|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
		|			КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаОборот
		|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ -	ВЫБОР
		|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
		|			  	ТОГДА 0
		|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
		|				ТОГДА Возвраты.СуммаРасход
		|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
		|			КОНЕЦ КАК СуммаОборот
		|   
		|ПОМЕСТИТЬ ОборотыПоКлиенту
		|ИЗ
		|	Cache_Обороты КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО Аналитика.КлючАналитики = Обороты.КлючАналитики 						
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ВторойКеш_Возвраты КАК Возвраты
		|ПО  Возвраты.КлючАналитики 		= Обороты.КлючАналитики
		|И	Возвраты.ДокументРеализации = Обороты.Регистратор
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВозвраты
		|ПО	КурсыВозвраты.Валюта = Возвраты.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
		|ПО ГрафикОплат.Ссылка = Обороты.ЗаказКлиента
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Обороты.Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Аналитика;
		|УНИЧТОЖИТЬ КурсыВалют;
		|УНИЧТОЖИТЬ ГрафикОплат;
		|УНИЧТОЖИТЬ Cache_Обороты;	
		//////////////////////////////////////////////////////////////////////////////////////////
		//9. Обороты по месяцам
		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
		|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
		|	СУММА(СуммаОборот) КАК Сумма
		|	
		|ПОМЕСТИТЬ ОборотыПоМесяцам	
		|ИЗ
		|	ОборотыПоКлиенту 
		|															
		|СГРУППИРОВАТЬ ПО
		|	   Партнер,
		|	   НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ),
		|	   КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ)
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//10. По месяцам наростающие
		|ВЫБРАТЬ
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Сумма,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
		|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
		|ИЗ
		|   ОборотыПоМесяцам КАК ОборотыПоМесяцам
		|   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
		|ПО ОборотыПоМесяцам.Партнер     = ОборотыПоМесяцамКопия.Партнер
		|И  ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода
        |
		|СГРУППИРОВАТЬ ПО
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.Сумма
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//11. Долги по выбранным месяцам
		|ВЫБРАТЬ
		|		Долги.Партнер,
		|		Долги.Долг,
		|		ОборотыПоМесНарастающие.НачПериода,
		|		ОборотыПоМесНарастающие.КонПериода,
		|		Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
		|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
		|ИЗ
		|		Долги КАК Долги
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
		|		ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
		|		И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
		|		И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//12. Движения по выбранным месяцам
		|ВЫБРАТЬ
		|		Обороты.Партнер,
		|		Обороты.МоментВремени,
		|		Обороты.Регистратор,
		|		Обороты.Период,
		|		ДолгиПоВыбМесяцам.Долг,
		|		ДолгиПоВыбМесяцам.ОстатокДолга,
		|		Обороты.Сумма,
		|		Обороты.ДатаПлатежа КАК ДатаОтсрочки
		|	
		|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
		|ИЗ
		|	ОборотыПоКлиенту КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
		|ПО Обороты.Партнер 		= ДолгиПоВыбМесяцам.Партнер
		|И  Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
		|И  Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//13. Движения по выбранным месяцам наростающие
		|ВЫБРАТЬ
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияПредварительные
		|ИЗ
		|	   ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
		|	   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
		|ПО 	ДвиженияПоВыбМесяцам.Партнер 		= ДвиженияПоВыбМесяцамКопия.Партнер
		|И  	ДвиженияПоВыбМесяцам.ДатаОтсрочки  <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|И	ВЫБОР
		|		КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки   = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|		ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	   
		|СГРУППИРОВАТЬ ПО
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПервыйКеш_Возвраты;
		|УНИЧТОЖИТЬ ВторойКеш_Возвраты;
		|УНИЧТОЖИТЬ ОборотыПоМесяцам;
		|УНИЧТОЖИТЬ ОборотыПоМесяцамНарастающие;
		|УНИЧТОЖИТЬ Долги;
		|УНИЧТОЖИТЬ ДолгиПоВыбраннымМесяцам;
		|УНИЧТОЖИТЬ ДвиженияПоВыбраннымМесяцам;
		/////////////////////////////////////////////////////////////////////////////////////////////
		//14.       
		|ВЫБРАТЬ
		|	   ДвиженияПредв.Партнер,
		|	   ДвиженияПредв.Регистратор,
		|	   ДвиженияПредв.Период,
		|	   ДвиженияПредв.МоментВремени,
		|	   ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
		|	   ДвиженияПредв.Сумма,
		|	   ДвиженияПредв.ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияОкончательные
		|ИЗ
		|	   ДвиженияПредварительные КАК ДвиженияПредв
		|ГДЕ
		|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
		|И 	ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		//15. 
		|ВЫБРАТЬ
		|	&ТекущаяДата 		КАК Период,
		|	Обороты.Партнер		КАК Партнер,
		|	Обороты.ДатаПлатежа КАК ДатаПлатежа,
		|	Обороты.Регистратор	КАК Документ,
		|	ВЫБОР
		|	   	КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
		|		ТОГДА ДвиженияОконч.СуммаДолга
		|		ИНАЧЕ Обороты.Сумма
		|	КОНЕЦ 				КАК СуммаОстаток,
		|	Обороты.Сумма 		КАК НачальнаяСумма,
		|	РАЗНОСТЬДАТ(Обороты.Период, Обороты.ДатаПлатежа, День) КАК КоличествоДнейОтстрочки,
		|	Обороты.Период 		КАК ДатаДокумента
		|ИЗ
		|	   ОборотыПоКлиенту  КАК Обороты
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
		|ПО ДвиженияОконч.Партнер 		= Обороты.Партнер
		|И  ДвиженияОконч.ДатаОтсрочки  <= Обороты.ДатаПлатежа 
		|И	ВЫБОР
		|		КОГДА ДвиженияОконч.ДатаОтсрочки = Обороты.ДатаПлатежа 
		|		ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|   
		|УПОРЯДОЧИТЬ ПО 
		|	Обороты.ДатаПлатежа
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОборотыПоКлиенту;
		|УНИЧТОЖИТЬ ДвиженияПредварительные;
		|УНИЧТОЖИТЬ ДвиженияОкончательные;
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДанныеГрафикаПлатежей()
 



Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.6";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. кеширование данных");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обновление доп. данных номенклатуры [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление доп. данных номенклатуры [" + Версия + "]", "РегламентноеОбновлениеДополнительныхДанныхНоменклатуры();", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Регл. кеширование данных графика платежей [" + Версия + "]", "РегламентноеКешированиеДанныхГрафикаПлатежей();", "ВызовСерверногоМетода");

    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

