////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбновитьПрайсЛисты(Соглашение = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Регл. задание - Анализ и обновление прайс-листов'"), 
		УровеньЖурналаРегистрации.Информация, 
		, 
		, 
		НСтр("ru = 'Запуск: Регл. задания - Анализ и обновление прайс-листов'"));
	
	АльпыОбъект = GetLibrary("Анализ прайс-листов (ALPS)");
	ОбъектБиблиотека = GetLibrary("Библиотека внешних обработок");	
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		ВызватьИсключение "Настройки библиотеки внешних обработок не найдены!" + Символы.ПС + "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок""";	
	КонецЕсли;
	
	ДанныеПочты = Неопределено;
	Если НЕ ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты.Пустая() И НЕ ПустаяСтрока(ГлобальныеНастройки.ALPS_АдресЭлектроннойПочты) Тогда 
		ДанныеПочты = Новый Структура("УчетнаяЗаписьЭлектроннойПочты, АдресЭлектроннойПочты",  ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты, Новый Массив);
		ДанныеПочты.АдресЭлектроннойПочты.Добавить(Новый Структура("Адрес, Представление", ГлобальныеНастройки.ALPS_АдресЭлектроннойПочты, ""));
	КонецЕсли;
		
	ДеревоОшибок = Новый ДеревоЗначений;
	ДеревоОшибок.Колонки.Добавить("Соглашение", 	Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ДеревоОшибок.Колонки.Добавить("НужноОбновить", 	Новый ОписаниеТипов("Булево"));
	ДеревоОшибок.Колонки.Добавить("Важность", 		ОбъектБиблиотека.ПолучитьОписаниеТиповЧисла(1));
	ДеревоОшибок.Колонки.Добавить("КодСобытия", 	ОбъектБиблиотека.ПолучитьОписаниеТиповСтроки(5));	
	ДеревоОшибок.Колонки.Добавить("ОписаниеСобытия", ОбъектБиблиотека.ПолучитьОписаниеТиповСтроки(200));
				
	Для Каждого СтрокаДереваПартнер Из ГлобальныеНастройки.ДеревоПрайсов.Строки Цикл
		//В этом соответствии будут файлы, которые нужно забекапить или перенсти в неизвесную папку
		СоответствиеФайлов = Новый Соответствие;
		Для Каждого Настройка Из СтрокаДереваПартнер.Строки Цикл
		
			Если Настройка.ОтключитьИспользованиеПрайсЛиста Тогда
				Продолжить;
			КонецЕсли;
			
			Ошибки = ДеревоОшибок.Строки.Добавить();
			Ошибки.Соглашение = Настройка.Соглашение;
			Ошибки.НужноОбновить = Истина;
			
			Если Настройка.Расписание.Количество() > 0 Тогда
				Расписание = ОбъектБиблиотека.СтруктураВРасписание(Настройка.Расписание[0].Значение);
				Если Расписание.ТребуетсяВыполнение(, МестноеВремя(Настройка.ФайлПрайсЛиста.ДатаМодификацииУниверсальная), МестноеВремя(Настройка.ФайлПрайсЛиста.ДатаМодификацииУниверсальная)) Тогда
					НачатьОбновлениеФайлаСоглашения(Настройка, АльпыОбъект, Ошибки, ГлобальныеНастройки, СоответствиеФайлов);
				КонецЕсли;
			Иначе
				НачатьОбновлениеФайлаСоглашения(Настройка, АльпыОбъект, Ошибки, ГлобальныеНастройки, СоответствиеФайлов);
			КонецЕсли;	

			Если ВыполнитьПроверкуФайлаСоглашения(Настройка.ФайлПрайсЛиста, Ошибки) Тогда
				Продолжить; 
			КонецЕсли;

			Если ВыполнитьПроверкуАктуальностиПрайсЛиста(Настройка, Ошибки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ошибки.НужноОбновить Тогда
				alpsНастройки = ОбъектБиблиотека.ПолучитьНастройкиПрайсЛиста(Настройка.Соглашение);
				Если ВыполнитьПроверкуНастроекALPS(alpsНастройки, Ошибки) Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент = Новый ТабличныйДокумент;
				ТаблицаЗначений   = ОбъектБиблиотека.ПолучитьТаблицуЗначенийПрайсЛиста();
				Попытка
					ПутьКФайлу = ОбъектБиблиотека.ПолучитьПутьКФайлуСоглашения(Настройка.ФайлПрайсЛиста, ГлобальныеНастройки.ALPS_ИспользоватьКешированиеПрайсЛистов);
					ПрочитатьПрайсЛист(Новый Файл(ПутьКФайлу), Настройка.ФайлПрайсЛиста, ТабличныйДокумент, alpsНастройки.СтраницыПрайса, ГлобальныеНастройки.ALPS_ИспользоватьКешированиеПрайсЛистов);
					УдалитьФайлы(ПутьКФайлу);
				Исключение
					ЗафиксироватьОшибкуЧтенияПрайсЛиста(Ошибки);
					УдалитьФайлы(ПутьКФайлу); // БАГ
					Продолжить;
				КонецПопытки;
				
				Попытка
					АльпыОбъект.ПрочитатьТабличныйДокумент(alpsНастройки.НастройкиПрофиль, ТабличныйДокумент, ТаблицаЗначений, alpsНастройки.Формула);
				Исключение
					ЗафиксироватьОшибкуФормулПрайсЛиста(Ошибки);
					Продолжить;	
				КонецПопытки;
				АльпыОбъект.БыстрыйПоискСоответствий(Настройка.Соглашение, ТаблицаЗначений, alpsНастройки.Привязка);
				РегистрацияЦенПоставщика(Настройка.Соглашение, alpsНастройки.НастройкиПрофиль, ТаблицаЗначений, ГлобальныеНастройки, Ошибки);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЗначениеСоответствия Из СоответствиеФайлов Цикл
			ПодходящийФайл = ЗначениеСоответствия.Ключ;
			Если ЗначениеСоответствия.Значение Тогда
				Если ПодходящийФайл.Существует() Тогда
					Попытка
						ПереместитьФайл(ПодходящийФайл.ПолноеИмя, ПодходящийФайл.Путь + "alps_backup\" + ПодходящийФайл.Имя);
					Исключение
						ЗафиксироватьОшибкуПриАрхивированииПрайсЛиста(Ошибки);	
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого ЗначениеСоответствия Из СоответствиеФайлов Цикл
			ПодходящийФайл = ЗначениеСоответствия.Ключ;
			Если ПодходящийФайл.Существует() Тогда
				Попытка
					ПереместитьФайл(ПодходящийФайл.ПолноеИмя, ПодходящийФайл.Путь + "alps_unknown\" + ПодходящийФайл.Имя);
				Исключение
					ЗафиксироватьОшибкуПриОчисткеНеизвестныхФайлов(Ошибки);		
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ОповеститьПоПочте(ОбъектБиблиотека, ДанныеПочты, ДеревоОшибок);
	
	ALPS_ОбновитьАктуальность();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Регл. задание - Анализ и обновление прайс-листов'"), 
		УровеньЖурналаРегистрации.Информация, 
		, 
		, 
		НСтр("ru = 'Завершение: Регл. задания - Анализ и обновление прайс-листов'"));	
	
КонецПроцедуры

Процедура ALPS_ОбновитьАктуальность() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	Если Метаданные.РегистрыСведений.Найти("ALPS_АктуальностьНоменклатуры") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	                  
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить(
						"ДополнительныеНастройкиОбработокМодификацииКонфигурации", 
						, 
						, 
						"ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат;	
	КонецЕсли;
	
	НастройкиПрайсов = Новый ТаблицаЗначений;
	НастройкиПрайсов.Колонки.Добавить("Соглашение", 		Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	НастройкиПрайсов.Колонки.Добавить("ВидНоменклатуры",  	Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	СтруктураЗаполнения = Новый Структура("Соглашение, ВидНоменклатуры");
	СписокСоглашений = Новый СписокЗначений;
	Для Каждого СтрокаДереваПартнер Из Настройки.ДеревоПрайсов.Строки Цикл
		Для Каждого СтрокаНастройки Из СтрокаДереваПартнер.Строки Цикл
			МассивВидов = ХранилищеНастроекДанныхФорм.Загрузить(
								"БВО-" + СтрокаНастройки.Соглашение.УникальныйИдентификатор(), 
								, 
								, 
								"БВО-" + СтрокаНастройки.Соглашение.УникальныйИдентификатор());
			Если ТипЗнч(МассивВидов) = Тип("Массив") Тогда
				СписокСоглашений.Добавить(СтрокаНастройки.Соглашение);
				ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаНастройки);
				Если МассивВидов.Количество() > 0 Тогда
					Для Каждого ЭлементВида Из МассивВидов Цикл
						СтруктураЗаполнения.ВидНоменклатуры = ЭлементВида;
						НоваяСтрока = НастройкиПрайсов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сегодня", 			НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("Календарь", 			Настройки.ALPS_Календарь);
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата);
	Запрос.УстановитьПараметр("Час", 				Час(ТекущаяДата));
	Запрос.УстановитьПараметр("Минута", 			Минута(ТекущаяДата));
	Запрос.УстановитьПараметр("ПолныеНастройки",	НастройкиПрайсов);
	Запрос.УстановитьПараметр("БазовыеНастройки",	GetLibrary("Библиотека внешних обработок").ПолучитьТаблицуПрайсов(Настройки));
	Запрос.Текст = ПолучитьТекстЗапросаФормированияНастроек();	
	Выборка = Запрос.Выполнить(); 
	
	Запрос.Текст = ПолучитьТекстЗапросаОбновленияАктуальности();	
	Результат = Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Если НЕ Результат.Пустой() Тогда 
		НаборЗаписей = РегистрыСведений.ALPS_АктуальностьНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
		НаборЗаписей.Загрузить(Результат.Выгрузить());
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление актуальности номенклатуры'"), 
					УровеньЖурналаРегистрации.Ошибка, 
					, 
					, 
					НСтр("ru = 'Актуальность номенклатуры обновить не удалось'") + Символы.ПС + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление актуальности номенклатуры'"), 
			УровеньЖурналаРегистрации.Информация, 
			, 
			, 
			НСтр("ru = 'Обновлена актуальность номенклатуры'"));
	
КонецПроцедуры

Процедура РазвертываниеПрайсов()
	
	ОбъектБиблиотека 	= GetLibrary("Библиотека внешних обработок");
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	Для Каждого СтрокаДереваПартнер Из ГлобальныеНастройки.ДеревоПрайсов.Строки Цикл
		Для Каждого Настройка Из СтрокаДереваПартнер.Строки Цикл
		    
			Если Настройка.ОтключитьИспользованиеПрайсЛиста Тогда
				Продолжить;
			КонецЕсли;
			
			Если Настройка.ФайлПрайсЛиста.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Соглашение 			= Настройка.Соглашение;
			ФайлПрайсЛиста  	= Настройка.ФайлПрайсЛиста;
			alpsНастройки 		= ОбъектБиблиотека.ПолучитьНастройкиПрайсЛиста(Соглашение);
			alpsПривязка		= alpsНастройки.Привязка;
			ТаблицаЗначений 	= ОбъектБиблиотека.ПолучитьТаблицуЗначенийРазвернутыеСтроки();
		    ТабличныйДокумент 	= Новый ТабличныйДокумент;
			
			Попытка
				ПутьКФайлу = ОбъектБиблиотека.ПолучитьПутьКФайлуСоглашения(ФайлПрайсЛиста, ГлобальныеНастройки.ALPS_ИспользоватьКешированиеПрайсЛистов);
				ПрочитатьПрайсЛист(Новый Файл(ПутьКФайлу), ФайлПрайсЛиста, ТабличныйДокумент, alpsНастройки.СтраницыПрайса);
				УдалитьФайлы(ПутьКФайлу);
			Исключение
				УдалитьФайлы(ПутьКФайлу);
				Продолжить;
			КонецПопытки;
			
			Попытка
				ОбъектБиблиотека.ПрочитатьТабличныйДокументРазвернутыеСтроки(Соглашение.Партнер, alpsНастройки.НастройкиПрофиль, ТабличныйДокумент, ТаблицаЗначений);
			Исключение
				Продолжить;	
			КонецПопытки;
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент = Неопределено;
			
			ОбъектБиблиотека.БыстрыйПоискСоответствийРазвернутыеСтроки(ТаблицаЗначений, alpsПривязка);
			
			НаборЗаписей = РегистрыСведений.ALPS_РазвернутыеСтроки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Партнер.Установить(Соглашение.Партнер);
			Для Каждого Строка ИЗ ТаблицаЗначений Цикл
				
				Если 		alpsПривязка = 1 Тогда
					НаборЗаписей.Отбор.Код.Установить(Строка.Код);
				ИначеЕсли 	alpsПривязка = 2 Тогда
					НаборЗаписей.Отбор.Артикул.Установить(Строка.Артикул);
				ИначеЕсли	alpsПривязка = 3 Тогда
					НаборЗаписей.Отбор.Код.Установить(Строка.Код);
					НаборЗаписей.Отбор.Артикул.Установить(Строка.Артикул);
				Иначе
					НаборЗаписей.Отбор.Наименование.Установить(Строка.Наименование);	
				КонецЕсли;
				
				Попытка
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
					НаборЗаписей.Записать();
				Исключение
					Продолжить;
				КонецПопытки;
				НаборЗаписей.Очистить();
				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура НачатьОбновлениеФайлаСоглашения(Настройка, АльпыОбъект, Ошибки, ГлНастройки, СоответствиеФайлов)
	
	Перем ПодходящийФайл;
	
	Если НЕ ПустаяСтрока(Настройка.cmd) Тогда
		ComObject = Новый COMObject("wScript.Shell");
		КоманднаяСтрока = ПолучитьКоманднуюСтроку(Настройка.Соглашение.Партнер, Настройка.cmd, ГлНастройки);
		Попытка
			ComObject.Run(КоманднаяСтрока, , Истина);
		Исключение
			СтрокаОшибки = НСтр("ru = 'Ошибка при обновлении прайс-листа (%Соглашение%): %Ошибка%'");
			СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%Соглашение%", ПолучитьНавигационнуюСсылку(Настройка.Соглашение));
			СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%Ошибка%", ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регл. задание - Анализ и обновление прайс-листов'"), 
				УровеньЖурналаРегистрации.Ошибка, 
				, 
				, 
				СтрокаОшибки);
			ЗафиксироватьОшибкуПриВыполненииСкриптаСОМ(Ошибки);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьПроверкуПустойПутьКФайлу(Настройка.ПутьКФайлу, Ошибки);
	ВыполнитьПроверкуИмениФайла(Настройка.ИмяФайла, Ошибки);		
	
	Если НЕ ПустаяСтрока(Настройка.ПутьКФайлу) И НЕ ПустаяСтрока(Настройка.ИмяФайла) Тогда
				
		ФайлBackup  = Новый Файл(Настройка.ПутьКФайлу + "alps_backup");
		Если НЕ ФайлBackup.Существует() Тогда
			СоздатьКаталог(Настройка.ПутьКФайлу + "alps_backup");	
		КонецЕсли;
		
		ФайлUnknown = Новый Файл(Настройка.ПутьКФайлу + "alps_unknown"); 
		Если НЕ ФайлUnknown.Существует() Тогда
			СоздатьКаталог(Настройка.ПутьКФайлу + "alps_unknown");	
		КонецЕсли;
		
		Файл = Новый Файл(Настройка.ПутьКФайлу);
		Если Файл.Существует() Тогда
			
			МассивZIPФайлов = НайтиФайлы(Файл.ПолноеИмя, "*.zip");
			Для Каждого ZIPФайл ИЗ МассивZIPФайлов Цикл
				Попытка
					GetLibrary("Библиотека внешних обработок").ИзвелечьZIPАрхивБезВостановленияПутей(ZIPФайл.ПолноеИмя, ZIPФайл.Путь);
					ПереместитьФайл(ZIPФайл.ПолноеИмя, ZIPФайл.Путь + "alps_backup\" + ZIPФайл.Имя);
				Исключение
					ЗафиксироватьОшибкуЧтенияZIPАрхива(ZIPФайл, Ошибки);
					Продолжить;
				КонецПопытки;
			КонецЦикла;
			 
			МассивФайлов = НайтиФайлы(Файл.ПолноеИмя, "*");
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для i=0 По МассивФайлов.Количество()-1 Цикл
					Если МассивФайлов[i].ЭтоФайл() 	   Тогда Прервать; КонецЕсли;
					Если i=МассивФайлов.Количество()-1 Тогда Возврат;  КонецЕсли; 
				КонецЦикла;
				
				ПолучитьПодходящийФайлПоИмени(СоответствиеФайлов, МассивФайлов, ПодходящийФайл, Настройка.ИмяФайла);
				Если ВыполнитьПроверкуНайденногоФайла(ПодходящийФайл, Настройка.ИмяФайла, Ошибки) Тогда
					Возврат;	
				КонецЕсли;
				
				Попытка
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПодходящийФайл.ПолноеИмя));
				Исключение
					ЗафиксироватьОшибкуПриСозданииДвоичныхДанных(Ошибки);
					Возврат;	
				КонецПопытки;
				
				УниверсальнаяДата		 = ТекущаяУниверсальнаяДата();
				
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//Если в соглашении еще нет файла прайс-листов, нужно его все-таки создать                                                                                    //
				Если Настройка.ФайлПрайсЛиста.Пустая() Тогда
					
					Настройка.ФайлПрайсЛиста = ПрисоединенныеФайлы.ДобавитьФайл(Настройка.Соглашение, ПодходящийФайл.ИмяБезРасширения, СтрЗаменить(ПодходящийФайл.Расширение, ".", ""), ПодходящийФайл.ПолучитьВремяИзменения(), УниверсальнаяДата, АдресВременногоХранилища, Ложь, Ложь);
					
					G_Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
					Если ТипЗнч(G_Настройки) = Тип("Структура") Тогда
						
						G_ДеревоПрайсов = Неопределено;
						Если G_Настройки.Свойство("ДеревоПрайсов", G_ДеревоПрайсов) Тогда
							
							G_РезультатПоиска = G_ДеревоПрайсов.Строки.Найти(Настройка.Соглашение.Партнер, "Партнер");
							Если G_РезультатПоиска = Неопределено Тогда Возврат; КонецЕсли; // Ситуация по логике невозможная выходим из обновления, так как пользователь ранее задал уже настройки
							
							G_ПоискСоглашения = G_РезультатПоиска.Строки.Найти(Настройка.Соглашение, "Соглашение");	
							Если G_ПоискСоглашения = Неопределено Тогда Возврат; КонецЕсли; // Ситуация по логике невозможная выходим из обновления, так как пользователь ранее задал уже настройки

							G_ПоискСоглашения.ФайлПрайсЛиста = Настройка.ФайлПрайсЛиста;
							ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , G_Настройки, "Настройки актуальности прайс-листов", "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
							
						КонецЕсли;

					КонецЕсли;
						
				КонецЕсли;
				//                                                                                                                                                            //
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				
				alpsНастройки = GetLibrary("Библиотека внешних обработок").ПолучитьНастройкиПрайсЛиста(Настройка.Соглашение);
				Если НЕ ВыполнитьПроверкуНастроекALPS(alpsНастройки, Ошибки) Тогда
									
					ТабличныйДокумент = Новый ТабличныйДокумент;
					ТаблицаЗначений   = GetLibrary("Библиотека внешних обработок").ПолучитьТаблицуЗначенийПрайсЛиста();

					Попытка
						ПрочитатьПрайсЛист(ПодходящийФайл, Настройка.ФайлПрайсЛиста, ТабличныйДокумент, alpsНастройки.СтраницыПрайса, ГлНастройки.ALPS_ИспользоватьКешированиеПрайсЛистов);
					Исключение
						ЗафиксироватьОшибкуПредварительногоЧтенияПрайсЛиста(Ошибки);
						Возврат;	
					КонецПопытки;
					
					Попытка
						АльпыОбъект.ПрочитатьТабличныйДокумент(alpsНастройки.НастройкиПрофиль, ТабличныйДокумент, ТаблицаЗначений, alpsНастройки.Формула);
					Исключение
						ЗафиксироватьОшибкуПредварителыхФормулПрайсЛиста(Ошибки);
						Возврат;	
					КонецПопытки;
					АльпыОбъект.БыстрыйПоискСоответствий(Настройка.Соглашение, ТаблицаЗначений, alpsНастройки.Привязка);
					РегистрацияЦенПоставщика(Настройка.Соглашение, alpsНастройки.НастройкиПрофиль, ТаблицаЗначений, ГлНастройки, Ошибки);
					Ошибки.НужноОбновить = Ложь;
				КонецЕсли;

				ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Настройка.ФайлПрайсЛиста, Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", АдресВременногоХранилища, Ложь));	

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПрайсЛист(Файл, ФайлПрайсЛиста, ТабличныйДокумент, СтраницыПрайса, ИспользоватьКеширование = Ложь)
	Если 		ВРег(Файл.Расширение) = ".MXL" Тогда
		GetLibrary("Библиотека внешних обработок").ПрочитатьФайлMXLСервер(Файл.ПолноеИмя, ТабличныйДокумент);
	ИначеЕсли   ВРег(Файл.Расширение) = ".XML" Тогда
		GetLibrary("Библиотека внешних обработок").ПрочитатьФайлXMLСервер(Файл.ПолноеИмя, ТабличныйДокумент);
		ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, ТабличныйДокумент, ИспользоватьКеширование);
	ИначеЕсли 	ВРег(Файл.Расширение) = ".XLS" Тогда
		GetLibrary("Библиотека внешних обработок").ПрочитатьФайлXLSСервер(Файл.ПолноеИмя, ТабличныйДокумент, СтраницыПрайса);
		ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, ТабличныйДокумент, ИспользоватьКеширование);
	ИначеЕсли 	ВРег(Файл.Расширение) = ".XLSX" Тогда
		GetLibrary("Библиотека внешних обработок").ПрочитатьФайлXLSXСервер(Файл.ПолноеИмя, ТабличныйДокумент, СтраницыПрайса);
		ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, ТабличныйДокумент, ИспользоватьКеширование);
	ИначеЕсли 	ВРег(Файл.Расширение) = ".CSV" Тогда
		ВызватьИсключение "";
		GetLibrary("Библиотека внешних обработок").ЗаписатьФайлMXLСервер(ФайлПрайсЛиста, ТабличныйДокумент);
	Иначе
		ВызватьИсключение "";
	КонецЕсли;	
КонецПроцедуры
                                                                      
Процедура ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, КешДокумент, ИспользоватьКеширование)
	Если ИспользоватьКеширование Тогда
		GetLibrary("Библиотека внешних обработок").ЗаписатьФайлMXLСервер(ФайлПрайсЛиста, КешДокумент);
	КонецЕсли;
КонецПроцедуры



Процедура РегистрацияЦенПоставщика(Соглашение, ДеревоПрофиля, ТабЗнч, Настройки, Ошибки)
			
	СтруктураРезультат = ПолучитьЦеныИКлоныПоставщика(ТабЗнч);
	Если СтруктураРезультат.Клоны.Количество() > 0 Тогда
		//Для Каждого Строка ИЗ СтруктураРезультат.Клоны Цикл
			ЗафиксироватьКлоныВПрайсЛисте(Ошибки);
		//КонецЦикла;		
	КонецЕсли;
	
	АнализОтклоненияЦен(СтруктураРезультат, Соглашение, Настройки);
	Если СтруктураРезультат.Товары.Количество() = 0 Тогда 
		Возврат; 
	КонецЕсли;
		
	Если СтруктураРезультат.Свойство("Товары") Тогда
		НачатьТранзакцию();
		Попытка
			Если Настройки.ALPS_ПерезаписыватьРегистрациюЦенПоставщиков Тогда
				ДокументОбъект = ПолучитьДокументОбъектПерезаписи(Соглашение);
			Иначе
				ДокументОбъект = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();	
			КонецЕсли;
			ДокументОбъект.Дата = ТекущаяДата();
			ДокументОбъект.Партнер = Соглашение.Партнер;
			ДокументОбъект.Соглашение = Соглашение;
			ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ДокументОбъект.Товары.Загрузить(СтруктураРезультат.Товары);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОтменитьТранзакцию();
			ЗафиксироватьОшибкуУстановкиЦен(Ошибки);
			Возврат;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
			
КонецПроцедуры



Функция ПолучитьТекстЗапросаФормированияНастроек()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Считываем настройки прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ВидНоменклатуры
		|ПОМЕСТИТЬ pre_ПолныеНастройки
		|ИЗ
		|	&ПолныеНастройки КАК ТаблицаПрайсов
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Считываем полные настройки прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ВидНоменклатуры
		|ПОМЕСТИТЬ ПолныеНастройки
		|ИЗ
		|	pre_ПолныеНастройки КАК ТаблицаПрайсов
		|
		|СГРУППИРОВАТЬ ПО
		|	Соглашение, 
		|	ВидНоменклатуры	
		|
		|ИНДЕКСИРОВАТЬ ПО
		| 	Соглашение,
		|	ВидНоменклатуры
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ pre_ПолныеНастройки;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Считываем базовые данные прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ФайлПрайсЛиста КАК ФайлПрайсЛиста, 
		|	ДнейАктуальности,
		|	ОтключитьИспользованиеПрайсЛиста КАК ПрайсИсключен,
		|	deadline
		|ПОМЕСТИТЬ НачальныеБазовыеНастройки
		|ИЗ
		|	&БазовыеНастройки КАК ТаблицаПрайсов
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Считываем базовые данные прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ФайлПрайсЛиста.ДатаМодификацииУниверсальная КАК ДатаМодификации, 
		|	ДнейАктуальности,
		|	deadline
		|ПОМЕСТИТЬ БазовыеНастройки
		|ИЗ
		|	НачальныеБазовыеНастройки КАК ТаблицаПрайсов
		|ГДЕ
		|	НЕ ПрайсИсключен	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НачальныеБазовыеНастройки;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Урезание не актуальных прайсов
		|ВЫБРАТЬ
		|	Соглашение,              
		|	Соглашение.СрокПоставки КАК СрокПоставки, 
		|	ДатаМодификации 		КАК ДатаМодификации, 
		|	ВЫБОР
		|		КОГДА (&Час >  ЧАС(deadline))
		|		 ИЛИ  (&Час >= ЧАС(deadline) И &Минута > МИНУТА(deadline))
		|     	ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПриемЗаказовЗавершен
		|
		|ПОМЕСТИТЬ АктуальныеБазовыеЗначения
		|ИЗ
		|	БазовыеНастройки
		|ГДЕ
		|	 ДОБАВИТЬКДАТЕ(ДатаМодификации, День, ДнейАктуальности) >= &Сегодня
		|ИЛИ ДнейАктуальности = 0
		|
		|ИНДЕКСИРОВАТЬ ПО Соглашение
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ БазовыеНастройки; 
		|";
	Возврат ТекстЗапроса;		

КонецФункции // ПолучитьТекстЗапросаФормированияНастроек()
 
Функция ПолучитьТекстЗапросаОбновленияАктуальности()

	ТекстЗапроса = "
		//1. День обработки заказа
		|ВЫБРАТЬ
		|	Минимум(ДатаГрафика) КАК ДатаОбработкиЗаказа
		|	
		|ПОМЕСТИТЬ ДеньОбработкиЗаказа 
		|ИЗ 
		|	РегистрСведений.КалендарныеГрафики 
		|ГДЕ 
		|   Календарь 	= 	&Календарь
		|И  ДатаГрафика >= 	&Сегодня
		|И  ДеньВключенВГрафик 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. День и номер дня обработки заказа
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
		|
		|ПОМЕСТИТЬ ДанныеОбработкиЗаказа
		|ИЗ
		|	ДеньОбработкиЗаказа
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ПО ДеньОбработкиЗаказа.ДатаОбработкиЗаказа = КалендарныеГрафики.ДатаГрафика
		|И  &Календарь 							 	= КалендарныеГрафики.Календарь
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
        |УНИЧТОЖИТЬ ДеньОбработкиЗаказа;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Строим верные даты доставки
		|ВЫБРАТЬ
		|	БазовыеЗначения.Соглашение,
		|	БазовыеЗначения.ДатаМодификации КАК ДатаЗагрузки,
		|	ДатаДоставкиЗаказа.ДатаГрафика
		|
		|ПОМЕСТИТЬ ДанныеОбработкиЗаказаПоСоглашениям
		|ИЗ
		|	АктуальныеБазовыеЗначения КАК БазовыеЗначения
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОбработкиЗаказа КАК ДанныеОбработкиЗаказа
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаДоставкиЗаказа
		|ПО  ДанныеОбработкиЗаказа.КоличествоДнейВГрафикеСНачалаГода + БазовыеЗначения.СрокПоставки + БазовыеЗначения.ПриемЗаказовЗавершен = ДатаДоставкиЗаказа.КоличествоДнейВГрафикеСНачалаГода
		|И	 &Календарь 						= ДатаДоставкиЗаказа.Календарь
		|И   ДанныеОбработкиЗаказа.ДатаГрафика <= ДатаДоставкиЗаказа.ДатаГрафика
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	БазовыеЗначения.Соглашение,
		|	БазовыеЗначения.ДатаМодификации,
		|	ДатаДоставкиЗаказа.ДатаГрафика
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеОбработкиЗаказа;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныеБазовыеЗначения;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Получение актуального списка позиций 
		|ВЫБРАТЬ
		|	ЦеныПоставщиков.Номенклатура,
		|	ЦеныПоставщиков.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ЦеныПоставщиков.Соглашение,
		|	ТаблицаПрайсов.ДатаЗагрузки,
		|	ТаблицаПрайсов.ДатаГрафика,
		|	ЦеныПоставщиков.Цена,
		|   ВЫБОР IsNull(ПолныеНастройки.ВидНоменклатуры, 0)
		|   	КОГДА 0
		|		ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК ГарантияДоставки
		|ПОМЕСТИТЬ АктуальныйБазовыйСписок
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПервых(&Сегодня) КАК ЦеныПоставщиков	
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОбработкиЗаказаПоСоглашениям КАК ТаблицаПрайсов
		|ПО ТаблицаПрайсов.Соглашение 	= ЦеныПоставщиков.Соглашение
		|И	ТаблицаПрайсов.ДатаЗагрузки < ЦеныПоставщиков.Период
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ПолныеНастройки КАК ПолныеНастройки
		|ПО ПолныеНастройки.Соглашение 		= ЦеныПоставщиков.Соглашение					 
		|И	ПолныеНастройки.ВидНоменклатуры = ЦеныПоставщиков.Номенклатура.ВидНоменклатуры
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПолныеНастройки;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеОбработкиЗаказаПоСоглашениям;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Список номенклатуры с гарантированной датой доставки
		|ВЫБРАТЬ
		|	Номенклатура,
		|   МАКСИМУМ(ГарантияДоставки) КАК ГарантияДоставки
		|ПОМЕСТИТЬ АктуальныйСписокДоставки 
		|ИЗ
		|	АктуальныйБазовыйСписок
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//6. Список номенклатуры с минимальной датой доставки
		|ВЫБРАТЬ
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки,
		|   МИНИМУМ(АктуальныйБазовыйСписок.ДатаГрафика) КАК ДатаДоставки
		|ПОМЕСТИТЬ АктуальныйСписокДоставкиСДатой
		|ИЗ	
		|	АктуальныйСписокДоставки КАК АктуальныйСписокДоставки
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйСписокДоставки.Номенклатура 	  = АктуальныйБазовыйСписок.Номенклатура
		|И	АктуальныйСписокДоставки.ГарантияДоставки = АктуальныйБазовыйСписок.ГарантияДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АктуальныйСписокДоставки.Номенклатура,
		|	ДатаДоставки
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокДоставки;
		//////////////////////////////////////////////////////////////////////////////////////////
		//7. Список номенклатуры с минимальной датой доставки и минимальной ценой
		|ВЫБРАТЬ
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки,
		|	АктуальныйСписокДоставки.ДатаДоставки,
		|   МИНИМУМ(АктуальныйБазовыйСписок.Цена) КАК Цена
		|ПОМЕСТИТЬ АктуальныйСписокДоставкиИЦен 
		|ИЗ
		|	АктуальныйСписокДоставкиСДатой КАК АктуальныйСписокДоставки
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйСписокДоставки.Номенклатура 	  = АктуальныйБазовыйСписок.Номенклатура
		|И	АктуальныйСписокДоставки.ГарантияДоставки = АктуальныйБазовыйСписок.ГарантияДоставки
		|И	АктуальныйСписокДоставки.ДатаДоставки 	  = АктуальныйБазовыйСписок.ДатаГрафика
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки,
		|	АктуальныйСписокДоставки.ДатаДоставки
		|;	
        //////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокДоставкиСДатой;
		//////////////////////////////////////////////////////////////////////////////////////////
		//8. Актуальный список номенклатуры
        |ВЫБРАТЬ
		|	АктуальныйСписокДоставкиИЦен.Номенклатура,
		|	АктуальныйСписокДоставкиИЦен.ДатаДоставки,
		|	АктуальныйСписокДоставкиИЦен.Цена,
		|	АктуальныйСписокДоставкиИЦен.ГарантияДоставки,
		|   МАКСИМУМ(АктуальныйБазовыйСписок.ДатаЗагрузки) КАК ДатаЗагрузки
		|ПОМЕСТИТЬ АктуальныйСписокНоменклатуры 
		|ИЗ
		|	АктуальныйСписокДоставкиИЦен КАК АктуальныйСписокДоставкиИЦен
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйСписокДоставкиИЦен.Номенклатура 		= АктуальныйБазовыйСписок.Номенклатура
		|И	АктуальныйСписокДоставкиИЦен.ГарантияДоставки 	= АктуальныйБазовыйСписок.ГарантияДоставки
		|И	АктуальныйСписокДоставкиИЦен.ДатаДоставки 		= АктуальныйБазовыйСписок.ДатаГрафика
		|И	АктуальныйСписокДоставкиИЦен.Цена		 		= АктуальныйБазовыйСписок.Цена
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныйСписокДоставкиИЦен.Номенклатура,
		|	АктуальныйСписокДоставкиИЦен.ГарантияДоставки,
		|	АктуальныйСписокДоставкиИЦен.ДатаДоставки,
		|	АктуальныйСписокДоставкиИЦен.Цена
		|;
        //////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокДоставкиИЦен;
		//////////////////////////////////////////////////////////////////////////////////////////
		//9. Предварительный список к записи
		|ВЫБРАТЬ
		|	Истина								КАК Актуально,
		|	АктуальныйСписок.Номенклатура,
		|	АктуальныйСписок.ДатаДоставки 		КАК ДатаПоставки,
		|	АктуальныйСписок.Цена,
		|   АктуальныйБазовыйСписок.Соглашение 	КАК СоглашениеСПоставщиком,
		|	АктуальныйСписок.ГарантияДоставки
		|
		|ПОМЕСТИТЬ НоменклатураКЗаписи
		|ИЗ
		|	АктуальныйСписокНоменклатуры КАК АктуальныйСписок	
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйБазовыйСписок.Номенклатура 	 = АктуальныйСписок.Номенклатура
		|И	АктуальныйБазовыйСписок.ГарантияДоставки = АктуальныйСписок.ГарантияДоставки
		|И	АктуальныйБазовыйСписок.ДатаГрафика  	 = АктуальныйСписок.ДатаДоставки 
		|И	АктуальныйБазовыйСписок.Цена         	 = АктуальныйСписок.Цена		 
		|И	АктуальныйБазовыйСписок.ДатаЗагрузки 	 = АктуальныйСписок.ДатаЗагрузки 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокНоменклатуры;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйБазовыйСписок;
		//////////////////////////////////////////////////////////////////////////////////////////
		//10. Список к записи в регистр
		|ВЫБРАТЬ
		|	&ТекущаяДата КАК Период, 
		|	Ссылка КАК Номенклатура,
		|	ВЫБОР IsNull(NALPS.Номенклатура, Неопределено)
		|		КОГДА Неопределено
		|		ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК Актуально,
		|	ВЫБОР IsNull(NALPS.Номенклатура, Неопределено)
		|		КОГДА Неопределено
		|		ТОГДА ALPS.ДатаПоставки
		|		ИНАЧЕ NALPS.ДатаПоставки
		|	КОНЕЦ КАК ДатаПоставки,
		|	ВЫБОР IsNull(NALPS.Номенклатура, Неопределено)
		|		КОГДА Неопределено
		|		ТОГДА ALPS.ГарантияДоставки
		|		ИНАЧЕ NALPS.ГарантияДоставки
		|	КОНЕЦ КАК ГарантияДоставки,
		|	ВЫБОР IsNull(NALPS.Номенклатура, Неопределено)
		|		КОГДА Неопределено
		|		ТОГДА ALPS.СоглашениеСПоставщиком
		|		ИНАЧЕ NALPS.СоглашениеСПоставщиком
		|	КОНЕЦ КАК СоглашениеСПоставщиком,
		|	ВЫБОР IsNull(NALPS.Номенклатура, Неопределено)
		|		КОГДА Неопределено
		|		ТОГДА ALPS.Цена
		|		ИНАЧЕ NALPS.Цена
		|	КОНЕЦ КАК Цена
		|
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних КАК ALPS
		|ПО СпрНоменклатура.Ссылка = ALPS.Номенклатура
		|И	ALPS.Актуально = Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураКЗаписи КАК NALPS
		|ПО СпрНоменклатура.Ссылка = NALPS.Номенклатура
		|
		|ГДЕ
		|	 IsNull(ALPS.Актуально, 0)		<> IsNull(NALPS.Актуально, 0)
		|ИЛИ ALPS.ДатаПоставки 				<> NALPS.ДатаПоставки
		|ИЛИ ALPS.ГарантияДоставки 			<> NALPS.ГарантияДоставки
		|ИЛИ ALPS.СоглашениеСПоставщиком 	<> NALPS.СоглашениеСПоставщиком
		|ИЛИ ALPS.Цена 						<> NALPS.Цена
		|; 
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НоменклатураКЗаписи;";
	Возврат ТекстЗапроса;

КонецФункции // ПоулчитьТекстЗапросаОбновленияАктуальности()

Функция ПолучитьТекстЗапросаАнализОтклоненияЦен()

	ТекстЗапроса = "
		|ВЫБРАТЬ
       	|	ТаблицаПрайса.Номенклатура 				КАК Номенклатура,
       	|	ТаблицаПрайса.НоменклатураПоставщика 	КАК НоменклатураПоставщика,
       	|	ТаблицаПрайса.Цена 						КАК Цена
       	|ПОМЕСТИТЬ ТаблицаПрайса
       	|ИЗ
       	|	&ТаблицаПрайса КАК ТаблицаПрайса
       	|
       	|ИНДЕКСИРОВАТЬ ПО
       	|	Номенклатура,
       	|	НоменклатураПоставщика
       	|;
       	////////////////////////////////////////////////////////////////////////////////
       	|ВЫБРАТЬ
       	|	Номенклатура 			КАК Номенклатура,
       	|	НоменклатураПоставщика 	КАК НоменклатураПоставщика,
       	|	Цена 					КАК Цена
       	|ПОМЕСТИТЬ ЦеныПоставщика
       	|ИЗ
       	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
       	|			,
       	|			Соглашение = &Соглашение
       	|				И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаПрайса))
       	|;
	               ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныПоставщика.Номенклатура КАК Номенклатура,
	               |	ЦеныПоставщика.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ВЫБОР 
				   |				КОГДА ЦеныПоставщика.Цена > ТаблицаПрайса.Цена
	               |				ТОГДА ЦеныПоставщика.Цена / ТаблицаПрайса.Цена  - 1
	               |				ИНАЧЕ ТаблицаПрайса.Цена  / ЦеныПоставщика.Цена - 1
	               |			КОНЕЦ * 100 КАК ПроцентОтклонения,
				   |	ЦеныПоставщика.Цена КАК ЦенаПоставщика,
				   |	ЕСТЬNULL(ТаблицаПрайса.Цена, 0) КАК ЦенаВПрайсе
	               |ПОМЕСТИТЬ ПроцентыИзмененияЦен
	               |ИЗ
	               |	ЦеныПоставщика КАК ЦеныПоставщика
	               |ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрайса КАК ТаблицаПрайса
	               |ПО ЦеныПоставщика.Номенклатура 			 = ТаблицаПрайса.Номенклатура
	               |И  ЦеныПоставщика.НоменклатураПоставщика = ТаблицаПрайса.НоменклатураПоставщика
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроцентыИзмененияЦен.Номенклатура 			КАК Номенклатура,
	               |	ПроцентыИзмененияЦен.НоменклатураПоставщика КАК НоменклатураПоставщика,
				   |	ПроцентыИзмененияЦен.ПроцентОтклонения 		КАК ПроцентОтклонения,
				   |	ПроцентыИзмененияЦен.ЦенаПоставщика 		КАК ЦенаПоставщика,
				   |	ПроцентыИзмененияЦен.ЦенаВПрайсе 			КАК ЦенаВПрайсе
				   |ПОМЕСТИТЬ ТаблицаОтклонений
	               |ИЗ
	               |	ПроцентыИзмененияЦен КАК ПроцентыИзмененияЦен
	               |ГДЕ
	               |	ПроцентыИзмененияЦен.ПроцентОтклонения >= &ПроцентИзмененияЦены
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура 			КАК Номенклатура,
	               |	НоменклатураПоставщика 	КАК НоменклатураПоставщика,
				   |	ПроцентОтклонения 		КАК ПроцентОтклонения,
				   |	ЦенаПоставщика 			КАК ЦенаПоставщика,
				   |	ЦенаВПрайсе 			КАК ЦенаВПрайсе
	               |ИЗ
	               |	ТаблицаОтклонений
				   |;
				   ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура 			КАК Номенклатура,
	               |	НоменклатураПоставщика 	КАК НоменклатураПоставщика,
				   |	Цена 					КАК Цена
	               |ИЗ
				   |	ТаблицаПрайса
				   |ГДЕ
				   |	(Номенклатура, НоменклатураПоставщика) НЕ В (ВЫБРАТЬ Номенклатура, НоменклатураПоставщика ИЗ ТаблицаОтклонений)
	               |";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаАнализОтклоненияЦен()



Функция ПолучитьЦеныИКлоныПоставщика(ТабЗнч) 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Получаем всю номенклатуру из прайс-листа
		|ВЫБРАТЬ
		|   ТабЗнч.Цена,
		|   ТабЗнч.Номенклатура,
		|	ТабЗнч.НомПосСсылка КАК НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ PreCache
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Сворачиваем одинаковые строки номенклатуры
		|ВЫБРАТЬ
		|   ТабЗнч.Цена,
		|   ТабЗнч.Номенклатура,
		|	ТабЗнч.НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ Cache
		|ИЗ
		|	PreCache КАК ТабЗнч
		|
		|ГДЕ
		|	НЕ ТабЗнч.Номенклатура.ЭтоГруппа
		|И	НЕ ТабЗнч.НоменклатураПоставщика.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабЗнч.Номенклатура,
		|   ТабЗнч.НоменклатураПоставщика,
		|	ТабЗнч.Цена
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ PreCache;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Получаем клоны из прайс-листа
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ CacheClones
		|ИЗ
		|	Cache
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИМЕЮЩИЕ Количество(Номенклатура) > 1
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Получаем клоны для формирования письма
		|ВЫБРАТЬ
		|	CacheClones.Номенклатура,
		|	Cache.НоменклатураПоставщика,
		|	Cache.Цена
		|ИЗ
		|	CacheClones КАК CacheClones
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache КАК Cache 
		|ПО	Cache.Номенклатура = CacheClones.Номенклатура
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Получаем номенклатуру для установки цен
		|ВЫБРАТЬ
		|	ТабЗнч.Номенклатура,
		|   ТабЗнч.НоменклатураПоставщика,
		|	ТабЗнч.Цена
		|Из
		| 	Cache КАК ТабЗнч 
		|
		|ГДЕ
		|	ТабЗнч.Цена > 0
		|И	Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ CacheClones)
		|;";
	Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч);
	РезультатПакета = Запрос.ВыполнитьПакет();
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("Клоны",  РезультатПакета[РезультатПакета.ВГраница() - 1].Выгрузить());
	СтруктураРезультат.Вставить("Товары", РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	Возврат СтруктураРезультат;

КонецФункции

Функция ПолучитьДокументОбъектПерезаписи(Соглашение)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Ссылка 
		|ИЗ 
		|	Документ.РегистрацияЦенНоменклатурыПоставщика 
		|ГДЕ
		|	Проведен
		|И	Соглашение = &Соглашение 
		|И 	Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, День) И КОНЕЦПЕРИОДА(&Период, День)");
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка.ПолучитьОбъект(), Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент());
КонецФункции

Функция ПолучитьКоманднуюСтроку(Партнер, СтрокаКоманда, ГлНастройки)

	РеквизитЛогин   = ГлНастройки.ALPS_ДополнительныйРеквизитЛогин;
	СтрокаЛогин 	= ПолучитьЗначениеДополнительногоРеквизитаПартнера(Партнер, РеквизитЛогин);
	Если НЕ СтрокаЛогин = Неопределено Тогда
		СтрокаКоманда = СтрЗаменить(СтрокаКоманда, "%Логин%", СтрокаЛогин); 	
	КонецЕсли; 	
	
	РеквизитПароль 	= ГлНастройки.ALPS_ДополнительныйРеквизитПароль;
	СтрокаПароль 	= ПолучитьЗначениеДополнительногоРеквизитаПартнера(Партнер, РеквизитПароль);
	Если НЕ СтрокаПароль = Неопределено Тогда
		СтрокаКоманда = СтрЗаменить(СтрокаКоманда, "%Пароль%", СтрокаПароль); 	
	КонецЕсли;
	
	Возврат СтрокаКоманда;
	
КонецФункции // ПолучитьКоманднуюСтроку()

Функция ПолучитьЗначениеДополнительногоРеквизитаПартнера(Ссылка, Свойство)

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Значение КАК Значение
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		|	ПартнерыДополнительныеРеквизиты.Ссылка   = &Ссылка
		|И  ПартнерыДополнительныеРеквизиты.Свойство = &Свойство";

	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	 	Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат СокрЛП(Выборка.Значение);

КонецФункции // ПолучитьЗначениеДополнительногоРеквизитаПартнера()



Процедура АнализОтклоненияЦен(СтруктураРезультат, Соглашение, Настройки)

	Если ПроверитьНастройкиАнализОтклоненияЦен(Настройки) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Внимание. Анализ отклонения цен не выполнился.'"),
										УровеньЖурналаРегистрации.Предупреждение,
										,
										НСтр("ru='Не удалось получить настройки регламентного задания.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАнализОтклоненияЦен();	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("ТаблицаПрайса", СтруктураРезультат.Товары);
	Запрос.УстановитьПараметр("ПроцентИзмененияЦены", Настройки.ALPS_ПроцентОтклоненияЦен);
	
	Попытка
		РезультатПакета = Запрос.ВыполнитьПакет();	
	Исключение
		СтруктураРезультат.Товары.Очистить();
		
		Заголовок = НСтр("ru='Внимание. В прайс листе неправильные цены.'");
		СообщениеОбОшибке = НСтр("ru='В прайс листе %Соглашение% неправильные цены.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Соглашение%", Соглашение);
		ЗаписьЖурналаРегистрации(НСтр("ru='Внимание. В прайс листе неправильные цены.'"),
										УровеньЖурналаРегистрации.Ошибка,
										,
										СообщениеОбОшибке);
		Кому = Новый Массив;
		Если Настройки.Свойство("АдресЭлектроннойПочты") Тогда
			Если Не ПустаяСтрока(Настройки.АдресЭлектроннойПочты) Тогда
				Кому.Добавить(Новый Структура("Адрес, Представление", Настройки.АдресЭлектроннойПочты, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ALPS_АдресЭлектроннойПочты") Тогда
			Если Не ПустаяСтрока(Настройки.ALPS_АдресЭлектроннойПочты) Тогда
				Кому.Добавить(Новый Структура("Адрес, Представление", Настройки.ALPS_АдресЭлектроннойПочты, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Кому.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		БиблиотекаОбработок = GetLibrary("Библиотека внешних обработок");
		ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(Заголовок, СообщениеОбОшибке, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f4-df88-11e0-8b5f-001517115d85")), ПараметрыПисьма);
		Возврат;
	КонецПопытки;
		
		
	Если РезультатПакета[РезультатПакета.ВГраница()-1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтклонений 		  = РезультатПакета[РезультатПакета.ВГраница()-1].Выгрузить();
    СтруктураРезультат.Товары = РезультатПакета[РезультатПакета.ВГраница()].Выгрузить();
	ВыполнитьРассылкуУведомленийОтклонениеЦен(ТаблицаОтклонений, Соглашение, Настройки);
	
КонецПроцедуры

Функция ПроверитьНастройкиАнализОтклоненияЦен(Настройки)

	Если Не ТипЗнч(Настройки) = Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Настройки.Свойство("ALPS_ПроцентОтклоненияЦен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Настройки.ALPS_ПроцентОтклоненияЦен = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции



Процедура ПолучитьПодходящийФайлПоИмени(СоответствиеФайлов, МассивФайлов, ПодходящийФайл, ПодходящееИмяФайла)
	
	Для Каждого ФайлИзМассива Из МассивФайлов Цикл
		Если ФайлИзМассива.ЭтоКаталог() Тогда Продолжить; КонецЕсли;
		
		ЕстьСовпадения = СтрЧислоВхождений(ФайлИзМассива.Имя, ПодходящееИмяФайла);
		Если ЕстьСовпадения = 0 Тогда
			БылОбработан = СоответствиеФайлов[ФайлИзМассива];
			Если БылОбработан = Неопределено Тогда
				СоответствиеФайлов[ФайлИзМассива] = Ложь;				
			КонецЕсли; 
		Иначе
			Если ПодходящийФайл = Неопределено Тогда
				ПодходящийФайл = ФайлИзМассива;
			Иначе
				Если ПодходящийФайл.ПолучитьУниверсальноеВремяИзменения() < ФайлИзМассива.ПолучитьУниверсальноеВремяИзменения() Тогда	
					ПодходящийФайл = ФайлИзМассива;	
				КонецЕсли;
			КонецЕсли;
			СоответствиеФайлов[ФайлИзМассива] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ВыполнитьРассылкуУведомленийОтклонениеЦен(ТаблицаОтклонений, Соглашение, Настройки)

	ТемаПисьма = НСтр("ru='Внимание! Зафиксировано отклонение цены поставщика.'");
	
	ТекстПисьма = ПолучитьТекстПисьмаОтклоненияЦен();;
	СтрокаТаблицыПисьма = ПолучитьТекстСтрокиТаблицыПисьмаОтклоненияЦен();
	
	ТабличнаяЧасть = "";
	Для каждого СтрокаТаблицы Из ТаблицаОтклонений Цикл
		Строка = СтрЗаменить(СтрокаТаблицыПисьма, "%Номенклатура%", СтрокаТаблицы.Номенклатура);
		Строка = СтрЗаменить(Строка, "%Номенклатура поставщика%", СтрокаТаблицы.НоменклатураПоставщика);
		Строка = СтрЗаменить(Строка, "%Цена постащика%", СтрокаТаблицы.ЦенаПоставщика);
		Строка = СтрЗаменить(Строка, "%Цена в прайсе%", СтрокаТаблицы.ЦенаВПрайсе);
		Строка = СтрЗаменить(Строка, "%% отклонения%", СтрокаТаблицы.ПроцентОтклонения);
		ТабличнаяЧасть = ТабличнаяЧасть + Строка;
	КонецЦикла; 
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Соглашение%", Соглашение);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Дата%", ТекущаяДата());
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Табличная часть%", ТабличнаяЧасть);
	
	
	Кому = Новый Массив;
	
	Если Настройки.Свойство("АдресЭлектроннойПочты") Тогда
		Если Не ПустаяСтрока(Настройки.АдресЭлектроннойПочты) Тогда
			Кому.Добавить(Новый Структура("Адрес, Представление", Настройки.АдресЭлектроннойПочты, ""));
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Свойство("ALPS_АдресЭлектроннойПочты") Тогда
		Если Не ПустаяСтрока(Настройки.ALPS_АдресЭлектроннойПочты) Тогда
			Кому.Добавить(Новый Структура("Адрес, Представление", Настройки.ALPS_АдресЭлектроннойПочты, ""));
		КонецЕсли;
	КонецЕсли;
	
	Если Кому.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БиблиотекаОбработок = GetLibrary("Библиотека внешних обработок");
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f4-df88-11e0-8b5f-001517115d85")), ПараметрыПисьма);
	
КонецПроцедуры

Функция ПолучитьТекстПисьмаОтклоненияЦен()

	ТекстПисьма = "<table style='border-collapse: collapse; border:1px solid black;'><tr><td>
	|<table style='border-collapse: collapse; border:2px solid white; background: #DCFFFF; width:100%;'>
	|<tr><td style='border:2px solid white;'>Соглашение</td><td style='border:2px solid white;'>%Соглашение%</td></tr>
	|<tr><td style='border:2px solid white;'>Дата</td><td style='border:2px solid white;'>%Дата%</td></tr>
	|</table><br />
	|<b>Список позицый.</b><br />
	|<table style='border-collapse: collapse; border:2px solid white; background: #FFFACD; width:100%;'>
	|<tr>
	|	<td style='border:2px solid white;'><b>Номенклатура</b></td>
	|	<td style='border:2px solid white;'><b>Номенклатура поставщика</b></td>
	|	<td style='border:2px solid white;'><b>Цена постащика</b></td>
	|	<td style='border:2px solid white;'><b>Цена в прайсе</b></td>
	|	<td style='border:2px solid white;'><b>% отклонения</b></td>
	|</tr>
	|%Табличная часть%
	|</table>
	|</table>";
	
	Возврат ТекстПисьма;

КонецФункции // ПолучитьТекстПисьмаОтклоненияЦен()
 
Функция ПолучитьТекстСтрокиТаблицыПисьмаОтклоненияЦен()

	СтрокаТаблицыПисьма = "
	|<tr>
    |	<td style='border:2px solid white;'><b>%Номенклатура%</b></td>
	|	<td style='border:2px solid white;'><b>%Номенклатура поставщика%</b></td>
	|	<td style='border:2px solid white;'><b>%Цена постащика%</b></td>
	|	<td style='border:2px solid white;'><b>%Цена в прайсе%</b></td>
	|	<td style='border:2px solid white;'><b>%% отклонения%</b></td>
	|</tr>";
	
	Возврат СтрокаТаблицыПисьма;

КонецФункции // ПолучитьТекстСтрокиТаблицыПисьмаОтклоненияЦен()
 





Процедура ОповеститьПоПочте(ОбъектБиблиотека, ДанныеПочты, ДеревоОшибок)
	Если ДанныеПочты = Неопределено Тогда Возврат; КонецЕсли;
	
	Тело = "<h1>Отчет регл. обновления прайс-листов (ALPS)</h1>
		|<table border=""0"" cellspacing=""0"" width=""85%"">
		|<tr>	
		|	<td style=""border-bottom:1px solid black""><b>Соглашение</b></td>
		|	<td style=""border-bottom:1px solid black""><b>Код события</b></td>
		|	<td style=""border-bottom:1px solid black""><b>Описание события</b></td>
		|</tr> ";
		
	Для Каждого Строка ИЗ ДеревоОшибок.Строки Цикл
		Если Строка.Строки.Количество() = 0 Тогда
			Тело = Тело + "<tr>	
						|	<td style=""border-left:1px solid black; border-bottom:1px solid black; border-top:1px solid black"">" + Строка.Соглашение + "</td>
						|	<td style=""border-bottom:1px solid black; border-top:1px solid black""><b></b></td>
						|	<td style=""border-bottom:1px solid black; border-top:1px solid black; border-left:1px solid black; border-right:1px solid black"" align=""left"" bgcolor=""00FF66"" >" + "Удачно выполнено обновление прайс-листа" + "</td>  
						|</tr> ";		
		Иначе
			Тело = Тело + "<tr>	
						|	<td style=""border-left:1px solid black; border-bottom:0px; border-top:1px solid black"">" + Строка.Соглашение + "</td>
						|	<td style=""border-bottom:0px; border-top:1px solid black""><b> </b></td>
						|	<td style=""border-bottom:0px; border-top:1px solid black; border-left:1px solid black; border-right:1px solid black"" align=""left"" bgcolor=""FFFF33"">" + "События при выполнении обновления прайс-листа" + "</td>  
						|</tr> ";				
			Для Каждого СтрокаСобытия Из Строка.Строки Цикл
				Тело = Тело + "<tr>	
						|	<td style=""border-left:1px solid black; border-bottom:0px""> </td>
						|	<td align=""right"" style=""border-bottom:0px""><b>" + СтрокаСобытия.КодСобытия + "</b></td>
						|	<td style=""border-left:1px solid black; border-right:1px solid black"" align=""left"" bgcolor=" +  ?(СтрокаСобытия.Важность = 1, "CCFFFF", 
															?(СтрокаСобытия.Важность = 2, "FFCC00",
															?(СтрокаСобытия.Важность = 3, "FF6633", "FF3333"))) + ">" + СтрокаСобытия.ОписаниеСобытия + "</td>
						|</tr> ";	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПисьма = ОбъектБиблиотека.СформироватьПараметрыПисьма("Отчет регл. обновления прайс-листов", Тело, ДанныеПочты.АдресЭлектроннойПочты, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	ОбъектБиблиотека.ОтправитьСообщениеПоSMTP(ДанныеПочты.УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);	
КонецПроцедуры





// Обработка ошибок анализа прайс-листов

// 005
Функция ВыполнитьПроверкуНайденногоФайла(ПодходящийФайл, ИмяФайла, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Не удалось разрешить имя прайс-листа в папке автозагрузки! Имя файла: %ИмяФайла%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ИмяФайла%", ИмяФайла);	
	
	Если ПодходящийФайл = Неопределено Тогда
		НоваяНода = Ошибки.Строки.Добавить();
		НоваяНода.Важность 		  = 3;
		НоваяНода.КодСобытия 	  = "005";
		НоваяНода.ОписаниеСобытия = СтрокаОшибка;
		Возврат Истина;	
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// 006
Функция ВыполнитьПроверкуНастроекALPS(alpsНастройки, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Настройки для прайс-листа не найдены!'");
	
	Если alpsНастройки = Неопределено Тогда
		НоваяНода = Ошибки.Строки.Добавить();
		НоваяНода.Важность 		  = 4;
		НоваяНода.КодСобытия 	  = "006";
		НоваяНода.ОписаниеСобытия = СтрокаОшибка;
		Возврат Истина;	
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// 011
Функция ВыполнитьПроверкуФайлаСоглашения(ФайлПрайсЛиста, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Файл прайс-листа не задан.'");
				
	Если ФайлПрайсЛиста.Пустая() Тогда
		НоваяНода = Ошибки.Строки.Добавить();
		НоваяНода.Важность 		  = 4;
		НоваяНода.КодСобытия 	  = "011";
		НоваяНода.ОписаниеСобытия = СтрокаОшибка;
		Возврат Истина;	
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// 012
Функция ВыполнитьПроверкуАктуальностиПрайсЛиста(Настройка, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Внимание прайс-лист устарел!'");
				
	Если Настройка.ДнейАктуальности > 0 И Настройка.ФайлПрайсЛиста.ДатаМодификацииУниверсальная + 60*60*24*Настройка.ДнейАктуальности < ТекущаяУниверсальнаяДата() Тогда
		НоваяНода = Ошибки.Строки.Добавить();
		НоваяНода.Важность 		  = 4;
		НоваяНода.КодСобытия 	  = "012";
		НоваяНода.ОписаниеСобытия = СтрокаОшибка;
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// 002
Процедура ВыполнитьПроверкуПустойПутьКФайлу(ПутьКФайлу, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Путь к каталогу автозагрузки прайс-листа не указан.'");
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		НоваяНода = Ошибки.Строки.Добавить();
		НоваяНода.Важность 		  = 1;
		НоваяНода.КодСобытия 	  = "002";
		НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	КонецЕсли;
	
КонецПроцедуры

// 003
Процедура ВыполнитьПроверкуИмениФайла(ИмяФайла, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Имя или часть имени прайс-листа не задано для поиска в каталоге автозагрузки.'");
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		НоваяНода = Ошибки.Строки.Добавить();
		НоваяНода.Важность 	 	  = 1;
		НоваяНода.КодСобытия      = "003";
		НоваяНода.ОписаниеСобытия = СтрокаОшибка;	
	КонецЕсли;
	
КонецПроцедуры

// 004
Процедура ЗафиксироватьОшибкуЧтенияZIPАрхива(ZIPФайл, Ошибки)
	
	СтрокаОшибка = НСтр("ru='Не удалось прочитать ZIP-файл прайс-листа!%СимволПС%%ПолноеИмя%%СимволПС%%ОписаниеОшибки%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ПолноеИмя%", ZIPФайл.ПолноеИмя);
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ОписаниеОшибки%", ОписаниеОшибки());
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%СимволПС%", Символы.ПС);
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 2;
	НоваяНода.КодСобытия 	  = "004";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 007
Процедура ЗафиксироватьОшибкуПредварительногоЧтенияПрайсЛиста(Ошибки)
	
	СтрокаОшибка = НСтр("ru='Предварительное чтение новой версии прайс-листа не удалось, оставлена старая версия прайса!'");
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "007";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 008
Процедура ЗафиксироватьОшибкуПредварителыхФормулПрайсЛиста(Ошибки)
	
	СтрокаОшибка = НСтр("ru='В формулах присутствуют ошибки или прайс-лист является ошибочным, оставлена старая версия прайса!'");
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "008";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 009
Процедура ЗафиксироватьКлоныВПрайсЛисте(Ошибки)
	
	СтрокаОшибка = НСтр("ru='Найдены клоны в прайсе-поставщика'");
	//СтрокаОшибка = НСтр("ru='Найдены клоны в прайсе-поставщика - Номенклаутра: %Номенклатура% Ном. поставщика: %НоменклатураПоставщика%'");
	//СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%Номенклатура%", Строка.Номенклатура);
	//СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%НоменклатураПоставщика%", Строка.НоменклатураПоставщика);
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 2;
	НоваяНода.КодСобытия 	  = "009";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 010
Процедура ЗафиксироватьОшибкуУстановкиЦен(Ошибки)
	
	СтрокаОшибка = НСтр("ru='Ошибка при установке цен поставщика. %ОписаниеОшибки%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ОписаниеОшибки%", ОписаниеОшибки());
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "010";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 013
Процедура ЗафиксироватьОшибкуЧтенияПрайсЛиста(Ошибки)
	
	СтрокаОшибка = НСтр("ru='Ошибка при автоматическом чтении прайс-листа!'");
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "013";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 014
Процедура ЗафиксироватьОшибкуФормулПрайсЛиста(Ошибки)
	
	СтрокаОшибка = НСтр("ru='В формулах присутствуют ошибки или прайс-лист является ошибочным!'");
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "014";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 015
Процедура ЗафиксироватьОшибкуПриСозданииДвоичныхДанных(Ошибки)
	
	СтрокаОшибка = НСтр("ru='При создании двоичных данных произошла ошибка! %ОписаниеОшибки%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ОписаниеОшибки%", ОписаниеОшибки());
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "015";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 016
Процедура ЗафиксироватьОшибкуПриАрхивированииПрайсЛиста(Ошибки)
	
	СтрокаОшибка = НСтр("ru='При попытке архивирования файлов произошла ошибка! %ОписаниеОшибки%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ОписаниеОшибки%", ОписаниеОшибки());
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "016";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 017
Процедура ЗафиксироватьОшибкуПриОчисткеНеизвестныхФайлов(Ошибки)
	
	СтрокаОшибка = НСтр("ru='При попытке перенесения неизвестных файлов произошла ошибка! %ОписаниеОшибки%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ОписаниеОшибки%", ОписаниеОшибки());
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "017";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры

// 018
Процедура ЗафиксироватьОшибкуПриВыполненииСкриптаСОМ(Ошибки)
	
	СтрокаОшибка = НСтр("ru='При выполнении скрипта СОМ произошла ошибка! %ОписаниеОшибки%'");
	СтрокаОшибка = СтрЗаменить(СтрокаОшибка, "%ОписаниеОшибки%", ОписаниеОшибки());
	
	НоваяНода = Ошибки.Строки.Добавить();
	НоваяНода.Важность 		  = 4;
	НоваяНода.КодСобытия 	  = "017";
	НоваяНода.ОписаниеСобытия = СтрокаОшибка;
	
КонецПроцедуры



// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.5.166";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. обновление прайс-листов [ALPS]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обновление прайс-листов [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление прайс-листов [" + Версия + "]", "ОбновитьПрайсЛисты();", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Регл. развертывание прайс-листов [2.0.1]", "РазвертываниеПрайсов();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Если ТипЗнч(ИдентификаторКоманды) = Тип("Строка") Тогда
		Выполнить(ИдентификаторКоманды);
	КонецЕсли;
КонецПроцедуры

Функция GetLibrary(LibraryName)
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки  = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;
КонецФункции


