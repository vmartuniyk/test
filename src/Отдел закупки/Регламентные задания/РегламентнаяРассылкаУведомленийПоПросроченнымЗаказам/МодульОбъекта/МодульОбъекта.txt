Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.008";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. рассылка по просроченным заказам поставщику [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. рассылка по просроченным заказам поставщику [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. рассылка по просроченным заказам поставщику [" + Версия + "]", "ВыполнитьРассылку();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры




Процедура ВыполнитьРассылку() Экспорт

	ЧасВСутках = Час(ТекущаяДата());
	Если ЧасВСутках <> 7 И ЧасВСутках <> 16 Тогда Возврат; КонецЕсли;
		
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "prihod@ktc-ua.com", "Оприходування товарів"));
	Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "Отдел суперподдержки"));
////	Кому.Добавить(Новый Структура("Адрес, Представление", "akomar@ktc.rovno.ua", "Отдел суперподдержки"));
	Кому.Добавить(Новый Структура("Адрес, Представление", "gplusuk@ktc.rovno.ua", "Отдел суперподдержки"));

	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	                      |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Партнер КАК Партнер,
	                      |	ЗаказыПоставщикамОстатки.Номенклатура,
	                      |	ЗаказыПоставщикамОстатки.Номенклатура.Код КАК Код,
	                      |	ЗаказыПоставщикамОстатки.Номенклатура.Артикул КАК Артикул,
	                      |	ЗаказыПоставщикамОстатки.Склад,
	                      |	ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК Количество
	                      |ПОМЕСТИТЬ КешДокументы
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	                      |ГДЕ
	                      |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КТС_СпособДоставки В(&МассивЗначений)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешДокументы.ЗаказПоставщику КАК ДокументПоступления,
	                      |	КешДокументы.Партнер КАК Партнер,
	                      |	КешДокументы.Номенклатура КАК Номенклатура,
	                      |	КешДокументы.Код КАК Код,
	                      |	КешДокументы.Артикул КАК Артикул,
	                      |	КешДокументы.Склад КАК Склад,
	                      |	КешДокументы.Количество КАК Количество,
	                      |	ТоварыКПоступлениюОбороты.Период КАК ДатаДоставки,
	                      |	КешДокументы.ЗаказПоставщику.КТС_СпособДоставки КАК СпособДоставки
	                      |ИЗ
	                      |	КешДокументы КАК КешДокументы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Обороты(
	                      |				&ДатаНачало,
	                      |				&ДатаОкончание,
	                      |				Регистратор,
	                      |				(ДокументПоступления, Номенклатура, Склад) В
	                      |					(ВЫБРАТЬ
	                      |						КешДокументы.ЗаказПоставщику,
	                      |						КешДокументы.Номенклатура,
	                      |						КешДокументы.Склад
	                      |					ИЗ
	                      |						КешДокументы КАК КешДокументы)) КАК ТоварыКПоступлениюОбороты
	                      |		ПО КешДокументы.ЗаказПоставщику = ТоварыКПоступлениюОбороты.ДокументПоступления
	                      |			И КешДокументы.Номенклатура = ТоварыКПоступлениюОбороты.Номенклатура
	                      |			И КешДокументы.Склад = ТоварыКПоступлениюОбороты.Склад
	                      |			И (ТоварыКПоступлениюОбороты.Регистратор ССЫЛКА Документ.ЗаказПоставщику)
	                      |ИТОГИ ПО
	                      |	Партнер,
	                      |	ДокументПоступления,
	                      |	СпособДоставки");
						  
						  
	ДатаОжидания = ТекущаяДата();						  
	ПолучитьПараметрыЗапроса(Запрос, ДатаОжидания);
	
	ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПартнер.Следующий() Цикл
		ТемаПисьма 					= Строка(ВыборкаПартнер.Партнер) + ". Ожидаемый товар не на остатках. (Рассылка от " + ТекущаяДата() + ")";
		ТелоПисьма					= "";
		ВыборкаДокументПоступления 	= ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументПоступления.Следующий() Цикл
			ТелоПисьма					= ТелоПисьма + "<table style='border-collapse: collapse; border:1px solid black;'><tr><td>";
			ТелоПисьма					= ТелоПисьма + "<table style='border-collapse: collapse; border:2px solid white; background: #DCFFFF; width:100%;'>";
			ТелоПисьма					= ТелоПисьма + "<tr><td style='border:2px solid white;'>Документ</td><td style='border:2px solid white;'>"  		   + Строка(ВыборкаДокументПоступления.ДокументПоступления) + "</td></tr>";
			ТелоПисьма					= ТелоПисьма + "<tr><td style='border:2px solid white;'>Навигационная ссылка</td><td style='border:2px solid white;'>" + ПолучитьНавигационнуюСсылку(ВыборкаДокументПоступления.ДокументПоступления) + "</td></tr>"; 
			ВыборкаСпособДоставки 		= ВыборкаДокументПоступления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСпособДоставки.Следующий() Цикл
				ТелоПисьма				= ТелоПисьма + "<tr><td style='border:2px solid white;'>Способ доставки</td><td style='border:2px solid white;'>" + Строка(ВыборкаСпособДоставки.СпособДоставки) + "</td></tr>";
				ВыборкаДетальныеЗаписи 	= ВыборкаСпособДоставки.Выбрать();
                ВыборкаДетальныеЗаписи.Следующий();
				ТелоПисьма				= ТелоПисьма + "<tr><td style='border:2px solid white;'>Дата ожидания</td><td style='border:2px solid white;'>" + Формат(ВыборкаДетальныеЗаписи.ДатаДоставки, "ДФ='dd.MM.yyyy'") + "</td></tr>";
				ВыборкаДетальныеЗаписи.Сбросить();
				ТелоПисьма				= ТелоПисьма + "</table><br />";
				ТелоПисьма				= ТелоПисьма + "<b>Не прийнятый товар.</b><br />";
				ТелоПисьма				= ТелоПисьма + "<table style='border-collapse: collapse; border:2px solid white; background: #FFFACD; width:100%;'>";
				ТелоПисьма				= ТелоПисьма + "<tr><td style='border:2px solid white;'><b>Код</b></td><td style='border:2px solid white;'><b>Артикул</b></td><td style='border:2px solid white;'><b>Номенклатура</b></td><td style='border:2px solid white;'><b>Количество</b></td><td style='border:2px solid white;'><b>Склад</b></td></tr>";
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТелоПисьма = ТелоПисьма + "<tr>";
					ТелоПисьма = ТелоПисьма + "<td style='border:2px solid white;'>" + Строка(ВыборкаДетальныеЗаписи.Код) + "</td>";
					ТелоПисьма = ТелоПисьма + "<td style='border:2px solid white;'>" + Строка(ВыборкаДетальныеЗаписи.Артикул) + "</td>";
					ТелоПисьма = ТелоПисьма + "<td style='border:2px solid white;'>" + Строка(ВыборкаДетальныеЗаписи.Номенклатура) + "</td>";
					ТелоПисьма = ТелоПисьма + "<td style='border:2px solid white;'>" + ВыборкаДетальныеЗаписи.Количество + "</td>";
					ТелоПисьма = ТелоПисьма + "<td style='border:2px solid white;'>" + Строка(ВыборкаДетальныеЗаписи.Склад) + "</td>";
					ТелоПисьма = ТелоПисьма + "</tr>";
				КонецЦикла;
				ТелоПисьма = ТелоПисьма + "</table></td></tr></table><br /><br />";
			КонецЦикла;
		КонецЦикла;
		ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f4-df88-11e0-8b5f-001517115d85")), ПараметрыПисьма);
	
	КонецЦикла;

КонецПроцедуры
 
Процедура ПолучитьПараметрыЗапроса(ЗапросОбъект, ДатаОжидания)

	ТекДата		   = ТекущаяДата();
	ЧасВСутках	   = Час(ТекДата);	
	МассивЗначений = Новый Массив;
	
	Если ЧасВСутках = 7 Тогда
		Период 								= Новый СтандартныйПериод;
		Период.Вариант 						= ВариантСтандартногоПериода.Вчера;
		ЗапросОбъект.УстановитьПараметр("ДатаНачало", Период.ДатаНачала);
		ЗапросОбъект.УстановитьПараметр("ДатаОкончание", Период.ДатаОкончания);
		МассивЗначений.Добавить(Перечисления.КТС_СпособДоставки.Самовывоз);
		МассивЗначений.Добавить(Перечисления.КТС_СпособДоставки.ПоставщикомДоДверей);
		
		ЗапросОбъект.УстановитьПараметр("МассивЗначений", МассивЗначений);
	КонецЕсли;
	
	Если ЧасВСутках = 16 Тогда
		Период 								= Новый СтандартныйПериод;
		Период.Вариант 						= ВариантСтандартногоПериода.Сегодня;
		ЗапросОбъект.УстановитьПараметр("ДатаНачало", Период.ДатаНачала);
		ЗапросОбъект.УстановитьПараметр("ДатаОкончание", Период.ДатаОкончания);
		МассивЗначений.Добавить(Перечисления.КТС_СпособДоставки.НаСкладПеревозчика);
		ЗапросОбъект.УстановитьПараметр("МассивЗначений", МассивЗначений);
	КонецЕсли;
	
	
КонецПроцедуры // ПолучитьПараметрыЗапроса()
  