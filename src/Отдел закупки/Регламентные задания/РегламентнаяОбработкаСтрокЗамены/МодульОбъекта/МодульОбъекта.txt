
#Область ПрограммныйИнтерфейс

Процедура ВыпонитьСогласование() Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСогласование();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	
	Если Не УстановитьБлокировкуРегистра(РезультатЗапроса) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Если Не ОбработатьРезультатыЗапроса(РезультатЗапроса) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию(); 

КонецПроцедуры
 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаСогласование()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура					КАК Номенклатура,
	               |	ЗаявкаСервисногоЦентра			КАК ЗаявкаСервисногоЦентра,
	               |	Документ						КАК Документ,
				   |	НоменклатураВозвратаПоставщику  КАК НоменклатураВозвратаПоставщику,
	               |	Цена                            КАК Цена
	               |ИЗ
	               |	РегистрСведений.Замена_СогласованиеНоменклатуры
	               |ГДЕ
	               |	Согласовано = ИСТИНА";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСогласование()

Функция УстановитьБлокировкуРегистра(РезультатЗапроса)

	Блокировка 							= Новый БлокировкаДанных;
	ЭлементБлокировки 					= Блокировка.Добавить("РегистрСведений.Замена_СогласованиеНоменклатуры");
	ЭлементБлокировки.ИсточникДанных 	= РезультатЗапроса;
	ЭлементБлокировки.Режим				= РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", 			"Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаявкаСервисногоЦентра", 	"ЗаявкаСервисногоЦентра");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Документ", 				"Документ");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		Заголовок = НСтр("ru='Не удалось заблокировать регистр согласования номенклатуры'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Описание  = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(Заголовок, УровеньЖурналаРегистрации.Ошибка, , , Описание);
		ОповеститьОбОшибкеВSlack(Заголовок, Описание);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // УстановитьБлокировкуРегистра()

Функция ОбработатьРезультатыЗапроса(РезультатЗапроса)

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПерепроводитьДокумент = Ложь;
		
		Если МассивТипов.Найти(ТипЗнч(Выборка.Документ)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДокументОбъект 	= Выборка.Документ.ПолучитьОбъект();
		Товары			= ДокументОбъект.Товары;
		
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			СтруктураПоиска = Новый Структура("Номенклатура", Выборка.НоменклатураВозвратаПоставщику);
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура", Выборка.Номенклатура);
		КонецЕсли;
		
		РезультатыПоиска = Товары.НайтиСтроки(СтруктураПоиска);
		
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			
			Если РезультатПоиска.Цена <> Выборка.Цена Тогда
				
				ПерепроводитьДокумент 	= Истина;				
				РезультатПоиска.Цена 	= Выборка.Цена;
				СтруктураДействий 		= Новый Структура;
				ЗаполнитьСтруктуруДействий(СтруктураДействий, ДокументОбъект);
				
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
				КонецЕсли;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(РезультатПоиска, СтруктураДействий, Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 И ПерепроводитьДокумент Тогда
			СтрокаТаблицы 		= ДокументОбъект.РасшифровкаПлатежа[0];
			СтрокаТаблицы.Сумма = ДокументОбъект.Товары.Итог("СуммаСНДС");
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
		Если ПерепроводитьДокумент Тогда
			Попытка
			    ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);		
			Исключение
				Заголовок = НСтр("ru='Не удалось провести документ по замене.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				Описание  = ОписаниеОшибки();
			    ЗаписьЖурналаРегистрации(Заголовок, УровеньЖурналаРегистрации.Ошибка, , , Описание);
				ОповеститьОбОшибкеВSlack(Заголовок, Описание);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.Замена_СогласованиеНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.ЗаявкаСервисногоЦентра.Установить(Выборка.ЗаявкаСервисногоЦентра);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		Попытка
			НаборЗаписей.Записать();    		
		Исключение
		    Заголовок = НСтр("ru='Не удалось удалить запись из регистра замены.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Описание  = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(Заголовок, УровеньЖурналаРегистрации.Ошибка, , , Описание);
			ОповеститьОбОшибкеВSlack(Заголовок, Описание);
			Возврат Ложь;
		КонецПопытки;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ОбработатьРезультатыЗапроса()
 
Процедура ЗаполнитьСтруктуруДействий(СтруктураДействий,ОбъектДокумента)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДокумента);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"					,СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС"					,СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
КонецПроцедуры

Процедура ОповеститьОбОшибкеВSlack(Заголовок, ОписаниеОшибки)
	
	МассивПрикреплений = Новый Массив;
	СтруктураПрикреплений = git_Slack.ПолучитьСтруктуруПрикреплений();
	СтруктураПрикреплений.Вставить("fallback",  Заголовок);
	СтруктураПрикреплений.Вставить("text",      ОписаниеОшибки);
	СтруктураПрикреплений.Вставить("color",     "danger");
	МассивПрикреплений.Добавить(СтруктураПрикреплений);

	СтруктураДанных = git_Slack.ПолучитьПустуюСтруктуруДанных();
	СтруктураДанных.Вставить("username",    "Base (yt11)");
	СтруктураДанных.Вставить("icon_emoji",  ":rage2:");
	СтруктураДанных.Вставить("channel",     "#general");
	СтруктураДанных.Вставить("attachments", МассивПрикреплений);
	git_Slack.ОтправитьДанные("ktchat.slack.com", "x2VEjiOJKl2UnSA5t2DinjEt", СтруктураДанных);
	
КонецПроцедуры // ОповеститьОбОшибкеВSlack()

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.0";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. обработка строк замены");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обработка строк замены [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. рассылка по замене [" + Версия + "]", "ВыпонитьСогласование();", "ВызовСерверногоМетода");
		
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти