
#Область ПрограммныйИнтерфейс

// Автоматически рассчитывает товарные категории для номенклатуры которой нет в наличии
//
// Параметры:
//  Нет
//
Процедура РассчитатьТоварныеКатегории() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск регламентного задания: Регл. автоустановка ТК'")
							, УровеньЖурналаРегистрации.Информация, 
							, 
							, НСтр("ru = 'Начало выполнения'"));
	
	СписокВидовЦен = Новый ТаблицаЗначений;
	СписокВидовЦен.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)));
	СписокВидовЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	
	ТаблицаДоступныеВидыЦен = ПолучитьДоступныеВидыЦен();
	
	Для Индекс = 0 По ТаблицаДоступныеВидыЦен.Количество()-1 Цикл
		НоваяСтрока					= СписокВидовЦен.Добавить();
		НоваяСтрока.ИндексКолонки	= Индекс;
		НоваяСтрока.ВидЦены			= ТаблицаДоступныеВидыЦен[Индекс].ВидЦены;
	КонецЦикла;	
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ПолучитьТекстЗапросаРасчитатьТоварнуюКатегориюНоменклатуры(СписокВидовЦен);
	Запрос.УстановитьПараметр("ПустаяКатегория", Справочники.ТоварныеКатегории.ПустаяСсылка());
	Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
		Запрос.УстановитьПараметр("ВидЦены"+ЭлементСписка.ИндексКолонки ,ЭлементСписка.ВидЦены);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка() Тогда 
			Продолжить;
		КонецЕсли;
		
		СправочникСсылка = Выборка.Ссылка; 
		СправочникОбъект					= СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ОбменДанными		= Ложь;
		СправочникОбъект.ТоварнаяКатегория	= Выборка.ТоварнаяКатегория;
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическая установка ТК'"),
			УровеньЖурналаРегистрации.Ошибка,,
			СправочникСсылка,
			ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;
										  
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Завершение регламентного задания: Регл. автоустановка ТК'")
							, УровеньЖурналаРегистрации.Информация, 
							, 
							, НСтр("ru = 'Успешно завершено'"));
КонецПроцедуры
		
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу доступных видов цен
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ТаблицаЗначений   - доступные виды цен
//
Функция ПолучитьДоступныеВидыЦен()

	Запрос			= Новый Запрос;
	Запрос.Текст	= ПолучитьТекстЗапросаДоступныеВидыЦен();
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДоступныеВидыЦен()

// Возвращает текст запроса поиска доступных видов цен
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаДоступныеВидыЦен()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Период) КАК Период,
		|	ВидЦены
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, )
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидЦены";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДоступныеВидыЦен()

// Возвращает текст запроса рассчета товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаРасчитатьТоварнуюКатегориюНоменклатуры(СписокВидовЦен)
	
	ШаблонСоединенияЦены	=	"ЕСТЬNULL(КешЦен%Индекс%.Цена, 0) 			КАК Цена%Индекс%,";
	ШаблонВыбораЦены		= 
								"
								|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ АктуальнаяНоменклатура) И ВидЦены = &ВидЦены%Индекс%) КАК КешЦен%Индекс%
								|ПО 
								|АктуальнаяНоменклатура.Ссылка = КешЦен%Индекс%.Номенклатура
								|";
			
	ШаблонВидаЦены	=
						"			
						|КОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс%
						|ТОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс% 
						|";
	
	ШаблонЦеныНижняяГраница =
						"КОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс%
						|ТОГДА АктуальнаяНоменклатура.Цена%Индекс% >= КешНастройки.НижняяГраница 
						|";
	
	ШаблонЦеныВерхняяГраница =
						"КОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс%
						|ТОГДА АктуальнаяНоменклатура.Цена%Индекс% < КешНастройки.ВерхняяГраница 
						|";

	ТекстЗапроса =  
		////////////////////////////////////////////////////////////////////////////////
		//0. Получаем доступные склады
		"ВЫБРАТЬ
		|	Склад
		|ПОМЕСТИТЬ ДоступныеСклады
		|ИЗ
		|	РегистрСведений.Модуль_ДоступныеСклады 
		|ГДЕ
		|	Основной = ИСТИНА
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//1. Получаем дату последней запись настроек товарных категорий
		|ВЫБРАТЬ
		|	МАКСИМУМ(Период)					КАК Период,
		|	ВидНоменклатуры						КАК ВидНоменклатуры
		|ПОМЕСТИТЬ КешПоследняяЗапись
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, ) 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидНоменклатуры,
		|	Период
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//2. Получаем настройки товарных категорий для вида номенклатуры и цены
		|ВЫБРАТЬ
		|	РСНастройки.Приоритет							КАК Приоритет,
		|	РСНастройки.ТоварнаяКатегория					КАК ТоварнаяКатегория,
		|	РСНастройки.ВидЦены								КАК ВидЦены,
		|	РСНастройки.НижняяГраница						КАК НижняяГраница,
		|	РСНастройки.ВерхняяГраница						КАК ВерхняяГраница,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РСНастройки.Содержит, 1, 3) = ""   ""
		|			ТОГДА РСНастройки.Содержит
		|		ИНАЧЕ ""%"" + РСНастройки.Содержит + ""%""
		|	КОНЕЦ											КАК Содержит,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РСНастройки.НеСодержит, 1, 3) = ""   ""
		|			ТОГДА РСНастройки.НеСодержит
		|		ИНАЧЕ ""%"" + РСНастройки.НеСодержит + ""%""
		|	КОНЕЦ КАК										НеСодержит,
		|	РСНастройки.Производитель						КАК Производитель,
		|	РСНастройки.ВидНоменклатуры						КАК ВидНоменклатуры
		|ПОМЕСТИТЬ КешНастройки
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, ) КАК РСНастройки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПоследняяЗапись КАК КешПоследняяЗапись
		|	ПО 
		|		РСНастройки.Период				=	КешПоследняяЗапись.Период
		|	И	РСНастройки.ВидНоменклатуры		=	КешПоследняяЗапись.ВидНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РСНастройки.Приоритет,
		|	РСНастройки.ВидНоменклатуры
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//3. Получаем "Прочие" товарные категорий для заданых в настройках видов номенклатуры
		|ВЫБРАТЬ
		|	Ссылка							КАК ТоварнаяКатегория,
		|	Владелец						КАК ВидНоменклатуры
		|ПОМЕСТИТЬ КешТоварныеКатегорииПрочие
		|ИЗ
		|	Справочник.ТоварныеКатегории
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И Наименование = ""Прочие""
		|	И Владелец В (ВЫБРАТЬ ВидНоменклатуры ИЗ КешПоследняяЗапись)
		|	И НЕ ЭтоГруппа
		|;
		|	
		////////////////////////////////////////////////////////////////////////////////
		//4. Формируем таблицу актуальной номенклатуры  
		|ВЫБРАТЬ
		|	КешНоменклатуры.Ссылка					КАК Ссылка,
		|	КешПоследняяЗапись.ВидНоменклатуры		КАК ВидНоменклатуры,
		|	КешНоменклатуры.Ссылка.Наименование		КАК Наименование,
		|	КешНоменклатуры.Ссылка.Производитель	КАК Производитель
		|ПОМЕСТИТЬ АктуальнаяНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК КешНоменклатуры
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПоследняяЗапись КАК КешПоследняяЗапись
		|	ПО 
		|		КешНоменклатуры.ВидНоменклатуры = КешПоследняяЗапись.ВидНоменклатуры
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,
		|				Склад В
		|					(ВЫБРАТЬ
		|						ДоступныеСклады.Склад
		|					ИЗ
		|						ДоступныеСклады)) КАК ТоварыВНаличии
		|	ПО 
		|		КешНоменклатуры.Ссылка = ТоварыВНаличии.Номенклатура
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, ) КАК АктуальностьНоменклатуры
		|	ПО 
		|		КешНоменклатуры.Ссылка = АктуальностьНоменклатуры.Номенклатура
		|ГДЕ
		|	НЕ КешНоменклатуры.ПометкаУдаления
		|	И НЕ КешНоменклатуры.ЭтоГруппа
		|	И ЕСТЬNULL(ТоварыВНаличии.ВНаличииОстаток, 0) = 0
		|	И ЕСТЬNULL(АктуальностьНоменклатуры.Актуально, ЛОЖЬ) = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//5. Формируем цены для актуальной номенклатуры  
		|ВЫБРАТЬ
		|	АктуальнаяНоменклатура.Ссылка			КАК Ссылка,
		|	АктуальнаяНоменклатура.ВидНоменклатуры	КАК ВидНоменклатуры,
		|	АктуальнаяНоменклатура.Наименование		КАК Наименование,";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонСоединенияЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|	АктуальнаяНоменклатура.Производитель	КАК Производитель
		|ПОМЕСТИТЬ КешАктуальнаяНоменклатура
		|ИЗ
		|	АктуальнаяНоменклатура КАК АктуальнаяНоменклатура
		|";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонВыбораЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;

		ТекстЗапроса = ТекстЗапроса +
		"
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//6. Рассчитываем ТК для актуальной номенклатуры согласно настроек  
		|ВЫБРАТЬ
		|	АктуальнаяНоменклатура.Ссылка 					КАК Ссылка,
		|	КешНастройки.ВидЦены							КАК ВидЦены,
		|	АктуальнаяНоменклатура.ВидНоменклатуры			КАК ВидНоменклатуры,
		|	МИНИМУМ(КешНастройки.Приоритет) 				КАК Приоритет
		|ПОМЕСТИТЬ КешРассчитанныхКатегорий
		|ИЗ
		|	КешАктуальнаяНоменклатура КАК АктуальнаяНоменклатура
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешНастройки КАК КешНастройки
		|	ПО 
		|		АктуальнаяНоменклатура.ВидНоменклатуры = КешНастройки.ВидНоменклатуры
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ИСТИНА ";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонВидаЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"		КОНЕЦ)
		|	
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.НижняяГраница = 0
		|			ТОГДА ИСТИНА ";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл
			ТекстЗапроса = ТекстЗапроса+ СтрЗаменить(ШаблонЦеныНижняяГраница,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"		КОНЕЦ)
		|		
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.ВерхняяГраница = 0
		|			ТОГДА ИСТИНА ";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл
			ТекстЗапроса = ТекстЗапроса+ СтрЗаменить(ШаблонЦеныВерхняяГраница,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"		КОНЕЦ)
		|
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ 
		|			АктуальнаяНоменклатура.Производитель = КешНастройки.Производитель
		|		КОНЕЦ)
		|		
		|	И	(ВЫБОР
		|			КОГДА ПОДСТРОКА(КешНастройки.Содержит, 1, 3) = ""   ""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ 
		|			АктуальнаяНоменклатура.Наименование ПОДОБНО КешНастройки.Содержит
		|		КОНЕЦ)
		|		
		|	И	(ВЫБОР
		|			КОГДА ПОДСТРОКА(КешНастройки.НеСодержит, 1, 3) = ""   ""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ 
		|			НЕ АктуальнаяНоменклатура.Наименование ПОДОБНО КешНастройки.НеСодержит
		|		КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальнаяНоменклатура.Ссылка,
		|	АктуальнаяНоменклатура.ВидНоменклатуры,
		|	КешНастройки.ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//7. Таблица рассчитанныех товарных категорий
		|ВЫБРАТЬ
		|	КешРассчитанныхКатегорий.Ссылка			КАК Ссылка,
		|	КешНастройки.ТоварнаяКатегория			КАК ТоварнаяКатегория
		|ИЗ
		|	КешРассчитанныхКатегорий КАК КешРассчитанныхКатегорий
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешНастройки КАК КешНастройки
		|	ПО 
		|		КешРассчитанныхКатегорий.Приоритет			=	КешНастройки.Приоритет
		|	И	КешРассчитанныхКатегорий.ВидНоменклатуры	=	КешНастройки.ВидНоменклатуры
		|	И	КешРассчитанныхКатегорий.ВидЦены			=	КешНастройки.ВидЦены
		|ГДЕ
		|	КешНастройки.ТоварнаяКатегория <> КешРассчитанныхКатегорий.Ссылка.ТоварнаяКатегория
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КешНоменклатуры.Ссылка,
		|	ЕСТЬNULL(КешТоварныеКатегорииПрочие.ТоварнаяКатегория, &ПустаяКатегория)
		|ИЗ
		|	Справочник.Номенклатура КАК КешНоменклатуры
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСклады)) КАК ТоварыВНаличии
		|	ПО 
		|		КешНоменклатуры.Ссылка = ТоварыВНаличии.Номенклатура
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, ) КАК АктуальностьНоменклатуры
		|	ПО 
		|		КешНоменклатуры.Ссылка = АктуальностьНоменклатуры.Номенклатура
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ КешТоварныеКатегорииПрочие КАК КешТоварныеКатегорииПрочие
		|	ПО 
		|		КешНоменклатуры.ВидНоменклатуры = КешТоварныеКатегорииПрочие.ВидНоменклатуры
		|ГДЕ
		|	НЕ КешНоменклатуры.ПометкаУдаления
		|	И НЕ КешНоменклатуры.ЭтоГруппа
		|	И ЕСТЬNULL(ТоварыВНаличии.ВНаличииОстаток, 0)	=	0
		|	И АктуальностьНоменклатуры.Актуально			=	ЛОЖЬ
		|	И КешНоменклатуры.ТоварнаяКатегория				<>	ЕСТЬNULL(КешТоварныеКатегорииПрочие.ТоварнаяКатегория, КешНоменклатуры.ТоварнаяКатегория)";	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРасчитатьТоварнуюКатегориюНоменклатуры()

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.0";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. автоустановка ТК [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. автоустановка ТК [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоустановка ТК [" + Версия + "]", "РассчитатьТоварныеКатегории();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

#КонецОбласти
