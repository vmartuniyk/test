
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРассылку() Экспорт

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаВыполненияРассылки();
	
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	ТемаПисьма = НСтр("ru='%1 працівниками СЦ проведено заміни від постачальника'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма, ТекущаяДата());
	
	ВыборкаПродактМенеджер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Кому = Новый Массив;		
	Кому.Добавить(Новый Структура("Адрес, Представление", "postavka@ktc.rovno.ua", ""));	
	
	Тело = "";
	
	Пока ВыборкаПродактМенеджер.Следующий() Цикл
		
		Тело =  Тело+ "<P><B>Продакт-менеджер: "+ Строка(ВыборкаПродактМенеджер.ПродактМенеджер)+"</B>"+						
							"<table border=""1"" cellspacing=""0"" width=""95%"" style=""font-family:ms shell dlg font-size:8""> ";
							
		Тело = Тело +
						"<tr>"
							"<td>Номенклатура</td>" +
							"<td>Цена</td>" +
							"<td>Валюта</td>" +
						"</tr>";
							
		Выборка = ВыборкаПродактМенеджер.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Тело = Тело +
						"<tr>"
							"<td>" + Выборка.Номенклатура 		+ "</td>" +
							"<td>" + Выборка.Цена				+ "</td>" +
							"<td>" + Выборка.Валюта 			+ "</td>" +
						"</tr>";

			
		КонецЦикла;
					
		Тело = Тело + "</table>";			
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Тело) Тогда
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(ТемаПисьма, Тело, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	КонецЕсли;

КонецПроцедуры
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВыполненияРассылки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.ВидНоменклатуры 	КАК ВидНоменклатуры,
	               |	Номенклатура					КАК Номенклатура,
	               |	Цена							КАК Цена,
	               |	Валюта							КАК Валюта
	               |ПОМЕСТИТЬ ТаблицаЗамен
	               |ИЗ
	               |	РегистрСведений.Замена_СогласованиеНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоответствиеПродактов.ПродактМенеджер	КАК ПродактМенеджер,
	               |	ТаблицаЗамен.Номенклатура				КАК Номенклатура,
	               |	ТаблицаЗамен.Цена						КАК Цена,
	               |	ТаблицаЗамен.Валюта						КАК Валюта
	               |ИЗ
	               |	ТаблицаЗамен КАК ТаблицаЗамен
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_СоответствиеВидНоменклатурыПродактМенеджер КАК СоответствиеПродактов
	               |		ПО ТаблицаЗамен.ВидНоменклатуры = СоответствиеПродактов.ВидНоменклатуры
				   |ИТОГИ ПО
				   |	СоответствиеПродактов.ПродактМенеджер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВыполненияРассылки()
 
Процедура ОтправитьСообщениеВСлужбуПоддерки(ПродактМенеджер)

	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ТемаПисьма = "В пользователя не заполнен адрес электронной почты";
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");	
	ТелоПисьма					= "";
	ТелоПисьма					= ТелоПисьма + " Навигационная ссылка: " + ПолучитьНавигационнуюСсылку(ПродактМенеджер) + "<br>"; 
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);

КонецПроцедуры 

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. рассылка по замене");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. рассылка по замене [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. рассылка по замене [" + Версия + "]", "ВыполнитьРассылку();", "ВызовСерверногоМетода");
		
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти