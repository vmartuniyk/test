
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРассылку() Экспорт

	ЗафиксироватьСобытиеВЖурналеРегистрации(НСтр("ru = 'Начало роботы регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), , УровеньЖурналаРегистрации.Информация);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаРассылки();
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("ДатаНачало", Дата("20140401"));
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("b81a3971-befd-11e3-80c2-001e676b0174")));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаМенеджер = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаМенеджер.Следующий() Цикл
		
		Если ПустаяСтрока(ВыборкаМенеджер.ЭлектроннаяПочта) Тогда Продолжить; КонецЕсли;
	
		ТемаПисьма  = ТекстТемыПисьмаПисьма(ВыборкаМенеджер.Менеджер);
		ТекстПисьма = ТекстЗаголовкаТекстаПисьма();
		
		ВыборкаДетальныеЗаписи = ВыборкаМенеджер.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстПисьма = ТекстПисьма + ПолучитьТекстТелаПисьма(ВыборкаДетальныеЗаписи.ЗаказПоставщику, ВыборкаДетальныеЗаписи.Партнер);
		КонецЦикла; 
		
		ТекстПисьма = ТекстПисьма + "
		|<table>";
		
		ОтправитьПисьмоПользователю(ВыборкаМенеджер.ЭлектроннаяПочта, ТемаПисьма, ТекстПисьма);
	
	КонецЦикла; 
	
	ЗафиксироватьСобытиеВЖурналеРегистрации(НСтр("ru = 'Завершение роботы регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), , УровеньЖурналаРегистрации.Информация);

КонецПроцедуры
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаРассылки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Представление 	КАК ЭлектроннаяПочта,
	               |	Ссылка 			КАК Менеджер
	               |ПОМЕСТИТЬ ЭлектроннаяПочтаПользователей
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация
	               |ГДЕ
	               |	Тип = &Тип
	               |	И Вид = &Вид
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказПоставщику				КАК ЗаказПоставщику,
	               |	ЗаказПоставщику.Партнер 	КАК Партнер,
	               |	ЗаказПоставщику.Менеджер 	КАК Менеджер
	               |ПОМЕСТИТЬ ЗаказыПоставщикамПредварительные
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПоставщикам.Обороты(&ДатаНачало, , , )
	               |ГДЕ
	               |	ЗаказПоставщику.НомерПоДаннымПоставщика = """"
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	РегистрДвижения.Распоряжение  КАК ЗаказПоставщику,
				   |	ВсеЗаказыПоставщикам.Партнер  КАК Партнер,
				   |	ВсеЗаказыПоставщикам.Менеджер КАК Менеджер
				   |ПОМЕСТИТЬ ЗаказыПоставщикам
				   |ИЗ
				   |	РегистрНакопления.ДвижениеТоваров.Обороты(&ДатаНачало, , Регистратор, Распоряжение В (ВЫБРАТЬ ЗаказПоставщику ИЗ ЗаказыПоставщикамПредварительные)) КАК РегистрДвижения
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыПоставщикамПредварительные КАК ВсеЗаказыПоставщикам
				   |	ПО РегистрДвижения.Распоряжение = ВсеЗаказыПоставщикам.ЗаказПоставщику
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ПоставщикиБезРассылки
	               |ИЗ
	               |	Справочник.Партнеры.ДополнительныеРеквизиты
	               |ГДЕ
	               |	Свойство = &Свойство
	               |	И Значение = ИСТИНА
	               |	И Ссылка В
	               |			(ВЫБРАТЬ
	               |				Партнер
	               |			ИЗ
	               |				ЗаказыПоставщикам)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыПоставщикам.ЗаказПоставщику				КАК ЗаказПоставщику,
	               |	ЗаказыПоставщикам.Партнер						КАК Партнер,
	               |	ЗаказыПоставщикам.Менеджер						КАК Менеджер,
	               |	ЭлектроннаяПочтаПользователей.ЭлектроннаяПочта	КАК ЭлектроннаяПочта
	               |ИЗ
	               |	ЗаказыПоставщикам КАК ЗаказыПоставщикам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЭлектроннаяПочтаПользователей КАК ЭлектроннаяПочтаПользователей
	               |		ПО ЗаказыПоставщикам.Менеджер = ЭлектроннаяПочтаПользователей.Менеджер
	               |ГДЕ                      
	               |	ЗаказыПоставщикам.Партнер НЕ В
	               |				(ВЫБРАТЬ
	               |					Ссылка
	               |				ИЗ
	               |					ПоставщикиБезРассылки)
	               |ИТОГИ 
				   |	МАКСИМУМ(ЭлектроннаяПочтаПользователей.ЭлектроннаяПочта)
				   |ПО
				   |	ЗаказыПоставщикам.Менеджер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРассылки()


// Получает необходимый текст темы письма (из менеджером в заголовку)
//
// Парамеры:
//  Менеджер - СправочникСсылка.Пользователи - ссылка на пользователя, имя которого нужно включить в заголовок письма.
//
// Возвращаемое значение:
//  Строка - значение заговлока письма
//
Функция ТекстТемыПисьмаПисьма(Менеджер)

	ТекстТемы = НСтр("ru='%1. Необходимо заполнить номер накладной поставщика в следующих заказах.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстТемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстТемы, Менеджер.Наименование);
	Возврат ТекстТемы;

КонецФункции // ТекстЗаговловкаПисьма()

// Получаем заголовок текста письма
//
// Возвращаемое значение:
//  Строка - текст заголовка
Функция ТекстЗаголовкаТекстаПисьма()

	ТекстЗаголовка = "
	|<table style='border-collapse: collapse; border:3px solid white;'>
	|<tr>
	|	<td bgcolor=""F4ECC5"" align=""center""><h3>Необходимо установить номера накладных поставщиков в следующих заказах</h3></td>
	|</tr>";
	
	Возврат ТекстЗаголовка;

КонецФункции // ТекстЗаголовкаТекстаПисьма()

// Получаем блок с информацией по заказу в присоединяем его в тело письма.
// 
// Параметры:
//  ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику - 
//
// Возвращаемое значение:
//  Строка - html код блока тела письма
// 
Функция ПолучитьТекстТелаПисьма(ЗаказПоставщику, Поставщик)

	ТекстПисьма = "
	|<tr>
	|<td width=""100%"">
	|<table style='border-collapse: collapse; border:1px solid black;'>
	|<tr>
	|	<td style='border-collapse: collapse; border:1px solid white;' bgcolor=""FFDCDC"" align=""left""><b>Поставщик</b></td>
	|	<td style='border-collapse: collapse; border:1px solid white;' bgcolor=""FAFAD2"">%1</td>
	|</tr>
	|<tr>
	|	<td style='border-collapse: collapse; border:1px solid white;' bgcolor=""FFDCDC"" align=""left""><b>Заказ поставщику</b></td>
	|	<td style='border-collapse: collapse; border:1px solid white;' bgcolor=""FAFAD2"">%2</td>
	|</tr>
	|<tr>
	|	<td style='border-collapse: collapse; border:1px solid white;' bgcolor=""FFDCDC"" align=""left""><b>Навигационная ссылка</b></td>
	|	<td style='border-collapse: collapse; border:1px solid white;' bgcolor=""FAFAD2"">%3</td>
	|</tr>
	|</table>
	|</td>
	|</tr>";
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, Поставщик, ЗаказПоставщику, ПолучитьНавигационнуюСсылку(ЗаказПоставщику));
	
	Возврат ТекстПисьма;
		
КонецФункции // ПолучитьТелоПисьма()
 



// Отправляет письмо пользователю
//
// Параметры:
// АдресЭлектроннойПочты    - Строка		- Адрес электронной почты адресата.
// ТемаПисьма   			- Строка 		- Тема письма.
// ТекстПисьма  			- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОтправитьПисьмоПользователю(АдресЭлектроннойПочты, ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", АдресЭлектроннойПочты, ""));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры


// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическая рассылка информации по заказам из незаполненными номерами накладных поставщиков.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
		
КонецПроцедуры

 
#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "0.0.013";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. напоминание по заполнению номера поставщика [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. напоминание по заполнению номера поставщика [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. напоминание по заполнению номера поставщика [" + Версия + "]", "ВыполнитьРассылку();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры
	
#КонецОбласти 