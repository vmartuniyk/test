
////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС АВТОМАТИЧЕСКИХ ТЕСТОВ

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ВыполнитьАвтоматическоеДвижениеТоваров() Экспорт
	
	Перем ТекущаяНоменклатура, КоличествоОстаток;
	АвторизированныйПользователь 	= ПараметрыСеанса.ТекущийПользователь;
	АвторизированноеПодразделение 	= АвторизированныйПользователь.ТекущееПодразделение;
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Автоматическое движение товаров'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация, 
			,
			,
			НСтр("ru = 'Начало автоматического движения товаров'"));

	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СписатьТоварВНаличии = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
		Новый УникальныйИдентификатор("482344ab-fdce-11e2-883c-001e673c80fc"));	                                      // Пометка автореализция
	Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")); // Склад соборна
	
	
	
	// Автоматически отменяем заказы клиентов
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАвтоматическойОтменыЗаказов();
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		
		ЕстьИзменения = Ложь;
		
		Параметры1 = ПолучитьПараметрыОтбора(ВыборкаЗаказов);	
		ПараметрыСостоянияОбеспечения = ПолучитьПараметрыСостоянияОбеспечения(Параметры1);
		
		ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Истина); // Возможно нужно будет разделить
		ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать(); 
		ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости);
		
		Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
			
			Если СтрокаТовары.КодСтроки = ВыборкаЗаказов.КодСтроки Тогда
				
				ЗаказКлиентаОбъект = ВыборкаЗаказов.Ссылка.ПолучитьОбъект();
				НайденнаяСтрока = ЗаказКлиентаОбъект.Товары.Найти(ВыборкаЗаказов.КодСтроки, "КодСтроки");
				Если НайденнаяСтрока = Неопределено Тогда
					ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу, данные были изменены другим пользователем'");
					ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
				  	Прервать;
				КонецЕсли;
				
				// Скоректируем резерв на ту номенклатуру, что уже есть в наличии под этот заказ клиента
				Если СтрокаТовары.Вналичии > 0 Тогда
					
					ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
					ДокументОбъект.Заполнить(ВыборкаЗаказов.Ссылка);
					ДокументОбъект.Дата = ТекущаяДата();
					ДокументОбъект.УстановитьНовыйНомер();
					ДокументОбъект.Товары.Очистить();
					
					НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.Количество = СтрокаТовары.Вналичии * СтрокаТовары.УпаковкаКоэффициент;
					НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовары.Вналичии;
					НоваяСтрокаТовары.ИсходноеНазначение = СтрокаТовары.Назначение;
					
					НачатьТранзакцию();
					
						Попытка
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
						Исключение
							ОтменитьТранзакцию();
							ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
							ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
						  	Прервать;
						КонецПопытки;
						
						Если СтрокаТовары.ВНаличии < СтрокаТовары.КоличествоУпаковок Тогда // Часть номенклатуры уже есть в наличии под заказ
							СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары);	
						ИначеЕсли СтрокаТовары.ВНаличии <> НайденнаяСтрока.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
							СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары);
							НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
						Иначе // Вся номенклатуры уже есть в наличии под заказ
							НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
							НайденнаяСтрока.Отменено = Истина;
							НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
						КонецЕсли;
						
						Попытка
							ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
							ЕстьИзменения = Истина;
						Исключение
							ОтменитьТранзакцию();
							ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
							ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
						  	Прервать;
						КонецПопытки;
						
					ЗафиксироватьТранзакцию();
						
				КонецЕсли;
 
				// Скоректируем резерв на ту номенклатуру, которой нет в наличии под этот заказ клиента
				Если СтрокаТовары.КоличествоУпаковок <> СтрокаТовары.Вналичии Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказНеЗаказано();
					Запрос.УстановитьПараметр("Склад", СтрокаТовары.Склад);
					Запрос.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
					Запрос.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
					ОбеспечениеНеЗаказано = Запрос.Выполнить().Выбрать();
					Если ОбеспечениеНеЗаказано.Следующий() Тогда 
						Если СтрокаТовары.НеОбеспечено > 0 И СтрокаТовары.НеОбеспечено > ОбеспечениеНеЗаказано.КПоступлениюОстаток Тогда
							
							КоличествоКЗаказу = СтрокаТовары.НеОбеспечено - ОбеспечениеНеЗаказано.КПоступлениюОстаток;	
							Если КоличествоКЗаказу < СтрокаТовары.КоличествоУпаковок Тогда // Часть номенклатуры уже заказана под заказ
								СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, КоличествоКЗаказу);	
							ИначеЕсли СтрокаТовары.КоличествоУпаковок <> НайденнаяСтрока.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
								СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, КоличествоКЗаказу);
								НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
							Иначе // Всю номенклатуру нужно заказать под заказ
								НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
								НайденнаяСтрока.Отменено = Истина;
								НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
							КонецЕсли;	
							
							Попытка
								ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
								ЕстьИзменения = Истина;
							Исключение
								ОписаниеОшибки = НСтр("ru = 'Не удалось отменить еще не заказанную позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
								ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
							КонецПопытки;
							
						КонецЕсли;
						
						Если СтрокаТовары.ОбеспеченоПоступлением > 0 Тогда
							ЗапросЗаказыПоставщику = Новый Запрос;
							ЗапросЗаказыПоставщику.Текст = ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам();
							ЗапросЗаказыПоставщику.УстановитьПараметр("Склад", СтрокаТовары.Склад);
							ЗапросЗаказыПоставщику.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
							ЗапросЗаказыПоставщику.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
							ВыборкаЗаказыПоставщику = ЗапросЗаказыПоставщику.Выполнить().Выбрать();
							Пока ВыборкаЗаказыПоставщику.Следующий() Цикл
								ОповеститьОтветственногоЗаЗаказПоставщику(ВыборкаЗаказыПоставщику.ЗаказПоставщику, ВыборкаЗаказов.Ссылка, СтрокаТовары.Номенклатура, ВыборкаЗаказыПоставщику.ЗаказПоставщику.Менеджер);	
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
					//  Скоректируем резерв на ту номенклатуру, которая уже заказана
					ОтмененоРегламентом = 0;
					
					Запрос = Новый Запрос;
					Запрос.Текст = ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказЗаказано();
					Запрос.УстановитьПараметр("Склад", СтрокаТовары.Склад);
					Запрос.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
					Запрос.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
					ОбеспечениеЗаказано = Запрос.Выполнить().Выбрать();
					Если ОбеспечениеЗаказано.Следующий() Тогда
						
						КоличествоКПоступлению = ОбеспечениеЗаказано.КПоступлениюОстаток;
						
						// Проверяем на заказы на перемещения
						ЗапросЗаказыНаПеремещения = Новый Запрос;
						ЗапросЗаказыНаПеремещения.Текст = ПолучитьТекстЗапросаДляОтменыЗаказовНаПеремещения();
						ЗапросЗаказыНаПеремещения.УстановитьПараметр("Склад", ОбеспечениеЗаказано.Склад);
						ЗапросЗаказыНаПеремещения.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
						ЗапросЗаказыНаПеремещения.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
						РезультатПакета = ЗапросЗаказыНаПеремещения.ВыполнитьПакет();
						ВыборкаИзРгЗНП = РезультатПакета[1].Выбрать();
						ВыборкаИзРгОЗ = РезультатПакета[2].Выбрать();
						Пока ВыборкаИзРгЗНП.Следующий() Цикл
								
							ПараметрыОтбора_1 = ПолучитьПараметрыОтбора(ВыборкаИзРгЗНП);
	                        ПараметрыСостоянияОбеспечения_1 = ПолучитьПараметрыСостоянияОбеспечения(ПараметрыОтбора_1);
							ОбработкаСостояниеОбеспечения_1 = Обработки.СостояниеОбеспечения.Создать(); 
							ОбработкаСостояниеОбеспечения_1.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения_1, ПараметрыВидимости);
							Для каждого СтрокаТовары_1 Из ОбработкаСостояниеОбеспечения_1.Товары Цикл
																
								Если СтрокаТовары_1.КодСтроки = ВыборкаИзРгЗНП.КодСтроки Тогда
								
									ЗаказНаПеремещениеОбъект = ВыборкаИзРгЗНП.Ссылка.ПолучитьОбъект();
									НайденнаяСтрока_1 = ЗаказНаПеремещениеОбъект.Товары.Найти(ВыборкаИзРгЗНП.КодСтроки, "КодСтроки");
									Если НайденнаяСтрока_1 = Неопределено Тогда
										ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу, данные были изменены другим пользователем'");
										ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
									  	Прервать;
									КонецЕсли;
									
									Если СтрокаТовары_1.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
										
										Если СтрокаТовары_1.ВНаличии <> НайденнаяСтрока_1.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
											СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1);
										Иначе // Вся номенклатуры уже есть в наличии под заказ
											НайденнаяСтрока_1.Отменено = Истина;
										КонецЕсли;
										
										НачатьТранзакцию();
										
											Попытка
												ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
											Исключение
												ОтменитьТранзакцию();
												ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ на перемещение"" - вариант обеспечения ""СоСклада"".'") + ОписаниеОшибки();
												ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
											  	Прервать;
											КонецПопытки;
											
											Если СтрокаТовары_1.ВНаличии + ОтмененоРегламентом < СтрокаТовары.КоличествоУпаковок Тогда
												СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);	
											ИначеЕсли СтрокаТовары_1.ВНаличии + ОтмененоРегламентом <> НайденнаяСтрока.КоличествоУпаковок Тогда
												СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);
												НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;	
											Иначе
												НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
												НайденнаяСтрока.Отменено = Истина;
												НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));	
											КонецЕсли;	
											
											Попытка
												ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
												ЕстьИзменения = Истина;
											Исключение
												ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ клиента"" после отмены позиции документа ""Заказ на перемещение"".'") + ОписаниеОшибки();
												ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
											КонецПопытки;
											
										ЗафиксироватьТранзакцию();
										
										ОтмененоРегламентом = ОтмененоРегламентом + СтрокаТовары_1.ВНаличии;
										
									ИначеЕсли СтрокаТовары_1.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
										
										Если СтрокаТовары_1.ВНаличии > 0 Тогда
											
											ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
											ДокументОбъект.Заполнить(ВыборкаИзРгЗНП.Ссылка);
											ДокументОбъект.Дата = ТекущаяДата();
											ДокументОбъект.УстановитьНовыйНомер();
											ДокументОбъект.Товары.Очистить();
											
											НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары_1);
											НоваяСтрокаТовары.Количество = СтрокаТовары_1.Вналичии * СтрокаТовары_1.УпаковкаКоэффициент;
											НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовары_1.Вналичии;
											НоваяСтрокаТовары.ИсходноеНазначение = СтрокаТовары_1.Назначение;
											
											НачатьТранзакцию();
					
												Попытка
													ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОтменитьТранзакцию();
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												  	Прервать;
												КонецПопытки;
												
												Если СтрокаТовары_1.ВНаличии < СтрокаТовары_1.КоличествоУпаковок Тогда // Часть номенклатуры уже есть в наличии под заказ
													СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1);	
												ИначеЕсли СтрокаТовары_1.ВНаличии <> НайденнаяСтрока_1.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
													СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1);
												Иначе // Вся номенклатуры уже есть в наличии под заказ
													НайденнаяСтрока_1.Отменено = Истина;
												КонецЕсли;
												
												Попытка
													ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОтменитьТранзакцию();
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												  	Прервать;
												КонецПопытки;
												
												Если СтрокаТовары_1.ВНаличии + ОтмененоРегламентом < СтрокаТовары.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);	
												ИначеЕсли СтрокаТовары_1.ВНаличии + ОтмененоРегламентом <> НайденнаяСтрока.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;	
												Иначе
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
													НайденнаяСтрока.Отменено = Истина;
													НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));	
												КонецЕсли;	
												
												Попытка
													ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
													ЕстьИзменения = Истина;
												Исключение
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ клиента"" после документа ""Корректировка назначения"" и отмены позиции документа ""Заказ на перемещение"".'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												КонецПопытки;
												
											ЗафиксироватьТранзакцию();
										
											ОтмененоРегламентом = ОтмененоРегламентом + СтрокаТовары_1.ВНаличии;
											
										КонецЕсли;
										
										
										Если СтрокаТовары_1.ОбеспеченоПоступлением > 0 Тогда
											ЗапросЗаказыПоставщику = Новый Запрос;
											ЗапросЗаказыПоставщику.Текст = ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам();
											ЗапросЗаказыПоставщику.УстановитьПараметр("Склад", ОбеспечениеЗаказано.Склад);
											ЗапросЗаказыПоставщику.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
											ЗапросЗаказыПоставщику.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
											ВыборкаЗаказыПоставщику = ЗапросЗаказыПоставщику.Выполнить().Выбрать();
											Пока ВыборкаЗаказыПоставщику.Следующий() Цикл
												ОповеститьОтветственногоЗаЗаказПоставщику(ВыборкаЗаказыПоставщику.ЗаказПоставщику, ВыборкаЗаказов.Ссылка, СтрокаТовары.Номенклатура, ВыборкаЗаказыПоставщику.ЗаказПоставщику.Менеджер);	
											КонецЦикла;
										КонецЕсли;
										
										
										Если СтрокаТовары_1.НеОбеспечено > 0 Тогда
											
											РазницаОбеспечения = СтрокаТовары_1.НеОбеспечено;
											Если КоличествоКПоступлению > 0 Тогда
												Если КоличествоКПоступлению >= СтрокаТовары_1.НеОбеспечено Тогда
													КоличествоКПоступлению = КоличествоКПоступлению - СтрокаТовары_1.НеОбеспечено;
													Продолжить;
												ИначеЕсли КоличествоКПоступлению < СтрокаТовары_1.НеОбеспечено Тогда
													РазницаОбеспечения = СтрокаТовары_1.НеОбеспечено - КоличествоКПоступлению;
													КоличествоКПоступлению = 0;	
												КонецЕсли;
											КонецЕсли;
											
											Если СтрокаТовары_1.НеОбеспечено <> НайденнаяСтрока_1.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
												СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1, РазницаОбеспечения);
											Иначе // Вся номенклатуры уже есть в наличии под заказ
												НайденнаяСтрока_1.Отменено = Истина;
											КонецЕсли;
											
											НачатьТранзакцию();
											
												Попытка
													ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОтменитьТранзакцию();
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ на перемещение"" - вариант обеспечения ""ПодЗаказ"".'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												  	Прервать;
												КонецПопытки;
												
												Если РазницаОбеспечения + ОтмененоРегламентом < СтрокаТовары.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, РазницаОбеспечения);	
												ИначеЕсли СтрокаТовары_1.НеОбеспечено + ОтмененоРегламентом <> НайденнаяСтрока.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, РазницаОбеспечения);
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;	
												Иначе
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
													НайденнаяСтрока.Отменено = Истина;
													НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));	
												КонецЕсли;	
												
												Попытка
													ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
													ЕстьИзменения = Истина;
												Исключение
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ клиента"" после отмены позиции документа ""Заказ на перемещение"".'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												КонецПопытки;
												
											ЗафиксироватьТранзакцию();
											
											ОтмененоРегламентом = ОтмененоРегламентом + СтрокаТовары_1.НеОбеспечено;
											
										КонецЕсли;
										
									Иначе
										//ОписаниеОшибки = НСтр("ru = 'Не удалось отменить еще не заказанную позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
										//ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
										//	УровеньЖурналаРегистрации.Ошибка, 
										//	,
										//	ВыборкаЗаказов.Заказ,
										//	ОписаниеОшибки);
										//РеквизитФормыВЗначение("Объект").ОповеститьОтделТехническойПоддержки(ВыборкаЗаказов.Ссылка, ОписаниеОшибки);
									КонецЕсли;
										
								КонецЕсли; 
								
							КонецЦикла; 
							
						КонецЦикла;
						
						
												
					КонецЕсли;
				
				КонецЕсли;
				
				Если ЕстьИзменения = Истина Тогда
					ОповеститьОтветственногоЗаЗаказ(ВыборкаЗаказов.Заказ, ВыборкаЗаказов.Ответственный, "");
					ОповеститьОтветственногоЗаЗаказ(ВыборкаЗаказов.Заказ, ЗаказКлиентаОбъект.Менеджер, "");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	// Резервируем доступный товар
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРезервированияСвободногоТовара();
	Запрос.УстановитьПараметр("СкладОпт", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("bc38ba81-d92e-11e0-8b5f-001517115d85")));
	Запрос.УстановитьПараметр("СкладСоборная", Склад);
	Запрос.УстановитьПараметр("ЛогистическийЦентр", Склад);
	ВыборкаТовара = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТовара.Следующий() Цикл
		
		Если ТекущаяНоменклатура = Неопределено
		 ИЛИ ТекущаяНоменклатура <> ВыборкаТовара.Номенклатура Тогда
			ТекущаяНоменклатура = ВыборкаТовара.Номенклатура;
			КоличествоОстаток	= ВыборкаТовара.Свободно;		
		КонецЕсли;
		
		НачатьТранзакцию();
		
			тмпНужноЗаказать = ?(ВыборкаТовара.КЗаказу > КоличествоОстаток, КоличествоОстаток, ВыборкаТовара.КЗаказу);
			КоличествоОстаток = КоличествоОстаток - тмпНужноЗаказать;
			Если ВыборкаТовара.Склад = Склад Тогда
		
				ТипОбъекта 		  	= ТипЗнч(ВыборкаТовара.Заказ);
				ДокументОбъект	  	= ВыборкаТовара.Заказ.ПолучитьОбъект();
				ДанныеТаблицы 	  	= ДокументОбъект.Товары;
				Для каждого ТекущаяСтрока Из ДанныеТаблицы Цикл
					
					Если ТекущаяСтрока.Номенклатура = ТекущаяНоменклатура И ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
						
						Если тмпНужноЗаказать = ТекущаяСтрока.Количество Тогда
							ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
							Прервать;
						ИначеЕсли тмпНужноЗаказать > ТекущаяСтрока.Количество Тогда
							ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;	
							тмпНужноЗаказать = тмпНужноЗаказать - ТекущаяСтрока.Количество;
							Продолжить;
						Иначе
							НоваяСтрока = ДанныеТаблицы.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
							
							ТекущаяСтрока.Количество 		 = ТекущаяСтрока.Количество 		- тмпНужноЗаказать;
							ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок - тмпНужноЗаказать;
							
							НоваяСтрока.Количество 		   = тмпНужноЗаказать;
							НоваяСтрока.КоличествоУпаковок = тмпНужноЗаказать;
							НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
							НоваяСтрока.КодСтроки		   = 0;
							
							СтруктураДействий = Новый Структура;
							ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
							
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; 
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка, 
						,
						ДокументОбъект.Ссылка,
						НСтр("ru = 'Не удалось зарезервировать номенклатуру!'") + ОписаниеОшибки());
					ОповеститьОтделТехническойПоддержки(ДокументОбъект.Ссылка, "Не удалось зарезервировать товар!");
					Продолжить;
				КонецПопытки;
				
			Иначе	
				
				ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ЗаказНаПеремещение, ВыборкаТовара.Заказ);	
				ЗаказНаПеремещение.Дата						= ТекущаяДата();
				ЗаказНаПеремещение.Назначение				= Неопределено;
				ЗаказНаПеремещение.УстановитьНовыйНомер();
				ЗаказНаПеремещение.Ответственный    		= АвторизированныйПользователь;
				ЗаказНаПеремещение.Подразделение    		= АвторизированноеПодразделение;
				ЗаказНаПеремещение.СкладОтправитель 		= Склад;
				ЗаказНаПеремещение.СкладПолучатель  		= ВыборкаТовара.Склад;
				ЗаказНаПеремещение.ДокументОснование		= ВыборкаТовара.Заказ;

				ЗаказНаПеремещение.Статус           		= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
				ЗаказНаПеремещение.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
				
				НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекущаяНоменклатура;
				НоваяСтрока.Упаковка            = ТекущаяНоменклатура.ЕдиницаИзмерения;
				НоваяСтрока.Количество		 	= тмпНужноЗаказать;
				НоваяСтрока.КоличествоУпаковок 	= тмпНужноЗаказать;
				НоваяСтрока.Назначение 			= ВыборкаТовара.Назначение;
				НоваяСтрока.ВариантОбеспечения	= Перечисления.ВариантыОбеспечения.СоСклада;
				НоваяСтрока.НачалоОтгрузки		= ТекущаяДата();
				НоваяСтрока.ОкончаниеПоступления= ТекущаяДата();
				
				Попытка
					ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);					
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка, 
						,
						ДокументОбъект.Ссылка,
						НСтр("ru = 'Не удалось зарезервировать номенклатуру!'") + ОписаниеОшибки());
					ОповеститьОтделТехническойПоддержки(ДокументОбъект.Ссылка, "Не удалось зарезервировать товар!");
					Продолжить;
				КонецПопытки;
			
			КонецЕсли;
			
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАвтоматическоеДвижениеТоваров();
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СписатьТоварВНаличии", СписатьТоварВНаличии);
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ПараметрыОтбора   = ПолучитьПараметрыОтбора(Выборка);
		ОбеспечениеТовары = ОбновитьСостояниеОбеспечения(Выборка.Ссылка, ПараметрыОтбора);
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если ОчиститьДополнительныеСведения(ОбеспечениеТовары, Выборка.Ссылка, СписатьТоварВНаличии) Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		СостояниеНаличия = ОбеспечениеТовары.Выгрузить(, "СостояниеНаличия");	
		СостояниеНаличия.Свернуть("СостояниеНаличия");
		Если СостояниеНаличия.Количество() = 1 И СостояниеНаличия[0].СостояниеНаличия = Перечисления.СостоянияНаличия.ПолностьюВНаличии Тогда
			ПолностьюВНаличии = Истина;
		Иначе
			ПолностьюВНаличии = Ложь;
		КонецЕсли;
		
		
		Если Не ПолностьюВНаличии И ПараметрыОтбора.НеОтгружатьЧастями Тогда
			Продолжить;	
		КонецЕсли;
		
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();	
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Заполнить(Выборка.Ссылка);
		Исключение
			ОповеститьОтделТехническойПоддержки(Выборка.Ссылка, НСтр("ru = 'Не удалось сформировать документ движения товаров по заказу'") + ОписаниеОшибки());	
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Выборка.Ссылка,
				НСтр("ru = 'Не удалось сформировать документ движения товаров по заказу'") + ОписаниеОшибки());
			Продолжить;	
		КонецПопытки;
		
		
		
		Для каждого СтрокаТоваров Из ОбеспечениеТовары Цикл
			
			Если СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.ПолностьюВНаличии Тогда
				Продолжить;
			ИначеЕсли СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.ЧастичноВНаличии Тогда
				
				РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
				Если РезультатПоиска <> Неопределено Тогда
					
					РезультатПоиска.Количество = СтрокаТоваров.ВНаличии;
					РезультатПоиска.КоличествоУпаковок = СтрокаТоваров.ВНаличии;
					
					Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
						СтруктураДействий = Новый Структура;
						ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(РезультатПоиска, СтруктураДействий, Неопределено);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.НетВНаличии Тогда
				
				РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
				Если РезультатПоиска <> Неопределено Тогда
					ДокументОбъект.Товары.Удалить(РезультатПоиска);
				КонецЕсли;
				
			КонецЕсли; 		
			
		КонецЦикла; 
		
		
		
		//Если ЗначениеЗаполнено(Выборка.Ссылка.ЖелаемаяДатаОтгрузки) 
		//	И	ТекущаяДата()   < Выборка.Ссылка.ЖелаемаяДатаОтгрузки  Тогда
		//	ДокументОбъект.Дата = Выборка.Ссылка.ЖелаемаяДатаОтгрузки + 7200;
		//Иначе
		//	ДокументОбъект.Дата = ТекущаяДата();		
		//КонецЕсли;
		
		
		
		Попытка
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				//ОбработатьОстаткиОрганизаций(ДокументОбъект, Склад);
				ДокументОбъект.Ответственный = АвторизированныйПользователь;
				ДокументОбъект.Подразделение = АвторизированноеПодразделение;
			КонецЕсли;
			
			Если ДокументОбъект.Товары.Количество() Тогда
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ОбработатьПроблемныеЗаказы(Выборка.Ссылка, Склад);
					ДокументОбъект.Менеджер = Выборка.Ссылка.Менеджер;
					ДокументОбъект.Подразделение = ДокументОбъект.Менеджер.ТекущееПодразделение;			
				КонецЕсли;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Информация, 
					,
					ДокументОбъект.Ссылка,
					НСтр("ru = 'Удачно сформирован документ движения товаров по заказу'"));
					
			КонецЕсли;
			
		Исключение
			
			ОповеститьОтделТехническойПоддержки(Выборка.Ссылка, НСтр("ru = 'Не удалось сформировать документ движения товаров по заказу'") + ОписаниеОшибки());	
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Выборка.Ссылка,
				НСтр("ru = 'Не удалось сформировать документ движения товаров по заказу'") + ОписаниеОшибки());
				
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
		УровеньЖурналаРегистрации.Информация, 
		,
		,
		НСтр("ru = 'Завершено автоматическое движение товаров'"));
	
КонецПроцедуры // ВыполнитьАвтоматическоеДвижениеТоваров()

Процедура ВыполнитьАвтоматическоеЗакрытиеЗаказовНаПеремещение() Экспорт

	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Автоматическое закрытие заказов на перемещение товаров'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация, 
			,
			,
			НСтр("ru = 'Начало автоматического закрытия заказов на перемещение товаров'"));

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАвтоматическоеЗакрытиеЗаказовНаПеремещение();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора   = ПолучитьПараметрыОтбора(Выборка);
		ОбеспечениеТовары = ОбновитьСостояниеОбеспечения(Выборка.Ссылка, ПараметрыОтбора);
		УстановитьСтатусЗакрытВЗаказеНаПеремещение(ОбеспечениеТовары, Выборка.Ссылка, ИмяСобытияЖурналаРегистрации);
	КонецЦикла;	
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
		УровеньЖурналаРегистрации.Информация, 
		,
		,
		НСтр("ru = 'Завершено автоматическое закрытия заказов на перемещение товаров'"));

КонецПроцедуры
 
// Подготавливает форму документа к работе с автовыпиской товаров 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки DDP для подключения методов на клиенте
//
Процедура ПодготовитьАвтовыпискуТоваровКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	
	ОбъектСсылка = ЭтаФорма.Объект.Ссылка;	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("СписатьТоварВНаличии", Новый ОписаниеТипов("Булево")));
		ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
		Элементы = ЭтаФорма.Элементы;
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", 			"СписатьТоварВНаличии");
		Параметры.Вставить("Вид", 			ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("Заголовок", 	"Виписати товар по його наявності");
		Параметры.Вставить("ПутьКДанным", 	"СписатьТоварВНаличии"); 
		Параметры.Вставить("ЦветРамки", 	Новый Цвет(255, 0, 0));
		Параметры.Вставить("ТипЭлемента", 	Тип("ПолеФормы"));
		СписатьТоварВНаличии = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Элементы.ГруппаПараметры1Право);
		СписатьТоварВНаличии.УстановитьДействие("ПриИзменении", "ПриИзмененииСписатьТоварВНаличии");	

		Если ОбъектСсылка.Пустая() = Ложь Тогда 
			ЭтаФорма.СписатьТоварВНаличии = ПолучитьЗначениеСведенияПоОбъектуИСвойству(ОбъектСсылка, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
				Новый УникальныйИдентификатор("482344ab-fdce-11e2-883c-001e673c80fc")));	
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьАвтовыпискуТоваровКРаботе()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТекстЗапросаАвтоматическойОтменыЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Заказ			КАК Заказ,
		|	Заказ			КАК Ссылка,
		|	КодСтроки		КАК КодСтроки,
		|	Номенклатура	КАК Номенклатура,
		|	Характеристика	КАК Характеристика,
		|	Выполнено		КАК Выполнено,
		|	Ответственный   КАК Ответственный
		|ИЗ
		|	РегистрСведений.ОтменитьЗаказПодЗаказ
		|ГДЕ
		|	Выполнено = Ложь	
		|";
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтменыЗаказовНаПеремещения()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Регистратор		КАК Ссылка,
		|	КЗаказу			КАК КЗаказу,
		|	НаличиеСоСклада КАК НаличиеСоСклада
		|ПОМЕСТИТЬ ЗаказыНаПеремещения
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов
		|ГДЕ
		|	Регистратор Ссылка Документ.ЗаказНаПеремещение
		|И	Номенклатура = &Номенклатура
		|И	Склад		 = &Склад
		|И	Назначение	 = &Назначение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	РгЗаказыНаПеремещение.ЗаказНаПеремещение	КАК Ссылка,
		|	РгЗаказыНаПеремещение.Номенклатура			КАК Номенклатура,
		|	РгЗаказыНаПеремещение.КодСтроки				КАК КодСтроки,
		|	РгЗаказыНаПеремещение.КОформлениюОстаток	КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (ВЫБРАТЬ Ссылка ИЗ ЗаказыНаПеремещения)
		|												И	Номенклатура = &Номенклатура) КАК РгЗаказыНаПеремещение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ЗаказыНаПеремещения
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗаказыНаПеремещения;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Регистратор		КАК ЗаказПоставщику,
		|	Заказано		КАК Заказано,
		|	НаличиеСоСклада КАК НаличиеСоСклада
		|ПОМЕСТИТЬ ЗаказыПоставщикам
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов
		|ГДЕ
		|	Регистратор Ссылка Документ.ЗаказПоставщику
		|И	Номенклатура = &Номенклатура
		|И	Склад		 = &Склад
		|И	Назначение	 = &Назначение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	РгЗаказыПоставщикам.ЗаказПоставщику		КАК ЗаказПоставщику,
		|	РгЗаказыПоставщикам.Номенклатура		КАК Номенклатура,
		|	РгЗаказыПоставщикам.КодСтроки			КАК КодСтроки,
		|	РгЗаказыПоставщикам.КОформлениюОстаток	КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (ВЫБРАТЬ ЗаказПоставщику ИЗ ЗаказыПоставщикам)
		|												И	Номенклатура = &Номенклатура) КАК РгЗаказыПоставщикам
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказЗаказано()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|   ОЗ.Склад,
		|	ОЗ.ПотребностьОстаток,
		|	ОЗ.КЗаказуОстаток,
		|	ОЗ.ЗаказаноОстаток,
		|	ОЗ.НаличиеСоСкладаОстаток,
		|	IsNull(ТКППО.КПоступлениюОстаток, 0) КАК КПоступлениюОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 <> &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ОЗ
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, 
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 <> &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ТКППО
		|ПО	ТКППО.Назначение 	= ОЗ.Назначение
		|И	ТКППО.Номенклатура 	= ОЗ.Номенклатура
		|И	ТКППО.Склад 		= ОЗ.Склад
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказНеЗаказано()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОЗ.Склад,
		|	ОЗ.ПотребностьОстаток,
		|	ОЗ.КЗаказуОстаток,
		|	ОЗ.ЗаказаноОстаток,
		|	ОЗ.НаличиеСоСкладаОстаток,
		|	IsNull(ТКППО.КПоступлениюОстаток, 0) КАК КПоступлениюОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 = &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ОЗ
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, 
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 = &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ТКППО
		|ПО	ТКППО.Назначение 	= ОЗ.Назначение
		|И	ТКППО.Номенклатура 	= ОЗ.Номенклатура
		|И	ТКППО.Склад 		= ОЗ.Склад
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаАдресаЭлектроннойПочты()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	Тип = Значение(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|И	Вид = Значение(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
		|И	Ссылка = &Пользователь";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаРезервированияСвободногоТовара()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////
		// 0. Кеш основных складов
		|ВЫБРАТЬ 
		|	Склад			КАК Склад
		|ПОМЕСТИТЬ СпрСклады 
		|ИЗ 
		|	РегистрСведений.Модуль_ДоступныеСклады 
		|ГДЕ 
		|	Основной
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		// 1. Кеш номенклатуры
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ СпрНоменклатура
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Склад В (ВЫБРАТЬ Склад ИЗ СпрСклады ГДЕ Склад НЕ В (&СкладОпт, &СкладСоборная))) 											
		|	
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Склад В (ВЫБРАТЬ Склад ИЗ СпрСклады ГДЕ Склад В (&СкладОпт, &СкладСоборная))) 											
		|	
		|ИНДЕКСИРОВАТЬ ПО 
		|	Номенклатура
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		// 2. Остатки для оптовых клиентов
		|ВЫБРАТЬ
		|	СпрНоменклатура.Номенклатура						КАК	Номенклатура,
		|	ОбеспечениеЗаказов.Назначение						КАК Назначение,
		|	ОбеспечениеЗаказов.Назначение.Заказ					КАК Заказ,
		|	ОбеспечениеЗаказов.Склад							КАК Склад,
		|	
		|	ОбеспечениеЗаказов.КЗаказуОстаток					КАК КЗаказу,
		|	IsNull(КПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) КАК КПоступлению,  
		|	ЛогистическийЦентр.ВНаличииОстаток
		|  - ЛогистическийЦентр.ВРезервеОстаток					КАК Свободно
		|ИЗ
		|	СпрНоменклатура КАК СпрНоменклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ОбеспечениеЗаказов
		|ПО	ОбеспечениеЗаказов.Номенклатура = СпрНоменклатура.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ТоварыКПоступлениюПодОбеспечение
		|ПО	ТоварыКПоступлениюПодОбеспечение.Номенклатура = СпрНоменклатура.Номенклатура 
		|И	ТоварыКПоступлениюПодОбеспечение.Назначение	  = ОбеспечениеЗаказов.Назначение
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
		|											И Склад = &ЛогистическийЦентр) КАК ЛогистическийЦентр
		|ПО	ЛогистическийЦентр.Номенклатура = СпрНоменклатура.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК КПоступлениюПодОбеспечение
		|ПО	КПоступлениюПодОбеспечение.Номенклатура = СпрНоменклатура.Номенклатура 
		|И	КПоступлениюПодОбеспечение.Назначение	  = ОбеспечениеЗаказов.Назначение
		|   
		|ГДЕ
		|	ОбеспечениеЗаказов.Назначение <> Неопределено
		|И	IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0)
		|  - IsNull(КПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) > 0	
		|И	IsNull(ЛогистическийЦентр.ВНаличииОстаток, 0)
		|  - IsNull(ЛогистическийЦентр.ВРезервеОстаток, 0) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ОбеспечениеЗаказов.Назначение.Заказ КАК Документ.ЗаказКлиента).Дата Возр
		|;";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРезервированияСвободногоТовара()

Функция ПолучитьТекстЗапросаАвтоматическоеДвижениеТоваров()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//0.
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
		|ПОМЕСТИТЬ ЗаказыКлиентов
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СписатьТоварВНаличии
		|	И ДополнительныеСведения.Значение = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		////////////////////////////////////////////////////////////////////////////////
		//1. 
		|ВЫБРАТЬ
		|	ДокЗаказы.Дата		КАК Дата,
		|	ДокЗаказы.Ссылка 	КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДвижения
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокЗаказы
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыКлиентов КАК ЗаказыКлиентов
		|ПО (ЗаказыКлиентов.ЗаказКлиента = ДокЗаказы.Ссылка)
		|
		|ГДЕ
		|	ДокЗаказы.Проведен
		|И	ДокЗаказы.Склад  = &Склад
		|И 	ДокЗаказы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказНаПеремещение.Дата,
		|	ЗаказНаПеремещение
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение.СкладОтправитель = &Склад 
		|				И ЗаказНаПеремещение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению)) 
		|;
		////////////////////////////////////////////////////////////////////////////////
		//2.
		|ВЫБРАТЬ
		|	Дата,		
		|   Ссылка
		|ИЗ
		|	ДокументыДвижения 	
		|УПОРЯДОЧИТЬ ПО
		|	Дата Возр
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗаказыКлиентов;
		|УНИЧТОЖИТЬ ДокументыДвижения;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаАвтоматическоеДвижениеТоваров()

Функция ПолучитьТекстЗапросаАвтоматическоеЗакрытиеЗаказовНаПеремещение()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗаказНаПеремещение.Ссылка,
		|	ЗаказНаПеремещение.Дата
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.Проведен = ИСТИНА
		|И 	ЗаказНаПеремещение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПроблемныхЗаказов()
	
	ТекстЗапроса = "
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 0.
	|ВЫБРАТЬ
	|	ЗаказКлиента,
	|	Номенклатура,
	|	Характеристика,
	|	КОформлениюОстаток
	|ПОМЕСТИТЬ КешЗаказа
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказКлиента И Склад = &Склад)
	|;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 1.
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.ЗаказКлиента,
	|	ЗаказыКлиентов.Номенклатура,
	|	ЗаказыКлиентов.Характеристика
	|ПОМЕСТИТЬ ПроблемнаяНоменклатура		
	|ИЗ
	|	КешЗаказа КАК ЗаказыКлиентов
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешЗаказа) И Склад = &Склад ) КАК СвободныеОстатки
	|ПО	СвободныеОстатки.Номенклатура = ЗаказыКлиентов.Номенклатура
	|И	СвободныеОстатки.Характеристика = ЗаказыКлиентов.Характеристика
	|
	|ГДЕ
	|	ВНаличииОстаток > 0
	|И	ВНаличииОстаток < ВРезервеОстаток
	|;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 2.
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.ЗаказКлиента	
	|ИЗ
	|	ПроблемнаяНоменклатура КАК ПроблемнаяНоменклатура
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента <> &ЗаказКлиента 
	|															И (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешЗаказа)
	|															И Склад = &Склад) КАК ЗаказыКлиентов
	|ПО	ЗаказыКлиентов.Номенклатура 	= ПроблемнаяНоменклатура.Номенклатура
	|И	ЗаказыКлиентов.Характеристика 	= ПроблемнаяНоменклатура.Характеристика
	|
	|ГДЕ
	|	КОформлениюОстаток <> 0
	|;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КешЗаказа;
	|УНИЧТОЖИТЬ ПроблемнаяНоменклатура;		
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаОстатковОрганизаций()
	
	ТекстЗапроса = "
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 0.
	|";	
	Возврат ТекстЗапроса;
	
КонецФункции



Процедура СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ДокументОбъект, НайденнаяСтрока, СтрокаОбеспечения)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
	
	НайденнаяСтрока.Количество 		   = НайденнаяСтрока.Количество 		- СтрокаОбеспечения.Вналичии * СтрокаОбеспечения.УпаковкаКоэффициент;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаОбеспечения.Вналичии;
	
	НоваяСтрока.Количество 		   = СтрокаОбеспечения.Вналичии * СтрокаОбеспечения.УпаковкаКоэффициент;
	НоваяСтрока.КоличествоУпаковок = СтрокаОбеспечения.Вналичии;
	НоваяСтрока.КодСтроки		   = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
	
	НоваяСтрока.Отменено = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		НоваяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
		НоваяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ДокументОбъект, НайденнаяСтрока, СтрокаОбеспечения, Количество)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
	
	НайденнаяСтрока.Количество 		   = НайденнаяСтрока.Количество 		- Количество * СтрокаОбеспечения.УпаковкаКоэффициент;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - Количество;
	
	НоваяСтрока.Количество 		   = Количество * СтрокаОбеспечения.УпаковкаКоэффициент;
	НоваяСтрока.КоличествоУпаковок = Количество;
	НоваяСтрока.КодСтроки		   = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
	
	НоваяСтрока.Отменено = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		НоваяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
		НоваяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказКлиента") 
	 ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПроблемныеЗаказы(ЗаказКлиента, Склад)
	
	ГраницаГрафикаДоступности = ПолучитьГраницуГрафикаДоступности(Склад);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроблемныхЗаказов();
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.ЗаказКлиента.ПолучитьОбъект();
		Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
			СтрокаТовары.ДатаОтгрузки = ГраницаГрафикаДоступности + 86400;
		КонецЦикла;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьПроблемныеЗаказы()

Процедура ОбработатьОстаткиОрганизаций(Объект, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстатковОрганизаций();
	
КонецПроцедуры



Функция ПолучитьПараметрыОтбора(Выборка)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заказ", Выборка.Ссылка);
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.Склад);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Выборка.Ссылка.НеОтгружатьЧастями);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", Выборка.Ссылка.ЖелаемаяДатаОтгрузки);
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.СкладОтправитель);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Ложь);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", ?(ЗначениеЗаполнено(Выборка.Ссылка.ЖелаемаяДатаПоступления), КонецДня(Выборка.Ссылка.Дата), Неопределено));
	КонецЕсли;
	ПараметрыОтбора.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище(Выборка.Ссылка));
	ПараметрыОтбора.Вставить("РассчитатьБезЗаказа", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции // ПолучитьПараметрыОтбора()

Функция ПоместитьТоварыВоВременноеХранилище(ЗаказКлиента)
	
	Возврат ПоместитьВоВременноеХранилище(ЗаказКлиента.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ПоместитьТоварыВоВременноеХранилище()

Функция ОбновитьСостояниеОбеспечения(Заказ, Параметры)
	
	ПараметрыСостоянияОбеспечения = ПолучитьПараметрыСостоянияОбеспечения(Параметры);
	ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Истина); // Возможно нужно будет разделить
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать(); 
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости);
	
	Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
		СтрокаТовары.Выбран = Истина;
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения); 
	
	РезультатПоиска = ОбработкаСостояниеОбеспечения.Товары.Найти(Истина, "СтрокаИзменена");
	Если РезультатПоиска <> Неопределено Тогда
		
		РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
		Если РезультатРасчета <> Неопределено Тогда
			
			ДокументОбъект = Заказ.ПолучитьОбъект();
			ДокументОбъект.Товары.Загрузить(РезультатРасчета);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам'"),
					УровеньЖурналаРегистрации.Информация, 
					,
					Заказ,
					НСтр("ru = 'Удачно расчитано дату отгрузки номенклатуры по заказу'"));
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
					УровеньЖурналаРегистрации.Ошибка, 
					,
					Заказ,
					НСтр("ru = 'Не удалось расчитать дату отгрузки номенклатуры по заказу'") + ОписаниеОшибки()); 	
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаСостояниеОбеспечения.Товары;
	
КонецФункции // ОбновитьСостояниеОбеспечения()

Функция ПолучитьПараметрыСостоянияОбеспечения(Параметры)
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Параметры.НеОтгружатьЧастями);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа", Параметры.РассчитатьБезЗаказа);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии);
	
	Возврат ПараметрыСостоянияОбеспечения;
	
КонецФункции // ПолучитьПараметрыСостоянияОбеспечения()

Функция ОчиститьДополнительныеСведения(Товары, Ссылка, Свойство)
	
	Если Товары.Количество() = 0 Тогда
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство);
		НаборЗаписей.Записать();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОчиститьДополнительныеСведения()



Функция ПолучитьГраницуГрафикаДоступности(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГраницаГрафикаДоступности
	|ИЗ
	|	РегистрСведений.НастройкаКонтроляОстатков
	|ГДЕ
	|	Склад = &Склад
	|";
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ГраницаГрафикаДоступности, ТекущаяДата());
	
КонецФункции // ПолучитьГраницуГрафикаДоступности()

// Получить значение дополнительного сведения документа заказ клента
// 
// Параметры:
//  Объект 	 - ДокументСсылка.ЗаказКлиента                               	  - Ссылка на документ заказ клиента
//	Свойство - ПланыВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Ссылка на дополнительное сведение
//
// Возвращаемое значение:
//   Произвольное - Значение дополнительного сведения
Функция ПолучитьЗначениеСведенияПоОбъектуИСвойству(Объект, Свойство) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента) = &Объект
	               |И 	ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект",   Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Значение, Неопределено); 
КонецФункции // ПолучитьЗначениеСведенияПоОбъектуИСвойству()



Процедура УстановитьСтатусЗакрытВЗаказеНаПеремещение(Товары, Ссылка, ИмяСобытияЖурналаРегистрации)
	
	Если Товары.Количество() = 0 Тогда
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Не удалось установить статус: ""Закрыт"" в заказе на перемещение'") + ОписаниеОшибки();
			ОповеститьОтделТехническойПоддержки(Ссылка, ОписаниеОшибки);	
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Ссылка,
				ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСтатусЗакрытВЗаказеНаПеремещение()

Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
	ОповеститьОтделТехническойПоддержки(Ссылка, ОписаниеОшибки);
		
КонецПроцедуры

Процедура ОповеститьОтделТехническойПоддержки(Заказ, ОписаниеОшибки) Экспорт
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ТемаПисьма 					= "[ERROR] Автоматическое движение товаров";
	ТелоПисьма					= "";
	ТелоПисьма					= ТелоПисьма + " " + ОписаниеОшибки + "<br>";
	ТелоПисьма					= ТелоПисьма + " Навигационная ссылка: " + ПолучитьНавигационнуюСсылку(Заказ) + "<br>"; 
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

Процедура ОповеститьОтветственногоЗаЗаказ(Заказ, Ответственный, ОписаниеОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАдресаЭлектроннойПочты();
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Кому = Новый Массив;   
		Кому.Добавить(Новый Структура("Адрес, Представление", Выборка.АдресЭП,	"Отдел технической поддержки"));
		ТемаПисьма = "Позиция из Вашего заказа удачно отменена";
	Иначе
		Кому = Новый Массив;   
		Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
		ТемаПисьма = "В пользователя не заполнен адрес электронной почты";
	КонецЕсли;
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");	
	ТелоПисьма					= "";
	ТелоПисьма					= ТелоПисьма + " " + ОписаниеОшибки + "<br>";
	ТелоПисьма					= ТелоПисьма + " Навигационная ссылка: " + ПолучитьНавигационнуюСсылку(Заказ) + "<br>"; 
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

Процедура ОповеститьОтветственногоЗаЗаказПоставщику(ЗаказПоставщику, ЗаказНазначение, Номенклатура, Ответственный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАдресаЭлектроннойПочты();
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	ТемаПисьма = "Позиция из Вашего заказа поставщику, уже не нужна!";
	ТелоПисьма = "";
	ТелоПисьма = ТелоПисьма + " Навигационная ссылка: " + ПолучитьНавигационнуюСсылку(ЗаказПоставщику) + "<br>";
	ТелоПисьма = ТелоПисьма + " Заказ назначение: " + ПолучитьНавигационнуюСсылку(ЗаказНазначение) + "<br>";
	ТелоПисьма = ТелоПисьма + " Номер заказа: " + ЗаказНазначение.Номер + "<br>";
	ТелоПисьма = ТелоПисьма + " Код\Номенклатура: " + Номенклатура.Код + "\" + Строка(Номенклатура) + "<br>";
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	
	Кому = Новый Массив;
	Если Выборка.Следующий() Тогда   
		Кому.Добавить(Новый Структура("Адрес, Представление", Выборка.АдресЭП,	"Отдел технической поддержки"));
	Иначе
		КомуТех = Новый Массив;   
		КомуТех.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
		ТемаПисьмаТех = "В пользователя не заполнен адрес электронной почты";
		ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьмаТех, ТелоПисьма, КомуТех, , , , , , ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	КонецЕсли;
	
	Кому.Добавить(Новый Структура("Адрес, Представление", "zakupochka@ktc.rovno.ua", "Отдел технической поддержки"));
	Кому.Добавить(Новый Структура("Адрес, Представление", "postavka@ktc.rovno.ua", "Отдел технической поддержки"));
		 
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.29";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. автоматическое движение товаров");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. автоматическое движение товаров [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоматическое движение товаров [" + Версия + "]", "ВыполнитьАвтоматическоеДвижениеТоваров();", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоматическое закрытие заказов на перемещение товаров [" + Версия + "]", "ВыполнитьАвтоматическоеЗакрытиеЗаказовНаПеремещение();", "ВызовСерверногоМетода");
	
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕОПРЕДЕЛЕНИЯ ОБРАБОТЧИКОВ

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()



// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) 
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()


