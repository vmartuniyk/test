
&НаКлиенте
Процедура Кнопа(Команда)
	КнопаНаСервере();
КонецПроцедуры

&НаСервере
Процедура КнопаНаСервере()
	
	РеквизитФормыВЗначение("Объект").ВыполнитьАвтоматическоеДвижениеТоваров();	
	
КонецПроцедуры


Процедура СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ДокументОбъект, НайденнаяСтрока, СтрокаОбеспечения)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
	
	НайденнаяСтрока.Количество 		   = НайденнаяСтрока.Количество 		- СтрокаОбеспечения.Вналичии * СтрокаОбеспечения.УпаковкаКоэффициент;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаОбеспечения.Вналичии;
	
	НоваяСтрока.Количество 		   = СтрокаОбеспечения.Вналичии * СтрокаОбеспечения.УпаковкаКоэффициент;
	НоваяСтрока.КоличествоУпаковок = СтрокаОбеспечения.Вналичии;
	НоваяСтрока.КодСтроки		   = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
	
	НоваяСтрока.Отменено = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		НоваяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
		НоваяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ДокументОбъект, НайденнаяСтрока, СтрокаОбеспечения, Количество)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
	
	НайденнаяСтрока.Количество 		   = НайденнаяСтрока.Количество 		- Количество * СтрокаОбеспечения.УпаковкаКоэффициент;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - Количество;
	
	НоваяСтрока.Количество 		   = Количество * СтрокаОбеспечения.УпаковкаКоэффициент;
	НоваяСтрока.КоличествоУпаковок = Количество;
	НоваяСтрока.КодСтроки		   = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
	
	НоваяСтрока.Отменено = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		НоваяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
		НоваяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
	КонецЕсли;
	
КонецПроцедуры



Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказКлиента") 
	 ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьПараметрыОтбора(Выборка)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заказ", Выборка.Ссылка);
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.Склад);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Выборка.Ссылка.НеОтгружатьЧастями);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", Выборка.Ссылка.ЖелаемаяДатаОтгрузки);
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.СкладОтправитель);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Ложь);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", ?(ЗначениеЗаполнено(Выборка.Ссылка.ЖелаемаяДатаПоступления), КонецДня(Выборка.Ссылка.Дата), Неопределено));
	КонецЕсли;
	ПараметрыОтбора.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище(Выборка.Ссылка));
	ПараметрыОтбора.Вставить("РассчитатьБезЗаказа", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции // ПолучитьПараметрыОтбора()


Функция ПолучитьТекстЗапросаАвтоматическойОтменыЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Заказ			КАК Заказ,
		|	Заказ			КАК Ссылка,
		|	КодСтроки		КАК КодСтроки,
		|	Номенклатура	КАК Номенклатура,
		|	Характеристика	КАК Характеристика,
		|	Выполнено		КАК Выполнено,
		|	Ответственный   КАК Ответственный
		|ИЗ
		|	РегистрСведений.ОтменитьЗаказПодЗаказ
		|ГДЕ
		|	Выполнено = Ложь	
		|";
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказЗаказано()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Оз.Склад,
		|	ОЗ.ПотребностьОстаток,
		|	ОЗ.КЗаказуОстаток,
		|	ОЗ.ЗаказаноОстаток,
		|	ОЗ.НаличиеСоСкладаОстаток,
		|	IsNull(ТКППО.КПоступлениюОстаток, 0) КАК КПоступлениюОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 <> &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ОЗ
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, 
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 <> &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ТКППО
		|ПО	ТКППО.Назначение 	= ОЗ.Назначение
		|И	ТКППО.Номенклатура 	= ОЗ.Номенклатура
		|И	ТКППО.Склад 		= ОЗ.Склад
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказНеЗаказано()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Оз.Склад,
		|	ОЗ.ПотребностьОстаток,
		|	ОЗ.КЗаказуОстаток,
		|	ОЗ.ЗаказаноОстаток,
		|	ОЗ.НаличиеСоСкладаОстаток,
		|	IsNull(ТКППО.КПоступлениюОстаток, 0) КАК КПоступлениюОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 = &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ОЗ
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, 
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 = &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ТКППО
		|ПО	ТКППО.Назначение 	= ОЗ.Назначение
		|И	ТКППО.Номенклатура 	= ОЗ.Номенклатура
		|И	ТКППО.Склад 		= ОЗ.Склад
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтменыЗаказовНаПеремещения()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Регистратор		КАК Ссылка,
		|	КЗаказу			КАК КЗаказу,
		|	НаличиеСоСклада КАК НаличиеСоСклада
		|ПОМЕСТИТЬ ЗаказыНаПеремещения
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов
		|ГДЕ
		|	Регистратор Ссылка Документ.ЗаказНаПеремещение
		|И	Номенклатура = &Номенклатура
		|И	Склад		 = &Склад
		|И	Назначение	 = &Назначение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	РгЗаказыНаПеремещение.ЗаказНаПеремещение	КАК Ссылка,
		|	РгЗаказыНаПеремещение.Номенклатура			КАК Номенклатура,
		|	РгЗаказыНаПеремещение.КодСтроки				КАК КодСтроки,
		|	РгЗаказыНаПеремещение.КОформлениюОстаток	КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (ВЫБРАТЬ Ссылка ИЗ ЗаказыНаПеремещения)
		|												И	Номенклатура = &Номенклатура) КАК РгЗаказыНаПеремещение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ЗаказыНаПеремещения
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗаказыНаПеремещения;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Регистратор		КАК ЗаказПоставщику,
		|	Заказано		КАК Заказано,
		|	НаличиеСоСклада КАК НаличиеСоСклада
		|ПОМЕСТИТЬ ЗаказыПоставщикам
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов
		|ГДЕ
		|	Регистратор Ссылка Документ.ЗаказПоставщику
		|И	Номенклатура = &Номенклатура
		|И	Склад		 = &Склад
		|И	Назначение	 = &Назначение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	РгЗаказыПоставщикам.ЗаказПоставщику		КАК ЗаказПоставщику,
		|	РгЗаказыПоставщикам.Номенклатура		КАК Номенклатура,
		|	РгЗаказыПоставщикам.КодСтроки			КАК КодСтроки,
		|	РгЗаказыПоставщикам.КОформлениюОстаток	КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (ВЫБРАТЬ ЗаказПоставщику ИЗ ЗаказыПоставщикам)
		|												И	Номенклатура = &Номенклатура) КАК РгЗаказыПоставщикам
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции



Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
	РеквизитФормыВЗначение("Объект").ОповеститьОтделТехническойПоддержки(Ссылка, ОписаниеОшибки);
		
КонецПроцедуры
 






Функция ПоместитьТоварыВоВременноеХранилище(ЗаказКлиента)
	
	Возврат ПоместитьВоВременноеХранилище(ЗаказКлиента.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ПоместитьТоварыВоВременноеХранилище()

Функция ПолучитьПараметрыСостоянияОбеспечения(Параметры)
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Параметры.НеОтгружатьЧастями);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа", Параметры.РассчитатьБезЗаказа);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии);
	
	Возврат ПараметрыСостоянияОбеспечения;
	
КонецФункции // ПолучитьПараметрыСостоянияОбеспечения()

&НаКлиенте
Процедура Сборка(Команда)
	СборкаНаСервере();
КонецПроцедуры

&НаСервере
Процедура СборкаНаСервере()
	РеквизитФормыВЗначение("Объект").ВыполнитьАвтоматическоеСозданиеЗаявкиСервисногоЦентра();
КонецПроцедуры




