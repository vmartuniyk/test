
&НаКлиенте
Процедура Кнопа(Команда)
	КнопаНаСервере();
КонецПроцедуры

&НаСервере
Процедура КнопаНаСервере()
	
	
	//УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СписатьТоварВНаличии = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
		Новый УникальныйИдентификатор("482344ab-fdce-11e2-883c-001e673c80fc"));	
	Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85"));
	
	// Автоматически отменяем заказы клиентов
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАвтоматическойОтменыЗаказов();
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		
		Параметры1 = ПолучитьПараметрыОтбора(ВыборкаЗаказов);	
		ПараметрыСостоянияОбеспечения = ПолучитьПараметрыСостоянияОбеспечения(Параметры1);
		
		ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Истина); // Возможно нужно будет разделить
		ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать(); 
		ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости);
		
		Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
			
			Если СтрокаТовары.КодСтроки = ВыборкаЗаказов.КодСтроки Тогда
				
				ЗаказКлиентаОбъект = ВыборкаЗаказов.Ссылка.ПолучитьОбъект();
				НайденнаяСтрока = ЗаказКлиентаОбъект.Товары.Найти(ВыборкаЗаказов.КодСтроки, "КодСтроки");
				Если НайденнаяСтрока = Неопределено Тогда
					ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу, данные были изменены другим пользователем'");
					ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
				  	Прервать;
				КонецЕсли;
				
				// Скоректируем резерв на ту номенклатуру, что уже есть в наличии под этот заказ клиента
				Если СтрокаТовары.Вналичии > 0 Тогда
					
					ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
					ДокументОбъект.Заполнить(ВыборкаЗаказов.Ссылка);
					ДокументОбъект.Дата = ТекущаяДата();
					ДокументОбъект.УстановитьНовыйНомер();
					ДокументОбъект.Товары.Очистить();
					
					НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.Количество = СтрокаТовары.Вналичии * СтрокаТовары.УпаковкаКоэффициент;
					НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовары.Вналичии;
					НоваяСтрокаТовары.ИсходноеНазначение = СтрокаТовары.Назначение;
					
					НачатьТранзакцию();
					
						Попытка
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
						Исключение
							ОтменитьТранзакцию();
							ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
							ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
						  	Прервать;
						КонецПопытки;
						
						Если СтрокаТовары.ВНаличии < СтрокаТовары.КоличествоУпаковок Тогда // Часть номенклатуры уже есть в наличии под заказ
							СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары);	
						ИначеЕсли СтрокаТовары.ВНаличии <> НайденнаяСтрока.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
							СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары);
							НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
						Иначе // Вся номенклатуры уже есть в наличии под заказ
							НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
							НайденнаяСтрока.Отменено = Истина;
							НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
						КонецЕсли;
						
						Попытка
							ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ОтменитьТранзакцию();
							ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
							ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
						  	Прервать;
						КонецПопытки;
						
					ЗафиксироватьТранзакцию();
						
				КонецЕсли;
 
				// Скоректируем резерв на ту номенклатуру, которой нет в наличии под этот заказ клиента
				Если СтрокаТовары.КоличествоУпаковок <> СтрокаТовары.Вналичии Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказНеЗаказано();
					Запрос.УстановитьПараметр("Склад", СтрокаТовары.Склад);
					Запрос.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
					Запрос.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
					ОбеспечениеНеЗаказано = Запрос.Выполнить().Выбрать();
					Если ОбеспечениеНеЗаказано.Следующий() Тогда 
						Если СтрокаТовары.НеОбеспечено > 0 И СтрокаТовары.НеОбеспечено > ОбеспечениеНеЗаказано.КПоступлениюОстаток Тогда
							
							КоличествоКЗаказу = СтрокаТовары.НеОбеспечено - ОбеспечениеНеЗаказано.КПоступлениюОстаток;	
							Если КоличествоКЗаказу < СтрокаТовары.КоличествоУпаковок Тогда // Часть номенклатуры уже заказана под заказ
								СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, КоличествоКЗаказу);	
							ИначеЕсли СтрокаТовары.КоличествоУпаковок <> НайденнаяСтрока.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
								СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, КоличествоКЗаказу);
								НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
							Иначе // Всю номенклатуру нужно заказать под заказ
								НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
								НайденнаяСтрока.Отменено = Истина;
								НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
							КонецЕсли;	
							
							Попытка
								ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
							Исключение
								ОписаниеОшибки = НСтр("ru = 'Не удалось отменить еще не заказанную позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
								ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
							КонецПопытки;
							
						КонецЕсли;
						
						Если СтрокаТовары.ОбеспеченоПоступлением > 0 Тогда
							ЗапросЗаказыПоставщику = Новый Запрос;
							ЗапросЗаказыПоставщику.Текст = ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам();
							ЗапросЗаказыПоставщику.УстановитьПараметр("Склад", СтрокаТовары.Склад);
							ЗапросЗаказыПоставщику.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
							ЗапросЗаказыПоставщику.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
							ВыборкаЗаказыПоставщику = ЗапросЗаказыПоставщику.Выполнить().Выбрать();
							Пока ВыборкаЗаказыПоставщику.Следующий() Цикл
								Сообщить(ВыборкаЗаказыПоставщику.ЗаказПоставщику);
								//РеквизитФормыВЗначение("Объект").ОповеститьОтветственногоЗаЗаказПоставщику(ВыборкаЗаказыПоставщику.ЗаказПоставщику, СтрокаТовары.Номенклатура, ВыборкаЗаказыПоставщику.ЗаказПоставщику.Менеджер);	
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
					//  Скоректируем резерв на ту номенклатуру, которая уже заказана
					ОтмененоРегламентом = 0;
					
					Запрос = Новый Запрос;
					Запрос.Текст = ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказЗаказано();
					Запрос.УстановитьПараметр("Склад", СтрокаТовары.Склад);
					Запрос.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
					Запрос.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
					ОбеспечениеЗаказано = Запрос.Выполнить().Выбрать();
					Если ОбеспечениеЗаказано.Следующий() Тогда
						
						КоличествоКПоступлению = ОбеспечениеЗаказано.КПоступлениюОстаток;
						
						// Проверяем на заказы на перемещения
						ЗапросЗаказыНаПеремещения = Новый Запрос;
						ЗапросЗаказыНаПеремещения.Текст = ПолучитьТекстЗапросаДляОтменыЗаказовНаПеремещения();
						ЗапросЗаказыНаПеремещения.УстановитьПараметр("Склад", ОбеспечениеЗаказано.Склад);
						ЗапросЗаказыНаПеремещения.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
						ЗапросЗаказыНаПеремещения.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
						РезультатПакета = ЗапросЗаказыНаПеремещения.ВыполнитьПакет();
						ВыборкаИзРгЗНП = РезультатПакета[1].Выбрать();
						ВыборкаИзРгОЗ = РезультатПакета[2].Выбрать();
						Пока ВыборкаИзРгЗНП.Следующий() Цикл
								
							ПараметрыОтбора_1 = ПолучитьПараметрыОтбора(ВыборкаИзРгЗНП);
	                        ПараметрыСостоянияОбеспечения_1 = ПолучитьПараметрыСостоянияОбеспечения(ПараметрыОтбора_1);
							ОбработкаСостояниеОбеспечения_1 = Обработки.СостояниеОбеспечения.Создать(); 
							ОбработкаСостояниеОбеспечения_1.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения_1, ПараметрыВидимости);
							Для каждого СтрокаТовары_1 Из ОбработкаСостояниеОбеспечения_1.Товары Цикл
																
								Если СтрокаТовары_1.КодСтроки = ВыборкаИзРгЗНП.КодСтроки Тогда
								
									ЗаказНаПеремещениеОбъект = ВыборкаИзРгЗНП.Ссылка.ПолучитьОбъект();
									НайденнаяСтрока_1 = ЗаказНаПеремещениеОбъект.Товары.Найти(ВыборкаИзРгЗНП.КодСтроки, "КодСтроки");
									Если НайденнаяСтрока_1 = Неопределено Тогда
										ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу, данные были изменены другим пользователем'");
										ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
									  	Прервать;
									КонецЕсли;
									
									Если СтрокаТовары_1.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
										
										Если СтрокаТовары_1.ВНаличии <> НайденнаяСтрока_1.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
											СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1);
										Иначе // Вся номенклатуры уже есть в наличии под заказ
											НайденнаяСтрока_1.Отменено = Истина;
										КонецЕсли;
										
										НачатьТранзакцию();
										
											Попытка
												ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
											Исключение
												ОтменитьТранзакцию();
												ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ на перемещение"" - вариант обеспечения ""СоСклада"".'") + ОписаниеОшибки();
												ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
											  	Прервать;
											КонецПопытки;
											
											Если СтрокаТовары_1.ВНаличии + ОтмененоРегламентом < СтрокаТовары.КоличествоУпаковок Тогда
												СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);	
											ИначеЕсли СтрокаТовары_1.ВНаличии + ОтмененоРегламентом <> НайденнаяСтрока.КоличествоУпаковок Тогда
												СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);
												НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;	
											Иначе
												НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
												НайденнаяСтрока.Отменено = Истина;
												НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));	
											КонецЕсли;	
											
											Попытка
												ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
											Исключение
												ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ клиента"" после отмены позиции документа ""Заказ на перемещение"".'") + ОписаниеОшибки();
												ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
											КонецПопытки;
											
										ЗафиксироватьТранзакцию();
										
										ОтмененоРегламентом = ОтмененоРегламентом + СтрокаТовары_1.ВНаличии;
										
									ИначеЕсли СтрокаТовары_1.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
										
										Если СтрокаТовары_1.ВНаличии > 0 Тогда
											
											ДокументОбъект = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
											ДокументОбъект.Заполнить(ВыборкаИзРгЗНП.Ссылка);
											ДокументОбъект.Дата = ТекущаяДата();
											ДокументОбъект.УстановитьНовыйНомер();
											ДокументОбъект.Товары.Очистить();
											
											НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары_1);
											НоваяСтрокаТовары.Количество = СтрокаТовары_1.Вналичии * СтрокаТовары_1.УпаковкаКоэффициент;
											НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовары_1.Вналичии;
											НоваяСтрокаТовары.ИсходноеНазначение = СтрокаТовары_1.Назначение;
											
											НачатьТранзакцию();
					
												Попытка
													ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
												Исключение
													ОтменитьТранзакцию();
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												  	Прервать;
												КонецПопытки;
												
												Если СтрокаТовары_1.ВНаличии < СтрокаТовары_1.КоличествоУпаковок Тогда // Часть номенклатуры уже есть в наличии под заказ
													СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1);	
												ИначеЕсли СтрокаТовары_1.ВНаличии <> НайденнаяСтрока_1.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
													СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1);
												Иначе // Вся номенклатуры уже есть в наличии под заказ
													НайденнаяСтрока_1.Отменено = Истина;
												КонецЕсли;
												
												Попытка
													ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОтменитьТранзакцию();
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												  	Прервать;
												КонецПопытки;
												
												Если СтрокаТовары_1.ВНаличии + ОтмененоРегламентом < СтрокаТовары.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);	
												ИначеЕсли СтрокаТовары_1.ВНаличии + ОтмененоРегламентом <> НайденнаяСтрока.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, СтрокаТовары_1.ВНаличии);
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;	
												Иначе
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
													НайденнаяСтрока.Отменено = Истина;
													НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));	
												КонецЕсли;	
												
												Попытка
													ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ клиента"" после документа ""Корректировка назначения"" и отмены позиции документа ""Заказ на перемещение"".'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												КонецПопытки;
												
											ЗафиксироватьТранзакцию();
										
											ОтмененоРегламентом = ОтмененоРегламентом + СтрокаТовары_1.ВНаличии;
											
										КонецЕсли;
										
										
										Если СтрокаТовары_1.ОбеспеченоПоступлением > 0 Тогда
											ЗапросЗаказыПоставщику = Новый Запрос;
											ЗапросЗаказыПоставщику.Текст = ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам();
											ЗапросЗаказыПоставщику.УстановитьПараметр("Склад", ОбеспечениеЗаказано.Склад);
											ЗапросЗаказыПоставщику.УстановитьПараметр("Назначение", СтрокаТовары.Назначение);
											ЗапросЗаказыПоставщику.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
											ВыборкаЗаказыПоставщику = ЗапросЗаказыПоставщику.Выполнить().Выбрать();
											Пока ВыборкаЗаказыПоставщику.Следующий() Цикл
												РеквизитФормыВЗначение("Объект").ОповеститьОтветственногоЗаЗаказПоставщику(ВыборкаЗаказыПоставщику.ЗаказПоставщику, СтрокаТовары.Номенклатура, ВыборкаЗаказыПоставщику.ЗаказПоставщику.Менеджер);	
											КонецЦикла;
										КонецЕсли;
										
										
										Если СтрокаТовары_1.НеОбеспечено > 0 Тогда
											
											РазницаОбеспечения = СтрокаТовары_1.НеОбеспечено;
											Если КоличествоКПоступлению > 0 Тогда
												Если КоличествоКПоступлению >= СтрокаТовары_1.НеОбеспечено Тогда
													КоличествоКПоступлению = КоличествоКПоступлению - СтрокаТовары_1.НеОбеспечено;
													Продолжить;
												ИначеЕсли КоличествоКПоступлению < СтрокаТовары_1.НеОбеспечено Тогда
													РазницаОбеспечения = СтрокаТовары_1.НеОбеспечено - КоличествоКПоступлению;
													КоличествоКПоступлению = 0;	
												КонецЕсли;
											КонецЕсли;
											
											Если СтрокаТовары_1.НеОбеспечено <> НайденнаяСтрока_1.КоличествоУпаковок Тогда // Часть номенклатуры была уже отгружена по этому заказу	
												СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказНаПеремещениеОбъект, НайденнаяСтрока_1, СтрокаТовары_1, РазницаОбеспечения);
											Иначе // Вся номенклатуры уже есть в наличии под заказ
												НайденнаяСтрока_1.Отменено = Истина;
											КонецЕсли;
											
											НачатьТранзакцию();
											
												Попытка
													ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОтменитьТранзакцию();
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ на перемещение"" - вариант обеспечения ""ПодЗаказ"".'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаИзРгЗНП.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												  	Прервать;
												КонецПопытки;
												
												Если РазницаОбеспечения + ОтмененоРегламентом < СтрокаТовары.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, РазницаОбеспечения);	
												ИначеЕсли СтрокаТовары_1.НеОбеспечено + ОтмененоРегламентом <> НайденнаяСтрока.КоличествоУпаковок Тогда
													СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ЗаказКлиентаОбъект, НайденнаяСтрока, СтрокаТовары, РазницаОбеспечения);
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;	
												Иначе
													НайденнаяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
													НайденнаяСтрока.Отменено = Истина;
													НайденнаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));	
												КонецЕсли;	
												
												Попытка
													ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
												Исключение
													ОписаниеОшибки = НСтр("ru = 'Не удалось отменить позицию из документа ""Заказ клиента"" после отмены позиции документа ""Заказ на перемещение"".'") + ОписаниеОшибки();
													ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, ВыборкаЗаказов.Ссылка, УровеньЖурналаРегистрации.Ошибка);
												КонецПопытки;
												
											ЗафиксироватьТранзакцию();
											
											ОтмененоРегламентом = ОтмененоРегламентом + СтрокаТовары_1.НеОбеспечено;
											
										КонецЕсли;
										
									Иначе
										//ОписаниеОшибки = НСтр("ru = 'Не удалось отменить еще не заказанную позицию ""Под Заказ"" по заказу'") + ОписаниеОшибки();
										//ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
										//	УровеньЖурналаРегистрации.Ошибка, 
										//	,
										//	ВыборкаЗаказов.Заказ,
										//	ОписаниеОшибки);
										//РеквизитФормыВЗначение("Объект").ОповеститьОтделТехническойПоддержки(ВыборкаЗаказов.Ссылка, ОписаниеОшибки);
									КонецЕсли;
										
								КонецЕсли; 
								
							КонецЦикла; 
							
						КонецЦикла;
												
					КонецЕсли;
				
				КонецЕсли;
				
				РеквизитФормыВЗначение("Объект").ОповеститьОтветственногоЗаЗаказ(ВыборкаЗаказов.Заказ, ВыборкаЗаказов.Ответственный, "");
				РеквизитФормыВЗначение("Объект").ОповеститьОтветственногоЗаЗаказ(ВыборкаЗаказов.Заказ, ЗаказКлиентаОбъект.Менеджер, "");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура СоздатьНовуюСтрокуДляОтменыПозицииВНаличии(ДокументОбъект, НайденнаяСтрока, СтрокаОбеспечения)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
	
	НайденнаяСтрока.Количество 		   = НайденнаяСтрока.Количество 		- СтрокаОбеспечения.Вналичии * СтрокаОбеспечения.УпаковкаКоэффициент;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаОбеспечения.Вналичии;
	
	НоваяСтрока.Количество 		   = СтрокаОбеспечения.Вналичии * СтрокаОбеспечения.УпаковкаКоэффициент;
	НоваяСтрока.КоличествоУпаковок = СтрокаОбеспечения.Вналичии;
	НоваяСтрока.КодСтроки		   = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
	
	НоваяСтрока.Отменено = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		НоваяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
		НоваяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНовуюСтрокуДляОтменыПозицииНеЗаказано(ДокументОбъект, НайденнаяСтрока, СтрокаОбеспечения, Количество)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
	
	НайденнаяСтрока.Количество 		   = НайденнаяСтрока.Количество 		- Количество * СтрокаОбеспечения.УпаковкаКоэффициент;
	НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - Количество;
	
	НоваяСтрока.Количество 		   = Количество * СтрокаОбеспечения.УпаковкаКоэффициент;
	НоваяСтрока.КоличествоУпаковок = Количество;
	НоваяСтрока.КодСтроки		   = 0;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
	
	НоваяСтрока.Отменено = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		НоваяСтрока.ОтменитьЗаказПодЗаказ = Ложь;
		НоваяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("5ea1cfcd-47f8-11e0-9f98-001517115d85"));
	КонецЕсли;
	
КонецПроцедуры



Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказКлиента") 
	 ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьПараметрыОтбора(Выборка)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заказ", Выборка.Ссылка);
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.Склад);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Выборка.Ссылка.НеОтгружатьЧастями);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", Выборка.Ссылка.ЖелаемаяДатаОтгрузки);
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.СкладОтправитель);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Ложь);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", ?(ЗначениеЗаполнено(Выборка.Ссылка.ЖелаемаяДатаПоступления), КонецДня(Выборка.Ссылка.Дата), Неопределено));
	КонецЕсли;
	ПараметрыОтбора.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище(Выборка.Ссылка));
	ПараметрыОтбора.Вставить("РассчитатьБезЗаказа", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции // ПолучитьПараметрыОтбора()


Функция ПолучитьТекстЗапросаАвтоматическойОтменыЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Заказ			КАК Заказ,
		|	Заказ			КАК Ссылка,
		|	КодСтроки		КАК КодСтроки,
		|	Номенклатура	КАК Номенклатура,
		|	Характеристика	КАК Характеристика,
		|	Выполнено		КАК Выполнено,
		|	Ответственный   КАК Ответственный
		|ИЗ
		|	РегистрСведений.ОтменитьЗаказПодЗаказ
		|ГДЕ
		|	Выполнено = Ложь	
		|";
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказЗаказано()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Оз.Склад,
		|	ОЗ.ПотребностьОстаток,
		|	ОЗ.КЗаказуОстаток,
		|	ОЗ.ЗаказаноОстаток,
		|	ОЗ.НаличиеСоСкладаОстаток,
		|	IsNull(ТКППО.КПоступлениюОстаток, 0) КАК КПоступлениюОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 <> &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ОЗ
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, 
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 <> &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ТКППО
		|ПО	ТКППО.Назначение 	= ОЗ.Назначение
		|И	ТКППО.Номенклатура 	= ОЗ.Номенклатура
		|И	ТКППО.Склад 		= ОЗ.Склад
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаСостояниеОбеспеченияПодЗаказНеЗаказано()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Оз.Склад,
		|	ОЗ.ПотребностьОстаток,
		|	ОЗ.КЗаказуОстаток,
		|	ОЗ.ЗаказаноОстаток,
		|	ОЗ.НаличиеСоСкладаОстаток,
		|	IsNull(ТКППО.КПоступлениюОстаток, 0) КАК КПоступлениюОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 = &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ОЗ
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, 
		|				Номенклатура = &Номенклатура
		|			И 	Склад 		 = &Склад
		|			И	Назначение 	 = &Назначение
		|			) КАК ТКППО
		|ПО	ТКППО.Назначение 	= ОЗ.Назначение
		|И	ТКППО.Номенклатура 	= ОЗ.Номенклатура
		|И	ТКППО.Склад 		= ОЗ.Склад
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтменыЗаказовНаПеремещения()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Регистратор		КАК Ссылка,
		|	КЗаказу			КАК КЗаказу,
		|	НаличиеСоСклада КАК НаличиеСоСклада
		|ПОМЕСТИТЬ ЗаказыНаПеремещения
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов
		|ГДЕ
		|	Регистратор Ссылка Документ.ЗаказНаПеремещение
		|И	Номенклатура = &Номенклатура
		|И	Склад		 = &Склад
		|И	Назначение	 = &Назначение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	РгЗаказыНаПеремещение.ЗаказНаПеремещение	КАК Ссылка,
		|	РгЗаказыНаПеремещение.Номенклатура			КАК Номенклатура,
		|	РгЗаказыНаПеремещение.КодСтроки				КАК КодСтроки,
		|	РгЗаказыНаПеремещение.КОформлениюОстаток	КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (ВЫБРАТЬ Ссылка ИЗ ЗаказыНаПеремещения)
		|												И	Номенклатура = &Номенклатура) КАК РгЗаказыНаПеремещение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	ЗаказыНаПеремещения
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗаказыНаПеремещения;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтменыЗаказовПоставщикам()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Регистратор		КАК ЗаказПоставщику,
		|	Заказано		КАК Заказано,
		|	НаличиеСоСклада КАК НаличиеСоСклада
		|ПОМЕСТИТЬ ЗаказыПоставщикам
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов
		|ГДЕ
		|	Регистратор Ссылка Документ.ЗаказПоставщику
		|И	Номенклатура = &Номенклатура
		|И	Склад		 = &Склад
		|И	Назначение	 = &Назначение
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	РгЗаказыПоставщикам.ЗаказПоставщику		КАК ЗаказПоставщику,
		|	РгЗаказыПоставщикам.Номенклатура		КАК Номенклатура,
		|	РгЗаказыПоставщикам.КодСтроки			КАК КодСтроки,
		|	РгЗаказыПоставщикам.КОформлениюОстаток	КАК КОформлению
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (ВЫБРАТЬ ЗаказПоставщику ИЗ ЗаказыПоставщикам)
		|												И	Номенклатура = &Номенклатура) КАК РгЗаказыПоставщикам
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции



Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
	РеквизитФормыВЗначение("Объект").ОповеститьОтделТехническойПоддержки(Ссылка, ОписаниеОшибки);
		
КонецПроцедуры
 






Функция ПоместитьТоварыВоВременноеХранилище(ЗаказКлиента)
	
	Возврат ПоместитьВоВременноеХранилище(ЗаказКлиента.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ПоместитьТоварыВоВременноеХранилище()

Функция ПолучитьПараметрыСостоянияОбеспечения(Параметры)
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Параметры.НеОтгружатьЧастями);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа", Параметры.РассчитатьБезЗаказа);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии);
	
	Возврат ПараметрыСостоянияОбеспечения;
	
КонецФункции // ПолучитьПараметрыСостоянияОбеспечения()




