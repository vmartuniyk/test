Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки 
	Версия = "1.0.8";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. обновление свойства номенклатуры:""Дней на складе"" [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обновление свойства номенклатуры:""Дней на складе"" [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление свойства номенклатуры:""Дней на складе"" [" + Версия + "]", "РасчетКоличестваДнейНаСкладе();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

Функция ПолучитьБиблиотеку()
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Библиотека внешних обработок");	
	ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;
КонецФункции






Процедура РасчетКоличестваДнейНаСкладе() Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "
		|ВЫБРАТЬ   
		|	Период,
		|	Номенклатура,
		|	КоличествоНачальныйОстаток 	КАК НачальныйОстаток,
		|	КоличествоКонечныйОстаток 	КАК КонечныйОстаток,
		|
		|	ВЫБОР 
		|		КОГДА КоличествоПриход > 0
		|		ТОГДА КоличествоПриход
		|		ИНАЧЕ 	ВЫБОР
		|					КОГДА КоличествоРасход < 0 
		|					ТОГДА -КоличествоРасход
		|					ИНАЧЕ 0
		|				КОНЕЦ 
		|	КОНЕЦ КАК ПриходТовара,
		|	ВЫБОР 
		|		КОГДА КоличествоРасход > 0
		|		ТОГДА КоличествоРасход
		|		ИНАЧЕ ВЫБОР
		|					КОГДА КоличествоПриход < 0 
		|					ТОГДА -КоличествоПриход
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|	КОНЕЦ КАК РасходТовара
		|	
		|ПОМЕСТИТЬ ОстаткиПоДням
		|ИЗ
		| 	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, &КонецДня, Регистратор, , )
		|ГДЕ
		|	ТипЗначения(Регистратор) <> Тип(Документ.ПеремещениеТоваров)
		|И	ТипЗначения(Регистратор) <> Тип(Документ.ПередачаТоваровМеждуОрганизациями)
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Сумма(ПриходТовара) КАК ПриходТовара
		|	
		|ПОМЕСТИТЬ ВсегоЗакуплено
		|ИЗ
		|	ОстаткиПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|;			
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Период	
		|
		|ПОМЕСТИТЬ ОкончаниеОстатков
		|ИЗ
		|	ОстаткиПоДням	
		|
		|ГДЕ
		| 	КонечныйОстаток = 0
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоДням.Номенклатура,
		|	ОстаткиПоДням.Период									КАК ПериодПоявления,
		|	Минимум(ЕСТЬNULL(ОкончаниеОстатков.Период, &КонецДня))  КАК ПериодИсчезновения
		|
		|ПОМЕСТИТЬ ПериодНаличияОстатков
		|ИЗ
		|	ОстаткиПоДням КАК ОстаткиПоДням	
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ОкончаниеОстатков КАК ОкончаниеОстатков
		|ПО ОкончаниеОстатков.Номенклатура = ОстаткиПоДням.Номенклатура
		|И	ОкончаниеОстатков.Период	  >= ОстаткиПоДням.Период
		|
		|ГДЕ
		| 	ОстаткиПоДням.КонечныйОстаток <> 0
		|
		|СГРУППИРОВАТЬ ПО 
		|	ОстаткиПоДням.Номенклатура, 
		|	ОстаткиПоДням.Период
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОкончаниеОстатков;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Минимум(ПериодПоявления)	КАК ПерваяДата,
		|	Максимум(ПериодИсчезновения)КАК ПоследняяДата
		|	
		|ПОМЕСТИТЬ ОпорныеТочки
		|ИЗ
		|	ПериодНаличияОстатков
		|	
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|;		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МинПериод.Номенклатура,
		|
		|   Минимум(МинПериод.ПериодПоявления) КАК ПериодПоявления,
		|   МинПериод.ПериодИсчезновения,
		|
		|	ОпорныеТочки.ПерваяДата		КАК ПерваяДата,
		|   ОпорныеТочки.ПоследняяДата	КАК ПоследняяДата
		|
		|ПОМЕСТИТЬ ДиапазонНаличия
		|ИЗ
		| 	ПериодНаличияОстатков КАК МинПериод 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ОпорныеТочки КАК ОпорныеТочки
		|ПО ОпорныеТочки.Номенклатура = МинПериод.Номенклатура  
		|
		|СГРУППИРОВАТЬ ПО 
		|	МинПериод.Номенклатура,
		|	МинПериод.ПериодИсчезновения,
		|   ОпорныеТочки.ПерваяДата,
		|   ОпорныеТочки.ПоследняяДата
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПериодНаличияОстатков;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОпорныеТочки;	
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		| 	ОстаткиПоДням.Период,
		| 	Минимум(СледДвижение.Период) КАК СледДвижение,
		| 	
		|	ОстаткиПоДням.Номенклатура,
		|	ОстаткиПоДням.НачальныйОстаток,
		|	ОстаткиПоДням.КонечныйОстаток,
		|	
		|	ДиапазонНаличия.ПерваяДата,
		|	ДиапазонНаличия.ПоследняяДата
		|	
		|ПОМЕСТИТЬ ТабНаличия
		|ИЗ
		|	ОстаткиПоДням КАК ОстаткиПоДням
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоДням КАК СледДвижение
		|ПО СледДвижение.Номенклатура = ОстаткиПоДням.Номенклатура
		|И  СледДвижение.Период		  > ОстаткиПоДням.Период 
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДиапазонНаличия КАК ДиапазонНаличия
		|ПО ДиапазонНаличия.Номенклатура = ОстаткиПоДням.Номенклатура
		|И  (ОстаткиПоДням.Период >= ДиапазонНаличия.ПериодПоявления 
		|И   ОстаткиПоДням.Период <= ДиапазонНаличия.ПериодИсчезновения)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоДням.Период,
		|	ОстаткиПоДням.Номенклатура,
		|	ОстаткиПоДням.НачальныйОстаток,
		|	ОстаткиПоДням.КонечныйОстаток,	
		|	ДиапазонНаличия.ПерваяДата,
		|	ДиапазонНаличия.ПоследняяДата
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ОстаткиПоДням.Период, 
		|	ОстаткиПоДням.Номенклатура, 
		|	ОстаткиПоДням.ПриходТовара,
		|
		|   СУММА(ЗакупкиНаростающие.ПриходТовара) - ОстаткиПоДням.ПриходТовара КАК СуммаДо,
		|	СУММА(ЗакупкиНаростающие.ПриходТовара) 								КАК СуммаПосле
		|
		|ПОМЕСТИТЬ ЗакупкиНаростающие 
		|ИЗ 
		|	ОстаткиПоДням
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПоДням КАК ЗакупкиНаростающие						
		|ПО ОстаткиПоДням.Номенклатура  = ЗакупкиНаростающие.Номенклатура
		|И  ОстаткиПоДням.Период 	   >= ЗакупкиНаростающие.Период
		|И	ОстаткиПоДням.ПриходТовара <> 0
		|
		|СГРУППИРОВАТЬ ПО 
		|	ОстаткиПоДням.Период, 
		|	ОстаткиПоДням.Номенклатура,
		|	ОстаткиПоДням.ПриходТовара
		|
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакупкиНаростающие.Номенклатура КАК Объект,
		|	&Свойство_Партий 				КАК Свойство,
		|	ВЫБОР
		|		КОГДА СуммаПосле > Расход 
		|		ТОГДА РАЗНОСТЬДАТ(ЗакупкиНаростающие.Период, &КонецДня, День)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Значение
		| 
		|ИЗ
		|	ЗакупкиНаростающие
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						Номенклатура,
		|						Максимум(Период) 	КАК Период,
		|						Сумма(РасходТовара) КАК Расход
		|					ИЗ
		|						ОстаткиПоДням
		|					
		|					ГДЕ
		|						Период <> &КонецДня		
		|					СГРУППИРОВАТЬ ПО 
		|						Номенклатура) КАК ВлПродано
		|ПО ВлПродано.Номенклатура = ЗакупкиНаростающие.Номенклатура
		|И  ВлПродано.Расход	  >= ЗакупкиНаростающие.СуммаДо
		|И  ВлПродано.Расход	  <	 ЗакупкиНаростающие.СуммаПосле
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОстаткиПоДням;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДиапазонНаличия;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗакупкиНаростающие;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабНаличия.Номенклатура КАК Объект,
		|	&Свойство_Дней 			КАК Свойство,
		|	ВЫБОР
		|		КОГДА ВсегоЗакуплено.ПриходТовара = 0
		|		ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Сумма(ВЫБОР
		|				КОГДА ТабНаличия.Период = ТабНаличия.ПерваяДата
		|				ТОГДА 	ВЫБОР 
		|							КОГДА ТабНаличия.НачальныйОстаток = 0
		|							ТОГДА ТабНаличия.КонечныйОстаток  * РАЗНОСТЬДАТ(ТабНаличия.Период, ТабНаличия.СледДвижение, День)
		|							ИНАЧЕ ТабНаличия.НачальныйОстаток * РАЗНОСТЬДАТ(ТабНаличия.Период, ТабНаличия.СледДвижение, День)
		|						КОНЕЦ 
		|				КОГДА ТабНаличия.Период = ТабНаличия.ПоследняяДата
		|				ТОГДА 	ВЫБОР
		|							КОГДА ТабНаличия.НачальныйОстаток = 0
		|							ТОГДА ТабНаличия.КонечныйОстаток  
		|							ИНАЧЕ ТабНаличия.НачальныйОстаток
		|						КОНЕЦ 
		|				КОГДА ТабНаличия.НачальныйОстаток = 0 
		|				ТОГДА ТабНаличия.КонечныйОстаток  * РАЗНОСТЬДАТ(ТабНаличия.Период, ТабНаличия.СледДвижение, День)
		|				КОГДА ТабНаличия.КонечныйОстаток  = 0 
		|				ТОГДА ТабНаличия.НачальныйОстаток 
		|				ИНАЧЕ ТабНаличия.КонечныйОстаток * РАЗНОСТЬДАТ(ТабНаличия.Период, ТабНаличия.СледДвижение, День)	
		|		КОНЕЦ) / ВсегоЗакуплено.ПриходТовара КАК Число(5, 1)) 
		|	КОНЕЦ КАК Значение 
		|		 	
		|ИЗ
		|	ТабНаличия
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВсегоЗакуплено 
		|ПО ВсегоЗакуплено.Номенклатура = ТабНаличия.Номенклатура
		|		
		|СГРУППИРОВАТЬ ПО
		|	ТабНаличия.Номенклатура,
		|	ВсегоЗакуплено.ПриходТовара
		|;";
	
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		ВызватьИсключение "Настройки библиотеки внешних обработок не найдены!" + Символы.ПС + "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок""";	
	КонецЕсли;
	
	ДанныеПочты = Неопределено;
	Если НЕ ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты.Пустая() И НЕ ПустаяСтрока(ГлобальныеНастройки.АдресЭлектроннойПочты) Тогда 
		ДанныеПочты = Новый Структура("УчетнаяЗаписьЭлектроннойПочты, АдресЭлектроннойПочты",  ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты, Новый Массив);
		ДанныеПочты.АдресЭлектроннойПочты.Добавить(Новый Структура("Адрес, Представление", ГлобальныеНастройки.АдресЭлектроннойПочты, "Отдел тех. поддержки"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДата()));
	Если ГлобальныеНастройки.Свойство("СвойствоДнейНаСкладе") Тогда
		Запрос.УстановитьПараметр("Свойство_Дней", ГлобальныеНастройки.СвойствоДнейНаСкладе);		
	Иначе
		ОповеститьОбОшибкеПоПочте(ДанныеПочты, Новый Структура("Тема, Тело", "ВНИМАНИЕ! Не задано значение свойства: ""СвойствоДнейНаСкладе""!", "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок"""));	
		ВызватьИсключение "Не задано значение свойства: ""СвойствоДнейНаСкладе""" + Символы.ПС + "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок""";
	КонецЕсли;
		
	Если ГлобальныеНастройки.Свойство("СвойствоПартияНаСкладе") Тогда
     	Запрос.УстановитьПараметр("Свойство_Партий", ГлобальныеНастройки.СвойствоПартияНаСкладе);
	Иначе
		ОповеститьОбОшибкеПоПочте(ДанныеПочты, Новый Структура("Тема, Тело", "ВНИМАНИЕ! Не задано значение свойства: ""СвойствоПартияНаСкладе""!", "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок"""));
		ВызватьИсключение "Не задано значение свойства: ""СвойствоПартияНаСкладе""" + Символы.ПС + "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок""";
	КонецЕсли;
	
	РезультатПакета = Запрос.ВыполнитьПакет();	

	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(ГлобальныеНастройки.СвойствоДнейНаСкладе);
	НаборЗаписей.Загрузить(РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(ГлобальныеНастройки.СвойствоПартияНаСкладе);
	НаборЗаписей.Загрузить(РезультатПакета[РезультатПакета.ВГраница() - 4].Выгрузить());
	НаборЗаписей.Записать();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		//1. Склады
		|ВЫБРАТЬ
		|	Склад
		|ПОМЕСТИТЬ Склады
		|ИЗ
		|	РегистрСведений.Модуль_ДоступныеСклады
		|ГДЕ
		|	Основной
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		//2. Номенклатура
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ СпрНоменклатура
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (ВЫБРАТЬ Склад ИЗ Склады))
		|	
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ТипЗначения(ДокументПоступления) <> Тип(Документ.ЗаказПоставщику) И Склад В (ВЫБРАТЬ Склад ИЗ Склады))
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		//3. 
		|ВЫБРАТЬ
	   	|   &НачалоДня                             КАК Дата,
       	|	СпрНоменклатура.Номенклатура   		   КАК Номенклатура,
	   	|	IsNull(БонусыМенеджерам.Бонус, 0) 	   КАК Бонус,
	   	|	Истина 								   КАК Используется 
       	|	
       	|ИЗ
		|	СпрНоменклатура КАК СпрНоменклатура
       	|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки( , Склад В (ВЫБРАТЬ Склад ИЗ Склады)) КАК СвободныеОстаткиОстатки
		|ПО	СвободныеОстаткиОстатки.Номенклатура = СпрНоменклатура.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, ТипЗначения(ДокументПоступления) <> Тип(Документ.ЗаказПоставщику)
		|															   И Склад В (ВЫБРАТЬ Склад ИЗ Склады)) КАК ТоварыВДвиженииПеремещения
		|ПО	ТоварыВДвиженииПеремещения.Номенклатура = СпрНоменклатура.Номенклатура
	   	|
	   	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	   	|ПО  &СвойствоДнейНаСкладе		  = ДополнительныеСведения.Свойство
	   	|И	 СпрНоменклатура.Номенклатура = ДополнительныеСведения.Объект
	   	|	
	   	|
	   	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусыМенеджерам КАК БонусыМенеджерам
	    |ПО  СпрНоменклатура.Номенклатура = БонусыМенеджерам.Номенклатура
	    |И	 &НачалоВчера				  = БонусыМенеджерам.Дата
	    |
	    |ГДЕ
		|	IsNull(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) + IsNull(ТоварыВДвиженииПеремещения.КПоступлениюОстаток, 0) > 0
		|И (
		|		(
		|			СпрНоменклатура.Номенклатура.ВидНоменклатуры.КритичноеЧислоДней <> 0
		|		И
		|			СпрНоменклатура.Номенклатура.ВидНоменклатуры.КритичноеЧислоДней < IsNull(ДополнительныеСведения.Значение, 0)
		|		)
		|	ИЛИ ЕСТЬNULL(БонусыМенеджерам.Бонус, 0) <> 0
		|	)";
	Запрос.УстановитьПараметр("СвойствоДнейНаСкладе", ГлобальныеНастройки.СвойствоДнейНаСкладе);
	Запрос.УстановитьПараметр("НачалоДня",   НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("НачалоВчера", НачалоДня(НачалоДня(ТекущаяДата())-1));
	
	НаборЗаписей = РегистрыСведений.БонусыМенеджерам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Дата.Установить(НачалоДня(ТекущаяДата()));
	РезультатПакета = Запрос.ВыполнитьПакет();
	НаборЗаписей.Загрузить(РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	НаборЗаписей.Записать();
			
КонецПроцедуры





Процедура ОповеститьОбОшибкеПоПочте(ДанныеПочты, ПараметрыПисьма)
	Если ДанныеПочты = Неопределено Тогда Возврат; КонецЕсли;
	БиблиотекаОбъект = ПолучитьБиблиотеку();
	ПараметрыПисьма = БиблиотекаОбъект.СформироватьПараметрыПисьма(ПараметрыПисьма.Тема, ПараметрыПисьма.Тело, ДанныеПочты.АдресЭлектроннойПочты);
	БиблиотекаОбъект.ОтправитьСообщениеПоSMTP(ДанныеПочты.УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);	
КонецПроцедуры
