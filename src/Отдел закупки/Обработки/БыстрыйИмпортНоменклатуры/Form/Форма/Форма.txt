
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СформироватьТаблицуНастроек();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиИмпорта

&НаКлиенте
Процедура НастройкиИмпортаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИмпортаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИмпорт(Команда)
	ОчиститьСообщения();
	ВыполнитьИмпортНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИмпортаСимволыРазбивкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.НастройкиИмпорта.ТекущиеДанные;
	ТекущиеДанные.СимволыРазбивки.ТИпЗначения = Новый ОписаниеТипов("Строка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатАнализа

&НаКлиенте
Процедура РезультатАнализаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	ОчиститьСообщения();
	СоздатьНоменклатуруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)
	
	ТекущиеДанные = Элементы.РезультатАнализа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru='Номенклатуры нету в базе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РезультатАнализа[" + РезультатАнализа.Индекс(ТекущиеДанные) + "].Наименование");
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьТаблицуНастроек()

	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Артикул";
	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Наименование";
	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Вид номенклатури";
	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Группа номенклатури";

КонецПроцедуры // СформироватьТаблицуНастроек()


&НаСервере
Процедура ВыполнитьИмпортНаСервере()

	Если Не ПроверитьНастройкиИмпорта() Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеНастроек();
	
	ТаблицаДанных = СформироватьТаблицуДанныхИмпорта();
	ВысотаТаблицы = ТаблицаАнализа.ВысотаТаблицы;
		
	Для ИндексСтроки = 1 По ВысотаТаблицы Цикл
		СтруктураСтроки = ПолучитьСтруктуруИмпорта();
		ПрочитатьСтрокуПриИмпорте(СтруктураСтроки, ИндексСтроки);
		Если Не ПустаяСтрока(СтруктураСтроки.ВидНоменклатуры)
				И Не ПустаяСтрока(СтруктураСтроки.ГруппаНоменклатуры)
				И Не ПустаяСтрока(СтруктураСтроки.Наименование) Тогда
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
		КонецЕсли;
	КонецЦикла; 
	
	ТаблицаДанных.Свернуть("Артикул, Наименование, ВидНоменклатуры, ГруппаНоменклатуры");
	ЗагрузитьТаблицуРезультатовАнализа(ТаблицаДанных);

КонецПроцедуры // ВыполнитьИмпортНаСервере()

&НаСервере
Процедура ПрочитатьСтрокуПриИмпорте(СтруктураСтроки, ИндексСтроки)
	
	СтруктураСтроки.Артикул 	 		= ?(ИндексАртикул = 0, "", СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексАртикул).Текст));
	СтруктураСтроки.ВидНоменклатуры 	= СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексВидНоменклатуры).Текст);
	СтруктураСтроки.ГруппаНоменклатуры 	= СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексГруппаНоменклатуры).Текст);
	
	Наименование = СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексНаименование).Текст);
	
	Для каждого СимволРазбивки Из СимволыРазбивки Цикл
		РезультатПоиска = Найти(Наименование, СимволРазбивки.Значение);
		Если РезультатПоиска <> Неопределено Тогда
			Если РезультатПоиска > 1 Тогда
				СтруктураСтроки.Артикул = СтруктураСтроки.Артикул + Сред(Наименование, РезультатПоиска + 1);
			КонецЕсли;
			ЗначащийИндекс = ПолучитьИндексЗначащегоСимвола(Наименование, РезультатПоиска);
			Если ЗначащийИндекс <= 0 Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Наименование = Сред(Наименование, 1, ЗначащийИндекс + 1);
			Возврат;
		КонецЕсли;
	КонецЦикла; 
	
	СтруктураСтроки.Наименование = Наименование;
	
КонецПроцедуры // ПрочитатьСтрокуПриИмпорте()

&НаСервере
Функция ПолучитьСтруктуруИмпорта()

	СтруктураИпорта = Новый Структура;
	СтруктураИпорта.Вставить("Артикул");	
	СтруктураИпорта.Вставить("ВидНоменклатуры");
	СтруктураИпорта.Вставить("ГруппаНоменклатуры");
	СтруктураИпорта.Вставить("Наименование");
	
	Возврат СтруктураИпорта;

КонецФункции // ПолучитьСтруктуруИмпорта()
 

&НаСервере
Процедура ЗагрузитьТаблицуРезультатовАнализа(ТаблицаДанных)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаЗагрузкаРезультатовАнализа();
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	РезультатАнализа.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьТаблицуРезультатовАнализа()

&НаСервере
Функция ТекстЗапросаЗагрузкаРезультатовАнализа()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Артикул КАК СТРОКА(35)) 				КАК Артикул,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Наименование КАК СТРОКА(1024)) 		КАК Наименование,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ВидНоменклатуры КАК СТРОКА(50)) 		КАК ВидНоменклатурыНаименование,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ГруппаНоменклатуры КАК СТРОКА(1024)) 	КАК ГруппаНоменклатурыНаименование
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 			КАК ВидНоменклатуры,
	|	Наименование 	КАК ВидНоменклатурыНаименование
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры
	|ГДЕ
	|	ПометкаУдаления = ЛОЖЬ
	|	И ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 			КАК ГруппаНоменклатуры,
	|	Наименование 	КАК ГруппаНоменклатурыНаименование
	|ПОМЕСТИТЬ ГруппыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура
	|ГДЕ
	|	ПометкаУдаления = ЛОЖЬ
	|	И ЭтоГруппа = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 				КАК Номенклатура,
	|	НаименованиеПолное 	КАК НоменклатураНаименование
	|ПОМЕСТИТЬ ВсяНоменклатура
	|ИЗ
	|	Справочник.Номенклатура
	|ГДЕ
	|	ПометкаУдаления = ЛОЖЬ
	|	И ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Артикул		КАК Артикул,
	|	ТаблицаДанных.Наименование	КАК Наименование,
	|	ЕСТЬNULL(ВидыНоменклатуры.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))  КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ГруппыНоменклатуры.ГруппаНоменклатуры, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ГруппаНоменклатуры,
	|	ЕСТЬNULL(ВсяНоменклатура.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ТаблицаДанных.ВидНоменклатурыНаименование = ВидыНоменклатуры.ВидНоменклатурыНаименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыНоменклатуры КАК ГруппыНоменклатуры
	|		ПО ТаблицаДанных.ГруппаНоменклатурыНаименование = ГруппыНоменклатуры.ГруппаНоменклатурыНаименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсяНоменклатура КАК ВсяНоменклатура
	|		ПО ТаблицаДанных.Наименование = ВсяНоменклатура.НоменклатураНаименование";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗагрузкаРезультатовАнализа()
 


&НаСервере
Функция ПроверитьНастройкиИмпорта()

	РезультатПроверки = Истина;
	
	Для Каждого СтрокаТаблицы Из НастройкиИмпорта Цикл
		
		ВывестиСтрокуРезультатаПроверки("Наименование", "наименованием номенклатуры", СтрокаТаблицы, РезультатПроверки);
		ВывестиСтрокуРезультатаПроверки("Вид номенклатури", "видом номенклатуры", СтрокаТаблицы, РезультатПроверки);
		ВывестиСтрокуРезультатаПроверки("Группа номенклатури", "группой номенклатуры", СтрокаТаблицы, РезультатПроверки);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверитьНастройкиИмпорта()

&НаСервере
Процедура ВывестиСтрокуРезультатаПроверки(ИмяКолонки, СуффиксСообщения, СтрокаТаблицы, РезультатПроверки)

	Если СтрокаТаблицы.ИмяКолонки = ИмяКолонки Тогда
		
		Если СтрокаТаблицы.НомерКолонки = 0 Тогда
			ТекстСообщения = НСтр("ru='Для выполнения процедуры импорта необходимо указать номер колонки из %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СуффиксСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НастройкиИмпорта[" + НастройкиИмпорта.Индекс(СтрокаТаблицы) + "].Использовать");
			РезультатПроверки = Ложь;
		КонецЕсли;
		
		Если СтрокаТаблицы.СимволыРазбивки.Количество() > 0 И СтрокаТаблицы.ПереноситьПослеРазбора = 0 Тогда
			ТекстСообщения = НСтр("ru='Для разбора по символам необходимо указать строку для переносв.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НастройкиИмпорта[" + НастройкиИмпорта.Индекс(СтрокаТаблицы) + "].ПереноситьПослеРазбора");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВывестиСтрокуРезультатаПроверки()
 
&НаСервере
Функция СформироватьТаблицуДанныхИмпорта()

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(35)));
	ТаблицаДанных.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	ТаблицаДанных.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаДанных.Колонки.Добавить("ГруппаНоменклатуры", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	
	Возврат ТаблицаДанных;

КонецФункции // СформироватьТаблицуДанныхИмпорта()


&НаСервере
Процедура ПрочитатьДанныеНастроек()

	ИндексАртикул 				= НастройкиИмпорта[0].НомерКолонки;
	ИндексНаименование 			= НастройкиИмпорта[1].НомерКолонки;
	ИндексВидНоменклатуры 		= НастройкиИмпорта[2].НомерКолонки;
	ИндексГруппаНоменклатуры 	= НастройкиИмпорта[3].НомерКолонки;
	СимволыРазбивки				= НастройкиИмпорта[1].СимволыРазбивки;
	ПереноситьПослеРазбора		= НастройкиИмпорта[1].ПереноситьПослеРазбора;

КонецПроцедуры // ПрочитатьДанныеНастроек()

&НаСервере
Функция ПолучитьИндексЗначащегоСимвола(СтрокаПоиска, ИндексНачала)
	
	Индекс = ИндексНачала;
	Код    = КодСимвола(СтрокаПоиска, Индекс);
	
	Пока Не КодВходитВДипазоны(Код) И Индекс >= 0 Цикл
		Код = КодСимвола(СтрокаПоиска, Индекс);
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Функция КодВходитВДипазоны(Код)
	
	Если Код >= 97 И Код <= 122 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Код >= 65 И Код <= 90 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Код >= 1072 И Код <= 1103 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Код >= 1040 И Код <= 1071 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Код >= 48 И Код <= 57 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции



&НаСервере
Процедура СоздатьНоменклатуруНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицы Из РезультатАнализа Цикл
		
		ЕстьОшибки = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru='Необходимо установить вид номенклатуры.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РезультатАнализа[" + РезультатАнализа.Индекс(СтрокаТаблицы) + "].ВидНоменклатуры");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ГруппаНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru='Необходимо установить группу номенклатуры.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РезультатАнализа[" + РезультатАнализа.Индекс(СтрокаТаблицы) + "].ГруппаНоменклатуры");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru='Номенклатура уже существует.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РезультатАнализа[" + РезультатАнализа.Индекс(СтрокаТаблицы) + "].Наименование");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НоваяНоменклатура, СтрокаТаблицы.ВидНоменклатуры);
		НоваяНоменклатура.Артикул 				= СокрЛП(СтрокаТаблицы.Артикул);
		НоваяНоменклатура.Наименование 			= СокрЛП(СтрокаТаблицы.Наименование);
		НоваяНоменклатура.НаименованиеПолное 	= СокрЛП(СтрокаТаблицы.Наименование);
		НоваяНоменклатура.СтавкаНДС				= Перечисления.СтавкиНДС.НДС20;
		НоваяНоменклатура.Родитель				= СтрокаТаблицы.ГруппаНоменклатуры;
		
		Попытка
			НоваяНоменклатура.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось создать номенклатуру.'");
			ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "РезультатАнализа[" + РезультатАнализа.Индекс(СтрокаТаблицы) + "].Наименование");
		КонецПопытки;
		 
		СтрокаТаблицы.Номенклатура = НоваяНоменклатура.Ссылка;
		
	КонецЦикла;	

КонецПроцедуры // СоздатьНоменклатуруНаСервере()

#КонецОбласти