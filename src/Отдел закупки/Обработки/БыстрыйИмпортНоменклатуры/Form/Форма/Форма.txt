
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СформироватьТаблицуНастроек();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиИмпорта

&НаКлиенте
Процедура НастройкиИмпортаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИмпортаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИмпорт(Команда)
	ВыполнитьИмпортНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатАнализа

&НаКлиенте
Процедура РезультатАнализаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьТаблицуНастроек()

	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Артикул";
	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Наименование";
	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Вид номенклатури";
	НоваяСтрока = НастройкиИмпорта.Добавить();
	НоваяСтрока.ИмяКолонки = "Группа номенклатури";

КонецПроцедуры // СформироватьТаблицуНастроек()


&НаСервере
Процедура ВыполнитьИмпортНаСервере()

	Если Не ПроверитьНастройкиИмпорта() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = СформироватьТаблицуДанныхИмпорта();
	ВысотаТаблицы = ТаблицаАнализа.ВысотаТаблицы;
	
	ИндексАртикул 				= НастройкиИмпорта[0].НомерКолонки;
	ИндексНаименование 			= НастройкиИмпорта[1].НомерКолонки;
	ИндексВидНоменклатуры 		= НастройкиИмпорта[2].НомерКолонки;
	ИндексГруппаНоменклатуры 	= НастройкиИмпорта[3].НомерКолонки;
	
	Для ИндексСтроки = 1 По ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ПрочитатьСтрокуПриИмпорте(НоваяСтрока, ИндексАртикул, ИндексНаименование, ИндексВидНоменклатуры, ИндексГруппаНоменклатуры, ИндексСтроки);
	КонецЦикла; 
	
	ТаблицаДанных.Свернуть("Артикул, Наименование, ВидНоменклатуры, ГруппаНоменклатуры");
	ЗагрузитьТаблицуРезультатовАнализа(ТаблицаДанных);

КонецПроцедуры // ВыполнитьИмпортНаСервере()

&НаСервере
Процедура ПрочитатьСтрокуПриИмпорте(НоваяСтрока, ИндексАртикул, ИндексНаименование, ИндексВидНоменклатуры, ИндексГруппаНоменклатуры, ИндексСтроки)
	НоваяСтрока.Артикул 	 		= ?(ИндексАртикул = 0, "", СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексАртикул).Текст));
	НоваяСтрока.Наименование 		= СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексНаименование).Текст);
	НоваяСтрока.ВидНоменклатуры 	= СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексВидНоменклатуры).Текст);
	НоваяСтрока.ГруппаНоменклатуры 	= СокрЛП(ТаблицаАнализа.Область("R"+ИндексСтроки+"C"+ИндексГруппаНоменклатуры).Текст);
КонецПроцедуры // ПрочитатьСтрокуПриИмпорте()


&НаСервере
Процедура ЗагрузитьТаблицуРезультатовАнализа(ТаблицаДанных)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаЗагрузкаРезультатовАнализа();
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	РезультатАнализа.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьТаблицуРезультатовАнализа()

&НаСервере
Функция ТекстЗапросаЗагрузкаРезультатовАнализа()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Артикул КАК СТРОКА(35)) 				КАК Артикул,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Наименование КАК СТРОКА(100)) 		КАК Наименование,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ВидНоменклатуры КАК СТРОКА(50)) 		КАК ВидНоменклатурыНаименование,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ГруппаНоменклатуры КАК СТРОКА(100)) 	КАК ГруппаНоменклатурыНаименование
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 			КАК ВидНоменклатуры,
	|	Наименование 	КАК ВидНоменклатурыНаименование
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры
	|ГДЕ
	|	ПометкаУдаления = ЛОЖЬ
	|	И ЭтоГруппа = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 			КАК ГруппаНоменклатуры,
	|	Наименование 	КАК ГруппаНоменклатурыНаименование
	|ПОМЕСТИТЬ ГруппыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура
	|ГДЕ
	|	ПометкаУдаления = ЛОЖЬ
	|	И ЭтоГруппа = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Артикул		КАК Артикул,
	|	ТаблицаДанных.Наименование	КАК Наименование,
	|	ЕСТЬNULL(ВидыНоменклатуры.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))  КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ГруппыНоменклатуры.ГруппаНоменклатуры, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ГруппаНоменклатуры
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ТаблицаДанных.ВидНоменклатурыНаименование = ВидыНоменклатуры.ВидНоменклатурыНаименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппыНоменклатуры КАК ГруппыНоменклатуры
	|		ПО ТаблицаДанных.ГруппаНоменклатурыНаименование = ГруппыНоменклатуры.ГруппаНоменклатурыНаименование";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗагрузкаРезультатовАнализа()
 


&НаСервере
Функция ПроверитьНастройкиИмпорта()

	РезультатПроверки = Истина;
	
	Для Каждого СтрокаТаблицы Из НастройкиИмпорта Цикл
		
		ВывестиСтрокуРезультатаПроверки("Наименование", "наименованием номенклатуры", СтрокаТаблицы, РезультатПроверки);
		ВывестиСтрокуРезультатаПроверки("Вид номенклатури", "видом номенклатуры", СтрокаТаблицы, РезультатПроверки);
		ВывестиСтрокуРезультатаПроверки("Группа номенклатури", "группой номенклатуры", СтрокаТаблицы, РезультатПроверки);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверитьНастройкиИмпорта()

&НаСервере
Процедура ВывестиСтрокуРезультатаПроверки(ИмяКолонки, СуффиксСообщения, СтрокаТаблицы, РезультатПроверки)

	Если СтрокаТаблицы.ИмяКолонки = ИмяКолонки Тогда
		
		Если СтрокаТаблицы.НомерКолонки = 0 Тогда
			ТекстСообщения = НСтр("ru='Для выполнения процедуры импорта необходимо указать номер колонки из %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СуффиксСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НастройкиИмпорта[" + НастройкиИмпорта.Индекс(СтрокаТаблицы) + "].Использовать");
			РезультатПроверки = Ложь;
		КонецЕсли;
		
		Если СтрокаТаблицы.СимволыРазбивки.Количество() > 0 И СтрокаТаблицы.ПереноситьПослеРазбора = 0 Тогда
			ТекстСообщения = НСтр("ru='Для разбора по символам необходимо указать строку для переносв.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НастройкиИмпорта[" + НастройкиИмпорта.Индекс(СтрокаТаблицы) + "].ПереноситьПослеРазбора");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВывестиСтрокуРезультатаПроверки()
 
&НаСервере
Функция СформироватьТаблицуДанныхИмпорта()

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(35)));
	ТаблицаДанных.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	ТаблицаДанных.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаДанных.Колонки.Добавить("ГруппаНоменклатуры", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	
	Возврат ТаблицаДанных;

КонецФункции // СформироватьТаблицуДанныхИмпорта()
 

#КонецОбласти