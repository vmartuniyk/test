
#Область ПрограммныйИнтерфейс

Процедура ЗаписатьАналогиИПодпихнюВРегистры(СтруктураЗаписей) Экспорт
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Если СтруктураЗаписей.Свойство("АналогиНоменклатуры") 
			И ТипЗнч(СтруктураЗаписей.АналогиНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		
			 Если Не ЗаписатьАналогыВРегистр(СтруктураЗаписей.АналогиНоменклатуры) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;   		
		КонецЕсли;
		
		Если СтруктураЗаписей.Свойство("Подпихня") 
			И ТипЗнч(СтруктураЗаписей.Подпихня) = Тип("ТаблицаЗначений") Тогда
		
			 Если Не ЗаписатьПодпихнюВРегистр(СтруктураЗаписей.Подпихня) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;   		
		КонецЕсли;        
	
	ЗафиксироватьТранзакцию();    
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторКоманды = "ЗаписатьАналогиИПодпихнюВРегистры" Тогда   		
		ЗаписатьАналогиИПодпихнюВРегистры(ПараметрыКоманды.СтруктураЗаписей); 				
	КонецЕсли;
	
КонецПроцедуры
 
Функция ПолучитьТаблицуНастроекАналоговНоменклатуры(ВидНоменклатуры) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТаблицаНастроекАналоговНоменклатуры();
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	НомерСтроки     = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл СтрокаТаблицы.НомерСтроки = НомерСтроки; НомерСтроки = НомерСтроки + 1; КонецЦикла; 
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ЗаписатьНастройкиАналогиНоменклатуры(ТаблицаНастроек, ВидНоменклатуры, СписокАналоговКУдалению) Экспорт
	
	СоответствиеАналогов = Новый Соответствие;
	
	НачатьТранзакцию();
	
	РезультатЗаписи = ЗаписатьНастройкиАналогов(ВидНоменклатуры, ТаблицаНастроек, СоответствиеАналогов);
	Если РезультатЗаписи = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
		
	РезультатУдаления = УдалитьАналогиНоменклатуры(СписокАналоговКУдалению);
	Если РезультатУдаления = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОчистки = ОчиститьПривязкиАналоговИПодпихни(СписокАналоговКУдалению);
	Если РезультатОчистки = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатУдаленияПодпихни = УдалитьПодпихнюПоСпискуАналогов(СписокАналоговКУдалению);
	Если РезультатУдаленияПодпихни = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СоответствиеАналогов;
	
КонецФункции

Функция ПолучитьТаблицуНастроекПодпихни(АналогНоменклатуры) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТаблицаНастроекПодпихни();
	
	Запрос.УстановитьПараметр("АналогНоменклатуры", АналогНоменклатуры);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	НомерСтроки     = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл СтрокаТаблицы.НомерСтроки = НомерСтроки; НомерСтроки = НомерСтроки + 1; КонецЦикла; 
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Процедура ЗаписатьНастройкиПодпихни(ТаблицаНастроек, АналогНоменклатуры, СписокПодпихниКУдалению) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
				
		Если Не СтрокаТаблицы.ЭлементИзменен Тогда
			Продолжить;			
		КонецЕсли;
		
		СпрОбъект = Неопределено;
		Если СтрокаТаблицы.Подпихня.Пустая() Тогда
			СпрОбъект = Справочники.ПД_Подпихня.СоздатьЭлемент();
		Иначе
			СпрОбъект = СтрокаТаблицы.Подпихня.ПолучитьОбъект();
		КонецЕсли;
		СпрОбъект.Наименование 	  = СтрокаТаблицы.ПодпихняНаименование;
		СпрОбъект.АналогНоменклатуры = АналогНоменклатуры;
		
		Настройки = СпрОбъект.Настройки;
		Настройки.Очистить();
		
		НоваяСтрока = Настройки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СпрОбъект.Записать();

	КонецЦикла;
	
	Для Каждого ПодпихняКУдалению Из СписокПодпихниКУдалению Цикл
		СпрОбъект 				 = ПодпихняКУдалению.Значение.ПолучитьОбъект();
		СпрОбъект.НеИспользовать = Истина;
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ОчисткаИЗаписьНастроек

Функция ЗаписатьНастройкиАналогов(ВидНоменклатуры, ТаблицаНастроек, СоответствиеАналогов)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		
		Если Не СтрокаТаблицы.ЭлементИзменен Тогда
			Продолжить;			
		КонецЕсли; 
		
		СпрОбъект = Неопределено;
		Если СтрокаТаблицы.АналогНоменклатуры.Пустая() Тогда
			СпрОбъект = Справочники.ПД_АналогиНоменклатуры.СоздатьЭлемент();
		Иначе
			СпрОбъект = СтрокаТаблицы.АналогНоменклатуры.ПолучитьОбъект();
		КонецЕсли;
		СпрОбъект.Наименование 	  = СтрокаТаблицы.АналогНоменклатурыНаименование;
		СпрОбъект.ВидНоменклатуры = ВидНоменклатуры;
		
		Настройки = СпрОбъект.Настройки;
		Настройки.Очистить();
		
		НоваяСтрока = Настройки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось записать аналог номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.АналогНоменклатурыНаименование);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		СоответствиеАналогов.Вставить(СтрокаТаблицы.НомерСтроки, СпрОбъект.Ссылка);
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция УдалитьАналогиНоменклатуры(СписокАналоговКУдалению)
	
	Для Каждого АналогКУдалению Из СписокАналоговКУдалению Цикл
		СпрОбъект 				 = АналогКУдалению.Значение.ПолучитьОбъект();
		СпрОбъект.НеИспользовать = Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить аналог номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, АналогКУдалению.АналогНоменклатурыНаименование);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОчиститьПривязкиАналоговИПодпихни(СписокАналоговКУдалению)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаОчиститьПривязкиАналоговИПодпихни();
	
	Запрос.УстановитьПараметр("СписокАналогов", СписокАналоговКУдалению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка 						 = Новый БлокировкаДанных;
	
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатуры");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихни");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	
	Блокировка.Заблокировать();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейАналоги = РегистрыСведений.ПД_ПривязкиАналогиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписейАналоги.Отбор.АналогНоменклатуры.Установить(Выборка.АналогНоменклатуры);
		
		Попытка
			НаборЗаписейАналоги.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить привязки для аналога номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.АналогНоменклатуры);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		НаборЗаписейПодпихни = РегистрыСведений.ПД_НаборПодпихни.СоздатьНаборЗаписей();
		НаборЗаписейПодпихни.Отбор.АналогНоменклатуры.Установить(Выборка.АналогНоменклатуры);
		
		Попытка
			НаборЗаписейПодпихни.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить привязки подпихни для аналога номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.АналогНоменклатуры);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ОчиститьПривязкиАналоговИПодпихни()
 
Функция УдалитьПодпихнюПоСпискуАналогов(СписокАналоговКУдалению)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаУдалениеПодпихниПоСпискуАналогов();
	
	Запрос.УстановитьПараметр("СписокАналогов", СписокАналоговКУдалению);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект 					= Выборка.Подпихня.ПолучитьОбъект();
		СпрОбъект.НеИспользовать 	= Истина;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить подпихню для аналога номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.АналогНоменклатуры);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область ТекстыЗапросов

Функция ТекстЗапросаТаблицаНастроекАналоговНоменклатуры()
	
	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Ссылка 			КАК АналогНоменклатуры,
				   |	Наименование    КАК Наименование
				   |ПОМЕСТИТЬ ТаблицаАналоговНоменклатуры
				   |ИЗ
				   |	Справочник.ПД_АналогиНоменклатуры
				   |ГДЕ
				   |	ВидНоменклатуры  = &ВидНоменклатуры
				   |	И НеИспользовать = ЛОЖЬ
				   |	
				   |ИНДЕКСИРОВАТЬ ПО
				   |	АналогНоменклатуры
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ПривязкиАналогов.Номенклатура 		КАК Номенклатура,
				   |	ПривязкиАналогов.АналогНоменклатуры КАК АналогНоменклатуры
				   |ПОМЕСТИТЬ ТаблицаНоменклатурыАналога
				   |ИЗ
				   |	РегистрСведений.ПД_ПривязкиАналогиНоменклатуры КАК ПривязкиАналогов
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаАналоговНоменклатуры КАК ТаблицаАналогов
				   |        ПО ПривязкиАналогов.АналогНоменклатуры = ТаблицаАналогов.АналогНоменклатуры
				   |        
				   |ИНДЕКСИРОВАТЬ ПО
				   |	АналогНоменклатуры,
				   |	Номенклатура
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ТаблицаНоменклатурыАналога.АналогНоменклатуры КАК АналогНоменклатуры,
				   |	3											  КАК Статус
				   |ПОМЕСТИТЬ АналогиНоменклатурыТекущиеИсключения
				   |ИЗ
				   |	ТаблицаНоменклатурыАналога КАК ТаблицаНоменклатурыАналога
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ИсключениеАналогов КАК ИсключениеАналогов
				   |		ПО ТаблицаНоменклатурыАналога.АналогНоменклатуры = ИсключениеАналогов.АналогНоменклатуры
				   |			И ТаблицаНоменклатурыАналога.Номенклатура = ИсключениеАналогов.Номенклатура
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ТаблицаНоменклатурыАналога.АналогНоменклатуры КАК АналогНоменклатуры,
				   |	1											  КАК Статус
				   |ПОМЕСТИТЬ АналогиНоменклатурыВсеИсключения
				   |ИЗ
				   |	ТаблицаНоменклатурыАналога КАК ТаблицаНоменклатурыАналога
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ИсключениеАналогов КАК ИсключениеАналогов
				   |		ПО ТаблицаНоменклатурыАналога.Номенклатура = ИсключениеАналогов.Номенклатура
				   |;				   
				   |
				   |ВЫБРАТЬ
	               |	НастройкиАналогов.ТоварнаяКатегория		КАК ТоварнаяКатегория,
	               |	НастройкиАналогов.ВидЦены				КАК ВидЦены,
	               |	НастройкиАналогов.НижняяГраница			КАК НижняяГраница,
	               |	НастройкиАналогов.ВерхняяГраница		КАК ВерхняяГраница,
	               |	НастройкиАналогов.Производитель			КАК Производитель,
	               |	НастройкиАналогов.Содержит				КАК Содержит,
	               |	НастройкиАналогов.НеСодержит			КАК НеСодержит,
	               |	0 										КАК НомерСтроки,
	               |	ТаблицаАналогов.АналогНоменклатуры 		КАК АналогНоменклатуры,
	               |	ТаблицаАналогов.Наименование 			КАК АналогНоменклатурыНаименование,
				   |	ЛОЖЬ									КАК ЭлементИзменен
				   |ПОМЕСТИТЬ ТаблицаНастроек
	               |ИЗ
	               |	Справочник.ПД_АналогиНоменклатуры.Настройки КАК НастройкиАналогов
	               |
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаАналоговНоменклатуры КАК ТаблицаАналогов
				   |		ПО НастройкиАналогов.Ссылка = ТаблицаАналогов.АналогНоменклатуры
				   |;
				   |
				   |ВЫБРАТЬ
				   |	ТаблицаНастроек.ТоварнаяКатегория				КАК ТоварнаяКатегория,
				   |	ТаблицаНастроек.ВидЦены							КАК ВидЦены,
				   |	ТаблицаНастроек.НижняяГраница					КАК НижняяГраница,
				   |	ТаблицаНастроек.ВерхняяГраница					КАК ВерхняяГраница,
				   |	ТаблицаНастроек.Производитель					КАК Производитель,
				   |	ТаблицаНастроек.Содержит						КАК Содержит,
				   |	ТаблицаНастроек.НеСодержит						КАК НеСодержит,
				   |	ТаблицаНастроек.НомерСтроки						КАК НомерСтроки,
				   |	ТаблицаНастроек.АналогНоменклатуры				КАК АналогНоменклатуры,
				   |	ТаблицаНастроек.АналогНоменклатурыНаименование 	КАК АналогНоменклатурыНаименование,
				   |	ТаблицаНастроек.ЭлементИзменен 					КАК ЭлементИзменен,
				   |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(ТекущиеИсключения.Статус, 0) = 3
				   |			ТОГДА 3
				   |		КОГДА ЕСТЬNULL(ВсеИсключения.Статус, 0) = 1
				   |			ТОГДА 1
				   |		ИНАЧЕ 2
				   |	КОНЕЦ											КАК СтатусИспользованияНоменклатуры
				   |ИЗ
				   |	ТаблицаНастроек КАК ТаблицаНастроек
				   |		
				   |		ЛЕВОЕ СОЕДИНЕНИЕ АналогиНоменклатурыТекущиеИсключения КАК ТекущиеИсключения
				   |		ПО ТаблицаНастроек.АналогНоменклатуры = ТекущиеИсключения.АналогНоменклатуры
				   |		
				   |		ЛЕВОЕ СОЕДИНЕНИЕ АналогиНоменклатурыВсеИсключения КАК ВсеИсключения
				   |		ПО ТаблицаНастроек.АналогНоменклатуры = ВсеИсключения.АналогНоменклатуры";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНастроекПодпихни()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидНоменклатуры			КАК ВидНоменклатуры,
	               |	ТоварнаяКатегория		КАК ТоварнаяКатегория,
	               |	ВидЦены					КАК ВидЦены,
	               |	НижняяГраница			КАК НижняяГраница,
	               |	ВерхняяГраница			КАК ВерхняяГраница,
	               |	Производитель			КАК Производитель,
	               |	Содержит				КАК Содержит,
	               |	НеСодержит 				КАК НеСодержит,
				   |	Ссылка					КАК Подпихня,
				   |	Ссылка.Наименование		КАК ПодпихняНаименование,
				   |	ЛОЖЬ					КАК ЭлементИзменен,
				   |	0						КАК НомерСтроки
	               |ИЗ
	               |	Справочник.ПД_Подпихня.Настройки
	               |ГДЕ
	               |	Ссылка.АналогНоменклатуры = &АналогНоменклатуры
	               |	И Ссылка.НеИспользовать = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОчиститьПривязкиАналоговИПодпихни()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК АналогНоменклатуры
	               |ИЗ
	               |	Справочник.ПД_АналогиНоменклатуры
	               |ГДЕ
	               |	Ссылка В(&СписокАналогов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУдалениеПодпихниПоСпискуАналогов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка 				КАК Подпихня,
				   |	АналогНоменклатуры  КАК АналогНоменклатуры
	               |ИЗ
	               |	Справочник.ПД_Подпихня
	               |ГДЕ
	               |	АналогНоменклатуры В(&СписокАналогов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти 

#Область ЗаписьДанныхВРегистры

Функция ЗаписатьАналогыВРегистр(ТаблицаЗаписи)
	
	Если ТаблицаЗаписи.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Период 					= ТекущаяДатаСеанса();
	Ответственный 			= ПараметрыСеанса.ТекущийПользователь; 
	АналогНоменклатурыОтбор = ТаблицаЗаписи[0].АналогНоменклатуры;
	
	
	Если ЗначениеЗаполнено(АналогНоменклатурыОтбор)=ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_ПривязкиАналогиНоменклатуры",АналогНоменклатурыОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;           
	
	СтруктураОтбора =Новый Структура("Исключения",ЛОЖЬ);
	ПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Если ПривязкиТаблициЗаписи.Количество()>1 Тогда     		
		
		Для каждого СтрокаТаблици Из ПривязкиТаблициЗаписи Цикл
			АналогНоменклатуры = СтрокаТаблици.АналогНоменклатуры;
			Номенклатура 		= СтрокаТаблици.Номенклатура;
			ТЗ_Записи 			= ПолучитьТаблицуПривязкаНоменклатуры(Номенклатура,ТаблицаЗаписи);

			Блокировка = Новый БлокировкаДанных;  	
			ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатуры");
			ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры", АналогНоменклатуры);
			ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура", Номенклатура); 
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
				Возврат Ложь; 		
			КонецПопытки;
			
			Блокировка = Новый БлокировкаДанных;  	
			ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатурыИстория");
			ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементПлановыеНачисления.УстановитьЗначение("Период"				, Период);
			ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, АналогНоменклатуры);
			ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, Номенклатура); 
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;


			НаборЗаписей = РегистрыСведений.ПД_ПривязкиАналогиНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			НаборЗаписей.Загрузить(ТЗ_Записи);   	

			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать привязки.");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ТекстОшибки);
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				Возврат Ложь;
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.ПД_ПривязкиАналогиНоменклатурыИстория.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Период);
			НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			
			ТЗ_ЗаписиИстория = ПолучитьТаблицуПривязкаНоменклатурыИстория(ТЗ_Записи,Период);
			НаборЗаписей.Загрузить(ТЗ_ЗаписиИстория);   

			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать привязки.");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ТекстОшибки);
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_ИсключениеАналогов",АналогНоменклатурыОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;
	
	СтруктураОтбора =Новый Структура("Исключения",ИСТИНА);
	ИсключенияПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТаблици Из ИсключенияПривязкиТаблициЗаписи Цикл
	    АналогНоменклатуры = СтрокаТаблици.АналогНоменклатуры;
		Номенклатура = СтрокаТаблици.Номенклатура;
		
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ИсключениеАналогов");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, АналогНоменклатуры);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, Номенклатура); 
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;

		
		НаборЗаписей = РегистрыСведений.ПД_ИсключениеАналогов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблици);
		Запись.Ответственный 	= Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать исключения до привязки.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;  
	КонецЦикла;  
	
	Возврат Истина;

КонецФункции // ЗаписатьАналогыВРегистр()

Функция ЗаписатьПодпихнюВРегистр(ТаблицаЗаписи)

	Если ТаблицаЗаписи.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;

	Период 					= ТекущаяДатаСеанса();
	Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
	АналогНоменклатурыОтбор = ТаблицаЗаписи[0].АналогНоменклатуры;
	ПодпихняОтбор 			= ТаблицаЗаписи[0].Подпихня; 	
	
	Если ЗначениеЗаполнено(АналогНоменклатурыОтбор)=ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодпихняОтбор)=ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_НаборПодпихни",АналогНоменклатурыОтбор,ПодпихняОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;  
		
	СтруктураОтбора =Новый Структура("Исключения",ЛОЖЬ);
	ПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаТаблицы Из ПривязкиТаблициЗаписи Цикл
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихни");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, СтрокаТаблицы.АналогНоменклатуры);
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"				, СтрокаТаблицы.Подпихня);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, СтрокаТаблицы.Номенклатура); 
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь; 		
		КонецПопытки;
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихниИстория");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("Период"				, Период);
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, СтрокаТаблицы.АналогНоменклатуры);
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"				, СтрокаТаблицы.Подпихня);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, СтрокаТаблицы.Номенклатура);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;

		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(СтрокаТаблицы.АналогНоменклатуры);
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня); 
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
				
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный; 	

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать подпихню в историю.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихниИстория.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(СтрокаТаблицы.АналогНоменклатуры);
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня); 
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);

		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный; 
		Запись.Период 			= Период; 

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать подпихню в историю.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
	 КонецЦикла;
	 
	Если НЕ ОчиститьЗаписьРегистра("ПД_ИсключениеПодпихни",,ПодпихняОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;  
	
	СтруктураОтбора =Новый Структура("Исключения",ИСТИНА);
	ИсключенияПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаТаблицы Из ИсключенияПривязкиТаблициЗаписи Цикл
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ИсключениеПодпихни");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"				, СтрокаТаблицы.Подпихня);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, СтрокаТаблицы.Номенклатура);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;

	
		НаборЗаписей = РегистрыСведений.ПД_ИсключениеПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать исключения до привязки.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;  
	КонецЦикла;  
	
	Возврат Истина;

КонецФункции // ЗаписатьАналогыВРегистр()

Функция ПолучитьТаблицуПривязкаНоменклатуры(Номенклатура,ТаблицаЗаписи)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаполненияТаблициПривязки();
	Запрос.УстановитьПараметр("Ответственный",Ответственный);
	Запрос.УстановитьПараметр("ТаблицаЗаписи",ТаблицаЗаписи);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
			
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуПривязкаНоменклатуры()

Функция ПолучитьТекстЗапросаЗаполненияТаблициПривязки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаЗаписи.АналогНоменклатуры 	КАК АналогНоменклатуры,
	               |	ТаблицаЗаписи.Номенклатура 			КАК Номенклатура,
	               |	ТаблицаЗаписи.Исключения 			КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаЗаписи
	               |ИЗ
	               |	&ТаблицаЗаписи КАК ТаблицаЗаписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаписи.АналогНоменклатуры КАК АналогНоменклатуры,
	               |	ТаблицаЗаписи.Номенклатура 		 КАК Привязка,
	               |	&Номенклатура					 КАК Номенклатура,
	               |	&Ответственный                   КАК Ответственный
	               |ИЗ
	               |	ТаблицаЗаписи КАК ТаблицаЗаписи
	               |ГДЕ
	               |	ТаблицаЗаписи.Исключения = ЛОЖЬ
	               |	И ТаблицаЗаписи.Номенклатура <> &Номенклатура";
					
	Возврат	ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗаполненияТаблициПривязки()

Функция ПолучитьТаблицуПривязкаНоменклатурыИстория(ТЗ_Записи,Период)

	ТЗ_ЗаписиИстория = ТЗ_Записи;
	ТЗ_ЗаписиИстория.Колонки.Добавить("Период", 	Новый ОписаниеТипов("Дата"));
	ТЗ_ЗаписиИстория.ЗаполнитьЗначения(Период,"Период"); 	
	Возврат ТЗ_ЗаписиИстория;

КонецФункции // ПолучитьТаблицуПривязкаНоменклатуры()

Функция ОчиститьЗаписьРегистра(ИмяРегистра,АналогНоменклатуры= Неопределено,Подпихня = Неопределено)
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений."+ИмяРегистра);
	ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если АналогНоменклатуры <> Неопределено Тогда
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры", АналогНоменклатуры);	
	КонецЕсли;
	 
	Если Подпихня <> Неопределено Тогда
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"	, Подпихня); 	
	КонецЕсли;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки; 
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Если АналогНоменклатуры <> Неопределено Тогда
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
	КонецЕсли;      
	
	Если Подпихня <> Неопределено Тогда
		НаборЗаписей.Отбор.Подпихня.Установить(Подпихня); 
	КонецЕсли;

	НаборЗаписей.Прочитать(); 
	НаборЗаписей.Очистить();  	

	Попытка
		НаборЗаписей.Записать();    					
	Исключение
		ТекстОшибки = ПодготовитьТекст("Для регистра %1 не удалось очистить записи.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяРегистра);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ТекстОшибки);
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;     
КонецФункции // ОчиститьЗаписьРегистра()

#КонецОбласти 


Функция УдалитьПодпихнюПоНаборуАналоговНоменклатуры(СписокАналоговКУдалению)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "";
	
КонецФункции



Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'Подпихня'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()

Функция ПодготовитьТекст(знач ТекстДляПодготовки)
	Шаблон 		= "ru='%1'";
	Результат   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекстДляПодготовки);
	Возврат НСтр(Результат, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции // ПодготовитьТекст()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Подпихня");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.3.50");

    ПараметрыРегистрации.Вставить("Информация", "Подпихня [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Подпихня [" + Версия + "]", "Подпихня", "ВызовКлиентскогоМетода", Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Записать аналоги и подпихню в регистры", "ЗаписатьАналогиИПодпихнюВРегистры", "ВызовСерверногоМетода",Истина);
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
