
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	Перем РезультатВыполнения, ОповещениеФорм, МассивДанных;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторКоманды = "ЗаписатьАналогиИПодпихнюВРегистры" Тогда   		
		ЗаписатьАналогиИПодпихнюВРегистры(ПараметрыКоманды.СтруктураЗаписей);
	ИначеЕсли ИдентификаторКоманды = "СтатусыИспользованияНоменклатурыАналогов" Тогда
		МассивДанных = ПолучитьМассивСостоянияНоменклатурыАналогов(ПараметрыКоманды.НастройкиАналогов);
	ИначеЕсли ИдентификаторКоманды = "СтатусыИспользованияНоменклатурыПодпихни" Тогда
		МассивДанных = ПолучитьМассивСостоянийНоменклатурыПодпихни(ПараметрыКоманды.НастройкиПодпихни, ПараметрыКоманды.АналогНоменклатуры);
	ИначеЕсли ИдентификаторКоманды = "СтатусыИсключенияНоменклатуры" Тогда
		МассивДанных = ПолучитьСостояниеСтатусаИсключенияТаблицы(ПараметрыКоманды);
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("РезультатВыполнения", РезультатВыполнения) И МассивДанных <> Неопределено Тогда
		Если РезультатВыполнения.Свойство("ОповещениеФорм", ОповещениеФорм) Тогда
			ОповещениеФорм.ИмяСобытия = ИдентификаторКоманды;
			ОповещениеФорм.Использование = Истина;
			Если ПараметрыКоманды.Свойство("ДополнительнаяОбработкаСсылка") Тогда
				ОповещениеФорм.Свойство("Источник", ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
			КонецЕсли;
			ОповещениеФорм.Параметр = МассивДанных;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаписатьАналогиИПодпихнюВРегистры(СтруктураЗаписей) Экспорт
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если СтруктураЗаписей.Свойство("АналогиНоменклатуры") 
			И ТипЗнч(СтруктураЗаписей.АналогиНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		
			 Если Не ЗаписатьАналогыВРегистр(СтруктураЗаписей.АналогиНоменклатуры) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;   		
		КонецЕсли;
		
	Если СтруктураЗаписей.Свойство("Подпихня") 
			И ТипЗнч(СтруктураЗаписей.Подпихня) = Тип("ТаблицаЗначений") Тогда
		
			 Если Не ЗаписатьПодпихнюВРегистр(СтруктураЗаписей.Подпихня) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;   		
		КонецЕсли;        
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
 
Функция ПолучитьТаблицуНастроекАналоговНоменклатуры(ВидНоменклатуры) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТаблицаНастроекАналоговНоменклатуры();
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	НомерСтроки     = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл СтрокаТаблицы.НомерСтроки = НомерСтроки; НомерСтроки = НомерСтроки + 1; КонецЦикла; 
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ЗаписатьНастройкиАналогиНоменклатуры(ТаблицаНастроек, ВидНоменклатуры, СписокАналоговКУдалению) Экспорт
	
	СоответствиеАналогов = Новый Соответствие;
	
	НачатьТранзакцию();
	
	РезультатЗаписи = ЗаписатьНастройкиАналогов(ВидНоменклатуры, ТаблицаНастроек, СоответствиеАналогов);
	Если РезультатЗаписи = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
		
	РезультатУдаления = УдалитьАналогиНоменклатуры(СписокАналоговКУдалению);
	Если РезультатУдаления = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОчистки = ОчиститьПривязкиАналоговИПодпихни(СписокАналоговКУдалению);
	Если РезультатОчистки = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатУдаленияПодпихни = УдалитьПодпихнюПоСпискуАналогов(СписокАналоговКУдалению);
	Если РезультатУдаленияПодпихни = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СоответствиеАналогов;
	
КонецФункции

Функция ПолучитьТаблицуНастроекПодпихни(АналогНоменклатуры) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТаблицаНастроекПодпихни();
	
	Запрос.УстановитьПараметр("АналогНоменклатуры", АналогНоменклатуры);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	НомерСтроки     = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл СтрокаТаблицы.НомерСтроки = НомерСтроки; НомерСтроки = НомерСтроки + 1; КонецЦикла; 
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ЗаписатьНастройкиПодпихниНоменклатуры(ТаблицаНастроек, АналогНоменклатуры, СписокПодпихниКУдалению) Экспорт
	
	СоответствиеПодпихни = Новый Соответствие;
	
	НачатьТранзакцию();
	
	РезультатЗаписи = ЗаписатьНастройкиПодпихни(АналогНоменклатуры, ТаблицаНастроек, СоответствиеПодпихни);
	Если РезультатЗаписи = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатУдаления = УдалитьПодпихнюНоменклатуры(СписокПодпихниКУдалению);
	Если РезультатУдаления = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;	
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат СоответствиеПодпихни;
	
КонецФункции

Функция РассчитатьТаблицуАналоговНоменклатуры(ВидНоменклатуры, ТаблицаНастроек, ВидыЦен) Экспорт
	
	ТаблицаАналогов = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатурыПоТаблицеНастроек(ВидНоменклатуры, ТаблицаНастроек);
	
	Возврат ДописатьВидыЦенНоменклатуры(ТаблицаАналогов, ВидыЦен, "АналогиНоменклатуры");
	
КонецФункции

Функция ПолучитьТаблицуАналоговНоменклатуры(АналогНоменклатуры, ВидыЦен) Экспорт
	
	ТаблицаАналогов = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатуры(АналогНоменклатуры);
	
	Возврат ДописатьВидыЦенНоменклатуры(ТаблицаАналогов, ВидыЦен, "АналогиНоменклатуры", АналогНоменклатуры);

КонецФункции // ПолучитьТаблицуАналоговНоменклатуры()

Функция ЗагрузитьТаблицуАналоговНоменклатуры(АналогНоменклатуры, ВидыЦен) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаПолучитьАналогиНоменклатуры(ВидыЦен);
	
	Запрос.УстановитьПараметр("АналогНоменклатуры", АналогНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Подпихня", Неопределено);
	
	Для Каждого ВидЦены Из ВидыЦен Цикл		
		ИндексЦены 	 = ВидыЦен.Индекс(ВидЦены) + 1;
		ИмяПараметра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВидЦены%1", ИндексЦены);
		Запрос.УстановитьПараметр(ИмяПараметра, ВидЦены.Значение);		
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РассчитатьТаблицуПодпихниНоменклатуры(ВидНоменклатуры, ТаблицаНастроек, ВидыЦен) Экспорт
	
	ТаблицаПодпихни = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатурыПоТаблицеНастроек(ВидНоменклатуры, ТаблицаНастроек);
	
	Возврат ДописатьВидыЦенНоменклатуры(ТаблицаПодпихни, ВидыЦен, "Подпихня");
	
КонецФункции

Функция ПолучитьТаблицуПодпихниНоменклатуры(АналогНоменклатуры, Подпихня, ВидыЦен) Экспорт
		
	ТаблицаПодпихни = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатуры(Подпихня);
	
	Возврат ДописатьВидыЦенНоменклатуры(ТаблицаПодпихни, ВидыЦен, "Подпихня", АналогНоменклатуры, Подпихня);
	
КонецФункции

Функция ЗагрузитьТаблицуПодпихниНоменклатуры(АналогНоменклатуры, Подпихня, ВидыЦен) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаПолучитьПодпихнюНоменклатуры(ВидыЦен);
	
	Запрос.УстановитьПараметр("АналогНоменклатуры", АналогНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Подпихня", Подпихня);
	
	Для Каждого ВидЦены Из ВидыЦен Цикл		
		ИндексЦены 	 = ВидыЦен.Индекс(ВидЦены) + 1;
		ИмяПараметра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВидЦены%1", ИндексЦены);
		Запрос.УстановитьПараметр(ИмяПараметра, ВидЦены.Значение);		
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция УдалитьИсключенияАналоговИПодпихни(ТаблицаИсключений, ВидОперации) Экспорт
	
	Перем МенеджерРегистра, ИмяПоляОтбора;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаУдалениеИсключенийИПодпихни();
	
	Запрос.УстановитьПараметр("ТаблицаИсключений", ТаблицаИсключений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	
	Если ВидОперации = "АналогиНоменклатуры" Тогда
		
		ЭлементБлокировки   				= Блокировка.Добавить("РегистрСведений.ПД_ИсключениеАналогов");
		ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных 	= РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "Исключение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		
		МенеджерРегистра = РегистрыСведений.ПД_ИсключениеАналогов;
		ИмяПоляОтбора	 = "АналогНоменклатуры";
		
	Иначе
		
		ЭлементБлокировки   				= Блокировка.Добавить("РегистрСведений.ПД_ИсключениеПодпихни");
		ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных 	= РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подпихня", "Исключение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		
		МенеджерРегистра = РегистрыСведений.ПД_ИсключениеПодпихни;
		ИмяПоляОтбора	 = "Подпихня";
		
	КонецЕсли;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = ПодготовитьТекст("Не удалось заблокировать ресурсы для удаления.");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ТаблицаКУдалению = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКУдалению Цикл
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяПоляОтбора].Установить(СтрокаТаблицы.Исключение);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		
		Попытка
	    	НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить исключение аналогов / подпихни.");
			ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ФоноваяОбработкаДанных

Функция ПолучитьМассивСостоянияНоменклатурыАналогов(НастройкиАналогов)
	
	МассивРезультатов 	= Новый Массив;
	
	Запрос 				= Новый Запрос;
	Запрос.Текст    	= ТекстЗапросаМассивСостоянияНоменклатурыАналогов();
	
	Запрос.УстановитьПараметр("НастройкиАналогов", НастройкиАналогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементМассива = Новый Структура("ЕстьИсключенияВДругихНастройках, ЕстьИсключеннаяНоменклатураВДругихНастройках");
		ЗаполнитьЗначенияСвойств(ЭлементМассива, Выборка);
		МассивРезультатов.Добавить(ЭлементМассива);
	КонецЦикла;
		
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьМассивСостоянийНоменклатурыПодпихни(НастройкиПодпихни, АналогНоменклатуры)
	
	МассивРезультатов 	= Новый Массив;

	Запрос 				= Новый Запрос;
	Запрос.Текст    	= ТекстЗапросаМассивСостоянияНоменклатурыПодпихни();
	
	Запрос.УстановитьПараметр("НастройкиПодпихни", НастройкиПодпихни);
	Запрос.УстановитьПараметр("АналогНоменклатуры", АналогНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементМассива = Новый Структура("ЕстьИсключенияВДругихНастройках, ЕстьИсключеннаяНоменклатураВДругихНастройках");
		ЗаполнитьЗначенияСвойств(ЭлементМассива, Выборка);
		МассивРезультатов.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции


Функция ПолучитьСостояниеСтатусаИсключенияТаблицы(ПараметрыКоманды)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяТаблицы", ПараметрыКоманды.ИмяТаблицы);
	СтруктураВозврата.Вставить("ИмяЭлемента", ПараметрыКоманды.ИмяЭлемента);
	СтруктураВозврата.Вставить("ИдентификаторСтроки", ПараметрыКоманды.ИдентификаторСтроки);
	СтруктураВозврата.Вставить("ЕстьИсключенияВДругихНастройках", 0);
	СтруктураВозврата.Вставить("ЕстьИсключеннаяНоменклатураВДругихНастройках", 0);
	
	Для Каждого СтрокаТаблицы Из ПараметрыКоманды.ТаблицаРасчета Цикл
		Если СтрокаТаблицы.СтатусИсключенияНоменклатуры = 1 И СтрокаТаблицы.Исключения = Ложь Тогда
			СтруктураВозврата.ЕстьИсключенияВДругихНастройках = 1;
		ИначеЕсли СтрокаТаблицы.СтатусИсключенияНоменклатуры = 3 И СтрокаТаблицы.Исключения = Ложь Тогда
			СтруктураВозврата.ЕстьИсключенияВДругихНастройках = 1;
		ИначеЕсли СтрокаТаблицы.СтатусИсключенияНоменклатуры = 1 И СтрокаТаблицы.Исключения = Истина Тогда
			СтруктураВозврата.ЕстьИсключеннаяНоменклатураВДругихНастройках = 1;
		ИначеЕсли СтрокаТаблицы.СтатусИсключенияНоменклатуры = 2 И СтрокаТаблицы.Исключения = Истина Тогда
			СтруктураВозврата.ЕстьИсключеннаяНоменклатураВДругихНастройках = 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

	
#КонецОбласти 

#Область ОбработкаТаблиц

Функция ДописатьВидыЦенНоменклатуры(ТаблицаНоменклатуры, ВидыЦен, ТипЗапроса, АналогНоменклатуры = Неопределено, Подпихня = Неопределено)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаВидыЦенНоменклатуры(ВидыЦен, ТипЗапроса);
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("АналогНоменклатуры", АналогНоменклатуры);
	Запрос.УстановитьПараметр("Подпихня", Подпихня);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИндексЦены 	 = ВидыЦен.Индекс(ВидЦены) + 1;
		ИмяПараметра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВидЦены%1", ИндексЦены);
		Запрос.УстановитьПараметр(ИмяПараметра, ВидЦены.Значение);
		
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ДописатьВидыЦенНоменклатуры()
	
#КонецОбласти 

#Область ОчисткаИЗаписьНастроек

Функция ЗаписатьНастройкиАналогов(ВидНоменклатуры, ТаблицаНастроек, СоответствиеАналогов)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		
		Если Не СтрокаТаблицы.ЭлементИзменен Тогда
			Продолжить;			
		КонецЕсли; 
		
		СпрОбъект = Неопределено;
		Если СтрокаТаблицы.АналогНоменклатуры.Пустая() Тогда
			СпрОбъект = Справочники.ПД_АналогиНоменклатуры.СоздатьЭлемент();
		Иначе
			СпрОбъект = СтрокаТаблицы.АналогНоменклатуры.ПолучитьОбъект();
		КонецЕсли;
		СпрОбъект.Наименование 	  = СтрокаТаблицы.АналогНоменклатурыНаименование;
		СпрОбъект.ВидНоменклатуры = ВидНоменклатуры;
		
		Настройки = СпрОбъект.Настройки;
		Настройки.Очистить();
		
		НоваяСтрока = Настройки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось записать аналог номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.АналогНоменклатурыНаименование);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		СоответствиеАналогов.Вставить(СтрокаТаблицы.НомерСтроки, СпрОбъект.Ссылка);
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция УдалитьАналогиНоменклатуры(СписокАналоговКУдалению)
	
	Для Каждого АналогКУдалению Из СписокАналоговКУдалению Цикл
		СпрОбъект 				 = АналогКУдалению.Значение.ПолучитьОбъект();
		СпрОбъект.НеИспользовать = Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить аналог номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, АналогКУдалению.Значение);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОчиститьПривязкиАналоговИПодпихни(СписокАналоговКУдалению)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаОчиститьПривязкиАналоговИПодпихни();
	
	Запрос.УстановитьПараметр("СписокАналогов", СписокАналоговКУдалению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка 						 = Новый БлокировкаДанных;
	
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатуры");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихни");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	
	Блокировка.Заблокировать();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейАналоги = РегистрыСведений.ПД_ПривязкиАналогиНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписейАналоги.Отбор.АналогНоменклатуры.Установить(Выборка.АналогНоменклатуры);
		
		Попытка
			НаборЗаписейАналоги.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить привязки для аналога номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.АналогНоменклатуры);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		НаборЗаписейПодпихни = РегистрыСведений.ПД_НаборПодпихни.СоздатьНаборЗаписей();
		НаборЗаписейПодпихни.Отбор.АналогНоменклатуры.Установить(Выборка.АналогНоменклатуры);
		
		Попытка
			НаборЗаписейПодпихни.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить привязки подпихни для аналога номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.АналогНоменклатуры);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ОчиститьПривязкиАналоговИПодпихни()
 
Функция УдалитьПодпихнюПоСпискуАналогов(СписокАналоговКУдалению)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаУдалениеПодпихниПоСпискуАналогов();
	
	Запрос.УстановитьПараметр("СписокАналогов", СписокАналоговКУдалению);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект 					= Выборка.Подпихня.ПолучитьОбъект();
		СпрОбъект.НеИспользовать 	= Истина;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить подпихню для аналога номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.АналогНоменклатуры);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


Функция ЗаписатьНастройкиПодпихни(АналогНоменклатуры, ТаблицаНастроек, СоответствиеПодпихни)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
				
		Если Не СтрокаТаблицы.ЭлементИзменен Тогда
			Продолжить;			
		КонецЕсли;
		
		СпрОбъект = Неопределено;
		Если СтрокаТаблицы.Подпихня.Пустая() Тогда
			СпрОбъект = Справочники.ПД_Подпихня.СоздатьЭлемент();
		Иначе
			СпрОбъект = СтрокаТаблицы.Подпихня.ПолучитьОбъект();
		КонецЕсли;
		СпрОбъект.Наименование 	  = СтрокаТаблицы.ПодпихняНаименование;
		СпрОбъект.АналогНоменклатуры = АналогНоменклатуры;
		
		Настройки = СпрОбъект.Настройки;
		Настройки.Очистить();
		
		НоваяСтрока = Настройки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось записать подпихню номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.ПодпихняНаименование);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		СоответствиеПодпихни.Вставить(СтрокаТаблицы.НомерСтроки, СпрОбъект.Ссылка);

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьПодпихнюНоменклатуры(СписокПодпихниКУдалению)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаУдалениеПодпихниНоменклатуры();
	
	Запрос.УстановитьПараметр("СписокПодпихни", СписокПодпихниКУдалению);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка 						 = Новый БлокировкаДанных;
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихни");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подпихня", "Подпихня");
	
	Блокировка.Заблокировать();
	
	Для Каждого ПодпихняКУдалению Из СписокПодпихниКУдалению Цикл
		
		СпрОбъект 				 = ПодпихняКУдалению.Значение.ПолучитьОбъект();
		СпрОбъект.НеИспользовать = Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить подпихню номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодпихняКУдалению.Значение);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Подпихня.Установить(СпрОбъект.Ссылка);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = ПодготовитьТекст("Не удалось удалить привязки для подпихни номенклатуры %1");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодпихняКУдалению.Значение);
			ОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ЗафиксироватьОшибкуВЖР(ТекстСообщения);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки);
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область ТекстыЗапросов

Функция ТекстЗапросаМассивСостоянияНоменклатурыАналогов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	НастройкиАналогов.НомерСтроки 			КАК НомерСтроки,
	               |	НастройкиАналогов.АналогНоменклатуры 	КАК АналогНоменклатуры
	               |ПОМЕСТИТЬ ТаблицаАналоговНоменклатуры
	               |ИЗ
	               |	&НастройкиАналогов КАК НастройкиАналогов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	АналогНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналогНоменклатуры		КАК АналогНоменклатуры,
	               |	Номенклатура  			КАК Номенклатура
	               |ПОМЕСТИТЬ НоменклатураАналогов
	               |ИЗ
	               |	РегистрСведений.ПД_ПривязкиАналогиНоменклатуры
	               |ГДЕ
	               |	АналогНоменклатуры В
	               |			(ВЫБРАТЬ
	               |				АналогНоменклатуры
	               |			ИЗ
	               |				ТаблицаАналоговНоменклатуры)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	АналогНоменклатуры		КАК АналогНоменклатуры,
	               |	Номенклатура			КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.ПД_ИсключениеАналогов
	               |ГДЕ
	               |	АналогНоменклатуры В
	               |			(ВЫБРАТЬ
	               |				АналогНоменклатуры
	               |			ИЗ
	               |				ТаблицаАналоговНоменклатуры)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПД_ИсключениеАналогов.АналогНоменклатуры		КАК АналогНоменклатуры,
	               |	ПД_ИсключениеАналогов.Номенклатура				КАК Номенклатура,
	               |	ИСТИНА 											КАК Исключение
	               |ПОМЕСТИТЬ ВсеИсключения
	               |ИЗ
	               |	РегистрСведений.ПД_ИсключениеАналогов КАК ПД_ИсключениеАналогов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураАналогов КАК НоменклатураАналогов
	               |		ПО ПД_ИсключениеАналогов.Номенклатура = НоменклатураАналогов.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураАналогов.АналогНоменклатуры		КАК АналогНоменклатуры,
	               |	НоменклатураАналогов.Номенклатура			КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВсеИсключения.АналогНоменклатуры, ЛОЖЬ) = ЛОЖЬ
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(ВсеИсключения.АналогНоменклатуры, ЗНАЧЕНИЕ(Справочник.ПД_АналогиНоменклатуры.ПустаяСсылка)) = НоменклатураАналогов.АналогНоменклатуры
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаИсключенийПредварительная
	               |ИЗ
	               |	НоменклатураАналогов КАК НоменклатураАналогов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсключения КАК ВсеИсключения
	               |		ПО НоменклатураАналогов.Номенклатура = ВсеИсключения.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналогНоменклатуры				КАК АналогНоменклатуры,
	               |	Номенклатура					КАК Номенклатура,
	               |	МИНИМУМ(Исключения)				КАК Мин,
	               |	МАКСИМУМ(Исключения) 			КАК Макс
	               |ПОМЕСТИТЬ ТаблицаИсключенийАгрегированная
	               |ИЗ
	               |	ТаблицаИсключенийПредварительная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура,
	               |	АналогНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АналогНоменклатуры			КАК АналогНоменклатуры,
	               |	Номенклатура				КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА Мин = 0
	               |				И Макс = 1
	               |			ТОГДА 1
	               |		КОГДА Мин = 0
	               |				И Макс = 0
	               |			ТОГДА 2
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК СтатусИсключенияНоменклатуры
	               |ПОМЕСТИТЬ СтатусыИсключенияНоменклатуры
	               |ИЗ
	               |	ТаблицаИсключенийАгрегированная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыИсключенияНоменклатуры.АналогНоменклатуры	КАК АналогНоменклатуры,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 1
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ЛОЖЬ
	               |				ТОГДА 1
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 3
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ЛОЖЬ
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЕстьИсключения
	               |ПОМЕСТИТЬ ТаблицаИсключенийДругихАналогов
				   |ИЗ
	               |	СтатусыИсключенияНоменклатуры КАК СтатусыИсключенияНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсключения КАК ВсеИсключения
	               |		ПО СтатусыИсключенияНоменклатуры.АналогНоменклатуры = ВсеИсключения.АналогНоменклатуры
	               |			И СтатусыИсключенияНоменклатуры.Номенклатура = ВсеИсключения.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатусыИсключенияНоменклатуры.АналогНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыИсключенияНоменклатуры.АналогНоменклатуры	КАК АналогНоменклатуры,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 1
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ИСТИНА
	               |				ТОГДА 1
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 2
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ИСТИНА
	               |				ТОГДА 1
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 3
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЕстьИсключения
	               |ПОМЕСТИТЬ ТаблицаИсключенийТекущихАналогов
	               |ИЗ
	               |	СтатусыИсключенияНоменклатуры КАК СтатусыИсключенияНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсключения КАК ВсеИсключения
	               |		ПО СтатусыИсключенияНоменклатуры.АналогНоменклатуры = ВсеИсключения.АналогНоменклатуры
	               |			И СтатусыИсключенияНоменклатуры.Номенклатура = ВсеИсключения.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатусыИсключенияНоменклатуры.АналогНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаАналоговНоменклатуры.НомерСтроки 						КАК НомерСтроки,
	               |	ТаблицаАналоговНоменклатуры.АналогНоменклатуры					КАК АналогНоменклатуры,
	               |	ЕСТЬNULL(ТаблицаИсключенийДругихАналогов.ЕстьИсключения, 0) 	КАК ЕстьИсключенияВДругихНастройках,
	               |	ЕСТЬNULL(ТаблицаИсключенийТекущихАналогов.ЕстьИсключения, 0) 	КАК ЕстьИсключеннаяНоменклатураВДругихНастройках
	               |ИЗ
	               |	ТаблицаАналоговНоменклатуры КАК ТаблицаАналоговНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсключенийДругихАналогов КАК ТаблицаИсключенийДругихАналогов
	               |		ПО ТаблицаАналоговНоменклатуры.АналогНоменклатуры = ТаблицаИсключенийДругихАналогов.АналогНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсключенийТекущихАналогов КАК ТаблицаИсключенийТекущихАналогов
	               |		ПО ТаблицаАналоговНоменклатуры.АналогНоменклатуры = ТаблицаИсключенийТекущихАналогов.АналогНоменклатуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаМассивСостоянияНоменклатурыПодпихни()
	
	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |    НастройкиПодпихни.НомерСтроки			КАК НомерСтроки,
				   |	НастройкиПодпихни.Подпихня 				КАК Подпихня
				   |ПОМЕСТИТЬ ТаблицаПодпихни				   
				   |ИЗ
				   |	&НастройкиПодпихни КАК НастройкиПодпихни
				   |	
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Подпихня
				   |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Подпихня		КАК Подпихня,
	               |	Номенклатура  	КАК Номенклатура
	               |ПОМЕСТИТЬ НоменклатураПодпихни
	               |ИЗ
	               |	РегистрСведений.ПД_НаборПодпихни
	               |ГДЕ
	               |	АналогНоменклатуры = &АналогНоменклатуры
				   |	И Подпихня В 
	               |			(ВЫБРАТЬ
	               |				Подпихня
	               |			ИЗ
	               |				ТаблицаПодпихни)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Подпихня				КАК Подпихня,
	               |	Номенклатура			КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.ПД_ИсключениеПодпихни
	               |ГДЕ
	               |	Подпихня В
	               |			(ВЫБРАТЬ
	               |				Подпихня
	               |			ИЗ
	               |				ТаблицаПодпихни)
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПД_ИсключениеПодпихни.Подпихня			КАК Подпихня,
	               |	ПД_ИсключениеПодпихни.Номенклатура		КАК Номенклатура,
	               |	ИСТИНА 									КАК Исключение
	               |ПОМЕСТИТЬ ВсеИсключения
	               |ИЗ
	               |	РегистрСведений.ПД_ИсключениеПодпихни КАК ПД_ИсключениеПодпихни
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПодпихни КАК НоменклатураПодпихни
	               |		ПО ПД_ИсключениеПодпихни.Номенклатура = НоменклатураПодпихни.Номенклатура
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураПодпихни.Подпихня				КАК Подпихня,
	               |	НоменклатураПодпихни.Номенклатура			КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВсеИсключения.Подпихня, ЛОЖЬ) = ЛОЖЬ
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(ВсеИсключения.Подпихня, ЗНАЧЕНИЕ(Справочник.ПД_Подпихня.ПустаяСсылка)) = НоменклатураПодпихни.Подпихня
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаИсключенийПредварительная
	               |ИЗ
	               |	НоменклатураПодпихни КАК НоменклатураПодпихни
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсключения КАК ВсеИсключения
	               |		ПО НоменклатураПодпихни.Номенклатура = ВсеИсключения.Номенклатура
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Подпихня						КАК Подпихня,
	               |	Номенклатура					КАК Номенклатура,
	               |	МИНИМУМ(Исключения)				КАК Мин,
	               |	МАКСИМУМ(Исключения) 			КАК Макс
	               |ПОМЕСТИТЬ ТаблицаИсключенийАгрегированная
	               |ИЗ
	               |	ТаблицаИсключенийПредварительная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Подпихня,
	               |	Номенклатура
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Подпихня					КАК Подпихня,
	               |	Номенклатура				КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА Мин = 0
	               |				И Макс = 1
	               |			ТОГДА 1
	               |		КОГДА Мин = 0
	               |				И Макс = 0
	               |			ТОГДА 2
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК СтатусИсключенияНоменклатуры
	               |ПОМЕСТИТЬ СтатусыИсключенияНоменклатуры
	               |ИЗ
	               |	ТаблицаИсключенийАгрегированная
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыИсключенияНоменклатуры.Подпихня	КАК Подпихня,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 1
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ЛОЖЬ
	               |				ТОГДА 1
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 3
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ЛОЖЬ
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЕстьИсключения
	               |ПОМЕСТИТЬ ТаблицаИсключенийДругойПодпихни
				   |ИЗ
	               |	СтатусыИсключенияНоменклатуры КАК СтатусыИсключенияНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсключения КАК ВсеИсключения
	               |		ПО СтатусыИсключенияНоменклатуры.Подпихня = ВсеИсключения.Подпихня
	               |			И СтатусыИсключенияНоменклатуры.Номенклатура = ВсеИсключения.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатусыИсключенияНоменклатуры.Подпихня
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыИсключенияНоменклатуры.Подпихня	КАК Подпихня,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 1
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ИСТИНА
	               |				ТОГДА 1
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 2
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ИСТИНА
	               |				ТОГДА 1
	               |			КОГДА СтатусыИсключенияНоменклатуры.СтатусИсключенияНоменклатуры = 3
	               |					И ЕСТЬNULL(ВсеИсключения.Исключение, ЛОЖЬ) = ИСТИНА
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЕстьИсключения
	               |ПОМЕСТИТЬ ТаблицаИсключенийТекущейПодпихни	
	               |ИЗ
	               |	СтатусыИсключенияНоменклатуры КАК СтатусыИсключенияНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсключения КАК ВсеИсключения
	               |		ПО СтатусыИсключенияНоменклатуры.Подпихня = ВсеИсключения.Подпихня
	               |			И СтатусыИсключенияНоменклатуры.Номенклатура = ВсеИсключения.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатусыИсключенияНоменклатуры.Подпихня
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПодпихни.НомерСтроки 									КАК НомерСтроки,
	               |	ТаблицаПодпихни.Подпихня										КАК Подпихня,
	               |	ЕСТЬNULL(ТаблицаИсключенийДругойПодпихни.ЕстьИсключения, 0) 	КАК ЕстьИсключенияВДругихНастройках,
	               |	ЕСТЬNULL(ТаблицаИсключенийТекущейПодпихни.ЕстьИсключения, 0) 	КАК ЕстьИсключеннаяНоменклатураВДругихНастройках
	               |ИЗ
	               |	ТаблицаПодпихни КАК ТаблицаПодпихни
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсключенийДругойПодпихни КАК ТаблицаИсключенийДругойПодпихни
	               |		ПО ТаблицаПодпихни.Подпихня = ТаблицаИсключенийДругойПодпихни.Подпихня
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсключенийТекущейПодпихни КАК ТаблицаИсключенийТекущейПодпихни
	               |		ПО ТаблицаПодпихни.Подпихня = ТаблицаИсключенийТекущейПодпихни.Подпихня
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаНастроекАналоговНоменклатуры()
	
	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Ссылка 			КАК АналогНоменклатуры,
				   |	Наименование    КАК Наименование
				   |ПОМЕСТИТЬ ТаблицаАналоговНоменклатуры
				   |ИЗ
				   |	Справочник.ПД_АналогиНоменклатуры
				   |ГДЕ
				   |	ВидНоменклатуры  = &ВидНоменклатуры
				   |	И НеИспользовать = ЛОЖЬ
				   |;			   
				   |
				   |ВЫБРАТЬ
	               |	НастройкиАналогов.ТоварнаяКатегория		КАК ТоварнаяКатегория,
	               |	НастройкиАналогов.ВидЦены				КАК ВидЦены,
	               |	НастройкиАналогов.НижняяГраница			КАК НижняяГраница,
	               |	НастройкиАналогов.ВерхняяГраница		КАК ВерхняяГраница,
	               |	НастройкиАналогов.Производитель			КАК Производитель,
	               |	НастройкиАналогов.Содержит				КАК Содержит,
	               |	НастройкиАналогов.НеСодержит			КАК НеСодержит,
	               |	0 										КАК НомерСтроки,
	               |	ТаблицаАналогов.АналогНоменклатуры 		КАК АналогНоменклатуры,
	               |	ТаблицаАналогов.Наименование 			КАК АналогНоменклатурыНаименование,
				   |	ЛОЖЬ									КАК ЭлементИзменен,
				   |	0										КАК СтатусИспользованияНоменклатуры
	               |ИЗ
	               |	Справочник.ПД_АналогиНоменклатуры.Настройки КАК НастройкиАналогов
	               |
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаАналоговНоменклатуры КАК ТаблицаАналогов
				   |		ПО НастройкиАналогов.Ссылка = ТаблицаАналогов.АналогНоменклатуры
				   |;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНастроекПодпихни()
	
	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Ссылка 			КАК Подпихня,
				   |	Наименование    КАК Наименование
				   |ПОМЕСТИТЬ ТаблицаПодпихниНоменклатуры
				   |ИЗ
				   |	Справочник.ПД_Подпихня
				   |ГДЕ
				   |	АналогНоменклатуры  = &АналогНоменклатуры
				   |	И НеИспользовать = ЛОЖЬ
				   |	
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Подпихня
				   |;
				   |
				   |ВЫБРАТЬ
	               |	НастройкиПодпихни.ВидНоменклатуры		КАК ВидНоменклатуры,
	               |	НастройкиПодпихни.ТоварнаяКатегория		КАК ТоварнаяКатегория,
	               |	НастройкиПодпихни.ВидЦены				КАК ВидЦены,
	               |	НастройкиПодпихни.НижняяГраница			КАК НижняяГраница,
	               |	НастройкиПодпихни.ВерхняяГраница		КАК ВерхняяГраница,
	               |	НастройкиПодпихни.Производитель			КАК Производитель,
	               |	НастройкиПодпихни.Содержит				КАК Содержит,
	               |	НастройкиПодпихни.НеСодержит 			КАК НеСодержит,
				   |	ТаблицаПодпихни.Подпихня				КАК Подпихня,
				   |	ТаблицаПодпихни.Наименование			КАК ПодпихняНаименование,
				   |	ЛОЖЬ									КАК ЭлементИзменен,
				   |	0										КАК НомерСтроки,
				   |	0										КАК СтатусИспользованияНоменклатуры
	               |ИЗ
	               |	Справочник.ПД_Подпихня.Настройки КАК НастройкиПодпихни
				   |	
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодпихниНоменклатуры КАК ТаблицаПодпихни
				   |		ПО НастройкиПодпихни.Ссылка = ТаблицаПодпихни.Подпихня
				   |";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОчиститьПривязкиАналоговИПодпихни()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК АналогНоменклатуры
	               |ИЗ
	               |	Справочник.ПД_АналогиНоменклатуры
	               |ГДЕ
	               |	Ссылка В(&СписокАналогов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУдалениеПодпихниПоСпискуАналогов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка 				КАК Подпихня,
				   |	АналогНоменклатуры  КАК АналогНоменклатуры
	               |ИЗ
	               |	Справочник.ПД_Подпихня
	               |ГДЕ
	               |	АналогНоменклатуры В(&СписокАналогов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУдалениеПодпихниНоменклатуры()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Подпихня
	               |ИЗ
	               |	Справочник.ПД_Подпихня
	               |ГДЕ
	               |	Ссылка В(&СписокПодпихни)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДобавитьЦеныНоменклатурыИИсключения(ВидыЦен, ТипЗапроса)
	
	ТекстЗапроса				= "";
	ТекстЗапросаПоляЦен 		= "";
	ТекстЗапросаСоединенияЦен   = "";
	
	Если ТипЗапроса = "АналогиНоменклатуры" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ПривязкиНоменклатуры.АналогНоменклатуры КАК АналогНоменклатуры,
		|	ПривязкиНоменклатуры.Номенклатура		КАК Номенклатура
		|ПОМЕСТИТЬ НоменклатураДругихАналогов
		|ИЗ
		|	ТабНоменклатура КАК ТабНоменклатура
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ПривязкиАналогиНоменклатуры КАК ПривязкиНоменклатуры
		|		ПО ТабНоменклатура.Номенклатура = ПривязкиНоменклатуры.Номенклатура
		|			И ПривязкиНоменклатуры.АналогНоменклатуры <> &АналогНоменклатуры
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсключениеАналогов.АналогНоменклатуры КАК АналогНоменклатуры,
		|	ИсключениеАналогов.Номенклатура		  КАК Номенклатура
		|ИЗ
		|	ТабНоменклатура КАК ТабНоменклатура
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ИсключениеАналогов КАК ИсключениеАналогов
		|		ПО ТабНоменклатура.Номенклатура = ИсключениеАналогов.Номенклатура
		|			И ИсключениеАналогов.АналогНоменклатуры <> &АналогНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналогНоменклатуры,
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	НоменклатураДругихАналогов.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИсключениеАналогов.Номенклатура, ЛОЖЬ) = ЛОЖЬ
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Исключения
		|ПОМЕСТИТЬ ТаблицаИсключенийПредварительная
		|ИЗ
		|	НоменклатураДругихАналогов КАК НоменклатураДругихАналогов
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ИсключениеАналогов КАК ИсключениеАналогов
		|		ПО НоменклатураДругихАналогов.АналогНоменклатуры = ИсключениеАналогов.АналогНоменклатуры
		|			И НоменклатураДругихАналогов.Номенклатура 	 = ИсключениеАналогов.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	Номенклатура 			КАК Номенклатура,
		|	МИНИМУМ(Исключения)     КАК Мин, 
		|	МАКСИМУМ(Исключения)    КАК Макс	   
		|ПОМЕСТИТЬ ТаблицаИсключенийАгрегированная
		|ИЗ
		|	ТаблицаИсключенийПредварительная
		|	
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Мин = 0 И Макс = 1
		|			ТОГДА 1 // Если галочка НЕТ -> ! ЕСТЬ -> ?
		|		КОГДА Мин = 0 И Макс = 0 
		|			ТОГДА 2 // Если галочка НЕТ -> _ ЕСТЬ -> ?
		|		ИНАЧЕ
		|			3 		// Если галочка НЕТ -> _ ЕСТЬ -> _
		|	КОНЕЦ КАК СтатусИсключенияНоменклатуры
		|ПОМЕСТИТЬ ТаблицаИсключений
		|ИЗ
		|	ТаблицаИсключенийАгрегированная
		|;";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	НаборПодпихни.Подпихня 		КАК Подпихня,
		|	НаборПодпихни.Номенклатура	КАК Номенклатура
		|ПОМЕСТИТЬ НоменклатураДругойПодпихни
		|ИЗ
		|	ТабНоменклатура КАК ТабНоменклатура
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПД_НаборПодпихни КАК НаборПодпихни
		|		ПО ТабНоменклатура.Номенклатура = НаборПодпихни.Номенклатура
		|			И НаборПодпихни.Подпихня <> &Подпихня
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсключениеПодпихни.Подпихня 		КАК Подпихня,
		|	ИсключениеПодпихни.Номенклатура		 КАК Номенклатура
		|ИЗ
		|	ТабНоменклатура КАК ТабНоменклатура
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ИсключениеПодпихни КАК ИсключениеПодпихни
		|		ПО ТабНоменклатура.Номенклатура = ИсключениеПодпихни.Номенклатура
		|			И ИсключениеПодпихни.Подпихня <> &Подпихня
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подпихня,
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	НоменклатураДругойПодпихни.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИсключениеПодпихни.Номенклатура, ЛОЖЬ) = ЛОЖЬ
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Исключения
		|ПОМЕСТИТЬ ТаблицаИсключенийПредварительная
		|ИЗ
		|	НоменклатураДругойПодпихни КАК НоменклатураДругойПодпихни
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПД_ИсключениеПодпихни КАК ИсключениеПодпихни
		|		ПО НоменклатураДругойПодпихни.Подпихня = ИсключениеПодпихни.Подпихня
		|			И НоменклатураДругойПодпихни.Номенклатура 	 = ИсключениеПодпихни.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	Номенклатура 			КАК Номенклатура,
		|	МИНИМУМ(Исключения)     КАК Мин, 
		|	МАКСИМУМ(Исключения)    КАК Макс	   
		|ПОМЕСТИТЬ ТаблицаИсключенийАгрегированная
		|ИЗ
		|	ТаблицаИсключенийПредварительная
		|	
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Мин = 0 И Макс = 1
		|			ТОГДА 1 // Если галочка НЕТ -> ! ЕСТЬ -> ?
		|		КОГДА Мин = 0 И Макс = 0 
		|			ТОГДА 2 // Если галочка НЕТ -> _ ЕСТЬ -> ?
		|		ИНАЧЕ
		|			3 		// Если галочка НЕТ -> _ ЕСТЬ -> _
		|	КОНЕЦ КАК СтатусИсключенияНоменклатуры
		|ПОМЕСТИТЬ ТаблицаИсключений
		|ИЗ
		|	ТаблицаИсключенийАгрегированная
		|;";

		
	КонецЕсли;
	
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИндексЦены = ВидыЦен.Индекс(ВидЦены) + 1;
		
		ТекстЗапросаВидЦены = "
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	Цена		 КАК Цена
		|ПОМЕСТИТЬ ТаблицаВидовЦен%1
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата,
		|			Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТабНоменклатура) И ВидЦены = &ВидЦены%1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|";
		
		ТекстЗапросаПоляЦен = ТекстЗапросаПоляЦен + "
		|ЕСТЬNULL(ТаблицаВидовЦен%1.Цена, 0) КАК Цена%1,";
		
		ТекстЗапросаСоединенияЦен = ТекстЗапросаСоединенияЦен + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВидовЦен%1 КАК ТаблицаВидовЦен%1
		|	ПО ТаблицаВидовЦен%1.Номенклатура = ТабНоменклатура.Номенклатура";
		
		ТекстЗапросаВидЦены 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапросаВидЦены, ИндексЦены);
		ТекстЗапросаПоляЦен 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапросаПоляЦен, ИндексЦены);
		ТекстЗапросаСоединенияЦен 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапросаСоединенияЦен, ИндексЦены);
		ТекстЗапроса 				= ТекстЗапроса + ТекстЗапросаВидЦены;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ВЫБРАТЬ
	|	&АналогНоменклатуры     										КАК АналогНоменклатуры,
	|	&Подпихня    													КАК Подпихня,
	|	ТабНоменклатура.Номенклатура									КАК Номенклатура,
	|	ТабНоменклатура.Наименование									КАК Наименование,
	|	ТабНоменклатура.ТоварнаяКатегория								КАК ТоварнаяКатегория,
	|	ТабНоменклатура.Остаток											КАК Остаток,
	|	ТабНоменклатура.Производитель									КАК Производитель,
	|	%1
	|	ТабНоменклатура.Актуально										КАК Актуально,
	|	ЕСТЬNULL(ТаблицаИсключений.СтатусИсключенияНоменклатуры, 0)   	КАК СтатусИсключенияНоменклатуры,
	|	ТабНоменклатура.Исключения										КАК Исключения
	|ИЗ
	|	ТабНоменклатура КАК ТабНоменклатура
	|	%2
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсключений КАК ТаблицаИсключений
	|		ПО ТабНоменклатура.Номенклатура = ТаблицаИсключений.Номенклатура";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстЗапросаПоляЦен, ТекстЗапросаСоединенияЦен);

	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДобавитьАктуальностьИОстаткиНоменклатуры()

	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	Склад КАК Склад
				|ПОМЕСТИТЬ ДоступныеСклады
				|ИЗ
				|	РегистрСведений.Модуль_ДоступныеСклады 
				|ГДЕ
				|	Основной = ИСТИНА
				|;
				|
				|ВЫБРАТЬ
				|	Номенклатура 		КАК Номенклатура,
				|	ВНаличииОстаток	    КАК Остаток
				|ПОМЕСТИТЬ ТаблицаОстатков
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
				|							Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатуры)
				|							И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСклады))
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|ВЫБРАТЬ
				|	Номенклатура 		КАК Номенклатура,
				|	КПоступлениюОстаток КАК Остаток
				|ПОМЕСТИТЬ ТаблицаОжидаемых
				|ИЗ
				|	РегистрНакопления.ТоварыКПоступлению.Остатки(,
				|							Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатуры)
				|							И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСклады))
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|ВЫБРАТЬ
				|	Номенклатура					КАК Номенклатура,
				|	Актуально И ГарантияДоставки	КАК Актуально
				|ПОМЕСТИТЬ ТаблицаАктуальности
				|ИЗ
				|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(,
				|						Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатуры))
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|ВЫБРАТЬ
				|	ТаблицаНоменклатуры.Номенклатура 												КАК Номенклатура,
				|   ТаблицаНоменклатуры.Наименование 												КАК Наименование,
				|   ТаблицаНоменклатуры.ТоварнаяКатегория 											КАК ТоварнаяКатегория,
				|   ТаблицаНоменклатуры.Производитель 												КАК Производитель,
				|	ЕСТЬNULL(ТаблицаОстатков.Остаток, 0) + ЕСТЬNULL(ТаблицаОжидаемых.Остаток, 0)	КАК Остаток,
				|	ЕСТЬNULL(ТаблицаАктуальности.Актуально, ЛОЖЬ)  									КАК Актуально,
				|	ТаблицаНоменклатуры.Исключения													КАК Исключения
				|ПОМЕСТИТЬ ТабНоменклатура 
				|ИЗ
				|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
				|		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаОстатков.Номенклатура
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАктуальности КАК ТаблицаАктуальности
				|		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаАктуальности.Номенклатура
				|		
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОжидаемых КАК ТаблицаОжидаемых
				|		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаОжидаемых.Номенклатура
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДобавитьПктуальностьИОстаткиНоменклатуры()
 
Функция ТекстЗапросаВидыЦенНоменклатуры(ВидыЦен, ТипЗапроса)
	
	ТекстЗапроса = ТекстЗапросаПодготовитьТаблицуИсключений(ТипЗапроса);	
	
	ТекстЗапроса = ТекстЗапроса + "
				   |ВЫБРАТЬ
	               |	ТаблицаНоменклатуры.Номенклатура		КАК Номенклатура,
	               |	ТаблицаНоменклатуры.Наименование		КАК Наименование,
	               |	ТаблицаНоменклатуры.ТоварнаяКатегория	КАК ТоварнаяКатегория,
	               |	ТаблицаНоменклатуры.Остаток				КАК Остаток,
	               |	ТаблицаНоменклатуры.Производитель		КАК Производитель,
	               |	ТаблицаНоменклатуры.Актуально			КАК Актуально	               
				   |ПОМЕСТИТЬ ТабНоменклатураПредварительная
	               |ИЗ
	               |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
				   |;
				   |
				   |ВЫБРАТЬ
	               |	Номенклатура		КАК Номенклатура,
	               |	Наименование		КАК Наименование,
	               |	ТоварнаяКатегория	КАК ТоварнаяКатегория,
	               |	Остаток				КАК Остаток,
	               |	Производитель		КАК Производитель,
	               |	Актуально			КАК Актуально,
				   |	ЛОЖЬ				КАК Исключения
	               |ПОМЕСТИТЬ ТабНоменклатура
	               |ИЗ
	               |	ТабНоменклатураПредварительная
				   |ГДЕ
				   |	Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ ТабНоменклатураИсключений)
				   |	
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ТабНоменклатураИсключений.Номенклатура		КАК Номенклатура,
				   |	ТабНоменклатураИсключений.Наименование		КАК Наименование,
				   |	ТабНоменклатураИсключений.ТоварнаяКатегория	КАК ТоварнаяКатегория,
				   |	ТабНоменклатураИсключений.Остаток			КАК Остаток,
				   |	ТабНоменклатураИсключений.Производитель		КАК Производитель,
				   |	ТабНоменклатураИсключений.Актуально			КАК Актуально,
				   |	ИСТИНА										КАК Исключения
				   |ИЗ
				   |	ТабНоменклатураИсключений КАК ТабНоменклатураИсключений
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Номенклатура
				   |;
				   |";
				   
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДобавитьЦеныНоменклатурыИИсключения(ВидыЦен, ТипЗапроса);
				   	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолучитьАналогиНоменклатуры(ВидыЦен)

	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Номенклатура 						КАК Номенклатура,
				   |   	Номенклатура.Наименование 			КАК Наименование,
				   |   	Номенклатура.ТоварнаяКатегория 		КАК ТоварнаяКатегория,
				   |   	Номенклатура.Производитель 			КАК Производитель
				   |ПОМЕСТИТЬ ТаблицаИсключенийНоменклатуры
				   |ИЗ
				   |	РегистрСведений.ПД_ИсключениеАналогов
				   |ГДЕ
				   |	АналогНоменклатуры = &АналогНоменклатуры
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура					КАК Номенклатура,
	               |	Номенклатура.Наименование 		КАК Наименование,
	               |	Номенклатура.ТоварнаяКатегория 	КАК ТоварнаяКатегория,
				   |	Номенклатура.Производитель 		КАК Производитель,
				   |	ЛОЖЬ							КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ПД_ПривязкиАналогиНоменклатуры
	               |ГДЕ
	               |	АналогНоменклатуры = &АналогНоменклатуры И Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаИсключенийНоменклатуры)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ 
				   |
				   |ВЫБРАТЬ
				   |	Номенклатура		КАК Номенклатура,
	               |	Наименование 		КАК Наименование,
	               |	ТоварнаяКатегория 	КАК ТоварнаяКатегория,
				   |	Производитель 		КАК Производитель,
				   |	ИСТИНА				КАК Исключения
				   |ИЗ
				   |	ТаблицаИсключенийНоменклатуры
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Номенклатура
				   |;
				   |";
				   
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДобавитьАктуальностьИОстаткиНоменклатуры();
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДобавитьЦеныНоменклатурыИИсключения(ВидыЦен, "АналогиНоменклатуры");
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПолучитьАналогиНоменклатуры()
 
Функция ТекстЗапросаПолучитьПодпихнюНоменклатуры(ВидыЦен)
	
	ТекстЗапроса = "
	               |ВЫБРАТЬ
				   |	Номенклатура 						КАК Номенклатура,
				   |   	Номенклатура.Наименование 			КАК Наименование,
				   |   	Номенклатура.ТоварнаяКатегория 		КАК ТоварнаяКатегория,
				   |   	Номенклатура.Производитель 			КАК Производитель
				   |ПОМЕСТИТЬ ТаблицаИсключенийНоменклатуры
				   |ИЗ
				   |	РегистрСведений.ПД_ИсключениеПодпихни
				   |ГДЕ
				   |	Подпихня = &Подпихня
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура					КАК Номенклатура,
	               |	Номенклатура.Наименование 		КАК Наименование,
	               |	Номенклатура.ТоварнаяКатегория 	КАК ТоварнаяКатегория,
				   |	Номенклатура.Производитель 		КАК Производитель,
				   |	ЛОЖЬ							КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ПД_НаборПодпихни
	               |ГДЕ
	               |	АналогНоменклатуры = &АналогНоменклатуры И Подпихня = &Подпихня И Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаИсключенийНоменклатуры)
				   |	
				   |
				   |ОБЪЕДИНИТЬ ВСЕ 
				   |
				   |ВЫБРАТЬ
				   |	Номенклатура		КАК Номенклатура,
	               |	Наименование 		КАК Наименование,
	               |	ТоварнаяКатегория 	КАК ТоварнаяКатегория,
				   |	Производитель 		КАК Производитель,
				   |	ИСТИНА				КАК Исключения
				   |ИЗ
				   |	ТаблицаИсключенийНоменклатуры
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Номенклатура
				   |;
				   |";
				   
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДобавитьАктуальностьИОстаткиНоменклатуры();
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДобавитьЦеныНоменклатурыИИсключения(ВидыЦен, "Подпихня");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодготовитьТаблицуИсключений(ТипЗапроса)
	
	ТекстЗапроса = "";
	
	Если ТипЗапроса = "АналогиНоменклатуры" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
				   |ВЫБРАТЬ
				   |	Номенклатура 						КАК Номенклатура,
				   |   	Номенклатура.Наименование 			КАК Наименование,
				   |   	Номенклатура.ТоварнаяКатегория 		КАК ТоварнаяКатегория,
				   |   	Номенклатура.Производитель 			КАК Производитель
				   |ПОМЕСТИТЬ ТаблицаИсключенийНоменклатуры
				   |ИЗ
				   |	РегистрСведений.ПД_ИсключениеАналогов
				   |ГДЕ
				   |	АналогНоменклатуры = &АналогНоменклатуры
				   |;";
				   
	Иначе
				   
				   ТекстЗапроса = ТекстЗапроса + "
				   |ВЫБРАТЬ
				   |	Номенклатура 						КАК Номенклатура,
				   |   	Номенклатура.Наименование 			КАК Наименование,
				   |   	Номенклатура.ТоварнаяКатегория 		КАК ТоварнаяКатегория,
				   |   	Номенклатура.Производитель 			КАК Производитель
				   |ПОМЕСТИТЬ ТаблицаИсключенийНоменклатуры
				   |ИЗ
				   |	РегистрСведений.ПД_ИсключениеПодпихни
				   |ГДЕ
				   |	Подпихня = &Подпихня
				   |;";
				   
	КонецЕсли;
			   
	ТекстЗапроса = ТекстЗапроса + "
			    |ВЫБРАТЬ
				|	Склад КАК Склад
				|ПОМЕСТИТЬ ДоступныеСкладыИсключений
				|ИЗ
				|	РегистрСведений.Модуль_ДоступныеСклады 
				|ГДЕ
				|	Основной = ИСТИНА
				|;
				|
				|ВЫБРАТЬ
				|	Номенклатура 		КАК Номенклатура,
				|	ВНаличииОстаток	    КАК Остаток
				|ПОМЕСТИТЬ ТаблицаОстатковИсключений
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
				|							Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаИсключенийНоменклатуры)
				|							И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСкладыИсключений))
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|ВЫБРАТЬ
				|	Номенклатура 		КАК Номенклатура,
				|	КПоступлениюОстаток КАК Остаток
				|ПОМЕСТИТЬ ТаблицаОжидаемыхИсключений
				|ИЗ
				|	РегистрНакопления.ТоварыКПоступлению.Остатки(,
				|							Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаИсключенийНоменклатуры)
				|							И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСкладыИсключений))
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|ВЫБРАТЬ
				|	Номенклатура					КАК Номенклатура,
				|	Актуально И ГарантияДоставки	КАК Актуально
				|ПОМЕСТИТЬ ТаблицаАктуальностиИсключений
				|ИЗ
				|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(,
				|						Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаИсключенийНоменклатуры))
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;
				|
				|ВЫБРАТЬ
				|	ТаблицаИсключенийНоменклатуры.Номенклатура 															КАК Номенклатура,
				|   ТаблицаИсключенийНоменклатуры.Наименование 															КАК Наименование,
				|   ТаблицаИсключенийНоменклатуры.ТоварнаяКатегория 													КАК ТоварнаяКатегория,
				|   ТаблицаИсключенийНоменклатуры.Производитель 														КАК Производитель,
				|	ЕСТЬNULL(ТаблицаОстатковИсключений.Остаток, 0) + ЕСТЬNULL(ТаблицаОжидаемыхИсключений.Остаток, 0)	КАК Остаток,
				|	ЕСТЬNULL(ТаблицаАктуальностиИсключений.Актуально, ЛОЖЬ)  											КАК Актуально
				|ПОМЕСТИТЬ ТабНоменклатураИсключений 
				|ИЗ
				|	ТаблицаИсключенийНоменклатуры КАК ТаблицаИсключенийНоменклатуры
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковИсключений КАК ТаблицаОстатковИсключений
				|		ПО ТаблицаИсключенийНоменклатуры.Номенклатура = ТаблицаОстатковИсключений.Номенклатура
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАктуальностиИсключений КАК ТаблицаАктуальностиИсключений
				|		ПО ТаблицаИсключенийНоменклатуры.Номенклатура = ТаблицаАктуальностиИсключений.Номенклатура
				|		
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОжидаемыхИсключений КАК ТаблицаОжидаемыхИсключений
				|		ПО ТаблицаИсключенийНоменклатуры.Номенклатура = ТаблицаОжидаемыхИсключений.Номенклатура
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура
				|;";

	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаУдалениеИсключенийИПодпихни()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаИсключений.Исключение		КАК Исключение,
	               |	ТаблицаИсключений.Номенклатура		КАК Номенклатура,
	               |	ТаблицаИсключений.Удалить           КАК Удалить
	               |ПОМЕСТИТЬ ТабИсключения
	               |ИЗ
	               |	&ТаблицаИсключений КАК ТаблицаИсключений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Исключение			КАК Исключение,
	               |	Номенклатура		КАК Номенклатура
	               |ИЗ
	               |	ТабИсключения
	               |ГДЕ
	               |	Удалить = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти 

#Область ЗаписьДанныхВРегистры

Функция ЗаписатьАналогыВРегистр(ТаблицаЗаписи)
	
	Если ТаблицаЗаписи.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Период 					= ТекущаяДатаСеанса();
	Ответственный 			= ПараметрыСеанса.ТекущийПользователь; 
	АналогНоменклатурыОтбор = ТаблицаЗаписи[0].АналогНоменклатуры;
	
	Если ЗначениеЗаполнено(АналогНоменклатурыОтбор) = ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	СтруктураОтбора 		= Новый Структура("Исключения", ЛОЖЬ);
	ПривязкиТаблицыЗаписи 	= ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Блокировка 									= Новый БлокировкаДанных;  	
	ЭлементПлановыеНачисления 					= Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатуры");
	ЭлементПлановыеНачисления.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементПлановыеНачисления.ИсточникДанных 	= ТаблицаЗаписи;
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементПлановыеНачисления 					= Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатурыИстория");
	ЭлементПлановыеНачисления.Режим				= РежимБлокировкиДанных.Исключительный;
	ЭлементПлановыеНачисления.ИсточникДанных 	= ТаблицаЗаписи;
	ЭлементПлановыеНачисления.УстановитьЗначение("Период", Период);
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементИсключениеАналогов 					= Блокировка.Добавить("РегистрСведений.ПД_ИсключениеАналогов");
	ЭлементИсключениеАналогов.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементИсключениеАналогов.УстановитьЗначение("АналогНоменклатуры", АналогНоменклатурыОтбор);

	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_ПривязкиАналогиНоменклатуры", АналогНоменклатурыОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;
	
	Если ПривязкиТаблицыЗаписи.Количество() > 1 Тогда     		
		
		Для каждого СтрокаТаблици Из ПривязкиТаблицыЗаписи Цикл
			
			АналогНоменклатуры  = СтрокаТаблици.АналогНоменклатуры;
			Номенклатура 		= СтрокаТаблици.Номенклатура;
			ТЗ_Записи 			= ПолучитьТаблицуПривязкаНоменклатуры(Номенклатура, ТаблицаЗаписи); 

			НаборЗаписей = РегистрыСведений.ПД_ПривязкиАналогиНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			НаборЗаписей.Загрузить(ТЗ_Записи);   	

			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать привязки.");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ТекстОшибки);
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				Возврат Ложь;
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.ПД_ПривязкиАналогиНоменклатурыИстория.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Период);
			НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			
			ТЗ_ЗаписиИстория = ПолучитьТаблицуПривязкаНоменклатурыИстория(ТЗ_Записи,Период);
			НаборЗаписей.Загрузить(ТЗ_ЗаписиИстория);   

			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать привязки.");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ТекстОшибки);
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_ИсключениеАналогов", АналогНоменклатурыОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Исключения", ИСТИНА);
	ИсключенияПривязкиТаблицыЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаТаблици Из ИсключенияПривязкиТаблицыЗаписи Цикл
		
		АналогНоменклатуры 	= СтрокаТаблици.АналогНоменклатуры;
		Номенклатура 		= СтрокаТаблици.Номенклатура;
		
		НаборЗаписей = РегистрыСведений.ПД_ИсключениеАналогов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблици);
		Запись.Ответственный = Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать исключения до привязки.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;  
	
	Возврат Истина;

КонецФункции // ЗаписатьАналогыВРегистр()

Функция ЗаписатьПодпихнюВРегистр(ТаблицаЗаписи)

	Если ТаблицаЗаписи.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;

	Период 					= ТекущаяДатаСеанса();
	Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
	АналогНоменклатурыОтбор = ТаблицаЗаписи[0].АналогНоменклатуры;
	ПодпихняОтбор 			= ТаблицаЗаписи[0].Подпихня; 	
	
	Если ЗначениеЗаполнено(АналогНоменклатурыОтбор) = ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодпихняОтбор)  =ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	СтруктураОтбора 		= Новый Структура("Исключения", ЛОЖЬ);
	ПривязкиТаблицыЗаписи 	= ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	СтруктураОтбора 				= Новый Структура("Исключения",ИСТИНА);
	ИсключенияПривязкиТаблицыЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Блокировка 									= Новый БлокировкаДанных;  	
	ЭлементПлановыеНачисления 					= Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихни");
	ЭлементПлановыеНачисления.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементПлановыеНачисления.ИсточникДанных    = ТаблицаЗаписи;
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Подпихня", "Подпихня");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементПлановыеНачисления 					= Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихниИстория");
	ЭлементПлановыеНачисления.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементПлановыеНачисления.ИсточникДанных    = ТаблицаЗаписи;
	ЭлементПлановыеНачисления.УстановитьЗначение("Период", Период);
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("АналогНоменклатуры", "АналогНоменклатуры");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Подпихня", "Подпихня");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	ЭлементПлановыеНачисления 					= Блокировка.Добавить("РегистрСведений.ПД_ИсключениеПодпихни");
	ЭлементПлановыеНачисления.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементПлановыеНачисления.ИсточникДанных    = ТаблицаЗаписи;
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Подпихня", "Подпихня");
	ЭлементПлановыеНачисления.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_НаборПодпихни",АналогНоменклатурыОтбор,ПодпихняОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;  
	
	Для каждого СтрокаТаблицы Из ПривязкиТаблицыЗаписи Цикл

		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(СтрокаТаблицы.АналогНоменклатуры);
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня); 
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
				
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный; 	

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать подпихню в историю.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихниИстория.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(СтрокаТаблицы.АналогНоменклатуры);
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня); 
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);

		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный; 
		Запись.Период 			= Период; 

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать подпихню в историю.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
	 КонецЦикла;
	 
	Если НЕ ОчиститьЗаписьРегистра("ПД_ИсключениеПодпихни",,ПодпихняОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;  
	
	Для каждого СтрокаТаблицы Из ИсключенияПривязкиТаблицыЗаписи Цикл
	
		НаборЗаписей = РегистрыСведений.ПД_ИсключениеПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать исключения до привязки.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;  
	КонецЦикла;  
	
	Возврат Истина;

КонецФункции // ЗаписатьАналогыВРегистр()

Функция ПолучитьТаблицуПривязкаНоменклатуры(Номенклатура,ТаблицаЗаписи)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаполненияТаблициПривязки();
	Запрос.УстановитьПараметр("Ответственный",Ответственный);
	Запрос.УстановитьПараметр("ТаблицаЗаписи",ТаблицаЗаписи);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
			
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуПривязкаНоменклатуры()

Функция ПолучитьТекстЗапросаЗаполненияТаблициПривязки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаЗаписи.АналогНоменклатуры 	КАК АналогНоменклатуры,
	               |	ТаблицаЗаписи.Номенклатура 			КАК Номенклатура,
	               |	ТаблицаЗаписи.Исключения 			КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаЗаписи
	               |ИЗ
	               |	&ТаблицаЗаписи КАК ТаблицаЗаписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаписи.АналогНоменклатуры КАК АналогНоменклатуры,
	               |	ТаблицаЗаписи.Номенклатура 		 КАК Привязка,
	               |	&Номенклатура					 КАК Номенклатура,
	               |	&Ответственный                   КАК Ответственный
	               |ИЗ
	               |	ТаблицаЗаписи КАК ТаблицаЗаписи
	               |ГДЕ
	               |	ТаблицаЗаписи.Исключения = ЛОЖЬ
	               |	И ТаблицаЗаписи.Номенклатура <> &Номенклатура";
					
	Возврат	ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗаполненияТаблициПривязки()

Функция ПолучитьТаблицуПривязкаНоменклатурыИстория(ТЗ_Записи,Период)

	ТЗ_ЗаписиИстория = ТЗ_Записи;
	ТЗ_ЗаписиИстория.Колонки.Добавить("Период", 	Новый ОписаниеТипов("Дата"));
	ТЗ_ЗаписиИстория.ЗаполнитьЗначения(Период,"Период"); 	
	Возврат ТЗ_ЗаписиИстория;

КонецФункции // ПолучитьТаблицуПривязкаНоменклатуры()

Функция ОчиститьЗаписьРегистра(ИмяРегистра,АналогНоменклатуры= Неопределено,Подпихня = Неопределено)
	 
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Если АналогНоменклатуры <> Неопределено Тогда
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
	КонецЕсли;      
	
	Если Подпихня <> Неопределено Тогда
		НаборЗаписей.Отбор.Подпихня.Установить(Подпихня); 
	КонецЕсли;

	НаборЗаписей.Прочитать(); 
	НаборЗаписей.Очистить();  	

	Попытка
		НаборЗаписей.Записать();    					
	Исключение
		ТекстОшибки = ПодготовитьТекст("Для регистра %1 не удалось очистить записи.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяРегистра);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ТекстОшибки);
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;     
КонецФункции // ОчиститьЗаписьРегистра()

#КонецОбласти 

Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'Подпихня'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()

Функция ПодготовитьТекст(знач ТекстДляПодготовки)
	Шаблон 		= "ru='%1'";
	Результат   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекстДляПодготовки);
	Возврат НСтр(Результат, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции // ПодготовитьТекст()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.35";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Подпихня");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.3.50");

    ПараметрыРегистрации.Вставить("Информация", "Подпихня [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Подпихня [" + Версия + "]", "Подпихня", "ВызовКлиентскогоМетода", Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Записать аналоги и подпихню в регистры", "ЗаписатьАналогиИПодпихнюВРегистры", "ВызовСерверногоМетода", Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Статусы использования номенклатуры аналогов", "СтатусыИспользованияНоменклатурыАналогов", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Статусы использования номенклатуры подпихни", "СтатусыИспользованияНоменклатурыПодпихни", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Статусы исключения номенклатуры", "СтатусыИсключенияНоменклатуры", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
