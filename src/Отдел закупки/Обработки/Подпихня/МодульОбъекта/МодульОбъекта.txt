#Область ПрограммныйИнтерфейс

Процедура ЗаписатьАналогиИПодпихнюВРегистры(СтруктураЗаписей) Экспорт
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Если СтруктураЗаписей.Свойство("АналогиНоменклатуры") 
			И ТипЗнч(СтруктураЗаписей.АналогиНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		
			 Если Не ЗаписатьАналогыВРегистр(СтруктураЗаписей.АналогиНоменклатуры) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;   		
		КонецЕсли;
		
		Если СтруктураЗаписей.Свойство("Подпихня") 
			И ТипЗнч(СтруктураЗаписей.Подпихня) = Тип("ТаблицаЗначений") Тогда
		
			 Если Не ЗаписатьПодпихнюВРегистр(СтруктураЗаписей.Подпихня) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;   		
		КонецЕсли;        
	
	ЗафиксироватьТранзакцию();    
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторКоманды = "ЗаписатьАналогиИПодпихнюВРегистры" Тогда   		
		ЗаписатьАналогиИПодпихнюВРегистры(ПараметрыКоманды.СтруктураЗаписей); 				
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции


#Область ЗаписьДанныхВРегистры

Функция ЗаписатьАналогыВРегистр(ТаблицаЗаписи)
	
	Если ТаблицаЗаписи.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Период 					= ТекущаяДатаСеанса();
	Ответственный 			= ПараметрыСеанса.ТекущийПользователь; 
	АналогНоменклатурыОтбор = ТаблицаЗаписи[0].АналогНоменклатуры;
	
	
	Если ЗначениеЗаполнено(АналогНоменклатурыОтбор)=ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_ПривязкиАналогиНоменклатуры",АналогНоменклатурыОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;           
	
	СтруктураОтбора =Новый Структура("Исключения",ЛОЖЬ);
	ПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Если ПривязкиТаблициЗаписи.Количество()>1 Тогда     		
		
		Для каждого СтрокаТаблици Из ПривязкиТаблициЗаписи Цикл
			АналогНоменклатуры = СтрокаТаблици.АналогНоменклатуры;
			Номенклатура 		= СтрокаТаблици.Номенклатура;
			ТЗ_Записи 			= ПолучитьТаблицуПривязкаНоменклатуры(Номенклатура,ТаблицаЗаписи);

			Блокировка = Новый БлокировкаДанных;  	
			ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатуры");
			ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры", АналогНоменклатуры);
			ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура", Номенклатура); 
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
				Возврат Ложь; 		
			КонецПопытки;
			
			Блокировка = Новый БлокировкаДанных;  	
			ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ПривязкиАналогиНоменклатурыИстория");
			ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементПлановыеНачисления.УстановитьЗначение("Период"				, Период);
			ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, АналогНоменклатуры);
			ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, Номенклатура); 
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;


			НаборЗаписей = РегистрыСведений.ПД_ПривязкиАналогиНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			НаборЗаписей.Загрузить(ТЗ_Записи);   	

			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать привязки.");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ТекстОшибки);
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				Возврат Ложь;
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.ПД_ПривязкиАналогиНоменклатурыИстория.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Период);
			НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
			НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
			
			ТЗ_ЗаписиИстория = ПолучитьТаблицуПривязкаНоменклатурыИстория(ТЗ_Записи,Период);
			НаборЗаписей.Загрузить(ТЗ_ЗаписиИстория);   

			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать привязки.");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ЗафиксироватьОшибкуВЖР(ТекстОшибки);
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_ИсключениеАналогов",АналогНоменклатурыОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;
	
	СтруктураОтбора =Новый Структура("Исключения",ИСТИНА);
	ИсключенияПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТаблици Из ИсключенияПривязкиТаблициЗаписи Цикл
	    АналогНоменклатуры = СтрокаТаблици.АналогНоменклатуры;
		Номенклатура = СтрокаТаблици.Номенклатура;
		
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ИсключениеАналогов");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, АналогНоменклатуры);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, Номенклатура); 
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;

		
		НаборЗаписей = РегистрыСведений.ПД_ИсключениеАналогов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблици);
		Запись.Ответственный 	= Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать исключения до привязки.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;  
	КонецЦикла;  
	
	Возврат Истина;

КонецФункции // ЗаписатьАналогыВРегистр()

Функция ЗаписатьПодпихнюВРегистр(ТаблицаЗаписи)

	Если ТаблицаЗаписи.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;

	Период 					= ТекущаяДатаСеанса();
	Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
	АналогНоменклатурыОтбор = ТаблицаЗаписи[0].АналогНоменклатуры;
	ПодпихняОтбор 			= ТаблицаЗаписи[0].Подпихня; 	
	
	Если ЗначениеЗаполнено(АналогНоменклатурыОтбор)=ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодпихняОтбор)=ЛОЖЬ Тогда
		Возврат ЛОЖЬ; 	
	КонецЕсли;
	
	Если НЕ ОчиститьЗаписьРегистра("ПД_НаборПодпихни",АналогНоменклатурыОтбор,ПодпихняОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;  
		
	СтруктураОтбора =Новый Структура("Исключения",ЛОЖЬ);
	ПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаТаблицы Из ПривязкиТаблициЗаписи Цикл
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихни");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, СтрокаТаблицы.АналогНоменклатуры);
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"				, СтрокаТаблицы.Подпихня);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, СтрокаТаблицы.Номенклатура); 
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь; 		
		КонецПопытки;
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_НаборПодпихниИстория");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("Период"				, Период);
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры"	, СтрокаТаблицы.АналогНоменклатуры);
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"				, СтрокаТаблицы.Подпихня);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, СтрокаТаблицы.Номенклатура);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;

		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(СтрокаТаблицы.АналогНоменклатуры);
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня); 
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
				
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный; 	

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать подпихню в историю.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
		
		НаборЗаписей = РегистрыСведений.ПД_НаборПодпихниИстория.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(СтрокаТаблицы.АналогНоменклатуры);
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня); 
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);

		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный; 
		Запись.Период 			= Период; 

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать подпихню в историю.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;
	 КонецЦикла;
	 
	Если НЕ ОчиститьЗаписьРегистра("ПД_ИсключениеПодпихни",,ПодпихняОтбор) Тогда
	    Возврат ЛОЖЬ;	
	КонецЕсли;  
	
	СтруктураОтбора =Новый Структура("Исключения",ИСТИНА);
	ИсключенияПривязкиТаблициЗаписи = ТаблицаЗаписи.НайтиСтроки(СтруктураОтбора);
	
	Для каждого СтрокаТаблицы Из ИсключенияПривязкиТаблициЗаписи Цикл
		
		Блокировка = Новый БлокировкаДанных;  	
		ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ПД_ИсключениеПодпихни");
		ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"				, СтрокаТаблицы.Подпихня);
		ЭлементПлановыеНачисления.УстановитьЗначение("Номенклатура"			, СтрокаТаблицы.Номенклатура);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;

	
		НаборЗаписей = РегистрыСведений.ПД_ИсключениеПодпихни.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Подпихня.Установить(СтрокаТаблицы.Подпихня);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Ответственный 	= Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = ПодготовитьТекст("Для номенклатуры %1 не удалось записать исключения до привязки.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ЗафиксироватьОшибкуВЖР(ТекстОшибки);
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Ложь;
		КонецПопытки;  
	КонецЦикла;  
	
	Возврат Истина;

КонецФункции // ЗаписатьАналогыВРегистр()

Функция ПолучитьТаблицуПривязкаНоменклатуры(Номенклатура,ТаблицаЗаписи)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаполненияТаблициПривязки();
	Запрос.УстановитьПараметр("Ответственный",Ответственный);
	Запрос.УстановитьПараметр("ТаблицаЗаписи",ТаблицаЗаписи);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
			
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуПривязкаНоменклатуры()

Функция ПолучитьТекстЗапросаЗаполненияТаблициПривязки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаЗаписи.АналогНоменклатуры 	КАК АналогНоменклатуры,
	               |	ТаблицаЗаписи.Номенклатура 			КАК Номенклатура,
	               |	ТаблицаЗаписи.Исключения 			КАК Исключения
	               |ПОМЕСТИТЬ ТаблицаЗаписи
	               |ИЗ
	               |	&ТаблицаЗаписи КАК ТаблицаЗаписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаписи.АналогНоменклатуры КАК АналогНоменклатуры,
	               |	ТаблицаЗаписи.Номенклатура 		 КАК Привязка,
	               |	&Номенклатура					 КАК Номенклатура,
	               |	&Ответственный                   КАК Ответственный
	               |ИЗ
	               |	ТаблицаЗаписи КАК ТаблицаЗаписи
	               |ГДЕ
	               |	ТаблицаЗаписи.Исключения = ЛОЖЬ
	               |	И ТаблицаЗаписи.Номенклатура <> &Номенклатура";
					
	Возврат	ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗаполненияТаблициПривязки()

Функция ПолучитьТаблицуПривязкаНоменклатурыИстория(ТЗ_Записи,Период)

	ТЗ_ЗаписиИстория = ТЗ_Записи;
	ТЗ_ЗаписиИстория.Колонки.Добавить("Период", 	Новый ОписаниеТипов("Дата"));
	ТЗ_ЗаписиИстория.ЗаполнитьЗначения(Период,"Период"); 	
	Возврат ТЗ_ЗаписиИстория;

КонецФункции // ПолучитьТаблицуПривязкаНоменклатуры()

Функция ОчиститьЗаписьРегистра(ИмяРегистра,АналогНоменклатуры= Неопределено,Подпихня = Неопределено)
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений."+ИмяРегистра);
	ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если АналогНоменклатуры <> Неопределено Тогда
		ЭлементПлановыеНачисления.УстановитьЗначение("АналогНоменклатуры", АналогНоменклатуры);	
	КонецЕсли;
	 
	Если Подпихня <> Неопределено Тогда
		ЭлементПлановыеНачисления.УстановитьЗначение("Подпихня"	, Подпихня); 	
	КонецЕсли;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки; 
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Если АналогНоменклатуры <> Неопределено Тогда
		НаборЗаписей.Отбор.АналогНоменклатуры.Установить(АналогНоменклатуры);
	КонецЕсли;      
	
	Если Подпихня <> Неопределено Тогда
		НаборЗаписей.Отбор.Подпихня.Установить(Подпихня); 
	КонецЕсли;

	НаборЗаписей.Прочитать(); 
	НаборЗаписей.Очистить();  	

	Попытка
		НаборЗаписей.Записать();    					
	Исключение
		ТекстОшибки = ПодготовитьТекст("Для регистра %1 не удалось очистить записи.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяРегистра);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗафиксироватьОшибкуВЖР(ТекстОшибки);
		ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;     
КонецФункции // ОчиститьЗаписьРегистра()

#КонецОбласти 

Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'Подпихня'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()

Функция ПодготовитьТекст(знач ТекстДляПодготовки)
	Шаблон 		= "ru='%1'";
	Результат   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекстДляПодготовки);
	Возврат НСтр(Результат, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции // ПодготовитьТекст()


#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Подпихня");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.3.50");

    ПараметрыРегистрации.Вставить("Информация", "Подпихня [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Подпихня [" + Версия + "]", "Подпихня", "ВызовКлиентскогоМетода", Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Записать аналоги и подпихню в регистры", "ЗаписатьАналогиИПодпихнюВРегистры", "ВызовСерверногоМетода",Истина);
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
