
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьРасчетыВФоне 	= НЕ СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ОбъектСсылка 			= git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект("Подпихня");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыНоменклатуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТаблицыНаКлиенте();
	
	Если Не ТекущиеДанные.ЭтоГруппа Тогда
		ЗагрузитьТаблицуНастроекАналоговНоменклатуры(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАналоговНоменклатуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 			= НастройкиАналоговНоменклатуры.Добавить();
	НоваяСтрока.НомерСтроки = НастройкиАналоговНоменклатуры.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыВидЦеныПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидЦены.Пустая() Тогда
		ТекущиеДанные.НижняяГраница  = 0;
		ТекущиеДанные.ВерхняяГраница = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы 			= Новый Структура("Владелец", ТекущиеДанные.Ссылка);
	ОповещаниеОЗакрытии     = Новый ОписаниеОповещения("ОбработкаВыбораТоварнойКатегории", ЭтаФорма);
	ОткрытьФорму("Справочник.ТоварныеКатегории.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор, , , ОповещаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТоварнойКатегории(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТоварнаяКатегория = Результат;

КонецПроцедуры
 
&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПослеУдаления(Элемент)
	ПересчитатьНомераСтрокТаблицы("НастройкиАналоговНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиАналогов(Команда)
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНастройкиАналоговНоменклатурыНаСервере(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЭлементИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперациюНастройкаАналогов(Команда)
	Если Команда.Имя = "ДобавитьИ" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&AND&");
	ИначеЕсли Команда.Имя = "ДобавитьИЛИ" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&OR&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуЗакрития" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&}&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуОткрития" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&{&");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.АналогНоменклатуры.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СписокАналоговКУдалению.Добавить(ТекущиеДанные.АналогНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НастройкиПодпихни.Очистить();
		Подпихня.Очистить();
		АналогиНоменклатуры.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТаблицуНастроекПодпихни(ТекущиеДанные.АналогНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуАналогов(Команда)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда  Возврат; КонецЕсли; 
	
	ТекущийАналоговНоменклатуры = ТекущиеДанные.АналогНоменклатуры; 
	
	БуферОбменаАналоги = СкопироватьСтроку("НастройкиАналоговНоменклатуры");
	НайтиИдентификаторСтрокиНастройкиАН();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокуАналогов(Команда)
	ВставитьСтроку("НастройкиАналоговНоменклатуры",БуферОбменаАналоги);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПодпихни

&НаКлиенте
Процедура НастройкиПодпихниПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТДНастройкиАналогов = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТДНастройкиАналогов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ТДНастройкиАналогов.АналогНоменклатуры.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Необходимо сохранить настройки аналогов номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 			= НастройкиПодпихни.Добавить();
	НоваяСтрока.НомерСтроки = НастройкиПодпихни.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы 			= Новый Структура("Владелец", ТекущиеДанные.ВидНоменклатуры);
	ОповещаниеОЗакрытии     = Новый ОписаниеОповещения("ОбработкаВыбораТоварнойКатегорииПодпихни", ЭтаФорма);
	ОткрытьФорму("Справочник.ТоварныеКатегории.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор, , , ОповещаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТоварнойКатегорииПодпихни(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТоварнаяКатегория = Результат;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниВидНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТоварнаяКатегория = ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ЭлементИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниВидЦеныПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидЦены.Пустая() Тогда
		ТекущиеДанные.НижняяГраница  = 0;
		ТекущиеДанные.ВерхняяГраница = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперациюНастройкаПодпихни(Команда)
	Если Команда.Имя = "ДобавитьИПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&AND&");
	ИначеЕсли Команда.Имя = "ДобавитьИЛИПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&OR&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуЗакритияПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&}&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуОткритияПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&{&");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПослеУдаления(Элемент)
	ПересчитатьНомераСтрокТаблицы("НастройкиПодпихни");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Подпихня.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СписокПодпихниКУдалению.Добавить(ТекущиеДанные.Подпихня);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиПодпихни(Команда)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНастройкиПодпихниНаСервере(ТекущиеДанные.АналогНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуПодпихни(Команда)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;  	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущийНастройкиПодпихни = ТекущиеДанные.Подпихня; 
	
	БуферОбменаПодпихня = СкопироватьСтроку("НастройкиПодпихни");
	НайтиИдентификаторСтрокиНастройкиПодпихни();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокуПодпихни(Команда)
	ВставитьСтроку("НастройкиПодпихни",БуферОбменаПодпихня);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьАналоги(Команда)
	ЗаписатьАналогиПодпихнюНаСервере(ИСТИНА,ЛОЖЬ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПодпихню(Команда)
	ЗаписатьАналогиПодпихнюНаСервере(ЛОЖЬ,ИСТИНА); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАналогиПодпихню(Команда)
	ЗаписатьАналогиПодпихнюНаСервере(ИСТИНА,ИСТИНА); 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьТаблицыНаКлиенте()
	НастройкиАналоговНоменклатуры.Очистить();
	НастройкиПодпихни.Очистить();
	АналогиНоменклатуры.Очистить();
	Подпихня.Очистить();
	СписокАналоговКУдалению.Очистить();
	СписокПодпихниКУдалению.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперациюНаКлиенте(ИмяТаблицы, Операция)
	
	ТекДанные  = Элементы[ИмяТаблицы].ТекущиеДанные;
	ТекЭлемент = Элементы[ИмяТаблицы].ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ТекЭлемент.Имя, "Содержит") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки 					= СтрЗаменить(ТекЭлемент.Имя, ИмяТаблицы, "");
	ТекДанные[ИмяКолонки]   	= ТекДанные[ИмяКолонки] + Операция;	
	ТекДанные.ЭлементИзменен 	= Истина;
	
КонецПроцедуры



&НаСервере
Процедура ПересчитатьНомераСтрокТаблицы(ИмяТаблицы)

	НомерСтроки = 1;
	Для каждого СтрокаТаблицы ИЗ ЭтаФорма[ИмяТаблицы] Цикл СтрокаТаблицы.НомерСтроки = НомерСтроки; НомерСтроки = НомерСтроки + 1; КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ЗагрузитьТаблицуНастроекАналоговНоменклатуры(знач ВидНоменклатуры)	
	УстановитьПривилегированныйРежим(Истина);	
	НастройкиАналоговНоменклатуры.Загрузить(РеквизитФормыВЗначение("Объект").ПолучитьТаблицуНастроекАналоговНоменклатуры(ВидНоменклатуры));	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуНастроекПодпихни(знач АналогНоменклатуры)
	УстановитьПривилегированныйРежим(Истина);	
	НастройкиПодпихни.Загрузить(РеквизитФормыВЗначение("Объект").ПолучитьТаблицуНастроекПодпихни(АналогНоменклатуры));
КонецПроцедуры // ЗагрузитьТаблицуНастроекПодпихни()
 

&НаСервере
Процедура ЗаписатьНастройкиАналоговНоменклатурыНаСервере(знач ВидНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = ВыполнитьПроверкуНастроекАналоговНоменклатуры();
	Если РезультатПроверки Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ_НастройкиАналогов = НастройкиАналоговНоменклатуры.Выгрузить();
	СоответствиеАналогов = РеквизитФормыВЗначение("Объект").ЗаписатьНастройкиАналогиНоменклатуры(ТЗ_НастройкиАналогов, ВидНоменклатуры, СписокАналоговКУдалению);
	
	Если ТипЗнч(СоответствиеАналогов) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствиеАналогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из НастройкиАналоговНоменклатуры Цикл
		АналогНоменклатуры = СоответствиеАналогов.Получить(СтрокаТаблицы.НомерСтроки);
		Если АналогНоменклатуры <> Неопределено Тогда
			СтрокаТаблицы.АналогНоменклатуры = АналогНоменклатуры;
			Если СтрокаТаблицы.СтатусИспользованияНоменклатуры = 0 Тогда
				СтрокаТаблицы.СтатусИспользованияНоменклатуры = 2    			
			КонецЕсли; 
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры // ЗаписатьНастройкиАналоговНоменклатурыНаСервере()

&НаСервере
Функция ВыполнитьПроверкуНастроекАналоговНоменклатуры()
	
	Результат = Ложь;
	
	Для Каждого СтрокаТаблицы Из НастройкиАналоговНоменклатуры Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.АналогНоменклатурыНаименование) Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать наименование аналога номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиАналоговНоменклатуры[" + НастройкиАналоговНоменклатуры.Индекс(СтрокаТаблицы) + "].АналогНоменклатурыНаименование");
		КонецЕсли;
		
		Если СтрокаТаблицы.ТоварнаяКатегория.Пустая() Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать товарную категорию номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиАналоговНоменклатуры[" + НастройкиАналоговНоменклатуры.Индекс(СтрокаТаблицы) + "].ТоварнаяКатегория");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура ЗаписатьНастройкиПодпихниНаСервере(знач АналогНоменклатуры)

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = ВыполнитьПроверкуНастроекПодпихни();
	Если РезультатПроверки Тогда
		Возврат;
	КонецЕсли;

	ТЗ_НастройкиПодпихни = НастройкиПодпихни.Выгрузить();
	СоответствиеПодпихни = РеквизитФормыВЗначение("Объект").ЗаписатьНастройкиПодпихниНоменклатуры(ТЗ_НастройкиПодпихни, АналогНоменклатуры, СписокПодпихниКУдалению);
	
	Если ТипЗнч(СоответствиеПодпихни) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствиеПодпихни.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из НастройкиПодпихни Цикл
		Подпихня = СоответствиеПодпихни.Получить(СтрокаТаблицы.НомерСтроки);
		Если Подпихня <> Неопределено Тогда
			СтрокаТаблицы.Подпихня = Подпихня;
			Если СтрокаТаблицы.СтатусИспользованияНоменклатуры = 0 Тогда
				СтрокаТаблицы.СтатусИспользованияНоменклатуры = 2    			
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры // ЗаписатьНастройкиПодпихниНаСервере()

&НаСервере
Функция ВыполнитьПроверкуНастроекПодпихни()

	Результат = Ложь;
	
	Для Каждого СтрокаТаблицы Из НастройкиПодпихни Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.ПодпихняНаименование) Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать наименование подпихни номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиПодпихни[" + НастройкиПодпихни.Индекс(СтрокаТаблицы) + "].ПодпихняНаименование");
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидНоменклатуры.Пустая() Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать товарную категорию номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиПодпихни[" + НастройкиАналоговНоменклатуры.Индекс(СтрокаТаблицы) + "].ТоварнаяКатегория");
		КонецЕсли;
		
		Если СтрокаТаблицы.ТоварнаяКатегория.Пустая() Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать товарную категорию номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиПодпихни[" + НастройкиАналоговНоменклатуры.Индекс(СтрокаТаблицы) + "].ТоварнаяКатегория");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ВыполнитьПроверкуНастроекПодпихни()
 


&НаСервере
Процедура ЗаписатьАналогиПодпихнюНаСервере(ЗаписатьАналогиНоменклатуры,ЗаписатьПодпихню)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	СтруктураЗаписей = ПолучитьСтруктуруЗаписей(ЗаписатьАналогиНоменклатуры,ЗаписатьПодпихню);
	
	Если СтруктураЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды 		= Новый Структура;   
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
	ПараметрыКоманды.Вставить("СтруктураЗаписей", СтруктураЗаписей);
	ПараметрыКоманды.Вставить("ИдентификаторКоманды", "ЗаписатьАналогиИПодпихнюВРегистры");
	ПараметрыКоманды.Вставить("СопровождающийТекст", НСтр("ru = 'Выполняется запись анаалогов /подпихни.'"));

	Если ВыполнятьРасчетыВФоне Тогда
		ЗаданиеПараметры = Новый Массив;
		ЗаданиеПараметры.Добавить(ПараметрыКоманды);
		Задание = ФоновыеЗадания.Выполнить("ДополнительныеОтчетыИОбработки.ВыполнитьКоманду", ЗаданиеПараметры, , ПараметрыКоманды.СопровождающийТекст); 
	Иначе
		//РеквизитФормыВЗначение("Объект").ЗаписатьАналогиИПодпихнюВРегистры(СтруктураЗаписей);
		ВыполнитьКомандуНапрямую("ЗаписатьАналогиИПодпихнюВРегистры", ПараметрыКоманды);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьАналогиПодпихнюНаСервере()

&НаСервере
Функция ПолучитьСтруктуруЗаписей(ЗаписатьАналогиНоменклатуры,ЗаписатьПодпихню)
	
	СтрЗаписей = Новый Структура;
	
	Если ЗаписатьАналогиНоменклатуры = ИСТИНА Тогда
		СтрЗаписей.Вставить("АналогиНоменклатуры"	,АналогиНоменклатуры.Выгрузить());
	КонецЕсли;
	
	Если ЗаписатьПодпихню = ИСТИНА Тогда
		СтрЗаписей.Вставить("Подпихня"				,Подпихня.Выгрузить());
	КонецЕсли;

	Возврат СтрЗаписей; 	

КонецФункции // ПолучитьСтруктуруЗаписей()


#Область ФоноваяОбработка

&НаСервере
Функция ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды)
    Возврат ДополнительныеОтчетыИОбработки.ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, ЭтаФорма);
КонецФункции

#КонецОбласти 

#Область КопированиеСтрок

&НаКлиенте
Функция СкопироватьСтроку(ИмяТаблици)
	
	Буфер = "";
	ТC = Элементы[ИмяТаблици].ТекущаяСтрока;
	КоличествоСтрок = Элементы[ИмяТаблици].ВыделенныеСтроки.Количество();
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(ТC) Тогда  		
		Буфер = КопироватьСтрокуНаСервере(ИмяТаблици); 		
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСтрок);  		
	КонецЕсли;
	Возврат Буфер;
	
КонецФункции
	
&НаСервере
Функция КопироватьСтрокуНаСервере(ИмяТаблици)
	
	МассивСтрок 	= Новый Массив;
	МассивСтруктур  = Новый Массив;
	
	ДанныеКолекции = ЭтаФорма[ИмяТаблици];
	
	Для каждого ИдентификаторСтроки Из Элементы[ИмяТаблици].ВыделенныеСтроки Цикл
		Строка = ДанныеКолекции.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(Строка);
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрок Цикл
		СтруктураСтроки = ПолучитьСтруктуруСтрокиТаблици(ИмяТаблици);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		МассивСтруктур.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(МассивСтруктур);
                	
КонецФункции // КопироватьСтрокуНаСервере()

&НаСервере
Функция ПолучитьСтруктуруСтрокиТаблици(ИмяТаблици)

	СтруктураСтроки = Новый Структура;
	
	мТаблица = РеквизитФормыВЗначение(ИмяТаблици, Тип("ТаблицаЗначений"));
	
	Для каждого КолонкаТЗ Из мТаблица.Колонки Цикл
		Если КолонкаТЗ.Имя = "АналогНоменклатурыНаименование"
			ИЛИ КолонкаТЗ.Имя = "АналогНоменклатуры"
			ИЛИ КолонкаТЗ.Имя = "АналогНоменклатурыНаименование"
			ИЛИ КолонкаТЗ.Имя = "ТоварнаяКатегория" 
			ИЛИ  КолонкаТЗ.Имя = "ПодпихняНаименование"
			ИЛИ  КолонкаТЗ.Имя = "Подпихня" Тогда
			Продолжить;;		
		КонецЕсли;
		СтруктураСтроки.Вставить(КолонкаТЗ.Имя);
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(мТаблица, ИмяТаблици); 	
	Возврат СтруктураСтроки;     
КонецФункции // ПолучитьСтруктуруСтрокиДереваНачислений()

&НаСервере
Процедура НайтиИдентификаторСтрокиНастройкиАН()
	Если ТекущийАналоговНоменклатуры <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("АналогНоменклатуры", ТекущийАналоговНоменклатуры);
		РезультатПоиска = НастройкиАналоговНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.НастройкиАналоговНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;    
КонецПроцедуры // НайтиИдентификаторСтрокиДереваНачислений()

&НаСервере
Процедура НайтиИдентификаторСтрокиНастройкиПодпихни()
	
	Если ТекущийАналоговНоменклатуры <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Подпихня", ТекущиаяНастройкаПодпихни);
		РезультатПоиска = НастройкиПодпихни.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.НастройкиПодпихни.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НайтиИдентификаторСтрокиДереваНачислений()

#КонецОбласти

#Область ВставитьСтроку

&НаКлиенте
Процедура ВставитьСтроку(ИмяТаблици, БуферОбмена)
	
	Если ПустаяСтрока(БуферОбмена) = Истина Тогда 		
		ТекстОшибки =  НСтр("ru='Буфер обмена пустой!.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;	
	КонецЕсли;
	КоличествоВставленных = 0;
	ВставитьСтрокуНаСервере(КоличествоВставленных,БуферОбмена,ИмяТаблици);
	
	Если КоличествоВставленных > 0 Тогда
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	КонецЕсли;         
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокуНаСервере(КоличествоВставленных,БуферОбмена,ИмяТаблици)

	МассивСтрок = ЗначениеИзСтрокиВнутр(БуферОбмена);     	
	Если ТипЗнч(МассивСтрок) <> Тип("Массив") Тогда Возврат; КонецЕсли;
	
	Индекс = 0;  	
	Для каждого СтрокаТаблицы ИЗ МассивСтрок Цикл
		НоваяСтрока = ЭтаФорма[ИмяТаблици].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		Индекс					= Индекс + 1;
	КонецЦикла;
	
	Если Индекс <> 0 Тогда  Модифицированность = Истина; КонецЕсли;
	
	КоличествоВставленных = Индекс;

КонецПроцедуры // ВставитьСтрокуНаСервере()

#КонецОбласти

#КонецОбласти