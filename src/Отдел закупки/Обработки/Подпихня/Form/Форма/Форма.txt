
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьРасчетыВФоне 	= НЕ СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ОбъектСсылка 			= git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект("Подпихня");
	
	ВыполнитьОтрисовкуКолонокИзЦенами();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СтатусыИспользованияНоменклатурыАналогов" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ИндексМассива 		= 0;
			КоличествоНастроек 	= НастройкиАналоговНоменклатуры.Количество() - 1;
			Для Каждого ЭлементМассива Из Параметр Цикл
				Если ИндексМассива > КоличествоНастроек Тогда
					Возврат;
				КонецЕсли;
				НастройкиАналоговНоменклатуры[ИндексМассива].ЕстьИсключения = ЭлементМассива.ЕстьИсключения;
				ИндексМассива = ИндексМассива + 1;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СтатусыИспользованияНоменклатурыПодпихни" Тогда
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ИндексМассива 		= 0;
			КоличествоНастроек 	= НастройкиПодпихни.Количество() - 1;
			Для Каждого ЭлементМассива Из Параметр Цикл
				Если ИндексМассива > КоличествоНастроек Тогда
					Возврат;
				КонецЕсли;
				НастройкиПодпихни[ИндексМассива].ЕстьИсключения = ЭлементМассива.ЕстьИсключения;
				ИндексМассива = ИндексМассива + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыНоменклатуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ВидыНоменклатурыАктивизацияСтроки", 0.2, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыАктивизацияСтроки()

	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТаблицыНаКлиенте();
	
	Если Не ТекущиеДанные.ЭтоГруппа Тогда
		ЗагрузитьТаблицуНастроекАналоговНоменклатуры(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент", 1, Ложь);
	
	НастройкиАналоговРассчитаны = Ложь;
	НастройкиПодпихниРассчитаны = Ложь;

КонецПроцедуры // ВидыНоменклатурыАктивизацияСтроки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиАналоговНоменклатуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 				= НастройкиАналоговНоменклатуры.Добавить();
	НоваяСтрока.НомерСтроки 	= НастройкиАналоговНоменклатуры.Количество();
	НоваяСтрока.ЭлементИзменен  = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыВидЦеныПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидЦены.Пустая() Тогда
		ТекущиеДанные.НижняяГраница  = 0;
		ТекущиеДанные.ВерхняяГраница = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы 			= Новый Структура("Владелец", ТекущиеДанные.Ссылка);
	ОповещаниеОЗакрытии     = Новый ОписаниеОповещения("ОбработкаВыбораТоварнойКатегории", ЭтаФорма);
	ОткрытьФорму("Справочник.ТоварныеКатегории.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор, , , ОповещаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТоварнойКатегории(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТоварнаяКатегория = Результат;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПослеУдаления(Элемент)
	ПересчитатьНомераСтрокТаблицы("НастройкиАналоговНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиАналогов(Команда)
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеАналоги = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	НомерСтрокиАналога   = ?(ТекущиеДанныеАналоги = Неопределено, 0, ТекущиеДанныеАналоги.НомерСтроки);
	
	ЗаписатьНастройкиАналоговНоменклатурыНаСервере(ТекущиеДанные.Ссылка, НомерСтрокиАналога);
	
	НастройкиАналоговРассчитаны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЭлементИзменен = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперациюНастройкаАналогов(Команда)
	Если Команда.Имя = "ДобавитьИ" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&AND&");
	ИначеЕсли Команда.Имя = "ДобавитьИЛИ" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&OR&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуЗакрития" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&}&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуОткрития" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиАналоговНоменклатуры", "&{&");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.АналогНоменклатуры.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СписокАналоговКУдалению.Добавить(ТекущиеДанные.АналогНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("АналогиНоменклатурыАктивизацияСтроки", 0.2, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыАктивизацияСтроки()

	АналогиНоменклатуры.Очистить();
	НастройкиПодпихни.Очистить();
	Подпихня.Очистить();
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТаблицуНастроекПодпихни(ТекущиеДанные.АналогНоменклатуры);
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент", 1, Ложь);
	
	НастройкиАналоговРассчитаны = Ложь;
	НастройкиПодпихниРассчитаны = Ложь;

КонецПроцедуры // АналогиНоменклатурыАктивизацияСтроки()

&НаКлиенте
Процедура СкопироватьСтрокуАналогов(Команда)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда  Возврат; КонецЕсли; 
	
	ТекущийАналоговНоменклатуры  		= ТекущиеДанные.АналогНоменклатуры;
	ТекущиеДанныеВидНоменклатуры 		= Элементы.ВидыНоменклатуры.ТекущиеДанные;
	ВидНоменклатурыКопированиеСтрок     = ?(ТекущиеДанныеВидНоменклатуры = Неопределено, Неопределено, ТекущиеДанныеВидНоменклатуры.Ссылка);
	
	БуферОбменаАналоги = СкопироватьСтроку("НастройкиАналоговНоменклатуры");
	НайтиИдентификаторСтрокиНастройкиАН();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокуАналогов(Команда)
	ТекущиеДанные 	= Элементы.ВидыНоменклатуры.ТекущиеДанные;                    
	ВидНоменклатуры = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	ВставитьСтроку("НастройкиАналоговНоменклатуры", БуферОбменаАналоги, ВидНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНастройкиАналогов(Команда)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеВидНоменклатуры = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеВидНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеВидНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатРасчета = ВыполнитьРасчетАналоговНаСервере(ТекущиеДанныеВидНоменклатуры.Ссылка, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если РезультатРасчета = Истина Тогда
		ТекущиеДанные.ЕстьИсключения = 1;
	Иначе
		ТекущиеДанные.ЕстьИсключения = 0;
	КонецЕсли;
	
	НастройкиАналоговРассчитаны = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАналоговНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НастройкиАналоговНоменклатурыЕстьИсключенияВДругихАналогах" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ЕстьИсключенияВДругихНастройках <> 1 Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьОбработкуРасшифровки("НастройкиАналоговНоменклатуры");
	ИначеЕсли Поле.Имя = "НастройкиАналоговНоменклатурыЕстьИсключеннаяНоменклатураВДругихАналогах" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ЕстьИсключеннаяНоменклатураВДругихНастройках <> 1 Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьОбработкуРасшифровки("НастройкиАналоговНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПодпихни

&НаКлиенте
Процедура НастройкиПодпихниПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТДНастройкиАналогов = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТДНастройкиАналогов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ТДНастройкиАналогов.АналогНоменклатуры.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Необходимо сохранить настройки аналогов номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 				= НастройкиПодпихни.Добавить();
	НоваяСтрока.НомерСтроки 	= НастройкиПодпихни.Количество();
	НоваяСтрока.ЭлементИзменен  = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы 			= Новый Структура("Владелец", ТекущиеДанные.ВидНоменклатуры);
	ОповещаниеОЗакрытии     = Новый ОписаниеОповещения("ОбработкаВыбораТоварнойКатегорииПодпихни", ЭтаФорма);
	ОткрытьФорму("Справочник.ТоварныеКатегории.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор, , , ОповещаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТоварнойКатегорииПодпихни(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТоварнаяКатегория = Результат;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниВидНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ТоварнаяКатегория = ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ЭлементИзменен = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниВидЦеныПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ВидЦены.Пустая() Тогда
		ТекущиеДанные.НижняяГраница  = 0;
		ТекущиеДанные.ВерхняяГраница = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперациюНастройкаПодпихни(Команда)
	Если Команда.Имя = "ДобавитьИПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&AND&");
	ИначеЕсли Команда.Имя = "ДобавитьИЛИПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&OR&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуЗакритияПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&}&");
	ИначеЕсли Команда.Имя = "ДобавитьФигурнуюДужкуОткритияПодпихня" Тогда
		ДобавитьОперациюНаКлиенте("НастройкиПодпихни", "&{&");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПослеУдаления(Элемент)
	ПересчитатьНомераСтрокТаблицы("НастройкиПодпихни");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Подпихня.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СписокПодпихниКУдалению.Добавить(ТекущиеДанные.Подпихня);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиПодпихни(Команда)
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеПодпихня = Элементы.НастройкиПодпихни.ТекущиеДанные;
	НомерСтрокиПодпихня   = ?(ТекущиеДанныеПодпихня = Неопределено, 0, ТекущиеДанныеПодпихня.НомерСтроки);
	
	ЗаписатьНастройкиПодпихниНаСервере(ТекущиеДанные.АналогНоменклатуры, НомерСтрокиПодпихня);
	
	НастройкиПодпихниРассчитаны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуПодпихни(Команда)
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;  	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущийНастройкиПодпихни 		= ТекущиеДанные.Подпихня;
	ВидНоменклатурыКопированиеСтрок = Неопределено;
	
	БуферОбменаПодпихня = СкопироватьСтроку("НастройкиПодпихни");
	НайтиИдентификаторСтрокиНастройкиПодпихни();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокуПодпихни(Команда)
	ВставитьСтроку("НастройкиПодпихни",БуферОбменаПодпихня);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНастройкиПодпихни(Команда)
	
	ТекущиеДанныеАналогиНоменклатуры = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеАналогиНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	РезультатРасчета = ВыполнитьРасчетПодпихниНаСервере(ТекущиеДанныеАналогиНоменклатуры.АналогНоменклатуры, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если РезультатРасчета = Истина Тогда
		ТекущиеДанные.ЕстьИсключения = 1;
	Иначе
		ТекущиеДанные.ЕстьИсключения = 0;
	КонецЕсли;
	
	НастройкиПодпихниРассчитаны = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПодпихняАктивизацияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодпихняАктивизацияСтроки()
	
	Подпихня.Очистить();
	
	ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПодпихниПриАктивизацииСтроки(ТекущиеДанные.АналогНоменклатуры);
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент", 1, Ложь);
	
	НастройкиПодпихниРассчитаны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпихниВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НастройкиПодпихниЕстьИсключенияВДругихНастройках" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ЕстьИсключенияВДругихНастройках <> 1 Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьОбработкуРасшифровки("НастройкиПодпихни");
	ИначеЕсли Поле.Имя = "НастройкиПодпихниЕстьИсключеннаяНоменклатураВДругихНастройках" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ЕстьИсключеннаяНоменклатураВДругихНастройках <> 1 Тогда
			Возврат;
		КонецЕсли;
		ВыполнитьОбработкуРасшифровки("НастройкиПодпихни");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналогиНоменклатуры

&НаКлиенте
Процедура АналогиНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "АналогиНоменклатурыНоменклатура" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Номенклатура);	
	ИначеЕсли Поле.Имя = "АналогиНоменклатурыСтатусНоменклатуры" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.СтатусИсключенияНоменклатуры > 0 Тогда
			ВыполнитьОбработкуРасшифровки("АналогиНоменклатуры");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыИсключенияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент", 1, Ложь);
	НастройкиАналоговРассчитаны = Истина;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодпихня

&НаКлиенте
Процедура ПодпихняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодпихняПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодпихняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПодпихняНоменклатура" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле.Имя = "ПодпихняСтатусНоменклатуры" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.СтатусИсключенияНоменклатуры > 0 Тогда
			ВыполнитьОбработкуРасшифровки("Подпихня");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодпихняИсключенияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент", 1, Ложь);
	НастройкиПодпихниРассчитаны = Истина;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьАналоги(Команда)
	
	ЗаписатьАналогиПодпихнюНаСервере(ИСТИНА, ЛОЖЬ);
	
	НастройкиАналоговРассчитаны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПодпихню(Команда)
	
	ЗаписатьАналогиПодпихнюНаСервере(ЛОЖЬ, ИСТИНА);
	
	НастройкиПодпихниРассчитаны = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыНаКлиенте()
	НастройкиАналоговНоменклатуры.Очистить();
	НастройкиПодпихни.Очистить();
	АналогиНоменклатуры.Очистить();
	Подпихня.Очистить();
	СписокАналоговКУдалению.Очистить();
	СписокПодпихниКУдалению.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперациюНаКлиенте(ИмяТаблицы, Операция)
	
	ТекДанные  = Элементы[ИмяТаблицы].ТекущиеДанные;
	ТекЭлемент = Элементы[ИмяТаблицы].ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ТекЭлемент.Имя, "Содержит") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки 					= СтрЗаменить(ТекЭлемент.Имя, ИмяТаблицы, "");
	ТекДанные[ИмяКолонки]   	= ТекДанные[ИмяКолонки] + Операция;	
	ТекДанные.ЭлементИзменен 	= 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуРасшифровки(ИмяТаблицы)

	Перем АдресТаблицыНоменклатуры, ПараметрыФормы;
	
	Если ИмяТаблицы = "НастройкиАналоговНоменклатуры" Тогда
		
		ТекущиеДанные = Элементы.НастройкиАналоговНоменклатуры.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		АдресТаблицыНоменклатуры = ПолучитьАдресДляТаблицыИзНоменклатурой(ИмяТаблицы, ТекущиеДанные.АналогНоменклатуры);
		ПараметрыФормы 			 = Новый Структура("АдресТаблицыНоменклатуры, ВидРасшифровки", 
											АдресТаблицыНоменклатуры, 
											"АналогиНоменклатуры");
	ИначеЕсли ИмяТаблицы = "НастройкиПодпихни" Тогда
											
		ТекущиеДанные = Элементы.НастройкиПодпихни.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		АдресТаблицыНоменклатуры = ПолучитьАдресДляТаблицыИзНоменклатурой(ИмяТаблицы, ТекущиеДанные.Подпихня);
		ПараметрыФормы 			 = Новый Структура("АдресТаблицыНоменклатуры, ВидРасшифровки", 
											АдресТаблицыНоменклатуры, 
											"Подпихня");
											
	ИначеЕсли ИмяТаблицы = "АналогиНоменклатуры" Тогда
		
		ТекущиеДанные = Элементы.АналогиНоменклатуры.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		АдресТаблицыНоменклатуры = ПолучитьАдресДляТаблицыИзНоменклатурой(ИмяТаблицы, ТекущиеДанные.Номенклатура);
		ПараметрыФормы 			 = Новый Структура("АдресТаблицыНоменклатуры, ВидРасшифровки", 
											АдресТаблицыНоменклатуры, 
											"АналогиНоменклатуры");
											
	ИначеЕсли ИмяТаблицы = "Подпихня" Тогда
		
		ТекущиеДанные = Элементы.Подпихня.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		АдресТаблицыНоменклатуры = ПолучитьАдресДляТаблицыИзНоменклатурой(ИмяТаблицы, ТекущиеДанные.Номенклатура);
		ПараметрыФормы 			 = Новый Структура("АдресТаблицыНоменклатуры, ВидРасшифровки", 
											АдресТаблицыНоменклатуры, 
											"Подпихня");
		
	КонецЕсли;
	
	ОткрытьФорму("ВнешняяОбработка.Подпихня.Форма.ФормаРасшифровкиИсключений", 
						ПараметрыФормы, 
						ЭтаФорма, 
						Новый УникальныйИдентификатор, 
						, 
						, 
						, 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ВыполнитьОбработкуРасшифровки()
 
&НаСервере
Функция ПолучитьАдресДляТаблицыИзНоменклатурой(ИмяТаблицы, ДополнительныйПараметр = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяТаблицы = "НастройкиАналоговНоменклатуры" Тогда
		
		Если АналогиНоменклатуры.Количество() = 0 Тогда
			ТаблицаАналоговНоменклатуры = РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуАналоговНоменклатуры(ДополнительныйПараметр, Новый СписокЗначений);
			Возврат ПоместитьВоВременноеХранилище(ТаблицаАналоговНоменклатуры, УникальныйИдентификатор);
		Иначе
			Возврат ПоместитьВоВременноеХранилище(АналогиНоменклатуры.Выгрузить(), УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "НастройкиПодпихни" Тогда
		
		Если Подпихня.Количество() = 0 Тогда
			ТаблицаПодпихни = РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуПодпихниНоменклатуры(ДополнительныйПараметр.АналогНоменклатуры, ДополнительныйПараметр, Новый СписокЗначений);
			Возврат ПоместитьВоВременноеХранилище(ТаблицаПодпихни, УникальныйИдентификатор);
		Иначе
			Возврат ПоместитьВоВременноеХранилище(Подпихня.Выгрузить(), УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "АналогиНоменклатуры" ИЛИ ИмяТаблицы = "Подпихня" Тогда	
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Номенклатура = ДополнительныйПараметр;
		
		Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецФункции // ПолучитьАдресДляТаблицыИзНоменклатурой()
 

&НаСервере
Процедура ПересчитатьНомераСтрокТаблицы(ИмяТаблицы)
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы ИЗ ЭтаФорма[ИмяТаблицы] Цикл СтрокаТаблицы.НомерСтроки = НомерСтроки; НомерСтроки = НомерСтроки + 1; КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗаписей(ЗаписатьАналогиНоменклатуры,ЗаписатьПодпихню)
	
	СтрЗаписей = Новый Структура;
	
	Если ЗаписатьАналогиНоменклатуры = ИСТИНА Тогда
		СтрЗаписей.Вставить("АналогиНоменклатуры"	,АналогиНоменклатуры.Выгрузить());
	КонецЕсли;
	
	Если ЗаписатьПодпихню = ИСТИНА Тогда
		СтрЗаписей.Вставить("Подпихня"				,Подпихня.Выгрузить());
	КонецЕсли;

	Возврат СтрЗаписей; 	

КонецФункции // ПолучитьСтруктуруЗаписей()

&НаСервере
Процедура ВыполнитьОтрисовкуКолонокИзЦенами()

	ТекущийПользователь   = ПараметрыСеанса.ТекущийПользователь;
	НастройкиПользователя = ХранилищеНастроекДанныхФорм.Загрузить("_u_" + ТекущийПользователь.УникальныйИдентификатор(), , , "_u_" + ТекущийПользователь.УникальныйИдентификатор());
	
	Если ТипЗнч(НастройкиПользователя) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВидаЦен = 1;
	
	Если НастройкиПользователя.Свойство("Соглашение") И ТипЗнч(НастройкиПользователя.Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		
		ЭлементВидаЦеныАналог 	= Элементы.Найти("АналогиНоменклатурыЦена" + ИндексВидаЦен);
		ЭлементВидаЦеныПодпихня = Элементы.Найти("ПодпихняЦена" + ИндексВидаЦен);
		ВидЦены 				= НастройкиПользователя.Соглашение.ВидЦен;
		
		Если ЭлементВидаЦеныАналог <> Неопределено И ЭлементВидаЦеныПодпихня <> Неопределено И Не ВидЦены.Пустая() Тогда
			
			ЗаголовокКолонки = ВидЦены.Наименование;
			
			ВидыЦен.Добавить(ВидЦены);
			
			ЭлементВидаЦеныАналог.Видимость = Истина;
			ЭлементВидаЦеныАналог.Заголовок = ЗаголовокКолонки;
			
			ЭлементВидаЦеныПодпихня.Видимость = Истина;
			ЭлементВидаЦеныПодпихня.Заголовок = ЗаголовокКолонки;
			
			ИндексВидаЦен = ИндексВидаЦен + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиПользователя.Свойство("ДополнительныеВидыЦен") Тогда
		
		Если ТипЗнч(НастройкиПользователя.ДополнительныеВидыЦен) = Тип("Массив") Тогда
			
			Для Каждого ДопВидЦены ИЗ НастройкиПользователя.ДополнительныеВидыЦен Цикл
				
				ЭлементВидаЦеныАналог 	= Элементы.Найти("АналогиНоменклатурыЦена" + ИндексВидаЦен);
				ЭлементВидаЦеныПодпихня = Элементы.Найти("ПодпихняЦена" + ИндексВидаЦен);
				                                                                                        
				Если ЭлементВидаЦеныАналог <> Неопределено И ЭлементВидаЦеныПодпихня <> Неопределено И Не ДопВидЦены.Пустая() Тогда
					
					ЗаголовокКолонки = ДопВидЦены.Наименование;
					
					ВидыЦен.Добавить(ДопВидЦены);
					
					ЭлементВидаЦеныАналог.Видимость = Истина;
					ЭлементВидаЦеныАналог.Заголовок = ЗаголовокКолонки;
					
					ЭлементВидаЦеныПодпихня.Видимость = Истина;
					ЭлементВидаЦеныПодпихня.Заголовок = ЗаголовокКолонки;
					
					ИндексВидаЦен = ИндексВидаЦен + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьОтрисовкуКолонокИзЦенами()
 
#КонецОбласти 

#Область РаботаИзНастройками

&НаСервере
Процедура ЗагрузитьТаблицуНастроекАналоговНоменклатуры(знач ВидНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	НастройкиАналоговНоменклатуры.Загрузить(РеквизитФормыВЗначение("Объект").ПолучитьТаблицуНастроекАналоговНоменклатуры(ВидНоменклатуры));	
	
	ПараметрыКоманды = Новый Структура;
    ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
    ПараметрыКоманды.Вставить("СопровождающийТекст", НСтр("ru = 'Выполняеться получение данных...'"));
	ПараметрыКоманды.Вставить("НастройкиАналогов", НастройкиАналоговНоменклатуры.Выгрузить());
	ПараметрыКоманды.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	
	ВыполнитьКомандуОбработкиФоновымЗаданием("СтатусыИспользованияНоменклатурыАналогов", ПараметрыКоманды, АдресНастройкиАналогов);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуНастроекПодпихни(знач АналогНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	НастройкиПодпихни.Загрузить(РеквизитФормыВЗначение("Объект").ПолучитьТаблицуНастроекПодпихни(АналогНоменклатуры));
	
	ПараметрыКоманды = Новый Структура;
    ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
    ПараметрыКоманды.Вставить("СопровождающийТекст", НСтр("ru = 'Выполняеться получение данных...'"));
	ПараметрыКоманды.Вставить("НастройкиПодпихни", НастройкиПодпихни.Выгрузить());
	ПараметрыКоманды.Вставить("АналогНоменклатуры", АналогНоменклатуры);
	
	ВыполнитьКомандуОбработкиФоновымЗаданием("СтатусыИспользованияНоменклатурыПодпихни", ПараметрыКоманды, АдресНастройкиПодпихни);
	
	
	ПараметрыКоманды = Новый Структура;
    ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
    ПараметрыКоманды.Вставить("СопровождающийТекст", НСтр("ru = 'Выполняеться получение данных...'"));
	ПараметрыКоманды.Вставить("НастройкиАналогов", НастройкиАналоговНоменклатуры.Выгрузить());
	ПараметрыКоманды.Вставить("ВидНоменклатуры", АналогНоменклатуры.ВидНоменклатуры);
	
	ВыполнитьКомандуОбработкиФоновымЗаданием("СтатусыИспользованияНоменклатурыАналогов", ПараметрыКоманды, АдресНастройкиАналогов);
	
КонецПроцедуры // ЗагрузитьТаблицуНастроекПодпихни()

&НаСервере
Процедура ТаблицаПодпихниПриАктивизацииСтроки(знач АналогНоменклатуры)
	
	ПараметрыКоманды = Новый Структура;
    ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
    ПараметрыКоманды.Вставить("СопровождающийТекст", НСтр("ru = 'Выполняеться получение данных...'"));
	ПараметрыКоманды.Вставить("НастройкиПодпихни", НастройкиПодпихни.Выгрузить());
	ПараметрыКоманды.Вставить("АналогНоменклатуры", АналогНоменклатуры);
	
	ВыполнитьКомандуОбработкиФоновымЗаданием("СтатусыИспользованияНоменклатурыПодпихни", ПараметрыКоманды, АдресНастройкиПодпихни);

КонецПроцедуры // ТаблицаПодпихниПриАктивизацииСтроки()
 
&НаСервере
Функция ВыполнитьПроверкуНастроекАналоговНоменклатуры()
	
	Результат = Ложь;
	
	Для Каждого СтрокаТаблицы Из НастройкиАналоговНоменклатуры Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.АналогНоменклатурыНаименование) Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать наименование аналога номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиАналоговНоменклатуры[" + НастройкиАналоговНоменклатуры.Индекс(СтрокаТаблицы) + "].АналогНоменклатурыНаименование");
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуНастроекПодпихни()

	Результат = Ложь;
	
	Для Каждого СтрокаТаблицы Из НастройкиПодпихни Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.ПодпихняНаименование) Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать наименование подпихни номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиПодпихни[" + НастройкиПодпихни.Индекс(СтрокаТаблицы) + "].ПодпихняНаименование");
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидНоменклатуры.Пустая() Тогда
			Результат 		= Истина;
			ТекстСообщения 	= НСтр("ru='Для записи настроек необходимо задать товарную категорию номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкиПодпихни[" + НастройкиАналоговНоменклатуры.Индекс(СтрокаТаблицы) + "].ТоварнаяКатегория");
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ВыполнитьПроверкуНастроекПодпихни()

&НаСервере
Процедура ЗаписатьНастройкиАналоговНоменклатурыНаСервере(знач ВидНоменклатуры, знач НомерСтроки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = ВыполнитьПроверкуНастроекАналоговНоменклатуры();
	Если РезультатПроверки Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ_НастройкиАналогов = НастройкиАналоговНоменклатуры.Выгрузить();
	СоответствиеАналогов = РеквизитФормыВЗначение("Объект").ЗаписатьНастройкиАналогиНоменклатуры(ТЗ_НастройкиАналогов, ВидНоменклатуры, СписокАналоговКУдалению);
	
	Если ТипЗнч(СоответствиеАналогов) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из НастройкиАналоговНоменклатуры Цикл
		
		АналогНоменклатуры = СоответствиеАналогов.Получить(СтрокаТаблицы.НомерСтроки);
		
		Если АналогНоменклатуры <> Неопределено Тогда
			
			СтрокаТаблицы.АналогНоменклатуры = АналогНоменклатуры;
			СтрокаТаблицы.ЭлементИзменен	 = 0;
			
			Если СтрокаТаблицы.НомерСтроки = НомерСтроки Тогда
				Для каждого СтрокаАналогов Из АналогиНоменклатуры Цикл
					СтрокаАналогов.АналогНоменклатуры = АналогНоменклатуры;    			
				КонецЦикла;     	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НастройкиАналоговРассчитаны Тогда
		ЗаписатьАналогиПодпихнюНаСервере(ИСТИНА, ЛОЖЬ);
	КонецЕсли;
		
КонецПроцедуры // ЗаписатьНастройкиАналоговНоменклатурыНаСервере()

&НаСервере
Процедура ЗаписатьНастройкиПодпихниНаСервере(знач АналогНоменклатуры, знач НомерСтроки)

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = ВыполнитьПроверкуНастроекПодпихни();
	Если РезультатПроверки Тогда
		Возврат;
	КонецЕсли;

	ТЗ_НастройкиПодпихни = НастройкиПодпихни.Выгрузить();
	СоответствиеПодпихни = РеквизитФормыВЗначение("Объект").ЗаписатьНастройкиПодпихниНоменклатуры(ТЗ_НастройкиПодпихни, АналогНоменклатуры, СписокПодпихниКУдалению);
		
	Если ТипЗнч(СоответствиеПодпихни) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из НастройкиПодпихни Цикл
		
		ПодпихняСсылка = СоответствиеПодпихни.Получить(СтрокаТаблицы.НомерСтроки);
		
		Если ПодпихняСсылка <> Неопределено Тогда
			
			СтрокаТаблицы.Подпихня 			= ПодпихняСсылка;
			СтрокаТаблицы.ЭлементИзменен    = 0;
			
			Если СтрокаТаблицы.НомерСтроки = НомерСтроки Тогда
				Для каждого СтрокаПодпихни Из Подпихня Цикл
					СтрокаПодпихни.АналогНоменклатуры 	= АналогНоменклатуры;
					СтрокаПодпихни.Подпихня 			= ПодпихняСсылка;
				КонецЦикла;     		
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла;
	
	Если НастройкиПодпихниРассчитаны Тогда
		ЗаписатьАналогиПодпихнюНаСервере(ЛОЖЬ, ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьНастройкиПодпихниНаСервере()

#КонецОбласти 

#Область РасчетыАналоговИПодпихни

&НаСервере
Функция ВыполнитьРасчетАналоговНаСервере(знач ВидНоменклатуры, знач ИдентификаторТекущейСтроки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаТаблицы = НастройкиАналоговНоменклатуры.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаАналоговНоменклатуры = Неопределено;
	ТаблицаНастроек				= ПолучитьТаблицуНастроек();
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	Если СтрокаТаблицы.ЭлементИзменен = 1 Тогда
		ТаблицаАналоговНоменклатуры = РеквизитФормыВЗначение("Объект").РассчитатьТаблицуАналоговНоменклатуры(ВидНоменклатуры, ТаблицаНастроек, ВидыЦен);
	Иначе
		ТаблицаАналоговНоменклатуры = РеквизитФормыВЗначение("Объект").ПолучитьТаблицуАналоговНоменклатуры(СтрокаТаблицы.АналогНоменклатуры, ВидыЦен);
	КонецЕсли;	
	
	АналогиНоменклатуры.Загрузить(ТаблицаАналоговНоменклатуры);
	
	Возврат ПроанализироватьТаблицуИсключений(ТаблицаАналоговНоменклатуры);
	
КонецФункции

&НаСервере
Функция ВыполнитьРасчетПодпихниНаСервере(знач АналогНоменклатуры, знач ИдентификаторТекущейСтроки)

	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаТаблицы = НастройкиПодпихни.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаПодпихни = Неопределено;
	ТаблицаНастроек	= ПолучитьТаблицуНастроек();
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	Если СтрокаТаблицы.ЭлементИзменен = 1 Тогда
		ТаблицаПодпихни = РеквизитФормыВЗначение("Объект").РассчитатьТаблицуПодпихниНоменклатуры(СтрокаТаблицы.ВидНоменклатуры, ТаблицаНастроек, ВидыЦен);
	Иначе
		ТаблицаПодпихни = РеквизитФормыВЗначение("Объект").ПолучитьТаблицуПодпихниНоменклатуры(АналогНоменклатуры, СтрокаТаблицы.Подпихня, ВидыЦен);
	КонецЕсли;	
	
	Подпихня.Загрузить(ТаблицаПодпихни);
	
	Возврат ПроанализироватьТаблицуИсключений(ТаблицаПодпихни);

КонецФункции // ВыполнитьРассчетПодпихниНаСервере() 
 

&НаСервере
Функция ПолучитьТаблицуНастроек()
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ТоварнаяКатегория", Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
	ТаблицаНастроек.Колонки.Добавить("НижняяГраница", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНастроек.Колонки.Добавить("ВерхняяГраница", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНастроек.Колонки.Добавить("Содержит", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаНастроек.Колонки.Добавить("НеСодержит", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	ТаблицаНастроек.Колонки.Добавить("Производитель", Новый ОписаниеТипов("СправочникСсылка.Производители"));
	ТаблицаНастроек.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаНастроек.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаНастроек;
	
КонецФункции


&НаСервере
Функция ПроанализироватьТаблицуИсключений(ТаблицаДляАнализа)
	
	СтруктураПоиска = Новый Структура("Исключения", Истина);
	РезультатПоиска = ТаблицаДляАнализа.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции // ПроанализироватьТаблицуАналогов()

#КонецОбласти 

#Область ЗаписьАналоговИПодпихни

&НаСервере
Процедура ЗаписатьАналогиПодпихнюНаСервере(ЗаписатьАналогиНоменклатуры, ЗаписатьПодпихню)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Если НастройкиАналоговНоменклатуры.Итог("ЭлементИзменен") <> 0 И ЗаписатьАналогиНоменклатуры И Истина Тогда
		ТекстСообщения = НСтр("ru='Для сохранения аналогов сохранить настройки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если НастройкиПодпихни.Итог("ЭлементИзменен") <> 0 И ЗаписатьПодпихню И Истина Тогда
		ТекстСообщения = НСтр("ru='Для сохранения подпихни сохранить настройки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	СтруктураЗаписей = ПолучитьСтруктуруЗаписей(ЗаписатьАналогиНоменклатуры,ЗаписатьПодпихню);
	
	Если СтруктураЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура;   
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", ОбъектСсылка);
	ПараметрыКоманды.Вставить("СтруктураЗаписей", СтруктураЗаписей);
	ПараметрыКоманды.Вставить("ИдентификаторКоманды", "ЗаписатьАналогиИПодпихнюВРегистры");
	ПараметрыКоманды.Вставить("СопровождающийТекст", НСтр("ru = 'Выполняется запись анаалогов /подпихни.'"));

	//Если ВыполнятьРасчетыВФоне Тогда
	//	ЗаданиеПараметры = Новый Массив;
	//	ЗаданиеПараметры.Добавить(ПараметрыКоманды);
	//	Задание = ФоновыеЗадания.Выполнить("ДополнительныеОтчетыИОбработки.ВыполнитьКоманду", ЗаданиеПараметры, , ПараметрыКоманды.СопровождающийТекст); 
	//Иначе
		ВыполнитьКомандуНапрямую("ЗаписатьАналогиИПодпихнюВРегистры", ПараметрыКоманды);
	//КонецЕсли;
	
КонецПроцедуры // ЗаписатьАналогиПодпихнюНаСервере()

#КонецОбласти 

#Область ФоноваяОбработка

&НаКлиенте
Процедура ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент()
	
	Перем ОповещениеФорм;
	
	СписокАдресов = Новый СписокЗначений;
	Если ПустаяСтрока(АдресНастройкиАналогов) = Ложь Тогда
		СписокАдресов.Добавить(АдресНастройкиАналогов, "АдресНастройкиАналогов");
	КонецЕсли;
	
	Если ПустаяСтрока(АдресНастройкиПодпихни) = Ложь Тогда
		СписокАдресов.Добавить(АдресНастройкиПодпихни, "АдресНастройкиПодпихни");
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСостоянияАналога) = Ложь Тогда
		СписокАдресов.Добавить(АдресСостоянияАналога, "АдресСостоянияАналога");
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСостоянияПодпихни) = Ложь Тогда
		СписокАдресов.Добавить(АдресСостоянияПодпихни, "АдресСостоянияПодпихни");
	КонецЕсли;

	Если СписокАдресов.Количество() Тогда
		
		РезультатыВыполнения = ВыполнитьПроверкуЗавершенияФоновогоЗаданияСервер(СписокАдресов);
		Для Каждого Результат Из РезультатыВыполнения Цикл
			Значение = Результат.Значение;
			Представление = Результат.Представление;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Если Значение.Свойство("ОповещениеФорм", ОповещениеФорм) Тогда
					Если ТипЗнч(ОповещениеФорм) = Тип("Структура") Тогда
						Оповестить(ОповещениеФорм.ИмяСобытия, ОповещениеФорм.Параметр, ОповещениеФорм.Источник);
						ЭтаФорма[Представление] = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	Иначе
		
		ОтключитьОбработчикОжидания("ВыполнитьПроверкуЗавершенияФоновогоЗаданияКлиент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуЗавершенияФоновогоЗаданияСервер(СписокАдресов)

	СписокРезультатов = Новый СписокЗначений;
	Для Каждого АдресХранилища Из СписокАдресов Цикл
		СписокРезультатов.Добавить(ПолучитьИзВременногоХранилища(АдресХранилища.Значение), АдресХранилища.Представление);
	КонецЦикла;
	Возврат СписокРезультатов;
	
КонецФункции // ВыполнитьПроверкуЗавершенияФоновогоЗаданияСервер()

&НаСервере
Функция ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды)
    Возврат ДополнительныеОтчетыИОбработки.ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, ЭтаФорма);
КонецФункции

&НаСервере
Процедура ВыполнитьКомандуОбработкиФоновымЗаданием(ИдентификаторКоманды, ПараметрыКоманды, АдресХранилища)
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	
	 Если СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		РезультатВыполнения = ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	Иначе 
		ПараметрыКоманды.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
		ЗаданиеПараметры = Новый Массив;
	    ЗаданиеПараметры.Добавить(ПараметрыКоманды);
	    ЗаданиеПараметры.Добавить(АдресХранилища);
		ФоновыеЗадания.Выполнить("ДополнительныеОтчетыИОбработки.ВыполнитьКоманду", ЗаданиеПараметры, , "Получить данные об использовании номенклатуры аналогов");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область КопированиеСтрок

&НаКлиенте
Функция СкопироватьСтроку(ИмяТаблици)
	
	Буфер = "";
	ТC = Элементы[ИмяТаблици].ТекущаяСтрока;
	КоличествоСтрок = Элементы[ИмяТаблици].ВыделенныеСтроки.Количество();
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(ТC) Тогда  		
		Буфер = КопироватьСтрокуНаСервере(ИмяТаблици); 		
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСтрок);  		
	КонецЕсли;
	Возврат Буфер;
	
КонецФункции
	
&НаСервере
Функция КопироватьСтрокуНаСервере(ИмяТаблици)
	
	МассивСтрок 	= Новый Массив;
	МассивСтруктур  = Новый Массив;
	
	ДанныеКолекции = ЭтаФорма[ИмяТаблици];
	
	Для каждого ИдентификаторСтроки Из Элементы[ИмяТаблици].ВыделенныеСтроки Цикл
		Строка = ДанныеКолекции.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(Строка);
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрок Цикл
		СтруктураСтроки = ПолучитьСтруктуруСтрокиТаблици(ИмяТаблици);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		МассивСтруктур.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(МассивСтруктур);
                	
КонецФункции // КопироватьСтрокуНаСервере()

&НаСервере
Функция ПолучитьСтруктуруСтрокиТаблици(ИмяТаблици)

	СтруктураСтроки = Новый Структура;
	
	мТаблица = РеквизитФормыВЗначение(ИмяТаблици, Тип("ТаблицаЗначений"));
	
	Для каждого КолонкаТЗ Из мТаблица.Колонки Цикл
		Если КолонкаТЗ.Имя = "АналогНоменклатурыНаименование"
			ИЛИ КолонкаТЗ.Имя = "АналогНоменклатуры"
			ИЛИ КолонкаТЗ.Имя = "АналогНоменклатурыНаименование" 
			ИЛИ КолонкаТЗ.Имя = "ПодпихняНаименование"
			ИЛИ КолонкаТЗ.Имя = "Подпихня" 
			ИЛИ КолонкаТЗ.Имя = "ЕстьИсключенияВДругихНастройках"
			ИЛИ КолонкаТЗ.Имя = "ЕстьИсключеннаяНоменклатураВДругихНастройках" Тогда
			Продолжить;;		
		КонецЕсли;
		СтруктураСтроки.Вставить(КолонкаТЗ.Имя);
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(мТаблица, ИмяТаблици); 	
	Возврат СтруктураСтроки;     
КонецФункции // ПолучитьСтруктуруСтрокиДереваНачислений()

&НаСервере
Процедура НайтиИдентификаторСтрокиНастройкиАН()
	Если ТекущийАналоговНоменклатуры <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("АналогНоменклатуры", ТекущийАналоговНоменклатуры);
		РезультатПоиска = НастройкиАналоговНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.НастройкиАналоговНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;    
КонецПроцедуры // НайтиИдентификаторСтрокиДереваНачислений()

&НаСервере
Процедура НайтиИдентификаторСтрокиНастройкиПодпихни()
	
	Если ТекущийАналоговНоменклатуры <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Подпихня", ТекущаяНастройкаПодпихни);
		РезультатПоиска = НастройкиПодпихни.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.НастройкиПодпихни.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НайтиИдентификаторСтрокиДереваНачислений()

#КонецОбласти

#Область ВставитьСтроку

&НаКлиенте
Процедура ВставитьСтроку(ИмяТаблици, БуферОбмена, ВидНоменклатуры = Неопределено)
	
	Если ПустаяСтрока(БуферОбмена) = Истина Тогда 		
		ТекстОшибки =  НСтр("ru='Буфер обмена пустой!.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;	
	КонецЕсли;
	КоличествоВставленных = 0;
	ВставитьСтрокуНаСервере(КоличествоВставленных, БуферОбмена, ИмяТаблици, ВидНоменклатуры);
	
	Если КоличествоВставленных > 0 Тогда
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	КонецЕсли;         
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокуНаСервере(КоличествоВставленных, БуферОбмена, ИмяТаблици, ВидНоменклатуры)

	МассивСтрок = ЗначениеИзСтрокиВнутр(БуферОбмена);     	
	Если ТипЗнч(МассивСтрок) <> Тип("Массив") Тогда Возврат; КонецЕсли;
	
	Индекс = 0;  	
	Для каждого СтрокаТаблицы ИЗ МассивСтрок Цикл
		НоваяСтрока = ЭтаФорма[ИмяТаблици].Добавить();
		Если ВидНоменклатуры = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "ТоварнаяКатегория");
		ИначеЕсли ВидНоменклатуры <> ВидНоменклатурыКопированиеСтрок Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "ТоварнаяКатегория");
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	//Если Индекс <> 0 Тогда  Модифицированность = Истина; КонецЕсли;
	
	КоличествоВставленных = Индекс;
	ПересчитатьНомераСтрокТаблицы(ИмяТаблици);

КонецПроцедуры // ВставитьСтрокуНаСервере()

#КонецОбласти

#КонецОбласти
