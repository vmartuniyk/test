
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	ВидРасшифровки		= Параметры.ВидРасшифровки;
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры);
	ТаблицаРасшифровки.Загрузить(РеквизитФормыВЗначение("Объект").ПолучитьТаблицуРасшифровки(СтруктураПараметров));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсключенийУдалитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсключений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЭлементИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РезультатЗаписи = ЗаписатьРасшифровкиНаСервере();
	
	Если РезультатЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСтруктуруПараметров()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидРасшифровки");
	СтруктураПараметров.Вставить("ВидНоменклатуры");
	СтруктураПараметров.Вставить("Номенклатура");
	СтруктураПараметров.Вставить("АналогНоменклатуры");

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметров()
 
&НаСервере
Функция ЗаписатьРасшифровкиНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ВидИсключения = "ИсключенияПодпихни";
	
	Если ВидРасшифровки = "РасшифровкаНоменклатурыАналога" ИЛИ ВидРасшифровки = "РасшифровкаАналога" Тогда
		ВидИсключения = "ИсключенияАналогов";
	КонецЕсли;
	
	Возврат РеквизитФормыВЗначение("Объект").ЗаписатьТаблицуРасшифровки(ТаблицаРасшифровки.Выгрузить(), ВидРасшифровки);
	
КонецФункции // ЗаписатьРасшифровкиНаСервере()


#КонецОбласти