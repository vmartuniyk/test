
#Область ИнтерфейсАвтоматичекихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("Тест_ПолучениеТранзитногоСклада");
	ВсеТесты.Добавить("Тест_ТекстЗапросаТранзитныйСклад");
	ВсеТесты.Добавить("Тест_ТекстЗапросаПолученияСкладовИзГруппы");
	ВсеТесты.Добавить("Тест_ПолучитьСкладИзГруппы");
	ВсеТесты.Добавить("Тест_ПолучитьСтрокуИдентификатораСсылки");
	ВсеТесты.Добавить("Тест_ЗапросаЗагрузкаДереваНоменклатуры");
	ВсеТесты.Добавить("Тест_СформироватьДеревоНоменклатуры");
	ВсеТесты.Добавить("Тест_УникальныйИдентификаторИзСтроки");
	ВсеТесты.Добавить("Тест_ТаблицаОжидаемыхТоваров");
	ВсеТесты.Добавить("Тест_ТекстЗапросаОстатокПоСкладу");
	ВсеТесты.Добавить("Тест_ПолучитьОстатокПоСкладу");
	ВсеТесты.Добавить("Тест_ТекстЗапросСкладыБезОстатка");
	ВсеТесты.Добавить("Тест_ПолучитьСкладыБезОстатка");

	
	ПараметрыТестов = Новый Структура("ИмяТеста, Транзакция", "Тест_ВыполнитьПеремещение", Истина);
	ВсеТесты.Добавить(ПараметрыТестов);
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура Тест_ПолучениеТранзитногоСклада() Экспорт
	ТранзитныйСклад = ПолучитьТранзитныйСклад();
	ЮнитТест.ПроверитьЗаполненность(ТранзитныйСклад);	
КонецПроцедуры 

Процедура Тест_ТекстЗапросаТранзитныйСклад() Экспорт
	ТекстЗапроса = ТекстЗапросаТранзитныйСклад();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ТекстЗапросаПолученияСкладовИзГруппы() Экспорт
	ТекстЗапроса = ТекстЗапросаПолученияСкладовИзГруппы();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ПолучитьСкладИзГруппы() Экспорт 
	ГруппаРозничныхСкладов 	= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc")); // Группа справочника Склады - Склади Роздріб
	МассивСкладов 			= ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	ЮнитТест.ПроверитьТип(МассивСкладов, Тип("Массив"));
	ЮнитТест.ПроверитьИстину(МассивСкладов.Количество() > 0, НСтр("ru='Внимание! Получен пустой список розничный складов. Работа обработки невозможна.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
КонецПроцедуры

Процедура Тест_ПолучитьСтрокуИдентификатораСсылки() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Склад
	                      |ИЗ
	                      |	Справочник.Склады
	                      |ГДЕ
	                      |	НЕ ПометкаУдаления И НЕ ЭтоГруппа");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Строка ИдентификаторСклада должна быть 36 символов длиной:
	    ИдентификаторСклада = ПолучитьСтрокуИдентификатораСсылки(Выборка.Склад);			
		ЮнитТест.ПроверитьТип(ИдентификаторСклада, Тип("Строка"));
		ЮнитТест.ПроверитьРавенство(СтрДлина(ИдентификаторСклада), 36, );
	КонецЦикла; 

КонецПроцедуры

Процедура Тест_ЗапросаЗагрузкаДереваНоменклатуры() Экспорт
	
	ГруппаРозничныхСкладов = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc"));
	ТранзитныйСклад		   = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")); // Соборна
	МассивСкладов 		   = ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	СписокНоменклатуры     = Новый СписокЗначений;
	
	ТекстЗапроса = ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад, СписокНоменклатуры);
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	
	СписокНоменклатуры.ЗагрузитьЗначения(Тест_ПолучитьТаблицуНоменклатурыИзОстатка(30, ТранзитныйСклад).ВыгрузитьКолонку("Номенклатура"));
	
	ТекстЗапроса = ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад, СписокНоменклатуры);
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	
КонецПроцедуры

Процедура Тест_СформироватьДеревоНоменклатуры() Экспорт

	ФорматМагазина 			= Справочники.ФорматыМагазинов.ПолучитьСсылку(Новый УникальныйИдентификатор("4a369284-a06e-11e3-80c2-001e676b0174")); 	// Базовый формат
	ВидНоменклатуры     	= Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8530-404c-11e0-9f98-001517115d85")); 	// Ноутбуки
	ГруппаРозничныхСкладов  = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc"));
	ТранзитныйСклад		    = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85"));        		// Соборна
	СписокНоменклатуры      = Новый СписокЗначений;
	
	ДеревоНоменклатуры = СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад, СписокНоменклатуры);	
	ЮнитТест.ПроверитьТип(ДеревоНоменклатуры, Тип("ДеревоЗначений"), );
	
	СписокНоменклатуры.ЗагрузитьЗначения(Тест_ПолучитьТаблицуНоменклатурыИзОстатка(30, ТранзитныйСклад).ВыгрузитьКолонку("Номенклатура"));
	
	ДеревоНоменклатуры = СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад, СписокНоменклатуры);	
	ЮнитТест.ПроверитьТип(ДеревоНоменклатуры, Тип("ДеревоЗначений"), );

КонецПроцедуры

Процедура Тест_ПолучитьДеревоКвот() Экспорт

	ФорматМагазина 	= Справочники.ФорматыМагазинов.ПолучитьСсылку(Новый УникальныйИдентификатор("4a369284-a06e-11e3-80c2-001e676b0174")); 	// Базовый формат
	ТаблицаКвот 	= ПолучитьТаблицуКвот(ФорматМагазина);
	
	ЮнитТест.ПроверитьТип(ТаблицаКвот, Тип("ТаблицаЗначений"), );

КонецПроцедуры

Процедура Тест_ВыполнитьПеремещение() Экспорт

	ТранзитныйСклад = ПолучитьТранзитныйСклад();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 20
	                      |	Номенклатура						КАК Номенклатура,
	                      |	Склад								КАК Склад,
	                      |	ВНаличииОстаток - ВРезервеОстаток 	КАК Количество
	                      |ИЗ
	                      |	РегистрНакопления.СвободныеОстатки.Остатки(, Склад <> &ТранзитныйСклад)
	                      |ГДЕ
	                      |	ВНаличииОстаток - ВРезервеОстаток > 0");
						  
	Запрос.УстановитьПараметр("ТранзитныйСклад", ТранзитныйСклад);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();	
	ТаблицаДокументов	= ВыполнитьПеремещение(ТаблицаНоменклатуры, ТранзитныйСклад);
	
	ЮнитТест.ПроверитьТип(ТаблицаДокументов, "ТаблицаЗначений", );
	ЮнитТест.ПроверитьНеРавенство(ТаблицаДокументов.Количество(), 0, );

КонецПроцедуры

Процедура Тест_УникальныйИдентификаторИзСтроки() Экспорт

	Префикс  = "префикс_";
	ИД		 = Новый УникальныйИдентификатор;
	СтрокаИД = Префикс + СтрЗаменить(Строка(ИД), "-", "_");
	
	Идентификатор = УникальныйИдентификаторИзСтроки(Префикс, СтрокаИД);
	ЮнитТест.ПроверитьТип(Идентификатор, Тип("УникальныйИдентификатор"), );

КонецПроцедуры

Процедура Тест_ТаблицаОжидаемыхТоваров() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Склад
	                      |ИЗ
	                      |	Справочник.Склады
	                      |ГДЕ
	                      |	НЕ ЭтоГруппа И НЕ ПометкаУдаления");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|			Номенклатура 						КАК Номенклатура,
			|			Склад								КАК Склад,
			|			КПоступлениюОстаток					КАК Количество
			|		ИЗ
			|			РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)");
			
		Запрос.УстановитьПараметр("Склад", Выборка.Склад);
		
		ВыборкаНоменклатура = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ТаблицаТоваров = ТаблицаОжидаемыхТоваров(ВыборкаНоменклатура.Номенклатура, ВыборкаНоменклатура.Склад);
			ЮнитТест.ПроверитьТип(ТаблицаТоваров, Тип("ТаблицаЗначений"), );
			ЮнитТест.ПроверитьНеРавенство(ТаблицаТоваров.Количество(), 0, );
		КонецЦикла; 
		
	КонецЦикла;

КонецПроцедуры

Процедура Тест_ТекстЗапросаОстатокПоСкладу() Экспорт

	ТекстЗапроса = ТекстЗапросаОстатокПоСкладу();
	
	ЮнитТест.ПроверитьТип(ТекстЗапроса, "Строка", );
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);

КонецПроцедуры

Процедура Тест_ПолучитьОстатокПоСкладу() Экспорт

	ТранзитныйСклад	= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85"));
	
	// Номенклатура не на остатках
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("c3403bdd-62b1-11e1-8707-001e67162d38"));	
	Результат 	 = ПолучитьОстатокПоСкладу(ТранзитныйСклад, Номенклатура);
	
	ЮнитТест.ПроверитьРавенство(Результат, 0, );
	
	// Номенклатура на  остатках
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Номенклатура КАК Номенклатура
	                      |ИЗ
	                      |	РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &Склад)
	                      |ГДЕ
	                      |	(ВНаличииОстаток - ВРезервеОстаток) > 0");
						  
	Запрос.УстановитьПараметр("Склад", ТранзитныйСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = ПолучитьОстатокПоСкладу(ТранзитныйСклад, Выборка.Номенклатура);
	
	ЮнитТест.ПроверитьНеРавенство(Результат, 0, );

КонецПроцедуры
 
Процедура Тест_ТекстЗапросСкладыБезОстатка() Экспорт

	ТекстЗапроса = ТекстЗапросСкладыБезОстатка();
	
	ЮнитТест.ПроверитьТип(ТекстЗапроса, "Строка", );
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);

КонецПроцедуры

Процедура Тест_ПолучитьСкладыБезОстатка() Экспорт

	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("c3403bdd-62b1-11e1-8707-001e67162d38"));
	ГрупаСкладов = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc"));
	
	МассивСкладов = ПолучитьСкладыБезОстатка(Номенклатура, ГрупаСкладов);
	
	ЮнитТест.ПроверитьТип(МассивСкладов, "Массив", );
	ЮнитТест.ПроверитьНеРавенство(МассивСкладов.Количество(), 0, );

КонецПроцедуры
 
 


Функция Тест_ПолучитьТаблицуНоменклатурыИзОстатка(КоличествоПозиций, Склад)

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ %1
                      |	Номенклатура КАК Номенклатура
                      |ИЗ
                      |	РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &Склад)
                      |ГДЕ
                      |	ВНаличииОстаток > ВРезервеОстаток";
					  
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, КоличествоПозиций);
	
	Запрос		 = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // Тест_ПолучитьТаблицуНоменклатуры()
 

#КонецОбласти                                                                      


#Область ПрограммныйИнтерфейс

// Возвращает один из транзитный складов предприятия.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады, Неопределено - ссылка на транзитный склад, неопределено если транзитный складов нету.
//
Функция ПолучитьТранзитныйСклад() Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТранзитныйСклад();						  
	Выборка 		= Запрос.Выполнить().Выбрать();	
	Возврат ?(Выборка.Следующий(), Выборка.Склад, Неопределено);
КонецФункции // ПолучитьТранзитныйСклад()

// Возвращает массив складов, которые входят в группу.
// 
// Параметры:
//  ГруппаСкладов - СправочникСсылка.Склады - группа розничный складов
// 
// Возвращаемое значение:
//  Массив, Неопределено - Неопределено - функия выполнилась с ошибкой, иначе содержит елементы:
//   * СправочникСсылка.Склады - склад из группы складов.
//
Функция ПолучитьСкладыИзГруппы(ГруппаСкладов) Экспорт
	
	Если ТипЗнч(ГруппаСкладов) <> Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить группу розничных складов. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ГруппаСкладов.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Получить список складов возможно из группы складов. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос 		 	 = Новый Запрос;
	Запрос.Текст 	 = ТекстЗапросаПолученияСкладовИзГруппы();
	Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить массив розничных складов из группы складов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт
		
	Описание = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	Если Не Описание.СодержитТип(ТипЗнч(Ссылка)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения ссылки представления справочника. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	
	Возврат СтроковыйИдентификатор;
	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает дерево номенклатуры для подальшого разбора из остатками, кваотами и ожидаемым товаром.
//
// Параметры:
//  ФорматМагазина - СправочникСсылка.ФорматыМагазинов - формат магазина из заданными квотами.
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры для которого нужно вывести квоты.
//  ГруппаРозничныхСкладов - СправочникСсылка.Склады - группа которая содержит элементы из розничными магзинами.
//  ТранзитныйСклад - СправочникСсылка.Склады - склад с которого будет осуществлятся перемещение товаров.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево номенклатуры которую нужно разобрать.
//
Функция СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад, СписокНоменклатуры) Экспорт

	МассивСкладов = ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад, СписокНоменклатуры);			
	Запрос.УстановитьПараметр("ФорматМагазина", 	  ФорматМагазина);			
	Запрос.УстановитьПараметр("ВидНоменклатуры", 	  ВидНоменклатуры);
	Запрос.УстановитьПараметр("СписокНоменклатуры",   СписокНоменклатуры);
	Запрос.УстановитьПараметр("ТранзитныйСклад", 	  ТранзитныйСклад);
	Запрос.УстановитьПараметр("СвойствоДнейНаСкладе", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("f09e10e4-a641-11e1-aa4b-001e67162d38")));
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл ИдентификаторСклада = ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад); Запрос.УстановитьПараметр("склад_"+ИдентификаторСклада, РозничныйСклад); КонецЦикла; 
				
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

КонецФункции

// Получает дерево кот номенклатуры для заполнения деревараспределения.
//
// Параметры:
//  ФорматМагазина - СправочникСсылка.ФорматыМагазинов - формат магазина из заданными квотами.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево квот номенклатуры.
//
Функция ПолучитьТаблицуКвот(ФорматМагазина) Экспорт
	
	ТаблицаКвот = Новый ТаблицаЗначений;
	ТаблицаКвот.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.ТоварныеКатегории, СправочникСсылка.Марки"));
	ТаблицаКвот.Колонки.Добавить("Квота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДеревоКвот();
	                                                                                               
	Запрос.УстановитьПараметр("ФорматМагазина", ФорматМагазина);
	
	ДеревоКвот = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПрочитатьДеревоКвотВТаблицу(ДеревоКвот, ТаблицаКвот); 
	
	Возврат ТаблицаКвот;
	
КонецФункции // ПолучитьДеревоКвот()

// На основании таблицы значений и транзитного склада создает список документов Заказ на перемещение.
//
// Параметры:
//  ТранзитныйСклад - СправочникСсылка.Склады - транзитный склад.
//  ТаблицаНоменклатуры - Таблица значейний из колонками:
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура к перемещению.
//   * Склад - СправочникСсылка.Склады - склад получатель.
//   * Количесто - Число - количество номенклатуры к перемещение.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево квот номенклатуры.
//
Функция ВыполнитьПеремещение(ТаблицаНоменклатуры, ТранзитныйСклад) Экспорт

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПеремещение"));
	ТаблицаДокументов.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДокументов.Колонки.Добавить("СкладОтправитель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДокументов.Колонки.Добавить("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДокументов.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыполнитьПеремещение();
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	ВыборкаСклады = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Пока ВыборкаСклады.Следующий() Цикл
		
		ДокументЗаказНаПеремещение							= Документы.ЗаказНаПеремещение.СоздатьДокумент();
		ДокументЗаказНаПеремещение.Дата 					= ТекущаяДатаСеанса();
		ДокументЗаказНаПеремещение.Комментарий 				= НСтр("ru='Документ сформирован из обработки распределения товаров по складам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ДокументЗаказНаПеремещение.Организация 				= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")); // КТС Поставка
		ДокументЗаказНаПеремещение.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
		ДокументЗаказНаПеремещение.Подразделение 			= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
		ДокументЗаказНаПеремещение.СкладОтправитель			= ТранзитныйСклад;
		ДокументЗаказНаПеремещение.СкладПолучатель 			= ВыборкаСклады.СкладПолучатель;
		ДокументЗаказНаПеремещение.Статус 					= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
		ДокументЗаказНаПеремещение.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		
		Выборка = ВыборкаСклады.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаТовары 							= ДокументЗаказНаПеремещение.Товары.Добавить();
			НоваяСтрокаТовары.Номенклатура 				= Выборка.Номенклатура;
			НоваяСтрокаТовары.КоличествоУпаковок 		= Выборка.Количество;
			НоваяСтрокаТовары.Количество 				= Выборка.Количество;
		КонецЦикла;
		
		ДокументЗаказНаПеремещение.РассчитатьНачалоОтгрузки();
		
		Попытка
			ДокументЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументЗаказНаПеремещение);
		НоваяСтрока.ИндексКартинки = 1;
	
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();

	Возврат ТаблицаДокументов;

КонецФункции // ВыполнитьПеремещение()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

// Получает таблицу ожидаемых товаров из документами по которым ожидаются.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для которой нужно получить ожидаемый остаток.
//  Склад - СправочникСсылка.Склады - склад для которогу нужно получить ожидаемый остаток.
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура с ожидаемым остатком.
//   * Документ - ДокументСсылка - ссылка на документ поступления.
//   * Склад - СправочникСсылка.Склады - склад на котором ожидается товар.
//   * Количество - Число - количество ожидаемого остатка.
//
Функция ТаблицаОжидаемыхТоваров(Номенклатура, Склад) Экспорт

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТаблицаОжидаемыхТоваров();
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ТаблицаОжидаемыхТоваров()

// Выводит набор данных в табличный документ
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - табличный документ в который нужно вывести отчет.
//  НаборДанных - ТаблицаЗначени - содержит колонки:
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура с ожидаемым остатком.
//   * Документ - ДокументСсылка - ссылка на документ поступления.
//   * Склад - СправочникСсылка.Склады - склад на котором ожидается товар.
//   * Количество - Число - количество ожидаемого остатка.
//  ИмяНабораДанных - Строка - имя набора данных.
//  ИмяМакета - Строка - имя макета компоновки данных который нужно загрузить.
//  УникальныйИдентификат-ор - Строка - уникальный идентификатор формы (нужен дл сохранения данных расшифровки во временное хранилище).
//
// Возвращаемое значение:
//	Строка - адрес во временном хранилище из данными расшифровки.
//
Функция ВывестиОтчетВДокумент(ДокументРезультат, НаборДанных, ИмяНабораДанных, ИмяМакета, УникальныйИдентификатор) Экспорт

	СхемаКомпоновкиДанных = ПолучитьМакет(ИмяМакета);
	
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить(ИмяНабораДанных, НаборДанных);

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки);

	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор); 

КонецФункции

// Возвращает свободный отстаток товара в разрезе склада и номенклатуры
//
// Параметры:
//  Склад - СправочникСсылка.Склады - склад в разрезе которого нужно получить свободный остаток.
//  Номенклатура - СправчоникСсылка.Номенклатура - номенклатура в разрезе которой нужно получить свободный остаток.
//
// Возвращаемое значение:
//  Число, Неопределено - свободный остаток товара в разрезе склада и номенклатуры, неопределено в результате ошибки
//
Функция ПолучитьОстатокПоСкладу(Склад, Номенклатура) Экспорт

	Если ТипЗнч(Склад) <> Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Попытка получение остатка без ссылки на склад. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Склад.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Попытка получения остатка из пустой ссылкой на склад. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Попытка получение остатка без ссылки на номенклатуру. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Номенклатура.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Попытка получение остатка с пустой ссылко на номенклатуру. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОстатокПоСкладу();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0);

КонецФункции // ПолучитьОстатокПоСкладу()

// Получает массив складов без остатка
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура в разрезе которой нужно получить склды без остатка.
//  ГруппаСкладов - СправочникСсылка.Склады - группа складов из которых будем выбирать склады.
// 
// Возвращаемое значение:
//  Массив - содержит значения:
//   * СпрвочникСсылка.Склады - склад без остатка.
//
Функция ПолучитьСкладыБезОстатка(Номенклатура, ГруппаСкладов) Экспорт

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросСкладыБезОстатка();
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции // ПолучитьСкладыБезОстатка()
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТранзитныйСклад()

	ТекстЗапроса = "ВЫБРАТЬ
                  |	Склад КАК Склад
                  |ИЗ
                  |	РегистрСведений.Модуль_ДоступныеСклады
                  |ГДЕ
                  |	Основной И Транзитный";
				  
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТранзитныйСклад()

Функция ТекстЗапросаПолученияСкладовИзГруппы()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Склад
	               |ИЗ
	               |	Справочник.Склады
	               |ГДЕ
	               |	НЕ ПометкаУдаления
	               |	И НЕ ЭтоГруппа
	               |	И Ссылка В ИЕРАРХИИ(&ГруппаСкладов)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПолученияСкладовИзГруппы()

Функция ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад, СписокНоменклатуры)

	КоличествоСкладов				= МассивСкладов.Количество() - 1;
	ИдентификаторТранзитногоСклада  = ПолучитьСтрокуИдентификатораСсылки(ТранзитныйСклад);
	
	ТекстЗапроса = "";
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Ссылка КАК Номенклатура
			|ПОМЕСТИТЬ СписокНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура
			|ГДЕ
			|	ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)
			|;
			|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Ссылка КАК Номенклатура
			|ПОМЕСТИТЬ СписокНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура
			|ГДЕ
			|	Ссылка В (&СписокНоменклатуры)
			|;
			|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
			|	ДопСведения.Значение			КАК ДНС
			|ПОМЕСТИТЬ ТаблицаДнейНаСкладе
			|ИЗ
			|	СписокНоменклатуры КАК СписокНоменклатуры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения
			|		ПО СписокНоменклатуры.Номенклатура = ВЫРАЗИТЬ(ДопСведения.Объект КАК Справочник.Номенклатура)
			|			И ДопСведения.Свойство 		   = &СвойствоДнейНаСкладе
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Номенклатура 						КАК Номенклатура,
			|	Номенклатура.ТоварнаяКатегория		КАК ТоварнаяКатегория,
			|	Номенклатура.Марка					КАК Марка,
			|	Склад		 						КАК Склад,
			|	ВНаличииОстаток - ВРезервеОстаток 	КАК Количество
			|ПОМЕСТИТЬ ТаблицаОстаткиПоСкладам
			|ИЗ
			|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СписокНоменклатуры))
			|;
			|
			|ВЫБРАТЬ
			|	ЗаказыНаПеремещениеОстатки.Номенклатура 						КАК Номенклатура,
			|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение.СкладПолучатель	КАК Склад,
			|	СУММА(ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток)				КАК Количество
			|ПОМЕСТИТЬ ТаблицаЗаказовНаПеремещения
			|ИЗ
			|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СписокНоменклатуры)) КАК ЗаказыНаПеремещениеОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
			|		ПО ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение 	= ЗаказНаПеремещениеТовары.Ссылка
			|			И ЗаказыНаПеремещениеОстатки.Номенклатура 		= ЗаказНаПеремещениеТовары.Номенклатура
			|			И ЗаказыНаПеремещениеОстатки.КодСтроки			= ЗаказНаПеремещениеТовары.КодСтроки
			|ГДЕ
			|	ЗаказНаПеремещениеТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыНаПеремещениеОстатки.Номенклатура,
			|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение.СкладПолучатель
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
			|	ВложенныйЗапрос.ТоварнаяКатегория   КАК ТоварнаяКатегория,
			|	ВложенныйЗапрос.Марка   			КАК Марка,
			|	ВложенныйЗапрос.Склад   			КАК Склад,
			|	СУММА(ВложенныйЗапрос.Количество)	КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоварыКПоступлению
			|ИЗ
			|	(
			|		ВЫБРАТЬ
			|			Номенклатура 						КАК Номенклатура,
			|			Номенклатура.ТоварнаяКатегория		КАК ТоварнаяКатегория,
			|			Номенклатура.Марка					КАК Марка,
			|			Склад		 						КАК Склад,
			|			КПоступлениюОстаток					КАК Количество
			|		ИЗ
			|			РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СписокНоменклатуры))
			|
			|		ОБЪЕДИНИТЬ ВСЕ
			|
			|		ВЫБРАТЬ
			|			Номенклатура 						КАК Номенклатура,
			|			Номенклатура.ТоварнаяКатегория		КАК ТоварнаяКатегория,
			|			Номенклатура.Марка					КАК Марка,
			|			Склад								КАК Склад,
			|			Количество							КАК Количество
			|		ИЗ
			|			ТаблицаЗаказовНаПеремещения) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.ТоварнаяКатегория,
			|	ВложенныйЗапрос.Марка,
			|	ВложенныйЗапрос.Склад	
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварнаяКатегория 	КАК ТоварнаяКатегория,
			|	Марка				КАК Марка,
			|	Квота				КАК Квота
			|ПОМЕСТИТЬ ТаблицаКвотАссортимента
			|ИЗ
			|	РегистрСведений.КвотыАссортимента.СрезПоследних(, ОбъектПланирования = &ФорматМагазина)
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Номенклатура 		КАК Номенклатура,
			|	Количество			КАК " + "остат_" + ИдентификаторТранзитногоСклада + ",
			|	0					КАК " + "ожид_" + ИдентификаторТранзитногоСклада + ",";
			
	ТекстОбъединения  							= "";
	ТекстСуммирования 							= "";
	ТекстОбъединенияОжидание					= "";
	ТекстОбъединенияОжиданияЦентральныйСклад    = "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура,
			|	0,
			|	Количество,";
	
	ТекстВсеСкладыСвернутаяТаблица	= "
			|	СвернутаяТаблицаОстатки.остат_" + ИдентификаторТранзитногоСклада + " КАК остат_" + ИдентификаторТранзитногоСклада + ",
			|	СвернутаяТаблицаОстатки.ожид_" + ИдентификаторТранзитногоСклада + " КАК ожид_" + ИдентификаторТранзитногоСклада + ",";
			
	ТекстВсеСкладыОстатки			= "
			|	ТаблицаОстатки.остат_" + ИдентификаторТранзитногоСклада + " КАК остат_" + ИдентификаторТранзитногоСклада + ",
			|	ТаблицаОстатки.ожид_" + ИдентификаторТранзитногоСклада + " КАК ожид_" + ИдентификаторТранзитногоСклада + ",";
			
	ТекстИтоги						= "
			|	СУММА(ТаблицаОстатки.остат_" + ИдентификаторТранзитногоСклада + "),
			|	СУММА(ТаблицаОстатки.ожид_" + ИдентификаторТранзитногоСклада + "),";
			
	Для Каждого РозничныйСклад ИЗ МассивСкладов Цикл
		
		#Область Переменные
		
		ИдентификаторСклада	= ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад);
		ИндексСклада		= МассивСкладов.Найти(РозничныйСклад);
		
		#КонецОбласти 
		
		ТекстЗапроса = ТекстЗапроса + "
			|	0 КАК " + "остат_" + ИдентификаторСклада + ",
			|	0 КАК " + "ожид_" + ИдентификаторСклада + ",";
			
			
		#Область ТекстОбъединения
		
		ТекстОбъединения = ТекстОбъединения + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура,";
			
		Для Индекс = 0 По ИндексСклада Цикл ТекстОбъединения = ТекстОбъединения + Символы.ПС + "	0," + Символы.ПС + "	0,"; КонецЦикла; 
		
		ТекстОбъединения = ТекстОбъединения + "
			|	Количество,
			|	0,";
			
		Для Индекс=ИндексСклада+1 По КоличествоСкладов Цикл ТекстОбъединения = ТекстОбъединения + Символы.ПС + "	0," + Символы.ПС + "	0,"; КонецЦикла; 	
			
		ТекстОбъединения = ТекстОбъединения + "
			|	ТоварнаяКатегория,
			|	Марка
			|ИЗ
			|	ТаблицаОстаткиПоСкладам
			|ГДЕ
			|	Склад = &склад_" + ИдентификаторСклада;
		
		#КонецОбласти 
		
		#Область ТекстОбъединенияОжидание
		
		ТекстОбъединенияОжидание = ТекстОбъединенияОжидание + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура,";
			
		Для Индекс = 0 По ИндексСклада Цикл ТекстОбъединенияОжидание = ТекстОбъединенияОжидание + Символы.ПС + "	0," + Символы.ПС + "	0,"; КонецЦикла;
		
		ТекстОбъединенияОжидание = ТекстОбъединенияОжидание + "
			|	0,
			|	Количество,";
			
		Для Индекс=ИндексСклада+1 По КоличествоСкладов Цикл ТекстОбъединенияОжидание = ТекстОбъединенияОжидание + Символы.ПС + "	0," + Символы.ПС + "	0,"; КонецЦикла;
			
		ТекстОбъединенияОжидание = ТекстОбъединенияОжидание + "
			|	ТоварнаяКатегория,
			|	Марка
			|ИЗ
			|	ТаблицаТоварыКПоступлению
			|ГДЕ
			|	Склад = &склад_" + ИдентификаторСклада;
		
		#КонецОбласти 

		#Область ТекстОбъединенияОжиданияЦентральныйСклад
		
		ТекстОбъединенияОжиданияЦентральныйСклад = ТекстОбъединенияОжиданияЦентральныйСклад + "
			|	0,
			|	0,";
			
		#КонецОбласти 
		
		
		#Область ТекстСуммирования
		
		ТекстСуммирования = ТекстСуммирования + "
			|	СУММА(остат_" + ИдентификаторСклада + ") КАК остат_" + ИдентификаторСклада + ",
			|	СУММА(ожид_" + ИдентификаторСклада + ") КАК ожид_" + ИдентификаторСклада + ",";
			
		#КонецОбласти 
		
		#Область ТекстВсеСкладыСвернутаяТаблица
		
		ТекстВсеСкладыСвернутаяТаблица = ТекстВсеСкладыСвернутаяТаблица + "
			|	СвернутаяТаблицаОстатки.остат_" + ИдентификаторСклада + " КАК остат_" + ИдентификаторСклада + ",
			|	СвернутаяТаблицаОстатки.ожид_" + ИдентификаторСклада + " КАК ожид_" + ИдентификаторСклада + ",";
		
		#КонецОбласти 
		
		#Область ТекстВсеСкладыОстатки
		
		ТекстВсеСкладыОстатки = ТекстВсеСкладыОстатки + "
			|	ТаблицаОстатки.остат_" + ИдентификаторСклада + " КАК остат_" + ИдентификаторСклада + ",
			|	ТаблицаОстатки.ожид_" + ИдентификаторСклада + " КАК ожид_" + ИдентификаторСклада + ",";
		
		#КонецОбласти 
		
		#Область ТекстИтоги
		ТекстИтоги = ТекстИтоги + "
			|	СУММА(ТаблицаОстатки.остат_" + ИдентификаторСклада + "),
			|	СУММА(ТаблицаОстатки.ожид_" + ИдентификаторСклада + ")" + ?(РозничныйСклад=МассивСкладов[МассивСкладов.ВГраница()], "", ",");
		#КонецОбласти
		
	КонецЦикла;		
	
	ТекстОбъединенияОжиданияЦентральныйСклад = ТекстОбъединенияОжиданияЦентральныйСклад + "
			|	ТоварнаяКатегория	КАК ТоварнаяКатегория,
			|	Марка				КАК Марка
			|ИЗ
			|	ТаблицаТоварыКПоступлению
			|ГДЕ
			|	Склад = &ТранзитныйСклад";

	
	ТекстЗапроса = ТекстЗапроса + "
			|	ТоварнаяКатегория	КАК ТоварнаяКатегория,
			|	Марка				КАК Марка
			|ПОМЕСТИТЬ РазвернутаяТаблицаОстатки
			|ИЗ
			|	ТаблицаОстаткиПоСкладам 
			|ГДЕ
			|	Склад = &ТранзитныйСклад";
			
	ТекстЗапроса = ТекстЗапроса + ТекстОбъединения + ТекстОбъединенияОжиданияЦентральныйСклад + ТекстОбъединенияОжидание + "
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	СУММА(остат_" + ИдентификаторТранзитногоСклада + ") КАК остат_" + ИдентификаторТранзитногоСклада + ",
		|	СУММА(ожид_" + ИдентификаторТранзитногоСклада + ") КАК ожид_" + ИдентификаторТранзитногоСклада + ",";
		
	ТекстЗапроса = ТекстЗапроса + ТекстСуммирования + "
		|	ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	Марка				КАК Марка	
		|ПОМЕСТИТЬ СвернутаяТаблицаОстатки
		|ИЗ 
		|	РазвернутаяТаблицаОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	ТоварнаяКатегория,
		|	Марка
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвернутаяТаблицаОстатки.Номенклатура 		КАК Номенклатура,";
		
	ТекстЗапроса = ТекстЗапроса + ТекстВсеСкладыСвернутаяТаблица + "
		|	СвернутаяТаблицаОстатки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	ВЫБОР
		|		КОГДА КвотАссортимент.Марка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)
		|		ИНАЧЕ КвотАссортимент.Марка
		|	КОНЕЦ КАК Марка
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	СвернутаяТаблицаОстатки КАК СвернутаяТаблицаОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКвотАссортимента КАК КвотАссортимент
		|		ПО СвернутаяТаблицаОстатки.ТоварнаяКатегория = КвотАссортимент.ТоварнаяКатегория
		|			И СвернутаяТаблицаОстатки.Марка 		 = КвотАссортимент.Марка
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникКатегории.Владелец 											КАК ВидНоменклатуры,
        |	СправочникКатегории.Ссылка 												КАК ТоварнаяКатегория,
		|	ЕСТЬNULL(ТаблицаКвот.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка))	КАК Марка,
		|	ЕСТЬNULL(ТаблицаКвот.Квота, 0)											КАК Квота
		|ПОМЕСТИТЬ ТаблицаКвотИКатегорий
		|ИЗ
		|	Справочник.ТоварныеКатегории КАК СправочникКатегории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКвотАссортимента КАК ТаблицаКвот
		|		ПО СправочникКатегории.Ссылка = ТаблицаКвот.ТоварнаяКатегория
		|ГДЕ
		|	НЕ СправочникКатегории.ЭтоГруппа И НЕ СправочникКатегории.ПометкаУдаления
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаОстатки.Номенклатура.Код		 КАК Код,
		|	ТаблицаОстатки.Номенклатура.Артикул  КАК Артикул,
		|	ТаблицаОстатки.Номенклатура     	 КАК Номенклатура,";
		
	ТекстЗапроса = ТекстЗапроса + ТекстВсеСкладыОстатки + "
		|	ЕСТЬNULL(КвотыИКатегории.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))		КАК ВидНоменклатуры,
        |	ЕСТЬNULL(КвотыИКатегории.ТоварнаяКатегория, ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка))	КАК ТоварнаяКатегория,
		|	КвотыИКатегории.Марка 				 													КАК Марка,
		|	ЕСТЬNULL(ТаблицаДнейНаСкладе.ДНС, 0) 													КАК ДНС	
		|ИЗ
		|	ТаблицаОстатки КАК ТаблицаОстатки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКвотИКатегорий КАК КвотыИКатегории
		|		ПО КвотыИКатегории.ТоварнаяКатегория = ТаблицаОстатки.ТоварнаяКатегория
		|			И КвотыИКатегории.Марка 		 = ТаблицаОстатки.Марка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДнейНаСкладе КАК ТаблицаДнейНаСкладе
		|		ПО ТаблицаОстатки.Номенклатура = ТаблицаДнейНаСкладе.Номенклатура
		|
		|ИТОГИ
		|";
		
	ТекстЗапроса = ТекстЗапроса + ТекстИтоги + "
		|ПО
		|	ВидНоменклатуры ИЕРАРХИЯ,
		|	ТоварнаяКатегория ИЕРАРХИЯ
		|";			
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗагрузкаДереваНоменклатуры()

Функция ТекстЗапросаДеревоКвот()

	ТекстЗапроса = "
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварнаяКатегория 	КАК ТоварнаяКатегория,
		|	Марка				КАК Марка,
		|	Квота				КАК Квота
		|ПОМЕСТИТЬ ТаблицаКвотАссортимента
		|ИЗ
		|	РегистрСведений.КвотыАссортимента.СрезПоследних(, ОбъектПланирования = &ФорматМагазина)
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникКатегории.Владелец 											КАК ВидНоменклатуры,
        |	СправочникКатегории.Ссылка 												КАК ТоварнаяКатегория,
		|	ЕСТЬNULL(ТаблицаКвот.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка))	КАК Марка,
		|	ЕСТЬNULL(ТаблицаКвот.Квота, 0)											КАК Квота
		|ИЗ
		|	Справочник.ТоварныеКатегории КАК СправочникКатегории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКвотАссортимента КАК ТаблицаКвот
		|		ПО СправочникКатегории.Ссылка = ТаблицаКвот.ТоварнаяКатегория
		|ГДЕ
		|	НЕ СправочникКатегории.ЭтоГруппа И НЕ СправочникКатегории.ПометкаУдаления
		|ИТОГИ
		|	СУММА(Квота)
		|ПО
		|	ВидНоменклатуры ИЕРАРХИЯ,
		|	ТоварнаяКатегория ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДеревоКвот()

Функция ТекстЗапросаВыполнитьПеремещение()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаНоменклатуры.Номенклатура	КАК Номенклатура,
	               |	ТаблицаНоменклатуры.Склад 			КАК СкладПолучатель,
	               |	ТаблицаНоменклатуры.Количество		КАК Количество
	               |ПОМЕСТИТЬ ТабНоменклатура
	               |ИЗ
	               |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабНоменклатура.Номенклатура	КАК Номенклатура,
	               |	ТабНоменклатура.СкладПолучатель КАК СкладПолучатель,
	               |	ТабНоменклатура.Количество		КАК Количество
	               |ИЗ
	               |	ТабНоменклатура КАК ТабНоменклатура
	               |ИТОГИ ПО
	               |	СкладПолучатель";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВыполнитьПеремещение()
 
Функция ТекстЗапросаТаблицаОжидаемыхТоваров()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ЗаказыНаПеремещениеОстатки.Номенклатура 						КАК Номенклатура,
			|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение					КАК Документ,
			|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение.СкладПолучатель	КАК Склад,
			|	СУММА(ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток)				КАК Количество
			|ПОМЕСТИТЬ ТаблицаЗаказовНаПеремещения
			|ИЗ
			|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, Номенклатура = &Номенклатура И ЗаказНаПеремещение.СкладПолучатель = &Склад) КАК ЗаказыНаПеремещениеОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
			|		ПО ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение 	= ЗаказНаПеремещениеТовары.Ссылка
			|			И ЗаказыНаПеремещениеОстатки.Номенклатура 		= ЗаказНаПеремещениеТовары.Номенклатура
			|			И ЗаказыНаПеремещениеОстатки.КодСтроки			= ЗаказНаПеремещениеТовары.КодСтроки
			|ГДЕ
			|	ЗаказНаПеремещениеТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыНаПеремещениеОстатки.Номенклатура,
			|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
			|	ВложенныйЗапрос.Документ   			КАК Документ,
			|	ВложенныйЗапрос.Склад   			КАК Склад,
			|	СУММА(ВложенныйЗапрос.Количество)	КАК Количество
			|ИЗ
			|	(
			|		ВЫБРАТЬ
			|			Номенклатура 						КАК Номенклатура,
			|			ДокументПоступления					КАК Документ,
			|			Склад								КАК Склад,
			|			КПоступлениюОстаток					КАК Количество
			|		ИЗ
			|			РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура = &Номенклатура И Склад = &Склад)
			|
			|		ОБЪЕДИНИТЬ ВСЕ
			|
			|		ВЫБРАТЬ
			|			Номенклатура 						КАК Номенклатура,
			|			Документ							КАК Документ,
			|			Склад								КАК Склад,
			|			Количество							КАК Количество
			|		ИЗ
			|			ТаблицаЗаказовНаПеремещения) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Документ,
			|	ВложенныйЗапрос.Склад";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаОжидаемыхТоваров()

Функция ТекстЗапросаОстатокПоСкладу()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВНаличииОстаток - ВРезервеОстаток КАК Количество
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(
	               |			,
	               |			Номенклатура = &Номенклатура
	               |				И Склад = &Склад)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаОстатокПоСкладу()

Функция ТекстЗапросСкладыБезОстатка()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Склад
	               |ПОМЕСТИТЬ ТаблицаСкладов
	               |ИЗ
	               |	Справочник.Склады
	               |ГДЕ
	               |	НЕ ЭтоГруппа И НЕ ПометкаУдаления И Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Склад КАК Склад
	               |ПОМЕСТИТЬ СкладиСОстатком
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура И Склад В (ВЫБРАТЬ Склад ИЗ ТаблицаСкладов))
	               |ГДЕ
	               |	(ВНаличииОстаток - ВРезервеОстаток) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Склад КАК Склад
	               |ИЗ
	               |	ТаблицаСкладов
	               |ГДЕ
	               |	Склад НЕ В (ВЫБРАТЬ Склад ИЗ СкладиСОстатком)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросСкладыБезОстатка()
 


Процедура ПрочитатьДеревоКвотВТаблицу(ДеревоКвот, ТаблицаКвот)

	Для каждого СтрокаДерева Из ДеревоКвот.Строки Цикл
		
		НоваяСтрока = ТаблицаКвот.Добавить();
		
		Если ТипЗнч(СтрокаДерева.Марка) = Тип("СправочникСсылка.Марки") Тогда
			НоваяСтрока.Номенклатура 	= СтрокаДерева.Марка;
			НоваяСтрока.Квота  			= СтрокаДерева.Квота;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ТоварнаяКатегория) Тогда
			НоваяСтрока.Номенклатура 	= СтрокаДерева.ТоварнаяКатегория;
			НоваяСтрока.Квота  			= СтрокаДерева.Квота;
		Иначе	
			НоваяСтрока.Номенклатура 	= СтрокаДерева.ВидНоменклатуры;
			НоваяСтрока.Квота  			= СтрокаДерева.Квота;
		КонецЕсли;
		
		ПрочитатьДеревоКвотВТаблицу(СтрокаДерева, ТаблицаКвот);
	
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.0.012";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Распределение товаров по магазинам");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Распределение товаров по магазинам [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Распределение товаров по магазинам [" + Версия + "]", "РТПМ", "ВызовКлиентскогоМетода", Истина);
 
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
