
#Область ИнтерфейсАвтоматичекихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("Тест_ПолучениеТранзитногоСклада");
	ВсеТесты.Добавить("Тест_ТекстЗапросаТранзитныйСклад");
	ВсеТесты.Добавить("Тест_ТекстЗапросаПолученияСкладовИзГруппы");
	ВсеТесты.Добавить("Тест_ПолучитьСкладИзГруппы");
	ВсеТесты.Добавить("Тест_ПолучитьСтрокуИдентификатораСсылки");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура Тест_ПолучениеТранзитногоСклада() Экспорт
	ТранзитныйСклад = ПолучитьТранзитныйСклад();
	ЮнитТест.ПроверитьЗаполненность(ТранзитныйСклад);	
КонецПроцедуры 

Процедура Тест_ТекстЗапросаТранзитныйСклад() Экспорт
	ТекстЗапроса = ТекстЗапросаТранзитныйСклад();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ТекстЗапросаПолученияСкладовИзГруппы() Экспорт
	ТекстЗапроса = ТекстЗапросаПолученияСкладовИзГруппы();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ПолучитьСкладИзГруппы() Экспорт 
	ГруппаРозничныхСкладов 	= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc")); // Группа справочника Склады - Склади Роздріб
	МассивСкладов 			= ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	ЮнитТест.ПроверитьТип(МассивСкладов, Тип("Массив"));
	ЮнитТест.ПроверитьИстину(МассивСкладов.Количество() > 0, НСтр("ru='Внимание! Получен пустой список розничный складов. Работа обработки невозможна.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
КонецПроцедуры

Процедура Тест_ПолучитьСтрокуИдентификатораСсылки() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Склад
	                      |ИЗ
	                      |	Справочник.Склады
	                      |ГДЕ
	                      |	НЕ ПометкаУдаления И НЕ ЭтоГруппа");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Строка ИдентификаторСклада должна быть 36 символов длиной:
	    ИдентификаторСклада = ПолучитьСтрокуИдентификатораСсылки(Выборка.Склад);			
		ЮнитТест.ПроверитьТип(ИдентификаторСклада, Тип("Строка"));
		ЮнитТест.ПроверитьРавенство(СтрДлина(ИдентификаторСклада), 36, );
	КонецЦикла; 

КонецПроцедуры
 

#КонецОбласти                                                                      


#Область ПрограммныйИнтерфейс

// Возвращает один из транзитный складов предприятия.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады, Неопределено - ссылка на транзитный склад, неопределено если транзитный складов нету.
//
Функция ПолучитьТранзитныйСклад() Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТранзитныйСклад();						  
	Выборка 		= Запрос.Выполнить().Выбрать();	
	Возврат ?(Выборка.Следующий(), Выборка.Склад, Неопределено);
КонецФункции // ПолучитьТранзитныйСклад()

// Возвращает массив складов, которые входят в группу.
// 
// Параметры:
//  ГруппаСкладов - СправочникСсылка.Склады - группа розничный складов
// 
// Возвращаемое значение:
//  Массив, Неопределено - Неопределено - функия выполнилась с ошибкой, иначе содержит елементы:
//   * СправочникСсылка.Склады - склад из группы складов.
//
Функция ПолучитьСкладыИзГруппы(ГруппаСкладов) Экспорт
	
	Если ТипЗнч(ГруппаСкладов) <> Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить группу розничных складов. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ГруппаСкладов.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Получить список складов возможно из группы складов. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос 		 	 = Новый Запрос;
	Запрос.Текст 	 = ТекстЗапросаПолученияСкладовИзГруппы();
	Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить массив розничных складов из группы складов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт
		
	Описание = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	Если Не Описание.СодержитТип(ТипЗнч(Ссылка)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения ссылки представления справочника. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	
	Возврат СтроковыйИдентификатор;
	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТранзитныйСклад()

	ТекстЗапроса = "ВЫБРАТЬ
                  |	Склад КАК Склад
                  |ИЗ
                  |	РегистрСведений.Модуль_ДоступныеСклады
                  |ГДЕ
                  |	Основной И Транзитный";
				  
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТранзитныйСклад()

Функция ТекстЗапросаПолученияСкладовИзГруппы()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Склад
	               |ИЗ
	               |	Справочник.Склады
	               |ГДЕ
	               |	НЕ ПометкаУдаления
	               |	И НЕ ЭтоГруппа
	               |	И Ссылка В ИЕРАРХИИ(&ГруппаСкладов)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПолученияСкладовИзГруппы()
 
#КонецОбласти