
#Область ИнтерфейсАвтоматичекихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("Тест_ПолучениеТранзитногоСклада");
	ВсеТесты.Добавить("Тест_ТекстЗапросаТранзитныйСклад");
	ВсеТесты.Добавить("Тест_ТекстЗапросаПолученияСкладовИзГруппы");
	ВсеТесты.Добавить("Тест_ПолучитьСкладИзГруппы");
	ВсеТесты.Добавить("Тест_ПолучитьСтрокуИдентификатораСсылки");
	ВсеТесты.Добавить("Тест_ЗапросаЗагрузкаДереваНоменклатуры");
	ВсеТесты.Добавить("Тест_СформироватьДеревоНоменклатуры");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура Тест_ПолучениеТранзитногоСклада() Экспорт
	ТранзитныйСклад = ПолучитьТранзитныйСклад();
	ЮнитТест.ПроверитьЗаполненность(ТранзитныйСклад);	
КонецПроцедуры 

Процедура Тест_ТекстЗапросаТранзитныйСклад() Экспорт
	ТекстЗапроса = ТекстЗапросаТранзитныйСклад();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ТекстЗапросаПолученияСкладовИзГруппы() Экспорт
	ТекстЗапроса = ТекстЗапросаПолученияСкладовИзГруппы();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ПолучитьСкладИзГруппы() Экспорт 
	ГруппаРозничныхСкладов 	= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc")); // Группа справочника Склады - Склади Роздріб
	МассивСкладов 			= ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	ЮнитТест.ПроверитьТип(МассивСкладов, Тип("Массив"));
	ЮнитТест.ПроверитьИстину(МассивСкладов.Количество() > 0, НСтр("ru='Внимание! Получен пустой список розничный складов. Работа обработки невозможна.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
КонецПроцедуры

Процедура Тест_ПолучитьСтрокуИдентификатораСсылки() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Склад
	                      |ИЗ
	                      |	Справочник.Склады
	                      |ГДЕ
	                      |	НЕ ПометкаУдаления И НЕ ЭтоГруппа");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Строка ИдентификаторСклада должна быть 36 символов длиной:
	    ИдентификаторСклада = ПолучитьСтрокуИдентификатораСсылки(Выборка.Склад);			
		ЮнитТест.ПроверитьТип(ИдентификаторСклада, Тип("Строка"));
		ЮнитТест.ПроверитьРавенство(СтрДлина(ИдентификаторСклада), 36, );
	КонецЦикла; 

КонецПроцедуры

Процедура Тест_ЗапросаЗагрузкаДереваНоменклатуры() Экспорт
	ГруппаРозничныхСкладов = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc"));
	ТранзитныйСклад		   = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")); // Соборна
	МассивСкладов 		   = ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	ТекстЗапроса 		   = ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад);
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	//ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса); итоги не кушает СКД
КонецПроцедуры

Процедура Тест_СформироватьДеревоНоменклатуры() Экспорт

	ФорматМагазина 			= Справочники.ФорматыМагазинов.ПолучитьСсылку(Новый УникальныйИдентификатор("4a369284-a06e-11e3-80c2-001e676b0174")); 	// Базовый формат
	ВидНоменклатуры     	= Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8530-404c-11e0-9f98-001517115d85")); 	// Ноутбуки
	ГруппаРозничныхСкладов  = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc"));
	ТранзитныйСклад		    = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85"));        		// Соборна
	
	ДеревоНоменклатуры = СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад);
	
	ЮнитТест.ПроверитьТип(ДеревоНоменклатуры, Тип("ДеревоЗначений"), );

КонецПроцедуры
 
 
 

#КонецОбласти                                                                      


#Область ПрограммныйИнтерфейс

// Возвращает один из транзитный складов предприятия.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады, Неопределено - ссылка на транзитный склад, неопределено если транзитный складов нету.
//
Функция ПолучитьТранзитныйСклад() Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТранзитныйСклад();						  
	Выборка 		= Запрос.Выполнить().Выбрать();	
	Возврат ?(Выборка.Следующий(), Выборка.Склад, Неопределено);
КонецФункции // ПолучитьТранзитныйСклад()

// Возвращает массив складов, которые входят в группу.
// 
// Параметры:
//  ГруппаСкладов - СправочникСсылка.Склады - группа розничный складов
// 
// Возвращаемое значение:
//  Массив, Неопределено - Неопределено - функия выполнилась с ошибкой, иначе содержит елементы:
//   * СправочникСсылка.Склады - склад из группы складов.
//
Функция ПолучитьСкладыИзГруппы(ГруппаСкладов) Экспорт
	
	Если ТипЗнч(ГруппаСкладов) <> Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить группу розничных складов. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ГруппаСкладов.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Получить список складов возможно из группы складов. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос 		 	 = Новый Запрос;
	Запрос.Текст 	 = ТекстЗапросаПолученияСкладовИзГруппы();
	Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить массив розничных складов из группы складов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт
		
	Описание = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	Если Не Описание.СодержитТип(ТипЗнч(Ссылка)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения ссылки представления справочника. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	
	Возврат СтроковыйИдентификатор;
	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает дерево номенклатуры для подальшого разбора из остатками, кваотами и ожидаемым товаром.
//
// Параметры:
//  ФорматМагазина - СправочникСсылка.ФорматыМагазинов - формат магазина из заданными квотами.
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры для которого нужно вывести квоты.
//  ГруппаРозничныхСкладов - СправочникСсылка.Склады - группа которая содержит элементы из розничными магзинами.
//  ТранзитныйСклад - СправочникСсылка.Склады - склад с которого будет осуществлятся перемещение товаров.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево номенклатуры которую нужно разобрать.
//
Функция СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад) Экспорт

	МассивСкладов = ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад);			
	Запрос.УстановитьПараметр("ФорматМагазина", 	ФорматМагазина);			
	Запрос.УстановитьПараметр("ВидНоменклатуры", 	ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТранзитныйСклад", 	ТранзитныйСклад);
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл ИдентификаторСклада = ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад); Запрос.УстановитьПараметр("склад_"+ИдентификаторСклада, РозничныйСклад); КонецЦикла; 
				
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

КонецФункции
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТранзитныйСклад()

	ТекстЗапроса = "ВЫБРАТЬ
                  |	Склад КАК Склад
                  |ИЗ
                  |	РегистрСведений.Модуль_ДоступныеСклады
                  |ГДЕ
                  |	Основной И Транзитный";
				  
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТранзитныйСклад()

Функция ТекстЗапросаПолученияСкладовИзГруппы()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Склад
	               |ИЗ
	               |	Справочник.Склады
	               |ГДЕ
	               |	НЕ ПометкаУдаления
	               |	И НЕ ЭтоГруппа
	               |	И Ссылка В ИЕРАРХИИ(&ГруппаСкладов)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПолученияСкладовИзГруппы()

Функция ТекстЗапросаЗагрузкаДереваНоменклатуры(МассивСкладов, ТранзитныйСклад)

	КоличествоСкладов				= МассивСкладов.Количество() - 1;
	ИдентификаторТранзитногоСклада  = ПолучитьСтрокуИдентификатораСсылки(ТранзитныйСклад);
	
	ТекстЗапроса = "
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Ссылка КАК Номенклатура
			|ПОМЕСТИТЬ СписокНоменклатуры
			|ИЗ
			|	Справочник.Номенклатура
			|ГДЕ
			|	ВидНоменклатуры = &ВидНоменклатуры
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Номенклатура 						КАК Номенклатура,
			|	Номенклатура.ТоварнаяКатегория		КАК ТоварнаяКатегория,
			|	Номенклатура.Марка					КАК Марка,
			|	Склад		 						КАК Склад,
			|	ВНаличииОстаток - ВРезервеОстаток 	КАК Количество
			|ПОМЕСТИТЬ ТаблицаОстаткиПоСкладам
			|ИЗ
			|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СписокНоменклатуры))
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварнаяКатегория 	КАК ТоварнаяКатегория,
			|	Марка				КАК Марка,
			|	Квота				КАК Квота
			|ПОМЕСТИТЬ ТаблицаКвотАссортимента
			|ИЗ
			|	РегистрСведений.КвотыАссортимента.СрезПоследних(, ОбъектПланирования = &ФорматМагазина)
			|;
			|
			|//////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Номенклатура 		КАК Номенклатура,
			|	Количество			КАК " + "остат_" + ИдентификаторТранзитногоСклада + ",";
			
	ТекстОбъединения  				= "";
	ТекстСуммирования 				= "";
	ТекстВсеСкладыСвернутаяТаблица	= Символы.ПС + "СвернутаяТаблицаОстатки.остат_" + ИдентификаторТранзитногоСклада + " КАК остат_" + ИдентификаторТранзитногоСклада + ",";
	ТекстВсеСкладыОстатки			= Символы.ПС + "ТаблицаОстатки.остат_" + ИдентификаторТранзитногоСклада + " КАК остат_" + ИдентификаторТранзитногоСклада + ",";
	ТекстИтоги						= "СУММА(ТаблицаОстатки.остат_" + ИдентификаторТранзитногоСклада + "),";
			
	Для Каждого РозничныйСклад ИЗ МассивСкладов Цикл
		
		#Область Переменные
		
		ИдентификаторСклада	= ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад);
		ИндексСклада		= МассивСкладов.Найти(РозничныйСклад);
		
		#КонецОбласти 
		
		ТекстЗапроса = ТекстЗапроса + "
			|	0 КАК " + "остат_" + ИдентификаторСклада + ",";
			
		#Область ТекстОбъединения
		
		ТекстОбъединения = ТекстОбъединения + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Номенклатура,";
			
		Для Индекс = 0 По ИндексСклада Цикл ТекстОбъединения = ТекстОбъединения + Символы.ПС + "	0,"; КонецЦикла; 
		
		ТекстОбъединения = ТекстОбъединения + "
			|	Количество,";
			
		Для Индекс=ИндексСклада+1 По КоличествоСкладов Цикл ТекстОбъединения = ТекстОбъединения + Символы.ПС + "	0,"; КонецЦикла; 	
			
		ТекстОбъединения = ТекстОбъединения + "
			|	ТоварнаяКатегория,
			|	Марка
			|ИЗ
			|	ТаблицаОстаткиПоСкладам
			|ГДЕ
			|	Склад = &склад_" + ИдентификаторСклада;
		
		#КонецОбласти 
		
		#Область ТекстСуммирования
		
		ТекстСуммирования = ТекстСуммирования + "
			|	СУММА(остат_" + ИдентификаторСклада + ") КАК остат_" + ИдентификаторСклада + ",";
			
		#КонецОбласти 
		
		#Область ТекстВсеСкладыСвернутаяТаблица
		
		ТекстВсеСкладыСвернутаяТаблица = ТекстВсеСкладыСвернутаяТаблица + "
			|	СвернутаяТаблицаОстатки.остат_" + ИдентификаторСклада + " КАК остат_" + ИдентификаторСклада + ",";
		
		#КонецОбласти 
		
		#Область ТекстВсеСкладыОстатки
		
		ТекстВсеСкладыОстатки = ТекстВсеСкладыОстатки + "
			|	ТаблицаОстатки.остат_" + ИдентификаторСклада + " КАК остат_" + ИдентификаторСклада + ",";
		
		#КонецОбласти 
		
		#Область ТекстИтоги
		ТекстИтоги = ТекстИтоги + "
			|	СУММА(ТаблицаОстатки.остат_" + ИдентификаторСклада + ")" + ?(РозничныйСклад=МассивСкладов[МассивСкладов.ВГраница()], "", ",");
		#КонецОбласти
		
	КонецЦикла;		
		
	ТекстЗапроса = ТекстЗапроса + "
			|	ТоварнаяКатегория	КАК ТоварнаяКатегория,
			|	Марка				КАК Марка
			|ПОМЕСТИТЬ РазвернутаяТаблицаОстатки
			|ИЗ
			|	ТаблицаОстаткиПоСкладам
			|ГДЕ
			|	Склад = &ТранзитныйСклад";
			
	ТекстЗапроса = ТекстЗапроса + ТекстОбъединения + "
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	СУММА(остат_" + ИдентификаторТранзитногоСклада + ") КАК остат_" + ИдентификаторТранзитногоСклада + ",";
		
	ТекстЗапроса = ТекстЗапроса + ТекстСуммирования + "
		|	ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	Марка				КАК Марка	
		|ПОМЕСТИТЬ СвернутаяТаблицаОстатки
		|ИЗ 
		|	РазвернутаяТаблицаОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	ТоварнаяКатегория,
		|	Марка
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвернутаяТаблицаОстатки.Номенклатура 		КАК Номенклатура,";
		
	ТекстЗапроса = ТекстЗапроса + ТекстВсеСкладыСвернутаяТаблица + "
		|	СвернутаяТаблицаОстатки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	ВЫБОР
		|		КОГДА КвотАссортимент.Марка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)
		|		ИНАЧЕ КвотАссортимент.Марка
		|	КОНЕЦ КАК Марка
		|ПОМЕСТИТЬ ТаблицаОстатки
		|ИЗ
		|	СвернутаяТаблицаОстатки КАК СвернутаяТаблицаОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКвотАссортимента КАК КвотАссортимент
		|		ПО СвернутаяТаблицаОстатки.ТоварнаяКатегория = КвотАссортимент.ТоварнаяКатегория
		|			И СвернутаяТаблицаОстатки.Марка 		 = КвотАссортимент.Марка
		|;
		|
		|//////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникКатегории.Владелец 											КАК ВидНоменклатуры,
        |	СправочникКатегории.Ссылка 												КАК ТоварнаяКатегория,
		|	ЕСТЬNULL(ТаблицаКвот.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка))	КАК Марка,
		|	ЕСТЬNULL(ТаблицаКвот.Квота, 0)											КАК Квота
		|ПОМЕСТИТЬ ТаблицаКвотИКатегорий
		|ИЗ
		|	Справочник.ТоварныеКатегории КАК СправочникКатегории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКвотАссортимента КАК ТаблицаКвот
		|		ПО СправочникКатегории.Ссылка = ТаблицаКвот.ТоварнаяКатегория
		|ГДЕ
		|	НЕ СправочникКатегории.ЭтоГруппа И НЕ СправочникКатегории.ПометкаУдаления
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаОстатки.Номенклатура     	КАК Номенклатура,";
		
	ТекстЗапроса = ТекстЗапроса + ТекстВсеСкладыОстатки + "
		|	КвотыИКатегории.ВидНоменклатуры		КАК ВидНоменклатуры,
        |	КвотыИКатегории.ТоварнаяКатегория 	КАК ТоварнаяКатегория,
		|	КвотыИКатегории.Марка 				КАК Марка,
		|	КвотыИКатегории.Квота				КАК Квота
		|ИЗ
		|	ТаблицаКвотИКатегорий КАК КвотыИКатегории
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
		|		ПО КвотыИКатегории.ТоварнаяКатегория = ТаблицаОстатки.ТоварнаяКатегория
		|			И КвотыИКатегории.Марка 		 = ТаблицаОстатки.Марка
		|
		|ИТОГИ
		|";
		
	ТекстЗапроса = ТекстЗапроса + ТекстИтоги + "
		|ПО
		|	ВидНоменклатуры ИЕРАРХИЯ,
		|	ТоварнаяКатегория ИЕРАРХИЯ
		|";			
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗагрузкаДереваНоменклатуры()
 
#КонецОбласти