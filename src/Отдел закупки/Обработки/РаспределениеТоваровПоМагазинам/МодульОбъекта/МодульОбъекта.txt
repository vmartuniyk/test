
#Область АвтоТест
Перем ЮнитТест;
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
#КонецОбласти



#Область ПрограммныйИнтерфейс
	
// Инициализация панели навигации с видами номенклатуры (дерево для перемещения)
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой нужно вывести дерево видов номенклатуры.
//
Процедура ИнициализироватьВидыНоменклатуры(Форма) Экспорт
	
	Перем ТекущийУровень;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Навигация_ВидыНоменклатуры 	= Форма.Навигация_ВидыНоменклатуры;
	ДеревоВидыНоменклатуры 		= ДанныеФормыВЗначение(Навигация_ВидыНоменклатуры, Тип("ДеревоЗначений"));
		
	ДеревоВидыНоменклатуры.Строки.Очистить();
	ПараметрОтбора 			= Новый Структура("Ссылка");
	ПараметрОтбораКатегории = Новый Структура("ТоварнаяКатегория");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаИнициализацииВидовНоменклатуры();
	Выборка 		= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрОтбора, Выборка); 
		РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
		Если РезультатПоиска.Количество() = 0 Тогда
			Если Выборка.Родитель.Пустая() Тогда
				СтрокаДереваВид 				= ДеревоВидыНоменклатуры.Строки.Добавить();
				СтрокаДереваВид.Ссылка 			= Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа 		= ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование 	= Выборка.Наименование;
			Иначе
				ПараметрОтбора.Вставить("Ссылка", Выборка.Родитель);
				РезультатПоиска 				= ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
				СтрокаДереваВид 				= РезультатПоиска[0].Строки.Добавить();
				СтрокаДереваВид.Ссылка 			= Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа 		= ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование 	= Выборка.Наименование;		
			КонецЕсли;
		Иначе
			СтрокаДереваВид = РезультатПоиска[0];	
		КонецЕсли;
		
		Если НЕ Выборка.ТоварнаяКатегория.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрОтбораКатегории, Выборка); 
			РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
			Если РезультатПоиска.Количество() = 0 Тогда
				Если Выборка.Родитель_ТоварныеКатегории.Пустая() Тогда
					СтрокаДереваКатегория					= СтрокаДереваВид.Строки.Добавить();
					СтрокаДереваКатегория.Ссылка 			= Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа 		= ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование 		= Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;
				Иначе
					ПараметрОтбораКатегории.Вставить("ТоварнаяКатегория", Выборка.Родитель_ТоварныеКатегории);
					РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
					СтрокаДереваКатегория 					= РезультатПоиска[0].Строки.Добавить();
					СтрокаДереваКатегория.Ссылка 			= Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа 		= ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование 		= Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоВидыНоменклатуры, Навигация_ВидыНоменклатуры);
	
КонецПроцедуры  // ИнициализироватьВидыНоменклатуры()

// Динамическое создание таблицы со складамы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой нужно вывести дерево видов номенклатуры.
//  Отказ - Булево - отмена запуска приложения.
//
Процедура ИнициализироватьТаблицуРаспределения(Форма, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Элементы 				= Форма.Элементы;
	ОсновнаяГруппа  		= Элементы.ОсновнаяГруппа;
	МассивРеквизитов 		= Новый Массив;
	ИдентификаторыСкладов   = Новый Соответствие;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИнициализацииТаблицыРаспределения();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить логистический центр, обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо основные склады, обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВыборкаЛогистическиеЦентры = РезультатЗапроса[0].Выбрать();
	ВыборкаОсновныеСклады	   = РезультатЗапроса[1].Выбрать();
	
	СформироватьРеквизитыФормы(МассивРеквизитов, ВыборкаЛогистическиеЦентры, ВыборкаОсновныеСклады);
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	СформироватьЭлементыФормы(Элементы, ОсновнаяГруппа, ВыборкаЛогистическиеЦентры, ВыборкаОсновныеСклады); 

КонецПроцедуры

// Формируем условное оформление формы для работы с таблицей распределения
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой нужно вывести дерево видов номенклатуры.
//  Отказ - Булево - отмена запуска приложения.
//
Процедура ИнициализироватьУсловноеОформление(Форма, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТранзитныйСклад		 			= ПолучитьТранзитныйСклад();
	УсловноеОформление 	 			= Форма.УсловноеОформление;
	ТаблицаРаспределения 			= Форма.ТаблицаРаспределения;
	
	Если ТранзитныйСклад = Неопределено Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить транзитный склад, обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ИдентификаторТранзитногоСклада = ИдентификаторыСкладов.Получить(ТранзитныйСклад);
	Если ИдентификаторТранзитногоСклада = Неопределено Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить идентификатор транзитного склада, обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	

	
	// Если мы ввели количество которое нужно переместить на склад - разрешаем редактировать.
	// Так же нельзя редактировать те где ввели больше остатка.
	// Так же включаем подсветку для выбранных позиций.
	ЭлУсловногоОформленияВыбранный 				 = УсловноеОформление.Элементы.Добавить();
	ЭлУсловногоОформленияВыбранный.Использование = Истина;
				
	ОформляемоеПоле 				= ЭлУсловногоОформленияВыбранный.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТаблицаРаспределения.");
	ОформляемоеПоле.Использование 	= Истина;
	
	ГруппаЭлементовОтбораВыб 		   = ЭлУсловногоОформленияВыбранный.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораВыб.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	НовыйЭлементОформления 				 = ЭлУсловногоОформленияВыбранный.Оформление.Элементы.Найти("Шрифт");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = Новый Шрифт(,, Истина); // Жирный шрифт
	
	Для каждого ИдентификаторСклада Из ИдентификаторыСкладов Цикл
		
		Если ИдентификаторСклада.Ключ = ТранзитныйСклад Тогда Продолжить; КонецЕсли;
		
		ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;
		
		ИмяКолонкиКоличество 			= СтрЗаменить(ИдентификаторСклада.Значение, "склад_", "количество_");			
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
    	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиКоличество);
    	ОформляемоеПоле.Использование 	= Истина;
		
		ГруппаЭлементовОтбора 			= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		
		НовыйЭлементОтбора 				  = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    	НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения." + ИмяКолонкиКоличество);
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		НовыйЭлементОтбора.ПравоеЗначение = 0;
		
		НовыйЭлементОтбора 				  = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    	НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения." + ИдентификаторТранзитногоСклада);
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		НовыйЭлементОтбора.ПравоеЗначение = 0;
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = Ложь;
		

		// Отмечаем выбранные элементы
		НовыйЭлементОтбора 				  = ГруппаЭлементовОтбораВыб.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    	НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения." + ИмяКолонкиКоличество);
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		НовыйЭлементОтбора.ПравоеЗначение = 0;
			
	КонецЦикла;
	
	
	
	
	
	// Если на транзитном складе нету товаров - делаем ячейку серой.
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
			
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИдентификаторТранзитногоСклада);
	ОформляемоеПоле.Использование 	= Истина;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения." + ИдентификаторТранзитногоСклада);
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	НовыйЭлементОтбора.ПравоеЗначение = 0;
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = Новый Цвет(192, 192, 192);
	
	
	
	
	
	// Выделяем те позиции где количество на транзитном складе меньше 0.
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
			
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТаблицаРаспределения");
	ОформляемоеПоле.Использование 	= Истина;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаРаспределения." + ИдентификаторТранзитногоСклада);
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	НовыйЭлементОтбора.ПравоеЗначение = 0;
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = Новый Цвет(255, 0, 0);
	
КонецПроцедуры
 

// Загружает список номенклатуры в соответствии с отбором
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой нужно вывести дерево видов номенклатуры.
//  ЭтоГруппа - Число - идентификатор выбранного элемента, 0 - группа вида номенклатуры, 3 - вид номенклатуры, 5 - товарная категория.
//  ВидНоменклатуры - СправочникСсылка.ВидНоменклатуры, Неопределено - вид номенклатуры выбранный пользователем.
//  ТоварнаяКатегория - СправочникСсылка.ТоварныеКатегории, Неопределено - товарная категория выбранная пользователем.
//  Номенклатура - СправочникСсылка.Номенклатура, Неопределено - номенклатура на которой был фокус у пользователя, иначе - Неопределено.
//
Процедура ЗагрузитьСписокНоменклатуры(Форма, ЭтоГруппа, ВидНоменклатуры=Неопределено, ТоварнаяКатегория=Неопределено, Номенклатура=Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРаспределения 			= Форма.ТаблицаРаспределения;
	ЭлементТаблицаРаспределения     = Форма.Элементы.ТаблицаРаспределения;
	
	Если ЭтоГруппа = 0 Тогда
		ТаблицаРаспределения.Очистить();
		Возврат;
	КонецЕсли;
	
	ИспользоватьТоварныеКатегории = ?(ТоварнаяКатегория.Пустая(), Ложь, Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗагрузкаСпискаНоменклатуры(ИспользоватьТоварныеКатегории);
	
	Для каждого ИдентификаторСклада Из ИдентификаторыСкладов Цикл
		Запрос.УстановитьПараметр(ИдентификаторСклада.Значение, ИдентификаторСклада.Ключ);	
	КонецЦикла;
	
	Если ИспользоватьТоварныеКатегории Тогда
		Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварнаяКатегория);
	Иначе
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	КонецЕсли;
	
	ТаблицаРаспределения.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Номенклатура <> Неопределено Тогда
		СтруктураПоиска  = Новый Структура("Номенклатура", Номенклатура);
		РезультатыПоиска = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
		Если РезультатыПоиска.Количество() > 0 Тогда
			ЭлементТаблицаРаспределения.ТекущаяСтрока = РезультатыПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Расчет остатка номенклатуры на транзитном складе при изменением количества пользователем.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой нужно вывести дерево видов номенклатуры.
//  ИдентификаторСтроки - Число - идентификатор строки измененной пользователем.
//
Процедура ВыполнитьРасчетОстатка(Форма, ИдентификаторСтроки) Экспорт

	Перем Номенклатура;
	
	УстановитьПривилегированныйРежим(Истина);

	ТаблицаРаспределения = Форма.ТаблицаРаспределения;
	СтрокаДляИзменения   = ТаблицаРаспределения.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДляИзменения = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если Не СтрокаДляИзменения.Свойство("Номенклатура", Номенклатура) Тогда 
		Возврат; 
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасчетОстатка();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка 		   = РезультатЗапроса.Выбрать();
	КоличествоНаСкладе = ?(Выборка.Следующий(), Выборка.Количество, 0);
		
	ИдентификаторТранзитногоСклада = ИдентификаторыСкладов.Получить(Выборка.Склад);
	Если ИдентификаторТранзитногоСклада = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыражениеДляВыполнения = "СтрокаДляИзменения." + ИдентификаторТранзитногоСклада + " = КоличествоНаСкладе ";
	
	Для каждого ИдентификаторСклада Из ИдентификаторыСкладов Цикл
		НаименованиеКолонкиСклада = СтрЗаменить(ИдентификаторСклада.Значение, "склад_", "количество_");
		Если СтрокаДляИзменения.Свойство(НаименованиеКолонкиСклада) Тогда
			ВыражениеДляВыполнения = ВыражениеДляВыполнения + " - СтрокаДляИзменения." + НаименованиеКолонкиСклада;
		КонецЕсли;
	КонецЦикла; 
	
	ВыражениеДляВыполнения = ВыражениеДляВыполнения + ";";
	
	Выполнить(ВыражениеДляВыполнения);
	
КонецПроцедуры


// Выполняет создание перемещения на основании данных введеных полльзователем.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой нужно вывести дерево видов номенклатуры.
//
Процедура ВыполнитьПеремещение(Форма, ЭтоГруппа, ВидНоменклатуры=Неопределено, ТоварнаяКатегория=Неопределено, Номенклатура=Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРаспределения = Форма.ТаблицаРаспределения;
	СписокДокументов     = Форма.СписокДокументов;
	ТранзитныйСклад		 = ПолучитьТранзитныйСклад();
	ДопСвойство			 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("e5cc8d7b-ca55-11e3-96d1-0007e90c5769"));
	
	Если ТранзитныйСклад = Неопределено ИЛИ ТранзитныйСклад.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не установлен транзитный склад, обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
		
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыполнениеПеремещения(ТранзитныйСклад);
	
	Запрос.УстановитьПараметр("ТаблицаРаспределения", ТаблицаРаспределения.Выгрузить());
	Для каждого ИдентификаторСклад Из ИдентификаторыСкладов Цикл
	    Запрос.УстановитьПараметр(ИдентификаторСклад.Значение, ИдентификаторСклад.Ключ);			
	КонецЦикла;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[3].Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перемещение превышает свободный остаток на транзитном складе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
		ВыборкаОшибки = РезультатыЗапроса[3].Выбрать();
		
		Пока ВыборкаОшибки.Следующий() Цикл
			СтруктураПоиска  = Новый Структура("Номенклатура", ВыборкаОшибки.Номенклатура);
			РезультатыПоиска = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
			Если РезультатыПоиска.Количество() > 0 Тогда
				ИндексСтроки = ТаблицаРаспределения.Индекс(РезультатыПоиска[0]);
				ТекстОшибки  = НСтр("ru='%1 превышает количество на %2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВыборкаОшибки.Номенклатура, ВыборкаОшибки.Количество * (-1));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ТаблицаРаспределения["+ИндексСтроки+"].Номенклатура");
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Для Индекс = 4 По РезультатыЗапроса.Количество()-1 Цикл
		
		ВыборкаСкладПолучатель = РезультатыЗапроса[Индекс].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСкладПолучатель.Следующий() Цикл
			
			ДокументПеремещение 						= Документы.ЗаказНаПеремещение.СоздатьДокумент();
			ДокументПеремещение.Дата 					= ТекущаяДатаСеанса();
			ДокументПеремещение.Комментарий 			= НСтр("ru='Документ сформирован из обработки распределения товаров по складам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ДокументПеремещение.Организация 			= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")); // КТС Поставка
			ДокументПеремещение.Ответственный 			= ПараметрыСеанса.ТекущийПользователь;
			ДокументПеремещение.Подразделение 			= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
			ДокументПеремещение.СкладОтправитель		= ТранзитныйСклад;
			ДокументПеремещение.СкладПолучатель 		= ВыборкаСкладПолучатель.СкладПолучатель;
			ДокументПеремещение.Статус 					= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
			ДокументПеремещение.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
			
			Выборка = ВыборкаСкладПолучатель.Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				НоваяСтрокаТовары 							= ДокументПеремещение.Товары.Добавить();
				НоваяСтрокаТовары.Номенклатура 				= Выборка.Номенклатура;
				НоваяСтрокаТовары.КоличествоУпаковок 		= Выборка.Количество;
				НоваяСтрокаТовары.Количество 				= Выборка.Количество;
			
			КонецЦикла; 
			
			ДокументПеремещение.РассчитатьНачалоОтгрузки();
			
			Попытка
				ДокументПеремещение.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
					
			НоваяСтрока = СписокДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументПеремещение);
			НоваяСтрока.ИндексКартинки = 1;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСписокНоменклатуры(Форма, ЭтоГруппа, ВидНоменклатуры, ТоварнаяКатегория, Номенклатура);
	
КонецПроцедуры


// Получаем склад по идентификатору
//
// Параметры:
//  ИдентификаторСклада - Строка - строковий идентификатор склада.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады, Неопределено - ссылка на склад, неопределено если совпадений не нашлось.
//
Функция ПолучитьСкладПоИдентиификатору(ИдентификаторСклада) Экспорт

	Для каждого ИдентификаторСклад Из ИдентификаторыСкладов Цикл
		Если ИдентификаторСклад.Значение = ИдентификаторСклада Тогда
			Возврат ИдентификаторСклад.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПолучитьСкладПоИдентиификатору()
 
 
#КонецОбласти




#Область СлужебныеПроцедурыИФункции


#Область ТекстыЗапросов

Функция ТекстЗапросаИнициализацииВидовНоменклатуры()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка			КАК Ссылка,
		|	ВидыНоменклатуры.ЭтоГруппа		КАК ЭтоГруппа,
		|	ВидыНоменклатуры.Наименование	КАК Наименование,
		|	ВидыНоменклатуры.Родитель		КАК Родитель,
		|	IsNull(ТоварныеКатегории.Ссылка, ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)) КАК ТоварнаяКатегория,
		|	ТоварныеКатегории.ЭтоГруппа		КАК ЭтоГруппа_ТоварныеКатегории,
		|	ТоварныеКатегории.Наименование 	КАК Наименование_ТоварныеКатегории,
		|	ТоварныеКатегории.Родитель	 	КАК Родитель_ТоварныеКатегории
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории 
		|ПО ТоварныеКатегории.Владелец = ВидыНоменклатуры.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыНоменклатуры.ЭтоГруппа ИЕРАРХИЯ,
		|	ВидыНоменклатуры.Наименование Возр,
		|	ТоварныеКатегории.ЭтоГруппа ИЕРАРХИЯ,
		|	ТоварныеКатегории.Наименование Возр	
		|";
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()

Функция ТекстЗапросаИнициализацииТаблицыРаспределения()

	ТекстЗапроса = "
			// 0. Получаем логистические центры.
			|ВЫБРАТЬ
			|	Склад 				КАК Склад,
			|	Склад.Наименование  КАК Наименование
			|ИЗ
			|	РегистрСведений.Модуль_ДоступныеСклады
			|ГДЕ
			|	Основной И Транзитный
			|;
			|
			// 1. Получаем основные склады.
			|ВЫБРАТЬ
			|	Склад 				КАК Склад,
			|	Склад.Наименование  КАК Наименование
			|ИЗ
			|	РегистрСведений.Модуль_ДоступныеСклады
			|ГДЕ
			|	Основной И НЕ Транзитный";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаИнициализацииТаблицыРаспределения()


Функция ТекстЗапросаЗагрузкаСпискаНоменклатуры(ИспользоватьТоварныеКатегории)

	ТекстЗапроса = ТекстЗапросаСписокНоменклатуры(ИспользоватьТоварныеКатегории); // СписокНоменклатуры
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТаблицаСклады(); // ТабСклады
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСвернутаяТаблицаСкладов(); // Свернули ТабСклады по остаткам на складах
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗагрузкаспискаНоменклатуры()

Функция ТекстЗапросаСписокНоменклатуры(ИспользоватьТоварныеКатегории)

	Если ИспользоватьТоварныеКатегории Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Ссылка КАК Номенклатура
		               |ПОМЕСТИТЬ ТаблицаНоменклатура
		               |ИЗ
		               |	Справочник.Номенклатура
		               |ГДЕ
		               |	НЕ ПометкаУдаления И ТоварнаяКатегория = &ТоварнаяКатегория
					   |;";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Ссылка КАК Номенклатура
					   |ПОМЕСТИТЬ ТаблицаНоменклатура
		               |ИЗ
		               |	Справочник.Номенклатура
		               |ГДЕ
		               |	НЕ ПометкаУдаления И ВидНоменклатуры = &ВидНоменклатуры
					   |;";			   
	КонецЕсли;
				   
	ТекстЗапроса = ТекстЗапроса + "
					|ВЫБРАТЬ
	                |	Номенклатура						КАК Номенклатура,
	                |	Склад								КАК Склад,
	                |	ВНаличииОстаток - ВРезервеОстаток 	КАК Количество
	                |ПОМЕСТИТЬ СписокНоменклатуры
	                |ИЗ
	                |	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатура))
					|;
					|
					|ВЫБРАТЬ
					|	Номенклатура			КАК Номенклатура,
	                |	Склад					КАК Склад,
	                |	КПоступлениюОстаток 	КАК Количество
	                |ПОМЕСТИТЬ ОжидаемыеТовары
					|ИЗ
					|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатура))
					|;
					|
					|ВЫБРАТЬ
					|	РегистрЗаказы.Номенклатура 							КАК Номенклатура,
					|	РегистрЗаказы.ЗаказНаПеремещение.СкладПолучатель    КАК Склад,
					|	СУММА(ЗаказыТовары.Количество)						КАК Количество
					|ПОМЕСТИТЬ РегистрЗаказыНаПеремещение
					|ИЗ
					|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатура)) КАК РегистрЗаказы
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказыТовары
					|		ПО РегистрЗаказы.ЗаказНаПеремещение = ЗаказыТовары.Ссылка
					|			И РегистрЗаказы.Номенклатура 	= ЗаказыТовары.Номенклатура
					|			И РегистрЗаказы.Характеристика	= ЗаказыТовары.Характеристика
					|			И РегистрЗаказы.КодСтроки 		= ЗаказыТовары.КодСтроки
					|ГДЕ
					|	ЗаказыТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)
					|СГРУППИРОВАТЬ ПО
					|	РегистрЗаказы.Номенклатура,
					|	РегистрЗаказы.ЗаказНаПеремещение.СкладПолучатель
					|;";			   
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСписокНоменклатуры()

Функция ТекстЗапросаТаблицаСклады()

	ТекстЗапроса  		= "";
	ИндексСклада  		= 0;
	КоличествоСкладов   = ИдентификаторыСкладов.Количество()-1;
	
	Для каждого ИдентификаторСклада ИЗ ИдентификаторыСкладов Цикл
		
		ШаблонЗапроса = "";
		
		Если ИндексСклада<>0 Тогда 
			ШаблонЗапроса = ШаблонЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ШаблонЗапроса = ШаблонЗапроса + "
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,";
		
		Для Индекс = 1 По ИндексСклада Цикл
			ШаблонЗапроса = ШаблонЗапроса + "
			|0,";
		КонецЦикла;
		
		ШаблонЗапроса = ШаблонЗапроса + "
		|	Количество КАК " + ИдентификаторСклада.Значение + ?(ИндексСклада = КоличествоСкладов, "", ",");
		
		Если ИндексСклада = 0 Тогда
			ВнИндекс = 0;
			Для каждого ВнИдентификатор Из ИдентификаторыСкладов Цикл
				Если ВнИндекс = 0 Тогда ВнИндекс = ВнИндекс + 1; Продолжить; КонецЕсли;
				ШаблонЗапроса = ШаблонЗапроса + "
				|0 КАК " + ВнИдентификатор.Значение + ?(ВнИндекс = ИдентификаторыСкладов.Количество()-1, "", ",");
				ВнИндекс = ВнИндекс + 1;
			КонецЦикла; 
		Иначе
			КоличествоИтераций = КоличествоСкладов - ИндексСклада;
			Для Индекс = 1 По КоличествоИтераций Цикл
				ШаблонЗапроса = ШаблонЗапроса + "
				|0" + ?(Индекс = КоличествоИтераций, "", ",");
			КонецЦикла; 
		КонецЕсли;
				
		ШаблонЗапроса = ШаблонЗапроса + "
			|%1
			|ИЗ
			|	%2	
			|
			|ГДЕ
			|	Склад = &" + ИдентификаторСклада.Значение;
			
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, ?(ИндексСклада=0, "ПОМЕСТИТЬ ТабСклады", ""), "СписокНоменклатуры");
		
		ТекстЗапроса = ТекстЗапроса + ?(ИндексСклада=0, "
		|ОБЪЕДИНИТЬ ВСЕ
		|", "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "", "ОжидаемыеТовары");
		
		ТекстЗапроса = ТекстЗапроса + ?(ИндексСклада=0, "
		|ОБЪЕДИНИТЬ ВСЕ
		|", "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "", "РегистрЗаказыНаПеремещение");
		
		ИндексСклада = ИндексСклада + 1;
				
	КонецЦикла;
			
	ТекстЗапроса = ТекстЗапроса + "
	|;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаТаблицаСклады()

Функция ТекстЗапросаСвернутаяТаблицаСкладов()

	ТранзитныйСклад 		= ПолучитьТранзитныйСклад();
	ИдентификаторТрСклада 	= ИдентификаторыСкладов.Получить(ТранзитныйСклад);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,";
				
	Для каждого ИдентификаторСклада Из ИдентификаторыСкладов Цикл
	    ТекстЗапроса = ТекстЗапроса + "
		|СУММА(" + ИдентификаторСклада.Значение + ") КАК " + ИдентификаторСклада.Значение + ",";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		| 	0 КАК ИндексКартинки
		|ИЗ
		|	ТабСклады 
		|СГРУППИРОВАТЬ ПО 
		|	Номенклатура
		|
		|ИМЕЮЩИЕ СУММА(" + ИдентификаторТрСклада + ") > 0";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСвернутаяТаблицаСкладов()


Функция ТекстЗапросаРасчетОстатка()

	ТекстЗапроса = "ВЫБРАТЬ
		            |	Склад КАК Склад
		            |ПОМЕСТИТЬ ТанзитныйСклад
		            |ИЗ
		            |	РегистрСведений.Модуль_ДоступныеСклады
		            |ГДЕ
		            |	Основной И Транзитный
		            |;
		            |
		            |////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
				   	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
					|	ВложенныйЗапрос.Склад				КАК Склад,
					|	СУММА(ВложенныйЗапрос.Количество)   КАК Количество
					//|ПОМЕСТИТЬ ОстаткиТранзитногоСклада
					|ИЗ
					|	(
					|		ВЫБРАТЬ
					|			Номенклатура КАК Номенклатура,
					|			Склад КАК Склад,
					|			ВНаличииОстаток - ВРезервеОстаток КАК Количество
					|		ИЗ
					|			РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура И Склад В (ВЫБРАТЬ Склад ИЗ ТанзитныйСклад))
					|
					|	    ОБЪЕДИНИТЬ ВСЕ
					|
					|		ВЫБРАТЬ
					|			Номенклатура			КАК Номенклатура,
					|			Склад,
				    |			КПоступлениюОстаток 	КАК Количество
					|		ИЗ
					|			РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура = &Номенклатура И Склад В (ВЫБРАТЬ Склад ИЗ ТанзитныйСклад))
					|
					|	    ОБЪЕДИНИТЬ ВСЕ
					|
					|		ВЫБРАТЬ
					|			РегистрЗаказы.Номенклатура 							КАК Номенклатура,
					|			РегистрЗаказы.ЗаказНаПеремещение.СкладПолучатель,
					|			ЗаказыТовары.Количество								КАК Количество
					|		ИЗ
					|			РегистрНакопления.ЗаказыНаПеремещение.Остатки(,Номенклатура = &Номенклатура И ЗаказНаПеремещение.СкладПолучатель В (ВЫБРАТЬ Склад ИЗ ТанзитныйСклад)) КАК РегистрЗаказы
					|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказыТовары
					|				ПО РегистрЗаказы.ЗаказНаПеремещение = ЗаказыТовары.Ссылка
					|					И РегистрЗаказы.Номенклатура 	= ЗаказыТовары.Номенклатура
					|					И РегистрЗаказы.Характеристика	= ЗаказыТовары.Характеристика
					|					И РегистрЗаказы.КодСтроки 		= ЗаказыТовары.КодСтроки) КАК ВложенныйЗапрос
					|
					|СГРУППИРОВАТЬ ПО
					|	ВложенныйЗапрос.Номенклатура,
					|	ВложенныйЗапрос.Склад";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРасчетОстатка()


Функция ТекстЗапросаВыполнениеПеремещения(ТранзитныйСклад)

	ИдентификаторТранзитногоСклада 	= ИдентификаторыСкладов.Получить(ТранзитныйСклад);
	ТекстЗапросаРезультат 			= "";
	ТекстРасчетРазницы				= "";
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРаспределения.Номенклатура КАК Номенклатура,";
		
	Для каждого ИдентификаторСклада Из ИдентификаторыСкладов Цикл
			
		Если ИдентификаторСклада.Ключ = ТранзитныйСклад Тогда 
			Продолжить; 
		КонецЕсли;
		
		ИмяКолонкиСклада = СтрЗаменить(ИдентификаторСклада.Значение, "склад_", "количество_");
		ТекстЗапроса 	 = ТекстЗапроса + "
		|	ТаблицаРаспределения." + ИмяКолонкиСклада + ",";
		
		ТекстЗапросаРезультат = ТекстЗапросаРезультат + "
			|ВЫБРАТЬ
			|	Номенклатура КАК Номенклатура,
			|	" + ИмяКолонкиСклада + " КАК Количество,
			|	&" + ИдентификаторСклада.Значение + " КАК СкладПолучатель,
			|	&" + ИдентификаторТранзитногоСклада + " КАК СкладОтправитель
			|ИЗ
			|	ТаблицаНоменклатуры
			|ГДЕ
			|	" + ИмяКолонкиСклада + " > 0
			|ИТОГИ ПО
			|	СкладПолучатель 
			|;";  
			
		ТекстРасчетРазницы = ТекстРасчетРазницы + " - ТаблицаНоменклатуры." + ИмяКолонкиСклада;
		
	КонецЦикла; 
	
	ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаРаспределения." + ИдентификаторТранзитногоСклада + "
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаРаспределения КАК ТаблицаРаспределения
		|;";
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура 									КАК Номенклатура,
		|	СУММА(ВложенныйЗапрос.Количество)    КАК Количество
		|ПОМЕСТИТЬ ОстаткиТранзитногоСкладаПредварительные
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			ВНаличииОстаток - ВРезервеОстаток  КАК Количество
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатуры) И Склад =&"+ИдентификаторТранзитногоСклада+")
		|
		|	    ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ
		|			Номенклатура			КАК Номенклатура,
	    |			КПоступлениюОстаток 	КАК Количество
		|		ИЗ
		|			РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатуры) И Склад =&"+ИдентификаторТранзитногоСклада+")
		|
		|	    ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ
		|			РегистрЗаказы.Номенклатура 							КАК Номенклатура,
		|			ЗаказыТовары.Количество								КАК Количество
		|		ИЗ
		|			РегистрНакопления.ЗаказыНаПеремещение.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ТаблицаНоменклатуры) И ЗаказНаПеремещение.СкладПолучатель =&"+ИдентификаторТранзитногоСклада+") КАК РегистрЗаказы
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказыТовары
		|				ПО РегистрЗаказы.ЗаказНаПеремещение = ЗаказыТовары.Ссылка
		|					И РегистрЗаказы.Номенклатура 	= ЗаказыТовары.Номенклатура
		|					И РегистрЗаказы.Характеристика	= ЗаказыТовары.Характеристика
		|					И РегистрЗаказы.КодСтроки 		= ЗаказыТовары.КодСтроки) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	Остатки.Номенклатура КАК Номенклатура,
		|	Остатки.Количество " + ТекстРасчетРазницы + "	 КАК Количество
		|ПОМЕСТИТЬ ОстаткиТранзитногоСклада
		|ИЗ
		|	ОстаткиТранзитногоСкладаПредварительные КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО Остатки.Номенклатура = ТаблицаНоменклатуры.Номенклатура
		|;		
		|
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	Количество   КАК Количество
		|ИЗ
		|	ОстаткиТранзитногоСклада
		|ГДЕ
		|	Количество < 0
		|;";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРезультат;
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВыполнениеПеремещения()
 

#КонецОбласти 


// Получаем уникальный идентификатор, приводим к строке для создания уникального реквизита на форме.
//
// Возвращаемое значение:
//  Строка - строковий идентификатора склада
//
Функция УникальныйИдентификаторСклада()
	Возврат "склад_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
КонецФункции // СгенерироватьУникальныйИдентификаторСклада() 

// Формирует сокращенный заголовок колонки для уменьшения ширины
// 
// Параметры:
//  ИсходныйЗаголовок - Строка - заговок колонки, который нужно сократить.
//
// Возвращаемое значение:
//  Строка - сокращенный заговловок колонки.
//
Функция СформироватьЗаголовокКолонки(знач ИсходныйЗаголовок)

	Результат 		 	= "";
	ИсходныйЗаголовок	= СтрЗаменить(ИсходныйЗаголовок, ")", "");
	ИсходныйЗаголовок	= СтрЗаменить(ИсходныйЗаголовок, "(", "");
	МассивСтрокПробел 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходныйЗаголовок, " ");
	
	Для каждого СтрокаИзМассива Из МассивСтрокПробел Цикл
	    МассивСтрокТочки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИзМассива, ".");			
		Для каждого АтомарнаяСтрока Из МассивСтрокТочки Цикл
			Результат = Результат + Лев(АтомарнаяСтрока, 3) + ".";    					
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Лев(Результат, 8);

КонецФункции // СформироватьЗаголовокКолонки()
 


// Формирует все дополнительные реквизиты формы.
//
// Параметры:
//  МассивРеквизитов - Массив - массив реквизитов формы, которые необходимо создать.
//  ВыборкаЛогистическиеЦентры - ВыборкаИзРезультатаЗапроса - выборка из логистическими центрами.
//  ВыборкаОсновныеСклады - ВыборкаИзРезультатаЗапроса - выборка из основными складами.
//
Процедура СформироватьРеквизитыФормы(МассивРеквизитов, ВыборкаЛогистическиеЦентры, ВыборкаОсновныеСклады)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(15, 3);
	ТипЧисло		  = Новый ОписаниеТипов("Число",,, КвалификаторЧисла);

	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаРаспределения", Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "ТаблицаРаспределения", "Номенклатура"));
	
	Пока ВыборкаЛогистическиеЦентры.Следующий() Цикл
		ИдентификаторСклада = УникальныйИдентификаторСклада();
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИдентификаторСклада, ТипЧисло, "ТаблицаРаспределения", ВыборкаЛогистическиеЦентры.Наименование));
		ИдентификаторыСкладов.Вставить(ВыборкаЛогистическиеЦентры.Склад, ИдентификаторСклада);
	КонецЦикла;
	
	Пока ВыборкаОсновныеСклады.Следующий() Цикл
		ИдентификаторСклада 	= УникальныйИдентификаторСклада(); 
		ИдентификаторРеквизита  = СтрЗаменить(ИдентификаторСклада, "склад_", "количество_");
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИдентификаторСклада, ТипЧисло, "ТаблицаРаспределения", ВыборкаОсновныеСклады.Наименование));
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИдентификаторРеквизита, ТипЧисло, "ТаблицаРаспределения"));
		ИдентификаторыСкладов.Вставить(ВыборкаОсновныеСклады.Склад, ИдентификаторСклада);
	КонецЦикла;

	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0)), "ТаблицаРаспределения", "Индекс картинки"));
	
КонецПроцедуры

// Формирует все дополнительные элементы формы.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - элементы формы обработки на которой нужно разместить таблицу.
//  ОсновнаяГруппа - ГруппаФормы - группа формы на которой размещается таблица.
//  ВыборкаЛогистическиеЦентры - ВыборкаИзРезультатаЗапроса - выборка из логистическими центрами.
//  ВыборкаОсновныеСклады - ВыборкаИзРезультатаЗапроса - выборка из основными складами.
//
Процедура СформироватьЭлементыФормы(Элементы, ОсновнаяГруппа, ВыборкаЛогистическиеЦентры, ВыборкаОсновныеСклады)
	
	ВыборкаЛогистическиеЦентры.Сбросить();
	ВыборкаОсновныеСклады.Сбросить();

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "ТаблицаРаспределения");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ТаблицаРаспределения");
	ПараметрыЭлемента.Вставить("ПоложениеКоманднойПанели", ПоложениеКоманднойПанелиЭлементаФормы.Нет);
	ПараметрыЭлемента.Вставить("Подвал", Ложь);
	ПараметрыЭлемента.Вставить("Шапка", Истина);
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 255, 255));
	ПараметрыЭлемента.Вставить("ЦветТекста", Новый Цвет(0, 0, 0));
	ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(0, 0, 0));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ТаблицаФормы"));
	ПараметрыЭлемента.Вставить("АвтоКонтекстноеМеню", Тип("ТаблицаФормы"));
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВПодвале", ГоризонтальноеПоложениеЭлемента.Лево);
	ПараметрыЭлемента.Вставить("КартинкаСтрок", БиблиотекаКартинок.ЭлементПапка);
	ПараметрыЭлемента.Вставить("ПутьКДаннымКартинкиСтроки", "ТаблицаРаспределения.ИндексКартинки");
	ТаблицаРаспределения = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ОсновнаяГруппа);
	ТаблицаРаспределения.КонтекстноеМеню.Доступность = Ложь;
	ТаблицаРаспределения.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаРаспределенияПриИзменении");
	ТаблицаРаспределения.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ТаблицаРаспределенияПередНачаломДобавления");
	ТаблицаРаспределения.УстановитьДействие("ПередУдалением", "Подключаемый_ТаблицаРаспределенияПередУдалением");
	ТаблицаРаспределения.УстановитьДействие("Выбор", "Подключаемый_ТаблицаРаспределенияВыбор");
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "Номенклатура");
	ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ТаблицаРаспределения.Номенклатура");
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(220, 255, 255));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("Заголовок", "Номенклатура");
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", Истина);
	ПараметрыЭлемента.Вставить("Ширина", 60);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ТаблицаРаспределения);
	
	Пока ВыборкаЛогистическиеЦентры.Следующий() Цикл
		ИдентификаторСклада = ИдентификаторыСкладов.Получить(ВыборкаЛогистическиеЦентры.Склад);
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", ИдентификаторСклада);
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", "ТаблицаРаспределения." + ИдентификаторСклада);
		ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(240, 218, 255));
		ПараметрыЭлемента.Вставить("Ширина", 5);
		ПараметрыЭлемента.Вставить("ТолькоПросмотр", Истина);
		ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
		ПараметрыЭлемента.Вставить("Заголовок", СформироватьЗаголовокКолонки(ВыборкаЛогистическиеЦентры.Наименование));
		ПараметрыЭлемента.Вставить("Подсказка", ВыборкаЛогистическиеЦентры.Наименование);
		ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ТаблицаРаспределения);
	КонецЦикла;
	
	Пока ВыборкаОсновныеСклады.Следующий() Цикл
		
		ИдентификаторСклада = ИдентификаторыСкладов.Получить(ВыборкаОсновныеСклады.Склад);
		ИмяДопРеквизита     = СтрЗаменить(ИдентификаторСклада, "склад_", "количество_");
		ИмяГруппы           = СтрЗаменить(ИдентификаторСклада, "склад_", "группа_");
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", ИмяГруппы);
		ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
		ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
		ПараметрыЭлемента.Вставить("Ширина", 6);
		ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
		ПараметрыЭлемента.Вставить("Заголовок", СформироватьЗаголовокКолонки(ВыборкаОсновныеСклады.Наименование));
		ПараметрыЭлемента.Вставить("Подсказка", ВыборкаОсновныеСклады.Наименование);
		ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
		ГруппаКолонок = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ТаблицаРаспределения);
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", ИмяДопРеквизита);                                        	
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", "ТаблицаРаспределения." + ИмяДопРеквизита);
		ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(204, 255, 204));
		ПараметрыЭлемента.Вставить("ОтображатьВШапке", Ложь);
		ПараметрыЭлемента.Вставить("Ширина", 3);
		ПараметрыЭлемента.Вставить("ТолькоПросмотр", Истина);
		ПараметрыЭлемента.Вставить("КнопкаВыбора", Ложь);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", ИдентификаторСклада);                                        	
		ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", "ТаблицаРаспределения." + ИдентификаторСклада);
		ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
		ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 250, 205));
		ПараметрыЭлемента.Вставить("ОтображатьВШапке", Ложь);
		ПараметрыЭлемента.Вставить("Ширина", 3);
		ПараметрыЭлемента.Вставить("ТолькоПросмотр", Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
	КонецЦикла;

КонецПроцедуры

// Получает ссылку на транзитный склад
// 
// Возвращаемое значение:
//  СправочникСсылка.Склады, Неопределено - ссылка на транзитный склад, неопределено в случае если транзитного складу нету
//
Функция ПолучитьТранзитныйСклад()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Склад КАК Склад
	                      |ИЗ
	                      |	РегистрСведений.Модуль_ДоступныеСклады
	                      |ГДЕ
	                      |	Основной И Транзитный");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Склад, Неопределено);

КонецФункции // ПолучитьТранзитныйСклад()

// Получает ссылку на вид входной цены (нужно для автоматического создания документов перемещения).
//
// Возвращаемое значение:
//  СправочникСсылка.Склады, Неопределено - ссылка на вид входной цены, неопределено в случае если входная цена не задана.
//
Функция ПолучитьВидВходнойЦены()

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ВидЦены КАК ВидЦены
	                      |ИЗ
	                      |	РегистрСведений.ALPS_ВидыЦен 
	                      |ГДЕ
	                      |	Входная");
						  
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ВидЦены, Неопределено);

КонецФункции // ВидВходнойЦены()
 

#КонецОбласти



#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.0.001";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Распределение товаров по магазинам");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Распределение товаров по магазинам [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Распределение товаров по магазинам [" + Версия + "]", "РТПМ", "ОткрытиеФормы", Ложь, "РТПМ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
