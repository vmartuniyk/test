
#Область ИнтерфейсАвтоматическихТестов
	
&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("Тест_ПроверитьЗаполнение");
	СписокТестов.Добавить("Тест_ДополнительныеРеквизитыФормы");
	СписокТестов.Добавить("Тест_СформироватьДеревоНоменклатуры");
	СписокТестов.Добавить("Тест_ПровестиРасчетПоДереву");
	
	Возврат СписокТестов;
	
КонецФункции
 
&НаКлиенте
Процедура Тест_ПроверитьЗаполнение() Экспорт
	ЮнитТест.ПроверитьЗаполненность(ТранзитныйСклад);
	ЮнитТест.ПроверитьЗаполненность(ФорматМагазина);
	ЮнитТест.ПроверитьЗаполненность(ГруппаРозничныхСкладов);
КонецПроцедуры


&НаКлиенте
Процедура Тест_ДополнительныеРеквизитыФормы() Экспорт
	
	ИдентификаторТранзитногоСклада = Тест_ПолучитьИдентификаторСклада(ТранзитныйСклад);
	МассивСкладов				   = Тест_ПолучитьМассивРозничныхСкладов();
	
	ЮнитТест.ПроверитьТип(ЭтаФорма["ДеревоРаспределения"], Тип("ДанныеФормыДерево"), );
	
	Элемент = Элементы.Найти("группа_"+ИдентификаторТранзитногоСклада);
	ЮнитТест.ПроверитьТип(Элемент, Тип("ГруппаФормы"), );
	
	Элемент = Элементы.Найти("ожид_"+ИдентификаторТранзитногоСклада);
	ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
	
	Элемент = Элементы.Найти("остат_"+ИдентификаторТранзитногоСклада);
	ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл
		
		ИдентификаторСклада = Тест_ПолучитьИдентификаторСклада(РозничныйСклад);
		
		Элемент = Элементы.Найти("группа_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ГруппаФормы"), );
		
		Элемент = Элементы.Найти("квота_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
		
		Элемент = Элементы.Найти("ожид_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
		
		Элемент = Элементы.Найти("остат_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
	
	КонецЦикла; 
	
КонецПроцедуры // Тест_ДополнительныеРеквизитыИЭлементыФормы()

&НаСервере
Функция Тест_ПолучитьИдентификаторСклада(Склад)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСтрокуИдентификатораСсылки(Склад);
КонецФункции // Тест_ПолучитьИдентификаторТранзитногоСклада()

&НаСервере
Функция Тест_ПолучитьМассивРозничныхСкладов()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
КонецФункции // Тест_ПолучитьМассивРозничныхСкладов()
 

&НаКлиенте
Процедура Тест_СформироватьДеревоНоменклатуры() Экспорт 
	СформироватьДеревоНоменклатуры();
КонецПроцедуры // Тест_ЗагрузитьСписокНоменклатуры()


&НаКлиенте
Процедура Тест_ПровестиРасчетПоДереву() Экспорт

	ИдентификаторСтроки = Тест_ПолучитьИдентификаторСтрокиДереваРаспределения();
	ЮнитТест.ПроверитьНеРавенство(ИдентификаторСтроки, Неопределено, );
	ЮнитТест.ПроверитьТип(ИдентификаторСтроки, "Число", );
	
	МассивСкладов	= Тест_ПолучитьМассивРозничныхСкладов();	
	ГСЧ 			= Новый ГенераторСлучайныхЧисел(255);
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		
		ИдентификаторСклада = Тест_ПолучитьИдентификаторСклада(СкладИзМассива);
		СтрокаДерева 		= ЭтаФорма["ДеревоРаспределения"].НайтиПоИдентификатору(ИдентификаторСтроки);
		ИдентификаторКолонки = "кол_" + Тест_ПолучитьИдентификаторСклада(СкладИзМассива);
		
		СтрокаДерева[ИдентификаторКолонки] = ГСЧ.СлучайноеЧисло(0, 100);
		
		ПровестиРасчетПоДереву(ИдентификаторСтроки, ИдентификаторКолонки);
		
	КонецЦикла; 
		 
КонецПроцедуры // Тест_ПровестиРасчетПоДереву()
	 
&НаСервере
Функция Тест_ПолучитьИдентификаторСтрокиДереваРаспределения(СтрокаДерева=Неопределено)
	
	Если СтрокаДерева=Неопределено Тогда
		ИнициализироватьДанныеФормы();
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8530-404c-11e0-9f98-001517115d85"));
		СформироватьДеревоНоменклатуры();
		СтрокаДерева = ЭтаФорма["ДеревоРаспределения"];
	КонецЕсли;
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ТипЗнч(ЭлементДерева.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		КонецЕсли;
		Возврат Тест_ПолучитьИдентификаторСтрокиДереваРаспределения(ЭлементДерева);
	КонецЦикла; 	
	
	Возврат Неопределено;

КонецФункции // ПолучитьИдентификаторСтрокиДереваРаспределения()

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	СформироватьДеревоНоменклатуры();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоРаспределения

&НаКлиенте
Процедура Подключаемый_ДеревоРаспределенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоРаспределенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементКоличествоПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
	НаименованиеСтроки  = Элемент.ТекущийЭлемент.Имя;
	ПровестиРасчетПоДереву(ИдентификаторСтроки, НаименованиеСтроки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ИнициализироватьДанныеФормы();
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	МассивСкладов    			   = ОбъектОбработки.ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	ИдентификаторТранзитногоСклада = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(ТранзитныйСклад);
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	СоздатьДополнительныеРеквизитыФормы(МассивСкладов, ИдентификаторТранзитногоСклада);
	СоздатьДополнительныеЭлементыФормы(МассивСкладов, ИдентификаторТранзитногоСклада);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Инициализация_формы

// Выполняет начальное заполнение реквизитов формы.
//
&НаСервере
Процедура ИнициализироватьДанныеФормы()
	ТранзитныйСклад 	   		= РеквизитФормыВЗначение("Объект").ПолучитьТранзитныйСклад();
	ФорматМагазина  	  		= Справочники.ФорматыМагазинов.ПолучитьСсылку(Новый УникальныйИдентификатор("4a369284-a06e-11e3-80c2-001e676b0174")); // Базовый формат магазина
	ГруппаРозничныхСкладов 		= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc")); // Группа справочника Склады - Склади Роздріб
КонецПроцедуры // ИнициализироватьДанныеФормы()

// Процедура создает дополнительные реквизиты формы для дерева распределения.
//
// Параметры:
//  МассивСкладов - Массив - cодержит структуры со свойствами:
//   * Склад - СправочникСсылка.Склады - ссылка на розничный склад.
//  ИдентификаторТранзитногоСклада - Строка - строковой идентиифкатор склада, используется как имя реквизита дерева распределения.
//
&НаСервере
Процедура СоздатьДополнительныеРеквизитыФормы(МассивСкладов, ИдентификаторТранзитногоСклада)

	ОбъектОбработки  			   = РеквизитФормыВЗначение("Объект");
	МассивРеквизитов 			   = Новый Массив;
	МассивТипов					   = Новый Массив;
	
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыНоменклатуры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ТоварныеКатегории"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Марки"));
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДеревоРаспределения", Новый ОписаниеТипов("ДеревоЗначений")));	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Номенклатура", Новый ОписаниеТипов(МассивТипов), "ДеревоРаспределения", "Номенклатура"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1,0)), "ДеревоРаспределения"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("РедактироватьКоличество", Новый ОписаниеТипов("Булево"), "ДеревоРаспределения"));
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ожид_"+ИдентификаторТранзитногоСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ож."));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("остат_"+ИдентификаторТранзитногоСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ост."));
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл
		ИдентификаторСклада = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("кол_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Кол."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("колдоп_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "КолДоп."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("квота_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Квота"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ожид_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ож."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("остат_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ост."));
	КонецЦикла; 
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
КонецПроцедуры // СоздатьДополнительныеРеквизитыИЭлементыФормы()

// Процедура создает дополнительные элементы формы для дерева распределения.
//
// Параметры:
//  МассивСкладов - Массив - cодержит структуры со свойствами:
//   * Склад - СправочникСсылка.Склады - ссылка на розничный склад.
//  ИдентификаторТранзитногоСклада - Строка - строковой идентиифкатор склада, используется как имя реквизита дерева распределения.
//
&НаСервере
Процедура СоздатьДополнительныеЭлементыФормы(МассивСкладов, ИдентификаторТранзитногоСклада)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "ДеревоРаспределения");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения");
	ПараметрыЭлемента.Вставить("ПоложениеКоманднойПанели", ПоложениеКоманднойПанелиЭлементаФормы.Нет);
	ПараметрыЭлемента.Вставить("Подвал", Ложь);
	ПараметрыЭлемента.Вставить("Шапка", Истина);
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 255, 255));
	ПараметрыЭлемента.Вставить("ЦветТекста", Новый Цвет(0, 0, 0));
	ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(0, 0, 0));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ТаблицаФормы"));
	ПараметрыЭлемента.Вставить("АвтоКонтекстноеМеню", Ложь);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВПодвале", ГоризонтальноеПоложениеЭлемента.Лево);
	ПараметрыЭлемента.Вставить("ПутьКДаннымКартинкиСтроки", "ДеревоРаспределения.ИндексКартинки");
	ПараметрыЭлемента.Вставить("КартинкаСтрок", БиблиотекаКартинок.КоллекцияВидыКатегорииМарки);
	ЭлементДеревоРаспределения = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента);
	ЭлементДеревоРаспределения.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ДеревоРаспределенияПередНачаломДобавления");
	ЭлементДеревоРаспределения.УстановитьДействие("ПередУдалением", "Подключаемый_ДеревоРаспределенияПередУдалением");
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "Номенклатура");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения.Номенклатура");
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 250, 205));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("Заголовок", "Номенклатура");
	ПараметрыЭлемента.Вставить("Ширина", 60);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
	
	
	// Транзитный склад
	
	ПараметрыЭлемента = СтруктураПараметровГруппыКолонок("группа_"+ИдентификаторТранзитногоСклада, ТранзитныйСклад.Наименование, ФиксацияВТаблице.Лево);
	ГруппаКолонок = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("ожид_"+ИдентификаторТранзитногоСклада, Новый Цвет(255, 228, 225), Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("остат_"+ИдентификаторТранзитногоСклада, Новый Цвет(204, 255, 204), Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект"); 
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл
		
		ИдентификаторСклада = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад);
		
		ПараметрыЭлемента = СтруктураПараметровГруппыКолонок("группа_"+ИдентификаторСклада, РозничныйСклад, ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("кол_"+ИдентификаторСклада, Новый Цвет(255, 235, 205), Ложь);
		ЭлементКоличество = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементДеревоРаспределения.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементКоличествоПриИзменении");
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("квота_"+ИдентификаторСклада, Новый Цвет(255, 240, 245), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		                                                                                                      
		ПараметрыЭлемента = СтруктураПараметровКолонки("ожид_"+ИдентификаторСклада, Новый Цвет(255, 228, 225), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("остат_"+ИдентификаторСклада, Новый Цвет(204, 255, 204), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
КонецПроцедуры // СоздатьДополнительныеЭлементыФормы()

// Возвращает заполненную структуру для создания группы колонок дерева распределения.
// 
// Параметры:
//  ИмяЭлемента - Строка - наименование элемента формы.
//  ЗаголовокЭлемента - Строка - заголовок элемента формы.
//  ФиксацияВТаблице - ФиксацияВТаблице - фиксация элемента в таблице.
//
// Возвращаемое значение:
//  Структура - структура параметров нового элемента формы.
//
&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

// Возвращает заполненную структуру для создания колоноки дерева распределения.
//
// Параметры:
//  ИмяЭлемента - Строка - наименование элемента формы.
//  ЦветЭлемента - Цвет - цвет фона элемента.
//
// Возвращаемое значение:
//   Структура - структура параметров нового элемента формы.
//
&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);                                        	
	ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 6);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", Ложь);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	
	Возврат ПараметрыЭлемента;

КонецФункции // СтруктураПараметровКолонки()
 
// Загружает список номенклатуры в ДеревоРаспределения
//
&НаСервере
Процедура СформироватьДеревоНоменклатуры()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоПриемник = РеквизитФормыВЗначение("ДеревоРаспределения", Тип("ДеревоЗначений"));
	
	Если ВидНоменклатуры.Пустая() Тогда
		ДеревоПриемник.Строки.Очистить();
		ЗначениеВРеквизитФормы(ДеревоПриемник, "ДеревоРаспределения");
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ДеревоНоменклатуры 	= РеквизитФормыВЗначение("Объект").СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад);
	ТаблицаКвот			= РеквизитФормыВЗначение("Объект").ПолучитьТаблицуКвот(ФорматМагазина);
	МассивСкладов		= РеквизитФормыВЗначение("Объект").ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		МассивИдентификаторов.Добавить(РеквизитФормыВЗначение("Объект").ПолучитьСтрокуИдентификатораСсылки(СкладИзМассива));
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ДеревоПриемник.Строки.Очистить();
	РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ДеревоПриемник, ТаблицаКвот, МассивИдентификаторов);
	
	ЗначениеВРеквизитФормы(ДеревоПриемник, "ДеревоРаспределения");	
	
КонецПроцедуры // ЗагрузитьСписокНоменклатуры()

&НаСервере
Процедура РазобратьДеревоНоменклатуры(ДеревоИсточник, ДеревоПриемник, ТаблицаКвот, МассивИдентификаторов)
		
	Для каждого СтрокаДерева Из ДеревоИсточник.Строки Цикл
		
	    НоваяСтрока = ДеревоПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.Номенклатура;
			НоваяСтрока.ИндексКартинки  		= 1;
			НоваяСтрока.РедактироватьКоличество = Истина;
			
		ИначеЕсли ТипЗнч(СтрокаДерева.Марка) = Тип("СправочникСсылка.Марки") Тогда
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.Марка;
			НоваяСтрока.ИндексКартинки  		= 1;
			НоваяСтрока.РедактироватьКоличество = Ложь;
			
			Квота = ПолучитьЗначениеКвоты(СтрокаДерева.Марка, ТаблицаКвот);
			
			Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
				НоваяСтрока["квота_"+ИдентификаторСклада] = Квота;    							
			КонецЦикла; 
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ТоварнаяКатегория) Тогда
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.ТоварнаяКатегория;
			НоваяСтрока.ИндексКартинки  		= 1;
			НоваяСтрока.РедактироватьКоличество = Ложь;
			
			Квота = ПолучитьЗначениеКвоты(СтрокаДерева.ТоварнаяКатегория, ТаблицаКвот);
			
			Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
				НоваяСтрока["квота_"+ИдентификаторСклада] = Квота;    							
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.ВидНоменклатуры;
			НоваяСтрока.ИндексКартинки  		= 0;
			НоваяСтрока.РедактироватьКоличество = Ложь;
			
			Квота = ПолучитьЗначениеКвоты(СтрокаДерева.ВидНоменклатуры, ТаблицаКвот);
			
			Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
				НоваяСтрока["квота_"+ИдентификаторСклада] = Квота;    							
			КонецЦикла;
			
		КонецЕсли;
		
		РазобратьДеревоНоменклатуры(СтрокаДерева, НоваяСтрока, ТаблицаКвот, МассивИдентификаторов);
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеКвоты(ЗначениеДляПоиска, ТаблицаКвот)

	СтруктураПоиска  = Новый Структура("Номенклатура", ЗначениеДляПоиска);
	РезультатыПоиска = ТаблицаКвот.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатыПоиска.Количество() > 0 Тогда
		Возврат РезультатыПоиска[0].Квота;
	КонецЕсли;
	
	Возврат 0;

КонецФункции // ПолучитьЗначениеКвоты()


// Проводит расчет по дереву разпределения вверх по иерархии.
//
// Параметры:
//  ИдентификаторСтроки  - Число - идентификатор строки дерева распределения.
//  ИмяКолонки - Строка - имя колонки в которой провели изменения.
//
&НаСервере
Процедура ПровестиРасчетПоДереву(ИдентификаторСтроки, ИмяКолонки)

	СтрокаДерева = ЭтаФорма["ДеревоРаспределения"].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	                                                                     
	ИмяДополнительнойКолонки = СтрЗаменить(ИмяКолонки, "кол_", "колдоп_");
	
	ДельтаИзменения = СтрокаДерева[ИмяКолонки] - СтрокаДерева[ИмяДополнительнойКолонки];
	
	Если ДельтаИзменения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева[ИмяДополнительнойКолонки] = СтрокаДерева[ИмяКолонки];
	
	ПровестиРасчетПоДеревуРекурсивно(СтрокаДерева, ДельтаИзменения, ИмяКолонки);

КонецПроцедуры // ПровестиРасчетПоДереву()

// Рекурсивно добавляет значение количества установленого пользователем по всем родителям.
//
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева для которой нужно установить изменение.
//  ДельтаИзменения - Число - число на которое устанавливаем изменения.
//  ИмяКолонки - Строка - имя колонки ля которой установили изменения.
//
&НаСервере
Процедура ПровестиРасчетПоДеревуРекурсивно(СтрокаДерева, ДельтаИзменения, ИмяКолонки)

	Родитель = СтрокаДерева.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Родитель[ИмяКолонки] = Родитель[ИмяКолонки] + ДельтаИзменения;
	
	ПровестиРасчетПоДеревуРекурсивно(Родитель, ДельтаИзменения, ИмяКолонки)
	
КонецПроцедуры // ПровестиРасчетПоДеревуРекурсивно()
 


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МассивИдентификаторов = Новый Массив;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МассивСкладов   = ОбработкаОбъект.ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		МассивИдентификаторов.Добавить(ОбработкаОбъект.ПолучитьСтрокуИдентификатораСсылки(СкладИзМассива));	
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

	
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
			
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Номенклатура");
	ОформляемоеПоле.Использование 	= Истина;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.Номенклатура");
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = "Прочие марки";	
	
	
	
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("кол_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;
	КонецЦикла;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.РедактироватьКоличество");
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	НовыйЭлементОтбора.ПравоеЗначение = Истина; 
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение		 = Истина;

КонецПроцедуры // УстановитьУсловноеОформление()

#КонецОбласти 

#КонецОбласти