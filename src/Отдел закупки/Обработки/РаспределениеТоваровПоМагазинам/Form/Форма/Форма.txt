
#Область АвтоТест
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ИнициализироватьВидыНоменклатуры(ЭтаФорма);
	ОбработкаОбъект.ИнициализироватьТаблицуРаспределения(ЭтаФорма, Отказ);
	
	Если Не Отказ Тогда
		ОбработкаОбъект.ИнициализироватьУсловноеОформление(ЭтаФорма, Отказ);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Навигация_ВидыНоменклатуры

&НаКлиенте
Процедура Навигация_ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Навигация_ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЗагрузитьСписокНоменклатуры(0); // очищаем список
		Возврат;
	КонецЕсли;
	ЗагрузитьСписокНоменклатуры(ТекущиеДанные.ЭтоГруппа, ТекущиеДанные.Ссылка, ТекущиеДанные.ТоварнаяКатегория);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокНоменклатуры(ЭтоГруппа, ВидНоменклатуры=Неопределено, ТоварнаяКатегория=Неопределено)
	РеквизитФормыВЗначение("Объект").ЗагрузитьСписокНоменклатуры(Этаформа, ЭтоГруппа, ВидНоменклатуры, ТоварнаяКатегория);
КонецПроцедуры // ЗагрузитьСписокНоменклатуры()
 
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаРаспределения

&НаКлиенте
Процедура Подключаемый_ТаблицаРаспределенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Поле.Имя = "Номенклатура" Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРаспределенияПриИзменении(Элемент)	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();	
	РасчитатьИзмененияНаСервере(Идентификатор);
КонецПроцедуры // Подключаемый_ТаблицаРаспределенияПриИзменении()

&НаКлиенте
Процедура Подключаемый_ТаблицаРаспределенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРаспределенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокДокументов

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ОткрытьЗначение(ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПеремещение(Команда)
	ОчиститьСообщения();
	ВыполнитьПеремещениеНаСервере();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РасчитатьИзмененияНаСервере(ИдентификаторСтроки)
	РеквизитФормыВЗначение("Объект").ВыполнитьРасчетОстатка(ЭтаФорма, ИдентификаторСтроки);
КонецПроцедуры // РасчитатьИзмененияНаСервере() 

&НаСервере
Процедура ВыполнитьПеремещениеНаСервере()
	РеквизитФормыВЗначение("Объект").ВыполнитьПеремещение(ЭтаФорма);
КонецПроцедуры // ВыполнитьПеремещениеНаСервере() 

#КонецОбласти