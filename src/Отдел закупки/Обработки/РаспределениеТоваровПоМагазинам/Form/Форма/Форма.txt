
#Область ИнтерфейсАвтоматическихТестов
	
&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("Тест_ПроверитьЗаполнение");
	СписокТестов.Добавить("Тест_ДополнительныеРеквизитыФормы");
	СписокТестов.Добавить("Тест_СформироватьДеревоНоменклатуры");
	СписокТестов.Добавить("Тест_ПровестиРасчетПоДереву");
	СписокТестов.Добавить("Тест_ПолучитьСреднееЗначениеДляКолонок");
	СписокТестов.Добавить("Тест_УстановитьЗначениеДляКолонок");
	СписокТестов.Добавить("Тест_РаспределитьСвободныйОстатокНаСкладаБезОстатка");
	
	Возврат СписокТестов;
	
КонецФункции
 
&НаКлиенте
Процедура Тест_ПроверитьЗаполнение() Экспорт
	ЮнитТест.ПроверитьЗаполненность(ТранзитныйСклад);
	ЮнитТест.ПроверитьЗаполненность(ФорматМагазина);
	ЮнитТест.ПроверитьЗаполненность(ГруппаРозничныхСкладов);
КонецПроцедуры

&НаКлиенте
Процедура Тест_ДополнительныеРеквизитыФормы() Экспорт
	
	ИдентификаторТранзитногоСклада = Тест_ПолучитьИдентификаторСклада(ТранзитныйСклад);
	МассивСкладов				   = Тест_ПолучитьМассивРозничныхСкладов();
	
	ЮнитТест.ПроверитьТип(ЭтаФорма["ДеревоРаспределения"], Тип("ДанныеФормыДерево"), );
	
	Элемент = Элементы.Найти("группа_"+ИдентификаторТранзитногоСклада);
	ЮнитТест.ПроверитьТип(Элемент, Тип("ГруппаФормы"), );
	
	Элемент = Элементы.Найти("ожид_"+ИдентификаторТранзитногоСклада);
	ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
	
	Элемент = Элементы.Найти("остат_"+ИдентификаторТранзитногоСклада);
	ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл
		
		ИдентификаторСклада = Тест_ПолучитьИдентификаторСклада(РозничныйСклад);
		
		Элемент = Элементы.Найти("группа_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ГруппаФормы"), );
		
		Элемент = Элементы.Найти("квота_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
		
		Элемент = Элементы.Найти("ожид_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
		
		Элемент = Элементы.Найти("остат_"+ИдентификаторСклада);
		ЮнитТест.ПроверитьТип(Элемент, Тип("ПолеФормы"), );
	
	КонецЦикла; 
	
КонецПроцедуры // Тест_ДополнительныеРеквизитыИЭлементыФормы()

&НаКлиенте
Процедура Тест_СформироватьДеревоНоменклатуры() Экспорт 
	СформироватьДеревоНоменклатуры();
КонецПроцедуры // Тест_ЗагрузитьСписокНоменклатуры()

&НаКлиенте
Процедура Тест_ПровестиРасчетПоДереву() Экспорт

	ИдентификаторСтроки = Тест_ПолучитьИдентификаторСтрокиДереваРаспределения();
	ЮнитТест.ПроверитьНеРавенство(ИдентификаторСтроки, Неопределено, );
	ЮнитТест.ПроверитьТип(ИдентификаторСтроки, "Число", );
	
	МассивСкладов	= Тест_ПолучитьМассивРозничныхСкладов();	
	ГСЧ 			= Новый ГенераторСлучайныхЧисел(255);
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		
		ИдентификаторСклада = Тест_ПолучитьИдентификаторСклада(СкладИзМассива);
		СтрокаДерева 		= ЭтаФорма["ДеревоРаспределения"].НайтиПоИдентификатору(ИдентификаторСтроки);
		ИдентификаторКолонки = "кол_" + Тест_ПолучитьИдентификаторСклада(СкладИзМассива);
		
		СтрокаДерева[ИдентификаторКолонки] = ГСЧ.СлучайноеЧисло(0, 100);
		
		ПровестиРасчетПоДереву(ИдентификаторСтроки, ИдентификаторКолонки);
		
	КонецЦикла; 
		 
КонецПроцедуры // Тест_ПровестиРасчетПоДереву()

&НаКлиенте
Процедура Тест_ПолучитьСреднееЗначениеДляКолонок() Экспорт

	ИдентификаторСтроки = Тест_ПолучитьИдентификаторСтрокиДереваРаспределения();
	ЮнитТест.ПроверитьНеРавенство(ИдентификаторСтроки, Неопределено, );
	ЮнитТест.ПроверитьТип(ИдентификаторСтроки, "Число", );

	СреднееЗначение = ПолучитьСреднееЗначениеДляКолонок(ИдентификаторСтроки);
	ЮнитТест.ПроверитьТип(ИдентификаторСтроки, "Число", );

КонецПроцедуры // Тест()

&НаКлиенте
Процедура Тест_УстановитьЗначениеДляКолонок() Экспорт

	ИдентификаторСтроки = Тест_ПолучитьИдентификаторСтрокиДереваРаспределения();
	ЮнитТест.ПроверитьНеРавенство(ИдентификаторСтроки, Неопределено, );
	ЮнитТест.ПроверитьТип(ИдентификаторСтроки, "Число", );	
	
	УстановитьЗначениеДляКолонок(ИдентификаторСтроки, 0);
	УстановитьЗначениеДляКолонок(ИдентификаторСтроки, 100);
	УстановитьЗначениеДляКолонок(ИдентификаторСтроки, 0);

КонецПроцедуры // Тест()
 
&НаКлиенте
Процедура Тест_РаспределитьСвободныйОстатокНаСкладаБезОстатка() Экспорт

	ИдентификаторСтроки = Тест_ПолучитьИдентификаторСтрокиДереваРаспределения();
	ЮнитТест.ПроверитьНеРавенство(ИдентификаторСтроки, Неопределено, );
	ЮнитТест.ПроверитьТип(ИдентификаторСтроки, "Число", );
	
	РаспределитьСвободныйОстатокНаСкладаБезОстатка(ИдентификаторСтроки);

КонецПроцедуры // Тест()
 



&НаСервере
Функция Тест_ПолучитьИдентификаторСклада(Склад)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСтрокуИдентификатораСсылки(Склад);
КонецФункции // Тест_ПолучитьИдентификаторТранзитногоСклада()

&НаСервере
Функция Тест_ПолучитьМассивРозничныхСкладов()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
КонецФункции // Тест_ПолучитьМассивРозничныхСкладов()

&НаСервере
Функция Тест_ПолучитьИдентификаторСтрокиДереваРаспределения(СтрокаДерева=Неопределено)
	
	Если СтрокаДерева=Неопределено Тогда
		ИнициализироватьДанныеФормы();
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8530-404c-11e0-9f98-001517115d85"));
		СформироватьДеревоНоменклатуры();
		СтрокаДерева = ЭтаФорма["ДеревоРаспределения"];
	КонецЕсли;
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ТипЗнч(ЭлементДерева.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		КонецЕсли;
		Возврат Тест_ПолучитьИдентификаторСтрокиДереваРаспределения(ЭлементДерева);
	КонецЦикла; 	
	
	Возврат Неопределено;

КонецФункции // ПолучитьИдентификаторСтрокиДереваРаспределения()

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ИнициализироватьДанныеФормы();
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	МассивСкладов    			   = ОбъектОбработки.ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	ИдентификаторТранзитногоСклада = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(ТранзитныйСклад);
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	СоздатьДополнительныеРеквизитыФормы(МассивСкладов, ИдентификаторТранзитногоСклада);
	СоздатьДополнительныеЭлементыФормы(МассивСкладов, ИдентификаторТранзитногоСклада);
	
	УстановитьУсловноеОформление();
	
	Если Параметры.СписокНоменклатуры.Количество() <> 0 Тогда
		СписокНоменклатуры 					= Параметры.СписокНоменклатуры;
		Элементы.ВидНоменклатуры.Видимость  = Ложь;
		СформироватьДеревоНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	СформироватьДеревоНоменклатуры();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоРаспределения

&НаКлиенте
Процедура Подключаемый_ДеревоРаспределенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоРаспределенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементКоличествоПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
	НаименованиеСтроки  = Элемент.ТекущийЭлемент.Имя;
	ПровестиРасчетПоДереву(ИдентификаторСтроки, НаименованиеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоРаспределенияВыбора(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "кол_") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(Поле.Имя, "ожид_") > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("ИмяКолонки", Поле.Имя);
		ОткрытьФорму("ВнешняяОбработка.РаспределениеТоваровПоМагазинам.Форма.ФормаОтчетПоОстаткам", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКаждыйМагазин(Команда)
	
	ТекущиеДанные = ТекущиеДанныеДереваРаспределения();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПредлагаемоеЧисло = ПолучитьСреднееЗначениеДляКолонок(ТекущиеДанные.ПолучитьИдентификатор());
	Если ПредлагаемоеЧисло = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВвода = ВвестиЧисло(ПредлагаемоеЧисло, НСтр("ru='Добавление в каждый магазин.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если НЕ РезультатВвода Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВвода < 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Введите пожалуйсто число больше 0.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеДляКолонок(ТекущиеДанные.ПолучитьИдентификатор(), ПредлагаемоеЧисло);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоМагазинамБезОстатка(Команда)
	
	ТекущиеДанные = ТекущиеДанныеДереваРаспределения();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьСвободныйОстатокНаСкладаБезОстатка(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрочку(Команда)
	
	ТекущиеДанные = ТекущиеДанныеДереваРаспределения();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеДляКолонок(ТекущиеДанные.ПолучитьИдентификатор(), 0); // Очищаем значения
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	СформироватьДеревоНоменклатуры();
	ЭлементыДерева = ДеревоРаспределения.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы["ДеревоРаспределения"].Развернуть(ИДСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаНоменклатуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПеремещение(Команда)
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьПеремещениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	ЭлементыДерева = ДеревоРаспределения.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы["ДеревоРаспределения"].Развернуть(ИДСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	ЭлементыДерева = ДеревоРаспределения.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы["ДеревоРаспределения"].Свернуть(ИДСтроки);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Инициализация_формы

// Выполняет начальное заполнение реквизитов формы.
//
&НаСервере
Процедура ИнициализироватьДанныеФормы()
	ТранзитныйСклад 	   		= РеквизитФормыВЗначение("Объект").ПолучитьТранзитныйСклад();
	ФорматМагазина  	  		= Справочники.ФорматыМагазинов.ПолучитьСсылку(Новый УникальныйИдентификатор("4a369284-a06e-11e3-80c2-001e676b0174")); // Базовый формат магазина
	ГруппаРозничныхСкладов 		= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("754b0405-dd64-11e1-9d4d-001e673c80fc")); // Группа справочника Склады - Склади Роздріб
КонецПроцедуры // ИнициализироватьДанныеФормы()

// Процедура создает дополнительные реквизиты формы для дерева распределения.
//
// Параметры:
//  МассивСкладов - Массив - cодержит структуры со свойствами:
//   * Склад - СправочникСсылка.Склады - ссылка на розничный склад.
//  ИдентификаторТранзитногоСклада - Строка - строковой идентиифкатор склада, используется как имя реквизита дерева распределения.
//
&НаСервере
Процедура СоздатьДополнительныеРеквизитыФормы(МассивСкладов, ИдентификаторТранзитногоСклада)

	ОбъектОбработки  			   = РеквизитФормыВЗначение("Объект");
	МассивРеквизитов 			   = Новый Массив;
	МассивТипов					   = Новый Массив;
	
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыНоменклатуры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ТоварныеКатегории"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Марки"));
	
	//МассивРеквизитов.Добавить(Новый РеквизитФормы("ДеревоРаспределения", Новый ОписаниеТипов("ДеревоЗначений")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки", Новый ОписаниеТипов("Число"), "ДеревоРаспределения"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Код", Новый ОписаниеТипов("Строка"), "ДеревоРаспределения", "Код"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Артикул", Новый ОписаниеТипов("Строка"), "ДеревоРаспределения", "Артикул"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Номенклатура", Новый ОписаниеТипов(МассивТипов), "ДеревоРаспределения", "Номенклатура"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("РедактироватьКоличество", Новый ОписаниеТипов("Булево"), "ДеревоРаспределения"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДНС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10,0)), "ДеревоРаспределения", "ДНС"));
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ожид_"+ИдентификаторТранзитногоСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ож."));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("остат_"+ИдентификаторТранзитногоСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ост."));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("пер_"+ИдентификаторТранзитногоСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Пер."));
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл
		ИдентификаторСклада = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("кол_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)), "ДеревоРаспределения", "Кол."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("колдоп_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "КолДоп."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("квота_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Квота"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ожид_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ож."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("остат_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Ост."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("пред_"+ИдентификаторСклада, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3)), "ДеревоРаспределения", "Пред."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("виделять_"+ИдентификаторСклада, Новый ОписаниеТипов("Булево"), "ДеревоРаспределения"));
	КонецЦикла; 
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
КонецПроцедуры // СоздатьДополнительныеРеквизитыИЭлементыФормы()

// Процедура создает дополнительные элементы формы для дерева распределения.
//
// Параметры:
//  МассивСкладов - Массив - cодержит структуры со свойствами:
//   * Склад - СправочникСсылка.Склады - ссылка на розничный склад.
//  ИдентификаторТранзитногоСклада - Строка - строковой идентиифкатор склада, используется как имя реквизита дерева распределения.
//
&НаСервере
Процедура СоздатьДополнительныеЭлементыФормы(МассивСкладов, ИдентификаторТранзитногоСклада)
		
	ЭлементДеревоРаспределения = Элементы.ДеревоРаспределения;
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "Номенклатура");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения.Номенклатура");
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 250, 205));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("Заголовок", "Номенклатура");
	ПараметрыЭлемента.Вставить("Ширина", 60);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "Код");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения.Код");
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 250, 205));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("Ширина", 10);
	ПараметрыЭлемента.Вставить("Заголовок", "Код");
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "Артикул");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения.Артикул");
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 250, 205));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("Ширина", 10);
	ПараметрыЭлемента.Вставить("Заголовок", "Артикул");
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
	
	
	// Транзитный склад
	
	ПараметрыЭлемента = СтруктураПараметровГруппыКолонок("группа_"+ИдентификаторТранзитногоСклада, ТранзитныйСклад.Наименование, ФиксацияВТаблице.Лево);
	ГруппаКолонок = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("ожид_"+ИдентификаторТранзитногоСклада, Новый Цвет(255, 228, 225), Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("ДНС", Новый Цвет(230, 230, 250), Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("остат_"+ИдентификаторТранзитногоСклада, Новый Цвет(204, 255, 204), Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("пер_"+ИдентификаторТранзитногоСклада, Новый Цвет(255, 250, 205), Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект"); 
	
	Для каждого РозничныйСклад Из МассивСкладов Цикл
		
		ИдентификаторСклада = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(РозничныйСклад);
		
		ПараметрыЭлемента = СтруктураПараметровГруппыКолонок("группа_"+ИдентификаторСклада, РозничныйСклад, ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементДеревоРаспределения);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("кол_"+ИдентификаторСклада, Новый Цвет(255, 235, 205), Ложь);
		ЭлементКоличество = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементДеревоРаспределения.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементКоличествоПриИзменении");
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("квота_"+ИдентификаторСклада, Новый Цвет(255, 240, 245), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("пред_"+ИдентификаторСклада, Новый Цвет(255, 228, 181), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		                                                                                                      
		ПараметрыЭлемента = СтруктураПараметровКолонки("ожид_"+ИдентификаторСклада, Новый Цвет(255, 228, 225), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("остат_"+ИдентификаторСклада, Новый Цвет(204, 255, 204), Истина);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
КонецПроцедуры // СоздатьДополнительныеЭлементыФормы()

// Возвращает заполненную структуру для создания группы колонок дерева распределения.
// 
// Параметры:
//  ИмяЭлемента - Строка - наименование элемента формы.
//  ЗаголовокЭлемента - Строка - заголовок элемента формы.
//  ФиксацияВТаблице - ФиксацияВТаблице - фиксация элемента в таблице.
//
// Возвращаемое значение:
//  Структура - структура параметров нового элемента формы.
//
&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

// Возвращает заполненную структуру для создания колоноки дерева распределения.
//
// Параметры:
//  ИмяЭлемента - Строка - наименование элемента формы.
//  ЦветЭлемента - Цвет - цвет фона элемента.
//
// Возвращаемое значение:
//   Структура - структура параметров нового элемента формы.
//
&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);                                        	
	ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРаспределения." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 6);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", Ложь);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	
	Возврат ПараметрыЭлемента;

КонецФункции // СтруктураПараметровКолонки()
 
// Загружает список номенклатуры в ДеревоРаспределения
//
&НаСервере
Процедура СформироватьДеревоНоменклатуры()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоПриемник = РеквизитФормыВЗначение("ДеревоРаспределения", Тип("ДеревоЗначений"));
	
	Если ВидНоменклатуры.Пустая() И СписокНоменклатуры.Количество() = 0 Тогда
		ДеревоПриемник.Строки.Очистить();
		ЗначениеВРеквизитФормы(ДеревоПриемник, "ДеревоРаспределения");
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ДеревоНоменклатуры 		= ОбработкаОбъект.СформироватьДеревоНоменклатуры(ФорматМагазина, ВидНоменклатуры, ГруппаРозничныхСкладов, ТранзитныйСклад, СписокНоменклатуры);
	ТаблицаКвот				= ОбработкаОбъект.ПолучитьТаблицуКвот(ФорматМагазина);
	ТаблицаПредставленности = ОбработкаОбъект.ПолучитьТаблицуПредставлености(ГруппаРозничныхСкладов);
	МассивСкладов			= ОбработкаОбъект.ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		МассивИдентификаторов.Добавить(ОбработкаОбъект.ПолучитьСтрокуИдентификатораСсылки(СкладИзМассива));
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ДеревоПриемник.Строки.Очистить();
	РазобратьДеревоНоменклатуры(ДеревоНоменклатуры, ДеревоПриемник, ТаблицаКвот, ТаблицаПредставленности, МассивИдентификаторов);
	
	ЗначениеВРеквизитФормы(ДеревоПриемник, "ДеревоРаспределения");	
	
КонецПроцедуры // ЗагрузитьСписокНоменклатуры()

&НаСервере
Процедура РазобратьДеревоНоменклатуры(ДеревоИсточник, ДеревоПриемник, ТаблицаКвот, ТаблицаПредставленности, МассивИдентификаторов)
		
	Для каждого СтрокаДерева Из ДеревоИсточник.Строки Цикл
		
	    НоваяСтрока = ДеревоПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.Номенклатура;
			НоваяСтрока.ИндексКартинки  		= 2;
			НоваяСтрока.РедактироватьКоличество = Истина;
			
		ИначеЕсли ТипЗнч(СтрокаДерева.Марка) = Тип("СправочникСсылка.Марки") Тогда
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.Марка;
			НоваяСтрока.ИндексКартинки  		= 1;
			НоваяСтрока.РедактироватьКоличество = Ложь;
			НоваяСтрока.ДНС 					= 0;
			
			СтрокаКвота 			= ПолучитьЗначениеТаблицы(СтрокаДерева.Марка, ТаблицаКвот);
			СтрокаПредставленность  = ПолучитьЗначениеТаблицы(СтрокаДерева.Марка, ТаблицаПредставленности);
			
			Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
				НоваяСтрока["квота_"+ИдентификаторСклада] 	 = ?(СтрокаКвота = Неопределено, 0, СтрокаКвота.Квота);
				НоваяСтрока["пред_"+ИдентификаторСклада] 	 = ?(СтрокаПредставленность = Неопределено, 0, СтрокаПредставленность["пред_"+ИдентификаторСклада]);
				НоваяСтрока["виделять_"+ИдентификаторСклада] = НоваяСтрока["квота_"+ИдентификаторСклада] <> НоваяСтрока["пред_"+ИдентификаторСклада];
			КонецЦикла; 
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ТоварнаяКатегория) Тогда
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.ТоварнаяКатегория;
			НоваяСтрока.ИндексКартинки  		= 1;
			НоваяСтрока.РедактироватьКоличество = Ложь;
			НоваяСтрока.ДНС 					= 0;
			
			СтрокаКвота 			= ПолучитьЗначениеТаблицы(СтрокаДерева.ТоварнаяКатегория, ТаблицаКвот);
			СтрокаПредставленность  = ПолучитьЗначениеТаблицы(СтрокаДерева.ТоварнаяКатегория, ТаблицаПредставленности);
			
			Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
				НоваяСтрока["квота_"+ИдентификаторСклада]	 = ?(СтрокаКвота = Неопределено, 0, СтрокаКвота.Квота);
				НоваяСтрока["пред_"+ИдентификаторСклада] 	 = ?(СтрокаПредставленность = Неопределено, 0, СтрокаПредставленность["пред_"+ИдентификаторСклада]);
				НоваяСтрока["виделять_"+ИдентификаторСклада] = НоваяСтрока["квота_"+ИдентификаторСклада] <> НоваяСтрока["пред_"+ИдентификаторСклада];
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока.Номенклатура 			= СтрокаДерева.ВидНоменклатуры;
			НоваяСтрока.ИндексКартинки  		= 0;
			НоваяСтрока.РедактироватьКоличество = Ложь;
			НоваяСтрока.ДНС 					= 0;
			
			СтрокаКвота 			= ПолучитьЗначениеТаблицы(СтрокаДерева.ВидНоменклатуры, ТаблицаКвот);
			СтрокаПредставленность  = ПолучитьЗначениеТаблицы(СтрокаДерева.ВидНоменклатуры, ТаблицаПредставленности);
			
			Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
				НоваяСтрока["квота_"+ИдентификаторСклада] 	 = ?(СтрокаКвота = Неопределено, 0, СтрокаКвота.Квота);
				НоваяСтрока["пред_"+ИдентификаторСклада] 	 = ?(СтрокаПредставленность = Неопределено, 0, СтрокаПредставленность["пред_"+ИдентификаторСклада]);
				НоваяСтрока["виделять_"+ИдентификаторСклада] = НоваяСтрока["квота_"+ИдентификаторСклада] <> НоваяСтрока["пред_"+ИдентификаторСклада];
			КонецЦикла;
			
		КонецЕсли;
		
		РазобратьДеревоНоменклатуры(СтрокаДерева, НоваяСтрока, ТаблицаКвот, ТаблицаПредставленности, МассивИдентификаторов);
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеТаблицы(ЗначениеДляПоиска, Таблица)

	СтруктураПоиска  = Новый Структура("Номенклатура", ЗначениеДляПоиска);
	РезультатыПоиска = Таблица.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатыПоиска.Количество() > 0 Тогда
		Возврат РезультатыПоиска[0];
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьЗначениеКвоты()
 


// Проводит расчет по дереву разпределения вверх по иерархии.
//
// Параметры:
//  ИдентификаторСтроки  - Число - идентификатор строки дерева распределения.
//  ИмяКолонки - Строка - имя колонки в которой провели изменения.
//
&НаСервере
Процедура ПровестиРасчетПоДереву(знач ИдентификаторСтроки, знач ИмяКолонки)

	СтрокаДерева = ЭтаФорма["ДеревоРаспределения"].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	                                                                     
	ИмяДополнительнойКолонки = СтрЗаменить(ИмяКолонки, "кол_", "колдоп_");
	
	ДельтаИзменения = СтрокаДерева[ИмяКолонки] - СтрокаДерева[ИмяДополнительнойКолонки];
	
	Если ДельтаИзменения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение("Объект");	
	
	СкладСсылка 			= Справочники.Склады.ПолучитьСсылку(ОбработкаОбъект.УникальныйИдентификаторИзСтроки("кол_", ИмяКолонки));
	ИмяКолонкиКоличество 	= "пер_" + ОбработкаОбъект.ПолучитьСтрокуИдентификатораСсылки(ТранзитныйСклад);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Склад", СтрокаДерева["Номенклатура"], СкладСсылка);
	РезультатПоиска = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		Если Не СтрокаДерева[ИмяКолонки] = 0 Тогда                                                                                                        
			НоваяСтрока 			 = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = СтрокаДерева["Номенклатура"];
			НоваяСтрока.Склад		 = СкладСсылка;
			НоваяСтрока.Количество   = СтрокаДерева[ИмяКолонки];
		КонецЕсли;
	Иначе
		Если СтрокаДерева[ИмяКолонки] = 0 Тогда
			ТаблицаНоменклатуры.Удалить(РезультатПоиска[0]);
		Иначе
			РезультатПоиска[0].Количество = СтрокаДерева[ИмяКолонки];
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДерева[ИмяДополнительнойКолонки] 	= СтрокаДерева[ИмяКолонки];
	СтрокаДерева[ИмяКолонкиКоличество]    	= СтрокаДерева[ИмяКолонкиКоличество] + ДельтаИзменения;
	
	ПровестиРасчетПоДеревуРекурсивно(СтрокаДерева, ДельтаИзменения, ИмяКолонки, ИмяКолонкиКоличество);

КонецПроцедуры // ПровестиРасчетПоДереву()

// Рекурсивно добавляет значение количества установленого пользователем по всем родителям.
//
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева для которой нужно установить изменение.
//  ДельтаИзменения - Число - число на которое устанавливаем изменения.
//  ИмяКолонки - Строка - имя колонки ля которой установили изменения.
//
&НаСервере
Процедура ПровестиРасчетПоДеревуРекурсивно(СтрокаДерева, ДельтаИзменения, ИмяКолонки, ИмяКолонкиКоличество)

	Родитель = СтрокаДерева.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Родитель[ИмяКолонки] 			= Родитель[ИмяКолонки] 			 + ДельтаИзменения;
	Родитель[ИмяКолонкиКоличество] 	= Родитель[ИмяКолонкиКоличество] + ДельтаИзменения;
	
	ПровестиРасчетПоДеревуРекурсивно(Родитель, ДельтаИзменения, ИмяКолонки, ИмяКолонкиКоличество)
	
КонецПроцедуры // ПровестиРасчетПоДеревуРекурсивно()
 


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МассивИдентификаторов = Новый Массив;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МассивСкладов   = ОбработкаОбъект.ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		МассивИдентификаторов.Добавить(ОбработкаОбъект.ПолучитьСтрокуИдентификатораСсылки(СкладИзМассива));	
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

	
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
			
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Номенклатура");
	ОформляемоеПоле.Использование 	= Истина;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.Номенклатура");
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = Справочники.Марки.ПустаяСсылка();
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = "Прочие марки";	
	
	
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
			
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Номенклатура");
	ОформляемоеПоле.Использование 	= Истина;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.Номенклатура");
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = Справочники.ТоварныеКатегории.ПустаяСсылка();
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = "Прочие категории";
	
	
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
			
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Номенклатура");
	ОформляемоеПоле.Использование 	= Истина;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.Номенклатура");
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение      = "Товары без категории";
	
	
	ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("кол_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;
	КонецЦикла;
	
	НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.РедактироватьКоличество");
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	НовыйЭлементОтбора.ПравоеЗначение = Истина; 
	
	НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	НовыйЭлементОформления.Использование = Истина;
	НовыйЭлементОформления.Значение		 = Истина;
	
	
	
	Для каждого ИдентификаторСклада Из МассивИдентификаторов Цикл
	
		ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;

		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("кол_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;
		
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("квота_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;
		
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ожид_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;

		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("остат_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;
		
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("пред_"+ИдентификаторСклада);
		ОформляемоеПоле.Использование 	= Истина;


		НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРаспределения.виделять_"+ИдентификаторСклада);
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Истина;

		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение		 = Новый Цвет(255, 0, 0);
	
	КонецЦикла;

КонецПроцедуры // УстановитьУсловноеОформление()

#КонецОбласти 

&НаСервере
Процедура ВыполнитьПеремещениеНаСервере()
	
	ТаблицаДокументов = РеквизитФормыВЗначение("Объект").ВыполнитьПеремещение(ТаблицаНоменклатуры.Выгрузить(), ТранзитныйСклад);
	
	Если ТаблицаДокументов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		НоваяСтрока = СписокДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ТаблицаНоменклатуры.Очистить();
	СформироватьДеревоНоменклатуры();
	
КонецПроцедуры // ВыполнитьПеремещениеНаСервере() 


// Возвращает среднее значение значенние для заполенения колонок распределения
//
// Параметры:
//  ИдентификаторСтроки  - Число - идентификатор строки дерева распределения для расчета среднего значение
//
// Возвращаемое значение:
//   Число - среднее значение для распределения.
//
&НаСервере
Функция ПолучитьСреднееЗначениеДляКолонок(знач ИдентификаторСтроки)

	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаДерева = ДеревоРаспределения.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Номенклатура = СтрокаДерева.Номенклатура;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МассивСкладов 	= ОбработкаОбъект.ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	Количество   	= ОбработкаОбъект.ПолучитьОстатокПоСкладу(ТранзитныйСклад, Номенклатура);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если Количество = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Окр(Количество / МассивСкладов.Количество());

КонецФункции // ПолучитьСреднееЗначениеДляКолонок()

// Устанавливает значение для каждой колонки с розничным с кладом.
//
// Параметры:
//  ИдентификаторСтроки - Число - идентификатор строки дерева распределения для установки значения.
//  Значение - Число - значение которое нужно установить в строках.
//
&НаСервере
Процедура УстановитьЗначениеДляКолонок(знач ИдентификаторСтроки, знач Значение)

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ИдентификаторСтроки) <> Тип("Число") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить идентификатор строки дерева распределения. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) <> Тип("Число") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось получить значение для установки в строке дерева распределения. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	МассивСкладов = РеквизитФормыВЗначение("Объект").ПолучитьСкладыИзГруппы(ГруппаРозничныхСкладов);
	СтрокаДерева  = ДеревоРаспределения.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДерева = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Распределение товаров не выполнилось. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
		ИмяКолонки 				 = "кол_" + РеквизитФормыВЗначение("Объект").ПолучитьСтрокуИдентификатораСсылки(СкладИзМассива);
		СтрокаДерева[ИмяКолонки] = Значение;
		ПровестиРасчетПоДереву(ИдентификаторСтроки, ИмяКолонки);
	КонецЦикла; 

КонецПроцедуры // УстановитьЗначениеДляКолонок()

// Пропорционально рапределяет свободный остаток по розничным складам без остатка.
//
// Параметры:
//  ИдентификаторСтроки - Число - идентификатор строки дерева распределения для установки значения.
//
&НаСервере
Процедура РаспределитьСвободныйОстатокНаСкладаБезОстатка(знач ИдентификаторСтроки)

	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаДерева = ДеревоРаспределения.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОстатокПоСкладу = ОбработкаОбъект.ПолучитьОстатокПоСкладу(ТранзитныйСклад, СтрокаДерева.Номенклатура);
	МассивСкладов   = ОбработкаОбъект.ПолучитьСкладыБезОстатка(СтрокаДерева.Номенклатура, ГруппаРозничныхСкладов);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	КоличествоСкладов = МассивСкладов.Количество();
	
	Если КоличествоСкладов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПроставить = ?(Окр(ОстатокПоСкладу/КоличествоСкладов)=0, 1, Окр(ОстатокПоСкладу/КоличествоСкладов));
	
	Для каждого СкладИзМассива Из МассивСкладов Цикл
	
		ИмяКолонки 				 = "кол_" + РеквизитФормыВЗначение("Объект").ПолучитьСтрокуИдентификатораСсылки(СкладИзМассива);
		СтрокаДерева[ИмяКолонки] = КоличествоПроставить;
		ПровестиРасчетПоДереву(ИдентификаторСтроки, ИмяКолонки);
		
		Если КоличествоПроставить = 1 Тогда
			ОстатокПоСкладу = ОстатокПоСкладу - 1;
			Если ОстатокПоСкладу < 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры // РаспределитьСвободныйОстатокНаСкладаБезОстатка()
 


&НаКлиенте
Функция ТекущиеДанныеДереваРаспределения()

	ТекущиеДанные = Элементы.ДеревоРаспределения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат ТекущиеДанные;

КонецФункции // ТекущиеДанныеТаблицыРаспределения()

#КонецОбласти