#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ИнтеграцияЗКсИрокезом");
	СписокТестов.Добавить(ПараметрыТеста);
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ИнтеграцияЗКсИрокезом() Экспорт
	
	ДанныеДляТестирования = СоздатьДанныеДляТестирования();
	
	ПараметрыФормы = ПолучитьПараметрыФормы(ДанныеДляТестирования.ЗаказКлиента.Ссылка);
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ПараметрыФормы.АдресОбъекта + ".Форма.Форма" , ПараметрыФормы);
	ФормаОбработки.ВидНоменклатуры =ДанныеДляТестирования.ВидНоменклатуры; 
	ФормаОбработки.ЗагрузитьСписокНоменклатурыНаСервере(ДанныеДляТестирования.Номенклатура);
	Отбор = Новый Структура("Ссылка",ДанныеДляТестирования.Номенклатура);
	Массив = ФормаОбработки.СписокНоменклатуры.НайтиСтроки(Отбор);
	УничтожитьДанныеДляТестирования(ДанныеДляТестирования);
	
	СообщениеОбОшибке = НСтр("ru='#5133. Был создан документ «Возврат товаров от клиента» когда заказчик ремонта Наше предприятие.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьНеРавенство(Массив.Количество(), 0, СообщениеОбОшибке);	
КонецПроцедуры



#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

Функция СоздатьДанныеДляТестирования()
	
	ДанныеДляТестирования = Новый Структура;
	
	Склад 					= СоздатьСклад();
	ВидНоменклатуры			= СоздатьВидНоменклатуры();
	Номенклатура    		= СоздатьНоменклатуру(ВидНоменклатуры);
	Организация				= СоздатьОрганизацию();
	Клиент					= СоздатьКлиента();
	КонтрагентКлиент 		= СоздатьКонтрагента(Клиент);
	СоглашениеСКлиентом 	= СоздатьСоглашениеСКлиентами(Клиент		,КонтрагентКлиент		,Организация	,Склад);
			
	ЗаказКлиента		   	= СоздатьЗаказКлиента(Клиент,КонтрагентКлиент,СоглашениеСКлиентом,Склад,Организация,Номенклатура);
	
	ДанныеДляТестирования.Вставить("Склад"					,Склад);
	ДанныеДляТестирования.Вставить("Номенклатура"			,Номенклатура);
	ДанныеДляТестирования.Вставить("ВидНоменклатуры"		,ВидНоменклатуры);
	ДанныеДляТестирования.Вставить("Организация"			,Организация);
	ДанныеДляТестирования.Вставить("Клиент"					,Клиент);
	ДанныеДляТестирования.Вставить("КонтрагентКлиент"		,КонтрагентКлиент);
	ДанныеДляТестирования.Вставить("СоглашениеСКлиентом"	,СоглашениеСКлиентом);
	ДанныеДляТестирования.Вставить("ЗаказКлиента"			,ЗаказКлиента);
			
	Возврат ДанныеДляТестирования;
	
КонецФункции

Процедура УничтожитьДанныеДляТестирования(ДанныеДляТестирования)

	Если ТипЗнч(ДанныеДляТестирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
#Область ПометкаНаУдалениеДляДокументов

	Если ДанныеДляТестирования.Свойство("ВозвратТоваров") Тогда
		Если Не ДанныеДляТестирования.ВозвратТоваров.Пустая() Тогда
			ВозвратТоваров = ДанныеДляТестирования.ВозвратТоваров.ПолучитьОбъект();
			ВозвратТоваров.УстановитьПометкуУдаления(Истина);
			ВозвратТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Заявка") Тогда
		Заявка = ДанныеДляТестирования.Заявка.ПолучитьОбъект();
		
		СправочникОбъект = Заявка.ЕкспертПрийомщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
		Заявка.УстановитьПометкуУдаления(Истина);
		Заявка.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ЗаявкаОснование") Тогда
		ЗаявкаОснование = ДанныеДляТестирования.ЗаявкаОснование.ПолучитьОбъект();
		ЗаявкаОснование.УстановитьПометкуУдаления(Истина);
		ЗаявкаОснование.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
		
	Если ДанныеДляТестирования.Свойство("РеализацияТоваров") Тогда
		
		РеализацияТоваров = ДанныеДляТестирования.РеализацияТоваров.ПолучитьОбъект();
		РеализацияТоваров.УстановитьПометкуУдаления(Истина);
		РеализацияТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
		СправочникОбъект = РеализацияТоваров.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ЗаказКлиента") Тогда
		
		ЗаказКлиента = ДанныеДляТестирования.ЗаказКлиента.ПолучитьОбъект();
		
		СправочникОбъект = ЗаказКлиента.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
		ЗаказКлиента.УстановитьПометкуУдаления(Истина);
		ЗаказКлиента.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ПоступлениеТоваров") Тогда
		
		ПоступлениеТоваров = ДанныеДляТестирования.ПоступлениеТоваров.ПолучитьОбъект();
		ПоступлениеТоваров.УстановитьПометкуУдаления(Истина);
		ПоступлениеТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
		СправочникОбъект = ПоступлениеТоваров.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
#КонецОбласти 	
	
#Область УничтожениеСправочников

	Если ДанныеДляТестирования.Свойство("СоглашениеСКлиентом") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСКлиентом.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("СоглашениеСПоставщиком") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСПоставщиком.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("КонтрагентКлиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентКлиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("КонтрагентПоставщик") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентПоставщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Клиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Клиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Поставщик") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Поставщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ПартнерНашеПредприятие") Тогда
		СправочникОбъект = ДанныеДляТестирования.ПартнерНашеПредприятие.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("КонтрагентНашеПредприятие") Тогда
		СправочникОбъект = ДанныеДляТестирования.КонтрагентНашеПредприятие.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Организация") Тогда
		
		НаборЗаписей = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ДанныеДляТестирования.Организация);
		НаборЗаписей.Записать();
	
		СправочникОбъект = ДанныеДляТестирования.Организация.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("СерийныйНомер") Тогда
		СправочникОбъект = ДанныеДляТестирования.СерийныйНомер.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Номенклатура") Тогда
		СправочникОбъект = ДанныеДляТестирования.Номенклатура.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Склад") Тогда
		СправочникОбъект = ДанныеДляТестирования.Склад.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
#КонецОбласти

#Область УничтожениеДокументов

	Если ДанныеДляТестирования.Свойство("ВозвратТоваров") Тогда
		Если Не ДанныеДляТестирования.ВозвратТоваров.Пустая() Тогда
			ВозвратТоваров.ОбменДанными.Загрузка = Истина;
			ВозвратТоваров.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Заявка") Тогда
		Заявка.ОбменДанными.Загрузка = Истина;
		Заявка.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("РеализацияТоваров") Тогда
		РеализацияТоваров.ОбменДанными.Загрузка = Истина;
		РеализацияТоваров.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ЗаказКлиента") Тогда
		ЗаказКлиента.ОбменДанными.Загрузка = Истина;
		ЗаказКлиента.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ЗаявкаОснование") Тогда
		ЗаявкаОснование.ОбменДанными.Загрузка = Истина;
		ЗаявкаОснование.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ПоступлениеТоваров") Тогда
		ПоступлениеТоваров.ОбменДанными.Загрузка = Истина;
		ПоступлениеТоваров.Удалить();
	КонецЕсли;

#КонецОбласти 

КонецПроцедуры // УничтожитьДанныеДляТестирования()
 

#Область Справочники

Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

Функция СоздатьВидНоменклатуры()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				Наименование);   
	
	Бибилиотека = ПолучитьБиблиотекуВидНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

Функция СоздатьНоменклатуру(ВидНоменклатуры=Неопределено)
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				Наименование);   
	ПараметрыЗаполнения.Вставить("ВидНоменклатуры",				ВидНоменклатуры);   
	ПараметрыЗаполнения.Вставить("ИспользоватьУпаковки",		Ложь);
	ПараметрыЗаполнения.Вставить("ИспользоватьСерийныеНомера",	Истина);
	
	Бибилиотека = ПолучитьБиблиотекуНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

Функция СоздатьСерийныйНомер(НоменклатураСсылка)

	Код = ПреобразоватьУникальныйИдентификаторВНаименование("СерийныйНомер");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",	НоменклатураСсылка);   
	ПараметрыЗаполнения.Вставить("Код",			Код);
	
	Бибилиотека = ПолучитьБиблиотекуСерийныеНомера();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСерийныйНомер()

Функция СоздатьОрганизацию()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Организация");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуОрганизации();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьОрганизацию()

Функция СоздатьПоставщика()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Поставщик");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Поставщик", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКлиента()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Клиент");
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	Колонки = КонтактнаяИнформация.Колонки;
	Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Строка = КонтактнаяИнформация.Добавить();
	Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	Строка.Представление = "0971254825";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Клиент", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКонтрагента(Партнер)

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Контрагент");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуКонтаргенты();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьКонтрагента()

Функция СоздатьСоглашениеСКлиентами(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с клиентом");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашениеСКлиентами();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

Функция СоздатьСоглашенияСПоставщками(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с поставщиком");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашенияСПоставщками();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

#КонецОбласти

#Область Документы

Функция ИнициализироватьТаблицуТоваров()

	Товары = Новый ТаблицаЗначений;
	
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Товары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Товары;

КонецФункции // ИнициализироватьТаблицуТоваров()

Функция ИнициализироватьТаблицуСерийныхНомеров()

	СерийныеНомера = Новый ТаблицаЗначений;
	СерийныеНомера.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомераНоменклатуры"));
	СерийныеНомера.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат СерийныеНомера;

КонецФункции // ИнициализироватьТаблицуСерийныхНомеров()

Функция СоздатьПоступлениеТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
		
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	ПараметрыЗаполнения.Вставить("Товары", Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера", СерийныеНомера);
	
	Бибилиотека = ПолучитьБиблиотекуПоступлениеТоваров();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьРеализациюТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
	
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	ПараметрыЗаполнения.Вставить("Товары", Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера", СерийныеНомера);
	ПараметрыЗаполнения.Вставить("Статус", Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	Бибилиотека = ПолучитьБиблиотекуРеализацияТоваровИУслуг();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьЗаказКлиента(Партнер,Контрагент,Соглашение, Склад,Организация, Номенклатура)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаЗначений.Колонки;
	Колонки.Добавить("ДатаОтгрузки", 		Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("Номенклатура", 		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("КоличествоУпаковок",	Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,3)));
	Колонки.Добавить("Количество", 			Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,3)));
	Колонки.Добавить("Цена", 				Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("Сумма", 				Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(15,2)));
	Колонки.Добавить("СтавкаНДС", 			Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Колонки.Добавить("ВариантОбеспечения", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Колонки.Добавить("Склад", 				Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	
	НоваяСтрока 					=	ТаблицаЗначений.Добавить();
	НоваяСтрока.ДатаОтгрузки 		=	КонецМесяца(ТекущаяДата());
	НоваяСтрока.Номенклатура 		=	Номенклатура;
	НоваяСтрока.КоличествоУпаковок	=	1;
	НоваяСтрока.Количество			=	1;
	НоваяСтрока.Цена				=	100;
	НоваяСтрока.Сумма				=	100;
	НоваяСтрока.СтавкаНДС 			=	Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.ВариантОбеспечения	=	Перечисления.ВариантыОбеспечения.ПодЗаказ;
	НоваяСтрока.Склад				=	Склад;
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Статус", 		Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
	ПараметрыЗаполнения.Вставить("Партнер", 	Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент",	Контрагент);
	ПараметрыЗаполнения.Вставить("Соглашение",	Соглашение);
	ПараметрыЗаполнения.Вставить("Организация",	Организация);
	ПараметрыЗаполнения.Вставить("Склад", 		Склад);
	ПараметрыЗаполнения.Вставить("Товары", 		ТаблицаЗначений);
	
	Бибилиотека = ПолучитьБиблиотекуЗаказКлиента();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(,ПараметрыЗаполнения);
	
КонецФункции // СоздатьЗаказКлиента()

Функция СоздатьВозвратТоваровКлиентуНаОснованииЗаявки(Заявка)

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке, ВозвратТоваров", Истина, "", Документы.ВозвратТоваровОтКлиента.ПустаяСсылка());
	
	РезультатЗаполнения = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ЗаполнитьРеквизитыВозвратаНаОснованииЗаявки(Заявка);
	
	Если ТипЗнч(РезультатЗаполнения) <> Тип("Структура") Тогда
		РезультатПроверки.Вставить("Результат", Ложь);
		РезультатПроверки.Вставить("СообщениеОбОшибке", НСтр("ru='#5133. Не удалось получить данных заполнения на основании заявки сервисного центра для создания документа возврат товаров от клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат РезультатПроверки;
	КонецЕсли;

	Документ 		= Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	Документ.Дата 	= ТекущаяДатаСеанса();
	
	ЗаполнитьЗначенияСвойств(Документ, РезультатЗаполнения.Объект);
	
	НоваяСтрокаТовары = Документ.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, РезультатЗаполнения.Товары);
	
	Если РезультатЗаполнения.Свойство("СерийныеНомера") Тогда
		НоваяСтрокаСерийныеНомера = Документ.СерийныеНомера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийныеНомера, РезультатЗаполнения.СерийныеНомера);
	КонецЕсли;
	
	Попытка
	    Документ.Записать(РежимЗаписиДокумента.Проведение);			
	Исключение
	    РезультатПроверки.Вставить("Результат", Ложь);
		РезультатПроверки.Вставить("СообщениеОбОшибке", НСтр("ru='#5133. Не удалось провести документ «Возврат товаров от клиента» на основании документа «Заявка сервисного центра».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат РезультатПроверки;
	КонецПопытки;
	
	РезультатПроверки.Вставить("ВозвратТоваров", Документ.Ссылка);
	
	Возврат РезультатПроверки;
	
КонецФункции // СоздатьВозвратТоваровКлиентуНаОснованииЗаявки()
 
Функция СоздатьПриходныйОрдерНаТоварыНаОснованииВозвратТоваровКлиенту(ВозвратТоваров, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Склад 							= ВозвратТоваров.Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
		
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация"		,ВозвратТоваров.Организация);
	ПараметрыЗаполнения.Вставить("Склад"			,ВозвратТоваров.Склад);
	ПараметрыЗаполнения.Вставить("Товары"			,Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера"	,СерийныеНомера);
	ПараметрыЗаполнения.Вставить("Основание"		,ВозвратТоваров);
	
	Бибилиотека = ПолучитьБиблиотекуПриходныйОрдерНаТовары();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

#КонецОбласти 

#Область Библиотеки

Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

Функция ПолучитьБиблиотекуВидНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

Функция ПолучитьБиблиотекуСерийныеНомера()
	ПутьКБиблиотеке = "\tests\Справочники\СерийныеНомераНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСерийныеНомера()

Функция ПолучитьБиблиотекуОрганизации()
	ПутьКБиблиотеке = "\tests\Справочники\Организации\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуОрганизации()

Функция ПолучитьБиблиотекуПартнеры()
	ПутьКБиблиотеке = "\tests\Справочники\Партнеры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПартнеры()

Функция ПолучитьБиблиотекуКонтаргенты()
	ПутьКБиблиотеке = "\tests\Справочники\Контрагенты\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуКонтаргенты()

Функция ПолучитьБиблиотекуСоглашениеСКлиентами()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашениеСКлиентами\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашениеСКлиентами()

Функция ПолучитьБиблиотекуСоглашенияСПоставщками()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашенияСПоставщками\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашенияСПоставщками()

Функция ПолучитьБиблиотекуПоступлениеТоваров()
	ПутьКБиблиотеке = "\tests\Документы\ПоступлениеТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПоступлениеТоваров()

Функция ПолучитьБиблиотекуПриходныйОрдерНаТовары()
	ПутьКБиблиотеке = "\tests\Документы\ПриходныйОрдерНаТовары\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПоступлениеТоваров()

Функция ПолучитьБиблиотекуРеализацияТоваровИУслуг()
	ПутьКБиблиотеке = "\tests\Документы\РеализацияТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуРеализацияТоваровИУслуг()

Функция ПолучитьБиблиотекуЗаявкаСервисногоЦентра()
	ПутьКБиблиотеке = "\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуЗаявкаСервисногоЦентра()

Функция ПолучитьБиблиотекуЗаказКлиента()
	ПутьКБиблиотеке = "\tests\Документы\ЗаказКлиента\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуЗаказКлиента()

#КонецОбласти 

#КонецОбласти


#КонецОбласти



&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт
	
	СоздатьКПП(ОбъектыНазначенияМассив[0]); 

КонецПроцедуры // ВыполнитьКоманду()


// Создать КПП
//
// Параметры
//  ДокументСсылка  - ДокументСсылка.РеализацияТоваровИУслуг - ссылка на документ реализации товаров и услуг
//
&НаКлиенте
Процедура СоздатьКПП(ДокументСсылка)
	
	ПараметрыФормы = ПолучитьПараметрыФормы(ДокументСсылка);
	ОткрытьФорму("ВнешняяОбработка." + ПараметрыФормы.АдресОбъекта + ".Форма.Форма" , ПараметрыФормы);

КонецПроцедуры // ПолучитьСписокНоменклатуры()

// Получает параметры формы
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.ЗаказПоставщику - ссылка на документ заказа поставщика
//
// Возвращаемое значение:
//   Структура   	- структура данных для передачи в внешнюю обаботку
//
&НаСервере
Функция ПолучитьПараметрыФормы(ДокументСсылка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаНаЗаказКлиента"	, ДокументСсылка);
	ПараметрыФормы.Вставить("АдресОбъекта"			, git_ПереопределениеОбработчиковСервер.ПолучитьИмяВнешнегоОбъекта("Ирокез"));
	Возврат ПараметрыФормы;
	
КонецФункции

