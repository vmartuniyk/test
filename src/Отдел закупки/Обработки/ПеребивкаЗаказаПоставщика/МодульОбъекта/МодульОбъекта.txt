#Область АвтоТест
Перем ЮнитТест;
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
#КонецОбласти 

#Область ПрограммныйИнтерфейс

// Подготавливает управляемую форму документа к работе с перебивкой заказа поставщика
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ДорисоватьКнопкуСвязейМеждуПартнерами(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ПодготовитьЗаказПоставщику(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	Иначе 
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет таблицу «Список связей» 
//
// Параметры:
//  Форма 			  - УправляемаяФорма - форма обработки на которой размещается таблица «Список связей».
//
Процедура СформироватьСписокСвязей(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Партнер				= Форма.Партнер;
	ВидСвязи			= Форма.ВидСвязи;
	СписокСвязей  		= Форма.СписокСвязей;
	Запрос 				= Новый Запрос;
	Запрос.Текст    	= ПолучитьТекстЗапросаСоотвествыйПартнера();
	Запрос.УстановитьПараметр("Партнер",	Партнер); 
	Запрос.УстановитьПараметр("ВидСвязи",	ВидСвязи);
	РезультатЗапроса	= Запрос.Выполнить();
	СписокСвязей.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры


// Функция ищет не закрытые и не отгруженные заказы поставщики, 
// с той же номенклатурой и  у аналогичного поставщика, что у документе "ЗаказПоставщику".
// И записывает его в дерево значения
//
// Параметры:
//  ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику - Ссылка на элемент справочника партнеры
//	мФорма			- УправляемаяФорма				 - Форма доумента заказ поставщику
//
// Возвращаемое значение:
//    Строка - Адрес во временном хранилище 
//
Функция ПолучитьДублиНоменклатурыВЗаказеПоставщику(ЗаказПоставщику, мФорма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДублиНоменклатурыВЗП();
	ВидСвязи = Справочники.ВидыСвязейМеждуПартнерами.ПолучитьСсылку(Новый УникальныйИдентификатор("91ad72ea-c09d-11e3-80c2-001e676b0174"));
	УслугаDDP = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("8014b949-4cca-4dc2-808e-e6fb286406d2"));					  
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.УстановитьПараметр("Поставщик", 		мФорма.Объект["Партнер"]);
	Запрос.УстановитьПараметр("УслугаDDP", 		УслугаDDP);
	Запрос.УстановитьПараметр("ВидСвязи", 		ВидСвязи);
	Запрос.УстановитьПараметр("Товары", 		мФорма.Объект["Товары"].Выгрузить());
	Запрос.УстановитьПараметр("Свойство", 		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("ee52af95-fb1b-11e1-9d4d-001e673c80fc")));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;			
	КонецЕсли; 
	
	ДеревоЗначений = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоЗначений, мФорма.УникальныйИдентификатор);

КонецФункции // ПолучитьДублиНоменклатурыВЗаказеПоставщику()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции


// Подготавливает форму документа заказа поставщика к работе с перебивкой заказа поставщика
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа реализации товаров и услуг
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ПодготовитьЗаказПоставщику(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;
	Команды  = ЭтаФорма.Команды;	
	РодительКоманды = Элементы.Найти("ГруппаЗаполнитьСвязиМеждуПартнерами");

	Параметры = Новый Структура;
	Параметры.Вставить("Имя", "КомандаСвязиМеждуПартнерами");
	Параметры.Вставить("Действие", "ЗаполнитьСвязиМеждуПартнерамиПоУмолчанию");
	Параметры.Вставить("Заголовок", "ЗаполнитьСвязиМеждуПартнерами");
	ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры);
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 		"КомандаСвязиМеждуПартнерами");
	Параметры.Вставить("ИмяКоманды","КомандаСвязиМеждуПартнерами");
	Параметры.Вставить("Заголовок", "ЗаполнитьСвязиМеждуПартнерами");
	Параметры.Вставить("Вид", ВидКнопкиФормы.ОбычнаяКнопка);
	Параметры.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, РодительКоманды)

КонецПроцедуры // ПодготовитьЗаказПоставщику()

// Расчитываем список поставщиков табличной части "Список связей"  сооствествующие выбранном партнеру
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Список партнеров сооствествующие выбранном поставщику
//
Функция ПолучитьТекстЗапросаСоотвествыйПартнера()
ТекстЗапроса="ВЫБРАТЬ
             |	ВторойПартнер  			КАК Партнер
             |ИЗ
             |	РегистрСведений.СвязиМеждуПартнерами 
             |ГДЕ
             |	ПервыйПартнер = &Партнер
             |	И ВидСвязи = &ВидСвязи";
Возврат ТекстЗапроса;
КонецФункции // Получи()

//Функция ищет не закрытые и не отгруженные заказы поставщики, 
// с той же номенклатурой и  у аналогичного поставщика, что у документе "ЗаказПоставщику".
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Тексе запроса 
//
Функция ПолучитьТекстЗапросаДублиНоменклатурыВЗП()
ТекстЗапроса = "ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ЗаказПоставщикуТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				|	ЗаказПоставщикуТовары.Склад 											 КАК Склад,
				|	ЗаказПоставщикуТовары.Упаковка 											 КАК Упаковка,
				|	ЗаказПоставщикуТовары.Количество 										 КАК Количество,
				|	ЗаказПоставщикуТовары.Цена 												 КАК Цена,
				|	ЗаказПоставщикуТовары.Отменено											 КАК Отменено
				|ПОМЕСТИТЬ КешНоменклатураТовары
				|ИЗ
				|	&Товары КАК ЗаказПоставщикуТовары
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&ЗаказПоставщику 						КАК ЗаказПоставщику,
				|	КешНоменклатураТовары.Номенклатура 		КАК Номенклатура,
				|	КешНоменклатураТовары.Склад 			КАК Склад,
				|	КешНоменклатураТовары.Упаковка 			КАК Упаковка,
				|	СУММА(КешНоменклатураТовары.Количество) КАК Количество,
				|	СРЕДНЕЕ(КешНоменклатураТовары.Цена) 	КАК Цена
				|ПОМЕСТИТЬ КешНоменклатура
				|ИЗ
				|	КешНоменклатураТовары КАК КешНоменклатураТовары
				|ГДЕ
				|	НЕ КешНоменклатураТовары.Отменено
				|	И НЕ КешНоменклатураТовары.Номенклатура = &УслугаDDP

				|СГРУППИРОВАТЬ ПО
				|	КешНоменклатураТовары.Номенклатура,
				|	КешНоменклатураТовары.Склад,
				|	КешНоменклатураТовары.Упаковка
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&Поставщик 			КАК Поставщик
				|	
				|ПОМЕСТИТЬ СписокПоставщиков

				|ОБЪЕДИНИТЬ ВСЕ

				|ВЫБРАТЬ
				|	СвязиМеждуПартнерами.ВторойПартнер
				|ИЗ
				|	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
				|ГДЕ
				|	СвязиМеждуПартнерами.ПервыйПартнер 	= &Поставщик
				|	И СвязиМеждуПартнерами.ВидСвязи 	= &ВидСвязи
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|     ДопСведения.Значение КАК  НомерТТН,
				|     ВЫРАЗИТЬ(ДопСведения.Объект  КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику
				|
				|ПОМЕСТИТЬ  ДопСведенияНомерТТН
				|
				|ИЗ 	РегистрСведений.ДополнительныеСведения КАК ДопСведения
				|ГДЕ
				|      ДопСведения.Объект Ссылка Документ.ЗаказПоставщику
				|      И ДопСведения.Свойство 			= &Свойство
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
				|	ЗаказыПоставщикамОстатки.Номенклатура,
				|	ЗаказыПоставщикамОстатки.Характеристика,
				|	ЗаказыПоставщикамОстатки.КодСтроки,
				|	ЗаказыПоставщикамОстатки.Склад,
				|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток
				|	- ЕСТЬNULL(ТоварыКПоступлениюОстатки.ПринимаетсяОстаток, 0) КАК КоличествоОстаток,
				|	ЗаказПоставщикуТовары.Количество,
				|	ЗаказПоставщикуТовары.Упаковка,
				|	ЗаказПоставщикуТовары.Цена,
				|	ЗаказПоставщикуТовары.DDP,
				|	ЗаказПоставщикуТовары.Назначение,
				|	ЕСТЬNULL(ДопСведения.НомерТТН, """") КАК НомерТТН
				|ПОМЕСТИТЬ КешВсеДокументы
				|ИЗ
				|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
				|			,
				|			ЗаказПоставщику <> &ЗаказПоставщику
				|			И ЗаказПоставщику.Партнер В
				|					(ВЫБРАТЬ
				|						Поставщик ИЗ СписокПоставщиков)
				|			И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ КешНоменклатура))
				|	КАК ЗаказыПоставщикамОстатки
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
				|ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = ЗаказПоставщикуТовары.Ссылка
				|И ЗаказыПоставщикамОстатки.КодСтроки 		= ЗаказПоставщикуТовары.КодСтроки
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(
				|			,
				|			ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику) <> &ЗаказПоставщику
				|			И ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер В
				|					(ВЫБРАТЬ 
				|						Поставщик ИЗ СписокПоставщиков)
				|			И Номенклатура В 
				|					(ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|						Номенклатура ИЗ КешНоменклатура))
				|	КАК ТоварыКПоступлениюОстатки
				|ПО 	ЗаказыПоставщикамОстатки.ЗаказПоставщику 	= ВЫРАЗИТЬ(ТоварыКПоступлениюОстатки.ДокументПоступления КАК Документ.ЗаказПоставщику)
				|И 		ЗаказыПоставщикамОстатки.Номенклатура 	 	= ТоварыКПоступлениюОстатки.Номенклатура
				|И 		ЗаказыПоставщикамОстатки.Склад 			 	= ТоварыКПоступлениюОстатки.Склад
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведенияНомерТТН КАК ДопСведения
				|ПО 	ДопСведения.ЗаказПоставщику 	= ЗаказыПоставщикамОстатки.ЗаказПоставщику
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КешНоменклатура.Номенклатура.Код КАК Код,
				|	КешНоменклатура.Номенклатура.Артикул КАК Артикул,
				|	КешНоменклатура.Номенклатура КАК Номенклатура,
				|	КешНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	КешНоменклатура.Упаковка КАК Упаковка,
				|	КешНоменклатура.Количество КАК Количество,
				|	КешНоменклатура.Цена КАК Цена,
				|	КешВсеДокументы.ЗаказПоставщику КАК ЗаказПоставщикуДоп,
				|	КешВсеДокументы.ЗаказПоставщику.Партнер КАК Поставщик,
				|	КешВсеДокументы.НомерТТН КАК НомерТТН,
				|	КешВсеДокументы.КодСтроки КАК КодСтрокиДоп,
				|	КешВсеДокументы.КоличествоОстаток КАК КоличествоОстатокДоп,
				|	КешВсеДокументы.Количество КАК КоличествоДоп,
				|	КешВсеДокументы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоп,
				|	КешВсеДокументы.Упаковка КАК УпаковкаДоп,
				|	КешВсеДокументы.Цена КАК ЦенаДоп,
				|	КешВсеДокументы.DDP КАК DDPДоп,
				|	КешВсеДокументы.Назначение КАК НазначениеДоп
				|ИЗ
				|	КешНоменклатура КАК КешНоменклатура
				|		
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешВсеДокументы КАК КешВсеДокументы
				|ПО КешНоменклатура.Номенклатура 	= КешВсеДокументы.Номенклатура
				|И КешНоменклатура.Упаковка		 	= КешВсеДокументы.Упаковка

				|ИТОГИ
				|	МАКСИМУМ(Код),
				|	МАКСИМУМ(Артикул),
				|	МАКСИМУМ(ЕдиницаИзмерения),
				|	МАКСИМУМ(Упаковка),
				|	МАКСИМУМ(Количество),
				|	МАКСИМУМ(Цена)
				|ПО
				|	Номенклатура";
Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТекстЗапросаДублиНоменклатурыВЗП ()

#КонецОбласти 

#Область СведенияОВнешнейОбработке
Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.1.01";

	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Перебивка заказа поставщика");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Перебивка заказа поставщика [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Перебивка заказа поставщика [" + Версия + "]", "МАК", "ОткрытиеФормы", Ложь, "МАК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков
// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти
