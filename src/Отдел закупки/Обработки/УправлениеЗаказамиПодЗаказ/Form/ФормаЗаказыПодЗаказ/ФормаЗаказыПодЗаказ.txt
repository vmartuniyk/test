#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаУточнениеАктуальности");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	ВерсияСчетчикНоменклатуры = ПолучитьВерсиюБибилиотеки("Счетчик номенклатуры");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияСчетчикНоменклатуры, "0.0.001", НСтр("ru='Для теста необходимо подключить библиотеку «Счетчик номенклатуры» версии 0.0.001 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Номенклатура».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Склады\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Склады».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Организации\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Организации».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

#Область ПроверкаУточнениеАктуальности

// Тест для задачи http://r.ktc-ua.com/issues/4934
//
&НаКлиенте
Процедура Тест_ПроверкаУточнениеАктуальности(Параметр) Экспорт

	ДанныеДляТестирования = СоздатьДанныеУточнниеАктуальности();
	
	УдалитьДанныеУточнениеАктуальности(ДанныеДляТестирования);

КонецПроцедуры // Тест_ПроверкаУточненияАктуальности()

&НаСервереБезКонтекста
Функция СоздатьДанныеУточнниеАктуальности()

	ДанныеДляТестирования = Новый Структура;
	
	Номенклатура 	= СоздатьНоменклатуру();
	Склад		 	= СоздатьСклад();
	Организация		= СоздатьОрганизацию();
	
	ДанныеДляТестирования.Вставить("Номенклатура", Номенклатура);
	ДанныеДляТестирования.Вставить("Склад", Склад);
	ДанныеДляТестирования.Вставить("Организация", Организация);
	
	Возврат ДанныеДляТестирования;

КонецФункции // СоздатьДанныеУточнниеАктуальности()

&НаСервереБезКонтекста
Процедура УдалитьДанныеУточнениеАктуальности(ДанныеДляТестирования)

	Если ТипЗнч(ДанныеДляТестирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
#Область УничтожениеСправочников

	Если ДанныеДляТестирования.Свойство("Номенклатура") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Номенклатура.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Склад") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Склад.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Организация") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Организация.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

#КонецОбласти

КонецПроцедуры // УдалитьДанныеУточнениеАктуальности()

#КонецОбласти 

#Область Справочники

&НаСервереБезКонтекста
Функция СоздатьНоменклатуру()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				Наименование);   
	ПараметрыЗаполнения.Вставить("ИспользоватьУпаковки",		Ложь);
	ПараметрыЗаполнения.Вставить("ИспользоватьСерийныеНомера",	Истина);
	
	Бибилиотека = ПолучитьБиблиотекуНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

&НаСервереБезКонтекста
Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

&НаСервереБезКонтекста
Функция СоздатьОрганизацию()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Организация");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуОрганизации();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьОрганизацию()

#КонецОбласти

#Область Библиотеки

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

&НаКлиенте
Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

&НаСервереБезКонтекста
Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуОрганизации()
	ПутьКБиблиотеке = "\tests\Справочники\Организации\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуОрганизации()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеЗапасами_ИсточникЗапроса = 0;
	
	//Отчеты и обработки
	ИнициализироватьМенюДополнительныеОтчетыИОбработки();
	
	ДвиженияПоНазначению.Параметры.УстановитьЗначениеПараметра("Назначение", Неопределено);
	ДвиженияПоНазначению.Параметры.УстановитьЗначениеПараметра("Номенклатура", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	ВходнаяЦена = ?(Выборка.Следующий(), Выборка.ВидЦены, Неопределено);
	АвторизированныйПользователь  = ПараметрыСеанса.ТекущийПользователь;
	АвторизированноеПодразделение = АвторизированныйПользователь.ТекущееПодразделение;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Результат = Вопрос(НСтр("ru = 'Завершить работу с обработкой?'"), РежимДиалогаВопрос.ДаНет);
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура УправлениеЗапасами_ИсточникЗапросаПриИзменении(Элемент)
	
	УправлениеЗапасами_ВидыНоменклатурыПриАктивизацииСтроки(Элементы.УправлениеЗапасами_ВидыНоменклатуры);
	
КонецПроцедуры


&НаКлиенте
Процедура УправлениеЗапасами_ВидыНоменклатурыПриАктивизацииСтроки(Элемент, СтруктураПередачи = Неопределено)
	
	Загрузить_УправлениеЗапасамиСервер(Элемент.ТекущаяСтрока, СтруктураПередачи);
	
КонецПроцедуры


&НаКлиенте
Процедура УправлениеЗапасамиПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
		УправлениеЗапасамиПриАктивизацииСтрокиСервер(ТекущиеДанные.Назначение, ТекущиеДанные.Номенклатура,  ТекущиеДанные.Склад);
	Иначе
		УправлениеЗапасамиПриАктивизацииСтрокиСервер();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элемент.ТекущийЭлемент;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ИмяКолонки = ТекущийЭлементТЗ.Имя;
		Если  ИмяКолонки = "УправлениеЗапасамиАктуальноеСоглашение" Тогда ОткрытьЗначение(ТекущиеДанные.АктуальноеСоглашение);
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиЗаказ"  				Тогда ОткрытьЗначение(ТекущиеДанные.Заказ);
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиНоменклатура"  		Тогда ОткрытьЗначение(ТекущиеДанные.Номенклатура);
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиВПеремещениях" 		Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, "ОтчетПоОжидаемымТоварам");
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиВНаличииОпт"      	Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, "ОтчетПоОстаткам");
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиВНаличииРоз"      	Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, "ОтчетПоОстаткам");
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиСрокПоставки" 		Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, "ОтчетПоЦенамПоставщиков");
		ИначеЕсли ИмяКолонки = "УправлениеЗапасамиСвободноеОжидание" 	Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, "ОтчетПоСвободнымОжидаемымТоварам");
	
			
			
		КонецЕсли;          
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЕстьНаСкладахПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьНаСкладахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ДвиженияПоНазначениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОформитьДокументыНаТоварыВНаличии(Команда)
	ОформитьДокументыНаТоварыВНаличииСервер();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасами_СоздатьЗаказПоставщику(Команда)
	УправлениеЗапасами_СоздатьЗаказПоставщикуСервер();	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщика(Команда)
	УправлениеЗапасами_ВидыНоменклатурыПриАктивизацииСтроки(Элементы.УправлениеЗапасами_ВидыНоменклатуры);
	СписокДокументов.Очистить();
	
	УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаНаКлиенте(Элементы.УправлениеЗапасами_ВидыНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаНаКлиенте(Элемент, СтруктураПередачи = Неопределено)
	УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаНаСервере(Элемент.ТекущаяСтрока, СтруктураПередачи);
КонецПроцедуры



&НаСервере
Процедура УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаНаСервере(СсылкаНаВидНоменклатуры,СтруктураПередачи)
	Загрузить_УправлениеЗапасамиСервер(СсылкаНаВидНоменклатуры, СтруктураПередачи);
	
	ЗаказыПоставщиков = УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаСервер();	
	
	Для Каждого Элемент из ЗаказыПоставщиков Цикл 
		ИтогКоличество 	= Элемент.Значение;
		ЗаказСсылка		= Элемент.Ключ;
		ЗаполнитьНазначенияВЗаказеПостащика(ЗаказСсылка, ИтогКоличество);
		ОбщКоличество   = ЗаказПоставщикуТовары.Итог("КоличествоУпаковок");
		Если ОбщКоличество		=	ИтогКоличество Тогда  
			СтруктураДействий 	= 	Новый Структура;
			
			ЗаполнитьСтруктуруДействия(СтруктураДействий, ЗаказСсылка);
			Для Каждого СтрокаТЧ Из ЗаказПоставщикуТовары Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда 	
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		        КонецЕсли;
			
				Если СтрокаТЧ.Флаг Тогда 
					СтарыйНомерСтроки	 = СтрокаТЧ.НомерСтроки;
					СтрокаТЧ.КодСтроки	 = Новый УникальныйИдентификатор();
					Если СтрокаТЧ.DDP Тогда
						ПерезаполнитьDDP(СтрокаТЧ,ЗаказСсылка);
					Иначе 
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, );
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			ЗаписатьДокументНаСервере(ЗаказСсылка, ИтогКоличество);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры  //УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщика()


&НаСервере
Процедура ПерезаполнитьDDP(ТекущаяСтрока,Заказ)

	УслугаDDP 				= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("8014b949-4cca-4dc2-808e-e6fb286406d2"));
	
	
	КурсыВалюты 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("f255395e-a9e2-11e3-80c2-001e676b0174")), Заказ.Дата);
	КурсDDP 		= КурсыВалюты.Курс;				
	
	КурсыВалюты		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), Заказ.Дата);
	КурсУпр 		= КурсыВалюты.Курс;	
	
	Если Заказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС И Не Заказ.ЦенаВключаетНДС  Тогда 
			ТекПроцентНДС		= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			СуммаНДС 			= ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.СуммаСDDP, ТекПроцентНДС, Не Заказ.ЦенаВключаетНДС);
			ТекущаяСтрока.Цена	= (ТекущаяСтрока.СуммаСDDP-СуммаНДС)/ТекущаяСтрока.ОбщееКоличество;
	Иначе 
			ТекущаяСтрока.Цена	= ТекущаяСтрока.СуммаСDDP/ТекущаяСтрока.ОбщееКоличество;
	КонецЕсли; 
	ПриИзменениеЦеныОбработатьСтрокуТЧ(ТекущаяСтрока,Заказ);
	ТекущаяСтрока.СуммаСDDP 			= ТекущаяСтрока.СуммаСНДС;
	ТекущаяСтрока.Цена  				= ТекущаяСтрока.Цена*КурсDDP/КурсУпр;
	ПриИзменениеЦеныОбработатьСтрокуТЧ(ТекущаяСтрока,Заказ);
	ТекущаяСтрока.КурсоваяРазницаDDP 	= ТекущаяСтрока.СуммаСDDP - ТекущаяСтрока.СуммаСНДС;
КонецПроцедуры // ПерезаполнитьDDP()

Процедура ПриИзменениеЦеныОбработатьСтрокуТЧ(ТекущаяСтрока,Заказ)
	СтруктураДействий	= Новый Структура;	
	ЗаполнитьСтруктуруДействий(СтруктураДействий,Заказ);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
КонецПроцедуры	
	
Процедура ЗаполнитьСтруктуруДействий(СтруктураДействий,Заказ)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
КонецПроцедуры


&НаСервере
Процедура ЗаписатьДокументНаСервере(ЗаказПоставщику,ИтогКоличество)

	НачатьТранзакцию();
	Для Каждого Элемент Из ЗаказПоставщикуТовары Цикл 
		Если Элемент.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда 
			Продолжить;
		КонецЕсли;
		ЗаказКлиента = Элемент.Назначение.Заказ;
		СкладСоборная = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85"));
		
		Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда 
			Продолжить;
		КонецЕсли;
		
			Склад		 = ЗаказКлиента.Склад;
			Если Склад = СкладСоборная  Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Элемент.КоличествоУпаковок = 0 Или  Элемент.Количество = 0  Тогда
				 ОтменитьТранзакцию();
				 Возврат;
			КонецЕсли;

			 
			 СкладПолучатель = Склад;
			 
			 ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
				ЗаказНаПеремещение.ДокументОснование		= ЗаказКлиента;
				ЗаполнитьЗначенияСвойств(ЗаказНаПеремещение, ЗаказКлиента);				
				ЗаказНаПеремещение.Дата						= ТекущаяДата();
				ЗаказНаПеремещение.Назначение				= Неопределено;
				ЗаказНаПеремещение.УстановитьНовыйНомер();
				ЗаказНаПеремещение.Ответственный    		= АвторизированныйПользователь;
				ЗаказНаПеремещение.Подразделение    		= АвторизированноеПодразделение;
				ЗаказНаПеремещение.СкладОтправитель 		= СкладСоборная;
				ЗаказНаПеремещение.СкладПолучатель  		= СкладПолучатель;
				
				
				ЗаказНаПеремещение.Статус           		= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
				ЗаказНаПеремещение.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
				
					НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);	
					НоваяСтрока.КодСтроки 			 = Новый УникальныйИдентификатор();
					НоваяСтрока.Упаковка             = Элемент.Номенклатура.ЕдиницаИзмерения;
					НоваяСтрока.ВариантОбеспечения	 = Перечисления.ВариантыОбеспечения.ПодЗаказ;
					НоваяСтрока.НачалоОтгрузки		 = ТекущаяДата();
					НоваяСтрока.ОкончаниеПоступления = ТекущаяДата();
					
				ЗаказНаПеремещение.Комментарий = "Автоматическое создание документа из УЗ";	
				
				Попытка
					ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
					
					НоваяЗаписьСписок = СписокДокументов.Добавить();
					НоваяЗаписьСписок.ИндентификаторКартинки = 0;
					ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказНаПеремещение);
				Исключение
					Элемент.Назначение = Справочники.Назначения.ПустаяСсылка();
				КонецПопытки;
		КонецЦикла;
		
		
	ОбщКоличество   = ЗаказПоставщикуТовары.Итог("КоличествоУпаковок");
	Если ОбщКоличество		=	ИтогКоличество Тогда  
		Попытка
			ЗаказОбъект 	= 	ЗаказПоставщику.ПолучитьОбъект();
			Товары 			= 	ЗаказОбъект.Товары; 
			Товары.Загрузить(ЗаказПоставщикуТовары.Выгрузить());
			
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			НоваяЗаписьСписок = СписокДокументов.Добавить();
			НоваяЗаписьСписок.ИндентификаторКартинки = 0;
			ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказОбъект);
			ЗафиксироватьТранзакцию();
		Исключение 
			ОтменитьТранзакцию();
		КонецПопытки;
	Иначе 
		ОтменитьТранзакцию();
	КонецЕсли; 
	

КонецПроцедуры
		
&НаКлиенте
Процедура ЗапуститьОбработкуОтчет(Команда)
	
	ВнешнийУникальныйИдентификатор = СтрЗаменить(СтрЗаменить(Команда.Имя, "uid", ""), "_", "-");
	ИмяОбработкиОтчета = ИнициализироватьДополнительныеОтчетыИОбработки(ВнешнийУникальныйИдентификатор);
	Если ИмяОбработкиОтчета = Неопределено Тогда Возврат; КонецЕсли;
	ОткрытьФорму(ИмяОбработкиОтчета + ".Форма", , , Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасами_Обновить(Команда)
	
	УправлениеЗапасами_ВидыНоменклатурыПриАктивизацииСтроки(Элементы.УправлениеЗапасами_ВидыНоменклатуры);
	СписокДокументов.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасами_СортироватьПоУбыванию(Команда)
	
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("УправлениеЗапасами");
	Если НЕ СтруктураПередачи.Отказ Тогда
		УправлениеЗапасами_Сортировка_Направление = " Убыв";
		УправлениеЗапасами_ВидыНоменклатурыПриАктивизацииСтроки(Элементы.УправлениеЗапасами_ВидыНоменклатуры, СтруктураПередачи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗапасами_СортироватьПоВозростанию(Команда)
	
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("УправлениеЗапасами");
	Если НЕ СтруктураПередачи.Отказ Тогда
		УправлениеЗапасами_Сортировка_Направление = " Возр";
		УправлениеЗапасами_ВидыНоменклатурыПриАктивизацииСтроки(Элементы.УправлениеЗапасами_ВидыНоменклатуры, СтруктураПередачи);
	КонецЕсли;
	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ИнициализироватьМенюДополнительныеОтчетыИОбработки()
	
	Library = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	ДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ДополнительныйОтчет		= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДополнительныйОтчетИлиОбработка 	КАК ДОТ,
	|	ДополнительныйОтчетИлиОбработка.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам
	|ГДЕ
	|	Доступно
	|И 	Пользователь = &ТекущийПользователь
	|И 	НЕ ДополнительныйОтчетИлиОбработка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяКоманды = "uid" + СтрЗаменить(Выборка.ДОТ.УникальныйИдентификатор(), "-", "_");
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Имя", 		ИмяКоманды);
		ПараметрыКоманды.Вставить("Действие", 	"ЗапуститьОбработкуОтчет");
		Попытка
			Library.ДобавитьКомандуВКоллекциюКомандФормы(Команды, ПараметрыКоманды);
		Исключение
			Сообщить(ИмяКоманды + Символы.ПС + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("Имя", 		ИмяКоманды);
		ПараметрыКнопки.Вставить("Вид", 		ВидКнопкиФормы.КнопкаКоманднойПанели);
		ПараметрыКнопки.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
		ПараметрыКнопки.Вставить("ИмяКоманды", 	ИмяКоманды);
		ПараметрыКнопки.Вставить("Заголовок", 	Выборка.ДОТ.Наименование);
		Попытка
			Если 	  Выборка.Вид = ДополнительнаяОбработка Тогда
				Library.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопки, Элементы.Обработки);	
			ИначеЕсли Выборка.Вид = ДополнительныйОтчет Тогда
				Library.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопки, Элементы.Отчеты);
			КонецЕсли;
		Исключение
			Сообщить(ИмяКоманды + Символы.ПС + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ИнициализироватьДополнительныеОтчетыИОбработки(UID)
	Возврат РеквизитФормыВЗначение("Объект").GetLibraryNameByUID(UID);	
КонецФункции


&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонки(ИмяКоллекцииЗначений)
	ТДанные  = Элементы[ИмяКоллекцииЗначений].ТекущиеДанные;
	ТЭлемент = Элементы[ИмяКоллекцииЗначений].ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
	?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
	?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
КонецФункции

&НаСервере
Функция ПолучитьМассивСловОтборИСортировка(АдресноеИмя)
	
	МассивСлов = Новый Массив;
	ЧислоВхождений = СтрЧислоВхождений(АдресноеИмя, "_");
	Если ЧислоВхождений = 0 Тогда
		МассивСлов.Добавить(АдресноеИмя);
	Иначе
		Для Итератор = 0 По ЧислоВхождений - 1 Цикл
			Разделитель = Найти(АдресноеИмя, "_");
			МассивСлов.Добавить(Лев(АдресноеИмя, Разделитель - 1));
			АдресноеИмя = Прав(АдресноеИмя, СтрДлина(АдресноеИмя) - Разделитель);			
		КонецЦикла;
		МассивСлов.Добавить(АдресноеИмя);
	КонецЕсли;
	
	Возврат МассивСлов;
	
КонецФункции

&НаСервере
Процедура СловаОбработаныОтборИСортировка(Итератор, КоличествоСлов, МетаВремЗнч, ВремЗнч, АдресРеквизита)
	Если Итератор + 1 <= КоличествоСлов Тогда 
		МетаВремЗнч = ВремЗнч.Тип.ПривестиЗначение(Неопределено).Метаданные();
		АдресРеквизита = АдресРеквизита + ".";
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура УправлениеЗапасамиПриАктивизацииСтрокиСервер(Назначение = Неопределено, Номенклатура = Неопределено, Склад = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвиженияПоНазначению.Параметры.УстановитьЗначениеПараметра("Назначение", Назначение);
	ДвиженияПоНазначению.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстаткиНаСкладе();
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СкладПолучатель", Склад);
	Запрос.УстановитьПараметр("ЛогистическийЦентр", ЛогистическийЦентр);
	ЕстьНаСкладах.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = ПолучитьТекстЗапросаПоследняяЦенаВхода();
	Выборка = Запрос.Выполнить().Выбрать();
	ПоследняяЗакупка = ?(Выборка.Следующий(), Выборка.Цена, 0);	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаТранзитногоСклада()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	|	СкладыКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ АдресаСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыМаршрутовСкладыОтгрузки.Ссылка КАК Маршрут
	|ПОМЕСТИТЬ МаршрутыОтОтправителя
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
	|ГДЕ
	|	ВариантыМаршрутовСкладыОтгрузки.Склад = &СкладОтправитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	|ГДЕ
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель = &СкладПолучатель
	|	И ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &СкладОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыМаршрутовСписокАдресов.Ссылка КАК Маршрут
	|ПОМЕСТИТЬ МаршрутыКПолучателю
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
	|ГДЕ
	|	ВариантыМаршрутовСписокАдресов.ГородСклад = &СкладПолучатель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	|ГДЕ
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель = &СкладПолучатель
	|	И ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &СкладОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СкладОтправитель КАК СкладОтправитель,
	|	&СкладПолучатель КАК СкладПолучатель,
	|	МаршрутыКПолучателю.Маршрут КАК Маршрут,
	|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута КАК КалендарьМаршрута,
	|	ЕСТЬNULL(СкладыОтгрузки.ПН, СкладыОтгрузкиРезерв.ПН) КАК ПН,
	|	ЕСТЬNULL(СкладыОтгрузки.ВТ, СкладыОтгрузкиРезерв.ВТ) КАК ВТ,
	|	ЕСТЬNULL(СкладыОтгрузки.СР, СкладыОтгрузкиРезерв.СР) КАК СР,
	|	ЕСТЬNULL(СкладыОтгрузки.ЧТ, СкладыОтгрузкиРезерв.ЧТ) КАК ЧТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ПТ, СкладыОтгрузкиРезерв.ПТ) КАК ПТ,
	|	ЕСТЬNULL(СкладыОтгрузки.СБ, СкладыОтгрузкиРезерв.СБ) КАК СБ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВС, СкладыОтгрузкиРезерв.ВС) КАК ВС,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаПН, СкладыОтгрузкиРезерв.ВремяВыездаПН) КАК ВремяВыездаПН,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаВТ, СкладыОтгрузкиРезерв.ВремяВыездаВТ) КАК ВремяВыездаВТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаСР, СкладыОтгрузкиРезерв.ВремяВыездаСР) КАК ВремяВыездаСР,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаЧТ, СкладыОтгрузкиРезерв.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаПТ, СкладыОтгрузкиРезерв.ВремяВыездаПТ) КАК ВремяВыездаПТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаСБ, СкладыОтгрузкиРезерв.ВремяВыездаСБ) КАК ВремяВыездаСБ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаВС, СкладыОтгрузкиРезерв.ВремяВыездаВС) КАК ВремяВыездаВС
	|ПОМЕСТИТЬ МаршрутПрямойДоставки
	|ИЗ
	|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
	|		ПО (МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя
	|		ПО (АдресаСкладаПолучателя.Склад = &СкладПолучатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя
	|		ПО (АдресаСкладаОтправителя.Склад = &СкладОтправитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
	|		ПО (СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут)
	|			И (СкладыОтгрузки.Склад = &СкладОтправитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузкиРезерв
	|		ПО (СкладыОтгрузкиРезерв.Ссылка = МаршрутыКПолучателю.Маршрут)
	|			И (СкладыОтгрузкиРезерв.Склад = &СкладПолучатель)
	|ГДЕ
	|	АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутПрямойДоставки.СкладОтправитель,
	|	МаршрутПрямойДоставки.СкладПолучатель,
	|	МаршрутПрямойДоставки.Маршрут,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|				КОНЕЦ))) КАК ДатаВремяВыезда
	|ИЗ
	|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО (КалендарныеГрафики.Календарь = МаршрутПрямойДоставки.КалендарьМаршрута)
	|			И (КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, ДЕНЬ))
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|				КОГДА 1
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ПН
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 2
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ВТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 3
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.СР
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 4
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ЧТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 5
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ПТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 6
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.СБ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 7
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ВС
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	(&ДатаСеанса < КалендарныеГрафики.ДатаГрафика
	|			ИЛИ ЧАС(&ДатаСеанса) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|				КОНЕЦ)
	|			ИЛИ ЧАС(&ДатаСеанса) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|					КОНЕЦ)
	|				И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|					КОНЕЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутПрямойДоставки.СкладОтправитель,
	|	МаршрутПрямойДоставки.СкладПолучатель,
	|	МаршрутПрямойДоставки.Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаршрутыОтОтправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаршрутыКПолучателю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаршрутПрямойДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыОтгрузки.Ссылка КАК МаршрутТранзит,
	|	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) КАК СкладТранзит
	|ПОМЕСТИТЬ МаршрутыОтОтправителяТранзит
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
	|		ПО (СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка)
	|			И ((ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады)) <> &СкладПолучатель)
	|			И ((ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады)) <> &СкладОтправитель)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
	|		ПО (ДоступныеСклады.Склад = СкладыОтгрузки.Ссылка)
	|			И (ДоступныеСклады.Транзитный)
	|ГДЕ
	|	СкладыОтгрузки.Склад = &СкладОтправитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка,
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	|ГДЕ
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &СкладОтправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СкладОтправитель КАК СкладОтправитель,
	|	СкладыОтгрузки.Склад КАК СкладТранзит,
	|	&СкладПолучатель КАК СкладПолучатель,
	|	МаршрутОтОтправителя.МаршрутТранзит КАК МаршрутОтОтправителя,
	|	МаршрутОтОтправителя.МаршрутТранзит.КалендарьМаршрута КАК КалендарьМаршрутаОтОтправителя,
	|	СкладыОтгрузки.Ссылка КАК МаршрутКПолучателю,
	|	СкладыОтгрузки.Ссылка.КалендарьМаршрута КАК КалендарьМаршрутаКПолучателю,
	|	СкладыТранзита.ПН,
	|	СкладыТранзита.ВТ,
	|	СкладыТранзита.СР,
	|	СкладыТранзита.ЧТ,
	|	СкладыТранзита.ПТ,
	|	СкладыТранзита.СБ,
	|	СкладыТранзита.ВС,
	|	СкладыТранзита.ВремяВыездаПН,
	|	СкладыТранзита.ВремяВыездаВТ,
	|	СкладыТранзита.ВремяВыездаСР,
	|	СкладыТранзита.ВремяВыездаЧТ,
	|	СкладыТранзита.ВремяВыездаПТ,
	|	СкладыТранзита.ВремяВыездаСБ,
	|	СкладыТранзита.ВремяВыездаВС,
	|	СкладыОтгрузки.ПН КАК тПН,
	|	СкладыОтгрузки.ВТ КАК тВТ,
	|	СкладыОтгрузки.СР КАК тСР,
	|	СкладыОтгрузки.ЧТ КАК тЧТ,
	|	СкладыОтгрузки.ПТ КАК тПТ,
	|	СкладыОтгрузки.СБ КАК тСБ,
	|	СкладыОтгрузки.ВС КАК тВС,
	|	СкладыОтгрузки.ВремяВыездаПН КАК тВремяВыездаПН,
	|	СкладыОтгрузки.ВремяВыездаВТ КАК тВремяВыездаВТ,
	|	СкладыОтгрузки.ВремяВыездаСР КАК тВремяВыездаСР,
	|	СкладыОтгрузки.ВремяВыездаЧТ КАК тВремяВыездаЧТ,
	|	СкладыОтгрузки.ВремяВыездаПТ КАК тВремяВыездаПТ,
	|	СкладыОтгрузки.ВремяВыездаСБ КАК тВремяВыездаСБ,
	|	СкладыОтгрузки.ВремяВыездаВС КАК тВремяВыездаВС
	|ПОМЕСТИТЬ МаршрутыКПолучателюТранзит
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителяТранзит КАК МаршрутОтОтправителя
	|		ПО (МаршрутОтОтправителя.СкладТранзит = СкладыОтгрузки.Склад)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
	|		ПО (СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка)
	|			И ((ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады)) = &СкладПолучатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита
	|		ПО (СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит)
	|			И (СкладыТранзита.Склад = &СкладОтправитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя
	|		ПО (АдресаСкладаПолучателя.Склад = &СкладПолучатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаТранзита
	|		ПО (АдресаСкладаТранзита.Склад = СкладыОтгрузки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя
	|		ПО (АдресаСкладаОтправителя.Склад = &СкладОтправитель)
	|ГДЕ
	|	АдресаСкладаОтправителя.Представление <> АдресаСкладаПолучателя.Представление
	|	И АдресаСкладаОтправителя.Представление <> АдресаСкладаТранзита.Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафикиОтправителя.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|				КОНЕЦ))) КАК ДатаВремяВыездаОтОтправителя
	|ПОМЕСТИТЬ ТаблицаПрибытияНаТранзитныйСклад
	|ИЗ
	|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиОтправителя
	|		ПО (КалендарныеГрафикиОтправителя.Календарь = МаршрутыКПолучателюТранзит.КалендарьМаршрутаОтОтправителя)
	|			И (КалендарныеГрафикиОтправителя.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, ДЕНЬ))
	|			И (КалендарныеГрафикиОтправителя.ДеньВключенВГрафик)
	|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|				КОГДА 1
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ПН
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 2
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ВТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 3
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.СР
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 4
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ЧТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 5
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ПТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 6
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.СБ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 7
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ВС
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	(&ДатаСеанса < КалендарныеГрафикиОтправителя.ДатаГрафика
	|			ИЛИ ЧАС(&ДатаСеанса) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|				КОНЕЦ)
	|			ИЛИ ЧАС(&ДатаСеанса) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|					КОНЕЦ)
	|				И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|					КОНЕЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит,
	|	МаршрутыКПолучателюТранзит.СкладПолучатель,
	|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафикиПолучателя.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|				КОНЕЦ))) КАК ДатаВремяВыездаКПолучателю
	|ПОМЕСТИТЬ ВариантыТранзитов
	|ИЗ
	|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрибытияНаТранзитныйСклад КАК ТаблицаПрибытияНаТранзитныйСклад
	|		ПО (ТаблицаПрибытияНаТранзитныйСклад.МаршрутОтОтправителя = МаршрутыКПолучателюТранзит.МаршрутОтОтправителя)
	|			И (ТаблицаПрибытияНаТранзитныйСклад.СкладТранзит = МаршрутыКПолучателюТранзит.СкладТранзит)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиПолучателя
	|		ПО (КалендарныеГрафикиПолучателя.Календарь = МаршрутыКПолучателюТранзит.КалендарьМаршрутаКПолучателю)
	|			И (КалендарныеГрафикиПолучателя.ДатаГрафика >= НАЧАЛОПЕРИОДА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя, ДЕНЬ))
	|			И (КалендарныеГрафикиПолучателя.ДеньВключенВГрафик)
	|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|				КОГДА 1
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тПН
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 2
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тВТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 3
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тСР
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 4
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тЧТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 5
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тПТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 6
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тСБ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 7
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тВС
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя < КалендарныеГрафикиПолучателя.ДатаГрафика
	|			ИЛИ ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|				КОНЕЦ)
	|			ИЛИ ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|					КОНЕЦ)
	|				И МИНУТА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|					КОНЕЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит,
	|	МаршрутыКПолучателюТранзит.СкладПолучатель,
	|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВариантыТранзитов.ДатаВремяВыездаКПолучателю) КАК ДатаВремяВыездаКПолучателю
	|ПОМЕСТИТЬ КраткаяДоставкаТранзита
	|ИЗ
	|	ВариантыТранзитов КАК ВариантыТранзитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыТранзитов.СкладОтправитель,
	|	ВариантыТранзитов.МаршрутОтОтправителя,
	|	ВариантыТранзитов.ДатаВремяВыездаОтОтправителя,
	|	ВариантыТранзитов.СкладТранзит,
	|	ВариантыТранзитов.СкладПолучатель,
	|	ВариантыТранзитов.МаршрутКПолучателю,
	|	ВариантыТранзитов.ДатаВремяВыездаКПолучателю
	|ИЗ
	|	ВариантыТранзитов КАК ВариантыТранзитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КраткаяДоставкаТранзита КАК КраткаяДоставкаТранзита
	|		ПО (КраткаяДоставкаТранзита.ДатаВремяВыездаКПолучателю = ВариантыТранзитов.ДатаВремяВыездаКПолучателю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыТранзитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КраткаяДоставкаТранзита
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АдресаСкладов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаршрутыОтОтправителяТранзит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаршрутыКПолучателюТранзит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПрибытияНаТранзитныйСклад";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаТранзитногоСклада()




&НаСервере
Процедура УправлениеЗапасами_УстановитьЗначенияСортировки(ПолеСортировки, ИмяЭлемента)
	
	Если 	  ИмяЭлемента = "Заказ"     				Тогда ПолеСортировки = "ОбеспечениеЗаказов.Назначение.Заказ";
	ИначеЕсли ИмяЭлемента = "Номенклатура"    			Тогда ПолеСортировки = "СпрНоменклатура.Номенклатура";
	ИначеЕсли ИмяЭлемента = "КоличествоКЗаказу" 		Тогда ПолеСортировки = "IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) - IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0)";
	ИначеЕсли ИмяЭлемента = "ЦенаВЗаказе"				Тогда ПолеСортировки = "ОстаткиЗаказов.ЦенаВЗаказе";
		//ИначеЕсли ИмяЭлемента = "ДатаАктуальности"      				Тогда ПолеСортировки = "ЗаказыКлиентов.ДатаАктуальности";
		//ИначеЕсли ИмяЭлемента = "ВНаличии" 								Тогда ПолеСортировки = "(IsNull(ННОС.ВНаличии, 0) + IsNull(ННРС.ВНаличии, 0))";
		//ИначеЕсли ИмяЭлемента = "ВПеремещениях" 						Тогда ПолеСортировки = "(IsNull(ННОС.ВПеремещениях, 0) + IsNull(ННРС.ВПеремещениях, 0))";
		//ИначеЕсли ИмяЭлемента = "ВЗаказахПоставщику" 					Тогда ПолеСортировки = "(IsNull(ННОС.ВЗаказахПоставщику, 0) + IsNull(ННРС.ВЗаказахПоставщику, 0))";
		//ИначеЕсли ИмяЭлемента = "СоглашениеПоставщика" 					Тогда ПолеСортировки = "IsNull(КОформлениюНарастающие.ЗаказПоставщику.Соглашение, ЗаказыКлиентов.СоглашениеСПоставщиком)";
		//ИначеЕсли ИмяЭлемента = "ЦенаВЗаказеПоставщика" 				Тогда ПолеСортировки = "IsNull(КОформлениюНарастающие.ЦенаВЗаказеПоставщика, ЗаказыКлиентов.ЦенаВЗаказеПоставщика)";
		//ИначеЕсли ИмяЭлемента = "ДатаПоступления" 						Тогда ПолеСортировки = "КОформлениюНарастающие.ДатаПоступления";
		//ИначеЕсли ИмяЭлемента = "НужноЗаказать" 						Тогда ПолеСортировки = "ОстаткиНарастающие.НужноЗаказать";
	ИначеЕсли ИмяЭлемента = "ОтметитьДляЗаказа" 		Тогда ПолеСортировки = "";
	ИначеЕсли ИмяЭлемента = "ФиксаторКолонок" 			Тогда ПолеСортировки = "";
		//ИначеЕсли Найти(ИмяЭлемента, "ЗаказПоставщику")    = 1 Тогда ПолеСортировки = "ОстаткиПоЗаказам." + ИмяЭлемента;
		//ИначеЕсли Найти(ИмяЭлемента, "ЗаказКлиента") 	     = 1 Тогда ПолеСортировки = "ОстаткиПоЗаказам." + ИмяЭлемента;
	ИначеЕсли Найти(ИмяЭлемента, "Номенклатура") = 1 	Тогда ПолеСортировки = "СпрНоменклатура." + ИмяЭлемента;
	ИначеЕсли Найти(ИмяЭлемента, "СоглашениеПоставщика") = 1 Тогда ПолеСортировки = "Заказы.СоглашениеСПоставщиком";
	ИначеЕсли Найти(ИмяЭлемента, "АктуальноеСоглашение") = 1 Тогда ПолеСортировки = "Actuality.АктуальноеСоглашение";
	Иначе ПолеСортировки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Загрузить_УправлениеЗапасамиСервер(СсылкаНаВидНоменклатуры, СтруктураПередачи)
	
	Перем ВремЗнч;	
	УстановитьПривилегированныйРежим(Истина);
	
	//Запоминаем текущую строку
	ТекущаяСтрока = Элементы.УправлениеЗапасами.ТекущаяСтрока;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = УправлениеЗапасами.НайтиПоИдентификатору(ТекущаяСтрока);
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ СтруктураПередачи = Неопределено Тогда
		ПолноеИмя 	= СтрЗаменить(СтруктураПередачи.Имя, "УправлениеЗапасами", "");
		ТДанные 	= УправлениеЗапасами.НайтиПоИдентификатору(СтруктураПередачи.Идентификатор);
		ЭтоАддон 	= ТДанные.Свойство(ПолноеИмя);
		Если НЕ ЭтоАддон Тогда
			Разделитель	= Найти(ПолноеИмя, "_");
			ИмяОбъекта 	= Лев(ПолноеИмя, Разделитель - 1);
			АдресноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - Разделитель);
			Если НЕ ТДанные.Свойство(ИмяОбъекта, ВремЗнч) Тогда
				//ВывестиСообщениеПользователю("Возникла неизвестная ошибка. В таблице нет данных о имени: " + ИмяОбъекта + " сообщите в службу поддержки");
				Возврат;
			КонецЕсли;
			
			Если Найти(XMLТипЗнч(ВремЗнч).ИмяТипа, "Ref") = 0 Тогда
				//ВывестиСообщениеПользователю("Возникла неизвестная ошибка. Метаданные не определены: " + ИмяОбъекта + " сообщите в службу поддержки");
				Возврат;
			КонецЕсли;
			
			МассивСлов = ПолучитьМассивСловОтборИСортировка(АдресноеИмя);
			
			АдресноеИмя = "";
			КолСлов		= МассивСлов.Количество() - 1;
			МетаВремЗнч = ВремЗнч.Метаданные();
			Для Итератор = 0 По КолСлов Цикл
				ВремСлв = МассивСлов[Итератор];
				ВремЗнч = МетаВремЗнч.Реквизиты.Найти(ВремСлв);
				Если НЕ ВремЗнч = Неопределено Тогда
					АдресноеИмя = АдресноеИмя + ВремСлв;
					СловаОбработаныОтборИСортировка(Итератор, КолСлов, МетаВремЗнч, ВремЗнч, АдресноеИмя);
				Иначе
					Попытка 
						ВремЗнч = МетаВремЗнч.СтандартныеРеквизиты[ВремСлв];
						АдресноеИмя = АдресноеИмя + ВремСлв;
						СловаОбработаныОтборИСортировка(Итератор, КолСлов, МетаВремЗнч, ВремЗнч, АдресноеИмя);
					Исключение
						МассивСлов[Итератор + 1] = ВремСлв + "_" + МассивСлов[Итератор + 1];  
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		УправлениеЗапасами_УстановитьЗначенияСортировки(УправлениеЗапасами_Сортировка_Поле, ?(ЭтоАддон, ПолноеИмя, ИмяОбъекта + "." + АдресноеИмя));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаУправлениеЗапасами(СсылкаНаВидНоменклатуры);
	Запрос.УстановитьПараметр("НачалоДня", 			НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СкладОпт", 			Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("bc38ba81-d92e-11e0-8b5f-001517115d85")));
	Запрос.УстановитьПараметр("СкладСоборная", 		Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ВалютаУпрУчета",		Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ЛогистическийЦентр", ЛогистическийЦентр);
	Запрос.УстановитьПараметр("ВидНоменклатуры",	СсылкаНаВидНоменклатуры);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	УправлениеЗапасами.Загрузить(РезультатПакета[6].Выгрузить());
	
	
	//Востанавливаем курсор на нужный документ, если он не пропал из выгрузки	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = УправлениеЗапасами.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда 
			Элементы.УправлениеЗапасами.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



&НаСервере
Функция ПолучитьТекстЗапросаУправлениеЗапасами(СсылкаНаВидНоменклатуры)
	
	ТекстЗапроса = "
	//////////////////////////////////////////////////////////////////////////////////////////
	// 0. Кеш основных складов
	|ВЫБРАТЬ 
	|	Склад			КАК Склад,
	|	Склад.Календарь	КАК Календарь
	|ПОМЕСТИТЬ СпрСклады 
	|ИЗ 
	|	РегистрСведений.Модуль_ДоступныеСклады 
	|ГДЕ 
	|	Основной = Истина
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	//////////////////////////////////////////////////////////////////////////////////////////
	// 1. Кеш номенклатуры
	|ВЫБРАТЬ
	|	Номенклатура
	|ПОМЕСТИТЬ СпрНоменклатура
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, %ВидНоменклатуры% Склад В (ВЫБРАТЬ Склад ИЗ СпрСклады ГДЕ Склад НЕ В (&СкладОпт, &СкладСоборная))) 											
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, %ВидНоменклатуры% Склад В (ВЫБРАТЬ Склад ИЗ СпрСклады ГДЕ Склад В (&СкладОпт, &СкладСоборная))) 											
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	Номенклатура
	|;
	/////////////////////////////////////////////////////////////////////////////////////////
	// 2. Ожидаемий товар без назначения
	|ВЫБРАТЬ
	|		ТоварыКПоступлениюОстатки.Номенклатура,
	|		СУММА(ЗаказПоставщикуТовары.Количество) КАК СвободноеОжидание
	|Поместить НоменклатураСвободноеОжидание
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|					,
	|					ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|                       И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
	|						И Склад = &СкладСоборная) КАК ТоварыКПоступлениюОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|				ПО (ТоварыКПоступлениюОстатки.ДокументПоступления =	ЗаказПоставщикуТовары.Ссылка)
	|					И (ТоварыКПоступлениюОстатки.Номенклатура 	  =	ЗаказПоставщикуТовары.Номенклатура)
	|	ГДЕ
	|		ЗаказПоставщикуТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыКПоступлениюОстатки.Номенклатура
	|	ИНДЕКСИРОВАТЬ ПО
	|		ТоварыКПоступлениюОстатки.Номенклатура
	|;
	//////////////////////////////////////////////////////////////////////////////////////////
	// 3. Кеш актуальности
	|ВЫБРАТЬ
	|	Actuality.Номенклатура					КАК Номенклатура,
	|	СпрСклады.Склад							КАК Склад,
	|	Actuality.СоглашениеСПоставщиком        КАК АктуальноеСоглашение,
	|	Actuality.Актуально						КАК Актуально,
	|	Actuality.ГарантияДоставки				КАК ГарантияДоставки,
	|	МИНИМУМ(КалендарьДоставок.ДатаГрафика) 	КАК СрокПоставки
	|ПОМЕСТИТЬ Actuality
	|ИЗ
	|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК Actuality
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ СпрСклады КАК СпрСклады
	|ПО	Истина
	|						
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК КонтрольОстатков
	|ПО	КонтрольОстатков.Склад 	   	  = СпрСклады.Склад
	|И	КонтрольОстатков.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарьДоставок 
	|ПО	КалендарьДоставок.Календарь = СпрСклады.Календарь
	|И	ДобавитьКДате(Actuality.ДатаПоставки, День, КонтрольОстатков.СрокПоставки) <= КалендарьДоставок.ДатаГрафика 
	|И  	КалендарьДоставок.ДеньВключенВГрафик 
	|
	|СГРУППИРОВАТЬ ПО
	|	Actuality.Номенклатура,
	|	СпрСклады.Склад,
	|	Actuality.СоглашениеСПоставщиком,
	|	Actuality.Актуально,
	|   Actuality.ГарантияДоставки
	|;
	//////////////////////////////////////////////////////////////////////////////////////////
	// 4. Цена в заказе клиента
	|ВЫБРАТЬ
	|	ОстаткиЗаказов.Назначение,
	|	ОстаткиЗаказов.Номенклатура,	
	|	СРЕДНЕЕ(ДокументЗаказКлиента.Цена) 	КАК ЦенаВЗаказе			
	|ПОМЕСТИТЬ ОстаткиЗаказов			
	|Из
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ОстаткиЗаказов
	|													 
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ДокументЗаказКлиента
	|ПО  ВЫРАЗИТЬ(ОстаткиЗаказов.Назначение.Заказ КАК Документ.ЗаказКлиента) = ДокументЗаказКлиента.Ссылка
	|И	ОстаткиЗаказов.Номенклатура = ДокументЗаказКлиента.Номенклатура	
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗаказов.Номенклатура,
	|	ОстаткиЗаказов.Назначение
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОстаткиЗаказов.Номенклатура,
	|	ОстаткиЗаказов.Назначение		
	|;
	//////////////////////////////////////////////////////////////////////////////////////////
	// 5. Минимальные цены по актуальности
	|ВЫБРАТЬ
	|	Цены.Номенклатура	КАК Номенклатура,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА Цены.Валюта = &ВалютаУпрУчета
	|				ТОГДА Цены.Цена
	|				ИНАЧЕ Цены.Цена * (КурсыВалют.Курс / КурсыВалют.Кратность) / (КурсУпрВалюты.Курс / КурсУпрВалюты.Кратность) 
	|			КОНЕЦ) КАК Цена
	|ПОМЕСТИТЬ КешЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК Цены
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют
	|ПО	КурсыВалют.Валюта = Цены.Валюта	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсУпрВалюты
	|ПО	КурсУпрВалюты.Валюта = &ВалютаУпрУчета
	|И	Истина	
	|	
	|ГДЕ
	|	Цены.Период > &НачалоДня
	|	
	|СГРУППИРОВАТЬ ПО
	|	Цены.Номенклатура		
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Цены.Номенклатура
	|;
	//////////////////////////////////////////////////////////////////////////////////////////
	// 6. Остатки для оптовых клиентов
	|ВЫБРАТЬ
	|	Actuality.АктуальноеСоглашение        				КАК АктуальноеСоглашение,
	|	Actuality.Актуально									КАК Актуально,
	|	Actuality.ГарантияДоставки							КАК ГарантияДоставки,
	|	Actuality.СрокПоставки				 				КАК СрокПоставки,
	|	КешЦен.Цена											КАК МинЦена,
	|	ОбеспечениеЗаказов.Назначение						КАК Назначение,
	|	ОбеспечениеЗаказов.Назначение.Заказ					КАК Заказ,
	|	ОбеспечениеЗаказов.Назначение.Заказ.Комментарий     КАК Комментарий,
	|	ОбеспечениеЗаказов.Склад							КАК Склад,
	|	СпрНоменклатура.Номенклатура						КАК	Номенклатура,
	|	ОстаткиЗаказов.ЦенаВЗаказе                          КАК ЦенаВЗаказе,
	|	IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) 
	| - IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) 	КАК КоличествоКЗаказу,	
	|	IsNull(ОстаткиОпт.ВНаличииОстаток, 0)
	| -	IsNull(ОстаткиОпт.ВРезервеОстаток, 0)   							КАК ВНаличииОпт,
	|  	IsNull(ОстаткиРоз.ВНаличииОстаток, 0)
	| -	IsNull(ОстаткиРоз.ВРезервеОстаток, 0)   							КАК ВНаличииРоз,
	|  	IsNull(ТоварыКПоступлению.КПоступлениюОстаток, 0)	
	| - IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) 	КАК ВПеремещениях,
	|  	IsNull(ОбеспечениеЗаказов.ПотребностьОстаток, 0)					КАК ПотребностьОбесп,
	|  	IsNull(Заказы.ЦенаВЗаказеПоставщика, 0) 							КАК ЦенаПоставщика,
	|	IsNull(Заказы.СоглашениеСПоставщиком, ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)) 	КАК СоглашениеПоставщика,
	|	Заказы.ДатаАктуальности                                                                          	КАК ДатаАктуальности,
	|	ЗНАЧЕНИЕ(Перечисление.КТС_СпособДоставки.Самовывоз)  												КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА ОбеспечениеЗаказов.Склад В (&СкладОпт, &СкладСоборная)
	|		ТОГДА 	ВЫБОР 
	|					КОГДА IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) 
	|  						- IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) <= IsNull(ОстаткиОпт.ВНаличииОстаток, 0) 
	|					 						 											   - IsNull(ОстаткиОпт.ВРезервеОстаток, 0) 
	|					ТОГДА 0
	|					ИНАЧЕ IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) 
	|  						- IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0)
	|				КОНЕЦ
	|		ИНАЧЕ   ВЫБОР 
	|					КОГДА IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) 
	|  						- IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) <= IsNull(ОстаткиОпт.ВНаличииОстаток, 0) 
	|											 											   - IsNull(ОстаткиОпт.ВРезервеОстаток, 0)
	|											 											   + IsNull(ОстаткиРоз.ВНаличииОстаток, 0)
	| 											 											   - IsNull(ОстаткиРоз.ВРезервеОстаток, 0) 
	|					ТОГДА 0
	|					ИНАЧЕ IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) 
	|  						- IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0)
	|				КОНЕЦ
	|	КОНЕЦ КАК НужноЗаказать,
	|IsNull(НоменклатураСвободноеОжидание.СвободноеОжидание,0)  КАК  СвободноеОжидание
	|
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ОбеспечениеЗаказов
	|ПО	ОбеспечениеЗаказов.Номенклатура = СпрНоменклатура.Номенклатура 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиЗаказов КАК ОстаткиЗаказов
	|ПО	ОстаткиЗаказов.Номенклатура = ОбеспечениеЗаказов.Номенклатура
	|И	ОстаткиЗаказов.Назначение 	= ОбеспечениеЗаказов.Назначение		
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Actuality КАК Actuality
	|ПО	Actuality.Номенклатура = СпрНоменклатура.Номенклатура
	|И	Actuality.Склад		   = ОбеспечениеЗаказов.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ТоварыКПоступлениюПодОбеспечение
	|ПО	ТоварыКПоступлениюПодОбеспечение.Номенклатура = СпрНоменклатура.Номенклатура 
	|И	ТоварыКПоступлениюПодОбеспечение.Назначение	  = ОбеспечениеЗаказов.Назначение
	|И	ТоварыКПоступлениюПодОбеспечение.Склад		  = ОбеспечениеЗаказов.Склад	
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
	|											И Склад В (ВЫБРАТЬ Склад ИЗ СпрСклады ГДЕ Склад В (&СкладОпт, &СкладСоборная))) КАК ОстаткиОпт
	|ПО	ОстаткиОпт.Номенклатура = СпрНоменклатура.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
	|											И Склад В (ВЫБРАТЬ Склад ИЗ СпрСклады ГДЕ Склад НЕ В (&СкладОпт, &СкладСоборная))) КАК ОстаткиРоз
	|ПО	ОстаткиРоз.Номенклатура = СпрНоменклатура.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
	|									И Склад = &ЛогистическийЦентр) КАК ОстаткиЛогистическийЦентр
	|ПО	ОстаткиЛогистическийЦентр.Номенклатура = СпрНоменклатура.Номенклатура
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ТоварыКПоступлению
	|ПО	ТоварыКПоступлению.Номенклатура = СпрНоменклатура.Номенклатура
	|И   ТоварыКПоступлению.Склад		= ОбеспечениеЗаказов.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработкаЗаказовКлиентов КАК Заказы
	|ПО  Заказы.ЗаказКлиента = ОбеспечениеЗаказов.Назначение.Заказ
	|И	 Заказы.Номенклатура = ОбеспечениеЗаказов.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСвободноеОжидание КАК НоменклатураСвободноеОжидание
	|ПО  НоменклатураСвободноеОжидание.Номенклатура = СпрНоменклатура.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен
	|ПО  КешЦен.Номенклатура = СпрНоменклатура.Номенклатура
	| 
	| " + ?(УправлениеЗапасами_ИсточникЗапроса = 0, "
	|ГДЕ
	|	IsNull(ОстаткиЛогистическийЦентр.ВНаличииОстаток, 0) 
	| - IsNull(ОстаткиЛогистическийЦентр.ВРезервеОстаток, 0) < IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) 
	|												 		 - IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0)	
	|И 	IsNull(ОбеспечениеЗаказов.КЗаказуОстаток, 0) - IsNull(ТоварыКПоступлениюПодОбеспечение.КПоступлениюОстаток, 0) > 0 ", "") + "
	|
	|УПОРЯДОЧИТЬ ПО " + ?(УправлениеЗапасами_Сортировка_Поле = "", "", УправлениеЗапасами_Сортировка_Поле + УправлениеЗапасами_Сортировка_Направление + ", ") + " СпрНоменклатура.Номенклатура Возр
	|;
	//////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КешЦен;
	|УНИЧТОЖИТЬ СпрСклады;
	|УНИЧТОЖИТЬ Actuality;
	|УНИЧТОЖИТЬ ОстаткиЗаказов;
	|УНИЧТОЖИТЬ СпрНоменклатура;
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидНоменклатуры%", ?(СсылкаНаВидНоменклатуры.Пустая(), "", ?(СсылкаНаВидНоменклатуры.ЭтоГруппа, "Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры) И ", "Номенклатура.ВидНоменклатуры = &ВидНоменклатуры И "))); 
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаУправлениеЗапасами()

&НаСервере
Функция ПолучитьТекстЗапросаПоследняяЦенаВхода()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(Стоимость / Количество КАК Число(15, 2)) КАК Цена
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров
	|ГДЕ
	|	Регистратор Ссылка Документ.ПоступлениеТоваровУслуг
	|И	АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО 
	|	Период Убыв
	|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПоследняяЦенаВхода()

&НаСервере
Функция ПолучитьТекстЗапросаОстаткиНаСкладе()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиОстатки.Склад,
	|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеОстаток КАК СвободныйОстаток
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура " + ?(УправлениеЗапасами_ИсточникЗапроса = 0, " И Склад <> &ЛогистическийЦентр", "") + ") КАК СвободныеОстаткиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
	|		ПО (ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад)
	|			И (ДоступныеСклады.Основной = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеСклады.Склад
	|ПОМЕСТИТЬ КешСклады
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|ГДЕ
	|	ДоступныеСклады.СвободныйОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	|	СкладыКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ АдресаСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыМаршрутовСкладыОтгрузки.Ссылка КАК Маршрут,
	|	ВариантыМаршрутовСкладыОтгрузки.Склад
	|ПОМЕСТИТЬ МаршрутыОтОтправителя
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
	|ГДЕ
	|	ВариантыМаршрутовСкладыОтгрузки.Склад В
	|			(ВЫБРАТЬ
	|				КешСклады.Склад
	|			ИЗ
	|				КешСклады КАК КешСклады)

	|ОБЪЕДИНИТЬ

	|ВЫБРАТЬ
	|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка,
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	|ГДЕ
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель = &СкладПолучатель
	|	И ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель В
	|			(ВЫБРАТЬ
	|				КешСклады.Склад
	|			ИЗ
	|				КешСклады КАК КешСклады)
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыМаршрутовСписокАдресов.Ссылка КАК Маршрут
	|ПОМЕСТИТЬ МаршрутыКПолучателю
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
	|ГДЕ
	|	ВариантыМаршрутовСписокАдресов.ГородСклад = &СкладПолучатель

	|ОБЪЕДИНИТЬ

	|ВЫБРАТЬ
	|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	|ГДЕ
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель = &СкладПолучатель
	|	И ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель В
	|			(ВЫБРАТЬ
	|				КешСклады.Склад
	|			ИЗ
	|				КешСклады КАК КешСклады)
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыОтОтправителя.Склад КАК СкладОтправитель,
	|	&СкладПолучатель КАК СкладПолучатель,
	|	МаршрутыКПолучателю.Маршрут КАК Маршрут,
	|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута КАК КалендарьМаршрута,
	|	ЕСТЬNULL(СкладыОтгрузки.ПН, СкладыОтгрузкиРезерв.ПН) КАК ПН,
	|	ЕСТЬNULL(СкладыОтгрузки.ВТ, СкладыОтгрузкиРезерв.ВТ) КАК ВТ,
	|	ЕСТЬNULL(СкладыОтгрузки.СР, СкладыОтгрузкиРезерв.СР) КАК СР,
	|	ЕСТЬNULL(СкладыОтгрузки.ЧТ, СкладыОтгрузкиРезерв.ЧТ) КАК ЧТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ПТ, СкладыОтгрузкиРезерв.ПТ) КАК ПТ,
	|	ЕСТЬNULL(СкладыОтгрузки.СБ, СкладыОтгрузкиРезерв.СБ) КАК СБ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВС, СкладыОтгрузкиРезерв.ВС) КАК ВС,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаПН, СкладыОтгрузкиРезерв.ВремяВыездаПН) КАК ВремяВыездаПН,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаВТ, СкладыОтгрузкиРезерв.ВремяВыездаВТ) КАК ВремяВыездаВТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаСР, СкладыОтгрузкиРезерв.ВремяВыездаСР) КАК ВремяВыездаСР,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаЧТ, СкладыОтгрузкиРезерв.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаПТ, СкладыОтгрузкиРезерв.ВремяВыездаПТ) КАК ВремяВыездаПТ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаСБ, СкладыОтгрузкиРезерв.ВремяВыездаСБ) КАК ВремяВыездаСБ,
	|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаВС, СкладыОтгрузкиРезерв.ВремяВыездаВС) КАК ВремяВыездаВС
	|ПОМЕСТИТЬ МаршрутПрямойДоставки
	|ИЗ
	|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
	|		ПО (МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя
	|		ПО (АдресаСкладаПолучателя.Склад = &СкладПолучатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя
	|		ПО (АдресаСкладаОтправителя.Склад = МаршрутыОтОтправителя.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
	|		ПО (СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут)
	|			И (СкладыОтгрузки.Склад = МаршрутыОтОтправителя.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузкиРезерв
	|		ПО (СкладыОтгрузкиРезерв.Ссылка = МаршрутыКПолучателю.Маршрут)
	|			И (СкладыОтгрузкиРезерв.Склад = &СкладПолучатель)
	|ГДЕ
	|	АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутПрямойДоставки.СкладОтправитель,
	|	МаршрутПрямойДоставки.СкладПолучатель,
	|	МаршрутПрямойДоставки.Маршрут,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|				КОНЕЦ))) КАК ДатаВремяВыезда
	|ПОМЕСТИТЬ Запрос5
	|ИЗ
	|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
	|		Левое СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО (КалендарныеГрафики.Календарь = МаршрутПрямойДоставки.КалендарьМаршрута)
	|			И (КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, ДЕНЬ))
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|				КОГДА 1
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ПН
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 2
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ВТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 3
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.СР
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 4
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ЧТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 5
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ПТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 6
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.СБ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 7
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутПрямойДоставки.ВС
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	(&ДатаСеанса < КалендарныеГрафики.ДатаГрафика
	|			ИЛИ ЧАС(&ДатаСеанса) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|				КОНЕЦ)
	|			ИЛИ ЧАС(&ДатаСеанса) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|					КОНЕЦ)
	|				И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
	|					КОНЕЦ))

	|СГРУППИРОВАТЬ ПО
	|	МаршрутПрямойДоставки.СкладОтправитель,
	|	МаршрутПрямойДоставки.СкладПолучатель,
	|	МаршрутПрямойДоставки.Маршрут
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыОтгрузки.Ссылка КАК МаршрутТранзит,
	|	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) КАК СкладТранзит
	|ПОМЕСТИТЬ МаршрутыОтОтправителяТранзит
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
	|		ПО (СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка)
	|			И ((ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады)) <> &СкладПолучатель)
	|			И (НЕ ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) В
	|					(ВЫБРАТЬ
	|						КешСклады.Склад
	|					ИЗ
	|						КешСклады КАК КешСклады))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
	|		ПО (ДоступныеСклады.Склад = СкладыОтгрузки.Ссылка)
	|			И (ДоступныеСклады.Транзитный)
	|ГДЕ
	|	СкладыОтгрузки.Склад В
	|			(ВЫБРАТЬ
	|				КешСклады.Склад
	|			ИЗ
	|				КешСклады КАК КешСклады)

	|ОБЪЕДИНИТЬ

	|ВЫБРАТЬ
	|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка,
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	|ГДЕ
	|	ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель В
	|			(ВЫБРАТЬ
	|				КешСклады.Склад
	|			ИЗ
	|				КешСклады КАК КешСклады)
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешСклады.Склад КАК СкладОтправитель,
	|	СкладыОтгрузки.Склад КАК СкладТранзит,
	|	&СкладПолучатель КАК СкладПолучатель,
	|	МаршрутОтОтправителя.МаршрутТранзит КАК МаршрутОтОтправителя,
	|	МаршрутОтОтправителя.МаршрутТранзит.КалендарьМаршрута КАК КалендарьМаршрутаОтОтправителя,
	|	СкладыОтгрузки.Ссылка КАК МаршрутКПолучателю,
	|	СкладыОтгрузки.Ссылка.КалендарьМаршрута КАК КалендарьМаршрутаКПолучателю,
	|	СкладыТранзита.ПН,
	|	СкладыТранзита.ВТ,
	|	СкладыТранзита.СР,
	|	СкладыТранзита.ЧТ,
	|	СкладыТранзита.ПТ,
	|	СкладыТранзита.СБ,
	|	СкладыТранзита.ВС,
	|	СкладыТранзита.ВремяВыездаПН,
	|	СкладыТранзита.ВремяВыездаВТ,
	|	СкладыТранзита.ВремяВыездаСР,
	|	СкладыТранзита.ВремяВыездаЧТ,
	|	СкладыТранзита.ВремяВыездаПТ,
	|	СкладыТранзита.ВремяВыездаСБ,
	|	СкладыТранзита.ВремяВыездаВС,
	|	СкладыОтгрузки.ПН КАК тПН,
	|	СкладыОтгрузки.ВТ КАК тВТ,
	|	СкладыОтгрузки.СР КАК тСР,
	|	СкладыОтгрузки.ЧТ КАК тЧТ,
	|	СкладыОтгрузки.ПТ КАК тПТ,
	|	СкладыОтгрузки.СБ КАК тСБ,
	|	СкладыОтгрузки.ВС КАК тВС,
	|	СкладыОтгрузки.ВремяВыездаПН КАК тВремяВыездаПН,
	|	СкладыОтгрузки.ВремяВыездаВТ КАК тВремяВыездаВТ,
	|	СкладыОтгрузки.ВремяВыездаСР КАК тВремяВыездаСР,
	|	СкладыОтгрузки.ВремяВыездаЧТ КАК тВремяВыездаЧТ,
	|	СкладыОтгрузки.ВремяВыездаПТ КАК тВремяВыездаПТ,
	|	СкладыОтгрузки.ВремяВыездаСБ КАК тВремяВыездаСБ,
	|	СкладыОтгрузки.ВремяВыездаВС КАК тВремяВыездаВС
	|ПОМЕСТИТЬ МаршрутыКПолучателюТранзит
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителяТранзит КАК МаршрутОтОтправителя
	|		ПО (МаршрутОтОтправителя.СкладТранзит = СкладыОтгрузки.Склад)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
	|		ПО (СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка)
	|			И ((ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады)) = &СкладПолучатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита
	|		ПО (СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя
	|		ПО (АдресаСкладаПолучателя.Склад = &СкладПолучатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаТранзита
	|		ПО (АдресаСкладаТранзита.Склад = СкладыОтгрузки.Склад),
	|	КешСклады КАК КешСклады,
	|	АдресаСкладов КАК АдресаСкладаОтправителя
	|ГДЕ
	|	АдресаСкладаОтправителя.Представление <> АдресаСкладаПолучателя.Представление
	|	И АдресаСкладаОтправителя.Представление <> АдресаСкладаТранзита.Представление
	|	И СкладыТранзита.Склад = КешСклады.Склад
	|	И АдресаСкладаОтправителя.Склад = КешСклады.Склад
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафикиОтправителя.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|				КОНЕЦ))) КАК ДатаВремяВыездаОтОтправителя
	|ПОМЕСТИТЬ ТаблицаПрибытияНаТранзитныйСклад
	|ИЗ
	|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиОтправителя
	|		ПО (КалендарныеГрафикиОтправителя.Календарь = МаршрутыКПолучателюТранзит.КалендарьМаршрутаОтОтправителя)
	|			И (КалендарныеГрафикиОтправителя.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, ДЕНЬ))
	|			И (КалендарныеГрафикиОтправителя.ДеньВключенВГрафик)
	|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|				КОГДА 1
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ПН
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 2
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ВТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 3
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.СР
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 4
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ЧТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 5
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ПТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 6
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.СБ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 7
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.ВС
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	(&ДатаСеанса < КалендарныеГрафикиОтправителя.ДатаГрафика
	|			ИЛИ ЧАС(&ДатаСеанса) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|				КОНЕЦ)
	|			ИЛИ ЧАС(&ДатаСеанса) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|					КОНЕЦ)
	|				И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
	|					КОНЕЦ))

	|СГРУППИРОВАТЬ ПО
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит,
	|	МаршрутыКПолучателюТранзит.СкладПолучатель,
	|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафикиПолучателя.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|				КОНЕЦ))) КАК ДатаВремяВыездаКПолучателю
	|ПОМЕСТИТЬ ВариантыТранзитов
	|ИЗ
	|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрибытияНаТранзитныйСклад КАК ТаблицаПрибытияНаТранзитныйСклад
	|		ПО (ТаблицаПрибытияНаТранзитныйСклад.МаршрутОтОтправителя = МаршрутыКПолучателюТранзит.МаршрутОтОтправителя)
	|			И (ТаблицаПрибытияНаТранзитныйСклад.СкладТранзит = МаршрутыКПолучателюТранзит.СкладТранзит)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиПолучателя
	|		ПО (КалендарныеГрафикиПолучателя.Календарь = МаршрутыКПолучателюТранзит.КалендарьМаршрутаКПолучателю)
	|			И (КалендарныеГрафикиПолучателя.ДатаГрафика >= НАЧАЛОПЕРИОДА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя, ДЕНЬ))
	|			И (КалендарныеГрафикиПолучателя.ДеньВключенВГрафик)
	|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|				КОГДА 1
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тПН
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 2
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тВТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 3
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тСР
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 4
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тЧТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 5
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тПТ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 6
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тСБ
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОГДА 7
	|					ТОГДА ВЫБОР
	|							КОГДА МаршрутыКПолучателюТранзит.тВС
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя < КалендарныеГрафикиПолучателя.ДатаГрафика
	|			ИЛИ ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|					КОГДА 1
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|					КОГДА 2
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|					КОГДА 3
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|					КОГДА 4
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|					КОГДА 5
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|					КОГДА 6
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|					КОГДА 7
	|						ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|				КОНЕЦ)
	|			ИЛИ ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|					КОНЕЦ)
	|				И МИНУТА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
	|						КОГДА 1
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
	|						КОГДА 2
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
	|						КОГДА 3
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
	|						КОГДА 4
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
	|						КОГДА 5
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
	|						КОГДА 6
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
	|						КОГДА 7
	|							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
	|					КОНЕЦ))

	|СГРУППИРОВАТЬ ПО
	|	МаршрутыКПолучателюТранзит.СкладОтправитель,
	|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
	|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
	|	МаршрутыКПолучателюТранзит.СкладТранзит,
	|	МаршрутыКПолучателюТранзит.СкладПолучатель,
	|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВариантыТранзитов.ДатаВремяВыездаКПолучателю) КАК ДатаВремяВыездаКПолучателю
	|ПОМЕСТИТЬ КраткаяДоставкаТранзита
	|ИЗ
	|	ВариантыТранзитов КАК ВариантыТранзитов
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыТранзитов.СкладОтправитель,
	|	ВариантыТранзитов.МаршрутОтОтправителя,
	|	ВариантыТранзитов.ДатаВремяВыездаОтОтправителя,
	|	ВариантыТранзитов.СкладТранзит,
	|	ВариантыТранзитов.СкладПолучатель,
	|	ВариантыТранзитов.МаршрутКПолучателю,
	|	ВариантыТранзитов.ДатаВремяВыездаКПолучателю
	|ПОМЕСТИТЬ Запрос11
	|ИЗ
	|	ВариантыТранзитов КАК ВариантыТранзитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ КраткаяДоставкаТранзита КАК КраткаяДоставкаТранзита
	|		ПО (КраткаяДоставкаТранзита.ДатаВремяВыездаКПолучателю = ВариантыТранзитов.ДатаВремяВыездаКПолучателю)
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешСклады.Склад,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Запрос5.Маршрут, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|				И ЕСТЬNULL(Запрос11.ДатаВремяВыездаКПолучателю, &ПустаяДата) <> &ПустаяДата
	|				И Запрос11.ДатаВремяВыездаКПолучателю = Запрос11.ДатаВремяВыездаОтОтправителя
	|			ТОГДА ДОБАВИТЬКДАТЕ(Запрос11.ДатаВремяВыездаКПолучателю, ДЕНЬ, 1)
	|		КОГДА ЕСТЬNULL(Запрос5.Маршрут, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЕСТЬNULL(Запрос11.ДатаВремяВыездаКПолучателю, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Запрос11.ДатаВремяВыездаКПолучателю, &ПустаяДата) < Запрос5.ДатаВремяВыезда
	|			ТОГДА Запрос11.ДатаВремяВыездаКПолучателю
	|		ИНАЧЕ Запрос5.ДатаВремяВыезда
	|	КОНЕЦ КАК ДатаВыезда
	|ПОМЕСТИТЬ ОсновнойКеш
	|ИЗ
	|	КешСклады КАК КешСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запрос5 КАК Запрос5
	|		ПО КешСклады.Склад = Запрос5.СкладОтправитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запрос11 КАК Запрос11
	|		ПО КешСклады.Склад = Запрос11.СкладОтправитель

	|СГРУППИРОВАТЬ ПО
	|	КешСклады.Склад,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Запрос5.Маршрут, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|				И ЕСТЬNULL(Запрос11.ДатаВремяВыездаКПолучателю, &ПустаяДата) <> &ПустаяДата
	|				И Запрос11.ДатаВремяВыездаКПолучателю = Запрос11.ДатаВремяВыездаОтОтправителя
	|			ТОГДА ДОБАВИТЬКДАТЕ(Запрос11.ДатаВремяВыездаКПолучателю, ДЕНЬ, 1)
	|		КОГДА ЕСТЬNULL(Запрос5.Маршрут, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЕСТЬNULL(Запрос11.ДатаВремяВыездаКПолучателю, &ПустаяДата) <> &ПустаяДата
	|					И ЕСТЬNULL(Запрос11.ДатаВремяВыездаКПолучателю, &ПустаяДата) < Запрос5.ДатаВремяВыезда
	|			ТОГДА Запрос11.ДатаВремяВыездаКПолучателю
	|		ИНАЧЕ Запрос5.ДатаВремяВыезда
	|	КОНЕЦ
	|;
	|ВЫБРАТЬ
	|	ДоступныеСклады.Склад КАК Склад,
	|	ДоступныеСклады.СвободныйОстаток КАК СвободныйОстаток,
	|	ОсновнойКеш.ДатаВыезда КАК ДатаПоступления
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновнойКеш КАК ОсновнойКеш
	|		ПО ДоступныеСклады.Склад = ОсновнойКеш.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоступления";
	Возврат ТекстЗапроса;
	
	
КонецФункции // ПолучитьТекстЗапросаОстаткиНаСкладе()



&НаКлиенте
Процедура ОбработатьОткрытиеОтчета(Номенклатура, Характеристика, ИмяФормы)
	ПараметрыФормы = Новый Структура;  
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	Если ИмяФормы = "ОтчетПоРезервам" Тогда
		ФормаОчета = ПолучитьФорму("РегистрСведений.ALPS_АктуальностьНоменклатуры.Форма.ОтчетПоРезервам", ПараметрыФормы);	
	Иначе	
		ФормаОчета = ПолучитьФорму("ВнешняяОбработка.УправлениеЗаказамиПодЗаказ.Форма." + ИмяФормы, ПараметрыФормы);
	КонецЕсли; 	
	ОткрытьФорму(ФормаОчета);		
КонецПроцедуры



&НаСервере
Процедура ОформитьДокументыНаТоварыВНаличииСервер() 
	
	ТекущаяСтрока = Элементы.УправлениеЗапасами.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		СообщениеПользователю = НСтр("ru='Текущие данные в управлении запасами не определены!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = УправлениеЗапасами.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Склад 		 = ТекущиеДанные.Склад;	
	Назначение 	 = ТекущиеДанные.Назначение;
	Номенклатура = ТекущиеДанные.Номенклатура;
	
	Остатки  = РегистрыНакопления.ОбеспечениеЗаказов;
	Фильтр   = Новый Структура;
	Фильтр.Вставить("Номенклатура"	, Номенклатура);
	Фильтр.Вставить("Назначение"	, Назначение);

	ТабОстатков = Остатки.Остатки(ТекущаяДата(),Фильтр,
	               "Номенклатура,Назначение", "КЗаказу"); 
				   
	Если Не ТабОстатков.Количество() Тогда 
		СообщениеПользователю = НСтр("ru='""Данный заказ полностю обеспечен"" !'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	Иначе 
		КЗаказу		 = 	ТабОстатков[0].КЗаказу; 
	КонецЕсли;
	
	ВсегоПоСкладам = ЕстьНаСкладах.Итог("НужноЗаказать");
	Если ВсегоПоСкладам = 0 Тогда
		СообщениеПользователю = НСтр("ru='Не указано количество для создания движений!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Возврат;		
	КонецЕсли;
	
	Если ВсегоПоСкладам > КЗаказу Тогда
		СообщениеПользователю = НСтр("ru='Указано для движения товаров больше чем нужно!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Возврат;		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Для каждого СтрокаСклад Из ЕстьНаСкладах Цикл
		Если СтрокаСклад.НужноЗаказать > 0 Тогда  
			
			Если СтрокаСклад.Склад = Склад Тогда	
				
				тмпНужноЗаказать = СтрокаСклад.НужноЗаказать;
				ТипОбъекта 		= ТипЗнч(Назначение.Заказ);
				ДокументОбъект	= Назначение.Заказ.ПолучитьОбъект();
				ДанныеТаблицы 	= ДокументОбъект.Товары;
				Для каждого СтрокаТаблицы Из ДанныеТаблицы Цикл
					
					Если СтрокаТаблицы.Номенклатура = Номенклатура И СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
						
						Если тмпНужноЗаказать = СтрокаТаблицы.Количество Тогда
							СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
							Прервать;
						ИначеЕсли тмпНужноЗаказать > СтрокаТаблицы.Количество Тогда
							СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;	
							тмпНужноЗаказать = тмпНужноЗаказать - СтрокаТаблицы.Количество;
							Продолжить;
						Иначе
							НоваяСтрока = ДанныеТаблицы.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
							
							СтрокаТаблицы.Количество 		 = СтрокаТаблицы.Количество 		- тмпНужноЗаказать;
							СтрокаТаблицы.КоличествоУпаковок = СтрокаТаблицы.КоличествоУпаковок - тмпНужноЗаказать;
							
							НоваяСтрока.Количество 		   = тмпНужноЗаказать;
							НоваяСтрока.КоличествоУпаковок = тмпНужноЗаказать;
							НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
							
							Если ТипОбъекта = Тип("ДокументСсылка.ЗаказКлиента") Тогда
								СтруктураДействий = Новый Структура;
								ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, 	СтруктураДействий, Неопределено);
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
							КонецЕсли; 
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; 
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументОбъект.Ссылка));
					
					НоваяЗаписьСписок = СписокДокументов.Добавить();
					НоваяЗаписьСписок.ИндентификаторКартинки = 0;
					ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ДокументОбъект);
				Исключение
					ОтменитьТранзакцию();
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
				
			ИначеЕсли СтрокаСклад.Склад = ЛогистическийЦентр Тогда
				
				ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ЗаказНаПеремещение, Назначение.Заказ);	
				ЗаказНаПеремещение.Дата						= ТекущаяДата();
				ЗаказНаПеремещение.Назначение				= Неопределено;
				ЗаказНаПеремещение.УстановитьНовыйНомер();
				ЗаказНаПеремещение.Ответственный    		= АвторизированныйПользователь;
				ЗаказНаПеремещение.Подразделение    		= АвторизированноеПодразделение;
				ЗаказНаПеремещение.СкладОтправитель 		= ЛогистическийЦентр;
				ЗаказНаПеремещение.СкладПолучатель  		= Склад;
				ЗаказНаПеремещение.ДокументОснование		= Назначение.Заказ;
				
				ЗаказНаПеремещение.Статус           		= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
				ЗаказНаПеремещение.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
				
				НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
				НоваяСтрока.Номенклатура 		= Номенклатура;
				НоваяСтрока.Упаковка            = Номенклатура.ЕдиницаИзмерения;
				НоваяСтрока.Количество		 	= СтрокаСклад.НужноЗаказать;
				НоваяСтрока.КоличествоУпаковок 	= СтрокаСклад.НужноЗаказать;
				НоваяСтрока.Назначение 			= Назначение;
				НоваяСтрока.ВариантОбеспечения	= Перечисления.ВариантыОбеспечения.СоСклада;
				НоваяСтрока.НачалоОтгрузки		= ТекущаяДата();
				НоваяСтрока.ОкончаниеПоступления= ТекущаяДата();
				
				Попытка
					
					ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
					
					ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗаказНаПеремещение.Ссылка));
					
					НоваяЗаписьСписок = СписокДокументов.Добавить();
					НоваяЗаписьСписок.ИндентификаторКартинки = 0;
					ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказНаПеремещение);
					
				Исключение
					ОтменитьТранзакцию();
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
				
			Иначе
				
				Если Склад <> ЛогистическийЦентр Тогда
					
					ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
					ЗаполнитьЗначенияСвойств(ЗаказНаПеремещение, Назначение.Заказ);	
					ЗаказНаПеремещение.Дата						= ТекущаяДата();
					ЗаказНаПеремещение.Назначение				= Неопределено;
					ЗаказНаПеремещение.УстановитьНовыйНомер();
					ЗаказНаПеремещение.Ответственный    		= АвторизированныйПользователь;
					ЗаказНаПеремещение.Подразделение    		= АвторизированноеПодразделение;
					ЗаказНаПеремещение.СкладОтправитель 		= ЛогистическийЦентр;
					ЗаказНаПеремещение.СкладПолучатель  		= Склад;
					ЗаказНаПеремещение.ДокументОснование		= Назначение.Заказ;
					
					ЗаказНаПеремещение.Статус           		= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
					ЗаказНаПеремещение.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
					ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
					
					НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
					НоваяСтрока.Номенклатура 		= Номенклатура;
					НоваяСтрока.Упаковка            = Номенклатура.ЕдиницаИзмерения;
					НоваяСтрока.Количество		 	= СтрокаСклад.НужноЗаказать;
					НоваяСтрока.КоличествоУпаковок 	= СтрокаСклад.НужноЗаказать;
					НоваяСтрока.Назначение 			= Назначение;
					НоваяСтрока.ВариантОбеспечения	= Перечисления.ВариантыОбеспечения.ПодЗаказ;
					НоваяСтрока.НачалоОтгрузки		= ТекущаяДата();
					НоваяСтрока.ОкончаниеПоступления= ТекущаяДата();
					
					Попытка
						
						ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
						
						ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗаказНаПеремещение.Ссылка));
						
						НоваяЗаписьСписок = СписокДокументов.Добавить();
						НоваяЗаписьСписок.ИндентификаторКартинки = 0;
						ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказНаПеремещение);
						
					Исключение
						ОтменитьТранзакцию();
						Сообщить(ОписаниеОшибки());
						Возврат;
					КонецПопытки;
					
				КонецЕсли;
				
				ПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ПеремещениеТоваров, Назначение.Заказ);
				ПеремещениеТоваров.Дата						= ТекущаяДата();
				ПеремещениеТоваров.Проведен					= Ложь;
				ПеремещениеТоваров.УстановитьНовыйНомер();
				ПеремещениеТоваров.ВидЦены          		= ВходнаяЦена;
				ПеремещениеТоваров.СпособДоставки			= Перечисления.СпособыДоставки.Самовывоз;
				ПеремещениеТоваров.Ответственный    		= АвторизированныйПользователь;
				ПеремещениеТоваров.Подразделение			= АвторизированноеПодразделение;
				ПеремещениеТоваров.СкладОтправитель 		= СтрокаСклад.Склад;
				ПеремещениеТоваров.СкладПолучатель  		= ЛогистическийЦентр;
				ПеремещениеТоваров.Статус           		= Перечисления.СтатусыПеремещенийТоваров.Принято;
				ПеремещениеТоваров.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				ПеремещениеТоваров.ИспользуетсяОбособленноеОбеспечение = Истина;
				
				НоваяСтрока = ПеремещениеТоваров.Товары.Добавить();
				НоваяСтрока.Номенклатура 		= Номенклатура;
				НоваяСтрока.Упаковка            = Номенклатура.ЕдиницаИзмерения;
				НоваяСтрока.Количество		 	= СтрокаСклад.НужноЗаказать;
				НоваяСтрока.КоличествоУпаковок 	= СтрокаСклад.НужноЗаказать;
				НоваяСтрока.Назначение 			= Назначение;
				
				Попытка
					
					ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
					
					ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПеремещениеТоваров.Ссылка));
					
					НоваяЗаписьСписок = СписокДокументов.Добавить();
					НоваяЗаписьСписок.ИндентификаторКартинки = 2;
					ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ПеремещениеТоваров);
					
				Исключение
					ОтменитьТранзакцию();
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
				
			КонецЕсли; 			
		КонецЕсли;			
		
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	ТекущиеДанные.Обработано = Истина; 
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЗапасами_СоздатьЗаказПоставщикуСервер()
	
	Отказ = Ложь;
	
	
	СоответствиеЗаказов	= Новый Соответствие;
	
	РезультатОтбора = УправлениеЗапасами.НайтиСтроки(Новый Структура("ОтметитьДляЗаказа", Истина));
	Если РезультатОтбора.Количество() = 0 Тогда
		СообщениеПользователю = НСтр("ru='Создать заказ поставщикам не удалось, нет отмеченных позиций номенклатуры!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Отказ = Истина;
	КонецЕсли;
	
	
	Для Каждого Строка Из РезультатОтбора Цикл
		
		Остатки  = РегистрыНакопления.ОбеспечениеЗаказов;
		Фильтр   = Новый Структура;
		Фильтр.Вставить("Номенклатура"	, Строка.Номенклатура);
		Фильтр.Вставить("Назначение"	, Строка.Назначение);

		ТабОстатков = Остатки.Остатки(ТекущаяДата(),Фильтр,
		               "Номенклатура,Назначение", "КЗаказу"); 
					   
		Если Не ТабОстатков.Количество() Тогда 
			СообщениеПользователю = НСтр("ru='""Данный заказ полностю обеспечен"" !'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
			Отказ = Истина;
		ИначеЕсли  Строка.НужноЗаказать - ТабОстатков[0].КЗаказу>0 Тогда 
			СообщениеПользователю = НСтр("ru='""Заказано больше чем требуется !'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
			Отказ = Истина;
		КонецЕсли;
		
		Если Строка.СоглашениеПоставщика.Пустая() Тогда
			СообщениеПользователю = НСтр("ru='""Соглашение с поставщиком"" должно быть заполнено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
			Отказ = Истина;
		КонецЕсли;
		
		Если Строка.ДатаПоступления = Дата(1,1,1) Тогда
			СообщениеПользователю = НСтр("ru='""Дата поступления"" должна быть заполнена!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
			Отказ = Истина;
		КонецЕсли;
		
		Если Строка.ЦенаПоставщика = 0 Тогда
			СообщениеПользователю = НСтр("ru='""Цена в заказе поставщику"" должно быть больше 0!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
			Отказ = Истина;
		КонецЕсли;
		
		СоответствиеЗаказов[Строка.Заказ] = Новый Соответствие;
		
	КонецЦикла;
	
	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	
	
	НалогообложениеНДС 	= ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
	СтавкаНДС20 		= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	СтавкаБезНДС 		= ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	СтруктураНДС	   	= Новый Структура("СтавкаНДС, СуммаНДС");
	
	НачатьТранзакцию();
	
	Для Каждого Строка Из РезультатОтбора Цикл
		СтруктураСвойств = СоответствиеЗаказов[Строка.Заказ][Строка.СоглашениеПоставщика];
		Если СтруктураСвойств = Неопределено Тогда
			
			ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
			СтруктураЗаполнения = ПолучитьСтруктурыЗаполненияПоставщик(Строка.СоглашениеПоставщика);
			ЗаполнитьЗначенияСвойств(ЗаказПоставщику, СтруктураЗаполнения);
			
			ЗаказПоставщику.Дата = ТекущаяДата();
			ЗаказПоставщику.УстановитьНовыйНомер();
			ЗаказПоставщику.Склад 					= ЛогистическийЦентр;
			ЗаказПоставщику.Статус 					= Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
			ЗаказПоставщику.Менеджер				= ПараметрыСеанса.ТекущийПользователь;
			ЗаказПоставщику.Приоритет 				= Перечисления.Приоритеты.Высокий;
			ЗаказПоставщику.Подразделение			= ЗаказПоставщику.Менеджер.ТекущееПодразделение;
			ЗаказПоставщику.ДокументОснование 		= Строка.Заказ;
			ЗаказПоставщику.КТС_СпособДоставки 		= Строка.СпособДоставки;
			ЗаказПоставщику.НомерПоДаннымПоставщика	= Строка.НомерВходящегоДокумента;
			СоответствиеЗаказов[Строка.Заказ][Строка.СоглашениеПоставщика] = ЗаказПоставщику;
			
		КонецЕсли;
		
		НоваяСтрока = ЗаказПоставщику.Товары.Добавить();
		НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
		НоваяСтрока.Назначение			= Строка.Назначение;
		НоваяСтрока.КоличествоУпаковок 	= Строка.НужноЗаказать;
		НоваяСтрока.Количество 			= Строка.НужноЗаказать;
		НоваяСтрока.ДатаПоступления     = Строка.ДатаПоступления;
		НоваяСтрока.Цена     			= Строка.ЦенаПоставщика;
		НоваяСтрока.Склад     			= ЛогистическийЦентр;
		НоваяСтрока.Сумма               = НоваяСтрока.Цена * НоваяСтрока.Количество;
		Если НалогообложениеНДС 		= ЗаказПоставщику.НалогообложениеНДС Тогда
			НоваяСтрока.СтавкаНДС 		= СтавкаНДС20;
			НоваяСтрока.СуммаНДС  		= ?(ЗаказПоставщику.ЦенаВключаетНДС, НоваяСтрока.Сумма /6, НоваяСтрока.Сумма /5);
		Иначе
			НоваяСтрока.СтавкаНДС 		= СтавкаБезНДС;
			НоваяСтрока.СуммаНДС		= 0;
		КонецЕсли;
		НоваяСтрока.СуммаСНДС     		= ?(ЗаказПоставщику.ЦенаВключаетНДС, НоваяСтрока.Сумма, НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС);
		
		Если Строка.Склад <> ЛогистическийЦентр Тогда
			
			ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ЗаказНаПеремещение, Строка.Назначение.Заказ);	
			ЗаказНаПеремещение.Дата						= ТекущаяДата();
			ЗаказНаПеремещение.Назначение				= Неопределено;
			ЗаказНаПеремещение.УстановитьНовыйНомер();
			ЗаказНаПеремещение.Ответственный    		= АвторизированныйПользователь;
			ЗаказНаПеремещение.Подразделение    		= АвторизированноеПодразделение;
			ЗаказНаПеремещение.СкладОтправитель 		= ЛогистическийЦентр;
			ЗаказНаПеремещение.СкладПолучатель  		= Строка.Склад;
			ЗаказНаПеремещение.ДокументОснование		= Строка.Назначение.Заказ;
			
			ЗаказНаПеремещение.Статус           		= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
			ЗаказНаПеремещение.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
			ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
			
			НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
			НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
			НоваяСтрока.Упаковка            = Строка.Номенклатура.ЕдиницаИзмерения;
			НоваяСтрока.Количество		 	= Строка.НужноЗаказать;
			НоваяСтрока.КоличествоУпаковок 	= Строка.НужноЗаказать;
			НоваяСтрока.Назначение 			= Строка.Назначение;
			НоваяСтрока.ВариантОбеспечения	= Перечисления.ВариантыОбеспечения.ПодЗаказ;
			НоваяСтрока.НачалоОтгрузки		= Строка.ДатаПоступления;
			НоваяСтрока.ОкончаниеПоступления= Строка.ДатаПоступления;
			
			Попытка
				
				ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
				
				ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗаказНаПеремещение.Ссылка));
				
				НоваяЗаписьСписок = СписокДокументов.Добавить();
				НоваяЗаписьСписок.ИндентификаторКартинки = 0;
				ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказНаПеремещение);
				
			Исключение
				ОтменитьТранзакцию();
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;				
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаказ Из СоответствиеЗаказов Цикл
		Для Каждого ЭлементДокумент ИЗ ЭлементЗаказ.Значение Цикл
			
			ЗаказПоставщику = ЭлементДокумент.Значение;
			ЗаказПоставщику.СуммаДокумента = ЗаказПоставщику.Товары.Итог("СуммаСНДС");
			ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(ЗаказПоставщику, ЗаказПоставщику.СуммаДокумента, Истина);	
			
			Попытка 
				
				ЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение);
				
				ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗаказПоставщику.Ссылка));
				
				НоваяЗаписьСписок = СписокДокументов.Добавить();
				НоваяЗаписьСписок.ИндентификаторКартинки = 0;
				ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказПоставщику);
				
			Исключение
				ОтменитьТранзакцию();
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаСервер()
	УстановитьПривилегированныйРежим(Истина);
	Запрос			= Новый Запрос();
	Запрос.Текст	= ПолучитьСписокЗаказовПоставщикуБезНазначения();
	Запрос.УстановитьПараметр("Товары",				УправлениеЗапасами.Выгрузить());
	Запрос.УстановитьПараметр("ЛогистическийЦентр", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));
	РезультаЗапроса	= Запрос.Выполнить().Выгрузить();
	
	Соответствие = Новый Соответствие;
	Для Каждого Элемент Из РезультаЗапроса Цикл 
    	Соответствие.Вставить(Элемент.ЗаказПоставщику, Элемент.СуммаКоличество);
	КонецЦикла;
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
 	Возврат Соответствие; 
КонецФункции // УправлениеЗапасами_ПеренестиНазначенияВЗаказПоставщикаСервер()

&НаСервере
Функция ПолучитьСтруктурыЗаполненияПоставщик(Соглашение)
	
	УсловияЗакупки  = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	УсловияЗакупки.Вставить("Партнер", 				Соглашение.Партнер);
	УсловияЗакупки.Вставить("ВалютаВзаиморасчетов", Соглашение.Валюта);
	УсловияЗакупки.Вставить("ДатаПлатежа",  		ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), Соглашение));
	УсловияЗакупки.Вставить("Дата",					ТекущаяДата());
	
	ХозяйственнаяОперацияДоговора = ?(
	УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
	Или УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
	Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
	УсловияЗакупки.ХозяйственнаяОперация
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияЗакупки.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияЗакупки.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияЗакупки.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
	СтруктураПараметров,
	ХозяйственнаяОперацияДоговора,
	УсловияЗакупки.Валюта);
	
	УсловияЗакупки.Вставить("Договор",	Договор);
	УсловияЗакупки.Вставить("ТребуетсяДоговор",	Соглашение.ИспользуютсяДоговорыКонтрагентов);
	УсловияЗакупки.Вставить("ЖелаемаяДатаПоступления", ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(УсловияЗакупки.Дата, Перечисления.Периодичность.День, УсловияЗакупки.СрокПоставки) + 1);
	
	Возврат УсловияЗакупки;
	
КонецФункции



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//      ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ НАЗНАЧЕНИЯ В ЗАКАЗАХ ПОСТАВЩИКУ			                         //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнитьНазначенияВЗаказеПостащика(ЗаказПоставщику,ИтогКоличество)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 			= Новый Запрос();
	Запрос.Текст	= ПолучитьТекстЗапросаПеренестиНазначенияВЗаказПоставщика();
	Запрос.УстановитьПараметр("Ссылка",ЗаказПоставщику);
	
	РезультатЗапроса = 	Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
	   ЗаказПоставщикуТовары.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
		
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНазначенияВЗаказеПостащика()


&НаСервере
Процедура ЗаполнитьСтруктуруДействия(СтруктураДействий, ЗаказСсылка)
	ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
КонецПроцедуры  //ЗаполнитьСтруктуруДействия()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	Возврат Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки");
КонецФункции  //ПолучитьСтруктуруЗависимыхРеквизитов()

&НаСервере
Функция ПолучитьСписокЗаказовПоставщикуБезНазначения()
ТекстЗапроса = "ВЫБРАТЬ
               |	Товары.Номенклатура КАК Номенклатура,
               |	Товары.СвободноеОжидание КАК СвободноеОжидание
               |ПОМЕСТИТЬ ТаблицаУправлениеЗапасами
               |ИЗ
               |	&Товары КАК Товары
               |ГДЕ
               |	Товары.СвободноеОжидание > 0
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Номенклатура
               |;
               ////////////////////////////////////////////////////////////////////////////////
			   //1
               |ВЫБРАТЬ
               |	ТаблицаУправлениеЗапасами.Номенклатура КАК Номенклатура
               |ПОМЕСТИТЬ КешНоменклатура
               |ИЗ
               |	ТаблицаУправлениеЗапасами КАК ТаблицаУправлениеЗапасами
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	Номенклатура
               |;
               ////////////////////////////////////////////////////////////////////////////////
			   //2
               |ВЫБРАТЬ
               |	Выразить(ТоварыКПоступлениюОстатки.ДокументПоступления КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику,
               |	ВложенныйЗапрос.КоличествоУпаковок КАК СуммаКоличество
               |ИЗ
               |	РегистрНакопления.ТоварыКПоступлению.Остатки(
               |			,
               |			ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
               |				И Номенклатура В
               |					(ВЫБРАТЬ
               |						Кеш.Номенклатура
               |					ИЗ
               |						КешНоменклатура КАК Кеш)
               |				И Склад = &ЛогистическийЦентр) КАК ТоварыКПоступлениюОстатки
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(
               |				,
               |				,
               |				,
               |				,
               |				Номенклатура В  (ВЫБРАТЬ 	Номенклатура   ИЗ	КешНоменклатура )
               |				И Склад = &ЛогистическийЦентр) КАК ЗаказыПоставщикамОстаткиИОбороты
			   |
               |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
               |ПО ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику = ЗаказПоставщикуТовары.Ссылка
               |И ЗаказыПоставщикамОстаткиИОбороты.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
               |И ЗаказыПоставщикамОстаткиИОбороты.КодСтроки = ЗаказПоставщикуТовары.КодСтроки
               |		
			   |ПО ТоварыКПоступлениюОстатки.ДокументПоступления = ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику
               |ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
			   |		ВЫБРАТЬ
               |			ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
               |			СУММА(ЗаказПоставщикуТовары.КоличествоУпаковок) КАК КоличествоУпаковок
               |		ИЗ
               |			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
               |		
               |		СГРУППИРОВАТЬ ПО
               |			ЗаказПоставщикуТовары.Ссылка) КАК ВложенныйЗапрос
               |ПО ТоварыКПоступлениюОстатки.ДокументПоступления = ВложенныйЗапрос.Ссылка
			   |
               |ГДЕ
               |	ЗаказПоставщикуТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
               |
               |СГРУППИРОВАТЬ ПО
               |	ТоварыКПоступлениюОстатки.ДокументПоступления,
               |	ВложенныйЗапрос.КоличествоУпаковок";
Возврат ТекстЗапроса;
КонецФункции // ПолучитьСписокЗаказовПоставщикуБезНазначения()

&НаСервере
Функция ПолучитьТекстЗапросаПеренестиНазначенияВЗаказПоставщика()
ТекстЗапроса =  "ВЫБРАТЬ
                |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
                |	ЗаказПоставщикуТовары.Склад,
                |	ЗаказПоставщикуТовары.Назначение,
                |	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
                |	ЗаказПоставщикуТовары.НомерСтроки,
                |	ЗаказПоставщикуТовары.НоменклатураПоставщика,
                |	ЗаказПоставщикуТовары.Характеристика,
                |	ЗаказПоставщикуТовары.Упаковка,
                |	ЗаказПоставщикуТовары.КоличествоУпаковок,
                |	ЗаказПоставщикуТовары.Количество,
                |	ЗаказПоставщикуТовары.ДатаПоступления,
                |	ЗаказПоставщикуТовары.УсловиеЦеныПоставщика,
                |	ЗаказПоставщикуТовары.Цена,
                |	ЗаказПоставщикуТовары.Сумма,
                |	ЗаказПоставщикуТовары.ПроцентРучнойСкидки,
                |	ЗаказПоставщикуТовары.СуммаРучнойСкидки,
                |	ЗаказПоставщикуТовары.СтавкаНДС,
                |	ЗаказПоставщикуТовары.СуммаНДС,
                |	ЗаказПоставщикуТовары.СуммаСНДС,
                |	ЗаказПоставщикуТовары.КодСтроки КАК КодСтроки,
                |	ЗаказПоставщикуТовары.Отменено,
                |	ЗаказПоставщикуТовары.СтатьяРасходов,
                |	ЗаказПоставщикуТовары.АналитикаРасходов,
                |	ЗаказПоставщикуТовары.ПричинаОтмены,
                |	ЗаказПоставщикуТовары.DDP,
                |	ЗаказПоставщикуТовары.КоличествоУпаковок КАК ОбщееКоличество,
                |	ЗаказПоставщикуТовары.КурсоваяРазницаDDP,
                |	ЗаказПоставщикуТовары.СуммаСDDP
                |ПОМЕСТИТЬ КешТабЗП
                |ИЗ
                |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
                |ГДЕ
                |	ЗаказПоставщикуТовары.Ссылка = &Ссылка
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Ссылка,
                |	Номенклатура,
                |	КодСтроки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешТабЗП.КодСтроки КАК КодСтроки,
                |	КешТабЗП.НоменклатураПоставщика,
                |	КешТабЗП.Номенклатура,
                |	КешТабЗП.Характеристика,
                |	КешТабЗП.Упаковка,
                |	КешТабЗП.Склад,
                |	КешТабЗП.КоличествоУпаковок,
                |	КешТабЗП.Количество,
                |	КешТабЗП.ДатаПоступления,
                |	КешТабЗП.УсловиеЦеныПоставщика,
                |	КешТабЗП.Цена,
                |	КешТабЗП.Сумма,
                |	КешТабЗП.ПроцентРучнойСкидки,
                |	КешТабЗП.СуммаРучнойСкидки,
                |	КешТабЗП.СтавкаНДС,
                |	КешТабЗП.СуммаНДС,
                |	КешТабЗП.СуммаСНДС,
                |	КешТабЗП.Отменено,
                |	КешТабЗП.СтатьяРасходов,
                |	КешТабЗП.АналитикаРасходов,
                |	КешТабЗП.ПричинаОтмены,
                |	КешТабЗП.Назначение,
                |	КешТабЗП.НомерСтроки,
                |	ЛОЖЬ КАК Флаг,
                |	КешТабЗП.DDP,
                |	КешТабЗП.ОбщееКоличество,
                |	КешТабЗП.КурсоваяРазницаDDP,
                |	КешТабЗП.СуммаСDDP
                |ПОМЕСТИТЬ КешЗПОтменены
                |ИЗ
                |	КешТабЗП КАК КешТабЗП
                |ГДЕ
                |	(НЕ КешТабЗП.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
                |			ИЛИ КешТабЗП.Отменено)
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	КодСтроки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
                |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
                |	ЗаказыПоставщикамОстатки.Склад,
                |	ЗаказыПоставщикамОстатки.ЗаказаноОстаток,
                |	ЗаказыПоставщикамОстатки.КодСтроки КАК КодСтроки,
                |	КешТабЗП.КоличествоУпаковок * ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК КоличествоУпаковок,
                |	КешТабЗП.DDP
                |ПОМЕСТИТЬ КешЗП
                |ИЗ
                |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ) КАК ЗаказыПоставщикамОстатки
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТабЗП КАК КешТабЗП
                |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
                |			ПО КешТабЗП.Упаковка = УпаковкиНоменклатуры.Ссылка
                |		ПО ЗаказыПоставщикамОстатки.ЗаказПоставщику = КешТабЗП.Ссылка
                |			И ЗаказыПоставщикамОстатки.Номенклатура = КешТабЗП.Номенклатура
                |			И ЗаказыПоставщикамОстатки.Характеристика = КешТабЗП.Характеристика
                |			И ЗаказыПоставщикамОстатки.КодСтроки = КешТабЗП.КодСтроки
                |ГДЕ
                |	КешТабЗП.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
                |	И НЕ КешТабЗП.Отменено
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	ЗаказПоставщику,
                |	Номенклатура,
                |	КодСтроки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешЗП.ЗаказПоставщику,
                |	КешЗП.Номенклатура,
                |	КешЗП.Склад,
                |	КешЗП.КоличествоУпаковок - КешЗП.ЗаказаноОстаток КАК ЗаказаноОстаток,
                |	КешЗП.КодСтроки,
                |	КешЗП.КоличествоУпаковок КАК КоличествоУпаковок,
                |	КешЗП.DDP
                |ПОМЕСТИТЬ ТоварыОформленные
                |ИЗ
                |	КешЗП КАК КешЗП
                |ГДЕ
                |	КешЗП.ЗаказаноОстаток <> КешЗП.КоличествоУпаковок
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешЗП.ЗаказПоставщику КАК ЗаказПоставщику,
                |	КешЗП.Номенклатура КАК Номенклатура,
                |	КешЗП.Склад,
                |	КешЗП.ЗаказаноОстаток,
                |	КешЗП.КодСтроки КАК КодСтроки,
                |	КешЗП.КоличествоУпаковок КАК КоличествоУпаковок,
                |	КешЗП.DDP
                |ПОМЕСТИТЬ ТоварыКПоступлению
                |ИЗ
                |	КешЗП КАК КешЗП
                |ГДЕ
                |	КешЗП.ЗаказаноОстаток <> КешЗП.КоличествоУпаковок
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |	КешЗП.ЗаказПоставщику,
                |	КешЗП.Номенклатура,
                |	КешЗП.Склад,
                |	КешЗП.ЗаказаноОстаток,
                |	КешЗП.КодСтроки,
                |	КешЗП.КоличествоУпаковок,
                |	КешЗП.DDP
                |ИЗ
                |	КешЗП КАК КешЗП
                |ГДЕ
                |	КешЗП.ЗаказаноОстаток = КешЗП.КоличествоУпаковок
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	ЗаказПоставщику,
                |	Номенклатура,
                |	КодСтроки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ОбеспечениеЗаказовОстатки.Номенклатура КАК Номенклатура,
                |	ОбеспечениеЗаказовОстатки.Назначение КАК Назначение,
                |	ОбеспечениеЗаказовОстатки.КЗаказуОстаток - ЕСТЬNULL(КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.КПоступлениюОстаток, 0) КАК КЗаказуОстаток
                |ПОМЕСТИТЬ КешУЗ
                |ИЗ
                |	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
                |			,
                |			Номенклатура В
                |				(ВЫБРАТЬ
                |					ТоварыКПоступлению.Номенклатура
                |				ИЗ
                |					ТоварыКПоступлению КАК ТоварыКПоступлению)) КАК ОбеспечениеЗаказовОстатки
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки КАК КТС_ТоварыКПоступлениюПодОбеспечениеОстатки
                |		ПО ОбеспечениеЗаказовОстатки.Номенклатура = КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Номенклатура
                |			И ОбеспечениеЗаказовОстатки.Назначение = КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Назначение
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешУЗ.Номенклатура КАК Номенклатура,
                |	КешУЗ.Назначение,
                |	КешУЗ.КЗаказуОстаток,
                |	КешУЗ.Назначение.Заказ КАК Заказ
                |ПОМЕСТИТЬ КешНазначения
                |ИЗ
                |	КешУЗ КАК КешУЗ
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешНазначения.Номенклатура КАК Номенклатура,
                |	КешНазначения.Назначение,
                |	КешНазначения.КЗаказуОстаток КАК ЗаказаноОстаток,
                |	СУММА(КешНазначенияКопия.КЗаказуОстаток) - КешНазначения.КЗаказуОстаток КАК СуммаДо,
                |	СУММА(КешНазначенияКопия.КЗаказуОстаток) КАК СуммаПосле
                |ПОМЕСТИТЬ ОстаткиНарастающие
                |ИЗ
                |	КешНазначения КАК КешНазначения
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешНазначения КАК КешНазначенияКопия
                |		ПО КешНазначения.Номенклатура = КешНазначенияКопия.Номенклатура
                |			И КешНазначения.Заказ.МоментВремени >= КешНазначенияКопия.Заказ.МоментВремени
                |
                |СГРУППИРОВАТЬ ПО
                |	КешНазначения.Номенклатура,
                |	КешНазначения.Назначение,
                |	КешНазначения.КЗаказуОстаток
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ТоварыКПоступлению.ЗаказПоставщику,
                |	ТоварыКПоступлению.Номенклатура,
                |	ТоварыКПоступлению.Склад,
                |	ТоварыКПоступлению.КодСтроки,
                |	ТоварыКПоступлению.КоличествоУпаковок,
                |	ТоварыКПоступлению.ЗаказаноОстаток КАК ЗаказаноОстаток,
                |	СУММА(ТоварыКПоступлениюКопия.ЗаказаноОстаток) - ТоварыКПоступлению.ЗаказаноОстаток КАК СуммаДо,
                |	СУММА(ТоварыКПоступлениюКопия.ЗаказаноОстаток) КАК СуммаПосле
                |ПОМЕСТИТЬ КОформлениюНарастающие
                |ИЗ
                |	ТоварыКПоступлению КАК ТоварыКПоступлению
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКПоступлению КАК ТоварыКПоступлениюКопия
                |		ПО ТоварыКПоступлению.ЗаказПоставщику = ТоварыКПоступлениюКопия.ЗаказПоставщику
                |			И ТоварыКПоступлению.Номенклатура = ТоварыКПоступлениюКопия.Номенклатура
                |			И ТоварыКПоступлению.КодСтроки >= ТоварыКПоступлениюКопия.КодСтроки
                |
                |СГРУППИРОВАТЬ ПО
                |	ТоварыКПоступлению.Склад,
                |	ТоварыКПоступлению.ЗаказПоставщику,
                |	ТоварыКПоступлению.Номенклатура,
                |	ТоварыКПоступлению.КодСтроки,
                |	ТоварыКПоступлению.КоличествоУпаковок,
                |	ТоварыКПоступлению.ЗаказаноОстаток
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ОстаткиНарастающие.Номенклатура КАК Номенклатура,
                |	ОстаткиНарастающие.СуммаПосле КАК Точка
                |ПОМЕСТИТЬ ТочкиПересечений
                |ИЗ
                |	ОстаткиНарастающие КАК ОстаткиНарастающие
                |
                |ОБЪЕДИНИТЬ
                |
                |ВЫБРАТЬ
                |	КОформлениюНарастающие.Номенклатура,
                |	КОформлениюНарастающие.СуммаПосле
                |ИЗ
                |	КОформлениюНарастающие КАК КОформлениюНарастающие
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура,
                |	Точка
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ТочкиПересечений.Номенклатура КАК Номенклатура,
                |	ТочкиПересечений.Точка КАК Точка,
                |	ЕСТЬNULL(КОформлениюНарастающие.ЗаказПоставщику, """") КАК ЗаказПоставщику,
                |	ЕСТЬNULL(КОформлениюНарастающие.КодСтроки, 0) КАК КодСтроки,
                |	ЕСТЬNULL(КОформлениюНарастающие.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
                |	ЕСТЬNULL(КОформлениюНарастающие.ЗаказаноОстаток, 0) КАК ЗаказаноОстатокЗП,
                |	ЕСТЬNULL(КОформлениюНарастающие.СуммаДо, 0) КАК СуммаДоЗП,
                |	ЕСТЬNULL(КОформлениюНарастающие.СуммаПосле, 0) КАК СуммаПослеЗП,
                |	ЕСТЬNULL(ОстаткиНарастающие.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
                |	ЕСТЬNULL(ОстаткиНарастающие.ЗаказаноОстаток, 0) КАК ЗаказаноОстатокЗК,
                |	ЕСТЬNULL(ОстаткиНарастающие.СуммаДо, 0) КАК СуммаДоЗК,
                |	ЕСТЬNULL(ОстаткиНарастающие.СуммаПосле, 0) КАК СуммаПослеЗК
                |ПОМЕСТИТЬ ОстаткиПоЗаказамНаростающие
                |ИЗ
                |	ТочкиПересечений КАК ТочкиПересечений
                |		ЛЕВОЕ СОЕДИНЕНИЕ КОформлениюНарастающие КАК КОформлениюНарастающие
                |		ПО (КОформлениюНарастающие.Номенклатура = ТочкиПересечений.Номенклатура)
                |			И (КОформлениюНарастающие.СуммаПосле >= ТочкиПересечений.Точка)
                |			И (КОформлениюНарастающие.СуммаДо < ТочкиПересечений.Точка)
                |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНарастающие КАК ОстаткиНарастающие
                |		ПО (ОстаткиНарастающие.Номенклатура = ТочкиПересечений.Номенклатура)
                |			И (ОстаткиНарастающие.СуммаПосле >= ТочкиПересечений.Точка)
                |			И (ОстаткиНарастающие.СуммаДо < ТочкиПересечений.Точка)
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура,
                |	Точка
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ОстаткиПоЗаказамНаростающие.Номенклатура,
                |	ОстаткиПоЗаказамНаростающие.Точка,
                |	ОстаткиПоЗаказамНаростающие.ЗаказПоставщику,
                |	ОстаткиПоЗаказамНаростающие.КодСтроки,
                |	ОстаткиПоЗаказамНаростающие.КоличествоУпаковок,
                |	ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП,
                |	ОстаткиПоЗаказамНаростающие.СуммаДоЗП,
                |	ОстаткиПоЗаказамНаростающие.СуммаПослеЗП,
                |	ОстаткиПоЗаказамНаростающие.Назначение,
                |	ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗК,
                |	ОстаткиПоЗаказамНаростающие.СуммаДоЗК,
                |	ОстаткиПоЗаказамНаростающие.СуммаПослеЗК,
                |	ВЫБОР
                |		КОГДА ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП > ОстаткиПоЗаказамНаростающие.СуммаДоЗК
                |				И ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП < ОстаткиПоЗаказамНаростающие.СуммаПослеЗК
                |			ТОГДА ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП - ОстаткиПоЗаказамНаростающие.СуммаДоЗК
                |		КОГДА ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП < ОстаткиПоЗаказамНаростающие.СуммаДоЗК
                |				И ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП < ОстаткиПоЗаказамНаростающие.СуммаПослеЗК
                |			ТОГДА ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗП
                |		ИНАЧЕ ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗК
                |	КОНЕЦ КАК ЗаказатьЗП
                |ПОМЕСТИТЬ РазбивкаСтрок
                |ИЗ
                |	ОстаткиПоЗаказамНаростающие КАК ОстаткиПоЗаказамНаростающие
                |ГДЕ
                |	ОстаткиПоЗаказамНаростающие.КоличествоУпаковок > 0
                |	И ОстаткиПоЗаказамНаростающие.ЗаказаноОстатокЗК > 0
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешРазбивкаСтрок.Номенклатура КАК Номенклатура,
                |	КешРазбивкаСтрок.Точка КАК Точка,
                |	КешРазбивкаСтрок.ЗаказПоставщику,
                |	КешРазбивкаСтрок.КодСтроки,
                |	КешРазбивкаСтрок.КоличествоУпаковок,
                |	КешРазбивкаСтрок.ЗаказаноОстатокЗП,
                |	КешРазбивкаСтрок.СуммаДоЗП,
                |	КешРазбивкаСтрок.СуммаПослеЗП,
                |	КешРазбивкаСтрок.Назначение,
                |	КешРазбивкаСтрок.ЗаказаноОстатокЗК,
                |	КешРазбивкаСтрок.СуммаДоЗК,
                |	КешРазбивкаСтрок.СуммаПослеЗК,
                |	КешРазбивкаСтрок.ЗаказатьЗП,
                |	КешРазбивкаСтрок.ЗаказаноОстатокЗК - КешРазбивкаСтрок.ЗаказатьЗП КАК Остаток
                |ПОМЕСТИТЬ КешОформлениеСОстатками
                |ИЗ
                |	РазбивкаСтрок КАК КешРазбивкаСтрок
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура,
                |	Точка
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешОформлениеСОстатками.Номенклатура,
                |	КешОформлениеСОстатками.Точка,
                |	КешОформлениеСОстатками.ЗаказПоставщику,
                |	КешОформлениеСОстатками.КодСтроки,
                |	КешОформлениеСОстатками.КоличествоУпаковок,
                |	КешОформлениеСОстатками.ЗаказаноОстатокЗП,
                |	КешОформлениеСОстатками.СуммаДоЗП,
                |	КешОформлениеСОстатками.СуммаПослеЗП,
                |	КешОформлениеСОстатками.Назначение,
                |	КешОформлениеСОстатками.ЗаказаноОстатокЗК,
                |	КешОформлениеСОстатками.СуммаДоЗК,
                |	КешОформлениеСОстатками.СуммаПослеЗК,
                |	КешОформлениеСОстатками.ЗаказатьЗП,
                |	КешОформлениеСОстатками.Остаток,
                |	СУММА(КешОформлениеСОстаткамиКопия.Остаток) КАК ОстатокНаростающий
                |ПОМЕСТИТЬ КешОформлениеСОстаткамиНаростающие
                |ИЗ
                |	КешОформлениеСОстатками КАК КешОформлениеСОстатками
                |		ЛЕВОЕ СОЕДИНЕНИЕ КешОформлениеСОстатками КАК КешОформлениеСОстаткамиКопия
                |		ПО КешОформлениеСОстатками.Номенклатура = КешОформлениеСОстаткамиКопия.Номенклатура
                |			И КешОформлениеСОстатками.Точка >= КешОформлениеСОстаткамиКопия.Точка
                |
                |СГРУППИРОВАТЬ ПО
                |	КешОформлениеСОстатками.Номенклатура,
                |	КешОформлениеСОстатками.ЗаказПоставщику,
                |	КешОформлениеСОстатками.Назначение,
                |	КешОформлениеСОстатками.Точка,
                |	КешОформлениеСОстатками.КодСтроки,
                |	КешОформлениеСОстатками.КоличествоУпаковок,
                |	КешОформлениеСОстатками.ЗаказаноОстатокЗП,
                |	КешОформлениеСОстатками.СуммаДоЗП,
                |	КешОформлениеСОстатками.СуммаПослеЗП,
                |	КешОформлениеСОстатками.ЗаказаноОстатокЗК,
                |	КешОформлениеСОстатками.СуммаДоЗК,
                |	КешОформлениеСОстатками.СуммаПослеЗК,
                |	КешОформлениеСОстатками.ЗаказатьЗП,
                |	КешОформлениеСОстатками.Остаток
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КудасьНаростающие.Номенклатура,
                |	КудасьНаростающие.КоличествоУпаковок,
                |	КудасьНаростающие.Точка,
                |	КудасьНаростающие.ЗаказПоставщику,
                |	КудасьНаростающие.КодСтроки,
                |	КудасьНаростающие.ЗаказаноОстатокЗП,
                |	КудасьНаростающие.СуммаДоЗП,
                |	КудасьНаростающие.СуммаПослеЗП,
                |	КудасьНаростающие.Назначение,
                |	КудасьНаростающие.ЗаказаноОстатокЗК,
                |	КудасьНаростающие.СуммаДоЗК,
                |	КудасьНаростающие.СуммаПослеЗК,
                |	ВЫБОР
                |		КОГДА КудасьНаростающие.ОстатокНаростающий - КудасьНаростающие.Остаток = 0
                |			ТОГДА КудасьНаростающие.ЗаказатьЗП
                |		ИНАЧЕ КудасьНаростающие.ОстатокНаростающий - КудасьНаростающие.Остаток
                |	КОНЕЦ КАК ЗаказатьЗП
                |ПОМЕСТИТЬ КешРазбивкаСтрок
                |ИЗ
                |	КешОформлениеСОстаткамиНаростающие КАК КудасьНаростающие
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешРазбивкаСтрок.Номенклатура КАК Номенклатура,
                |	КешРазбивкаСтрок.КодСтроки,
                |	КешРазбивкаСтрок.КоличествоУпаковок,
                |	КешРазбивкаСтрок.ЗаказаноОстатокЗП,
                |	СУММА(КешРазбивкаСтрок.ЗаказатьЗП) КАК ЗаказатьЗП
                |ПОМЕСТИТЬ КешСуммаНоменклатуры
                |ИЗ
                |	КешРазбивкаСтрок КАК КешРазбивкаСтрок
                |
                |СГРУППИРОВАТЬ ПО
                |	КешРазбивкаСтрок.Номенклатура,
                |	КешРазбивкаСтрок.КодСтроки,
                |	КешРазбивкаСтрок.КоличествоУпаковок,
                |	КешРазбивкаСтрок.ЗаказаноОстатокЗП
                |
                |ИНДЕКСИРОВАТЬ ПО
                |	Номенклатура
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ТоварыКПоступлению.ЗаказПоставщику,
                |	ТоварыКПоступлению.Номенклатура,
                |	ТоварыКПоступлению.Склад,
                |	ТоварыКПоступлению.ЗаказаноОстаток,
                |	ТоварыКПоступлению.КодСтроки,
                |	ТоварыКПоступлению.КоличествоУпаковок,
                |	ТоварыКПоступлению.ЗаказаноОстаток - ЕСТЬNULL(КешСуммаНоменклатуры.ЗаказатьЗП, 0) КАК КоличествоБезНазначения
                |ПОМЕСТИТЬ НоменклатураБезНазначения
                |ИЗ
                |	ТоварыКПоступлению КАК ТоварыКПоступлению
                |		ЛЕВОЕ СОЕДИНЕНИЕ КешСуммаНоменклатуры КАК КешСуммаНоменклатуры
                |		ПО ТоварыКПоступлению.КодСтроки = КешСуммаНоменклатуры.КодСтроки
                |			И ТоварыКПоступлению.Номенклатура = КешСуммаНоменклатуры.Номенклатура
                |			И ТоварыКПоступлению.КоличествоУпаковок = КешСуммаНоменклатуры.КоличествоУпаковок
                |			И ТоварыКПоступлению.ЗаказаноОстаток = КешСуммаНоменклатуры.ЗаказаноОстатокЗП
                |ГДЕ
                |	ТоварыКПоступлению.ЗаказаноОстаток - ЕСТЬNULL(КешСуммаНоменклатуры.ЗаказатьЗП, 0) > 0
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	НоменклатураБезНазначения.ЗаказПоставщику,
                |	НоменклатураБезНазначения.Номенклатура,
                |	НоменклатураБезНазначения.КодСтроки,
                |	НоменклатураБезНазначения.КоличествоБезНазначения,
                |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
                |	ИСТИНА КАК Флаг
                |ПОМЕСТИТЬ КешЗПРазбивкаСтрок
                |ИЗ
                |	НоменклатураБезНазначения КАК НоменклатураБезНазначения
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |	КешРазбивкаСтрок.ЗаказПоставщику,
                |	КешРазбивкаСтрок.Номенклатура,
                |	КешРазбивкаСтрок.КодСтроки,
                |	КешРазбивкаСтрок.ЗаказатьЗП,
                |	КешРазбивкаСтрок.Назначение,
                |	ИСТИНА
                |ИЗ
                |	КешРазбивкаСтрок КАК КешРазбивкаСтрок
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |	ТоварыОформленные.ЗаказПоставщику,
                |	ТоварыОформленные.Номенклатура,
                |	ТоварыОформленные.КодСтроки,
                |	ТоварыОформленные.ЗаказаноОстаток,
                |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
                |	ЛОЖЬ
                |ИЗ
                |	ТоварыОформленные КАК ТоварыОформленные
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КешЗПОтменены.КодСтроки,
                |	КешЗПОтменены.НоменклатураПоставщика,
                |	КешЗПОтменены.Номенклатура,
                |	КешЗПОтменены.Характеристика,
                |	КешЗПОтменены.Упаковка,
                |	КешЗПОтменены.Склад,
                |	КешЗПОтменены.КоличествоУпаковок,
                |	КешЗПОтменены.Количество,
                |	КешЗПОтменены.ДатаПоступления,
                |	КешЗПОтменены.УсловиеЦеныПоставщика,
                |	КешЗПОтменены.Цена,
                |	КешЗПОтменены.Сумма,
                |	КешЗПОтменены.ПроцентРучнойСкидки,
                |	КешЗПОтменены.СуммаРучнойСкидки,
                |	КешЗПОтменены.СтавкаНДС,
                |	КешЗПОтменены.СуммаНДС,
                |	КешЗПОтменены.СуммаСНДС,
                |	КешЗПОтменены.Отменено,
                |	КешЗПОтменены.СтатьяРасходов,
                |	КешЗПОтменены.АналитикаРасходов,
                |	КешЗПОтменены.ПричинаОтмены,
                |	КешЗПОтменены.Назначение,
                |	КешЗПОтменены.НомерСтроки КАК НомерСтроки,
                |	КешЗПОтменены.Флаг,
                |	КешЗПОтменены.DDP,
                |	КешЗПОтменены.ОбщееКоличество,
                |	КешЗПОтменены.КурсоваяРазницаDDP,
                |	КешЗПОтменены.СуммаСDDP
                |ПОМЕСТИТЬ ОсновнаяТаблица
                |ИЗ
                |	КешЗПОтменены КАК КешЗПОтменены
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |	КешЗПРазбивкаСтрок.КодСтроки,
                |	КешТабЗП.НоменклатураПоставщика,
                |	КешЗПРазбивкаСтрок.Номенклатура,
                |	КешТабЗП.Характеристика,
                |	КешТабЗП.Упаковка,
                |	КешТабЗП.Склад,
                |	ЕСТЬNULL(КешЗПРазбивкаСтрок.КоличествоБезНазначения, 0),
                |	ЕСТЬNULL(КешЗПРазбивкаСтрок.КоличествоБезНазначения, 0),
                |	КешТабЗП.ДатаПоступления,
                |	КешТабЗП.УсловиеЦеныПоставщика,
                |	КешТабЗП.Цена,
                |	КешТабЗП.Сумма,
                |	КешТабЗП.ПроцентРучнойСкидки,
                |	КешТабЗП.СуммаРучнойСкидки,
                |	КешТабЗП.СтавкаНДС,
                |	КешТабЗП.СуммаНДС,
                |	КешТабЗП.СуммаСНДС,
                |	КешТабЗП.Отменено,
                |	КешТабЗП.СтатьяРасходов,
                |	КешТабЗП.АналитикаРасходов,
                |	КешТабЗП.ПричинаОтмены,
                |	КешЗПРазбивкаСтрок.Назначение,
                |	КешТабЗП.НомерСтроки,
                |	КешЗПРазбивкаСтрок.Флаг,
                |	КешТабЗП.DDP,
                |	КешТабЗП.ОбщееКоличество,
                |	КешТабЗП.КурсоваяРазницаDDP,
                |	КешТабЗП.СуммаСDDP
                |ИЗ
                |	КешЗПРазбивкаСтрок КАК КешЗПРазбивкаСтрок
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТабЗП КАК КешТабЗП
                |		ПО КешЗПРазбивкаСтрок.ЗаказПоставщику = КешТабЗП.Ссылка
                |			И КешЗПРазбивкаСтрок.Номенклатура = КешТабЗП.Номенклатура
                |			И КешЗПРазбивкаСтрок.КодСтроки = КешТабЗП.КодСтроки
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ОсновнаяТаблица.КодСтроки,
                |	ОсновнаяТаблица.НоменклатураПоставщика,
                |	ОсновнаяТаблица.Номенклатура,
                |	ОсновнаяТаблица.Характеристика,
                |	ОсновнаяТаблица.Упаковка,
                |	ОсновнаяТаблица.Склад,
                |	ВЫРАЗИТЬ(ОсновнаяТаблица.КоличествоУпаковок / ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК ЧИСЛО(15, 2)) КАК КоличествоУпаковок,
                |	ОсновнаяТаблица.Количество,
                |	ОсновнаяТаблица.ДатаПоступления,
                |	ОсновнаяТаблица.УсловиеЦеныПоставщика,
                |	ОсновнаяТаблица.Цена,
                |	ОсновнаяТаблица.Сумма,
                |	ОсновнаяТаблица.ПроцентРучнойСкидки,
                |	ОсновнаяТаблица.СуммаРучнойСкидки,
                |	ОсновнаяТаблица.СтавкаНДС,
                |	ОсновнаяТаблица.СуммаНДС,
                |	ОсновнаяТаблица.СуммаСНДС,
                |	ОсновнаяТаблица.Отменено,
                |	ОсновнаяТаблица.СтатьяРасходов,
                |	ОсновнаяТаблица.АналитикаРасходов,
                |	ОсновнаяТаблица.ПричинаОтмены,
                |	ОсновнаяТаблица.Назначение,
                |	ОсновнаяТаблица.НомерСтроки,
                |	ОсновнаяТаблица.Флаг,
                |	ОсновнаяТаблица.DDP,
                |	ОсновнаяТаблица.ОбщееКоличество,
                |	ОсновнаяТаблица.КурсоваяРазницаDDP,
                |	ОсновнаяТаблица.СуммаСDDP
                |ИЗ
                |	ОсновнаяТаблица КАК ОсновнаяТаблица
                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
                |		ПО ОсновнаяТаблица.Упаковка = УпаковкиНоменклатуры.Ссылка
                |ГДЕ
                |	ОсновнаяТаблица.КоличествоУпаковок > 0";
				
Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПеренестиНазначенияВЗаказПоставщика()

&НаСервере
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
КонецПроцедуры //ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок()
















