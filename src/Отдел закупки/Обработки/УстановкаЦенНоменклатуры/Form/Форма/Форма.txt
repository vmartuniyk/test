
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Номенклатура 	= Параметры.Номенклатура;
	ЦеноваяГруппа	= Номенклатура.ЦеноваяГруппа;
	Характеристика	= Параметры.Характеристика;
	
	// Устанавляем значения в реквизит   ВыдЦеныРозничная и ЦеноваяГрупаАкция  для ограничения изминения розничной цени при ценовой групе акции
	
	ВыдЦеныРозничная = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85"));
	ЦеноваяГрупаАкция =  Справочники.ЦеновыеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d4864a2d-36e3-11e1-9d60-001e67162d38"));

	
	
	Элементы.ЦеноваяГруппа.Доступность 	= ?(РольДоступна("УстановкаЦенНоменклатурыБезСогласования") ИЛИ РольДоступна("ПолныеПрава") , Истина, Ложь);
	Элементы.Себестоимость.Видимость   	= ?(РольДоступна("ЧтениеСебестоимости") 	ИЛИ РольДоступна("ПолныеПрава") , Истина, Ложь);
	Элементы.ПоследняяПродажа.Видимость = ?(РольДоступна("ЧтениеПоследнейПродажи") 	ИЛИ РольДоступна("ПолныеПрава") , Истина, Ложь);
	Элементы.ГруппаПраво.Видимость	   	= ?(РольДоступна("ЧтениеВаловойПрибыли") 	ИЛИ РольДоступна("ПолныеПрава") , Истина, Ложь);
	Элементы.ГруппаФасет.Видимость	   	= ?(РольДоступна("ЧтениеФасетов") 			ИЛИ РольДоступна("ПолныеПрава") , Истина, Ложь);
	
	
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЦеновыхГрупп = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ЦеновыеГруппы ");
	Выборка = ЗапросЦеновыхГрупп.Выполнить().Выбрать();
	СписокЦеновыхГрупп.Добавить(Справочники.ЦеновыеГруппы.ПустаяСсылка(), "Удалить ценовую группу");
	Пока Выборка.Следующий() Цикл
		СписокЦеновыхГрупп.Добавить(Выборка.Ссылка, Выборка.Ссылка);	
	КонецЦикла;
			
	ЗапросПоследнийВход = Новый Запрос("
		|ВЫБРАТЬ
		|	Период					КАК Дата,
		|	Стоимость / Количество 	КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК СБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ  РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			По	Аналитика.Номенклатура		= &Номенклатура
		|			И	Аналитика.Характеристика    = &Характеристика
		|			И	Аналитика.КлючАналитики 	= СБ.АналитикаУчетаНоменклатуры 
		|			
		|ГДЕ
		|		Регистратор Ссылка Документ.ПоступлениеТоваровУслуг
		| ИЛИ 	Регистратор Ссылка Документ.ОприходованиеИзлишковТоваров
		| ИЛИ	Регистратор Ссылка Документ.ВводОстатков
		| 
		|УПОРЯДОЧИТЬ ПО Период Убыв");
	ЗапросПоследнийВход.УстановитьПараметр("Номенклатура", 		Номенклатура);
	ЗапросПоследнийВход.УстановитьПараметр("Характеристика", 	Характеристика);
	Результат = ЗапросПоследнийВход.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Себестоимость = Результат.Себестоимость;
	КонецЕсли;
	
	
	
	ЗапросПоследняяПродажа = Новый Запрос("
		|ВЫБРАТЬ 
		|	Период						КАК Дата,
		|	СуммаВыручки / Количество 	КАК ПоследняяПродажа
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК СБ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ  РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			По	Аналитика.Номенклатура		= &Номенклатура
		|			И	Аналитика.Характеристика    = &Характеристика
		|			И	Аналитика.КлючАналитики 	= СБ.АналитикаУчетаНоменклатуры 
		|			
		|ГДЕ
		|		Регистратор Ссылка Документ.РеализацияТоваровУслуг
		| 
		|УПОРЯДОЧИТЬ ПО Период Убыв");
	ЗапросПоследняяПродажа.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросПоследняяПродажа.УстановитьПараметр("Характеристика", 	Характеристика);
	Результат = ЗапросПоследняяПродажа.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ПоследняяПродажа = Результат.ПоследняяПродажа;
	КонецЕсли;

	
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Попытка
		СформироватьОтчетНаСервере();
	Исключение
		
	КонецПопытки;
	
	ЗагрузитьЦены();
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФасет(ВидЦены)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	*
		|ИЗ
		| 	РегистрСведений.ALPS_НаценкиДляВидовНоменклатуры
		|ГДЕ
		|	ВидЦены 		= &ВидЦены 
		|И 	ВидНоменклатуры = &ВидНоменклатуры  
		|");
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	*
			|ИЗ
			| 	РегистрСведений.ALPS_НаценкиДляВидовНоменклатуры
			|ГДЕ
			|	ВидЦены = &ВидЦены 
			|И 	ВидНоменклатуры = Значение(Справочник.ВидыНоменклатуры.ПустаяСсылка)";	
		Результат = Запрос.Выполнить();
			
	КонецЕсли;
	
	Регламент_Диапазоны.Загрузить(Результат.Выгрузить());
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЦены()
		
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| 	СпрВидЦены.Ссылка 			КАК ВидЦены,
		| 	СпрВидЦены.ВалютаЦены		КАК ВалютаЦены,
		| 	ЕСТЬNULL(Цены.Цена, 0)		КАК Цена,
		|	ЕСТЬNULL(ВхЦены.Цена, 0)    КАК ВходнаяЦена,
		|	&ВалютаУпр					КАК ВалютаВходнойЦены,
		|   0							КАК ПроцентНаценки,
		|   0							КАК ЗароботокМенеджера
		| 	
		|ИЗ
		| 	Справочник.ВидыЦен	КАК СпрВидЦены
		| 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК Цены
		| 	    ПО	Цены.ВидЦены = СпрВидЦены.Ссылка
		| 
		| 		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И Характеристика = &Характеристика И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.ALPS_ВидыЦен ГДЕ Входная)) КАК ВхЦены
		| 	    ПО	ИСТИНА
		|	
		|ГДЕ
		|	СпособЗаданияЦены = Значение(Перечисление.СпособыЗаданияЦен.Вручную)");
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Выбрать = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Выбрать Цикл	
		Строка.ПроцентНаценки 		= ПолучитьПроцентНаценки(Строка.Цена, Строка.ВходнаяЦена, Строка.ВалютаЦены, Строка.ВалютаВходнойЦены);	
		Строка.ЗароботокМенеджера 	= ПолучитьЗароботокМенеджера(Строка.Цена, Строка.ПроцентНаценки);
	КонецЦикла;
	
	Цены.Загрузить(Выбрать);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗароботокМенеджера(Цена, ПроцентНаценки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.ktcПроцентыМенеджера ГДЕ НижняяГраница <= &Процент УПОРЯДОЧИТЬ ПО НижняяГраница Убыв ";
	Запрос.УстановитьПараметр("Процент", ПроцентНаценки);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка.Следующий();
	
	Возврат Цена / 100 * ?(Выборка.ЗначениеПорога = Неопределено, 0, Выборка.ЗначениеПорога);
	
КонецФункции

&НаСервере
Функция ПолучитьПроцентНаценки(Цена, ВходнаяЦена, ВалютаЦены, ВалютаВходнойЦены)
		
	Возврат ?(ВалютаЦены = ВалютаВходнойЦены, ?(ВходнаяЦена = 0, 0, Цена / ВходнаяЦена * 100 - 100), ?(ВходнаяЦена = 0, 0, Цена / ВходнаяЦена * (ПолучитьКурсПоВалюте(ВалютаЦены) / ПолучитьКурсПоВалюте(ВалютаВходнойЦены)) * 100 - 100));
	
КонецФункции

&НаСервере
Функция ПолучитьКурсПоВалюте(Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Курс / Кратность КАК Курс Из РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта)";
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Курс;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЦеновуюГруппу(ЦГ = Неопределено) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектНоменклатура 					= Номенклатура.ПолучитьОбъект();
	ОбъектНоменклатура.ЦеноваяГруппа 	= ?(ЦГ = Неопределено, ЦеноваяГруппа, ЦГ);
	Попытка
		ОбъектНоменклатура.Записать();
	Исключение
		Сообщить("Запись не удалась, попробуйте позже." + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЦеновуюГруппуВРегистр(ЦГ, ДокументСсылка, БизнесПроцессСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПериод   = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.Регламент_ЦеновыеГруппы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Период.Установить(ДатаПериод);
	
	Запись = НаборЗаписей.Добавить();
	Запись.БизнесПроцесс 	= БизнесПроцессСсылка;
	Запись.Документ		 	= ДокументСсылка;
	Запись.Номенклатура		= Номенклатура;
	Запись.ЦеноваяГруппа	= ЦГ;
	Запись.Период			= ДатаПериод;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ЦГ, ЗаписатьЦГ)
	
	ЗапросПакет = Новый Запрос; 
	ЗапросПакет.Текст = "                                                             
		|ВЫБРАТЬ
		|	ТабЦены.ВидЦены,
		|   ТабЦены.Цена
		|
		|ПОМЕСТИТЬ ТабЦены
		|ИЗ
		|	&Таб КАК ТабЦены
		|
		|;
		|ВЫБРАТЬ
		|	Цены.ВидЦены,	
		|   Цены.Цена,
		|	&Номенклатура	КАК Номенклатура,
		|	&Характеристика КАК Характеристика
		|
		|	, Разница.Цена	КАК ЦенаРазница
		|
		|ИЗ
		|	ТабЦены	КАК Цены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СпрВидыЦен.Ссылка 						КАК ВидЦены,
		|				ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)  	КАК Цена
		|			ИЗ
		|				Справочник.ВидыЦен КАК СпрВидыЦен
		|				
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И &Характеристика = Характеристика) КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.ВидЦены = СпрВидыЦен.Ссылка  
		|			) КАК Разница
		|		ПО  Разница.Цена 	<> Цены.Цена
		|		И   Разница.ВидЦены =  Цены.ВидЦены
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И &Характеристика = Характеристика) КАК Разница
		//|       ПО	ЕСТЬNULL(Разница.Цена, 0) 	<> Цены.Цена
		//|       И	Разница.ВидЦены 			=  Цены.ВидЦены
		|;
		|";
	ЗапросПакет.УстановитьПараметр("Номенклатура", 		Номенклатура);
	ЗапросПакет.УстановитьПараметр("Характеристика", 	Характеристика);
	ЗапросПакет.УстановитьПараметр("Таб", 				Цены.Выгрузить());
	РезультатПакета = ЗапросПакет.ВыполнитьПакет();
	
	Если РезультатПакета[РезультатПакета.ВГраница()].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Попытка                                                                                                   
		
		ВыгрузкаПакета				 = РезультатПакета[РезультатПакета.ВГраница()].Выгрузить();
		
		ДокументОбъект 				 = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ДокументОбъект.Дата 		 = ТекущаяДата();
		ДокументОбъект.Комментарий   = "Ручная установка цены";
		ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.Статус		 = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		ДокументОбъект.ВидыЦен.Загрузить(ВыгрузкаПакета);
		ДокументОбъект.Товары.Загрузить(ВыгрузкаПакета);
		
		Если РольДоступна("УстановкаЦенНоменклатурыБезСогласования")
		 ИЛИ РольДоступна("ПолныеПрава") Тогда
		 
		 	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если ЗаписатьЦГ Тогда
				ЗаписатьЦеновуюГруппу(ЦГ); 
			КонецЕсли;
			
			Возврат Ложь;
			
		Иначе
			
			ДокументОбъект.Статус		= Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
			БизнесОбъект 				= БизнесПроцессы.СогласованиеЦенНоменклатуры.СоздатьБизнесПроцесс();
			БизнесОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
			БизнесОбъект.Предмет    	= ДокументОбъект.Ссылка;
			БизнесОбъект.ДатаНачала 	= ТекущаяДата();
			БизнесОбъект.Дата			= ТекущаяДата();
			БизнесОбъект.Важность		= Перечисления.ВариантыВажностиЗадачи.Высокая;
			БизнесОбъект.ДатаЗавершения = КонецДня(ТекущаяДата()) + 1;
			БизнесОбъект.Наименование 	= "Номенклатура: " + Номенклатура + ", Код: " + Номенклатура.Код + " " + Символы.ПС; 
			
			Для Каждого Строка Из ВыгрузкаПакета Цикл
				
				БизнесОбъект.Наименование = БизнесОбъект.Наименование + Строка.ВидЦены + " : старая цена: " + Строка.ЦенаРазница + " новая цена: " + Строка.Цена + " " + Символы.ПС;
				
			КонецЦикла;
			
			БизнесОбъект.Записать();
			
			Если ЗаписатьЦГ Тогда
				ЗаписатьЦеновуюГруппуВРегистр(ЦГ, ДокументОбъект.Ссылка, БизнесОбъект.Ссылка); 
			КонецЕсли;
			
			Возврат БизнесОбъект.Ссылка;
		 
		КонецЕсли;
		
	Исключение
		
		Сообщить("Не достаточно прав!");
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПроверитьИзменения()
	
	ЗапросПакет = Новый Запрос;
	ЗапросПакет.Текст = "
		|ВЫБРАТЬ
		|	ТабЦены.ВидЦены,
		|   ТабЦены.Цена
		|
		|ПОМЕСТИТЬ ТабЦены
		|ИЗ
		|	&Таб КАК ТабЦены
		|
		|;
		|ВЫБРАТЬ
		|	Цены.ВидЦены
		|ИЗ
		|	ТабЦены	КАК Цены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СпрВидыЦен.Ссылка 						КАК ВидЦены,
		|				ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)  	КАК Цена
		|			ИЗ
		|				Справочник.ВидыЦен КАК СпрВидыЦен
		|				
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И &Характеристика = Характеристика) КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.ВидЦены = СпрВидыЦен.Ссылка  
		|			) КАК Разница
		|		ПО  Разница.Цена 	<> Цены.Цена
		|		И   Разница.ВидЦены =  Цены.ВидЦены
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И &Характеристика = Характеристика) КАК Разница
		//|       ПО	Разница.Цена 	<> Цены.Цена
		//|       И	Разница.ВидЦены =  Цены.ВидЦены
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_ВидыЦен КАК ОбновитьЦены  
		|       	ПО	ОбновитьЦены.Входная = Ложь
		|       	И	ОбновитьЦены.ВидЦены = Цены.ВидЦены
		|			И	ОбновитьЦены.Авто	 = Истина
		|;
		|";
	ЗапросПакет.УстановитьПараметр("Номенклатура", 		Номенклатура);
	ЗапросПакет.УстановитьПараметр("Характеристика", 	Характеристика);
	ЗапросПакет.УстановитьПараметр("Таб", 				Цены.Выгрузить());
	РезультатПакета = ЗапросПакет.ВыполнитьПакет();
	
	Если РезультатПакета[РезультатПакета.ВГраница()].Пустой() Тогда
		Возврат Ложь;	
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отчет 				= Отчеты.ВыручкаИСебестоимостьПродаж.Создать();
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Настройки 			= КомпоновщикНастроек.Настройки;
	
	ПараметрыДанных								= Настройки.ПараметрыДанных;
	ПараметрыДанных.Элементы[2].Значение		= Неопределено;
	
	ОтборНастройки  							= Настройки.Отбор;
	ОтборНастройки.Элементы[4].Использование 	= Истина;
	ОтборНастройки.Элементы[4].ПравоеЗначение   = Номенклатура;
	
	//Настройки.Структура[0].ПоляГруппировки.Элементы[0].Использование 	= Ложь;
	//Настройки.Структура[0].ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//Настройки.Структура[0].ПоляГруппировки.Элементы[1].Поле 			= Настройки.ДоступныеПоляГруппировок.Элементы[6].Поле;
	
	ИсторияПродаж.Очистить();
	Отчет.СкомпоноватьРезультат(ИсторияПродаж);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);		
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ЦеныПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьФасет(Элемент.ТекущиеДанные.ВидЦены);
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Регламент_Диапазоны Цикл
		ПолучитьПредставление(Регламент_Диапазоны, ТекущаяСтрока);	
	КонецЦикла;
	
	ЦенаБаза		  = Элемент.ТекущиеДанные.ВходнаяЦена;
	НачальноеЗначение = Неопределено;
	Для Каждого СтрокаИзДФК Из Регламент_Диапазоны Цикл
		Если СтрокаИзДФК.НижняяГраница > ЦенаБаза Тогда
			Прервать;	
		КонецЕсли;
		НачальноеЗначение = СтрокаИзДФК;
	КонецЦикла;
	
	Если НачальноеЗначение <> Неопределено Тогда
		Элементы.Регламент_Диапазоны.ТекущаяСтрока = НачальноеЗначение.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Строка = Элемент.ТекущиеДанные;
	Строка.ПроцентНаценки 		= ПолучитьПроцентНаценки(Строка.Цена, Строка.ВходнаяЦена, Строка.ВалютаЦены, Строка.ВалютаВходнойЦены);	
	Строка.ЗароботокМенеджера 	= ПолучитьЗароботокМенеджера(Строка.Цена, Строка.ПроцентНаценки);
			
КонецПроцедуры





&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЦены(Команда)
	
		
	НужноУстановитьЦеновуюГруппу = ПроверитьИзменения();
	
	ЦГ = Неопределено;
	Если НужноУстановитьЦеновуюГруппу Тогда
		Пока ЦГ = Неопределено Цикл
			ЦГ = СписокЦеновыхГрупп.ВыбратьЭлемент("Выбор ценовой группы");	
		КонецЦикла;
	КонецЕсли;
	
	Результат = ЗаписатьНаСервере(?(ЦГ = Неопределено, Неопределено, ЦГ.Значение), НужноУстановитьЦеновуюГруппу);
	
	Если ТипЗнч(Результат) = Тип("БизнесПроцессСсылка.СогласованиеЦенНоменклатуры") Тогда
		
		//ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(Результат));
		ОткрытьЗначение(Результат);
		
	КонецЕсли;
	
		
		
КонецПроцедуры




&НаСервере
Функция РасчитатьФасетСервер(Идентификатор, Номенклатура)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеДанные	=	Цены.НайтиПоИдентификатору(Идентификатор);
	ВидЦены = ТекущиеДанные.ВидЦены;
	
	ОбъектОбработка 		= git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Модуль ценообразования");//РеквизитФормыВЗначение("Объект");
	
	ТекущийВидНоменклатуры 	=	Номенклатура.ВидНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапроса_Cache_Номенклатура();
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Номенклатура" , Номенклатура);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ТекущийВидНоменклатуры);
	Запрос.Выполнить();	
	
	ЗапросЦен = Новый Запрос;
	ЗапросЦен.Текст = "
		|ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	РегистрСведений.ALPS_ВидыЦен 
		|ГДЕ 
		|	ВидЦены = &ВидЦены";
		

		
	ЗапросЦен.УстановитьПараметр("ВидЦены", ВидЦены);
	ВыборкаЦен = ЗапросЦен.Выполнить().Выбрать();
	Пока ВыборкаЦен.Следующий() Цикл
		
		Запрос.УстановитьПараметр("ВидЦены", 		ВыборкаЦен.ВидЦены);
		Запрос.УстановитьПараметр("База_ВидЦены",	ВыборкаЦен.БазовыйВидЦены);
		Запрос.УстановитьПараметр("ВалютаВидаЦены", ВыборкаЦен.ВидЦены.ВалютаЦены);
		Запрос.УстановитьПараметр("РегламентноВыполнить", Истина);
		Запрос.Текст = ОбъектОбработка.ПолучитьТекстЗапроса_Cache_Фасетный();
		ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		ШаблонЗаполнен = Ложь;
		СтруктураШаблона = ОбъектОбработка.ПолучитьСтруктуруШаблона();
		ОбъектОбработка.ЗаполнитьСоответствияЗначенийШаблонов(ВыборкаЦен.ВидЦены, СтруктураШаблона, ШаблонЗаполнен);
		ОбъектОбработка.ЗаполнитьСоответствиеВидШаблон(ВыборкаЦен.ВидЦены, СтруктураШаблона);
		Если ШаблонЗаполнен Тогда
			Запрос.Текст = ОбъектОбработка.ПолучитьТекстЗапроса_Cache_Шаблоны(Запрос, СтруктураШаблона);
			ДанныеШаблонов = Запрос.Выполнить().Выгрузить();
			СоответствиеНоменклатура = СтруктураШаблона.СоответствиеНоменклатура;
			Для i=0 По ДанныеШаблонов.Количество()-1 Цикл СоответствиеНоменклатура[ДанныеШаблонов[i].Номенклатура] = ДанныеШаблонов[i]; КонецЦикла;
		КонецЕсли;
		
		СоответствиеВидШаблон = СтруктураШаблона.СоответствиеВидШаблон;
		СоответствиеНоменклатура = СтруктураШаблона.СоответствиеНоменклатура;
		Если СоответствиеВидШаблон.Количество() Тогда
			Для Каждого СтрокаНом Из ТаблицаНоменклатуры Цикл НаВыполнение = СоответствиеВидШаблон[СтрокаНом.ВидНоменклатуры]; Если НаВыполнение = Неопределено Тогда Продолжить; Иначе СтрокаШаблон = СоответствиеНоменклатура[СтрокаНом.Номенклатура]; Выполнить(НаВыполнение); КонецЕсли; КонецЦикла;
		КонецЕсли;
			
		Для Каждого СтрокаНом Из ТаблицаНоменклатуры Цикл СтрокаНом.ALPS_ФасетЦена = ОбъектОбработка.РассчитатьРезультат(СтрокаНом.ALPS_ФасетЦена, СтрокаНом.ТочностьОкругления, СтрокаНом.ОкруглятьВБольшуюСторону, СтрокаНом.ПсихологическоеОкругление); КонецЦикла;
		
		Запрос.УстановитьПараметр("ТабРезультат", ТаблицаНоменклатуры);
		Запрос.Текст = ПолучитьТекстЗапроса_Cache_Запись();
		ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
		
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураЦены = Новый Структура("Цена, ПроцентНаценки, ЗароботокМенеджера", 0, 0, 0);
	Если НЕ ТаблицаНоменклатуры = Неопределено Тогда
		
		Если ТаблицаНоменклатуры.Количество() Тогда
			СтруктураЦены.Цена = ТаблицаНоменклатуры[0].Цена;
			СтруктураЦены.ПроцентНаценки = ПолучитьПроцентНаценки(СтруктураЦены.Цена, ТекущиеДанные.ВходнаяЦена, ТекущиеДанные.ВалютаЦены, ТекущиеДанные.ВалютаВходнойЦены);;
			СтруктураЦены.ЗароботокМенеджера = ПолучитьЗароботокМенеджера(СтруктураЦены.Цена, СтруктураЦены.ПроцентНаценки);

		КонецЕсли;
		
	КонецЕсли;
	Возврат СтруктураЦены;
	
КонецФункции


&НаСервере
Функция ПолучитьТекстЗапроса_Cache_Номенклатура()
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//Временная таблица номеклатуры в наличии и актуальной номенклатуры
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка 			КАК Номенклатура,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СпрНоменклатура.ЦеноваяГруппа	КАК ЦеноваяГруппа,
		|	СпрНоменклатура.Производитель	КАК Производитель,
		//|	Вл.Характеристика,
		|   IsNull(Остатки.КоличествоОстаток, 0) 	КАК ВНаличии
		|
		|ПОМЕСТИТЬ Cache_Номенклатура	
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(,Номенклатура = &Номенклатура) КАК Остатки
		|ПО СпрНоменклатура.Ссылка   = Остатки.Номенклатура
		|
		|ГДЕ
		|	СпрНоменклатура.Ссылка = &Номенклатура
		|ИНДЕКСИРОВАТЬ ПО
		|	СпрНоменклатура.Ссылка,
		|	СпрНоменклатура.ВидНоменклатуры
		|";
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса_Cache_Запись()
	
	ТекстЗапроса = "
		|УНИЧТОЖИТЬ Cache_Наценки;
		|УНИЧТОЖИТЬ Cache_Округление;
		|УНИЧТОЖИТЬ ПредварительныйРезультат;
		////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРезультат.Номенклатура,		
		//|   ТабРезультат.Характеристика,
		|   ТабРезультат.ALPS_ФасетЦена	КАК Цена
		|
		|ПОМЕСТИТЬ ТабРезультат
		|ИЗ 
		|	&ТабРезультат КАК ТабРезультат
		|;
		////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		//|	Cache_Номенклатура.Номенклатура		 КАК Номенклатура,
		//|	Cache_Номенклатура.ВНаличии			 КАК ВНаличии,
		//|	БазоваяЦена.Цена					 КАК База,
		//|	Срез.Цена           				 КАК ЦенаВБазе,
		|   IsNull(ТабРезультат.Цена, Срез.Цена) КАК Цена
		|
		|ИЗ
		|	Cache_Номенклатура КАК Cache_Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабРезультат КАК ТабРезультат
		|ПО	ТабРезультат.Номенклатура = Cache_Номенклатура.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &ВидЦены) КАК Срез
		|ПО Срез.Номенклатура = Cache_Номенклатура.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &База_ВидЦены) КАК БазоваяЦена
		|ПО БазоваяЦена.Номенклатура = Cache_Номенклатура.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_База
		|ПО Рг_Курс_База.Валюта = БазоваяЦена.Валюта 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Расч
		|ПО Рг_Курс_Расч.Валюта = &ВалютаВидаЦены 
		|
		|
		|УПОРЯДОЧИТЬ ПО 
		|	БазоваяЦена.Цена Возр
		|;";
	Возврат ТекстЗапроса;	
КонецФункции



&НаКлиенте
Процедура ОткрытьФасеты(Команда)
	
	
	
КонецПроцедуры






&НаКлиенте
Процедура ПолучитьПредставление(ТабличнаяЧасть, ТекущаяСтрока)
	
	МаксНижняяГраница = Неопределено;
	СледующаяСтрока = Неопределено;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если (МаксНижняяГраница = Неопределено Или МаксНижняяГраница >= СтрокаТЧ.НижняяГраница)
		   И ТекущаяСтрока.НижняяГраница <= СтрокаТЧ.НижняяГраница
		   И СтрокаТЧ <> ТекущаяСтрока Тогда
			СледующаяСтрока = СтрокаТЧ;
			МаксНижняяГраница = СтрокаТЧ.НижняяГраница;
		КонецЕсли;
	КонецЦикла;

	Если СледующаяСтрока = Неопределено Тогда
		ПредставлениеИнтервала = "От " + Строка(ТекущаяСтрока.НижняяГраница) + " " + "USD";
	ИначеЕсли ТекущаяСтрока.НижняяГраница = СледующаяСтрока.НижняяГраница Тогда
		ПредставлениеИнтервала = "ОШИБКА: такая нижняя граница уже есть!";
	Иначе
		ПредставлениеИнтервала = "От " + Строка(ТекущаяСтрока.НижняяГраница) + " до " + Строка(СледующаяСтрока.НижняяГраница) + " " + "USD";
	КонецЕсли;
	
	ТекущаяСтрока.ПредставлениеИнтервала = ПредставлениеИнтервала;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеноваяГруппаПриИзменении(Элемент)
	
	ЗаписатьЦеновуюГруппу();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьПоФасету(Команда)
	 	
	ТекущиеСтрока 	= 	Элементы.Цены.ТекущаяСтрока;	
	ТекущиеДанные 	= 	Элементы.Цены.ТекущиеДанные;
	
	Если ТекущиеСтрока = Неопределено ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, РасчитатьФасетСервер(ТекущиеДанные.ПолучитьИдентификатор(), Номенклатура));
	
КонецПроцедуры




