
#Область ПрограммныйИнтерфейс

// Расчитывает дополнительные колонки для таблицы номенклатуры
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Структура - настройки дополнительных колонок таблицы номенклатуры  
//
Функция ПолучитьСтруктуруКолонокВидовЦен() Экспорт
	
	Перем ДополнительныеВидыЦен;
	
	_u_ТекущийПользователь	= ПараметрыСеанса.ТекущийПользователь;	
	НастройкиБРМ 			= ХранилищеНастроекДанныхФорм.Загрузить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , , "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
	МассивДополнительныеВидыЦен 			= Новый Массив;
	
	Если ТипЗнч(НастройкиБРМ) = Тип("Структура") Тогда
		НастройкиБРМ.Свойство("ДополнительныеВидыЦен", 			 ДополнительныеВидыЦен);
	КонецЕсли;
	Настройки = Новый Структура("СписокВидовЦен", Новый Массив);

	//Розница
	УИ = Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85");
	ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(УИ);
	
	ДополнительныеВидыЦен.Добавить(ВидЦены);
	
	Если ТипЗнч(ДополнительныеВидыЦен) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦен ИЗ ДополнительныеВидыЦен Цикл
			Если ТипЗнч(ДополнительныйВидЦен) <> Тип("СправочникСсылка.ВидыЦен") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительныйВидЦен.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеВидыЦен.Найти(ДополнительныйВидЦен) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивДополнительныеВидыЦен.Добавить(ДополнительныйВидЦен);
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦен.Наименование+"("+ДополнительныйВидЦен.ВалютаЦены.Наименование+")");
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦен);
			Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;

КонецФункции // ПолучитьСписокКолонок()

// Процедура формирует таблицу номенклатуры по выбранному виду и категории
//
// Параметры:
//  ФормаОбработки		- УправляемаяФорма - форма обработки 
//  ВидНоменклатуры 	- СправочникСсылка.ВидыНоменклатуры,Неопределено 	- выбраный вид номенклатуры в дереве ВидыНоменклатуры
//  ТоварнаяКатегория	- СправочникСсылка.ТоварныеКатегории				- выбраная товарная категория в дереве ВидыНоменклатуры
//
Процедура Загрузить_ТаблицаНоменклатурыСервер(ФормаОбработки, ВидНоменклатуры, ТоварнаяКатегория) Экспорт
	
	ТаблицаНоменклатуры = ФормаОбработки.ТаблицаНоменклатуры;
	СписокВидовЦен		= ФормаОбработки.СписокВидовЦен;
	Отбор				= ФормаОбработки.Отбор;
	
	Запрос			= Новый Запрос;
	ТекстЗапроса	= ПолучитьТекстЗапросаИнициализацииНоменклатуры(СписокВидовЦен);
	
	Если Отбор = "Только на остатках" Тогда
		ТекстЗапроса = ТекстЗапроса +" ГДЕ
						|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) <> 0";
	ИначеЕсли  Отбор = "Только актуальные" Тогда
		ТекстЗапроса = ТекстЗапроса + "
						|ГДЕ
						|	ЕСТЬNULL(АктуальностьНоменклатуры.Актуально, ЛОЖЬ)= ИСТИНА";

	ИначеЕсли  Отбор = "Актуальные или на остатках" Тогда
		ТекстЗапроса = ТекстЗапроса + "
						|ГДЕ
						|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) <> 0
						|	ИЛИ ЕСТЬNULL(АктуальностьНоменклатуры.Актуально, ЛОЖЬ) = ИСТИНА";  	
	КонецЕсли;
					
	ФормаОбработки.ТекущийВидНоменклатуры	= ВидНоменклатуры;	
	ФормаОбработки.ТекущаяТоварнаяКатегория	= ТоварнаяКатегория;
	Если ВидНоменклатуры.ЭтоГруппа = Истина Тогда 
		ФормаОбработки.ТекущийВидНоменклатуры	= Справочники.ВидыНоменклатуры.ПустаяСсылка();
		Возврат;
	ИначеЕсли Не ТоварнаяКатегория.Пустая() Тогда
		ФормаОбработки.ТекущаяТоварнаяКатегория	= ТоварнаяКатегория;
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса," И ТоварнаяКатегория = &ТоварнаяКатегория");
	Иначе 
		ТекстЗапроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса," ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатуры"		,ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТоварнаяКатегория"	,ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ПустаяКатегория"		,Справочники.ТоварныеКатегории.ПустаяСсылка());
	
	Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
		Запрос.УстановитьПараметр("ВидЦены"+ЭлементСписка.ИндексКолонки ,ЭлементСписка.ВидЦены);
	КонецЦикла;

	ТаблицаНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());	

КонецПроцедуры // Загрузить_ТаблицаНоменклатурыСервер()

// Сохраняет расчитанные товарные категории
//
// Параметры:
//  ФормаОбработки	- УправляемаяФорма - форма обработки 
//
Процедура ЗаписатьТоварнуюКатегориюВНоменклатуру(ФормаОбработки)   Экспорт
	
	СписокНоменклатуры = ФормаОбработки.ТаблицаНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТоварнайКатегорияНоменклатуры();
	Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатуры.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоменклатураСсылка		= Выборка.Номенклатура;
		ТоварнаяКатегорияСсылка	= Выборка.ТоварнаяКатегория;
				
		СправочникОбъект					= НоменклатураСсылка.ПолучитьОбъект();
		СправочникОбъект.ТоварнаяКатегория  = ТоварнаяКатегорияСсылка;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

// Рассчитывает товарные категории согласно таблицы настроек
//
// Параметры:
//  ФормаОбработки	- УправляемаяФорма - форма обработки 
//
Процедура РассчитатьТоварныеКатегории(ФормаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ТаблицаНоменклатуры = ФормаОбработки.ТаблицаНоменклатуры;
	СписокВидовЦен		= ФормаОбработки.СписокВидовЦен;
	ТоварнаяКатегория	= ФормаОбработки.ТекущаяТоварнаяКатегория;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса= РасчитатьНовуюТоварнуюКатегориюТовара(СписокВидовЦен);

	Если Не ТоварнаяКатегория.Пустая() Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса," И ТоварнаяКатегория = &ТоварнаяКатегория"," ПОМЕСТИТЬ ТаблицаНоменклатуры");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВидНоменклатуры"		,ФормаОбработки.ТекущийВидНоменклатуры);
	Запрос.УстановитьПараметр("ПустаяКатегория"		,Справочники.ТоварныеКатегории.ПустаяСсылка());
	Запрос.УстановитьПараметр("КешНоменклатуры"		,ТаблицаНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНастройки"	,ТаблицаНастройки.Выгрузить());
	Запрос.УстановитьПараметр("ТоварнаяКатегория"	,ТоварнаяКатегория);

	Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
		Запрос.УстановитьПараметр("ВидЦены"+ЭлементСписка.ИндексКолонки ,ЭлементСписка.ВидЦены);
	КонецЦикла;

	Настройки_ТК = ТаблицаНастройки.Выгрузить();
	Для каждого Строка Из Настройки_ТК Цикл  
		Запрос.УстановитьПараметр("Приоритет"+Строка.НомерСтроки,Строка.НомерСтроки);	
	КонецЦикла;
	
	ФормаОбработки.ТаблицаНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());	
КонецПроцедуры

// Функция возвращает текст запроса инициализации номенклатуры
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка - текст запроса  
//
&НаСервере
Функция ПолучитьТекстЗапросаИнициализацииНоменклатуры(СписокВидовЦен)
	
	ШаблонЦены 			= "	ЕСТЬNULL(КешЦен%Индекс%.Цена, 0) 			КАК Цена%Индекс%,";
	ШаблонВыбораЦены	= 
		"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры) И ВидЦены = &ВидЦены%Индекс%) КАК КешЦен%Индекс%
		|		ПО 
		|			КешНоменклатуры.Ссылка = КешЦен%Индекс%.Номенклатура
		|";
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Склад
		|ПОМЕСТИТЬ ДоступныеСклады
		|ИЗ
		|	РегистрСведений.Модуль_ДоступныеСклады 
		|ГДЕ
		|	Основной = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ссылка,
		|	Наименование,
		|	ТоварнаяКатегория
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И НЕ ЭтоГруппа
		|	И ВидНоменклатуры = &ВидНоменклатуры
		|	%1
		|ИНДЕКСИРОВАТЬ ПО 
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешНоменклатуры.ТоварнаяКатегория 					КАК ТоварнаяКатегория,
		|	ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка) КАК РассчитаннаяТоварнаяКатегория,
		|	КешНоменклатуры.Наименование						КАК Наименование,
		|	ЕСТЬNULL(АктуальностьНоменклатуры.Актуально, ЛОЖЬ)	КАК Актуально,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,";
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса +
		"	КешНоменклатуры.Ссылка
		|ИЗ
		|	КешНоменклатуры КАК КешНоменклатуры
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,
		|				Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры)
		|					И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСклады)) КАК ТоварыНаСкладахОстатки
		|		ПО КешНоменклатуры.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(,
		|				Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры)) КАК АктуальностьНоменклатуры
		|		ПО КешНоменклатуры.Ссылка = АктуальностьНоменклатуры.Номенклатура ";
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонВыбораЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		

		Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнициализацииНоменклатуры()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Возвращает текст запроса для рассчитанных товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаТоварнайКатегорияНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СпрНом.Ссылка КАК Ссылка,
	               |	СпрНом.ТоварнаяКатегория,
	               |	СпрНом.РассчитаннаяТоварнаяКатегория
	               |ПОМЕСТИТЬ КешНоменклатура
	               |ИЗ
	               |	&СписокНоменклатуры КАК СпрНом
				   |ГДЕ
	               |	НЕ СпрНом.РассчитаннаяТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	               |
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешНоменклатура.Ссылка КАК Номенклатура,
	               |	КешНоменклатура.РассчитаннаяТоварнаяКатегория КАК ТоварнаяКатегория
	               |ИЗ
	               |	КешНоменклатура КАК КешНоменклатура
	               |ГДЕ
	               |	НЕ КешНоменклатура.ТоварнаяКатегория = КешНоменклатура.РассчитаннаяТоварнаяКатегория";
	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаТоварнайКатегорияНоменклатуры()

// Возвращает текст запроса рассчета товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаРасчитатьТоварнуюКатегориюНоменклатурыВОбщейРезультат(СписокВидовЦен)
	
		
	ШаблонЦены		= 	"ТаблицаНоменклатуры.Цена%Индекс%	КАК Цена%Индекс%, 
						|";
	
	ТекстЗапроса ="
		|;
		|
		|ВЫБРАТЬ
		|	КешРассчитанныйПриоритетПоНаименовании.Ссылка КАК Ссылка,
		|	МИНИМУМ(КешРассчитанныйПриоритетПоНаименовании.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ КешРассчитанныхКатегорий
		|ИЗ
		|	КешРассчитанныйПриоритетПоНаименовании КАК КешРассчитанныйПриоритетПоНаименовании

		|СГРУППИРОВАТЬ ПО
		|	КешРассчитанныйПриоритетПоНаименовании.Ссылка

		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		// Подставляем рассчитанные товарные категории в таблицу номенклатуры
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Ссылка						КАК Ссылка,
		|	ТаблицаНоменклатуры.Наименование				КАК Наименование,
		|	ТаблицаНоменклатуры.ТоварнаяКатегория			КАК ТоварнаяКатегория,
		|	ТаблицаНоменклатуры.Актуально					КАК Актуально,
		|	ТаблицаНоменклатуры.Остаток						КАК Остаток,";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"	ЕСТЬNULL(КешНастройки.ТоварнаяКатегория, ЕСТЬNULL(НеАктуальнаяНоменклатура.РассчитаннаяТоварнаяКатегория, &ПустаяКатегория)) КАК РассчитаннаяТоварнаяКатегория
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ КешРассчитанныхКатегорий КАК КешРассчитанныхКатегорий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНастройки КАК КешНастройки
		|		ПО 
		|			КешРассчитанныхКатегорий.Приоритет = КешНастройки.Приоритет
		|	ПО 
		|		ТаблицаНоменклатуры.Ссылка = КешРассчитанныхКатегорий.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ НеАктуальнаяНоменклатура КАК НеАктуальнаяНоменклатура
		|	ПО 
		|		ТаблицаНоменклатуры.Ссылка = НеАктуальнаяНоменклатура.Ссылка
		|";
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРасчитатьТоварнуюКатегориюНоменклатуры()

// Возвращает текст запроса показывает товарную категорию, что сейчас в номенклатуре
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаСтараяТоварнаяКатегорияНоменклатуры(СписокВидовЦен)
	
	ШаблонСоединенияЦены	=	"ЕСТЬNULL(КешЦен%Индекс%.Цена, 0) 			КАК Цена%Индекс%,";
	ШаблонВыбораЦены		= 
								"
								|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры) И ВидЦены = &ВидЦены%Индекс%) КАК КешЦен%Индекс%
								|ПО 
								|КешНоменклатуры.Ссылка = КешЦен%Индекс%.Номенклатура
								|";
		
	ШаблонЦены		= 
						"ТаблицаНоменклатуры.Цена%Индекс%	КАК Цена%Индекс%, 
						|";
	
	ШаблонВидаЦены	=
						"			
						|КОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс%
						|ТОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс% 
						|";
	
	ШаблонЦеныНижняяГраница =
						"КОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс%
						|ТОГДА АктуальнаяНоменклатура.Цена%Индекс% >= КешНастройки.НижняяГраница 
						|";
	
	ШаблонЦеныВерхняяГраница =
						"КОГДА КешНастройки.ВидЦены = &ВидЦены%Индекс%
						|ТОГДА АктуальнаяНоменклатура.Цена%Индекс% < КешНастройки.ВерхняяГраница 
						|";

	ТекстЗапроса =                     
		////////////////////////////////////////////////////////////////////////////////
		// Получаем доступные склады
		"ВЫБРАТЬ
		|	Склад
		|ПОМЕСТИТЬ ДоступныеСклады
		|ИЗ
		|	РегистрСведений.Модуль_ДоступныеСклады 
		|ГДЕ
		|	Основной = ИСТИНА
		|;
		////////////////////////////////////////////////////////////////////////////////
		// Таблица номенклатуры для рассчета товарной категории
		|ВЫБРАТЬ
		|	КешНоменклатуры.Ссылка,
		|	КешНоменклатуры.Наименование,
		|	КешНоменклатуры.ТоварнаяКатегория
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		|	&КешНоменклатуры КАК КешНоменклатуры
		|;
		|ВЫБРАТЬ
		|	КешНоменклатуры.ТоварнаяКатегория 					КАК ТоварнаяКатегория,
		|	ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка) КАК РассчитаннаяТоварнаяКатегория,
		|	КешНоменклатуры.Наименование						КАК Наименование,
		|	ЕСТЬNULL(АктуальностьНоменклатуры.Актуально, ЛОЖЬ)	КАК Актуально,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,";
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонСоединенияЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса +
		"	КешНоменклатуры.Ссылка
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	КешНоменклатуры КАК КешНоменклатуры
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,
		|				Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры)
		|					И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСклады)) КАК ТоварыНаСкладахОстатки
		|		ПО КешНоменклатуры.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(,
		|				Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры)) КАК АктуальностьНоменклатуры
		|		ПО КешНоменклатуры.Ссылка = АктуальностьНоменклатуры.Номенклатура ";
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонВыбораЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;


		ТекстЗапроса =ТекстЗапроса +"
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		////////////////////////////////////////////////////////////////////////////////
		// Формируем таблицу актуальной номенклатуры  
		
		//- номенклатуры нет в наличиии и актуальна
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Ссылка 						КАК Ссылка,";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"	ТаблицаНоменклатуры.Ссылка.Производитель 		КАК Производитель,
		|	ТаблицаНоменклатуры.Наименование 				КАК Наименование
		|ПОМЕСТИТЬ АктуальнаяНоменклатура
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		
		|ГДЕ
		|	ТаблицаНоменклатуры.Актуально = ИСТИНА
		|И	ТаблицаНоменклатуры.Остаток = 0
		|
		| ОБЪЕДИНИТЬ
		|
		//- номенклатура в наличиии 
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Ссылка 						КАК Ссылка,";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"	ТаблицаНоменклатуры.Ссылка.Производитель 		КАК Производитель,
		|	ТаблицаНоменклатуры.Наименование 				КАК Наименование
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|	
		|ГДЕ 
		|	ТаблицаНоменклатуры.Остаток <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		// Формируем таблицу номенклатуры не актуальной и нет в наличии  
		|ВЫБРАТЬ
		|	ТаблицаНоменклатуры.Ссылка 						КАК Ссылка,
		|	ТоварныеКатегории.Ссылка 						КАК РассчитаннаяТоварнаяКатегория
		|ПОМЕСТИТЬ НеАктуальнаяНоменклатура
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
		|	ПО 
		|		ТоварныеКатегории.Владелец = &ВидНоменклатуры
		|	И 	НЕ ТоварныеКатегории.ПометкаУдаления
		|	И	ТоварныеКатегории.Наименование = ""Прочие""
		|
		|ГДЕ 
		|	ТаблицаНоменклатуры.Актуально = ЛОЖЬ
		|	И ТаблицаНоменклатуры.Остаток = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|ВЫБРАТЬ
		|	РСНастройки.НомерСтроки			КАК Приоритет,
		|	РСНастройки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	РСНастройки.ВидЦены             КАК ВидЦены,
		|	РСНастройки.НижняяГраница		КАК НижняяГраница,
		|	РСНастройки.ВерхняяГраница		КАК ВерхняяГраница,
		|	РСНастройки.Содержит			КАК Содержит,
		|	РСНастройки.НеСодержит			КАК НеСодержит,
		|	РСНастройки.Производитель		КАК Производитель
		|ПОМЕСТИТЬ ТаблицаНастройки
		|ИЗ
		|	&ТаблицаНастройки КАК РСНастройки
		|;
		////////////////////////////////////////////////////////////////////////////////
		// Рассчитываем ТК для актуальной номенклатуры согласно настроек  
		|ВЫБРАТЬ
		|	АктуальнаяНоменклатура.Ссылка 					КАК Ссылка,
		|	КешНастройки.Приоритет			 				КАК Приоритет,
		|   АктуальнаяНоменклатура.Наименование 			КАК Наименование
		|   
		|ПОМЕСТИТЬ КешРассчитанныйПриоритетПоЦене
		|ИЗ
		|	АктуальнаяНоменклатура КАК АктуальнаяНоменклатура
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНастройки КАК КешНастройки
		|	ПО  (ВЫБОР
		|			КОГДА КешНастройки.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ИСТИНА ";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл 
			ТекстЗапроса =ТекстЗапроса +СтрЗаменить(ШаблонВидаЦены,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"		КОНЕЦ)
		
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.НижняяГраница = 0
		|			ТОГДА ИСТИНА ";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл
			ТекстЗапроса = ТекстЗапроса+ СтрЗаменить(ШаблонЦеныНижняяГраница,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"		КОНЕЦ)
		|		
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.ВерхняяГраница = 0
		|			ТОГДА ИСТИНА ";
		
		Для Каждого ЭлементСписка Из СписокВидовЦен Цикл
			ТекстЗапроса = ТекстЗапроса+ СтрЗаменить(ШаблонЦеныВерхняяГраница,"%Индекс%",ЭлементСписка.ИндексКолонки);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса+
		"		КОНЕЦ)
		|		
		|	И	(ВЫБОР
		|			КОГДА КешНастройки.Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ 
		|			АктуальнаяНоменклатура.Производитель = КешНастройки.Производитель
		|		КОНЕЦ)
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСтараяТоварнаяКатегорияНоменклатуры()

Функция РасчитатьНовуюТоварнуюКатегориюТовара(СписокВидовЦен)
	
	ТекстЗапроса = ПолучитьТекстЗапросаСтараяТоварнаяКатегорияНоменклатуры(СписокВидовЦен);

		
	ТекстЗапроса_1 = "ВЫБРАТЬ
			|	РасчПоЦене.Ссылка,
			|	РасчПоЦене.Приоритет
			| ПОМЕСТИТЬ КешРассчитанныйПриоритетПоНаименовании
			|
			|ИЗ
			|	КешРассчитанныйПриоритетПоЦене КАК РасчПоЦене
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНастройки КАК ТаблицаНастройки
			|		ПО РасчПоЦене.Приоритет = ТаблицаНастройки.Приоритет
			|			И (ТаблицаНастройки.Приоритет = 0)
			|";
			
	
	ШаблонТело  = " ОБЪЕДИНИТЬ 
				|
				|ВЫБРАТЬ
				|	РасчПоЦене.Ссылка,
				|	РасчПоЦене.Приоритет
				|ИЗ
				|	КешРассчитанныйПриоритетПоЦене КАК РасчПоЦене
				|	
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНастройки КАК ТаблицаНастройки
				|ПО РасчПоЦене.Приоритет = ТаблицаНастройки.Приоритет
				|И (ТаблицаНастройки.Приоритет = &Приоритет%Индекс%)
				|";
				
	ШаблонСодержит =" РасчПоЦене.Наименование ПОДОБНО ";

	ШаблонНеСодержит =" РасчПоЦене.Наименование НЕ ПОДОБНО ";
	
	Шаблон1 = """%"" + ПОДСТРОКА(ТаблицаНастройки.Содержит,%1,%2)+ ""%""";
	Шаблон2 = """%"" + ПОДСТРОКА(ТаблицаНастройки.НеСодержит,%1,%2)+ ""%""";

	
	Настройки_ТК = ТаблицаНастройки.Выгрузить();
	Для каждого Строка Из Настройки_ТК Цикл  
		
		ТекстЗапроса_1 = ТекстЗапроса_1+ СтрЗаменить(ШаблонТело,"%Индекс%",Строка.НомерСтроки); 	
		СтрСодержит = СокрЛП(Строка.Содержит);
		СтрНеСодержит = СокрЛП(Строка.НеСодержит);

		Если ПустаяСтрока(СтрСодержит) = ЛОЖЬ Тогда
			 ТекстЗапроса_1 = ТекстЗапроса_1 + РазбытьЛогВыражения(СтрСодержит,ШаблонСодержит,Шаблон1);			
		КонецЕсли;    
		 
		Если ПустаяСтрока(СтрНеСодержит) = ЛОЖЬ Тогда
			 ТекстЗапроса_1 = ТекстЗапроса_1 + РазбытьЛогВыражения(СтрНеСодержит,ШаблонНеСодержит,Шаблон2);			
		КонецЕсли;                                      
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапроса_1;
	ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаРасчитатьТоварнуюКатегориюНоменклатурыВОбщейРезультат(СписокВидовЦен);
	
	Возврат ТекстЗапроса;
	
КонецФункции // РасчитатьНовуюТоварнуюКатегориюТовара(СписокВидовЦен)

Функция РазбытьЛогВыражения(СтрСодержит,Шаблон,ШаблонПараметра)
	
	ОтборЗП = "";
	Строка = "%1(%2%3)";
	ЛогВыраженияИ = "&AND&";
	ЛогВыраженияИЛИ = "&OR&";
	НачВыражения = СтрСодержит;
			
	Если Найти(СтрСодержит, ЛогВыраженияИ) > 0 
		ИЛИ Найти(СтрСодержит, ЛогВыраженияИЛИ) > 0  Тогда
		
		ЛогВыражения = ПолучитьВыраженияПервоеВСтроке(СтрСодержит,ЛогВыраженияИ,ЛогВыраженияИЛИ);

		НомерЛВ = Найти(СтрСодержит, ЛогВыражения);
		НачВыраз = 0;
		КонецВыраз =НомерЛВ-1; 
		ОтборЗП = ПолучитьОтборДляЛогВыражения("И (",Шаблон,ШаблонПараметра,НачВыраз,КонецВыраз,НачВыражения);  
		Отбор = ДобавитьСимвол(Сред (СтрСодержит,НачВыраз,НомерЛВ-1),"%");
		СтрСодержит = Сред(СтрСодержит,НомерЛВ,СтрДлина(СтрСодержит)- НомерЛВ+1);	
				
		Пока Найти(СтрСодержит, ЛогВыраженияИ) > 0 
			ИЛИ Найти(СтрСодержит, ЛогВыраженияИЛИ)> 0  Цикл
			
			ЛогВыражения 	= ПолучитьВыраженияПервоеВСтроке(СтрСодержит,ЛогВыраженияИ,ЛогВыраженияИЛИ);
			ЛогВырНаЗамену	= ?(ЛогВыражения = ЛогВыраженияИ," И "," ИЛИ ");
			
			РазмерСтр		= СтрДлина(СтрСодержит)-СтрДлина(ЛогВыражения); 				
			КонецВыражения 	= ПолучитьНомерСледующегоВыражения(СтрСодержит,ЛогВыраженияИ,ЛогВыраженияИЛИ,РазмерСтр); 
		 			
			СтрОтборСодержит 	= Сред (СтрСодержит,СтрДлина(ЛогВыражения)+1,КонецВыражения); 			
		    Отбор 				= Отбор +  ЛогВырНаЗамену + Шаблон + ДобавитьСимвол(СтрОтборСодержит,"%");
			НачВыраз			= КонецВыраз + СтрДлина(ЛогВыражения)+1;
			КонецВыраз			= НачВыраз + КонецВыражения;
			ОтборЗП 			= ОтборЗП + ПолучитьОтборДляЛогВыражения(ЛогВырНаЗамену,Шаблон,ШаблонПараметра,НачВыраз,КонецВыраз,НачВыражения); 
					
			НачСтрСодержит = КонецВыражения+СтрДлина(ЛогВыражения)+1;
			
			Если НачСтрСодержит < РазмерСтр Тогда
			   СтрСодержит = Сред(СтрСодержит,НачСтрСодержит,РазмерСтр);
			Иначе 
			   СтрСодержит = "";
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;
		
	Если ПустаяСтрока(ОтборЗП) = Истина Тогда
		Строка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Строка
																		,"И "
																		,Шаблон
																		,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПараметра,0,СтрДлина(СтрСодержит))); 
	Иначе
		Строка = ОтборЗП + ")"; 
	КонецЕсли; 
	
	Возврат  Строка; 
КонецФункции // РазбытьЛогВыражения()   

Функция ДобавитьСимвол(СтрВставки,Символ) 
	Шаблон = """%1%2%1""";
	Возврат  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,Символ,СтрВставки); 
КонецФункции // ДобавитьСимвол()

Функция ПолучитьВыраженияПервоеВСтроке(Строка,Выраз1,Выраз2)
	
	Результат = ""; 	
	РазмерСтр =	СтрДлина(Строка);
		
	НомерВ1	= Найти(Строка, Выраз1);
	НомерВ2 = Найти(Строка, Выраз2);
	
	Если НомерВ1 > 0 ИЛИ НомерВ2 > 0 Тогда
	
		НомерМинПо1	= ?(НомерВ1 = 0	,РазмерСтр	,НомерВ1); 		
		НомерМинПо2	= ?(НомерВ2 = 0	,РазмерСтр	,НомерВ2);
		
		Если НомерМинПо1 < НомерМинПо2  Тогда	
			Результат =  Выраз1;				
		Иначе
			Результат =  Выраз2;	
		КонецЕсли; 		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПолучитьПервоеВхожденияВСтроку(Строка,Выраз1,Выраз2)

Функция ПолучитьНомерСледующегоВыражения(Строка,Выраз1,Выраз2,РазмерМакс)

	НомерВыраз1 = Найти(Прав(Строка,РазмерМакс), Выраз1); 
	НомерВыраз2 = Найти(Прав(Строка,РазмерМакс), Выраз2); 
	
	НомерМинВыраз1 = ?(НомерВыраз1 = 0, РазмерМакс,НомерВыраз1-1); 		
	НомерМинВыраз2 = ?(НомерВыраз2 = 0, РазмерМакс,НомерВыраз2-1); 
	
	Возврат Мин(НомерМинВыраз1,НомерМинВыраз2); 
	

КонецФункции // ПолучитьНомерСледующегоВыражения()

Функция ПолучитьОтборДляЛогВыражения(ЛогВыражения,Шаблон, ШаблонПараметра,НачВыраз,КонецВыраз,СтрСодержит)

	ФДОткр= "&{&";
	ФДЗакр  = "&}&";
	Строка = "%1%2%3";
	НачСтроки = НачВыраз;
	КонСтроки = КонецВыраз-НачВыраз; 

	
	СтрокаОтбор = Сред(СтрСодержит,НачСтроки,КонСтроки);
	Пока Найти(СтрокаОтбор, ФДОткр) > 0 
		ИЛИ Найти(СтрокаОтбор, ФДЗакр)> 0 Цикл
			
		ФигурныеДужки = ПолучитьВыраженияПервоеВСтроке(СтрокаОтбор,ФДОткр,ФДЗакр);
		
		НомерЛВ = Найти(СтрокаОтбор, ФигурныеДужки);
		Если   НомерЛВ = 1 Тогда
			  НачСтроки = НачСтроки + 4;
		ИначеЕсли	НомерЛВ = СтрДлина(СтрокаОтбор)-3	  Тогда
			  КонСтроки = КонСтроки - 3;
		КонецЕсли;
		
		СтрокаОтбор = Сред(СтрокаОтбор,НачСтроки,КонСтроки);  	
	КонецЦикла;
	
	ОтборПоПараметрам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПараметра,НачСтроки,НачСтроки+КонСтроки);    
	Строка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Строка,ЛогВыражения,Шаблон,ОтборПоПараметрам);
	
	Возврат Строка;

КонецФункции // ПолучитьОтборДляЛогВыражения()

#КонецОбласти 

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.10";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Авто ТК");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Авто ТК [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Авто ТК [" + Версия + "]", "ТК", "ОткрытиеФормы", Ложь, "ТК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти


