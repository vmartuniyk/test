
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Партнерська
	ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fc-404c-11e0-9f98-001517115d85"));
	ИнициализироватьВидыНоменклатуры();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	ТекущиеДанные			= Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Загрузить_ТаблицаНоменклатурыСервер(ТекущиеДанные.Ссылка, ТекущиеДанные.ТоварнаяКатегория); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваЗначенийВидыНоменклатуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТаблицаНоменклатуры.Очистить();
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные			= Элемент.ТекущиеДанные;
		Загрузить_ТаблицаНоменклатурыСервер(ТекущиеДанные.Ссылка, ТекущиеДанные.ТоварнаяКатегория); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыНастройки

&НаКлиенте
Процедура ТаблицаНастройкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные	= Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ЭтоГруппа = 0  Тогда
		Отказ = Истина; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Устанавливать настройки для группы видов номенклатуры запрещено!'"));
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КолличествоСтрок = Объект.ТаблицаНастройки.Количество();
	Если КолличествоСтрок>1 Тогда 
		СтрокаПроверки = Элемент.ТекущиеДанные;
		Если СтрокаПроверки.НижняяГраница > СтрокаПроверки.ВерхняяГраница Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка настройки: нельзя чтобы нижняя граница была больше верхней!'"),
															  , 
															  "Объект.ТаблицаНастройки["+Строка(КолличествоСтрок-1)+"].НижняяГраница",
															  ,
															  Истина);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ТекущийВидНоменклатуры.Пустая() Тогда 
		ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец", ТекущийВидНоменклатуры), Элемент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	Если ТаблицаНоменклатуры.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;	
	СохранитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиТоварнойКатегории(Команда)
	
	ТекущиеДанные	= Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа = 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Устанавливать настройки для группы видов номенклатуры запрещено!'"),,,,Истина);
	КонецЕсли;
	
	СохранитьНастройкиТоварнойКатегории();
	
КонецПроцедуры

&НаКлиенте
Процедура Расчитать(Команда)
	
	ТекущиеДанные= Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		СсылкаНаНоменклатуру = Неопределено;
	Иначе 
		СсылкаНаНоменклатуру = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	РассчитатьТоварныеКатегории(СсылкаНаНоменклатуру);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает товарные категории согласно таблицы настроек
//
// Параметры:
//  Ссылка	- СправочникСсылка.Номенклатура,Неопределено - ссылка на элемент справочник номенклатуры 
//
&НаСервере
Процедура РассчитатьТоварныеКатегории(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитФормыВЗначение("Объект").РассчитатьТоварныеКатегории(ЭтаФорма);
	
	Если Ссылка = Неопределено Или Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат;	
	КонецЕсли;
	//Устанавливает текущую строку	
	Массив = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Ссылка",Ссылка));
	Если Массив.Количество() Тогда 
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры // РассчитатьТоварныеКатегории()

// Процедура сохраняет настройки товарных категорий для выбраного вида номенклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СохранитьНастройкиТоварнойКатегории()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийВидНоменклатуры = Справочники.ТоварныеКатегории.ПустаяСсылка() Тогда 
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.КТС_НастройкиТоварныхКатегорий.СоздатьНаборЗаписей();
	Запись.Отбор.ВидНоменклатуры.Установить(ТекущийВидНоменклатуры);
	Запись.Загрузить(СформироватьНовыеНастройкиТоварныхКатегорий());
	Запись.Записать(Ложь);
	
КонецПроцедуры

// Процедура загружает настройки товарных категорий для выбраного вида номенклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗагрузитьНастройкиТоварнойКатегории()
	
	Объект.ТаблицаНастройки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Период) КАК Период
		|ПОМЕСТИТЬ КешПоследняяЗапись
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, ВидНоменклатуры = &ВидНоменклатуры) 
		|ГДЕ
		|	ВидЦены = &ВидЦены
		|;
		|
		|ВЫБРАТЬ
		|	РСНастройки.Приоритет			КАК НомерСтроки,
		|	РСНастройки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	РСНастройки.НижняяГраница		КАК НижняяГраница,
		|	РСНастройки.ВерхняяГраница		КАК ВерхняяГраница,
		|	РСНастройки.Содержит			КАК Содержит,
		|	РСНастройки.НеСодержит			КАК НеСодержит,
		|	РСНастройки.Производитель		КАК Производитель
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, ВидНоменклатуры = &ВидНоменклатуры) КАК РСНастройки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПоследняяЗапись КАК КешПоследняяЗапись
		|	ПО 
		|		РСНастройки.Период = КешПоследняяЗапись.Период
		|ГДЕ
		|	РСНастройки.ВидЦены = &ВидЦены";
	Запрос.УстановитьПараметр("ВидЦены"				,ВидЦены);
	Запрос.УстановитьПараметр("ВидНоменклатуры"		,ТекущийВидНоменклатуры);
	
	Объект.ТаблицаНастройки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура записать товарные категории в номенклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СохранитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);   	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрНом.Ссылка КАК Ссылка,
	               |	СпрНом.ТоварнаяКатегория,
	               |	СпрНом.РассчитаннаяТоварнаяКатегория
	               |ПОМЕСТИТЬ КешНоменклатура
	               |ИЗ
	               |	&СписокНоменклатуры КАК СпрНом
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ  ПЕРВЫЕ 1
	               |	КешНоменклатура.Ссылка КАК Номенклатура,
	               |	КешНоменклатура.РассчитаннаяТоварнаяКатегория КАК ТоварнаяКатегория
	               |ИЗ
	               |	КешНоменклатура КАК КешНоменклатура
	               |ГДЕ
	               |	КешНоменклатура.РассчитаннаяТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)"; 
				   
	Запрос.УстановитьПараметр("СписокНоменклатуры",ТаблицаНоменклатуры.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		РеквизитФормыВЗначение("Объект").ЗаписатьТоварнуюКатегориюВНоменклатуру(ЭтаФорма);
	Иначе
		ТекстСообщенияОбОшибке = НСтр("ru='Рассчитанная ТК заполнена не у всех товаров. Сохраненные невозможно! Отредактируйте Ваши настройки.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу настроек товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ТаблицаЗначений   - настройки товарных категорий
//
&НаСервере
Функция СформироватьНовыеНастройкиТоварныхКатегорий()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНастройки.НомерСтроки,
		|	ТаблицаНастройки.ТоварнаяКатегория,
		|	ТаблицаНастройки.НижняяГраница,
		|	ТаблицаНастройки.ВерхняяГраница,
		|	ТаблицаНастройки.Содержит,
		|	ТаблицаНастройки.НеСодержит,
		|	ТаблицаНастройки.Производитель
		|ПОМЕСТИТЬ ТаблицаНастройки
		|ИЗ
		|	&ТаблицаНастройки КАК ТаблицаНастройки
		|;
		|
		|ВЫБРАТЬ
		|	&Период								КАК Период,
		|	&ВидНоменклатуры					КАК ВидНоменклатуры,
		|	&ВидЦены							КАК ВидЦены,
		|	ТаблицаНастройки.НомерСтроки		КАК Приоритет,
		|	ТаблицаНастройки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	ТаблицаНастройки.НижняяГраница		КАК НижняяГраница,
		|	ТаблицаНастройки.ВерхняяГраница		КАК ВерхняяГраница,
		|	ТаблицаНастройки.Содержит			КАК Содержит,
		|	ТаблицаНастройки.НеСодержит			КАК НеСодержит,
		|	ТаблицаНастройки.Производитель		КАК Производитель
		|ИЗ
		|	ТаблицаНастройки КАК ТаблицаНастройки";
	Запрос.УстановитьПараметр("ТаблицаНастройки"	,Объект.ТаблицаНастройки.Выгрузить());
	Запрос.УстановитьПараметр("ВидЦены"				,ВидЦены);
	Запрос.УстановитьПараметр("ВидНоменклатуры"		,ТекущийВидНоменклатуры);
	Запрос.УстановитьПараметр("Период"				,ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьНовыеНастройкиТоварныхКатегорий()

// Процедура инициализирует ДеревоЗначений Навигация_ВидыНоменклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИнициализироватьВидыНоменклатуры()
	
	Перем ТекущийУровень;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоВидыНоменклатуры = РеквизитФормыВЗначение("Навигация_ВидыНоменклатуры");
	ДеревоВидыНоменклатуры.Строки.Очистить();
	ПараметрОтбора = Новый Структура("Ссылка");
	ПараметрОтбораКатегории = Новый Структура("ТоварнаяКатегория");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрОтбора, Выборка); 
		РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
		Если РезультатПоиска.Количество() = 0 Тогда
			Если Выборка.Родитель.Пустая() Тогда
				СтрокаДереваВид = ДеревоВидыНоменклатуры.Строки.Добавить();
				СтрокаДереваВид.Ссылка = Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа = ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование = Выборка.Наименование;
			Иначе
				ПараметрОтбора.Вставить("Ссылка", Выборка.Родитель);
				РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
				СтрокаДереваВид = РезультатПоиска[0].Строки.Добавить();
				СтрокаДереваВид.Ссылка = Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа = ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование = Выборка.Наименование;		
			КонецЕсли;
		Иначе
			СтрокаДереваВид = РезультатПоиска[0];	
		КонецЕсли;
		
		Если НЕ Выборка.ТоварнаяКатегория.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрОтбораКатегории, Выборка); 
			РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
			Если РезультатПоиска.Количество() = 0 Тогда
				Если Выборка.Родитель_ТоварныеКатегории.Пустая() Тогда
					СтрокаДереваКатегория = СтрокаДереваВид.Строки.Добавить();
					СтрокаДереваКатегория.Ссылка = Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа = ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование = Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;
				Иначе
					ПараметрОтбораКатегории.Вставить("ТоварнаяКатегория", Выборка.Родитель_ТоварныеКатегории);
					РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
					СтрокаДереваКатегория = РезультатПоиска[0].Строки.Добавить();
					СтрокаДереваКатегория.Ссылка = Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа = ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование = Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоВидыНоменклатуры, "Навигация_ВидыНоменклатуры");
	
КонецПроцедуры  // ИнициализироватьВидыНоменклатуры()

// Процедура формирует таблицу номенклатуры по выбранному виду и категории
//
// Параметры:
//  ВидНоменклатуры 	- СправочникСсылка.ВидыНоменклатуры,Неопределено 	- выбраный вид номенклатуры в дереве ВидыНоменклатуры
//  ТоварнаяКатегория	- СправочникСсылка.ТоварныеКатегории				- выбраная товарная категория в дереве ВидыНоменклатуры
//
&НаСервере
Процедура Загрузить_ТаблицаНоменклатурыСервер(ВидНоменклатуры, ТоварнаяКатегория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 					= Новый Запрос;
	ТекстЗапроса			= ПолучитьТекстЗапросаИнициализацииНоменклатуры();
	ТекущийВидНоменклатуры	= ВидНоменклатуры;	
	Если ВидНоменклатуры.ЭтоГруппа = Истина Тогда 
		Объект.ТаблицаНастройки.Очистить();
		ТекущийВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		Возврат;
	ИначеЕсли Не ТоварнаяКатегория.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"1 = 1"," ТоварнаяКатегория = &ТоварнаяКатегория");
	КонецЕсли;
	ЗагрузитьНастройкиТоварнойКатегории();
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатуры"		,ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВидЦены"				,ВидЦены);
	Запрос.УстановитьПараметр("ТоварнаяКатегория"	,ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ПустаяКатегория"		,Справочники.ТоварныеКатегории.ПустаяСсылка());
	ТаблицаНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());	

КонецПроцедуры // Загрузить_ТаблицаНоменклатурыСервер()

// Функция возвращает текст запроса инициализации видов номенклатуры и товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка - текст запроса  
//
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка 					КАК Ссылка,
		|	ВидыНоменклатуры.ЭтоГруппа 					КАК ЭтоГруппа,
		|	ВидыНоменклатуры.Наименование 				КАК Наименование,
		|	ВидыНоменклатуры.Родитель					КАК Родитель,
		|	ЕСТЬNULL(ТоварныеКатегории.Ссылка, ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)) КАК ТоварнаяКатегория,
		|	ТоварныеКатегории.ЭтоГруппа					КАК ЭтоГруппа_ТоварныеКатегории,
		|	ТоварныеКатегории.Наименование 				КАК Наименование_ТоварныеКатегории,
		|	ТоварныеКатегории.Родитель	 				КАК Родитель_ТоварныеКатегории
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
		|	ПО 
		|		(ТоварныеКатегории.Владелец = ВидыНоменклатуры.Ссылка)
		|	И 	(НЕ ТоварныеКатегории.ПометкаУдаления)
		|ГДЕ
		|	НЕ ВидыНоменклатуры.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыНоменклатуры.ЭтоГруппа ИЕРАРХИЯ,
		|	ВидыНоменклатуры.Наименование,
		|	ТоварныеКатегории.ЭтоГруппа ИЕРАРХИЯ,
		|	ТоварныеКатегории.Наименование Возр";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()

// Функция возвращает текст запроса инициализации номенклатуры
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка - текст запроса  
//
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаИнициализацииНоменклатуры()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Склад
		|ПОМЕСТИТЬ ДоступныеСклады
		|ИЗ
		|	РегистрСведений.Модуль_ДоступныеСклады 
		|ГДЕ
		|	Основной
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ссылка,
		|	Наименование,
		|	ТоварнаяКатегория
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И НЕ ЭтоГруппа
		|	И ВидНоменклатуры = &ВидНоменклатуры
		|	И 1 = 1 // Это шаблон для того чтобы открыть через конструктор
		|ИНДЕКСИРОВАТЬ ПО 
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешНоменклатуры.ТоварнаяКатегория 					КАК ТоварнаяКатегория,
		|	ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка) КАК РассчитаннаяТоварнаяКатегория,
		|	ЕСТЬNULL(АктуальностьНоменклатуры.Актуально, ЛОЖЬ)	КАК Актуально,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,
		|	ЕСТЬNULL(КешЦен.Цена, 0) 							КАК Цена,
		|	КешНоменклатуры.Ссылка,
		|	КешНоменклатуры.Наименование
		|ИЗ
		|	КешНоменклатуры КАК КешНоменклатуры
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,
		|				Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры)
		|					И Склад В (ВЫБРАТЬ Склад ИЗ ДоступныеСклады)) КАК ТоварыНаСкладахОстатки
		|		ПО КешНоменклатуры.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(,
		|				Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры)) КАК АктуальностьНоменклатуры
		|		ПО КешНоменклатуры.Ссылка = АктуальностьНоменклатуры.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Ссылка  ИЗ КешНоменклатуры) И ВидЦены = &ВидЦены) КАК КешЦен
		|		ПО 
		|			КешНоменклатуры.Ссылка = КешЦен.Номенклатура
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнициализацииНоменклатуры()

#КонецОбласти
