
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	НастройкиИзменились = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	СоздатьРеквизитыИЭлементыФормы();	
	ИнициализироватьВидыНоменклатуры();
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьНастройкиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваЗначенийВидыНоменклатуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТаблицаНоменклатуры.Очистить();
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные			= Элемент.ТекущиеДанные;
		Загрузить_ТаблицаНоменклатурыСервер(ТекущиеДанные.Ссылка, ТекущиеДанные.ТоварнаяКатегория); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыНоменклатуры

&НаКлиенте
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыНастройки

&НаКлиенте
Процедура ТаблицаНастройкиПриИзменении(Элемент)
	Элементы.Сохранить.Доступность = Ложь;
	НастройкиИзменились = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиВидЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Форма				= ПолучитьФорму("Справочник.ВидыЦен.ФормаВыбора",,Элемент);
	ДоступноеПолеОтбора = Форма.Список.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Ссылка");
	Если ДоступноеПолеОтбора <> Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		Отбор					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение		= ДоступноеПолеОтбора.Поле;
		Отбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение	= ПолучитьДоступныеВидыЦен();   
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиВидЦеныОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные	= Элементы.ТаблицаНастройки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.НижняяГраница		= 0;
	ТекущиеДанные.ВерхняяГраница	= 0;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные	= Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ЭтоГруппа = 0  Тогда
		Отказ = Истина; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Устанавливать настройки для группы видов номенклатуры запрещено!'"));
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.ТаблицаНастройки.Количество()>1 Тогда 
		СтрокаПроверки = Элемент.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(СтрокаПроверки.ТоварнаяКатегория) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка настройки: нельзя чтобы товарная категория была пустой!'"),
															  , 
															  "Объект.ТаблицаНастройки["+(СтрокаПроверки.НомерСтроки-1)+"].ТоварнаяКатегория",
															  ,
															  Истина);			
		ИначеЕсли СтрокаПроверки.НижняяГраница > СтрокаПроверки.ВерхняяГраница Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка настройки: нельзя чтобы нижняя граница была больше верхней!'"),
															  , 
															  "Объект.ТаблицаНастройки["+(СтрокаПроверки.НомерСтроки-1)+"].НижняяГраница",
															  ,
															  Истина);
		КонецЕсли;	
	КонецЕсли;
	
	ТекущиеДанные	= Элементы.ТаблицаНастройки.ТекущиеДанные;
	ТекущийЭл		= Элементы.ТаблицаНастройки.ТекущийЭлемент;
					 
	Если ТекущиеДанные = Неопределено ИЛИ ТекущийЭлемент = Неопределено  Тогда
		Возврат;
	КонецЕсли;   

	ИмяКолонки = СтрЗаменить(ТекущийЭл.Имя,"ТаблицаНастройки","");
	
	Если ИмяКолонки = "Содержит"  ИЛИ  ИмяКолонки = "НеСодержит" Тогда	
		ОтменитьРЕдактирования = ПроверитьФормулуНаСервере(ТекущиеДанные[ИмяКолонки]);   
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкиТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ТекущийВидНоменклатуры.Пустая() Тогда 
		ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец", ТекущийВидНоменклатуры), Элемент);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	Если ТаблицаНоменклатуры.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если НастройкиИзменились = Истина Тогда
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Настройки нужно сохранить перед изменением номенклатуры!'"));
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос(НСтр("ru='Вы действительно хотите записать рассчитанный товарные категории для номенклатуры?!'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНаСервере();
	
	Элементы.Сохранить.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиТоварнойКатегории(Команда)
	
	ТекущиеДанные	= Элементы.ВидыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа = 0  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Устанавливать настройки для группы видов номенклатуры запрещено!'"),,,,Истина);
	КонецЕсли;
	
	СохранитьНастройкиТоварнойКатегории();
	
КонецПроцедуры

&НаКлиенте
Процедура Расчитать(Команда)
	
	ТекущиеДанные= Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		СсылкаНаНоменклатуру = Неопределено;
	Иначе 
		СсылкаНаНоменклатуру = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	РассчитатьТоварныеКатегории(СсылкаНаНоменклатуру);	
	Элементы.Сохранить.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокПоУбыванию(Команда)
	
	ТекущиеДанные= Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("ТаблицаНоменклатуры");
	Если НЕ СтруктураПередачи.Отказ Тогда
		СортироватьТаблицуНоменклатурыНаСервере(ТекущиеДанные.Ссылка, СтруктураПередачи.Имя, СтруктураПередачи.Идентификатор, "УБЫВ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокПоВозрастанию(Команда)
	
	ТекущиеДанные= Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("ТаблицаНоменклатуры");
	Если НЕ СтруктураПередачи.Отказ Тогда
		СортироватьТаблицуНоменклатурыНаСервере(ТекущиеДанные.Ссылка, СтруктураПередачи.Имя, СтруктураПередачи.Идентификатор, "");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьИсторию(Команда)
	СформироватьИсториюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИ(Команда)
	
	ТекущиеДанные	= Элементы.ТаблицаНастройки.ТекущиеДанные;
	ТекущийЭл		= Элементы.ТаблицаНастройки.ТекущийЭлемент;

	Если ТекущиеДанные = Неопределено ИЛИ ТекущийЭлемент = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	ЛогВыраженияИ = "&AND&";
	ИмяКолонки = СтрЗаменить(ТекущийЭл.Имя,"ТаблицаНастройки","");
	ЗаполнитьЛогВыражения(ТекущиеДанные.НомерСтроки,ИмяКолонки,ЛогВыраженияИ);  	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИЛИ(Команда)
	
	ТекущиеДанные	= Элементы.ТаблицаНастройки.ТекущиеДанные;
	ТекущийЭл		= Элементы.ТаблицаНастройки.ТекущийЭлемент;
					 
	Если ТекущиеДанные = Неопределено ИЛИ ТекущийЭлемент = Неопределено  Тогда
		Возврат;
	КонецЕсли;   

	ЛогВыраженияИЛИ = "&OR&";
	ИмяКолонки = СтрЗаменить(ТекущийЭл.Имя,"ТаблицаНастройки","");
	ЗаполнитьЛогВыражения(ТекущиеДанные.НомерСтроки,ИмяКолонки,ЛогВыраженияИЛИ);   
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФигурнуюДужкуЗакрития(Команда)
	ТекущиеДанные	= Элементы.ТаблицаНастройки.ТекущиеДанные;
	ТекущийЭл		= Элементы.ТаблицаНастройки.ТекущийЭлемент;

	Если ТекущиеДанные = Неопределено ИЛИ ТекущийЭлемент = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	ФигурныеДужки = "&}&";
	ИмяКолонки = СтрЗаменить(ТекущийЭл.Имя,"ТаблицаНастройки","");
	ЗаполнитьЛогВыражения(ТекущиеДанные.НомерСтроки,ИмяКолонки,ФигурныеДужки); 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФигурнуюДужкуОткрития(Команда)
	ТекущиеДанные	= Элементы.ТаблицаНастройки.ТекущиеДанные;
	ТекущийЭл		= Элементы.ТаблицаНастройки.ТекущийЭлемент;

	Если ТекущиеДанные = Неопределено ИЛИ ТекущийЭлемент = Неопределено  Тогда
		Возврат;
	КонецЕсли;

	ФигурныеДужки = "&{&";
	ИмяКолонки = СтрЗаменить(ТекущийЭл.Имя,"ТаблицаНастройки","");
	ЗаполнитьЛогВыражения(ТекущиеДанные.НомерСтроки,ИмяКолонки,ФигурныеДужки); 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обработчик создания дополнительных реквизитов и элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы()
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонокВидовЦен();
	УстановитьВидимостьЭлементов(СтруктураКолонок);
КонецПроцедуры // СоздатьРеквизитыИЭлементыФормы()
 
// Процедура обработчик установки видимости дополнительных элементов формы
//
// Параметры:
//  СтруктураКолонок	- Структура - структура дополнительных колонок таблицы номенклатуры
//
&НаСервере
Процедура УстановитьВидимостьЭлементов(СтруктураКолонок)
	
	МассивВидовЦен =  СтруктураКолонок.СписокВидовЦен;
	//СписокЗначений = Новый СписокЗначений;
	
	Для каждого Колонка Из МассивВидовЦен Цикл
		ИндексКолонки = МассивВидовЦен.Найти(Колонка);
		Если ИндексКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКолонки = ИндексКолонки + 1;
		
		ИмяЭлемента			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Цена%1", ИндексКолонки);
				
		ИмяЭлемента = Элементы.Найти(ИмяЭлемента);
		Если ИмяЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента.Видимость 	= Истина;
		ИмяЭлемента.Заголовок 	= Колонка.Заголовок; 
		
		НоваяСтрока 				= СписокВидовЦен.Добавить();
		НоваяСтрока.ИндексКолонки   = Строка(ИндексКолонки);
		НоваяСтрока.ВидЦены   		= Колонка.Ссылка;
		НоваяСтрока.ИмяКолонки	  	= ИмяЭлемента;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру идентификации коллекции данных
//
// Параметры:
//  ИмяКоллекцииЗначений - Строка - имя коллекции данных
//
// Возвращаемое значение:
//   Структура - структура данных идентификации колонки   
//
&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонки(ИмяКоллекцииЗначений)
	
	ЭлементФормы = Элементы.Найти(ИмяКоллекцииЗначений);
	Если ЭлементФормы = Неопределено Тогда 
		Возврат Новый Структура("Отказ, Идентификатор, Имя", Истина, Неопределено, Неопределено);
	КонецЕсли;
	
	ТДанные  = ЭлементФормы.ТекущиеДанные;
	ТЭлемент = ЭлементФормы.ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
КонецФункции

// Сортировать список номенклатуры
//
// Параметры:
//  Поле				- Строка - наименование колонки сортировки
//                 
//  ПорядокСортировки	- Строка - порядок сортировки
//
&НаСервере
Процедура СортироватьТаблицуНоменклатурыНаСервере(Ссылка, ПолноеИмя, Идентификатор, ПорядокСортировки)
	
	Перем ВремЗнч;
	УстановитьПривилегированныйРежим(Истина);

	ТДанные = ТаблицаНоменклатуры.НайтиПоИдентификатору(Идентификатор);
	ЭтоАддон = ТДанные.Свойство(ПолноеИмя);
	Если НЕ ЭтоАддон Тогда
		Разделитель	= Найти(ПолноеИмя, "_");
		ИмяОбъекта 	= Лев(ПолноеИмя, Разделитель - 1);
		Если НЕ ТДанные.Свойство(ИмяОбъекта, ВремЗнч) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Возникла неизвестная ошибка. В таблице нет данных о имени: " + ИмяОбъекта + " сообщите в службу поддержки'"));
			Возврат;
		КонецЕсли;
		
		Если Найти(XMLТипЗнч(ВремЗнч).ИмяТипа, "Ref") = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Возникла неизвестная ошибка. Метаданные не определены: " + ИмяОбъекта + " сообщите в службу поддержки'"));
			Возврат;
		КонецЕсли;
	ПолноеИмя = СтрЗаменить(ПолноеИмя,"_",".");	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТекстЗапросаСортировкиТаблицыНоменклатуры(), ПолноеИмя, ПорядокСортировки);

	Запрос.УстановитьПараметр("ТаблицаНоменклатуры",ТаблицаНоменклатуры.Выгрузить());
	ТаблицаНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Ссылка = Неопределено Или Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат;	
	КонецЕсли;
	
	//Устанавливает текущую строку	
	ПараметрыОтбора = Новый Структура("Ссылка", Ссылка);
	
	Массив = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
	Если Массив.Количество() Тогда 
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // СортироватьСписокНаСервере()

// Процедура рассчитывает товарные категории согласно таблицы настроек
//
// Параметры:
//  Ссылка	- СправочникСсылка.Номенклатура,Неопределено - ссылка на элемент справочник номенклатуры 
//
&НаСервере
Процедура РассчитатьТоварныеКатегории(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитФормыВЗначение("Объект").РассчитатьТоварныеКатегории(ЭтаФорма);
	
		
	Если Ссылка = Неопределено Или Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат;	
	КонецЕсли;
	
	//Устанавливает текущую строку	
	ПараметрыОтбора = Новый Структура("Ссылка", Ссылка);
	
	Массив = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
	Если Массив.Количество() Тогда 
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры // РассчитатьТоварныеКатегории()

// Процедура сохраняет настройки товарных категорий для выбраного вида номенклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СохранитьНастройкиТоварнойКатегории()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийВидНоменклатуры = Справочники.ТоварныеКатегории.ПустаяСсылка() Тогда 
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.КТС_НастройкиТоварныхКатегорий.СоздатьНаборЗаписей();
	Запись.Отбор.ВидНоменклатуры.Установить(ТекущийВидНоменклатуры);
	Запись.Загрузить(СформироватьНовыеНастройкиТоварныхКатегорий());
	Запись.Записать(Ложь);
	
	НастройкиИзменились = Ложь;
	
КонецПроцедуры

// Процедура загружает настройки товарных категорий для выбраного вида номенклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗагрузитьНастройкиТоварнойКатегории()
	
	Объект.ТаблицаНастройки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Период) КАК Период
		|ПОМЕСТИТЬ КешПоследняяЗапись
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, ВидНоменклатуры = &ВидНоменклатуры) 
		|;
		|
		|ВЫБРАТЬ
		|	РСНастройки.Приоритет			КАК НомерСтроки,
		|	РСНастройки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	РСНастройки.ВидЦены             КАК ВидЦены,
		|	РСНастройки.НижняяГраница		КАК НижняяГраница,
		|	РСНастройки.ВерхняяГраница		КАК ВерхняяГраница,
		|	РСНастройки.Содержит			КАК Содержит,
		|	РСНастройки.НеСодержит			КАК НеСодержит,
		|	РСНастройки.Производитель		КАК Производитель
		|ИЗ
		|	РегистрСведений.КТС_НастройкиТоварныхКатегорий.СрезПоследних(, ВидНоменклатуры = &ВидНоменклатуры) КАК РСНастройки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПоследняяЗапись КАК КешПоследняяЗапись
		|	ПО 
		|		РСНастройки.Период = КешПоследняяЗапись.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	Запрос.УстановитьПараметр("ВидНоменклатуры",ТекущийВидНоменклатуры);
	
	Объект.ТаблицаНастройки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура записать товарные категории в номенклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СохранитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);   	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрНом.Ссылка КАК Ссылка,
	               |	СпрНом.ТоварнаяКатегория,
	               |	СпрНом.РассчитаннаяТоварнаяКатегория
	               |ПОМЕСТИТЬ КешНоменклатура
	               |ИЗ
	               |	&СписокНоменклатуры КАК СпрНом
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ  ПЕРВЫЕ 1
	               |	КешНоменклатура.Ссылка КАК Номенклатура,
	               |	КешНоменклатура.РассчитаннаяТоварнаяКатегория КАК ТоварнаяКатегория
	               |ИЗ
	               |	КешНоменклатура КАК КешНоменклатура
	               |ГДЕ
	               |	КешНоменклатура.РассчитаннаяТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)"; 
				   
	Запрос.УстановитьПараметр("СписокНоменклатуры",ТаблицаНоменклатуры.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		РеквизитФормыВЗначение("Объект").ЗаписатьТоварнуюКатегориюВНоменклатуру(ЭтаФорма);
		
		Если Не ТекущийВидНоменклатуры.Пустая() Тогда
			Загрузить_ТаблицаНоменклатурыСервер(ТекущийВидНоменклатуры, ТекущаяТоварнаяКатегория); 
		КонецЕсли;
		
	Иначе
		ТекстСообщенияОбОшибке = НСтр("ru='Рассчитанная ТК заполнена не у всех товаров. Сохраненные невозможно! Отредактируйте Ваши настройки.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу настроек товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ТаблицаЗначений   - настройки товарных категорий
//
&НаСервере
Функция СформироватьНовыеНастройкиТоварныхКатегорий()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНастройки.ВидЦены			КАК ВидЦены,
		|	ТаблицаНастройки.НомерСтроки		КАК Приоритет,
		|	ТаблицаНастройки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	ТаблицаНастройки.НижняяГраница		КАК НижняяГраница,
		|	ТаблицаНастройки.ВерхняяГраница		КАК ВерхняяГраница,
		|	ТаблицаНастройки.Содержит			КАК Содержит,
		|	ТаблицаНастройки.НеСодержит			КАК НеСодержит,
		|	ТаблицаНастройки.Производитель		КАК Производитель
		|ПОМЕСТИТЬ ТаблицаНастройки
		|ИЗ
		|	&ТаблицаНастройки КАК ТаблицаНастройки
		|;
		|
		|ВЫБРАТЬ
		|	&Период								КАК Период,
		|	&ВидНоменклатуры					КАК ВидНоменклатуры,
		|	ТаблицаНастройки.ВидЦены			КАК ВидЦены,
		|	ТаблицаНастройки.Приоритет			КАК Приоритет,
		|	ТаблицаНастройки.ТоварнаяКатегория	КАК ТоварнаяКатегория,
		|	ТаблицаНастройки.НижняяГраница		КАК НижняяГраница,
		|	ТаблицаНастройки.ВерхняяГраница		КАК ВерхняяГраница,
		|	ТаблицаНастройки.Содержит			КАК Содержит,
		|	ТаблицаНастройки.НеСодержит			КАК НеСодержит,
		|	ТаблицаНастройки.Производитель		КАК Производитель
		|ИЗ
		|	ТаблицаНастройки КАК ТаблицаНастройки";
	Запрос.УстановитьПараметр("ТаблицаНастройки"	,Объект.ТаблицаНастройки.Выгрузить());
	Запрос.УстановитьПараметр("ВидНоменклатуры"		,ТекущийВидНоменклатуры);
	Запрос.УстановитьПараметр("Период"				,ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьНовыеНастройкиТоварныхКатегорий()

// Процедура инициализирует ДеревоЗначений Навигация_ВидыНоменклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИнициализироватьВидыНоменклатуры()
	
	Перем ТекущийУровень;
	
	ДеревоВидыНоменклатуры = РеквизитФормыВЗначение("Навигация_ВидыНоменклатуры");
	ДеревоВидыНоменклатуры.Строки.Очистить();
	ПараметрОтбора = Новый Структура("Ссылка");
	ПараметрОтбораКатегории = Новый Структура("ТоварнаяКатегория");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрОтбора, Выборка); 
		РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
		Если РезультатПоиска.Количество() = 0 Тогда
			Если Выборка.Родитель.Пустая() Тогда
				СтрокаДереваВид = ДеревоВидыНоменклатуры.Строки.Добавить();
				СтрокаДереваВид.Ссылка = Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа = ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование = Выборка.Наименование;
			Иначе
				ПараметрОтбора.Вставить("Ссылка", Выборка.Родитель);
				РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
				СтрокаДереваВид = РезультатПоиска[0].Строки.Добавить();
				СтрокаДереваВид.Ссылка = Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа = ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование = Выборка.Наименование;		
			КонецЕсли;
		Иначе
			СтрокаДереваВид = РезультатПоиска[0];	
		КонецЕсли;
		
		Если НЕ Выборка.ТоварнаяКатегория.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрОтбораКатегории, Выборка); 
			РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
			Если РезультатПоиска.Количество() = 0 Тогда
				Если Выборка.Родитель_ТоварныеКатегории.Пустая() Тогда
					СтрокаДереваКатегория = СтрокаДереваВид.Строки.Добавить();
					СтрокаДереваКатегория.Ссылка = Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа = ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование = Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;
				Иначе
					ПараметрОтбораКатегории.Вставить("ТоварнаяКатегория", Выборка.Родитель_ТоварныеКатегории);
					РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
					СтрокаДереваКатегория = РезультатПоиска[0].Строки.Добавить();
					СтрокаДереваКатегория.Ссылка = Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа = ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование = Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоВидыНоменклатуры, "Навигация_ВидыНоменклатуры");
	
КонецПроцедуры  // ИнициализироватьВидыНоменклатуры()


&НаСервере
Процедура ОткрытьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = "Все";
	
	_u_ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	_u_НастройкиПользователя = ХранилищеНастроекДанныхФорм.Загрузить("АвтоТК_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , , "АвтоТК_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
	Если ТипЗнч(_u_НастройкиПользователя) = Тип("Структура") Тогда   		
		_u_НастройкиПользователя.Свойство("Отбор", Отбор); 
	КонецЕсли;
КонецПроцедуры // ОткрытьНастройки()


&НаСервере
Процедура СохранитьНастройкиНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	_u_ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	_u_НастройкиПользователя = Новый Структура;
	_u_НастройкиПользователя.Вставить("Отбор", Отбор);

	ХранилищеНастроекДанныхФорм.Сохранить("АвтоТК_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , _u_НастройкиПользователя, "Авто ТК, настройки пользователя", "АвтоТК_" + _u_ТекущийПользователь.УникальныйИдентификатор());
КонецПроцедуры // СохранитьНастройкиНаСервере()



// Процедура формирует таблицу номенклатуры по выбранному виду и категории
//
// Параметры:
//  ВидНоменклатуры 	- СправочникСсылка.ВидыНоменклатуры,Неопределено 	- выбраный вид номенклатуры в дереве ВидыНоменклатуры
//  ТоварнаяКатегория	- СправочникСсылка.ТоварныеКатегории				- выбраная товарная категория в дереве ВидыНоменклатуры
//
&НаСервере
Процедура Загрузить_ТаблицаНоменклатурыСервер(ВидНоменклатуры, ТоварнаяКатегория)
	
	УстановитьПривилегированныйРежим(Истина);

	Если ВидНоменклатуры <> ТекущийВидНоменклатуры Тогда 
		ТекущийВидНоменклатуры = ВидНоменклатуры;
		ЗагрузитьНастройкиТоварнойКатегории();
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").Загрузить_ТаблицаНоменклатурыСервер(ЭтаФорма, ВидНоменклатуры, ТоварнаяКатегория);

	
КонецПроцедуры // Загрузить_ТаблицаНоменклатурыСервер()

// Функция возвращает текст запроса инициализации видов номенклатуры и товарных категорий
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка - текст запроса  
//
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка 					КАК Ссылка,
		|	ВидыНоменклатуры.ЭтоГруппа 					КАК ЭтоГруппа,
		|	ВидыНоменклатуры.Наименование 				КАК Наименование,
		|	ВидыНоменклатуры.Родитель					КАК Родитель,
		|	ЕСТЬNULL(ТоварныеКатегории.Ссылка, ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)) КАК ТоварнаяКатегория,
		|	ТоварныеКатегории.ЭтоГруппа					КАК ЭтоГруппа_ТоварныеКатегории,
		|	ТоварныеКатегории.Наименование 				КАК Наименование_ТоварныеКатегории,
		|	ТоварныеКатегории.Родитель	 				КАК Родитель_ТоварныеКатегории
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
		|	ПО 
		|		(ТоварныеКатегории.Владелец = ВидыНоменклатуры.Ссылка)
		|	И 	(НЕ ТоварныеКатегории.ПометкаУдаления)
		|ГДЕ
		|	НЕ ВидыНоменклатуры.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыНоменклатуры.ЭтоГруппа ИЕРАРХИЯ,
		|	ВидыНоменклатуры.Наименование,
		|	ТоварныеКатегории.ЭтоГруппа ИЕРАРХИЯ,
		|	ТоварныеКатегории.Наименование Возр";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()

// Текст запроса сортировки таблицы номенклатуры
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаСортировкиТаблицыНоменклатуры()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|;
		|ВЫБРАТЬ
		|  *
		|ИЗ
		|ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		| УПОРЯДОЧИТЬ ПО
		|	%1
		|   %2
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСортировкиСпискаНоменклатуры()

// Возвращает массив доступные виды цен
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Массив   - список доступных видов цен
//
&НаСервере
Функция ПолучитьДоступныеВидыЦен()

	Возврат СписокВидовЦен.Выгрузить().ВыгрузитьКолонку("ВидЦены"); 

КонецФункции // ПолучитьДоступныеВидыЦен()

&НаСервере
Процедура СформироватьИсториюНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат.Очистить();	
 	СхемаКомпоновкиДанныхДетализация	= РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКД_ИсторияИзмененнойНоменклатуры");    
	Настройки 							= СхемаКомпоновкиДанныхДетализация.НастройкиПоУмолчанию;
	
	СхемаКомпоновкиДанныхДетализация.Параметры.ТекущаяДата.Значение		= ТекущаяДата();
	СхемаКомпоновкиДанныхДетализация.Параметры.Ответственный.Значение	= ПараметрыСеанса.ТекущийПользователь;

	КомпановщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровкиКомпоновкиДанных	= Новый ДанныеРасшифровкиКомпоновкиДанных;

	МакетКомпановки 	= КомпановщикМакета.Выполнить(СхемаКомпоновкиДанныхДетализация, Настройки);

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпановки, , ДанныеРасшифровкиКомпоновкиДанных);


	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//ДанныеРасшифровки  = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	Результат.Показать();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьЛогВыражения(НомерСтроки,Имя,ЛогВыражения)
	Если Имя = "Содержит"  ИЛИ  Имя = "НеСодержит" Тогда	
		ТД = Объект.ТаблицаНастройки.Получить(НомерСтроки-1); 		
		ТД[Имя] = ТД[Имя] + ЛогВыражения;	
	КонецЕсли; 	
КонецПроцедуры // ЗаполнитьЛогВыражения(ТекущиеДанные.НомерСтроки,ТекущийЭлемент.Имя,ЛогВыраженияИ)

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	Загрузить_ТаблицаНоменклатурыСервер(ТекущийВидНоменклатуры, ТекущаяТоварнаяКатегория);  
КонецПроцедуры

&НаСервере
Функция ПроверитьФормулуНаСервере(Формула)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	""Наименование"" КАК Наименование,
	               |	&Формула КАК Содержит
	               |ПОМЕСТИТЬ ТаблицаНастройки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНастройки.Наименование,
	               |	ТаблицаНастройки.Содержит
	               |ИЗ
	               |	ТаблицаНастройки КАК ТаблицаНастройки
	               |ГДЕ
	               |	ИСТИНА  ";
	Запрос.УстановитьПараметр("Формула",Формула);
	
	ШаблонСодержит =" ТаблицаНастройки.Наименование ПОДОБНО ";  	
	Шаблон1 = """%"" + ПОДСТРОКА(ТаблицаНастройки.Содержит,%1,%2)+ ""%""";   
	СтрСодержит = СокрЛП(Формула);	
	Запрос.Текст = ТекстЗапроса + РеквизитФормыВЗначение("Объект").РазбытьЛогВыражения(СтрСодержит,ШаблонСодержит,Шаблон1);	
		
	Попытка	
		Результат = Запрос.Выполнить(); 
		Возврат ЛОЖЬ;
	Исключение  
		ТекстСообщенияОбОшибке = НСтр("ru='Рассчитанная формула не верная!Сохраненные невозможно! Отредактируйте Вашу формулу.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);	
		Возврат Истина; 
	КонецПопытки;

КонецФункции // ПроверитьФормулуНаСервере()



#КонецОбласти
