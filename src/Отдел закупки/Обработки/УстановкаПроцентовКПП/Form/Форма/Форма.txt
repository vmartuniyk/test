
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьЗапросГруппыНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьСозданияРеквизитовФормы");
	СписокТестов.Добавить(ПараметрыТеста);
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьСозданияЭлементовФормы");
	СписокТестов.Добавить(ПараметрыТеста);
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьЗапросГруппыНоменклатуры() Экспорт
	ТекстЗапроса = ПолучитьТекстЗапросаДляПроверкиТеста();
	СообщенияОбОшибке	= НСтр("ru='ТекстЗапросаГруппыНоменклатуры имеет ошибку'");
	ЮнитТест.ПроверитьТип(ТекстЗапроса,Тип("Строка"),СообщенияОбОшибке);
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса, СообщенияОбОшибке);

КонецПроцедуры // Тест_СписаниеДеталей()

&НаКлиенте
Процедура Тест_ПроверитьСозданияРеквизитовФормы() Экспорт
	
	СтруктураМассиваРеквизитов	= СоздатьРеквизитыФормыНаСервере();
	СообщениеОбОшибке	=	НСтр("Не удалось найти реквизит ДеревоРезультатов на  форме обработки!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьБольше(СтруктураМассиваРеквизитов.Количество,0,СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(СтруктураМассиваРеквизитов.Тип,Тип("Массив"), СообщениеОбОшибке);
	
КонецПроцедуры // Тест_СписаниеДеталей()

&НаКлиенте
Процедура Тест_ПроверитьСозданияЭлементовФормы() Экспорт
	СоздатьЭлементиФормыНаСервере();
	
	ЭлементДеревоРезультатов	= ЭтаФорма.Элементы.Найти("ДеревоРезультатов");
	СообщениеОбОшибке	=	НСтр("Не удалось найти реквизит ДеревоРезультатов на  форме обработки!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(ЭлементДеревоРезультатов,Тип("ТаблицаФормы"),СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЭлементДеревоРезультатов,Неопределено ,СообщениеОбОшибке);
	
	ЭлементНоменклатура	= ЭтаФорма.Элементы.Найти("Наименование");
	СообщениеОбОшибке	=	НСтр("Не удалось найти реквизит Наименование на  форме обработки!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(ЭлементНоменклатура,Тип("ПолеФормы"),СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЭлементНоменклатура,Неопределено ,СообщениеОбОшибке);	
КонецПроцедуры // Тест_СписаниеДеталей()

&НаСервере
Функция СоздатьРеквизитыФормыНаСервере()
	СтруктураДанных	= ПолучитьСтруктуруЗначенияОбъектИМассивКатегорий();
	СоздатьДополнительныеРеквизитыФормы(СтруктураДанных.МассивКатегорий,СтруктураДанных.ОбъектОбработки);
	МассиваРеквизитов =  ПолучитьРеквизиты("ДеревоРезультатов");
	Возврат Новый Структура("Количество,Тип",МассиваРеквизитов.Количество(),ТипЗнч(МассиваРеквизитов));
КонецФункции // ()

&НаСервере
Процедура СоздатьЭлементиФормыНаСервере()
	СтруктураДанных	= ПолучитьСтруктуруЗначенияОбъектИМассивКатегорий();
	СоздатьДополнительныеРеквизитыФормы(СтруктураДанных.МассивКатегорий,СтруктураДанных.ОбъектОбработки);
	СоздатьДополнительныеЭлементыФормы(СтруктураДанных.МассивКатегорий, СтруктураДанных.ОбъектОбработки);;
КонецПроцедуры // ()



&НаСервере
Функция ПолучитьТекстЗапросаДляПроверкиТеста()
	
	СтруктураДанных	= ПолучитьСтруктуруЗначенияОбъектИМассивКатегорий();
	Возврат ПолучитьТекстЗапросаГруппыНоменклатуры(СтруктураДанных.МассивКатегорий,СтруктураДанных.ОбъектОбработки);
	
КонецФункции // ПолучитьТекстЗапросаДляПроверкиТеста()

&НаСервере
Функция ПолучитьСтруктуруЗначенияОбъектИМассивКатегорий()
		
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	МассивКатегорий	= ОбъектОбработки.ПолучитьМассивКатегорий();
	
	Возврат Новый Структура("ОбъектОбработки,МассивКатегорий",ОбъектОбработки,МассивКатегорий);	
КонецФункции // ПолучитьТекстЗапросаДляПроверкиТеста()

	
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
		
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");	
	МассивКатегорий	= ОбъектОбработки.ПолучитьМассивКатегорий();
	
	СоздатьДополнительныеРеквизитыФормы(МассивКатегорий,ОбъектОбработки);
	СоздатьДополнительныеЭлементыФормы(МассивКатегорий, ОбъектОбработки);
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	ЗагрузитьДеревоРезультат(МассивКатегорий);
	УстановитьУсловноеОформление(МассивКатегорий);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобитийЭлементовДеревоРезультат

&НаКлиенте
Процедура ДеревоРезультатовПередУдалением(Элемент, Отказ)
	Отказ	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРезультатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРезультатовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Выполнение  = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы
&НаКлиенте
Процедура Обновить(Команда)
	
	КлючСтроки =Элементы.ДеревоРезультатов.ТекущиеДанные.Номенклатура;
	ИдентификаторСтроки = 0;
	
	ОбновитьНаСервере();
	
	КоллекцияЭлементовДерева = ДеревоРезультатов.ПолучитьЭлементы();
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Номенклатура", ИдентификаторСтроки, КоллекцияЭлементовДерева,КлючСтроки, Ложь);
	Элементы.ДеревоРезультатов.Развернуть(ИдентификаторСтроки);
	Элементы.ДеревоРезультатов.ТекущаяСтрока = ИдентификаторСтроки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьТекстЗапросаГруппыНоменклатуры(МассивКатегорий, ОбъектОбработки)
		
	ТекстЗапросаДоп	= "";
	ТекстЗапроса  = "ВЫБРАТЬ
					|  Ссылка КАК Номенклатура
					|ПОМЕСТИТЬ ВидыНоменклатуры
					|ИЗ
					|  Справочник.ВидыНоменклатуры
					|ГДЕ
					|  НЕ ПометкаУдаления
					|;
					////////////////////////////////////////////////////////////////////////////////
					//1
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Склад
					|ПОМЕСТИТЬ КешСклад
					|ИЗ
					|	РегистрСведений.Модуль_ДоступныеСклады
					|ГДЕ
					|	Основной
					|	И НЕ Склад.ПометкаУдаления
					|;
					////////////////////////////////////////////////////////////////////////////////
					//2
					|ВЫБРАТЬ
					|	Номенклатура	  КАК Номенклатура,
					|	КоличествоОстаток КАК Количество
					|ПОМЕСТИТЬ КешНоменклатураОстатки
					|ИЗ
					|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ТекущаяДата,
					| 												Номенклатура.ВидНоменклатуры В (ВЫБРАТЬ Номенклатура ИЗ ВидыНоменклатуры)
					|												И Склад В (ВЫБРАТЬ Склад ИЗ  КешСклад)
					|												)
					|;
					////////////////////////////////////////////////////////////////////////////////
					//3
					|ВЫБРАТЬ
					|	КешНоменклатураОстатки.Номенклатура КАК Номенклатура,
					|	КешНоменклатураОстатки.Количество КАК Количество,
					|	КешНоменклатураОстатки.Количество * ВЫРАЗИТЬ(ЕСТЬNULL(ЗаработокРозница.Значение, 0) КАК ЧИСЛО(15, 3)) КАК Заработок_Розница,
					|	КешНоменклатураОстатки.Количество * ВЫРАЗИТЬ(ЕСТЬNULL(ЗаработокОпт.Значение, 0) КАК ЧИСЛО(15, 3)) КАК Заработок_Опт
					|ПОМЕСТИТЬ ЗаработокМенеджераПоНоменклатуре
					|
					|ИЗ
					|	КешНоменклатураОстатки КАК КешНоменклатураОстатки
					|
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗаработокРозница
					|ПО (КешНоменклатураОстатки.Номенклатура = (ВЫРАЗИТЬ(ЗаработокРозница.Объект КАК Справочник.Номенклатура)))
					|И (ЗаработокРозница.Свойство = &СвойствоЗаработокМенеджераРозница)
					|		
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗаработокОпт
					|ПО (КешНоменклатураОстатки.Номенклатура = (ВЫРАЗИТЬ(ЗаработокОпт.Объект КАК Справочник.Номенклатура)))
					|И (ЗаработокОпт.Свойство = &СвойствоЗаработокМенеджераОпт)
					|
					|;
					////////////////////////////////////////////////////////////////////////////////
					//4
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	КПП_Розница_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Номенклатура,
					|	КПП_Розница_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Значение КАК КПП
					|ПОМЕСТИТЬ КПП_Розница_НоменклатураКатегория
					|ИЗ
					|	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(&ТекущаяДата, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ  КешНоменклатураОстатки)) КАК КПП_Розница_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних
					|ГДЕ
					|	НЕ КПП_Розница_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Значение = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)
					|;
					////////////////////////////////////////////////////////////////////////////////
					//5
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	КПП_Опт_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Номенклатура,
					|	КПП_Опт_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Значение КАК КПП
					|ПОМЕСТИТЬ КПП_Опт_НоменклатураКатегория
					|ИЗ
					|	РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(&ТекущаяДата, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ  КешНоменклатураОстатки)) КАК КПП_Опт_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних
					|ГДЕ
					|	НЕ КПП_Опт_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Значение = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)
					|;";
					  
		ТекстЗапросаПол = "";
	ТекстЗапросаГру = "";
					  
	Для каждого Категория Из МассивКатегорий Цикл
		
		ИдентификаторКатегории = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(Категория);
		
#Область СредЗаработок
	 ТекстЗапроса = ТекстЗапроса + "
	    |ВЫБРАТЬ
		|	ЗаработокМенеджераПоНоменклатуре.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ЗаработокМенеджераПоНоменклатуре.Заработок_Розница 			  КАК Заработок_Розница" + ИдентификаторКатегории + ",
		|	0 															  КАК Заработок_Опт" + ИдентификаторКатегории + ",
		|	ЗаработокМенеджераПоНоменклатуре.Количество                   КАК Количество" + ИдентификаторКатегории + "
		|ПОМЕСТИТЬ ЗарабатокПоКПП0_" + ИдентификаторКатегории + "
		|ИЗ
		|	ЗаработокМенеджераПоНоменклатуре КАК ЗаработокМенеджераПоНоменклатуре
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КПП_Розница_НоменклатураКатегория  КАК КПП_Розница
		|	ПО ЗаработокМенеджераПоНоменклатуре.Номенклатура = КПП_Розница.Номенклатура
		|	И  КПП_Розница.КПП =  &КПП_" + ИдентификаторКатегории + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаработокМенеджераПоНоменклатуре.Номенклатура.ВидНоменклатуры,
		|	0,
		|	ЗаработокМенеджераПоНоменклатуре.Заработок_Опт,
		|	ЗаработокМенеджераПоНоменклатуре.Количество
		|ИЗ
		|	ЗаработокМенеджераПоНоменклатуре КАК ЗаработокМенеджераПоНоменклатуре
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КПП_Розница_НоменклатураКатегория  КАК КПП_Розница
		|	ПО ЗаработокМенеджераПоНоменклатуре.Номенклатура = КПП_Розница.Номенклатура
		|	И  КПП_Розница.КПП =  &КПП_" + ИдентификаторКатегории + "
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗарабатокПоКПП.ВидНоменклатуры,
		|	ЗарабатокПоКПП.Количество" + ИдентификаторКатегории + ",
		|	СУММА(ЗарабатокПоКПП.Заработок_Розница" + ИдентификаторКатегории + ")  КАК Заработок_Розница" + ИдентификаторКатегории + ",
		|	СУММА(ЗарабатокПоКПП.Заработок_Опт" + ИдентификаторКатегории + ") КАК Заработок_Опт" + ИдентификаторКатегории + "
		|ПОМЕСТИТЬ ЗарабатокПоКПП" + ИдентификаторКатегории + "
		|ИЗ
		|	ЗарабатокПоКПП0_" + ИдентификаторКатегории + " КАК ЗарабатокПоКПП    
		|СГРУППИРОВАТЬ ПО
		|	ЗарабатокПоКПП.ВидНоменклатуры,
		|	ЗарабатокПоКПП.Количество" + ИдентификаторКатегории + "
		|;
		////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗарабатокПоКПП.ВидНоменклатуры,
		|	СУММА(ЗарабатокПоКПП.Заработок_Розница" + ИдентификаторКатегории + ")/СУММА(ЗарабатокПоКПП.Количество" + ИдентификаторКатегории + ") КАК СредЗаработокРозница_" + ИдентификаторКатегории + ",
		|	СУММА(ЗарабатокПоКПП.Заработок_Опт" + ИдентификаторКатегории + ")/СУММА(ЗарабатокПоКПП.Количество" + ИдентификаторКатегории + ") КАК СредЗаработокОпт_" + ИдентификаторКатегории + "
		|ПОМЕСТИТЬ СредЗаработокПоВидуНоменклатуры" + ИдентификаторКатегории + "
		|ИЗ
		|	ЗарабатокПоКПП" + ИдентификаторКатегории + " КАК ЗарабатокПоКПП    
		|СГРУППИРОВАТЬ ПО
		|	ЗарабатокПоКПП.ВидНоменклатуры
		|;";
	
#КонецОбласти 

#Область ТекстЗапроса
	    ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КПП_ПоВидуНоменклатурыРозница.ВидНоменклатуры 	КАК ВидНоменклатуры,
		|	КПП_ПоВидуНоменклатурыРозница.Значение			КАК Розн_" + ИдентификаторКатегории + ",
		|	0 							  					КАК Опт_" + ИдентификаторКатегории + ",
		|	КПП_ПоВидуНоменклатурыРозница.ПустаяЗапись		КАК ПустаяЗаписьРозн_" + ИдентификаторКатегории + ",
		|	NULL											КАК ПустаяЗаписьОпт_" + ИдентификаторКатегории + ",
		|	ISNULL(ЗаработокРозница.СредЗаработокРозница_" + ИдентификаторКатегории + ",0) КАК СредЗаработок_Розница" + ИдентификаторКатегории + ",
		|	ISNULL(ЗаработокРозница.СредЗаработокОпт_" + ИдентификаторКатегории + ",0)	 КАК СредЗаработок_Опт" + ИдентификаторКатегории + "
		|ПОМЕСТИТЬ Таб_" + ИдентификаторКатегории + "
		|ИЗ
		|	РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница.СрезПоследних(, КПП = &КПП_" + ИдентификаторКатегории + ")  КАК  КПП_ПоВидуНоменклатурыРозница
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ СредЗаработокПоВидуНоменклатуры" + ИдентификаторКатегории + " КАК ЗаработокРозница
		|ПО  КПП_ПоВидуНоменклатурыРозница.ВидНоменклатуры = ЗаработокРозница.ВидНоменклатуры
		|
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ
		|	ВидНоменклатуры КАК ВидНоменклатуры,
		|	0				КАК Розн_" + ИдентификаторКатегории + ",
		|	Значение 		КАК Опт_" + ИдентификаторКатегории + ",
		|	NULL 			КАК ПустаяЗаписьРозн_" + ИдентификаторКатегории + ",
		|	ПустаяЗапись 	КАК ПустаяЗаписьОпт_" + ИдентификаторКатегории + ",
		|	0				КАК СредЗаработок_Розница" + ИдентификаторКатегории + ",
		|	0				КАК СредЗаработок_Опт" + ИдентификаторКатегории + "
		|ИЗ
		|	РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыОпт.СрезПоследних(, КПП = &КПП_" + ИдентификаторКатегории + ")
		|;";
#КонецОбласти 		

#Область ТекстЗапросаДоп
		ИндексКатегории = МассивКатегорий.Найти(Категория);
		
		Если ИндексКатегории <> 0 Тогда
			ТекстЗапросаДоп  = ТекстЗапросаДоп + "
			|ОБЪЕДИНИТЬ";
		КонецЕсли;
		
		ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|ВЫБРАТЬ
			|	ВидНоменклатуры КАК ВидНоменклатуры,";
		
		Для Индекс = 0 По ИндексКатегории-1 Цикл
			ИДКатВнут = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(МассивКатегорий[Индекс]);
			ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|	0		КАК Розн_" + ИДКатВнут + ", 
			|	0		КАК Опт_" + ИДКатВнут + ",
			|	0		КАК СредЗаработок_Розница" + ИДКатВнут + ", 
			|	0		КАК СредЗаработок_Опт" + ИДКатВнут + ",
			|	NULL	КАК ПустаяЗаписьРозн_" + ИДКатВнут + ", 
			|	NULL	КАК ПустаяЗаписьОпт_" + ИДКатВнут + ",";
		КонецЦикла; 
		
		ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|	Розн_" + ИдентификаторКатегории + "	КАК Розн_" + ИдентификаторКатегории + ",
			|	Опт_" + ИдентификаторКатегории + "	КАК Опт_" + ИдентификаторКатегории + ",
			|   СредЗаработок_Розница" + ИдентификаторКатегории + " КАК СредЗаработокРозница_" + ИдентификаторКатегории + ",
			|   СредЗаработок_Опт" + ИдентификаторКатегории + " КАК СредЗаработокОпт_" + ИдентификаторКатегории + ",
			| 	ПустаяЗаписьРозн_" + ИдентификаторКатегории + " КАК ПустаяЗаписьРозн_" + ИдентификаторКатегории + ",
			|	ПустаяЗаписьОпт_" + ИдентификаторКатегории + " КАК  ПустаяЗаписьОпт_" + ИдентификаторКатегории + ?(ИндексКатегории=МассивКатегорий.ВГраница(), "", ",");
			
		Для Индекс = ИндексКатегории+1 ПО МассивКатегорий.ВГраница() Цикл
			ИДКатВнут = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(МассивКатегорий[Индекс]);
			ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|	0	КАК Розн_" + ИДКатВнут + ", 
			|	0	КАК Опт_" + ИДКатВнут + ",
			|	0	КАК СредЗаработокРозница_" + ИДКатВнут + ", 
			|	0	КАК СредЗаработокОпт_" + ИДКатВнут + ",			
			|	NULL	КАК ПустаяЗаписьРозн_" + ИДКатВнут + ", 
			|	NULL	КАК ПустаяЗаписьОпт_" + ИДКатВнут + ?(Индекс=МассивКатегорий.ВГраница(), "", ",");	
		КонецЦикла;	
		
		Если ИндексКатегории = 0 Тогда
			ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|ПОМЕСТИТЬ РазвернутаяТаблица";
		КонецЕсли;
		
		ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|ИЗ
			|	Таб_" + ИдентификаторКатегории;
			
		Если ИндексКатегории = МассивКатегорий.ВГраница() Тогда
			ТекстЗапросаДоп = ТекстЗапросаДоп + "
			|;";
		КонецЕсли;	
#КонецОбласти 

		ТекстЗапросаПол = ТекстЗапросаПол + "
	    	|	СУММА(ЕСТЬNULL(РазвернутаяТаблица.Розн_" + ИдентификаторКатегории + ", 0)) КАК Розн_" + ИдентификаторКатегории + ",
			|	СУММА(ЕСТЬNULL(РазвернутаяТаблица.Опт_" + ИдентификаторКатегории + ", 0)) КАК Опт_" + ИдентификаторКатегории + ",
			|	СУММА(ЕСТЬNULL(РазвернутаяТаблица.СредЗаработокРозница_" + ИдентификаторКатегории + ", 0)) КАК СредЗаработокРозница_" + ИдентификаторКатегории + ",
			|	СУММА(ЕСТЬNULL(РазвернутаяТаблица.СредЗаработокОпт_" + ИдентификаторКатегории + ", 0)) КАК СредЗаработокОпт_" + ИдентификаторКатегории + ",
			|	МАКСИМУМ(ЕСТЬNULL(РазвернутаяТаблица.ПустаяЗаписьРозн_" + ИдентификаторКатегории + ", ЛОЖЬ)) КАК ПустаяЗаписьРозн_" + ИдентификаторКатегории + ",
			|	МАКСИМУМ(ЕСТЬNULL(РазвернутаяТаблица.ПустаяЗаписьОпт_" + ИдентификаторКатегории + ", ЛОЖЬ)) КАК ПустаяЗаписьОпт_" + ИдентификаторКатегории + ?(ИндексКатегории=МассивКатегорий.ВГраница(), "", ",");
			
	КонецЦикла; 

		
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДоп;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Номенклатура 					КАК Номенклатура,
	|	ВидыНоменклатуры.Номенклатура.ЭтоГруппа			КАК ЭтоГруппа,
	|	Выбор
	|		Когда ВидыНоменклатуры.Номенклатура.ЭтоГруппа Тогда
	|			1
	|       Иначе 0
	|   Конец КАК ИндексКартинки," + ТекстЗапросаПол + "
	|ИЗ
	|	ВидыНоменклатуры КАК ВидыНоменклатуры
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ РазвернутаяТаблица КАК РазвернутаяТаблица
	|ПО ВидыНоменклатуры.Номенклатура = РазвернутаяТаблица.ВидНоменклатуры
	|    
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыНоменклатуры.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.Номенклатура.ЭтоГруппа
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ВидыНоменклатуры.Номенклатура.ЭтоГруппа ИЕРАРХИЯ,
	|	ВидыНоменклатуры.Номенклатура.Наименование Возр";	
					  
	Возврат ТекстЗапроса;
	
	
КонецФункции // ПолучитьТекстЗапросаГруппыНоменклатуры()

&НаСервере
Процедура СоздатьДополнительныеРеквизитыФормы(МассивКатегорий,ОбъектОбработки)

	МассивРеквизитов 			   = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"), 	"ДеревоРезультатов", "Наименование"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭтоГруппа", 		Новый ОписаниеТипов("Булево"), 								"ДеревоРезультатов"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)), "ДеревоРезультатов"));
		
	Для каждого Категория Из МассивКатегорий Цикл
		ИдентификаторКатегории = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(Категория);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Опт_"+ИдентификаторКатегории, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)), "ДеревоРезультатов", "Опт. %"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СредЗаработокРозница_"+ИдентификаторКатегории, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)), "ДеревоРезультатов", "Середня з/п по остаткам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Розн_"+ИдентификаторКатегории, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)), "ДеревоРезультатов", "Розн. %"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СредЗаработокОпт_"+ИдентификаторКатегории, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)), "ДеревоРезультатов", "Новая средня з/п по остаткам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ПустаяЗаписьОпт_"+ИдентификаторКатегории, Новый ОписаниеТипов("Булево"), "ДеревоРезультатов"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ПустаяЗаписьРозн_"+ИдентификаторКатегории, Новый ОписаниеТипов("Булево"), "ДеревоРезультатов"));
	КонецЦикла; 
	
	ИзменитьРеквизиты(МассивРеквизитов);
		
КонецПроцедуры // СоздатьДополнительныеРеквизитыИЭлементыФормы()

&НаСервере
Процедура СоздатьДополнительныеЭлементыФормы(МассивКатегорий, ОбъектОбработки)
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", "Наименование");	
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРезультатов.Номенклатура");
	ПараметрыЭлемента.Вставить("ЦветФона", Новый Цвет(255, 250, 205));
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("Заголовок", "Наименование");
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Истина);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице.Лево);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, Элементы.ДеревоРезультатов);
	
	Элементы.ДеревоРезультатов.КартинкаСтрок				=	БиблиотекаКартинок.ЭлементПапка;
	Элементы.ДеревоРезультатов.ПутьКДаннымКартинкиСтроки	=	"ДеревоРезультатов.ИндексКартинки";
	
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	
	Для каждого Категория Из МассивКатегорий Цикл
		
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		
		ИдентификаторКатегории = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(Категория);
			
		ПараметрыЭлемента = СтруктураПараметровГруппыКолонок("группа_"+ИдентификаторКатегории, Категория, ФиксацияВТаблице.Нет, ЦветФонаЗаголовка);
		ГруппаКолонок 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, Элементы.ДеревоРезультатов);
		
		Подсказка = НСтр("ru=''", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ПараметрыЭлемента = СтруктураПараметровКолонки("Розн_"+ИдентификаторКатегории, Новый Цвет(255, 240, 245), Ложь, Подсказка, ЦветФонаЗаголовка);
		ЭлементДеревоРаспределения	=	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементДеревоРаспределения.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементКоличествоПриИзменении");

		ПараметрыЭлемента = СтруктураПараметровКолонки("СредЗаработокРозница_"+ИдентификаторКатегории, Новый Цвет(255, 240, 245), Истина, ,ЦветФонаЗаголовка);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		// 01,10 на будущие поменять местами
		//
		ПараметрыЭлемента = СтруктураПараметровКолонки("СредЗаработокОпт_"+ИдентификаторКатегории, Новый Цвет(220, 220, 220), Истина, ,ЦветФонаЗаголовка);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		Подсказка = НСтр("ru=''", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ПараметрыЭлемента = СтруктураПараметровКолонки("Опт_"+ИдентификаторКатегории, Новый Цвет(255, 235, 205), Ложь, Подсказка, ЦветФонаЗаголовка);
		ЭлементДеревоРаспределения		= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементДеревоРаспределения.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементКоличествоПриИзменении");
		
		//ПараметрыЭлемента = СтруктураПараметровКолонки("СредЗаработокОпт_"+ИдентификаторКатегории, Новый Цвет(255, 235, 205), Истина, ,ЦветФонаЗаголовка);
		//git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		//		
	КонецЦикла;
	
КонецПроцедуры // СоздатьДополнительныеЭлементыФормы()

// Возвращает заполненную структуру для создания группы колонок дерева распределения.
// 
// Параметры:
//  ИмяЭлемента - Строка - наименование элемента формы.
//  ЗаголовокЭлемента - Строка - заголовок элемента формы.
//  ФиксацияВТаблице - ФиксацияВТаблице - фиксация элемента в таблице.
//
// Возвращаемое значение:
//  Структура - структура параметров нового элемента формы.
//
&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице, ЦветФонаЗаголовка=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("КартинкаШапки", БиблиотекаКартинок.ЗначокПлюс);
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

// Возвращает заполненную структуру для создания колоноки дерева распределения.
//
// Параметры:
//  ИмяЭлемента - Строка - наименование элемента формы.
//  ЦветЭлемента - Цвет - цвет фона элемента.
//
// Возвращаемое значение:
//   Структура - структура параметров нового элемента формы.
//
&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр, Подсказка, ЦветФонаЗаголовка=Неопределено, Шрифт=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);                                        	
	ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ПараметрыЭлемента.Вставить("ПутьКДанным", "ДеревоРезультатов." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 3);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", Ложь);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("Подсказка", Подсказка);
	Если Шрифт <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("Шрифт", Шрифт);
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
		ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;

КонецФункции // СтруктураПараметровКолонки()

&НаСервере
Процедура ЗагрузитьДеревоРезультат(МассивКатегорий)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	Запрос 			 = Новый Запрос;
	Запрос.Текст 	 = ПолучитьТекстЗапросаГруппыНоменклатуры(МассивКатегорий, ОбъектОбработки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());                                                                                                             
	Запрос.УстановитьПараметр("СвойствоЗаработокМенеджераОпт", 	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("ac5acd51-31ad-11e4-80d4-001e676b0175")));  //Основна
	//Запрос.УстановитьПараметр("СвойствоЗаработокМенеджераОпт", 	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("d2762e5d-31af-11e4-8e62-0007e90c5769"))); //авто база
	//Запрос.УстановитьПараметр("СвойствоЗаработокМенеджераОпт", 	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("d2762e5d-31af-11e4-8e62-0007e90c5769")));//Автобей
	Запрос.УстановитьПараметр("СвойствоЗаработокМенеджераРозница", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("904cd00e-c6ba-11e2-b7da-001e673c80fc")));
	
	Для Каждого Категория ИЗ МассивКатегорий Цикл
		ИдентификаторКатегории = ОбъектОбработки.ПолучитьСтрокуИдентификатораСсылки(Категория);
		Запрос.УстановитьПараметр("КПП_" + ИдентификаторКатегории, Категория);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");

	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	ДеревоПриемник	 = РеквизитФормыВЗначение("ДеревоРезультатов", Тип("ДеревоЗначений"));
	
	ЗначениеВРеквизитФормы(ДеревоПриемник,"ДеревоРезультатов");

	ДеревоПриемник.Строки.Очистить();
	
	РазобратьДеревоНоменклатуры(РезультатЗапроса, ДеревоПриемник);
	
	ЗначениеВРеквизитФормы(ДеревоПриемник, "ДеревоРезультатов");	
	
КонецПроцедуры // ЗагрузитьДеревоРезультат()

&НаСервере
Процедура РазобратьДеревоНоменклатуры(ДеревоИсточник, ДеревоПриемник)
		
	Для каждого СтрокаДерева Из ДеревоИсточник.Строки Цикл
		
	    НоваяСтрока = ДеревоПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			НоваяСтрока.Номенклатура = СтрокаДерева.Номенклатура;			
		КонецЕсли;
		
		РазобратьДеревоНоменклатуры(СтрокаДерева, НоваяСтрока);
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоРезультатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатуры = ТекущиеДанные.Номенклатура;
	ИмяКолонки		= Элемент.Имя;
	Значение		= ТекущиеДанные[Элемент.Имя];
	ТекущиеДанные["ПустаяЗапись"+ИмяКолонки]=Ложь;

	ЗаписатьДанныеВРегистр(ИмяКолонки, ВидНоменклатуры, Значение); 
	
	Если Найти(ИмяКолонки, "Розн_") <> 0 Тогда
		СреднийЗаработок = ПересчитатьСредЗаработок(ВидНоменклатуры, ИмяКолонки);
		ИмяКолонкиСредЗаработок = СтрЗаменить(ИмяКолонки, "Розн_", "СредЗаработокОпт_");
		ТекущиеДанные[ИмяКолонкиСредЗаработок] = СреднийЗаработок;
		//ПересчитатьРекурсивно(ТекущиеДанные.ПолучитьИдентификатор(), ИмяКолонки, ТекущиеДанные[ИмяКолонки]);	
	КонецЕсли;

	//01.10 на будущие
	////Если Найти(ИмяКолонки, "Розн_") <> 0 Тогда
	////	СреднийЗаработок	=	ПересчитатьСредЗаработок(ВидНоменклатуры,ИмяКолонки);
	////	ИмяКолонкиСредЗаработок = СтрЗаменить(ИмяКолонки,"Розн_","СредЗаработокРозница_");
	////	ТекущиеДанные[ИмяКолонкиСредЗаработок]  = СреднийЗаработок;
	////ИначеЕсли Найти(ИмяКолонки, "Опт_") <> 0 Тогда
	////	СреднийЗаработок	=	ПересчитатьСредЗаработок(ВидНоменклатуры,ИмяКолонки);
	////	ИмяКолонкиСредЗаработок = СтрЗаменить(ИмяКолонки,"Опт_","СредЗаработокОпт_");
	////	ТекущиеДанные[ИмяКолонкиСредЗаработок]  = СреднийЗаработок;
	////КонецЕсли;
	
	
КонецПроцедуры

//&НаСервере
//Процедура ПересчитатьРекурсивно(Идентификатор, ИмяКолонки, ПроцентГруппа = 0)
//	
//	//СтрокаДерева = ДеревоРезультатов.НайтиПоИдентификатору(Идентификатор);
//	//
//	//ВидНоменклатуры = СтрокаДерева.Номенклатура;
//	//Если ВидНоменклатуры.ЭтоГруппа = Ложь Тогда
//	//	СреднийЗаработок = ПересчитатьСредЗаработок(ВидНоменклатуры, ИмяКолонки, ПроцентГруппа);
//	//	ИмяКолонкиСредЗаработок = СтрЗаменить(ИмяКолонки, "Розн_", "СредЗаработокОпт_");
//	//	СтрокаДерева[ИмяКолонкиСредЗаработок] = СреднийЗаработок;
//	//Иначе
//	//	Для каждого СтрокаТекущиеДанные Из СтрокаДерева.ПолучитьЭлементы() Цикл
//	//		ВложенныйВидНоменклатуры = СтрокаТекущиеДанные.Номенклатура;
//	//		Если ВложенныйВидНоменклатуры.ЭтоГруппа = Истина И СтрокаТекущиеДанные[ИмяКолонки] <> 0 Тогда
//	//			ПроцентПередачи = СтрокаТекущиеДанные[ИмяКолонки];
//	//		Иначе
//	//			ПроцентПередачи	= ПроцентГруппа;
//	//		КонецЕсли;
//	//		ПересчитатьРекурсивно(СтрокаТекущиеДанные.ПолучитьИдентификатор(), ИмяКолонки, ПроцентПередачи);
//	//	КонецЦикла; 
//	//КонецЕсли;

//	
//КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(знач ИмяКолонки, знач ВидНоменклатуры, знач Значение)
	УстановитьПривилегированныйРежим(Истина);
	РеквизитФормыВЗначение("Объект").ЗаписатьДанныеВРегистр(ИмяКолонки, ВидНоменклатуры, Значение);
КонецПроцедуры // ЗаписатьДанныеВРегистр()

&НаСервере
Функция ПересчитатьСредЗаработок(знач ВидНоменклатуры, знач ИмяКолонки)
	УстановитьПривилегированныйРежим(Истина);
	Возврат РеквизитФормыВЗначение("Объект").ПересчитатьСредЗаработок(ВидНоменклатуры, ИмяКолонки);
КонецФункции // ПересчитатьСредЗаработок()


&НаКлиенте
Процедура УстановитьПустуюЗапись(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРезультатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоРезультатов.ТекущийЭлемент.Имя = "Наименование" Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Элементы.ДеревоРезультатов.ТекущийЭлемент.Имя,13) = "СредЗаработок" Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатуры = ТекущиеДанные.Номенклатура;
	ИмяКолонки		= Элементы.ДеревоРезультатов.ТекущийЭлемент.Имя;
	ТекущиеДанные[ИмяКолонки] = 0;
	ТекущиеДанные["ПустаяЗапись"+ИмяКолонки]=Истина;
	Значение		= Неопределено;
	
	ЗаписатьДанныеВРегистр(ИмяКолонки, ВидНоменклатуры, Значение);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление(МассивКатегорий)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Для каждого Категория Из МассивКатегорий Цикл
		
		ИдентификаторКатегории = ОбработкаОбъект.ПолучитьСтрокуИдентификатораСсылки(Категория);
		
		// Розн
		ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;

		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Розн_" + ИдентификаторКатегории);
		ОформляемоеПоле.Использование 	= Истина;
		
		НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРезультатов.ПустаяЗаписьРозн_" + ИдентификаторКатегории);
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Истина;
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = "-//-";
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = Новый Цвет(128, 128, 128);
		
		ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;

		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();            		
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Розн_" + ИдентификаторКатегории);
		ОформляемоеПоле.Использование 	= Истина;
		
		НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРезультатов.ЭтоГруппа");
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Истина;
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = Истина;
		
		
		// Опт
		ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;

		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Опт_" + ИдентификаторКатегории);
		ОформляемоеПоле.Использование 	= Истина;
		
		НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРезультатов.ПустаяЗаписьОпт_" + ИдентификаторКатегории);
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Истина;
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = "-//-";
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = Новый Цвет(128, 128, 128);
		
		ЭлементУсловногоОформления 				 = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;

		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("Опт_" + ИдентификаторКатегории);
		ОформляемоеПоле.Использование 	= Истина;
		
		НовыйЭлементОтбора 				  = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРезультатов.ЭтоГруппа");
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Истина;
		
		НовыйЭлементОформления 				 = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
		НовыйЭлементОформления.Использование = Истина;
		НовыйЭлементОформления.Значение      = Истина;	
		
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");	
	МассивКатегорий	= ОбъектОбработки.ПолучитьМассивКатегорий();
	
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	ЗагрузитьДеревоРезультат(МассивКатегорий);
	
КонецПроцедуры // ОбновитьНаСервере()


#КонецОбласти