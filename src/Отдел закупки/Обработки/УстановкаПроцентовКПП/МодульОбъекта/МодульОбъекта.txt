#Область ИнтерфейсАвтоматическихТестов
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаписьВРегистрОпт", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаписьВРегистрРозн", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	Возврат СписокТестов;
	
КонецФункции

Процедура Тест_ПроверитьЗаписьВРегистрОпт(Параметр) Экспорт
	Категория	= Справочники.КоефициентПриоритетностиНоменклатуры.СоздатьЭлемент();
	Категория.Наименование	=	"КПП";
	Категория.Записать();
	ИдентификаторКатегории	= Категория.Ссылка.УникальныйИдентификатор();
	
	ВидНоменклатурыКПП	= Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	ВидНоменклатурыКПП.Наименование	= "КПП_Вид номенлатуры";
	ВидНоменклатурыКПП.Записать();
	
	ИмяКолонки		=	"Опт_"+ИдентификаторКатегории;
	Значение		= 	100;
	
	ЗаписатьДанныеВРегистр(ИмяКолонки,ВидНоменклатурыКПП.Ссылка,Значение);
	
	
	ЗначениеРегистра	=	ПолучитьЗаписьРегистра(ВидНоменклатурыКПП,Категория,"Опт");
	СообщениеОбОшибке	= НСтр("ru = 'Не удалось записать записьв регистр КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыОпт'");
	ЮнитТест.ПроверитьРавенство(ЗначениеРегистра,	Значение, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура Тест_ПроверитьЗаписьВРегистрРозн(Параметр) Экспорт
	Категория	= Справочники.КоефициентПриоритетностиНоменклатуры.СоздатьЭлемент();
	Категория.Наименование	=	"КПП2";
	Категория.Записать();
	ИдентификаторКатегории	= Категория.Ссылка.УникальныйИдентификатор();
	
	ВидНоменклатурыКПП	= Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	ВидНоменклатурыКПП.Наименование	= "КПП_Вид номенлатуры";
	ВидНоменклатурыКПП.Записать();
	
	ИмяКолонки		=	"Розн_"+ИдентификаторКатегории;
	Значение		= 	10;
	
	ЗаписатьДанныеВРегистр(ИмяКолонки,ВидНоменклатурыКПП.Ссылка,Значение);
	
	
	ЗначениеРегистра	=	ПолучитьЗаписьРегистра(ВидНоменклатурыКПП,Категория,"Розница");
	СообщениеОбОшибке	= НСтр("ru = 'Не удалось записать записьв регистр КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница'");
	ЮнитТест.ПроверитьРавенство(ЗначениеРегистра,	Значение, СообщениеОбОшибке);
КонецПроцедуры

Функция ПолучитьЗаписьРегистра(ВидНоменклатуры,Категория,ВидКПП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Значение
	               |ИЗ
	               |	РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатуры"+ВидКПП+".СрезПоследних(
	               |			,
	               |			ВидНоменклатуры = &ВидНоменклатури
	               |				И КПП = &КПП)";
				   
	Запрос.УстановитьПараметр("ВидНоменклатури",ВидНоменклатуры.Ссылка);
	Запрос.УстановитьПараметр("КПП",			Категория.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат ?(Выборка.Следующий(),Выборка.Значение,0);

КонецФункции // ПолучитьЗаписьРегистра(ВидНоменклатурыКПП,Категория,ВидКПП)

#КонецОбласти

#Область ПрограмныйИнтерфейс

Функция ПолучитьМассивКатегорий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаМассивКатегорий();
	 
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Категория");
КонецФункции // ПолучитьМассивКатегорий()

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт
		
	Описание = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
	Если Не Описание.СодержитТип(ТипЗнч(Ссылка)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения ссылки представления справочника. Обратитесь в службу поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	
	Возврат СтроковыйИдентификатор;
	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

Процедура ЗаписатьДанныеВРегистр(ИмяКолонки, ВидНоменклатуры, Значение) Экспорт
	
	НаборЗаписей    		= Неопределено;
	СтрокаИдентификатора    = "";
	Период 					= ТекущаяДатаСеанса();
	
	Если Найти(ИмяКолонки, "Опт_") <> 0 Тогда
		НаборЗаписей 		 = РегистрыСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыОпт.СоздатьНаборЗаписей();
		СтрокаИдентификатора = УникальныйИдентификаторИзСтроки("Опт_", ИмяКолонки);
	ИначеЕсли Найти(ИмяКолонки, "Розн_") <> 0 Тогда
		НаборЗаписей 		 = РегистрыСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница.СоздатьНаборЗаписей();
		СтрокаИдентификатора = УникальныйИдентификаторИзСтроки("Розн_", ИмяКолонки);
	КонецЕсли;
	
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КПП = Справочники.КоефициентПриоритетностиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора)); 
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
	НаборЗаписей.Отбор.КПП.Установить(КПП);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.ВидНоменклатуры  = ВидНоменклатуры;
	Запись.КПП				= КПП;
	Запись.Значение			= ?(Значение=Неопределено, 0,Значение);
	Запись.ПустаяЗапись		= ?(Значение=Неопределено, Истина,Ложь);
	Запись.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

Функция ПересчитатьСредЗаработок(ВидНоменклатуры, ИмяКолонки) Экспорт
	Значения = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРачетаСредЗаработка();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	//Запрос.УстановитьПараметр("ПроцентГруппы", ПроцентГруппы);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВалютаРегламентированогоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));

	Если Найти(ИмяКолонки, "Опт_") <> 0 Тогда
		СтрокаИдентификатора = УникальныйИдентификаторИзСтроки("Опт_", ИмяКолонки);
	ИначеЕсли Найти(ИмяКолонки, "Розн_") <> 0 Тогда
		СтрокаИдентификатора = УникальныйИдентификаторИзСтроки("Розн_", ИмяКолонки);
	КонецЕсли;
	Запрос.УстановитьПараметр("КПП", Справочники.КоефициентПриоритетностиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора)));  
	
	Выборка =  Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Значения = Выборка.СредЗаработок_Розница;
		//на будущие 1,10
		////Если Найти(ИмяКолонки, "Опт_") <> 0 Тогда
		////	Значения = Выборка.СредЗаработок_Опт;
		////ИначеЕсли Найти(ИмяКолонки, "Розн_") <> 0 Тогда
		////	Значения = Выборка.СредЗаработок_Розница;
		////КонецЕсли;	
	КонецЦикла;
	
	Возврат Значения;		
КонецФункции


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаМассивКатегорий()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Категория
	               |ИЗ
	               |	Справочник.КоефициентПриоритетностиНоменклатуры
	               |ГДЕ
	               |	НЕ ПометкаУдаления";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаМассивКатегорий()

Функция ПолучитьТекстЗапросаРачетаСредЗаработка()
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КПП_Розница_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних.Номенклатура
	               |ПОМЕСТИТЬ СпрНоменклатура
	               |ИЗ
	               |	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(
	               |			&ТекущаяДата,
				   |			Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	               |				И Значение = &КПП) КАК КПП_Розница_ЗначениеКоефициентаПриоритетностиПродажСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Модуль_ДоступныеСклады.Склад
	               |ПОМЕСТИТЬ КешСклад
	               |ИЗ
	               |	РегистрСведений.Модуль_ДоступныеСклады КАК Модуль_ДоступныеСклады
	               |ГДЕ
	               |	Модуль_ДоступныеСклады.Основной
	               |	И НЕ Модуль_ДоступныеСклады.Склад.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Количество
	               |ПОМЕСТИТЬ КешНоменклатураОстатки
	               |ИЗ
	               |	РегистрНакопления.ТоварыОрганизаций.Остатки(
	               |			&ТекущаяДата,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						СпрНоменклатура.Номенклатура
	               |					ИЗ
	               |						СпрНоменклатура КАК СпрНоменклатура)
	               |				И Склад В
	               |					(ВЫБРАТЬ
	               |						КешСклад.Склад
	               |					ИЗ
	               |						КешСклад)) КАК ТоварыОрганизацийОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены.ВалютаЦены КАК Валюта
	               |ПОМЕСТИТЬ ТекущиеЦены
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&ТекущаяДата,
	               |			ВидЦены = &ВидЦены
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						КешНоменклатураОстатки.Номенклатура
	               |					ИЗ
	               |						КешНоменклатураОстатки)) КАК ЦеныНоменклатурыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	               |	КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Курс
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеЦены.Номенклатура КАК Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ТекущиеЦены.Валюта = &ВалютаРегламентированогоУчета
	               |			ТОГДА ТекущиеЦены.Цена
	               |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1))
	               |	КОНЕЦ КАК ЦенаВВалютеРеглУчета
	               |ПОМЕСТИТЬ ЦенаВРегламентированомУчете
	               |ИЗ
	               |	ТекущиеЦены КАК ТекущиеЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦены
	               |		ПО ТекущиеЦены.Валюта = КурсыВалютЦены.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	               |		ПО (КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	               |		ПО (КурсыВалютРегл.Валюта = &ВалютаРегламентированогоУчета)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешНоменклатураОстатки.Номенклатура.ВидНоменклатуры,
	               |	СУММА(КешНоменклатураОстатки.Количество * ЦенаВРегламентированомУчете.ЦенаВВалютеРеглУчета) / СУММА(КешНоменклатураОстатки.Количество) КАК ОбщееКоличество
	               |ПОМЕСТИТЬ СредняЦенаТовара
	               |ИЗ
	               |	КешНоменклатураОстатки КАК КешНоменклатураОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦенаВРегламентированомУчете КАК ЦенаВРегламентированомУчете
	               |		ПО КешНоменклатураОстатки.Номенклатура = ЦенаВРегламентированомУчете.Номенклатура,
	               |	РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница.СрезПоследних(
	               |			&ТекущаяДата,
	               |			ВидНоменклатуры = &ВидНоменклатуры
	               |				И КПП = &КПП) КАК КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозницаСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КешНоменклатураОстатки.Номенклатура.ВидНоменклатуры,
	               |	КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозницаСрезПоследних.Значение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СредняЦенаТовара.НоменклатураВидНоменклатуры,
				   |  
	               |	0.01 * СредняЦенаТовара.ОбщееКоличество * 	ВЫБОР
				   |													Когда IsNull(КПП_ВидНоменклатура.ПустаяЗапись,ЛОЖЬ) 
				   |														ТОГДА 0
				   |                                                    ИНАЧЕ IsNull(КПП_ВидНоменклатура.Значение, 0) 
				   |												 КОНЕЦ  КАК СредЗаработок_Розница
	               |ИЗ
	               |	СредняЦенаТовара КАК СредняЦенаТовара
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница.СрезПоследних(
	               |				&ТекущаяДата,
	               |				ВидНоменклатуры = &ВидНоменклатуры
	               |					И КПП = &КПП) КАК КПП_ВидНоменклатура
	               |		ПО СредняЦенаТовара.НоменклатураВидНоменклатуры = КПП_ВидНоменклатура.ВидНоменклатуры";
	
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаРачетаСредЗаработка()



#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.6";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Установка процентов КПП");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Установка процентов КПП [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Установка процентов КПП [" + Версия + "]", "ОМ", "ОткрытиеФормы", Ложь, "ОМ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти