
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("Тест_ПроверитьПолучитьСтруктуруПараметровФормыКонструкторФормул");
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьПолучитьСтруктуруПараметровФормыКонструкторФормул() Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыКонструкторФормул();
	ЮнитТест.ПроверитьТип(СтруктураПараметров, Тип("Структура"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Свойство("Формула"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Свойство("Заголовок"));
	ЮнитТест.ПроверитьТип(СтруктураПараметров.Заголовок, Тип("Строка"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Свойство("Операторы"));
	ЮнитТест.ПроверитьТип(СтруктураПараметров.Операторы, Тип("Строка"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Количество() = 3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Привязка = 1;
	ИскатьПо = "Наименование";
	ВариантыПривязки = ПолучитьЗначениеВариантПривязкиПоЧислу(Привязка);
	
	ПредыдущаяКоманда 	= "ЗакладкаНастройки";
	Элементы.ЗакладкаНастройки.Пометка = Истина;
	
	АльпыОбъект = РеквизитФормыВЗначение("Объект");
	АльпыОбъект.ПостроитьДеревоОператоров(АдресХранилищаДереваОператоров, УникальныйИдентификатор);
	
	ПараметрыИсточникаДанных = Новый Структура("Имя, СтрокаСоединения, ТипИсточникаДанных", "ИсточникДанных", "", "Local");
	ПараметрыНабораДанных    = Новый Структура("Имя, ИмяОбъекта, ИсточникДанных, ТипНабораДанных, Отбор, ВложенныеНаборыДанных, Поля", "НаборДанных", "ТаблицаЗначений", "ИсточникДанных", Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), , Новый Массив, Новый Массив);	
	Для Каждого Колонка ИЗ РезультатАнализа.Выгрузить().Колонки Цикл
		ПараметрыНабораДанных.Поля.Добавить(Новый Структура("ПутьКДанным, Заголовок, Поле, ТипЗначения", Колонка.Имя, Колонка.Заголовок, Колонка.Имя, Колонка.ТипЗначения));
	КонецЦикла;
	
	АльпыОбъект.СоздатьСхемуКомпоновкиДанных(ПараметрыИсточникаДанных, ПараметрыНабораДанных, Новый Массив, АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, УникальныйИдентификатор); 
	ГруппировкаКомпоновкиДанных = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	
	Для Каждого Колонка ИЗ РезультатАнализа.Выгрузить().Колонки Цикл 
		ВыбранноеПоле = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Заголовок 	= Колонка.Имя;
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Колонка.Имя);
	КонецЦикла;
	
	ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ИнициализироватьОтборы();
	Если НЕ Соглашение.Пустая() Тогда
		ЗагрузитьМетаданныеОбъектов();	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДанныеОтбора(КомпоновщикНастроек);	
	ОбновитьЗаголовокALPS();
	ПодключитьОбработчикОжидания("ПроверитьНаличиеНовойВерсииПрайса", 300);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Перем ТекущаяСтрока, ТекущиеДанные;
	
	Если ИмяСобытия	= "Запись_Номенклатура"	Тогда
		Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
			Если Источник = ТекущиеДанные.Номенклатура Тогда
				Возврат;
			КонецЕсли;
			Если Вопрос(НСтр("ru='Вы действительно хотите выполнить привязку номенклатуры?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			ПривязатьНаСервере(Источник, ТекущаяСтрока, Привязка);
			ПривязатьКросПривязкиКлиент(ТекущиеДанные.Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
			Если НЕ ПустаяСтрока(ALPS_АдресСтруктурыЗаполениния) Тогда
				СтруктураЗаполнения = ПолучитьИзВременногоХранилища(ALPS_АдресСтруктурыЗаполениния);
				Если ТипЗнч(СтруктураЗаполнения) = Тип("Структура") Тогда
					Если СтруктураЗаполнения.Свойство("ДополнительныеСведения") Тогда
						ВыполнитьЗаписьДополнительныхСведенийНоменклатуры(Источник, СтруктураЗаполнения.ДополнительныеСведения);	
					КонецЕсли;
					УдалитьИзВременногоХранилища(ALPS_АдресСтруктурыЗаполениния);
					ALPS_АдресСтруктурыЗаполениния = "";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Состояние("ВНИМАНИЕ! Номенклатура создана, привязка не записана.", , , БиблиотекаКартинок.Ошибка32);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗакрытиеФормыКонструкторФормул"	Тогда
		
		ТекущиеДанные = Элементы.ПрофильАнализа.ТекущиеДанные;
		ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
		Если ТекущиеДанные <> Неопределено И ТекущийЭлемент <> Неопределено И ТекущийЭлемент.Имя <> "ФормулаИсключенияСтрок" Тогда
			Если НЕ ТекущиеДанные.РедактироватьЗапрещено Тогда
				ТекущиеДанные.Выражение = Параметр;
				ОбновитьМодифицированостьФормы(Истина);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ЗакладкаНастройки(Команда) 	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
	Элементы[ПредыдущаяКоманда].Пометка 	= Ложь;
	Элементы.ЗакладкаНастройки.Пометка 		= Истина;	
	ПредыдущаяКоманда 	= "ЗакладкаНастройки";	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаАнализ(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаАнализ;
	Элементы[ПредыдущаяКоманда].Пометка 	= Ложь;
	Элементы.ЗакладкаАнализ.Пометка 		= Истина;	
	ПредыдущаяКоманда 	= "ЗакладкаАнализ";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаСтатистика(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтатистика;
	Элементы[ПредыдущаяКоманда].Пометка 	= Ложь;
	Элементы.ЗакладкаСтатистика.Пометка 	= Истина;	
	ПредыдущаяКоманда 	= "ЗакладкаСтатистика";
КонецПроцедуры



&НаКлиенте
Процедура СохранитьШаблонНастройки(Команда)
	СохранитьШаблонНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидыНоменклатуры(Команда)
	Если НЕ Соглашение.Пустая() Тогда		
		Результат = ОткрытьФормуМодально("ВнешняяОбработка." + ПолучитьБиблиотекуФорм() + ".Форма.ФормаВыбора", Новый Структура("Ссылка, ТипЗначения", Соглашение, "СправочникСсылка.ВидыНоменклатуры"), ЭтаФорма);
		Если НЕ Результат = Неопределено Тогда
			Элементы.ЗадатьВидыНоменклатуры.Пометка = Результат;
			СохранитьШаблонНастройкиСервер();
		КонецЕсли;                                                               
	Иначе
		Сообщить(НСтр("ru='Соглашение не выбрано!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	РезультатВыбора = ОткрытьФормуМодально("Справочник.СоглашенияСПоставщиками.ФормаВыбора");
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		ЗагрузитьШаблонНастройкиСервер(РезультатВыбора);
		ОбновитьМодифицированостьФормы(Истина);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеНастройки(Команда)
	Если Соглашение.Пустая() Тогда
		Сообщить(НСтр("ru='Соглашение не выбрано!'"));	
	Иначе
		ОткрытьФормуМодально("ВнешняяОбработка.АнализПрайсЛистов.Форма.ПрочиеНастройки", Новый Структура("Соглашение", Соглашение));
	КонецЕсли; 
КонецПроцедуры



&НаКлиенте
Процедура Прочитать(Команда)
	ПрочитатьСервер();
	ЗакладкаАнализ(Неопределено);
КонецПроцедуры
 
&НаКлиенте
Процедура ПрочитатьФайлИзДиска(Команда)
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = НСтр("ru='Выберите файл загрузки в формате (*.xls, *.xlsx, *.xml, *.csv)'");
		Диалог.ПолноеИмяФайла = "";
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПредварительныйПросмотр = Истина;
		Диалог.Фильтр = "Формат (*.xls;*.xlsx;*.xml;*.csv)|*.xls;*.xlsx;*.xml;*.csv|"; 	
		Если Диалог.Выбрать() Тогда
			АдресВременногоХранилища = "";
			ФайлДиалога = Новый Файл(Диалог.ПолноеИмяФайла);
			Если ФайлДиалога.Существует() Тогда
				ПоместитьФайл(АдресВременногоХранилища, ФайлДиалога.ПолноеИмя, , Ложь, УникальныйИдентификатор);
		    	ПрочитатьФайлИзДискаСервер(Соглашение, Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения", 
																			ФайлДиалога.ИмяБезРасширения, 
																			СтрЗаменить(ФайлДиалога.Расширение, ".", ""), 
																			ФайлДиалога.ПолучитьВремяИзменения(), 
																			УниверсальноеВремя(ТекущаяДата())), 
																			АдресВременногоХранилища);
				ЗакладкаАнализ(Неопределено);
				ОбновитьЗаголовокALPS();	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПоместитьФайл(АдресВременногоХранилища, , "", Истина, УникальныйИдентификатор) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлИзСоглашения(Команда)
	Если НЕ Соглашение.Пустая() Тогда
		ПрочитатьФайлИзСоглашенияСервер(Соглашение);
		ЗакладкаАнализ(Неопределено);
	КонецЕсли;
	ОбновитьЗаголовокALPS();
КонецПроцедуры



&НаКлиенте
Процедура РегистрацияЦен(Команда)
	
	Если ALPS_ПерезаписыватьРегистрациюЦенПоставщиков Тогда
		ФормаДокумента = ПолучитьФорму("Документ.РегистрацияЦенНоменклатурыПоставщика.ФормаОбъекта", ПолучитьКлючСсылкуРегистрацииЦенПоставщика(Соглашение), , Новый УникальныйИдентификатор);	
	Иначе
		ФормаДокумента = ПолучитьФорму("Документ.РегистрацияЦенНоменклатурыПоставщика.ФормаОбъекта", , , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	СтруктураЗаполнения = ПолучитьПараметрыРегистрацииЦенПоставщика();
	ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, СтруктураЗаполнения);
	
	Если СтруктураЗаполнения.Свойство("СписокПозиций") Тогда
		ФормаДокумента.Объект.Товары.Очистить();
		Для Каждого Строка Из СтруктураЗаполнения.СписокПозиций Цикл
			НоваяСтрока = ФормаДокумента.Объект.Товары.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Значение);  	
		КонецЦикла;
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПривязокПоКоду(Команда)
	ВыполнитьПоискПривязокУмолч("Код");
КонецПроцедуры

&НаКлиенте
Процедура ПоискПривязокПоАртикулу(Команда)
	ВыполнитьПоискПривязокУмолч("Артикул");
КонецПроцедуры

&НаКлиенте
Процедура ПоискПривязокПоНаименованию(Команда)
	ВыполнитьПоискПривязокУмолч("Наименование");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтрихкоды(Команда)
	ЗагрузитьШтрихкодыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьАктуальность(Команда)
	
	ОбновитьАктуальностьНаСервере();
	
КонецПроцедуры  // ОбновитьАктуальность()

&НаКлиенте
Процедура СледующаяСтраница(Команда)
	
	СтраницаТекущая = СтраницаТекущая + 1;
	Если СтраницаТекущая > СтраницыВсего Тогда
		СтраницаТекущая = СтраницыВсего;
		Возврат;
	КонецЕсли;
	ЗагрузитьНоменклатуруСтраницы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	
	СтраницаТекущая = СтраницаТекущая - 1;
	Если СтраницаТекущая = 0 Тогда
		СтраницаТекущая = 1;
		Возврат;
	КонецЕсли;
	ЗагрузитьНоменклатуруСтраницы();
	
КонецПроцедуры



&НаКлиенте
Процедура ПОН_УстановитьСоответствие(Команда)
	ПривязатьНаКлиенте(Привязка);
КонецПроцедуры

&НаКлиенте
Процедура ПОН_ОтменитьСоответствие(Команда)
	ТСтрока  = Элементы.ПохожиеОбъектыНоменклатура.ТекущаяСтрока;
	ТДанные  = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	Если НЕ ТДанные = Неопределено Тогда
		Если НЕ ТДанные.НомПоставщика.Пустая() Тогда
			СтрокаДерева 	= ПохожиеОбъектыНоменклатура.НайтиПоИдентификатору(ТСтрока);
			Родитель		= СтрокаДерева.ПолучитьРодителя();
			КоллекцияДерева = СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();
			КоллекцияДерева.Удалить(СтрокаДерева);
			ТекущиеДанные = Элементы.РезультатАнализа.ТекущиеДанные;
			УдалитьПривязкуСервер(ТДанные.НомПоставщика);
			Если НЕ Родитель = Неопределено Тогда
				Родитель.ЭтоПривязано = Ложь;
				Для каждого ЭлементРодитель Из Родитель.ПолучитьЭлементы() Цикл
					Если ЭлементРодитель.ЭтоПривязано Тогда
						Родитель.ЭтоПривязано = Истина;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПОН_КлонироватьИУстановитьСоответствие(Команда)
	РА_ТекущиеДанные  = Элементы.РезультатАнализа.ТекущиеДанные;
	ПОН_ТекущиеДанные = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	Если РА_ТекущиеДанные <> Неопределено И ПОН_ТекущиеДанные <> Неопределено Тогда
		Номенклатура = ПОН_ТекущиеДанные.Номенклатура;
		Если Номенклатура.Пустая() ИЛИ НЕ ПОН_ТекущиеДанные.НомПоставщика.Пустая() Тогда
			Состояние("Клонировать можно только номенклатуру (позиция с надписью <Открыть карточку>)", , , БиблиотекаКартинок.Ошибка32);
			Возврат;
		КонецЕсли;
		ФормаСправочника = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("ЗначениеКопирования", Номенклатура), ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаСправочника.Объект.Артикул 		= РА_ТекущиеДанные.Артикул;
		ФормаСправочника.ШтрихКод	 			= РА_ТекущиеДанные.Штрихкод;
		ФормаСправочника.Объект.ФайлКартинки 	= Неопределено;
		ФормаСправочника.Объект.ЦеноваяГруппа 	= Неопределено;
		ФормаСправочника.ОткрытьМодально();
	Иначе
		Состояние("ТекущиеДанные в нижнем или верхнем поле не определены", , , БиблиотекаКартинок.Ошибка32);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПОН_ИзменитьСоответствие(Команда)
	Перем РА_ТекущаяСтрока, РА_ТекущиеДанные, ПОН_ТекущаяСтрока, ПОН_ТекущиеДанные;
	
	Если ПроверитьВыделениеСтроки("РезультатАнализа", РА_ТекущаяСтрока, РА_ТекущиеДанные) И НЕ РА_ТекущиеДанные.Номенклатура.Пустая() Тогда
		Если ПроверитьВыделениеСтроки("ПохожиеОбъектыНоменклатура", ПОН_ТекущаяСтрока, ПОН_ТекущиеДанные) Тогда
			Номенклатура = ПОН_ТекущиеДанные.Номенклатура;
			Если Номенклатура.Пустая() ИЛИ НЕ ПОН_ТекущиеДанные.НомПоставщика.Пустая() Тогда
				Сообщить(НСтр("ru='Перепривязывать можно только к номенклатуре, а не к позиции прайса или номенклатуре поставщика'"));
				Возврат;
			КонецЕсли;			
		Иначе
			Сообщить(НСтр("ru='ТекущиеДанные в нижнем поле не определены'"));
			Возврат;	
		КонецЕсли;
	Иначе
		Сообщить(НСтр("ru='Перепривязывать можно только уже привязаную номенклатуру к прайсу'"));
		Возврат;
	КонецЕсли;
	
	ПривязатьНаСервере(Номенклатура, РА_ТекущаяСтрока, Привязка, Истина);
	ПривязатьКросПривязкиКлиент(Номенклатура, РА_ТекущиеДанные.Код, РА_ТекущиеДанные.Артикул);
	
КонецПроцедуры

&НаКлиенте
Процедура ПОН_Google(Команда)
	ТДанные  = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	ТЭлемент = Элементы.ПохожиеОбъектыНоменклатура.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		ЗапуститьПриложение("http://google.com.ua/search?hl=uk&q=" + СтрЗаменить(ТДанные[СтрЗаменить(ТЭлемент.Имя, "ПОН_", "")], Символы.ПС, " "));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПОН_Rozetka(Команда)
	ТДанные  = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	ТЭлемент = Элементы.ПохожиеОбъектыНоменклатура.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		ЗапуститьПриложение("http://rozetka.com.ua/search/?text=" + СтрЗаменить(ТДанные[СтрЗаменить(ТЭлемент.Имя, "ПОН_", "")], Символы.ПС, " "));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПОН_Hotline(Команда)
	ТДанные  = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	ТЭлемент = Элементы.ПохожиеОбъектыНоменклатура.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		СсылкаНаПриложения 	= СтрЗаменить(ТДанные[СтрЗаменить(ТЭлемент.Имя, "ПОН_", "")], Символы.ПС, " ");
		СсылкаНаСайт		= "http://hotline.ua/sr/?q=" + КодироватьСтрокуСервер(СсылкаНаПриложения);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура КС_УстановитьФлажки(Команда)
	ОбработатьДействиеСФлажкамиТаблицы("КлючевыеСлова", "Ключ", Истина);
КонецПроцедуры

&НаКлиенте
Процедура КС_СнятьФлажки(Команда)
	ОбработатьДействиеСФлажкамиТаблицы("КлючевыеСлова", "Ключ", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КС_Google(Команда)
	ТДанные  = Элементы.КлючевыеСлова.ТекущиеДанные;
	ТЭлемент = Элементы.КлючевыеСлова.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		ЗапуститьПриложение("http://google.com.ua/search?hl=uk&q=" + ТДанные.Слово);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КС_Rozetka(Команда)
	ТДанные  = Элементы.КлючевыеСлова.ТекущиеДанные;
	ТЭлемент = Элементы.КлючевыеСлова.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		ЗапуститьПриложение("http://rozetka.com.ua/search/?text=" + ТДанные.Слово);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КС_Hotline(Команда)
	
	ТДанные  = Элементы.КлючевыеСлова.ТекущиеДанные;
	ТЭлемент = Элементы.КлючевыеСлова.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		СсылкаНаПриложения 	=	ТДанные.Слово;
		СсылкаНаСайт		=	"http://hotline.ua/sr/?q=" + КодироватьСтрокуСервер(СсылкаНаПриложения);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура РА_УстановитьСоответствие(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент; 
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		ЭлементыДерева = ПохожиеОбъектыНоменклатура.ПолучитьЭлементы();
		Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			Сообщить("Жаль, но чтоб сделать новую привязку старую нужно удалить");
		ИначеЕсли ЭлементыДерева.Количество() = 2 Тогда
			ПривязатьНаСервере(ЭлементыДерева[1].Номенклатура, ТекущаяСтрока, Привязка);
			ПривязатьКросПривязкиКлиент(ЭлементыДерева[1].Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
		ИначеЕсли ЭлементыДерева.Количество() = 1 Тогда
			Сообщить("Жаль, но ни одного соответствия не найдено");	
		Иначе
			Сообщить("Жаль, но соответствий больше одного, используйте нижнее поле");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РА_ОтменитьСоответствие(Команда)
	ТекущаяСтрока = Элементы.РезультатАнализа.ТекущаяСтрока;
	ТекущиеДанные = Элементы.РезультатАнализа.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.НомПосСсылка.Пустая() Тогда
		Строка = РезультатАнализа.НайтиПоИдентификатору(ТекущаяСтрока);
		УдалитьПривязкуСервер(ТекущиеДанные.НомПосСсылка);
		
		Строка.Номенклатура 			= Неопределено;
		Строка.НоменклатураКод 			= Неопределено;
		Строка.НоменклатураАртикул 		= Неопределено;
		Строка.НоменклатураНаименование = Неопределено;
		Строка.НомПосСсылка 			= Неопределено;
		
		ОбновитьПрогрессПривязок(-1);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РА_СоздатьНоменклатуру(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные; 
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		Если ТекущиеДанные.Номенклатура.Пустая() Тогда
			
			ФормаСправочника 	= ПолучитьФорму("Справочник.Номенклатура.Форма.ПомощникНового", , ЭтаФорма, Новый УникальныйИдентификатор);
			
			СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияСправочника(ТекущиеДанные.НомерСтроки);
			СтруктураЗаполнения.Свойство("Штрихкод", ФормаСправочника.Штрихкод);
			ЗаполнитьЗначенияСвойств(ФормаСправочника.Объект, СтруктураЗаполнения);
			ФормаСправочника.ГруппаДоступаНоменклатурыДляКонтроля = СтруктураЗаполнения.ГруппаДоступа;
			
			Если СтруктураЗаполнения.Свойство("ДополнительныеСвойства") Тогда
				Для Каждого ЭлементМассива Из СтруктураЗаполнения.ДополнительныеСвойства Цикл
					РезультатПоискаСвойства = ФормаСправочника.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ЭлементМассива.Свойство));
					Если РезультатПоискаСвойства.Количество() Тогда
						ФормаСправочника[РезультатПоискаСвойства[0].ИмяРеквизитаЗначение] = ЭлементМассива.Значение;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ALPS_АдресСтруктурыЗаполениния = ПоместитьВоВременноеХранилище(СтруктураЗаполнения, УникальныйИдентификатор);
			
			ФормаСправочника.Объект.Родитель 		= НоменклатураРодитель;
			ФормаСправочника.Объект.ВидНоменклатуры = НоменклатураВидНоменклатуры;
			ФормаСправочника.ОткрытьМодально();
			
		Иначе
			Состояние("Для создания новой номенклатуры, привязку следует удалить", , , БиблиотекаКартинок.Информация32);	                           
		КонецЕсли;
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РА_СоздатьГруппу(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РА_Google(Команда)
	ТДанные  = Элементы.РезультатАнализа.ТекущиеДанные;
	ТЭлемент = Элементы.РезультатАнализа.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		ЗапуститьПриложение("http://google.com.ua/search?hl=uk&q=" + СтрЗаменить(ТДанные[СтрЗаменить(ТЭлемент.Имя, "РА_", "")], Символы.ПС, " "));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РА_Rozetka(Команда)
	ТДанные  = Элементы.РезультатАнализа.ТекущиеДанные;
	ТЭлемент = Элементы.РезультатАнализа.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		ЗапуститьПриложение("http://rozetka.com.ua/search/?text=" + СтрЗаменить(ТДанные[СтрЗаменить(ТЭлемент.Имя, "РА_", "")], Символы.ПС, " "));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РА_Hotline(Команда)
	
	ТДанные  = Элементы.РезультатАнализа.ТекущиеДанные;
	ТЭлемент = Элементы.РезультатАнализа.ТекущийЭлемент;
	Если НЕ ТДанные = Неопределено И НЕ ТЭлемент = Неопределено Тогда
		СсылкаНаПриложения 	= СтрЗаменить(ТДанные[СтрЗаменить(ТЭлемент.Имя, "РА_", "")], Символы.ПС, " ");
		СсылкаНаСайт		= "http://hotline.ua/sr/?q=" + КодироватьСтрокуСервер(СсылкаНаПриложения);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РА_ОтборИСортировка(Команда)
	Результат = ОткрытьФормуМодально("ВнешняяОбработка." + ПолучитьБиблиотекуФорм() + ".Форма.КомпоновщикНастроек",  Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		КомпоновщикНастроек = Результат;
		ОбновитьДанныеОтбора(КомпоновщикНастроек);
		ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов);
		ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, "РезультатАнализа");
	КонецЕсли;    
КонецПроцедуры

&НаКлиенте
Процедура РА_ОтборПоЗначению(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент) Тогда
		ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, "РезультатАнализа", ТекущиеДанные.ПолучитьИдентификатор(), СтрЗаменить(ТекущийЭлемент.Имя, "РА_", ""), Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РА_ОтключитьОтбор(Команда)
	ОбновитьДанныеОтбора(КомпоновщикНастроек, Истина);
	ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, "РезультатАнализа");
КонецПроцедуры

&НаКлиенте
Процедура РА_ОтборИстория(Команда)
	//Ищем в истории отборов отбор соответствующий имени команды
	Перем МассивОтборов;
	Для i=0 По ИсторияОтборов.Количество()-1 Цикл
		Если ИсторияОтборов[i].Значение.ИмяКоманды = Команда.Имя Тогда
			МассивОтборов = ИсторияОтборов[i].Значение.МассивОтборов;
			ПереместитьЭлементФормы("НО"+Команда.Имя, "РА_НО_ИсторияОтборов", "НО"+ИсторияОтборов[0].Значение.ИмяКоманды);
			ПереместитьЭлементФормы("ЕО"+Команда.Имя, "РА_ЕО_ИсторияОтборов", "ЕО"+ИсторияОтборов[0].Значение.ИмяКоманды);
			Если ИсторияОтборов.Количество() > 1 Тогда ИсторияОтборов.Сдвинуть(i, -i); КонецЕсли;
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	//Обнуляем все отборы, перед установкой отбора из истории отборов
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого Элемент Из ЭлементыОтбора Цикл Элемент.Использование = Ложь; КонецЦикла;
	
	//Устанавливаем отборы
	Для i=0 По МассивОтборов.Количество()-1 Цикл
		ОтборИзМассиваОпределен = Неопределено;
		Для Каждого Элемент Из ЭлементыОтбора Цикл
			Если Элемент.ЛевоеЗначение 	= МассивОтборов[i].ЛевоеЗначение
			  И  Элемент.ВидСравнения 	= МассивОтборов[i].ВидСравнения Тогда
				Элемент.ПравоеЗначение 	= МассивОтборов[i].ПравоеЗначение;
				Элемент.Использование 	= Истина;
				ОтборИзМассиваОпределен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//Возможно была очистка отборов вручную, значит создаем нужный отбор
		Если ОтборИзМассиваОпределен = Неопределено Тогда 
			ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(МассивОтборов[i].ЛевоеЗначение);
			ЭлементОтбора.Представление = МассивОтборов[i].ЛевоеЗначение;
			ЭлементОтбора.ВидСравнения  = МассивОтборов[i].ВидСравнения;
			ЭлементОтбора.ПравоеЗначение = МассивОтборов[i].ПравоеЗначение;	
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, "РезультатАнализа");
	
КонецПроцедуры

&НаКлиенте
Процедура РА_СортироватьПоВозрастанию(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент) Тогда
		ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, ТекущиеДанные.ПолучитьИдентификатор(), СтрЗаменить(ТекущийЭлемент.Имя, "РА_", ""), Ложь, НаправлениеСортировкиКомпоновкиДанных.Возр);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РА_СортироватьПоУбыванию(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент) Тогда
		ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, ТекущиеДанные.ПолучитьИдентификатор(), СтрЗаменить(ТекущийЭлемент.Имя, "РА_", ""), Ложь, НаправлениеСортировкиКомпоновкиДанных.Убыв);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РезультатАнализаРучнойПоиск(Команда)

	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		//РучноеПостроениеДереваСоответствий(ТекущаяСтрока);
	КонецЕсли;
	
	ЭлементыДерева = ПохожиеОбъектыНоменклатура.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъектыНоменклатура.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ПоискПоНоменклатуре(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		РучноеПостроениеДереваСоответствий(ТекущаяСтрока, "ПоискПоНоменклатуре");
	КонецЕсли;
	
	ЭлементыДерева = ПохожиеОбъектыНоменклатура.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъектыНоменклатура.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоПоставщикам(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		РучноеПостроениеДереваСоответствий(ТекущаяСтрока, "ПоискПоПоставщикам");
	КонецЕсли;
	
	ЭлементыДерева = ПохожиеОбъектыНоменклатура.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъектыНоменклатура.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		РучноеПостроениеДереваСоответствий(ТекущаяСтрока, "ПоискПоШтрихкоду");
	КонецЕсли;
	
	ЭлементыДерева = ПохожиеОбъектыНоменклатура.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъектыНоменклатура.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура Статистика_Сформировать(Команда)
	СформироватьОтчетИсторииРаботыПользователей();
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоПривязкамВРазрезеНоменклатуры(Команда)
	СформироватьОтчетСтатистикаПривязокНаКлиенте();
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

//Функция возвращает структуру параметров которые должны быть переданы в форму конструктор формул
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	СтруктураПараметров - Структура
//		* Формула 	- Строка - Формула
//      * Заголовок - Строка - Заголовок формы
//		* Операторы	- Строка - Адрес хранилища операторов
&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормыКонструкторФормул() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Формула");
	СтруктураПараметров.Вставить("Заголовок", "Доступные поля");
	СтруктураПараметров.Вставить("Операторы", АдресХранилищаДереваОператоров);
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровФормыКонструкторФормул()

	
#КонецОбласти 


&НаСервере
Процедура ВыполнитьЗаписьДополнительныхСведенийНоменклатуры(Номенклатура, МассивСведений)

	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Номенклатура);
	Для Каждого Сведение Из МассивСведений Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Номенклатура;
		ЗаполнитьЗначенияСвойств(Запись, Сведение);
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры




&НаСервере
Функция ПолучитьБиблиотекуФорм()
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьИмяВнешнегоОбъекта("Библиотека внешних обработок");	
КонецФункции





&НаКлиенте
Процедура ОбновитьЗаголовокALPS()
	Заголовок = "Анализ прайс-листов (ALPS) " 	+ " [Соглашение: <" + Соглашение + ">] [Прайс загружен: <" + 
				ALPS_ДатаЗагрузкиПрайса + "><" 	+ ?(ALPS_ДатаЗагрузкиАктуальная, "актуален", "нужно загрузить новый прайс!") 
												+ ?(ALPS_ДатаЗагрузкиПрайса <> ALPS_ДатаЗагрузкиПрайса_cache, " - доступна новая версия прайса!", "") + ">]"; 	
КонецПроцедуры
 
Процедура ОбновитьМодифицированостьФормы(Значение)
	Модифицированность = Значение;	
КонецПроцедуры

&НаСервере
Процедура FullRefreshЗаголовокALPSСервер()
	ALPS_ДатаЗагрузкиПрайса = МестноеВремя(Автоматизация_ФайлПрайсЛиста.ДатаМодификацииУниверсальная);
	RefreshЗаголовокALPSСервер();	
КонецПроцедуры

&НаСервере
Процедура RefreshЗаголовокALPSСервер()
	ALPS_ДатаЗагрузкиПрайса_cache	= МестноеВремя(Автоматизация_ФайлПрайсЛиста.ДатаМодификацииУниверсальная);
	ALPS_ДатаЗагрузкиАктуальная		= Автоматизация_ДнейАктуальности = 0 ИЛИ ALPS_ДатаЗагрузкиПрайса + 60*60*24*Автоматизация_ДнейАктуальности > ТекущаяДата();	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеНовойВерсииПрайса()
	Если ПроверитьНаличиеНовойВерсииПрайсаСервер() Тогда
		Состояние("Внимание!" + Символы.ПС + "Появилась новая версия прайс-листа." + Символы.ПС + "Используйте кнопку ""Перечитать прайс-лист"" для загрузки новой версии.", , , БиблиотекаКартинок.Информация32);	
	КонецЕсли;
	ОбновитьЗаголовокALPS();
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеНовойВерсииПрайсаСервер()
	RefreshЗаголовокALPSСервер();
	Если ALPS_ДатаЗагрузкиПрайса_cache <> ALPS_ДатаЗагрузкиПрайса Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции










&НаСервере
Процедура ЗагрузитьМетаданныеОбъектов()	
	
	АльпыОбъект = РеквизитФормыВЗначение("Объект");
	
	НастройкиСтруктура 		= АльпыОбъект.ЗагрузитьНастройкиПрофиля(Соглашение);	
	НастройкаСоглашения 	= НастройкиСтруктура.НастройкаСоглашения;
	НастройкаДополнительная = НастройкиСтруктура.НастройкаДополнительная;
	
	Автоматизация_ФайлПрайсЛиста 	= НастройкаСоглашения.ФайлПрайсЛиста;
	Автоматизация_ДнейАктуальности 	= НастройкаСоглашения.ДнейАктуальности;
	Элементы.ЗадатьВидыНоменклатуры.Пометка = ?(НастройкаСоглашения.ИндексКартинки, Истина, Ложь);
	
	ALPS_ВестиИсториюРаботыПользователей 		 = НастройкаДополнительная.ALPS_ВестиИсториюРаботыПользователей;
	ALPS_ИспользоватьКешированиеПрайсЛистов 	 = НастройкаДополнительная.ALPS_ИспользоватьКешированиеПрайсЛистов;
	ALPS_ПерезаписыватьРегистрациюЦенПоставщиков = НастройкаДополнительная.ALPS_ПерезаписыватьРегистрациюЦенПоставщиков;
	
	ЗагрузитьШаблонНастройкиСервер(Соглашение);	
	
	FullRefreshЗаголовокALPSСервер();
			
КонецПроцедуры





&НаКлиенте
Процедура ПрофильАнализаПриИзменении(Элемент)
	ОбновитьМодифицированостьФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	КонструкторФормул();
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПрофильАнализа.ТекущиеДанные;
	ОписаниеТипов = ТекущиеДанные.ОписаниеТипов;
	МассивТипов = Новый Массив;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		МассивТипов.Добавить(Тип);
	КонецЦикла;	
	Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов, ОписаниеТипов.КвалификаторыЧисла, ОписаниеТипов.КвалификаторыСтроки, ОписаниеТипов.КвалификаторыДаты);
	Элемент.ОграничениеТипа	= Элемент.ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормул()
	ТекущиеДанные = Элементы.ПрофильАнализа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ТекущиеДанные.РедактироватьЗапрещено Тогда
			СтруктураПараметров = ПолучитьСтруктуруПараметровФормыКонструкторФормул();
			СтруктураПараметров.Формула   = ТекущиеДанные.Выражение;
			ФормаКонструкторФормул = ПолучитьФорму("ВнешняяОбработка.АнализПрайсЛистов.Форма.КонструкторФормул", СтруктураПараметров, ЭтаФорма);
			ФормаКонструкторФормул.ЗакрыватьПриЗакрытииВладельца = Истина;
			ОткрытьФорму(ФормаКонструкторФормул);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры





&НаСервере
Процедура СохранитьШаблонНастройкиСервер()
	НастройкаСоглашения = Новый Структура("ФайлПрайсЛиста, ИндексКартинки", 
											Автоматизация_ФайлПрайсЛиста, 
											Элементы.ЗадатьВидыНоменклатуры.Пометка);	
	НастройкиПрофиль = РеквизитФормыВЗначение("ПрофильАнализа");	
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеПрофиля(Новый Структура("НастройкиПрофиль, Привязка, Формула, СтраницыПрайса", НастройкиПрофиль, Привязка, Формула, СтраницыПрайса), Соглашение, НастройкаСоглашения);	
	РеквизитФормыВЗначение("Объект").СформироватьШапкуТабличногоДокумента(НастройкиПрофиль, ТабличныйДокумент);
	ОбновитьМодифицированостьФормы(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблонНастройкиСервер(ВыбранноеСоглашение)
	
	АльпыОбъект = РеквизитФормыВЗначение("Объект");
	
	ШаблонПрофиля = РеквизитФормыВЗначение("ПрофильАнализа");
	АльпыОбъект.СоздатьШаблонПрофиляАнализа(ШаблонПрофиля);
	НастройкиПрофиляАнализа = АльпыОбъект.ЗагрузитьНастройкиПрофиляАнализа(ВыбранноеСоглашение);		
	Если НастройкиПрофиляАнализа = Неопределено Тогда
		Привязка = 1;
		ВариантыПривязки = ПолучитьЗначениеВариантПривязкиПоЧислу(Привязка);
		Формула  = "";
		СтраницыПрайса = "";
	Иначе
		НастройкиПрофиль = НастройкиПрофиляАнализа.НастройкиПрофиль;
		НастройкиПрофиляАнализа.Свойство("Формула", 		Формула);
		НастройкиПрофиляАнализа.Свойство("Привязка", 		Привязка);
		НастройкиПрофиляАнализа.Свойство("СтраницыПрайса", 	СтраницыПрайса);
		ВариантыПривязки = ПолучитьЗначениеВариантПривязкиПоЧислу(Привязка);
		Для Каждого СтрокаШаблона Из ШаблонПрофиля.Строки Цикл
			
			Если СтрокаШаблона.Строки.Количество() > 0 Тогда
				Для Каждого ПодСтрокаШаблона Из СтрокаШаблона.Строки Цикл
					ПодРезультатПоиска = НастройкиПрофиль.Строки.Найти(ПодСтрокаШаблона.ИмяРеквизита, "ИмяРеквизита", Истина);
					Если ПодРезультатПоиска <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ПодСтрокаШаблона, ПодРезультатПоиска);	
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = НастройкиПрофиль.Строки.Найти(СтрокаШаблона.ПредставлениеРеквизита, "ПредставлениеРеквизита");
			Если РезультатПоиска <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаШаблона, РезультатПоиска);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
	АльпыОбъект.СформироватьШапкуТабличногоДокумента(ШаблонПрофиля, ТабличныйДокумент);
	ЗначениеВРеквизитФормы(ШаблонПрофиля, "ПрофильАнализа");
	
КонецПроцедуры // ЗагрузитьШаблонНастройкиСервер()
 


&НаКлиенте
Процедура ФормулаИсключенияСтрокОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатРедактирования = ОткрытьФормуМодально("ВнешняяОбработка.АнализПрайсЛистов.Форма.КонструкторФормул", Новый Структура("Формула, Заголовок, Операторы", 
																												Формула, 
																												"Доступные поля", 
																												АдресХранилищаДереваОператоров), ЭтаФорма);
	Если РезультатРедактирования <> Неопределено Тогда
		Формула = РезультатРедактирования;
		ОбновитьМодифицированостьФормы(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВвестиЗначение(Соглашение) Тогда
		СоглашениеПриИзмененииСервер();
	КонецЕсли;
	ОбновитьЗаголовокALPS();
	ОбновитьМодифицированостьФормы(Ложь);
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	Владелец = Соглашение.Партнер;
	КлючевыеСлова.Очистить();
	РезультатАнализа.Очистить();
	ПохожиеОбъектыНоменклатура.ПолучитьЭлементы().Очистить();	
	ТабличныйДокумент.Очистить();
	ЗагрузитьМетаданныеОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПривязкиПриИзменении(Элемент)	
	Привязка = ПолучитьЗначениеПривязкиПоСтроке(ВариантыПривязки);
	ОбновитьМодифицированостьФормы(Истина);
КонецПроцедуры


&НаКлиенте
Процедура Автоматизация_ФайлПрайсЛистаПриИзменении(Элемент)
	ОбновитьМодифицированостьФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыФайлаПриИзменении(Элемент)
	
	Если КодСимвола(СтраницыПрайса, 1)=59 ИЛИ КодСимвола(СтраницыПрайса, СтрДлина(СтраницыПрайса))=59 Тогда
		Предупреждение("Строка не может начинаться или заканчиваться символом: "";"" значение очищено. Попробуйте еще раз...");
		СтраницыПрайса = "";
		Возврат;		
	КонецЕсли;	
	
	Для инд = 1 По СтрДлина(СтраницыПрайса) Цикл
	    ТекСимвол = Сред(СтраницыПрайса, инд, 1);
		Код = КодСимвола(ТекСимвол);
		Если (Код<48 ИЛИ Код>57) И Код<>59 Тогда
			Предупреждение("При вводе использовались символы отличные от: ""0123456789;"" значение очищено. Попробуйте еще раз...");
			СтраницыПрайса = "";
			Возврат;
		КонецЕсли;
	КонецЦикла;
	ОбновитьМодифицированостьФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Автоматизация_ФайлПрайсЛистаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокФайловИзСоглашения(Соглашение));
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокФайловИзСоглашения(Соглашение)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок").ПолучитьСписокФайловИзСоглашения(Соглашение);	
КонецФункции





&НаСервере
Функция ПолучитьПараметрыРегистрацииЦенПоставщика()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьПараметрыРегистрацииЦенПоставщика(Соглашение, ПолучитьИзВременногоХранилища(АдресВПамятиРезультатАнализа));
КонецФункции

&НаСервере
Функция ПолучитьКлючСсылкуРегистрацииЦенПоставщика(Соглашение)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьКлючСсылкуРегистрацииЦенПоставщика(Соглашение);	
КонецФункции





&НаКлиенте
Процедура ВывестиСостояние(Сообщение, Отказ = Истина)
	Состояние(Сообщение, , , ?(Отказ, БиблиотекаКартинок.Остановить, БиблиотекаКартинок.ВыполнитьЗадачу));		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗаполненияСправочника(НомерСтрокиВПрайсе)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруЗаполненияСправочника(РеквизитФормыВЗначение("ПрофильАнализа"), ТабличныйДокумент, НомерСтрокиВПрайсе);
КонецФункции






&НаКлиенте
Процедура ОбработатьДействиеСФлажкамиТаблицы(ИмяТаблицы, ИмяФлажка, Значение)
	Для Каждого Элемент Из ЭтаФорма[ИмяТаблицы] Цикл
		Элемент[ИмяФлажка] = Значение;		
	КонецЦикла;		
КонецПроцедуры



&НаКлиенте
Процедура ПривязатьКросПривязкиКлиент(Номенклатура, Код, Артикул)
	Форма = ПолучитьФорму("ВнешняяОбработка.АнализПрайсЛистов.Форма.КроссПривязки", Новый Структура("Номенклатура, Код, Артикул, Владелец", Номенклатура, Код, Артикул, Владелец), УникальныйИдентификатор);
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		Форма.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры






&НаКлиенте
Процедура ПривязатьНаКлиенте(КодПривязки)

	ТекущиеДанные = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Номенклатура = ТекущиеДанные.Номенклатура;
		Если Номенклатура.Пустая() ИЛИ НЕ ТекущиеДанные.НомПоставщика.Пустая() Тогда
			ВывестиСостояние("Привязывать можно только к номенклатуре, а не к позиции прайса или привязаной номенклатуре поставщика", Истина);
			Возврат;
		КонецЕсли;			
	Иначе
		ВывестиСостояние("ТекущиеДанные в нижнем поле не определены", Истина);
		Возврат;	
	КонецЕсли;
		
	ТекущаяСтрока = Элементы.РезультатАнализа.ТекущаяСтрока;
	ТекущиеДанные = Элементы.РезультатАнализа.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			Сообщить("Жаль, но чтоб сделать новую привязку старую нужно удалить");
		Иначе
			ПривязатьНаСервере(Номенклатура, ТекущаяСтрока, КодПривязки);
			ПривязатьКросПривязкиКлиент(Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры



&НаСервере
Процедура ПривязатьНаСервере(Номенклатура, Идентификатор, КодПривязки, Авто = Ложь)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если ОбработкаОбъект.ПроверитьПривязкуНоменклатуры(Номенклатура, Владелец) Тогда
		Возврат;	
	КонецЕсли;
		
	СтрокаПрайса = РезультатАнализа.НайтиПоИдентификатору(Идентификатор);
	НоменклатураПоставщика = ОбработкаОбъект.ПолучитьСсылкуНаНоменклатуруПоставщика(КодПривязки, СтрокаПрайса.Код, СтрокаПрайса.Артикул, СтрокаПрайса.Наименование, Владелец);
	Если НоменклатураПоставщика = Неопределено Тогда
		Сообщить("Неизвестно почему привязывать!");	Возврат;	
	КонецЕсли;
	
	ОбъектПоставщика = ОбработкаОбъект.ЗаписатьОбъектНоменклатурыПоставщика(Номенклатура, НоменклатураПоставщика, КодПривязки, СтрокаПрайса.Код, СтрокаПрайса.Артикул, СтрокаПрайса.Наименование, Владелец);
	Если ОбъектПоставщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект.ВыполнитьЗаписьЛогПривязок(Номенклатура, ОбъектПоставщика.Ссылка, Истина);
		
	СтрокаПрайса.НоменклатураКод 		  = Номенклатура.Код;
	СтрокаПрайса.НоменклатураАртикул 	  = Номенклатура.Артикул;
	СтрокаПрайса.НоменклатураНаименование = Номенклатура.Наименование;
	СтрокаПрайса.НомПосСсылка 			  = ОбъектПоставщика.Ссылка;
	СтрокаПрайса.Номенклатура 		      = ОбъектПоставщика.Номенклатура;
	
	ОбновитьТаблицыВПамяти(СтрокаПрайса);
	
	ОбновитьПрогрессПривязок(1);
	Если ALPS_ВестиИсториюРаботыПользователей И НЕ Авто Тогда
		ОбновитьИсториюРаботыПользователей(Соглашение, ALPS_Привязано, ALPS_Итого, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПривязкуСервер(Ссылка)
	
	ОбъектПоставщика = Ссылка.ПолучитьОбъект();
	РеквизитФормыВЗначение("Объект").ВыполнитьЗаписьЛогПривязок(ОбъектПоставщика.Номенклатура, Ссылка, Ложь);
	ОбъектПоставщика.Номенклатура = Неопределено;
	ОбъектПоставщика.Записать();
	
	УдалитьПривязкуАдресХранения(Ссылка);
	
	Если ALPS_ВестиИсториюРаботыПользователей Тогда
		ОбновитьИсториюРаботыПользователей(Соглашение, ALPS_Привязано, ALPS_Итого, 0, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПривязкуАдресХранения(Ссылка)

	РезультатАнализаНаСервере = ПолучитьИзВременногоХранилища(АдресВПамятиРезультатАнализа);
	СтруктураПоиска		= Новый Структура("НомПосСсылка", Ссылка);
	СтруктураПараметров = СтруктураОчисткиЗаписиРезультатАнализа();
	ЗаполнитьДанныеПоСтруктуреОчистки(РезультатАнализаНаСервере, СтруктураПоиска, СтруктураПараметров);
	ЗаполнитьДанныеПоСтруктуреОчистки(РезультатАнализа, СтруктураПоиска, СтруктураПараметров);
	АдресВПамятиРезультатАнализа = ПоместитьВоВременноеХранилище(РезультатАнализаНаСервере, УникальныйИдентификатор);
	
КонецПроцедуры // УдалитьПривязкуАдресХранения()

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоСтруктуреОчистки(Таблица, СтруктураПоиска, СтруктураПараметров)

	РезультатПоиска = Таблица.НайтиСтроки(СтруктураПоиска);	
	Если РезультатПоиска.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РезультатПоиска[0], СтруктураПараметров);
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьДанныеПоСтруктуреОчистки()
 
&НаСервереБезКонтекста
Функция СтруктураОчисткиЗаписиРезультатАнализа()

	СтруктураДляОчистки = Новый Структура;
	СтруктураДляОчистки.Вставить("НоменклатураКод", "");
	СтруктураДляОчистки.Вставить("НоменклатураАртикул", "");
	СтруктураДляОчистки.Вставить("НоменклатураНаименование", "");
	СтруктураДляОчистки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураДляОчистки.Вставить("НомПосСсылка", Справочники.НоменклатураПоставщиков.ПустаяСсылка());	
	Возврат СтруктураДляОчистки;

КонецФункции // ПолучитьСтруктуруОчистиЗаписиРезультатАнализа()
 
 


Процедура ОбновитьПрогрессПривязок(i)
	ALPS_Привязано = ALPS_Привязано + i;	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВыделениеСтроки(ИмяТаблицы, ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент = Неопределено)
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	ТекущийЭлемент= Элементы[ИмяТаблицы].ТекущийЭлемент;
	Возврат ?(ТекущиеДанные = Неопределено ИЛИ ТекущаяСтрока = Неопределено, Ложь, Истина);		
КонецФункции

&НаСервере
Процедура ОбновитьИсториюРаботыПользователей(Соглашение, ПривязаноПозиций, ИтогоПозиций, СозданиеПривязки = 0, УдалениеПривязки = 0)
	git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок").ОбновитьИсториюРаботыПользователей(Соглашение, ПривязаноПозиций, ИтогоПозиций, СозданиеПривязки, УдалениеПривязки);				
КонецПроцедуры




&НаСервере
Процедура ВыполнитьПоискПривязокУмолч(Реквизит)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	НомПосСсылка	КАК НомПоставщика,
		|   ТабЗнч.Цена
		|
		|ПОМЕСТИТЬ ТабКешБезНормализизации
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабКеш.Код, ТабКеш.Артикул, ТабКеш.Наименование, ТабКеш.НомерСтроки
		|ПОМЕСТИТЬ ТабКеш
		|ИЗ ТабКешБезНормализизации КАК ТабКеш
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			%Реквизит%
		|		ИЗ
		|			ТабКешБезНормализизации
		|		ГДЕ
		|			НомПоставщика = Значение(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
		|		И 	%Реквизит% <> """"
		|		СГРУППИРОВАТЬ ПО %Реквизит%	
		|		ИМЕЮЩИЕ Количество(%Реквизит%) = 1) КАК УникальныеПозиции
		|ПО ТабКеш.%Реквизит% = УникальныеПозиции.%Реквизит%
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабКешБезНормализизации;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	ТабКеш.НомерСтроки
		|Из
		|	Справочник.Номенклатура КАК СпрНоменклатура
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			%Реквизит% 	
		|		Из
		|			Справочник.Номенклатура
		|		СГРУППИРОВАТЬ ПО %Реквизит%	
		|		ИМЕЮЩИЕ Количество(%Реквизит%) = 1) КАК УникальныеПозиции
		|ПО СпрНоменклатура.%Реквизит% = УникальныеПозиции.%Реквизит%
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКеш КАК ТабКеш
		|ПО ТабКеш.%Реквизит% = СпрНоменклатура.%Реквизит% 
		|;";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%Реквизит%", Реквизит);
	Запрос.УстановитьПараметр("ТабЗнч", РезультатАнализа.Выгрузить());
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	
	ПараметрОтбора = Новый Структура("НомерСтроки", Неопределено);	
	Пока Выборка.Следующий() Цикл
		ПараметрОтбора.НомерСтроки = Выборка.НомерСтроки;
		РезультатПоиска = РезультатАнализа.НайтиСтроки(ПараметрОтбора);
		Если РезультатПоиска.Количество() = 1 Тогда
			ПривязатьНаСервере(Выборка.Номенклатура, РезультатПоиска[0].ПолучитьИдентификатор(), Привязка, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 





&НаКлиенте
Процедура РезультатАнализаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элемент.ТекущийЭлемент;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ИмяКолонки = ТекущийЭлементТЗ.Имя;
		Если 		ИмяКолонки = "РА_НоменклатураКод" ИЛИ 	ИмяКолонки = "РА_НоменклатураАртикул" ИЛИ	ИмяКолонки = "РА_НоменклатураНаименование" Тогда 
			ОткрытьЗначение(ТекущиеДанные.Номенклатура);
		ИначеЕсли 	ИмяКолонки = "РА_Код" ИЛИ 	ИмяКолонки = "РА_Артикул" ИЛИ	ИмяКолонки = "РА_Наименование" Тогда
			ОткрытьЗначение(ТекущиеДанные.НомПосСсылка);
		КонецЕсли;          
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатАнализаПриАктивизацииСтроки(Элемент)		
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущаяСтрока = Неопределено Тогда
		ОбновлениеДанныхОСоответствиях(ТекущаяСтрока);
	КонецЕсли;
	
	ЭлементыДерева = ПохожиеОбъектыНоменклатура.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъектыНоменклатура.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РезультатАнализаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РезультатАнализаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РА_НоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("РезультатАнализа", ТекущаяСтрока, ТекущиеДанные) Тогда
		ПривязатьНаСервере(ТекущиеДанные.Номенклатура, ТекущаяСтрока, Привязка);
		ПривязатьКросПривязкиКлиент(ТекущиеДанные.Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
	КонецЕсли;	
КонецПроцедуры



&НаСервере
Процедура ОбновлениеДанныхОСоответствиях(Идентификатор)
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьСоответствиеРезультатАнализа(Идентификатор);
	ПостроениеДереваСоответствий(Идентификатор);	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоответствиеРезультатАнализа(Идентификатор)
	ДанныеСтроки = РезультатАнализа.НайтиПоИдентификатору(Идентификатор);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если 		Привязка = 1 Тогда
		ПараметрСтрока = "И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   Привязка = 2 Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул";
	ИначеЕсли   Привязка = 3 Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   Привязка = 4 Тогда
		ПараметрСтрока = "И НомПоставщика.Наименование = ТабЗнч.Наименование";
	Иначе 
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	&НомерСтроки 	КАК НомерСтроки,
		|	&Код			КАК Код,
		|   &Артикул		КАК Артикул,
		|   &Наименование	КАК Наименование,
		|	&Штрихкод		КАК Штрихкод, 	
		|   &Цена           КАК Цена
		|ПОМЕСТИТЬ ТабКеш
		|;
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|
		|   ТабЗнч.Цена,
		|	ВхЦена.Цена КАК ВхЦена,
		|	КнЦена.Цена КАК КнЦена,
		|
		|   НомПоставщика.Номенклатура, 
		|	НомПоставщика.Номенклатура.Код 			КАК НоменклатураКод,
		|   НомПоставщика.Номенклатура.Артикул		КАК НоменклатураАртикул,
		|   НомПоставщика.Номенклатура.Наименование	КАК НоменклатураНаименование,
		|  	НомПоставщика.Ссылка    				КАК НомПосСсылка
		|
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НомПоставщика
		|ПО НомПоставщика.Владелец = &Владелец 
		| " + ПараметрСтрока + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВхЦена) КАК ВхЦена
		|ПО ВхЦена.Номенклатура 	= НомПоставщика.Номенклатура
		|И  ВхЦена.Характеристика 	= НомПоставщика.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &КнЦена) КАК КнЦена
		|ПО КнЦена.Номенклатура 	= НомПоставщика.Номенклатура
		|И  КнЦена.Характеристика 	= НомПоставщика.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО ТабЗнч.НомерСтроки Возр 
		|
		|;";
	Запрос.УстановитьПараметр("НомерСтроки", 	ДанныеСтроки.НомерСтроки);
	Запрос.УстановитьПараметр("Код", 			ДанныеСтроки.Код);
	Запрос.УстановитьПараметр("Артикул", 		ДанныеСтроки.Артикул);
	Запрос.УстановитьПараметр("Наименование", 	ДанныеСтроки.Наименование);
	Запрос.УстановитьПараметр("Штрихкод", 		ДанныеСтроки.Штрихкод);
	Запрос.УстановитьПараметр("Цена", 			ДанныеСтроки.Цена);
	Запрос.УстановитьПараметр("ВхЦена", ВхЦена);
	Запрос.УстановитьПараметр("КнЦена", КнЦена);
	Запрос.УстановитьПараметр("Владелец", Соглашение.Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		РезультатАнализаНаСервере = ПолучитьИзВременногоХранилища(АдресВПамятиРезультатАнализа);
		СтруктураПоиска			  = Новый Структура("НомПосСсылка", Выборка.НомПосСсылка);
		ЗаполнитьДанныеПоСтруктуреОчистки(РезультатАнализаНаСервере, СтруктураПоиска, Выборка);
		АдресВПамятиРезультатАнализа = ПоместитьВоВременноеХранилище(РезультатАнализаНаСервере, УникальныйИдентификатор);
	КонецЕсли;
	Запрос.МенеджерВременныхТаблиц.Закрыть();
КонецПроцедуры  
 




&НаКлиенте
Процедура ПохожиеОбъектыНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПохожиеОбъектыНоменклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.НомПоставщика.Пустая() 
		И НЕ ТекущиеДанные.Номенклатура.Пустая() И Поле.Имя = "ПОН_Владелец" Тогда 
			ОткрытьЗначение(ТекущиеДанные.Номенклатура);	
		ИначеЕсли ТекущиеДанные.НомПоставщика.Пустая() Тогда
			ПривязатьНаКлиенте(Привязка);
		ИначеЕсли Поле.Имя = "ПОН_Код" ИЛИ Поле.Имя = "ПОН_Артикул" ИЛИ Поле.Имя = "ПОН_Наименование" Тогда
			ОткрытьЗначение(ТекущиеДанные.НомПоставщика);
		ИначеЕсли Поле.Имя = "ПОН_Владелец" Тогда
			ОткрытьЗначение(ТекущиеДанные.Владелец);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъектыНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъектыНоменклатураПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры





&НаСервере
Процедура РучноеПостроениеДереваСоответствий(Идентификатор, РежимПоиска)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ДанныеСтроки = РезультатАнализа.НайтиПоИдентификатору(Идентификатор);
	ВыполнитьПоискСоответсвий(ЭтотОбъект, ДанныеСтроки, РежимПоиска);
	
КонецПроцедуры

&НаСервере
Процедура ПостроениеДереваСоответствий(Идентификатор)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ДанныеСтроки = РезультатАнализа.НайтиПоИдентификатору(Идентификатор);
	РазобратьСтрокуПоСловам(ЭтотОбъект, ДанныеСтроки.Код, ДанныеСтроки.Артикул, ДанныеСтроки.Наименование);
	ВыполнитьПоискСоответсвий(ЭтотОбъект, ДанныеСтроки, "ПоискПоНоменклатуре");
	ЗаполнитьРодительВидНоменклатуры(ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьСтрокуПоСловам(ЭтотОбъект, Код, Артикул, Наименование)
	
	КлючевыеСлова.Очистить();
	Если СтрДлина(Код) Тогда 
		СтрокаКод 	   	= КлючевыеСлова.Добавить();
		СтрокаКод.Слово = Код;
	КонецЕсли;
	
	Если СтрДлина(Артикул) Тогда 
		СтрокаАртикул 	   	= КлючевыеСлова.Добавить();
		СтрокаАртикул.Слово = Артикул;
	КонецЕсли;
		
	МассивСлов = ЭтотОбъект.ПолучитьМассивСловИзСтроки(Наименование);
	Для Каждого Слово Из МассивСлов Цикл
		Строка = КлючевыеСлова.Добавить();
		Строка.Слово = Слово;	
	КонецЦикла;
		
КонецПроцедуры



&НаСервере
Процедура ВыполнитьПоискСоответсвий(ЭтотОбъект, ДанныеСтроки, РежимПоиска)	
	
	ПохожиеОбъекты = РеквизитФормыВЗначение("ПохожиеОбъектыНоменклатура");
	ПохожиеОбъекты.Строки.Очистить();
		
	СтрокаПрайс = ПохожиеОбъекты.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПрайс, ДанныеСтроки);
	СтрокаПрайс.Владелец 	 = Владелец;
	СтрокаПрайс.Номенклатура = Неопределено;
	
	Запрос = Новый Запрос;
	
	РезультатПоиска = КлючевыеСлова.НайтиСтроки(Новый Структура("Ключ", Истина));
	КоличНайденных = РезультатПоиска.Количество()-1;
	ТекстАртикул = ""; ТекстНаименование = "";
	Для i = 0 По КоличНайденных Цикл
		
		Если i = 0 Тогда
			ТекстАртикул 	  = ТекстАртикул 		+ " ИЛИ (Артикул 	  ПОДОБНО &Парам" + i;
			ТекстНаименование = ТекстНаименование 	+ " ИЛИ (Наименование ПОДОБНО &Парам" + i;
		Иначе
			ТекстАртикул 	  = ТекстАртикул 		+ " И Артикул 	   ПОДОБНО &Парам" + i;
			ТекстНаименование = ТекстНаименование 	+ " И Наименование ПОДОБНО &Парам" + i;
		КонецЕсли;
		
		Если i = КоличНайденных Тогда 
			ТекстАртикул 	  = ТекстАртикул 		+ ")";
			ТекстНаименование = ТекстНаименование 	+ ")";	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Парам" + i, "%" + СтрЗаменить(ЭтотОбъект.СформироватьШаблонПоискаПривязки(РезультатПоиска[i].Слово), " ", "%") + "%");
	КонецЦикла;
	
	Если 	  РежимПоиска = "ПоискПоНоменклатуре" Тогда
			
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Код,	
			|   Артикул,
			|   Наименование КАК Наименование,
			|   Ссылка КАК Номенклатура,
			|   Родитель КАК Группа,
			|	ЭтоГруппа
			|
			|ПОМЕСТИТЬ SearchCache
			|ИЗ
			| 	Справочник.Номенклатура	КАК СпрНоменклатура
			|
			|ГДЕ
			|	  &Номенклатура = Ссылка
			|ИЛИ (&Код 			<> """" И Код 		   = &Код) 
			|ИЛИ (&Артикул 		<> """" И Артикул 	   " + ?(СтрДлина(ДанныеСтроки.Артикул) > 3, "ПОДОБНО &Артикул)", "= &чсАртикул)") + "	
			|ИЛИ (&Наименование <> """" И Наименование ПОДОБНО &Наименование)" + ТекстАртикул + ТекстНаименование + " 
			|
			|ИНДЕКСИРОВАТЬ ПО 
			|	Номенклатура; ";
				
	ИначеЕсли РежимПоиска = "ПоискПоПоставщикам"  Тогда
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Номенклатура.Код			КАК Код,	
			|   Номенклатура.Артикул		КАК Артикул,
			|   Номенклатура.Наименование 	КАК Наименование,
			|   Номенклатура 				КАК Номенклатура,
			|   Номенклатура.Родитель 		КАК Группа,
			|	Номенклатура.ЭтоГруппа      КАК ЭтоГруппа
			|
			|ПОМЕСТИТЬ SearchCache
			|ИЗ
			| 	Справочник.НоменклатураПоставщиков	КАК СпрНоменклатура
			|
			|ГДЕ
			| НЕ Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка) И (
			|    (&Код 			<> """" И Код 		   = &Код) 
			|ИЛИ (&Артикул 		<> """" И Артикул " + ?(СтрДлина(ДанныеСтроки.Артикул) > 3, "ПОДОБНО &Артикул)", "= &чсАртикул)") + "	
			|ИЛИ (&Наименование <> """" И Наименование ПОДОБНО &Наименование)" + ТекстАртикул + ТекстНаименование + " ) 
			|
			|СГРУППИРОВАТЬ ПО 
			|	Номенклатура
			|
			|ИНДЕКСИРОВАТЬ ПО 
			|	Номенклатура
			|; ";	
		
	ИначеЕсли РежимПоиска = "ПоискПоШтрихкоду"    Тогда
		//Выборка =
	Иначе
		//Выборка = ;
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ВидЦены,
		|	Цена
		|
		|ПОМЕСТИТЬ PriceCache
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ SearchCache) И ВидЦены В (&ВхЦена, &КнЦена))
		|;
		|ВЫБРАТЬ
		|	SearchCache.Код, 
		|	SearchCache.Артикул, 
		|	SearchCache.Наименование,	
		|   SearchCache.Номенклатура, 
		|	SearchCache.Группа, 
		|	SearchCache.ЭтоГруппа,
		|	ЕСТЬNULL(ЦенаПоставщика.Цена, 0) КАК Цена,  
		|   ISNULL(РгВхЦена.Цена, 0) 		КАК ВхЦена,
		|   ISNULL(РгКнЦена.Цена, 0) 		КАК КнЦена,
		|	СпрНомПос.Ссылка		 		КАК НомПоставщика,
		|	ЦенаПоставщика.Соглашение		КАК СоглашениеПоставщика
		|
		|ИЗ
		|	SearchCache КАК SearchCache
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ PriceCache КАК РгВхЦена
		|ПО РгВхЦена.Номенклатура = SearchCache.Номенклатура 
		|И	РгВхЦена.ВидЦены	  = &ВхЦена
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ PriceCache КАК РгКнЦена
		|ПО РгКнЦена.Номенклатура = SearchCache.Номенклатура
		|И	РгКнЦена.ВидЦены	  = &КнЦена
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ 
		|						Ссылка, 
		|						Номенклатура 
		|					ИЗ 
		|						Справочник.НоменклатураПоставщиков 
		|					ГДЕ 
		|						НЕ ПометкаУдаления
		|					И	Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ SearchCache)) КАК СпрНомПос
		|ПО СпрНомПос.Номенклатура = SearchCache.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ SearchCache)) КАК ЦенаПоставщика
		|ПО ЦенаПоставщика.Номенклатура			  = СпрНомПос.Номенклатура 
		|И  ЦенаПоставщика.НоменклатураПоставщика = СпрНомПос.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО SearchCache.Код
		|;";
															
	ПараметрАртикул = "";
	Если НЕ ПустаяСтрока(ДанныеСтроки.Артикул) Тогда
		ЭтоБуква = Неопределено; ЭтоСимволы = Истина; 
		ИсходнаяСтрока = СокрЛП(ДанныеСтроки.Артикул);
		Для Инд = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			ТекСимвол = Сред(ИсходнаяСтрока, Инд, 1);
			Если 	  ЭтотОбъект.ЭтоБуква(ТекСимвол) И (ЭтоБуква = Ложь ИЛИ ЭтоБуква = Неопределено) Тогда 
				ПараметрАртикул = ПараметрАртикул + "%" + ТекСимвол; 
				ЭтоБуква = Истина;
				ЭтоСимволы = Ложь;
			ИначеЕсли ЭтотОбъект.ЭтоБуква(ТекСимвол) Тогда 
				ПараметрАртикул = ПараметрАртикул + ТекСимвол;
			ИначеЕсли ЭтотОбъект.ЭтоЦифра(ТекСимвол) И (ЭтоБуква = Истина ИЛИ ЭтоБуква = Неопределено)  Тогда 
				ПараметрАртикул = ПараметрАртикул + "%" + ТекСимвол; 
				ЭтоБуква = Ложь;
				ЭтоСимволы = Ложь;
			ИначеЕсли ЭтотОбъект.ЭтоЦифра(ТекСимвол) Тогда 
				ПараметрАртикул = ПараметрАртикул + ТекСимвол;
			Иначе    
				ПараметрАртикул = ПараметрАртикул + "%";
			КонецЕсли;
		КонецЦикла;
		ПараметрАртикул = ?(ЭтоСимволы, "%"+ ИсходнаяСтрока + "%", ЭтотОбъект.СформироватьШаблонПоискаПривязки(ПараметрАртикул) + "%");
	КонецЕсли;
	
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("Код", 			ДанныеСтроки.Код);
	Запрос.УстановитьПараметр("Артикул", 		ПараметрАртикул);
	Запрос.УстановитьПараметр("чсАртикул", 		ДанныеСтроки.Артикул);
	Запрос.УстановитьПараметр("Наименование", 	ДанныеСтроки.Наименование);
	Запрос.УстановитьПараметр("Номенклатура", 	ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("ВхЦена", 	 	ВхЦена);
	Запрос.УстановитьПараметр("КнЦена", 		КнЦена); 
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	
	ТекущаяСтрока = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		//Номенклатура
		Если ТекущаяСтрока = Неопределено ИЛИ НЕ ТекущаяСтрока.Номенклатура = Выборка.Номенклатура Тогда
			ТекущаяСтрока = ПохожиеОбъекты.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
			ТекущаяСтрока.Цена 			= ДанныеСтроки.Цена;
			ТекущаяСтрока.НомПоставщика = Неопределено;
		КонецЕсли;
		
		//Номенклатура поставщика
		Если НЕ Выборка.НомПоставщика = NULL Тогда
			
			ВладелецНоменклатуры = Выборка.НомПоставщика.Владелец;
			//Соглашения с поставщиками
			СоответствиеПоставщика = ТекущаяСтрока.Строки.Найти(ВладелецНоменклатуры, "Владелец");
			Если СоответствиеПоставщика = Неопределено Тогда
				СоответствиеПоставщика = ТекущаяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СоответствиеПоставщика, Выборка);
				СоответствиеПоставщика.Код 			= Выборка.НомПоставщика.Код;
				СоответствиеПоставщика.Артикул 		= Выборка.НомПоставщика.Артикул;
				СоответствиеПоставщика.Наименование = Выборка.НомПоставщика.Наименование;
				СоответствиеПоставщика.Группа	    = Выборка.НомПоставщика.Родитель;
				СоответствиеПоставщика.Владелец	    = ВладелецНоменклатуры;
				Если ВладелецНоменклатуры = Соглашение.Партнер Тогда
					ТекущаяСтрока.ЭтоПривязано 		= Истина;
					СоответствиеПоставщика.ЭтоПривязано = Истина;
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ Выборка.СоглашениеПоставщика = NULL Тогда
				СтрокаДерева = СоответствиеПоставщика.Строки.Добавить();
				СтрокаДерева.Цена 		= Выборка.Цена;
				СтрокаДерева.ВхЦена 	= Выборка.ВхЦена;
				СтрокаДерева.КнЦена 	= Выборка.КнЦена;
				СтрокаДерева.Соглашение = Выборка.СоглашениеПоставщика;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ПохожиеОбъекты, "ПохожиеОбъектыНоменклатура");
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьРодительВидНоменклатуры(Номенклатура)
	Если НЕ Номенклатура.Пустая() Тогда
		НоменклатураРодитель 		= Номенклатура.Родитель;
		НоменклатураВидНоменклатуры = Номенклатура.ВидНоменклатуры;
	КонецЕсли;
КонецПроцедуры





&НаСервере
Процедура ЗаписатьВТаблицуНаборыДопИнформации(Таблица)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Свойство
		|	
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты
		|
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Свойство
		|	
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения
		|
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
		|");
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		//ЗаписатьВТаблицуМетаданных(Таблица, "Свойство: [" + СтрЗаменить(Выборка.Свойство.УникальныйИдентификатор(), "-", "_") + "]", Выборка.Свойство.Наименование);		
	КонецЦикла;
	
КонецПроцедуры









//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                  										//
//            			 УНИВЕРСАЛЬНЫЙ МЕХАНИЗМ ОБРАБОТКИ ОТБОРОВ И СОРТИРОВОК ТАБЛИЧНОЙ ЧАСТИ		    					//
//                                                                                 										 	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





&НаКлиенте
Процедура ОбновитьДанныеОтбора(КомпоновщикНастроек, ОтключитьОтбор = Ложь)
	Элементы.ГруппаСтраницы_КП_РА.ТекущаяСтраница = Элементы.СтраницаРА_НетОтбора;
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл	
		
		Если ОтключитьОтбор Тогда 
			Элемент.Использование = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Использование Тогда
			Элементы.ГруппаСтраницы_КП_РА.ТекущаяСтраница = Элементы.СтраницаРА_ЕстьОтбор;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборы()
	Для і=0 По ИсторияОтборов.Количество()-1 Цикл
		ИмяКоманды 			= ИсторияОтборов[і].Значение.ИмяКоманды;
		ПредставлениеОтбора = ПолучитьПредставлениеОтбора(ИсторияОтборов[і].Значение.МассивОтборов); 
		ДобавитьКомандуКФорме(ИмяКоманды, ПредставлениеОтбора);
		ВставитьКнопкуФормы("НО"+ИмяКоманды, ИмяКоманды, ПредставлениеОтбора, Элементы.РА_НО_ИсторияОтборов, , ВидКнопкиФормы.КнопкаКоманднойПанели);
		ВставитьКнопкуФормы("ЕО"+ИмяКоманды, ИмяКоманды, ПредставлениеОтбора, Элементы.РА_ЕО_ИсторияОтборов, , ВидКнопкиФормы.КнопкаКоманднойПанели);
	КонецЦикла;
КонецПроцедуры



&НаКлиенте
Процедура ВыполнитьКомандуОтбораКлиент(КомпоновщикНастроек, Идентификатор = Неопределено, ИмяЭлемента = Неопределено, ЭтоОтбор = Неопределено, НаправлениеСортировки = Неопределено)	
		
	ВыполнитьКомандуОтбораСервер(КомпоновщикНастроек, Идентификатор, ИмяЭлемента, ЭтоОтбор, НаправлениеСортировки);	
	ОбновитьДанныеОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуОтбораСервер(КомпоновщикНастроек, Идентификатор = Неопределено, ИмяЭлемента = Неопределено, ЭтоОтбор = Неопределено, НаправлениеСортировки = Неопределено)
	
	Перем Значение, ВремОбъект;
	
	//Запоминаем текущую строку
	ТекущаяСтрока = Элементы.РезультатАнализа.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = РезультатАнализа.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли; 
	
		
	Если НЕ ЭтоОтбор = Неопределено Тогда
		ТекущиеДанные = ЭтаФорма.РезультатАнализа.НайтиПоИдентификатору(Идентификатор);
		РеквизитНайден = ТекущиеДанные.Свойство(ИмяЭлемента, Значение);
		Если РеквизитНайден Тогда
			Если ЭтоОтбор Тогда 
				ДобавитьОтборПоЗначению(КомпоновщикНастроек, ИмяЭлемента, Значение);
				ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов);
			Иначе 
				ДобавитьСортировку(КомпоновщикНастроек, ИмяЭлемента, НаправлениеСортировки); 
			КонецЕсли;
		Иначе
			//Реквизита нет в таблице, разбиваем ИмяЭлемента на слова
			МассивИмен = ПолучитьМассивИмен(ИмяЭлемента);
			Колич_Имен = МассивИмен.Количество() - 1;
			
			//Данный цикл предназначен для поиска реквизита ссылочного типа, который является родителем реквизита по которому 
			//выполняется отбор или сортировка 
			Для i = 0 По Колич_Имен Цикл
				Если ТекущиеДанные.Свойство(МассивИмен[i], ВремОбъект) Тогда
					Если Найти(XMLТипЗнч(ВремОбъект).ИмяТипа, "Ref") = 0 Тогда
						//Добавлять дополнительные поля возможно только из реквизитов ссылочного типа
						ВызватьИсключение "Возникла неизвестная ошибка. Реквизит имеет не ссылочный тип: " + ИмяЭлемента;
					КонецЕсли;
					ИмяЭлемента = МассивИмен[i];
					i=i+1;
					Прервать;
				ИначеЕсли i+1 <= Колич_Имен Тогда
					МассивИмен[i+1] = МассивИмен[i] + "_" + МассивИмен[i+1];
				Иначе
					ВызватьИсключение "Возникла неизвестная ошибка. В таблице нет данных о имени: " + ИмяЭлемента;
				КонецЕсли;
			КонецЦикла;
			
			//Выполняем построение адреса реквизита по которому нужно выполнить отбор или сортировку
			АдресРеквизита = "";
			МетаВремЗначение = ВремОбъект.Метаданные();
			Пока i <= Колич_Имен Цикл
				ВремЗначение = МетаВремЗначение.Реквизиты.Найти(МассивИмен[i]);
				Если НЕ ВремЗначение = Неопределено Тогда
					АдресРеквизита = АдресРеквизита + МассивИмен[i];
					формироватьАдресРеквизита(i, Колич_Имен, МетаВремЗначение, ВремЗначение, АдресРеквизита);
				Иначе
					Попытка 
						ВремЗначение = МетаВремЗначение.СтандартныеРеквизиты[МассивИмен[i]];
						АдресРеквизита = АдресРеквизита + МассивИмен[i];
						формироватьАдресРеквизита(i, Колич_Имен, МетаВремЗначение, ВремЗначение, АдресРеквизита);
					Исключение
						МассивИмен[i+1] = МассивИмен[i] + "_" + МассивИмен[i+1];  
					КонецПопытки;
				КонецЕсли;
				i=i+1;
			КонецЦикла;
			
			Если ЭтоОтбор Тогда 
				ДобавитьОтборПоЗначению(КомпоновщикНастроек, ИмяЭлемента + ?(ПустаяСтрока(АдресРеквизита), "", "." + АдресРеквизита), ПолучитьЗначениеРеквизита(АдресРеквизита, ВремОбъект));
				ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов);
			Иначе 
				ДобавитьСортировку(КомпоновщикНастроек, ИмяЭлемента + ?(ПустаяСтрока(АдресРеквизита), "", "." + АдресРеквизита), НаправлениеСортировки); 
			КонецЕсли;
						
		КонецЕсли;
			
	КонецЕсли;
	
	//2. получаем из временного хранилища СКД
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	//3. готовим макет 
	КомпоновщикМакетаДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ТаблицаЗначений", ПолучитьИзВременногоХранилища(АдресВПамятиРезультатАнализа));
	
	//4. исполняем макет 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);

	//5. выводим результат
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
	СтраничноеОтображение = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	СтраницыВсего = Цел(СтраничноеОтображение.Количество() / 500) + ?(СтраничноеОтображение.Количество() % 500, 1, 0);
	СтраницыВсегоНадпись = "из " + СтраницыВсего;
	СтраницаТекущая = 1;
	
	СтраничноеОтображениеАдрес = ПоместитьВоВременноеХранилище(СтраничноеОтображение, УникальныйИдентификатор);
	ЗагрузитьНоменклатуруСтраницы();
	//ЭтаФорма[ИмяТаблицы].Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	
	//Востанавливаем курсор на нужную номенклатуру, если он не пропал из выгрузки
	Если ПараметрыОтбора <> Неопределено Тогда
		Массив = ЭтаФорма.РезультатАнализа.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда 
			Элементы.РезультатАнализа.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); 
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры



&НаСервере
Процедура ДобавитьСортировку(КомпоновщикНастроек, ИмяЭлемента, Направление)
	 	
	ЭлементыПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы;
	ЭлементыПорядка.Очистить();
	ЭлементПорядка = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.ТипУпорядочивания = Направление;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборПоЗначению(КомпоновщикНастроек, ИмяЭлемента, Значение)
	
	Перем ЭлементОтбораНайден;
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ЭлементОтбора.Представление = ЭлементОтбора.ЛевоеЗначение;
		Если ЭлементОтбора.Представление = ИмяЭлемента И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ЭлементОтбора.Использование = НЕ ЭлементОтбора.Использование;
			ЭлементОтбора.ПравоеЗначение = Значение;
			ЭлементОтбораНайден = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбораНайден = Неопределено Тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		ЭлементОтбора.Представление = ЭлементОтбора.ЛевоеЗначение;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов)
	//Создаем уникальное имя команды, УникальныйИдентификатор не всегда начинается с буквы, добавляем вначале "n" 
	ИмяКоманды = "n" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	МассивОтборов = Новый Массив;
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			МассивОтборов.Добавить(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.ПравоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОтборов.Количество() Тогда
		
		ПредставлениеОтбора = ПолучитьПредставлениеОтбора(МассивОтборов);
		Если ИсторияОтборов.Количество() > 0 Тогда
			
			НО_ИмяПредыдущейКоманды	= "НО"+ИсторияОтборов[0].Значение.ИмяКоманды;
			ЕО_ИмяПредыдущейКоманды	= "ЕО"+ИсторияОтборов[0].Значение.ИмяКоманды;
			
			КоличествоПроходовЦикла = ИсторияОтборов.Количество()-1;
			Для i=0 По КоличествоПроходовЦикла Цикл
				Если ПредставлениеОтбора = ИсторияОтборов[i].Представление Тогда
					ПереместитьЭлементФормы("НО"+ИсторияОтборов[i].Значение.ИмяКоманды, "РА_НО_ИсторияОтборов", НО_ИмяПредыдущейКоманды);
					ПереместитьЭлементФормы("ЕО"+ИсторияОтборов[i].Значение.ИмяКоманды, "РА_ЕО_ИсторияОтборов", ЕО_ИмяПредыдущейКоманды);
					ИсторияОтборов.Сдвинуть(i, -i);
					Прервать;
				//Это новый элемент создаем вначале списка значений, так же команду устанавливаем вначало списка
				ИначеЕсли i = КоличествоПроходовЦикла Тогда
					ДобавитьКомандуКФорме(ИмяКоманды, ПредставлениеОтбора); 
					ВставитьКнопкуФормы("НО"+ИмяКоманды, ИмяКоманды, ПредставлениеОтбора, Элементы.РА_НО_ИсторияОтборов, Элементы.Найти(НО_ИмяПредыдущейКоманды), ВидКнопкиФормы.КнопкаКоманднойПанели);
					ВставитьКнопкуФормы("ЕО"+ИмяКоманды, ИмяКоманды, ПредставлениеОтбора, Элементы.РА_ЕО_ИсторияОтборов, Элементы.Найти(ЕО_ИмяПредыдущейКоманды), ВидКнопкиФормы.КнопкаКоманднойПанели);
					ИсторияОтборов.Вставить(0, Новый Структура("ИмяКоманды, МассивОтборов", ИмяКоманды, МассивОтборов), ПредставлениеОтбора);
				КонецЕсли;	
			КонецЦикла;
			
		Иначе
			
			ДобавитьКомандуКФорме(ИмяКоманды, ПредставлениеОтбора);
			ВставитьКнопкуФормы("НО"+ИмяКоманды, ИмяКоманды, ПредставлениеОтбора, Элементы.РА_НО_ИсторияОтборов, , ВидКнопкиФормы.КнопкаКоманднойПанели);
			ВставитьКнопкуФормы("ЕО"+ИмяКоманды, ИмяКоманды, ПредставлениеОтбора, Элементы.РА_ЕО_ИсторияОтборов, , ВидКнопкиФормы.КнопкаКоманднойПанели);
			ИсторияОтборов.Вставить(0, Новый Структура("ИмяКоманды, МассивОтборов", ИмяКоманды, МассивОтборов), ПредставлениеОтбора);
			
		КонецЕсли;
			
	КонецЕсли;
	
	//Элементов больше 20, удаляем лишнее
	Если ИсторияОтборов.Количество() = 21 Тогда
		
		ИмяКоманды = ИсторияОтборов[20].Значение.ИмяКоманды; 
		НО_ИмяПоследнегоЭлемента = "НО"+ИмяКоманды;
		ЕО_ИмяПоследнегоЭлемента = "ЕО"+ИмяКоманды;
		
		Команда 	= Команды.Найти(ИмяКоманды);
		НО_Элемент  = Элементы.Найти(НО_ИмяПоследнегоЭлемента);
		ЕО_Элемент	= Элементы.Найти(ЕО_ИмяПоследнегоЭлемента);;
		
		Если НЕ Команда    = Неопределено Тогда УдалитьКомандуФормы(Команда); 	 КонецЕсли;
		Если НЕ НО_Элемент = Неопределено Тогда УдалитьЭлементФормы(НО_Элемент); КонецЕсли;
		Если НЕ ЕО_Элемент = Неопределено Тогда УдалитьЭлементФормы(ЕО_Элемент); КонецЕсли;
	
		ИсторияОтборов.Удалить(20);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеОтбора(МассивОтборов)	
	ПредставлениеОтбора = "";
	КоличествоЭлементов = МассивОтборов.Количество()-1;
	Для i=0 По КоличествоЭлементов Цикл
		ПредставлениеОтбора = ПредставлениеОтбора + МассивОтборов[i].ЛевоеЗначение  + " "  
												  +	МассивОтборов[i].ВидСравнения   + " """ 
												  + МассивОтборов[i].ПравоеЗначение + ?(i<КоличествоЭлементов, """, ", """");	
	КонецЦикла;
	Возврат ПредставлениеОтбора;	
КонецФункции





&НаСервере
Процедура ДобавитьКомандуКФорме(ИмяКоманды, Заголовок)
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "РА_ОтборИстория";
	Команда.Заголовок = Заголовок;	
КонецПроцедуры

&НаСервере
Процедура УдалитьКомандуФормы(Команда)	
	Команды.Удалить(Команда);	
КонецПроцедуры

&НаСервере
Процедура ВставитьКнопкуФормы(Имя, ИмяКоманды, Заголовок, Родитель, Элемент = Неопределено, ВидКнопкиФормы)
	КомандаФормы = Элементы.Вставить(Имя, Тип("КнопкаФормы"), Родитель, Элемент);
	КомандаФормы.ИмяКоманды = ИмяКоманды;
	КомандаФормы.Заголовок  = Заголовок;
	КомандаФормы.Вид  		= ВидКнопкиФормы;	
КонецПроцедуры

&НаСервере
Процедура ПереместитьЭлементФормы(ИмяЭлемента, ИмяРодителя, МестоРасположения)
	Элементы.Переместить(Элементы.Найти(ИмяЭлемента), Элементы.Найти(ИмяРодителя), Элементы.Найти(МестоРасположения));	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(Элемент) 
	Элементы.Удалить(Элемент);	
КонецПроцедуры




&НаСервере
Функция ПолучитьМассивИмен(ИмяЭлемента)
	
	МассивСлов = Новый Массив;
	ЧислоВхождений = СтрЧислоВхождений(ИмяЭлемента, "_");
	Если ЧислоВхождений = 0 Тогда
		МассивСлов.Добавить(ИмяЭлемента);
	Иначе
		Для Итератор = 0 По ЧислоВхождений - 1 Цикл
			Разделитель = Найти(ИмяЭлемента, "_");
			МассивСлов.Добавить(Лев(ИмяЭлемента, Разделитель - 1));
			ИмяЭлемента = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Разделитель);			
		КонецЦикла;
	    МассивСлов.Добавить(ИмяЭлемента);
	КонецЕсли;
	
	Возврат МассивСлов;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизита(АдресРеквизита, Объект)
	Перем ЗначениеРеквизита;
	Выполнить("ЗначениеРеквизита = Объект." + АдресРеквизита + ";");
	Возврат ЗначениеРеквизита;
КонецФункции

&НаСервере
Процедура ФормироватьАдресРеквизита(i, Колич_Имен, МетаВремЗначение, ВремЗначение, АдресРеквизита)
	Если i + 1 <= Колич_Имен Тогда
		//Из описания типа получаем метаданные
    	МетаВремЗначение = ВремЗначение.Тип.ПривестиЗначение(Неопределено).Метаданные();
		АдресРеквизита = АдресРеквизита + ".";
	КонецЕсли;	
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                  										//
//            			 								КОНЕЦ										    					//
//                                                                                 										 	//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




&НаСервере
Процедура СформироватьОтчетИсторииРаботыПользователей()
	СтатистикаПолеHTMLДокумента = "<!DOCTYPE html> <html><body> " + git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок").СформироватьОтчетИсторииРаботыПользователей() + "</body></html>";
	//Элементы.СтатистикаПолеHTMLДокумента.
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаСервере
Процедура ПрочитатьСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	АльпыОбъект = РеквизитФормыВЗначение("Объект");
	ТабЗнч = АльпыОбъект.ИнициализироватьКешТаблицуЗначений();
	АльпыОбъект.ПрочитатьТабличныйДокумент(РеквизитФормыВЗначение("ПрофильАнализа"), ТабличныйДокумент, ТабЗнч, Формула);

	ВыполнитьОперацииИнициализацииДанных(АльпыОбъект, ТабЗнч);
	
КонецПроцедуры // ПрочитатьСервер()

&НаСервере
Процедура ПрочитатьФайлИзДискаСервер(Соглашение, СтруктураФайл, АдресФайлаВоВременномХранилище)

	УстановитьПривилегированныйРежим(Истина);
	
	АльпыОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент.Очистить();
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла(СтруктураФайл.Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ДвоичныеДанные.Записать(ПутьКФайлу); 
	Файл = Новый Файл(ПутьКФайлу);
	
	Если Автоматизация_ФайлПрайсЛиста.Пустая() Тогда
		Автоматизация_ФайлПрайсЛиста = ПрисоединенныеФайлы.ДобавитьФайл(Соглашение, 
																		СтруктураФайл.ИмяБезРасширения, 
																		СтруктураФайл.Расширение, 
																		СтруктураФайл.ВремяИзменения, 
																		СтруктураФайл.УниверсальноеВремяИзменения, 
																		АдресФайлаВоВременномХранилище);
		ОбновитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
	Если 		ВРег(Файл.Расширение) = ".MXL" Тогда
		АльпыОбъект.ПрочитатьФайлMXLСервер(Файл.ПолноеИмя, ТабличныйДокумент);
	ИначеЕсли   ВРег(Файл.Расширение) = ".XML" Тогда
		АльпыОбъект.ПрочитатьФайлXMLСервер(Файл.ПолноеИмя, ТабличныйДокумент);
	ИначеЕсли 	ВРег(Файл.Расширение) = ".XLS" Тогда
		АльпыОбъект.ПрочитатьФайлXLSСервер(Файл.ПолноеИмя, ТабличныйДокумент, СтраницыПрайса);
	ИначеЕсли 	ВРег(Файл.Расширение) = ".XLSX" Тогда
		АльпыОбъект.ПрочитатьФайлXLSXСервер(Файл.ПолноеИмя, ТабличныйДокумент, СтраницыПрайса);
	ИначеЕсли 	ВРег(Файл.Расширение) = ".CSV" Тогда
		ВызватьИсключение "";
	Иначе
		СообщениеПользователю = НСтр("ru='Данные тип файла: %Расширение% не поддерживается'");
		Сообщить(СтрЗаменить(СообщениеПользователю, "%Расширение%", Автоматизация_ФайлПрайсЛиста.Расширение));
		УдалитьФайлы(ПутьКФайлу);
		Возврат;
	КонецЕсли;
	
	ТабЗнч = АльпыОбъект.ИнициализироватьКешТаблицуЗначений();
	Попытка
		АльпыОбъект.ПрочитатьТабличныйДокумент(РеквизитФормыВЗначение("ПрофильАнализа"), ТабличныйДокумент, ТабЗнч, Формула);
	Исключение
		Сообщить(НСтр("ru='В формулах присутствуют ошибки или прайс-лист является ошибочным, оставлена старая версия прайса!'"));
		УдалитьФайлы(ПутьКФайлу);
		Возврат;	
	КонецПопытки;
	
	УдалитьФайлы(ПутьКФайлу);
	
    ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Автоматизация_ФайлПрайсЛиста, 
			Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", АдресФайлаВоВременномХранилище, Ложь));
	ВыполнитьКешированиеПрайсЛиста(Автоматизация_ФайлПрайсЛиста, ТабличныйДокумент, ALPS_ИспользоватьКешированиеПрайсЛистов);
	
	ВыполнитьОперацииИнициализацииДанных(АльпыОбъект, ТабЗнч);
			
КонецПроцедуры // ПрочитатьФайлИзДискаСервер()

&НаСервере
Процедура ПрочитатьФайлИзСоглашенияСервер(Соглашение)
	
	УстановитьПривилегированныйРежим(Истина);

	АльпыОбъект = РеквизитФормыВЗначение("Объект");
	ТабличныйДокумент.Очистить();
	
	ФайлПрайсЛиста = Автоматизация_ФайлПрайсЛиста;
	Если НЕ ФайлПрайсЛиста.Пустая() Тогда
		
		ПутьКФайлу = АльпыОбъект.ПолучитьПутьКФайлуСоглашения(ФайлПрайсЛиста, ALPS_ИспользоватьКешированиеПрайсЛистов);
		
		Если ПутьКФайлу = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Файл = Новый Файл(ПутьКФайлу);
		Если 		ВРег(Файл.Расширение) = ".MXL" Тогда
			АльпыОбъект.ПрочитатьФайлMXLСервер(ПутьКФайлу, ТабличныйДокумент);
		ИначеЕсли   ВРег(Файл.Расширение) = ".XML" Тогда
			АльпыОбъект.ПрочитатьФайлXMLСервер(ПутьКФайлу, ТабличныйДокумент);
			ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, ТабличныйДокумент, ALPS_ИспользоватьКешированиеПрайсЛистов);
		ИначеЕсли 	ВРег(Файл.Расширение) = ".XLS" Тогда
			АльпыОбъект.ПрочитатьФайлXLSСервер(ПутьКФайлу, ТабличныйДокумент, СтраницыПрайса);
			ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, ТабличныйДокумент, ALPS_ИспользоватьКешированиеПрайсЛистов);
		ИначеЕсли 	ВРег(Файл.Расширение) = ".XLSX" Тогда
			АльпыОбъект.ПрочитатьФайлXLSXСервер(ПутьКФайлу, ТабличныйДокумент, СтраницыПрайса);
			ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, ТабличныйДокумент, ALPS_ИспользоватьКешированиеПрайсЛистов);
		//ИначеЕсли 	ВРег(Файл.Расширение) = ".CSV" Тогда
		//	ПрочитатьФайлCSVСервер(Файл.Имя, Файл.Путь, ТабличныйДокумент);
		//	ОбъектБиблиотека.ПрочитатьФайлCSVСервер(ПутьКФайлу, ТабличныйДокумент, СтраницыПрайса);
		//	Если ALPS_ИспользоватьКешированиеПрайсЛистов Тогда
		//		ОбъектБиблиотека.ЗаписатьФайлMXLСервер(ФайлПрайсЛиста, ТабличныйДокумент);
		//	КонецЕсли;
		Иначе
			Сообщить("Данные тип файла:" + ФайлПрайсЛиста.Расширение + " не поддерживается");
			УдалитьФайлы(ПутьКФайлу);
			Возврат;
		КонецЕсли;
		
		УдалитьФайлы(ПутьКФайлу);
		
		
		ТабЗнч = АльпыОбъект.ИнициализироватьКешТаблицуЗначений();
		АльпыОбъект.ПрочитатьТабличныйДокумент(РеквизитФормыВЗначение("ПрофильАнализа"), ТабличныйДокумент, ТабЗнч, Формула);
		
		ВыполнитьОперацииИнициализацииДанных(АльпыОбъект, ТабЗнч);		
		
		FullRefreshЗаголовокALPSСервер();
		
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьФайлИзСоглашенияСервер()

&НаСервере
Процедура ВыполнитьКешированиеПрайсЛиста(ФайлПрайсЛиста, КешДокумент, ИспользоватьКеширование)
	Если ИспользоватьКеширование Тогда
		РеквизитФормыВЗначение("Объект").ЗаписатьФайлMXLСервер(ФайлПрайсЛиста, КешДокумент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОперацииИнициализацииДанных(АльпыОбъект, ТабЗнч)
	
	АльпыОбъект.БыстрыйПоискСоответствий(Соглашение, ТабЗнч, Привязка, ВхЦена, КнЦена);
	АльпыОбъект.СформироватьШапкуТабличногоДокумента(РеквизитФормыВЗначение("ПрофильАнализа"), ТабличныйДокумент);
	
	ALPS_Итого 	   = ТабЗнч.Количество();	
	ALPS_Привязано = ALPS_Итого - ТабЗнч.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())).Количество();

	АдресВПамятиРезультатАнализа = ПоместитьВоВременноеХранилище(ТабЗнч, УникальныйИдентификатор);		
	
	ВыполнитьКомандуОтбораСервер(КомпоновщикНастроек);
	
КонецПроцедуры



&НаСервере
Процедура ОбновитьАктуальностьНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Регл. обновление прайс-листов").ALPS_ОбновитьАктуальность();		

КонецПроцедуры // ОбновитьАктуальностьНаСервере()
 




// Статистика привязок

 
&НаКлиенте
Процедура СформироватьОтчетСтатистикаПривязокНаКлиенте()
	СсылкаНаБиблиотеку = ПолучитьСсылкуНаВнешнююОбработку();
	ОткрытьФорму("ВнешнийОтчет."+СсылкаНаБиблиотеку+".Форма", , ЭтаФорма, Новый УникальныйИдентификатор);
КонецПроцедуры // СформироватьОтчетСтатистикаПривязокНаклиенте()

&НаСервере
Функция ПолучитьСсылкуНаВнешнююОбработку()
	СсылкаНаБиблиотеку 		= Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Статистика привязок");
	ДвоичныеДанные 			= СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища 			= ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ВнешниеОтчеты.Подключить(АдресХранилища, , Ложь);
КонецФункции // ПолучитьСсылкуНаВнешнююОбработку()







// Чтение штрих кодов

&НаСервере
Процедура ЗагрузитьШтрихкодыНаСервере()
	ТЗ_РезультатАнализа  = РеквизитФормыВЗначение("РезультатАнализа");
	РеквизитФормыВЗначение("Объект").ЗагрузитьШтрихкоды(ТЗ_РезультатАнализа);
КонецПроцедуры // ПрочитатьШтрихКодыНаСервере()

 
 



// Ключевые слова
&НаКлиенте
Процедура КлючевыеСловаСловоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.КлючевыеСлова.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Ключ = Истина;
	КонецЕсли;
КонецПроцедуры






&НаКлиенте
Процедура ПохожиеОбъектыНоменклатураПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ОтменаПеретаскивания = Ложь;

    РеквизитДерево = ЭтаФорма["ПохожиеОбъектыНоменклатура"];

    ИДПриемник = Строка;
    // Если ИДПриемник = Неопределено => Корень дерева
    Приемник = ?(ИДПриемник = Неопределено, Неопределено,
        РеквизитДерево.НайтиПоИдентификатору(ИДПриемник));

    МассивИДИсточник = ПараметрыПеретаскивания.Значение;

    Для Каждого ИДИсточник Из МассивИДИсточник Цикл
		
		Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
		Родитель = Источник.ПолучитьРодителя();

        НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник);
		ИдентификаторНовойСтрокиПриемника = НоваяСтрока.ПолучитьИдентификатор();
		РодительНоваяСтрока = НоваяСтрока.ПолучитьРодителя();
		
		Если НЕ РодительНоваяСтрока.Владелец.Пустая()
		 ИЛИ НЕ РодительНоваяСтрока.Соглашение.Пустая() Тогда
			СкопироватьСтрокуДерева(РеквизитДерево, Родитель, НоваяСтрока);
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементДереваПриемника Из РодительНоваяСтрока.ПолучитьЭлементы() Цикл
			Если ЭлементДереваПриемника.ПолучитьИдентификатор() = ИдентификаторНовойСтрокиПриемника Тогда
			 	Продолжить;
			КонецЕсли; 
			Если ЭлементДереваПриемника.Владелец = НоваяСтрока.Владелец Тогда
				ОтменаПеретаскивания = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ОтменаПеретаскивания Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Привязка к этой номенклатуре уже существует в прайсе поставщика'"));
			СкопироватьСтрокуДерева(РеквизитДерево, Родитель, НоваяСтрока);
			Продолжить;
		КонецЕсли; 
						
		Если Родитель.ЭтоПривязано 
		   И РодительНоваяСтрока.ЭтоПривязано
		   И Владелец = НоваяСтрока.Владелец Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Привязка к этой номенклатуре уже существует в этом прайсе'"));
			СкопироватьСтрокуДерева(РеквизитДерево, Родитель, НоваяСтрока);
			Продолжить;
		КонецЕсли; 
		
		Если Владелец = Источник.Владелец И НЕ Родитель = Неопределено Тогда
			Родитель.ЭтоПривязано = Ложь;
		КонецЕсли;

		Если Владелец = НоваяСтрока.Владелец И НЕ РодительНоваяСтрока = Неопределено Тогда
			РодительНоваяСтрока.ЭтоПривязано = Истина;
		КонецЕсли;
		
		// Производится копирование в корень
		// Для "красоты" развернем вновь созданную ветвь
		Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда
			Элементы["ПохожиеОбъектыНоменклатура"].Развернуть(НоваяСтрока.ПолучитьИдентификатор(),
				Истина);
		КонецЕсли;
		
		Если РодительНоваяСтрока = Родитель Тогда
			Продолжить;
		КонецЕсли;
		
		РодительНоваяСтрока.ЭтоПривязано = Ложь;
		Для каждого ЭлементРодильНоваяСтрока Из РодительНоваяСтрока.ПолучитьЭлементы() Цикл
			Если ЭлементРодильНоваяСтрока.ЭтоПривязано Тогда
				РодительНоваяСтрока.ЭтоПривязано = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Родитель.ЭтоПривязано = Ложь;
		Для каждого ЭлементРодиль Из Родитель.ПолучитьЭлементы() Цикл
			Если ЭлементРодиль.ЭтоПривязано Тогда
				Родитель.ЭтоПривязано = Истина;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура("Номенклатура, НоменклатураКод, НоменклатураАртикул, НоменклатураНаименование");
		СтруктураПараметров.Номенклатура = РодительНоваяСтрока.Номенклатура;
		СтруктураПараметров.НоменклатураКод = РодительНоваяСтрока.Код;
		СтруктураПараметров.НоменклатураАртикул = РодительНоваяСтрока.Артикул;
		СтруктураПараметров.НоменклатураНаименование = РодительНоваяСтрока.Наименование;
		ОбработатьСменуПривязкиНаСервере(СтруктураПараметров, НоваяСтрока.НомПоставщика);
		
    КонецЦикла;

    // Для "красоты" развернем ветвь-родителя
    Если НЕ Приемник = Неопределено Тогда
        Элементы["ПохожиеОбъектыНоменклатура"].Развернуть(ИДПриемник, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъектыНоменклатураПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка=Ложь;
	
	РеквизитДерево = ЭтаФорма["ПохожиеОбъектыНоменклатура"];
	
	ИДНовыйРодитель = Строка;
    // Если НовыйРодитель = Неопределено => Корень дерева
    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено,
    РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

    МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

    Для каждого ИДПереносимыйЭлемент из МассивИДПереносимыхЭлементов Цикл

        ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(
            ИДПереносимыйЭлемент);

        Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,
                    НовыйРодитель) Тогда
            ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
            Прервать;
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъектыНоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено ИЛИ ТД.Владелец.Пустая() ИЛИ ТД.НомПоставщика.Пустая() Тогда
		Выполнение = Ложь;
	КонецЕсли;
КонецПроцедуры



&НаСервере
Процедура ОбработатьСменуПривязкиНаСервере(СтруктураПараметров, НоменклатураПоставщика)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатАнализаНаСервере = ПолучитьИзВременногоХранилища(АдресВПамятиРезультатАнализа);
	СтруктураПоиска = Новый Структура("НомПосСсылка", НоменклатураПоставщика);	
	ЗаполнитьДанныеПоСтруктуреОчистки(РезультатАнализаНаСервере, СтруктураПоиска, СтруктураПараметров);
	ЗаполнитьДанныеПоСтруктуреОчистки(РезультатАнализа, СтруктураПоиска, СтруктураПараметров);
	АдресВПамятиРезультатАнализа = ПоместитьВоВременноеХранилище(РезультатАнализаНаСервере, УникальныйИдентификатор);
	
	ОбъектНоменклатура = НоменклатураПоставщика.ПолучитьОбъект();
	ОбъектНоменклатура.Номенклатура = СтруктураПараметров.Номенклатура;
	ОбъектНоменклатура.Записать();	
	
КонецПроцедуры

 



&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ПолучитьЗначениеПривязкиПоСтроке(ВариантПривязки)
	
	Если ВариантПривязки = "коду номенклатуры" Тогда
		Возврат 1;
	ИначеЕсли ВариантПривязки = "артикулу номенклатуры" Тогда
		Возврат 2;
	ИначеЕсли ВариантПривязки = "коду и артикулу номенклатуры" Тогда
		Возврат 3;
	ИначеЕсли ВариантПривязки = "наименованию номенклатуры" Тогда
		Возврат 4;
	КонецЕсли;		
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеВариантПривязкиПоЧислу(Привязка)
	
	Если Привязка = 1 Тогда
		Возврат "коду номенклатуры";
	ИначеЕсли Привязка = 2 Тогда
		Возврат "артикулу номенклатуры";
	ИначеЕсли Привязка = 3 Тогда
		Возврат "коду и артикулу номенклатуры";
	ИначеЕсли Привязка = 4 Тогда
		Возврат "наименованию номенклатуры";
	КонецЕсли;		
	
КонецФункции

// Кодирует строку в cp1251 
// Параметры:
//  Строка - Строка - кодируемая строка
//
// Возвращаемое значение:
//	Строка - Строка перекодированая в cp1251	
//
&НаСервереБезКонтекста
Функция КодироватьСтрокуСервер(Строка)
    Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.КодировкаURL, "cp1251");
КонецФункции






&НаКлиенте
Процедура ТекущаяСтраницаПриИзменении(Элемент)
	
	Если СтраницаТекущая > СтраницыВсего Тогда
		СтраницаТекущая = СтраницыВсего;
	КонецЕсли;
	ЗагрузитьНоменклатуруСтраницы();
	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьНоменклатуруСтраницы()
	
	СтраничноеОтображение = ПолучитьИзВременногоХранилища(СтраничноеОтображениеАдрес);
	РезультатАнализа.Очистить();
	КонечныйИндекс = ?(СтраницаТекущая * 500 <= СтраничноеОтображение.Количество(), СтраницаТекущая * 500 - 1, СтраничноеОтображение.Количество() - 1);
	Для НачальныйИндекс = (СтраницаТекущая - 1) * 500 По КонечныйИндекс Цикл ЗаполнитьЗначенияСвойств(РезультатАнализа.Добавить(), СтраничноеОтображение[НачальныйИндекс]); КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьТаблицыВПамяти(Знач СтрокаПрайса)
	
	ПараметрыОтбора = ПолучитьСтруктуруОтбораОбновленияТаблицВПамяти();
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаПрайса);
	ВыполнитьОбновлениеТаблицыВПамяти(АдресВПамятиРезультатАнализа, СтрокаПрайса, ПараметрыОтбора);
	ВыполнитьОбновлениеТаблицыВПамяти(СтраничноеОтображениеАдрес, СтрокаПрайса, ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеТаблицыВПамяти(АдресВПамяти, СтрокаПрайса, Знач ПараметрыОтбора)
	
	ТаблицаВПамяти = ПолучитьИзВременногоХранилища(АдресВПамяти);
	РезультатПоиска = ТаблицаВПамяти.НайтиСтроки(ПараметрыОтбора);
	Если РезультатПоиска <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РезультатПоиска[0], СтрокаПрайса);
		АдресВПамяти = ПоместитьВоВременноеХранилище(ТаблицаВПамяти, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОтбораОбновленияТаблицВПамяти()
	
	Структура = Новый Структура;	
	Структура.Вставить("Код");
	Структура.Вставить("Артикул");
	Структура.Вставить("Наименование");
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруОтбораДляОбновленияТаблицВПамяти()


