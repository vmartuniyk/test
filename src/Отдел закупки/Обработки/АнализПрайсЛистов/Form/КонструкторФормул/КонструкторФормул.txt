&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг = 0)
	
	СтрокаНач = 0;
	СтрокаКон = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	
	Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстДляВставки)) > Элементы.Формула.Ширина / 8 Тогда
		Элементы.Формула.ВыделенныйТекст = "";
	КонецЕсли;
		
	Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
	
	Если Не Сдвиг = 0 Тогда
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Элементы.Формула.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач - Сдвиг, СтрокаКон, КолонкаКон - Сдвиг);
	КонецЕсли;
		
	ТекущийЭлемент = Элементы.Формула;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВставитьОперандВФормулу();
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОперандВФормулу()
	
	ВставитьТекстВФормулу(РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Элементы.Операнды.ТекущиеДанные.Идентификатор));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивОперандов()
	
	
	МассивОперандов = Новый Массив();
	
	Если СтроковаяФормула Тогда
		
		ТекстФормулы = СокрЛП(Формула);
		Если СтрЧислоВхождений(ТекстФормулы, "[") <> СтрЧислоВхождений(ТекстФормулы, "]") Тогда
			ЕстьОперанды = Ложь;
		Иначе
			ЕстьОперанды = Истина;
		КонецЕсли;
		
		Пока ЕстьОперанды = Истина Цикл
			НачалоОперанда = Найти(ТекстФормулы, "[");
			КонецОперанда = Найти(ТекстФормулы, "]");
			
			Если НачалоОперанда = 0
				Или КонецОперанда = 0
				Или НачалоОперанда > КонецОперанда Тогда
				ЕстьОперанды = Ложь;
				Прервать;
				
			КонецЕсли;
			
			ИмяОперанда = Сред(ТекстФормулы, НачалоОперанда + 1, КонецОперанда - НачалоОперанда - 1);
			МассивОперандов.Добавить(ИмяОперанда);
			ТекстФормулы = СтрЗаменить(ТекстФормулы, "[" + ИмяОперанда + "]", "");
			КонецПрошлогоОперанда = КонецОперанда;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекСтрока Из Операнды Цикл
			
			МассивОперандов.Добавить(ТекСтрока.Идентификатор);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивОперандов;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Формула = Параметры.Формула;	
	Для i = 1 По 32 Цикл
		НоваяСтрока = Операнды.Добавить();
		НоваяСтрока.Идентификатор = "R$C" + i;
	КонецЦикла;
		
 	ДеревоОператоров = ПолучитьИзВременногоХранилища(Параметры.Операторы);
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	
	Если Параметры.Свойство("Заголовок") Тогда
		Элементы.ГруппаОперанды.Заголовок = Параметры.Заголовок;
		Элементы.ГруппаОперанды.Подсказка = Параметры.Заголовок;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Модифицированность Тогда
		Отказ = Истина;
		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, ПолучитьМассивОперандов(), "Формула", , СтроковаяФормула) Тогда
				
				Модифицированность = Ложь;
				Закрыть(Формула);
				
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
			Модифицированность = Ложь;
			Закрыть(Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОператорВФормулу()
	Если Элементы.Операторы.ТекущиеДанные.Наименование = "Формат" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		ФорматСтроки.ОткрытьМодально();
		Если ЗначениеЗаполнено(ФорматСтроки.Текст) Тогда
			ТекстДляВставики = "Формат( , """ + ФорматСтроки.Текст + """)";
			ВставитьТекстВФормулу(ТекстДляВставики, Элементы.Операторы.ТекущиеДанные.Сдвиг);
		Иначе	
			ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
		КонецЕсли;
	Иначе	
		ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВставитьОператорВФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();
	РаботаСФормуламиКлиент.ПроверитьФормулуИнтерактивно(Формула, ПолучитьМассивОперандов(), "Формула", СтроковаяФормула);
	
КонецПроцедуры

&НаКлиенте
Функция  ОбработатьТекстОперанда(ТекстОперанда)
	
	ТекстСтроки = ТекстОперанда;
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "[", "");
	ТекстСтроки = СтрЗаменить(ТекстСтроки, "]", "");
	Операнд = "[" + СтрЗаменить(ТекстСтроки, ?(НаборСвойств.НаборСвойствНоменклатуры, "Номенклатура.", "ХарактеристикаНоменклатуры."), "") + "]";
	
	Возврат Операнд
КонецФункции

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	Если РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, ПолучитьМассивОперандов(), "Формула", , СтроковаяФормула) Тогда
		Закрыть(Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.Значение = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Элемент.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ПометкаУдаления Тогда
		
		Если Вопрос(НСтр("ru = 'Выбранный элемент помечен на удаление'") + Символы.ПС + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			НачалоСтроки  = 0;
			НачалоКолонки = 0;
			КонецСтроки   = 0;
			КонецКолонки  = 0;
			
			Элементы.Формула.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
			Элементы.Формула.ВыделенныйТекст = "";
			Элементы.Формула.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, НачалоКолонки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Оператор) Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Оператор;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные.Оператор = "Формат(,)" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		ФорматСтроки.ОткрытьМодально();
		Если ЗначениеЗаполнено(ФорматСтроки.Текст) Тогда
			ТекстДляВставки = "Формат( , """ + ФорматСтроки.Текст + """)";
			Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


