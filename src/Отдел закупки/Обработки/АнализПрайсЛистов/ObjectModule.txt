Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.5.473";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Анализ прайс-листов (ALPS)");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Анализ прайс-листов (ALPS) [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Анализ прайс-листов (ALPS) [" + Версия + "]", "ALPS", "ОткрытиеФормы", Ложь, "ALPS");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Функция GetLibrary(LibraryName) Экспорт
	Ссылка 		    = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки  = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;	
КонецФункции

Функция GetLibraryName(LibraryName) Экспорт
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);	
КонецФункции







Процедура СоздатьШаблонПрофиляАнализа(ШаблонПрофиля) Экспорт
	ШаблонПрофиля.Строки.Очистить();
	Если 	  Метаданные.Имя = "УправлениеТорговлей" И Метаданные.Версия = "11.0.9.8" Тогда
		ЗаполнитьШаблонПрофиляУТ11_0_9_8(ШаблонПрофиля);
	ИначеЕсли Метаданные.Имя = "УправлениеТорговлей" И (Метаданные.Версия = "11.1.2.6"
												   ИЛИ  Метаданные.Версия = "11.1.2.8") Тогда
		ЗаполнитьШаблонПрофиляУТ11_1_2_6(ШаблонПрофиля);
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьШаблонПрофиляУТ11_0_9_8(ШаблонПрофиля)
		
	МетаПоставщика   = Метаданные.Справочники.НоменклатураПоставщиков;
	МетаНоменклатуры = Метаданные.Справочники.Номенклатура;
	
	//Код поставщика, номенклатуры
	ВставитьВШаблонКод(ШаблонПрофиля, МетаПоставщика, 	"Код", "Код номенклатуры поставщика");
	ВставитьВШаблонКод(ШаблонПрофиля, МетаНоменклатуры, "Код", "Код номенклатуры");
	
	//Артикул поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Артикул";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Артикул";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25));
	
	//Наименование поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	//Родитель поставщика, номенклатуры
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаПоставщика,   "Родитель", "Родитель номенклатуры поставщика");
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаНоменклатуры, "Родитель", "Родитель номенклатуры");

	//Характеристика поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Характеристика";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Характеристика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	
	//Упаковка поставщика
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Упаковка";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Упаковка поставщика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
	
	//Штрихкод
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Штрихкод";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Штрихкод";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	
	//Цена
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Цена";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Цена";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	ВставитьВШаблонРеквизиты(ШаблонПрофиля, МетаНоменклатуры);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные реквизиты";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеРеквизиты(СтрокаВерхнийУровень);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные сведения";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеСведения(СтрокаВерхнийУровень);
	
КонецПроцедуры

Процедура ЗаполнитьШаблонПрофиляУТ11_1_2_6(ШаблонПрофиля)
		
	МетаПоставщика   = Метаданные.Справочники.НоменклатураПоставщиков;
	МетаНоменклатуры = Метаданные.Справочники.Номенклатура;
	
	//Код поставщика, номенклатуры
	ВставитьВШаблонКод(ШаблонПрофиля, МетаПоставщика, 	"Код", "Код номенклатуры поставщика");
	ВставитьВШаблонКод(ШаблонПрофиля, МетаНоменклатуры, "Код", "Код номенклатуры");
	
	//Артикул поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Артикул";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Артикул";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(35));
	
	//Наименование поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	//Родитель поставщика, номенклатуры
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаПоставщика,   "Родитель", "Родитель номенклатуры поставщика");
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаНоменклатуры, "Родитель", "Родитель номенклатуры");

	//Характеристика поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Характеристика";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Характеристика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	
	//Упаковка поставщика
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Упаковка";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Упаковка поставщика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
	
	//Штрихкод
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Штрихкод";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Штрихкод";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	
	//Цена
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Цена";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Цена";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	ВставитьВШаблонРеквизиты(ШаблонПрофиля, МетаНоменклатуры);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные реквизиты";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеРеквизиты(СтрокаВерхнийУровень);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные сведения";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеСведения(СтрокаВерхнийУровень);
	
КонецПроцедуры

Процедура ВставитьВШаблонКод(Дерево, МетаданныеИсточника, ИмяРеквизита, ПредставлениеРеквизита)
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита 			= ИмяРеквизита;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита 	= ПредставлениеРеквизита;
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ВставитьВШаблонРодителя(Дерево, МетаданныеИсточника, ИмяРеквизита, ПредставлениеРеквизита)
	Если МетаданныеИсточника.Иерархический Тогда
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = ИмяРеквизита;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = ПредставлениеРеквизита;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	КонецЕсли;	
КонецПроцедуры

Процедура ВставитьВШаблонРеквизиты(Дерево, МетаданныеИсточника)
		
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			Если Реквизит.Имя = "Артикул" Тогда Продолжить; КонецЕсли;
			ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов		   = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьВШаблонДополнительныеРеквизиты(Дерево)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Свойство.ТипЗначения КАК ТипЗначения,
		|	Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие) ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Выборка.Свойство.УникальныйИдентификатор();
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Выборка.Свойство;
		ЗагружаемыйРеквизит.ОписаниеТипов		   = Выборка.ТипЗначения;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьВШаблонДополнительныеСведения(Дерево)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Свойство.ТипЗначения КАК ТипЗначения,
		|	Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие) ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Выборка.Свойство.УникальныйИдентификатор();
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Выборка.Свойство;
		ЗагружаемыйРеквизит.ОписаниеТипов		   = Выборка.ТипЗначения;
	КонецЦикла;
	
КонецПроцедуры





Процедура СформироватьШапкуТабличногоДокумента(Дерево, ТабДок) Экспорт
	
	ОчиститьШапкуТабличногоДокумента(ТабДок);
		
	ПараметрыОтбораОбщ 	= Новый Структура("Пометка", Истина);
	ПараметрыОтбораЦен  = Новый Структура("ИмяРеквизита", "Цена");
	ОтобранныеСтрокиОбщ = Дерево.Строки.НайтиСтроки(ПараметрыОтбораОбщ, Истина);
	ОтобранныеСтрокиЦен = Дерево.Строки.НайтиСтроки(ПараметрыОтбораЦен, Истина);
		
	Для Каждого ЗагружаемыйРеквизит Из ОтобранныеСтрокиОбщ Цикл
		
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если Не ЗагружаемыйРеквизит.Пометка	ИЛИ НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
	    	ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
			Если ПервыйТип = Тип("Строка") Тогда
				Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
					ШиринаКолонки = 50;
				Иначе
					ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),50);
				КонецЕсли;
			ИначеЕсли ПервыйТип = Тип("Число") Тогда
				ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10);
			ИначеЕсли ПервыйТип = Тип("Булево") Тогда
				ШиринаКолонки = 10;
			КонецЕсли;
		КонецЕсли;

		Область = ТабДок.Область("R1C"+НомерКолонки);
		БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст, Область.Текст + Символы.ПС, "") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		
		ОбластьКолонки = ТабДок.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст, Макс(ОбластьКолонки.ШиринаКолонки, ШиринаКолонки), ШиринаКолонки);
		
		
		Если ТабДок.ВысотаТаблицы > 1 Тогда
			ОбластьДанных = ТабДок.Область("R2C" + НомерКолонки + ":R" + Формат(ТабДок.ВысотаТаблицы, "ЧГ=") + "C" + НомерКолонки);
			ОбластьДанных.ЦветФона = WebЦвета.ЦианСветлый;
			Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
			ОбластьДанных.Обвести(Линия, Линия, Линия, Линия);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЦветШапкиТабличногоДокумента(ТабДок);
			
КонецПроцедуры

Процедура ОчиститьШапкуТабличногоДокумента(ТабличныйДокумент)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);	
	Для Инд = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Область 		 = ТабличныйДокумент.Область("R1C"+Инд);
		Область.Текст 	 = "";
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		Область.Обвести(Линия, Линия, Линия, Линия);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЦветШапкиТабличногоДокумента(ТабличныйДокумент)

	Для Инд = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Область 		 = ТабличныйДокумент.Область("R1C"+Инд);
		Область.ЦветФона = Новый Цвет(255, 250, 205);
	КонецЦикла;	

КонецПроцедуры
 


Процедура ПрочитатьТабличныйДокумент(ДеревоПрофиля, ТабДок, ТабЗнч, Формула) Экспорт
	
	СкриптФормулы = "";
	СкриптВыполнения = "";
	Операнды = Новый Соответствие;	
	Для i = 1 По ТабДок.ШиринаТаблицы Цикл Операнды.Вставить("[R$C" + i + "]", "ТабДок.Область(""R$C" + i + """).Текст"); КонецЦикла;
	
	Для Каждого Элемент Из ДеревоПрофиля.Строки Цикл
		Булево_ОбщЗагружать = Элемент.Пометка И (Элемент.НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(Элемент.Выражение));
		Если Элемент.ПредставлениеРеквизита = "Код номенклатуры поставщика" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Код = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение); 	
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
        ИначеЕсли Элемент.ИмяРеквизита = "Артикул" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Артикул = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Наименование" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Наименование = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Штрихкод" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Штрихкод = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Цена" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "Попытка СтрокаТабЗнч.Цена = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + "Число(" + ПраваЧасть + "); Исключение СтрокаТабЗнч.Цена = 999999.99 КонецПопытки;";
		КонецЕсли;
	КонецЦикла;
	
	Если СкриптВыполнения = "" Тогда Возврат; КонецЕсли;
	
	ТабЗнч.Очистить();
	ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Формула);
	СтрокаФормулы = ПустаяСтрока(ПраваЧасть);
	Для i = 2 По ТабДок.ВысотаТаблицы Цикл iter = Формат(i, "ЧГ=0"); Если ?(СтрокаФормулы, Ложь, Вычислить(СтрЗаменить(ПраваЧасть, "R$", "R" + iter))) Тогда Продолжить; КонецЕсли; СтрокаТабЗнч = ТабЗнч.Добавить(); СтрокаТабЗнч.НомерСтроки = i; Выполнить(СтрЗаменить(СкриптВыполнения, "R$", "R" + iter)); КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Выражение)
	ПраваЧасть = Выражение;
	Для Каждого Операнд Из Операнды Цикл ПраваЧасть = СтрЗаменить(ПраваЧасть, Операнд.Ключ, Операнд.Значение); КонецЦикла;	
КонецПроцедуры

Процедура БыстрыйПоискСоответствий(Соглашение, ТабЗнч, Привязка, ВидЦены1 = Неопределено, ВидЦены2 = Неопределено) Экспорт
	
	Если 		Привязка = 1 Тогда
		ПараметрСтрока = "И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   Привязка = 2 Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул";
	ИначеЕсли   Привязка = 3 Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   Привязка = 4 Тогда
		ПараметрСтрока = "И НомПоставщика.Наименование = ВЫРАЗИТЬ(ТабЗнч.Наименование КАК Строка(100))";
	Иначе 
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|   ТабЗнч.Цена
		|
		|ПОМЕСТИТЬ ТабКеш
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки						КАК НомерСтроки,
		|	НомПоставщика.Номенклатура 				КАК Номенклатура,
		|	НомПоставщика.Номенклатура.Код 			КАК НоменклатураКод,
		|   НомПоставщика.Номенклатура.Артикул		КАК НоменклатураАртикул,
		|   НомПоставщика.Номенклатура.Наименование	КАК НоменклатураНаименование,
		|	НомПоставщика.Характеристика 			КАК Характеристика,
		|  	НомПоставщика.Ссылка    				КАК НомПосСсылка
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		|	ТабКеш КАК ТабЗнч
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НомПоставщика
		|ПО НомПоставщика.Владелец = &Владелец 
		| " + ПараметрСтрока + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Номенклатура	КАК Номенклатура,
		|	ВидЦены 		КАК ВидЦены,
		|	Характеристика 	КАК Характеристика,
		|	Цена 			КАК Цена
		|ПОМЕСТИТЬ КешЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (	ВЫБРАТЬ
		|																			Номенклатура
		|																		ИЗ
		|																			КешНоменклатуры)
		|												   И ВидЦены В (&ВидЦены1, &ВидЦены2)) 
		|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Номенклатура,
		//|	ВидЦены,
		//|	Характеристика
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|
		|   ТабЗнч.Цена,
		|	ВЫБОР 
		|		КОГДА ТабЗнч.Цена = ТрендСоглашение.Цена
		|		ТОГДА 6
		|		КОГДА ТабЗнч.Цена > ТрендСоглашение.Цена
		|		ТОГДА 1
		|		КОГДА ТабЗнч.Цена < ТрендСоглашение.Цена
		|		ТОГДА 3
		|		ИНАЧЕ 8
		|	КОНЕЦ КАК ТрендКартинкаПрайса,
		|   ВЫБОР
		|		КОГДА ТабЗнч.Цена = 0
		|		ТОГДА 0
		|		ИНАЧЕ (ТабЗнч.Цена / ТрендСоглашение.Цена - 1) * 100
		|	КОНЕЦ КАК ТрендЦенаПрайса, 
		|
		|
		|	Цена1.Цена КАК ВхЦена,
		|	Цена2.Цена КАК КнЦена,
		|
		|   НомПоставщика.Номенклатура				КАК Номенклатура, 
		|	НомПоставщика.НоменклатураКод 			КАК НоменклатураКод,
		|   НомПоставщика.НоменклатураАртикул		КАК НоменклатураАртикул,
		|   НомПоставщика.НоменклатураНаименование	КАК НоменклатураНаименование,
		|  	НомПоставщика.НомПосСсылка    			КАК НомПосСсылка
		|
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешНоменклатуры КАК НомПоставщика
		|ПО НомПоставщика.НомерСтроки = ТабЗнч.НомерСтроки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Вчера, Соглашение = &Соглашение 
		|																				  И Номенклатура В (ВЫБРАТЬ
		|																				  						Номенклатура
		|																									ИЗ
		|																										КешНоменклатуры)
		|																			) КАК ТрендСоглашение
		|ПО ТрендСоглашение.Номенклатура   = НомПоставщика.Номенклатура
		|И  ТрендСоглашение.Характеристика = НомПоставщика.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК Цена1
		|ПО Цена1.Номенклатура 	 = НомПоставщика.Номенклатура
		|И  Цена1.ВидЦены 		 = &ВидЦены1
		|И  Цена1.Характеристика = НомПоставщика.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК Цена2
		|ПО Цена2.Номенклатура   = НомПоставщика.Номенклатура
		|И  Цена2.ВидЦены 		 = &ВидЦены2
		|И  Цена2.Характеристика = НомПоставщика.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО ТабЗнч.НомерСтроки Возр 
		|;";
	Запрос.УстановитьПараметр("Вчера", НачалоДня(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	Запрос.УстановитьПараметр("ВидЦены1", ВидЦены1);
	Запрос.УстановитьПараметр("ВидЦены2", ВидЦены2);
	Запрос.УстановитьПараметр("Владелец", Соглашение.Партнер);
	Если ТипЗнч(ТабЗнч) = Тип("ТаблицаЗначений") Тогда
		Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч);
		ТабЗнч = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч.Выгрузить());
		ТабЗнч.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
		
КонецПроцедуры




Процедура СохранитьЗначениеПрофиля(Настройки, Соглашение, НастройкаСоглашения) Экспорт
	
	Перем ДеревоПрайсов;
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеНастроекДанныхФорм.Сохранить("_alps_" + Соглашение.УникальныйИдентификатор(), , Настройки, "Настройки прайс-листа: " + Соглашение, "_alps_" + Соглашение.УникальныйИдентификатор());
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("ДеревоПрайсов", ДеревоПрайсов) Тогда
			
			РезультатПоиска = ДеревоПрайсов.Строки.Найти(Соглашение.Партнер, "Партнер");
			Если РезультатПоиска = Неопределено Тогда
				РезультатПоиска = ДеревоПрайсов.Строки.Добавить();
				РезультатПоиска.Партнер = Соглашение.Партнер;
			КонецЕсли;
			
			ПоискСоглашения = РезультатПоиска.Строки.Найти(Соглашение, "Соглашение");	
			Если ПоискСоглашения = Неопределено Тогда
				ПоискСоглашения = РезультатПоиска.Строки.Добавить();
				ПоискСоглашения.Соглашение = Соглашение;
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ПоискСоглашения, НастройкаСоглашения);
			
		Иначе
			ВызватьИсключение "Для начала роботы с ALPS, задайте базовые настройки (Нормативно справочная информация->Дополнительные обработки->Настройки внешних обработок:Вкладка ""Настройки ALPS"")";
		КонецЕсли;
		
	Иначе
		ВызватьИсключение "Для начала роботы с ALPS, задайте базовые настройки (Нормативно справочная информация->Дополнительные обработки->Настройки внешних обработок:Вкладка ""Настройки ALPS"")";
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , Настройки, "Настройки актуальности прайс-листов", "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
КонецПроцедуры

Функция ЗагрузитьНастройкиПрофиля(Соглашение) Экспорт	
	
	Перем ДеревоПрайсов;
	УстановитьПривилегированныйРежим(Истина);	
	
	НастройкаДерева 	= ЗагрузитьНастройкиПрофиляАнализа(Соглашение);	
	НастройкаГлобальная = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	НастройкаСоглашения = Новый Структура("ФайлПрайсЛиста, ДнейАктуальности, ИндексКартинки", , , Ложь);
	НастройкаДополнительная = Новый Структура("ALPS_ВестиИсториюРаботыПользователей, ALPS_ИспользоватьКешированиеПрайсЛистов, ALPS_ПерезаписыватьРегистрациюЦенПоставщиков");
	Если ТипЗнч(НастройкаГлобальная) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НастройкаДополнительная, НастройкаГлобальная);
		Если НастройкаГлобальная.Свойство("ДеревоПрайсов", ДеревоПрайсов) Тогда
			РезультатПоиска = ДеревоПрайсов.Строки.Найти(Соглашение.Партнер, "Партнер");
			Если НЕ РезультатПоиска = Неопределено Тогда
				ПоискСоглашения = РезультатПоиска.Строки.Найти(Соглашение, "Соглашение");	
				Если НЕ ПоискСоглашения = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НастройкаСоглашения, ПоискСоглашения);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Новый Структура("НастройкаДерева, НастройкаСоглашения, НастройкаДополнительная", НастройкаДерева, НастройкаСоглашения, НастройкаДополнительная);
	
КонецФункции

Функция ЗагрузитьНастройкиПрофиляАнализа(Соглашение) Экспорт	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("_alps_" + Соглашение.УникальныйИдентификатор(), , , "_alps_" + Соглашение.УникальныйИдентификатор());
КонецФункции






Процедура ПолучитьНастройкуРеквизита(Псевдоним, ТекстОсн, ТекстДоп, Реквизит) Экспорт
	
	ИмяРеквизита = Реквизит.ИмяРеквизита;
	ШаблонТекста = "И %ПсевдонимЛево%.%ИмяРеквизита% = %ПсевдонимПраво% ";
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "%ПсевдонимЛево%", Псевдоним);
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "%ИмяРеквизита%", ИмяРеквизита);
	
	Типы = Реквизит.ОписаниеТипов.Типы();
	Если Типы.Количество() = 1 Тогда
		Если Реквизит.Пометка = Ложь Тогда
			Возврат;
		ИначеЕсли Реквизит.НомерКолонки = 0 Тогда
			Возврат;
		ИначеЕсли Реквизит.ПолеПоискаСоответствия Тогда
			Если XMLТип(Типы[0]).ИмяТипа = "string" Тогда
				ТекстОсн = ТекстОсн + СтрЗаменить(ШаблонТекста, "%ПсевдонимПраво%", "ТабЗнч." + ИмяРеквизита + " И " + Псевдоним + "." + ИмяРеквизита + "<>""""");
			Иначе
				ТекстОсн = ТекстОсн + СтрЗаменить(ШаблонТекста, "%ПсевдонимПраво%", "ТабЗнч." + ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли Реквизит.ПолеПоискаСоответствия Тогда
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры




Функция ПроверитьПривязкуНоменклатуры(Номенклатура, Партнер) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Код,
		|	Артикул,
		|	Наименование
		|
		|ИЗ
		|	Справочник.НоменклатураПоставщиков	
		|ГДЕ
		|	Номенклатура = &Номенклатура
		|И	Владелец     = &Партнер
		|И	НЕ ЭтоГруппа
		|И	НЕ ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщить("Эта номенклатура уже привязана к номенклатуре поставщика!"); 
		Сообщить("Код поставщика: " 		+ Выборка.Код);
		Сообщить("Артикул поставщика: " 	+ Выборка.Артикул);
		Сообщить("Наименование поставщика: "+ Выборка.Наименование);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСсылкуНаНоменклатуруПоставщика(КодПривязки, Код, Артикул, Наименование, ПартнерВладелец) Экспорт
	
	МенеджерСпр = Справочники.НоменклатураПоставщиков;	
	Если 		КодПривязки = 1 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоКоду(Код, , , ПартнерВладелец);
	ИначеЕсли   КодПривязки = 2 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоРеквизиту("Артикул", Артикул, , ПартнерВладелец);
	ИначеЕсли   КодПривязки = 3 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоКоду(Код, , , ПартнерВладелец);
		Если НЕ (НоменклатураПоставщика.Артикул = Артикул) Тогда
			НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли   КодПривязки = 4 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоНаименованию(Наименование, , , ПартнерВладелец);	
	Иначе
		НоменклатураПоставщика = Неопределено;
	КонецЕсли;
	
	Возврат НоменклатураПоставщика;
	
КонецФункции

Функция ЗаписатьОбъектНоменклатурыПоставщика(Номенклатура, НоменклатураПоставщика, КодПривязки, Код, Артикул, Наименование, ПартнерВладелец) Экспорт
	
	Если НоменклатураПоставщика.Пустая() Тогда
		ОбъектПоставщика = ?(Номенклатура.ЭтоГруппа, Справочники.НоменклатураПоставщиков.СоздатьГруппу(), Справочники.НоменклатураПоставщиков.СоздатьЭлемент());
	Иначе
		ОбъектПоставщика = НоменклатураПоставщика.ПолучитьОбъект();	
	КонецЕсли;
		
	Если НЕ Номенклатура.ЭтоГруппа Тогда ОбъектПоставщика.Артикул = Артикул КонецЕсли;
	Если КодПривязки = 1 Тогда ОбъектПоставщика.Код = Код; КонецЕсли;
	ОбъектПоставщика.Наименование 	= Наименование;
	ОбъектПоставщика.Владелец 		= ПартнерВладелец;
	ОбъектПоставщика.Номенклатура 	= Номенклатура;
	
	Попытка
		ОбъектПоставщика.Записать();		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектПоставщика;
	
КонецФункции





Функция ПолучитьПараметрыРегистрацииЦенПоставщика(Соглашение, ТабЗнч) Экспорт
		
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Дата", ТекущаяДата());
	ПараметрыДокумента.Вставить("Партнер", Соглашение.Партнер);
	ПараметрыДокумента.Вставить("Соглашение", Соглашение);
	ПараметрыДокумента.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Получаем всю номенклатуру из прайс-листа
		|ВЫБРАТЬ
		|   ТабЗнч.Цена,
		|   ТабЗнч.Номенклатура,
		|	ТабЗнч.НомПосСсылка КАК НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ PreCache
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Сворачиваем одинаковые строки номенклатуры
		|ВЫБРАТЬ
		|   ТабЗнч.Цена,
		|   ТабЗнч.Номенклатура,
		|	ТабЗнч.НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ Cache
		|ИЗ
		|	PreCache КАК ТабЗнч
		|
		|ГДЕ
		|	НЕ ТабЗнч.Номенклатура.ЭтоГруппа
		|И	НЕ ТабЗнч.НоменклатураПоставщика.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабЗнч.Номенклатура,
		|   ТабЗнч.НоменклатураПоставщика,
		|	ТабЗнч.Цена
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ PreCache;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Получаем клоны из прайс-листа
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ CacheClones
		|ИЗ
		|	Cache
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИМЕЮЩИЕ Количество(Номенклатура) > 1
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Получаем клоны для формирования письма
		|ВЫБРАТЬ
		|	CacheClones.Номенклатура,
		|	Cache.НоменклатураПоставщика,
		|	Cache.Цена
		|ИЗ
		|	CacheClones КАК CacheClones
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache КАК Cache 
		|ПО	Cache.Номенклатура = CacheClones.Номенклатура
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Получаем номенклатуру для установки цен
		|ВЫБРАТЬ
		|	ТабЗнч.Номенклатура,
		|   ТабЗнч.НоменклатураПоставщика,
		|	ТабЗнч.Цена
		|Из
		| 	Cache КАК ТабЗнч 
		|
		|ГДЕ
		|	ТабЗнч.Цена > 0
		|И	Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ CacheClones)
		|;";
	Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатПакета[РезультатПакета.ВГраница() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Обнаружен клон: " + Выборка.Номенклатура + " Номенклатура пропущена.");	
	КонецЦикла;
	
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	СписокПозиций = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокПозиций.Добавить(Новый Структура("Номенклатура, НоменклатураПоставщика, Цена", Выборка.Номенклатура, Выборка.НоменклатураПоставщика, Выборка.Цена));			
	КонецЦикла;
	
	ПараметрыДокумента.Вставить("СписокПозиций", СписокПозиций);
	Возврат ПараметрыДокумента;

КонецФункции

Функция ПолучитьКлючСсылкуРегистрацииЦенПоставщика(Соглашение) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Ссылка 
		|ИЗ 
		|	Документ.РегистрацияЦенНоменклатурыПоставщика 
		|ГДЕ
		|	Проведен
		|И	Соглашение = &Соглашение 
		|И 	Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, День) И КОНЕЦПЕРИОДА(&Период, День)");
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Новый Структура("Ключ", ?(Выборка.Следующий(), Выборка.Ссылка, Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка()));	
КонецФункции






////////////////////////////////////////////////////////////////////////////////////////////
// ЛОГ ПРИВЯЗОК
////////////////////////////////////////////////////////////////////////////////////////////

Процедура ВыполнитьЗаписьЛогПривязок(Номенклатура, НоменклатураПоставщика, ПривязкаУдалена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекущаяДата			= ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.ALPS_ЛогПривязок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.НоменклатураПоставщика.Установить(НоменклатураПоставщика);
	НаборЗаписей.Отбор.ДатаПривязки.Установить(ТекущаяДата);
	
	Запись 						  = НаборЗаписей.Добавить();
	Запись.Пользователь 		  = ТекущийПользователь;
	Запись.Номенклатура 		  = Номенклатура;
	Запись.НоменклатураПоставщика = НоменклатураПоставщика;
	Запись.ДатаПривязки			  = ТекущаяДата();
	Запись.Привязка		  		  = ПривязкаУдалена;
	
	НаборЗаписей.Записать();

	
КонецПроцедуры 





////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕЗАПИСЬ ШТРИХ КОДОВ
////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузитьШтрихкоды(РезультатАнализа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПерезаписиШтрихКодов();
	
	Запрос.УстановитьПараметр("ТЗ_ПрофильАнализа", РезультатАнализа);
	Запрос.УстановитьПараметр("ПустойШтрихкод", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(Выборка.Штрихкод);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПерезаписиШтрихКодов()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПрофильАнализа.Номенклатура КАК Номенклатура,
	              // |	ПрофильАнализа.Характеристика КАК Характеристика,
	               |	ПрофильАнализа.Штрихкод КАК Штрихкод
	               |ПОМЕСТИТЬ ПрофильАнализа
	               |ИЗ
	               |	&ТЗ_ПрофильАнализа КАК ПрофильАнализа
	               |ГДЕ
	               |	ПрофильАнализа.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |	И ПрофильАнализа.Штрихкод <> &ПустойШтрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура КАК Номенклатура,
	               //|	Характеристика КАК Характеристика,
	               |	Штрихкод КАК Штрихкод 
	              // |	&ПустаяУпаковка КАК Упаковка
	               |ИЗ
	               |	ПрофильАнализа
	               |ГДЕ
	               |	Штрихкод НЕ В
	               |				(ВЫБРАТЬ
	               |					Штрихкод
	               |				ИЗ
	               |					РегистрСведений.ШтрихкодыНоменклатуры)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПерезаписиШтрихКодов()
 
 