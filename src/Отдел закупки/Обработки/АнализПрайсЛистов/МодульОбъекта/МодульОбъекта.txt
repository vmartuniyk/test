
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсРаботыСФайлами

Процедура ПрочитатьФайлMXLСервер(ПутьMXL, ТабличныйДокумент) Экспорт
	ТабличныйДокумент.Прочитать(ПутьMXL);		
КонецПроцедуры
	
Процедура ПрочитатьФайлXMLСервер(ПутьXML, ТабличныйДокумент) Экспорт
	
	МАР = Новый Соответствие;	
	file_xml = Новый ЧтениеXML;
	file_xml.ОткрытьФайл(ПутьXML);
	td_row = 2;
	td_col = 1;
	t_pos = 1;
	file_xml.Прочитать();
	Пока file_xml.Прочитать() Цикл
		Если file_xml.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			name = file_xml.Имя;
			Если МАР[file_xml.Имя] = Неопределено Тогда
				МАР.Вставить(name, td_col);
				td_col = td_col + 1;
			ИначеЕсли МАР[name] < t_pos Тогда
				td_row = td_row + 1;
			КонецЕсли;
			
			Пока file_xml.ПрочитатьАтрибут() Цикл
				Если МАР[file_xml.Имя] = Неопределено Тогда
					МАР.Вставить(file_xml.Имя, td_col);
					td_col = td_col + 1;
				КонецЕсли;
				ТабличныйДокумент.Область("R" + Формат(td_row, "ЧГ = 0") + "C" + МАР[file_xml.Имя]).Текст = СокрЛП(file_xml.Значение);
			КонецЦикла;
			t_pos = МАР[file_xml.Имя];
			
		КонецЕсли;
		
		Если file_xml.ТипУзла = ТипУзлаXML.Текст Тогда
			ТабличныйДокумент.Область("R" + Формат(td_row, "ЧГ = 0") + "C" + МАР[name]).Текст = СокрЛП(file_xml.Значение);		
		КонецЕсли;
			
	КонецЦикла;
	
	file_xml.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьФайлXLSСервер(ПутьXLS, ТабличныйДокумент, Страницы = "") Экспорт
	
	Попытка
		ПрочитатьФайлСПомощьюADODB(ПутьXLS, ТабличныйДокумент, Страницы, "Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;"";");
		Возврат;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена библиотека ADODB. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Попытка
		ПрочитатьФайлXLSСПомощьюEcxel(ПутьXLS, ТабличныйДокумент, Страницы);
		Возврат;
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
						
	ВызватьИсключение СообщениеОбОшибке;
	
КонецПроцедуры 

Процедура ПрочитатьФайлXLSXСервер(ПутьXLSX, ТабличныйДокумент, Страницы = "") Экспорт
	
	Попытка
		ПрочитатьФайлСПомощьюADODB(ПутьXLSX, ТабличныйДокумент, Страницы, "Extended Properties=""Excel 12.0 Xml;HDR=NO;IMEX=1;"";");
		Возврат;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена библиотека ADODB. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Попытка
		ПрочитатьФайлXLSСПомощьюEcxel(ПутьXLSX, ТабличныйДокумент, Страницы);
		Возврат;
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
						
	ВызватьИсключение СообщениеОбОшибке;
	
КонецПроцедуры

Процедура ПрочитатьФайлCSVСервер(ПутьCSV, ТабличныйДокумент) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьCSV);
	Для row = 1 по ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(row);
		
		КоличествоВхождений = СтрЧислоВхождений(Строка, ";");
		Для col = 1 По КоличествоВхождений Цикл
			Длина = СтрДлина(Строка);
			ИндРазделителя = Найти (Строка, ";");
			ТабличныйДокумент.Область("R" + Формат(row + 1, "ЧГ = 0") + "C" + col).Текст = СокрЛП(Лев(Строка, ИндРазделителя - 1));
			Строка = Прав(Строка, Длина - ИндРазделителя);
		КонецЦикла;

	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаписатьФайлMXLСервер(ПрисоединенныйФайл, ТабличныйДокумент) Экспорт
	Соглашение = ПрисоединенныйФайл.ВладелецФайла;
	УниверсальноеВремя = УниверсальноеВремя(ТекущаяДата());
	ТабличныйДокумент.Записать(КаталогВременныхФайлов() + "ALPS_cache.mxl");
	Файл = Новый Файл(КаталогВременныхФайлов() + "ALPS_cache.mxl");
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы 
		|ГДЕ
		|	ВладелецФайла = &Соглашение
		|И	Наименование  = &Наименование
		|");
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Наименование", "ALPS_cache");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Выборка.Ссылка, Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ДатаМодификацииУниверсальная", АдресВременногоХранилища, Ложь, УниверсальноеВремя));
	Иначе	
		ПрисоединенныеФайлы.ДобавитьФайл(Соглашение, Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".", ""), Файл.ПолучитьВремяИзменения(), УниверсальноеВремя, АдресВременногоХранилища);
	КонецЕсли;
	УдалитьФайлы(Файл.ПолноеИмя);
КонецПроцедуры


Функция ПолучитьПутьКФайлуСоглашения(ПрисоединенныйФайл, ALPS_ИспользоватьКешированиеПрайсЛистов) Экспорт
	
	Если ALPS_ИспользоватьКешированиеПрайсЛистов Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|	Ссылка 
			|Из 
			|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы 
			|ГДЕ
			|	ВладелецФайла 	= &Владелец
			|И	ДатаМодификацииУниверсальная >= &ДатаМодификацииУниверсальная	
			|И	Наименование 	= &Наименование");
		Запрос.УстановитьПараметр("Владелец", ПрисоединенныйФайл.ВладелецФайла);
		Запрос.УстановитьПараметр("Наименование", "ALPS_cache");
		Запрос.УстановитьПараметр("ДатаМодификацииУниверсальная", ПрисоединенныйФайл.ДатаМодификацииУниверсальная);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПрисоединенныйФайл = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
	
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|	ХранимыйФайл 
			|Из 
			|	РегистрСведений.ПрисоединенныеФайлы 
			|ГДЕ 
			|	ПрисоединенныйФайл = &ПрисоединенныйФайл");
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл); 
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ПутьКФайлу = ПолучитьИмяВременногоФайла(ПрисоединенныйФайл.Расширение);
		ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
		ДвоичныеДанные.Записать(ПутьКФайлу);
		
		Возврат ПутьКФайлу;
		
	Иначе
		
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		ПутьКФайлу = ПолучитьИмяВременногоФайла(ПрисоединенныйФайл.Расширение);
			
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Открытие файла'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				ИнформацияОбОшибке());
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
			ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
		КонецПопытки;
		
		ДвоичныеДанные.Записать(ПутьКФайлу);
		
		Возврат ПутьКФайлу;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Процедура ПрочитатьФайлСПомощьюADODB(Destination, TD, Pages = "", ConnectionString)
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + Destination + "; " + ConnectionString; //Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;"";";
	Connection.Open();
	
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = Connection;	
	PagesСоответствие = Новый Соответствие;
	Для iCount = 0 По Catalog.Tables.Count-1 Цикл
		Если Catalog.Tables.Item(iCount).Type <> "VIEW" Тогда
			PagesСоответствие.Вставить(iCount + 1, СтрЗаменить(Catalog.Tables.Item(iCount).Name, "''", "'"));
		КонецЕсли;
	КонецЦикла;
	Connection.Close();
	Connection = "";
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Recordset  = Новый COMОбъект("ADODB.Recordset");
	Connection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + Destination + "; " + ConnectionString; //Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;""";
	Connection.Open();
	
	Страницы = ?(ПустаяСтрока(Pages), "1", Pages);
	МассивСтраниц = РазобратьСтрокуВМассивПоРазделителю(Страницы, ";");
	row_memory = 0;
	Для Каждого Страница Из МассивСтраниц Цикл
		Recordset.Open("Select * from [" + PagesСоответствие[Число(Страница)] + "]", Connection, 2, 3); //adOpenDynamic, adLockOptimistic
		Recordset.MoveFirst();                 
		
		МассивДанныхCOM = Recordset.GetRows( , , );
		str = МассивДанныхCOM.GetLength(0);
		col = МассивДанныхCOM.GetLength(1);
		МассивДанных = МассивДанныхCOM.Выгрузить();
		
		Для i=0 По str-1 Цикл Для j=0 По col-1 Цикл TD.Область("R" + Формат(i+row_memory+1, "ЧГ = 0") + "C" + (j+1)).Текст = СокрЛП(МассивДанных[i].Получить(j)); КонецЦикла; КонецЦикла;
		row_memory = row_memory + i;
		
	КонецЦикла; 
	
	Recordset.Close();
	Connection.Close();
	Connection = "";
	Recordset = "";
	
КонецПроцедуры

Процедура ПрочитатьФайлXLSСПомощьюEcxel(ПутьXLS, ТабличныйДокумент, Pages = "") 
	
	COMОбъект = Новый COMОбъект("Excel.Application");
	COMОбъект.Displayalerts = false;
	
	Страницы = ?(ПустаяСтрока(Pages), "1", Pages);
	МассивСтраниц = РазобратьСтрокуВМассивПоРазделителю(Страницы, ";");
	row_memory=0;
	Для Каждого Страница Из МассивСтраниц Цикл
		Попытка
			Workbook = COMОбъект.Workbooks.Open(ПутьXLS);
			Sheet 	 = Workbook.Worksheets(Число(Страница));
		Исключение
			COMОбъект.Quit();
			COMОбъект = 0;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
			                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение СообщениеОбОшибке;
		КонецПопытки;
			
		Попытка
			i = Sheet.UsedRange.Row 	+ Sheet.UsedRange.Rows.Count 	- 1;
			j = Sheet.UsedRange.Column 	+ Sheet.UsedRange.Columns.Count - 1;
			Пока i <> 1 Цикл Если Sheet.Rows(i).Text <> "" Тогда Прервать; Иначе i=i-1; КонецЕсли; КонецЦикла;
			Пока j <> 1 Цикл Если Sheet.Columns(j).Text <> "" Тогда Прервать; Иначе j=j-1; КонецЕсли; КонецЦикла;
			Для td_row=1 По i Цикл Для td_col=1 По j Цикл ТабличныйДокумент.Область("R" + Формат(td_row+row_memory+1, "ЧГ = 0") + "C" + td_col).Текст = СокрЛП(Sheet.Cells(td_row, td_col).Value);	КонецЦикла; КонецЦикла;
			row_memory = row_memory + td_row;
		Исключение
			COMОбъект.Quit();
			COMОбъект = 0;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
			                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение СообщениеОбОшибке;
		КонецПопытки;
	КонецЦикла;
	
	Workbook.Close();
	COMОбъект.Quit();
	COMОбъект = 0;
	
КонецПроцедуры

#КонецОбласти 

#Область ИнтерфейсРаботыСШаблонами

Процедура ПостроитьДеревоОператоров(АдресХранилищаДереваОператоров, УникальныйИдентификатор) Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Разделители");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " + ""/"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "\", " + ""\"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "|", " + ""|"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "_", " + ""_"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ",", " + "", "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ".", " + "". "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Space", " + "" "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, """", " + """""""" + ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Логические операторы и константы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "AND", " AND ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "OR", " OR ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "NOT", " NOT ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TRUE", " TRUE ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "FALSE", " FALSE ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Числовые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Max", "Max(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Min", "Min(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Round", "Round(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Int", "Int()", 1);
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Строковые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Upper", "Upper()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Lower", "Lower()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Left", "Left()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Right", "Right()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimL", "TrimL()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimAll", "TrimAll()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimR", "TrimR()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Title", "Title()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "StrReplace", "StrReplace(,,)");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Прочие функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Условие", "?(,,)", 3);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Предопределенное значение", "ПредопределенноеЗначение()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Значение заполнено", "ЗначениеЗаполнено()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Формат", "Формат(,)");
		
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры // ПостроитьДеревоОператоров()


Функция ПолучитьПустоеДеревоОператоров()
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));	
	Возврат Дерево;
	
КонецФункции

Функция ДобавитьГруппуОператоров(Дерево, Наименование)
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Наименование = Наименование;
	Возврат НоваяГруппа;
	
КонецФункции

Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0)
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Оператор = ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг = Сдвиг;
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти 



Процедура СоздатьСхемуКомпоновкиДанных(ПараметрыИсточникаДанных, ПараметрыНабораДанных, ПоляИтогов, АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, УникальныйИдентификатор = "") Экспорт
	
	//1. Создаем схему компоновки данных
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	//1.1 определяем источник данных для схемы
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ЗаполнитьЗначенияСвойств(ИсточникДанных, ПараметрыИсточникаДанных);
		
	//1.2 определяем набор данных
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(ПараметрыНабораДанных.ТипНабораДанных);
	ЗаполнитьЗначенияСвойств(НаборДанных, ПараметрыНабораДанных);	
		
	//1.2.1 добавляем поля 
	Для Каждого ПолеДанных Из ПараметрыНабораДанных.Поля Цикл
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(Поле, ПолеДанных);
	КонецЦикла;
	
	//1.2.2 добавляем вложенные наборы данных
	Для Каждого ВложенныйНаборДанных Из ПараметрыНабораДанных.ВложенныеНаборыДанных Цикл
		НовыйВложенныйНаборДанных = НаборДанных.ВложенныеНаборыДанных.Добавить(Тип("ВложенныйНаборДанныхМакетаКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйВложенныйНаборДанных, ВложенныйНаборДанных);
		Для Каждого ПолеДанных Из ВложенныйНаборДанных.Поля Цикл
			Поле = НовыйВложенныйНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхМакетаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Поле, ПолеДанных);
		КонецЦикла;
	КонецЦикла;
		
	//1.3 определяем ресурсы
	Для Каждого ПолеИтога Из ПоляИтогов Цикл
		ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ЗаполнитьЗначенияСвойств(ПолеРесурса, ПолеИтога);
	КонецЦикла;
	
	//2. создаем настройки для схемы
	//НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));	
	
КонецПроцедуры

Процедура СоздатьШаблонПрофиляАнализа(ШаблонПрофиля) Экспорт
	ШаблонПрофиля.Строки.Очистить();
	Если 	  Метаданные.Имя = "УправлениеТорговлей" И Метаданные.Версия = "11.0.9.8" Тогда
		ЗаполнитьШаблонПрофиляУТ11_0_9_8(ШаблонПрофиля);
	ИначеЕсли Метаданные.Имя = "УправлениеТорговлей" И (Метаданные.Версия = "11.1.2.6"
												   ИЛИ  Метаданные.Версия = "11.1.2.8") Тогда
		ЗаполнитьШаблонПрофиляУТ11_1_2_6(ШаблонПрофиля);
	КонецЕсли;	
КонецПроцедуры




Процедура СформироватьШапкуТабличногоДокумента(Дерево, ТабДок) Экспорт
	
	ОчиститьШапкуТабличногоДокумента(ТабДок);
		
	ПараметрыОтбораОбщ 	= Новый Структура("Пометка", Истина);
	ПараметрыОтбораЦен  = Новый Структура("ИмяРеквизита", "Цена");
	ОтобранныеСтрокиОбщ = Дерево.Строки.НайтиСтроки(ПараметрыОтбораОбщ, Истина);
	ОтобранныеСтрокиЦен = Дерево.Строки.НайтиСтроки(ПараметрыОтбораЦен, Истина);
		
	Для Каждого ЗагружаемыйРеквизит Из ОтобранныеСтрокиОбщ Цикл
		
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если Не ЗагружаемыйРеквизит.Пометка	ИЛИ НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
	    	ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
			Если ПервыйТип = Тип("Строка") Тогда
				Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
					ШиринаКолонки = 50;
				Иначе
					ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),50);
				КонецЕсли;
			ИначеЕсли ПервыйТип = Тип("Число") Тогда
				ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10);
			ИначеЕсли ПервыйТип = Тип("Булево") Тогда
				ШиринаКолонки = 10;
			КонецЕсли;
		КонецЕсли;

		Область = ТабДок.Область("R1C"+НомерКолонки);
		БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст, Область.Текст + Символы.ПС, "") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		
		ОбластьКолонки = ТабДок.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст, Макс(ОбластьКолонки.ШиринаКолонки, ШиринаКолонки), ШиринаКолонки);
		
		
		Если ТабДок.ВысотаТаблицы > 1 Тогда
			ОбластьДанных = ТабДок.Область("R2C" + НомерКолонки + ":R" + Формат(ТабДок.ВысотаТаблицы, "ЧГ=") + "C" + НомерКолонки);
			ОбластьДанных.ЦветФона = WebЦвета.ЦианСветлый;
			Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
			ОбластьДанных.Обвести(Линия, Линия, Линия, Линия);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЦветШапкиТабличногоДокумента(ТабДок);
			
КонецПроцедуры

Процедура ПрочитатьТабличныйДокумент(ДеревоПрофиля, ТабДок, ТабЗнч, Формула) Экспорт
		
	СкриптФормулы = "";
	СкриптВыполнения = ""; 
	Операнды = Новый Соответствие;
	ДобавитьВОперандыКурсыВалют(Операнды);
	Для i = 1 По ТабДок.ШиринаТаблицы Цикл 
		Операнды.Вставить("[R$C" + i + "]", "ТабДок.Область(""R$C" + i + """).Текст"); 
	КонецЦикла;
	
	
	Для Каждого Элемент Из ДеревоПрофиля.Строки Цикл
		Булево_ОбщЗагружать = Элемент.Пометка И (Элемент.НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(Элемент.Выражение));
		Если Элемент.ПредставлениеРеквизита = "Код номенклатуры поставщика" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Код = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение); 	
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
        ИначеЕсли Элемент.ИмяРеквизита = "Артикул" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Артикул = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Наименование" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Наименование = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Штрихкод" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Штрихкод = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Цена" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "Попытка СтрокаТабЗнч.Цена = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + "Число(" + ПраваЧасть + "); Исключение СтрокаТабЗнч.Цена = 999999.99 КонецПопытки;";
		КонецЕсли;
	КонецЦикла;
	
	Если СкриптВыполнения = "" Тогда Возврат; КонецЕсли;
	
	ТабЗнч.Очистить();
	ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Формула);
	СтрокаФормулы = ПустаяСтрока(ПраваЧасть);
	Для i = 2 По ТабДок.ВысотаТаблицы Цикл iter = Формат(i, "ЧГ=0"); Если ?(СтрокаФормулы, Ложь, Вычислить(СтрЗаменить(ПраваЧасть, "R$", "R" + iter))) Тогда Продолжить; КонецЕсли; СтрокаТабЗнч = ТабЗнч.Добавить(); СтрокаТабЗнч.НомерСтроки = i; Выполнить(СтрЗаменить(СкриптВыполнения, "R$", "R" + iter)); КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьТабличныйДокументРазвернутыеСтроки(Партнер, ДеревоПрофиля, ТабДок, ТабЗнч) Экспорт
	
	СкриптВыполнения = "";
	Операнды = Новый Соответствие;
	ДобавитьВОперандыКурсыВалют(Операнды);
	Для i = 1 По ТабДок.ШиринаТаблицы Цикл 
		Операнды.Вставить("[R$C" + i + "]", "ТабДок.Область(""R$C" + i + """).Текст"); 
	КонецЦикла;
	
	Для Каждого Элемент Из ДеревоПрофиля.Строки Цикл
		Булево_ОбщЗагружать = Элемент.Пометка И (Элемент.НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(Элемент.Выражение));
		Если Элемент.ПредставлениеРеквизита = "Код номенклатуры поставщика" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Код = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение); 	
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
        ИначеЕсли Элемент.ИмяРеквизита = "Артикул" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Артикул = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Наименование" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Наименование = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Штрихкод" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Штрихкод = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Цена" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "Попытка СтрокаТабЗнч.Цена = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + "Число(" + ПраваЧасть + "); Исключение СтрокаТабЗнч.Цена = 999999.99 КонецПопытки;";
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(СкриптВыполнения) Тогда 
		Возврат; 
	КонецЕсли;

	СжатиеДанных = Новый СжатиеДанных(9);
	ДиапазонДанных = "R$C1:R$C" + Формат(ТабДок.ШиринаТаблицы, "ЧГ=0");
	Для i = 2 По ТабДок.ВысотаТаблицы Цикл iter = "R"+Формат(i, "ЧГ=0"); СтрокаТабЗнч = ТабЗнч.Добавить(); СтрокаТабЗнч.Партнер = Партнер; Выполнить(СтрЗаменить(СкриптВыполнения, "R$", iter)); СтрокаТабЗнч.ХранилищеДанных = Новый ХранилищеЗначения(ТабДок.ПолучитьОбласть(СтрЗаменить(ДиапазонДанных, "R$", iter)), СжатиеДанных) КонецЦикла;
		
КонецПроцедуры

Процедура БыстрыйПоискСоответствий(Соглашение, ТабЗнч, Привязка, ВидЦены1 = Неопределено, ВидЦены2 = Неопределено) Экспорт
	
	Если 		Привязка = 1 Тогда
		ПараметрСтрока = "И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   Привязка = 2 Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул";
	ИначеЕсли   Привязка = 3 Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   Привязка = 4 Тогда
		ПараметрСтрока = "И НомПоставщика.Наименование = ВЫРАЗИТЬ(ТабЗнч.Наименование КАК Строка(100))";
	Иначе 
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|   ТабЗнч.Цена
		|
		|ПОМЕСТИТЬ ТабКеш
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки						КАК НомерСтроки,
		|	НомПоставщика.Номенклатура 				КАК Номенклатура,
		|	НомПоставщика.Номенклатура.Код 			КАК НоменклатураКод,
		|   НомПоставщика.Номенклатура.Артикул		КАК НоменклатураАртикул,
		|   НомПоставщика.Номенклатура.Наименование	КАК НоменклатураНаименование,
		|	НомПоставщика.Характеристика 			КАК Характеристика,
		|  	НомПоставщика.Ссылка    				КАК НомПосСсылка
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		|	ТабКеш КАК ТабЗнч
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НомПоставщика
		|ПО НомПоставщика.Владелец 		= &Владелец
		|И	НомПоставщика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		| " + ПараметрСтрока + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Номенклатура	КАК Номенклатура,
		|	ВидЦены 		КАК ВидЦены,
		|	Характеристика 	КАК Характеристика,
		|	Цена 			КАК Цена
		|ПОМЕСТИТЬ КешЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (	ВЫБРАТЬ
		|																			Номенклатура
		|																		ИЗ
		|																			КешНоменклатуры)
		|												   И ВидЦены В (&ВидЦены1, &ВидЦены2)) 
		|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Номенклатура,
		//|	ВидЦены,
		//|	Характеристика
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|
		|   ТабЗнч.Цена,
		|	ВЫБОР 
		|		КОГДА ТабЗнч.Цена = ТрендСоглашение.Цена
		|		ТОГДА 6
		|		КОГДА ТабЗнч.Цена > ТрендСоглашение.Цена
		|		ТОГДА 1
		|		КОГДА ТабЗнч.Цена < ТрендСоглашение.Цена
		|		ТОГДА 3
		|		ИНАЧЕ 8
		|	КОНЕЦ КАК ТрендКартинкаПрайса,
		|   ВЫБОР
		|		КОГДА ТабЗнч.Цена = 0
		|		ТОГДА 0
		|		ИНАЧЕ (ТабЗнч.Цена / ТрендСоглашение.Цена - 1) * 100
		|	КОНЕЦ КАК ТрендЦенаПрайса, 
		|
		|
		|	Цена1.Цена КАК ВхЦена,
		|	Цена2.Цена КАК КнЦена,
		|
		|   IsNull(НомПоставщика.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))	КАК Номенклатура, 
		|	НомПоставщика.НоменклатураКод 														КАК НоменклатураКод,
		|   НомПоставщика.НоменклатураАртикул													КАК НоменклатураАртикул,
		|   НомПоставщика.НоменклатураНаименование												КАК НоменклатураНаименование,
		|  	НомПоставщика.НомПосСсылка    														КАК НомПосСсылка,
		|	""""																				КАК Пустышка
		|
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешНоменклатуры КАК НомПоставщика
		|ПО НомПоставщика.НомерСтроки = ТабЗнч.НомерСтроки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Вчера, Соглашение = &Соглашение 
		|																				  И Номенклатура В (ВЫБРАТЬ
		|																				  						Номенклатура
		|																									ИЗ
		|																										КешНоменклатуры)
		|																			) КАК ТрендСоглашение
		|ПО ТрендСоглашение.Номенклатура   = НомПоставщика.Номенклатура
		|И  ТрендСоглашение.Характеристика = НомПоставщика.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК Цена1
		|ПО Цена1.Номенклатура 	 = НомПоставщика.Номенклатура
		|И  Цена1.ВидЦены 		 = &ВидЦены1
		|И  Цена1.Характеристика = НомПоставщика.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК Цена2
		|ПО Цена2.Номенклатура   = НомПоставщика.Номенклатура
		|И  Цена2.ВидЦены 		 = &ВидЦены2
		|И  Цена2.Характеристика = НомПоставщика.Характеристика
		|
		|УПОРЯДОЧИТЬ ПО ТабЗнч.НомерСтроки Возр 
		|;";
	Запрос.УстановитьПараметр("Вчера", НачалоДня(ТекущаяДата())-1);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	Запрос.УстановитьПараметр("ВидЦены1", ВидЦены1);
	Запрос.УстановитьПараметр("ВидЦены2", ВидЦены2);
	Запрос.УстановитьПараметр("Владелец", Соглашение.Партнер);
	Если ТипЗнч(ТабЗнч) = Тип("ТаблицаЗначений") Тогда
		Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч);
		ТабЗнч = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч.Выгрузить());
		ТабЗнч.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьЗначениеПрофиля(Настройки, Соглашение, НастройкаСоглашения) Экспорт
	
	Перем ДеревоПрайсов;
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеНастроекДанныхФорм.Сохранить("_alps_" + Соглашение.УникальныйИдентификатор(), , Настройки, "Настройки прайс-листа: " + Соглашение, "_alps_" + Соглашение.УникальныйИдентификатор());
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("ДеревоПрайсов", ДеревоПрайсов) Тогда
			
			РезультатПоиска = ДеревоПрайсов.Строки.Найти(Соглашение.Партнер, "Партнер");
			Если РезультатПоиска = Неопределено Тогда
				РезультатПоиска = ДеревоПрайсов.Строки.Добавить();
				РезультатПоиска.Партнер = Соглашение.Партнер;
			КонецЕсли;
			
			ПоискСоглашения = РезультатПоиска.Строки.Найти(Соглашение, "Соглашение");	
			Если ПоискСоглашения = Неопределено Тогда
				ПоискСоглашения = РезультатПоиска.Строки.Добавить();
				ПоискСоглашения.Соглашение = Соглашение;
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ПоискСоглашения, НастройкаСоглашения);
			
		Иначе
			ВызватьИсключение "Для начала роботы с ALPS, задайте базовые настройки (Нормативно справочная информация->Дополнительные обработки->Настройки внешних обработок:Вкладка ""Настройки ALPS"")";
		КонецЕсли;
		
	Иначе
		ВызватьИсключение "Для начала роботы с ALPS, задайте базовые настройки (Нормативно справочная информация->Дополнительные обработки->Настройки внешних обработок:Вкладка ""Настройки ALPS"")";
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , Настройки, "Настройки актуальности прайс-листов", "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
КонецПроцедуры

Процедура ПолучитьНастройкуРеквизита(Псевдоним, ТекстОсн, ТекстДоп, Реквизит) Экспорт
	
	ИмяРеквизита = Реквизит.ИмяРеквизита;
	ШаблонТекста = "И %ПсевдонимЛево%.%ИмяРеквизита% = %ПсевдонимПраво% ";
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "%ПсевдонимЛево%", Псевдоним);
	ШаблонТекста = СтрЗаменить(ШаблонТекста, "%ИмяРеквизита%", ИмяРеквизита);
	
	Типы = Реквизит.ОписаниеТипов.Типы();
	Если Типы.Количество() = 1 Тогда
		Если Реквизит.Пометка = Ложь Тогда
			Возврат;
		ИначеЕсли Реквизит.НомерКолонки = 0 Тогда
			Возврат;
		ИначеЕсли Реквизит.ПолеПоискаСоответствия Тогда
			Если XMLТип(Типы[0]).ИмяТипа = "string" Тогда
				ТекстОсн = ТекстОсн + СтрЗаменить(ШаблонТекста, "%ПсевдонимПраво%", "ТабЗнч." + ИмяРеквизита + " И " + Псевдоним + "." + ИмяРеквизита + "<>""""");
			Иначе
				ТекстОсн = ТекстОсн + СтрЗаменить(ШаблонТекста, "%ПсевдонимПраво%", "ТабЗнч." + ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли Реквизит.ПолеПоискаСоответствия Тогда
			Возврат;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьЗаписьЛогПривязок(Номенклатура, НоменклатураПоставщика, ПривязкаУдалена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ТекущаяДата			= ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.ALPS_ЛогПривязок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.НоменклатураПоставщика.Установить(НоменклатураПоставщика);
	НаборЗаписей.Отбор.ДатаПривязки.Установить(ТекущаяДата);
	
	Запись 						  = НаборЗаписей.Добавить();
	Запись.Пользователь 		  = ТекущийПользователь;
	Запись.Номенклатура 		  = Номенклатура;
	Запись.НоменклатураПоставщика = НоменклатураПоставщика;
	Запись.ДатаПривязки			  = ТекущаяДата();
	Запись.Привязка		  		  = ПривязкаУдалена;
	
	НаборЗаписей.Записать();

	
КонецПроцедуры 

Процедура ЗагрузитьШтрихкоды(РезультатАнализа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПерезаписиШтрихКодов();
	
	Запрос.УстановитьПараметр("ТЗ_ПрофильАнализа", РезультатАнализа);
	Запрос.УстановитьПараметр("ПустойШтрихкод", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(Выборка.Штрихкод);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры


Функция ЗагрузитьНастройкиПрофиля(Соглашение) Экспорт	
	
	Перем ДеревоПрайсов;
	УстановитьПривилегированныйРежим(Истина);	
	
	НастройкаДерева 	= ЗагрузитьНастройкиПрофиляАнализа(Соглашение);	
	НастройкаГлобальная = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	НастройкаСоглашения = Новый Структура("ФайлПрайсЛиста, ДнейАктуальности, ИндексКартинки", , , Ложь);
	НастройкаДополнительная = Новый Структура("ALPS_ВестиИсториюРаботыПользователей, ALPS_ИспользоватьКешированиеПрайсЛистов, ALPS_ПерезаписыватьРегистрациюЦенПоставщиков");
	Если ТипЗнч(НастройкаГлобальная) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НастройкаДополнительная, НастройкаГлобальная);
		Если НастройкаГлобальная.Свойство("ДеревоПрайсов", ДеревоПрайсов) Тогда
			РезультатПоиска = ДеревоПрайсов.Строки.Найти(Соглашение.Партнер, "Партнер");
			Если НЕ РезультатПоиска = Неопределено Тогда
				ПоискСоглашения = РезультатПоиска.Строки.Найти(Соглашение, "Соглашение");	
				Если НЕ ПоискСоглашения = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НастройкаСоглашения, ПоискСоглашения);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Новый Структура("НастройкаДерева, НастройкаСоглашения, НастройкаДополнительная", НастройкаДерева, НастройкаСоглашения, НастройкаДополнительная);
	
КонецФункции

Функция ЗагрузитьНастройкиПрофиляАнализа(Соглашение) Экспорт	
	УстановитьПривилегированныйРежим(Истина);
	УникальныйИдентификатор = Соглашение.УникальныйИдентификатор();
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("_alps_" + УникальныйИдентификатор, , , "_alps_" + УникальныйИдентификатор);
КонецФункции


// Инициализация кеш таблицы значений, для хранения на сервере прочитаного прайс-листа
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений для хранения на сервере прочитаного прайс-листа
//		* Номенклатура 				- СправочникСсылка.Номенклатура   			- Элемент номенклатуры привязанный к строке	
//		* НоменклатураКод 			- Строка(11)                             	- Код элемента номенклатуры
//		* НоменклатураАртикул	  	- Строка(25)                             	- Артикул элемента номенклатуры
//		* НоменклатураНаименование	- Строка(100)                              	- Наименование элемента номенклатуры
//		* НомПосСсылка				- СправочникСсылка.НоменклатураПоставщиков 	- Элемент номенклатуры поставщика к которому привязана номенклатура	
//		* Код	     				- Строка(11)                                - Код номенкалутуры поставщика из прайс-листа
//		* Артикул	                - Строка(25)                                - Артикул номенкалутуры поставщика из прайс-листа
//		* Наименование	          	- Строка(1000)                              - Наименование номенклатуры поставщика из прайс-листа 
//		* Цена	                    - Число(15,2Н)                              - Цена номенклатуры поставщика из прайс-листа
//		* НомерСтроки	            - Число(6)                                  - Номер строки из прайс-листа
//		* ВхЦена                    - Число(15,2Н)                              - Цена из регистра сведений цены номенклатуры
//		* КнЦена                    - Число(15,2Н)                              - Цена из регистра сведений цены номенклатуры
//		* ШтрихКод                  - Строка(200)                               - Штрихкод номенклатуры поставщика из прайс-листа
//		* ТрендЦенаПрайса           - Число(4,1)                                - Повышение или понижение цены в прайс-листе поставщика
//		* ТрендКартинкаПрайса       - Число(1Н)                                 - Картинка тренда повышения или понижение цены в прайс-листе поставщика
//
Функция ИнициализироватьКешТаблицуЗначений() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Колонки = ТаблицаЗначений.Колонки;
	Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("НоменклатураКод", 			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11)));
	Колонки.Добавить("НоменклатураАртикул", 		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25)));
	Колонки.Добавить("НоменклатураНаименование", 	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	Колонки.Добавить("НомПосСсылка", 				Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	Колонки.Добавить("Код",					 		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11)));
	Колонки.Добавить("Артикул", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25)));
	Колонки.Добавить("Наименование", 				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	Колонки.Добавить("Цена", 						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Колонки.Добавить("НомерСтроки", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	Колонки.Добавить("ВхЦена", 						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Колонки.Добавить("КнЦена", 						Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Колонки.Добавить("ШтрихКод", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	Колонки.Добавить("ТрендЦенаПрайса", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 1, ДопустимыйЗнак.Любой)));
	Колонки.Добавить("ТрендКартинкаПрайса", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	Колонки.Добавить("Пустышка", 					Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаЗначений;
	
КонецФункции // ИнициализироватьКешТаблицуЗначений() 


Функция ПолучитьПараметрыРегистрацииЦенПоставщика(Соглашение, ТабЗнч) Экспорт
		
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Дата", ТекущаяДата());
	ПараметрыДокумента.Вставить("Партнер", Соглашение.Партнер);
	ПараметрыДокумента.Вставить("Соглашение", Соглашение);
	ПараметрыДокумента.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Получаем всю номенклатуру из прайс-листа
		|ВЫБРАТЬ
		|   ТабЗнч.Цена,
		|   ТабЗнч.Номенклатура,
		|	ТабЗнч.НомПосСсылка КАК НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ PreCache
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Сворачиваем одинаковые строки номенклатуры
		|ВЫБРАТЬ
		|   ТабЗнч.Цена,
		|   ТабЗнч.Номенклатура,
		|	ТабЗнч.НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ Cache
		|ИЗ
		|	PreCache КАК ТабЗнч
		|
		|ГДЕ
		|	НЕ ТабЗнч.Номенклатура.ЭтоГруппа
		|И	НЕ ТабЗнч.НоменклатураПоставщика.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабЗнч.Номенклатура,
		|   ТабЗнч.НоменклатураПоставщика,
		|	ТабЗнч.Цена
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ PreCache;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Получаем клоны из прайс-листа
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ CacheClones
		|ИЗ
		|	Cache
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИМЕЮЩИЕ Количество(Номенклатура) > 1
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Получаем клоны для формирования письма
		|ВЫБРАТЬ
		|	CacheClones.Номенклатура,
		|	Cache.НоменклатураПоставщика,
		|	Cache.Цена
		|ИЗ
		|	CacheClones КАК CacheClones
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache КАК Cache 
		|ПО	Cache.Номенклатура = CacheClones.Номенклатура
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Получаем номенклатуру для установки цен
		|ВЫБРАТЬ
		|	ТабЗнч.Номенклатура,
		|   ТабЗнч.НоменклатураПоставщика,
		|	ТабЗнч.Цена
		|Из
		| 	Cache КАК ТабЗнч 
		|
		|ГДЕ
		|	ТабЗнч.Цена > 0
		|И	Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ CacheClones)
		|;";
	Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатПакета[РезультатПакета.ВГраница() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить("Обнаружен клон: " + Выборка.Номенклатура + " Номенклатура пропущена.");	
	КонецЦикла;
	
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	СписокПозиций = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокПозиций.Добавить(Новый Структура("Номенклатура, НоменклатураПоставщика, Цена", Выборка.Номенклатура, Выборка.НоменклатураПоставщика, Выборка.Цена));			
	КонецЦикла;
	
	ПараметрыДокумента.Вставить("СписокПозиций", СписокПозиций);
	Возврат ПараметрыДокумента;

КонецФункции

Функция ПолучитьКлючСсылкуРегистрацииЦенПоставщика(Соглашение) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Ссылка 
		|ИЗ 
		|	Документ.РегистрацияЦенНоменклатурыПоставщика 
		|ГДЕ
		|	Проведен
		|И	Соглашение = &Соглашение 
		|И 	Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, День) И КОНЕЦПЕРИОДА(&Период, День)");
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Новый Структура("Ключ", ?(Выборка.Следующий(), Выборка.Ссылка, Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка()));	
КонецФункции


Функция ПроверитьПривязкуНоменклатуры(Номенклатура, Партнер) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Код,
		|	Артикул,
		|	Наименование
		|
		|ИЗ
		|	Справочник.НоменклатураПоставщиков	
		|ГДЕ
		|	Номенклатура = &Номенклатура
		|И	Владелец     = &Партнер
		|И	НЕ ЭтоГруппа
		|И	НЕ ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщить("Эта номенклатура уже привязана к номенклатуре поставщика!"); 
		Сообщить("Код поставщика: " 		+ Выборка.Код);
		Сообщить("Артикул поставщика: " 	+ Выборка.Артикул);
		Сообщить("Наименование поставщика: "+ Выборка.Наименование);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСсылкуНаНоменклатуруПоставщика(КодПривязки, Код, Артикул, Наименование, ПартнерВладелец) Экспорт
	
	МенеджерСпр = Справочники.НоменклатураПоставщиков;	
	Если 		КодПривязки = 1 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоКоду(Код, , , ПартнерВладелец);
	ИначеЕсли   КодПривязки = 2 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоРеквизиту("Артикул", Артикул, , ПартнерВладелец);
	ИначеЕсли   КодПривязки = 3 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоКоду(Код, , , ПартнерВладелец);
		Если НЕ (НоменклатураПоставщика.Артикул = Артикул) Тогда
			НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли   КодПривязки = 4 Тогда
		НоменклатураПоставщика = МенеджерСпр.НайтиПоНаименованию(Наименование, , , ПартнерВладелец);	
	Иначе
		НоменклатураПоставщика = Неопределено;
	КонецЕсли;
	
	Возврат НоменклатураПоставщика;
	
КонецФункции

Функция ЗаписатьОбъектНоменклатурыПоставщика(Номенклатура, НоменклатураПоставщика, КодПривязки, Код, Артикул, Наименование, ПартнерВладелец) Экспорт
	
	Если НоменклатураПоставщика.Пустая() Тогда
		ОбъектПоставщика = ?(Номенклатура.ЭтоГруппа, Справочники.НоменклатураПоставщиков.СоздатьГруппу(), Справочники.НоменклатураПоставщиков.СоздатьЭлемент());
	Иначе
		ОбъектПоставщика = НоменклатураПоставщика.ПолучитьОбъект();	
	КонецЕсли;
		
	Если НЕ Номенклатура.ЭтоГруппа Тогда ОбъектПоставщика.Артикул = Артикул КонецЕсли;
	Если КодПривязки = 1 Тогда ОбъектПоставщика.Код = Код; КонецЕсли;
	ОбъектПоставщика.Наименование 	= Наименование;
	ОбъектПоставщика.Владелец 		= ПартнерВладелец;
	ОбъектПоставщика.Номенклатура 	= Номенклатура;
	
	Попытка
		ОбъектПоставщика.Записать();		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектПоставщика;
	
КонецФункции


Функция ПолучитьСтруктуруЗаполненияСправочника(ПрофильАнализа, ТабДок, НомерСтроки) Экспорт
	
	Операнды = Новый Соответствие;
	ДобавитьВОперандыКурсыВалют(Операнды);
	Для i = 1 По ТабДок.ШиринаТаблицы Цикл Операнды.Вставить("[R$C" + i + "]", "ТабДок.Область(""R$C" + i + """).Текст"); КонецЦикла;
	
	ВычитаемыеТипы = Новый Массив;	
	ВычитаемыеТипы.Добавить(Тип("Дата"));
	ВычитаемыеТипы.Добавить(Тип("Число"));
	ВычитаемыеТипы.Добавить(Тип("Булево"));
	ВычитаемыеТипы.Добавить(Тип("Строка"));

	СтруткураЗаполнения = Новый Структура;
	фНомерСтроки = Формат(НомерСтроки, "ЧГ=0");
	Для Каждого Элемент Из ПрофильАнализа.Строки Цикл
		
		Если Элемент.Пометка Тогда
			Если Элемент.ПредставлениеРеквизита = "Код номенклатуры поставщика" Тогда Продолжить; КонецЕсли;
			ОбработатьНастройкуПрофиляАнализа(Элемент, фНомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы);
		КонецЕсли;
		
		Если Элемент.ПредставлениеРеквизита = "Дополнительные реквизиты" Тогда
			Для Каждого ЭлементДР ИЗ Элемент.Строки Цикл
				Если ЭлементДР.Пометка Тогда
					ОбработатьНастройкуПрофиляАнализа(ЭлементДР, фНомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы, Истина)			
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Элемент.ПредставлениеРеквизита = "Дополнительные сведения" Тогда
			Для Каждого ЭлементДС ИЗ Элемент.Строки Цикл
				Если ЭлементДС.Пометка Тогда
					ОбработатьНастройкуПрофиляАнализа(ЭлементДС, фНомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы, , Истина)			
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
	Возврат СтруткураЗаполнения;
	
КонецФункции


Функция СформироватьШаблонПоискаПривязки(ИсходнаяСтрока) Экспорт

    НоваяСтрока = "";
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
    Для инд = 1 По ДлинаСтроки Цикл
		
		ТекСимвол = Сред(ИсходнаяСтрока, инд, 1);
		
		Если ТекСимвол = "a" ИЛИ ТекСимвол = "A" ИЛИ ТекСимвол = "а" ИЛИ ТекСимвол = "А"  Тогда
			НоваяСтрока = НоваяСтрока + "[aAаА]";
			Продолжить;
		КонецЕсли;
		
		Если ТекСимвол = "b" ИЛИ ТекСимвол = "B" ИЛИ ТекСимвол = "в" ИЛИ ТекСимвол = "В"  Тогда
			НоваяСтрока = НоваяСтрока + "[bBвВ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "c" ИЛИ ТекСимвол = "C" ИЛИ ТекСимвол = "с" ИЛИ ТекСимвол = "С"  Тогда
			НоваяСтрока = НоваяСтрока + "[cCсС]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "e" ИЛИ ТекСимвол = "E" ИЛИ ТекСимвол = "е" ИЛИ ТекСимвол = "Е"  Тогда
			НоваяСтрока = НоваяСтрока + "[eEеЕ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "h" ИЛИ ТекСимвол = "H" ИЛИ ТекСимвол = "н" ИЛИ ТекСимвол = "Н"  Тогда
			НоваяСтрока = НоваяСтрока + "[hHнН]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "i" ИЛИ ТекСимвол = "I" ИЛИ ТекСимвол = "і" ИЛИ ТекСимвол = "І"  Тогда
			НоваяСтрока = НоваяСтрока + "[iIіІ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "k" ИЛИ ТекСимвол = "K" ИЛИ ТекСимвол = "к" ИЛИ ТекСимвол = "К"  Тогда
			НоваяСтрока = НоваяСтрока + "[kKкК]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "m" ИЛИ ТекСимвол = "M" ИЛИ ТекСимвол = "м" ИЛИ ТекСимвол = "М"  Тогда
			НоваяСтрока = НоваяСтрока + "[mMмМ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "o" ИЛИ ТекСимвол = "O" ИЛИ ТекСимвол = "о" ИЛИ ТекСимвол = "О"  Тогда
			НоваяСтрока = НоваяСтрока + "[oOоО]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "p" ИЛИ ТекСимвол = "P" ИЛИ ТекСимвол = "р" ИЛИ ТекСимвол = "Р"  Тогда
			НоваяСтрока = НоваяСтрока + "[pPрР]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "t" ИЛИ ТекСимвол = "T" ИЛИ ТекСимвол = "т" ИЛИ ТекСимвол = "Т"  Тогда
			НоваяСтрока = НоваяСтрока + "[tTтТ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "x" ИЛИ ТекСимвол = "X" ИЛИ ТекСимвол = "х" ИЛИ ТекСимвол = "Х"  Тогда
			НоваяСтрока = НоваяСтрока + "[xXхХ]";
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = НоваяСтрока + ТекСимвол;
		
	КонецЦикла;
	
	Возврат НоваяСтрока;
	//"[aAаА]" "[bBвВ]" "[cCсС]" "[eEеЕ]" "[hHнН]" "[iIіІ]" "[kKкК]" "[mMмМ]" "[oOоО]" "[pPрР]" "[tTтТ]" "[xXхХ]";
	
КонецФункции // СформироватьШаблонПоискаПривязки()

#Область ПроцедурыИФункцииДляРаботыССтроковымиТипамиДанных
 
// Разбор строки на массив слов по разделителю
// 
// Параметры:
//  Строка 		- Строка - Строка для разбора
//	Разделитель - Строка - Строка-разделитель
//
// Возвращаемое значение:
//   Массив - Массив строк по разделителю
Функция РазобратьСтрокуВМассивПоРазделителю(Строка, Разделитель = ".") Экспорт
    МассивСтрок = Новый Массив;
    СтрокаЗамены = СтрЗаменить(Строка, Разделитель, Символы.ПС);
    Для i=1 По СтрЧислоСтрок(СтрокаЗамены) Цикл МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаЗамены, i)); КонецЦикла;
    Возврат МассивСтрок; 
КонецФункции // РазобратьСтрокуВМассивПоРазделителю()

Функция ПолучитьМассивСловИзСтроки(ИсходнаяСтрока) Экспорт
	
	МассивСлов = Новый Массив;	
    НоваяСтрока = "";
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
    Для инд = 1 По ДлинаСтроки Цикл
        ТекСимвол = Сред(ИсходнаяСтрока, инд, 1);
		Если ЭтоСимвол(ТекСимвол) или СтрДлина(НоваяСтрока) = 1 Тогда
			НоваяСтрока = НоваяСтрока + ТекСимвол;
			Если ДлинаСтроки = инд Тогда
				МассивСлов.Добавить(НоваяСтрока);  	
			КонецЕсли;
		ИначеЕсли НоваяСтрока = "" Тогда
			Продолжить;
		Иначе
			МассивСлов.Добавить(НоваяСтрока); 
            НоваяСтрока = "";
        КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСлов;
	
КонецФункции

Функция ЭтоСимвол(Символ) Экспорт
	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96) ИЛИ (Код>=123 И Код<=126), Ложь, Истина);	
КонецФункции

Функция ЭтоЦифра(Символ) Экспорт
 	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ Код>=58, Ложь, Истина);	 
КонецФункции

Функция ЭтоБуква(Символ) Экспорт
   	Код = КодСимвола(Символ);
	Возврат ?(Код<=64 ИЛИ (Код>=91 И Код<=96) ИЛИ (Код>=123 И Код<=126), Ложь, Истина);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Процедура ЗаполнитьШаблонПрофиляУТ11_0_9_8(ШаблонПрофиля)
		
	МетаПоставщика   = Метаданные.Справочники.НоменклатураПоставщиков;
	МетаНоменклатуры = Метаданные.Справочники.Номенклатура;
	
	//Код поставщика, номенклатуры
	ВставитьВШаблонКод(ШаблонПрофиля, МетаПоставщика, 	"Код", "Код номенклатуры поставщика");
	ВставитьВШаблонКод(ШаблонПрофиля, МетаНоменклатуры, "Код", "Код номенклатуры");
	
	//Артикул поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Артикул";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Артикул";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25));
	
	//Наименование поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	//Родитель поставщика, номенклатуры
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаПоставщика,   "Родитель", "Родитель номенклатуры поставщика");
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаНоменклатуры, "Родитель", "Родитель номенклатуры");

	//Характеристика поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Характеристика";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Характеристика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	
	//Упаковка поставщика
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Упаковка";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Упаковка поставщика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
	
	//Штрихкод
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Штрихкод";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Штрихкод";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	
	//Цена
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Цена";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Цена";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	ВставитьВШаблонРеквизиты(ШаблонПрофиля, МетаНоменклатуры);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные реквизиты";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеРеквизиты(СтрокаВерхнийУровень);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные сведения";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеСведения(СтрокаВерхнийУровень);
	
КонецПроцедуры

Процедура ЗаполнитьШаблонПрофиляУТ11_1_2_6(ШаблонПрофиля)
		
	МетаПоставщика   = Метаданные.Справочники.НоменклатураПоставщиков;
	МетаНоменклатуры = Метаданные.Справочники.Номенклатура;
	
	//Код поставщика, номенклатуры
	ВставитьВШаблонКод(ШаблонПрофиля, МетаПоставщика, 	"Код", "Код номенклатуры поставщика");
	ВставитьВШаблонКод(ШаблонПрофиля, МетаНоменклатуры, "Код", "Код номенклатуры");
	
	//Артикул поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Артикул";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Артикул";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(35));
	
	//Наименование поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	//Родитель поставщика, номенклатуры
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаПоставщика,   "Родитель", "Родитель номенклатуры поставщика");
	ВставитьВШаблонРодителя(ШаблонПрофиля, МетаНоменклатуры, "Родитель", "Родитель номенклатуры");

	//Характеристика поставщика, номенклатуры
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Характеристика";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Характеристика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	
	//Упаковка поставщика
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Упаковка";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Упаковка поставщика";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
	
	//Штрихкод
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Штрихкод";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Штрихкод";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	
	//Цена
	ЗагружаемыйРеквизит = ШаблонПрофиля.Строки.Добавить();
	ЗагружаемыйРеквизит.ИмяРеквизита           = "Цена";
	ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Цена";
	ЗагружаемыйРеквизит.ОписаниеТипов		   = Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	ВставитьВШаблонРеквизиты(ШаблонПрофиля, МетаНоменклатуры);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные реквизиты";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеРеквизиты(СтрокаВерхнийУровень);
	
	СтрокаВерхнийУровень = ШаблонПрофиля.Строки.Добавить();
	СтрокаВерхнийУровень.ПредставлениеРеквизита = "Дополнительные сведения";
	СтрокаВерхнийУровень.РедактироватьЗапрещено = Истина;
	ВставитьВШаблонДополнительныеСведения(СтрокаВерхнийУровень);
	
КонецПроцедуры

Процедура ВставитьВШаблонКод(Дерево, МетаданныеИсточника, ИмяРеквизита, ПредставлениеРеквизита)
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита 			= ИмяРеквизита;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита 	= ПредставлениеРеквизита;
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ВставитьВШаблонРодителя(Дерево, МетаданныеИсточника, ИмяРеквизита, ПредставлениеРеквизита)
	Если МетаданныеИсточника.Иерархический Тогда
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = ИмяРеквизита;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = ПредставлениеРеквизита;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	КонецЕсли;	
КонецПроцедуры

Процедура ВставитьВШаблонРеквизиты(Дерево, МетаданныеИсточника)
		
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			Если Реквизит.Имя = "Артикул" Тогда Продолжить; КонецЕсли;
			ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов		   = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьВШаблонДополнительныеРеквизиты(Дерево)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Свойство.ТипЗначения КАК ТипЗначения,
		|	Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие) ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Выборка.Свойство.УникальныйИдентификатор();
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Выборка.Свойство;
		ЗагружаемыйРеквизит.ОписаниеТипов		   = Выборка.ТипЗначения;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьВШаблонДополнительныеСведения(Дерево)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Свойство.ТипЗначения КАК ТипЗначения,
		|	Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие) ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагружаемыйРеквизит = Дерево.Строки.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Выборка.Свойство.УникальныйИдентификатор();
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Выборка.Свойство;
		ЗагружаемыйРеквизит.ОписаниеТипов		   = Выборка.ТипЗначения;
	КонецЦикла;
	
КонецПроцедуры


Процедура ОчиститьШапкуТабличногоДокумента(ТабличныйДокумент)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);	
	Для Инд = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Область 		 = ТабличныйДокумент.Область("R1C"+Инд);
		Область.Текст 	 = "";
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		Область.Обвести(Линия, Линия, Линия, Линия);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЦветШапкиТабличногоДокумента(ТабличныйДокумент)

	Для Инд = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		Область 		 = ТабличныйДокумент.Область("R1C"+Инд);
		Область.ЦветФона = Новый Цвет(255, 250, 205);
	КонецЦикла;	

КонецПроцедуры


// Добавляет в операнды курсы валют для использования в формулах
// 
// Параметры:
//  Операнды - Соответствие - Соответствие в которое нужно добавить операнды 
//				* Ключ 		- Строка - Символьный код валюты
//				* Значение 	- Число  - Курс валюты
Процедура ДобавитьВОперандыКурсыВалют(Операнды)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
	    |	Валюта.Наименование	КАК Наименование,
	    |	Курс / Кратность 	КАК Курс
		|ИЗ
	    |	РегистрСведений.КурсыВалют.СрезПоследних 
		|";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Операнды.Вставить("[" + Выборка.Наименование + "]", Формат(Выборка.Курс, "ЧРД='.'"));	
	КонецЦикла; 
		
КонецПроцедуры // ДобавитьВОперандыКурсыВалют()

Процедура ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Выражение)
	ПраваЧасть = Выражение;
	Для Каждого Операнд Из Операнды Цикл ПраваЧасть = СтрЗаменить(ПраваЧасть, Операнд.Ключ, Операнд.Значение); КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьНастройкуПрофиляАнализа(Элемент, НомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы, ЭтоДополнительноеСвойство = Ложь, ЭтоДополнительноеСведение = Ложь)
	
	Перем ДополнительныеСвойства, ДополнительныеСведения;
	
	Если ЭтоДополнительноеСвойство Тогда
		Если НЕ СтруткураЗаполнения.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда
			ДополнительныеСвойства = Новый Массив;
			СтруткураЗаполнения.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДополнительноеСведение Тогда
		Если НЕ СтруткураЗаполнения.Свойство("ДополнительныеСведения", ДополнительныеСведения) Тогда
			ДополнительныеСведения = Новый Массив;
			СтруткураЗаполнения.Вставить("ДополнительныеСведения", ДополнительныеСведения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Элемент.Выражение) Тогда
		Выражение = Элемент.Выражение;
		Для Каждого Операнд Из Операнды Цикл Выражение = СтрЗаменить(Выражение, Операнд.Ключ, Операнд.Значение); КонецЦикла;
		Выражение = СтрЗаменить(Выражение, "R$", "R" + НомерСтроки);
		Результат = Вычислить(Выражение);	
	ИначеЕсли Элемент.НомерКолонки > 0 Тогда
		Результат = ТабДок.Область("R" + НомерСтроки + "C" + Элемент.НомерКолонки).Текст;	
	ИначеЕсли НЕ Элемент.ЗначениеПоУмолчанию = Неопределено Тогда
		Если 		ЭтоДополнительноеСвойство Тогда
			ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Элемент.ЗначениеПоУмолчанию));
		ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
			ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Элемент.ЗначениеПоУмолчанию));
		Иначе
			СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, Элемент.ЗначениеПоУмолчанию);
		КонецЕсли;
		Возврат;
	Иначе
		Сообщить("Реквизит: " + Элемент.ПредставлениеРеквизита + " не заполнен. Не указан номер колонки или формула или значение по умолчанию.");
		Возврат;
	КонецЕсли;
	
	РазницаТипов = Новый ОписаниеТипов(Элемент.ОписаниеТипов, , ВычитаемыеТипы);
	Если РазницаТипов.Типы().Количество() = 0 Тогда
		Если 		ЭтоДополнительноеСвойство Тогда
			ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Результат));
		ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
			ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Результат));
		Иначе 
			СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, Результат);
		КонецЕсли;
	Иначе
		Для Каждого Тип Из РазницаТипов.Типы() Цикл
			РезультатПоискаПоТипу = Метаданные.НайтиПоТипу(Тип);
			Если РезультатПоискаПоТипу <> Неопределено Тогда
				РезультатПоискаПоКоду 		  = Неопределено;
				РезультатПоискаПоНаименованию = Неопределено;
				
				Менеджер = РезультатПоискаПоТипу.ПолноеИмя();
				Менеджер = СтрЗаменить(Менеджер, "Справочник", "Справочники");
				Выполнить("РезультатПоискаПоКоду = " 		 + Менеджер + ".НайтиПоКоду(Результат);");	
				Выполнить("РезультатПоискаПоНаименованию = " + Менеджер + ".НайтиПоНаименованию(Результат, Истина);"); 	
				
				Если РезультатПоискаПоКоду<>Неопределено Тогда
					Если НЕ РезультатПоискаПоКоду.Пустая() Тогда
						Если 		ЭтоДополнительноеСвойство Тогда
							ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоКоду));	
						ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
							ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоКоду));
						Иначе
							СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, РезультатПоискаПоКоду);
						КонецЕсли;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатПоискаПоНаименованию<>Неопределено Тогда
					Если НЕ РезультатПоискаПоНаименованию.Пустая() Тогда
						Если 		ЭтоДополнительноеСвойство Тогда
							ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоНаименованию));	
						ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
							ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоНаименованию));
						Иначе
							СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, РезультатПоискаПоНаименованию);
						КонецЕсли;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				//Выяснить когда такие ситуации возможны
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры




Функция ПолучитьТекстЗапросаПерезаписиШтрихКодов()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПрофильАнализа.Номенклатура КАК Номенклатура,
	              // |	ПрофильАнализа.Характеристика КАК Характеристика,
	               |	ПрофильАнализа.Штрихкод КАК Штрихкод
	               |ПОМЕСТИТЬ ПрофильАнализа
	               |ИЗ
	               |	&ТЗ_ПрофильАнализа КАК ПрофильАнализа
	               |ГДЕ
	               |	ПрофильАнализа.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |	И ПрофильАнализа.Штрихкод <> &ПустойШтрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура КАК Номенклатура,
	               //|	Характеристика КАК Характеристика,
	               |	Штрихкод КАК Штрихкод 
	              // |	&ПустаяУпаковка КАК Упаковка
	               |ИЗ
	               |	ПрофильАнализа
	               |ГДЕ
	               |	Штрихкод НЕ В
	               |				(ВЫБРАТЬ
	               |					Штрихкод
	               |				ИЗ
	               |					РегистрСведений.ШтрихкодыНоменклатуры)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПерезаписиШтрихКодов()

#КонецОбласти

#Область  СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.6.8";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Анализ прайс-листов (ALPS)");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Анализ прайс-листов (ALPS) [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Анализ прайс-листов (ALPS) [" + Версия + "]", "ALPS", "ОткрытиеФормы", Ложь, "ALPS");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти