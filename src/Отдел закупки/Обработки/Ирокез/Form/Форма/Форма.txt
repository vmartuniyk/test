
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_РеквизитВидНоменклатурыНаФорме");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьСоответствиеНастроекККолонкамСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);

	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция Тест_РеквизитВидНоменклатурыНаФорме() Экспорт
	
	Попытка
		РеквизитВидНоменклатуры = ЭтаФорма.ВидНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитВидНоменклатуры), Тип("СправочникСсылка.ВидыНоменклатуры"), НСтр("ru='#4796. Реквизит «ВидНоменклатуры» должен иметь тип «СправочникСсылка.ВидыНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементВидНоменклатуры = Элементы.Найти("ВидНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементВидНоменклатуры, Неопределено, НСтр("ru='#4796. На форме должен быть элемент формы «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции // Тест_РеквизитВидНоменклатурыНаФорме()

&НаКлиенте
Функция Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции() Экспорт
	
	КомандаИзменитьИзмененныеПозиции = Команды.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаИзменитьИзмененныеПозиции), Тип("КомандаФормы"), НСтр("ru='#4796. На форме обработки должна быть команда «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементКнопка = Элементы.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьНеРавенство(ЭлементКнопка, Неопределено, НСтр("ru='#4796. На форме обработки должен быть элемент формы «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции // Тест_ПроверкаНаличияКомандыИзменитИзмененныеПозиции()

&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаНоменклатуры() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокНоменклатуры» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокНоменклатуры»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()
 
&НаКлиенте
Функция Тест_ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры() Экспорт
	
	СтруктураСправочников	=	Тест_ЗагрузитьСписокНоменклатуры();
	МассивСтрок				=	СписокНоменклатуры.НайтиСтроки(Новый Структура("Ссылка",СтруктураСправочников.Номенклатура));
	
	УдалитьТестовыеСправочникы(СтруктураСправочников);
	
	СообщениеОбОшибке	= НСтр("ru = 'Не удалось загрузить таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьНеРавенство(СписокНоменклатуры.Количество(),0 ,СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(МассивСтрок.Количество(),0 ,СообщениеОбОшибке);
	СообщениеОбОшибке	= НСтр("ru = 'Загрузились лишние данные в таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(СписокНоменклатуры.Количество(),1 ,СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(МассивСтрок.Количество(),1 ,СообщениеОбОшибке);
	
КонецФункции

&НаКлиенте
Функция Тест_ПроверитьСоответствиеНастроекККолонкамСпискаНоменклатуры() Экспорт
	
	Отказ	=	ПроверитьСоотвествиеНастроекСПолучинемиДанными();
	СообщениеОбОшибке	= НСтр("ru = 'Не создать все нужные реквизиты по настройка БРМ!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

	ЮнитТест.ПроверитьИстину(Отказ, );
	
	
КонецФункции

&НаСервере
Функция Тест_ЗагрузитьСписокНоменклатуры()
	
	ВидНоменклатурыТест		=	ПолучитьБиблиотекуВидыНоменклатуры().СоздатьЭлементСправочника();
	СтруктураЗаполнения		=	Новый Структура("ВидНоменклатуры",ВидНоменклатурыТест);	
	НоменклатураТест		=	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(СтруктураЗаполнения);
	
	ВидНоменклатуры			=	ВидНоменклатурыТест;
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуНоменклатуры(ЭтаФорма);
		        
	Возврат Новый Структура("ВидНоменклатуры,Номенклатура",ВидНоменклатурыТест, НоменклатураТест)

КонецФункции

&НаСервере
Функция УдалитьТестовыеСправочникы(СтруктураСправочников)
	
	ВидНоменклатурыТест	= СтруктураСправочников.ВидНоменклатуры;
	СправочникОбъект	=	ВидНоменклатурыТест.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();

	
	НоменклатураТест	= СтруктураСправочников.Номенклатура;
	СпрНомОбъект	=	НоменклатураТест.ПолучитьОбъект();
	СпрНомОбъект.УстановитьПометкуУдаления(Истина);
	СпрНомОбъект.Записать();
	СпрНомОбъект.Удалить();


КонецФункции

&НаСервере
Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

&НаСервере
Функция ПолучитьБиблиотекуВидыНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

&НаСервере
Функция СозданияЭлементаСправочника(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

&НаСервере
Функция ПроверитьСоотвествиеНастроекСПолучинемиДанными()
	
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонок();
	СоздатьРеквизитыФормы(СтруктураКолонок);

	СтруктураМассивов	= РеквизитФормыВЗначение("Объект").ПолучитьНастройки();
	
	Если ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураМассивов.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(СтруктураМассивов.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(СтруктураМассивов.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ЭлементыФормы Из  СтруктураМассивов.СписокВидовЦен Цикл
	
		ПолеФормыУпр	=	Элементы.Найти("ВидЦены_УпрУч_"+ЭлементыФормы.УИ);
		ПолеФормыРегл	=	Элементы.Найти("ВидЦены_РеглУч_"+ЭлементыФормы.УИ);
		Если ПолеФормыУпр = Неопределено 
			Или  ПолеФормыРегл = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЭлементыФормы Из  СтруктураМассивов.СписокВидовЦенПоставщика Цикл
	
		ПолеФормыЦенаПоставщика	=	Элементы.Найти("ЦенаПоставщика_"+ЭлементыФормы.УИ);
		Если ПолеФормыЦенаПоставщика = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЭлементыФормы Из  СтруктураМассивов.СписокДопСвойства Цикл
	
		ПолеФормыДопСвойство	=	Элементы.Найти("ДопСвойство_"+ЭлементыФормы.УИ);
		Если ПолеФормыДопСвойство = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
КонецФункции // ПроверитьСоотвествиеНастроекСПолучинемиДанными()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПроверитьПравоНаРаботуСОбработкой() Тогда
		Возврат;	
	КонецЕсли;
		
	Если Параметры.Свойство("СсылкаНаЗаказПоставщику") Тогда
		ЗаказПоставщику = Параметры.СсылкаНаЗаказПоставщику;	
	КонецЕсли;
	
	Если Параметры.Свойство("МассивНоменклатуры") Тогда
		МассивНоменклатуры	= Параметры.МассивНоменклатуры;	
	КонецЕсли;
	
	СоздатьРеквизитыИЭлементыФормы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗагрузитьСписокНоменклатурыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ТекущиеДанные  = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Номенклатура   = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Характеристика = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Характеристика);
	ЗагрузитьСписокНоменклатурыНаСервере(Номенклатура, Характеристика);
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблициСписокНоменклатуры

&НаКлиенте
Процедура Подключаемый_ЭлементПроцентПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки					= Элемент.Имя;
	ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"Процент_", "ВидЦены_УпрУч_");
	ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"Процент_", "ВидЦены_РеглУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"Процент_", "ПроцентИзменен_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"Процент_", "");
	
	ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
	
	Если ЦенаВВалютеУпрУчета = 0 ИЛИ ЦенаВВалютеРеглУчета = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить цену на определенный процент, цена в базе не установлена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ТекущиеДанные[ИмяКолонки]				= 0;
		ТекущиеДанные[ИмяКолонкиУпрУч]  		= 0;
		ТекущиеДанные[ИмяКолонкиРеглУч] 		= 0;
		ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Ложь;
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные[ИмяКолонкиУпрУч]			= ЦенаВВалютеУпрУчета * (1 + ТекущиеДанные[ИмяКолонки] / 100);	
	ТекущиеДанные[ИмяКолонкиРеглУч]			= ЦенаВВалютеРеглУчета * (1 + ТекущиеДанные[ИмяКолонки] / 100);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = ?(ТекущиеДанные[ИмяКолонки] = 0, Ложь, Истина);
	ТекущиеДанные.ЭлементИзменен            = ?(ТекущиеДанные[ИмяКолонки] = 0, Ложь, Истина);
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементВидЦеныУпрПриИзменении(Элемент)

	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки					= Элемент.Имя;
	ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ВидЦены_РеглУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ПроцентИзменен_");
	ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","Процент_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_", "");
	
	ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
	КурсУпр					= ТекущиеЦены.КурсУпр;
	КурсРегл                = ТекущиеЦены.КурсРегл;
	
	Если ЦенаВВалютеУпрУчета = 0 Тогда
		ТекущиеДанные[ИмяКолонкиПроцент] = 9999999999;
	Иначе
		ТекущиеДанные[ИмяКолонкиПроцент] = (ТекущиеДанные[ИмяКолонки] / ЦенаВВалютеУпрУчета - 1) * 100;
	КонецЕсли;
		
	ТекущиеДанные[ИмяКолонкиРеглУч]  		= ТекущиеДанные[ИмяКолонки] * (КурсУпр / КурсРегл);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Истина;
	ТекущиеДанные.ЭлементИзменен            = Истина;

КонецПроцедуры // Подключаемый_ЭлементВидЦеныУпрПриИзменении()

&НаКлиенте
Процедура Подключаемый_ЭлементВидЦеныРеглПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки					= Элемент.Имя;
	ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "ВидЦены_УпрУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "ПроцентИзменен_");
	ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "Процент_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "");
	
	ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
	КурсУпр					= ТекущиеЦены.КурсУпр;
	КурсРегл                = ТекущиеЦены.КурсРегл;
	
	Если ЦенаВВалютеРеглУчета = 0 Тогда
		ТекущиеДанные[ИмяКолонкиПроцент] = 9999999999;
	Иначе
		ТекущиеДанные[ИмяКолонкиПроцент] = (ТекущиеДанные[ИмяКолонки] / ЦенаВВалютеРеглУчета - 1) * 100;
	КонецЕсли;
	
	ТекущиеДанные[ИмяКолонкиУпрУч]  		= ТекущиеДанные[ИмяКолонки] * (КурсРегл / КурсУпр);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Истина;
	ТекущиеДанные.ЭлементИзменен            = Истина;

	
КонецПроцедуры // Подключаемый_ЭлементВидЦеныРеглПриИзменении()

&НаКлиенте
Процедура Подключаемый_ЭлементФормыПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки						= "ЭлементИзменен_" + Элемент.Имя;	
	ТекущиеДанные[ИмяКолонки] 		= Истина;
	ТекущиеДанные.ЭлементИзменен    = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец", ТекущиеДанные.ВидНоменклатуры), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДедлайнНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пока не работает.'"));
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СписокНоменклатурыСсылка" Тогда
		ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);	
	КонецЕсли;	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьИзмененныеПозиции(Команда)
	ТекущиеДанные 	= Элементы.СписокНоменклатуры.ТекущиеДанные;
	Номенклатура  	= ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Характеристика  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Характеристика);
	РезультатРаботы = ИзменитьИзмененныеПозицииНаСервере(Номенклатура, Характеристика);
	Если РезультатРаботы Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Данные успешно записаны.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					НСтр("ru='Данные были успешно записаны в базу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					БиблиотекаКартинок.Информация32);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РеквизитыИЭлементыФормы

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы()
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонок();
 	СоздатьРеквизитыФормы(СтруктураКолонок);
	СоздатьЭлементыФормы(СтруктураКолонок);
КонецПроцедуры // СоздатьРеквизитыИЭлементыФормы()
 
&НаСервере
Процедура СоздатьРеквизитыФормы(СтруктураКолонок)

	МассивРеквизитов = Новый Массив; 
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен", 										Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Опт", 												Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"), "СписокНоменклатуры", "Значение"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Опт", 								Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Опт_НеПересчитыватьАвтоматически",					Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Опт_НеПересчитыватьАвтоматически",	Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Розница", 											Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"), "СписокНоменклатуры", "Значение"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Розница", 							Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Розница_НеПересчитыватьАвтоматически",				Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Розница_НеПересчитыватьАвтоматически",Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТоварнаяКатегория", 										Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"), "СписокНоменклатуры", "Товарная категория"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_ТоварнаяКатегория", 						Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦеноваяГруппа",	 										Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"), "СписокНоменклатуры", "Ценовая группа"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_ЦеноваяГруппа", 							Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Дедлайн", 												Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)), "СписокНоменклатуры", "Дедлайн")); 
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_Дедлайн", 								Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	
	Если НЕ ЗаказПоставщику.Пустая() Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КоличествоИзЗаказа", 								Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)), "СписокНоменклатуры", "Кол."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦенаПоставщикаУпрУч", 								Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)), "СписокНоменклатуры", "Цена,USD"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦенаПоставщикаРеглУч", 								Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)), "СписокНоменклатуры", "Цена, ГРН"));
	КонецЕсли;
	
	Для каждого Колонка Из СтруктураКолонок.СписокВидовЦен Цикл
		Если Колонка.ЭтоГруппа Тогда
			Продолжить;		
		КонецЕсли;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	
	Для каждого Колонка Из СтруктураКолонок.СписокВидовЦенПоставщика Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	
	Для каждого Колонка Из СтруктураКолонок.СписокДопСвойства Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя,Новый ОписаниеТипов("Строка"), "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	ИзменитьРеквизиты(МассивРеквизитов);

КонецПроцедуры // СоздатьРеквизитыФормы()

&НаСервере
Процедура СоздатьЭлементыФормы(СтруктураКолонок)
	
	ГСЧ 					  = Новый ГенераторСлучайныхЧисел;
	ЭлементСписокНоменклатуры = Элементы.СписокНоменклатуры;
	
	ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Опт", "КПП Опт", ФиксацияВТаблице.Нет);
	ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");

	ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Розница", "КПП Розница", ФиксацияВТаблице.Нет);
	ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");

	ПараметрыЭлемента = СтруктураПараметровКолонки("ТоварнаяКатегория", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	ЭлементФормы.УстановитьДействие("НачалоВыбора", "Подключаемый_ТоварнаяКатегорияНачалоВыбора");

	
	ПараметрыЭлемента = СтруктураПараметровКолонки("ЦеноваяГруппа", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("Дедлайн", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
	ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	//ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	ЭлементФормы.УстановитьДействие("НачалоВыбора", "Подключаемый_ДедлайнНачалоВыбора");
	
	Если НЕ ЗаказПоставщику.Пустая() Тогда
		ПараметрыЭлементаЗП = СтруктураПараметровГруппыКолонок("ГруппаЗП", "Заказ поставщику", ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаЗП, ЭлементСписокНоменклатуры);

		ПараметрыЭлемента = СтруктураПараметровКолонки("КоличествоИзЗаказа", Новый Цвет(255, 235, 205), Истина, ,200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("ЦенаПоставщикаУпрУч", Новый Цвет(255, 235, 205), Истина, ,200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		
		ПараметрыЭлемента = СтруктураПараметровКолонки("ЦенаПоставщикаРеглУч", Новый Цвет(255, 235, 205), Истина, ,200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	КонецЕсли;

	
	Для каждого ЭлементМассива Из СтруктураКолонок.СписокВидовЦен Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		Если ЭлементМассива.СлужебнаяКолонка Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементМассива.ЭтоГруппа Тогда
			ПараметрыЭлемента = СтруктураПараметровГруппыКолонок(ЭлементМассива.Имя, ЭлементМассива.Заголовок, ФиксацияВТаблице.Нет);
			ГруппаКолонок 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
		Иначе
			ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Ложь, , ЦветФонаЗаголовка,,Ложь);
			ЭлементПроцент	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
			ЭлементПроцент.УстановитьДействие("ПриИзменении", ЭлементМассива.ПриИзменении);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЭлементаДопСвойства = СтруктураПараметровГруппыКолонок("ГруппаДопСвойста", "Дополнительные свойства", ФиксацияВТаблице.Нет);
	ГруппаКолонокДопСвойста 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаДопСвойства, ЭлементСписокНоменклатуры);
	
	Для каждого ЭлементМассива Из СтруктураКолонок.СписокДопСвойства Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Истина, , ЦветФонаЗаголовка,,Ложь);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонокДопСвойста);
	КонецЦикла;
	
	
	ПараметрыЭлементаЦенаПоставщика = СтруктураПараметровГруппыКолонок("ГруппаЦенаПоставщика", "Цены поставщиков", ФиксацияВТаблице.Нет);
	ГруппаКолонокЦеныПоставщиков 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаЦенаПоставщика, ЭлементСписокНоменклатуры);

	Для каждого ЭлементМассива Из СтруктураКолонок.СписокВидовЦенПоставщика Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Истина, , ЦветФонаЗаголовка,,Ложь);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонокЦеныПоставщиков);
	КонецЦикла;

КонецПроцедуры // СоздатьЭлементыФормы()

&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице, ЦветФонаЗаголовка=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("КартинкаШапки", БиблиотекаКартинок.ЗначокПлюс);
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр, Подсказка, ЦветФонаЗаголовка=Неопределено, Шрифт=Неопределено,КнопкаВыбора=Ложь,ВидПоля=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);  
	ПараметрыЭлемента.Вставить("Вид", ?(ВидПоля=Неопределено,ВидПоляФормы.ПолеВвода,ВидПоля));
	ПараметрыЭлемента.Вставить("ПутьКДанным", "СписокНоменклатуры." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента",Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 3);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаОткрытия", Ложь);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", КнопкаВыбора);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("Подсказка", Подсказка);
	ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(0, 0, 0));
	Если Шрифт <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("Шрифт", Шрифт);
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	Возврат ПараметрыЭлемента;
КонецФункции // СтруктураПараметровКолонки()

#КонецОбласти 

#Область УсловноеОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаОбъект 			= РеквизитФормыВЗначение("Объект");
	ТаблицаСписокНоменклатуры	= РеквизитФормыВЗначение("СписокНоменклатуры", Тип("ТаблицаЗначений"));
	
	Для каждого КолонкаТаблицы Из ТаблицаСписокНоменклатуры.Колонки Цикл
		ИмяКолонки = КолонкаТаблицы.Имя;
		Если Найти(ИмяКолонки, "ПроцентИзменен_") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияТолькоПросмотр(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, "Тип_Колонки_Цена");
		КонецЕсли;
		Если Найти(ИмяКолонки, "ЭлементИзменен_") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, "Тип_Колонки_Реквизит");
		КонецЕсли;
	КонецЦикла; 
			
	ЗначениеВРеквизитФормы(ТаблицаСписокНоменклатуры, "СписокНоменклатуры");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияТолькоПросмотр(ИмяКолонки)

	ИмяЭлементаПроцентЦены 	= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "Процент_");
	ИмяЭлементаВидЦены 		= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_УпрУч_");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяЭлементаПроцентЦены);
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ИмяЭлементаВидЦены);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры // ДобавитьЭлементУсловногоОформления()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки)
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатуры");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(147, 196, 0));
	
КонецПроцедуры // ДобавитьЭлементУсловногоОформленияЦветФонаСтроки()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, ТипКолонки)

	Если ТипКолонки = "Тип_Колонки_Цена" Тогда
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_УпрУч_");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_РеглУч_");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "Процент_");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
	КонецЕсли;
	
	Если ТипКолонки = "Тип_Колонки_Реквизит" Тогда
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ЭлементИзменен_", "");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры // ДобавитьЭлементУсловногоОформленияФонаЯчейки()

&НаСервере
Процедура УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонкиОтбора)

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиПоля);
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиОтбора);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(9, 144, 74));
	
КонецПроцедуры // УстановитьУсловноеОформлениеЯчейки()
 
#КонецОбласти 

#Область ПраваДостапаОбработки

&НаСервере
Функция ПроверитьПравоНаРаботуСОбработкой()
	
	Если РольДоступна("ПолныеПрава")  Тогда
		Возврат Истина;	
	КонецЕсли;

	Если РольДоступна("КПП_ДобавлениеИзменениеОбработкиИрокез")  Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Возврат Ложь; 		
	
КонецФункции // ПроверитьПравоНаРаботуСОбработкой()
		
#КонецОбласти

&НаСервере
Процедура ЗагрузитьСписокНоменклатурыНаСервере(знач Номенклатура = Неопределено, знач Характеристика = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуНоменклатуры(ЭтаФорма);
	
	Если Номенклатура <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Ссылка, Характеристика", Номенклатура, Характеристика);
		РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокНоменклатурыНаСервере()

&НаСервере
Функция ИзменитьИзмененныеПозицииНаСервере(знач Номенклатура=Неопределено, знач Характеристика=Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	РезультатыРаботы = РеквизитФормыВЗначение("Объект").ИзменитьПозиции(ЭтаФорма);
	Если Номенклатура <> Неопределено И Характеристика <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Ссылка, Характеристика", Номенклатура, Характеристика);
		РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатыРаботы;
КонецФункции // ИзменитьИзмененныеПозицииНаСервере()


&НаСервереБезКонтекста
Функция ПолучитьТекущиеЦены(ИмяКолонки, Номенклатура, Характеристика)

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатРасчета = Новый Структура("ЦенаВВалютеУпрУчета, ЦенаВВалютеРеглУчета, КурсУпр, КурсРегл, КурсЦены", 0, 0, 1, 1, 1);
	
	ИдентификаторЦены = УникальныйИдентификаторИзСтроки("", ИмяКолонки);
	ВидЦены			  = Справочники.ВидыЦен.ПолучитьСсылку(ИдентификаторЦены);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Цена				КАК Цена,
	                      |	ВидЦены.ВалютаЦены 	КАК Валюта
	                      |ПОМЕСТИТЬ ТекущиеЦены
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			,
	                      |			ВидЦены = &ВидЦены
	                      |				И Номенклатура = &Номенклатура
	                      |				И Характеристика = &Характеристика)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Валюта				КАК Валюта,
	                      |	Курс / Кратность 	КАК Курс
	                      |ПОМЕСТИТЬ КурсыВалют
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.Валюта = &ВалютаРегламентированогоУчета
						  |			ТОГДА ТекущиеЦены.Цена
						  |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВВалютеРеглУчета,
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.Валюта = &ВалютаУправленческогоУчета
						  |			ТОГДА ТекущиеЦены.Цена
						  |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВВалютеУпрУчета,
						  |	ЕСТЬNULL(КурсыВалютЦены.Курс, 1) КАК КурсЦены
						  |ИЗ
						  |	ТекущиеЦены КАК ТекущиеЦены
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦены
						  |		ПО ТекущиеЦены.Валюта = КурсыВалютЦены.Валюта
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
						  |		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
						  |		ПО КурсыВалютРегл.Валюта = &ВалютаРегламентированогоУчета
						  |;
						  |
						  |ВЫБРАТЬ
						  |	СУММА(ВложенныйЗапрос.КурсУпр) КАК КурсУпр,
						  |	СУММА(ВложенныйЗапрос.КурсРегл) КАК КурсРегл
						  |ИЗ
						  |	(
						  |		ВЫБРАТЬ
						  |			Курс 	КАК КурсУпр,
						  |			0 		КАК КурсРегл
						  |		ИЗ	
						  |			КурсыВалют
						  |		ГДЕ
						  |			Валюта = &ВалютаУправленческогоУчета
						  |		
						  |		ОБЪЕДИНИТЬ ВСЕ 
						  |		
						  |		ВЫБРАТЬ
						  |			0 			КАК КурсУпр,
						  |			Курс 		КАК КурсРегл
						  |		ИЗ	
						  |			КурсыВалют
						  |		ГДЕ
						  |			Валюта = &ВалютаРегламентированогоУчета) КАК ВложенныйЗапрос");
						  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированогоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаЦены		  = РезультатыЗапроса[2].Выбрать();
	ВыборкаКурсы	  = РезультатыЗапроса[3].Выбрать();

	Если ВыборкаЦены.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатРасчета, ВыборкаЦены);
	КонецЕсли;
	
	Если ВыборкаКурсы.Следующий() Тогда
		РезультатРасчета.КурсУпр 	= ВыборкаКурсы.КурсУпр;
		РезультатРасчета.КурсРегл 	= ВыборкаКурсы.КурсРегл;
	КонецЕсли;
						  
	Возврат РезультатРасчета;

КонецФункции // ПолучитьКурсыВалют()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
&НаСервереБезКонтекста
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор)
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()


#КонецОбласти