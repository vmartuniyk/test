
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_РеквизитВидНоменклатурыНаФорме");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьСоответствиеНастроекККолонкамСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаГрупповогоЗаполненияНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);

	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт	
	
	ВерсияСчетчикНоменклатуры = ПолучитьВерсиюБибилиотеки("Счетчик номенклатуры");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияСчетчикНоменклатуры, "0.0.001", НСтр("ru='Для теста необходимо подключить библиотеку «Счетчик номенклатуры» версии 0.0.001 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияПодпискиНаСобытия = ПолучитьВерсиюБибилиотеки("Подписки на события");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияПодпискиНаСобытия, "3.8.15", НСтр("ru='Для теста необходимо подключить библиотеку «Подписки на события» версии 3.8.15 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Номенклатура».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Виды номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Товарные категории\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Товарные категории».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\ЦеновыеГруппы\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Ценовые группы».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\КоефициентПриоритетностиНоменклатуры\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Коефициент приоритетности номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\ВидыЦены\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Виды цены».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Документы\УстановкаЦенНоменклатуры\СоздатьИПровестиДокумент.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания документа «Установка цен номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

&НаСервереБезКонтекста
Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

&НаСервереБезКонтекста
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс, Идентификатор)
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()


&НаКлиенте
Функция Тест_РеквизитВидНоменклатурыНаФорме() Экспорт
	
	Попытка
		РеквизитВидНоменклатуры = ЭтаФорма.ВидНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитВидНоменклатуры), Тип("СправочникСсылка.ВидыНоменклатуры"), НСтр("ru='#4796. Реквизит «ВидНоменклатуры» должен иметь тип «СправочникСсылка.ВидыНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементВидНоменклатуры = Элементы.Найти("ВидНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементВидНоменклатуры, Неопределено, НСтр("ru='#4796. На форме должен быть элемент формы «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции // Тест_РеквизитВидНоменклатурыНаФорме()

&НаКлиенте
Функция Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции() Экспорт
	
	КомандаИзменитьИзмененныеПозиции = Команды.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаИзменитьИзмененныеПозиции), Тип("КомандаФормы"), НСтр("ru='#4796. На форме обработки должна быть команда «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементКнопка = Элементы.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьНеРавенство(ЭлементКнопка, Неопределено, НСтр("ru='#4796. На форме обработки должен быть элемент формы «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции // Тест_ПроверкаНаличияКомандыИзменитИзмененныеПозиции()

&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаНоменклатуры() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокНоменклатуры» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокНоменклатуры»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()
 
&НаКлиенте
Функция Тест_ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры() Экспорт
	
	СтруктураСправочников	=	Тест_ЗагрузитьСписокНоменклатуры();
	МассивСтрок				=	СписокНоменклатуры.НайтиСтроки(Новый Структура("Ссылка",СтруктураСправочников.Номенклатура));
	
	УдалитьТестовыеСправочникы(СтруктураСправочников);
	
	СообщениеОбОшибке	= НСтр("ru = 'Не удалось загрузить таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьНеРавенство(СписокНоменклатуры.Количество(),0 ,СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(МассивСтрок.Количество(),0 ,СообщениеОбОшибке);
	СообщениеОбОшибке	= НСтр("ru = 'Загрузились лишние данные в таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(СписокНоменклатуры.Количество(),1 ,СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(МассивСтрок.Количество(),1 ,СообщениеОбОшибке);
	
КонецФункции

&НаКлиенте
Функция Тест_ПроверитьСоответствиеНастроекККолонкамСпискаНоменклатуры() Экспорт
	
	Отказ	=	ПроверитьСоотвествиеНастроекСПолучинемиДанными();
	СообщениеОбОшибке	= НСтр("ru = 'Не создать все нужные реквизиты по настройка БРМ!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

	ЮнитТест.ПроверитьИстину(Отказ, );
	
	
КонецФункции

&НаСервере
Функция Тест_ЗагрузитьСписокНоменклатуры()
	
	ВидНоменклатурыТест		=	ПолучитьБиблиотекуВидыНоменклатуры().СоздатьЭлементСправочника();
	СтруктураЗаполнения		=	Новый Структура("ВидНоменклатуры",ВидНоменклатурыТест);	
	НоменклатураТест		=	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(СтруктураЗаполнения);
	
	ВидНоменклатуры			=	ВидНоменклатурыТест;
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуНоменклатуры(ЭтаФорма);
		        
	Возврат Новый Структура("ВидНоменклатуры,Номенклатура",ВидНоменклатурыТест, НоменклатураТест)

КонецФункции


#Область ТестПроверкаГрупповогоЗаполненияНоменклатуры

&НаКлиенте
Процедура Тест_ПроверкаГрупповогоЗаполненияНоменклатуры() Экспорт

	РезультатРаботы = Новый Структура("Результат, СообщениеПользователю", Истина, "");
	СтруктураДанных = СоздатьЭлементыГрупповогоЗаполненияНоменклатуры();
	
	СоздатьНастройкиПользователяГрупповоеЗаполнение(СтруктураДанных.ВидЦены);
	
	СоздатьРеквизитыИЭлементыФормы();
	
	ВидНоменклатуры = СтруктураДанных.ВидНоменклатуры;
	ВидНоменклатурыПриИзменении(Неопределено); 
	
	Если СписокНоменклатуры.Количество() <> 3 Тогда
		РезультатРаботы.Результат 				= Ложь;
		РезультатРаботы.СообщениеПользователю   = НСтр("ru='#4906. Не удалось сформировать список номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Перейти ~Пометка;
	КонецЕсли;
	
	МассивИдентификаторовСтрок = ПолучитьМассивИдентификаторовСтрокГрупповогоЗаполнения();
	
	ИдентификаторКолонкиВидЦены = СтруктураДанных.ВидЦены.УникальныйИдентификатор();
	ИмяКолонкиПроцент			= ПреобразоватьУникальныйИдентификаторВНаименование("Процент_", ИдентификаторКолонкиВидЦены);
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяКолонкиПроцент, 10, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияЦенСпискаНоменклатуры(СтруктураДанных.ВидЦены, СтруктураДанных.Номенклатура3);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Опт", СтруктураДанных.КППРозница, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Опт", СтруктураДанных.КППРозница);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Розница", СтруктураДанных.КППРозница, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Розница", СтруктураДанных.КППРозница);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Розница_НеПересчитыватьАвтоматически", Истина, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Розница_НеПересчитыватьАвтоматически", Истина);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Опт_НеПересчитыватьАвтоматически", Истина, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Опт_НеПересчитыватьАвтоматически", Истина);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("ТоварнаяКатегория", СтруктураДанных.ТоварнаяКатегория, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("ТоварнаяКатегория", СтруктураДанных.ТоварнаяКатегория);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("ЦеноваяГруппа", СтруктураДанных.ЦеноваяГруппа, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("ЦеноваяГруппа", СтруктураДанных.ЦеноваяГруппа);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	Тест_Дедлайн = НачалоДня(ТекущаяДата()); 
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("Дедлайн", Тест_Дедлайн, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("Дедлайн", Тест_Дедлайн);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
~Пометка:
	УдалитьЭлементыГрупповогоЗаполненияНоменклатуры(СтруктураДанных);
	
	ЮнитТест.ПроверитьИстину(РезультатРаботы.Результат, РезультатРаботы.СообщениеПользователю);

КонецПроцедуры // Тест_ПроверкаГруповогоЗаполненияноменКлатуры()

&НаСервереБезКонтекста
Функция СоздатьЭлементыГрупповогоЗаполненияНоменклатуры()

	СтруктураДанных = Новый Структура;
	
	ВидНоменклатуры 			= СоздатьВидНоменклатурыГрупповоеЗаполнение();
	Номенклатура1				= СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры);
	Номенклатура2				= СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры);
	Номенклатура3				= СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры);
	ТоварнаяКатегория   		= СоздатьТоварнуюКатегориюГрупповоеЗаполнение(ВидНоменклатуры);
	ЦеноваяГруппа				= СоздатьЦеновуюГруппуГрупповоеЗаполнение();
	КППРозница					= СоздатьКПП();
	КППОпт						= СоздатьКПП();
	ВидЦены						= СоздатьВидЦены();
	УстановкаЦенНоменклатуры    = УстановитьЦеныНоменклатурыГрупповоеЗаполнение(ВидЦены, Номенклатура1, Номенклатура2);
	
	СтруктураДанных.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	СтруктураДанных.Вставить("Номенклатура1", Номенклатура1);
	СтруктураДанных.Вставить("Номенклатура2", Номенклатура2);
	СтруктураДанных.Вставить("Номенклатура3", Номенклатура3);
	СтруктураДанных.Вставить("ТоварнаяКатегория", ТоварнаяКатегория);
	СтруктураДанных.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
	СтруктураДанных.Вставить("КППРозница", КППРозница);
	СтруктураДанных.Вставить("КППОпт", КППОпт);
	СтруктураДанных.Вставить("ВидЦены", ВидЦены);
	СтруктураДанных.Вставить("УстановкаЦенНоменклатуры", УстановкаЦенНоменклатуры);
	
	Возврат СтруктураДанных;

КонецФункции // СоздатьЭлементыГрупповгоЗаполненияНоменклатуры()

&НаСервереБезКонтекста
Процедура УдалитьЭлементыГрупповогоЗаполненияНоменклатуры(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
#Область ПометкиНаУдалениеДляДокументов

	Если СтруктураДанных.Свойство("УстановкаЦенНоменклатуры") Тогда
		УстановкаЦенНоменклатуры = СтруктураДанных.УстановкаЦенНоменклатуры.ПолучитьОбъект();
		УстановкаЦенНоменклатуры.УстановитьПометкуУдаления(Истина);
		УстановкаЦенНоменклатуры.Записать(РежимЗаписиДокумента.Запись);		
	КонецЕсли;

#КонецОбласти
	
#Область УничтожениеСправочников

	Если СтруктураДанных.Свойство("ВидЦены") Тогда
		СправочникОбъект = СтруктураДанных.ВидЦены.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("КППРозница") Тогда
		СправочникОбъект = СтруктураДанных.КППРозница.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("КППОпт") Тогда
		СправочникОбъект = СтруктураДанных.КППОпт.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("Номенклатура3") Тогда
		СправочникОбъект = СтруктураДанных.Номенклатура3.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Номенклатура2") Тогда
		СправочникОбъект = СтруктураДанных.Номенклатура2.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Номенклатура1") Тогда
		СправочникОбъект = СтруктураДанных.Номенклатура1.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЦеноваяГруппа") Тогда
		СправочникОбъект = СтруктураДанных.ЦеноваяГруппа.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("ТоварнаяКатегория") Тогда
		СправочникОбъект = СтруктураДанных.ТоварнаяКатегория.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("ВидНоменклатуры") Тогда
		СправочникОбъект = СтруктураДанных.ВидНоменклатуры.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

#КонецОбласти

#Область УничтожениеДокументов

	Если СтруктураДанных.Свойство("УстановкаЦенНоменклатуры") Тогда
		УстановкаЦенНоменклатуры.Удалить();
	КонецЕсли;

#КонецОбласти

КонецПроцедуры // УдалитьЭлементыГрупповогоЗаполненияНоменклатуры()

&НаСервере
Функция ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры(ИмяКолонки, ЗначениеДляПроверки) 
	РезультатПроверки = Новый Структура("Результат, СообщениеПользователю", Истина, "");
	Для каждого СтрокаСписка Из СписокНоменклатуры Цикл
		Если СтрокаСписка[ИмяКолонки] <> ЗначениеДляПроверки  
				ИЛИ СтрокаСписка["ЭлементИзменен_" + ИмяКолонки] = Ложь 
				ИЛИ СтрокаСписка["ЭлементИзменен"]  = Ложь Тогда
			СообщениеПользователю = НСтр("ru='#4906. Не удалось заполнить колонку %1 значением %2.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю, ИмяКолонки, ЗначениеДляПроверки);
			РезультатПроверки.Вставить("Результат", Ложь);
			РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатПроверки;
КонецФункции // ВыполнитьПроверкуЗаполненияСпискаНоменклатуры()
 
&НаСервере
Функция ВыполнитьПроверкуЗаполненияЦенСпискаНоменклатуры(ВидЦен, НоменклатураСПустойЦеной)
	
	РезультатПроверки 				= Новый Структура("Результат, СообщениеПользователю", Истина, "");
	ИдентификаторЦены 				= ВидЦен.УникальныйИдентификатор();
	ИмяКолонкиЦенаУпрУч 			= ПреобразоватьУникальныйИдентификаторВНаименование("ВидЦены_УпрУч_", ИдентификаторЦены);
	ИмяКолонкиПроцентИзмененУпрУч 	= ПреобразоватьУникальныйИдентификаторВНаименование("ПроцентИзменен_ВидЦены_УпрУч_", ИдентификаторЦены);
	ИмяКолонкиРеглУч 				= ПреобразоватьУникальныйИдентификаторВНаименование("ВидЦены_РеглУч_", ИдентификаторЦены);
	ИмяКолонкиПроцентИзмененРеглУч 	= ПреобразоватьУникальныйИдентификаторВНаименование("ПроцентИзменен_ВидЦены_РеглУч_", ИдентификаторЦены);
	ИмяКолонкиПроцент 				= ПреобразоватьУникальныйИдентификаторВНаименование("Процент_", ИдентификаторЦены);
	ИмяКолонкиПроцентИзменен		= ПреобразоватьУникальныйИдентификаторВНаименование("ПроцентИзменен_", ИдентификаторЦены);
	
	Для каждого СтрокаСписка Из СписокНоменклатуры Цикл
		ЦеныНоменклатуры  = ПолучитьЦенуНоменклатурыГрупповогоЗаполнения(СтрокаСписка.Ссылка, ВидЦен);
		Если СтрокаСписка.Ссылка = НоменклатураСПустойЦеной Тогда
			Если СтрокаСписка[ИмяКолонкиЦенаУпрУч] <> 0 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить цену номенклатуры управленческого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиРеглУч] <> 0 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить цену номенклатуры регламентированого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцент] <> 0 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить процент изменения цены, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцентИзмененУпрУч] Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения цены управленческого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцентИзмененРеглУч] Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения цены регламентированого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцентИзменен] Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения процента цены, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка.ЭлементИзменен Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения строки таблицы «Список номенклатуры» а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
		Иначе
			Если (((СтрокаСписка[ИмяКолонкиЦенаУпрУч] / ЦеныНоменклатуры.ЦенаУпр) - 1 )* 100) <> 10 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось изменить цену номенклатуры в валюте управленческого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если (((СтрокаСписка[ИмяКолонкиРеглУч] / ЦеныНоменклатуры.ЦенаРегл) - 1 )* 100) <> 10 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось изменить цену номенклатуры в валюте регламентированого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			//Если Не СтрокаСписка[ИмяКолонкиПроцентИзмененУпрУч] Тогда
			//	СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения цены управленческого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			//	РезультатПроверки.Вставить("Результат", Ложь);
			//	РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
			//	Прервать;
			//КонецЕсли;
			//Если Не СтрокаСписка[ИмяКолонкиПроцентИзмененРеглУч] Тогда
			//	СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения цены регламентированого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			//	РезультатПроверки.Вставить("Результат", Ложь);
			//	РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
			//	Прервать;
			//КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцент] <> 10 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось установить процент изменения цены.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если Не СтрокаСписка[ИмяКолонкиПроцентИзменен] Тогда   
				СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения процента цены.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если Не СтрокаСписка.ЭлементИзменен Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения строки таблицы «Список номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатПроверки;
КонецФункции // ВыполнитьПроверкуЗаполненияЦенСписокаНоменклатуры()

&НаСервере
Функция ПолучитьЦенуНоменклатурыГрупповогоЗаполнения(Номенклатура, ВидЦены)

	РезультатЗапроса = Новый Структура("Номенклатура, ЦенаУпр, ЦенаРегл", Номенклатура, 0, 0);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура		КАК Номенклатура,
	                      |	Цена				КАК Цена,
	                      |	ВидЦены.ВалютаЦены 	КАК Валюта
	                      |ПОМЕСТИТЬ ЦеныНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			&Дата,
	                      |			ВидЦены = &ВидЦены
	                      |				И Номенклатура = &Номенклатура)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Валюта				КАК Валюта,
	                      |	Курс / Кратность 	КАК Курс
	                      |ПОМЕСТИТЬ КурсыВалют
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, )
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	ВЫБОР
	                      |		КОГДА ЦеныНоменклатуры.Валюта = &ВалютаУпрУчета
	                      |			ТОГДА ЦеныНоменклатуры.Цена
	                      |		ИНАЧЕ ЦеныНоменклатуры.Цена * ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1)
	                      |	КОНЕЦ КАК ЦенаУпр,
	                      |	ВЫБОР
	                      |		КОГДА ЦеныНоменклатуры.Валюта = &ВалютаРеглУчета
	                      |			ТОГДА ЦеныНоменклатуры.Цена
	                      |		ИНАЧЕ ЦеныНоменклатуры.Цена * ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1)
	                      |	КОНЕЦ КАК ЦенаРегл
	                      |ИЗ
	                      |	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦены
	                      |		ПО ЦеныНоменклатуры.Валюта = КурсыВалютЦены.Валюта
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	                      |		ПО (КурсыВалютУпр.Валюта = &ВалютаУпрУчета)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	                      |		ПО (КурсыВалютРегл.Валюта = &ВалютаРеглУчета)");
						  
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатЗапроса, Выборка);
	КонецЕсли;
	
	Возврат РезультатЗапроса;

КонецФункции // ПолучитьЦенуНоменклатурыГрупповогоЗаполнения()

&НаСервере
Функция ПолучитьМассивИдентификаторовСтрокГрупповогоЗаполнения()

	МассивИдентификаторов = Новый Массив;
	
	Для каждого СтрокаТаблицы Из СписокНоменклатуры Цикл
		МассивИдентификаторов.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());	
	КонецЦикла; 

	Возврат МассивИдентификаторов;
	
КонецФункции // ПолучитьМассивИдентификаторовСтрок()
 
 


&НаСервереБезКонтекста
Процедура СоздатьНастройкиПользователяГрупповоеЗаполнение(ВидЦены)

	_u_ТекущийПользователь 		= ПользователиКлиентСервер.ТекущийПользователь();
	_u_НастройкиПользователя 	= Новый Структура;
	
	_u_ДополнительныеВидыЦен = Новый Массив;
	_u_ДополнительныеВидыЦен.Добавить(ВидЦены);
	
	_u_НастройкиПользователя.Вставить("ДополнительныеВидыЦен", _u_ДополнительныеВидыЦен);
	ХранилищеНастроекДанныхФорм.Сохранить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , _u_НастройкиПользователя, "Настройки пользователя", "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
КонецПроцедуры // СоздатьНастройкиПользователяГрупповоеЗаполнение()
 

&НаСервереБезКонтекста
Функция СоздатьВидНоменклатурыГрупповоеЗаполнение()
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	Библиотека			= ПолучитьБиблиотекуВидыНоменклатуры();
	Возврат Библиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
КонецФункции // СоздатьВидНоменклатурыГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры)
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование, ВидНоменклатуры", Наименование, ВидНоменклатуры);
	Библиотека			= ПолучитьБиблиотекуНоменклатуры();
	Возврат Библиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
КонецФункции // СоздатьНоменклатуруГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция СоздатьТоварнуюКатегориюГрупповоеЗаполнение(ВидНоменклатуры)
	ПараметрыЗаполнения = Новый Структура("Владелец", ВидНоменклатуры);
	Библиотека			= ПолучитьБибилиотекуТоварныеКатегории();
	Возврат Библиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
КонецФункции // СоздатьТоварнуюКатегориюГрурпповоеЗаполнение()
 
&НаСервереБезКонтекста
Функция СоздатьЦеновуюГруппуГрупповоеЗаполнение()
	Библиотека = ПолучитьБибилиотекуЦеновыеГруппы();
	Возврат Библиотека.СоздатьЭлементСправочника();	
КонецФункции // СоздатьЦеновуюГруппуГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция СоздатьКПП()
	Библиотека = ПолучитьБибилиотекуКПП();
	Возврат Библиотека.СоздатьЭлементСправочника();
КонецФункции // СоздатьКПП()

&НаСервереБезКонтекста
Функция СоздатьВидЦены()
	Библиотека = ПолучитьБиблиотекуВидыЦены();
	Возврат Библиотека.СоздатьЭлементСправочника();
КонецФункции // СоздатьВидЦены()

&НаСервереБезКонтекста
Функция УстановитьЦеныНоменклатурыГрупповоеЗаполнение(ВидЦены, Номенклатура1, Номенклатура2)

	ТаблицаВидыЦен 		= ИнициализироватьТаблицуВидыЦенГрупповоеЗаполнение();
	НоваяСтрока    		= ТаблицаВидыЦен.Добавить();
	НоваяСтрока.ВидЦены = ВидЦены;
	
	ТаблицаТовары					= ИнициализироватьТаблицуТоварыГрупповоеИзменение();
	
	НоваяСтрока    					= ТаблицаТовары.Добавить();
	НоваяСтрока.Номенклатура 		= Номенклатура1;
	НоваяСтрока.ВидЦены 			= ВидЦены;
	НоваяСтрока.Цена 				= 100;
	НоваяСтрока.ЦенаИзмененаВручную = Истина;
	
	НоваяСтрока    					= ТаблицаТовары.Добавить();
	НоваяСтрока.Номенклатура 		= Номенклатура2;
	НоваяСтрока.ВидЦены 			= ВидЦены;
	НоваяСтрока.Цена 				= 200;
	НоваяСтрока.ЦенаИзмененаВручную = Истина;
	
	ПараметрыЗаполнения = Новый Структура("ВидыЦен, Товары", ТаблицаВидыЦен, ТаблицаТовары);
	
	Бибилиотека = ПолучитьБибилиотекуУстановкаЦенНоменклатуры();
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);
	
КонецФункции // УстановитьЦеныНоменклатурыГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуВидыЦенГрупповоеЗаполнение()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Возврат Таблица;
КонецФункции // ИнициализироватьТаблицуВидыЦен()
 
&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуТоварыГрупповоеИзменение()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Таблица.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
	Таблица.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	Возврат Таблица;
КонецФункции // ИнициализироватьТаблицуТоварыГрупповоеИзменение()
 

#КонецОбласти 
 


&НаСервере
Функция УдалитьТестовыеСправочникы(СтруктураСправочников)
	
	ВидНоменклатурыТест	= СтруктураСправочников.ВидНоменклатуры;
	СправочникОбъект	=	ВидНоменклатурыТест.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();

	
	НоменклатураТест	= СтруктураСправочников.Номенклатура;
	СпрНомОбъект	=	НоменклатураТест.ПолучитьОбъект();
	СпрНомОбъект.УстановитьПометкуУдаления(Истина);
	СпрНомОбъект.Записать();
	СпрНомОбъект.Удалить();


КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуВидыНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуТоварныеКатегории()
	ПутьКБиблиотеке = "\tests\Справочники\Товарные категории\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуТоварныеКатегории()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуЦеновыеГруппы()
	ПутьКБиблиотеке = "\tests\Справочники\ЦеновыеГруппы\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуЦеновыеГруппы()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуКПП()
	ПутьКБиблиотеке = "\tests\Справочники\КоефициентПриоритетностиНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуКПП()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуВидыЦены()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыЦены\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуВидыЦены()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуУстановкаЦенНоменклатуры()
	ПутьКБиблиотеке = "\tests\Документы\УстановкаЦенНоменклатуры\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуУстановкаЦенНоменклатуры()
 
 

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

&НаСервере
Функция ПроверитьСоотвествиеНастроекСПолучинемиДанными()
	
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонок();
	СоздатьРеквизитыФормы(СтруктураКолонок);

	СтруктураМассивов	= РеквизитФормыВЗначение("Объект").ПолучитьНастройки();
	
	Если ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураМассивов.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(СтруктураМассивов.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(СтруктураМассивов.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ЭлементыФормы Из  СтруктураМассивов.СписокВидовЦен Цикл
	
		ПолеФормыУпр	=	Элементы.Найти("ВидЦены_УпрУч_"+ЭлементыФормы.УИ);
		ПолеФормыРегл	=	Элементы.Найти("ВидЦены_РеглУч_"+ЭлементыФормы.УИ);
		Если ПолеФормыУпр = Неопределено 
			Или  ПолеФормыРегл = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЭлементыФормы Из  СтруктураМассивов.СписокВидовЦенПоставщика Цикл
	
		ПолеФормыЦенаПоставщика	=	Элементы.Найти("ЦенаПоставщика_"+ЭлементыФормы.УИ);
		Если ПолеФормыЦенаПоставщика = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЭлементыФормы Из  СтруктураМассивов.СписокДопСвойства Цикл
	
		ПолеФормыДопСвойство	=	Элементы.Найти("ДопСвойство_"+ЭлементыФормы.УИ);
		Если ПолеФормыДопСвойство = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
КонецФункции // ПроверитьСоотвествиеНастроекСПолучинемиДанными()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПроверитьПравоНаРаботуСОбработкой() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='У Вас недостаточно прав для запуска обработки ИзмененияЦенИРеквизитовНоменклатуры'"));
		Возврат;
	КонецЕсли;
		
	Если Параметры.Свойство("СсылкаНаЗаказПоставщику") Тогда
		ЗаказПоставщику = Параметры.СсылкаНаЗаказПоставщику;	
	КонецЕсли;
	
	Если Параметры.Свойство("МассивНоменклатуры") Тогда
		МассивНоменклатуры	= Параметры.МассивНоменклатуры;	
	КонецЕсли;
		
	СоздатьРеквизитыИЭлементыФормы();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек		= РеквизитФормыВЗначение("Объект").ПолучитьНастройки();	
	Если СтруктураНастроек.Свойство("ВидНоменклатуры") Тогда
		ВидНоменклатуры = СтруктураНастроек.ВидНоменклатуры;
	КонецЕсли;
	ЗагрузитьСписокНоменклатурыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Ответ = Вопрос(НСтр("ru='Данные о ценах и реквизитах ноенклатуры были изменены. Записать изменения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Модифицированность 	= Ложь;
			РезультатРаботы 	= ИзменитьИзмененныеПозицииНаСервере();
			Если РезультатРаботы Тогда
				ПоказатьОповещениеПользователя(НСтр("ru='Данные успешно записаны.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					НСтр("ru='Данные были успешно записаны в базу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					БиблиотекаКартинок.Информация32);
			КонецЕсли;		
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ТекущиеДанные  = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Номенклатура   = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Характеристика = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Характеристика);
	ЗагрузитьСписокНоменклатурыНаСервере(Номенклатура, Характеристика);
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблициСписокНоменклатуры

&НаКлиенте
Процедура Подключаемый_ЭлементПроцентПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки					= Элемент.Имя;
	ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"Процент_", "ВидЦены_УпрУч_");
	ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"Процент_", "ВидЦены_РеглУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"Процент_", "ПроцентИзменен_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"Процент_", "");
	
	ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
	
	Если ЦенаВВалютеУпрУчета = 0 ИЛИ ЦенаВВалютеРеглУчета = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить цену на определенный процент, цена в базе не установлена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ТекущиеДанные[ИмяКолонки]				= 0;
		ТекущиеДанные[ИмяКолонкиУпрУч]  		= 0;
		ТекущиеДанные[ИмяКолонкиРеглУч] 		= 0;
		ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Ложь;
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные[ИмяКолонкиУпрУч]			= ЦенаВВалютеУпрУчета * (1 + ТекущиеДанные[ИмяКолонки] / 100);	
	ТекущиеДанные[ИмяКолонкиРеглУч]			= ЦенаВВалютеРеглУчета * (1 + ТекущиеДанные[ИмяКолонки] / 100);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = ?(ТекущиеДанные[ИмяКолонки] = 0, Ложь, Истина);
	ТекущиеДанные.ЭлементИзменен            = ?(ТекущиеДанные[ИмяКолонки] = 0, Ложь, Истина);
	
	Модифицированность = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементВидЦеныУпрПриИзменении(Элемент)

	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки					= Элемент.Имя;
	ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ВидЦены_РеглУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ПроцентИзменен_");
	ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","Процент_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_", "");
	
	ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
	КурсУпр					= ТекущиеЦены.КурсУпр;
	КурсРегл                = ТекущиеЦены.КурсРегл;
	
	Если ЦенаВВалютеУпрУчета = 0 Тогда
		ТекущиеДанные[ИмяКолонкиПроцент] = 9999999999;
	Иначе
		ТекущиеДанные[ИмяКолонкиПроцент] = (ТекущиеДанные[ИмяКолонки] / ЦенаВВалютеУпрУчета - 1) * 100;
	КонецЕсли;
		
	ТекущиеДанные[ИмяКолонкиРеглУч]  		= ТекущиеДанные[ИмяКолонки] * (КурсУпр / КурсРегл);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Истина;
	ТекущиеДанные.ЭлементИзменен            = Истина;
	
	Модифицированность = Истина;

КонецПроцедуры // Подключаемый_ЭлементВидЦеныУпрПриИзменении()

&НаКлиенте
Процедура Подключаемый_ЭлементВидЦеныРеглПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки					= Элемент.Имя;
	ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "ВидЦены_УпрУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "ПроцентИзменен_");
	ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "Процент_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "");
	
	ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
	КурсУпр					= ТекущиеЦены.КурсУпр;
	КурсРегл                = ТекущиеЦены.КурсРегл;
	
	Если ЦенаВВалютеРеглУчета = 0 Тогда
		ТекущиеДанные[ИмяКолонкиПроцент] = 9999999999;
	Иначе
		ТекущиеДанные[ИмяКолонкиПроцент] = (ТекущиеДанные[ИмяКолонки] / ЦенаВВалютеРеглУчета - 1) * 100;
	КонецЕсли;
	
	ТекущиеДанные[ИмяКолонкиУпрУч]  		= ТекущиеДанные[ИмяКолонки] * (КурсРегл / КурсУпр);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Истина;
	ТекущиеДанные.ЭлементИзменен            = Истина;

	Модифицированность = Истина;
	
КонецПроцедуры // Подключаемый_ЭлементВидЦеныРеглПриИзменении()

&НаКлиенте
Процедура Подключаемый_ЭлементФормыПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки						= "ЭлементИзменен_" + Элемент.Имя;	
	ТекущиеДанные[ИмяКолонки] 		= Истина;
	ТекущиеДанные.ЭлементИзменен    = Истина;
	
	Модифицированность = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец", ТекущиеДанные.ВидНоменклатуры), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СписокНоменклатурыСсылка" Тогда
		ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКолонку(Команда)
	
	Перем ЗначениеДляЗаполнения;
	
	ЭлСписокНоменклатуры = Элементы.СписокНоменклатуры;
	ТекущиеДанные 		 = ЭлСписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки 		= ЭлСписокНоменклатуры.ТекущийЭлемент.Имя;
	РезультатВвода			= Ложь;
	МассивИдентификаторов   = ЭлСписокНоменклатуры.ВыделенныеСтроки;
	
	Если ИмяТекущейКолонки = "КПП_Опт" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить КПП для опта.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"));
	ИначеЕсли ИмяТекущейКолонки = "КПП_Опт_НеПересчитыватьАвтоматически" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить флаг автоматического пересчета КПП для опта.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));
	ИначеЕсли ИмяТекущейКолонки = "КПП_Розница" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить КПП для розницы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"));
	ИначеЕсли ИмяТекущейКолонки = "КПП_Розница_НеПересчитыватьАвтоматически" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить флаг автоматического пересчета КПП для розницы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));	
	ИначеЕсли ИмяТекущейКолонки = "ТоварнаяКатегория" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить товарную категорию.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
	ИначеЕсли ИмяТекущейКолонки = "ЦеноваяГруппа" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить ценовую группу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	ИначеЕсли ИмяТекущейКолонки = "Дедлайн" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить дедлайн ценовой группы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Дата"));
	ИначеЕсли Найти(ИмяТекущейКолонки, "ВидЦены_УпрУч_") <> 0  Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите значение цены в валюте управленческого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ИначеЕсли Найти(ИмяТекущейКолонки, "ВидЦены_РеглУч_") <> 0  Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите значение цены в валюте регламентированого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ИначеЕсли Найти(ИмяТекущейКолонки, "Процент_") <> 0  Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите значение процента на который должна измениться цена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для колонки запрещено групповое изменение занчений реквизитов и цен номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если РезультатВвода Тогда
		ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяТекущейКолонки, ЗначениеДляЗаполнения, МассивИдентификаторов);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьИзмененныеПозиции(Команда)
	ТекущиеДанные 	= Элементы.СписокНоменклатуры.ТекущиеДанные;
	Номенклатура  	= ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Характеристика  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Характеристика);
	РезультатРаботы = ИзменитьИзмененныеПозицииНаСервере(Номенклатура, Характеристика);
	Если РезультатРаботы Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Данные успешно записаны.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					НСтр("ru='Данные были успешно записаны в базу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					БиблиотекаКартинок.Информация32);
		Модифицированность = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РеквизитыИЭлементыФормы

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы()
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонок();
	СоздатьРеквизитыФормы(СтруктураКолонок);
	СоздатьЭлементыФормы(СтруктураКолонок);
КонецПроцедуры // СоздатьРеквизитыИЭлементыФормы()
 
&НаСервере
Процедура СоздатьРеквизитыФормы(СтруктураКолонок)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен", 										Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Опт", 												Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"), "СписокНоменклатуры", "Значение"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Опт", 								Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Опт_НеПересчитыватьАвтоматически",					Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Опт_НеПересчитыватьАвтоматически",	Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Розница", 											Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"), "СписокНоменклатуры", "Значение"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Розница", 							Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Розница_НеПересчитыватьАвтоматически",				Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_КПП_Розница_НеПересчитыватьАвтоматически",Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТоварнаяКатегория", 										Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"), "СписокНоменклатуры", "Товарная категория"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_ТоварнаяКатегория", 						Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦеноваяГруппа",	 										Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"), "СписокНоменклатуры", "Ценовая группа"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_ЦеноваяГруппа", 							Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Дедлайн", 												Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)), "СписокНоменклатуры", "Дедлайн")); 
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен_Дедлайн", 								Новый ОписаниеТипов("Булево"), "СписокНоменклатуры"));
	
	Если НЕ ЗаказПоставщику.Пустая() Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КоличествоИзЗаказа", 								Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)), "СписокНоменклатуры", "Кол."));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦенаПоставщикаУпрУч", 								Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)), "СписокНоменклатуры", "Цена,USD"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦенаПоставщикаРеглУч", 								Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)), "СписокНоменклатуры", "Цена, ГРН"));
	КонецЕсли;
	
	Для каждого Колонка Из СтруктураКолонок.СписокВидовЦен Цикл
		Если Колонка.ЭтоГруппа Тогда
			Продолжить;		
		КонецЕсли;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	
	Для каждого Колонка Из СтруктураКолонок.СписокВидовЦенПоставщика Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	
	Для каждого Колонка Из СтруктураКолонок.СписокДопСвойства Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя,Новый ОписаниеТипов("Строка"), "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	ИзменитьРеквизиты(МассивРеквизитов);

КонецПроцедуры // СоздатьРеквизитыФормы()

&НаСервере
Процедура СоздатьЭлементыФормы(СтруктураКолонок)
	
	ГСЧ 					  = Новый ГенераторСлучайныхЧисел;
	ЭлементСписокНоменклатуры = Элементы.СписокНоменклатуры;
	
<<<<<<< HEAD
<<<<<<< HEAD
	Если Элементы.Найти("ГруппаКПП_Опт") = Неопределено Тогда
		ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Опт", "КПП Опт", ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	КонецЕсли;
	
	Если Элементы.Найти("КПП_Опт") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
=======
	Если Элементы.Найти("ГруппаКПП_Розница") = Неопределено Тогда 
		ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Розница", "КПП Розница", ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	КонецЕсли;
	
	Если Элементы.Найти("КПП_Розница") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
>>>>>>> dev
=======
	Если Элементы.Найти("ГруппаКПП_Опт") = Неопределено Тогда
		ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Опт", "КПП Опт", ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	КонецЕсли;
	
	Если Элементы.Найти("КПП_Опт") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
>>>>>>> dev
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
	
<<<<<<< HEAD
<<<<<<< HEAD
	Если Элементы.Найти("КПП_Опт_НеПересчитыватьАвтоматически") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
=======
	Если Элементы.Найти("КПП_Розница_НеПересчитыватьАвтоматически") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
>>>>>>> dev
=======
	Если Элементы.Найти("КПП_Опт_НеПересчитыватьАвтоматически") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
>>>>>>> dev
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
<<<<<<< HEAD
<<<<<<< HEAD

	Если Элементы.Найти("ГруппаКПП_Розница") = Неопределено Тогда 
		ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Розница", "КПП Розница", ФиксацияВТаблице.Нет);
		ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	КонецЕсли;
	
	Если Элементы.Найти("КПП_Розница") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
	
	Если Элементы.Найти("КПП_Розница_НеПересчитыватьАвтоматически") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
=======
	
	Если Элементы.Найти("СредЗаработок_Розница") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("СредЗаработок_Розница", Новый Цвет(255, 235, 205), Истина, ,200,,);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	КонецЕсли;
	
	Если Элементы.Найти("ГруппаКПП_Опт") = Неопределено Тогда
		ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Опт", "КПП Опт", ФиксацияВТаблице.Нет);
=======

	Если Элементы.Найти("ГруппаКПП_Розница") = Неопределено Тогда 
		ПараметрыЭлементаКПП = СтруктураПараметровГруппыКолонок("ГруппаКПП_Розница", "КПП Розница", ФиксацияВТаблице.Нет);
>>>>>>> dev
		ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаКПП, ЭлементСписокНоменклатуры);
	КонецЕсли;
	
	Если Элементы.Найти("КПП_Розница") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
	
<<<<<<< HEAD
	Если Элементы.Найти("КПП_Опт_НеПересчитыватьАвтоматически") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
>>>>>>> dev
=======
	Если Элементы.Найти("КПП_Розница_НеПересчитыватьАвтоматически") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница_НеПересчитыватьАвтоматически", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина,ВидПоляФормы.ПолеФлажка);
>>>>>>> dev
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
<<<<<<< HEAD
=======

<<<<<<< HEAD
	Если Элементы.Найти("СредЗаработок_Опт") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("СредЗаработок_Опт", Новый Цвет(255, 235, 205), Истина, ,200,,);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
	КонецЕсли;
>>>>>>> dev

=======
>>>>>>> dev
	Если Элементы.Найти("ТоварнаяКатегория") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("ТоварнаяКатегория", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
		ЭлементФормы.УстановитьДействие("НачалоВыбора", "Подключаемый_ТоварнаяКатегорияНачалоВыбора");
	КонецЕсли;
	
	Если Элементы.Найти("ЦеноваяГруппа") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("ЦеноваяГруппа", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
	
	Если Элементы.Найти("Дедлайн") = Неопределено Тогда
		ПараметрыЭлемента = СтруктураПараметровКолонки("Дедлайн", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
		ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементФормыПриИзменении");
	КонецЕсли;
	
	Если НЕ ЗаказПоставщику.Пустая() Тогда
		Если Элементы.Найти("ГруппаЗП") = Неопределено Тогда
			ПараметрыЭлементаЗП = СтруктураПараметровГруппыКолонок("ГруппаЗП", "Заказ поставщику", ФиксацияВТаблице.Нет);
			ГруппаКолонок 	  	 = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаЗП, ЭлементСписокНоменклатуры);
		КонецЕсли;

		Если Элементы.Найти("КоличествоИзЗаказа") = Неопределено Тогда
			ПараметрыЭлемента = СтруктураПараметровКолонки("КоличествоИзЗаказа", Новый Цвет(255, 235, 205), Истина, ,200,,Истина);
			ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		КонецЕсли;
		
		Если Элементы.Найти("ЦенаПоставщикаУпрУч") = Неопределено Тогда
			ПараметрыЭлемента = СтруктураПараметровКолонки("ЦенаПоставщикаУпрУч", Новый Цвет(255, 235, 205), Истина, ,200,,Истина);
			ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		КонецЕсли;
		
		Если Элементы.Найти("ЦенаПоставщикаРеглУч") = Неопределено Тогда
			ПараметрыЭлемента = СтруктураПараметровКолонки("ЦенаПоставщикаРеглУч", Новый Цвет(255, 235, 205), Истина, ,200,,Истина);
			ЭлементФормы	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
		КонецЕсли;
	КонецЕсли;

	
	Для каждого ЭлементМассива Из СтруктураКолонок.СписокВидовЦен Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		Если ЭлементМассива.СлужебнаяКолонка Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементМассива.ЭтоГруппа Тогда
			Если Элементы.Найти(ЭлементМассива.Имя) = Неопределено Тогда
				ПараметрыЭлемента = СтруктураПараметровГруппыКолонок(ЭлементМассива.Имя, ЭлементМассива.Заголовок, ФиксацияВТаблице.Нет);
				ГруппаКолонок 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
			КонецЕсли;
		Иначе
			Если Элементы.Найти(ЭлементМассива.Имя) = Неопределено Тогда
				ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Ложь, , ЦветФонаЗаголовка,,Ложь);
				ЭлементПроцент	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
				ЭлементПроцент.УстановитьДействие("ПриИзменении", ЭлементМассива.ПриИзменении);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.Найти("ГруппаДопСвойста") = Неопределено Тогда
		ПараметрыЭлементаДопСвойства = СтруктураПараметровГруппыКолонок("ГруппаДопСвойста", "Дополнительные свойства", ФиксацияВТаблице.Нет);
		ГруппаКолонокДопСвойста 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаДопСвойства, ЭлементСписокНоменклатуры);
	КонецЕсли;
	
	Для каждого ЭлементМассива Из СтруктураКолонок.СписокДопСвойства Цикл
		Если Элементы.Найти(ЭлементМассива.Имя) = Неопределено Тогда
			ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
			ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Истина, , ЦветФонаЗаголовка,,Ложь);
			git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонокДопСвойста);
		КонецЕсли;
	КонецЦикла;	
	
	Если Элементы.Найти("ГруппаЦенаПоставщика") = Неопределено Тогда
		ПараметрыЭлементаЦенаПоставщика = СтруктураПараметровГруппыКолонок("ГруппаЦенаПоставщика", "Цены поставщиков", ФиксацияВТаблице.Нет);
		ГруппаКолонокЦеныПоставщиков 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаЦенаПоставщика, ЭлементСписокНоменклатуры);
	КонецЕсли;

	Для каждого ЭлементМассива Из СтруктураКолонок.СписокВидовЦенПоставщика Цикл
		Если Элементы.Найти(ЭлементМассива.Имя) = Неопределено Тогда
			ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
			ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Истина, , ЦветФонаЗаголовка,,Ложь);
			git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонокЦеныПоставщиков);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СоздатьЭлементыФормы()

&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице, ЦветФонаЗаголовка=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Ширина", 12);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("КартинкаШапки", БиблиотекаКартинок.ЗначокПлюс);
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр, Подсказка, ЦветФонаЗаголовка=Неопределено, Шрифт=Неопределено,КнопкаВыбора=Ложь,ВидПоля=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);  
	ПараметрыЭлемента.Вставить("Вид", ?(ВидПоля=Неопределено,ВидПоляФормы.ПолеВвода,ВидПоля));
	ПараметрыЭлемента.Вставить("ПутьКДанным", "СписокНоменклатуры." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента",Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 3);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаОткрытия", Ложь);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", КнопкаВыбора);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("Подсказка", Подсказка);
	ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(0, 0, 0));
	Если Шрифт <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("Шрифт", Шрифт);
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	Возврат ПараметрыЭлемента;
КонецФункции // СтруктураПараметровКолонки()

#КонецОбласти 

#Область УсловноеОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаОбъект 			= РеквизитФормыВЗначение("Объект");
	ТаблицаСписокНоменклатуры	= РеквизитФормыВЗначение("СписокНоменклатуры", Тип("ТаблицаЗначений"));
	
	Для каждого КолонкаТаблицы Из ТаблицаСписокНоменклатуры.Колонки Цикл
		ИмяКолонки = КолонкаТаблицы.Имя;
		Если Найти(ИмяКолонки, "ПроцентИзменен_") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияТолькоПросмотр(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, "Тип_Колонки_Цена");
		КонецЕсли;
		Если Найти(ИмяКолонки, "ЭлементИзменен_") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, "Тип_Колонки_Реквизит");
		КонецЕсли;
	КонецЦикла; 
			
	ЗначениеВРеквизитФормы(ТаблицаСписокНоменклатуры, "СписокНоменклатуры");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияТолькоПросмотр(ИмяКолонки)

	ИмяЭлементаПроцентЦены 	= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "Процент_");
	ИмяЭлементаВидЦены 		= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_УпрУч_");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяЭлементаПроцентЦены);
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ИмяЭлементаВидЦены);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры // ДобавитьЭлементУсловногоОформления()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки)
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатуры");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(147, 196, 0));
	
КонецПроцедуры // ДобавитьЭлементУсловногоОформленияЦветФонаСтроки()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, ТипКолонки)

	Если ТипКолонки = "Тип_Колонки_Цена" Тогда
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_УпрУч_");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_РеглУч_");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "Процент_");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
	КонецЕсли;
	
	Если ТипКолонки = "Тип_Колонки_Реквизит" Тогда
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ЭлементИзменен_", "");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры // ДобавитьЭлементУсловногоОформленияФонаЯчейки()

&НаСервере
Процедура УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонкиОтбора)

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиПоля);
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиОтбора);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(9, 144, 74));
	
КонецПроцедуры // УстановитьУсловноеОформлениеЯчейки()
 
#КонецОбласти 

#Область ПраваДостапаОбработки

&НаСервере
Функция ПроверитьПравоНаРаботуСОбработкой()
	
	Если РольДоступна("ПолныеПрава")  Тогда
		Возврат Истина;	
	КонецЕсли;

	Если РольДоступна("КПП_ДобавлениеИзменениеОбработкиИрокез")  Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Возврат Ложь; 		
	
КонецФункции // ПроверитьПравоНаРаботуСОбработкой()
		
#КонецОбласти

&НаСервере
Процедура ЗагрузитьСписокНоменклатурыНаСервере(знач Номенклатура = Неопределено, знач Характеристика = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуНоменклатуры(ЭтаФорма);
	
	Если Номенклатура <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Ссылка, Характеристика", Номенклатура, Характеристика);
		РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокНоменклатурыНаСервере()

&НаСервере
Функция ИзменитьИзмененныеПозицииНаСервере(знач Номенклатура=Неопределено, знач Характеристика=Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	РезультатыРаботы = РеквизитФормыВЗначение("Объект").ИзменитьПозиции(ЭтаФорма);
	Если Номенклатура <> Неопределено И Характеристика <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Ссылка, Характеристика", Номенклатура, Характеристика);
		РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатыРаботы;
КонецФункции // ИзменитьИзмененныеПозицииНаСервере()


&НаСервереБезКонтекста
Функция ПолучитьТекущиеЦены(ИмяКолонки, Номенклатура, Характеристика)

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатРасчета = Новый Структура("ЦенаВВалютеУпрУчета, ЦенаВВалютеРеглУчета, КурсУпр, КурсРегл, КурсЦены", 0, 0, 1, 1, 1);
	
	ИдентификаторЦены = УникальныйИдентификаторИзСтроки("", ИмяКолонки);
	ВидЦены			  = Справочники.ВидыЦен.ПолучитьСсылку(ИдентификаторЦены);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Цена				КАК Цена,
	                      |	ВидЦены.ВалютаЦены 	КАК Валюта
	                      |ПОМЕСТИТЬ ТекущиеЦены
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			&Дата,
	                      |			ВидЦены = &ВидЦены
	                      |				И Номенклатура = &Номенклатура
	                      |				И Характеристика = &Характеристика)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Валюта				КАК Валюта,
	                      |	Курс / Кратность 	КАК Курс
	                      |ПОМЕСТИТЬ КурсыВалют
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, )
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.Валюта = &ВалютаРегламентированогоУчета
						  |			ТОГДА ТекущиеЦены.Цена
						  |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВВалютеРеглУчета,
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.Валюта = &ВалютаУправленческогоУчета
						  |			ТОГДА ТекущиеЦены.Цена
						  |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВВалютеУпрУчета,
						  |	ЕСТЬNULL(КурсыВалютЦены.Курс, 1) КАК КурсЦены
						  |ИЗ
						  |	ТекущиеЦены КАК ТекущиеЦены
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦены
						  |		ПО ТекущиеЦены.Валюта = КурсыВалютЦены.Валюта
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
						  |		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
						  |		ПО КурсыВалютРегл.Валюта = &ВалютаРегламентированогоУчета
						  |;
						  |
						  |ВЫБРАТЬ
						  |	СУММА(ВложенныйЗапрос.КурсУпр) КАК КурсУпр,
						  |	СУММА(ВложенныйЗапрос.КурсРегл) КАК КурсРегл
						  |ИЗ
						  |	(
						  |		ВЫБРАТЬ
						  |			Курс 	КАК КурсУпр,
						  |			0 		КАК КурсРегл
						  |		ИЗ	
						  |			КурсыВалют
						  |		ГДЕ
						  |			Валюта = &ВалютаУправленческогоУчета
						  |		
						  |		ОБЪЕДИНИТЬ ВСЕ 
						  |		
						  |		ВЫБРАТЬ
						  |			0 			КАК КурсУпр,
						  |			Курс 		КАК КурсРегл
						  |		ИЗ	
						  |			КурсыВалют
						  |		ГДЕ
						  |			Валюта = &ВалютаРегламентированогоУчета) КАК ВложенныйЗапрос");
						  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированогоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаЦены		  = РезультатыЗапроса[2].Выбрать();
	ВыборкаКурсы	  = РезультатыЗапроса[3].Выбрать();

	Если ВыборкаЦены.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатРасчета, ВыборкаЦены);
	КонецЕсли;
	
	Если ВыборкаКурсы.Следующий() Тогда
		РезультатРасчета.КурсУпр 	= ВыборкаКурсы.КурсУпр;
		РезультатРасчета.КурсРегл 	= ВыборкаКурсы.КурсРегл;
	КонецЕсли;
						  
	Возврат РезультатРасчета;

КонецФункции // ПолучитьКурсыВалют()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
&НаСервереБезКонтекста
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор)
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

// Процедура выполняет установку значений реквизитов и цен номенклатуры для
// таблицы «Список номенклатры» для целой колонки.
//
// Параметры:
//  ИмяКолонки  		  - Строка -  имя колонки для которой нужно установить значение.
//  ЗначениеДляЗаполнения - СправочникСсылка.ТоварныеКатегории,
//							СправочникСсылка.ЦеновыеГруппы,
//							Дата,
//							Число - значение которое нужно установить в колонке.
//
&НаСервере
Процедура ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяКолонки, ЗначениеДляЗаполнения, МассивИдентификаторовСтрок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ВидЦены_РеглУч_");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ПроцентИзменен_");
	ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","Процент_");
	КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_", "");
	
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
	
		СтрокаСпискаНоменклатуры = СписокНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаСпискаНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(ИмяКолонки, "ВидЦены_УпрУч_") <> 0 Тогда
			
			ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ВидЦены_РеглУч_");
			ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","ПроцентИзменен_");
			ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_","Процент_");
			КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч_", "");
			
			ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, СтрокаСпискаНоменклатуры.Ссылка, СтрокаСпискаНоменклатуры.Характеристика);			
			ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
			ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
			КурсУпр					= ТекущиеЦены.КурсУпр;
			КурсРегл                = ТекущиеЦены.КурсРегл;
			
			СтрокаСпискаНоменклатуры[ИмяКолонки] = ЗначениеДляЗаполнения;
			
			Если ЦенаВВалютеУпрУчета = 0 Тогда
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = 9999999999;
			Иначе
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = (СтрокаСпискаНоменклатуры[ИмяКолонки] / ЦенаВВалютеУпрУчета - 1) * 100;
			КонецЕсли;
				
			СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч]  		= СтрокаСпискаНоменклатуры[ИмяКолонки] * (КурсУпр / КурсРегл);
			СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен]  = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен             = Истина;
			
		ИначеЕсли Найти(ИмяКолонки, "ВидЦены_РеглУч_") <> 0 Тогда
			
			ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "ВидЦены_УпрУч_");
			ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "ПроцентИзменен_");
			ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "Процент_");
			КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч_", "");
			
			ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, СтрокаСпискаНоменклатуры.Ссылка, СтрокаСпискаНоменклатуры.Характеристика);			
			ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
			ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
			КурсУпр					= ТекущиеЦены.КурсУпр;
			КурсРегл                = ТекущиеЦены.КурсРегл;
			
			СтрокаСпискаНоменклатуры[ИмяКолонки] = ЗначениеДляЗаполнения;
			
			Если ЦенаВВалютеРеглУчета = 0 Тогда
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = 9999999999;
			Иначе
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = (СтрокаСпискаНоменклатуры[ИмяКолонки] / ЦенаВВалютеРеглУчета - 1) * 100;
			КонецЕсли;
			
			СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]  		= СтрокаСпискаНоменклатуры[ИмяКолонки] * (КурсРегл / КурсУпр);
			СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен] = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен            = Истина;
			
		ИначеЕсли Найти(ИмяКолонки, "Процент_") <> 0 Тогда
			
			ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"Процент_", "ВидЦены_УпрУч_");
			ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"Процент_", "ВидЦены_РеглУч_");
			ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"Процент_", "ПроцентИзменен_");
			КолонкаИдентификатор		= СтрЗаменить(ИмяКолонки,"Процент_", "");
			
			Если СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч] = 0 ИЛИ СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущиеЦены 			= ПолучитьТекущиеЦены(КолонкаИдентификатор, СтрокаСпискаНоменклатуры.Ссылка, СтрокаСпискаНоменклатуры.Характеристика);			
			ЦенаВВалютеУпрУчета     = ТекущиеЦены.ЦенаВВалютеУпрУчета;
			ЦенаВВалютеРеглУчета    = ТекущиеЦены.ЦенаВВалютеРеглУчета;
			
			СтрокаСпискаНоменклатуры[ИмяКолонки] = ЗначениеДляЗаполнения;
			
			Если ЦенаВВалютеУпрУчета = 0 ИЛИ ЦенаВВалютеРеглУчета = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить цену на определенный процент, цена в базе не установлена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				СтрокаСпискаНоменклатуры[ИмяКолонки]				= 0;
				СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]  			= 0;
				СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч] 			= 0;
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен] 	= Ложь;
				Возврат;
			КонецЕсли;	
			
			СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]			= ЦенаВВалютеУпрУчета * (1 + СтрокаСпискаНоменклатуры[ИмяКолонки] / 100);	
			СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч]			= ЦенаВВалютеРеглУчета * (1 + СтрокаСпискаНоменклатуры[ИмяКолонки] / 100);
			СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен]  = ?(СтрокаСпискаНоменклатуры[ИмяКолонки] = 0, Ложь, Истина);
			СтрокаСпискаНоменклатуры.ЭлементИзменен             = ?(СтрокаСпискаНоменклатуры[ИмяКолонки] = 0, Ложь, Истина);
			
		Иначе
			
			ИмяЭлементИзменен 							= "ЭлементИзменен_" + ИмяКолонки;
			СтрокаСпискаНоменклатуры[ИмяКолонки]    	= ЗначениеДляЗаполнения;
			СтрокаСпискаНоменклатуры[ИмяЭлементИзменен] = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен		= Истина;
			
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры // ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры() 

<<<<<<< HEAD
<<<<<<< HEAD
=======
&НаКлиенте
Процедура ВыполнитьСортировку(НаправлениеСортировки)
	ТекущиеДанные    = Элементы.СписокНоменклатуры.ТекущиеДанные;
	ТекущийЭлементТЗ = Элементы.СписокНоменклатуры.ТекущийЭлемент;
	Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ИмяЭлемента = ТекущийЭлементТЗ.Имя;
		Если НЕ НаправлениеСортировки = Неопределено Тогда
			СортироватьНаСевере(СтрЗаменить(ИмяЭлемента,"СписокНоменклатуры","")+" "+НаправлениеСортировки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СортироватьНаСевере(ИмяКолонки)
	СписокНоменклатуры.Сортировать(ИмяКолонки);
КонецПроцедуры





>>>>>>> dev
=======
>>>>>>> dev
#КонецОбласти