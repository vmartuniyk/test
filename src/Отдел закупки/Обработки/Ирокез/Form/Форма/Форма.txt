
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_РеквизитВидНоменклатурыНаФорме");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСписокКолонок");
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция Тест_РеквизитВидНоменклатурыНаФорме() Экспорт
	
	Попытка
		РеквизитВидНоменклатуры = ЭтаФорма.ВидНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитВидНоменклатуры), Тип("СправочникСсылка.ВидыНоменклатуры"), НСтр("ru='#4796. Реквизит «ВидНоменклатуры» должен иметь тип «СправочникСсылка.ВидыНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементВидНоменклатуры = Элементы.Найти("ВидНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементВидНоменклатуры, Неопределено, НСтр("ru='#4796. На форме должен быть элемент формы «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции // Тест_РеквизитВидНоменклатурыНаФорме()

&НаКлиенте
Функция Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции() Экспорт
	
	КомандаИзменитьИзмененныеПозиции = Команды.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаИзменитьИзмененныеПозиции), Тип("КомандаФормы"), НСтр("ru='#4796. На форме обработки должна быть команда «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементКнопка = Элементы.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьНеРавенство(ЭлементКнопка, Неопределено, НСтр("ru='#4796. На форме обработки должен быть элемент формы «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции // Тест_ПроверкаНаличияКомандыИзменитИзмененныеПозиции()

&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаНоменклатуры() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокНоменклатуры» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокНоменклатуры»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()
 
&НаКлиенте
Функция Тест_ПроверкаНаличияСписокКолонок() Экспорт

	Попытка
		РеквизитСписокКолонок = ЭтаФорма.СписокКолонок;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокКолонок».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокКолонок), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокКолонок» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокКолонок");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокКолонок»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНастроек()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СоздатьРеквизитыИЭлементыФормы();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ЗагрузитьСписокНоменклатурыНаСервере();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ЗагрузитьСписокНоменклатурыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриИзменении(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЭлементИзменен = Истина;
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	ЭлементСписокНоменклатураПриИзменении(ИмяКолонки, Элемент.ТекущиеДанные[ИмяКолонки],ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементПроцентПриИзменении(Элемент)
	ИмяКолонки	=	Элемент.Имя;
	ИмяКолонкиУпрУч	=	СтрЗаменить(ИмяКолонки,"Процент_","ВидЦены_УпрУч_");
	ИмяКолонкиРеглУч	=	СтрЗаменить(ИмяКолонки,"Процент_","ВидЦены_РеглУч_");
	ТекущиеДанные		=	Элементы.СписокНоменклатуры.ТекущиеДанные;
	ТекущиеДанные[ИмяКолонкиУпрУч]	= ТекущиеДанные[ИмяКолонкиУпрУч]*(1+ТекущиеДанные[ИмяКолонки]/100);	
	ТекущиеДанные[ИмяКолонкиРеглУч]	= ТекущиеДанные[ИмяКолонкиРеглУч]*(1+ТекущиеДанные[ИмяКолонки]/100);
	ЭлементСписокНоменклатураПриИзменении(ИмяКолонкиУпрУч, ТекущиеДанные[ИмяКолонкиУпрУч],ТекущиеДанные.Ссылка);
	ЭлементСписокНоменклатураПриИзменении(ИмяКолонкиРеглУч, ТекущиеДанные[ИмяКолонкиРеглУч],ТекущиеДанные.Ссылка); 
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
	
	КнопкаНастройки = Элементы.Настройки;
	ПометкаКнопки   = КнопкаНастройки.Пометка;
	
	Если ПометкаКнопки Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокНоменклатуры;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	КонецЕсли;
	
	КнопкаНастройки.Пометка = Не ПометкаКнопки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзмененныеПозиции(Команда)
	ИзменитьИзмененныеПозицииНаСервере();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы()
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонок();
 	СоздатьРеквизитыФормы(СтруктураКолонок);
	СоздатьЭлементыФормы(СтруктураКолонок);
КонецПроцедуры // СоздатьРеквизитыИЭлементыФормы()
 
&НаСервере
Процедура СоздатьРеквизитыФормы(СтруктураКолонок)

	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки", 	Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)), "СписокНоменклатуры"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Опт", 			Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"), "СписокНоменклатуры", "КПП опт"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КПП_Розница", 		Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"), "СписокНоменклатуры", "КПП розница"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЭлементИзменен", 	Новый ОписаниеТипов("Булево"), "СписокНоменклатуры", "ЭлементИзменен"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТоварнаяКатегория", 	Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"), "СписокНоменклатуры", "Товарная категория"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦеноваяГруппа",	 	Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"), "СписокНоменклатуры", "Ценовая группа"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Дедлайн", 			Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)), "СписокНоменклатуры", "Дедлайн")); 
	
	Для каждого Колонка Из СтруктураКолонок.СписокВидовЦен Цикл
		Если Колонка.ЭтоГруппа Тогда
			Продолжить;		
		КонецЕсли;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	
	Для каждого Колонка Из СтруктураКолонок.СписокВидовЦенПоставщика Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	
	Для каждого Колонка Из СтруктураКолонок.СписокДопСвойства Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя,Новый ОписаниеТипов("Строка"), "СписокНоменклатуры", Колонка.Заголовок));    			
	КонецЦикла; 
	ИзменитьРеквизиты(МассивРеквизитов);

КонецПроцедуры // СоздатьРеквизитыФормы()

&НаСервере
Процедура СоздатьЭлементыФормы(СтруктураКолонок)
	
	ГСЧ 					  = Новый ГенераторСлучайныхЧисел;
	ЭлементСписокНоменклатуры = Элементы.СписокНоменклатуры;	
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Опт", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("КПП_Розница", Новый Цвет(255, 235, 205), Ложь, ,200,,Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);

	ПараметрыЭлемента = СтруктураПараметровКолонки("ТоварнаяКатегория", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);

	ПараметрыЭлемента = СтруктураПараметровКолонки("ЦеноваяГруппа", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	
	ПараметрыЭлемента = СтруктураПараметровКолонки("Дедлайн", Новый Цвет(255, 235, 205), Ложь, , 200,,Истина);
	git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	
	Для каждого ЭлементМассива Из СтруктураКолонок.СписокВидовЦен Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		Если ЭлементМассива.ЭтоГруппа Тогда
			ПараметрыЭлемента = СтруктураПараметровГруппыКолонок(ЭлементМассива.Имя, ЭлементМассива.Заголовок, ФиксацияВТаблице.Нет);
			ГруппаКолонок 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
		Иначе
			ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), ?(ЭлементМассива.Заголовок="%",Ложь,Истина), , ЦветФонаЗаголовка,,Ложь);
			ЭлементПроцент	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонок);
			ЭлементПроцент.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементПроцентПриИзменении");

		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЭлементаДопСвойства = СтруктураПараметровГруппыКолонок("ГруппаДопСвойста", "Дополнительные свойства", ФиксацияВТаблице.Нет);
	ГруппаКолонокДопСвойста 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаДопСвойства, ЭлементСписокНоменклатуры);
	
	Для каждого ЭлементМассива Из СтруктураКолонок.СписокДопСвойства Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Истина, , ЦветФонаЗаголовка,,Ложь);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонокДопСвойста);
	КонецЦикла;
	
	
	ПараметрыЭлементаЦенаПоставщика = СтруктураПараметровГруппыКолонок("ГруппаЦенаПоставщика", "Цены поставщиков", ФиксацияВТаблице.Нет);
	ГруппаКолонокЦеныПоставщиков 	  = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлементаЦенаПоставщика, ЭлементСписокНоменклатуры);

	Для каждого ЭлементМассива Из СтруктураКолонок.СписокВидовЦенПоставщика Цикл
		ЦветФонаЗаголовка = ГСЧ.СлучайноеЧисло(1, 255);
		ПараметрыЭлемента = СтруктураПараметровКолонки(ЭлементМассива.Имя, Новый Цвет(255, 235, 205), Истина, , ЦветФонаЗаголовка,,Ложь);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКолонокЦеныПоставщиков);
	КонецЦикла;

КонецПроцедуры // СоздатьЭлементыФормы()

&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице, ЦветФонаЗаголовка=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("КартинкаШапки", БиблиотекаКартинок.ЗначокПлюс);
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр, Подсказка, ЦветФонаЗаголовка=Неопределено, Шрифт=Неопределено,КнопкаВыбора=Ложь)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);                                        	
	ПараметрыЭлемента.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ПараметрыЭлемента.Вставить("ПутьКДанным", "СписокНоменклатуры." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента",Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 3);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаОткрытия", Ложь);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", КнопкаВыбора);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("Подсказка", Подсказка);
	Если Шрифт <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("Шрифт", Шрифт);
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
		ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	Возврат ПараметрыЭлемента;
КонецФункции // СтруктураПараметровКолонки()

&НаСервере
Процедура ЗагрузитьСписокНоменклатурыНаСервере()
	УстановитьПривилегированныйРежим(Истина);	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	НастройкиФормы	= ОбъектОбработка.ПолучитьНастройки();
	ОбъектОбработка.ЗагрузитьТаблицуНоменклатуры(ЭтаФорма,НастройкиФормы);
	ЗначениеВРеквизитФормы(ОбъектОбработка,"Объект");
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	УстановитьУсловноеОформление();
КонецПроцедуры // ЗагрузитьСписокНоменклатурыНаСервере()


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатуры");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЭлементИзменен");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(147, 196, 0));
	
	СтруктураМассиваКолонок			= ОбработкаОбъект.ПолучитьСтруктуруКолонок();
	Для каждого ЭлементКолонки Из СтруктураМассиваКолонок.СписокВидовЦен Цикл
		Если ЭлементКолонки.ЭтоГруппа Тогда
			НазваКолонки =  ЭлементКолонки.Имя;
			ВидЦеныРеглУч	= СтрЗаменить(НазваКолонки,"ГруппаВидЦены_","ВидЦены_РеглУч_");
			ПроцентЦены		= СтрЗаменить(НазваКолонки,"ГруппаВидЦены_","Процент_");

			ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
			ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ПроцентЦены);
			ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ВидЦеныРеглУч);
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение	= 0;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		КонецЕсли;		
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ЭлементСписокНоменклатураПриИзменении(ИмяКолонки, Значениие,ЗначениеНоменклатуры)
	
	ЭлементУсловногоОформления 			= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле						= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			  	= Новый ПолеКомпоновкиДанных(ИмяКолонки);
	
	ГруппаЭлементОтбора 				  	= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементОтбора.Использование	= Истина;

	
	НовыйЭлементОтбора 				  	= ГруппаЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование	= Истина;
	
	НовыйЭлементОтбора.ЛевоеЗначение  	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Ссылка");
	НовыйЭлементОтбора.ВидСравнения   	= ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение 	= ЗначениеНоменклатуры;
	
	НовыйЭлементОтбора1 				 = ГруппаЭлементОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора1.Использование	= Истина;
	
	НовыйЭлементОтбора1.ЛевоеЗначение  	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЭлементИзменен");
	НовыйЭлементОтбора1.ВидСравнения   	= ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора1.ПравоеЗначение 	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(9, 144, 74));
	
КонецПроцедуры // ЭлементДеревоНоменклатурыПриИзменении(Элемент)

&НаСервере
Процедура ИзменитьИзмененныеПозицииНаСервере()
	РеквизитФормыВЗначение("Объект").СоздатьДокументУстановкиЦен(ЭтаФорма);
КонецПроцедуры // ИзменитьИзмененныеПозицииНаСервере()







#КонецОбласти