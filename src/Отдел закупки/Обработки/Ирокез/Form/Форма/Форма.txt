
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	//ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаГрупповогоЗаполненияНоменклатуры");
	//СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьРаботуСортировки");
	СписокТестов.Добавить(ПараметрыТеста);

	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_РеквизитВидНоменклатурыНаФорме");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции");
	СписокТестов.Добавить(ПараметрыТеста);
	                                           		
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
		
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьСоответствиеНастроекККолонкамСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "ПроверкиПравильноРасчетаЗаработка");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "ПроверкиПравильноЗаОкругленияЦены");
	СписокТестов.Добавить(ПараметрыТеста);

	
		
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт	
	
	ВерсияСчетчикНоменклатуры = ПолучитьВерсиюБибилиотеки("Счетчик номенклатуры");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияСчетчикНоменклатуры, "0.0.001", НСтр("ru='Для теста необходимо подключить библиотеку «Счетчик номенклатуры» версии 0.0.001 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияПодпискиНаСобытия = ПолучитьВерсиюБибилиотеки("Подписки на события");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияПодпискиНаСобытия, "3.8.15", НСтр("ru='Для теста необходимо подключить библиотеку «Подписки на события» версии 3.8.15 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Номенклатура».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Виды номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Товарные категории\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Товарные категории».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\ЦеновыеГруппы\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Ценовые группы».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\КоефициентПриоритетностиНоменклатуры\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Коефициент приоритетности номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\ВидыЦены\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Виды цены».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Документы\УстановкаЦенНоменклатуры\СоздатьИПровестиДокумент.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания документа «Установка цен номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс, Идентификатор)
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

&НаКлиенте
Функция Тест_РеквизитВидНоменклатурыНаФорме() Экспорт
	
	Попытка
		РеквизитВидНоменклатуры = ЭтаФорма.ВидНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитВидНоменклатуры), Тип("СправочникСсылка.ВидыНоменклатуры"), НСтр("ru='#4796. Реквизит «ВидНоменклатуры» должен иметь тип «СправочникСсылка.ВидыНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементВидНоменклатуры = Элементы.Найти("ВидНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементВидНоменклатуры, Неопределено, НСтр("ru='#4796. На форме должен быть элемент формы «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции // Тест_РеквизитВидНоменклатурыНаФорме()

&НаКлиенте
Функция Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции() Экспорт
	
	КомандаИзменитьИзмененныеПозиции = Команды.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаИзменитьИзмененныеПозиции), Тип("КомандаФормы"), НСтр("ru='#4796. На форме обработки должна быть команда «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементКнопка = Элементы.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьНеРавенство(ЭлементКнопка, Неопределено, НСтр("ru='#4796. На форме обработки должен быть элемент формы «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции // Тест_ПроверкаНаличияКомандыИзменитИзмененныеПозиции()

&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаНоменклатуры() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокНоменклатуры» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокНоменклатуры»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()
 
&НаКлиенте
Функция Тест_ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры() Экспорт
	
	СтруктураСправочников	=	Тест_ЗагрузитьСписокНоменклатуры();
	МассивСтрок				=	СписокНоменклатуры.НайтиСтроки(Новый Структура("Ссылка",СтруктураСправочников.Номенклатура));
	
	УдалитьТестовыеСправочникы(СтруктураСправочников);
	
	СообщениеОбОшибке	= НСтр("ru = 'Не удалось загрузить таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьНеРавенство(СписокНоменклатуры.Количество(),0 ,СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(МассивСтрок.Количество(),0 ,СообщениеОбОшибке);
	СообщениеОбОшибке	= НСтр("ru = 'Загрузились лишние данные в таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(СписокНоменклатуры.Количество(),1 ,СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(МассивСтрок.Количество(),1 ,СообщениеОбОшибке);
	
КонецФункции

&НаКлиенте
Функция Тест_ПроверитьСоответствиеНастроекККолонкамСпискаНоменклатуры() Экспорт
	
	Отказ	=	ПроверитьСоотвествиеНастроекСПолучинемиДанными();
	СообщениеОбОшибке	= НСтр("ru = 'Не создать все нужные реквизиты по настройка БРМ!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

	ЮнитТест.ПроверитьИстину(Отказ, );
	
	
КонецФункции

&НаКлиенте
Процедура ПроверкиПравильноРасчетаЗаработка()Экспорт
	ТекущиеДанные = Новый Структура("КПП_Розница_Процент,ЗаработокРозница,Цена",10,0,500);
	РасчитатьЗаработокРозница(ТекущиеДанные,"Цена");
	
	СообщениеОбОшибке	= НСтр("ru = '#5134,Не создать расчетать средний заработок Розница!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

	ЮнитТест.ПроверитьРавенство(ТекущиеДанные.ЗаработокРозница,50 ,СообщениеОбОшибке );
КонецПроцедуры // ()


&НаКлиенте
Процедура ПроверкиПравильноЗаОкругленияЦены()Экспорт
	РасчетаЦена = 500.45;
	ТочностьОкругления = 1;
	ОкруглятьВБольшуюСторону = Истина;
	ПсихологическоеОкругление = 0.9;
	
	РасчетаЦена = РассчитатьРезультат(РасчетаЦена,ТочностьОкругления,ОкруглятьВБольшуюСторону,ПсихологическоеОкругление);		
	СообщениеОбОшибке	= НСтр("ru = '#5181,Не удалось округлить цену",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

	ЮнитТест.ПроверитьРавенство(РасчетаЦена,500.9,СообщениеОбОшибке );
КонецПроцедуры // ()

&НаСервере
Функция Тест_ЗагрузитьСписокНоменклатуры()
	
	ВидНоменклатурыТест		=	ПолучитьБиблиотекуВидыНоменклатуры().СоздатьЭлементСправочника();
	СтруктураЗаполнения		=	Новый Структура("ВидНоменклатуры",ВидНоменклатурыТест);	
	НоменклатураТест		=	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(СтруктураЗаполнения);
	
	ВидНоменклатуры			=	ВидНоменклатурыТест;
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуНоменклатуры(ЭтаФорма);
		        
	Возврат Новый Структура("ВидНоменклатуры,Номенклатура",ВидНоменклатурыТест, НоменклатураТест)

КонецФункции


#Область ТестПроверкаГрупповогоЗаполненияНоменклатуры

&НаКлиенте
Процедура Тест_ПроверкаГрупповогоЗаполненияНоменклатуры() Экспорт

	РезультатРаботы = Новый Структура("Результат, СообщениеПользователю", Истина, "");
	СтруктураДанных = СоздатьЭлементыГрупповогоЗаполненияНоменклатуры();
	Если ТипЗнч(СтруктураДанных.ВидЦены) = Тип("СправочникСсылка.ВидыЦен") Тогда
		Если СтруктураДанных.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
			РезультатРаботы.Результат 				= Ложь;
			РезультатРаботы.СообщениеПользователю   = НСтр("ru='Не удалось создать тестовой вид цены.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Перейти ~Пометка;
		КонецЕсли;
	КонецЕсли;

	СоздатьРеквизитыИЭлементыФормы(Истина);

	ВидНоменклатуры = СтруктураДанных.ВидНоменклатуры;
	ВидНоменклатурыПриИзменении(Неопределено); 
	
	Если СписокНоменклатуры.Количество() <> 3 Тогда
		РезультатРаботы.Результат 				= Ложь;
		РезультатРаботы.СообщениеПользователю   = НСтр("ru='#4906. Не удалось сформировать список номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Перейти ~Пометка;
	КонецЕсли;

	МассивИдентификаторовСтрок = ПолучитьМассивИдентификаторовСтрокГрупповогоЗаполнения();
	
	ИдентификаторКолонкиВидЦены = СтруктураДанных.ВидЦены.УникальныйИдентификатор();
	ИмяКолонкиПроцент			= ПреобразоватьУникальныйИдентификаторВНаименование("Процент_", ИдентификаторКолонкиВидЦены);
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяКолонкиПроцент, 10, МассивИдентификаторовСтрок);
	Сообщить(СтруктураДанных.Номенклатура3);
	Сообщить(СтруктураДанных.ВидЦены);

	РезультатРаботы = ВыполнитьПроверкуЗаполненияЦенСпискаНоменклатуры(СтруктураДанных.ВидЦены, СтруктураДанных.Номенклатура3);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Опт", СтруктураДанных.КППРозница, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Опт", СтруктураДанных.КППРозница);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Розница", СтруктураДанных.КППРозница, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Розница", СтруктураДанных.КППРозница);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Розница_НеПересчитыватьАвтоматически", Истина, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Розница_НеПересчитыватьАвтоматически", Истина);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;

	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Опт_НеПересчитыватьАвтоматически", Истина, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Опт_НеПересчитыватьАвтоматически", Истина);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;

	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("ТоварнаяКатегория", СтруктураДанных.ТоварнаяКатегория, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("ТоварнаяКатегория", СтруктураДанных.ТоварнаяКатегория);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("ЦеноваяГруппа", СтруктураДанных.ЦеноваяГруппа, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("ЦеноваяГруппа", СтруктураДанных.ЦеноваяГруппа);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	Тест_Дедлайн = НачалоДня(ТекущаяДата()); 
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("Дедлайн", Тест_Дедлайн, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("Дедлайн", Тест_Дедлайн);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	Тест_ОбщееНаличие = 10; 
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("ОбщееНаличие", Тест_ОбщееНаличие, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("ОбщееНаличие", Тест_ОбщееНаличие);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	Тест_КПП_Розница_Процент = 10; 
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Розница_Процент", Тест_КПП_Розница_Процент, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("Тест_КПП_Розница_Процент", Тест_КПП_Розница_Процент);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;
	
	Тест_КПП_Опт_Процент = 10; 
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры("КПП_Опт_Процент", Тест_КПП_Опт_Процент, МассивИдентификаторовСтрок);
	РезультатРаботы = ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры("КПП_Опт_Процент", Тест_КПП_Опт_Процент);
	Если Не РезультатРаботы.Результат Тогда
		Перейти ~Пометка;
	КонецЕсли;

~Пометка:
	УдалитьЭлементыГрупповогоЗаполненияНоменклатуры(СтруктураДанных);
	
	ЮнитТест.ПроверитьИстину(РезультатРаботы.Результат, РезультатРаботы.СообщениеПользователю);

КонецПроцедуры // Тест_ПроверкаГруповогоЗаполненияноменКлатуры()

&НаСервереБезКонтекста
Функция СоздатьЭлементыГрупповогоЗаполненияНоменклатуры()

	СтруктураДанных = Новый Структура;
	
	ВидНоменклатуры 			= СоздатьВидНоменклатурыГрупповоеЗаполнение();
	Номенклатура1				= СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры);
	Номенклатура2				= СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры);
	Номенклатура3				= СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры);
	ТоварнаяКатегория   		= СоздатьТоварнуюКатегориюГрупповоеЗаполнение(ВидНоменклатуры);
	ЦеноваяГруппа				= СоздатьЦеновуюГруппуГрупповоеЗаполнение();
	КППРозница					= СоздатьКПП();
	КППОпт						= СоздатьКПП();
	ВидЦены						= СоздатьВидЦены();
	УстановкаЦенНоменклатуры    = УстановитьЦеныНоменклатурыГрупповоеЗаполнение(ВидЦены, Номенклатура1, Номенклатура2);
	
	СтруктураДанных.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	СтруктураДанных.Вставить("Номенклатура1", Номенклатура1);
	СтруктураДанных.Вставить("Номенклатура2", Номенклатура2);
	СтруктураДанных.Вставить("Номенклатура3", Номенклатура3);
	СтруктураДанных.Вставить("ТоварнаяКатегория", ТоварнаяКатегория);
	СтруктураДанных.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
	СтруктураДанных.Вставить("КППРозница", КППРозница);
	СтруктураДанных.Вставить("КППОпт", КППОпт);
	СтруктураДанных.Вставить("ВидЦены", ВидЦены);
	СтруктураДанных.Вставить("УстановкаЦенНоменклатуры", УстановкаЦенНоменклатуры);
	
	Возврат СтруктураДанных;

КонецФункции // СоздатьЭлементыГрупповгоЗаполненияНоменклатуры()

&НаСервере
Процедура УдалитьЭлементыГрупповогоЗаполненияНоменклатуры(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	#Область ПометкиНаУдалениеДляДокументов

	Если СтруктураДанных.Свойство("УстановкаЦенНоменклатуры") Тогда
		УстановкаЦенНоменклатуры = СтруктураДанных.УстановкаЦенНоменклатуры.ПолучитьОбъект();
		УстановкаЦенНоменклатуры.УстановитьПометкуУдаления(Истина);
		УстановкаЦенНоменклатуры.Записать(РежимЗаписиДокумента.Запись);		
	КонецЕсли;

#КонецОбласти
	
#Область УничтожениеСправочников

	Если СтруктураДанных.Свойство("ВидЦены") Тогда
		СправочникОбъект = СтруктураДанных.ВидЦены.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("КППРозница") Тогда
		СправочникОбъект = СтруктураДанных.КППРозница.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("КППОпт") Тогда
		СправочникОбъект = СтруктураДанных.КППОпт.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("Номенклатура3") Тогда
		СправочникОбъект = СтруктураДанных.Номенклатура3.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Номенклатура2") Тогда
		СправочникОбъект = СтруктураДанных.Номенклатура2.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Номенклатура1") Тогда
		СправочникОбъект = СтруктураДанных.Номенклатура1.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЦеноваяГруппа") Тогда
		СправочникОбъект = СтруктураДанных.ЦеноваяГруппа.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("ТоварнаяКатегория") Тогда
		СправочникОбъект = СтруктураДанных.ТоварнаяКатегория.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если СтруктураДанных.Свойство("ВидНоменклатуры") Тогда
		СправочникОбъект = СтруктураДанных.ВидНоменклатуры.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

#КонецОбласти

#Область УничтожениеДокументов

	Если СтруктураДанных.Свойство("УстановкаЦенНоменклатуры") Тогда
		УстановкаЦенНоменклатуры.Удалить();
	КонецЕсли;

#КонецОбласти

КонецПроцедуры // УдалитьЭлементыГрупповогоЗаполненияНоменклатуры()

&НаСервере
Функция ВыполнитьПроверкуЗаполненияРеквизитовСпискаНоменклатуры(ИмяКолонки, ЗначениеДляПроверки) 
	РезультатПроверки = Новый Структура("Результат, СообщениеПользователю", Истина, "");
	Для каждого СтрокаСписка Из СписокНоменклатуры Цикл
		Если СтрокаСписка[ИмяКолонки] <> ЗначениеДляПроверки  
				ИЛИ СтрокаСписка["ЭлементИзменен_" + ИмяКолонки] = Ложь 
				ИЛИ СтрокаСписка["ЭлементИзменен"]  = Ложь Тогда
			СообщениеПользователю = НСтр("ru='#4906. Не удалось заполнить колонку %1 значением %2.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю, ИмяКолонки, ЗначениеДляПроверки);
			РезультатПроверки.Вставить("Результат", Ложь);
			РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатПроверки;
КонецФункции // ВыполнитьПроверкуЗаполненияСпискаНоменклатуры()
 
&НаСервере
Функция ВыполнитьПроверкуЗаполненияЦенСпискаНоменклатуры(ВидЦен, НоменклатураСПустойЦеной)
	
	СтруктураПоиска = Новый Структура("ВидЦены", ВидЦен);
	РезультатПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ИдентификаторЦены = РезультатПоиска[0].ИндексКолонки;
	КонецЕсли;
	
	РезультатПроверки 				= Новый Структура("Результат, СообщениеПользователю", Истина, "");
	ИдентификаторЦены 				= ВидЦен.УникальныйИдентификатор();
	ИмяКолонкиЦенаУпрУч 			= "ВидЦены_УпрУч" + ИдентификаторЦены;
	ИмяКолонкиПроцентИзмененУпрУч 	= "ПроцентИзменен_ВидЦены_УпрУч" + ИдентификаторЦены;
	ИмяКолонкиРеглУч 				= "ВидЦены_РеглУч" + ИдентификаторЦены;
	ИмяКолонкиПроцентИзмененРеглУч 	= "ПроцентИзменен_ВидЦены_РеглУч" + ИдентификаторЦены;
	ИмяКолонкиПроцент 				= "Процент" + ИдентификаторЦены;
	ИмяКолонкиПроцентИзменен		= "ПроцентИзменен" + ИдентификаторЦены;
	
	Для каждого СтрокаСписка Из СписокНоменклатуры Цикл
		ЦеныНоменклатуры  = ПолучитьЦенуНоменклатурыГрупповогоЗаполнения(СтрокаСписка.Ссылка, ВидЦен);
		Если СтрокаСписка.Ссылка = НоменклатураСПустойЦеной Тогда
			Если СтрокаСписка[ИмяКолонкиЦенаУпрУч] <> 0 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить цену номенклатуры управленческого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиРеглУч] <> 0 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить цену номенклатуры регламентированого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцент] <> 0 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить процент изменения цены, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцентИзмененУпрУч] Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения цены управленческого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцентИзмененРеглУч] Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения цены регламентированого учета, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцентИзменен] Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения процента цены, а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если СтрокаСписка.ЭлементИзменен Тогда
				СообщениеПользователю = НСтр("ru='#4906. Удалось изменить флаг изменения строки таблицы «Список номенклатуры» а не должно было бы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
		Иначе
			Если (((СтрокаСписка[ИмяКолонкиЦенаУпрУч] / ЦеныНоменклатуры.ЦенаУпр) - 1 )* 100) <> 10 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось изменить цену номенклатуры в валюте управленческого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если (((СтрокаСписка[ИмяКолонкиРеглУч] / ЦеныНоменклатуры.ЦенаРегл) - 1 )* 100) <> 10 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось изменить цену номенклатуры в валюте регламентированого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			//Если Не СтрокаСписка[ИмяКолонкиПроцентИзмененУпрУч] Тогда
			//	СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения цены управленческого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			//	РезультатПроверки.Вставить("Результат", Ложь);
			//	РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
			//	Прервать;
			//КонецЕсли;
			//Если Не СтрокаСписка[ИмяКолонкиПроцентИзмененРеглУч] Тогда
			//	СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения цены регламентированого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			//	РезультатПроверки.Вставить("Результат", Ложь);
			//	РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
			//	Прервать;
			//КонецЕсли;
			Если СтрокаСписка[ИмяКолонкиПроцент] <> 10 Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось установить процент изменения цены.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если Не СтрокаСписка[ИмяКолонкиПроцентИзменен] Тогда   
				СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения процента цены.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
			Если Не СтрокаСписка.ЭлементИзменен Тогда
				СообщениеПользователю = НСтр("ru='#4906. Не удалось установить флаг изменения строки таблицы «Список номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				РезультатПроверки.Вставить("Результат", Ложь);
				РезультатПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатПроверки;
КонецФункции // ВыполнитьПроверкуЗаполненияЦенСписокаНоменклатуры()

&НаСервере
Функция ПолучитьЦенуНоменклатурыГрупповогоЗаполнения(Номенклатура, ВидЦены)

	РезультатЗапроса = Новый Структура("Номенклатура, ЦенаУпр, ЦенаРегл", Номенклатура, 0, 0);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура		КАК Номенклатура,
	                      |	Цена				КАК Цена,
	                      |	ВидЦены.ВалютаЦены 	КАК Валюта
	                      |ПОМЕСТИТЬ ЦеныНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			&Дата,
	                      |			ВидЦены = &ВидЦены
	                      |				И Номенклатура = &Номенклатура)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Валюта				КАК Валюта,
	                      |	Курс / Кратность 	КАК Курс
	                      |ПОМЕСТИТЬ КурсыВалют
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, )
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	ВЫБОР
	                      |		КОГДА ЦеныНоменклатуры.Валюта = &ВалютаУпрУчета
	                      |			ТОГДА ЦеныНоменклатуры.Цена
	                      |		ИНАЧЕ ЦеныНоменклатуры.Цена * ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1)
	                      |	КОНЕЦ КАК ЦенаУпр,
	                      |	ВЫБОР
	                      |		КОГДА ЦеныНоменклатуры.Валюта = &ВалютаРеглУчета
	                      |			ТОГДА ЦеныНоменклатуры.Цена
	                      |		ИНАЧЕ ЦеныНоменклатуры.Цена * ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1)
	                      |	КОНЕЦ КАК ЦенаРегл
	                      |ИЗ
	                      |	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦены
	                      |		ПО ЦеныНоменклатуры.Валюта = КурсыВалютЦены.Валюта
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	                      |		ПО (КурсыВалютУпр.Валюта = &ВалютаУпрУчета)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	                      |		ПО (КурсыВалютРегл.Валюта = &ВалютаРеглУчета)");
						  
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатЗапроса, Выборка);
	КонецЕсли;
	
	Возврат РезультатЗапроса;

КонецФункции // ПолучитьЦенуНоменклатурыГрупповогоЗаполнения()

&НаСервере
Функция ПолучитьМассивИдентификаторовСтрокГрупповогоЗаполнения()

	МассивИдентификаторов = Новый Массив;
	
	Для каждого СтрокаТаблицы Из СписокНоменклатуры Цикл
		МассивИдентификаторов.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());	
	КонецЦикла; 

	Возврат МассивИдентификаторов;
	
КонецФункции // ПолучитьМассивИдентификаторовСтрок()
 
 


&НаСервереБезКонтекста
Процедура СоздатьНастройкиПользователяГрупповоеЗаполнение(ВидЦены)

	_u_ТекущийПользователь 		= ПользователиКлиентСервер.ТекущийПользователь();
	_u_НастройкиПользователя 	= Новый Структура;
	
	_u_ДополнительныеВидыЦен = Новый Массив;
	_u_ДополнительныеВидыЦен.Добавить(ВидЦены);
	
	_u_НастройкиПользователя.Вставить("ДополнительныеВидыЦен", _u_ДополнительныеВидыЦен);
	ХранилищеНастроекДанныхФорм.Сохранить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , _u_НастройкиПользователя, "Настройки пользователя", "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
КонецПроцедуры // СоздатьНастройкиПользователяГрупповоеЗаполнение()
 

&НаСервереБезКонтекста
Функция СоздатьВидНоменклатурыГрупповоеЗаполнение()
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	Библиотека			= ПолучитьБиблиотекуВидыНоменклатуры();
	Возврат Библиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
КонецФункции // СоздатьВидНоменклатурыГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция СоздатьНоменклатуруГрупповоеЗаполнение(ВидНоменклатуры)
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование, ВидНоменклатуры", Наименование, ВидНоменклатуры);
	Библиотека			= ПолучитьБиблиотекуНоменклатуры();
	Возврат Библиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
КонецФункции // СоздатьНоменклатуруГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция СоздатьТоварнуюКатегориюГрупповоеЗаполнение(ВидНоменклатуры)
	ПараметрыЗаполнения = Новый Структура("Владелец", ВидНоменклатуры);
	Библиотека			= ПолучитьБибилиотекуТоварныеКатегории();
	Возврат Библиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
КонецФункции // СоздатьТоварнуюКатегориюГрурпповоеЗаполнение()
 
&НаСервереБезКонтекста
Функция СоздатьЦеновуюГруппуГрупповоеЗаполнение()
	Библиотека = ПолучитьБибилиотекуЦеновыеГруппы();
	Возврат Библиотека.СоздатьЭлементСправочника();	
КонецФункции // СоздатьЦеновуюГруппуГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция СоздатьКПП()
	Библиотека = ПолучитьБибилиотекуКПП();
	Возврат Библиотека.СоздатьЭлементСправочника();
КонецФункции // СоздатьКПП()

&НаСервереБезКонтекста
Функция СоздатьВидЦены()
	Библиотека = ПолучитьБиблиотекуВидыЦены();
	Возврат Библиотека.СоздатьЭлементСправочника();
КонецФункции // СоздатьВидЦены()

&НаСервереБезКонтекста
Функция УстановитьЦеныНоменклатурыГрупповоеЗаполнение(ВидЦены, Номенклатура1, Номенклатура2)

	ТаблицаВидыЦен 		= ИнициализироватьТаблицуВидыЦенГрупповоеЗаполнение();
	НоваяСтрока    		= ТаблицаВидыЦен.Добавить();
	НоваяСтрока.ВидЦены = ВидЦены;
	
	ТаблицаТовары					= ИнициализироватьТаблицуТоварыГрупповоеИзменение();
	
	НоваяСтрока    					= ТаблицаТовары.Добавить();
	НоваяСтрока.Номенклатура 		= Номенклатура1;
	НоваяСтрока.ВидЦены 			= ВидЦены;
	НоваяСтрока.Цена 				= 100;
	НоваяСтрока.ЦенаИзмененаВручную = Истина;
	
	НоваяСтрока    					= ТаблицаТовары.Добавить();
	НоваяСтрока.Номенклатура 		= Номенклатура2;
	НоваяСтрока.ВидЦены 			= ВидЦены;
	НоваяСтрока.Цена 				= 200;
	НоваяСтрока.ЦенаИзмененаВручную = Истина;
	
	ПараметрыЗаполнения = Новый Структура("ВидыЦен, Товары", ТаблицаВидыЦен, ТаблицаТовары);
	
	Бибилиотека = ПолучитьБибилиотекуУстановкаЦенНоменклатуры();
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);
	
КонецФункции // УстановитьЦеныНоменклатурыГрупповоеЗаполнение()

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуВидыЦенГрупповоеЗаполнение()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Возврат Таблица;
КонецФункции // ИнициализироватьТаблицуВидыЦен()
 
&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуТоварыГрупповоеИзменение()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Таблица.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2)));
	Таблица.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	Возврат Таблица;
КонецФункции // ИнициализироватьТаблицуТоварыГрупповоеИзменение()
 

#КонецОбласти 


#Область РаботаСБиблиотеками

&НаКлиенте
Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

&НаСервереБезКонтекста
Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуВидыНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуТоварныеКатегории()
	ПутьКБиблиотеке = "\tests\Справочники\Товарные категории\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуТоварныеКатегории()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуЦеновыеГруппы()
	ПутьКБиблиотеке = "\tests\Справочники\ЦеновыеГруппы\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуЦеновыеГруппы()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуКПП()
	ПутьКБиблиотеке = "\tests\Справочники\КоефициентПриоритетностиНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуКПП()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуВидыЦены()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыЦены\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуВидыЦены()

&НаСервереБезКонтекста
Функция ПолучитьБибилиотекуУстановкаЦенНоменклатуры()
	ПутьКБиблиотеке = "\tests\Документы\УстановкаЦенНоменклатуры\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБибилиотекуУстановкаЦенНоменклатуры()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()
#КонецОбласти 


&НаСервере
Функция УдалитьТестовыеСправочникы(СтруктураСправочников)
	
	ВидНоменклатурыТест	= СтруктураСправочников.ВидНоменклатуры;
	СправочникОбъект	=	ВидНоменклатурыТест.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();

	
	НоменклатураТест	= СтруктураСправочников.Номенклатура;
	СпрНомОбъект	=	НоменклатураТест.ПолучитьОбъект();
	СпрНомОбъект.УстановитьПометкуУдаления(Истина);
	СпрНомОбъект.Записать();
	СпрНомОбъект.Удалить();


КонецФункции

&НаСервере
Функция ПроверитьСоотвествиеНастроекСПолучинемиДанными()
	
	СтруктураМассивов	= РеквизитФормыВЗначение("Объект").ПолучитьНастройки();
	
	Если ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураМассивов.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(СтруктураМассивов.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(СтруктураМассивов.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ЭлементыФормы Из СписокВидовЦен Цикл
	
		ПолеФормыУпр	=	Элементы.Найти("ВидЦены_УпрУч"+ЭлементыФормы.ИндексКолонки);
		ПолеФормыРегл	=	Элементы.Найти("ВидЦены_РеглУч"+ЭлементыФормы.ИндексКолонки);
		Если ПолеФормыУпр = Неопределено 
			Или  ПолеФормыРегл = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЭлементыФормы Из СписокЦенПоставщика Цикл
	
		ПолеФормыЦенаПоставщика	=	Элементы.Найти("ЦенаПоставщика"+ЭлементыФормы.ИндексКолонки);
		Если ПолеФормыЦенаПоставщика = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ЭлементыФормы Из СписокСвойств Цикл
	
		ПолеФормыДопСвойство	=	Элементы.Найти("Свойство"+ЭлементыФормы.ИндексКолонки);
		Если ПолеФормыДопСвойство = Неопределено Тогда 
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
КонецФункции // ПроверитьСоотвествиеНастроекСПолучинемиДанными()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПроверитьПравоНаРаботуСОбработкой() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='У Вас недостаточно прав для запуска обработки ИзмененияЦенИРеквизитовНоменклатуры'"));
		Возврат;
	КонецЕсли;
		
	Если Параметры.Свойство("СсылкаНаЗаказПоставщику") Тогда
		ЗаказПоставщику = Параметры.СсылкаНаЗаказПоставщику;
		Если Не ЗаказПоставщику.Пустая() Тогда
			Элементы.КоличествоИзЗаказа.Видимость = Истина;
			Элементы.ЦенаПоставщикаУпрУч.Видимость = Истина;
			Элементы.ЦенаПоставщикаРеглУч.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ДокументСсылка") Тогда
		ДокументСсылка = Параметры.ДокументСсылка;
	Иначе
		ДокументСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка(); // Документ любая ссылка бо-бо
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаЗаказКлиента") Тогда
		ЗаказКлиента = Параметры.СсылкаНаЗаказКлиента;	
	КонецЕсли;
	
	Если Параметры.Свойство("МассивНоменклатуры") Тогда
		МассивНоменклатуры	= Параметры.МассивНоменклатуры;	
	КонецЕсли;
	
	ПолеСортировки = "Ссылка.Наименование";
	Сортировка_Направление = "";
	
	СоздатьРеквизитыИЭлементыФормы();
	УстановитьУсловноеОформление();
	
	СтруктураНастроек		= РеквизитФормыВЗначение("Объект").ПолучитьНастройки();	
	Если СтруктураНастроек.Свойство("ВидНоменклатуры") Тогда
		ВидНоменклатуры = СтруктураНастроек.ВидНоменклатуры;
	КонецЕсли;
	ЗагрузитьСписокНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Ответ = Вопрос(НСтр("ru='Данные о ценах и реквизитах номенклатуры были изменены. Записать изменения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Модифицированность 	= Ложь;
			РезультатРаботы 	= ИзменитьИзмененныеПозицииНаСервере();
			Если РезультатРаботы Тогда
				ПоказатьОповещениеПользователя(НСтр("ru='Данные успешно записаны.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					НСтр("ru='Данные были успешно записаны в базу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					БиблиотекаКартинок.Информация32);
			КонецЕсли;		
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ЗагрузитьСписокНоменклатурыНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблициСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементПроцентПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки						= Элемент.Имя;
	ИмяКолонкиУпрУч					= СтрЗаменить(ИмяКолонки,"Процент", "ВидЦены_УпрУч");
	ИмяКолонкиРеглУч				= СтрЗаменить(ИмяКолонки,"Процент", "ВидЦены_РеглУч");
	ИмяКолонкиПроцентИзменен    	= СтрЗаменить(ИмяКолонки,"Процент", "ПроцентИзменен_");
	ИмяКолонкиОтклонениеВидаЦены    = СтрЗаменить(ИмяКолонки,"Процент", "ОтклонениеВидаЦены");
	
	ТекущиеЦены 				= ПолучитьТекущиеЦены(ИмяКолонкиУпрУч, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     	= ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    	= ТекущиеЦены.ЦенаВВалютеРеглУчета;
	ЦенаВходнаяВВалютеРеглУчета	= ТекущиеЦены.ЦенаВходнаяВВалютеРеглУчета; 
	ЦенаВходнаяВВалютеУпрУчета 	= ТекущиеЦены.ЦенаВходнаяВВалютеУпрУчета;
	ВидЦены               	 	= ТекущиеЦены.ВидЦены;
	
	Если ЦенаВВалютеУпрУчета = 0 ИЛИ ЦенаВВалютеРеглУчета = 0 
		ИЛИ ЦенаВходнаяВВалютеУпрУчета = 0 ИЛИ ЦенаВходнаяВВалютеРеглУчета = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить цену на определенный процент, цена в базе не установлена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ТекущиеДанные[ИмяКолонки]				= 0;
		ТекущиеДанные[ИмяКолонкиУпрУч]  		= 0;
		ТекущиеДанные[ИмяКолонкиРеглУч] 		= 0;
		ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Ложь;
		Возврат;
	КонецЕсли;	
	
	ЦенаУпрУч = ЦенаВходнаяВВалютеУпрУчета * (1+ТекущиеДанные[ИмяКолонки] / 100);
	ЦенаРеглУч = ЦенаВходнаяВВалютеРеглУчета * (1 + ТекущиеДанные[ИмяКолонки] / 100);
	
	СтруктураЦен = ЗаокруглитьЦены(ЦенаУпрУч,ЦенаРеглУч,ВидЦены);
	ТекущиеДанные[ИмяКолонкиУпрУч]			= СтруктураЦен.ЦенаУпрУч;
	ТекущиеДанные[ИмяКолонкиРеглУч]			= СтруктураЦен.ЦенаРеглУч;
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = ?(ТекущиеДанные[ИмяКолонки] = 0, Ложь, Истина);
	ТекущиеДанные.ЭлементИзменен            = ?(ТекущиеДанные[ИмяКолонки] = 0, Ложь, Истина);
	
	Если ТекущиеДанные[ИмяКолонкиПроцентИзменен] Тогда
		УстановитьПризнакОтклоненияЦены(ТекущиеДанные[ИмяКолонкиУпрУч], ТекущиеДанные[ИмяКолонкиОтклонениеВидаЦены], ТекущиеЦены, ЦенаВВалютеУпрУчета);
	Иначе
		ТекущиеДанные[ИмяКолонкиОтклонениеВидаЦены] = Ложь;
	КонецЕсли;
	
	//http://r.ktc-ua.com/issues/5134
	Если ТекущиеЦены.РозничнаяЦена Тогда
		ПроцентКПП = ТекущиеДанные["КПП_Розница_Процент"];
		СреднийЗаработок = "ЗаработокРозница";
		ТекущиеДанные[СреднийЗаработок] = ТекущиеДанные[ИмяКолонкиРеглУч]* ПроцентКПП/100;
	КонецЕсли;

	Модифицированность = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементВидЦеныУпрПриИзменении(Элемент)

	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элемент.Имя;
	ИмяКолонкиРеглУч				= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч", "ВидЦены_РеглУч");
	ИмяКолонкиПроцентИзменен    	= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч", "ПроцентИзменен_");
	ИмяКолонкиПроцент		    	= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч", "Процент");
	ИмяКолонкиОтклонениеВидаЦены    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч", "ОтклонениеВидаЦены");
	
	ТекущиеЦены 				= ПолучитьТекущиеЦены(ИмяКолонки, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
    ЦенаВВалютеУпрУчета     	= ТекущиеЦены.ЦенаВВалютеУпрУчета;
    ЦенаВВалютеРеглУчета    	= ТекущиеЦены.ЦенаВВалютеРеглУчета;
    ЦенаВходнаяВВалютеРеглУчета	= ТекущиеЦены.ЦенаВходнаяВВалютеРеглУчета; 
    ЦенаВходнаяВВалютеУпрУчета 	= ТекущиеЦены.ЦенаВходнаяВВалютеУпрУчета; 
    КурсУпр						= ТекущиеЦены.КурсУпр;
	КурсРегл               	 	= ТекущиеЦены.КурсРегл;
	ВидЦены               	 	= ТекущиеЦены.ВидЦены;
    
    Если ЦенаВВалютеУпрУчета = 0 Тогда
    	ТекущиеДанные[ИмяКолонкиПроцент] 			= 9999999999;
		ТекущиеДанные[ИмяКолонкиОтклонениеВидаЦены] = Ложь;
    Иначе
    	ТекущиеДанные[ИмяКолонкиПроцент] = (ТекущиеДанные[ИмяКолонки] / ?(ЦенаВходнаяВВалютеУпрУчета=0,1,ЦенаВходнаяВВалютеУпрУчета) - 1) * 100;
		УстановитьПризнакОтклоненияЦены(ТекущиеДанные[ИмяКолонки], ТекущиеДанные[ИмяКолонкиОтклонениеВидаЦены], ТекущиеЦены, ЦенаВВалютеУпрУчета); 
    КонецЕсли;
    
    ЦенаУпрУч =  ТекущиеДанные[ИмяКолонки];
    ЦенаРеглУч = ТекущиеДанные[ИмяКолонки] * (КурсУпр / КурсРегл);
    
    СтруктураЦен = ЗаокруглитьЦены(ЦенаУпрУч,ЦенаРеглУч,ВидЦены,Истина,Ложь); 
    
    ТекущиеДанные[ИмяКолонкиРеглУч]  		= СтруктураЦен.ЦенаРеглУч;
    ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Истина;
    ТекущиеДанные.ЭлементИзменен            = Истина;
    
    //http://r.ktc-ua.com/issues/5134
    Если ТекущиеЦены.РозничнаяЦена Тогда
    	ПроцентКПП = ТекущиеДанные["КПП_Розница_Процент"];
    	СреднийЗаработок = "ЗаработокРозница";
    	ТекущиеДанные[СреднийЗаработок] = ТекущиеДанные[ИмяКолонкиРеглУч]* ПроцентКПП/100;
   КонецЕсли;
   
    Модифицированность = Истина;

КонецПроцедуры // Подключаемый_ЭлементВидЦеныУпрПриИзменении()

&НаКлиенте
Процедура Подключаемый_ЭлементВидЦеныРеглПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки						= Элемент.Имя;
	ИмяКолонкиУпрУч					= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "ВидЦены_УпрУч");
	ИмяКолонкиПроцентИзменен    	= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "ПроцентИзменен_");
	ИмяКолонкиПроцент		    	= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "Процент");
	ИмяКолонкиОтклонениеВидаЦены    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "ОтклонениеВидаЦены");
	
	ТекущиеЦены 					= ПолучитьТекущиеЦены(ИмяКолонки, ТекущиеДанные.Ссылка, ТекущиеДанные.Характеристика);			
	ЦенаВВалютеУпрУчета     		= ТекущиеЦены.ЦенаВВалютеУпрУчета;
	ЦенаВВалютеРеглУчета    		= ТекущиеЦены.ЦенаВВалютеРеглУчета;
	ЦенаВходнаяВВалютеРеглУчета		= ТекущиеЦены.ЦенаВходнаяВВалютеРеглУчета; 
	ЦенаВходнаяВВалютеУпрУчета 		= ТекущиеЦены.ЦенаВходнаяВВалютеУпрУчета; 
	КурсУпр							= ТекущиеЦены.КурсУпр;
	КурсРегл                		= ТекущиеЦены.КурсРегл;
	ВидЦены               	 		= ТекущиеЦены.ВидЦены;
	
	Если ЦенаВходнаяВВалютеРеглУчета = 0 Тогда
		ТекущиеДанные[ИмяКолонкиПроцент] 			= 9999999999;
		ТекущиеДанные[ИмяКолонкиОтклонениеВидаЦены] = Ложь;
	Иначе
		ТекущиеДанные[ИмяКолонкиПроцент] = (ТекущиеДанные[ИмяКолонки] / ЦенаВходнаяВВалютеРеглУчета - 1) * 100;
		УстановитьПризнакОтклоненияЦены(ТекущиеДанные[ИмяКолонки], ТекущиеДанные[ИмяКолонкиОтклонениеВидаЦены], ТекущиеЦены, ЦенаВВалютеРеглУчета);
	КонецЕсли;
	
	ТекущиеДанные[ИмяКолонкиУпрУч]  		= ТекущиеДанные[ИмяКолонки] * (КурсРегл / КурсУпр);
	ТекущиеДанные[ИмяКолонкиПроцентИзменен] = Истина;
	ТекущиеДанные.ЭлементИзменен            = Истина;
	
	//http://r.ktc-ua.com/issues/5134
	Если ТекущиеЦены.РозничнаяЦена Тогда
		ПроцентКПП = ТекущиеДанные["КПП_Розница_Процент"];
		СреднийЗаработок = "ЗаработокРозница";
		ТекущиеДанные[СреднийЗаработок] = ТекущиеДанные[ИмяКолонки]* ПроцентКПП/100;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // Подключаемый_ЭлементВидЦеныРеглПриИзменении()

&НаКлиенте
Процедура Подключаемый_ЭлементФормыПриИзменении(Элемент)
	
	ТекущиеДанные =	Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//http://r.ktc-ua.com/issues/5159
	ЗначениеКолонки = ТекущиеДанные[Элемент.Имя];
	Если ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")
		И Найти(Элемент.Имя,"Розн")>0 Тогда
		ПроцентКПП = ПересчитатьПроцентКПП(ЗначениеКолонки,ТекущиеДанные.Ссылка,Элемент.Имя);
		ТекущиеДанные[Элемент.Имя+"_Процент"] = ПроцентКПП;
		
		//http://r.ktc-ua.com/issues/5134
		//СреднийЗаработок = СтрЗаменить(Элемент.Имя,"КПП_","СредЗаработок");
		СреднийЗаработок = "ЗаработокРозница";
		//ЦенаРасчета 	 = "ВидЦены_РеглУч_8bdf84fc_404c_11e0_9f98_001517115d5";//Розница
		
		СтруктураДанных = ПолучитьЦенуТовара(ТекущиеДанные.Ссылка,Элемент.Имя,ПроцентКПП);
		Если СтруктураДанных.РасчетЗП тогда
			Если ПустаяСтрока(СтруктураДанных.ИмяКолонки) тогда
				ТекущиеДанные[СреднийЗаработок] = СтруктураДанных.Значение* ПроцентКПП/100;
			Иначе
				ТекущиеДанные[СреднийЗаработок] = ТекущиеДанные[СтруктураДанных.ИмяКолонки]* ПроцентКПП/100;
			КонецЕсли;
		Иначе 
			ТекущиеДанные[СреднийЗаработок] = 0;
		КонецЕсли;
	КонецЕсли;
	
	ИмяКолонки						= "ЭлементИзменен_" + Элемент.Имя;	
	ТекущиеДанные[ИмяКолонки] 		= Истина;
	ТекущиеДанные.ЭлементИзменен    = Истина;
	
	Модифицированность = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец", ТекущиеДанные.ВидНоменклатуры), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено  Тогда
	     Возврат;	
	 КонецЕсли;
	 
	Если Поле.Имя = "СписокНоменклатурыСсылка" Тогда
		ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);	
	ИначеЕсли Поле.Имя = "ОбщееНаличие" Тогда
		ОбработатьОткрытиеОтчета(Элемент.ТекущиеДанные.Ссылка,Элемент.ТекущиеДанные.Характеристика); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКолонку(Команда)
	
	Перем ЗначениеДляЗаполнения;
	
	ЭлСписокНоменклатуры = Элементы.СписокНоменклатуры;
	ТекущиеДанные 		 = ЭлСписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлСписокНоменклатуры.ТекущийЭлемент.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяТекущейКолонки 		= ЭлСписокНоменклатуры.ТекущийЭлемент.Имя;
	РезультатВвода			= Ложь;
	МассивИдентификаторов   = ЭлСписокНоменклатуры.ВыделенныеСтроки;
	
	Если Найти(ИмяТекущейКолонки, "ВалютаЦены") <> 0  Тогда
		ИмяКолонкиИзменениеВалюты = СтрЗаменить(ИмяТекущейКолонки, "ВалютаЦены", "ИзменятьВалюту");
		Если ТекущиеДанные[ИмяКолонкиИзменениеВалюты] = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТекущейКолонки = "КПП_Опт" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить КПП для опта.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"));
	ИначеЕсли ИмяТекущейКолонки = "КПП_Опт_НеПересчитыватьАвтоматически" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить флаг автоматического пересчета КПП для опта.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));
	ИначеЕсли ИмяТекущейКолонки = "КПП_Розница" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить КПП для розницы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры"));
	ИначеЕсли ИмяТекущейКолонки = "КПП_Розница_НеПересчитыватьАвтоматически" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить флаг автоматического пересчета КПП для розницы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));	
	ИначеЕсли ИмяТекущейКолонки = "ТоварнаяКатегория" Тогда
		ПараметрыОповещения = Новый Структура("ИмяТекущейКолонки, МассивИдентификаторов", ИмяТекущейКолонки, МассивИдентификаторов);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработкаГрупповогоВыбораТоварнойКатегории", ЭтаФорма, ПараметрыОповещения);
		ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец", ВидНоменклатуры), ЭтаФорма, Новый УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ИмяТекущейКолонки = "ЦеноваяГруппа" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить ценовую группу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	ИначеЕсли ИмяТекущейКолонки = "Дедлайн" Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установить дедлайн ценовой группы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Дата"));
	ИначеЕсли Найти(ИмяТекущейКолонки, "ВидЦены_УпрУч") <> 0  Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите значение цены в валюте управленческого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ИначеЕсли Найти(ИмяТекущейКолонки, "ВидЦены_РеглУч") <> 0  Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите значение цены в валюте регламентированого учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ИначеЕсли Найти(ИмяТекущейКолонки, "Процент") <> 0  Тогда
		РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите значение процента на который должна измениться цена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
	ИначеЕсли ИмяТекущейКолонки = "НеВыгружатьНаKtcUa" Тогда
							РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите новый статус разрешающий или запрещающий выгрузку на ktc-ua.com.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));
	ИначеЕсли ИмяТекущейКолонки = "НеВыгружатьНаOrderB2b" Тогда
							РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Введите новый статус разрешающий или запрещающий выгрузку на order-b2b.com.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));
	ИначеЕсли ИмяТекущейКолонки = "Согласовано" Тогда
							РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установите статус согласования номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Булево"));
	ИначеЕсли ИмяТекущейКолонки = "Гарантия" Тогда
							РезультатВвода = ВвестиЗначение(ЗначениеДляЗаполнения, 
							НСтр("ru='Установите новую гарантию на группу товаров.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							Новый ОписаниеТипов("Строка"));
	ИначеЕсли Найти(ИмяТекущейКолонки, "ВалютаЦены") <> 0  Тогда
		РезультатВвода 		= Ложь;
		СтруктураПараметров = Новый Структура("ИмяТекущейКолонки, МассивИдентификаторов", ИмяТекущейКолонки, МассивИдентификаторов);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработкаВыбораВалютыЦены", ЭтаФорма, СтруктураПараметров);
		СписокКодов			= Новый СписокЗначений;
		СписокКодов.Добавить("840");
		СписокКодов.Добавить("980");
		ЗначениеОтбора		= Новый Структура("Код", СписокКодов);
		ПараметрыФормы 		= Новый Структура("ЗакрыватьПриВыборе, Отбор", Истина, ЗначениеОтбора);
		ОткрытьФорму("Справочник.Валюты.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор, ,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для колонки запрещено групповое изменение значений реквизитов и цен номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если РезультатВвода Тогда
		ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяТекущейКолонки, ЗначениеДляЗаполнения, МассивИдентификаторов);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВалютыЦены(Результат, ПараметрОповещения) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ПараметрОповещения.ИмяТекущейКолонки, Результат, ПараметрОповещения.МассивИдентификаторов);
	Модифицированность = Истина;

КонецПроцедуры // ОбработкаЗакрытияформыВыбораСертификата()

&НаКлиенте
Процедура ОчиститьЗначенияКолонки(Команда)
    
	
	ЭлСписокНоменклатуры = Элементы.СписокНоменклатуры;
	ТекущиеДанные 		 = ЭлСписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлСписокНоменклатуры.ТекущийЭлемент.ТолькоПросмотр Тогда
		Возврат;
    КонецЕсли;
    
    ИмяТекущейКолонки 		= ЭлСписокНоменклатуры.ТекущийЭлемент.Имя;
	МассивИдентификаторов   = ЭлСписокНоменклатуры.ВыделенныеСтроки;
	
	Если Найти(ИмяТекущейКолонки, "ВалютаЦены") > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Валюту запрещено очищать'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
    
    ТекстВопроса = НСтр("ru='Вы действительно очистить значение?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Оповещение 	= Новый ОписаниеОповещения("ОчиститьЗаписьНаКлиенте",ЭтаФорма,Новый Структура("ИмяТекущейКолонки,МассивИдентификаторов",ИмяТекущейКолонки,МассивИдентификаторов));
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписьНаКлиенте(Результат, ДополнительныеПараметры)  Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
            ОчиститьЗаписьНаСервере(ДополнительныеПараметры.ИмяТекущейКолонки, ДополнительныеПараметры.МассивИдентификаторов);
        КонецЕсли; 
    КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗаписьНаСервере(ИмяТекущейКолонки,МассивИдентификаторов)
    Перем ЗначениеДляЗаполнения;
    Если ИмяТекущейКолонки = "КПП_Опт"
        ИЛИ ИмяТекущейКолонки = "КПП_Розница" Тогда
		РезультатВвода = Справочники.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка();
    ИначеЕсли ИмяТекущейКолонки = "КПП_Опт_НеПересчитыватьАвтоматически" 
        ИЛИ ИмяТекущейКолонки = "КПП_Розница_НеПересчитыватьАвтоматически" 
        ИЛИ ИмяТекущейКолонки = "НеВыгружатьНаKtcUa" 
        ИЛИ ИмяТекущейКолонки = "НеВыгружатьНаOrderB2b" 
		ИЛИ ИмяТекущейКолонки = "Согласовано" Тогда
        РезультатВвода = ЛОЖЬ;
    ИначеЕсли ИмяТекущейКолонки = "ТоварнаяКатегория" Тогда
        РезультатВвода = Справочники.ТоварныеКатегории.ПустаяСсылка();
    ИначеЕсли ИмяТекущейКолонки = "ЦеноваяГруппа" Тогда
        РезультатВвода = Справочники.ЦеновыеГруппы.ПустаяСсылка();
    ИначеЕсли ИмяТекущейКолонки = "Дедлайн" Тогда
        РезультатВвода = Дата(1,1,1);
    ИначеЕсли Найти(ИмяТекущейКолонки, "ВидЦены_УпрУч") <> 0  
        ИЛИ Найти(ИмяТекущейКолонки, "ВидЦены_РеглУч") <> 0 
        ИЛИ Найти(ИмяТекущейКолонки, "Процент") <> 0 Тогда
        РезультатВвода = 0;
	ИначеЕсли ИмяТекущейКолонки = "Гарантия" Тогда
		РезультатВвода = "";
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для колонки запрещено групповое изменение занчений реквизитов и цен номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
        Возврат;
    КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяТекущейКолонки, РезультатВвода, МассивИдентификаторов);
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаГрупповогоВыбораТоварнойКатегории(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(Параметр.ИмяТекущейКолонки, Результат, Параметр.МассивИдентификаторов);
	Модифицированность = Истина;

КонецПроцедуры // ОбработкаЗакрытияформыВыбораСертификата()

&НаКлиенте
Процедура СписокНоменклатурыНоваЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Согласовано = Истина;
	КонецЕсли;	
		
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьНаЗначение(Команда)
	ИзменитьНаЗначениеПроцентНаКлиенте("ИзменитьНаЗначение");	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)
	ИзменитьНаЗначениеПроцентНаКлиенте("ИзменитьНаПроцент");
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьИзмененныеПозиции(Команда)
	ТекущиеДанные 	= Элементы.СписокНоменклатуры.ТекущиеДанные;
	Номенклатура  	= ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Характеристика  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Характеристика);
	РезультатРаботы = ИзменитьИзмененныеПозицииНаСервере(Номенклатура, Характеристика);
	Если РезультатРаботы Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Данные успешно записаны.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					НСтр("ru='Данные были успешно записаны в базу.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					БиблиотекаКартинок.Информация32);
		Модифицированность = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("СписокНоменклатуры");
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " УБЫВ";
		СортироватьСписокНоменклатуры(СтруктураПередачи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("СписокНоменклатуры");
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " ВОЗР";
		СортироватьСписокНоменклатуры(СтруктураПередачи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварамиСЦПоЗамене(Команда)
	
	Модифицированность								= Ложь;
	ЗаполнятьПоЗамене 								= Не ЗаполнятьПоЗамене;
	Элементы.СогласованиеЗамены.Видимость   		= ЗаполнятьПоЗамене;
	Элементы.ЗаполнитьТоварамиСЦПоЗамене.Пометка    = ЗаполнятьПоЗамене;
	
	Если ЗаполнятьПоЗамене Тогда
		Элементы.ГруппаСтраницыВидНоменклатуры.ТекущаяСтраница = Элементы.ГруппаСтраницаВидНоменклатурыПустая;
	Иначе
		Элементы.ГруппаСтраницыВидНоменклатуры.ТекущаяСтраница = Элементы.ГруппаСтраницаВидНоменклатуры;
	КонецЕсли;
	
	ЗагрузитьСписокНоменклатурыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНоменклатуры(Команда)
	ЗагрузитьСписокНоменклатурыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ОткрытьФорму("ВнешняяОбработка.Ирокез.Форма.ФормаНастройки", , ЭтаФорма, Новый УникальныйИдентификатор, ,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РеквизитыИЭлементыФормы

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы(АвтоТест = Ложь)
	СтруктураКолонок = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруКолонок();
	УстановитьВидимостьЭлементов(СтруктураКолонок, АвтоТест);
КонецПроцедуры // СоздатьРеквизитыИЭлементыФормы()
 
&НаСервере
Процедура УстановитьВидимостьЭлементов(СтруктураКолонок,АвтоТест)
	
	УстановитьВидимостьЭлементовВидыЦен(СтруктураКолонок.СписокВидовЦен);
	УстановитьВидимостьЭлементовСвойства(СтруктураКолонок.СписокДопСвойства);
	УстановитьВидимостьЭлементовЦеныПоставщиков(СтруктураКолонок.СписокВидовЦенПоставщика);
	
	Если Не ЗаказПоставщику.Пустая() Тогда
		Элементы.КоличествоИзЗаказа.Видимость 	= Истина;
		Элементы.ЦенаПоставщикаУпрУч.Видимость 	= Истина;
		Элементы.ЦенаПоставщикаРеглУч.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовВидыЦен(МассивВидовЦен)

	Для каждого Колонка Из МассивВидовЦен Цикл
		
		ИндексКолонки = МассивВидовЦен.Найти(Колонка);
		Если ИндексКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКолонки = ИндексКолонки + 1;
		
		ИмяЭлементаГруппа		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВидЦены%1", ИндексКолонки);
		ИмяЭлементаУпрУч		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВидЦены_УпрУч%1", ИндексКолонки);
		ИмяЭлементаРеглУч		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВидЦены_РеглУч%1", ИндексКолонки);
		ИмяЭлементаПроцент		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Процент%1", ИндексКолонки);
		
		ЭлементГруппа = Элементы.Найти(ИмяЭлементаГруппа);
		Если ЭлементГруппа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУпрУч = Элементы.Найти(ИмяЭлементаУпрУч);
		Если ЭлементУпрУч = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементРеглУч = Элементы.Найти(ИмяЭлементаРеглУч);
		Если ЭлементРеглУч = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПроцент = Элементы.Найти(ИмяЭлементаПроцент);
		Если ЭлементПроцент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементГруппа.Видимость 	= Истина;
		ЭлементГруппа.Заголовок 	= Колонка.ЗаголовокГруппы; 
		ЭлементУпрУч.Заголовок		= Колонка.ЗаголовокВалютыУпр;
		ЭлементРеглУч.Заголовок		= Колонка.ЗаголовокВалютыРегл;
		
		Если Колонка.ВходнаяЦена Тогда
			//ЭлементУпрУч.ТолькоПросмотр = Истина;
			ЭлементРеглУч.ТолькоПросмотр = Истина;
			ЭлементПроцент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		НоваяСтрока 				= СписокВидовЦен.Добавить();
		НоваяСтрока.ИндексКолонки   = Строка(ИндексКолонки);
		НоваяСтрока.ВидЦены   		= Колонка.Ссылка;
		НоваяСтрока.ИмяКолонкиУпр   = ИмяЭлементаУпрУч;
		НоваяСтрока.ИмяКолонкиРегл  = ИмяЭлементаРеглУч;
		
	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьЄлементов()

&НаСервере
Процедура УстановитьВидимостьЭлементовСвойства(МассивСвойств)

	Для каждого Колонка Из МассивСвойств Цикл
		
		ИндексКолонки = МассивСвойств.Найти(Колонка);
		Если ИндексКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКолонки = ИндексКолонки + 1;
		ИмяЭлемента   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Свойство%1", ИндексКолонки);
		
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент.Видимость = Истина;
		Элемент.Заголовок = Колонка.Заголовок;
		
		НоваяСтрока 				= СписокСвойств.Добавить();
		НоваяСтрока.ИндексКолонки   = Строка(ИндексКолонки);
		НоваяСтрока.Свойство   		= Колонка.Ссылка;
		
	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьЭлементовСвойства()

&НаСервере
Процедура УстановитьВидимостьЭлементовЦеныПоставщиков(МассивЦенПоставщика)

	Для каждого Колонка Из МассивЦенПоставщика Цикл
		
		ИндексКолонки = МассивЦенПоставщика.Найти(Колонка);
		Если ИндексКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКолонки = ИндексКолонки + 1;
		ИмяЭлемента   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЦенаПоставщика%1", ИндексКолонки);
		
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент.Видимость = Истина;
		Элемент.Заголовок = Колонка.Заголовок;
		
		НоваяСтрока 					= СписокЦенПоставщика.Добавить();
		НоваяСтрока.ИндексКолонки   	= Строка(ИндексКолонки);
		НоваяСтрока.ВидЦеныПоставщика   = Колонка.Ссылка;
		
	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьЭлементовЦеныПоставщиков()
 
 

&НаСервере
Функция СтруктураПараметровГруппыКолонок(ИмяЭлемента, ЗаголовокЭлемента, ФиксацияВТаблице, ЦветФонаЗаголовка=Неопределено,ТолькоПросмотр=Ложь)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);
	ПараметрыЭлемента.Вставить("Вид", ВидГруппыФормы.ГруппаКолонок);
	ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("Ширина", 12);
	ПараметрыЭлемента.Вставить("Группировка", ГруппировкаКолонок.Горизонтальная);
	ПараметрыЭлемента.Вставить("ОтображатьВШапке", Истина);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("Заголовок", ЗаголовокЭлемента);
	ПараметрыЭлемента.Вставить("ФиксацияВТаблице", ФиксацияВТаблице);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("КартинкаШапки", БиблиотекаКартинок.ЗначокПлюс);
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	
	Возврат ПараметрыЭлемента;

КонецФункции // ПолучитьСтруктуруПараметровГруппыКолонок()

&НаСервере
Функция СтруктураПараметровКолонки(ИмяЭлемента, ЦветЭлемента, ТолькоПросмотр, Подсказка, ЦветФонаЗаголовка=Неопределено, Шрифт=Неопределено,КнопкаВыбора=Ложь,ВидПоля=Неопределено)

	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", ИмяЭлемента);  
	ПараметрыЭлемента.Вставить("Вид", ?(ВидПоля=Неопределено,ВидПоляФормы.ПолеВвода,ВидПоля));
	ПараметрыЭлемента.Вставить("ПутьКДанным", "СписокНоменклатуры." + ИмяЭлемента);
	ПараметрыЭлемента.Вставить("ТипЭлемента",Тип("ПолеФормы"));
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлемента.Вставить("ЦветФона", ЦветЭлемента);
	ПараметрыЭлемента.Вставить("Ширина", 6);
	ПараметрыЭлемента.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыЭлемента.Вставить("КнопкаОткрытия", Ложь);
	ПараметрыЭлемента.Вставить("КнопкаВыбора", КнопкаВыбора);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлемента.Вставить("Подсказка", Подсказка);
	ПараметрыЭлемента.Вставить("ЦветРамки", Новый Цвет(0, 0, 0));
	Если Шрифт <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("Шрифт", Шрифт);
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		ПараметрыЭлемента.Вставить("ЦветФонаЗаголовка", Новый Цвет(253, 255-Цел(255/ЦветФонаЗаголовка), ЦветФонаЗаголовка));
	КонецЕсли;
	Возврат ПараметрыЭлемента;
КонецФункции // СтруктураПараметровКолонки()

#КонецОбласти 

#Область УсловноеОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаОбъект 			= РеквизитФормыВЗначение("Объект");
	ТаблицаСписокНоменклатуры	= РеквизитФормыВЗначение("СписокНоменклатуры", Тип("ТаблицаЗначений"));
	
	Для каждого КолонкаТаблицы Из ТаблицаСписокНоменклатуры.Колонки Цикл
		
		ИмяКолонки = КолонкаТаблицы.Имя;
		
		Если Найти(ИмяКолонки, "ПроцентИзменен_") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияТолькоПросмотр(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияТолькоПросмотрВалютаЦены(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, "Тип_Колонки_Цена");
		КонецЕсли;
		
		Если Найти(ИмяКолонки, "ЭлементИзменен_") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки);
			ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, "Тип_Колонки_Реквизит");
		КонецЕсли;
		
		Если Найти(ИмяКолонки, "ЦенаПоставщика") > 0 Тогда
			ДобавитьЭлементУсловногоОформленияШрифтЯчейки(ИмяКолонки);
		КонецЕсли;
		
		Если Найти(ИмяКолонки, "ОтклонениеВидаЦены") > 0 Тогда
			УстановитьЦветШрифтаОтклоненияЦены(ИмяКолонки);
		КонецЕсли;

	КонецЦикла; 
	
	// Выделяем строку зеленым цветом если продакт установил новую цену
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатуры");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.НоваЦена");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЦенаИзДокумента");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(147, 196, 0));
	
	// Выделяем ячейку если продакт установил новую цену
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатурыНоваЦена");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.НоваЦена");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.ЦенаИзДокумента");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(9, 144, 74));
	
	// Выделяем строку зеленым цветом если продакт установил галочку "Согласовано"
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатуры");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Согласовано");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(147, 196, 0));
	
	
	// Выделяем ячейку если продакт установил новую цену
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатурыСогласовано");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры.Согласовано");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(9, 144, 74));
	
	ЗначениеВРеквизитФормы(ТаблицаСписокНоменклатуры, "СписокНоменклатуры");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// http://r.ktc-ua.com/issues/5944
	ДобавитьУсловноеОформлениеСравненияЦен();
	 
	
КонецПроцедуры

// http://r.ktc-ua.com/issues/5944
&НаСервере
Процедура ДобавитьУсловноеОформлениеСравненияЦен()

	РозничнаяЦена    = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")); // Роздріб
	СтруктураПоиска  = Новый Структура("ВидЦены", РозничнаяЦена);
	РезультатыПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяКолонкиРознУпр  = РезультатыПоиска[0].ИмяКолонкиУпр;
	ИмяКолонкиРознРегл = РезультатыПоиска[0].ИмяКолонкиРегл;
	
	Для ИндексКолонки = 1 По 5 Цикл
		
		ИмяКолонкиУпр  		= "ВидЦены_УпрУч"  + Строка(ИндексКолонки);
		ИмяКолонкиРегл 		= "ВидЦены_РеглУч" + Строка(ИндексКолонки);
		ИмяКолонкиПроцент   = "Процент" + Строка(ИндексКолонки); 
		
		ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиПроцент);
		ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиПроцент);
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение	= 0;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(0, 255, 255));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
		
		Если ИмяКолонкиРознУпр = Элементы[ИмяКолонкиУпр] И ИмяКолонкиРознРегл = ЭтаФорма[ИмяКолонкиРегл] Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиУпр);
		ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиУпр);
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиРознУпр);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(0, 250, 154));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
		
		
		ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
		ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиРегл);
		ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиРегл);
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиРознРегл);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(0, 250, 154));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	КонецЦикла;

КонецПроцедуры // ДобавитьУсловноеОформлениеСравненияЦен()
 

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияШрифтЯчейки(ИмяКолонки)
	
	// #5077 для условного оформления цен поставщика
	//{
	ИмяКолонкиОтбора = СтрЗаменить(ИмяКолонки, "ЦенаПоставщика", "ПСЦенаП");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонки);
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ ИмяКолонкиОтбора);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, Новый  Цвет(128,128,128));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт"		, Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , ,Ложь , , ,Истина));
	//}#5077
КонецПроцедуры // УстановитьУсловноеОформлениеЯчейки()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияТолькоПросмотр(ИмяКолонки)

	ИмяЭлементаПроцентЦены 	= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "Процент");
	ИмяЭлементаВидЦены 		= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_УпрУч");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяЭлементаПроцентЦены);
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ИмяЭлементаВидЦены);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры // ДобавитьЭлементУсловногоОформления()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияТолькоПросмотрВалютаЦены(ИмяКолонки)

	ИмяЭлементаВалютаЦены 		= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВалютаЦены");
	ИмяЭлементаИзменятьВалюту 	= СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ИзменятьВалюту");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяЭлементаВалютаЦены);
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ИмяЭлементаИзменятьВалюту);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


КонецПроцедуры // ДобавитьЭлементУсловногоОформленияТолькоПросмотрВалютаЦены()
 
&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияЦветФонаСтроки(ИмяКолонки)
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("СписокНоменклатуры");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(147, 196, 0));
	
КонецПроцедуры // ДобавитьЭлементУсловногоОформленияЦветФонаСтроки()

&НаСервере
Процедура ДобавитьЭлементУсловногоОформленияФонаЯчейки(ИмяКолонки, ТипКолонки)

	Если ТипКолонки = "Тип_Колонки_Цена" Тогда
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_УпрУч");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "ВидЦены_РеглУч");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ПроцентИзменен_", "Процент");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
	КонецЕсли;
	
	Если ТипКолонки = "Тип_Колонки_Реквизит" Тогда
		ИмяКолонкиПоля = СтрЗаменить(ИмяКолонки, "ЭлементИзменен_", "");
		УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры // ДобавитьЭлементУсловногоОформленияФонаЯчейки()

&НаСервере
Процедура УстановитьУсловноеОформлениеЯчейки(ИмяКолонкиПоля, ИмяКолонкиОтбора)

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ИмяКолонкиПоля);
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры." + ИмяКолонкиОтбора);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(9, 144, 74));
	
КонецПроцедуры // УстановитьУсловноеОформлениеЯчейки()

&НаСервере
Процедура УстановитьЦветШрифтаОтклоненияЦены(ИмяКолонки)

	// #6639 для условного оформления отклонения цен по виду номенклатуры
	//{
	ВидЦеныУпрУч 		= СтрЗаменить(ИмяКолонки, "ОтклонениеВидаЦены", "ВидЦены_УпрУч");
	ВидЦены_РеглУч 		= СтрЗаменить(ИмяКолонки, "ОтклонениеВидаЦены", "ВидЦены_РеглУч");
	Процент 			= СтрЗаменить(ИмяКолонки, "ОтклонениеВидаЦены", "Процент");
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ВидЦеныУпрУч);
	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(ВидЦены_РеглУч);
	
	ОформляемоеПоле					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(Процент);
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокНоменклатуры."+ ИмяКолонки);
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, Новый  Цвет(255, 0, 0));
	
	//}#6639
КонецПроцедуры // УстановитьЦветШрифтаОтклоненияЦены()
 

#КонецОбласти 

#Область ПраваДостапаОбработки

&НаСервере
Функция ПроверитьПравоНаРаботуСОбработкой()
	
	Если РольДоступна("ПолныеПрава")  Тогда
		Возврат Истина;	
	КонецЕсли;

	Если РольДоступна("КПП_ДобавлениеИзменениеОбработкиИрокез")  Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Возврат Ложь; 		
	
КонецФункции // ПроверитьПравоНаРаботуСОбработкой()
		
#КонецОбласти

#Область СортировкаПолей

&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонки(ИмяКоллекцииЗначений)
	ТДанные  = Элементы[ИмяКоллекцииЗначений].ТекущиеДанные;
	ТЭлемент = Элементы[ИмяКоллекцииЗначений].ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя, Номенклатура, Характеристика",  
														ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные  = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент = Неопределено, Неопределено, ТЭлемент.Имя),
														?(ТДанные  = Неопределено, Неопределено, ТДанные.Ссылка),
														?(ТДанные  = Неопределено, Неопределено, ТДанные.Характеристика));		
КонецФункции

&НаСервере
Процедура СортироватьСписокНоменклатуры(знач СтруктураПередачи)
	
	//Если Найти(СтруктураПередачи.Имя, "Свойство")>0 И Найти(СтруктураПередачи.Имя, "Свойство") > 0 Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недопустимое поле для упорядочивания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	//	Возврат;	
	//КонецЕсли;

	КолонкаДляСортировки = СтрЗаменить(СтруктураПередачи.Имя, "СписокНоменклатуры",""); 
	ДанныеТекущейСтроки = СписокНоменклатуры.НайтиПоИдентификатору(СтруктураПередачи.Идентификатор);

	ЗначениеКолонки = ДанныеТекущейСтроки[КолонкаДляСортировки];

	Если ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПолеСортировки = "СпрНоменклатура.Номенклатура.Наименование";
	ИначеЕсли Найти(СтруктураПередачи.Имя, "Свойство") > 0 Тогда
		ПолеСортировки = СтруктураПередачи.Имя;
	Иначе 
		ПолеСортировки = КолонкаДляСортировки;
	КонецЕсли;

	ЗагрузитьСписокНоменклатурыНаСервере(СтруктураПередачи.Номенклатура, СтруктураПередачи.Характеристика);
	
КонецПроцедуры

#КонецОбласти


#Область ИзменениеНаЗначениеПроцент

&НаКлиенте
Процедура ИзменитьНаЗначениеПроцентНаКлиенте(ВидОперации)

	Перем ЗначениеДляЗаполнения;
	
	ЭлСписокНоменклатуры = Элементы.СписокНоменклатуры;
	ТекущиеДанные 		 = ЭлСписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлСписокНоменклатуры.ТекущийЭлемент.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки 		= ЭлСписокНоменклатуры.ТекущийЭлемент.Имя;
	РезультатВвода			= Ложь;
	МассивИдентификаторов   = ЭлСписокНоменклатуры.ВыделенныеСтроки;
	ЗаголовокВвода			= ?(ВидОперации = "ИзменитьНаЗначение", "Введите значение на которое", "Введите процент на который");
	
	Если Найти(ИмяТекущейКолонки, "ВидЦены") <> 0 Тогда
		ЗаголовокДиалога    = НСтр("ru='%1 должна увеличится цена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаголовокДиалога	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДиалога, ЗаголовокВвода);
		РезультатВвода 		= ВвестиЗначение(ЗначениеДляЗаполнения, 
									ЗаголовокДиалога, 
									Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,0, ДопустимыйЗнак.Любой)));
	ИначеЕсли Найти(ИмяТекущейКолонки, "Процент") <> 0 Тогда
		ЗаголовокДиалога    = НСтр("ru='%1 должна увеличится цена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаголовокДиалога	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДиалога, ЗаголовокВвода);
		РезультатВвода 		= ВвестиЗначение(ЗначениеДляЗаполнения, 
									ЗаголовокДиалога, 
									Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой)));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для колонки запрещено групповое изменение цен номенклатуры на значение или процент.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если РезультатВвода И ЗначениеДляЗаполнения <> 0 Тогда
		ВыполнитьИзменениеЗначенияИлиПроцентаНаСервере(ВидОперации, ИмяТекущейКолонки, ЗначениеДляЗаполнения, МассивИдентификаторов);
	КонецЕсли;

КонецПроцедуры // ИзменитьНаЗначениеПроцентНаКлиенте()

&НаСервере
Процедура ВыполнитьИзменениеЗначенияИлиПроцентаНаСервере(ВидОперации, ИмяТекущейКолонки, ЗначениеДляЗаполнения, МассивИдентификаторов)

	ВидЦены 		= Неопределено;
	ИмяКолонкиБуфер = СтрЗаменить(ИмяТекущейКолонки, "Процент", "ВидЦены_УпрУч");
	
	СтруктураПоиска = Новый Структура("ИмяКолонкиУпр", ИмяКолонкиБуфер);
	РезультатПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ВидЦены = РезультатПоиска[0].ВидЦены;
	Иначе
		СтруктураПоиска = Новый Структура("ИмяКолонкиРегл", ИмяКолонкиБуфер);
		РезультатПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			ВидЦены = РезультатПоиска[0].ВидЦены;			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВидЦены) <> Тип("СправочникСсылка.ВидыЦен") Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаОкругленияЦены = ВидЦены.ПравилаОкругленияЦены.Выгрузить();
	ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен Возр");
	
	ОкруглятьВБольшуюСторону = ВидЦены.ОкруглятьВБольшуюСторону;
	ОкруглятьЦену			 = НужноОкруглятьКолонку(ИмяКолонкиБуфер, ВидЦены);
	
	Для каждого ИдентификаторСтроки ИЗ МассивИдентификаторов Цикл
		
		СтрокаТаблицы = СписокНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеЗначение = 0;
		Если ВидОперации = "ИзменитьНаЗначение" Тогда
			НовоеЗначение = СтрокаТаблицы[ИмяТекущейКолонки] + ЗначениеДляЗаполнения;
		ИначеЕсли ВидОперации = "ИзменитьНаПроцент" Тогда
			НовоеЗначение = СтрокаТаблицы[ИмяТекущейКолонки] + СтрокаТаблицы[ИмяТекущейКолонки] * ЗначениеДляЗаполнения * 0.01;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Найти(ИмяТекущейКолонки, "ВидЦены") <> 0 И ВидОперации = "ИзменитьНаПроцент" И ОкруглятьЦену Тогда // исли изменяем значение цены на процент - нужно округлять
			НовоеЗначение = ОкруглитьЦенуСтандарт(НовоеЗначение, ПравилаОкругленияЦены, ОкруглятьВБольшуюСторону);
		КонецЕсли;
		
		ТекущийМассивИдентификаторов = Новый Массив; // В массив включаем только текущую строку
		ТекущийМассивИдентификаторов.Добавить(ИдентификаторСтроки);
		
		ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяТекущейКолонки, НовоеЗначение, ТекущийМассивИдентификаторов);
		
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры // ВыполнитьИзменениеЗначенияИлиПроцентаНаСервере()

&НаСервере
Функция ОкруглитьЦенуСтандарт(ЗначениеЦены, ПравилаОкругленияЦены, ОкруглятьВБольшуюСторону)
			
	Для каждого ПравилоОкругления ИЗ ПравилаОкругленияЦены Цикл
		
		Если ПравилоОкругления.НижняяГраницаДиапазонаЦен <= ЗначениеЦены Тогда
			ЗначениеЦены = РассчитатьРезультат(ЗначениеЦены, ПравилоОкругления.ТочностьОкругления, ОкруглятьВБольшуюСторону, ПравилоОкругления.ПсихологическоеОкругление);
		Иначе
			Возврат ЗначениеЦены;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеЦены;
	
КонецФункции 

&НаСервере
Функция НужноОкруглятьКолонку(ИмяКолонки, ВидЦены)

	ВалютаЦены 	= ВидЦены.ВалютаЦены;
	ВалютаУпр	= Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ВалютаЦены = ВалютаУпр И Найти(ИмяКолонки, "ВидЦены_Упр") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВалютаЦены = ВалютаРегл И Найти(ИмяКолонки, "ВидЦены_Регл") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции // НужноОкруглятьКолонку()
 

#КонецОбласти 


&НаКлиенте
Процедура ЗагрузитьСписокНоменклатурыНаКлиенте()
	ТекущиеДанные  		= Элементы.СписокНоменклатуры.ТекущиеДанные;
	Номенклатура   		= ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Характеристика 		= ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Характеристика);
	ЗагрузитьСписокНоменклатурыНаСервере(Номенклатура, Характеристика);	
КонецПроцедуры // ЗагрузитьСписокНоменклатурыНаКлиенте()

&НаСервере
Процедура ЗагрузитьСписокНоменклатурыНаСервере(знач Номенклатура = Неопределено, знач Характеристика = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуНоменклатуры(ЭтаФорма);
	
	Если Номенклатура <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Ссылка, Характеристика", Номенклатура, Характеристика);
		РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокНоменклатурыНаСервере()

&НаСервере
Функция ИзменитьИзмененныеПозицииНаСервере(знач Номенклатура=Неопределено, знач Характеристика=Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	РезультатыРаботы = РеквизитФормыВЗначение("Объект").ИзменитьПозиции(ЭтаФорма);
	Если Номенклатура <> Неопределено И Характеристика <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Ссылка, Характеристика", Номенклатура, Характеристика);
		РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатыРаботы;
КонецФункции // ИзменитьИзмененныеПозицииНаСервере()





&НаСервере
Функция ПолучитьТекущиеЦены(ИмяКолонки, Номенклатура, Характеристика)

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатРасчета = ПолучитьСтруктуруРезультатаРасчета();
	ВидЦены 		 = Справочники.ВидыЦен.ПустаяСсылка();
	
	СтруктураПоиска = Новый Структура("ИмяКолонкиУпр", ИмяКолонки);
	РезультатПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ВидЦены = РезультатПоиска[0].ВидЦены;
	Иначе
		СтруктураПоиска = Новый Структура("ИмяКолонкиРегл", ИмяКолонки);
		РезультатПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			ВидЦены = РезультатПоиска[0].ВидЦены;
		КонецЕсли;
	КонецЕсли;
	
	ВидЦеныВходная	= Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85"));//Входная цена    основна
		
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаТекущиеЦены();
						  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ВидЦеныВходная", ВидЦеныВходная);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированогоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатыЗапроса 		= Запрос.ВыполнитьПакет();
	ВыборкаЦены		  		= РезультатыЗапроса[2].Выбрать();
	ВыборкаКурсы	  		= РезультатыЗапроса[3].Выбрать();
	ВыборкаОтклоненияЦен    = РезультатыЗапроса[4].Выбрать();

	Если ВыборкаЦены.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатРасчета, ВыборкаЦены);
	КонецЕсли;
	
	Если ВыборкаКурсы.Следующий() Тогда
		РезультатРасчета.КурсУпр 	= ВыборкаКурсы.КурсУпр;
		РезультатРасчета.КурсРегл 	= ВыборкаКурсы.КурсРегл;
	КонецЕсли;
	
	Если ВыборкаОтклоненияЦен.Следующий() Тогда
		РезультатРасчета.ПорогСрабатывания 		= ВыборкаОтклоненияЦен.ПорогСрабатывания;
		РезультатРасчета.ОтклонениеУвеличения 	= ВыборкаОтклоненияЦен.ОтклонениеУвеличения;	
		РезультатРасчета.ОтклонениеУменшения 	= ВыборкаОтклоненияЦен.ОтклонениеУменшения;
	КонецЕсли; 
	
	РезультатРасчета.Вставить("ВидЦены", ВидЦены);
	РезультатРасчета.Вставить("РозничнаяЦена", ВидЦены = ктс_ПредопределенныеЗначенияПовтИсп.ВидЦеныРозничная());
	
	Возврат РезультатРасчета;

КонецФункции // ПолучитьКурсыВалют()

&НаСервере
Функция ПолучитьСтруктуруРезультатаРасчета()

	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("ЦенаВВалютеУпрУчета", 0);
	РезультатРасчета.Вставить("ЦенаВВалютеРеглУчета", 0);
	РезультатРасчета.Вставить("ЦенаВходнаяВВалютеРеглУчета", 0);
	РезультатРасчета.Вставить("ЦенаВходнаяВВалютеУпрУчета", 0);
	РезультатРасчета.Вставить("КурсУпр", 1);
	РезультатРасчета.Вставить("КурсРегл", 1);
	РезультатРасчета.Вставить("КурсЦены", 1);
	РезультатРасчета.Вставить("КурсЦеныВходная", 1);
	РезультатРасчета.Вставить("ВидЦены");
	РезультатРасчета.Вставить("РозничнаяЦена", Ложь);
	РезультатРасчета.Вставить("ПорогСрабатывания", 0);
	РезультатРасчета.Вставить("ОтклонениеУвеличения", 0);
	РезультатРасчета.Вставить("ОтклонениеУменшения", 0);
	
	Возврат РезультатРасчета;

КонецФункции // ПолучитьСтруктуру()

&НаСервере
Функция ТекстЗапросаТекущиеЦены()

	ТекстЗапроса = "ВЫБРАТЬ
		                  |	ЦенаТовара.Цена						КАК Цена,
	                      |	ЦенаТовара.Валюта					КАК Валюта,
	                      |	ISNULL(ЦенаТовараВходна.Цена,0)		КАК ЦенаВходная,
	                      |	ЦенаТовараВходна.Валюта 			КАК ВалютаВходная
	                      |ПОМЕСТИТЬ ТекущиеЦены
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			&Дата,
	                      |			ВидЦены = &ВидЦены
	                      |				И Номенклатура = &Номенклатура
	                      |				И Характеристика = &Характеристика)  КАК ЦенаТовара
						  |
				          |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			&Дата,
	                      |			ВидЦены = &ВидЦеныВходная
	                      |				И Номенклатура = &Номенклатура
	                      |				И Характеристика = &Характеристика) КАК ЦенаТовараВходна
						  |ПО ЦенаТовара.Номенклатура = ЦенаТовараВходна.Номенклатура
						  |И ЦенаТовара.Характеристика = ЦенаТовараВходна.Характеристика
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Валюта				КАК Валюта,
	                      |	Курс / Кратность 	КАК Курс
	                      |ПОМЕСТИТЬ КурсыВалют
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, )
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.Валюта = &ВалютаРегламентированогоУчета
						  |			ТОГДА ТекущиеЦены.Цена
						  |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВВалютеРеглУчета,
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.Валюта = &ВалютаУправленческогоУчета
						  |			ТОГДА ТекущиеЦены.Цена
						  |		ИНАЧЕ ТекущиеЦены.Цена * (ЕСТЬNULL(КурсыВалютЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВВалютеУпрУчета,
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.ВалютаВходная = &ВалютаРегламентированогоУчета
						  |			ТОГДА ТекущиеЦены.ЦенаВходная
						  |		ИНАЧЕ ТекущиеЦены.ЦенаВходная * (ЕСТЬNULL(КурсыВалютЦеныВходная.Курс, 0) / ЕСТЬNULL(КурсыВалютРегл.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВходнаяВВалютеРеглУчета,
						  |	ВЫБОР                           
						  |		КОГДА ТекущиеЦены.ВалютаВходная = &ВалютаУправленческогоУчета
						  |			ТОГДА ТекущиеЦены.ЦенаВходная
						  |		ИНАЧЕ ТекущиеЦены.ЦенаВходная * (ЕСТЬNULL(КурсыВалютЦеныВходная.Курс, 0) / ЕСТЬNULL(КурсыВалютУпр.Курс, 1))
						  |	КОНЕЦ КАК ЦенаВходнаяВВалютеУпрУчета,
						  |	ЕСТЬNULL(КурсыВалютЦены.Курс, 1) КАК КурсЦены,
						  |	ЕСТЬNULL(КурсыВалютЦеныВходная.Курс, 1) КАК КурсЦеныВходная
						  |ИЗ
						  |	ТекущиеЦены КАК ТекущиеЦены
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦены
						  |		ПО ТекущиеЦены.Валюта = КурсыВалютЦены.Валюта
						  |
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
						  |		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
						  |		ПО КурсыВалютРегл.Валюта = &ВалютаРегламентированогоУчета
						  |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЦеныВходная
						  |		ПО ТекущиеЦены.ВалютаВходная = КурсыВалютЦеныВходная.Валюта
						  |
						  |;
						  |
						  |ВЫБРАТЬ
						  |	СУММА(ВложенныйЗапрос.КурсУпр) КАК КурсУпр,
						  |	СУММА(ВложенныйЗапрос.КурсРегл) КАК КурсРегл
						  |ИЗ
						  |	(
						  |		ВЫБРАТЬ
						  |			Курс 	КАК КурсУпр,
						  |			0 		КАК КурсРегл
						  |		ИЗ	
						  |			КурсыВалют
						  |		ГДЕ
						  |			Валюта = &ВалютаУправленческогоУчета
						  |		
						  |		ОБЪЕДИНИТЬ ВСЕ 
						  |		
						  |		ВЫБРАТЬ
						  |			0 			КАК КурсУпр,
						  |			Курс 		КАК КурсРегл
						  |		ИЗ	
						  |			КурсыВалют
						  |		ГДЕ
						  |			Валюта = &ВалютаРегламентированогоУчета) КАК ВложенныйЗапрос
						  |;
						  |
						  |ВЫБРАТЬ
						  |	ОтклонениеУвеличения КАК ОтклонениеУвеличения,
						  |	ОтклонениеУменшения  КАК ОтклонениеУменшения,
						  |	ПорогСрабатывания	 КАК ПорогСрабатывания
						  |ИЗ
						  |	РегистрСведений.ALPS_ОтклонениеЦенВидовНоменклатуры.СрезПоследних(&Дата, 
						  |															ВидЦены = &ВидЦены
						  |															И ВидНоменклатуры = &ВидНоменклатуры)
						  |;";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапроса()

&НаКлиенте
Процедура УстановитьПризнакОтклоненияЦены(ТекущаяКолонка, КолонкаОтклоненияВидаЦены, СтруктураОтклонений, ТекущаяЦенаВБазе)

	ПроцентОтклонения = ТекущаяКолонка / ТекущаяЦенаВБазе;
	Если ПроцентОтклонения >= 1 Тогда
		ПроцентУвеличения = ПроцентОтклонения - 1;
		Если ПроцентУвеличения > СтруктураОтклонений.ОтклонениеУвеличения Тогда
			КолонкаОтклоненияВидаЦены = Истина;
		Иначе
			КолонкаОтклоненияВидаЦены = Ложь;
		КонецЕсли;
	Иначе
		ПроцентУменшения = 1 - ПроцентОтклонения;
		Если ПроцентУменшения > СтруктураОтклонений.ОтклонениеУменшения Тогда
			КолонкаОтклоненияВидаЦены = Истина;
		Иначе
			КолонкаОтклоненияВидаЦены = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьПризнакОтклоненияЦены()
 


 

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
&НаСервереБезКонтекста
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор)
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

// Процедура выполняет установку значений реквизитов и цен номенклатуры для
// таблицы «Список номенклатры» для целой колонки.
//
// Параметры:
//  ИмяКолонки  		  - Строка -  имя колонки для которой нужно установить значение.
//  ЗначениеДляЗаполнения - СправочникСсылка.ТоварныеКатегории,
//							СправочникСсылка.ЦеновыеГруппы,
//							Дата,
//							Число - значение которое нужно установить в колонке.
//
&НаСервере
Процедура ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры(ИмяКолонки, ЗначениеДляЗаполнения, МассивИдентификаторовСтрок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч","ВидЦены_РеглУч");
	ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч","ПроцентИзменен_");
	ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч","Процент");
	
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
	
		СтрокаСпискаНоменклатуры = СписокНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаСпискаНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(ИмяКолонки, "ВидЦены_УпрУч") <> 0 Тогда
			
			ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч","ВидЦены_РеглУч");
			ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч","ПроцентИзменен_");
			ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_УпрУч","Процент");
			
			ТекущиеЦены 					= ПолучитьТекущиеЦены(ИмяКолонки, СтрокаСпискаНоменклатуры.Ссылка, СтрокаСпискаНоменклатуры.Характеристика);			
			ЦенаВВалютеУпрУчета     		= ТекущиеЦены.ЦенаВВалютеУпрУчета;
			ЦенаВВалютеРеглУчета    		= ТекущиеЦены.ЦенаВВалютеРеглУчета;
			ЦенаВходнаяВВалютеРеглУчета		= ТекущиеЦены.ЦенаВходнаяВВалютеРеглУчета; 
			ЦенаВходнаяВВалютеУпрУчета 		= ТекущиеЦены.ЦенаВходнаяВВалютеУпрУчета;
			КурсУпр							= ТекущиеЦены.КурсУпр;
			КурсРегл                		= ТекущиеЦены.КурсРегл;
			ВидЦены					        = ТекущиеЦены.ВидЦены;
			
			СтрокаСпискаНоменклатуры[ИмяКолонки] = ЗначениеДляЗаполнения;
			
			Если ЦенаВВалютеУпрУчета = 0 ИЛИ ЦенаВходнаяВВалютеРеглУчета = 0 Тогда
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = 9999999999;
			Иначе
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = (СтрокаСпискаНоменклатуры[ИмяКолонки] / ?(ЦенаВходнаяВВалютеУпрУчета=0, 1, ЦенаВходнаяВВалютеУпрУчета) - 1) * 100;
			КонецЕсли;
			
			ЦенаУпрУч = СтрокаСпискаНоменклатуры[ИмяКолонки];
			ЦенаРеглУч = СтрокаСпискаНоменклатуры[ИмяКолонки] * (КурсУпр / КурсРегл);
	
			СтруктураЦен = ЗаокруглитьЦены(ЦенаУпрУч, ЦенаРеглУч, ВидЦены);
				
			СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч]  		= СтруктураЦен.ЦенаРеглУч;
			СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен]  = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен             = Истина;
			
			РасчитатьЗаработокРозница(СтрокаСпискаНоменклатуры,ИмяКолонкиРеглУч); 	
		
			
		ИначеЕсли Найти(ИмяКолонки, "ВидЦены_РеглУч") <> 0 Тогда
			
			ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "ВидЦены_УпрУч");
			ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "ПроцентИзменен_");
			ИмяКолонкиПроцент		    = СтрЗаменить(ИмяКолонки,"ВидЦены_РеглУч", "Процент");
			
			ТекущиеЦены 					= ПолучитьТекущиеЦены(ИмяКолонки, СтрокаСпискаНоменклатуры.Ссылка, СтрокаСпискаНоменклатуры.Характеристика);			
			ЦенаВВалютеУпрУчета     		= ТекущиеЦены.ЦенаВВалютеУпрУчета;
			ЦенаВВалютеРеглУчета    		= ТекущиеЦены.ЦенаВВалютеРеглУчета;
			ЦенаВходнаяВВалютеРеглУчета		= ТекущиеЦены.ЦенаВходнаяВВалютеРеглУчета; 
			ЦенаВходнаяВВалютеУпрУчета 		= ТекущиеЦены.ЦенаВходнаяВВалютеУпрУчета;
			КурсУпр							= ТекущиеЦены.КурсУпр;
			КурсРегл                		= ТекущиеЦены.КурсРегл;
			ВидЦены					        = ТекущиеЦены.ВидЦены;
			
			СтрокаСпискаНоменклатуры[ИмяКолонки] = ЗначениеДляЗаполнения;
			
			Если ЦенаВВалютеРеглУчета = 0 ИЛИ ЦенаВходнаяВВалютеРеглУчета = 0 Тогда
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = 9999999999;
			Иначе
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцент] = (СтрокаСпискаНоменклатуры[ИмяКолонки] / ЦенаВходнаяВВалютеРеглУчета - 1) * 100;
			КонецЕсли;
			
			ЦенаУпрУч = СтрокаСпискаНоменклатуры[ИмяКолонки] * (КурсРегл / КурсУпр);
			ЦенаРеглУч = СтрокаСпискаНоменклатуры[ИмяКолонки];
	
			СтруктураЦен = ЗаокруглитьЦены(ЦенаУпрУч, ЦенаРеглУч, ВидЦены);
						
			СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]  		= СтруктураЦен.ЦенаУпрУч;
			СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен] = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен            = Истина;
			
			РасчитатьЗаработокРозница(СтрокаСпискаНоменклатуры,ИмяКолонки); 	

			
		ИначеЕсли Найти(ИмяКолонки, "Процент") <> 0 Тогда
			
			ИмяКолонкиУпрУч				= СтрЗаменить(ИмяКолонки,"Процент", "ВидЦены_УпрУч");
			ИмяКолонкиРеглУч			= СтрЗаменить(ИмяКолонки,"Процент", "ВидЦены_РеглУч");
			ИмяКолонкиПроцентИзменен    = СтрЗаменить(ИмяКолонки,"Процент", "ПроцентИзменен_");
			
			Если СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч] = 0 ИЛИ СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущиеЦены 				= ПолучитьТекущиеЦены(ИмяКолонкиУпрУч, СтрокаСпискаНоменклатуры.Ссылка, СтрокаСпискаНоменклатуры.Характеристика);			
			ЦенаВВалютеУпрУчета     	= ТекущиеЦены.ЦенаВВалютеУпрУчета;
			ЦенаВВалютеРеглУчета    	= ТекущиеЦены.ЦенаВВалютеРеглУчета;
			ЦенаВходнаяВВалютеРеглУчета	= ТекущиеЦены.ЦенаВходнаяВВалютеРеглУчета; 
			ЦенаВходнаяВВалютеУпрУчета 	= ТекущиеЦены.ЦенаВходнаяВВалютеУпрУчета;
			ВидЦены						= ТекущиеЦены.ВидЦены;
			
			СтрокаСпискаНоменклатуры[ИмяКолонки] = ЗначениеДляЗаполнения;
			
			Если ЦенаВВалютеУпрУчета = 0 ИЛИ ЦенаВВалютеРеглУчета = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить цену на определенный процент, цена в базе не установлена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				СтрокаСпискаНоменклатуры[ИмяКолонки]				= 0;
				СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]  			= 0;
				СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч] 			= 0;
				СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен] 	= Ложь;
				Возврат;
			КонецЕсли;	
			
			ЦенаУпрУч = ЦенаВходнаяВВалютеУпрУчета * (1 + СтрокаСпискаНоменклатуры[ИмяКолонки] / 100);
			ЦенаРеглУч = ЦенаВходнаяВВалютеРеглУчета * (1 + СтрокаСпискаНоменклатуры[ИмяКолонки] / 100);
	
			СтруктураЦен = ЗаокруглитьЦены(ЦенаУпрУч, ЦенаРеглУч, ВидЦены);
						
			СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]  		= СтруктураЦен.ЦенаУпрУч;

						
			СтрокаСпискаНоменклатуры[ИмяКолонкиУпрУч]			= СтруктураЦен.ЦенаУпрУч;	
			СтрокаСпискаНоменклатуры[ИмяКолонкиРеглУч]			= СтруктураЦен.ЦенаРеглУч;
			СтрокаСпискаНоменклатуры[ИмяКолонкиПроцентИзменен]  = ?(СтрокаСпискаНоменклатуры[ИмяКолонки] = 0, Ложь, Истина);
			СтрокаСпискаНоменклатуры.ЭлементИзменен             = ?(СтрокаСпискаНоменклатуры[ИмяКолонки] = 0, Ложь, Истина);
			
			РасчитатьЗаработокРозница(СтрокаСпискаНоменклатуры,ИмяКолонкиРеглУч); 
		ИначеЕсли Найти(ИмяКолонки, "КПП_Розница") <> 0 Тогда
			
			ПроцентКПП = ПересчитатьПроцентКПП(ЗначениеДляЗаполнения,СтрокаСпискаНоменклатуры.Ссылка,ИмяКолонки);
			СтрокаСпискаНоменклатуры[ИмяКолонки+"_Процент"] = ПроцентКПП;
			
			//http://r.ktc-ua.com/issues/5134
			//СреднийЗаработок = СтрЗаменить(Элемент.Имя,"КПП_","СредЗаработок");
			СреднийЗаработок = "ЗаработокРозница";
			//ЦенаРасчета 	 = "ВидЦены_РеглУч_8bdf84fc_404c_11e0_9f98_001517115d5";//Розница
			
			СтруктураДанных = ПолучитьЦенуТовара(СтрокаСпискаНоменклатуры.Ссылка,ИмяКолонки,ПроцентКПП);
			Если СтруктураДанных.РасчетЗП тогда
				Если ПустаяСтрока(СтруктураДанных.ИмяКолонки) тогда
					СтрокаСпискаНоменклатуры[СреднийЗаработок] = СтруктураДанных.Значение* ПроцентКПП/100;
				Иначе
					СтрокаСпискаНоменклатуры[СреднийЗаработок] = СтрокаСпискаНоменклатуры[СтруктураДанных.ИмяКолонки]* ПроцентКПП/100;
				КонецЕсли;
			Иначе 
				СтрокаСпискаНоменклатуры[СреднийЗаработок] = 0;
			КонецЕсли;
			ИмяЭлементИзменен 							= "ЭлементИзменен_" + ИмяКолонки;
			СтрокаСпискаНоменклатуры[ИмяКолонки]    	= ЗначениеДляЗаполнения;
			СтрокаСпискаНоменклатуры[ИмяЭлементИзменен] = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен		= Истина;
	
		Иначе
			
			ИмяЭлементИзменен 							= "ЭлементИзменен_" + ИмяКолонки;
			СтрокаСпискаНоменклатуры[ИмяКолонки]    	= ЗначениеДляЗаполнения;
			СтрокаСпискаНоменклатуры[ИмяЭлементИзменен] = Истина;
			СтрокаСпискаНоменклатуры.ЭлементИзменен		= Истина;
			
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры // ВыполнитьЗаполнениеКолонкиСпискаНоменклатуры() 

&НаКлиенте 
Процедура ОбработатьОткрытиеОтчета(Номенклатура, Характеристика)
	ПараметрыФормы = Новый Структура;  
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	ФормаОчета = ПолучитьФорму("ВнешняяОбработка.Ирокез.Форма.ОтчетПоОстаткам", ПараметрыФормы);	
	ОткрытьФорму(ФормаОчета);		
КонецПроцедуры

&НаСервере 
Функция ПересчитатьПроцентКПП(КПП,Номенклатура,ИмяКолонки)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяКолонки="КПП_Розница" Тогда 
		ИмяРегистра= "КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница";
	Иначе
		ИмяРегистра= "КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыОпт";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Значение
	               |ИЗ
	               |	РегистрСведений."+ИмяРегистра+".СрезПоследних(
	               |			&ТекущаяДата,
	               |			КПП = &КПП
	               |				И ВидНоменклатуры = &ВидНоменклатуры)";
				   
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("КПП",КПП);
	Запрос.УстановитьПараметр("ВидНоменклатуры",Номенклатура.ВидНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(),Выборка.Значение,0) 	

КонецФункции // ()

&НаСервере 
Функция ПолучитьЦенуТовара(Номенклатура,ИмяКолонки,КПП_Процент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗП 			= Истина;
	ИмяКолонкиРозница  	= "";
	
	//Если ИмяКолонки="КПП_Розница" Тогда 
	//	//   розница
	ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85"));  //розница
	//Иначе
	/////опт
	//	ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("")); //опт
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	ЦеныНоменклатурыСрезПоследних.Валюта
	               |ПОМЕСТИТЬ КешЦена
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&ТекущаяДата,
	               |			Номенклатура = &Номенклатура
	               |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА КурсыВалютСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА КешЦена.Цена * (ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1))
	               |		ИНАЧЕ КешЦена.Цена
	               |	КОНЕЦ КАК Значение
	               |ИЗ
	               |	КешЦена КАК КешЦена
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаУпрУч) КАК КурсыВалютСрезПоследних
	               |ПО КешЦена.Валюта = КурсыВалютСрезПоследних.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыОрганизацийОстатки.Номенклатура
	               |ИЗ
	               |	РегистрНакопления.ТоварыОрганизаций.Остатки(&ТекущаяДата, Номенклатура = &Номенклатура) КАК ТоварыОрганизацийОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ALPS_АктуальностьНоменклатурыСрезПоследних.Номенклатура
	               |ИЗ
	               |	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(&ТекущаяДата, Номенклатура = &Номенклатура) КАК ALPS_АктуальностьНоменклатурыСрезПоследних
	               |ГДЕ
	               |	ALPS_АктуальностьНоменклатурыСрезПоследних.Актуально";
				   
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("ВалютаУпрУч",Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.УстановитьПараметр("ВидЦены",ВидЦены);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[2].Пустой() Тогда
		РасчетЗП = Ложь;
	КонецЕсли;
	Выборка = РезультатЗапроса[1].Выбрать();
	
	СтруктураПоиска = Новый Структура("ВидЦены", ВидЦены);
	РезультатПоиска = СписокВидовЦен.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		ИмяКолонкиРозница = РезультатПоиска[0].ИмяКолонкиРегл;
	КонецЕсли;
	
	Возврат Новый Структура("Значение, РасчетЗП, ИмяКолонки",?(Выборка.Следующий(),Выборка.Значение,0),РасчетЗП, ИмяКолонкиРозница);
	
КонецФункции // ПересчитатьСреднийЗаработок()

//http://r.ktc-ua.com/issues/5134
&НаСервере
Процедура РасчитатьЗаработокРозница(ТекущиеДанные,ИмяКолонки)
	ПроцентКПП = ТекущиеДанные["КПП_Розница_Процент"];
	СреднийЗаработок = "ЗаработокРозница";
	ТекущиеДанные[СреднийЗаработок] = ТекущиеДанные[ИмяКолонки]* ПроцентКПП/100;
КонецПроцедуры // ()


#Область ОкругленияЦены  
// http://r.ktc-ua.com/issues/5131 
&НаСервереБезКонтекста
Функция ЗаокруглитьЦены(ЦенаУпрУч,ЦенаРеглУч,ВидЦены,ИзменияЦеныУпрУч=Истина,ИзменияЦеныРеглУч=Истина)
	СтруктураЦен = Новый Структура("ЦенаУпрУч,ЦенаРеглУч",ЦенаУпрУч,ЦенаРеглУч);
	//ИдентификаторЦены = УникальныйИдентификаторИзСтроки("", ИмяКолонки);
	//ВидЦены			  = Справочники.ВидыЦен.ПолучитьСсылку(ИдентификаторЦены);
	ВалютаУпрУч 	  = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если  ИзменияЦеныУпрУч И НЕ ИзменияЦеныРеглУч Тогда
		Если ВидЦены.ВалютаЦены = ВалютаУпрУч Тогда
			 Возврат  СтруктураЦен;
		 КонецЕсли;
	ИначеЕсли  НЕ ИзменияЦеныУпрУч И  ИзменияЦеныРеглУч Тогда   	 
		 Если НЕ ВидЦены.ВалютаЦены = ВалютаУпрУч Тогда
			 Возврат  СтруктураЦен;
		 КонецЕсли;
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросЗаокругленияЦеныРасчета();				  
	Запрос.УстановитьПараметр("ВидЦены",ВидЦены);
	Если ВидЦены.ВалютаЦены = Константы.ВалютаУправленческогоУчета.Получить() Тогда
	    РасчетнаяЦена = ЦенаУпрУч;
	Иначе
		РасчетнаяЦена = ЦенаРеглУч;
	КонецЕсли;
	Запрос.УстановитьПараметр("РасчетнаяЦена",РасчетнаяЦена);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат  СтруктураЦен;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РасчетнаяЦена = РассчитатьРезультат(РасчетнаяЦена,Выборка.ТочностьОкругления,Выборка.ОкруглятьВБольшуюСторону,Выборка.ПсихологическоеОкругление);	
	КонецЦикла;
	
	Если ВидЦены.ВалютаЦены = Константы.ВалютаУправленческогоУчета.Получить() Тогда
	    СтруктураЦен.ЦенаУпрУч = РасчетнаяЦена;
	Иначе
		СтруктураЦен.ЦенаРеглУч = РасчетнаяЦена;
	КонецЕсли;

	Возврат СтруктураЦен;
КонецФункции // ЗаокруглитьЦены(ЦенаУпрУч,ЦенаРеглУч,ИмяКолонки)

// http://r.ktc-ua.com/issues/5131
&НаСервереБезКонтекста
Функция ПолучитьЗапросЗаокругленияЦеныРасчета()

	ТекстЗапроса ="ВЫБРАТЬ
	              |	ПравилаН.НижняяГраницаДиапазонаЦен КАК НижняяГраница,
	              |	МИНИМУМ(ЕСТЬNULL(ПравилаВ.НижняяГраницаДиапазонаЦен, 0)) КАК ВерхняяГраница,
	              |	ПравилаН.ТочностьОкругления,
	              |	ПравилаН.ПсихологическоеОкругление,
	              |	ПравилаН.Ссылка.ОкруглятьВБольшуюСторону
	              |ПОМЕСТИТЬ Cache_Округление
	              |ИЗ
	              |	Справочник.ВидыЦен.ПравилаОкругленияЦены КАК ПравилаН
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ПравилаОкругленияЦены КАК ПравилаВ
	              |		ПО (ПравилаВ.Ссылка = ПравилаН.Ссылка)
	              |			И (ПравилаВ.НижняяГраницаДиапазонаЦен > ПравилаН.НижняяГраницаДиапазонаЦен)
	              |ГДЕ
	              |	ПравилаН.Ссылка = &ВидЦены
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ПравилаН.НижняяГраницаДиапазонаЦен,
	              |	ПравилаН.ТочностьОкругления,
	              |	ПравилаН.ПсихологическоеОкругление,
	              |	ПравилаН.Ссылка.ОкруглятьВБольшуюСторону
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	НижняяГраница,
	              |	ВерхняяГраница
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	&ВидЦены,
	              |	&РасчетнаяЦена
	              |ПОМЕСТИТЬ ЦеныНоменклатуры
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЦеныНоменклатуры.ВидЦены,
	              |	ЕСТЬNULL(Cache_Округление.ТочностьОкругления, 0.01) КАК ТочностьОкругления,
	              |	ЕСТЬNULL(Cache_Округление.ПсихологическоеОкругление, 0) КАК ПсихологическоеОкругление,
	              |	ЕСТЬNULL(Cache_Округление.ОкруглятьВБольшуюСторону, ЛОЖЬ) КАК ОкруглятьВБольшуюСторону
	              |ИЗ
	              |	ЦеныНоменклатуры КАК ЦеныНоменклатуры
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Cache_Округление КАК Cache_Округление
	              |		ПО ЦеныНоменклатуры.РасчетнаяЦена >= Cache_Округление.НижняяГраница
	              |			И (Cache_Округление.ВерхняяГраница > ЦеныНоменклатуры.РасчетнаяЦена
	              |				ИЛИ Cache_Округление.ВерхняяГраница = 0)";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьЗапросЗаокругленияЦеныРасчета()

// http://r.ktc-ua.com/issues/5131
&НаСервереБезКонтекста
Функция РассчитатьРезультат(ПримерЧисло, ТочностьОкругления, ОкруглятьВБольшуюСторону, ПсихологическоеОкругление) Экспорт
	
	Если ЗначениеЗаполнено(ТочностьОкругления) Тогда
		ПримерЧисло = ОкруглитьЦену(ПримерЧисло, ТочностьОкругления, ОкруглятьВБольшуюСторону);
	КонецЕсли;
	
	Возврат ПрименитьПсихологическоеОкругление(ПримерЧисло, ПсихологическоеОкругление);
	
КонецФункции

// http://r.ktc-ua.com/issues/5131
&НаСервереБезКонтекста
Функция ОкруглитьЦену(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону)

	Перем Результат;
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервалов = Число / ТочностьОкругления;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
		
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлится до 0.4
			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлится до 0.35,
			// а 0.376 до 0.4
			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// http://r.ktc-ua.com/issues/5131
&НаСервереБезКонтекста
Функция ПрименитьПсихологическоеОкругление(Число, ПсихологическоеОкругление)
	
	Если ПсихологическоеОкругление = 0 Тогда
		Возврат Число;
	Иначе
	
		Разрядность         = РазрядностьПсихологическогоОкругления(ПсихологическоеОкругление);
		РезультатОкругления = Окр(Число, -1 * Разрядность) - (Pow(10, Разрядность) - ПсихологическоеОкругление);
		Возврат ?(РезультатОкругления < Число, РезультатОкругления, Число);
		
	КонецЕсли;
		
КонецФункции

// http://r.ktc-ua.com/issues/5131
&НаСервереБезКонтекста
Функция РазрядностьПсихологическогоОкругления(ПсихологическоеОкругление)
	
	Разрядность = 0;
	
	Пока ПсихологическоеОкругление * Pow(10, Разрядность)     > 1 Цикл Разрядность = Разрядность - 1; КонецЦикла;	
	Пока ПсихологическоеОкругление * Pow(10, Разрядность + 1) < 1 Цикл Разрядность = Разрядность + 1; КонецЦикла;
	
	Возврат -1 * Разрядность;
	
КонецФункции 

&НаКлиенте
Процедура ПерейтиНаB2BПортал(Команда)
	ЗапуститьПриложение("http://www.order-b2b.com");	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтKTC(Команда)
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаСайт = ПолучитьСсылкуНаСайт(ТекущиеДанные.Ссылка);
	ЗапуститьПриложение(СсылкаНаСайт);
	
КонецПроцедуры

Функция ПолучитьСсылкуНаСайт(Номенклатура)

	Возврат "http://www.ktc-ua.com/id/" + Формат(Номенклатура.Код, "ЧГ=0");

КонецФункции // ПолучитьСсылкуНаСайт()


#КонецОбласти


#КонецОбласти