
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_РеквизитВидНоменклатурыНаФорме");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаНоменклатуры");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСписокКолонок");
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция Тест_РеквизитВидНоменклатурыНаФорме() Экспорт
	
	Попытка
		РеквизитВидНоменклатуры = ЭтаФорма.ВидНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитВидНоменклатуры), Тип("СправочникСсылка.ВидыНоменклатуры"), НСтр("ru='#4796. Реквизит «ВидНоменклатуры» должен иметь тип «СправочникСсылка.ВидыНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементВидНоменклатуры = Элементы.Найти("ВидНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементВидНоменклатуры, Неопределено, НСтр("ru='#4796. На форме должен быть элемент формы «ВидНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции // Тест_РеквизитВидНоменклатурыНаФорме()

&НаКлиенте
Функция Тест_ПроверкаНаличияКомандыИзменитьИзмененныеПозиции() Экспорт
	
	КомандаИзменитьИзмененныеПозиции = Команды.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаИзменитьИзмененныеПозиции), Тип("КомандаФормы"), НСтр("ru='#4796. На форме обработки должна быть команда «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементКнопка = Элементы.Найти("ИзменитьИзмененныеПозиции");
	ЮнитТест.ПроверитьНеРавенство(ЭлементКнопка, Неопределено, НСтр("ru='#4796. На форме обработки должен быть элемент формы «Изменить измененные позиции».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецФункции // Тест_ПроверкаНаличияКомандыИзменитИзмененныеПозиции()

&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаНоменклатуры() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокНоменклатуры;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокНоменклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокНоменклатуры» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокНоменклатуры");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокНоменклатуры»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()
 
&НаКлиенте
Функция Тест_ПроверкаНаличияСписокКолонок() Экспорт

	Попытка
		РеквизитСписокКолонок = ЭтаФорма.СписокКолонок;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#4796. На форме обработки должен быть реквизит «СписокКолонок».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокКолонок), Тип("ДанныеФормыКоллекция"), НСтр("ru='#4796. Реквизит «СписокКолонок» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокКолонок");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#4796. На форме должен быть элемент «СписокКолонок»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНастроек()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СоздатьРеквизитыИЭлементыФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
	
	КнопкаНастройки = Элементы.Настройки;
	ПометкаКнопки   = КнопкаНастройки.Пометка;
	
	Если ПометкаКнопки Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокНоменклатуры;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	КонецЕсли;
	
	КнопкаНастройки.Пометка = Не ПометкаКнопки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы()
	МассивКолонок = РеквизитФормыВЗначение("Объект").ПолучитьМассивКолонок();
 	СоздатьРеквизитыФормы(МассивКолонок);
	СоздатьЭлементыФормы(МассивКолонок);
КонецПроцедуры // СоздатьРеквизитыИЭлементыФормы()
 
&НаСервере
Процедура СоздатьРеквизитыФормы(МассивКолонок)

	МассивРеквизитов = Новый Массив;
	
	Для каждого Колонка Из МассивКолонок Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип, "СписокНоменклатуры"));    			
	КонецЦикла; 
	
	ИзменитьРеквизиты(МассивРеквизитов);

КонецПроцедуры // СоздатьРеквизитыФормы()

&НаСервере
Процедура СоздатьЭлементыФормы(МассивКолонок)

	ЭлементСписокНоменклатуры = Элементы.СписокНоменклатуры;
	
	Для каждого Колонка Из МассивКолонок Цикл
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", Колонка.Имя);	
		ПараметрыЭлемента.Вставить("ПутьКДанным", "СписокНоменклатуры." + Колонка.Имя);
		ПараметрыЭлемента.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Ширина", 10);
		ПараметрыЭлемента.Вставить("Заголовок", Колонка.Заголовок);
		git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ЭлементСписокНоменклатуры);
	КонецЦикла;

КонецПроцедуры // СоздатьЭлементыФормы()

#КонецОбласти