#Область ИнтерфейсАвтоматическихТестов&НаКлиентеПерем ЮнитТест;&НаКлиентеФункция ПолучитьСписокТестов(ЮнитТестирование) Экспорт		ЮнитТест 		= ЮнитТестирование;	СпиcокТестов 	= Новый Массив;	СпиcокТестов.Добавить("Тест_ПроверитьВалидностьЗапроса");	СпиcокТестов.Добавить("Тест_ПроверитьФормированияОтчета");	Возврат СпиcокТестов;	КонецФункции&НаКлиентеПроцедура Тест_ПроверитьВалидностьЗапроса() Экспорт   			ТекстЗапроса = ПолучитьТекстЗапроса();	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));	Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса);КонецПроцедуры&НаСервереПроцедура Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса) Экспорт		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;		ИсточникДанных 					  = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 	ИсточникДанных.Имя                = "ИсточникДанных";	ИсточникДанных.СтрокаСоединения   = "";	ИсточникДанных.ТипИсточникаДанных = "Local";		НаборДанных 							 = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));	НаборДанных.Имя            				 = "НаборДанных";	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;	НаборДанных.Запрос 						 = ТекстЗапроса;		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)); КонецПроцедуры // Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса)&НаКлиентеПроцедура Тест_ПроверитьФормированияОтчета() Экспорт   		СформироватьОтчетНаСервере();КонецПроцедуры#КонецОбласти#Область ОбработчикиСобытий&НаСервереПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	Если Параметры.Свойство("АвтоТест") Тогда		Возврат;		КонецЕсли;	Если Параметры.Свойство("Номенклатура") Тогда		Номенклатура = Параметры.Номенклатура;		СформироватьОтчетНаСервере();	КонецЕсли; КонецПроцедуры#КонецОбласти#Область ОбработчикиКомандФормы// Формирует отчет по остаткам на складах на клиенте//// Параметры://&НаКлиентеПроцедура СформироватьОтчет(Команда)		СформироватьОтчетНаСервере();	КонецПроцедуры#КонецОбласти#Область СлужебныеПроцедурыИФункции// Формирует отчет по остаткам на складах на сервере//// Параметры://&НаСервереПроцедура СформироватьОтчетНаСервере()		УстановитьПривилегированныйРежим(Истина);		Результат.Очистить();		Запрос 			= Новый Запрос;	Запрос.Текст 	= ПолучитьТекстЗапроса();		Если Не Номенклатура.Пустая() Тогда				Запрос.УстановитьПараметр("Номенклатура", Номенклатура);			КонецЕсли;		РезультатПакета = Запрос.ВыполнитьПакет();	СписокНоменклатуры = РезультатПакета[РезультатПакета.ВГраница()].Выгрузить();	ВывестиРезультатыЗапроса(СписокНоменклатуры);	КонецПроцедуры// Текст запроса остатки товаров на складах //// Параметры://  //Возвращаемое значение://	Строка 			- текст запроса остатки товаров// &НаСервереФункция ПолучитьТекстЗапроса()		ТекстЗапроса =	             	"ВЫБРАТЬ	|	ТоварыНаСкладахОстатки.Номенклатура,	|	ТоварыНаСкладахОстатки.Склад	|ПОМЕСТИТЬ Cache_Номенклатура	|ИЗ	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ТоварыНаСкладахОстатки	|	|ОБЪЕДИНИТЬ	|	|ВЫБРАТЬ	|	ТоварыКПоступлениюОстатки.Номенклатура,	|	ТоварыКПоступлениюОстатки.Склад	|ИЗ	|	РегистрНакопления.ТоварыКПоступлению.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ТоварыКПоступлениюОстатки	|	|ОБЪЕДИНИТЬ ВСЕ	|	|ВЫБРАТЬ	|	ОбеспечениеЗаказовОстатки.Номенклатура,	|	ОбеспечениеЗаказовОстатки.Назначение.Заказ.Склад	|ИЗ	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ОбеспечениеЗаказовОстатки	|	|ИНДЕКСИРОВАТЬ ПО	|	ТоварыНаСкладахОстатки.Номенклатура,	|	ТоварыНаСкладахОстатки.Склад	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ	|	ЗаказыКлиентовОстатки.Номенклатура,	|	ЗаказыКлиентовОстатки.Склад,	|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК Заказ,	|	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ЗаказаноОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток, 0) КАК ПодОбеспечение,	|	ЗаказыКлиентовОстатки.ЗаказаноОстаток - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ЗаказаноОстаток, 0) - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток, 0) КАК ПодРезерв	|ПОМЕСТИТЬ ЗаказыКлиентов	|ИЗ	|	РегистрНакопления.ЗаказыКлиентов.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ЗаказыКлиентовОстатки	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки КАК ОбеспечениеЗаказовОстатки	|		ПО ЗаказыКлиентовОстатки.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура	|			И ЗаказыКлиентовОстатки.Склад = ОбеспечениеЗаказовОстатки.Склад	|			И ЗаказыКлиентовОстатки.ЗаказКлиента = ОбеспечениеЗаказовОстатки.Назначение.Заказ	|ГДЕ	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ	|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение КАК Заказ,	|	ЗаказыНаПеремещениеОстатки.Номенклатура КАК Номенклатура,	|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение.СкладОтправитель КАК Склад,	|	СУММА(ВЫБОР	|			КОГДА ЗаказНаПеремещениеТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)	|				ТОГДА ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток	|			ИНАЧЕ 0	|		КОНЕЦ) КАК ПодРезерв,	|	СУММА(ВЫБОР	|			КОГДА ЗаказНаПеремещениеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)	|				ТОГДА ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток	|			ИНАЧЕ 0	|		КОНЕЦ) КАК ПодОбеспечение	|ПОМЕСТИТЬ ЗаказыНаПеремещение	|ИЗ	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ЗаказыНаПеремещениеОстатки	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары	|		ПО ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = ЗаказНаПеремещениеТовары.Ссылка	|			И ЗаказыНаПеремещениеОстатки.Номенклатура = ЗаказНаПеремещениеТовары.Номенклатура	|			И ЗаказыНаПеремещениеОстатки.КодСтроки = ЗаказНаПеремещениеТовары.КодСтроки	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ОбеспечениеЗаказовОстатки	|		ПО ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение = ОбеспечениеЗаказовОстатки.Назначение.Заказ	|			И ЗаказыНаПеремещениеОстатки.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура	|	|СГРУППИРОВАТЬ ПО	|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение,	|	ЗаказыНаПеремещениеОстатки.Номенклатура,	|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение.СкладОтправитель	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ	|	ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура,	|	ЗаказыНаВнутреннееПотреблениеОстатки.Склад,	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление КАК Заказ,	|	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ЗаказаноОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток, 0) КАК ПодОбеспечение,	|	ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказаноОстаток - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток, 0) КАК ПодРезерв	|ПОМЕСТИТЬ ЗаказыНаВнутреннееПотребление	|ИЗ	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ЗаказыНаВнутреннееПотреблениеОстатки	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ОбеспечениеЗаказовОстатки	|		ПО ЗаказыНаВнутреннееПотреблениеОстатки.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура	|			И ЗаказыНаВнутреннееПотреблениеОстатки.ЗаказНаВнутреннееПотребление = ОбеспечениеЗаказовОстатки.Назначение.Заказ	|			И ЗаказыНаВнутреннееПотреблениеОстатки.Склад = ОбеспечениеЗаказовОстатки.Склад	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ	|	ЗаказыНаСборкуОстатки.Номенклатура,	|	ЗаказыНаСборкуОстатки.ЗаказНаСборку.Склад КАК Склад,	|	ЗаказыНаСборкуОстатки.ЗаказНаСборку КАК Заказ,	|	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ЗаказаноОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток, 0) КАК ПодОбеспечение,	|	ЗаказыНаСборкуОстатки.ЗаказаноОстаток - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) - ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток, 0) КАК ПодРезерв	|ПОМЕСТИТЬ ЗаказыНаСборку	|ИЗ	|	РегистрНакопления.ЗаказыНаСборку.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ЗаказыНаСборкуОстатки	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК ОбеспечениеЗаказовОстатки	|		ПО ЗаказыНаСборкуОстатки.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура	|			И ЗаказыНаСборкуОстатки.ЗаказНаСборку = ОбеспечениеЗаказовОстатки.Назначение.Заказ	|			И ЗаказыНаСборкуОстатки.ЗаказНаСборку.Склад = ОбеспечениеЗаказовОстатки.Склад	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ РАЗЛИЧНЫЕ	|	СпрНоменклатура.Номенклатура,	|	СпрНоменклатура.Склад,	|	ЕСТЬNULL(Остатки.ВНаличииОстаток, 0) - ЕСТЬNULL(Остатки.ВРезервеОстаток, 0) КАК СвободныйОстаток,	|	ЕСТЬNULL(Остатки.ВРезервеОстаток, 0) + ЕСТЬNULL(Обеспечение.НаличиеСоСкладаОстаток, 0) КАК Резерв,	|	ЕСТЬNULL(Остатки.ВНаличииОстаток, 0) + ЕСТЬNULL(Обеспечение.НаличиеСоСкладаОстаток, 0) КАК Всего,	|	ЕСТЬNULL(Перемещения.КПоступлениюОстаток, 0) КАК ВПеремещениях,	|	ЕСТЬNULL(ЗаказыПоставщику.КПоступлениюОстаток, 0) КАК ВЗаказахПоставщику,	|	ЕСТЬNULL(Остатки.ВНаличииОстаток, 0) - ЕСТЬNULL(Остатки.ВРезервеОстаток, 0) + ЕСТЬNULL(Перемещения.КПоступлениюОстаток, 0) + ЕСТЬNULL(ЗаказыПоставщику.КПоступлениюОстаток, 0) КАК ПрогнозОстаток,	|	ЕСТЬNULL(Обеспечение.КЗаказуОстаток, 0) + ЕСТЬNULL(Обеспечение.ЗаказаноОстаток, 0) + ЕСТЬNULL(Обеспечение.НаличиеПодЗаказОстаток, 0) КАК Обеспечение,	|	0 КАК ПодОбеспечение,	|	0 КАК ПодРезерв,	|	NULL КАК Заказ	|ИЗ	|	Cache_Номенклатура КАК СпрНоменклатура	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК Остатки	|		ПО (Остатки.Номенклатура = СпрНоменклатура.Номенклатура)	|			И (Остатки.Склад = СпрНоменклатура.Склад)	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(	|				,	|				ТИПЗНАЧЕНИЯ(ДокументПоступления) <> ТИП(Документ.ЗаказПоставщику)	|			    " + ?(Номенклатура.Пустая(), "", " И  Номенклатура = &Номенклатура") + ") КАК Перемещения	|		ПО (Перемещения.Номенклатура = СпрНоменклатура.Номенклатура)	|			И (Перемещения.Склад = СпрНоменклатура.Склад)	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(	|				,	|				ТИПЗНАЧЕНИЯ(ДокументПоступления) = ТИП(Документ.ЗаказПоставщику)	|				" + ?(Номенклатура.Пустая(), "", "	И  Номенклатура = &Номенклатура") + ") КАК ЗаказыПоставщику	|		ПО (ЗаказыПоставщику.Номенклатура = СпрНоменклатура.Номенклатура)	|			И (ЗаказыПоставщику.Склад = СпрНоменклатура.Склад)	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,  " + ?(Номенклатура.Пустая(), "", "Номенклатура = &Номенклатура") + ") КАК Обеспечение	|		ПО (Обеспечение.Номенклатура = СпрНоменклатура.Номенклатура)	|			И СпрНоменклатура.Склад = Обеспечение.Склад	|	|ОБЪЕДИНИТЬ ВСЕ	|	|ВЫБРАТЬ	|	ЗаказыНаСборку.Номенклатура,	|	ЗаказыНаСборку.Склад,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	ЗаказыНаСборку.ПодОбеспечение,	|	ЗаказыНаСборку.ПодРезерв,	|	ЗаказыНаСборку.Заказ	|ИЗ	|	ЗаказыНаСборку КАК ЗаказыНаСборку	|	|ОБЪЕДИНИТЬ ВСЕ	|	|ВЫБРАТЬ	|	ЗаказыКлиентов.Номенклатура,	|	ЗаказыКлиентов.Склад,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	ЗаказыКлиентов.ПодОбеспечение,	|	ЗаказыКлиентов.ПодРезерв,	|	ЗаказыКлиентов.Заказ	|ИЗ	|	ЗаказыКлиентов КАК ЗаказыКлиентов	|	|ОБЪЕДИНИТЬ ВСЕ	|	|ВЫБРАТЬ	|	ЗаказыНаВнутреннееПотребление.Номенклатура,	|	ЗаказыНаВнутреннееПотребление.Склад,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	ЗаказыНаВнутреннееПотребление.ПодОбеспечение,	|	ЗаказыНаВнутреннееПотребление.ПодРезерв,	|	ЗаказыНаВнутреннееПотребление.Заказ	|ИЗ	|	ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление	|	|ОБЪЕДИНИТЬ ВСЕ	|	|ВЫБРАТЬ	|	ЗаказыНаПеремещение.Номенклатура,	|	ЗаказыНаПеремещение.Склад,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	0,	|	ЗаказыНаПеремещение.ПодОбеспечение,	|	ЗаказыНаПеремещение.ПодРезерв,	|	ЗаказыНаПеремещение.Заказ	|ИЗ	|	ЗаказыНаПеремещение КАК ЗаказыНаПеремещение";			Возврат ТекстЗапроса;	КонецФункции//Выводит результат запроса по остатках товаров на складах в СКД//// Параметры:// СписокНоменклатуры - ТаблицаЗначений - таблица из результата запроса по остатках товаров на складах&НаСервереПроцедура ВывестиРезультатыЗапроса(СписокНоменклатуры)		ВнешниеНаборыДанных = Новый Структура;	ВнешниеНаборыДанных.Вставить("СписокНоменклатуры", СписокНоменклатуры);		ОбъектОбработки 		= РеквизитФормыВЗначение("Объект");	СхемаКомпоновкиДанных   = ОбъектОбработки.ПолучитьМакет("СКД_ОстаткиТоваров");	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");		Настройки 					= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;		КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;	ДанныеРасшифровки			= Новый ДанныеРасшифровкиКомпоновкиДанных;	МакетКомпоновки				= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);		ПроцессорКомпоновкиДанны    = Новый ПроцессорКомпоновкиДанных;	ПроцессорКомпоновкиДанны.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);		ПроцессорВывода				= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;	ПроцессорВывода.УстановитьДокумент(Результат);	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанны);	КонецПроцедуры#КонецОбласти