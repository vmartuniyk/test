
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	Возврат СписокТестов;
	
КонецФункции   


 
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	Возврат СтроковыйИдентификатор;	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

Функция ПолучитьСтруктуруКолонок() Экспорт
	
	Результат = Новый Структура("СписокВидовЦен, СписокВидовЦенПоставщика, СписокДопСвойства", Новый Массив, Новый Массив, Новый Массив);
	Настройки = ПолучитьНастройки();
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;

	ПолучитьСтруктуруКолонокВидовЦен(Результат,	Настройки);
	ПолучитьСтруктуруКолонокЦенПоставщика(Результат, Настройки);
	ПолучитьСтруктуруКолонокДопСвойства(Результат, Настройки);

	Возврат Результат;

КонецФункции // ПолучитьСписокКолонок()

Процедура ЗагрузитьТаблицуНоменклатуры(ФормаОбработки) Экспорт
	
	СтруктураНастроек = ПолучитьНастройки();
	
	Если ФормаОбработки.ВидНоменклатуры.Пустая() Тогда 
		ФормаОбработки.СписокНоменклатуры.Очистить();
	Иначе
		
		СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦен");
		СписокВидовЦенПоставщика = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦенПоставщика");
		СписокДопСвойства		 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокДопСвойства");
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ТекстЗапросаВыгрузкиНоменклатуры(СтруктураНастроек);
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ФормаОбработки.ВидНоменклатуры);
		Запрос.УстановитьПараметр("НачалоДня", 	НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ВалютаРеглУч", Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВалютаУпрУч",Константы.ВалютаУправленческогоУчета.Получить());
		Запрос.УстановитьПараметр("СписокВидовЦенПоставщика",СписокВидовЦенПоставщика);
		Запрос.УстановитьПараметр("СписокВидовЦен", СписокВидовЦен);
		Запрос.УстановитьПараметр("СписокДопСвойства",СписокДопСвойства);
		
		Для Каждого ВидЦены Из СписокВидовЦен Цикл                                            
			Запрос.УстановитьПараметр("ВидЦены" + ПолучитьСтрокуИдентификатораСсылки(ВидЦены), ВидЦены);
		КонецЦикла;
		
		Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл    
			Запрос.УстановитьПараметр("ВидЦеныПоставщика" + ПолучитьСтрокуИдентификатораСсылки(ЦенаПоставщика), ЦенаПоставщика);
		КонецЦикла;
		
		Для Каждого ДопСвойство Из СписокДопСвойства Цикл  
			Запрос.УстановитьПараметр("ДопСвойство" + ПолучитьСтрокуИдентификатораСсылки(ДопСвойство), ДопСвойство);
		КонецЦикла;
		
		ФормаОбработки.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДеревоНоменклатуры()

Функция ПолучитьНастройки() Экспорт
	
	Перем ДополнительныеВидыЦен, ДополнительныеВидыЦенПоставщика,ДополнительныеСвойства;

	_u_ТекущийПользователь	=	ПараметрыСеанса.ТекущийПользователь;
	
	НастройкиБРМ = ХранилищеНастроекДанныхФорм.Загрузить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , , "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
	Если ТипЗнч(НастройкиБРМ) = Тип("Структура") Тогда
		НастройкиБРМ.Свойство("ДополнительныеВидыЦен", 			ДополнительныеВидыЦен);
		НастройкиБРМ.Свойство("ДополнительныеВидыЦенПоставщика", 	ДополнительныеВидыЦенПоставщика);
		НастройкиБРМ.Свойство("ДополнительныеСвойства", 			ДополнительныеСвойства);
	КонецЕсли;
	
	Настройки = Новый Структура("СписокВидовЦен,СписокВидовЦенПоставщика,СписокДопСвойства", Новый Массив,Новый Массив,Новый Массив);
	
	Если ТипЗнч(ДополнительныеВидыЦен) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦен ИЗ ДополнительныеВидыЦен Цикл
			Если ТипЗнч(ДополнительныйВидЦен) <> Тип("СправочникСсылка.ВидыЦен") Тогда
				Продолжить;
			Конецесли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦен.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦен);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительныйВидЦен));
			Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеВидыЦенПоставщика) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦеныПоставщика ИЗ ДополнительныеВидыЦенПоставщика Цикл
			Если ТипЗнч(ДополнительныйВидЦеныПоставщика) <> Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
				Продолжить;
			Конецесли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦеныПоставщика.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦеныПоставщика);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительныйВидЦеныПоставщика));
			Настройки.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Массив") Тогда
		Для Каждого ДополнительноеСвойство ИЗ ДополнительныеСвойства Цикл
			Если ТипЗнч(ДополнительноеСвойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Продолжить;
			Конецесли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительноеСвойство.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительноеСвойство);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительноеСвойство));
			Настройки.СписокДопСвойства.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;

	Возврат Настройки;
	
КонецФункции // ПолучитьНастройки()

Процедура ИзменитьПозиции(ФормаОбработки) Экспорт
	СоздатьДокументУстановкиЦен(ФормаОбработки);
	ЗаписьРеквизитыНоменклатура(ФормаОбработки);
	
КонецПроцедуры

Процедура СоздатьДокументУстановкиЦен(ФормаОбработки) Экспорт
	
	СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(ПолучитьНастройки(),"СписокВидовЦен");
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументаУстановкиЦен(СписокВидовЦен);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ФормаОбработки.СписокНоменклатуры.Выгрузить());

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокументОбъект 				 = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокументОбъект.Дата 		 = ТекущаяДата();
	ДокументОбъект.Комментарий   = "Ручная установка цены";
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Статус		 = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	ВидыЦен 	= ИнициализироватьТаблицуВидыЦены();
	Товары  	= ИнициализироватьТаблицуТовары();
	ВалютаУпр   = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Для Каждого ВидЦены ИЗ СписокВидовЦен Цикл
			
			Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
			
			Если ВыборкаДетальныеЗаписи["Процент_" + Инд] <> 0 Тогда
				
				СтруктураПоиска = Новый Структура("ВидЦены", ВидЦены);
				РезультатПоиска = ВидыЦен.НайтиСтроки(СтруктураПоиска);
				
				Если РезультатПоиска.Количество() = 0 Тогда
					НоваяСтрока = ВидыЦен.Добавить();
					НоваяСтрока.ВидЦены = ВидЦены;
				КонецЕсли;
				
				НоваяСтрока 					= Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
				НоваяСтрока.ВидЦены 			= ВидЦены;
				НоваяСтрока.Цена 				= ПолучитьЦенуПоКурсу(ВыборкаДетальныеЗаписи["ВидЦены_УпрУч_" + Инд], ВыборкаДетальныеЗаписи["ВидЦены_РеглУч_" + Инд], ВидЦены, ВалютаУпр, ВалютаРегл);
				НоваяСтрока.ЦенаИзмененаВручную = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ВидыЦен.Загрузить(ВидыЦен);
	ДокументОбъект.Товары.Загрузить(Товары);
	
	Попытка                                                                                                   
				
		Если РольДоступна("УстановкаЦенНоменклатурыБезСогласования")
		 ИЛИ РольДоступна("ПолныеПрава") Тогда
		 	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);				
		Иначе
			
			ДокументОбъект.Статус		= Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
			БизнесОбъект 				= БизнесПроцессы.СогласованиеЦенНоменклатуры.СоздатьБизнесПроцесс();
			БизнесОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
			БизнесОбъект.Предмет    	= ДокументОбъект.Ссылка;
			БизнесОбъект.ДатаНачала 	= ТекущаяДата();
			БизнесОбъект.Дата			= ТекущаяДата();
			БизнесОбъект.Важность		= Перечисления.ВариантыВажностиЗадачи.Высокая;
			БизнесОбъект.ДатаЗавершения = КонецДня(ТекущаяДата()) + 1;
			//БизнесОбъект.Наименование 	= "Номенклатура: " + ВыборкаДетальныеЗаписи.Номенклатура + ", Код: " + ВыборкаДетальныеЗаписи.Номенклатура.Код + " " + Символы.ПС; 
			
			Для Каждого Строка Из ДокументОбъект.Товары Цикл	
				БизнесОбъект.Наименование = БизнесОбъект.Наименование 
											+ "Номенклатура: " + Строка.Номенклатура 
											+ ", Код: " + Строка.Номенклатура.Код 
											+ ", Вид цены: " +  Строка.ВидЦены 
											+ ", Цена: " + Строка.Цена + " " + Символы.ПС;				
			КонецЦикла;
			
			БизнесОбъект.Записать();
	 
		КонецЕсли;
		
	Исключение
		Сообщить("Не достаточно прав!");		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписьРеквизитыНоменклатура(ФормаОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРеквизитовНоменклатуры();
	Запрос.УстановитьПараметр("СписокНоменклатуры", ФормаОбработки.СписокНоменклатуры.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭлементИзменен_КПП_Опт  
			Или Выборка.ЭлементИзменен_КПП_Опт_НеПересчитыватьАвтоматически Тогда
			ЗаписатьКПП(Выборка,"КПП_Опт");
		КонецЕсли;
		
		Если Выборка.ЭлементИзменен_КПП_Розница
			Или Выборка.ЭлементИзменен_КПП_Розница_НеПересчитыватьАвтоматически Тогда
			ЗаписатьКПП(Выборка,"КПП_Розница");
		КонецЕсли;
		
		Если Выборка.ЭлементИзменен_ТоварнаяКатегория Тогда
			ЗаписатьТоварнуюКатегорию(Выборка);			
		КонецЕсли;

		Если Выборка.ЭлементИзменен_ЦеноваяГруппа Тогда
			ЗаписатьЦеновуюГруппу(Выборка);
		КонецЕсли;

		Если Выборка.ЭлементИзменен_Дедлайн Тогда
			
		КонецЕсли;

	
	КонецЦикла;

	

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВыгрузкиНоменклатуры(СтруктураНастроек)
			
	ТекстЗапроса = "
			|%1
			|
			|ВЫБРАТЬ
			|	СпрНоменклатура.Номенклатура							КАК Ссылка,
			|	ЕСТЬNULL(КПП_Опт.Значение, 0) 							КАК КПП_Опт,
			|	ЕСТЬNULL(КПП_Опт.НеПересчитыватьАвтоматически, ЛОЖЬ)	КАК КПП_Опт_НеПересчитыватьАвтоматически,
			|	ЕСТЬNULL(КПП_Розница.Значение, 0) 						КАК КПП_Розница,
			|	ЕСТЬNULL(КПП_Розница.НеПересчитыватьАвтоматически, ЛОЖЬ)КАК КПП_Розница_НеПересчитыватьАвтоматически,
			|	СпрНоменклатура.Номенклатура.ТоварнаяКатегория 			КАК ТоварнаяКатегория,
			|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа 				КАК ЦеноваяГруппа
			|%2
			|
			|ИЗ
			|	СпрНоменклатура КАК СпрНоменклатура
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних КАК КПП_Опт
			|ПО СпрНоменклатура.Номенклатура = КПП_Опт.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних КАК КПП_Розница
			|ПО СпрНоменклатура.Номенклатура = КПП_Розница.Номенклатура
			|
			|%3";
			
			
	ДополнительныхКолонок	= ПолучитьТекстЗапросаДополнительныхКолонок(СтруктураНастроек);			
	ТекстЗапроса 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
													ТекстЗапросаСпрНоменклатуры(),
													ДополнительныхКолонок.ШапкаЗапроса,
													ДополнительныхКолонок.СоединениеЗапроса);
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСпрНоменклатуры()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ СпрНоменклатура
	               |ИЗ
	               |	Справочник.Номенклатура
	               |ГДЕ
	               |	ВидНоменклатуры = &ВидНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
				   //1
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Период КАК Период
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаРеглУч
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)),
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаУпрУч
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
				   //2
	               |ВЫБРАТЬ
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период КАК НачалоПериода,
	               |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	               |ПОМЕСТИТЬ ТаблицаКурсов
	               |ИЗ
	               |	КурсыВалют КАК КурсыВалют
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	               |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	               |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
				   //3
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаУпрУч,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаРеглУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаРеглУч
	               |ПОМЕСТИТЬ КешЦен
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |													,
	               |													Номенклатура В	(ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
	               |													И ВидЦены В (&СписокВидовЦен)
				   |													) КАК ЦеныНоменклатурыСрезПоследних
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
	               |; 
				   //////////////////////////////////////////////////////////////////////////////
				   //4
				   |ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА ЦеныНоменклатурыПоставщиковСрезПоследних.Период > &НачалоДня
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Сегодня,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Соглашение,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Цена
				   |ПОМЕСТИТЬ КешЦенПоставщиков
				   |ИЗ
				   |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
				   |															,
				   |							                                Номенклатура В	(ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
				   |															И Соглашение В (&СписокВидовЦенПоставщика)
				   |															) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
				   |;
				   //////////////////////////////////////////////////////////////////////////////
				   //5
				   |ВЫБРАТЬ 
				   | 	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура, 
				   | 	Значение,
				   | 	Свойство
				   |
				   | ПОМЕСТИТЬ ДопСведения
				   |
				   | ИЗ РегистрСведений.ДополнительныеСведения 
				   |
				   | ГДЕ Объект В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
				   | 	И Свойство В (&СписокДопСвойства)
				   |;";
				   
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаРеквизитовНоменклатуры()

	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КешСписокНоменклатура
				|ИЗ
				|	&СписокНоменклатуры КАК Список
				|;
				|
				|ВЫБРАТЬ
				|  Ссылка КАК Номенклатура,
				|  *
				|ИЗ 
				|	КешСписокНоменклатура
				|
				|ГДЕ
				|	ЭлементИзменен";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРеквизитовНоменклатуры()

Функция ПолучитьТекстЗапросаДополнительныхКолонок(СтруктураНастроек)
	
	ШапкаЗапроса 		= "";
	СоединениеЗапроса 	= "";
	
	СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦен");
	СписокВидовЦенПоставщика = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦенПоставщика");
	СписокДопСвойства		 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокДопСвойства");

	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
		ШапкаЗапроса		=	ШапкаЗапроса +",	
			|ISNULL(КешЦен"+Инд+".ЦенаУпрУч,0) КАК ВидЦены_УпрУч_" + Инд + ",
			|ISNULL(КешЦен"+Инд+".ЦенаРеглУч,0)КАК ВидЦены_РеглУч_"+ Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешЦен"+Инд+".Номенклатура
			|И  &ВидЦены"+Инд+"	= КешЦен"+Инд+".ВидЦены";			
	КонецЦикла;
	
	Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл
		Инд	=	ПолучитьСтрокуИдентификатораСсылки(ЦенаПоставщика);
		ШапкаЗапроса		=	ШапкаЗапроса +",	
			|ISNULL(КешДопЦенПоставщика"+Инд+".Цена,0)	КАК ЦенаПоставщика_"+Инд;
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦенПоставщиков КАК КешДопЦенПоставщика"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопЦенПоставщика"+Инд+".Номенклатура
			|И  &ВидЦеныПоставщика"+Инд+"	= КешДопЦенПоставщика"+Инд+".Соглашение";
	КонецЦикла;

	Для Каждого ДопСвойство Из СписокДопСвойства Цикл
		Инд	=	ПолучитьСтрокуИдентификатораСсылки(ДопСвойство);		
		ШапкаЗапроса		=	ШапкаЗапроса +",
			|ISNULL(Представление(КешДопСведения"+Инд+".Значение),"""")	КАК ДопСвойство_"+Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК КешДопСведения"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопСведения"+Инд+".Номенклатура
			|И  &ДопСвойство"+Инд+"	= КешДопСведения"+Инд+".Свойство";
	КонецЦикла;
		
	Возврат Новый Структура("ШапкаЗапроса, СоединениеЗапроса", ШапкаЗапроса, СоединениеЗапроса);
	
КонецФункции

Функция ПолучитьСписокСсылокИзНастроек(Настройки, ИмяСвойства)

	СписокСсылок = Новый Массив;
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если Не Настройки.Свойство(ИмяСвойства) Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если ТипЗнч(Настройки[ИмяСвойства]) <> Тип("Массив") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Настройки[ИмяСвойства] Цикл
		Если ТипЗнч(ЭлементСписка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЭлементСписка.Свойство("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		СписокСсылок.Добавить(ЭлементСписка.Ссылка);	
	КонецЦикла;
	
	Возврат СписокСсылок;

КонецФункции // ПолучитьСписокВидовЦенИзНастроек()

Процедура ПолучитьСтруктуруКолонокВидовЦен(Результат,Настройки)
	
	Если Не Настройки.Свойство("СписокВидовЦен") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокУпрУч	=	Константы.ВалютаУправленческогоУчета.Получить().Наименование;
	ЗаголовокРеглУч	=	Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
	
	Для каждого Элемента Из Настройки.СписокВидовЦен Цикл
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ГруппаВидЦены_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Заголовок", Элемента.Заголовок);
		СтруктураКолонки.Вставить("ЭтоГруппа", Истина);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);

		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ВидЦены_УпрУч_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", ЗаголовокУпрУч);
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ВидЦены_РеглУч_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", ЗаголовокРеглУч);
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "Процент_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", "%");
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ПроцентИзменен_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Новый ОписаниеТипов("Булево"));
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Истина);
		СтруктураКолонки.Вставить("Заголовок", "");
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);

	КонецЦикла;

КонецПроцедуры // ПолучитьСписокКолонок()

Процедура ПолучитьСтруктуруКолонокЦенПоставщика(Результат,Настройки) 
	
	Если Не Настройки.Свойство("СписокВидовЦенПоставщика") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Для каждого Элемента Из Настройки.СписокВидовЦенПоставщика Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ЦенаПоставщика_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование +", "+ Строка(Элемента.Ссылка.Валюта));
		Результат.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
	КонецЦикла;
	
КонецПроцедуры//

Процедура ПолучитьСтруктуруКолонокДопСвойства(Результат,Настройки) 
		
	Если Не Настройки.Свойство("СписокДопСвойства") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемента Из Настройки.СписокДопСвойства Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ДопСвойство_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование);
		Результат.СписокДопСвойства.Добавить(СтруктураКолонки);
	КонецЦикла;

КонецПроцедуры // ПолучитьСписокКолонок()

Функция ПолучитьТекстЗапросаДокументаУстановкиЦен(СписокВидовЦен)
	
	Отбор = "";
	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
		Отбор	=	Отбор + "
			|%1 Процент_"+Инд+" <> 0
			|"+?(ВидЦены = СписокВидовЦен[СписокВидовЦен.ВГраница()]," )", "");
		Если  ВидЦены = СписокВидовЦен[0] Тогда
			Отбор	=	СтрЗаменить(Отбор,"%1","И (");
		Иначе
			Отбор	=	СтрЗаменить(Отбор,"%1","ИЛИ ");		
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КешСписокНоменклатура
				|ИЗ
				|	&СписокНоменклатуры КАК Список
				|;
				|
				|ВЫБРАТЬ
				|  Ссылка КАК Номенклатура,
				|  *
				|ИЗ 
				|	КешСписокНоменклатура
				|
				|ГДЕ
				|	ЭлементИзменен"
				+Отбор; 
								
	Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДокументаУстановкиЦен()

Функция ИнициализироватьТаблицуВидыЦены()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	
	Возврат Таблица;

КонецФункции // ИнициализироватьТаблицуВидыЦены()

Функция ИнициализироватьТаблицуТовары()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Таблица.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;

КонецФункции // ИнициализироватьТаблицуТовары()
 
Функция ПолучитьЦенуПоКурсу(ЦенаУпр, ЦенаРегл, ВидЦены, ВалютаУпр, ВалютаРегл)
	
	Если ВидЦены.ВалютаЦены = ВалютаУпр Тогда
		Возврат ЦенаУпр;
	ИначеЕсли ВидЦены.ВалютаЦены = ВалютаРегл Тогда
		Возврат ЦенаРегл;
	Иначе
		КурсыВалютыУпр		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ТекущаяДатаСеанса());
		КурсУпр 			= КурсыВалютыУпр.Курс / КурсыВалютыУпр.Кратность;
		КурсыВалютыВидаЦены	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВидЦены.ВалютаЦены, ТекущаяДатаСеанса());
		КурсЦены 			= КурсыВалютыВидаЦены.Курс / КурсыВалютыВидаЦены.Кратность;
		Возврат ЦенаУпр * (КурсУпр/КурсЦены);
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьКПП(Выборка, НаименованиеКолонки)
	
	Если НаименованиеКолонки = "КПП_Опт" Тогда
		ИмяРегистра		=	"КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж";
	ИначеЕсли  НаименованиеКолонки = "КПП_Розница" Тогда
		ИмяРегистра		=	"КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж";
	Иначе
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения	= КПП_ПолучитьПараметрыЗаполнения(ИмяРегистра,Выборка);
	git_КоефициентПриоритетностиПродажСервер.ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(ПараметрыЗаполнения, ИмяРегистра);
	

КонецПроцедуры

Функция КПП_ПолучитьПараметрыЗаполнения(ИмяРегистра,Выборка)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Период", ТекущаяДата());
	ПараметрыЗаполнения.Вставить("Номенклатура", Выборка.Ссылка);
	Если 		ИмяРегистра = "КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж" Тогда	
		ПараметрыЗаполнения.Вставить("Значение", Выборка.КПП_Розница);
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически", Выборка.КПП_Розница_НеПересчитыватьАвтоматически);
	ИначеЕсли 	ИмяРегистра = "КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж" Тогда
		ПараметрыЗаполнения.Вставить("Значение", Выборка.КПП_Опт);
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически", Выборка.КПП_Опт_НеПересчитыватьАвтоматически);	
	Иначе
		ПараметрыЗаполнения.Вставить("Значение");
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции // КПП_ПолучитьПараметрыЗаполнения()

Процедура ЗаписатьТоварнуюКатегорию(Выборка)
	
	НоменклатураСсылка		= Выборка.Номенклатура;
	ТоварнаяКатегорияСсылка	= Выборка.ТоварнаяКатегория;
	
	Если ТоварнаяКатегорияСсылка.Владелец = НоменклатураСсылка.ВидНоменклатуры Тогда
		СправочникОбъект	= НоменклатураСсылка.ПолучитьОбъект();
		СправочникОбъект.ТоварнаяКатегория =  ТоварнаяКатегорияСсылка;
		СправочникОбъект.Записать();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЦеновуюГруппу(Выборка)

	НоменклатураСсылка				= Выборка.Номенклатура;
	СправочникОбъект				= НоменклатураСсылка.ПолучитьОбъект();
	СправочникОбъект.ЦеноваяГруппа 	=  Выборка.ЦеноваяГруппа;
	СправочникОбъект.Записать();	
		
КонецПроцедуры
 

#КонецОбласти