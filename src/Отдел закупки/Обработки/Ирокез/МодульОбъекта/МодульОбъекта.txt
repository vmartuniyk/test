
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	Возврат СписокТестов;
	
КонецФункции   

Процедура ПроверкаНаЗагрузкуДанныхЧерезПараметрВидНоменклатуры() Экспорт
	
	ВидНоменклатурыТест	= Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	ВидНоменклатурыТест.Наименование	= "Вид номенлатуры_Тест";
	ВидНоменклатурыТест.Записать();
	
	НоменклатураТест					=	Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураТест.Наименование		= 	"Тестовая номенклатура для тестов";
	НоменклатураТест.ВидНоменклатуры	=	ВидНоменклатурыТест;
	НоменклатураТест.Записать();
	СтруктураНастроек					=	Новый Структура("СписокВидыЦенПоставщика,СписокВидыЦен,ДопСвойства");
	
	//ТаблицаНоменклатура					=	ЗагрузитьТаблицуНоменклатуры(ВидНоменклатурыТест,СтруктураНастроек);
	
	
	СообщениеОбОшибке	= НСтр("ru = 'Не удалось загрузить таблицу номенклатуры!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//ЮнитТест.ПроверитьТип(ТаблицаНоменклатура,Тип("ТаблицаЗначений"), СообщениеОбОшибке);
	//ЮнитТест.ПроверитьНеРавенство(ТаблицаНоменклатура.Количество(),0 ,СообщениеОбОшибке);
	
		
КонецПроцедуры
 
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт
	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	
	Возврат СтроковыйИдентификатор;
	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

Функция ПолучитьСтруктуруКолонок() Экспорт
	
	Результат = Новый Структура("СписокВидовЦен, СписокВидовЦенПоставщика, СписокДопСвойства", Новый Массив, Новый Массив, Новый Массив);
	Настройки = ПолучитьНастройки();
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;

	ПолучитьСтруктуруКолонокВидовЦен(Результат,Настройки);
	ПолучитьСтруктуруКолонокЦенПоставщика(Результат,Настройки);
	ПолучитьСтруктуруКолонокДопСвойства(Результат,Настройки);

	Возврат Результат;

КонецФункции // ПолучитьСписокКолонок()

Процедура ЗагрузитьТаблицуНоменклатуры(ФормаОбработки, СтруктураНастроек) Экспорт
	
	Если ФормаОбработки.ВидНоменклатуры.Пустая() Тогда 
		ФормаОбработки.СписокНоменклатуры.Очистить();
	Иначе
		СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦен");
		СписокВидовЦенПоставщика = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦенПоставщика");
		СписокДопСвойства		 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокДопСвойства");
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ТекстЗапросаВыгрузкиНоменклатуры(СтруктураНастроек);
		Запрос.УстановитьПараметр("ВидНоменклатуры", ФормаОбработки.ВидНоменклатуры);
		Запрос.УстановитьПараметр("НачалоДня", 	НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ВалютаРеглУч", Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВалютаУпрУч",Константы.ВалютаУправленческогоУчета.Получить());
		Запрос.УстановитьПараметр("СписокВидовЦенПоставщика",СписокВидовЦенПоставщика);
		Запрос.УстановитьПараметр("СписокВидовЦен", СписокВидовЦен);
		Запрос.УстановитьПараметр("СписокДопСвойства",СписокДопСвойства);
		Для Каждого ВидЦены Из СписокВидовЦен Цикл                                            
			Запрос.УстановитьПараметр("ВидЦены" + ПолучитьСтрокуИдентификатораСсылки(ВидЦены), ВидЦены);
		КонецЦикла;
		
		Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл    
			Запрос.УстановитьПараметр("ВидЦеныПоставщика" + ПолучитьСтрокуИдентификатораСсылки(ЦенаПоставщика), ЦенаПоставщика);
		КонецЦикла;
		
		Для Каждого ДопСвойство Из СписокДопСвойства Цикл  
			Запрос.УстановитьПараметр("ДопСвойство" + ПолучитьСтрокуИдентификатораСсылки(ДопСвойство), ДопСвойство);
		КонецЦикла;
		
		ФормаОбработки.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
КонецПроцедуры // ЗагрузитьДеревоНоменклатуры()

Функция ПолучитьНастройки()  Экспорт
	
	Перем ДополнительныеВидыЦен, ДополнительныеВидыЦенПоставщика,ДополнительныеСвойства;

	_u_ТекущийПользователь	=	ПараметрыСеанса.ТекущийПользователь;
	
	НастройкиБРМ = ХранилищеНастроекДанныхФорм.Загрузить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , , "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
	Если ТипЗнч(НастройкиБРМ) = Тип("Структура") Тогда
		НастройкиБРМ.Свойство("ДополнительныеВидыЦен", 			ДополнительныеВидыЦен);
		НастройкиБРМ.Свойство("ДополнительныеВидыЦенПоставщика", 	ДополнительныеВидыЦенПоставщика);
		НастройкиБРМ.Свойство("ДополнительныеСвойства", 			ДополнительныеСвойства);
	КонецЕсли;
	
	Настройки = Новый Структура("СписокВидовЦен,СписокВидовЦенПоставщика,СписокДопСвойства", Новый Массив,Новый Массив,Новый Массив);
	
	Если ТипЗнч(ДополнительныеВидыЦен) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦен ИЗ ДополнительныеВидыЦен Цикл
			Если ТипЗнч(ДополнительныйВидЦен) <> Тип("СправочникСсылка.ВидыЦен") Тогда
				Продолжить;
			Конецесли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦен.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦен);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительныйВидЦен));
			Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеВидыЦенПоставщика) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦеныПоставщика ИЗ ДополнительныеВидыЦенПоставщика Цикл
			Если ТипЗнч(ДополнительныйВидЦеныПоставщика) <> Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
				Продолжить;
			Конецесли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦеныПоставщика.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦеныПоставщика);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительныйВидЦеныПоставщика));
			Настройки.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Массив") Тогда
		Для Каждого ДополнительноеСвойство ИЗ ДополнительныеСвойства Цикл
			Если ТипЗнч(ДополнительноеСвойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Продолжить;
			Конецесли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительноеСвойство.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительноеСвойство);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительноеСвойство));
			Настройки.СписокДопСвойства.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;

	
	Возврат Настройки;
КонецФункции // ПолучитьНастройки()
 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВыгрузкиНоменклатуры(СтруктураНастроек)
	ДополнительныхКолонок	=	 ПолучитьТекстЗапросаДополнительныхКолонок(СтруктураНастроек);
	ТекстЗапросаОсновной =  ТекстЗапросаСпрНоменклатуры()+ "
		 	////////////////////////////////////////////////////////////////////////////////
			//6
			|ВЫБРАТЬ
			|	СпрНоменклатура.Номенклатура					КАК Ссылка,
			|	ЕСТЬNULL(КПП_Опт.Значение, 0) 					КАК КПП_Опт,
			|	ЕСТЬNULL(КПП_Розница.Значение, 0) 				КАК КПП_Розница,
			|	СпрНоменклатура.Номенклатура.ТоварнаяКатегория 	КАК ТоварнаяКатегория,
			|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа 		КАК ЦеноваяГруппа "
			+ДополнительныхКолонок.ШапкаЗапроса+"
			|
			|ИЗ
			|	СпрНоменклатура КАК СпрНоменклатура
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних КАК КПП_Опт
			|ПО СпрНоменклатура.Номенклатура = КПП_Опт.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних КАК КПП_Розница
			|ПО СпрНоменклатура.Номенклатура = КПП_Розница.Номенклатура
			|"
			+ДополнительныхКолонок.СоединениеЗапроса;
	Возврат  ТекстЗапросаОсновной;
КонецФункции //

Функция ТекстЗапросаСпрНоменклатуры()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ СпрНоменклатура
	               |ИЗ
	               |	Справочник.Номенклатура
	               |ГДЕ
	               |	ВидНоменклатуры = &ВидНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
				   //1
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Период КАК Период
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаРеглУч
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)),
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаУпрУч
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
				   //2
	               |ВЫБРАТЬ
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период КАК НачалоПериода,
	               |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	               |ПОМЕСТИТЬ ТаблицаКурсов
	               |ИЗ
	               |	КурсыВалют КАК КурсыВалют
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	               |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	               |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
				   //3
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаУпрУч,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаРеглУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаРеглУч
	               |ПОМЕСТИТЬ КешЦен
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |													,
	               |													Номенклатура В	(ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
	               |													И ВидЦены В (&СписокВидовЦен)
				   |													) КАК ЦеныНоменклатурыСрезПоследних
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
	               |; 
				   //////////////////////////////////////////////////////////////////////////////
				   //4
				   |ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА ЦеныНоменклатурыПоставщиковСрезПоследних.Период > &НачалоДня
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Сегодня,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Соглашение,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Цена
				   |ПОМЕСТИТЬ КешЦенПоставщиков
				   |ИЗ
				   |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
				   |															,
				   |							                                Номенклатура В	(ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
				   |															И Соглашение В (&СписокВидовЦенПоставщика)
				   |															) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
				   |;
				   //////////////////////////////////////////////////////////////////////////////
				   //5
				   |ВЫБРАТЬ 
				   | 	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура, 
				   | 	Значение,
				   | 	Свойство
				   |
				   | ПОМЕСТИТЬ ДопСведения
				   |
				   | ИЗ РегистрСведений.ДополнительныеСведения 
				   |
				   | ГДЕ Объект В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
				   | 	И Свойство В (&СписокДопСвойства)
				   |;";
				   
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДополнительныхКолонок(СтруктураНастроек)
	
	ШапкаЗапроса 		= "";
	СоединениеЗапроса 	= "";
	
	СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦен");
	СписокВидовЦенПоставщика = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦенПоставщика");
	СписокДопСвойства		 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокДопСвойства");

	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
		ШапкаЗапроса		=	ШапкаЗапроса +",	
			|ISNULL(КешЦен"+Инд+".ЦенаУпрУч,0) КАК ВидЦены_УпрУч_" + Инд + ",
			|ISNULL(КешЦен"+Инд+".ЦенаРеглУч,0)КАК ВидЦены_РеглУч_"+ Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешЦен"+Инд+".Номенклатура
			|И  &ВидЦены"+Инд+"	= КешЦен"+Инд+".ВидЦены";			
	КонецЦикла;
	
	Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл
		Инд	=	ПолучитьСтрокуИдентификатораСсылки(ЦенаПоставщика);
		ШапкаЗапроса		=	ШапкаЗапроса +",	
			|ISNULL(КешДопЦенПоставщика"+Инд+".Цена,0)	КАК ЦенаПоставщика_"+Инд;
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦенПоставщиков КАК КешДопЦенПоставщика"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопЦенПоставщика"+Инд+".Номенклатура
			|И  &ВидЦеныПоставщика"+Инд+"	= КешДопЦенПоставщика"+Инд+".Соглашение";
	КонецЦикла;

	Для Каждого ДопСвойство Из СписокДопСвойства Цикл
		Инд	=	ПолучитьСтрокуИдентификатораСсылки(ДопСвойство);		
		ШапкаЗапроса		=	ШапкаЗапроса +",
			|ISNULL(Представление(КешДопСведения"+Инд+".Значение),"""")	КАК ДопСвойство_"+Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК КешДопСведения"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопСведения"+Инд+".Номенклатура
			|И  &ДопСвойство"+Инд+"	= КешДопСведения"+Инд+".Свойство";
	КонецЦикла;
	//		
	Возврат Новый Структура("ШапкаЗапроса, СоединениеЗапроса", ШапкаЗапроса, СоединениеЗапроса);
	
КонецФункции

Функция ПолучитьСписокСсылокИзНастроек(Настройки, ИмяСвойства)

	СписокСсылок = Новый Массив;
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если Не Настройки.Свойство(ИмяСвойства) Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если ТипЗнч(Настройки[ИмяСвойства]) <> Тип("Массив") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Настройки[ИмяСвойства] Цикл
		Если ТипЗнч(ЭлементСписка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЭлементСписка.Свойство("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		СписокСсылок.Добавить(ЭлементСписка.Ссылка);	
	КонецЦикла;
	
	Возврат СписокСсылок;

КонецФункции // ПолучитьСписокВидовЦенИзНастроек()

Процедура ПолучитьСтруктуруКолонокВидовЦен(Результат,Настройки)
	
	Если Не Настройки.Свойство("СписокВидовЦен") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокУпрУч	=	Константы.ВалютаУправленческогоУчета.Получить().Наименование;
	ЗаголовокРеглУч	=	Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
	
	Для каждого Элемента Из Настройки.СписокВидовЦен Цикл
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ГруппаВидЦены_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Заголовок", Элемента.Заголовок);
		СтруктураКолонки.Вставить("ЭтоГруппа", Истина);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);

		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ВидЦены_УпрУч_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", ЗаголовокУпрУч);
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ВидЦены_РеглУч_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", ЗаголовокРеглУч);
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "Процент_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", "%");
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);

	КонецЦикла;

КонецПроцедуры // ПолучитьСписокКолонок()

Процедура ПолучитьСтруктуруКолонокЦенПоставщика(Результат,Настройки) 
	
	Если Не Настройки.Свойство("СписокВидовЦенПоставщика") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Для каждого Элемента Из Настройки.СписокВидовЦенПоставщика Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ЦенаПоставщика_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование +", "+ Строка(Элемента.Ссылка.Валюта));
		Результат.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
	КонецЦикла;
	
КонецПроцедуры//

Процедура ПолучитьСтруктуруКолонокДопСвойства(Результат,Настройки) 
		
	Если Не Настройки.Свойство("СписокДопСвойства") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемента Из Настройки.СписокДопСвойства Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ДопСвойство_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование);
		Результат.СписокДопСвойства.Добавить(СтруктураКолонки);
	КонецЦикла;

КонецПроцедуры // ПолучитьСписокКолонок()

#КонецОбласти