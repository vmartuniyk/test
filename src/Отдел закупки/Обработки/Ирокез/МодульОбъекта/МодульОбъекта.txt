
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьПреобразованиеСтроки", Истина);
	
	СписокТестов.Добавить(ПараметрыТеста);
	ПараметрыТеста = Новый Структура("ИмяТеста, Параметр", "Тест_ПроверитьСозданияСтруктурыКолонокНастройки");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаполненияНоменклатурыТоварнойКатегорие", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаполненияНоменклатурыЦеновоюГруппою", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаписиВРегСвКПП_Опт", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаписиВРегСвКПП_Розница", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП_БезДанных", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	
	Возврат СписокТестов;
	
КонецФункции 

Процедура ПередЗапускомТеста() Экспорт
	
	ВерсияСчетчикНоменклатуры = git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных("Счетчик номенклатуры");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияСчетчикНоменклатуры, "0.0.001", НСтр("ru='Для теста необходимо подключить библиотеку «Счетчик номенклатуры» версии 0.0.001 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияПодпискиНаСобытия = git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных("Подписки на события");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияПодпискиНаСобытия, "3.8.15", НСтр("ru='Для теста необходимо подключить библиотеку «Подписки на события» версии 3.8.15 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры
 


Процедура Тест_ПроверитьПреобразованиеСтроки(Параметр) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор;
	Наименование  = ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры", Идентификатор);
	
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	ВидНоменклатурыТест		=	ПолучитьБиблиотекуВидыНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	СтрокаУИ				=	ПолучитьСтрокуИдентификатораСсылки(ВидНоменклатурыТест);
	УИ						=	УникальныйИдентификаторИзСтроки(,СтрокаУИ);
	ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.ПолучитьСсылку(УИ);				
	
	СообщениеОбОшибке		=	НСтр("ru='Не удалось преобразовать строку через уникальный индентификатор!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(ВидНоменклатуры, 	Тип("СправочникСсылка.ВидыНоменклатуры") , СообщениеОбОшибке);
	ЮнитТест.ПроверитьТип(СтрокаУИ, 		Тип("Строка") , СообщениеОбОшибке);
	ЮнитТест.ПроверитьТип(УИ, 				Тип("УникальныйИдентификатор") , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ВидНоменклатурыТест, ВидНоменклатуры, СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ВидНоменклатурыТест, Справочники.ВидыНоменклатуры.ПустаяСсылка(), СообщениеОбОшибке);

КонецПроцедуры

Процедура Тест_ПроверитьСозданияСтруктурыКолонокНастройки(Параметр) Экспорт
	
	СтруктураКолонок = ПолучитьСтруктуруКолонок();
	СообщениеОбОшибке = НСтр("ru='Не удалось получить структуру колонок для настрой обратки!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(СтруктураКолонок,Тип("Структура") , СообщениеОбОшибке);
КонецПроцедуры

Процедура Тест_ПроверитьЗаполненияНоменклатурыТоварнойКатегорие(Параметр) Экспорт
	
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	Номенклатура	 =	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	ТоварнаКатегория =	Справочники.ТоварныеКатегории.ПустаяСсылка();
	
	СтруктураЗаполнения	= Новый Структура("Номенклатура,ТоварнаяКатегория",Номенклатура, ТоварнаКатегория);
	РезультатТест1		 = ЗаписатьТоварнуюКатегорию(СтруктураЗаполнения);
	
	//ПростойПлохойТест1
	СтруктураЗаполнения	= Новый Структура("Номенклатура,ТоварнаяКатегория",Номенклатура, Неопределено);
	РезультатТест2		 = ЗаписатьТоварнуюКатегорию(СтруктураЗаполнения);
	
	//ПростойПлохойТест3
	СтруктураЗаполнения	= Новый Структура("Номенклатура,ТоварнаяКатегория",Неопределено, Неопределено);
	РезультатТест3		 = ЗаписатьТоварнуюКатегорию(СтруктураЗаполнения);
		
	СообщениеОбОшибке		=	НСтр("ru='Не удалось записать товарную категорию в справочник!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьИстину(РезультатТест1, СообщениеОбОшибке);
	ЮнитТест.ПроверитьЛожь(РезультатТест2, СообщениеОбОшибке);
	ЮнитТест.ПроверитьЛожь(РезультатТест3, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура Тест_ПроверитьЗаполненияНоменклатурыЦеновоюГруппою(Параметр) Экспорт
	
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	Номенклатура	 =	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	ЦенноваГруппа	 =	Справочники.ЦеновыеГруппы.ПустаяСсылка();
	
	СтруктураЗаполнения	 = Новый Структура("Номенклатура,ЦеноваяГруппа",Номенклатура, ЦенноваГруппа);
	РезультатТест1		 = ЗаписатьЦеновуюГруппу(СтруктураЗаполнения);
	СтруктураЗаполнения.Удалить("Номенклатура");
	СтруктураЗаполнения.Удалить("ЦеноваяГруппа");  	
	  
		
	СообщениеОбОшибке =	НСтр("ru='Не удалось записать товарную категорию в справочник!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьИстину(РезультатТест1, СообщениеОбОшибке);

КонецПроцедуры

Процедура Тест_ПроверитьЗаписиВРегСвКПП_Опт(Параметр=Неопределено) Экспорт
	
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	Номенклатура = ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
	Идентификатор = Новый УникальныйИдентификатор;
	Наименование  = ПреобразоватьУникальныйИдентификаторВНаименование("КПП_Розница", Идентификатор);
	КПП_Опт 	  = ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование", Наименование)); 
	
	Идентификатор = Новый УникальныйИдентификатор;
	Наименование  = ПреобразоватьУникальныйИдентификаторВНаименование("КПП_Опт", Идентификатор);
	КПП_Розница   =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование", Наименование)); 

	НаименованиеКолонки	=	"КПП_Опт";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка",									Номенклатура);
	СтруктураЗаполнения.Вставить("КПП_Розница",								КПП_Розница);
	СтруктураЗаполнения.Вставить("КПП_Опт",									КПП_Опт);
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически",	Истина);
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически",Истина);
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Не удалось создать запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 1, СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Опт.Найти(КПП_Опт,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Опт.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(КПП_Розница,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);
	
	
КонецПроцедуры

Процедура Тест_ПроверитьЗаписиВРегСвКПП_Розница(Параметр=Неопределено) Экспорт

	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);	
	Номенклатура 		= ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
	КПП_Опт =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Розница")); 
	КПП_Розница  =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Опт")); 

	НаименованиеКолонки	=	"КПП_Розница";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка",									Номенклатура);
	СтруктураЗаполнения.Вставить("КПП_Розница",								КПП_Розница);
	СтруктураЗаполнения.Вставить("КПП_Опт",									КПП_Опт);
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически",	Истина);
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически",Истина);
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Не удалось создать запись в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 1, СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Розница.Найти(КПП_Розница,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Розница.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(КПП_Опт,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);
	
	
КонецПроцедуры

Процедура Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП(Параметр=Неопределено) Экспорт

	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);	
	Номенклатура 		= ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
	КПП_Опт =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Розница")); 
	КПП_Розница  =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Опт")); 

	НаименованиеКолонки	=	"";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка",									Номенклатура);
	СтруктураЗаполнения.Вставить("КПП_Розница",								КПП_Розница);
	СтруктураЗаполнения.Вставить("КПП_Опт",									КПП_Опт);
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически",	Истина);
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически",Истина);
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Не удалось создать запись в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(КПП_Розница,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(КПП_Опт,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);
	
	
КонецПроцедуры

Процедура Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП_БезДанных(Параметр=Неопределено) Экспорт
	Номенклатура	= Справочники.Номенклатура.ПустаяСсылка();
	НаименованиеКолонки	=	"";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка");
	СтруктураЗаполнения.Вставить("КПП_Розница");
	СтруктураЗаполнения.Вставить("КПП_Опт");
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически");
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически");
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись ь в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 0, СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 0, СообщениеОбОшибке);
		
КонецПроцедуры

Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

Функция ПолучитьБиблиотекуКПН()
	ПутьКБиблиотеке = "\tests\Справочники\КоефициентПриоритетностиНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

Функция ПолучитьБиблиотекуВидыНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

Функция СозданияЭлементаСправочника(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

Процедура УдалитьЗаписиВРегистрахПоКПП(Номенклатура)

	РегистрРозница	= РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СоздатьНаборЗаписей();
	РегистрРозница.Отбор.Номенклатура.Установить(Номенклатура);
	Запись	= РегистрРозница.Добавить();
	РегистрРозница.Прочитать();
	РегистрРозница.Записать();
	
	РегистрРозница	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СоздатьНаборЗаписей();
	РегистрРозница.Отбор.Номенклатура.Установить(Номенклатура);
	Запись	= РегистрРозница.Добавить();
	РегистрРозница.Прочитать();
	РегистрРозница.Записать();

	
	
КонецПроцедуры

Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс, Идентификатор)
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	Возврат СтроковыйИдентификатор;	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

Функция ПолучитьСтруктуруКолонок() Экспорт
	
	Результат = Новый Структура("СписокВидовЦен, СписокВидовЦенПоставщика, СписокДопСвойства", Новый Массив, Новый Массив, Новый Массив);
	Настройки = ПолучитьНастройки();
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;

	ПолучитьСтруктуруКолонокВидовЦен(Результат,	Настройки);
	ПолучитьСтруктуруКолонокЦенПоставщика(Результат, Настройки);
	ПолучитьСтруктуруКолонокДопСвойства(Результат, Настройки);

	Возврат Результат;

КонецФункции // ПолучитьСписокКолонок()

Процедура ЗагрузитьТаблицуНоменклатуры(ФормаОбработки) Экспорт
	
	ЗаказПоставщику   		= ФормаОбработки.ЗаказПоставщику;
	ЗаказКлиента			= ФормаОбработки.ЗаказКлиента;
	ДокументСсылка			= ФормаОбработки.ДокументСсылка;
	МассивНоменклатуры  	= ФормаОбработки.МассивНоменклатуры;
	ПараметрВидНоменклатуры	= ФормаОбработки.ВидНоменклатуры;
	ЗаполнятьПоЗамене		= ФормаОбработки.ЗаполнятьПоЗамене;
	ПолеСортировки			= ?(ФормаОбработки.ПолеСортировки = "Ссылка.Наименование", "СпрНоменклатура.Номенклатура.Наименование", ФормаОбработки.ПолеСортировки);
	ПолеСортировки			= ?(ПустаяСтрока(ПолеСортировки), "СпрНоменклатура.Номенклатура.Наименование", ПолеСортировки);
	Сортировка_Направление	= ?(ПустаяСтрока(ФормаОбработки.Сортировка_Направление), "ВОЗР", ФормаОбработки.Сортировка_Направление);
		
	Если ФормаОбработки.ВидНоменклатуры.Пустая() И ЗаказПоставщику.Пустая() И ДокументСсылка.Пустая() И ЗаполнятьПоЗамене = Ложь Тогда 
		ФормаОбработки.СписокНоменклатуры.Очистить();
	Иначе
		
		СписокВидовЦен 			 = ФормаОбработки.СписокВидовЦен.Выгрузить();
		СписокВидовЦенПоставщика = ФормаОбработки.СписокЦенПоставщика.Выгрузить();
		СписокДопСвойства		 = ФормаОбработки.СписокСвойств.Выгрузить();
		
		Запрос 		 = Новый Запрос;
		ТекстЗапроса = ТекстЗапросаВыгрузкиНоменклатуры(ФормаОбработки, 
											ЗаказПоставщику, 
											ЗаказКлиента, 
											ДокументСсылка,
											МассивНоменклатуры, 
											ЗаполнятьПоЗамене,
											ПолеСортировки,
											Сортировка_Направление);
		
		Если НЕ ПараметрВидНоменклатуры.ЭтоГруппа Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИЕРАРХИИ"," ");
		КонецЕсли;
		
		Если НЕ ДокументСсылка.Пустая() Тогда 
			МетаданныеДокумента = ДокументСсылка.Метаданные();
			Запрос.Текст = СтрЗаменить(ТекстЗапроса,"%ДокументСсылка%", МетаданныеДокумента.Имя);
			Если МетаданныеДокумента.Реквизиты.Найти("Валюта") = Неопределено Тогда
				Запрос.УстановитьПараметр("ВалютаДокумента", Константы.ВалютаУправленческогоУчета.Получить());		
			Иначе
				Запрос.УстановитьПараметр("ВалютаДокумента", ДокументСсылка.Валюта);	
			КонецЕсли;
		Иначе 
			Запрос.Текст = ТекстЗапроса;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", 				ПараметрВидНоменклатуры);
		Запрос.УстановитьПараметр("Пользователь", 					ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("НачалоДня", 						НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("КонецДня", 						КонецДня(ТекущаяДатаСеанса())); 
		Запрос.УстановитьПараметр("ВалютаРеглУч", 					Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВалютаУпрУч",					Константы.ВалютаУправленческогоУчета.Получить());
		Запрос.УстановитьПараметр("СписокВидовЦенПоставщика",		СписокВидовЦенПоставщика.ВыгрузитьКолонку("ВидЦеныПоставщика"));
		Запрос.УстановитьПараметр("СписокВидовЦен", 				СписокВидовЦен.ВыгрузитьКолонку("ВидЦены"));
		Запрос.УстановитьПараметр("СписокДопСвойства",				СписокДопСвойства.ВыгрузитьКолонку("Свойство"));
		Запрос.УстановитьПараметр("ДокументСсылка", 				ДокументСсылка);
		Запрос.УстановитьПараметр("ЗаказПоставщику",				ЗаказПоставщику);
		Запрос.УстановитьПараметр("ЗаказКлиента",					ЗаказКлиента);
		Запрос.УстановитьПараметр("МассивНоменклатуры",				МассивНоменклатуры);
		Запрос.УстановитьПараметр("Дата",							ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("СвойствоНеВыгружатьKtcUaCom",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("21932c8b-6930-11e2-8fd5-001e673c80fc"))); // Свойство не выгружать на сайт ktc-ua.com
		Запрос.УстановитьПараметр("СвойствоНеВыгружатьOrderB2b",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("21932c8c-6930-11e2-8fd5-001e673c80fc"))); // Свойство не выгружать на сайт order-b2b.com
		Запрос.УстановитьПараметр("СвойствоГарантия",				ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("a3e0fd0e-4712-11e0-9f98-001517115d85"))); // Свойство гарантия
		Запрос.УстановитьПараметр("СвойствоЗаработокМенеджераОпт", 		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("904cd00e-c6ba-11e2-b7da-001e673c80fc")));
		Запрос.УстановитьПараметр("ВидЦеныРозница", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));
		
		Запрос.УстановитьПараметр("ВидЦеныВходная",	Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85")));// Входная цена
		Запрос.УстановитьПараметр("ВидЦеныСпец",	Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fd-404c-11e0-9f98-001517115d85")));// Спецціни
		Запрос.УстановитьПараметр("ВидЦеныПартнер",	Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fc-404c-11e0-9f98-001517115d85")));// Партнерська

		
		Для Каждого ВидЦены Из СписокВидовЦен Цикл                                            
			Запрос.УстановитьПараметр("ВидЦены" + ВидЦены.ИндексКолонки, ВидЦены.ВидЦены);
		КонецЦикла;
		
		Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл    
			Запрос.УстановитьПараметр("ВидЦеныПоставщика" + ЦенаПоставщика.ИндексКолонки, ЦенаПоставщика.ВидЦеныПоставщика);
		КонецЦикла;
		
		Для Каждого ДопСвойство Из СписокДопСвойства Цикл  
			Запрос.УстановитьПараметр("ДопСвойство" + ДопСвойство.ИндексКолонки, ДопСвойство.Свойство);
		КонецЦикла;

		ФормаОбработки.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДеревоНоменклатуры()

Функция ПолучитьНастройки() Экспорт
	
	Перем ДополнительныеВидыЦен;
	Перем ДополнительныеВидыЦенПоставщика;
	Перем ДополнительныеСвойства;
	Перем Соглашение;
	Перем ВидНоменклатуры;


	_u_ТекущийПользователь	= ПараметрыСеанса.ТекущийПользователь;	
	НастройкиБРМ 			= ХранилищеНастроекДанныхФорм.Загрузить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , , "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
	МассивДополнительныеВидыЦен 			= Новый Массив;
	МассивДополнительныеВидыЦенПоставщика 	= Новый Массив;
	МассивДополнительныеСвойства 			= Новый Массив;
	ПеремВидНоменклатуры					= Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	Если ТипЗнч(НастройкиБРМ) = Тип("Структура") Тогда
		НастройкиБРМ.Свойство("ДополнительныеВидыЦен", 			 ДополнительныеВидыЦен);
		НастройкиБРМ.Свойство("ДополнительныеВидыЦенПоставщика", ДополнительныеВидыЦенПоставщика);
		НастройкиБРМ.Свойство("ДополнительныеСвойства", 		 ДополнительныеСвойства);
		НастройкиБРМ.Свойство("Соглашение", 		 			 Соглашение);
		НастройкиБРМ.Свойство("ВидНоменклатуры", 		 		 ВидНоменклатуры);
	КонецЕсли;
	
	Настройки = Новый Структура("СписокВидовЦен,СписокВидовЦенПоставщика,СписокДопСвойства,ВидНоменклатуры", Новый Массив,Новый Массив,Новый Массив,ПеремВидНоменклатуры);
	
	Если ТипЗнч(ДополнительныеВидыЦен) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦен ИЗ ДополнительныеВидыЦен Цикл
			Если ТипЗнч(ДополнительныйВидЦен) <> Тип("СправочникСсылка.ВидыЦен") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительныйВидЦен.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеВидыЦен.Найти(ДополнительныйВидЦен) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивДополнительныеВидыЦен.Добавить(ДополнительныйВидЦен);
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦен.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦен);
			Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Если НЕ Соглашение.Пустая() И НЕ Соглашение.ВидЦен.Пустая() Тогда
			ВидЦены			 = Соглашение.ВидЦен;
			Если МассивДополнительныеВидыЦен.Найти(ВидЦены) = Неопределено Тогда
				СтруктураКолонки = Новый Структура;
				СтруктураКолонки.Вставить("Заголовок", 	ВидЦены.Наименование);
				СтруктураКолонки.Вставить("Ссылка", 	ВидЦены);
				Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
				МассивДополнительныеВидыЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеВидыЦенПоставщика) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦеныПоставщика ИЗ ДополнительныеВидыЦенПоставщика Цикл
			Если ТипЗнч(ДополнительныйВидЦеныПоставщика) <> Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительныйВидЦеныПоставщика.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеВидыЦенПоставщика.Найти(ДополнительныйВидЦеныПоставщика) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦеныПоставщика.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦеныПоставщика);
			Настройки.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
			МассивДополнительныеВидыЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Массив") Тогда
		Для Каждого ДополнительноеСвойство ИЗ ДополнительныеСвойства Цикл
			Если ТипЗнч(ДополнительноеСвойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительноеСвойство.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеСвойства.Найти(ДополнительноеСвойство) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительноеСвойство.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительноеСвойство);
			Настройки.СписокДопСвойства.Добавить(СтруктураКолонки);
			МассивДополнительныеСвойства.Добавить(ДополнительноеСвойство);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ВидНоменклатуры) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Настройки.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;

	Возврат Настройки;
	
КонецФункции // ПолучитьНастройки()

Процедура ЗагрузитьТаблицуСогласованияЦен(ФормаОбработки) Экспорт

	СписокЦенКСогласованию = ФормаОбработки["СписокЦенКСогласованию"];
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаСогласованиеЦен();
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	СписокЦенКСогласованию.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Функция ЗаписьРеквизитыНоменклатура(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРеквизитовНоменклатуры();
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭлементИзменен_КПП_Опт ИЛИ Выборка.ЭлементИзменен_КПП_Опт_НеПересчитыватьАвтоматически Тогда
			Если Не ЗаписатьКПП(Выборка,"КПП_Опт") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЭлементИзменен_КПП_Розница ИЛИ Выборка.ЭлементИзменен_КПП_Розница_НеПересчитыватьАвтоматически Тогда
			Если Не ЗаписатьКПП(Выборка,"КПП_Розница") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЭлементИзменен_ТоварнаяКатегория Тогда
			Если Не ЗаписатьТоварнуюКатегорию(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЭлементИзменен_ЦеноваяГруппа Тогда
			Если Не ЗаписатьЦеновуюГруппу(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЭлементИзменен_Дедлайн Тогда
			Если Не ЗаписатьДедлайнЦеновойГруппы(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// http://r.ktc-ua.com/issues/5329
		Если Выборка.ЭлементИзменен_НеВыгружатьНаKtcUa Тогда
			Если Не ЗаписатьСвойствоНеВыгружатьНаKtcUa(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// http://r.ktc-ua.com/issues/5329
		Если Выборка.ЭлементИзменен_НеВыгружатьНаOrderB2b Тогда
			Если Не ЗаписатьСвойствоНеВыгружатьНаOrderB2b(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// http://r.ktc-ua.com/issues/5329
		Если Выборка.ЭлементИзменен_Гарантия Тогда
			Если Не ЗаписатьСвойствоГарантия(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторКоманды = "ПровестиСогласованиеЦен" Тогда
		
		ВыполнитьСогласованиеЦен(ПараметрыКоманды.СписокЦенКСогласованию);
		
	ИначеЕсли ИдентификаторКоманды = "ПровестиИзменениеПозиций" Тогда
		
		НачатьТранзакцию();
		
		Если Не ЗаписьРеквизитыНоменклатура(ПараметрыКоманды.СписокНоменклатуры) Тогда
			ОтменитьТранзакцию();
			ВызватьИсключение НСтр("ru='Не удалось виполнить запись реквизитов номенклатуры.'");
			Возврат;
		КонецЕсли;
		
		Если Не СоздатьДокументУстановкиЦен(ПараметрыКоманды.СписокВидовЦен, ПараметрыКоманды.СписокНоменклатуры) Тогда
			ОтменитьТранзакцию();
			ВызватьИсключение НСтр("ru='Не удалось провести документ установки цен.'");
			Возврат;
		КонецЕсли;
		
		Если Не СогласоватьТоварыПоЗамене(ПараметрыКоманды.СписокНоменклатуры) Тогда
			ОтменитьТранзакцию();
			ВызватьИсключение НСтр("ru='Не удалось выполнить движения по замене.'");
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
Функция СогласоватьТоварыПоЗамене(СписокНоменклатуры)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаТоварыПоЗамене();
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка 							= Новый БлокировкаДанных;
	ЭлементБлокировки 					= Блокировка.Добавить("РегистрСведений.Замена_СогласованиеНоменклатуры");
	ЭлементБлокировки.ИсточникДанных 	= РезультатЗапроса;
	ЭлементБлокировки.Режим				= РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаявкаСервисногоЦентра", "ЗаявкаСервисногоЦентра");
	Блокировка.Заблокировать();

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.Замена_СогласованиеНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.ЗаявкаСервисногоЦентра.Установить(Выборка.ЗаявкаСервисногоЦентра);
		НаборЗаписей.Прочитать();
		
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.Цена 		= Выборка.Цена;
			Запись.Согласовано 	= Истина;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // СогласоватьТоварыПоЗамене()

Функция ТекстЗапросаТоварыПоЗамене()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СписокНоменклатуры.Ссылка 					КАК Номенклатура,
	               |	СписокНоменклатуры.НоваЦена					КАК НоваЦена,
	               |	СписокНоменклатуры.ЦенаИзДокумента			КАК ЦенаИзДокумента,
	               |	СписокНоменклатуры.ЗаявкаСервисногоЦентра	КАК ЗаявкаСервисногоЦентра,
	               |	СписокНоменклатуры.Согласовано 				КАК Согласовано
	               |ПОМЕСТИТЬ СписокНоменклатуры
	               |ИЗ
	               |	&СписокНоменклатуры КАК СписокНоменклатуры
	               |ГДЕ
	               |	СписокНоменклатуры.Согласовано = ИСТИНА
				   |;
				   |
				   |ВЫБРАТЬ
				   |	Номенклатура 			КАК Номенклатура,
				   |	ЗаявкаСервисногоЦентра	КАК ЗаявкаСервисногоЦентра,
				   |	НоваЦена				КАК Цена
				   |ИЗ
				   |	СписокНоменклатуры";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТоварыПоЗамене()
 
 



Процедура ЗаполнитьСтруктуруДействий(СтруктураДействий,ОбъектДокумента)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДокумента);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"					,СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС"					,СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
КонецПроцедуры

Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки");
	
КонецФункции


 

Функция СоздатьДокументУстановкиЦен(СписокВидовЦен, СписокНоменклатуры)
		
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументаУстановкиЦен(СписокВидовЦен);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);

	РезультатыЗапроса = Запрос.Выполнить();
	
	Если РезультатыЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса.Выбрать();
	
	ДокументОбъект 				 = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокументОбъект.Дата 		 = ТекущаяДата();
	ДокументОбъект.Комментарий   = "Ручная установка цены";
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Статус		 = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	ВидыЦен 	= ИнициализироватьТаблицуВидыЦены();
	Товары  	= ИнициализироватьТаблицуТовары();
	ВалютаУпр   = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Для Каждого ВидЦены ИЗ СписокВидовЦен Цикл
			
			Инд = ВидЦены.ИндексКолонки;
			
			Если ВыборкаДетальныеЗаписи["ПроцентИзменен_" + Инд] ИЛИ ВыборкаДетальныеЗаписи["ЭлементИзменен_ВалютаЦены" + Инд] Тогда
				
				ВидЦеныДок = ВидЦены.ВидЦены;
				ВалютаЦены = ВыборкаДетальныеЗаписи["ВалютаЦены" + Инд];
				Цена	   = ПолучитьЦенуПоКурсу(ВыборкаДетальныеЗаписи["ВидЦены_УпрУч" + Инд], ВыборкаДетальныеЗаписи["ВидЦены_РеглУч" + Инд], ВидЦеныДок, ВалютаУпр, ВалютаРегл, ВалютаЦены);
				
				Если Цена = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока 					= Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
				НоваяСтрока.ВидЦены 			= ВидЦеныДок;
				НоваяСтрока.Цена 				= Цена;
				НоваяСтрока.ЦенаИзмененаВручную = Истина;
				НоваяСтрока.Валюта				= ВалютаЦены;
				
				СтруктураПоиска = Новый Структура("ВидЦены", ВидЦеныДок);
				РезультатПоиска = ВидыЦен.НайтиСтроки(СтруктураПоиска);
				
				Если РезультатПоиска.Количество() = 0 Тогда
					НоваяСтрока = ВидыЦен.Добавить();
					НоваяСтрока.ВидЦены = ВидЦеныДок;
				КонецЕсли;
						
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументОбъект.ВидыЦен.Загрузить(ВидыЦен);
	ДокументОбъект.Товары.Загрузить(Товары);                                                                                                   
				
	Если РольДоступна("УстановкаЦенНоменклатурыБезСогласования") ИЛИ РольДоступна("ПолныеПрава") Тогда
		Попытка
	 		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	Иначе
		
		ДокументОбъект.Статус		= Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
		БизнесОбъект 				= БизнесПроцессы.СогласованиеЦенНоменклатуры.СоздатьБизнесПроцесс();
		БизнесОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
		БизнесОбъект.Предмет    	= ДокументОбъект.Ссылка;
		БизнесОбъект.ДатаНачала 	= ТекущаяДата();
		БизнесОбъект.Дата			= ТекущаяДата();
		БизнесОбъект.Важность		= Перечисления.ВариантыВажностиЗадачи.Высокая;
		БизнесОбъект.ДатаЗавершения = КонецДня(ТекущаяДата()) + 1;
		
		Для Каждого Строка Из ДокументОбъект.Товары Цикл	
			БизнесОбъект.Наименование = БизнесОбъект.Наименование 
										+ "Номенклатура: " + Строка.Номенклатура 
										+ ", Код: " + Строка.Номенклатура.Код 
										+ ", Вид цены: " +  Строка.ВидЦены 
										+ ", Цена: " + Строка.Цена + " " + Символы.ПС;				
		КонецЦикла;
		
		Попытка
			БизнесОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
 
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции


Процедура ВыполнитьСогласованиеЦен(ТаблицаЦен)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаЦеныКСогласованию();
	
	Запрос.УстановитьПараметр("СписокЦен", ТаблицаЦен);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
	Блокировка 							= Новый БлокировкаДанных;
	ЭлементБлокировки 					= Блокировка.Добавить("РегистрСведений.ALPS_ЦеныНоменклатурыНаСогласовани");
	ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных 	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-3];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЦены", "ВидЦены");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();

	ВыборкаОтменаСогласования 	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выбрать();
	ТаблицаЦеныКСогласованию   	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить();
	ТаблицаВидыЦенКСогласованию = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	
	Пока ВыборкаОтменаСогласования.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ALPS_ЦеныНоменклатурыНаСогласовани.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЦены.Установить(ВыборкаОтменаСогласования.ВидЦены);
		НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаОтменаСогласования.Номенклатура);
		Попытка
	    	НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			СтрокаИсключения = НСтр("ru='Не удалось отменить согласование для %1 цены и %2 номенклатуры'");
			СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаИсключения, ВыборкаОтменаСогласования.ВидЦены, ВыборкаОтменаСогласования.Номенклатура);
			ВызватьИсключение СтрокаИсключения;
			Возврат;
		КонецПопытки;
	КонецЦикла;                          
	
	Если ТаблицаЦеныКСогласованию.Количество() > 0 И ТаблицаВидыЦенКСогласованию.Количество() > 0 Тогда
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		СтрокаСогласования  = НСтр("ru='Длокумент создан ппо согласованию %1'");
		СтрокаСогласования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаИсключения, СтрокаСогласования);
		
		ПараметрыОбъекта 				= git_Templates.ПолучитьШаблонУстановкаЦенНоменклатуры();
		ПараметрыОбъекта.Ответственный 	= ТекущийПользователь;
		ПараметрыОбъекта.Комментарий 	= СтрокаСогласования;
		ПараметрыОбъекта.Согласован		= Истина;
		ПараметрыОбъекта.Статус			= Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
		ПараметрыОбъекта.Товары			= ТаблицаЦеныКСогласованию;
		ПараметрыОбъекта.ВидыЦен		= ТаблицаВидыЦенКСогласованию;
		ПараметрыОбъекта.Дата			= ТекущаяДатаСеанса();
		
		СтруктураОшибок = Новый Структура;
		
		ДокОбъект = git_Objcon.СоздатьДокумент("УстановкаЦенНоменклатуры", ПараметрыОбъекта, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			СтрокаИсключения = "";
			Для Каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				СтрокаИсключения = СтрокаИсключения + ОшибкаИзСтруктуры.Значение + Символы.ПС;
			КонецЦикла;
			ОтменитьТранзакцию();
			ВызватьИсключение СтрокаИсключения;
			Возврат;
		КонецЕсли;
		
		Попытка
	    	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОтменитьТранзакцию();
			СтрокаИсключения = НСтр("ru='Не провести документ установки цен номенклатуры по согласованию.'");
			ВызватьИсключение СтрокаИсключения;
			Возврат;
		КонецПопытки;
		
		Для Каждого СтрокаТаблицы Из ТаблицаЦеныКСогласованию Цикл
			НаборЗаписей = РегистрыСведений.ALPS_ЦеныНоменклатурыНаСогласовани.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидЦены.Установить(СтрокаТаблицы.ВидЦены);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицы.Номенклатура);
			Попытка
		    	НаборЗаписей.Записать();
			Исключение
				ОтменитьТранзакцию();
				СтрокаИсключения = НСтр("ru='Не удалось завершить процедуру согласования для %1 цены и %2 номенклатуры'");
				СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаИсключения, СтрокаТаблицы.ВидЦены, СтрокаТаблицы.Номенклатура);
				ВызватьИсключение СтрокаИсключения;
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры
 


#Область ТекстыЗапроса

Функция ТекстЗапросаВыгрузкиНоменклатуры(ФормаОбработки, 
											ЗаказПоставщику, 
											ЗаказКлиента, 
											ДокументСсылка, 
											МассивНоменклатуры, 
											ЗаполнятьПоЗамене,
											ПолеСортировки,
											Сортировка_Направление)
	
	ТекстЗапроса = "
			|%1
			|
			|ВЫБРАТЬ
			|	СпрНоменклатура.Номенклатура							КАК Номенклатура,
			|	СпрНоменклатура.Характеристика							КАК Характеристика,
			|	СпрНоменклатура.Номенклатура.ВидНоменклатуры			КАК ВидНоменклатуры,
			|	ЕСТЬNULL(КПП_Опт.Значение, 0) 							КАК КПП_Опт,
			|	ЕСТЬNULL(КПП_Опт.НеПересчитыватьАвтоматически, ЛОЖЬ)	КАК КПП_Опт_НеПересчитыватьАвтоматически,
			|	ЕСТЬNULL(КПП_Розница.Значение, 0) 						КАК КПП_Розница,
			|	ЕСТЬNULL(КПП_Розница.НеПересчитыватьАвтоматически, ЛОЖЬ)КАК КПП_Розница_НеПересчитыватьАвтоматически,
			|	ЕСТЬNULL(ЗаработокОпт.Значение, 0) 						КАК ЗаработокОпт,
			|	ЕСТЬNULL(КешЦенРозница.Цена,0) 							КАК ЦенРозница,
			|	СвОстаткиДругие.ВНаличииОстаток + ЕСТЬNULL(ОбеспениеОстаткиДругие.НаличиеСоСкладаОстаток, 0) КАК ОбщееНаличие,
			|	СпрНоменклатура.Номенклатура.ТоварнаяКатегория 			КАК ТоварнаяКатегория,
			|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа 				КАК ЦеноваяГруппа,
			|	%6
			|	СпрНоменклатура.Номенклатура.ДедлайнЦеновойГруппы		КАК Дедлайн
			|  
			|ПОМЕСТИТЬ ПредварительныйСписок
			|
			|ИЗ
			|	СпрНоменклатура КАК СпрНоменклатура
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(&Дата,) КАК КПП_Опт
			|ПО СпрНоменклатура.Номенклатура = КПП_Опт.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(&Дата, ) КАК КПП_Розница
			|ПО СпрНоменклатура.Номенклатура = КПП_Розница.Номенклатура
			
			//Товары на других складах    http://r.ktc-ua.com/issues/4989
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ СпрНоменклатура) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК СвОстаткиДругие					 
			|ПО СвОстаткиДругие.Номенклатура = СпрНоменклатура.Номенклатура 
			|
			//Товары по обособленому учете на других складах   http://r.ktc-ua.com/issues/4989
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ СпрНоменклатура) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК ОбеспениеОстаткиДругие
			|ПО (ОбеспениеОстаткиДругие.Номенклатура = СпрНоменклатура.Номенклатура)

			//Зароботок менеджера Опт
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗаработокОпт
			|ПО (СпрНоменклатура.Номенклатура = (ВЫРАЗИТЬ(ЗаработокОпт.Объект КАК Справочник.Номенклатура)))
			|И (ЗаработокОпт.Свойство = &СвойствоЗаработокМенеджераОпт)
			|
			//Зароботок менеджера розница опт (новая)
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,ВидЦены = &ВидЦеныРозница И Номенклатура в (ВЫБРАТЬ Номенклатура из СпрНоменклатура)) КАК КешЦенРозница
			|ПО СпрНоменклатура.Номенклатура = КешЦенРозница.Номенклатура
			|;
			|
			|// Производим выборку дополнительного свойства «Не выгружать на сайт ktc-ua.com»
			|// http://r.ktc-ua.com/issues/5329
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(РегистрДопСведений.Объект КАК Справочник.Номенклатура) КАК Номенклатура,
			|	РегистрДопСведений.Значение										КАК НеВыгружатьНаKtcUa
			|ПОМЕСТИТЬ ТаблицаСвойствKtcUaCom
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК РегистрДопСведений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпрНоменклатура КАК СпрНоменклатура
			|		ПО ВЫРАЗИТЬ(РегистрДопСведений.Объект КАК Справочник.Номенклатура) = СпрНоменклатура.Номенклатура
			|			И РегистрДопСведений.Свойство = &СвойствоНеВыгружатьKtcUaCom
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|// Производим выборку дополнительного свойства «Не выгружать на сайт order-b2b.com»
			|// http://r.ktc-ua.com/issues/5329
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(РегистрДопСведений.Объект КАК Справочник.Номенклатура) КАК Номенклатура,
			|	РегистрДопСведений.Значение										КАК НеВыгружатьНаOrderB2b
			|ПОМЕСТИТЬ ТаблицаСвойствOrderB2b
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК РегистрДопСведений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпрНоменклатура КАК СпрНоменклатура
			|		ПО ВЫРАЗИТЬ(РегистрДопСведений.Объект КАК Справочник.Номенклатура) = СпрНоменклатура.Номенклатура
			|			И РегистрДопСведений.Свойство = &СвойствоНеВыгружатьOrderB2b
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|// Производим выборку дополнительного реквизита «Гарантия»
			|// http://r.ktc-ua.com/issues/5329
			|ВЫБРАТЬ
			|	ДопРеквизиты.Ссылка 	КАК Номенклатура,
			|	ДопРеквизиты.Значение 	КАК Гарантия
			|ПОМЕСТИТЬ ТаблицаГарантии
			|ИЗ
			|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопРеквизиты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпрНоменклатура КАК СпрНоменклатура
			|		ПО ДопРеквизиты.Ссылка = СпрНоменклатура.Номенклатура
			|			И ДопРеквизиты.Свойство = &СвойствоГарантия
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|; 
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
			|	СУММА(ОстаткиПоПартиям.КоличествоОстаток) КАК КоличествоКонечныйОстаток,
			|	СУММА(ВЫБОР
			|			КОГДА СебестоимостьПоПартиям.ЦенаПослеОплаты <> 0
			|				ТОГДА СебестоимостьПоПартиям.ЦенаПослеОплаты
			|			ИНАЧЕ СебестоимостьПоПартиям.ЦенаПрихода + (ВЫРАЗИТЬ(СебестоимостьПоПартиям.ЦенаПрихода - СебестоимостьПоПартиям.ЦенаПрихода * КурсыВалютПриход.Курс / КурсыВалютОстрочка.Курс КАК ЧИСЛО(15, 2)))
			|		КОНЕЦ) КАК ИтоговаяСебестоимость,
			|	СУММА(ВЫБОР
			|			КОГДА &КонецДня > СебестоимостьПоПартиям.ДатаПлановойОплаты
			|				ТОГДА ВЫРАЗИТЬ(ВЫБОР
			|							КОГДА СебестоимостьПоПартиям.ЦенаПослеОплаты <> 0
			|									ИЛИ СебестоимостьПоПартиям.ВалютаПрихода = КурсыВалютПриход.Валюта
			|								ТОГДА СебестоимостьПоПартиям.ЦенаПослеОплаты
			|							ИНАЧЕ СебестоимостьПоПартиям.ЦенаПрихода * КурсыВалютПриход.Курс / КурсыВалютОстрочка.Курс
			|						КОНЕЦ * РАЗНОСТЬДАТ(СебестоимостьПоПартиям.ДатаПлановойОплаты, &КонецДня, ДЕНЬ) / 12 / 30 * 0.36 КАК ЧИСЛО(15, 2))
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Прострочка
			|ПОМЕСТИТЬ КешСебестоимостьТоваров
			|ИЗ
			|	РегистрНакопления.КТС_ДвижениеТоваровПоставщиков.Остатки(&КонецДня, 
			|		АналитикаУчетаНоменклатуры.Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК ОстаткиПоПартиям
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ДвижениеТоваровПоставщиков КАК СебестоимостьПоПартиям
			|		ПО (ВЫБОР
			|				КОГДА ТИПЗНАЧЕНИЯ(СебестоимостьПоПартиям.Регистратор) = ТИП(Документ.ВводОстатков)
			|					ТОГДА (ВЫРАЗИТЬ(СебестоимостьПоПартиям.Регистратор КАК Документ.ВводОстатков)) = (ВЫРАЗИТЬ(ОстаткиПоПартиям.ДокументПоступления КАК Документ.ВводОстатков))
			|				КОГДА ТИПЗНАЧЕНИЯ(СебестоимостьПоПартиям.Регистратор) = ТИП(Документ.ВозвратТоваровОтКлиента)
			|					ТОГДА (ВЫРАЗИТЬ(СебестоимостьПоПартиям.Регистратор КАК Документ.ВозвратТоваровОтКлиента)) = (ВЫРАЗИТЬ(ОстаткиПоПартиям.ДокументПоступления КАК Документ.ВозвратТоваровОтКлиента))
			|				КОГДА ТИПЗНАЧЕНИЯ(СебестоимостьПоПартиям.Регистратор) = ТИП(Документ.ОприходованиеИзлишковТоваров)
			|					ТОГДА (ВЫРАЗИТЬ(СебестоимостьПоПартиям.Регистратор КАК Документ.ОприходованиеИзлишковТоваров)) = (ВЫРАЗИТЬ(ОстаткиПоПартиям.ДокументПоступления КАК Документ.ОприходованиеИзлишковТоваров))
			|				КОГДА ТИПЗНАЧЕНИЯ(СебестоимостьПоПартиям.Регистратор) = ТИП(Документ.ПоступлениеТоваровУслуг)
			|					ТОГДА (ВЫРАЗИТЬ(СебестоимостьПоПартиям.Регистратор КАК Документ.ПоступлениеТоваровУслуг)) = (ВЫРАЗИТЬ(ОстаткиПоПартиям.ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг))
			|				КОГДА ТИПЗНАЧЕНИЯ(СебестоимостьПоПартиям.Регистратор) = ТИП(Документ.ПрочееОприходованиеТоваров)
			|					ТОГДА (ВЫРАЗИТЬ(СебестоимостьПоПартиям.Регистратор КАК Документ.ПрочееОприходованиеТоваров)) = (ВЫРАЗИТЬ(ОстаткиПоПартиям.ДокументПоступления КАК Документ.ПрочееОприходованиеТоваров))
			|				КОГДА ТИПЗНАЧЕНИЯ(СебестоимостьПоПартиям.Регистратор) = ТИП(Документ.СборкаТоваров)
			|					ТОГДА (ВЫРАЗИТЬ(СебестоимостьПоПартиям.Регистратор КАК Документ.СборкаТоваров)) = (ВЫРАЗИТЬ(ОстаткиПоПартиям.ДокументПоступления КАК Документ.СборкаТоваров))
			|			КОНЕЦ)
			|			И (СебестоимостьПоПартиям.АналитикаУчетаНоменклатуры.Номенклатура = ОстаткиПоПартиям.АналитикаУчетаНоменклатуры.Номенклатура)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(&КонецДня, 
			|			АналитикаУчетаНоменклатуры.Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)) КАК УчетСебестоимости
			|		ПО (УчетСебестоимости.АналитикаУчетаНоменклатуры = ОстаткиПоПартиям.АналитикаУчетаНоменклатуры)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
			|		ПО ОстаткиПоПартиям.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсыВалютПриход
			|		ПО (КурсыВалютПриход.НачалоПериода <= СебестоимостьПоПартиям.Период)
			|			И (КурсыВалютПриход.КонецПериода > СебестоимостьПоПартиям.Период)
			|			И (КурсыВалютПриход.Валюта = &ВалютаУпрУч)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсыВалютОстрочка
			|		ПО (КурсыВалютОстрочка.НачалоПериода <= СебестоимостьПоПартиям.ДатаПлановойОплаты)
			|			И (КурсыВалютОстрочка.КонецПериода > СебестоимостьПоПартиям.ДатаПлановойОплаты)
			|			И (КурсыВалютОстрочка.Валюта = &ВалютаУпрУч)
			|ГДЕ
			|	ОстаткиПоПартиям.КоличествоОстаток <> 0

			|СГРУППИРОВАТЬ ПО
			|	АналитикаНоменклатуры.Номенклатура

			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСебестоимостьТоваров.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(КешСебестоимостьТоваров.КоличествоКонечныйОстаток, 0) = 0
			|			ТОГДА 0
			|		ИНАЧЕ (КешСебестоимостьТоваров.ИтоговаяСебестоимость + КешСебестоимостьТоваров.Прострочка) / ЕСТЬNULL(КешСебестоимостьТоваров.КоличествоКонечныйОстаток, 1)
			|	КОНЕЦ КАК Себестоимость
			|ПОМЕСТИТЬ ТаблицаСебестоимость
			|ИЗ
			|	КешСебестоимостьТоваров КАК КешСебестоимостьТоваров

			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|
			|;
			|
			|ВЫБРАТЬ
			|	СпрНоменклатура.Номенклатура									КАК Ссылка,
			|	СпрНоменклатура.Характеристика									КАК Характеристика,
			|	СпрНоменклатура.ВидНоменклатуры									КАК ВидНоменклатуры,
			|	СпрНоменклатура.КПП_Опт											КАК КПП_Опт,
			|	СпрНоменклатура.КПП_Опт_НеПересчитыватьАвтоматически			КАК КПП_Опт_НеПересчитыватьАвтоматически,
			|	СпрНоменклатура.КПП_Розница										КАК КПП_Розница,
			|	СпрНоменклатура.КПП_Розница_НеПересчитыватьАвтоматически		КАК КПП_Розница_НеПересчитыватьАвтоматически,
			|	СпрНоменклатура.ЗаработокОпт 									КАК ЗаработокОпт,
			|	СпрНоменклатура.ОбщееНаличие 									КАК ОбщееНаличие,
			|	СпрНоменклатура.ТоварнаяКатегория 								КАК ТоварнаяКатегория,
			|	СпрНоменклатура.ЦеноваяГруппа 									КАК ЦеноваяГруппа,
			|	СпрНоменклатура.Дедлайн											КАК Дедлайн,
			|%6
			|	ЕСТЬNULL(ТаблицаСебестоимость.Себестоимость, 0)					КАК Себестоимость,
			|	(ЕСТЬNULL(РС_КПП_Процент.Значение,0)/100)*ЕСТЬNULL(СпрНоменклатура.ЦенРозница,0) КАК ЗаработокРозница,
			|   ЕСТЬNULL(РС_КПП_Процент.Значение,0)								КАК КПП_Розница_Процент,
			|   ЕСТЬNULL(РС_КПП_ПроцентОпт.Значение,0)							КАК КПП_Опт_Процент,
			|	ЕСТЬNULL(ТаблицаСвойствKtcUaCom.НеВыгружатьНаKtcUa, ЛОЖЬ)		КАК НеВыгружатьНаKtcUa,
			|	ЕСТЬNULL(ТаблицаСвойствOrderB2b.НеВыгружатьНаOrderB2b, ЛОЖЬ)	КАК НеВыгружатьНаOrderB2b,
			|	ЕСТЬNULL(ТаблицаГарантии.Гарантия, """")						КАК Гарантия
			|%4
			|%2
			|
			|ИЗ
			|	ПредварительныйСписок КАК СпрНоменклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница.СрезПоследних(&Дата,ВидНоменклатуры В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура.ВидНоменклатуры ИЗ СпрНоменклатура)) КАК РС_КПП_Процент
			|ПО СпрНоменклатура.КПП_Розница = РС_КПП_Процент.КПП 
			|И  СпрНоменклатура.ВидНоменклатуры = РС_КПП_Процент.ВидНоменклатуры
		    |
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыОпт.СрезПоследних(&Дата,ВидНоменклатуры В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура.ВидНоменклатуры ИЗ СпрНоменклатура)) КАК РС_КПП_ПроцентОпт
			|ПО СпрНоменклатура.КПП_Опт = РС_КПП_ПроцентОпт.КПП 
			|И  СпрНоменклатура.ВидНоменклатуры = РС_КПП_ПроцентОпт.ВидНоменклатуры
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойствKtcUaCom КАК ТаблицаСвойствKtcUaCom
			|ПО СпрНоменклатура.Номенклатура = ТаблицаСвойствKtcUaCom.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойствOrderB2b КАК ТаблицаСвойствOrderB2b
			|ПО СпрНоменклатура.Номенклатура = ТаблицаСвойствOrderB2b.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГарантии КАК ТаблицаГарантии
			|ПО СпрНоменклатура.Номенклатура = ТаблицаГарантии.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСебестоимость КАК ТаблицаСебестоимость
			|ПО ТаблицаСебестоимость.Номенклатура = СпрНоменклатура.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГривневогоТовара КАК ТаблицаГривневогоТовара
			|ПО ТаблицаГривневогоТовара.Номенклатура = СпрНоменклатура.Номенклатура
			| 			
			|%3
			|%5
			|%7
			|";
	ДополнительныхКолонок		= ПолучитьТекстЗапросаДополнительныхКолонок(ФормаОбработки);
	ДопКолонкиПоЗаказуПостащика	= ПолучитьТекстЗапросаДопКолонокПоЗаказуПоставщика(ЗаказПоставщику);
	ТекстЗапроса 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
													ТекстЗапросаСпрНоменклатуры(ЗаказПоставщику, ЗаказКлиента, ДокументСсылка, МассивНоменклатуры, ЗаполнятьПоЗамене),
													ДополнительныхКолонок.ШапкаЗапроса,
													ДополнительныхКолонок.СоединениеЗапроса,
													ДопКолонкиПоЗаказуПостащика.ШапкаЗапроса,
													ДопКолонкиПоЗаказуПостащика.СоединениеЗапроса,
													ТекстЗапросаЗамена(ЗаполнятьПоЗамене),
													ТекстЗапросаСортировка(ПолеСортировки, Сортировка_Направление));
	
													
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСпрНоменклатуры(ЗаказПоставщику,ЗаказКлиента, ДокументСсылка, МассивНоменклатуры, ЗаполнятьПоЗамене)
	
	ТекстЗапроса = "
				   |%1
				   | ;
	               ////////////////////////////////////////////////////////////////////////////////
				   //1
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Период КАК Период
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаРеглУч
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)),
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаУпрУч
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
				   //2
	               |ВЫБРАТЬ
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период КАК НачалоПериода,
	               |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	               |ПОМЕСТИТЬ ТаблицаКурсов
	               |ИЗ
	               |	КурсыВалют КАК КурсыВалют
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	               |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	               |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
				   //3
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыСрезПоследних.Характеристика,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаУпрУчВходная,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаРеглУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаРеглУчВходная
	               |ПОМЕСТИТЬ КешЦенВходная
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,
	               |												Номенклатура В	(ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
	               |												И ВидЦены = &ВидЦеныВходная
	               |													) КАК ЦеныНоменклатурыСрезПоследних
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО 	(КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И 	(КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И 	(КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
				   //3
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыСрезПоследних.Характеристика,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаУпрУч,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаРеглУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаРеглУч,
				   |	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
				   |	ВЫБОР
				   |		КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦеныВходная
				   |			ТОГДА ИСТИНА
				   |		КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦеныСпец
				   |			ТОГДА ИСТИНА
				   |		КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = &ВидЦеныПартнер
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ
				   |			ЛОЖЬ
				   |	КОНЕЦ КАК ИзменятьВалюту
	               |ПОМЕСТИТЬ КешЦенИзНастроек
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата
	               |													, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
	               |													И ВидЦены В (&СписокВидовЦен)
	               |													) КАК ЦеныНоменклатурыСрезПоследних
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
				   |
	               |;
				   |
				   //////////////////////////////////////////////////////////////////////////////
				   //4
				   |ВЫБРАТЬ
				   |	Номенклатура 	КАК Номенклатура,
				   |	ИСТИНА 			КАК ГривневыйТовар
				   |ПОМЕСТИТЬ ТаблицаГривневогоТовара
				   |ИЗ
				   |	РегистрСведений.АМ_ГривневыйТовар.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура))
				   |ГДЕ
				   |	ГривневыйТовар = ИСТИНА
				   |;
				   //////////////////////////////////////////////////////////////////////////////
				   //5
				   |ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Номенклатура,
				   |	ЦеныНоменклатуры.Характеристика,
	               |	ЦеныНоменклатуры.ВидЦены,
	               |	ЦеныНоменклатуры.ЦенаУпрУч КАК ЦенаУпрУч,
	               |	ЦеныНоменклатуры.ЦенаРеглУч КАК ЦенаРеглУч,
				   |	ВЫБОР
	               |		КОГДА ЦеныНоменклатуры.ВидЦены = КешЦенВходная.ВидЦены
	               |			ТОГДА  0
				   |		ИНАЧЕ 100*((ISNULL(ЦеныНоменклатуры.ЦенаУпрУч,1)/ISNULL(КешЦенВходная.ЦенаУпрУчВходная,1))-1)
	               |	КОНЕЦ КАК ПроцентНаценки,
				   |    ЦеныНоменклатуры.Валюта КАК Валюта,
				   |	ЦеныНоменклатуры.ИзменятьВалюту КАК ИзменятьВалюту
	               |ПОМЕСТИТЬ КешЦен
				   |
				   |ИЗ
				   |   КешЦенИзНастроек КАК  ЦеныНоменклатуры
				   |
				   |ЛЕВОЕ СОЕДИНЕНИЕ КешЦенВходная КАК КешЦенВходная
				   |ПО (ЦеныНоменклатуры.Номенклатура = КешЦенВходная.Номенклатура)
	               |И (ЦеныНоменклатуры.Характеристика = КешЦенВходная.Характеристика)
				   |;
				   | %2
				   //////////////////////////////////////////////////////////////////////////////
				   //6
				   |ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА ЦеныНоменклатурыПоставщиковСрезПоследних.Период > &НачалоДня
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Сегодня,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Соглашение,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Цена
				   |ПОМЕСТИТЬ КешЦенПоставщиков
				   |ИЗ
				   |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Дата
				   |															,Соглашение В (&СписокВидовЦенПоставщика)
				   |							                                И (Номенклатура, Характеристика) В	(ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, Характеристика ИЗ СпрНоменклатура)
				   |															) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
				   |;
				   //////////////////////////////////////////////////////////////////////////////
				   //7
				   |ВЫБРАТЬ 
				   |	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура, 
				   | 	Значение,
				   | 	Свойство
				   |
				   |ПОМЕСТИТЬ ДопСведения
				   |
				   | ИЗ РегистрСведений.ДополнительныеСведения 
				   |
				   |ГДЕ 
				   |	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
				   |И 	Свойство В (&СписокДопСвойства)
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Номенклатура,
				   |    Свойство
				   |;";
				   
	Если ЗаполнятьПоЗамене Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаШапкаЗамена(),
																				"");			  
	ИначеЕсли ЗаказПоставщику.Пустая() И ЗаказКлиента.Пустая() И ДокументСсылка.Пустая() Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаШапкаСпрНоменклатуры(МассивНоменклатуры),
																				"");
	ИначеЕсли Не ДокументСсылка.Пустая() Тогда  
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаТоварыИзДокументСсылка(), 
																				" ");
	ИначеЕсли Не ЗаказПоставщику.Пустая() Тогда  
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаТоварыИзЗаказаПоставщика(), 
																				ПолучитьТекстЗапросаКурсиЦенИзЗаказаПоставщика());
	ИначеЕсли Не ЗаказКлиента.Пустая() Тогда  
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаТоварыИзЗаказКлиента(), 
																				"");
	КонецЕсли;			   


				   
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТоварыИзДокументСсылка()
	ТекстЗапроса	=	"ВЫБРАТЬ
	            	 	|	Номенклатура,
						|	Характеристика КАК Характеристика,
	            	 	|	СУММА(Количество) 	КАК Количество,
	            	 	|	СРЕДНЕЕ(Цена) 		КАК Цена,
	            	 	|	&ВалютаДокумента	КАК Валюта 
	            	 	|ПОМЕСТИТЬ СпрНоменклатура
	            	 	|ИЗ
	            	 	|	Документ.%ДокументСсылка%.Товары
	            	 	|ГДЕ
	            	 	|	Ссылка = &ДокументСсылка
	            	 	//|	И НЕ Отменено
	            	 	|
	            	 	|СГРУППИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика
						|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика
						|";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ТекстЗапросаТоварыИзЗаказаПоставщика()
	ТекстЗапроса	=	"ВЫБРАТЬ
	            	 	|	Номенклатура,
						|	Характеристика КАК Характеристика,
	            	 	|	СУММА(Количество) 	КАК Количество,
	            	 	|	СРЕДНЕЕ(Цена) 		КАК Цена,
	            	 	|	Ссылка.Валюта 		КАК Валюта 
	            	 	|ПОМЕСТИТЬ СпрНоменклатура
	            	 	|ИЗ
	            	 	|	Документ.ЗаказПоставщику.Товары
	            	 	|ГДЕ
	            	 	|	Ссылка = &ЗаказПоставщику
	            	 	|	И НЕ Отменено
						|	И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)
	            	 	|
	            	 	|СГРУППИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика,
	            	 	|	Ссылка.Валюта
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика
						|";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ТекстЗапросаТоварыИзЗаказКлиента()
	ТекстЗапроса	=	"ВЫБРАТЬ
	            	 	|	Номенклатура,
						|	Характеристика КАК Характеристика,
	            	 	|	СУММА(Количество) 	КАК Количество,
	            	 	|	СРЕДНЕЕ(Цена) 		КАК Цена,
	            	 	|	Ссылка.Валюта 		КАК Валюта 
	            	 	|ПОМЕСТИТЬ СпрНоменклатура
	            	 	|ИЗ
	            	 	|	Документ.ЗаказКлиента.Товары
	            	 	|ГДЕ
	            	 	|	Ссылка = &ЗаказКлиента
	            	 	|	И НЕ Отменено
						|	И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)
	            	 	|
	            	 	|СГРУППИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика,
	            	 	|	Ссылка.Валюта
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика
						|";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ТекстЗапросаСортировка(знач ПолеСортировки, знач Сортировка_Направление)

	Если ПолеСортировки = "Свойство1" Тогда
		ПолеСортировки = "КешДопСведения1.Значение";
	ИначеЕсли ПолеСортировки = "Свойство2" Тогда
		ПолеСортировки = "КешДопСведения2.Значение";
	КонецЕсли;
	
	ТекстЗапроса = "
		|УПОРЯДОЧИТЬ ПО
		|	" + ПолеСортировки + " " + Сортировка_Направление;
		
	Возврат ТекстЗапроса

КонецФункции // ТекстЗапросаСортировка()
 


Функция ТекстЗапросаШапкаЗамена()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидНоменклатуры
	               |ПОМЕСТИТЬ ДопустимыеВидыНоменклатуры
	               |ИЗ
	               |	РегистрСведений.КТС_СоответствиеВидНоменклатурыПродактМенеджер 
	               |ГДЕ
	               |	ПродактМенеджер = &Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Замена_СогласованиеНоменклатуры.Номенклатура					КАК Номенклатура,
				   |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)    КАК Характеристика,
	               |	Замена_СогласованиеНоменклатуры.Цена							КАК НоваЦена,
				   |	Замена_СогласованиеНоменклатуры.Цена							КАК ЦенаИзДокумента,
	               |	Замена_СогласованиеНоменклатуры.Валюта         					КАК ВалютаНовойЦены,
				   |	Замена_СогласованиеНоменклатуры.ЗаявкаСервисногоЦентра			КАК ЗаявкаСервисногоЦентра
				   |ПОМЕСТИТЬ СпрНоменклатура
	               |ИЗ
	               |	РегистрСведений.Замена_СогласованиеНоменклатуры КАК Замена_СогласованиеНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДопустимыеВидыНоменклатуры КАК ДопустимыеВидыНоменклатуры
	               |		ПО Замена_СогласованиеНоменклатуры.Номенклатура.ВидНоменклатуры = ДопустимыеВидыНоменклатуры.ВидНоменклатуры
	               |ГДЕ
	               |	Замена_СогласованиеНоменклатуры.Документ ССЫЛКА Документ.ПоступлениеТоваровУслуг
				   |	И Замена_СогласованиеНоменклатуры.Согласовано = ЛОЖЬ";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаШапкаЗамена()

Функция ТекстЗапросаЗамена(ЗаполнятьПоЗамене)

	ТекстЗапроса = "";
	
	Если ЗаполнятьПоЗамене = Ложь Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = "
	| 	СпрНоменклатура.НоваЦена КАК НоваЦена,
	|	СпрНоменклатура.ЦенаИзДокумента КАК ЦенаИзДокумента,
	|	СпрНоменклатура.ВалютаНовойЦены КАК ВалютаНовойЦены,
	|	СпрНоменклатура.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗамена()
 

Функция ТекстЗапросаШапкаСпрНоменклатуры(МассивНоменклатуры)
	ТекстЗапроса	=	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	 	|	Номенклатура.Ссылка КАК Ссылка
	            	 	|ПОМЕСТИТЬ КешНоменклатура
	            	 	|ИЗ
	            	 	|	Справочник.Номенклатура КАК Номенклатура
	            	 	|ГДЕ
	            	 	|	Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры) 
						|   %1
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Ссылка
	            	 	|;
	            	 	|
	            	 	|////////////////////////////////////////////////////////////////////////////////
	            	 	|ВЫБРАТЬ
	            	 	|	КешНоменклатура.Ссылка КАК Номенклатура,
	            	 	|	ЕСТЬNULL(ХарактеристикаПоВидуНом.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
	            	 	|ПОМЕСТИТЬ СпрНоменклатура
	            	 	|ИЗ
	            	 	|	КешНоменклатура КАК КешНоменклатура
	            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаПоВидуНом
	            	 	|		ПО КешНоменклатура.Ссылка.ВидНоменклатуры = ХарактеристикаПоВидуНом.Владелец
	            	 	|
	            	 	|ОБЪЕДИНИТЬ
	            	 	|
	            	 	|ВЫБРАТЬ
	            	 	|	КешНоменклатура.Ссылка,
	            	 	|	ЕСТЬNULL(ХарактеристикиПоНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	            	 	|ИЗ
	            	 	|	КешНоменклатура КАК КешНоменклатура
	            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиПоНоменклатуры
	            	 	|		ПО КешНоменклатура.Ссылка = ХарактеристикиПоНоменклатуры.Владелец
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Номенклатура";
						
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(МассивНоменклатуры.Количество()=0, "", " И Номенклатура.Ссылка В (&МассивНоменклатуры)"));

	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ПолучитьТекстЗапросаДопКолонокПоЗаказуПоставщика(ЗаказПоставщику)
	Шапка = " ";
	Соединения = " ";
	
	Если НЕ ЗаказПоставщику.Пустая() Тогда
		
		Шапка = ",
				//|	КешЦеныИзЗаказаПоставщика.Характеристика 				КАК Характеристика,
				|	КешЦеныИзЗаказаПоставщика.Количество 					КАК КоличествоИзЗаказа,
				|	КешЦеныИзЗаказаПоставщика.ЦенаИзЗаказаПоставщикаУпрУч	КАК ЦенаПоставщикаУпрУч,
				|	КешЦеныИзЗаказаПоставщика.ЦенаИзЗаказаПоставщикаРеглУч	КАК ЦенаПоставщикаРеглУч
				|";
				
		Соединения = "
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешЦеныИзЗаказаПоставщика КАК  КешЦеныИзЗаказаПоставщика
				|ПО СпрНоменклатура.Номенклатура 	= КешЦеныИзЗаказаПоставщика.Номенклатура
				|И СпрНоменклатура.Характеристика  = КешЦеныИзЗаказаПоставщика.Характеристика";
	
	КонецЕсли;
		
	Возврат Новый Структура("ШапкаЗапроса,СоединениеЗапроса",Шапка,Соединения);
КонецФункции // ПолучитьТекстЗапросаДопКолонокПоЗаказуПоставщика()

Функция ПолучитьТекстЗапросаРеквизитовНоменклатуры()

	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КешСписокНоменклатура
				|ИЗ
				|	&СписокНоменклатуры КАК Список
				|;
				|
				|ВЫБРАТЬ
				|  Ссылка КАК Номенклатура,
				|  *
				|ИЗ 
				|	КешСписокНоменклатура
				|
				|ГДЕ
				|	ЭлементИзменен";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРеквизитовНоменклатуры()

Функция ПолучитьТекстЗапросаДополнительныхКолонок(ФормаОбработки)
	
	ШапкаЗапроса 		= "";
	СоединениеЗапроса 	= "";

	СписокВидовЦен				= ФормаОбработки.СписокВидовЦен;
	СписокВидовЦенПоставщика    = ФормаОбработки.СписокЦенПоставщика;
	СписокДопСвойства			= ФормаОбработки.СписокСвойств;
	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд = ВидЦены.ИндексКолонки;
		ШапкаЗапроса = ШапкаЗапроса + ",	
			|ISNULL(КешЦен"+Инд+".ЦенаУпрУч,0) КАК ВидЦены_УпрУч" + Инд + ",
			|ISNULL(КешЦен"+Инд+".ПроцентНаценки,0) КАК Процент" + Инд + ",
			|ISNULL(КешЦен"+Инд+".ЦенаРеглУч,0) КАК ВидЦены_РеглУч" + Инд + ",
			|ВЫБОР
			|	КОГДА КешЦен"+Инд+".Валюта ЕСТЬ NULL
			|		ТОГДА
			|			ВЫБОР	
			|				КОГДА ТаблицаГривневогоТовара.ГривневыйТовар
			|					ТОГДА &ВалютаРеглУч
			|				ИНАЧЕ ВЫРАЗИТЬ(&ВидЦены"+Инд+" КАК Справочник.ВидыЦен).ВалютаЦены
			|			КОНЕЦ
			|	ИНАЧЕ КешЦен"+Инд+".Валюта
			|КОНЕЦ КАК ВалютаЦены" + Инд + ",
			|ВЫБОР
			|	КОГДА КешЦен"+Инд+".ИзменятьВалюту ЕСТЬ NULL
			|		ТОГДА
			|			ВЫБОР ВЫРАЗИТЬ(&ВидЦены"+Инд+" КАК Справочник.ВидыЦен)
			|				КОГДА ВЫРАЗИТЬ(&ВидЦеныВходная КАК Справочник.ВидыЦен)
			|					ТОГДА ИСТИНА
			|				КОГДА ВЫРАЗИТЬ(&ВидЦеныСпец КАК Справочник.ВидыЦен)
			|					ТОГДА ИСТИНА
			|				КОГДА ВЫРАЗИТЬ(&ВидЦеныПартнер КАК Справочник.ВидыЦен)
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ
			|	ИНАЧЕ КешЦен"+Инд+".ИзменятьВалюту
			|КОНЕЦ КАК ИзменятьВалюту" + Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешЦен"+Инд+".Номенклатура
			|И СпрНоменклатура.Характеристика = КешЦен"+Инд+".Характеристика
			|И  &ВидЦены"+Инд+"	= КешЦен"+Инд+".ВидЦены";			
	КонецЦикла;
	
	Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл
		Инд	= ЦенаПоставщика.ИндексКолонки;
		ШапкаЗапроса = ШапкаЗапроса +",	
			|ISNULL(КешДопЦенПоставщика"+Инд+".Цена,0)		КАК ЦенаПоставщика"+Инд+"
			// #5077 для условного оформления цен поставщика
			//{
			|,ISNULL(КешДопЦенПоставщика"+Инд+".Сегодня,0)	КАК ПСЦенаП"+Инд;
			//}#5077
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦенПоставщиков КАК КешДопЦенПоставщика"+Инд+"
			|ПО СпрНоменклатура.Номенклатура	= КешДопЦенПоставщика"+Инд+".Номенклатура
			|И СпрНоменклатура.Характеристика 	= КешДопЦенПоставщика"+Инд+".Характеристика
			|И  &ВидЦеныПоставщика"+Инд+"		= КешДопЦенПоставщика"+Инд+".Соглашение";
	КонецЦикла;

	Для Каждого ДопСвойство Из СписокДопСвойства Цикл
		Инд	= ДопСвойство.ИндексКолонки;		
		ШапкаЗапроса		=	ШапкаЗапроса +",
			|ISNULL(Представление(КешДопСведения"+Инд+".Значение),"""")	КАК Свойство"+Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК КешДопСведения"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопСведения"+Инд+".Номенклатура
			|И  &ДопСвойство"+Инд+"	= КешДопСведения"+Инд+".Свойство";
	КонецЦикла;
		
	Возврат Новый Структура("ШапкаЗапроса, СоединениеЗапроса", ШапкаЗапроса, СоединениеЗапроса);
	
КонецФункции

Функция ПолучитьТекстЗапросаКурсиЦенИзЗаказаПоставщика()
	ТекстЗапроса ="ВЫБРАТЬ
	               |	СпрНоменклатура.Номенклатура,
				   |	СпрНоменклатура.Характеристика,
	               |	СпрНоменклатура.Количество,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.Валюта = &ВалютаУпрУч
	               |			ТОГДА СпрНоменклатура.Цена
	               |		ИНАЧЕ СпрНоменклатура.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаИзЗаказаПоставщикаУпрУч,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.Валюта = &ВалютаРеглУч
	               |			ТОГДА СпрНоменклатура.Цена
	               |		ИНАЧЕ СпрНоменклатура.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаИзЗаказаПоставщикаРеглУч
	               |ПОМЕСТИТЬ КешЦеныИзЗаказаПоставщика
	               |ИЗ
				   |    СпрНоменклатура КАК СпрНоменклатура
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
	               |; ";
	Возврат ТекстЗапроса; 

КонецФункции // ()

Функция ПолучитьТекстЗапросаДокументаУстановкиЦен(СписокВидовЦен)
	
	Отбор 				= "";
	ОтборНулеваяЦена    = "";
	
	КоличествоВидовЦен = СписокВидовЦен.Количество();
	Если КоличествоВидовЦен > 0 Тогда
		ПоследнийВидЦены = СписокВидовЦен[КоличествоВидовЦен-1].ВидЦены;
		ПервыйВидЦены	 = СписокВидовЦен[0].ВидЦены;
	КонецЕсли;
	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд 	= ВидЦены.ИндексКолонки;
		Отбор	= Отбор + "
			|%1 Процент"+Инд+" <> 0
			|ИЛИ ЭлементИзменен_ВалютаЦены" + Инд + " = ИСТИНА
			|"+?(ВидЦены = ПоследнийВидЦены," )", "");
		Если  ВидЦены = ПервыйВидЦены Тогда
			Отбор = СтрЗаменить(Отбор,"%1","И (");
		Иначе
			Отбор = СтрЗаменить(Отбор,"%1","ИЛИ ");
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КешСписокНоменклатура
				|ИЗ
				|	&СписокНоменклатуры КАК Список
				|;
				|
				|ВЫБРАТЬ
				|  Ссылка КАК Номенклатура,
				|  *
				|ИЗ 
				|	КешСписокНоменклатура
				|
				|ГДЕ
				|	ЭлементИзменен"
				+ Отбор;
												
	Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДокументаУстановкиЦен()


Функция ТекстЗапросаСогласованиеЦен()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидНоменклатуры КАК ВидНоменклатуры
	               |ПОМЕСТИТЬ ТаблицаВидовНоменклатуры
	               |ИЗ
	               |	РегистрСведений.КТС_СоответствиеВидНоменклатурыПродактМенеджер
	               |ГДЕ
	               |	ПродактМенеджер = &ТекущийПользователь
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Валюта 										КАК Валюта,
				   |	ВЫРАЗИТЬ(Курс / Кратность КАК ЧИСЛО(15, 4)) КАК Курс
				   |ПОМЕСТИТЬ ТаблицаКурсов
				   |ИЗ
				   |	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, )
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ЦеныНаСогласование.ВидЦены 			КАК ВидЦены,
				   |	ЦеныНаСогласование.Номенклатура     КАК Номенклатура,
				   |	ЦеныНаСогласование.Цена				КАК Цена,
				   |	ЦеныНаСогласование.Валюта			КАК Валюта
				   |ПОМЕСТИТЬ ТаблицаНоменклатуры				   
				   |ИЗ
				   |	РегистрСведений.ALPS_ЦеныНоменклатурыНаСогласовании КАК ЦеныНаСогласование
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовНоменклатуры КАК ТаблицаВидовНоменклатуры
				   |		ПО ЦеныНаСогласование.ВидНоменклатуры = ТаблицаВидовНоменклатуры.ВидНоменклатуры
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	Номенклатура 		КАК Номенклатура,
				   |	ВидЦены				КАК ВидЦены,
				   |	ВЫБОР
				   |		КОГДА Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
				   |			ТОГДА Цена
				   |		ИНАЧЕ Упаковка.Коэффициент * Цена
				   |	КОНЕЦ 				КАК Цена,
				   |	Валюта				КАК Валюта
				   |ПОМЕСТИТЬ ТаблицаЦен
				   |ИЗ
				   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, (Номенклатура, ВидЦены) В (ВЫБРАТЬ Номенклатура, ВидЦены ИЗ ТаблицаНоменклатуры))
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ                                     	
				   |	ТаблицаНоменклатуры.Номенклатура 										КАК Номенклатура,
				   |	ТаблицаНоменклатуры.ВидЦены												КАК ВидЦены,
				   |	ТаблицаНоменклатуры.Цена												КАК Цена,
				   |	ТаблицаНоменклатуры.Валюта												КАК Валюта,
				   |	ЕСТЬNULL(ТаблицаЦен.Цена, 0)											КАК ТекущаяЦена,
				   |	ЕСТЬNULL(ТаблицаЦен.Валюта, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))  КАК ВалютаТекущейЦены
				   |ПОМЕСТИТЬ ТаблицаТекущиеЦены
				   |ИЗ
				   |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
				   |	
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
				   |		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаЦен.Номенклатура
				   |			И ТаблицаНоменклатуры.ВидЦены 	= ТаблицаЦен.ВидЦены
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТаблицаТекущиеЦены.Номенклатура 										КАК Номенклатура,
				   |	ТаблицаТекущиеЦены.ВидЦены												КАК ВидЦены,
				   |	ТаблицаТекущиеЦены.Цена													КАК Цена,
				   |	ТаблицаТекущиеЦены.Валюта												КАК Валюта,
				   |	ВЫБОР
				   |		КОГДА ТаблицаТекущиеЦены.Цена = 0
				   |			ТОГДА 0
				   |		КОГДА ТаблицаТекущиеЦены.ВалютаТекущейЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
				   |			ТОГДА 0
				   |		КОГДА ТаблицаТекущиеЦены.Валюта = ТаблицаТекущиеЦены.ВалютаТекущейЦены
				   |			ТОГДА ТаблицаТекущиеЦены.ТекущаяЦена
				   |		ИНАЧЕ 
				   |			ТаблицаТекущиеЦены.ТекущаяЦена * (КурсТекущейЦены.Курс / КурсСогласования.Курс)
				   |	КОНЕЦ 																	КАК ЦенаСтарая,
				   |	ЗНАЧЕНИЕ(Перечисление.СтатусыУстановокЦенНоменклатуры.ПустаяСсылка) 	КАК Действие,
				   |	4																		КАК ИндексКартинки
				   |ИЗ
				   |	ТаблицаТекущиеЦены КАК ТаблицаТекущиеЦены
				   |	
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсСогласования
				   |		ПО ТаблицаТекущиеЦены.Валюта = КурсСогласования.Валюта
				   |		
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсТекущейЦены
				   |		ПО ТаблицаТекущиеЦены.ВалютаТекущейЦены = КурсТекущейЦены.Валюта";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСогласованиеЦен()


Функция ТекстЗапросаЦеныКСогласованию()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СписокЦен.ВидЦены			КАК ВидЦены,
	               |	СписокЦен.Номенклатура 		КАК Номенклатура,
				   |	СписокЦен.Цена				КАК Цена,
				   |	СписокЦен.Валюта			КАК Валюта,
				   |	СписокЦен.Действие			КАК Действие
	               |ПОМЕСТИТЬ ТаблицаЦен
	               |ИЗ
	               |	&СписокЦен КАК СписокЦен
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
	               |	ВидЦены			КАК ВидЦены,
	               |	Номенклатура 	КАК Номенклатура
	               |ИЗ
	               |	ТаблицаЦен
	               |ГДЕ
	               |	Действие = ЗНАЧЕНИЕ(Перечисление.СтатусыУстановокЦенНоменклатуры.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидЦены			КАК ВидЦены,
	               |	Номенклатура 	КАК Номенклатура
	               |ИЗ
	               |	ТаблицаЦен
	               |ГДЕ
	               |	Действие = ЗНАЧЕНИЕ(Перечисление.СтатусыУстановокЦенНоменклатуры.НеСогласован)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидЦены			КАК ВидЦены,
	               |	Номенклатура 	КАК Номенклатура,
				   |	Цена			КАК Цена,
				   |	Валюта			КАК Валюта,
				   |	ИСТИНА			КАК ЦенаИзмененаВручную
	               |ИЗ
	               |	ТаблицаЦен
	               |ГДЕ
	               |	Действие = ЗНАЧЕНИЕ(Перечисление.СтатусыУстановокЦенНоменклатуры.Согласован)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ВидЦены	КАК ВидЦены
				   |ИЗ
	               |	ТаблицаЦен
	               |ГДЕ
	               |	Действие = ЗНАЧЕНИЕ(Перечисление.СтатусыУстановокЦенНоменклатуры.Согласован)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТексЗапросаЦеныКСогласованию()
 

#КонецОбласти

#Область СтруктураДопольнительныхКолонок

Функция ПолучитьСписокСсылокИзНастроек(Настройки, ИмяСвойства)

	СписокСсылок = Новый Массив;
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если Не Настройки.Свойство(ИмяСвойства) Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если ТипЗнч(Настройки[ИмяСвойства]) <> Тип("Массив") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Настройки[ИмяСвойства] Цикл
		Если ТипЗнч(ЭлементСписка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЭлементСписка.Свойство("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		СписокСсылок.Добавить(ЭлементСписка.Ссылка);	
	КонецЦикла;
	
	Возврат СписокСсылок;

КонецФункции // ПолучитьСписокВидовЦенИзНастроек()

Процедура ПолучитьСтруктуруКолонокВидовЦен(Результат, Настройки)
	
	Если Не Настройки.Свойство("СписокВидовЦен") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокУпрУч		= Константы.ВалютаУправленческогоУчета.Получить().Наименование;
	ЗаголовокРеглУч		= Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
	МассивВходныхЦен	= ПолучитьМассивВходныхЦен();

	Для каждого Элемент Из Настройки.СписокВидовЦен Цикл
		
		Если МассивВходныхЦен.Найти(Элемент.Ссылка) = Неопределено Тогда
			ВходнаяЦена = Ложь;
		Иначе
			ВходнаяЦена = Истина;
		КонецЕсли;
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("ЗаголовокГруппы", Элемент.Заголовок);
		СтруктураКолонки.Вставить("ЗаголовокВалютыУпр", ЗаголовокУпрУч);
		СтруктураКолонки.Вставить("ЗаголовокВалютыРегл", ЗаголовокРеглУч);
		СтруктураКолонки.Вставить("ВходнаяЦена", ВходнаяЦена);
		СтруктураКолонки.Вставить("Ссылка", Элемент.Ссылка);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
	КонецЦикла;

КонецПроцедуры // ПолучитьСписокКолонок()

Процедура ПолучитьСтруктуруКолонокЦенПоставщика(Результат,Настройки) 
	
	Если Не Настройки.Свойство("СписокВидовЦенПоставщика") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Для каждого Элемента Из Настройки.СписокВидовЦенПоставщика Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование +", "+ Строка(Элемента.Ссылка.Валюта));
		СтруктураКолонки.Вставить("Ссылка", Элемента.Ссылка);
		Результат.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
		
		// #5077 для условного оформления цен поставщика
		//{
		//СтруктураКолонки = Новый Структура;
		//СтруктураКолонки.Вставить("Имя", "ПСЦенаП_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		//СтруктураКолонки.Вставить("Тип", Новый ОписаниеТипов("Булево"));
		//СтруктураКолонки.Вставить("Заголовок", "");
		//Результат.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
		//}#5077
	КонецЦикла;
	
КонецПроцедуры// ПолучитьСтруктуруКолонокЦенПоставщика

Процедура ПолучитьСтруктуруКолонокДопСвойства(Результат,Настройки) 
		
	Если Не Настройки.Свойство("СписокДопСвойства") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемента Из Настройки.СписокДопСвойства Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование);
		СтруктураКолонки.Вставить("Ссылка", Элемента.Ссылка);
		Результат.СписокДопСвойства.Добавить(СтруктураКолонки);
	КонецЦикла;

КонецПроцедуры // ПолучитьСтруктуруКолонокДопСвойства()

#КонецОбласти

Функция ИнициализироватьТаблицуВидыЦены()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	
	Возврат Таблица;

КонецФункции // ИнициализироватьТаблицуВидыЦены()

Функция ИнициализироватьТаблицуТовары()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Таблица.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат Таблица;

КонецФункции // ИнициализироватьТаблицуТовары()
 
Функция ПолучитьЦенуПоКурсу(ЦенаУпр, ЦенаРегл, ВидЦены, ВалютаУпр, ВалютаРегл, ВалютаЦены)
	
	Если ВалютаЦены = ВалютаУпр Тогда
		Возврат ЦенаУпр;
	ИначеЕсли ВалютаЦены = ВалютаРегл Тогда
		Возврат ЦенаРегл;
	Иначе
		КурсыВалютыУпр		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ТекущаяДатаСеанса());
		КурсУпр 			= КурсыВалютыУпр.Курс / КурсыВалютыУпр.Кратность;
		КурсыВалютыВидаЦены	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЦены, ТекущаяДатаСеанса());
		КурсЦены 			= КурсыВалютыВидаЦены.Курс / КурсыВалютыВидаЦены.Кратность;
		Возврат ЦенаУпр * (КурсУпр/КурсЦены);
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьКПП(Выборка, НаименованиеКолонки)
	
	Если НаименованиеКолонки = "КПП_Опт" Тогда
		ИмяРегистра		=	"КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж";
	ИначеЕсли  НаименованиеКолонки = "КПП_Розница" Тогда
		ИмяРегистра		=	"КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения	= КПП_ПолучитьПараметрыЗаполнения(ИмяРегистра,Выборка);
	
	Попытка
		git_КоефициентПриоритетностиПродажСервер.ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(ПараметрыЗаполнения, ИмяРегистра);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция КПП_ПолучитьПараметрыЗаполнения(ИмяРегистра,Выборка)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Период", ТекущаяДата());
	ПараметрыЗаполнения.Вставить("Номенклатура", Выборка.Ссылка);
	Если 		ИмяРегистра = "КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж" Тогда	
		ПараметрыЗаполнения.Вставить("Значение", Выборка.КПП_Розница);
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически", Выборка.КПП_Розница_НеПересчитыватьАвтоматически);
	ИначеЕсли 	ИмяРегистра = "КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж" Тогда
		ПараметрыЗаполнения.Вставить("Значение", Выборка.КПП_Опт);
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически", Выборка.КПП_Опт_НеПересчитыватьАвтоматически);	
	Иначе
		ПараметрыЗаполнения.Вставить("Значение");
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции // КПП_ПолучитьПараметрыЗаполнения()

Функция ЗаписатьТоварнуюКатегорию(Выборка)
		
	Если Выборка.Номенклатура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Выборка.ТоварнаяКатегория = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	НоменклатураСсылка		= Выборка.Номенклатура;
	ТоварнаяКатегорияСсылка	= Выборка.ТоварнаяКатегория;
	
	Если ТоварнаяКатегорияСсылка.Владелец = НоменклатураСсылка.ВидНоменклатуры
		ИЛИ ТоварнаяКатегорияСсылка = Справочники.ТоварныеКатегории.ПустаяСсылка() Тогда
		
		СправочникОбъект					= НоменклатураСсылка.ПолучитьОбъект();
		СправочникОбъект.ТоварнаяКатегория  =  ТоварнаяКатегорияСсылка;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьЦеновуюГруппу(Выборка)
	
	НоменклатураСсылка = Выборка.Номенклатура;
	
	Если ТипЗнч(НоменклатураСсылка) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать ценовую группу. Обратитесь в отдел технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	СправочникОбъект				= НоменклатураСсылка.ПолучитьОбъект();
	СправочникОбъект.ЦеноваяГруппа 	= Выборка.ЦеноваяГруппа;
	
	Попытка
		СправочникОбъект.Записать();	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьДедлайнЦеновойГруппы(Выборка)

	НоменклатураСсылка						= Выборка.Номенклатура;
	СправочникОбъект						= НоменклатураСсылка.ПолучитьОбъект();
	СправочникОбъект.ДедлайнЦеновойГруппы 	= Выборка.Дедлайн;
	
	Попытка
		СправочникОбъект.Записать();	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// http://r.ktc-ua.com/issues/5329
Функция ЗаписатьСвойствоНеВыгружатьНаKtcUa(Выборка)
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("21932c8b-6930-11e2-8fd5-001e673c80fc")); // Свойство не выгружать на сайт ktc-ua.com
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Выборка.Номенклатура);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
	Если Выборка.НеВыгружатьНаKtcUa Тогда
		Запись 			= НаборЗаписей.Добавить();
		Запись.Объект 	= Выборка.Номенклатура;
		Запись.Свойство = Свойство;
		Запись.Значение = Истина;
	КонецЕсли;

	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// http://r.ktc-ua.com/issues/5329
Функция ЗаписатьСвойствоНеВыгружатьНаOrderB2b(Выборка)
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("21932c8c-6930-11e2-8fd5-001e673c80fc")); // Свойство не выгружать на сайт order-b2b.com
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Выборка.Номенклатура);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
	Если Выборка.НеВыгружатьНаOrderB2b Тогда
		Запись 			= НаборЗаписей.Добавить();
		Запись.Объект 	= Выборка.Номенклатура;
		Запись.Свойство = Свойство;
		Запись.Значение = Истина;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// http://r.ktc-ua.com/issues/5329
Функция ЗаписатьСвойствоГарантия(Выборка)

	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("a3e0fd0e-4712-11e0-9f98-001517115d85")); // Свойство гарантия
	
	НоменклатураОбъект 			= Выборка.Номенклатура.ПолучитьОбъект();
	ДополнительныеРеквизиты     = НоменклатураОбъект.ДополнительныеРеквизиты;
	
	СтруктураПоиска = Новый Структура("Свойство", Свойство);
	РезультатПоиска = ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		РезультатПоиска[0].Значение = Выборка.Гарантия;
	Иначе
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = Свойство;
		НоваяСтрока.Значение = Выборка.Гарантия;
	КонецЕсли;
	
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьСвойствоГарантия()
 

Функция ПолучитьМассивВходныхЦен()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = "ВЫБРАТЬ 
					  |	ВидЦены КАК ВидЦены
	                  |ИЗ
	                  |	РегистрСведений.ALPS_ВерсииВидыЦен
	                  |ГДЕ
	                  |	Входная";
					  
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦены");

КонецФункции // ПолучитьСсылкуНаВходнуюЦену()
 
#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.3.103";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Ирокез");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия); 
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.3.50");
    ПараметрыРегистрации.Вставить("Информация", "Ирокез [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Ирокез [" + Версия + "]", "Ирокез", "ВызовКлиентскогоМетода", Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Провести согласование цен", "ПровестиСогласованиеЦен", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Провести изменение позиций", "ПровестиИзменениеПозиций", "ВызовСерверногоМетода");

    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти


