
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьПреобразованиеСтроки", Истина);
	
	СписокТестов.Добавить(ПараметрыТеста);
	ПараметрыТеста = Новый Структура("ИмяТеста, Параметр", "Тест_ПроверитьСозданияСтруктурыКолонокНастройки");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаполненияНоменклатурыТоварнойКатегорие", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаполненияНоменклатурыЦеновоюГруппою", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаписиВРегСвКПП_Опт", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьЗаписиВРегСвКПП_Розница", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП", Истина);
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП_БезДанных", Истина);
	СписокТестов.Добавить(ПараметрыТеста);

	
	Возврат СписокТестов;
	
КонецФункции 

Процедура ПередЗапускомТеста() Экспорт
	
	ВерсияСчетчикНоменклатуры = git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных("Счетчик номенклатуры");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияСчетчикНоменклатуры, "0.0.001", НСтр("ru='Для теста необходимо подключить библиотеку «Счетчик номенклатуры» версии 0.0.001 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияПодпискиНаСобытия = git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных("Подписки на события");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияПодпискиНаСобытия, "3.8.15", НСтр("ru='Для теста необходимо подключить библиотеку «Подписки на события» версии 3.8.15 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры
 


Процедура Тест_ПроверитьПреобразованиеСтроки(Параметр) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор;
	Наименование  = ПреобразоватьУникальныйИдентификаторВНаименование("ВидНоменклатуры", Идентификатор);
	
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	ВидНоменклатурыТест		=	ПолучитьБиблиотекуВидыНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	СтрокаУИ				=	ПолучитьСтрокуИдентификатораСсылки(ВидНоменклатурыТест);
	УИ						=	УникальныйИдентификаторИзСтроки(,СтрокаУИ);
	ВидНоменклатуры			=	Справочники.ВидыНоменклатуры.ПолучитьСсылку(УИ);				
	
	СообщениеОбОшибке		=	НСтр("ru='Не удалось преобразовать строку через уникальный индентификатор!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(ВидНоменклатуры, 	Тип("СправочникСсылка.ВидыНоменклатуры") , СообщениеОбОшибке);
	ЮнитТест.ПроверитьТип(СтрокаУИ, 		Тип("Строка") , СообщениеОбОшибке);
	ЮнитТест.ПроверитьТип(УИ, 				Тип("УникальныйИдентификатор") , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ВидНоменклатурыТест, ВидНоменклатуры, СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ВидНоменклатурыТест, Справочники.ВидыНоменклатуры.ПустаяСсылка(), СообщениеОбОшибке);

КонецПроцедуры

Процедура Тест_ПроверитьСозданияСтруктурыКолонокНастройки(Параметр) Экспорт
	
	СтруктураКолонок = ПолучитьСтруктуруКолонок();
	СообщениеОбОшибке = НСтр("ru='Не удалось получить структуру колонок для настрой обратки!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(СтруктураКолонок,Тип("Структура") , СообщениеОбОшибке);
КонецПроцедуры

Процедура Тест_ПроверитьЗаполненияНоменклатурыТоварнойКатегорие(Параметр) Экспорт
	
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	Номенклатура	 =	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	ТоварнаКатегория =	Справочники.ТоварныеКатегории.ПустаяСсылка();
	
	СтруктураЗаполнения	= Новый Структура("Номенклатура,ТоварнаяКатегория",Номенклатура, ТоварнаКатегория);
	РезультатТест1		 = ЗаписатьТоварнуюКатегорию(СтруктураЗаполнения);
	
	//ПростойПлохойТест1
	СтруктураЗаполнения	= Новый Структура("Номенклатура,ТоварнаяКатегория",Номенклатура, Неопределено);
	РезультатТест2		 = ЗаписатьТоварнуюКатегорию(СтруктураЗаполнения);
	
	//ПростойПлохойТест3
	СтруктураЗаполнения	= Новый Структура("Номенклатура,ТоварнаяКатегория",Неопределено, Неопределено);
	РезультатТест3		 = ЗаписатьТоварнуюКатегорию(СтруктураЗаполнения);
		
	СообщениеОбОшибке		=	НСтр("ru='Не удалось записать товарную категорию в справочник!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьИстину(РезультатТест1, СообщениеОбОшибке);
	ЮнитТест.ПроверитьЛожь(РезультатТест2, СообщениеОбОшибке);
	ЮнитТест.ПроверитьЛожь(РезультатТест3, СообщениеОбОшибке);
	
КонецПроцедуры

Процедура Тест_ПроверитьЗаполненияНоменклатурыЦеновоюГруппою(Параметр) Экспорт
	
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	Номенклатура	 =	ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	ЦенноваГруппа	 =	Справочники.ЦеновыеГруппы.ПустаяСсылка();
	
	СтруктураЗаполнения	 = Новый Структура("Номенклатура,ЦеноваяГруппа",Номенклатура, ЦенноваГруппа);
	РезультатТест1		 = ЗаписатьЦеновуюГруппу(СтруктураЗаполнения);
	СтруктураЗаполнения.Удалить("Номенклатура");
	СтруктураЗаполнения.Удалить("ЦеноваяГруппа");  	
	  
		
	СообщениеОбОшибке =	НСтр("ru='Не удалось записать товарную категорию в справочник!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьИстину(РезультатТест1, СообщениеОбОшибке);

КонецПроцедуры

Процедура Тест_ПроверитьЗаписиВРегСвКПП_Опт(Параметр=Неопределено) Экспорт
	
	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);
	
	Номенклатура = ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
	Идентификатор = Новый УникальныйИдентификатор;
	Наименование  = ПреобразоватьУникальныйИдентификаторВНаименование("КПП_Розница", Идентификатор);
	КПП_Опт 	  = ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование", Наименование)); 
	
	Идентификатор = Новый УникальныйИдентификатор;
	Наименование  = ПреобразоватьУникальныйИдентификаторВНаименование("КПП_Опт", Идентификатор);
	КПП_Розница   =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование", Наименование)); 

	НаименованиеКолонки	=	"КПП_Опт";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка",									Номенклатура);
	СтруктураЗаполнения.Вставить("КПП_Розница",								КПП_Розница);
	СтруктураЗаполнения.Вставить("КПП_Опт",									КПП_Опт);
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически",	Истина);
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически",Истина);
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Не удалось создать запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 1, СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Опт.Найти(КПП_Опт,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Опт.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(КПП_Розница,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);
	
	
КонецПроцедуры

Процедура Тест_ПроверитьЗаписиВРегСвКПП_Розница(Параметр=Неопределено) Экспорт

	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);	
	Номенклатура 		= ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
	КПП_Опт =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Розница")); 
	КПП_Розница  =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Опт")); 

	НаименованиеКолонки	=	"КПП_Розница";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка",									Номенклатура);
	СтруктураЗаполнения.Вставить("КПП_Розница",								КПП_Розница);
	СтруктураЗаполнения.Вставить("КПП_Опт",									КПП_Опт);
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически",	Истина);
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически",Истина);
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Не удалось создать запись в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 1, СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Розница.Найти(КПП_Розница,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьНеРавенство(ЗаписьРегистраКПП_Розница.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(КПП_Опт,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);
	
	
КонецПроцедуры

Процедура Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП(Параметр=Неопределено) Экспорт

	Идентификатор 		= Новый УникальныйИдентификатор;
	Наименование  		= ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура", Идентификатор);
	ПараметрыЗаполнения = Новый Структура("Наименование", Наименование);	
	Номенклатура 		= ПолучитьБиблиотекуНоменклатуры().СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
	КПП_Опт =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Розница")); 
	КПП_Розница  =  ПолучитьБиблиотекуКПН().СоздатьЭлементСправочника(Новый Структура("Наименование","КПП_Опт")); 

	НаименованиеКолонки	=	"";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка",									Номенклатура);
	СтруктураЗаполнения.Вставить("КПП_Розница",								КПП_Розница);
	СтруктураЗаполнения.Вставить("КПП_Опт",									КПП_Опт);
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически",	Истина);
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически",Истина);
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Не удалось создать запись в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(КПП_Розница,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 0, СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(КПП_Опт,"Значение"),Неопределено , СообщениеОбОшибке);
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Найти(Истина,"НеПересчитыватьАвтоматически"),Неопределено , СообщениеОбОшибке);
	
	
КонецПроцедуры

Процедура Тест_ОтрицательныйТест_ПроверитьЗаписиВРегСвКПП_БезДанных(Параметр=Неопределено) Экспорт
	Номенклатура	= Справочники.Номенклатура.ПустаяСсылка();
	НаименованиеКолонки	=	"";
	
	СтруктураЗаполнения	 = Новый Структура;
	СтруктураЗаполнения.Вставить("Ссылка");
	СтруктураЗаполнения.Вставить("КПП_Розница");
	СтруктураЗаполнения.Вставить("КПП_Опт");
	СтруктураЗаполнения.Вставить("КПП_Опт_НеПересчитыватьАвтоматически");
	СтруктураЗаполнения.Вставить("КПП_Розница_НеПересчитыватьАвтоматически");
	
	ЗаписатьКПП(СтруктураЗаполнения, НаименованиеКолонки);
	
	ЗаписьРегистраКПП_Опт	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	ЗаписьРегистраКПП_Розница = РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(,Новый Структура("Номенклатура", Номенклатура));
	
	УдалитьЗаписиВРегистрахПоКПП(Номенклатура);
	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись ь в регистре КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Розница.Количество(), 0, СообщениеОбОшибке);

	СообщениеОбОшибке		=	НСтр("ru='Создалась лишня запись в регистре КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ЗаписьРегистраКПП_Опт.Количество(), 0, СообщениеОбОшибке);
		
КонецПроцедуры

Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

Функция ПолучитьБиблиотекуКПН()
	ПутьКБиблиотеке = "\tests\Справочники\КоефициентПриоритетностиНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

Функция ПолучитьБиблиотекуВидыНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\ВидыНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат СозданияЭлементаСправочника(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклады()

Функция СозданияЭлементаСправочника(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

Процедура УдалитьЗаписиВРегистрахПоКПП(Номенклатура)

	РегистрРозница	= РегистрыСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СоздатьНаборЗаписей();
	РегистрРозница.Отбор.Номенклатура.Установить(Номенклатура);
	Запись	= РегистрРозница.Добавить();
	РегистрРозница.Прочитать();
	РегистрРозница.Записать();
	
	РегистрРозница	= РегистрыСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СоздатьНаборЗаписей();
	РегистрРозница.Отбор.Номенклатура.Установить(Номенклатура);
	Запись	= РегистрРозница.Добавить();
	РегистрРозница.Прочитать();
	РегистрРозница.Записать();

	
	
КонецПроцедуры

Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс, Идентификатор)
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет к строковому представлению уникального идентификатора ссылки объекта метаданных 
// стороковий префкс.
//
// Параметры:
//  Ссылка - СправочникСсылка - объект метаданных, ссылку для которого нужно получить.
//
// Возвращаемое значение:
//  Строка, Неопределено - результирущее представление ссылки, Неопределено если ошибка.
//
Функция ПолучитьСтрокуИдентификатораСсылки(Ссылка) Экспорт	
	Идентификатор 			= Ссылка.УникальныйИдентификатор();
	СтроковыйИдентификатор  = СтрЗаменить(Строка(Идентификатор), "-", "_");
	Возврат СтроковыйИдентификатор;	
КонецФункции // ПолучитьСтрокуИдентификатораСсылки()

// Получает уникальный дентификатор из строки вида "префикс_754b0405_dd64_11e1_9d4d_001e673c80fc"
//
// Параметры:
//  Префикс - Строка - начало строки из идентификатором.
//  СтрокаИдентификатор - Строка - строка из идентификатором который нужно обработать.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - результирующий уникальный идеентификатор.
//
Функция УникальныйИдентификаторИзСтроки(знач Префикс, знач СтрокаИдентификатор) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, Префикс, ""),"_","-"));
КонецФункции // УникальныйИдентификаторИзСтроки()

Функция ПолучитьСтруктуруКолонок() Экспорт
	
	Результат = Новый Структура("СписокВидовЦен, СписокВидовЦенПоставщика, СписокДопСвойства", Новый Массив, Новый Массив, Новый Массив);
	Настройки = ПолучитьНастройки();
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;

	ПолучитьСтруктуруКолонокВидовЦен(Результат,	Настройки);
	ПолучитьСтруктуруКолонокЦенПоставщика(Результат, Настройки);
	ПолучитьСтруктуруКолонокДопСвойства(Результат, Настройки);

	Возврат Результат;

КонецФункции // ПолучитьСписокКолонок()

Процедура ЗагрузитьТаблицуНоменклатуры(ФормаОбработки) Экспорт
	
	СтруктураНастроек 	= ПолучитьНастройки();
	ЗаказПоставщику   	= ФормаОбработки.ЗаказПоставщику;
	МассивНоменклатуры  = ФормаОбработки.МассивНоменклатуры;
	
	Если ФормаОбработки.ВидНоменклатуры.Пустая() И ЗаказПоставщику.Пустая() Тогда 
		ФормаОбработки.СписокНоменклатуры.Очистить();
	Иначе
		
		СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦен");
		СписокВидовЦенПоставщика = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦенПоставщика");
		СписокДопСвойства		 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокДопСвойства");
		
		Запрос 		 = Новый Запрос;
		ТекстЗапроса = ТекстЗапросаВыгрузкиНоменклатуры(СтруктураНастроек, ЗаказПоставщику, МассивНоменклатуры);
			
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидНоменклатуры", 			ФормаОбработки.ВидНоменклатуры);
		Запрос.УстановитьПараметр("НачалоДня", 					НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ВалютаРеглУч", 				Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("ВалютаУпрУч",				Константы.ВалютаУправленческогоУчета.Получить());
		Запрос.УстановитьПараметр("СписокВидовЦенПоставщика",	СписокВидовЦенПоставщика);
		Запрос.УстановитьПараметр("СписокВидовЦен", 			СписокВидовЦен);
		Запрос.УстановитьПараметр("СписокДопСвойства",			СписокДопСвойства);
		Запрос.УстановитьПараметр("ЗаказПоставщику",			ЗаказПоставщику);
		Запрос.УстановитьПараметр("МассивНоменклатуры",			МассивНоменклатуры);
		Запрос.УстановитьПараметр("Дата",						ТекущаяДатаСеанса());
		//Запрос.УстановитьПараметр("ВидЦеныВходная",				Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("3df19477-7886-11df-b33a-0011955cba6b")));//Входная цена   демо
		Запрос.УстановитьПараметр("ВидЦеныВходная",				Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85")));//Входная цена    основна
		
		Запрос.УстановитьПараметр("СвойствоЗаработокМенеджераРозница", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("904cd00e-c6ba-11e2-b7da-001e673c80fc")));
		Запрос.УстановитьПараметр("ВидЦеныРозница", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));
		
		Для Каждого ВидЦены Из СписокВидовЦен Цикл                                            
			Запрос.УстановитьПараметр("ВидЦены" + ПолучитьСтрокуИдентификатораСсылки(ВидЦены), ВидЦены);
		КонецЦикла;
		
		Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл    
			Запрос.УстановитьПараметр("ВидЦеныПоставщика" + ПолучитьСтрокуИдентификатораСсылки(ЦенаПоставщика), ЦенаПоставщика);
		КонецЦикла;
		
		Для Каждого ДопСвойство Из СписокДопСвойства Цикл  
			Запрос.УстановитьПараметр("ДопСвойство" + ПолучитьСтрокуИдентификатораСсылки(ДопСвойство), ДопСвойство);
		КонецЦикла;
		
		ФормаОбработки.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДеревоНоменклатуры()

Функция ПолучитьНастройки() Экспорт
	
	Перем ДополнительныеВидыЦен;
	Перем ДополнительныеВидыЦенПоставщика;
	Перем ДополнительныеСвойства;
	Перем Соглашение;
	Перем ВидНоменклатуры;


	_u_ТекущийПользователь	= ПараметрыСеанса.ТекущийПользователь;	
	НастройкиБРМ 			= ХранилищеНастроекДанныхФорм.Загрузить("_u_" + _u_ТекущийПользователь.УникальныйИдентификатор(), , , "_u_" + _u_ТекущийПользователь.УникальныйИдентификатор());
	
	МассивДополнительныеВидыЦен 			= Новый Массив;
	МассивДополнительныеВидыЦенПоставщика 	= Новый Массив;
	МассивДополнительныеСвойства 			= Новый Массив;
	ПеремВидНоменклатуры					= Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	Если ТипЗнч(НастройкиБРМ) = Тип("Структура") Тогда
		НастройкиБРМ.Свойство("ДополнительныеВидыЦен", 			 ДополнительныеВидыЦен);
		НастройкиБРМ.Свойство("ДополнительныеВидыЦенПоставщика", ДополнительныеВидыЦенПоставщика);
		НастройкиБРМ.Свойство("ДополнительныеСвойства", 		 ДополнительныеСвойства);
		НастройкиБРМ.Свойство("Соглашение", 		 			 Соглашение);
		НастройкиБРМ.Свойство("ВидНоменклатуры", 		 		 ВидНоменклатуры);
	КонецЕсли;
	
	Настройки = Новый Структура("СписокВидовЦен,СписокВидовЦенПоставщика,СписокДопСвойства,ВидНоменклатуры", Новый Массив,Новый Массив,Новый Массив,ПеремВидНоменклатуры);
	
	Если ТипЗнч(ДополнительныеВидыЦен) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦен ИЗ ДополнительныеВидыЦен Цикл
			Если ТипЗнч(ДополнительныйВидЦен) <> Тип("СправочникСсылка.ВидыЦен") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительныйВидЦен.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеВидыЦен.Найти(ДополнительныйВидЦен) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивДополнительныеВидыЦен.Добавить(ДополнительныйВидЦен);
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦен.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦен);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительныйВидЦен));
			Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Если НЕ Соглашение.Пустая() И НЕ Соглашение.ВидЦен.Пустая() Тогда
			ВидЦены			 = Соглашение.ВидЦен;
			Если МассивДополнительныеВидыЦен.Найти(ВидЦены) = Неопределено Тогда
				СтруктураКолонки = Новый Структура;
				СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
				СтруктураКолонки.Вставить("Заголовок", 	ВидЦены.Наименование);
				СтруктураКолонки.Вставить("Ссылка", 	ВидЦены);
				СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ВидЦены));
				Настройки.СписокВидовЦен.Добавить(СтруктураКолонки);
				МассивДополнительныеВидыЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеВидыЦенПоставщика) = Тип("Массив") Тогда
		Для Каждого ДополнительныйВидЦеныПоставщика ИЗ ДополнительныеВидыЦенПоставщика Цикл
			Если ТипЗнч(ДополнительныйВидЦеныПоставщика) <> Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительныйВидЦеныПоставщика.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеВидыЦенПоставщика.Найти(ДополнительныйВидЦеныПоставщика) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Тип", Новый 	ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,2)));
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительныйВидЦеныПоставщика.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительныйВидЦеныПоставщика);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительныйВидЦеныПоставщика));
			Настройки.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
			МассивДополнительныеВидыЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Массив") Тогда
		Для Каждого ДополнительноеСвойство ИЗ ДополнительныеСвойства Цикл
			Если ТипЗнч(ДополнительноеСвойство) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Продолжить;
			Конецесли;
			Если ДополнительноеСвойство.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			Если МассивДополнительныеСвойства.Найти(ДополнительноеСвойство) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Заголовок", 	ДополнительноеСвойство.Наименование);
			СтруктураКолонки.Вставить("Ссылка", 	ДополнительноеСвойство);
			СтруктураКолонки.Вставить("УИ", 		ПолучитьСтрокуИдентификатораСсылки(ДополнительноеСвойство));
			Настройки.СписокДопСвойства.Добавить(СтруктураКолонки);
			МассивДополнительныеСвойства.Добавить(ДополнительноеСвойство);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ВидНоменклатуры) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Настройки.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;

	Возврат Настройки;
	
КонецФункции // ПолучитьНастройки()

Функция ИзменитьПозиции(ФормаОбработки) Экспорт
	
	НачатьТранзакцию();
	
	Если Не СоздатьДокументУстановкиЦен(ФормаОбработки) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗаписьРеквизитыНоменклатура(ФормаОбработки) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьТаблицуНоменклатуры(ФормаОбработки);
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузитьКешСписокТовараНаСервере(ФормаОбработки,КешТаблица)  Экспорт
	ПолеСортировки      = ФормаОбработки.ПолеСортировки;
	Сортировка_Направление = ФормаОбработки.Сортировка_Направление;
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ТекстЗапросаВыгрузкиКешТовара();
	Если ПустаяСтрока(Сортировка_Направление) Тогда
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса,"%Направления%"," ");
	Иначе
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса,"%Направления%", Сортировка_Направление);
	КонецЕсли;
	
	Если ПустаяСтрока(ПолеСортировки) Тогда
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса,"%ПолеСортировки%"," Ссылка ");
	Иначе
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса,"%ПолеСортировки%", ПолеСортировки);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КешСписокНоменкдатуры",КешТаблица);

	ФормаОбработки.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьДокументУстановкиЦен(ФормаОбработки)
	
	СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(ПолучитьНастройки(),"СписокВидовЦен");
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументаУстановкиЦен(СписокВидовЦен);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ФормаОбработки.СписокНоменклатуры.Выгрузить());

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокументОбъект 				 = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокументОбъект.Дата 		 = ТекущаяДата();
	ДокументОбъект.Комментарий   = "Ручная установка цены";
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Статус		 = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	
	ВидыЦен 	= ИнициализироватьТаблицуВидыЦены();
	Товары  	= ИнициализироватьТаблицуТовары();
	ВалютаУпр   = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Для Каждого ВидЦены ИЗ СписокВидовЦен Цикл
			
			Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
			
			Если ВыборкаДетальныеЗаписи["Процент_" + Инд] <> 0 Тогда
				
				СтруктураПоиска = Новый Структура("ВидЦены", ВидЦены);
				РезультатПоиска = ВидыЦен.НайтиСтроки(СтруктураПоиска);
				
				Если РезультатПоиска.Количество() = 0 Тогда
					НоваяСтрока = ВидыЦен.Добавить();
					НоваяСтрока.ВидЦены = ВидЦены;
				КонецЕсли;
				
				НоваяСтрока 					= Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
				НоваяСтрока.ВидЦены 			= ВидЦены;
				НоваяСтрока.Цена 				= ПолучитьЦенуПоКурсу(ВыборкаДетальныеЗаписи["ВидЦены_УпрУч_" + Инд], ВыборкаДетальныеЗаписи["ВидЦены_РеглУч_" + Инд], ВидЦены, ВалютаУпр, ВалютаРегл);
				НоваяСтрока.ЦенаИзмененаВручную = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументОбъект.ВидыЦен.Загрузить(ВидыЦен);
	ДокументОбъект.Товары.Загрузить(Товары);                                                                                                   
				
	Если РольДоступна("УстановкаЦенНоменклатурыБезСогласования") ИЛИ РольДоступна("ПолныеПрава") Тогда
		Попытка
	 		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	Иначе
		
		ДокументОбъект.Статус		= Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
		БизнесОбъект 				= БизнесПроцессы.СогласованиеЦенНоменклатуры.СоздатьБизнесПроцесс();
		БизнесОбъект.Автор 			= ПараметрыСеанса.ТекущийПользователь;
		БизнесОбъект.Предмет    	= ДокументОбъект.Ссылка;
		БизнесОбъект.ДатаНачала 	= ТекущаяДата();
		БизнесОбъект.Дата			= ТекущаяДата();
		БизнесОбъект.Важность		= Перечисления.ВариантыВажностиЗадачи.Высокая;
		БизнесОбъект.ДатаЗавершения = КонецДня(ТекущаяДата()) + 1;
		
		Для Каждого Строка Из ДокументОбъект.Товары Цикл	
			БизнесОбъект.Наименование = БизнесОбъект.Наименование 
										+ "Номенклатура: " + Строка.Номенклатура 
										+ ", Код: " + Строка.Номенклатура.Код 
										+ ", Вид цены: " +  Строка.ВидЦены 
										+ ", Цена: " + Строка.Цена + " " + Символы.ПС;				
		КонецЦикла;
		
		Попытка
			БизнесОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
 
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

Функция ЗаписьРеквизитыНоменклатура(ФормаОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРеквизитовНоменклатуры();
	Запрос.УстановитьПараметр("СписокНоменклатуры", ФормаОбработки.СписокНоменклатуры.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭлементИзменен_КПП_Опт ИЛИ Выборка.ЭлементИзменен_КПП_Опт_НеПересчитыватьАвтоматически Тогда
			Если Не ЗаписатьКПП(Выборка,"КПП_Опт") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЭлементИзменен_КПП_Розница ИЛИ Выборка.ЭлементИзменен_КПП_Розница_НеПересчитыватьАвтоматически Тогда
			Если Не ЗаписатьКПП(Выборка,"КПП_Розница") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЭлементИзменен_ТоварнаяКатегория Тогда
			Если Не ЗаписатьТоварнуюКатегорию(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЭлементИзменен_ЦеноваяГруппа Тогда
			Если Не ЗаписатьЦеновуюГруппу(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЭлементИзменен_Дедлайн Тогда
			Если Не ЗаписатьДедлайнЦеновойГруппы(Выборка) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;

	Возврат Истина;

КонецФункции

#Область ТекстиЗапроса

Функция ТекстЗапросаВыгрузкиНоменклатуры(СтруктураНастроек,ЗаказПоставщику, МассивНоменклатуры)
	
	ТекстЗапроса = "
			|%1
			|
			|ВЫБРАТЬ
			|	СпрНоменклатура.Номенклатура							КАК Ссылка,
			|	СпрНоменклатура.Характеристика							КАК Характеристика,
			|	СпрНоменклатура.Номенклатура.ВидНоменклатуры			КАК ВидНоменклатуры,
			|	ЕСТЬNULL(КПП_Опт.Значение, 0) 							КАК КПП_Опт,
			|	ЕСТЬNULL(КПП_Опт.НеПересчитыватьАвтоматически, ЛОЖЬ)	КАК КПП_Опт_НеПересчитыватьАвтоматически,
			|	ЕСТЬNULL(КПП_Розница.Значение, 0) 						КАК КПП_Розница,
			|	ЕСТЬNULL(КПП_Розница.НеПересчитыватьАвтоматически, ЛОЖЬ)КАК КПП_Розница_НеПересчитыватьАвтоматически,
			|	ЕСТЬNULL(ЗаработокРозница.Значение, 0) 					КАК СредЗаработокРозница,
			|	(ЕСТЬNULL(РС_КПП_Процент.Значение,0)/100)*ЕСТЬNULL(КешЦенРозница.Цена,0) КАК СредЗаработокОпт,
			
			|	СпрНоменклатура.Номенклатура.ТоварнаяКатегория 			КАК ТоварнаяКатегория,
			|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа 				КАК ЦеноваяГруппа,
			|	СпрНоменклатура.Номенклатура.ДедлайнЦеновойГруппы		КАК Дедлайн
			|
			|%4
			|%2
			|
			|ИЗ
			|	СпрНоменклатура КАК СпрНоменклатура
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(&Дата,) КАК КПП_Опт
			|ПО СпрНоменклатура.Номенклатура = КПП_Опт.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(&Дата, ) КАК КПП_Розница
			|ПО СпрНоменклатура.Номенклатура = КПП_Розница.Номенклатура
			|
			//Зароботок менеджера розница
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗаработокРозница
			|ПО (СпрНоменклатура.Номенклатура = (ВЫРАЗИТЬ(ЗаработокРозница.Объект КАК Справочник.Номенклатура)))
			|И (ЗаработокРозница.Свойство = &СвойствоЗаработокМенеджераРозница)
			|
			//Зароботок менеджера розница опт (новая)
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата,ВидЦены = &ВидЦеныРозница И Номенклатура в (ВЫБРАТЬ Номенклатура из СпрНоменклатура)) КАК КешЦенРозница
			|ПО СпрНоменклатура.Номенклатура = КешЦенРозница.Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_КоэффициентыПриоритетностиПоВидуНоменклатурыРозница.СрезПоследних(&Дата,ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)) КАК РС_КПП_Процент
			|ПО РС_КПП_Процент.КПП = КПП_Розница.Значение
			|И  СпрНоменклатура.Номенклатура.ВидНоменклатуры = РС_КПП_Процент.ВидНоменклатуры
		    |
			|%3
			|%5
			|";
	ДополнительныхКолонок		= ПолучитьТекстЗапросаДополнительныхКолонок(СтруктураНастроек);
	ДопКолонкиПоЗаказуПостащика	= ПолучитьТекстЗапросаДопКолонокПоЗаказуПоставщика(ЗаказПоставщику);
	ТекстЗапроса 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
													ТекстЗапросаСпрНоменклатуры(ЗаказПоставщику, МассивНоменклатуры),
													ДополнительныхКолонок.ШапкаЗапроса,
													ДополнительныхКолонок.СоединениеЗапроса,
													ДопКолонкиПоЗаказуПостащика.ШапкаЗапроса,
													ДопКолонкиПоЗаказуПостащика.СоединениеЗапроса);
	
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСпрНоменклатуры(ЗаказПоставщику, МассивНоменклатуры)
	
	ТекстЗапроса = "
				   |%1
				   | ;
	               ////////////////////////////////////////////////////////////////////////////////
				   //1
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	               |	КурсыВалют.Валюта КАК Валюта,
	               |	КурсыВалют.Период КАК Период
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаРеглУч
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)),
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период
	               |ИЗ
	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
	               |ГДЕ
	               |	КурсыВалют.Валюта = &ВалютаУпрУч
	               |;
	               ////////////////////////////////////////////////////////////////////////////////
				   //2
	               |ВЫБРАТЬ
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта,
	               |	КурсыВалют.Период КАК НачалоПериода,
	               |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	               |ПОМЕСТИТЬ ТаблицаКурсов
	               |ИЗ
	               |	КурсыВалют КАК КурсыВалют
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	               |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	               |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
				   //3
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыСрезПоследних.Характеристика,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаУпрУчВходная,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаРеглУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаРеглУчВходная
	               |ПОМЕСТИТЬ КешЦенВходная
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата
	               |													,ВидЦены = &ВидЦеныВходная
	               |													И (Номенклатура, Характеристика) В	(ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, Характеристика ИЗ СпрНоменклатура)
	               |													) КАК ЦеныНоменклатурыСрезПоследних
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
	               |;
				   ////////////////////////////////////////////////////////////////////////////////
				   //3
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыСрезПоследних.Характеристика,
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаУпрУч,
	               |	ВЫБОР
	               |		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаРеглУч
	               |			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	               |		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаРеглУч
	               |ПОМЕСТИТЬ КешЦенИзНастроек
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата
	               |													, ВидЦены В (&СписокВидовЦен)
	               |													И (Номенклатура, Характеристика) В	(ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, Характеристика ИЗ СпрНоменклатура)
	               |													) КАК ЦеныНоменклатурыСрезПоследних
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
				   |
	               |;
				   //////////////////////////////////////////////////////////////////////////////
				   //4
				   |ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Номенклатура,
				   |	ЦеныНоменклатуры.Характеристика,
	               |	ЦеныНоменклатуры.ВидЦены,
	               |	ЦеныНоменклатуры.ЦенаУпрУч КАК ЦенаУпрУч,
	               |	ЦеныНоменклатуры.ЦенаРеглУч КАК ЦенаРеглУч,
				   |	ВЫБОР
	               |		КОГДА ЦеныНоменклатуры.ВидЦены = КешЦенВходная.ВидЦены
	               |			ТОГДА  0
				   |		ИНАЧЕ 100*((ISNULL(ЦеныНоменклатуры.ЦенаУпрУч,1)/ISNULL(КешЦенВходная.ЦенаУпрУчВходная,1))-1)
	               |	КОНЕЦ КАК ПроцентНаценки
				   |
	               |ПОМЕСТИТЬ КешЦен
				   |
				   |ИЗ
				   |   КешЦенИзНастроек КАК  ЦеныНоменклатуры
				   |
				   |ЛЕВОЕ СОЕДИНЕНИЕ КешЦенВходная КАК КешЦенВходная
				   |ПО (ЦеныНоменклатуры.Номенклатура = КешЦенВходная.Номенклатура)
	               |И (ЦеныНоменклатуры.Характеристика = КешЦенВходная.Характеристика)
				   |;
				   | %2
				   //////////////////////////////////////////////////////////////////////////////
				   //5
				   |ВЫБРАТЬ
				   |	ВЫБОР
				   |		КОГДА ЦеныНоменклатурыПоставщиковСрезПоследних.Период > &НачалоДня
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Сегодня,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Соглашение,
				   |	ЦеныНоменклатурыПоставщиковСрезПоследних.Цена
				   |ПОМЕСТИТЬ КешЦенПоставщиков
				   |ИЗ
				   |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Дата
				   |															,Соглашение В (&СписокВидовЦенПоставщика)
				   |							                                И (Номенклатура, Характеристика) В	(ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, Характеристика ИЗ СпрНоменклатура)
				   |															) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
				   |;
				   //////////////////////////////////////////////////////////////////////////////
				   //5
				   |ВЫБРАТЬ 
				   | 	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура, 
				   | 	Значение,
				   | 	Свойство
				   |
				   | ПОМЕСТИТЬ ДопСведения
				   |
				   | ИЗ РегистрСведений.ДополнительныеСведения 
				   |
				   | ГДЕ Объект В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура) 
				   | 	И Свойство В (&СписокДопСвойства)
				   |;";
				   
	Если ЗаказПоставщику.Пустая() Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаШапкаСпрНоменклатуры(МассивНоменклатуры),
																				"");
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
																				ТекстЗапросаТоварыИзЗаказаПоставщика(), 
																				ПолучитьТекстЗапросаКурсиЦенИзЗаказаПоставщика());
	КонецЕсли;			   


				   
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТоварыИзЗаказаПоставщика()
	ТекстЗапроса	=	"ВЫБРАТЬ
	            	 	|	Номенклатура,
						|	Характеристика КАК Характеристика,
	            	 	|	СУММА(Количество) 	КАК Количество,
	            	 	|	СРЕДНЕЕ(Цена) 		КАК Цена,
	            	 	|	Ссылка.Валюта 		КАК Валюта 
	            	 	|ПОМЕСТИТЬ СпрНоменклатура
	            	 	|ИЗ
	            	 	|	Документ.ЗаказПоставщику.Товары
	            	 	|ГДЕ
	            	 	|	Ссылка = &ЗаказПоставщику
	            	 	|	И НЕ Отменено
						|	И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)
	            	 	|
	            	 	|СГРУППИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика,
	            	 	|	Ссылка.Валюта
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Номенклатура,
						|	Характеристика
						|";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ТекстЗапросаШапкаСпрНоменклатуры(МассивНоменклатуры)
	ТекстЗапроса	=	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	            	 	|	Номенклатура.Ссылка КАК Ссылка
	            	 	|ПОМЕСТИТЬ КешНоменклатура
	            	 	|ИЗ
	            	 	|	Справочник.Номенклатура КАК Номенклатура
	            	 	|ГДЕ
	            	 	|	Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры) 
						|   %1
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Ссылка
	            	 	|;
	            	 	|
	            	 	|////////////////////////////////////////////////////////////////////////////////
	            	 	|ВЫБРАТЬ
	            	 	|	КешНоменклатура.Ссылка КАК Номенклатура,
	            	 	|	ЕСТЬNULL(ХарактеристикаПоВидуНом.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
	            	 	|ПОМЕСТИТЬ СпрНоменклатура
	            	 	|ИЗ
	            	 	|	КешНоменклатура КАК КешНоменклатура
	            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикаПоВидуНом
	            	 	|		ПО КешНоменклатура.Ссылка.ВидНоменклатуры = ХарактеристикаПоВидуНом.Владелец
	            	 	|
	            	 	|ОБЪЕДИНИТЬ
	            	 	|
	            	 	|ВЫБРАТЬ
	            	 	|	КешНоменклатура.Ссылка,
	            	 	|	ЕСТЬNULL(ХарактеристикиПоНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	            	 	|ИЗ
	            	 	|	КешНоменклатура КАК КешНоменклатура
	            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиПоНоменклатуры
	            	 	|		ПО КешНоменклатура.Ссылка = ХарактеристикиПоНоменклатуры.Владелец
	            	 	|
	            	 	|ИНДЕКСИРОВАТЬ ПО
	            	 	|	Номенклатура";
						
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(МассивНоменклатуры.Количество()=0, "", " И Номенклатура.Ссылка В (&МассивНоменклатуры)"));

	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ПолучитьТекстЗапросаДопКолонокПоЗаказуПоставщика(ЗаказПоставщику)
	Шапка = "";
	Соединения = "";
	
	Если НЕ ЗаказПоставщику.Пустая() Тогда
		
		Шапка = ",
				//|	КешЦеныИзЗаказаПоставщика.Характеристика 				КАК Характеристика,
				|	КешЦеныИзЗаказаПоставщика.Количество 					КАК КоличествоИзЗаказа,
				|	КешЦеныИзЗаказаПоставщика.ЦенаИзЗаказаПоставщикаУпрУч	КАК ЦенаПоставщикаУпрУч,
				|	КешЦеныИзЗаказаПоставщика.ЦенаИзЗаказаПоставщикаРеглУч	КАК ЦенаПоставщикаРеглУч
				|";
				
		Соединения = "
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешЦеныИзЗаказаПоставщика КАК  КешЦеныИзЗаказаПоставщика
				|ПО СпрНоменклатура.Номенклатура 	= КешЦеныИзЗаказаПоставщика.Номенклатура
				|И СпрНоменклатура.Характеристика  = КешЦеныИзЗаказаПоставщика.Характеристика";
	
	КонецЕсли;
		
	Возврат Новый Структура("ШапкаЗапроса,СоединениеЗапроса",Шапка,Соединения);
КонецФункции // ПолучитьТекстЗапросаДопКолонокПоЗаказуПоставщика()

Функция ПолучитьТекстЗапросаРеквизитовНоменклатуры()

	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КешСписокНоменклатура
				|ИЗ
				|	&СписокНоменклатуры КАК Список
				|;
				|
				|ВЫБРАТЬ
				|  Ссылка КАК Номенклатура,
				|  *
				|ИЗ 
				|	КешСписокНоменклатура
				|
				|ГДЕ
				|	ЭлементИзменен";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРеквизитовНоменклатуры()

Функция ПолучитьТекстЗапросаДополнительныхКолонок(СтруктураНастроек)
	
	ШапкаЗапроса 		= "";
	СоединениеЗапроса 	= "";
	
	СписокВидовЦен 			 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦен");
	СписокВидовЦенПоставщика = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокВидовЦенПоставщика");
	СписокДопСвойства		 = ПолучитьСписокСсылокИзНастроек(СтруктураНастроек,"СписокДопСвойства");

	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
		ШапкаЗапроса		=	ШапкаЗапроса +",	
			|ISNULL(КешЦен"+Инд+".ЦенаУпрУч,0) КАК ВидЦены_УпрУч_" + Инд + ",
			|ISNULL(КешЦен"+Инд+".ПроцентНаценки,0) КАК Процент_" + Инд + ",
			|ISNULL(КешЦен"+Инд+".ЦенаРеглУч,0)КАК ВидЦены_РеглУч_"+ Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешЦен"+Инд+".Номенклатура
			|И СпрНоменклатура.Характеристика = КешЦен"+Инд+".Характеристика
			|И  &ВидЦены"+Инд+"	= КешЦен"+Инд+".ВидЦены";			
	КонецЦикла;
	
	Для Каждого ЦенаПоставщика Из СписокВидовЦенПоставщика Цикл
		Инд	=	ПолучитьСтрокуИдентификатораСсылки(ЦенаПоставщика);
		ШапкаЗапроса		=	ШапкаЗапроса +",	
			|ISNULL(КешДопЦенПоставщика"+Инд+".Цена,0)		КАК ЦенаПоставщика_"+Инд+"
			// #5077 для условного оформления цен поставщика
			//{
			|,ISNULL(КешДопЦенПоставщика"+Инд+".Сегодня,0)	КАК ПСЦенаП_"+Инд;
			//}#5077
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ КешЦенПоставщиков КАК КешДопЦенПоставщика"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопЦенПоставщика"+Инд+".Номенклатура
			|И СпрНоменклатура.Характеристика = КешДопЦенПоставщика"+Инд+".Характеристика
			|И  &ВидЦеныПоставщика"+Инд+"	= КешДопЦенПоставщика"+Инд+".Соглашение";
	КонецЦикла;

	Для Каждого ДопСвойство Из СписокДопСвойства Цикл
		Инд	=	ПолучитьСтрокуИдентификатораСсылки(ДопСвойство);		
		ШапкаЗапроса		=	ШапкаЗапроса +",
			|ISNULL(Представление(КешДопСведения"+Инд+".Значение),"""")	КАК ДопСвойство_"+Инд;
		
		СоединениеЗапроса	=	СоединениеЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК КешДопСведения"+Инд+"
			|ПО СпрНоменклатура.Номенклатура = КешДопСведения"+Инд+".Номенклатура
			|И  &ДопСвойство"+Инд+"	= КешДопСведения"+Инд+".Свойство";
	КонецЦикла;
		
	Возврат Новый Структура("ШапкаЗапроса, СоединениеЗапроса", ШапкаЗапроса, СоединениеЗапроса);
	
КонецФункции

Функция ПолучитьТекстЗапросаКурсиЦенИзЗаказаПоставщика()
	ТекстЗапроса ="ВЫБРАТЬ
	               |	СпрНоменклатура.Номенклатура,
				   |	СпрНоменклатура.Характеристика,
	               |	СпрНоменклатура.Количество,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.Валюта = &ВалютаУпрУч
	               |			ТОГДА СпрНоменклатура.Цена
	               |		ИНАЧЕ СпрНоменклатура.Цена * КурсРеглУч.Курс / УпрКурс.Курс
	               |	КОНЕЦ КАК ЦенаИзЗаказаПоставщикаУпрУч,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.Валюта = &ВалютаРеглУч
	               |			ТОГДА СпрНоменклатура.Цена
	               |		ИНАЧЕ СпрНоменклатура.Цена * УпрКурс.Курс / КурсРеглУч.Курс
	               |	КОНЕЦ КАК ЦенаИзЗаказаПоставщикаРеглУч
	               |ПОМЕСТИТЬ КешЦеныИзЗаказаПоставщика
	               |ИЗ
				   |    СпрНоменклатура КАК СпрНоменклатура
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК КурсРеглУч
	               |ПО (КурсРеглУч.Валюта = &ВалютаРеглУч)
	               |И (КурсРеглУч.НачалоПериода <= &НачалоДня)
	               |И (КурсРеглУч.КонецПериода > &НачалоДня)
				   |
	               |ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК УпрКурс
	               |ПО (УпрКурс.Валюта = &ВалютаУпрУч)
	               |И (УпрКурс.НачалоПериода <= &НачалоДня)
	               |И (УпрКурс.КонецПериода > &НачалоДня)
	               |; ";
	Возврат ТекстЗапроса; 

КонецФункции // ()

Функция ПолучитьТекстЗапросаДокументаУстановкиЦен(СписокВидовЦен)
	
	Отбор = "";
	
	Для Каждого ВидЦены Из СписокВидовЦен Цикл
		Инд = ПолучитьСтрокуИдентификатораСсылки(ВидЦены);
		Отбор	=	Отбор + "
			|%1 Процент_"+Инд+" <> 0
			|"+?(ВидЦены = СписокВидовЦен[СписокВидовЦен.ВГраница()]," )", "");
		Если  ВидЦены = СписокВидовЦен[0] Тогда
			Отбор	=	СтрЗаменить(Отбор,"%1","И (");
		Иначе
			Отбор	=	СтрЗаменить(Отбор,"%1","ИЛИ ");		
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ КешСписокНоменклатура
				|ИЗ
				|	&СписокНоменклатуры КАК Список
				|;
				|
				|ВЫБРАТЬ
				|  Ссылка КАК Номенклатура,
				|  *
				|ИЗ 
				|	КешСписокНоменклатура
				|
				|ГДЕ
				|	ЭлементИзменен"
				+Отбор; 
								
	Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДокументаУстановкиЦен()

Функция ТекстЗапросаВыгрузкиКешТовара()  
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	*
				   |
	               |ПОМЕСТИТЬ КешТовару
	               |ИЗ
	               |	&КешСписокНоменкдатуры КАК Кеш
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	*
				   |ИЗ
	               |	КешТовару
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |	%ПолеСортировки% %Направления%";
				   
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СтруктураДопольнительныхКолонок

Функция ПолучитьСписокСсылокИзНастроек(Настройки, ИмяСвойства)

	СписокСсылок = Новый Массив;
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если Не Настройки.Свойство(ИмяСвойства) Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Если ТипЗнч(Настройки[ИмяСвойства]) <> Тип("Массив") Тогда
		Возврат СписокСсылок;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Настройки[ИмяСвойства] Цикл
		Если ТипЗнч(ЭлементСписка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЭлементСписка.Свойство("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		СписокСсылок.Добавить(ЭлементСписка.Ссылка);	
	КонецЦикла;
	
	Возврат СписокСсылок;

КонецФункции // ПолучитьСписокВидовЦенИзНастроек()

Процедура ПолучитьСтруктуруКолонокВидовЦен(Результат,Настройки)
	
	Если Не Настройки.Свойство("СписокВидовЦен") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦен) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокУпрУч	=	Константы.ВалютаУправленческогоУчета.Получить().Наименование;
	ЗаголовокРеглУч	=	Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
	
	//ПоляСВходнойЦеной = СтрЗаменить("3df19477-7886-11df-b33a-0011955cba6b","-","_");//Входная цена   демо
	ПоляСВходнойЦеной = СтрЗаменить("8bdf84fb-404c-11e0-9f98-001517115d85","-","_"); // основна база

	
	Для каждого Элемента Из Настройки.СписокВидовЦен Цикл
		
		Если Элемента.УИ = ПоляСВходнойЦеной Тогда
			ВходнаяЦена = Истина;
		Иначе
			ВходнаяЦена = Ложь;		
		КонецЕсли;
		
		Идентификатор = ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ГруппаВидЦены_" + Идентификатор);
		СтруктураКолонки.Вставить("Заголовок", Элемента.Заголовок);
		СтруктураКолонки.Вставить("ЭтоГруппа", Истина);
		СтруктураКолонки.Вставить("ТолькоПросмотр", ВходнаяЦена);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);

		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ВидЦены_УпрУч_" + Идентификатор);
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", ЗаголовокУпрУч);
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		СтруктураКолонки.Вставить("ПриИзменении", "Подключаемый_ЭлементВидЦеныУпрПриИзменении");
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ПроцентИзменен_ВидЦены_УпрУч_" + Идентификатор);
		СтруктураКолонки.Вставить("Тип", Новый ОписаниеТипов("Булево"));
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Истина);
		СтруктураКолонки.Вставить("Заголовок", "");
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ВидЦены_РеглУч_" + Идентификатор);
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", ЗаголовокРеглУч);
		СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
		СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
		СтруктураКолонки.Вставить("ПриИзменении", "Подключаемый_ЭлементВидЦеныРеглПриИзменении");
		Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		
		//Если НЕ ВходнаяЦена Тогда
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Имя", "ПроцентИзменен_ВидЦены_РеглУч_" + Идентификатор);
			СтруктураКолонки.Вставить("Тип", Новый ОписаниеТипов("Булево"));
			СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
			СтруктураКолонки.Вставить("СлужебнаяКолонка", Истина);
			СтруктураКолонки.Вставить("Заголовок", "");
			Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
			
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Имя", "Процент_" + Идентификатор);
			СтруктураКолонки.Вставить("Тип", Элемента.Тип);
			СтруктураКолонки.Вставить("Заголовок", "%");
			СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
			СтруктураКолонки.Вставить("СлужебнаяКолонка", Ложь);
			СтруктураКолонки.Вставить("ПриИзменении", "Подключаемый_ЭлементПроцентПриИзменении");
			Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
			
			СтруктураКолонки = Новый Структура;
			СтруктураКолонки.Вставить("Имя", "ПроцентИзменен_" + Идентификатор);
			СтруктураКолонки.Вставить("Тип", Новый ОписаниеТипов("Булево"));
			СтруктураКолонки.Вставить("ЭтоГруппа", Ложь);
			СтруктураКолонки.Вставить("СлужебнаяКолонка", Истина);
			СтруктураКолонки.Вставить("Заголовок", "");
			Результат.СписокВидовЦен.Добавить(СтруктураКолонки);
		//КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПолучитьСписокКолонок()

Процедура ПолучитьСтруктуруКолонокЦенПоставщика(Результат,Настройки) 
	
	Если Не Настройки.Свойство("СписокВидовЦенПоставщика") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокВидовЦенПоставщика) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	Для каждого Элемента Из Настройки.СписокВидовЦенПоставщика Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ЦенаПоставщика_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Элемента.Тип);
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование +", "+ Строка(Элемента.Ссылка.Валюта));
		Результат.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
		
		// #5077 для условного оформления цен поставщика
		//{
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ПСЦенаП_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Тип", Новый ОписаниеТипов("Булево"));
		СтруктураКолонки.Вставить("Заголовок", "");
		Результат.СписокВидовЦенПоставщика.Добавить(СтруктураКолонки);
		//}#5077
	КонецЦикла;
	
КонецПроцедуры// ПолучитьСтруктуруКолонокЦенПоставщика

Процедура ПолучитьСтруктуруКолонокДопСвойства(Результат,Настройки) 
		
	Если Не Настройки.Свойство("СписокДопСвойства") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройки.СписокДопСвойства) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемента Из Настройки.СписокДопСвойства Цикл
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", "ДопСвойство_" + ПолучитьСтрокуИдентификатораСсылки(Элемента.Ссылка));
		СтруктураКолонки.Вставить("Заголовок", Элемента.Ссылка.Наименование);
		Результат.СписокДопСвойства.Добавить(СтруктураКолонки);
	КонецЦикла;

КонецПроцедуры // ПолучитьСтруктуруКолонокДопСвойства()

#КонецОбласти

Функция ИнициализироватьТаблицуВидыЦены()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	
	Возврат Таблица;

КонецФункции // ИнициализироватьТаблицуВидыЦены()

Функция ИнициализироватьТаблицуТовары()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Таблица.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;

КонецФункции // ИнициализироватьТаблицуТовары()
 
Функция ПолучитьЦенуПоКурсу(ЦенаУпр, ЦенаРегл, ВидЦены, ВалютаУпр, ВалютаРегл)
	
	Если ВидЦены.ВалютаЦены = ВалютаУпр Тогда
		Возврат ЦенаУпр;
	ИначеЕсли ВидЦены.ВалютаЦены = ВалютаРегл Тогда
		Возврат ЦенаРегл;
	Иначе
		КурсыВалютыУпр		= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпр, ТекущаяДатаСеанса());
		КурсУпр 			= КурсыВалютыУпр.Курс / КурсыВалютыУпр.Кратность;
		КурсыВалютыВидаЦены	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВидЦены.ВалютаЦены, ТекущаяДатаСеанса());
		КурсЦены 			= КурсыВалютыВидаЦены.Курс / КурсыВалютыВидаЦены.Кратность;
		Возврат ЦенаУпр * (КурсУпр/КурсЦены);
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьКПП(Выборка, НаименованиеКолонки)
	
	Если НаименованиеКолонки = "КПП_Опт" Тогда
		ИмяРегистра		=	"КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж";
	ИначеЕсли  НаименованиеКолонки = "КПП_Розница" Тогда
		ИмяРегистра		=	"КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж";
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыЗаполнения	= КПП_ПолучитьПараметрыЗаполнения(ИмяРегистра,Выборка);
	
	Попытка
		git_КоефициентПриоритетностиПродажСервер.ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(ПараметрыЗаполнения, ИмяРегистра);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция КПП_ПолучитьПараметрыЗаполнения(ИмяРегистра,Выборка)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Период", ТекущаяДата());
	ПараметрыЗаполнения.Вставить("Номенклатура", Выборка.Ссылка);
	Если 		ИмяРегистра = "КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж" Тогда	
		ПараметрыЗаполнения.Вставить("Значение", Выборка.КПП_Розница);
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически", Выборка.КПП_Розница_НеПересчитыватьАвтоматически);
	ИначеЕсли 	ИмяРегистра = "КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж" Тогда
		ПараметрыЗаполнения.Вставить("Значение", Выборка.КПП_Опт);
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически", Выборка.КПП_Опт_НеПересчитыватьАвтоматически);	
	Иначе
		ПараметрыЗаполнения.Вставить("Значение");
		ПараметрыЗаполнения.Вставить("НеПересчитыватьАвтоматически");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции // КПП_ПолучитьПараметрыЗаполнения()

Функция ЗаписатьТоварнуюКатегорию(Выборка)
		
	Если Выборка.Номенклатура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Выборка.ТоварнаяКатегория = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	НоменклатураСсылка		= Выборка.Номенклатура;
	ТоварнаяКатегорияСсылка	= Выборка.ТоварнаяКатегория;
	
	Если ТоварнаяКатегорияСсылка.Владелец = НоменклатураСсылка.ВидНоменклатуры Тогда
		
		СправочникОбъект					= НоменклатураСсылка.ПолучитьОбъект();
		СправочникОбъект.ТоварнаяКатегория  =  ТоварнаяКатегорияСсылка;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьЦеновуюГруппу(Выборка)
	
	НоменклатураСсылка = Выборка.Номенклатура;
	
	Если ТипЗнч(НоменклатураСсылка) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать ценовую группу. Обратитесь в отдел технической поддержки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	СправочникОбъект				= НоменклатураСсылка.ПолучитьОбъект();
	СправочникОбъект.ЦеноваяГруппа 	= Выборка.ЦеноваяГруппа;
	
	Попытка
		СправочникОбъект.Записать();	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьДедлайнЦеновойГруппы(Выборка)

	НоменклатураСсылка						= Выборка.Номенклатура;
	СправочникОбъект						= НоменклатураСсылка.ПолучитьОбъект();
	СправочникОбъект.ДедлайнЦеновойГруппы 	= Выборка.Дедлайн;
	
	Попытка
		СправочникОбъект.Записать();	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.29";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Ирокез");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Ирокез [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Ирокез [" + Версия + "]", "Ирокез", "ВызовКлиентскогоМетода", Истина);
 
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти


