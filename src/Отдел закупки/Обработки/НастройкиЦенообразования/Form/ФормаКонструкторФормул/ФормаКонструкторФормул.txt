#Область ИнтерфейсАвтоматическихТестов&НаКлиентеПерем ЮнитТест;&НаКлиентеФункция ПолучитьСписокТестов(ЮнитТестирование) Экспорт		ЮнитТест = ЮнитТестирование;		СпиокТестов = Новый Массив;		Возврат СпиокТестов;	КонецФункции#КонецОбласти#Область ОбработчикиСобытийФормы&НаСервереПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)		Если Параметры.Свойство("АвтоТест") Тогда		Возврат;	КонецЕсли;	ВидНоменклатуры = ?(Параметры.ВидНоменклатуры=Неопределено, Справочники.ВидыНоменклатуры.ПустаяСсылка(), Параметры.ВидНоменклатуры);	ВидЦены			= Параметры.ВидЦены;	Формула			= Параметры.Формула;		ОбъектОбработки 	= РеквизитФормыВЗначение("Объект");	ДеревоОператоров 	= ОбъектОбработки.ПостроитьДеревоОператоров();	ДеревоОперандов 	= ОбъектОбработки.ПостроитьДеревоОперандов(ВидНоменклатуры, ВидЦены);	Соответствие		= ОбъектОбработки.ПолучитьСоответствияФормулы(ВидЦены, ВидНоменклатуры);		Если Соответствие <> Неопределено Тогда		Для Каждого Элемент ИЗ Соответствие Цикл			Если ДеревоОперандов.Строки.Найти(Элемент.Ключ, "Идентификатор", Истина) = Неопределено Тогда				Сообщить(Элемент.Значение);				Формула = СтрЗаменить(Формула, Элемент.Ключ, Элемент.Значение.Наименование);				КонецЕсли;		КонецЦикла;	КонецЕсли;		ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект"); 	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");	ЗначениеВРеквизитФормы(ДеревоОперандов, "Операнды");		КонецПроцедуры&НаКлиентеПроцедура ПриЗакрытии()		Если Модифицированность = Ложь Тогда				СтруктураПараметров = ВладелецФормы.ПолучитьСтруктуруПараметровФормыКонструкторФормул();		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтаФорма);		Оповестить("ЗакрытиеФормыКонструкторФормул", СтруктураПараметров);			КонецЕсли;	КонецПроцедуры#КонецОбласти&НаКлиентеПроцедура ОперандыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)	Отказ=Истина;КонецПроцедуры&НаКлиентеПроцедура ОперандыПередУдалением(Элемент, Отказ)	Отказ=Истина;КонецПроцедуры&НаКлиентеПроцедура ОператорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)	Отказ=Истина;КонецПроцедуры&НаКлиентеПроцедура ОператорыПередУдалением(Элемент, Отказ)	Отказ=Истина;КонецПроцедуры&НаКлиентеПроцедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг = 0)		СтрокаНач = 0;	СтрокаКон = 0;	КолонкаНач = 0;	КолонкаКон = 0;		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);		Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстДляВставки)) > Элементы.Формула.Ширина / 8 Тогда		Элементы.Формула.ВыделенныйТекст = "";	КонецЕсли;			Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;		Если Не Сдвиг = 0 Тогда		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);		Элементы.Формула.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач - Сдвиг, СтрокаКон, КолонкаКон - Сдвиг);	КонецЕсли;			ТекущийЭлемент = Элементы.Формула;	КонецПроцедуры&НаКлиентеПроцедура ВставитьОперандВФормулу()	Если Не Элементы.Операнды.ТекущиеДанные.ЭтоГруппа Тогда		ВставитьТекстВФормулу(РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Элементы.Операнды.ТекущиеДанные.Идентификатор));	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ВставитьОператорВФормулу()	Если Элементы.Операторы.ТекущиеДанные.Идентификатор = "Формат" Тогда		ФорматСтроки = Новый КонструкторФорматнойСтроки;		ФорматСтроки.ОткрытьМодально();		Если ЗначениеЗаполнено(ФорматСтроки.Текст) Тогда			ТекстДляВставики = "Формат( , """ + ФорматСтроки.Текст + """)";			ВставитьТекстВФормулу(ТекстДляВставики, Элементы.Операторы.ТекущиеДанные.Сдвиг);		Иначе				ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);		КонецЕсли;	Иначе			ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ОперандыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	СтандартнаяОбработка=Ложь;	ВставитьОперандВФормулу();КонецПроцедуры&НаКлиентеПроцедура ОперандыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда		Выполнение = Ложь;	Иначе		ПараметрыПеретаскивания.Значение = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Элемент.ТекущиеДанные.Идентификатор);	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	ВставитьОператорВФормулу();КонецПроцедуры&НаКлиентеПроцедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда		Выполнение = Ложь;	Иначе		ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Идентификатор;	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)	Если Элемент.ТекущиеДанные.Оператор = "Формат(,)" Тогда		ФорматСтроки = Новый КонструкторФорматнойСтроки;		ФорматСтроки.ОткрытьМодально();		Если ЗначениеЗаполнено(ФорматСтроки.Текст) Тогда			ТекстДляВставки = "Формат( , """ + ФорматСтроки.Текст + """)";			Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;		КонецЕсли;	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура ФормулаПриИзменении(Элемент)	Модифицированность=Истина;КонецПроцедуры&НаКлиентеПроцедура ПередЗакрытием(Отказ, СтандартнаяОбработка)	ОчиститьСообщения();	Если Модифицированность Тогда		Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, ПолучитьМассивОперандов(), "Формула") Тогда			Отказ = Истина;		Иначе			Ответ = Вопрос("Формула была изменена, сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);			Если Ответ = КодВозвратаДиалога.Да Тогда				Модифицированность=Ложь;				ОбработкаФормулыПередЗакрытием(Неопределено);				Закрыть(Формула);			КонецЕсли;			Если Ответ = КодВозвратаДиалога.Нет Тогда				Модифицированность=Ложь;				Закрыть();			КонецЕсли;			Если Ответ = КодВозвратаДиалога.Отмена Тогда				Отказ=Истина;			КонецЕсли;		КонецЕсли;	КонецЕсли;КонецПроцедуры&НаКлиентеФункция ПолучитьМассивОперандов()		МассивОперандов = Новый Массив();				ТекстФормулы = СокрЛП(Формула);	Если СтрЧислоВхождений(ТекстФормулы, "[") <> СтрЧислоВхождений(ТекстФормулы, "]") Тогда		ЕстьОперанды = Ложь;	Иначе		ЕстьОперанды = Истина;	КонецЕсли;		Пока ЕстьОперанды = Истина Цикл		НачалоОперанда = Найти(ТекстФормулы, "[");		КонецОперанда = Найти(ТекстФормулы, "]");				Если НачалоОперанда = 0			Или КонецОперанда = 0			Или НачалоОперанда > КонецОперанда Тогда			ЕстьОперанды = Ложь;			Прервать;					КонецЕсли;				ИмяОперанда = Сред(ТекстФормулы, НачалоОперанда + 1, КонецОперанда - НачалоОперанда - 1);		МассивОперандов.Добавить(ИмяОперанда);		ТекстФормулы = СтрЗаменить(ТекстФормулы, "[" + ИмяОперанда + "]", "");		КонецПрошлогоОперанда = КонецОперанда;			КонецЦикла;			Возврат МассивОперандов;	КонецФункции&НаКлиентеПроцедура ПроверитьФормулу(Команда)	ОчиститьСообщения();	РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, ПолучитьМассивОперандов(), "Формула")КонецПроцедуры&НаКлиентеПроцедура ЗаписатьИЗакрыть(Команда)	ОчиститьСообщения();	МассивОперандов = ПолучитьМассивОперандов(); 	Если РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, МассивОперандов, "Формула") Тогда		Модифицированность = Ложь;		ОбработкаФормулыПередЗакрытием(МассивОперандов);		Если ЗакрытьФорму Тогда 			Закрыть(Формула);		КонецЕсли;	КонецЕсли;КонецПроцедуры&НаСервереПроцедура ОбработкаФормулыПередЗакрытием(МассивОперандов)	ФормулаИдентификаторы = Формула;	ЗакрытьФорму = Истина;	СоответствиеОперанды = Новый Соответствие;	ДеревоЗначений = РеквизитФормыВЗначение("Операнды");	МассивЭлементов = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);	Для Каждого Элемент Из МассивЭлементов Цикл		СоответствиеОперанды[Элемент.Идентификатор] = Элемент.Идентификатор;		КонецЦикла; 		Для Каждого ЕлМасива из МассивОперандов Цикл 		РезультатСоответствия = СоответствиеОперанды.Получить(ЕлМасива);		Если РезультатСоответствия=Неопределено Тогда			Сообщение = Новый СообщениеПользователю;			Сообщение.Текст = "Неверно указанной операнд ["+ЕлМасива+"]";			Сообщение.Сообщить();			ЗакрытьФорму = Ложь;			Возврат;		КонецЕсли;		КонецЦикла;			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	Соответствие = ОбработкаОбъект.ПолучитьХранилищеТиповШаблонов(ЭтаФорма);	ОбработкаОбъект.ЗаписатьФормулувРегистр("ALPS_ШаблоныКонкурентовШаблон",ВидЦены, ВидНоменклатуры, Формула, Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(9)));	ВидВерсии = ?(ВидНоменклатуры.Пустая(),					Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы,					Перечисления.ALPS_ВидыВерсий.Формулы);	//ОбработкаОбъект.СохранитьРевизию(ВидВерсии, ЭтаФорма, ВидЦены, ВидНоменклатуры);	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект"); КонецПроцедуры // ОбработкаФормулыПередЗакрытием() 