
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;
	СпиокТестов.Добавить("Тест_ПроверитьПолучитьСтруктуруПараметровФормыКонструкторФормул");
	Возврат СпиокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьПолучитьСтруктуруПараметровФормыКонструкторФормул() Экспорт
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыКонструкторФормул();
	ЮнитТест.ПроверитьТип(СтруктураПараметров, Тип("Структура"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Свойство("ВидЦены"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Свойство("ВидНоменклатуры"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Свойство("Формула"));
	ЮнитТест.ПроверитьИстину(СтруктураПараметров.Количество() = 3);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
			
	Закладки_ПрошлаяЗакладка = "ЗакладкаАналитика";

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьТекущийКурс(ЭтаФорма);
	ОбработкаОбъект.ЗаголовокВидЦеныПриИзменении(ЭтаФорма);
	ОбработкаОбъект.УстановитьВидимостьПоРолям(Элементы);
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("КТС_ПросмотрВерсийЦенообразования") Тогда
		ОбработкаОбъект.НарисоватьИнтерфейсПользователяДляВерсий(ЭтаФорма, Элементы);
	КонецЕсли;
	
	ЭтаФорма.Заголовок = "Настройки ценообразования " + ОбработкаОбъект.СведенияОВнешнейОбработке().Версия;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если Заголовок_ВидЦены.Пустая() Тогда
	//	Элементы.ТЗ_АналитикаНаценки.Доступность 		= Ложь;
	//	Элементы.ТЗ_АналитикаЦеновыеГруппы.Доступность 	= Ложь;
	//	Элементы.Аналитика_ЗаписатьНаценки.Доступность 	= Ложь;
	//	Элементы.Аналитика_ЗагрузитьШаблон.Доступность 	= Ложь;
	//Иначе
	//	Элементы.ТЗ_АналитикаНаценки.Доступность 		= Истина;
	//	Элементы.ТЗ_АналитикаЦеновыеГруппы.Доступность 	= Истина;
	//	Элементы.Аналитика_ЗаписатьНаценки.Доступность 	= Истина;
	//	Элементы.Аналитика_ЗагрузитьШаблон.Доступность 	= Истина;
	//КонецЕсли;
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные = Неопределено Тогда ВидНоменклатуры = Неопределено Иначе ВидНоменклатуры = ТекущиеДанные.Ссылка КонецЕсли;
	ЗаголовокВидЦеныПриИзмененииНаСервере(ВидНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыКонструкторФормул" Тогда
		Если Параметр.Свойство("ВидЦены") И Параметр.Свойство("ВидНоменклатуры") Тогда
			
			ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если Параметр.ВидЦены = Заголовок_ВидЦены И Параметр.ВидНоменклатуры = ТекущиеДанные.Ссылка Тогда
				Параметр.Свойство("Формула", Подвал_Аналитика_Шаблон);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

///////////////////////////////////////////////////////////////////////////////////////////
//						2. БИБЛИОТЕКА НА КЛИЕНТЕ
///////////////////////////////////////////////////////////////////////////////////////////


&НаКлиенте
Функция ПолучитьТекущиеДанныеКоллекцииЗначений(ИмяКоллекцииЗначений)
	ТДанные  = Элементы[ИмяКоллекцииЗначений].ТекущиеДанные;
	ТСтрока = Элементы[ИмяКоллекцииЗначений].ТекущаяСтрока;
	Возврат ?(ТДанные <> Неопределено И ТСтрока <> Неопределено, ТДанные, Неопределено);		
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеВидаЦеныЗаголовка()
	
	Результат = Ложь;
	
	ОчиститьСообщения();
	
	Если Заголовок_ВидЦены.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо заполнить вид цены";
		Сообщение.Поле = "Заголовок_ВидЦены";
		Сообщение.Сообщить(); 
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции





///////////////////////////////////////////////////////////////////////////////////////////
//									3. ЗАКЛАДКИ
///////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ЗакладкаАналитика(Команда)
	Если Наценки_НаценкиИзменены Тогда
		Если Вопрос("Наценки были изменены, перезаписать таблицу наценок?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаценкиНаСервере(ВидЦены_ТекущийВидЦены);
		КонецЕсли;
		Наценки_НаценкиИзменены = Ложь;
	КонецЕсли;
	ОбработкаСменыЗакладки("ЗакладкаАналитика", "СтраницаАналитика");
	Элементы.Список_ВидыНоменклатуры.ТекущийЭлемент = ВидНоменклатуры_ТекущийВидНоменклатуры;
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаНастройки(Команда)
	Если Наценки_НаценкиИзменены Тогда
		Если Вопрос("Наценки были изменены, перезаписать таблицу наценок?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаценкиАналитикиНаСервере(ВидНоменклатуры_ТекущийВидНоменклатуры);
		КонецЕсли;
		Наценки_НаценкиИзменены = Ложь;
	КонецЕсли;
	ОбработкаСменыЗакладки("ЗакладкаНастройки", "СтраницаНастройки");
	ЗагрузитьВидыЦенНаСервере();
	МассивСтрок = ТЗ_ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены_ТекущийВидЦены));
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.ТЗ_ВидыЦен.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаРевизии(Команда)
	ОбработкаСменыЗакладки("ЗакладкаРевизии", "СтраницаРевизии");
	Элементы.ДС_Ревизии.ТекущийЭлемент = Версия_ТекущаяИдентификаторВерсии;
КонецПроцедуры


&НаКлиенте
Процедура РазрешитьРедактированиеОбщихНастроек(Команда)
	Элементы.СтраницаНастройки.ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Конкуренты_ОткрытьСпрПартнеры(Команда)
	ОткрытьФорму("Справочник.Партнеры.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура Наценки_ЗагрузитьШаблон(Команда)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.НастройкиЦенообразования.Форма.ФормаЗагрузкиШаблона", Новый Структура("ВидЦены, ВидНоменклатуры", ТекущиеДанные.ВидЦены, Неопределено));
		Если Результат <> Неопределено Тогда
			ЗагрузитьНаценкиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Наценки_Записать(Команда)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаписатьНаценкиНаСервере(ТекущиеДанные.ВидЦены);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВерсииПерейтиНаВерсию(Команда)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ДС_Ревизии");
	Если ТекущиеДанные <> Неопределено Тогда
		ПерейтиНаВерсиюНаСервере(ТекущиеДанные.ИдентификаторВерсии, ТекущиеДанные.ВидВерсии);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура РасчитатьФасет(Команда)
	
	Перем ПараметрыОтбора;	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый Структура;  
		ПараметрыОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;
		
	РасчитатьФасетСервер();
	//Востанавливаем курсор на нужный документ, если он не пропал из выгрузки	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = ТЗ_Номенклатура.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда Элементы.ТЗ_Номенклатура.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ВидыЦен_ПересчитатьЦену(Команда)
	ВызватьИсключение "Пока не работает";
КонецПроцедуры


&НаКлиенте
Процедура УстановитьЦену(Команда)
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СтрукутраПередачи 			= Новый Структура;  
		СтрукутраПередачи.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		Форма = ПолучитьФорму("ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Установка цен номенклатуры") + ".Форма.Форма", СтрукутраПередачи, ЭтаФорма, Новый УникальныйИдентификатор());
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли	
КонецПроцедуры


&НаКлиенте
Процедура Аналитика_ЗаписатьНаценки(Команда)
	
	Если ПроверитьЗаполнениеВидаЦеныЗаголовка() Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаписатьНаценкиАналитикиНаСервере(ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика_ЗагрузитьШаблон(Команда)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные <> Неопределено Тогда
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.НастройкиЦенообразования.Форма.ФормаЗагрузкиШаблона", Новый Структура("ВидЦены, ВидНоменклатуры", Заголовок_ВидЦены, ТекущиеДанные.Ссылка));
		Если Результат <> Неопределено Тогда
			ВидНоменклатурыПриАктивизациистрокиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Аналитика_ДобавитьЦеновуюГруппу(Команда)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = ТЗ_АналитикаЦеновыеГруппы.Добавить();
		НоваяСтрока.ВидЦены 		= Заголовок_ВидЦены;
		НоваяСтрока.ВидНоменклатуры = ТекущиеДанные.Ссылка;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФормулу(Команда)
	ЗагрузитьФормулуНаСервере();
КонецПроцедуры

#КонецОбласти 


// Установка смены закладки
//
// Параметры
//
//  <ИмяКнопкиЗакладки> 	- <Тип(Строка)> - Имя элемента(кнопки) для которой установится пометка
//
//  <ИмяТекущейСтраницы> 	- <Тип(Строка)> - Имя элемента(группы формы) которую будем активизировать
//
&НаКлиенте
Процедура ОбработкаСменыЗакладки(ИмяКнопкиЗакладки, ИмяТекущейСтраницы)

	Элементы[Закладки_ПрошлаяЗакладка].Пометка 			= Ложь;
	Элементы[ИмяКнопкиЗакладки].Пометка					= Истина;
	Элементы.ГруппаСтраницыОсновноеОкно.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	
	Закладки_ПрошлаяЗакладка = ИмяКнопкиЗакладки;

КонецПроцедуры // ОбработкаСменыЗакладки()


&НаСервере
Процедура ЗагрузитьВидыЦенНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьВидыЦен(ЭтаФорма);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗагрузитьВидыЦенНаСервере()
 






///////////////////////////////////////////////////////////////////////////////////////////
//									4. ТЗ_ВидыЦен
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТЗ_ВидыЦенПриИзменении(Элемент)
	ЗаписатьНастройкиВидовЦенКлиент(Элемент.ТекущийЭлемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ВидыЦенПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ВидыЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ВидыЦенРасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка    = Ложь;
	ТекущиеДанные 			= ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Расписание.Количество() > 0 Тогда
			Расписание = ТекущиеДанные.Расписание.Получить(0).Значение;
		Иначе
			Расписание = Новый РасписаниеРегламентногоЗадания;
		КонецЕсли;
		
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		Если Диалог.ОткрытьМодально() Тогда
			НовоеРасписание = Новый СписокЗначений();
			НовоеРасписание.Добавить(Диалог.Расписание);
			ТекущиеДанные.Расписание = НовоеРасписание;
			ЗаписатьНастройкиВидовЦенКлиент("");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ВидыЦенРасписаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		 = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Расписание.Очистить();
		ЗаписатьНастройкиВидовЦенКлиент("");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТЗ_ВидыЦенEmailОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные	 	 = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.НастройкиЦенообразования.Форма.ФормаНастройкиEmailОповещений", Новый Структура("ВидЦены", ТекущиеДанные.ВидЦены));
		Если Результат <> Неопределено Тогда
			ТекущиеДанные.EmailОповещения = Результат;
			ЗаписатьНастройкиВидовЦенКлиент("");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ВидыЦенПриАктивизацииСтроки(Элемент)
	Если Наценки_НаценкиИзменены Тогда
		Если Вопрос("Наценки были изменены, перезаписать таблицу наценок?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаценкиНаСервере(ВидЦены_ТекущийВидЦены);
		КонецЕсли;
		Наценки_НаценкиИзменены = Ложь;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияТЗ_ВидыЦен", 0.2, Истина);
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьНастройкиВидовЦенКлиент(ИмяЭлемента)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("ВидЦены, БазовыйВидЦены, Входная, ДопустимоеОтклонениеЦены, Авто, Расписание, EmailОповещения");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
		Отказ = Ложь;
		ЗаписатьНастройкиВидовЦенСервер(СтруктураПараметров, ИмяЭлемента, Отказ);
		РезультатПоиска = ТЗ_ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", СтруктураПараметров.ВидЦены));
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.ТЗ_ВидыЦен.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();	
			Если Отказ Тогда
				ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
				Если ТекущиеДанные <> Неопределено Тогда
					ТекущиеДанные.БазовыйВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



&НаСервере
Процедура ЗаписатьНастройкиВидовЦенСервер(СтруктураПараметров, ИмяЭлемента, Отказ)
	СтруктураПараметров.Расписание = Новый ХранилищеЗначения(СтруктураПараметров.Расписание, Новый СжатиеДанных(9));
	Если ИмяЭлемента = "ТЗ_ВидыЦенВходная" Тогда
		Если СтруктураПараметров.Входная Тогда
			СтруктураПараметров.БазовыйВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если ИмяЭлемента = "ТЗ_ВидыЦенБазовыйВидЦены" Тогда
		Если Не СтруктураПараметров.БазовыйВидЦены.Пустая() Тогда
			СтруктураПараметров.Входная = Ложь;
		КонецЕсли;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьНастройкиВидовЦен(ЭтаФорма, СтруктураПараметров, Отказ);
	Если Не Отказ Тогда // Ревизии
		ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен; // Ревизии
		ОбработкаОбъект.СохранитьРевизию(ВидВерсии ,ЭтаФорма); // Ревизии
	КонецЕсли; // Ревизии
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");		
КонецПроцедуры







///////////////////////////////////////////////////////////////////////////////////////////
//									5. ТЗ_Наценки
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработчикОжиданияТЗ_ВидыЦен()
	ЗагрузитьНаценкиНаКлиенте();    	
КонецПроцедуры



&НаКлиенте
Процедура ТЗ_НаценкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
		Если ТекущиеДанные <> Неопределено Тогда
			ИзменитьТаблицуНаценокНаСервере(ТекущиеДанные.ВидЦены);
			Наценки_НаценкиИзменены = Истина;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_НаценкиПослеУдаления(Элемент)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		ИзменитьТаблицуНаценокНаСервере(ТекущиеДанные.ВидЦены);
		Наценки_НаценкиИзменены = Истина;
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ЗагрузитьНаценкиНаКлиенте()
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьНаценкиНаСервере(ТекущиеДанные.ВидЦены, ТекущиеДанные.Входная);
		ВидЦены_ТекущийВидЦены = ТекущиеДанные.ВидЦены;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьНаценкиНаКлиенте()


&НаСервере
Процедура ЗагрузитьНаценкиНаСервере(ВидЦены, Входная)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьНаценки(ЭтаФорма, "ТЗ_Наценки", ВидЦены, , Входная);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗагрузитьНаценкиНаСервере()
 
&НаСервере
Процедура ЗаписатьНаценкиНаСервере(ВидЦены)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьНаценки(ЭтаФорма, "ТЗ_Наценки", ВидЦены);
	ОбработкаОбъект.СохранитьРевизию(Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты, ЭтаФорма);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗаписатьНаценкиНаСервере()
 
&НаСервере
Процедура ИзменитьТаблицуНаценокНаСервере(ВидЦены)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьУдалитьЗначениеКФасету(ЭтаФорма, "ТЗ_Наценки", ВидЦены);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ИзменитьТаблицуНаценокНаСервере\()


&НаКлиенте
Процедура ТЗ_ЦеновыеГруппыСниматьЦеновуюГруппуПриИзменении(Элемент)
	ЗаписатьЦеновыеГруппыНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЦеновыеГруппыИгнорироватьВНаличииПриИзменении(Элемент)
	ЗаписатьЦеновыеГруппыНаКлиенте(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЦеновыеГруппыИгонорироватьАктуальныеПриИзменении(Элемент)
	ЗаписатьЦеновыеГруппыНаКлиенте(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЦеновыеГруппыПослеУдаления(Элемент)
	УдалитьЦеновыеГруппыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЦеновыеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Результат = ОткрытьФормуМодально("Справочник.ЦеновыеГруппы.ФормаВыбора");
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьЦеновыеГруппыКлиенте(Результат);
	
КонецПроцедуры




&НаКлиенте
Процедура ЗаписатьЦеновыеГруппыНаКлиенте(БазовыеНастройки)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаписатьЦеновыеГрупыНаСервере(ТекущиеДанные.ВидЦены, БазовыеНастройки);
	КонецЕсли;
КонецПроцедуры // ЗаписатьЦеновыеГруппыНаКлиенте()

&НаСервере
Процедура ЗаписатьЦеновыеГрупыНаСервере(ВидЦены, БазовыеНастройки)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьЦеновыеГруппы(ЭтаФорма, "ТЗ_ЦеновыеГруппы", ВидЦены, БазовыеНастройки);
	ОбработкаОбъект.СохранитьРевизию(Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы, ЭтаФорма, ВидЦены,Истина);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗаписатьЦеновыеГрупыНаСервере()


&НаКлиенте
Процедура УдалитьЦеновыеГруппыНаКлиенте()

	ТекущиеДанныеВидЦены = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	
	Если ТекущиеДанныеВидЦены <> Неопределено Тогда
		УдалитьЦеновыеГруппыНаСервере(ТекущиеДанныеВидЦены.ВидЦены);
	КонецЕсли;

КонецПроцедуры // УдалитьЦеновыеГруппыНаКлиенте()
 
&НаСервере
Процедура УдалитьЦеновыеГруппыНаСервере(ВидЦены)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьЦеновыеГруппы(ЭтаФорма, "ТЗ_ЦеновыеГруппы", ВидЦены, Ложь);
	ОбработкаОбъект.ЗаписатьЦеновыеГруппы(ЭтаФорма, "ТЗ_ЦеновыеГруппы", ВидЦены, Истина);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // УдалитьЦеновыеГруппыНаСервере()
 


&НаКлиенте
Процедура ДобавитьЦеновыеГруппыКлиенте(ЦеноваГруппа)

	ТекущиеДанныеВидЦены = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	
	Если ТекущиеДанныеВидЦены <> Неопределено Тогда
		НоваяСтрока = ТЗ_ЦеновыеГруппы.Добавить();
		НоваяСтрока.ЦеноваяГруппа = ЦеноваГруппа;
		НоваяСтрока.ВидЦены = ТекущиеДанныеВидЦены.ВидЦены;
		ДобавитьЦеновыеГруппыНаСервере(ТекущиеДанныеВидЦены.ВидЦены);
	КонецЕсли;

КонецПроцедуры // ДобавитьЦеновыеГруппыНаКлиенте()
 
&НаСервере
Процедура ДобавитьЦеновыеГруппыНаСервере(ВидЦены)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьЦеновыеГруппы(ЭтаФорма, "ТЗ_ЦеновыеГруппы", ВидЦены, Ложь);
	ОбработкаОбъект.ЗаписатьЦеновыеГруппы(ЭтаФорма, "ТЗ_ЦеновыеГруппы", ВидЦены, Истина);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры




///////////////////////////////////////////////////////////////////////////////////////////
//									6. ТЗ_Конкуренты
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТЗ_КонкурентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КонкурентыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КонкурентыПриИзменении(Элемент)
	ЗаписатьКонкурентаНаКлиенте(Элемент.ТекущиеДанные.Соглашение, Элемент.ТекущиеДанные.Конкурент);
КонецПроцедуры





&НаКлиенте
Процедура ЗаписатьКонкурентаНаКлиенте(Соглашение, ЯвляетсяКонкурент)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаписатьКонкурентаНаСервере(ТекущиеДанные.ВидЦены, Соглашение, ЯвляетсяКонкурент);
	КонецЕсли;
КонецПроцедуры // ЗаписатьКонкурентаНаКлиенте()
 
&НаСервере
Процедура ЗаписатьКонкурентаНаСервере(ВидЦены, Соглашение, ЯвляетсяКонкурент)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьКонкурента(ВидЦены, Соглашение, ЯвляетсяКонкурент);
	ОбработкаОбъект.СохранитьРевизию(Перечисления.ALPS_ВидыВерсий.Конкуренты, ЭтаФорма, ВидЦены);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   
КонецПроцедуры // ЗаписатьКонкурентаНаСервере()






///////////////////////////////////////////////////////////////////////////////////////////
//									6. Заголовок
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Заголовок_ВидЦеныНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.Заголовок_ВидЦены.СписокВыбора.Очистить();
	СписокЦен = Новый Соответствие;
	ЗаголовокВидЦеныНачалоВыборНаСервере(СписокЦен);
	Для каждого Цена Из СписокЦен Цикл
		Элементы.Заголовок_ВидЦены.СписокВыбора.Добавить(Цена.Ключ, Цена.Значение);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура Заголовок_ВидЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	Обработчик 				= Новый ОписаниеОповещения("ВыборВидЦеныИзВыпадающегоСписка", ЭтаФорма);
	СписокВыбора			= Новый СписокЗначений;

	СписокЦен = Новый Соответствие;
	ЗаголовокВидЦеныНачалоВыборНаСервере(СписокЦен);
	Для каждого Цена Из СписокЦен Цикл
		СписокВыбора.Добавить(Цена.Ключ, Цена.Значение);
	КонецЦикла;
	
	НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(Заголовок_ВидЦены);
	Если НачальныйЭлемент = Неопределено Тогда
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент);
	Иначе 
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидЦеныИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Заголовок_ВидЦены = ВыбранныйЭлемент.Значение;
		Заголовок_ВидЦеныПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заголовок_ВидЦеныПриИзменении(Элемент)
	ТЗ_Номенклатура.Очистить();
	СписокКонкурентов.Очистить();
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные = Неопределено Тогда ВидНоменклатуры = Неопределено Иначе ВидНоменклатуры = ТекущиеДанные.Ссылка КонецЕсли;
	ЗаголовокВидЦеныПриИзмененииНаСервере(ВидНоменклатуры);
КонецПроцедуры



&НаСервере
Процедура ЗаголовокВидЦеныНачалоВыборНаСервере(СписокЦен)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПолучитьСписокВидовЦенДляЗаголовока(СписокЦен);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗаголовокВидЦеныНачалоВыборНаСервере()

&НаСервере
Процедура ЗаголовокВидЦеныПриИзмененииНаСервере(ВидНоменклатуры)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаголовокВидЦеныПриИзменении(ЭтаФорма);
	ОбработкаОбъект.ОбработкаАктивизацииСтрокиСписок_ВидыНоменклатуры(ЭтаФорма, ВидНоменклатуры);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗаголовокВидЦеныПриИзмененииНаСервере()


&НаКлиенте
Процедура ОтклонениеУменшенияДляВидаНоменклатурыПриИзменении(Элемент)
	ОбработатьИзменениеОтклоненияЦеныКлиент(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПорогСрабатыванияДляВидаНоменклатурыПриИзменении(Элемент)
	ОбработатьИзменениеОтклоненияЦеныКлиент(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтклонениеУвеличенияДляВидаНоменклатурыПриИзменении(Элемент)
	ОбработатьИзменениеОтклоненияЦеныКлиент(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеОтклоненияЦеныКлиент(Элемент)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные = Неопределено Тогда
		ОбнулитьЗначенияОтклонений();
		СтрокаСообщения = НСтр("ru='Выберите вид номенклатуры для установки настройки отклонения цен вида номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , Элемент.Имя);
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ПометкаУдаления Тогда
		ОбнулитьЗначенияОтклонений();
		СтрокаСообщения = НСтр("ru='Выберите вид номенклатуры без пометки на удаление для установки настройки отклонения цен вида номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , Элемент.Имя);
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ОбнулитьЗначенияОтклонений();
		СтрокаСообщения = НСтр("ru='Выберите элемент вид номенклатуры для установки настройки отклонения цен вида номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , Элемент.Имя);
		Возврат;
	КонецЕсли;
	Если Заголовок_ВидЦены.Пустая() Тогда
		ОбнулитьЗначенияОтклонений();
		СтрокаСообщения = НСтр("ru='Выберите вид цены для установки настройки вида номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , "Заголовок_ВидЦены");
		Возврат;
	КонецЕсли;
	ОбработатьИзменениеОтклоненияЦеныСервер(ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьЗначенияОтклонений()
	ОтклонениеУменшенияДляВидаНоменклатуры 		= 0;	
	ОтклонениеУвеличенияДляВидаНоменклатуры 	= 0;
	ПорогСрабатыванияДляВидаНоменклатуры		= 0;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтклоненияЦеныСервер(ВидНоменклатуры)
	РеквизитФормыВЗначение("Объект").ЗаписатьИзменениеОтклоненияЦены(ЭтаФорма, ВидНоменклатуры);
КонецПроцедуры






///////////////////////////////////////////////////////////////////////////////////////////
//									7. Список_Видыноменклатуры
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Список_ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	ВидНоменклатурыПриАктивизациистрокиНаКлиенте();
	ТЗ_Номенклатура.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ВидНоменклатурыПриАктивизациистрокиНаКлиенте()
	ОчиститьСообщения();
	Если Заголовок_ВидЦены.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо задать вид цены.";
		Сообщение.Поле = "Заголовок_ВидЦены";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
		
	Если Наценки_НаценкиИзменены Тогда
		Если Вопрос("Наценки были изменены, перезаписать таблицу наценок?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьНаценкиАналитикиНаСервере(ВидНоменклатуры_ТекущийВидНоменклатуры);
		КонецЕсли;
		Наценки_НаценкиИзменены = Ложь;
	КонецЕсли;

	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные = Неопределено Тогда
		АктивизацияСтрокиСписок_ВидыНоменклатурыНаСервере(Неопределено);
	Иначе
		Если ТекущиеДанные.ЭтоГруппа Тогда
			ТЗ_АналитикаНаценки.Очистить();
			ТЗ_АналитикаЦеновыеГруппы.Очистить();
			
			Подвал_Аналитика_Шаблон 				= "";
			ОтклонениеУменшенияДляВидаНоменклатуры 	= 0;
			ОтклонениеУвеличенияДляВидаНоменклатуры	= 0;
			ПорогСрабатыванияДляВидаНоменклатуры	= 0;
		Иначе
			АктивизацияСтрокиСписок_ВидыНоменклатурыНаСервере(ТекущиеДанные.Ссылка);
		КонецЕсли;
		ВидНоменклатуры_ТекущийВидНоменклатуры = ТекущиеДанные.Ссылка;
	КонецЕсли;
КонецПроцедуры // ВидНоменклатурыПриАктивизациистрокиНаКлиенте()
 

&НаСервере
Процедура АктивизацияСтрокиСписок_ВидыНоменклатурыНаСервере(ВидНоменклатурыСсылка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработкаАктивизацииСтрокиСписок_ВидыНоменклатуры(ЭтаФорма, ВидНоменклатурыСсылка);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // АктивизацияСтрокиСписок_ВидыНоменклатурыНаСервере()
 
 





///////////////////////////////////////////////////////////////////////////////////////////
//									8. ТЗ_АналитикаНаценки
///////////////////////////////////////////////////////////////////////////////////////////
 
&НаКлиенте
Процедура ТЗ_АналитикаНаценкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
		Если ТекущиеДанные <> Неопределено Тогда
			АналитикаНаценкиРедактированиеНаСервере(ТекущиеДанные.Ссылка);
			Если Не ТекущиеДанные.ЭтоГруппа Тогда
				Наценки_НаценкиИзменены = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_АналитикаНаценкиПослеУдаления(Элемент)
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные <> Неопределено Тогда
		АналитикаНаценкиРедактированиеНаСервере(ТекущиеДанные.Ссылка);
		Наценки_НаценкиИзменены = Истина;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура АналитикаНаценкиРедактированиеНаСервере(ВидНоменклатурыСсылка)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьУдалитьЗначениеКФасету(ЭтаФорма, "ТЗ_АналитикаНаценки", Заголовок_ВидЦены, ВидНоменклатурыСсылка);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры // АналитикаНаценкиРедактированиеНаСервере()

&НаСервере
Процедура ЗаписатьНаценкиАналитикиНаСервере(ВидНоменклатурыСсылка)

	Если Заголовок_ВидЦены.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьНаценки(ЭтаФорма, "ТЗ_АналитикаНаценки", Заголовок_ВидЦены, ВидНоменклатурыСсылка);
	ОбработкаОбъект.СохранитьРевизию(Перечисления.ALPS_ВидыВерсий.Фасеты, ЭтаФорма, Заголовок_ВидЦены, ВидНоменклатурыСсылка);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры // ЗаписатьНаценкиАналитикиНаСервере()


 





///////////////////////////////////////////////////////////////////////////////////////////
//									8. ТЗ_АналитикаЦовыеГруппы
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТЗ_АналитикаЦеновыеГруппыПриИзменении(Элемент)
	Если ПроверитьЗаполнениеВидаЦеныЗаголовка() Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные = ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаписатьЦеновыеГруппыНаСервере(ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_АналитикаЦеновыеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры


&НаСервере
Процедура ЗаписатьЦеновыеГруппыНаСервере(ВидНоменклатуры)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьЦеновыеГруппы(ЭтаФорма, "ТЗ_АналитикаЦеновыеГруппы", Заголовок_ВидЦены, Ложь, ВидНоменклатуры);
	ОбработкаОбъект.СохранитьРевизию(Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы, ЭтаФорма, Заголовок_ВидЦены, ВидНоменклатуры);
    ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗаписатьЦеновыеГруппыНаСервере()




///////////////////////////////////////////////////////////////////////////////////////////
//									8. ТЗ_Ревизии
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДС_РевизииПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Версия_ТекущаяИдентификаторВерсии = ТекущиеДанные.ИдентификаторВерсии;
	РевизииАктивизацияСтрокиНаСервере(ТекущиеДанные.ИдентификаторВерсии, ТекущиеДанные.ВидВерсии);
КонецПроцедуры

&НаСервере
Процедура РевизииАктивизацияСтрокиНаСервере(ИдентификаторВерсии, ВидВерсии)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьВерсию(ЭтаФорма, Элементы, ИдентификаторВерсии, ВидВерсии);
    ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // РевизииАктивизацияСтрокиНаСервере()
 

&НаСервере
Процедура ПерейтиНаВерсиюНаСервере(ИдентификаторВерсии, ВидВерсии)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПерейтиНаВерсию(ЭтаФорма, ИдентификаторВерсии, ВидВерсии);
    ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ПерейтиНаВерсиюНаСервере()
 




///////////////////////////////////////////////////////////////////////////////////////////
//									9. Подвал_Шаблон
///////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Подвал_Аналитика_ШаблонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= ПолучитьТекущиеДанныеКоллекцииЗначений("Список_ВидыНоменклатуры");
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа ИЛИ Заголовок_ВидЦены.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыКонструкторФормул();
	СтруктураПараметров.ВидЦены 		= Заголовок_ВидЦены;
	СтруктураПараметров.ВидНоменклатуры = ТекущиеДанные.Ссылка;
	СтруктураПараметров.Формула 		= Подвал_Аналитика_Шаблон;
	
	ФормаКонструкторФормул = ПолучитьФорму("ВнешняяОбработка.НастройкиЦенообразования.Форма.ФормаКонструкторФормул", СтруктураПараметров, ЭтаФорма);
	ФормаКонструкторФормул.ЗакрыватьПриЗакрытииВладельца = Истина;
	ОткрытьФорму(ФормаКонструкторФормул);
		
КонецПроцедуры


#Область СлужебныеПроцедурыИФункции

//Функция возвращает структуру параметров которые должны быть переданы в форму конструктор формул
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	СтруктураПараметров - Структура
//		* ВидЦены 			- СправочникСсылка.ВидыЦен          - Ссылка на элемент справочника виды цен
//      * ВидНоменклатуры   - СправочникСсылка.ВидыНоменклатуры - Ссылка на элемент справочника виды номенклатуры
//		* Формула			- Строка							- Формула
&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормыКонструкторФормул() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидЦены");
	СтруктураПараметров.Вставить("ВидНоменклатуры");
	СтруктураПараметров.Вставить("Формула");
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровФормыКонструкторФормул()
	
#КонецОбласти 

&НаКлиенте
Процедура Подвал_Настройки_ШаблонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= ПолучитьТекущиеДанныеКоллекцииЗначений("ТЗ_ВидыЦен");
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.НастройкиЦенообразования.Форма.ФормаКонструкторФормул", Новый Структура("ВидЦены, ВидНоменклатуры, Формула", ТекущиеДанные.ВидЦены, Неопределено, Подвал_Настройки_Шаблон));
	Если Результат <> Неопределено Тогда
		Подвал_Настройки_Шаблон = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура РасчитатьФасетСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ОбъектОбработка.ПолучитьТекстЗапроса_Cache_НоменклатураДляВидаНоменклатуры();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры_ТекущийВидНоменклатуры);
	Запрос.Выполнить();	
	
	ЗапросЦен = Новый Запрос;
	ЗапросЦен.Текст = "
		|ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	РегистрСведений.ALPS_ВидыЦен 
		|ГДЕ 
		|	ВидЦены = &ВидЦены";
	ЗапросЦен.УстановитьПараметр("ВидЦены", Заголовок_ВидЦены);
	ВыборкаЦен = ЗапросЦен.Выполнить().Выбрать();
	Пока ВыборкаЦен.Следующий() Цикл
		
		Запрос.УстановитьПараметр("ВидЦены", 		ВыборкаЦен.ВидЦены);
		Запрос.УстановитьПараметр("База_ВидЦены",	ВыборкаЦен.БазовыйВидЦены);
		Запрос.УстановитьПараметр("База_ВалютаЦены",ВыборкаЦен.БазовыйВидЦены.ВалютаЦены);
		Запрос.УстановитьПараметр("ВалютаВидаЦены", ВыборкаЦен.ВидЦены.ВалютаЦены);
		Запрос.УстановитьПараметр("РегламентноВыполнить", Истина);
		Запрос.Текст = ОбъектОбработка.ПолучитьТекстЗапроса_Cache_Фасетный();
		ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		
		ШаблонЗаполнен = Ложь;
		СтруктураШаблона = ОбъектОбработка.ПолучитьСтруктуруШаблона();
		ОбъектОбработка.ЗаполнитьСоответствияЗначенийШаблонов(ВыборкаЦен.ВидЦены, СтруктураШаблона, ШаблонЗаполнен,Истина);
		ОбъектОбработка.ЗаполнитьСоответствиеВидШаблон(ВыборкаЦен.ВидЦены, СтруктураШаблона,Истина);
		Если ШаблонЗаполнен Тогда
			Запрос.Текст = ОбъектОбработка.ПолучитьТекстЗапроса_Cache_Шаблоны(Запрос, СтруктураШаблона);
			ДанныеШаблонов = Запрос.Выполнить().Выгрузить();
			СоответствиеНоменклатура = СтруктураШаблона.СоответствиеНоменклатура;
			Для i=0 По ДанныеШаблонов.Количество()-1 Цикл СоответствиеНоменклатура[ДанныеШаблонов[i].Номенклатура] = ДанныеШаблонов[i]; КонецЦикла;
		КонецЕсли;
		
		
		СоответствиеВидШаблон = СтруктураШаблона.СоответствиеВидШаблон;
		СоответствиеНоменклатура = СтруктураШаблона.СоответствиеНоменклатура;
		Если СоответствиеВидШаблон.Количество() Тогда
			Для Каждого СтрокаНом Из ТаблицаНоменклатуры Цикл НаВыполнение = СоответствиеВидШаблон[СтрокаНом.ВидНоменклатуры]; Если НаВыполнение = Неопределено Тогда Продолжить; Иначе СтрокаШаблон = СоответствиеНоменклатура[СтрокаНом.Номенклатура]; Выполнить(НаВыполнение); КонецЕсли; КонецЦикла;
		КонецЕсли;
			
		Для Каждого СтрокаНом Из ТаблицаНоменклатуры Цикл СтрокаНом.ALPS_ФасетЦена = ОбъектОбработка.РассчитатьРезультат(СтрокаНом.ALPS_ФасетЦена, СтрокаНом.ТочностьОкругления, СтрокаНом.ОкруглятьВБольшуюСторону, СтрокаНом.ПсихологическоеОкругление); КонецЦикла;
			
		
		                
		Запрос.УстановитьПараметр("ТабРезультат", ТаблицаНоменклатуры);
		Запрос.Текст = ПолучитьТекстЗапроса_Cache_Запись(Запрос, Заголовок_ВидЦены);
		ТЗ_Номенклатура.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Если ТЗ_Номенклатура.Количество() Тогда
			ПереключательРасчетаПриИзмененииСервер();
		КонецЕсли;
				
	КонецЦикла;
		
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапроса_Cache_Запись(Запрос, ВидЦены)
	
	ЗапросКонкурентов = Новый Запрос("
		|ВЫБРАТЬ
		|	Соглашение
		|ИЗ
		|	РегистрСведений.ALPS_НастройкиКонкурентов
		|ГДЕ
		|	ВидЦены = &ВидЦены
		|И	КонкурентПоВидуЦены
		|
		|");
	ЗапросКонкурентов.УстановитьПараметр("ВидЦены", ВидЦены);
	ЗапросКонкурентов.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ВыгрузкаКонкурентов = ЗапросКонкурентов.Выполнить().Выгрузить();
	
	СписокКонкурентов.Очистить();
	Для Каждого ЭлементЗаполнения из ВыгрузкаКонкурентов Цикл
	    СписокКонкурентов.Добавить(ЭлементЗаполнения.Соглашение);
	КонецЦикла;  

	СписокЦен = Новый СписокЗначений; ЦеныШапка = ""; ЦеныСоединение = ""; ТекстЗапроса = "";
	ШаблонИндексКонкурента = "Конкурент%Индекс%";
	Если ВыгрузкаКонкурентов.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Соглашение,
			|	Номенклатура,
			|	Цена
			|ПОМЕСТИТЬ Cache_КонкурентыКлиент
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПервых(&НачалоДня, Соглашение В (&СписокЦен) И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура))
			|ИНДЕКСИРОВАТЬ ПО
			|	Соглашение
			|;";
		Индекс = 1;
		Для Каждого Конкурент Из ВыгрузкаКонкурентов Цикл
			ИндексКонкурента = СтрЗаменить(ШаблонИндексКонкурента,"%Индекс%",Индекс);
			Если НЕ ЭтаФорма[ИндексКонкурента] = Конкурент.Соглашение И 
				 ЗначениеЗаполнено(ЭтаФорма[ИндексКонкурента]) 
				 Тогда 
				 Конкурент.Соглашение = ЭтаФорма[ИндексКонкурента];
			КонецЕсли;
			СписокЦен.Добавить(Конкурент.Соглашение);
			ЦеныШапка 		= ЦеныШапка + " , "+ИндексКонкурента+ ".Цена КАК "+ИндексКонкурента;
			ЦеныСоединение  = ЦеныСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_КонкурентыКлиент КАК "+ИндексКонкурента+ "
											|ПО "+ИндексКонкурента+".Соглашение   = &"+ИндексКонкурента+" 
											|И	"+ИндексКонкурента+".Номенклатура = Cache_Номенклатура.Номенклатура
											|";
			Запрос.УстановитьПараметр(""+ИндексКонкурента+"", Конкурент.Соглашение);
			ЭтаФорма[ИндексКонкурента] = Конкурент.Соглашение; 
			Индекс = Индекс + 1;
			Если Индекс = 6 Тогда Прервать; КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокЦен", СписокЦен);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|УНИЧТОЖИТЬ Cache_Наценки;
		|УНИЧТОЖИТЬ Cache_Округление;
		|УНИЧТОЖИТЬ ПредварительныйРезультат;
		////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРезультат.Номенклатура,		
		//|   ТабРезультат.Характеристика,
		|   ТабРезультат.ALPS_ФасетЦена	КАК Цена,
		|  	ТабРезультат.Валюта			КАК Валюта
		|
		|ПОМЕСТИТЬ ТабРезультат
		|ИЗ 
		|	&ТабРезультат КАК ТабРезультат
		|;
		////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Cache_Номенклатура.Номенклатура		 КАК Номенклатура,
		|	Cache_Номенклатура.ВНаличии			 КАК ВНаличии,
		|	БазоваяЦена.Цена					 КАК База,
		|	Срез.Цена           				 КАК ЦенаВБазе,
		|   IsNull(ТабРезультат.Цена, Срез.Цена) КАК РасчетнаяЦена
		|   " + ЦеныШапка + "
		|
		|	,
		|	ВЫБОР
		|		КОГДА ТабРезультат.Цена ЕСТЬ NULL
		|		ТОГДА (Срез.Цена * 			((Рг_Курс_Срез.Курс / Рг_Курс_Срез.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность)) / (БазоваяЦена.Цена * ((Рг_Курс_База.Курс / Рг_Курс_База.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность))) - 1) * 100
		|		ИНАЧЕ (ТабРезультат.Цена * 	((Рг_Курс_Расч.Курс / Рг_Курс_Расч.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность)) / (БазоваяЦена.Цена * ((Рг_Курс_База.Курс / Рг_Курс_База.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность))) - 1) * 100
		|	КОНЕЦ КАК ПроцентНаценки,
		|	ВЫБОР
		|		КОГДА ТабРезультат.Цена ЕСТЬ NULL
		|		ТОГДА (Срез.Цена * 			((Рг_Курс_Срез.Курс / Рг_Курс_Срез.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность)) / (БазоваяЦена.Цена * ((Рг_Курс_База.Курс / Рг_Курс_База.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность))) - 1) * БазоваяЦена.Цена 	* ((Рг_Курс_База.Курс / Рг_Курс_База.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность))
		|		ИНАЧЕ (ТабРезультат.Цена * 	((Рг_Курс_Расч.Курс / Рг_Курс_Расч.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность)) / (БазоваяЦена.Цена * ((Рг_Курс_База.Курс / Рг_Курс_База.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность))) - 1) * БазоваяЦена.Цена 	* ((Рг_Курс_База.Курс / Рг_Курс_База.Кратность)/(Рг_Курс_Упр.Курс / Рг_Курс_Упр.Кратность))
		|	КОНЕЦ КАК Заработок
		|
		|ИЗ
		|	Cache_Номенклатура КАК Cache_Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабРезультат КАК ТабРезультат
		|ПО	ТабРезультат.Номенклатура = Cache_Номенклатура.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &ВидЦены) КАК Срез
		|ПО Срез.Номенклатура = Cache_Номенклатура.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &База_ВидЦены) КАК БазоваяЦена
		|ПО БазоваяЦена.Номенклатура = Cache_Номенклатура.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаУпрУчета) КАК Рг_Курс_Упр
		|ПО Рг_Курс_Упр.Валюта = &ВалютаУпрУчета
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) КАК Рг_Курс_База
		|ПО Рг_Курс_База.Валюта = БазоваяЦена.Валюта 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) КАК Рг_Курс_Расч
		|ПО Рг_Курс_Расч.Валюта = ТабРезультат.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата) КАК Рг_Курс_Срез
		|ПО Рг_Курс_Срез.Валюта = Срез.Валюта
		|
		| " + ЦеныСоединение + "
		|
		|УПОРЯДОЧИТЬ ПО 
		|	БазоваяЦена.Цена Возр
		|;";
	Возврат ТекстЗапроса;	
КонецФункции


&НаСервере
Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки)
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	БиблиотекаФорм = git_ПереопределениеОбработчиковСервер.ПолучитьИмяВнешнегоОбъекта(ИмяБиблиотеки);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	Возврат БиблиотекаФорм;
КонецФункции

&НаКлиенте
Процедура ТЗ_НоменклатураПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЦенаБаза			= Элемент.ТекущиеДанные.База;
	ТекНоменклатура 	= Элемент.ТекущиеДанные.Номенклатура;
	
	НачальноеЗначение = Неопределено;
	Для Каждого СтрокаИзДФК Из ТЗ_АналитикаНаценки Цикл
		Если СтрокаИзДФК.НижняяГраница > ЦенаБаза Тогда
			Прервать;	
		КонецЕсли;
		НачальноеЗначение = СтрокаИзДФК;
	КонецЦикла;
	
	Если НачальноеЗначение <> Неопределено Тогда
		Элементы.ТЗ_АналитикаНаценки.ТекущаяСтрока = НачальноеЗначение.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРасчетаПриИзменении(Элемент)
	Если ТЗ_Номенклатура.Количество() Тогда
		ПереключательРасчетаПриИзмененииСервер();		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПереключательРасчетаПриИзмененииСервер()
	
	СредняяНаценка = 0;
	СреднийЗаработок = 0;
	
	Если ПереключательРасчета = 0 Тогда
		РасчитатьСреднююНаценкуИЗароботок(ТЗ_Номенклатура, СредняяНаценка, СреднийЗаработок);
	ИначеЕсли  ПереключательРасчета = 1 Тогда
		ТаблицаЗаработка = ТЗ_Номенклатура.Выгрузить(Новый Структура("ВНаличии", Ложь), "ПроцентНаценки, Заработок");
		РасчитатьСреднююНаценкуИЗароботок(ТаблицаЗаработка, СредняяНаценка, СреднийЗаработок);
	ИначеЕсли  ПереключательРасчета = 2 Тогда
		ТаблицаЗаработка = ТЗ_Номенклатура.Выгрузить(Новый Структура("ВНаличии", Истина), "ПроцентНаценки, Заработок");
		РасчитатьСреднююНаценкуИЗароботок(ТаблицаЗаработка, СредняяНаценка, СреднийЗаработок);
	КонецЕсли;
	
	Для Каждого СтрокаАналитики Из ТЗ_АналитикаНаценки Цикл
		НижняяГраница  = СтрокаАналитики.НижняяГраница;
		ВерхняяГраница = СтрокаАналитики.ВерхняяГраница;
		Количество 	   = 0;
		Для Каждого СтрокаНоменклатуры ИЗ ТЗ_Номенклатура Цикл
			Если СтрокаНоменклатуры.База >= НижняяГраница И (СтрокаНоменклатуры.База < ВерхняяГраница ИЛИ ВерхняяГраница = 0) Тогда
				Если ПереключательРасчета = 0 Тогда
					 РасчитатьПараметрыЗаработка(СтрокаАналитики, СтрокаНоменклатуры, Количество);
				ИначеЕсли  ПереключательРасчета = 1 И НЕ СтрокаНоменклатуры.ВНаличии Тогда
					 РасчитатьПараметрыЗаработка(СтрокаАналитики, СтрокаНоменклатуры, Количество);
				ИначеЕсли  ПереключательРасчета = 2 И    СтрокаНоменклатуры.ВНаличии Тогда
					 РасчитатьПараметрыЗаработка(СтрокаАналитики, СтрокаНоменклатуры, Количество);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Количество Тогда
			СтрокаАналитики.Заработок 	   = СтрокаАналитики.Заработок      / Количество;
			СтрокаАналитики.ПроцентНаценки = СтрокаАналитики.ПроцентНаценки / Количество	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСреднююНаценкуИЗароботок(ТаблицаРасчета, СредняяНаценка, СреднийЗаработок)

	Количество = ТаблицаРасчета.Количество();
	
	Если Количество = 0 Тогда
		СредняяНаценка = 0;
		СреднийЗаработок = 0;
	Иначе
		СредняяНаценка = ТаблицаРасчета.Итог("ПроцентНаценки") / Количество;
		СреднийЗаработок = ТаблицаРасчета.Итог("Заработок") / Количество;
	КонецЕсли;

КонецПроцедуры // РасчитатьСреднююНаценкуИЗароботок()
 

&НаСервере
Процедура РасчитатьПараметрыЗаработка(СтрокаАналитики, СтрокаНоменклатуры, Количество)
	СтрокаАналитики.Заработок 	   = СтрокаАналитики.Заработок + СтрокаНоменклатуры.Заработок;
	СтрокаАналитики.ПроцентНаценки = СтрокаАналитики.ПроцентНаценки + СтрокаНоменклатуры.ПроцентНаценки;
	Количество = Количество + 1;	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_НоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элемент.ТекущийЭлемент; 
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ИмяКолонки = ТекущийЭлементТЗ.Имя;
		Если		ИмяКолонки = "ТЗ_НоменклатураКонкурент1" Тогда ОбработатьВвестиЗначение(Конкурент1, "ТЗ_НоменклатураКонкурент1");
		ИначеЕсли	ИмяКолонки = "ТЗ_НоменклатураКонкурент2" Тогда ОбработатьВвестиЗначение(Конкурент2, "ТЗ_НоменклатураКонкурент2");
		ИначеЕсли	ИмяКолонки = "ТЗ_НоменклатураКонкурент3" Тогда ОбработатьВвестиЗначение(Конкурент3, "ТЗ_НоменклатураКонкурент3");
		ИначеЕсли	ИмяКолонки = "ТЗ_НоменклатураКонкурент4" Тогда ОбработатьВвестиЗначение(Конкурент4, "ТЗ_НоменклатураКонкурент4");
		ИначеЕсли	ИмяКолонки = "ТЗ_НоменклатураКонкурент5" Тогда ОбработатьВвестиЗначение(Конкурент5, "ТЗ_НоменклатураКонкурент5");	
		КонецЕсли;          
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВвестиЗначение(Значение, ИмяКолонки)
	
	ПредЗначение = Значение;
	ВыбЭлемент = СписокКонкурентов.НайтиПоЗначению(Значение);
	ВыбЭлемент = СписокКонкурентов.ВыбратьЭлемент("Выбор конкурента",ВыбЭлемент);
	Если НЕ ВыбЭлемент = Неопределено Тогда 
	    Значение = ВыбЭлемент.Значение;
		Если Вопрос("Расчитать фасет?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РасчитатьФасет(Неопределено);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьФормулуНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьФормулувРегистрНаПродакшен(Заголовок_ВидЦены, ВидНоменклатуры_ТекущийВидНоменклатуры);
	ОбработкаОбъект.СохранитьРевизиюФормули(Заголовок_ВидЦены, ВидНоменклатуры_ТекущийВидНоменклатуры); 
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры


&НаСервере
Процедура ТестНаСервере()
	РеквизитФормыВЗначение("Объект").ОбновитьЦеныПоРегламенту();
КонецПроцедуры


&НаКлиенте
Процедура Тест(Команда)
	ТестНаСервере();
КонецПроцедуры

