
#Область ИнтерфейсАвтоматическихТестов
	
Перем ЮнитТест;

Процедура ПередатьДанныеВZabbix(Хост, Ключ, Значение)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("auth", "a1fds22sfhnbg5");
	СтруктураЗапроса.Вставить("data", Новый Массив);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("host", Хост);
	СтруктураПараметров.Вставить("key", Ключ);
	СтруктураПараметров.Вставить("value", Значение);
	
	СтруктураЗапроса.data.Добавить(СтруктураПараметров);
	
	ТелоЗапроса = git_JSON.ЗаписатьJSON(СтруктураЗапроса);
	
	HTTPСоединение = Новый HTTPСоединение("192.168.156.2", "9999");											
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/rest", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "windows-1251");
	HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецПроцедуры



Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиcокТестов = Новый Массив;	
	СпиcокТестов.Добавить("Тест_ПроверитьГлобальныеНастройки");
	СпиcокТестов.Добавить("Тест_ПроверитьДанныеПочтыГлобальныхНастроек");
	
	ПараметрыТестов = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ОбновитьЦеновыеГруппыПоЗавершениюСогласования", Истина, Неопределено);
	СпиcокТестов.Добавить(ПараметрыТестов);

	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаФормированияНастроек");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаНоменклатурыПодЗаказ");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапроса_Cache_Номенклатура");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапроса_Cache_Фасетный");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапроса_Cache_Запись");
	
	Возврат СпиcокТестов;
	
КонецФункции


Процедура Тест_ПроверитьГлобальныеНастройки() Экспорт
	
	ГлобальныеНастройки = ПолучитьГлобальныеНастройки();
	ЮнитТест.ПроверитьТип(ГлобальныеНастройки, Тип("Структура"), );
	
КонецПроцедуры

Процедура Тест_ПроверитьДанныеПочтыГлобальныхНастроек() Экспорт
	
	ГлобальныеНастройки = ПолучитьГлобальныеНастройки();
	ЮнитТест.ПроверитьТип(ГлобальныеНастройки, Тип("Структура"), );
	
	ЮнитТест.ПроверитьИстину(ГлобальныеНастройки.Свойство("СтандартнаяУчетнаяЗаписьЭлектроннойПочты"));
	ЮнитТест.ПроверитьЛожь(ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты.Пустая());
	
	ЮнитТест.ПроверитьИстину(ГлобальныеНастройки.Свойство("АдресЭлектроннойПочты"));
	ЮнитТест.ПроверитьТип(ГлобальныеНастройки.АдресЭлектроннойПочты, Тип("Строка"));
	ЮнитТест.ПроверитьЗаполненность(ГлобальныеНастройки.АдресЭлектроннойПочты);
	
КонецПроцедуры

Процедура Тест_ОбновитьЦеновыеГруппыПоЗавершениюСогласования(ДанныеПочты) Экспорт
	
	ОбновитьЦеновыеГруппыПоЗавершениюСогласования(ДанныеПочты);
	
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаФормированияНастроек() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаФормированияНастроек");
	ТекстЗапроса = ПолучитьТекстЗапросаФормированияНастроек();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаНоменклатурыПодЗаказ() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаНоменклатурыПодЗаказ");		
	ТекстЗапроса = ПолучитьТекстЗапросаНоменклатурыПодЗаказ();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапроса_Cache_Номенклатура() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапроса_Cache_Номенклатура");		
	ТекстЗапроса = ПолучитьТекстЗапроса_Cache_Номенклатура();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапроса_Cache_Фасетный() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапроса_Cache_Фасетный");		
	ТекстЗапроса = ПолучитьТекстЗапроса_Cache_Фасетный();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапроса_Cache_Запись() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапроса_Cache_Запись");		
	ТекстЗапроса = ПолучитьТекстЗапроса_Cache_Запись();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ОбновитьЦеныПоРегламенту() Экспорт
	
	ПередатьДанныеВZabbix("gamlet.ktc.local", "price_key", "procedure start");	
	
	ГлобальныеНастройки = ПолучитьГлобальныеНастройки();
	
	ДанныеПочты = Неопределено;
	Если НЕ ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты.Пустая() И НЕ ПустаяСтрока(ГлобальныеНастройки.АдресЭлектроннойПочты) Тогда 
		ДанныеПочты = Новый Структура("УчетнаяЗаписьЭлектроннойПочты, АдресЭлектроннойПочты",  ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты, Новый Массив);
		ДанныеПочты.АдресЭлектроннойПочты.Добавить(Новый Структура("Адрес, Представление", ГлобальныеНастройки.АдресЭлектроннойПочты, "Отдел тех. поддержки"));
	КонецЕсли;
	
	Library = GetLibrary("Библиотека внешних обработок");		
	ОбновитьЦеновыеГруппыПоЗавершениюСогласования(ДанныеПочты);
	ОбновитьЦеновыеГруппыПоЗавершениюОстатков(ДанныеПочты);
	ОбновитьБазовуюЦенуНоменклатурыВНаличии(ДанныеПочты);
	ОбновитьБазовуюЦенуНоменклатурыПодЗаказ(ДанныеПочты);
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапроса_Cache_Номенклатура();
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.Выполнить();	
	
	
	
	ЗапросЦен = Новый Запрос;
	ЗапросЦен.Текст = "
		|ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	РегистрСведений.ALPS_ВидыЦен 
		|ГДЕ 
		|	Авто И НЕ Входная";
	ВыборкаЦен = ЗапросЦен.Выполнить().Выбрать();
	Пока ВыборкаЦен.Следующий() Цикл
		
		СписокРасписаний = ВыборкаЦен.Расписание.Получить();
		РегламентноВыполнить = Ложь;
		Если СписокРасписаний.Количество() Тогда
			Расписание = Library.СтруктураВРасписание(СписокРасписаний[0].Значение);
			Если Расписание.ТребуетсяВыполнение() Тогда РегламентноВыполнить = Истина; КонецЕсли;	
		Иначе
			РегламентноВыполнить = Истина;	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЦены", 		ВыборкаЦен.ВидЦены);
		Запрос.УстановитьПараметр("База_ВидЦены",	ВыборкаЦен.БазовыйВидЦены);
		Запрос.УстановитьПараметр("ВалютаВидаЦены", ВыборкаЦен.ВидЦены.ВалютаЦены);
		Запрос.УстановитьПараметр("РегламентноВыполнить", РегламентноВыполнить);
		Запрос.Текст = ПолучитьТекстЗапроса_Cache_Фасетный();
		ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		
		
		ШаблонЗаполнен = Ложь;
		СтруктураШаблона = ПолучитьСтруктуруШаблона();
		ЗаполнитьСоответствияЗначенийШаблонов(ВыборкаЦен.ВидЦены, СтруктураШаблона, ШаблонЗаполнен);
		ЗаполнитьСоответствиеВидШаблон(ВыборкаЦен.ВидЦены, СтруктураШаблона);
		Если ШаблонЗаполнен Тогда
			Запрос.Текст = ПолучитьТекстЗапроса_Cache_Шаблоны(Запрос, СтруктураШаблона);
			ДанныеШаблонов = Запрос.Выполнить().Выгрузить();
			СоответствиеНоменклатура = СтруктураШаблона.СоответствиеНоменклатура;
			Для i=0 По ДанныеШаблонов.Количество()-1 Цикл СоответствиеНоменклатура[ДанныеШаблонов[i].Номенклатура] = ДанныеШаблонов[i]; КонецЦикла;
		КонецЕсли;
		
		ТекстОчистки = "";
		Если СтруктураШаблона.СоответствиеЦен.Количество() Тогда
			ТекстОчистки = ТекстОчистки + " УНИЧТОЖИТЬ Cache_Конкуренты;";		
		КонецЕсли;
		
		Если СтруктураШаблона.СоответствиеСкладов.Количество() Тогда
			ТекстОчистки = ТекстОчистки + " УНИЧТОЖИТЬ Cache_Склады;";		
		КонецЕсли;
		
		Если СтруктураШаблона.СоответствиеДопСвойств.Количество() Тогда
			ТекстОчистки = ТекстОчистки + " УНИЧТОЖИТЬ Cache_ДопСвойства;";		
		КонецЕсли;
		
		Если СтруктураШаблона.СоответствиеДопРеквизитов.Количество() Тогда
			ТекстОчистки = ТекстОчистки + " УНИЧТОЖИТЬ Cache_ДопРеквизиты;";		
		КонецЕсли;
		
		Если СтруктураШаблона.СоответствиеВалюты.Количество() Тогда
			ТекстОчистки = ТекстОчистки + " УНИЧТОЖИТЬ Cache_Валюты;";		
		КонецЕсли;
		
		Если СтруктураШаблона.СоответствиеВидыЦен.Количество() Тогда
			ТекстОчистки = ТекстОчистки + " УНИЧТОЖИТЬ Cache_ВидыЦен;";		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОчистки) Тогда
			Запрос.Текст = ТекстОчистки;	
			Запрос.Выполнить();
		КонецЕсли;
		
		
		СоответствиеВидШаблон = СтруктураШаблона.СоответствиеВидШаблон;
		СоответствиеНоменклатура = СтруктураШаблона.СоответствиеНоменклатура;
		Если СоответствиеВидШаблон.Количество() Тогда
			Для Каждого СтрокаНом Из ТаблицаНоменклатуры Цикл НаВыполнение = СоответствиеВидШаблон[СтрокаНом.ВидНоменклатуры]; Если НаВыполнение = Неопределено Тогда Продолжить; Иначе СтрокаШаблон = СоответствиеНоменклатура[СтрокаНом.Номенклатура]; Выполнить(НаВыполнение); КонецЕсли; КонецЦикла;
		КонецЕсли;
			
		Для Каждого СтрокаНом Из ТаблицаНоменклатуры Цикл СтрокаНом.ALPS_ФасетЦена = РассчитатьРезультат(СтрокаНом.ALPS_ФасетЦена, СтрокаНом.ТочностьОкругления, СтрокаНом.ОкруглятьВБольшуюСторону, СтрокаНом.ПсихологическоеОкругление); КонецЦикла;
			
		
		
		Запрос.УстановитьПараметр("ТабРезультат", ТаблицаНоменклатуры);
		Запрос.Текст = ПолучитьТекстЗапроса_Cache_Запись();
		РезультатРазницы = Запрос.Выполнить();
		Если НЕ РезультатРазницы.Пустой() Тогда
			МассивВидоЦен = Новый Массив;
			МассивВидоЦен.Добавить(ВыборкаЦен.ВидЦены);
			РегистрацияЦенНоменклатуры(МассивВидоЦен, РезультатРазницы.Выгрузить(), ДанныеПочты);
		КонецЕсли;
		
		
		
		Запрос.Текст = "
			|УНИЧТОЖИТЬ ТабРезультат;
			|УНИЧТОЖИТЬ Cache_НоменклатураСЦенами;
			|";
		Запрос.Выполнить();
		
	КонецЦикла;
		
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ПередатьДанныеВZabbix("gamlet.ktc.local", "price_key", "procedure stop");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Процедура ОбновитьЦеновыеГруппыПоЗавершениюСогласования(ДанныеПочты)
	
	Период = ТекущаяДата();	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	&ТекущаяДата КАК Период,
		|	Номенклатура,
		|   Документ,
		|   БизнесПроцесс,
		|   ЦеноваяГруппа,
		|   Истина			КАК Выполнено
		|
		|ИЗ 
		|	РегистрСведений.Регламент_ЦеновыеГруппы.СрезПоследних()
		|
		|ГДЕ
		|	Выполнено 			= Ложь
		|И  Документ.Проведен 	= Истина
		|"); 
	Запрос.УстановитьПараметр("ТекущаяДата", Период);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда	
		
		НаборЗаписей = РегистрыСведений.Регламент_ЦеновыеГруппы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Загрузить(Результат.Выгрузить());
		НаборЗаписей.Записать();
		
		Выборка 	= Результат.Выбрать();
		Пока Выборка.Следующий() Цикл	
			НоменклатураОбъект = Выборка.Номенклатура.ПолучитьОбъект();
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			НоменклатураОбъект.ЦеноваяГруппа = Выборка.ЦеноваяГруппа;
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
				ОповеститьОбОшибкеПоПочте(ДанныеПочты, Новый Структура("Тема, Тело", "Внимание! Не удалось обновить ценовую группу для номенклатуры!", ПолучитьНавигационнуюСсылку(НоменклатураОбъект.Ссылка) + Символы.ПС + ОписаниеОшибки()));
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЦеновыеГруппыПоЗавершениюОстатков(ДанныеПочты)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
	    |	Номенклатура,
		|	Ложь КАК НетВНаличии	
		|
	    |ПОМЕСТИТЬ КешНоменклатура
	    |ИЗ
	    |	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура.ЦеноваяГруппа <> Значение(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	    |ГДЕ
	    |	ВНаличииОстаток > 0
	    |
	    |ОБЪЕДИНИТЬ
	    |
	    |ВЫБРАТЬ
	    |	Номенклатура,
		|	Ложь
	    |ИЗ
	    |	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров И Номенклатура.ЦеноваяГруппа <> Значение(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	    |ГДЕ
	    |	КПоступлениюОстаток > 0
		|;
	    ////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	СпрНоменклатура.Номенклатура
	    |ИЗ
	    |	(ВЫБРАТЬ
		|		Ссылка КАК Номенклатура,
		|		ЦеноваяГруппа 
		|	ИЗ
		|    	Справочник.Номенклатура
		|	ГДЕ
		|		ЦеноваяГруппа <> Значение(Справочник.ЦеновыеГруппы.ПустаяСсылка)
		|	) КАК СпрНоменклатура
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_БазовыеНастройкиЦеновыхГрупп КАК ALPS_БазовыеНастройкиЦеновыхГрупп
		|ПО  ALPS_БазовыеНастройкиЦеновыхГрупп.СниматьЦеновуюГруппу
		|И	 ALPS_БазовыеНастройкиЦеновыхГрупп.ЦеноваяГруппа = СпрНоменклатура.ЦеноваяГруппа
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешНоменклатура КАК ОстаткиНаСкладах
		|ПО	ОстаткиНаСкладах.Номенклатура = СпрНоменклатура.Номенклатура
		|
		|ГДЕ
		|	IsNull(ОстаткиНаСкладах.НетВНаличии, Истина)
		|;");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НомОбъект 						= Выборка.Номенклатура.ПолучитьОбъект();
		НомОбъект.ОбменДанными.Загрузка = Истина;
		НомОбъект.ЦеноваяГруппа 		= Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Попытка
			НомОбъект.Записать();
		Исключение
			ОповеститьОбОшибкеПоПочте(ДанныеПочты, Новый Структура("Тема, Тело", "Внимание! Не удалось обновить ценовую группу для номенклатуры!", ПолучитьНавигационнуюСсылку(НомОбъект.Ссылка) + Символы.ПС + ОписаниеОшибки()));
			Продолжить;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьБазовуюЦенуНоменклатурыВНаличии(ДанныеПочты)
		
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика,
		|	Аналитика.КлючАналитики
		|ПОМЕСТИТЬ Cache_Номенклатура
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной))КАК ТоварыОрганизаций
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|ПО  Аналитика.Номенклатура   = ТоварыОрганизаций.Номенклатура
		|И	 Аналитика.Характеристика = ТоварыОрганизаций.Характеристика
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Аналитика.КлючАналитики
		|;
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Период,
		|	Себестоимость.Стоимость,
		|	Себестоимость.Количество,
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика
		|		
		|ПОМЕСТИТЬ Cache_Себестоимость
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Cache_Номенклатура КАК Аналитика
		|ПО	Аналитика.КлючАналитики 			   = Себестоимость.АналитикаУчетаНоменклатуры	
		|И	Значение(ВидДвиженияНакопления.Приход) = Себестоимость.ВидДвижения
		|И  (Себестоимость.Регистратор Ссылка Документ.ПоступлениеТоваровУслуг
		|ИЛИ Себестоимость.Регистратор Ссылка Документ.ОприходованиеИзлишковТоваров
		|ИЛИ Себестоимость.Регистратор Ссылка Документ.ВводОстатков )
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Себестоимость.Период	
		|;
		|////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Cache_Номенклатура;
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	МАКСИМУМ(Период) КАК Период,
		|	Номенклатура,
		|	Характеристика
		|	
		|ПОМЕСТИТЬ Cache_УниСебестоимость
		|ИЗ
		|	Cache_Себестоимость
		|	
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Номенклатура,
		|	Себестоимость.Характеристика,
		|	&БазоваяЦена	КАК ВидЦены,
		|	ВЫРАЗИТЬ(СРЕДНЕЕ(Cache.Стоимость) / СРЕДНЕЕ(Cache.Количество) КАК Число (15,2)) КАК Цена
		|			
		|ИЗ
		|	Cache_УниСебестоимость КАК Себестоимость
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Себестоимость КАК Cache
		|ПО	Cache.Период 		 = Себестоимость.Период
		|И	Cache.Номенклатура   = Себестоимость.Номенклатура
		|И	Cache.Характеристика = Себестоимость.Характеристика 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ Cache_УниСебестоимость) И ВидЦены = &БазоваяЦена) КАК Цены
		|ПО Цены.Номенклатура   = Себестоимость.Номенклатура 	
		|И  Цены.Характеристика = Себестоимость.Характеристика
        |
		|СГРУППИРОВАТЬ ПО
		|	Цены.Цена,
		|	Себестоимость.Номенклатура,
		|	Себестоимость.Характеристика	
		|	
		|ИМЕЮЩИЕ 
		|	ISNull(Цены.Цена, 0) <> ВЫРАЗИТЬ(СРЕДНЕЕ(Cache.Стоимость) / СРЕДНЕЕ(Cache.Количество) КАК Число (15,2))
		|;
		|////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Cache_Себестоимость;
		|УНИЧТОЖИТЬ Cache_УниСебестоимость; ";
	
	ЗапросБазовыхЦен = Новый Запрос;
	ЗапросБазовыхЦен.Текст = "
		|ВЫБРАТЬ 
		|	ВидЦены
		|ИЗ 
		|	РегистрСведений.ALPS_ВидыЦен 
		|ГДЕ 
		|	Входная";
	ВыборкаБазовыхЦен = ЗапросБазовыхЦен.Выполнить().Выбрать();	
	Пока ВыборкаБазовыхЦен.Следующий() Цикл
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("БазоваяЦена", ВыборкаБазовыхЦен.ВидЦены);
		РезультатПакета = Запрос.ВыполнитьПакет();
		Результат 		= РезультатПакета[РезультатПакета.ВГраница()-2];
		Если НЕ Результат.Пустой() Тогда
			МассивВидоЦен = Новый Массив;
			МассивВидоЦен.Добавить(ВыборкаБазовыхЦен.ВидЦены);
		  	РегистрацияЦенНоменклатуры(МассивВидоЦен, Результат.Выгрузить(), ДанныеПочты);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьБазовуюЦенуНоменклатурыПодЗаказ(ДанныеПочты)
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		ОповеститьОбОшибкеПоПочте(ДанныеПочты, Новый Структура("Тема, Тело", "Внимание! Не удалось прочитать настройки прайс-листов!", "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок"""));
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата();
	НастройкиПрайсов = Новый ТаблицаЗначений;
	НастройкиПрайсов.Колонки.Добавить("Соглашение", 		Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	НастройкиПрайсов.Колонки.Добавить("ВидНоменклатуры",  	Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	СтруктураЗаполнения = Новый Структура("Соглашение, ВидНоменклатуры");
	СписокСоглашений = Новый СписокЗначений;
	Для Каждого СтрокаДереваПартнер Из Настройки.ДеревоПрайсов.Строки Цикл
		Для Каждого СтрокаНастройки Из СтрокаДереваПартнер.Строки Цикл
			МассивВидов = ХранилищеНастроекДанныхФорм.Загрузить(
								"БВО-" + СтрокаНастройки.Соглашение.УникальныйИдентификатор(), 
								, 
								, 
								"БВО-" + СтрокаНастройки.Соглашение.УникальныйИдентификатор());
			Если ТипЗнч(МассивВидов) = Тип("Массив") Тогда
				СписокСоглашений.Добавить(СтрокаНастройки.Соглашение);
				ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаНастройки);
				Если МассивВидов.Количество() > 0 Тогда
					Для Каждого ЭлементВида Из МассивВидов Цикл
						СтруктураЗаполнения.ВидНоменклатуры = ЭлементВида;
						НоваяСтрока = НастройкиПрайсов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сегодня", 			НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("Календарь", 			Настройки.ALPS_Календарь);
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата);
	Запрос.УстановитьПараметр("Час", 				Час(ТекущаяДата));
	Запрос.УстановитьПараметр("Минута", 			Минута(ТекущаяДата));
	Запрос.УстановитьПараметр("ПолныеНастройки",	НастройкиПрайсов);
	Запрос.УстановитьПараметр("БазовыеНастройки",	GetLibrary("Библиотека внешних обработок").ПолучитьТаблицуПрайсов(Настройки));
	Запрос.Текст = ПолучитьТекстЗапросаФормированияНастроек();	
	Выборка = Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаНоменклатурыПодЗаказ();	
	Результат = Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	
	
	МассивВидоЦен = Новый Массив;		
	ЗапросБазовыхЦен = Новый Запрос;
	ЗапросБазовыхЦен.Текст = "
		|ВЫБРАТЬ 
		|	ВидЦены
		|ИЗ 
		|	РегистрСведений.ALPS_ВидыЦен 
		|ГДЕ 
		|	Входная";
	Выборка = ЗапросБазовыхЦен.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		МассивВидоЦен.Добавить(Выборка.ВидЦены);	
	КонецЦикла;
	
	Если НЕ Результат.Пустой() Тогда
		РегистрацияЦенНоменклатуры(МассивВидоЦен, Результат.Выгрузить(), ДанныеПочты);	
	КонецЕсли;
	
КонецПроцедуры



// Заполняет структуру шаблона по виду цены из регистра сведений ALPS_ШаблоныКонкурентов 
//
// Параметры:
//	ВидЦены			 - СправочникСсылка.ВидыЦен - Элемент справочника виды цен для которого будет заполнятся соответствия шаблона
//	СтруктураШаблона - Структура 				- Структура шаблона со свойствами:
//		* СоответствиеЦен 			- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.СоглашенияСПоставщиками)
//		* СоответствиеСкладов		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Склады)
//		* СоответствиеДопСвойств	- Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеДопРеквизитов - Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеВалюты 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Валюты)
//		* СоответствиеВидыЦен 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.ВидыЦен)
//		* СоответствиеВидШаблон 	- Соответствие - Содержит в ключе вид номенклатуры, в значении Строка (Шаблон) или Неопределено, если шаблон не задан
//		* СоответствиеНоменклатура	- Соответствие - Содержит в ключе номенклатуру, в значении данные (СтрокаТаблицыЗначений) для расчета шаблона
//	ШаблонЗаполнен 	- Булево					- Были добавлены элементы в соответствия структуры
//
Процедура ЗаполнитьСоответствияЗначенийШаблонов(ВидЦены, СтруктураШаблона, ШаблонЗаполнен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидНоменклатуры,
		|	ХранилищеТипов,
		|	Формула	
		|ИЗ
		|	РегистрСведений.ALPS_ШаблоныКонкурентов
		|ГДЕ
		|	ВидЦены = &ВидЦены";
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеШаблона = Выборка.ХранилищеТипов.Получить();
		Для Каждого ЭлементШаблона Из СоответствиеШаблона Цикл
			
			Если 	  ТипЗнч(ЭлементШаблона.Значение) = Тип("СправочникСсылка.Склады") Тогда
				
				СтруктураШаблона.СоответствиеСкладов["uid_" + СтрЗаменить(ЭлементШаблона.Значение.УникальныйИдентификатор(), "-", "_")] = ЭлементШаблона.Значение;
				ШаблонЗаполнен = Истина;
				
			ИначеЕсли ТипЗнч(ЭлементШаблона.Значение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
				
				СтруктураШаблона.СоответствиеЦен["uid_" + СтрЗаменить(ЭлементШаблона.Значение.УникальныйИдентификатор(), "-", "_")] 	= ЭлементШаблона.Значение;
				ШаблонЗаполнен = Истина;
				
			ИначеЕсли ТипЗнч(ЭлементШаблона.Значение) = Тип("СправочникСсылка.ВидыЦен") Тогда
				
				СтруктураШаблона.СоответствиеВидыЦен["uid_" + СтрЗаменить(ЭлементШаблона.Значение.УникальныйИдентификатор(), "-", "_")] = ЭлементШаблона.Значение;
				ШаблонЗаполнен = Истина;
				
			ИначеЕсли ТипЗнч(ЭлементШаблона.Значение) = Тип("СправочникСсылка.Валюты") Тогда
				
				СтруктураШаблона.СоответствиеВалюты["uid_" + СтрЗаменить(ЭлементШаблона.Значение.УникальныйИдентификатор(), "-", "_")] 	= ЭлементШаблона.Значение;
				ШаблонЗаполнен = Истина;
				
			Иначе 
				Если ЭлементШаблона.Значение.ЭтоДополнительноеСведение Тогда
					
					СтруктураШаблона.СоответствиеДопСвойств["uid_" + СтрЗаменить(ЭлементШаблона.Значение.УникальныйИдентификатор(), "-", "_")] 		= ЭлементШаблона.Значение;
					ШаблонЗаполнен = Истина;
					
				Иначе
					
					СтруктураШаблона.СоответствиеДопРеквизитов["uid_" + СтрЗаменить(ЭлементШаблона.Значение.УникальныйИдентификатор(), "-", "_")] 	= ЭлементШаблона.Значение;
					ШаблонЗаполнен = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьСоответствияЗначенийШаблонов()

// Заполняет соответствие "СоответствиеВидШаблон" структуры шаблона по виду цены 
//
// Параметры:
//	ВидЦены			 - СправочникСсылка.ВидыЦен - Элемент справочника виды цен для которого будет заполнятся соответствия шаблона
//	СтруктураШаблона - Структура 				- Структура шаблона со свойствами:
//		* СоответствиеЦен 			- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.СоглашенияСПоставщиками)
//		* СоответствиеСкладов		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Склады)
//		* СоответствиеДопСвойств	- Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеДопРеквизитов - Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеВалюты 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Валюты)
//		* СоответствиеВидыЦен 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.ВидыЦен)
//		* СоответствиеВидШаблон 	- Соответствие - Содержит в ключе вид номенклатуры, в значении Строка (Шаблон) или Неопределено, если шаблон не задан
//		* СоответствиеНоменклатура	- Соответствие - Содержит в ключе номенклатуру, в значении данные (СтрокаТаблицыЗначений) для расчета шаблона
//
Процедура ЗаполнитьСоответствиеВидШаблон(ВидЦены, СтруктураШаблона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//1. Стандартные шаблоны
		|ВЫБРАТЬ
		|	Формула,		
		|   ХранилищеТипов
		|ИЗ
		|	РегистрСведений.ALPS_ШаблоныКонкурентов
		|ГДЕ
		|	ВидЦены = &ВидЦены
		|И  ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//2. Шаблоны по видам номенклатуры
		|ВЫБРАТЬ
		|	ВидНоменклатуры,
		|	Формула,		
		|   ХранилищеТипов
		|ИЗ
		|	РегистрСведений.ALPS_ШаблоныКонкурентов
		|ГДЕ
		|	ВидЦены = &ВидЦены
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//3. Виды номенклатуры
		|ВЫБРАТЬ
		|	Ссылка КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.ВидыНоменклатуры	
		|ГДЕ
		|	НЕ ЭтоГруппа
		|;";
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	РезультатПакета = Запрос.ВыполнитьПакет();
	СтШаблоны 		 = РезультатПакета[0].Выгрузить(); 	
	ВдШаблоны 		 = РезультатПакета[1].Выгрузить();
	ВидыНоменклатуры = РезультатПакета[2].Выгрузить();
	
	СтандартныйШаблон = "";
	Если СтШаблоны.Количество() Тогда
		СтандартныйШаблон = ПолучитьШаблонПоФорме(СтШаблоны[0].Формула, СтШаблоны[0].ХранилищеТипов.Получить());		
	КонецЕсли;
	
	Для Каждого Строка Из ВидыНоменклатуры Цикл
		Если НЕ ПустаяСтрока(СтандартныйШаблон) Тогда
			СтруктураШаблона.СоответствиеВидШаблон[Строка.ВидНоменклатуры] = СтандартныйШаблон;			
		КонецЕсли;
		РезультатПоиска = ВдШаблоны.Найти(Строка.ВидНоменклатуры, "ВидНоменклатуры");
		Если РезультатПоиска <> Неопределено Тогда
			СтруктураШаблона.СоответствиеВидШаблон[Строка.ВидНоменклатуры] = ПолучитьШаблонПоФорме(РезультатПоиска.Формула, РезультатПоиска.ХранилищеТипов.Получить());	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеВидШаблон()

// Функция возвращает структуру с глобальными настройками
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Структура - Структура с глобальными настройками
Функция ПолучитьГлобальныеНастройки() 
	
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	
КонецФункции

// Конструктор структуры шаблона
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Структура - Инициализированная структура шаблона со свойствами:
//		* СоответствиеЦен 			- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.СоглашенияСПоставщиками)
//		* СоответствиеСкладов		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Склады)
//		* СоответствиеДопСвойств	- Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеДопРеквизитов - Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеВалюты 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Валюты)
//		* СоответствиеВидыЦен 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.ВидыЦен)
//		* СоответствиеВидШаблон 	- Соответствие - Содержит в ключе вид номенклатуры, в значении Строка (Шаблон) или Неопределено, если шаблон не задан
//		* СоответствиеНоменклатура	- Соответствие - Содержит в ключе номенклатуру, в значении данные (СтрокаТаблицыЗначений) для расчета шаблона
//
Функция ПолучитьСтруктуруШаблона() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("СоответствиеЦен", Новый Соответствие);
	Структура.Вставить("СоответствиеСкладов", Новый Соответствие);
	Структура.Вставить("СоответствиеДопСвойств", Новый Соответствие);
	Структура.Вставить("СоответствиеДопРеквизитов", Новый Соответствие);
	Структура.Вставить("СоответствиеВалюты", Новый Соответствие);
	Структура.Вставить("СоответствиеВидыЦен", Новый Соответствие);
	Структура.Вставить("СоответствиеВидШаблон", Новый Соответствие);
	Структура.Вставить("СоответствиеНоменклатура", Новый Соответствие);
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруШаблона() 

// Формирует текст запроса по переданой структуре шаблона, а также устанавливает параметры запроса 
//
// Параметры:
//	Запрос			 - Запрос 	 - Запрос для установления параметров согласно структуре шаблона
//	СтруктураШаблона - Структура - Структура шаблона со свойствами:
//		* СоответствиеЦен 			- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.СоглашенияСПоставщиками)
//		* СоответствиеСкладов		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Склады)
//		* СоответствиеДопСвойств	- Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеДопРеквизитов - Соответствие - Содержит в ключе уникальный индетификатор значения (ПлахВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения)
//		* СоответствиеВалюты 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.Валюты)
//		* СоответствиеВидыЦен 		- Соответствие - Содержит в ключе уникальный индетификатор значения (СправочникСсылка.ВидыЦен)
//		* СоответствиеВидШаблон 	- Соответствие - Содержит в ключе вид номенклатуры, в значении Строка (Шаблон) или Неопределено, если шаблон не задан
//		* СоответствиеНоменклатура	- Соответствие - Содержит в ключе номенклатуру, в значении данные (СтрокаТаблицыЗначений) для расчета шаблона
//
Функция ПолучитьТекстЗапроса_Cache_Шаблоны(Запрос, СтруктураШаблона) Экспорт
	
	СписокЦен 			= Новый СписокЗначений; ЦеныШапка 		  	= ""; ЦеныСоединение 	 	 = "";
	СписокСкладов 		= Новый СписокЗначений; СкладыШапка 	  	= ""; СкладыСоединение 	   	 = "";
	СписокДопСвойств	= Новый СписокЗначений; ДопСвойстваШапка  	= ""; ДопСвойстваСоединение  = "";
	СписокДопРеквизитов = Новый СписокЗначений; ДопРеквизитыШапка 	= ""; ДопРеквизитыСоединение = "";
	СписокВалюты		= Новый СписокЗначений; ВалютыШапка 		= ""; ВалютыСоединение 		 = "";
	СписокВидыЦен		= Новый СписокЗначений; ВидыЦенШапка 		= ""; ВидыЦенСоединение 	 = "";
	
	ТекстЗапроса = "";
	Если СтруктураШаблона.СоответствиеЦен.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеныСоглашения.Соглашение,
			|	ЦеныСоглашения.Номенклатура,
			|	ВЫБОР
			|		КОГДА ЦеныСоглашения.Валюта = &ВалютаВидаЦены
			|		ТОГДА ЦеныСоглашения.Цена
			|		ИНАЧЕ ЦеныСоглашения.Цена / ((Рг_Курс_Расч.Курс / Рг_Курс_Расч.Кратность)/(Рг_Курс_Соглашения.Курс / Рг_Курс_Соглашения.Кратность)) 
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ Cache_Конкуренты
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПервых(&НачалоДня, Соглашение В (&СписокЦен) И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_НоменклатураСЦенами)) КАК ЦеныСоглашения
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Соглашения
			|ПО Рг_Курс_Соглашения.Валюта = ЦеныСоглашения.Валюта 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Расч
			|ПО Рг_Курс_Расч.Валюта = &ВалютаВидаЦены 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Соглашение
			|;";
		Для Каждого Элемент Из СтруктураШаблона.СоответствиеЦен Цикл
			СписокЦен.Добавить(Элемент.Значение);
			ЦеныШапка 		= ЦеныШапка + " , IsNull(" + Элемент.Ключ + ".Цена, 0) КАК " + Элемент.Ключ;
			ЦеныСоединение  = ЦеныСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Конкуренты КАК   " + Элемент.Ключ + "
											|ПО " + Элемент.Ключ + ".Соглашение   = &" + Элемент.Ключ + "
											|И	" + Элемент.Ключ + ".Номенклатура = Cache_НоменклатураСЦенами.Номенклатура
											|";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокЦен", СписокЦен);
	КонецЕсли;
	
		
	Если СтруктураШаблона.СоответствиеВидыЦен.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Цены.ВидЦены,
			|	Цены.Номенклатура,
			|	ВЫБОР
			|		КОГДА Цены.Валюта = &ВалютаВидаЦены
			|		ТОГДА Цены.Цена
			|		ИНАЧЕ Цены.Цена / ((Рг_Курс_Расч.Курс / Рг_Курс_Расч.Кратность)/(Рг_Курс_Соглашения.Курс / Рг_Курс_Соглашения.Кратность)) 
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ Cache_ВидыЦен
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_НоменклатураСЦенами) И ВидЦены В (&СписокВидыЦен)) КАК Цены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Соглашения
			|ПО Рг_Курс_Соглашения.Валюта = Цены.Валюта 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Расч
			|ПО Рг_Курс_Расч.Валюта = &ВалютаВидаЦены 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидЦены
			|;";
		Для Каждого Элемент Из СтруктураШаблона.СоответствиеВидыЦен Цикл
			СписокВидыЦен.Добавить(Элемент.Значение);
			ВидыЦенШапка = ВидыЦенШапка + " , IsNull(" + Элемент.Ключ + ".Цена, 0) КАК " + Элемент.Ключ;
			ВидыЦенСоединение = ВидыЦенСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ВидыЦен КАК      " + Элемент.Ключ + "
											|ПО " + Элемент.Ключ + ".ВидЦены      = &" + Элемент.Ключ + "
											|И	" + Элемент.Ключ + ".Номенклатура = Cache_НоменклатураСЦенами.Номенклатура
											|";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокВидыЦен", СписокВидыЦен);
	КонецЕсли;
	
	
	Если СтруктураШаблона.СоответствиеВалюты.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	КурсыВалют.Валюта,
			|	КурсыВалют.Курс / КурсыВалют.Кратность КАК Курс
			|ПОМЕСТИТЬ Cache_Валюты
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта В (&СписокВалюты)) КАК КурсыВалют
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Валюта
			|;";
		Для Каждого Элемент Из СтруктураШаблона.СоответствиеВалюты Цикл
			СписокВалюты.Добавить(Элемент.Значение);
			ВалютыШапка = ВалютыШапка + " , IsNull(" + Элемент.Ключ + ".Курс, 0) КАК " + Элемент.Ключ;
			ВалютыСоединение = ВалютыСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Валюты КАК       " + Элемент.Ключ + "
											|ПО " + Элемент.Ключ + ".Валюта	      = &" + Элемент.Ключ + "
											|";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокВалюты", СписокВалюты);
	КонецЕсли;

	
	Если СтруктураШаблона.СоответствиеСкладов.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Номенклатура,
			|	Склад,
			|	ВНаличииОстаток
			|ПОМЕСТИТЬ Cache_Склады
			|ИЗ
			|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_НоменклатураСЦенами) И Склад В (&СписокСкладов))
			|;";
		Для Каждого Элемент Из СтруктураШаблона.СоответствиеСкладов Цикл
			СписокСкладов.Добавить(Элемент.Значение);
			СкладыШапка 	 = СкладыШапка + " , IsNull(" + Элемент.Ключ + ".ВНаличииОстаток, 0) КАК " + Элемент.Ключ;
			СкладыСоединение = СкладыСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Склады КАК  " + Элемент.Ключ + "
											|ПО " + Элемент.Ключ + ".Номенклатура = Cache_НоменклатураСЦенами.Номенклатура
											|И	" + Элемент.Ключ + ".Склад   = &" + Элемент.Ключ + "
											|";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	КонецЕсли;
	
	
	
	Если СтруктураШаблона.СоответствиеДопСвойств.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Cache_Номенклатура.Номенклатура,
			|	ДополнительныеСведения.Свойство,
			|	ДополнительныеСведения.Значение
			|ПОМЕСТИТЬ Cache_ДопСвойства
			|ИЗ
			|	Cache_НоменклатураСЦенами КАК Cache_Номенклатура  
			|
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ПО	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура) = Cache_Номенклатура.Номенклатура
			|И	ДополнительныеСведения.Свойство В (&СписокДопСвойств)
			|;";
		Для Каждого Элемент Из СтруктураШаблона.СоответствиеДопСвойств Цикл
			СписокДопСвойств.Добавить(Элемент.Значение);
			ДопСвойстваШапка 	  = ДопСвойстваШапка + " , IsNull(" + Элемент.Ключ + ".Значение, Неопределено) КАК " + Элемент.Ключ;
			ДопСвойстваСоединение = ДопСвойстваСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ДопСвойства КАК " + Элемент.Ключ + "
											|ПО " + Элемент.Ключ + ".Номенклатура = Cache_НоменклатураСЦенами.Номенклатура
											|И	" + Элемент.Ключ + ".Свойство    = &" + Элемент.Ключ + "
											|";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокДопСвойств", СписокДопСвойств);
	КонецЕсли;
	
	
	
	Если СтруктураШаблона.СоответствиеДопРеквизитов.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Cache_Номенклатура.Номенклатура,
			|	ДополнительныеРеквизиты.Свойство,
			|	ДополнительныеРеквизиты.Значение
			|ПОМЕСТИТЬ Cache_ДопРеквизиты
			|ИЗ
			|	Cache_НоменклатураСЦенами КАК Cache_Номенклатура  
			|
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
			|ПО	ДополнительныеРеквизиты.Ссылка = Cache_Номенклатура.Номенклатура
			|И	ДополнительныеРеквизиты.Свойство В (&СписокДопРеквизитов)
			|;";
		Для Каждого Элемент Из СтруктураШаблона.СоответствиеДопРеквизитов Цикл
			СписокДопРеквизитов.Добавить(Элемент.Значение);
			ДопРеквизитыШапка 	   = ДопРеквизитыШапка + " , IsNull(" + Элемент.Ключ + ".Значение, Неопределено) КАК " + Элемент.Ключ;
			ДопРеквизитыСоединение = ДопРеквизитыСоединение + "
											|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ДопРеквизиты КАК "  + Элемент.Ключ + "
											|ПО " + Элемент.Ключ + ".Номенклатура = Cache_НоменклатураСЦенами.Номенклатура
											|И	" + Элемент.Ключ + ".Свойство     = &" + Элемент.Ключ + "
											|";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Запрос.УстановитьПараметр("СписокДопРеквизитов", СписокДопРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Cache_НоменклатураСЦенами.Номенклатура	
		|	" + ЦеныШапка 			+ "
		|	" + СкладыШапка 		+ "
		|	" + ВалютыШапка 		+ "
		|	" + ВидыЦенШапка 		+ "
		|	" + ДопСвойстваШапка 	+ "
		|	" + ДопРеквизитыШапка 	+ "
		|	
		|ИЗ
		|	Cache_НоменклатураСЦенами КАК Cache_НоменклатураСЦенами
		|
		|	" + ЦеныСоединение 			+ "
		|	" + СкладыСоединение 		+ "
		|	" + ВалютыСоединение 		+ "
		|	" + ВидыЦенСоединение 		+ "
		|	" + ДопСвойстваСоединение 	+ "
		|	" + ДопРеквизитыСоединение 	+ " 
		|;"; 
		
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_Cache_Шаблоны()




Функция ПолучитьТекстЗапросаФормированияНастроек() Экспорт

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Считываем настройки прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ВидНоменклатуры
		|ПОМЕСТИТЬ pre_ПолныеНастройки
		|ИЗ
		|	&ПолныеНастройки КАК ТаблицаПрайсов
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Считываем полные настройки прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ВидНоменклатуры
		|ПОМЕСТИТЬ ПолныеНастройки
		|ИЗ
		|	pre_ПолныеНастройки КАК ТаблицаПрайсов
		|
		|СГРУППИРОВАТЬ ПО
		|	Соглашение, 
		|	ВидНоменклатуры	
		|
		|ИНДЕКСИРОВАТЬ ПО
		| 	Соглашение,
		|	ВидНоменклатуры
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ pre_ПолныеНастройки;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Считываем базовые данные прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ФайлПрайсЛиста КАК ФайлПрайсЛиста, 
		|	ДнейАктуальности,
		|	ОтключитьИспользованиеПрайсЛиста КАК ПрайсИсключен,
		|	deadline
		|ПОМЕСТИТЬ НачальныеБазовыеНастройки
		|ИЗ
		|	&БазовыеНастройки КАК ТаблицаПрайсов
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Считываем базовые данные прайсов
		|ВЫБРАТЬ
		|	Соглашение, 
		|	ФайлПрайсЛиста.ДатаМодификацииУниверсальная КАК ДатаМодификации, 
		|	ДнейАктуальности,
		|	deadline
		|ПОМЕСТИТЬ БазовыеНастройки
		|ИЗ
		|	НачальныеБазовыеНастройки КАК ТаблицаПрайсов
		|ГДЕ
		|	НЕ ПрайсИсключен	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НачальныеБазовыеНастройки;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Урезание не актуальных прайсов
		|ВЫБРАТЬ
		|	Соглашение,              
		|	Соглашение.СрокПоставки КАК СрокПоставки, 
		|	ДатаМодификации 		КАК ДатаМодификации, 
		|	ВЫБОР
		|		КОГДА (&Час >  ЧАС(deadline))
		|		 ИЛИ  (&Час >= ЧАС(deadline) И &Минута > МИНУТА(deadline))
		|     	ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПриемЗаказовЗавершен
		|
		|ПОМЕСТИТЬ АктуальныеБазовыеЗначения
		|ИЗ
		|	БазовыеНастройки
		|ГДЕ
		|	 ДОБАВИТЬКДАТЕ(ДатаМодификации, День, ДнейАктуальности) >= &Сегодня
		|ИЛИ ДнейАктуальности = 0
		|
		|ИНДЕКСИРОВАТЬ ПО Соглашение
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ БазовыеНастройки; 
		|";
	Возврат ТекстЗапроса;		

КонецФункции // ПолучитьТекстЗапросаФормированияНастроек()

Функция ПолучитьТекстЗапросаНоменклатурыПодЗаказ() Экспорт

	ТекстЗапроса = "
		//1. День обработки заказа
		|ВЫБРАТЬ
		|	Минимум(ДатаГрафика) КАК ДатаОбработкиЗаказа
		|	
		|ПОМЕСТИТЬ ДеньОбработкиЗаказа 
		|ИЗ 
		|	РегистрСведений.КалендарныеГрафики 
		|ГДЕ 
		|   Календарь 	= 	&Календарь
		|И  ДатаГрафика >= 	&Сегодня
		|И  ДеньВключенВГрафик 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. День и номер дня обработки заказа
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
		|
		|ПОМЕСТИТЬ ДанныеОбработкиЗаказа
		|ИЗ
		|	ДеньОбработкиЗаказа
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ПО ДеньОбработкиЗаказа.ДатаОбработкиЗаказа = КалендарныеГрафики.ДатаГрафика
		|И  &Календарь 							 	= КалендарныеГрафики.Календарь
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
        |УНИЧТОЖИТЬ ДеньОбработкиЗаказа;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Строим верные даты доставки
		|ВЫБРАТЬ
		|	БазовыеЗначения.Соглашение,
		|	БазовыеЗначения.ДатаМодификации КАК ДатаЗагрузки,
		|	ДатаДоставкиЗаказа.ДатаГрафика
		|
		|ПОМЕСТИТЬ ДанныеОбработкиЗаказаПоСоглашениям
		|ИЗ
		|	АктуальныеБазовыеЗначения КАК БазовыеЗначения
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОбработкиЗаказа КАК ДанныеОбработкиЗаказа
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаДоставкиЗаказа
		|ПО  ДанныеОбработкиЗаказа.КоличествоДнейВГрафикеСНачалаГода + БазовыеЗначения.СрокПоставки + БазовыеЗначения.ПриемЗаказовЗавершен = ДатаДоставкиЗаказа.КоличествоДнейВГрафикеСНачалаГода
		|И	 &Календарь 						= ДатаДоставкиЗаказа.Календарь
		|И   ДанныеОбработкиЗаказа.ДатаГрафика <= ДатаДоставкиЗаказа.ДатаГрафика
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	БазовыеЗначения.Соглашение,
		|	БазовыеЗначения.ДатаМодификации,
		|	ДатаДоставкиЗаказа.ДатаГрафика
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеОбработкиЗаказа;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныеБазовыеЗначения;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Получение актуального списка позиций 
		|ВЫБРАТЬ
		|	ЦеныПоставщиков.Период,
		|	ЦеныПоставщиков.Номенклатура,
		|	ЦеныПоставщиков.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ЦеныПоставщиков.Соглашение,
		|	ЦеныПоставщиков.Упаковка 												КАК Упаковка,
		|	ЦеныПоставщиков.Цена * ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1)КАК Цена,
		|	ЦеныПоставщиков.Валюта													КАК Валюта
		|ПОМЕСТИТЬ НачальныйБазовыйСписок
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, (Номенклатура, Характеристика) НЕ В
	  	|					(ВЫБРАТЬ
	  	|						Номенклатура,
	  	|						Характеристика
	  	|					ИЗ
	 	|						РегистрНакопления.ТоварыОрганизаций.Остатки(, Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной))								
		|					)
		|				) КАК ЦеныПоставщиков	
		|ИНДЕКСИРОВАТЬ ПО
		|	Соглашение,
		|	ВидНоменклатуры
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Получение актуального списка позиций 
		|ВЫБРАТЬ
		|	ЦеныПоставщиков.Номенклатура,
		|	ЦеныПоставщиков.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ЦеныПоставщиков.Соглашение,
		|	ТаблицаПрайсов.ДатаЗагрузки,
		|	ТаблицаПрайсов.ДатаГрафика,
		|	ЦеныПоставщиков.Упаковка 		КАК Упаковка,
		|	ЦеныПоставщиков.Цена 			КАК Цена,
		|	ЦеныПоставщиков.Валюта			КАК Валюта,
		|   ВЫБОР IsNull(ПолныеНастройки.ВидНоменклатуры, 0)
		|   	КОГДА 0
		|		ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК ГарантияДоставки
		|ПОМЕСТИТЬ АктуальныйБазовыйСписок
		|ИЗ
		|	НачальныйБазовыйСписок КАК ЦеныПоставщиков	
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОбработкиЗаказаПоСоглашениям КАК ТаблицаПрайсов
		|ПО ТаблицаПрайсов.Соглашение 	= ЦеныПоставщиков.Соглашение
		|И	ТаблицаПрайсов.ДатаЗагрузки < ЦеныПоставщиков.Период
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ПолныеНастройки КАК ПолныеНастройки
		|ПО ПолныеНастройки.Соглашение 		= ЦеныПоставщиков.Соглашение					 
		|И	ПолныеНастройки.ВидНоменклатуры = ЦеныПоставщиков.Номенклатура.ВидНоменклатуры
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НачальныйБазовыйСписок;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПолныеНастройки;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеОбработкиЗаказаПоСоглашениям;
		//////////////////////////////////////////////////////////////////////////////////////////
		//6. Список номенклатуры с гарантированной датой доставки
		|ВЫБРАТЬ
		|	Номенклатура,
		|   МАКСИМУМ(ГарантияДоставки) КАК ГарантияДоставки
		|ПОМЕСТИТЬ АктуальныйСписокДоставки 
		|ИЗ
		|	АктуальныйБазовыйСписок
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//7. Список номенклатуры с минимальной датой доставки
		|ВЫБРАТЬ
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки,
		|   МИНИМУМ(АктуальныйБазовыйСписок.ДатаГрафика) КАК ДатаДоставки
		|ПОМЕСТИТЬ АктуальныйСписокДоставкиСДатой
		|ИЗ	
		|	АктуальныйСписокДоставки КАК АктуальныйСписокДоставки
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйСписокДоставки.Номенклатура 	  = АктуальныйБазовыйСписок.Номенклатура
		|И	АктуальныйСписокДоставки.ГарантияДоставки = АктуальныйБазовыйСписок.ГарантияДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АктуальныйСписокДоставки.Номенклатура,
		|	ДатаДоставки
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокДоставки;
		//////////////////////////////////////////////////////////////////////////////////////////
		//8. Список номенклатуры с минимальной датой доставки и минимальной ценой
		|ВЫБРАТЬ
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки,
		|	АктуальныйСписокДоставки.ДатаДоставки,
		|   МИНИМУМ(АктуальныйБазовыйСписок.Цена) КАК Цена
		|ПОМЕСТИТЬ АктуальныйСписокДоставкиИЦен 
		|ИЗ
		|	АктуальныйСписокДоставкиСДатой КАК АктуальныйСписокДоставки
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйСписокДоставки.Номенклатура 	  = АктуальныйБазовыйСписок.Номенклатура
		|И	АктуальныйСписокДоставки.ГарантияДоставки = АктуальныйБазовыйСписок.ГарантияДоставки
		|И	АктуальныйСписокДоставки.ДатаДоставки 	  = АктуальныйБазовыйСписок.ДатаГрафика
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныйСписокДоставки.Номенклатура,
		|	АктуальныйСписокДоставки.ГарантияДоставки,
		|	АктуальныйСписокДоставки.ДатаДоставки
		|;	
        //////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокДоставкиСДатой;
		//////////////////////////////////////////////////////////////////////////////////////////
		//9. Актуальный список номенклатуры
        |ВЫБРАТЬ
		|	АктуальныйСписокДоставкиИЦен.Номенклатура,
		|	АктуальныйСписокДоставкиИЦен.ДатаДоставки,
		|	АктуальныйСписокДоставкиИЦен.Цена,
		|	АктуальныйСписокДоставкиИЦен.ГарантияДоставки,
		|   МАКСИМУМ(АктуальныйБазовыйСписок.ДатаЗагрузки) КАК ДатаЗагрузки
		|ПОМЕСТИТЬ АктуальныйСписокНоменклатуры 
		|ИЗ
		|	АктуальныйСписокДоставкиИЦен КАК АктуальныйСписокДоставкиИЦен
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйСписокДоставкиИЦен.Номенклатура 		= АктуальныйБазовыйСписок.Номенклатура
		|И	АктуальныйСписокДоставкиИЦен.ГарантияДоставки 	= АктуальныйБазовыйСписок.ГарантияДоставки
		|И	АктуальныйСписокДоставкиИЦен.ДатаДоставки 		= АктуальныйБазовыйСписок.ДатаГрафика
		|И	АктуальныйСписокДоставкиИЦен.Цена		 		= АктуальныйБазовыйСписок.Цена
		|
		|СГРУППИРОВАТЬ ПО
		|	АктуальныйСписокДоставкиИЦен.Номенклатура,
		|	АктуальныйСписокДоставкиИЦен.ГарантияДоставки,
		|	АктуальныйСписокДоставкиИЦен.ДатаДоставки,
		|	АктуальныйСписокДоставкиИЦен.Цена
		|;
        //////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокДоставкиИЦен;
		//////////////////////////////////////////////////////////////////////////////////////////
		//10. Предварительный список к записи
		|ВЫБРАТЬ
		|	АктуальныйСписок.Номенклатура,
		|	АктуальныйБазовыйСписок.Упаковка,
		|	АктуальныйСписок.Цена,
		|	АктуальныйБазовыйСписок.Валюта
		|
		|ПОМЕСТИТЬ НоменклатураКЗаписи
		|ИЗ
		|	АктуальныйСписокНоменклатуры КАК АктуальныйСписок	
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныйБазовыйСписок КАК АктуальныйБазовыйСписок
		|ПО АктуальныйБазовыйСписок.Номенклатура 	 = АктуальныйСписок.Номенклатура
		|И	АктуальныйБазовыйСписок.ГарантияДоставки = АктуальныйСписок.ГарантияДоставки
		|И	АктуальныйБазовыйСписок.ДатаГрафика  	 = АктуальныйСписок.ДатаДоставки 
		|И	АктуальныйБазовыйСписок.Цена         	 = АктуальныйСписок.Цена		 
		|И	АктуальныйБазовыйСписок.ДатаЗагрузки 	 = АктуальныйСписок.ДатаЗагрузки 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйСписокНоменклатуры;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АктуальныйБазовыйСписок;
		//////////////////////////////////////////////////////////////////////////////////////////
		//11. Список к записи в документ
		|ВЫБРАТЬ
	  	|	ТабМинЦены.Номенклатура 	КАК Номенклатура,
	  	//|	ТабМинЦены.Характеристика 	КАК Характеристика,
		|	ТабМинЦены.Упаковка 		КАК Упаковка,
		|	СпрВидыЦен.ВидЦены			КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА ТабМинЦены.Валюта = СпрВидыЦен.Валюта
		|		ТОГДА ТабМинЦены.Цена
		|		ИНАЧЕ ТабМинЦены.Цена * (КурсЦен.Курс / КурсЦен.Кратность) / (КурсСпр.Курс / КурсСпр.Кратность)
		|	КОНЕЦ КАК Цена
		|	
	  	|ИЗ
	  	| 	НоменклатураКЗаписи КАК ТабМинЦены
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦен
	  	|ПО ТабМинЦены.Валюта = КурсЦен.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ 
		|						ВидЦены,
		|						ВидЦены.ВалютаЦены КАК Валюта
		|					ИЗ 
		|						РегистрСведений.ALPS_ВидыЦен 
		|					ГДЕ 
		|						Входная) КАК СпрВидыЦен
		|ПО (Истина) 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсСпр
	  	|ПО СпрВидыЦен.Валюта = КурсСпр.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены В (
	  	|							ВЫБРАТЬ
	  	|								ВидЦены
	  	|							ИЗ
	  	|								РегистрСведений.ALPS_ВидыЦен
	  	|							ГДЕ
	  	|								Входная)) КАК РегВходныеЦены
		|ПО СпрВидыЦен.ВидЦены		  = РегВходныеЦены.ВидЦены
		|И	ТабМинЦены.Номенклатура   = РегВходныеЦены.Номенклатура
		//|И  ТабМинЦены.Характеристика = РегВходныеЦены.Характеристика
		|		
		|ГДЕ
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ТабМинЦены.Валюта = СпрВидыЦен.Валюта
		|		ТОГДА ТабМинЦены.Цена
		|		ИНАЧЕ ТабМинЦены.Цена * (КурсЦен.Курс / КурсЦен.Кратность) / (КурсСпр.Курс / КурсСпр.Кратность)
		|	КОНЕЦ КАК Число(15,2)) <> IsNull(РегВходныеЦены.Цена, 0) 
		|;";
	Возврат ТекстЗапроса;

КонецФункции // ПоулчитьТекстЗапросаОбновленияАктуальности()

Функция ПолучитьТекстЗапроса_Cache_Номенклатура() Экспорт
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//Временная таблица номеклатуры в наличии и актуальной номенклатуры
		|ВЫБРАТЬ
		|	Вл.Номенклатура,
		|	Вл.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Вл.Номенклатура.ЦеноваяГруппа	КАК ЦеноваяГруппа,
		|	Вл.Номенклатура.Производитель	КАК Производитель,
		//|	Вл.Характеристика,
		|   IsNull(КоличествоОстаток, 0) КАК ВНаличии
		|
		|ПОМЕСТИТЬ Cache_Номенклатура	
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Номенклатура
		//|			,Характеристика	
		|		ИЗ
		|			РегистрНакопления.ТоварыОрганизаций.Остатки
		|			
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			Номенклатура
		//|			,Характеристика
		|		ИЗ
		|			РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних
		|       ГДЕ
		|			Актуально
		|	) КАК Вл
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки КАК Остатки
		|ПО Вл.Номенклатура   = Остатки.Номенклатура
		//|И  Вл.Характеристика = Остатки.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вл.Номенклатура,
		|	Вл.Номенклатура.ВидНоменклатуры
		|";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапроса_Cache_Фасетный() Экспорт
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//1. Временная таблица настроек ценовых групп
		|ВЫБРАТЬ
		| 	ВидНоменклатуры,
		| 	Производитель,
		| 	ЦеноваяГруппа,
		| 	ИгнорироватьВНаличии,
		| 	ИгнорироватьАктуальные
		| 	
		|ПОМЕСТИТЬ Cache_ЦеновыеГруппы
		|ИЗ
		|	РегистрСведений.ALPS_ЦеновыеГруппы
		|ГДЕ
		|	ВидЦены = &ВидЦены 
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидНоменклатуры,
		|	ЦеноваяГруппа,
		|	Производитель		
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//2. Временная таблица номенклатуры которую не нужно пересчитывать
		|ВЫБРАТЬ
		|	Cache_Номенклатура.Номенклатура
		|
		|ПОМЕСТИТЬ Cache_ФиксированнаяНоменклатура	
		|ИЗ
		|	(ВЫБРАТЬ 
		|		Номенклатура,
		|		ВидНоменклатуры,
		|		ЦеноваяГруппа,
		|		Производитель,
		|		ВНаличии 
		|	 ИЗ 
		|	 	Cache_Номенклатура
		|	 ГДЕ
		|	 	ЦеноваяГруппа <> Значение(Справочник.ЦеновыеГруппы.ПустаяСсылка)	
		|	 ) КАК Cache_Номенклатура
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ЦеновыеГруппы КАК ПоПроизводителю
		|ПО	ПоПроизводителю.ВидНоменклатуры = Cache_Номенклатура.ВидНоменклатуры
		|И	ПоПроизводителю.ЦеноваяГруппа 	= Cache_Номенклатура.ЦеноваяГруппа 
		|И	ПоПроизводителю.Производитель 	= Cache_Номенклатура.Производитель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ЦеновыеГруппы КАК ПоВидуНоменклатуры
		|ПО	ПоВидуНоменклатуры.ВидНоменклатуры  = Cache_Номенклатура.ВидНоменклатуры
		|И	ПоВидуНоменклатуры.ЦеноваяГруппа 	= Cache_Номенклатура.ЦеноваяГруппа 
		|И	ПоВидуНоменклатуры.Производитель 	= Значение(Справочник.Производители.ПустаяСсылка)
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ЦеновыеГруппы КАК ПоОбщейНастройке
		|ПО	ПоОбщейНастройке.ВидНоменклатуры = Значение(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|И	ПоОбщейНастройке.ЦеноваяГруппа 	 = Cache_Номенклатура.ЦеноваяГруппа 	
        |
		|ГДЕ
		|	ВЫБОР Cache_Номенклатура.ВНаличии
		|		КОГДА 0
		|		ТОГДА 	
		|				ВЫБОР IsNull(ПоПроизводителю.ИгнорироватьАктуальные, Неопределено)
		|					КОГДА Неопределено
		|					ТОГДА 	ВЫБОР IsNull(ПоВидуНоменклатуры.ИгнорироватьАктуальные, Неопределено)
		|								КОГДА Неопределено
		|								ТОГДА НЕ IsNull(ПоОбщейНастройке.ИгнорироватьАктуальные, Ложь)	 
		|								ИНАЧЕ НЕ ПоВидуНоменклатуры.ИгнорироватьАктуальные
		|							КОНЕЦ
		|					ИНАЧЕ НЕ ПоПроизводителю.ИгнорироватьАктуальные
		|				КОНЕЦ
		|		ИНАЧЕ  
		|				ВЫБОР IsNull(ПоПроизводителю.ИгнорироватьВНаличии, Неопределено)
		|					КОГДА Неопределено
		|					ТОГДА 	ВЫБОР IsNull(ПоВидуНоменклатуры.ИгнорироватьВНаличии, Неопределено)
		|								КОГДА Неопределено
		|								ТОГДА НЕ IsNull(ПоОбщейНастройке.ИгнорироватьВНаличии, Ложь)	 
		|								ИНАЧЕ НЕ ПоВидуНоменклатуры.ИгнорироватьВНаличии
		|							КОНЕЦ
		|					ИНАЧЕ НЕ ПоПроизводителю.ИгнорироватьВНаличии
		|				КОНЕЦ 
		|	КОНЕЦ
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура		
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//3. Временная таблица номенклатуры с фиксированными ценами без цены
		|ВЫБРАТЬ
		|	Cache_Номенклатура.Номенклатура
		|
		|ПОМЕСТИТЬ Cache_НоменклатураБезЦены			
		|ИЗ
		|	Cache_Номенклатура КАК Cache_Номенклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &ВидЦены) КАК Цены
		|ПО  Цены.Номенклатура = Cache_Номенклатура.Номенклатура
        |
		|ГДЕ
		|	IsNull(Цены.Цена, 0) = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Cache_Номенклатура.Номенклатура
        |;
		////////////////////////////////////////////////////////////////////////////////////////////
		//4. Временная таблица номенклатуры в наличии с ценами в упр.валюте, валюте цены, валюте регистра
		|ВЫБРАТЬ
		|	Cache_Номенклатура.Номенклатура		КАК Номенклатура,
		//|   Cache_Номенклатура.Характеристика	КАК Характеристика,
		|	Cache_Номенклатура.ВидНоменклатуры	КАК ВидНоменклатуры,
		|	ПРЕДСТАВЛЕНИЕ(Cache_Номенклатура.Производитель)	КАК Производитель,
		|   Cache_Номенклатура.ВНаличии			КАК ВНаличии,
		|
		|   Цены.Цена 																								КАК БазоваяЦена,
		|	Цены.Цена / ((Рг_Курс_Упр.Курс  / Рг_Курс_Упр.Кратность )/(Рг_Курс_База.Курс / Рг_Курс_База.Кратность)) КАК БазоваяЦенаУпр,
		|	Цены.Цена / ((Рг_Курс_Расч.Курс / Рг_Курс_Расч.Кратность)/(Рг_Курс_База.Курс / Рг_Курс_База.Кратность)) КАК БазоваяЦенаВал
		|
		|ПОМЕСТИТЬ Cache_НоменклатураСЦенами
		|ИЗ
		|	Cache_Номенклатура КАК Cache_Номенклатура
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &База_ВидЦены) КАК Цены
		|По Цены.Номенклатура = Cache_Номенклатура.Номенклатура
		//|И  Цены.Характеристика = Cache_Номенклатура.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_База
		|ПО Рг_Курс_База.Валюта = Цены.Валюта 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Расч
		|ПО Рг_Курс_Расч.Валюта = &ВалютаВидаЦены 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Рг_Курс_Упр
		|ПО Рг_Курс_Упр.Валюта = &ВалютаУпрУчета
		|
		|ГДЕ
		|	((&РегламентноВыполнить ИЛИ Cache_Номенклатура.ВНаличии = 0) И Cache_Номенклатура.Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ Cache_ФиксированнаяНоменклатура))
		|ИЛИ Cache_Номенклатура.Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_НоменклатураБезЦены)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	БазоваяЦенаУпр
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Cache_ЦеновыеГруппы;
		|УНИЧТОЖИТЬ Cache_ФиксированнаяНоменклатура;
		|УНИЧТОЖИТЬ Cache_НоменклатураБезЦены;
		////////////////////////////////////////////////////////////////////////////////////////////
		//5. Временная таблица наценок по диапазонам и родителям
		|ВЫБРАТЬ		
		|   ВидНоменклатуры,
		|	НижняяГраница,
		|	ВерхняяГраница,
		|   Значение
		|
		|ПОМЕСТИТЬ Cache_Наценки
		|ИЗ	
		|	РегистрСведений.ALPS_НаценкиДляВидовНоменклатуры  
		|ГДЕ																	
		|	ВидЦены = &ВидЦены
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидНоменклатуры,
		|   НижняяГраница,
		|   ВерхняяГраница
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//6. Временная таблица наценок по диапазонам и родителям
        |ВЫБРАТЬ
		|	ПравилаН.НижняяГраницаДиапазонаЦен 						КАК НижняяГраница,
		|	МИНИМУМ(IsNull(ПравилаВ.НижняяГраницаДиапазонаЦен, 0)) 	КАК ВерхняяГраница,
		|	ПравилаН.ТочностьОкругления,
		|	ПравилаН.ПсихологическоеОкругление,
		|	ПравилаН.Ссылка.ОкруглятьВБольшуюСторону
		|
		|ПОМЕСТИТЬ Cache_Округление
		|ИЗ
		|	Справочник.ВидыЦен.ПравилаОкругленияЦены КАК ПравилаН
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ПравилаОкругленияЦены КАК ПравилаВ
		|ПО	ПравилаВ.Ссылка = ПравилаН.Ссылка
		|И	ПравилаВ.НижняяГраницаДиапазонаЦен > ПравилаН.НижняяГраницаДиапазонаЦен 
		|	
		|ГДЕ
		|	ПравилаН.Ссылка = &ВидЦены
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПравилаН.НижняяГраницаДиапазонаЦен,
		|	ПравилаН.ТочностьОкругления,
		|	ПравилаН.ПсихологическоеОкругление,
		|	ПравилаН.Ссылка.ОкруглятьВБольшуюСторону
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НижняяГраница,
		|	ВерхняяГраница
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//7. Таблица предварительного результата
		|ВЫБРАТЬ
		|	Cache_НоменклатураСЦенами.Номенклатура,
		//|	Cache_НоменклатураСЦенами.Характеристика,
		|	Cache_НоменклатураСЦенами.ВидНоменклатуры,
		|	Cache_НоменклатураСЦенами.Производитель,
		|	Cache_НоменклатураСЦенами.ВНаличии																											 КАК ALPS_ВНаличии,
		|
		|	ВЫРАЗИТЬ(Cache_НоменклатураСЦенами.БазоваяЦенаВал * (1 + IsNull(Cache_ВидНаценки.Значение, IsNull(Cache_СтНаценки.Значение, 0)) / 100) КАК Число(15,2)) КАК ALPS_ФасетЦена,
		|	Cache_НоменклатураСЦенами.БазоваяЦенаВал 																									 КАК ALPS_БазоваяЦена
		|
		|ПОМЕСТИТЬ ПредварительныйРезультат
		|ИЗ 
		|	Cache_НоменклатураСЦенами КАК Cache_НоменклатураСЦенами
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Наценки КАК Cache_ВидНаценки
		|ПО	Cache_ВидНаценки.ВидНоменклатуры = Cache_НоменклатураСЦенами.ВидНоменклатуры
		|И	Cache_ВидНаценки.НижняяГраница 	<= Cache_НоменклатураСЦенами.БазоваяЦенаУпр 
		|И (Cache_ВидНаценки.ВерхняяГраница > Cache_НоменклатураСЦенами.БазоваяЦенаУпр ИЛИ Cache_ВидНаценки.ВерхняяГраница = 0)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Наценки КАК Cache_СтНаценки
		|ПО Cache_СтНаценки.ВидНоменклатуры  = Значение(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|И	Cache_СтНаценки.НижняяГраница 	<= Cache_НоменклатураСЦенами.БазоваяЦенаУпр
		|И (Cache_СтНаценки.ВерхняяГраница 	> Cache_НоменклатураСЦенами.БазоваяЦенаУпр ИЛИ Cache_СтНаценки.ВерхняяГраница = 0)
		|	
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//8. Таблица результата
		|ВЫБРАТЬ
		|	ПредварительныйРезультат.Номенклатура,
		//|	Cache_НоменклатураСЦенами.Характеристика,
		|	ПредварительныйРезультат.ВидНоменклатуры,
		|	ПредварительныйРезультат.Производитель,
		|	ПредварительныйРезультат.ALPS_ВНаличии,
		|
		|	ПредварительныйРезультат.ALPS_ФасетЦена,
		|	ПредварительныйРезультат.ALPS_БазоваяЦена,
		|
		|   IsNull(Cache_Округление.ТочностьОкругления, 0.01)		КАК ТочностьОкругления,
		|   IsNull(Cache_Округление.ПсихологическоеОкругление, 0)	КАК ПсихологическоеОкругление,
		|   IsNull(Cache_Округление.ОкруглятьВБольшуюСторону, Ложь)	КАК ОкруглятьВБольшуюСторону
		|
		|ИЗ 
		|	ПредварительныйРезультат КАК ПредварительныйРезультат
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Cache_Округление КАК Cache_Округление
		|ПО Cache_Округление.НижняяГраница 	<= ПредварительныйРезультат.ALPS_ФасетЦена
		|И (Cache_Округление.ВерхняяГраница >  ПредварительныйРезультат.ALPS_ФасетЦена ИЛИ Cache_Округление.ВерхняяГраница = 0)
		|;";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапроса_Cache_Запись() Экспорт
	ТекстЗапроса = "
		|УНИЧТОЖИТЬ Cache_Наценки;
		|УНИЧТОЖИТЬ Cache_Округление;
		|УНИЧТОЖИТЬ ПредварительныйРезультат;
		////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРезультат.Номенклатура,		
		//|   ТабРезультат.Характеристика,
		|   ТабРезультат.ALPS_ФасетЦена	КАК Цена
		|
		|ПОМЕСТИТЬ ТабРезультат
		|ИЗ 
		|	&ТабРезультат КАК ТабРезультат
		|;
		////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРезультат.Номенклатура,		
		//|   ТабРезультат.Характеристика,
		|   &ВидЦены КАК ВидЦены,
		|   ТабРезультат.Цена
		//|   ЕСТЬNULL(Срез.Цена, 0)		КАК OldPrice
		|ИЗ
		|	ТабРезультат КАК ТабРезультат 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_НоменклатураСЦенами) И ВидЦены = &ВидЦены) КАК Срез
		|ПО Срез.Номенклатура = ТабРезультат.Номенклатура
		//|И  Срез.Характеристика = 	ТабРезультат.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_ВидыЦен КАК НастройкиОбновления
		|ПО НастройкиОбновления.ВидЦены = &ВидЦены
		|
		|ГДЕ
		|	ЕСТЬNULL(Срез.Цена, 0) <> ТабРезультат.Цена
		|И	ВЫБОР
		|    	КОГДА ЕСТЬNULL(Срез.Цена, 0) = 0
		|		ТОГДА 100
		|       КОГДА ТабРезультат.Цена > Срез.Цена
		|       ТОГДА (ТабРезультат.Цена / Срез.Цена - 1) * 100
		|       КОГДА ТабРезультат.Цена < Срез.Цена
		|       ТОГДА (Срез.Цена / ТабРезультат.Цена - 1) * 100
		|       ИНАЧЕ 0
		|	КОНЕЦ > НастройкиОбновления.ДопустимоеОтклонениеЦены
		|;";
	Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьШаблонПоФорме(Формула, СоответствиеТипов)
	ТекстШаблона = "СтрокаНом.ALPS_ФасетЦена = ";
	ТекстШаблона = ТекстШаблона	+ СтрЗаменить(Формула, 		"[ALPS_ФасетЦена]", 	"СтрокаНом.ALPS_ФасетЦена");
	ТекстШаблона =				  СтрЗаменить(ТекстШаблона, "[ALPS_ВНаличии]",  	"СтрокаНом.ALPS_ВНаличии");
	ТекстШаблона = 				  СтрЗаменить(ТекстШаблона, "[ALPS_БазоваяЦена]", 	"СтрокаНом.ALPS_БазоваяЦена");
	ТекстШаблона = 				  СтрЗаменить(ТекстШаблона, "[Производитель]", 		"СтрокаНом.Производитель");
	Для Каждого Элемент Из СоответствиеТипов Цикл ТекстШаблона = СтрЗаменить(ТекстШаблона, "[" + Элемент.Ключ + "]", "СтрокаШаблон.uid_" + СтрЗаменить(Элемент.Значение.УникальныйИдентификатор(), "-", "_")); КонецЦикла;
	ТекстШаблона = ТекстШаблона + ";";
	Возврат ТекстШаблона;
КонецФункции



Функция РассчитатьРезультат(ПримерЧисло, ТочностьОкругления, ОкруглятьВБольшуюСторону, ПсихологическоеОкругление) Экспорт
	
	Если ЗначениеЗаполнено(ТочностьОкругления) Тогда
		ПримерЧисло = ОкруглитьЦену(ПримерЧисло, ТочностьОкругления, ОкруглятьВБольшуюСторону);
	КонецЕсли;
	
	Возврат ПрименитьПсихологическоеОкругление(ПримерЧисло, ПсихологическоеОкругление);
	
КонецФункции

Функция ОкруглитьЦену(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону)

	Перем Результат;
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервалов = Число / ТочностьОкругления;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
		
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлится до 0.4
			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлится до 0.35,
			// а 0.376 до 0.4
			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрименитьПсихологическоеОкругление(Число, ПсихологическоеОкругление)
	
	Если ПсихологическоеОкругление = 0 Тогда
		Возврат Число;
	Иначе
	
		Разрядность         = РазрядностьПсихологическогоОкругления(ПсихологическоеОкругление);
		РезультатОкругления = Окр(Число, -1 * Разрядность) - (Pow(10, Разрядность) - ПсихологическоеОкругление);
		Возврат ?(РезультатОкругления < Число, РезультатОкругления, Число);
		
	КонецЕсли;
		
КонецФункции

Функция РазрядностьПсихологическогоОкругления(ПсихологическоеОкругление)
	
	Разрядность = 0;
	
	Пока ПсихологическоеОкругление * Pow(10, Разрядность)     > 1 Цикл Разрядность = Разрядность - 1; КонецЦикла;	
	Пока ПсихологическоеОкругление * Pow(10, Разрядность + 1) < 1 Цикл Разрядность = Разрядность + 1; КонецЦикла;
	
	Возврат -1 * Разрядность;
	
КонецФункции 



Процедура ОповеститьОбОшибкеПоПочте(ДанныеПочты, ПараметрыПисьма)
	Если ДанныеПочты = Неопределено Тогда Возврат; КонецЕсли;
	БиблиотекаОбъект = GetLibrary("Библиотека внешних обработок");
	ПараметрыПисьма = БиблиотекаОбъект.СформироватьПараметрыПисьма(ПараметрыПисьма.Тема, ПараметрыПисьма.Тело, ДанныеПочты.АдресЭлектроннойПочты);
	БиблиотекаОбъект.ОтправитьСообщениеПоSMTP(ДанныеПочты.УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);	
КонецПроцедуры

Процедура РегистрацияЦенНоменклатуры(МасивВидовЦен, ТаблицаЦен, ДанныеПочты)
	
	Если МасивВидовЦен.Количество() = 0 Тогда Возврат; КонецЕсли; 
	
	ДокументОбъект 				 = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокументОбъект.Дата 		 = ТекущаяДата();	
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОбъект.Статус		 = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	ДокументОбъект.Товары.Загрузить(ТаблицаЦен);
	
	Представление = "";
	Для Каждого ВидЦены Из МасивВидовЦен Цикл
		НоваяСтрока 				 = ДокументОбъект.ВидыЦен.Добавить();
		НоваяСтрока.ВидЦены 		 = ВидЦены;
		Представление = Представление + "[" + Строка(ВидЦены) + "]";
	КонецЦикла;
		
	ДокументОбъект.Комментарий   = "ALPS - установка видов цен: " + Представление;
		
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ОповеститьОбОшибкеПоПочте(ДанныеПочты, Новый Структура("Тема, Тело", "Внимание! Не удалось провести документ установки цен!", ПолучитьНавигационнуюСсылку(ДокументОбъект.Ссылка) + Символы.ПС + ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры







///////////////////////////////////////////////////////////////////////////////////////////
// 											ВЕРСИИ
///////////////////////////////////////////////////////////////////////////////////////////

// Процедура сохраняет измененные настройки в регистр сведений
// 
// Параметры:
//	ВидВерсии - ALPS_ВидыВерсий - параметр указывает на вид изменений
//		которые необходимо сохранить
//	ТаблицаДляЗаписи - ТаблицаЗначений - таблица необходимая для 
//		записи данных в регистр (одна из таблиц на форме, которую
//		сохраняем)
//
Процедура СохранитьРевизию(ВидВерсии, 
								ФормаОбработки, 
								ВидЦены=Неопределено, 
								ВидНоменклатуры=Неопределено,
								БазовыеНастройки=Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДляЗаписи = ПолучитьТаблицуИзФормы(ВидВерсии, ФормаОбработки);
	
	Если ТаблицаДляЗаписи = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка выполнения сохранения версии в модуле ценообразования.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Не удалось получить таблицу для записи версии в регистр.'"));
		Возврат;
	КонецЕсли;
	
	СформироватьЗаписьВрегистрСведений(ВидВерсии, 
										ТаблицаДляЗаписи, 
										ВидЦены, 
										ВидНоменклатуры,
										БазовыеНастройки);
	
КонецПроцедуры

Процедура УстановитьВидимостьПоРолям(Элементы) Экспорт
	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("КТС_ПросмотрВерсийЦенообразования") Тогда
		Элементы.СтраницаРевизии.Доступность = Ложь;
		Элементы.СтраницаРевизии.Видимость   = Ложь;
		Элементы.ЗакладкаРевизии.Доступность = Ложь;
		Элементы.ЗакладкаРевизии.Видимость   = Ложь;
	КонецЕсли;
КонецПроцедуры
 

Функция ПолучитьТаблицуИзФормы(ВидВерсии, ФормаОбработки)
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		ТЗ_ВидыЦен 	  = ФормаОбработки["ТЗ_ВидыЦен"].Выгрузить();
		ТЗ_ВидыЦенНор = СформироватьТаблицуДляВидовЦен("ХранилищеЗначения");
		Для каждого СтрокаТаблицы ИЗ ТЗ_ВидыЦен Цикл
			НоваяСтрока = ТЗ_ВидыЦенНор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Расписание = Новый ХранилищеЗначения(СтрокаТаблицы.Расписание, Новый СжатиеДанных(9));
		КонецЦикла;
		Возврат ТЗ_ВидыЦенНор;
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Конкуренты Тогда
		Возврат ФормаОбработки["ТЗ_Конкуренты"].Выгрузить();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты Тогда
		Возврат ФормаОбработки["ТЗ_Наценки"].Выгрузить();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Фасеты Тогда
		Возврат ФормаОбработки["ТЗ_АналитикаНаценки"].Выгрузить();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты Тогда
		Возврат ФормаОбработки["ТЗ_ЦеновыеГруппы"].Выгрузить();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы Тогда
		Возврат ФормаОбработки["ТЗ_ЦеновыеГруппы"].Выгрузить();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы Тогда
		Возврат ФормаОбработки["ТЗ_АналитикаЦеновыеГруппы"].Выгрузить();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Формулы Тогда
		ТЗ_Результат = Новый ТаблицаЗначений;
		ТЗ_Результат.Колонки.Добавить("Формула", Новый ОписаниеТипов("Строка"));
		ТЗ_Результат.Колонки.Добавить("ХранилищеТипов", Новый ОписаниеТипов("ХранилищеЗначения"));
		Формула 				   = ФормаОбработки["Формула"];
		Соответствие 			   = ПолучитьХранилищеТиповШаблонов(ФормаОбработки);
		НоваяСтрока 			   = ТЗ_Результат.Добавить();
		НоваяСтрока.Формула 	   = Формула;
		НоваяСтрока.ХранилищеТипов = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(9));
		Возврат ТЗ_Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьТаблицуИзФормы()
 
 
Процедура СформироватьЗаписьВрегистрСведений(ВидВерсии, 
												ТаблицаДляЗаписи, 
												ВидЦены=Неопределено, 
												ВидНоменклатуры=Неопределено,
												БазовыеНастройки=Неопределено)
	
	// Подготовка таблицы к записи в регистр сведений
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ИдентификаторВерсии = Новый УникальныйИдентификатор;
	ТекущаяДата			= ТекущаяДата();
	Если ТаблицаДляЗаписи.Колонки.Найти("ВидВерсии") = Неопределено Тогда
		ТаблицаДляЗаписи.Колонки.Добавить("ВидВерсии", Новый ОписаниеТипов("ПеречислениеСсылка.ALPS_ВидыВерсий"));
	КонецЕсли;
	Если ТаблицаДляЗаписи.Колонки.Найти("Пользователь") = Неопределено Тогда
		ТаблицаДляЗаписи.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КонецЕсли;
	Если ТаблицаДляЗаписи.Колонки.Найти("ИдентификаторВерсии") = Неопределено Тогда
		ТаблицаДляЗаписи.Колонки.Добавить("ИдентификаторВерсии", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если ТаблицаДляЗаписи.Колонки.Найти("Период") = Неопределено Тогда
		ТаблицаДляЗаписи.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	Если ТаблицаДляЗаписи.Колонки.Найти("БазовыеНастройки") = Неопределено Тогда
		ТаблицаДляЗаписи.Колонки.Добавить("БазовыеНастройки", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ВидЦены <> Неопределено Тогда
		Если ТаблицаДляЗаписи.Колонки.Найти("ВидЦены") = Неопределено Тогда
			ТаблицаДляЗаписи.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		КонецЕсли;
	КонецЕсли;
	
	Если ВидНоменклатуры <> Неопределено Тогда
		Если ТаблицаДляЗаписи.Колонки.Найти("ВидНоменклатуры") = Неопределено Тогда
			ТаблицаДляЗаписи.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаДляЗаписи Цикл
		СтрокаТаблицы.ВидВерсии 			= ВидВерсии;    			
		СтрокаТаблицы.Пользователь 			= ТекущийПользователь;
		СтрокаТаблицы.ИдентификаторВерсии 	= ИдентификаторВерсии;
		СтрокаТаблицы.Период				= ТекущаяДата;
		СтрокаТаблицы.БазовыеНастройки		= БазовыеНастройки;
		Если ВидЦены <> Неопределено Тогда
			СтрокаТаблицы.ВидЦены = ВидЦены;
		КонецЕсли;
		Если ВидНоменклатуры <> Неопределено Тогда
			СтрокаТаблицы.ВидНоменклатуры = ВидНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДляЗаписи.Количество() = 0 И ВидНоменклатуры <> Неопределено И ВидЦены <> Неопределено Тогда		
		НоваяСтрока = ТаблицаДляЗаписи.Добавить();
		НоваяСтрока.ВидНоменклатуры 	= ВидНоменклатуры;
		НоваяСтрока.ВидЦены 			= ВидЦены;
		НоваяСтрока.ИдентификаторВерсии = ИдентификаторВерсии;
		НоваяСтрока.ВидВерсии 			= ВидВерсии;
		НоваяСтрока.БазовыеНастройки    = БазовыеНастройки;
		НоваяСтрока.Пользователь 		= ТекущийПользователь;
		НоваяСтрока.Период 				= ТекущаяДата;
	КонецЕсли;
	
	// Запись в регистр сведений
	НаборЗаписей = ПолучитьНаборЗаписейВерсии(ВидВерсии);
		
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	НаборЗаписей.Отбор.ИдентификаторВерсии.Установить(ИдентификаторВерсии);
	НаборЗаписей.Загрузить(ТаблицаДляЗаписи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьНаборЗаписейВерсии(ВидВерсии)

	Перем НаборЗаписей;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		НаборЗаписей = РегистрыСведений.ALPS_ВерсииВидыЦен.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Конкуренты Тогда
		НаборЗаписей = РегистрыСведений.ALPS_ВерсииНастройкиКонкурентов.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Фасеты Тогда
		НаборЗаписей = РегистрыСведений.ALPS_ВерсииНаценки.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы Тогда
		НаборЗаписей = РегистрыСведений.ALPS_ВерсииЦеновыеГруппы.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Формулы Тогда
		НаборЗаписей = РегистрыСведений.ALPS_ВерсииШаблоныКонкурентов.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат НаборЗаписей;

КонецФункции // ПолучитьНаборЗаписейВерсии()
 
 


// Рисуем пользовательский интерфейс пользователя для ревизий

// Процедура рисует необходимый интерфейс пользователя для версий
//
Процедура НарисоватьИнтерфейсПользователяДляВерсий(ФормаОбработки, Элементы) Экспорт
	
	СтраницаРевизии = Элементы.Найти("СтраницаРевизии");
	
	Если СтраницаРевизии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	
	СоздатьРеквизитыТаблицаВидовЦен(МассивРеквизитов);
	СоздатьРеквизитыТаблицаКонкуренты(МассивРеквизитов);
	СоздатьРеквизитыТаблицаФасеты(МассивРеквизитов);
	СоздатьРеквизитыТаблицаЦеновыеГруппы(МассивРеквизитов);
	СоздатьРеквизитыТаблицаШаблоны(МассивРеквизитов);
	
	ФормаОбработки.ИзменитьРеквизиты(МассивРеквизитов);
	
	// Добавляем линию «Предпросмотр»
	Предпросмотр 					  = Элементы.Добавить("Предпросмотр", Тип("ГруппаФормы"), СтраницаРевизии);
	Предпросмотр.Вид 				  = ВидГруппыФормы.ОбычнаяГруппа;
	Предпросмотр.Заголовок   		  = "Предпросмотр";
	
	// Добавляем группу-страницы «Предпросмотр»
	ГруппаПредпросмотр 					  = Элементы.Добавить("СтраницыПредпросмотр", Тип("ГруппаФормы"), Предпросмотр);
	ГруппаПредпросмотр.Вид 				  = ВидГруппыФормы.Страницы;
	ГруппаПредпросмотр.Заголовок   		  = "Предпросмотр";
	ГруппаПредпросмотр.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	НарисоватьТаблицуВидыЦен(Элементы, ГруппаПредпросмотр);
	НарисоватьТаблицуКонкуренты(Элементы, ГруппаПредпросмотр);
	НарисоватьТаблицуФасеты(Элементы, ГруппаПредпросмотр);
	НарисоватьТаблицуЦеновыеГруппы(Элементы, ГруппаПредпросмотр);
	НарисоватьТаблицуШаблоны(Элементы, ГруппаПредпросмотр);
		
КонецПроцедуры


Процедура СоздатьРеквизитыТаблицаВидовЦен(МассивРеквизитов)

	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ТЗПредпросмотрВидыЦен",
									Новый ОписаниеТипов("ТаблицаЗначений")));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидЦены",
									Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"),
									"ТЗПредпросмотрВидыЦен"));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"БазовыйВидЦены",
									Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"),
									"ТЗПредпросмотрВидыЦен"));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Входная",
									Новый ОписаниеТипов("Булево"),
									"ТЗПредпросмотрВидыЦен"));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ДопустимоеОтклонениеЦены",
									Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(3,1)),
									"ТЗПредпросмотрВидыЦен"));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Авто",
									Новый ОписаниеТипов("Булево"),
									"ТЗПредпросмотрВидыЦен"));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Расписание",
									Новый ОписаниеТипов("СписокЗначений"),
									"ТЗПредпросмотрВидыЦен"));
									
	// Добавляем колонку для «ТЗПредпросмотрВидыЦен»
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"EmailОповещения",
									Новый ОписаниеТипов("Строка"),
									"ТЗПредпросмотрВидыЦен"));

КонецПроцедуры

Процедура СоздатьРеквизитыТаблицаКонкуренты(МассивРеквизитов)

	// Табличка для предпросмотра
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ТЗПредпросмотрКонкуренты",
									Новый ОписаниеТипов("ТаблицаЗначений")));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидЦены",
									Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"),
									"ТЗПредпросмотрКонкуренты"));
									
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Соглашение",
									Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"),
									"ТЗПредпросмотрКонкуренты"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Конкурент",
									Новый ОписаниеТипов("Булево"),
									"ТЗПредпросмотрКонкуренты"));

КонецПроцедуры

Процедура СоздатьРеквизитыТаблицаФасеты(МассивРеквизитов)

	// Табличка для предпросмотра
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ТЗПредпросмотрФасеты",
									Новый ОписаниеТипов("ТаблицаЗначений")));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидЦены",
									Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"),
									"ТЗПредпросмотрФасеты"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидНоменклатуры",
									Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
									"ТЗПредпросмотрФасеты"));
									
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"НижняяГраница",
									Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)),
									"ТЗПредпросмотрФасеты"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВерхняяГраница",
									Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)),
									"ТЗПредпросмотрФасеты"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Значение",
									Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,2)),
									"ТЗПредпросмотрФасеты"));

									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ПредставлениеИнтервала",
									Новый ОписаниеТипов("Строка"),
									"ТЗПредпросмотрФасеты"));

КонецПроцедуры

Процедура СоздатьРеквизитыТаблицаЦеновыеГруппы(МассивРеквизитов)

	// Табличка для предпросмотра
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ТЗПредпросмотрЦеновыеГруппы",
									Новый ОписаниеТипов("ТаблицаЗначений")));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидЦены",
									Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"),
									"ТЗПредпросмотрЦеновыеГруппы"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидНоменклатуры",
									Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
									"ТЗПредпросмотрЦеновыеГруппы"));
									
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ЦеноваяГруппа",
									Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"),
									"ТЗПредпросмотрЦеновыеГруппы"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Производитель",
									Новый ОписаниеТипов("СправочникСсылка.Производители"),
									"ТЗПредпросмотрЦеновыеГруппы"));									
									
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"СниматьЦеновуюГруппу",
									Новый ОписаниеТипов("Булево"),
									"ТЗПредпросмотрЦеновыеГруппы"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ИгнорироватьВНаличии",
									Новый ОписаниеТипов("Булево"),
									"ТЗПредпросмотрЦеновыеГруппы"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ИгнорироватьАктуальные",
									Новый ОписаниеТипов("Булево"),
									"ТЗПредпросмотрЦеновыеГруппы"));

КонецПроцедуры

Процедура СоздатьРеквизитыТаблицаШаблоны(МассивРеквизитов)
	
	// Табличка для предпросмотра
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ТЗПредпросмотрШаблоны",
									Новый ОписаниеТипов("ТаблицаЗначений")));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидЦены",
									Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"),
									"ТЗПредпросмотрШаблоны"));
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"ВидНоменклатуры",
									Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
									"ТЗПредпросмотрШаблоны"));
									
									
	// Колонка таблицы
	МассивРеквизитов.Добавить(Новый РеквизитФормы(
	 								"Формула",
									Новый ОписаниеТипов("Строка"),
									"ТЗПредпросмотрШаблоны"));
	
КонецПроцедуры



Процедура НарисоватьТаблицуВидыЦен(Элементы, ГруппаОснование)

	// Добавляем группу-страница «ПредпросмотрВидыЦен» нужна для
	// загрузки результата для просмотра изменений видов цен
	ГруппаПредпросмотрВидыЦен 			 = Элементы.Добавить("ПредпросмотрВидыЦен", 
												Тип("ГруппаФормы"), 
												ГруппаОснование);
	ГруппаПредпросмотрВидыЦен.Вид		 = ВидГруппыФормы.Страница;
	ГруппаПредпросмотрВидыЦен.Заголовок  = "Виды цен";
		
	// Добавляем таблицу формы
	ТЗПредпросмотрВидыЦен = Элементы.Добавить("ТЗПредпросмотрВидыЦен", 
												Тип("ТаблицаФормы"), 
												ГруппаПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыЦен.ПутьКДанным = "ТЗПредпросмотрВидыЦен";
	ТЗПредпросмотрВидыЦен.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТЗПредпросмотрВидыЦен.КонтекстноеМеню.Доступность = Ложь;
	ТЗПредпросмотрВидыЦен.ТолькоПросмотр = Истина;
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыЦенВидЦены = Элементы.Добавить("ТЗПредпросмотрВидыЦенВидЦены", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыЦенВидЦены.ПутьКДанным = "ТЗПредпросмотрВидыЦен.ВидЦены";
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыЦенБазовыйВидЦены = Элементы.Добавить("ТЗПредпросмотрВидыЦенБазовыйВидЦены", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыЦенБазовыйВидЦены.ПутьКДанным = "ТЗПредпросмотрВидыЦен.БазовыйВидЦены";
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыЦенВходная = Элементы.Добавить("ТЗПредпросмотрВидыЦенВходная", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыЦенВходная.ПутьКДанным = "ТЗПредпросмотрВидыЦен.Входная";
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыДопустимоеОтклонениеЦены = Элементы.Добавить("ТЗПредпросмотрВидыДопустимоеОтклонениеЦены", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыДопустимоеОтклонениеЦены.ПутьКДанным = "ТЗПредпросмотрВидыЦен.ДопустимоеОтклонениеЦены";
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыАвто = Элементы.Добавить("ТЗПредпросмотрВидыАвто", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыАвто.ПутьКДанным = "ТЗПредпросмотрВидыЦен.Авто";
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыРасписание = Элементы.Добавить("ТЗПредпросмотрВидыРасписание", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыРасписание.ПутьКДанным = "ТЗПредпросмотрВидыЦен.Расписание";
	
	// Добавляем колонку таблицы
	ТЗПредпросмотрВидыEmailОповещения = Элементы.Добавить("ТЗПредпросмотрВидыEmailОповещения", 
												Тип("ПолеФормы"), 
												ТЗПредпросмотрВидыЦен);
	ТЗПредпросмотрВидыEmailОповещения.ПутьКДанным = "ТЗПредпросмотрВидыЦен.EmailОповещения";

КонецПроцедуры

Процедура НарисоватьТаблицуКонкуренты(Элементы, ГруппаОснование)
	
	// Добавляем группу-страница «ПредпросмотрВидыЦен» нужна для
	// загрузки результата для просмотра изменений видов цен
	ГруппаПредпросмотрКонкуренты 			 = Элементы.Добавить("ПредпросмотрКонкуренты", 
												Тип("ГруппаФормы"), 
												ГруппаОснование);
	ГруппаПредпросмотрКонкуренты.Вид		 = ВидГруппыФормы.Страница;
	
	ЭлементыТаблица = Элементы.Добавить("ТЗПредпросмотрКонкуренты", 
												Тип("ТаблицаФормы"), 
												ГруппаПредпросмотрКонкуренты);
												
	ЭлементыТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементыТаблица.ПутьКДанным = "ТЗПредпросмотрКонкуренты";
	ЭлементыТаблица.КонтекстноеМеню.Доступность = Ложь;
	ЭлементыТаблица.ТолькоПросмотр = Истина;
	
	ЭлементВидЦены = Элементы.Добавить("ТЗПредпросмотрКонкурентыВидЦены",
										Тип("ПолеФормы"),
										ЭлементыТаблица);
	ЭлементВидЦены.ПутьКДанным = "ТЗПредпросмотрКонкуренты.ВидЦены";
	
	
	ЭлементСоглашение = Элементы.Добавить("ТЗПредпросмотрКонкурентыСоглашение",
										Тип("ПолеФормы"),
										ЭлементыТаблица);	
	ЭлементСоглашение.ПутьКДанным = "ТЗПредпросмотрКонкуренты.Соглашение";
	
	
	ЭлементКонкурент = Элементы.Добавить("ТЗПредпросмотрКонкурентыКонкурент",
										Тип("ПолеФормы"),
										ЭлементыТаблица);				
	ЭлементКонкурент.ПутьКДанным = "ТЗПредпросмотрКонкуренты.Конкурент";
	ЭлементКонкурент.Вид = ВидПоляФормы.ПолеФлажка;

КонецПроцедуры

Процедура НарисоватьТаблицуФасеты(Элементы, ГруппаОснование)
	
	// Добавляем группу-страница «ПредпросмотрВидыЦен» нужна для
	// загрузки результата для просмотра изменений видов цен
	ГруппаПредпросмотрФасеты 			 = Элементы.Добавить("ПредпросмотрФасеты", 
												Тип("ГруппаФормы"), 
												ГруппаОснование);
	ГруппаПредпросмотрФасеты.Вид		 = ВидГруппыФормы.Страница;

	ЭлементыТаблица = Элементы.Добавить("ТЗПредпросмотрФасеты", 
												Тип("ТаблицаФормы"), 
												ГруппаПредпросмотрФасеты);
	ЭлементыТаблица.ПутьКДанным = "ТЗПредпросмотрФасеты";
	ЭлементыТаблица.КонтекстноеМеню.Доступность = Ложь;
	ЭлементыТаблица.ТолькоПросмотр = Истина;
	
	
	ЭлементВидЦены = Элементы.Добавить("ТЗПредпросмотрФасетыВидЦены",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементВидЦены.ПутьКДанным = "ТЗПредпросмотрФасеты.ВидЦены";
	
	
	ЭлементВидНоменклатуры = Элементы.Добавить("ТЗПредпросмотрФасетыВидНоменклатуры",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементВидНоменклатуры.ПутьКДанным = "ТЗПредпросмотрФасеты.ВидНоменклатуры";
	
	
	ЭлементНижняяГраница = Элементы.Добавить("ТЗПредпросмотрФасетыНижняяГраница",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементНижняяГраница.ПутьКДанным = "ТЗПредпросмотрФасеты.НижняяГраница";
	
	
	ЭлементПредставлениеИнтервала = Элементы.Добавить("ТЗПредпросмотрФасетыПредставлениеИнтервала",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементПредставлениеИнтервала.ПутьКДанным = "ТЗПредпросмотрФасеты.ПредставлениеИнтервала";
	
	
	ЭлементЗначение = Элементы.Добавить("ТЗПредпросмотрФасетыЗначение",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементЗначение.ПутьКДанным = "ТЗПредпросмотрФасеты.Значение";
	
	
КонецПроцедуры

Процедура НарисоватьТаблицуЦеновыеГруппы(Элементы, ГруппаОснование)	
	
	// Добавляем группу-страница «ПредпросмотрЦеновыеГруппы» нужна для
	// загрузки результата для просмотра изменений ценовых групп
	ГруппаПредпросмотрЦеновыеГруппы 	= Элементы.Добавить("ПредпросмотрЦеновыеГруппы", 
												Тип("ГруппаФормы"), 
												ГруппаОснование);
	ГруппаПредпросмотрЦеновыеГруппы.Вид		= ВидГруппыФормы.Страница;

	ЭлементыТаблица = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппы", 
												Тип("ТаблицаФормы"), 
												ГруппаПредпросмотрЦеновыеГруппы);
	ЭлементыТаблица.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы";
	ЭлементыТаблица.КонтекстноеМеню.Доступность = Ложь;
	ЭлементыТаблица.ТолькоПросмотр = Истина;
	
	
	ЭлементВидЦены = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыВидЦены",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементВидЦены.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.ВидЦены";
	
	
	ЭлементВидНоменклатуры = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыВидНоменклатуры",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементВидНоменклатуры.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.ВидНоменклатуры";	
	
	
	ЭлементЦеноваяГруппа = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыЦеноваяГруппа",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементЦеноваяГруппа.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.ЦеноваяГруппа";
	
	
	ЭлементПроизводитель = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыПроизводитель",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементПроизводитель.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.Производитель";
	
	
	ЭлементСниматьЦеновуюГруппу = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыСниматьЦеновуюГруппу",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементСниматьЦеновуюГруппу.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.СниматьЦеновуюГруппу";
	ЭлементСниматьЦеновуюГруппу.Вид = ВидПоляФормы.ПолеФлажка;
	
	
	ЭлементИгнорироватьВНаличии = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыИгнорироватьВНаличии",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементИгнорироватьВНаличии.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.ИгнорироватьВНаличии";
	ЭлементИгнорироватьВНаличии.Вид = ВидПоляФормы.ПолеФлажка;
	
	
	ЭлементИгнорироватьАктуальные = Элементы.Добавить("ТЗПредпросмотрЦеновыеГруппыИгнорироватьАктуальные",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементИгнорироватьАктуальные.ПутьКДанным = "ТЗПредпросмотрЦеновыеГруппы.ИгнорироватьАктуальные";
	ЭлементИгнорироватьАктуальные.Вид = ВидПоляФормы.ПолеФлажка;
									
КонецПроцедуры
 
Процедура НарисоватьТаблицуШаблоны(Элементы, ГруппаОснование)
																			
	// Добавляем группу-страница «ПредпросмотрШаблоны» нужна для
	// загрузки результата для просмотра изменений ценовых групп
	ГруппаПредпросмотрШаблоны = Элементы.Добавить("ПредпросмотрШаблоны", 
												Тип("ГруппаФормы"), 
												ГруппаОснование);
	ГруппаПредпросмотрШаблоны.Вид = ВидГруппыФормы.Страница;
	
	ЭлементыТаблица = Элементы.Добавить("ТЗПредпросмотрШаблоны", 
												Тип("ТаблицаФормы"), 
												ГруппаПредпросмотрШаблоны);
	ЭлементыТаблица.ПутьКДанным = "ТЗПредпросмотрШаблоны";
	ЭлементыТаблица.КонтекстноеМеню.Доступность = Истина;
	//ЭлементыТаблица.ТолькоПросмотр = Истина;
	
	
	ЭлементВидЦены = Элементы.Добавить("ТЗПредпросмотрШаблоныВидЦены",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементВидЦены.ПутьКДанным = "ТЗПредпросмотрШаблоны.ВидЦены";
	
	
	ЭлементидНоменклатуры = Элементы.Добавить("ТЗПредпросмотрШаблоныВидНоменклатуры",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементидНоменклатуры.ПутьКДанным = "ТЗПредпросмотрШаблоны.ВидНоменклатуры";
	
	
	ЭлементФормула = Элементы.Добавить("ТЗПредпросмотрШаблоныФормула",
									Тип("ПолеФормы"),
									ЭлементыТаблица);
	ЭлементФормула.ПутьКДанным = "ТЗПредпросмотрШаблоны.Формула";
	ЭлементФормула.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементФормула.РедактированиеТекста = Ложь;
	ЭлементФормула.КнопкаОткрытия = Истина;
	
КонецПроцедуры



Функция СформироватьТаблицуДляВидовЦен(ТипРасписания)
	ТЗ_ВидыЦенНор = Новый ТаблицаЗначений;
	ТЗ_ВидыЦенНор.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТЗ_ВидыЦенНор.Колонки.Добавить("БазовыйВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТЗ_ВидыЦенНор.Колонки.Добавить("Входная", Новый ОписаниеТипов("Булево"));
	ТЗ_ВидыЦенНор.Колонки.Добавить("ДопустимоеОтклонениеЦены", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)));
	ТЗ_ВидыЦенНор.Колонки.Добавить("Авто", Новый ОписаниеТипов("Булево"));
	ТЗ_ВидыЦенНор.Колонки.Добавить("Расписание", Новый ОписаниеТипов(ТипРасписания));
	ТЗ_ВидыЦенНор.Колонки.Добавить("EmailОповещения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Возврат ТЗ_ВидыЦенНор;
КонецФункции // СформироватьТаблицуДляВидовЦен()
 




// Переход на версию

Процедура ПерейтиНаВерсию(ФормаОбработки, ИдентификаторВерсии, ВидВерсии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = ПолучитьТекстЗапросаПереходаНаВерсию(ВидВерсии);
	
	Если ТекстЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификаторВерсии", ИдентификаторВерсии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		ВыполнитьОткатВидыЦен(ВидВерсии, ТЗРезультат);
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Конкуренты Тогда
		ВыполнитьОткатКонкуренты(ВидВерсии, ТЗРезультат);
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты
		ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Фасеты Тогда
		ВыполнитьОткатФасеты(ВидВерсии, ТЗРезультат);
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы
		ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Формулы Тогда
		ВыполнитьОткатФормулы(ВидВерсии, ТЗРезультат);
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы
		ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы Тогда
		ВыполнитьОткатЦеновойГруппы(ВидВерсии, ТЗРезультат);
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьОткатВидыЦен(ВидВерсии, ТЗРезультат)
		
	Для каждого СтрокаТаблицы Из ТЗРезультат Цикл
		НаборЗаписей = РегистрыСведений.ALPS_ВидыЦен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЦены.Установить(СтрокаТаблицы.ВидЦены);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СформироватьЗаписьВрегистрСведений(ВидВерсии, ТЗРезультат);
	
КонецПроцедуры

Процедура ВыполнитьОткатКонкуренты(ВидВерсии, ТЗРезультат)

	Для каждого СтрокаТаблицы Из ТЗРезультат Цикл
		НаборЗаписей = РегистрыСведений.ALPS_НастройкиКонкурентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЦены.Установить(СтрокаТаблицы.ВидЦены);
		НаборЗаписей.Отбор.Соглашение.Установить(СтрокаТаблицы.Соглашение);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СформироватьЗаписьВрегистрСведений(ВидВерсии, ТЗРезультат);

КонецПроцедуры

Процедура ВыполнитьОткатФасеты(ВидВерсии, ТЗРезультат)

	НаборЗаписей = РегистрыСведений.ALPS_НаценкиДляВидовНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(ТЗРезультат[0].ВидЦены);
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ТЗРезультат[0].ВидНоменклатуры);
	НаборЗаписей.Загрузить(ТЗРезультат);
	НаборЗаписей.Записать();
	
	СформироватьЗаписьВрегистрСведений(ВидВерсии, ТЗРезультат);

КонецПроцедуры
 
Процедура ВыполнитьОткатФормулы(ВидВерсии, ТЗРезультат)
	
	НаборЗаписей = РегистрыСведений.ALPS_ШаблоныКонкурентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(ТЗРезультат[0].ВидЦены);
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ТЗРезультат[0].ВидНоменклатуры);
	НаборЗаписей.Загрузить(ТЗРезультат);
	НаборЗаписей.Записать();
	
	СформироватьЗаписьВрегистрСведений(ВидВерсии, ТЗРезультат);
	
КонецПроцедуры
 
Процедура ВыполнитьОткатЦеновойГруппы(ВидВерсии, ТЗРезультат)

	Если ТЗРезультат[0].БазовыеНастройки Тогда
		Для каждого СтрокаТаблицы Из ТЗРезультат Цикл
			НаборЗаписей = РегистрыСведений.ALPS_БазовыеНастройкиЦеновыхГрупп.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЦеноваяГруппа.Установить(СтрокаТаблицы.ЦеноваяГруппа);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
			НаборЗаписей.Записать();
		КонецЦикла;
		СформироватьЗаписьВрегистрСведений(ВидВерсии, ТЗРезультат,,, Истина);
	Иначе
		Если ТЗРезультат[0].ЦеноваяГруппа.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Восстановление невозможно. Ценовая группа не может быть пустой";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.ALPS_ЦеновыеГруппы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЦены.Установить(ТЗРезультат[0].ВидЦены);
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ТЗРезультат[0].ВидНоменклатуры);
		НаборЗаписей.Загрузить(ТЗРезультат);
		НаборЗаписей.Записать();
		СформироватьЗаписьВрегистрСведений(ВидВерсии, ТЗРезультат,,, Ложь);
	КонецЕсли;

КонецПроцедуры
 

Функция ПолучитьТекстЗапросаПереходаНаВерсию(ВидВерсии)

	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		Возврат СформироватьТекстЗапросаВерсииПоВидамЦен();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Конкуренты Тогда
		Возврат СформироватьТекстЗапросаНастройкиКонкурентов("КонкурентПоВидуЦены");
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Фасеты Тогда
		Возврат СформироватьТекстЗапросаНаценки();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы Тогда
		Возврат СформироватьТекстЗапросаЦеновыеГруппы();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Формулы Тогда
		Возврат СформироватьТекстЗапросаШаблоны();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьТекстЗапросаПереходаНаВерсию()

 



 
// Загрузка версий 

Процедура ЗагрузитьВерсию(ФормаОбработки, Элементы, ИдентификаторВерсии, ВидВерсии) Экспорт
	
	ИмяТаблицы 		  = "";
	ИмяГруппыСтраница = "";
	
	ГруппаПредпросмотр = Элементы.Найти("СтраницыПредпросмотр");
	Если ГруппаПредпросмотр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		ИмяТаблицы 		  = "ТЗПредпросмотрВидыЦен";
		ИмяГруппыСтраница = "ПредпросмотрВидыЦен";
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Конкуренты Тогда
		ИмяТаблицы 		  = "ТЗПредпросмотрКонкуренты";
		ИмяГруппыСтраница = "ПредпросмотрКонкуренты";
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Фасеты Тогда
		ИмяТаблицы 		  = "ТЗПредпросмотрФасеты";
		ИмяГруппыСтраница = "ПредпросмотрФасеты";
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы Тогда
		ИмяТаблицы 		  = "ТЗПредпросмотрЦеновыеГруппы";
		ИмяГруппыСтраница = "ПредпросмотрЦеновыеГруппы";
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Формулы Тогда
		ИмяТаблицы 		  = "ТЗПредпросмотрШаблоны";
		ИмяГруппыСтраница = "ПредпросмотрШаблоны";
	КонецЕсли;
	
	ГруппаСтраница = Элементы.Найти(ИмяГруппыСтраница);
	Если ГруппаСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ГруппаПредпросмотр.ТекущаяСтраница <> ГруппаСтраница Тогда
		ГруппаПредпросмотр.ТекущаяСтраница = ГруппаСтраница;
	КонецЕсли;
	ЗагрузитьВерсиюВТаблицу(ФормаОбработки, ИмяТаблицы, ИдентификаторВерсии, ВидВерсии);
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты Тогда
		Если ФормаОбработки[ИмяТаблицы].Количество() > 0 Тогда
			СформироватьПредставлениеИнтервала(ФормаОбработки, 
												ФормаОбработки[ИмяТаблицы],
												ФормаОбработки[ИмяТаблицы][0].ВидЦены,
												Справочники.ВидыНоменклатуры.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВерсиюВТаблицу(ФормаОбработки, ИмяТаблицы, ИдентификаторВерсии, ВидВерсии)
	
	Запрос = Новый Запрос;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		Запрос.Текст = СформироватьТекстЗапросаВерсииПоВидамЦен();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.Конкуренты Тогда
		Запрос.Текст = СформироватьТекстЗапросаНастройкиКонкурентов();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФасеты
		ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Фасеты Тогда
		Запрос.Текст = СформироватьТекстЗапросаНаценки();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеЦеновыеГруппы 
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.ЦеновыеГруппы Тогда
		Запрос.Текст = СформироватьТекстЗапросаЦеновыеГруппы();
	КонецЕсли;
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ОбщиеФормулы
			ИЛИ ВидВерсии = Перечисления.ALPS_ВидыВерсий.Формулы Тогда
		Запрос.Текст = СформироватьТекстЗапросаШаблоны();
	КонецЕсли;

						  
	Запрос.УстановитьПараметр("ИдентификаторВерсии", ИдентификаторВерсии);
	
	Если ВидВерсии = Перечисления.ALPS_ВидыВерсий.ВидыЦен Тогда
		ТЗ_Результат   = Запрос.Выполнить().Выгрузить();
		ТЗ_ДляЗагрузки = СформироватьТаблицуДляВидовЦен("СписокЗначений");
		Для каждого СтрокаТаблицы ИЗ ТЗ_Результат Цикл
			НоваяСтрока = ТЗ_ДляЗагрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Расписание = СтрокаТаблицы.Расписание.Получить();
		КонецЦикла;
		ФормаОбработки[ИмяТаблицы].Загрузить(ТЗ_ДляЗагрузки);
	Иначе
		ФормаОбработки[ИмяТаблицы].Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстЗапросаВерсииПоВидамЦен()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидЦены КАК ВидЦены,
	               |	БазовыйВидЦены КАК БазовыйВидЦены,
	               |	Входная КАК Входная,
	               |	ДопустимоеОтклонениеЦены КАК ДопустимоеОтклонениеЦены,
	               |	Авто КАК Авто,
	               |	Расписание КАК Расписание,
	               |	EmailОповещения КАК EmailОповещения
	               |ИЗ
	               |	РегистрСведений.ALPS_ВерсииВидыЦен
	               |ГДЕ
	               |	ИдентификаторВерсии = &ИдентификаторВерсии";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаВерсииПоВидамЦен()

Функция СформироватьТекстЗапросаНастройкиКонкурентов(ПсевдонимПоляКонкурент="Конкурент")

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидЦены КАК ВидЦены,
	               |	Соглашение КАК Соглашение,
	               |	Конкурент КАК %Конкурент%
	               |ИЗ
	               |	РегистрСведений.ALPS_ВерсииНастройкиКонкурентов
				   |ГДЕ
	               |	ИдентификаторВерсии = &ИдентификаторВерсии";
				   
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Конкурент%", ПсевдонимПоляКонкурент);
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаНастройкиКонкурентов()
 
Функция СформироватьТекстЗапросаНаценки()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидЦены КАК ВидЦены,
				   |	ВидНоменклатуры КАК ВидНоменклатуры,
	               |	НижняяГраница КАК НижняяГраница,
	               |	ВерхняяГраница КАК ВерхняяГраница,
	               |	Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ALPS_ВерсииНаценки
	               |ГДЕ
	               |	ИдентификаторВерсии = &ИдентификаторВерсии";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаНаценки()
 
Функция СформироватьТекстЗапросаЦеновыеГруппы()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидЦены КАК ВидЦены,
				   |	ВидНоменклатуры КАК ВидНоменклатуры,
				   |	Производитель КАК Производитель,
	               |	ЦеноваяГруппа КАК ЦеноваяГруппа,
				   |	Значение КАК Значение,
	               |	СниматьЦеновуюГруппу КАК СниматьЦеновуюГруппу,
	               |	ИгнорироватьВНаличии КАК ИгнорироватьВНаличии,
	               |	ИгнорироватьАктуальные КАК ИгнорироватьАктуальные,
				   |	БазовыеНастройки КАК БазовыеНастройки
	               |ИЗ
	               |	РегистрСведений.ALPS_ВерсииЦеновыеГруппы
	               |ГДЕ
	               |	ИдентификаторВерсии = &ИдентификаторВерсии";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаЦеновыеГруппы()

Функция СформироватьТекстЗапросаШаблоны()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВидЦены КАК ВидЦены,
				   |	ВидНоменклатуры КАК ВидНоменклатуры,
	               |	Формула КАК Формула,
				   |	ХранилищеТипов КАК ХранилищеТипов
	               |ИЗ
	               |	РегистрСведений.ALPS_ВерсииШаблоныКонкурентов
	               |ГДЕ
	               |	ИдентификаторВерсии = &ИдентификаторВерсии";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаШаблоны()
 





Функция ПолучитьХранилищеТиповШаблонов(ФормаОбработки) Экспорт

	Соответствие = Новый Соответствие;
	
	Операнды = ФормаОбработки["Операнды"];
	Формула  = ФормаОбработки["Формула"];
	
	Для каждого ГруппаДерева Из Операнды.ПолучитьЭлементы() Цикл
		Для каждого ЭлементДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
			Если Найти(Формула, ЭлементДерева.Идентификатор) Тогда 
				Соответствие[ЭлементДерева.Идентификатор] = ЭлементДерева.Ссылка;
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла;
	
	Возврат Соответствие;

КонецФункции // ПолучитьХранилищеТиповШаблонов()
 


// КОНЕЦ ВЕРСИЙ
///////////////////////////////////////////////////////////////////////////////////////////








///////////////////////////////////////////////////////////////////////////////////////////
// 											ДВИЖОК
///////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////
// 								1. ОБРАБОТЧИКИ ТАЛИЦЫ ТЗ_ВидыЦен
///////////////////////////////////////////////////////////////////////////////////////////


// Загрузка видов цен
//	Параметры
//		<мФорма> - Форма вызова обработчика	
//
Процедура ЗагрузитьВидыЦен(мФорма) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ВидыЦен = мФорма["ТЗ_ВидыЦен"];
	ТЗ_ВидыЦен.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыЦен.Ссылка
	                      |ПОМЕСТИТЬ КешВидыЦен
	                      |ИЗ
	                      |	Справочник.ВидыЦен КАК ВидыЦен
	                      |ГДЕ
	                      |	(ВидыЦен.ИспользоватьПриПродаже
	                      |			ИЛИ ВидыЦен.ИспользоватьПриПередачеМеждуОрганизациями)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешВидыЦен.Ссылка 																				КАК ВидЦены,
	                      |	ЕСТЬNULL(Ценообразование_ВидыЦен.БазовыйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) 	КАК БазовыйВидЦены,
	                      |	ЕСТЬNULL(Ценообразование_ВидыЦен.Входная, ЛОЖЬ) 												КАК Входная,
	                      |	ЕСТЬNULL(Ценообразование_ВидыЦен.ДопустимоеОтклонениеЦены, ЛОЖЬ) 								КАК ДопустимоеОтклонениеЦены,
	                      |		ЕСТЬNULL(Ценообразование_ВидыЦен.Авто, ЛОЖЬ) 													КАК Авто,
	                      |		ЕСТЬNULL(Ценообразование_ВидыЦен.Расписание, НЕОПРЕДЕЛЕНО) 										КАК Расписание,
	                      |		ЕСТЬNULL(Ценообразование_ВидыЦен.EmailОповещения, """") 										КАК EmailОповещения
	                      |ИЗ
	                      |		КешВидыЦен КАК КешВидыЦен
	                      |		
						  |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_ВидыЦен КАК Ценообразование_ВидыЦен
	                      |ПО КешВидыЦен.Ссылка = Ценообразование_ВидыЦен.ВидЦены
	                      |;");			  					  
	ВыборкаВидЦены = Запрос.Выполнить().Выбрать();	
	Пока ВыборкаВидЦены.Следующий() Цикл
		НоваяСтрока = ТЗ_ВидыЦен.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВидЦены);
		Если ТипЗнч(ВыборкаВидЦены.Расписание) = Тип("ХранилищеЗначения") Тогда
			НоваяСтрока.Расписание = ВыборкаВидЦены.Расписание.Получить();
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ЗагрузитьВидыЦен()



// Устанавливаем параметр для вида цены в регистре Ценообразование_ВидыЦен
//
// Параметры
//
//	<мФорма> 			- Форма вызова обработчика
//
//  <ВидЦены>  			- <Тип(СправочникСсылка.ВидыЦен)> Вид цены, для которого изменяем расписание
//                 
//  <Значение>  		- <Тип(Произвольный)> Новое значение которое нужно установить для вида цены
//
//  <ИмяПоляЗначения>  	- <Тип(Строка)> Имя поля, для которого устанавливаем новое значение
//                 
//
Процедура ЗаписатьНастройкиВидовЦен(мФорма, Параметры, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = ПроверитьТаблицуВидовЦен(мФорма["ТЗ_ВидыЦен"]);
	
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Запись не выполнена. Причина: запись базового вида цены приведет к рекурсивному пересчету цен.";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ALPS_ВидыЦен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(Параметры.ВидЦены);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Параметры);
	НаборЗаписей.Записать();
	
	Если Параметры.Входная Тогда
		НаборЗаписей = РегистрыСведений.ALPS_НастройкиКонкурентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЦены.Установить(Параметры.ВидЦены);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	ЗагрузитьВидыЦен(мФорма);
	
КонецПроцедуры // УстановитьРасписаниеДляВидыЦены()

// Подготавливаем расписание для записи в регистр
//
// Параметры
//  <Расписание>  - <Тип(РасписаниеРегламентногоЗадания)> Расписание, которое помещаем в регистр
//
Функция ПоместитьРасписаниеВХранилище(знач Расписание)

	СписокРасписаний = Новый СписокЗначений();
	СписокРасписаний.Добавить(Расписание);
	
	Возврат Новый ХранилищеЗначения(СписокРасписаний);

КонецФункции // ПоместитьРасписаниеВХранилище()

Функция ПроверитьТаблицуВидовЦен(ТЗ_ВидыЦен)

	Результат = Ложь;
	
	Для каждого СтрокаТаблицы Из ТЗ_ВидыЦен Цикл
		Если Не СтрокаТаблицы.БазовыйВидЦены.Пустая() Тогда
			Если СтрокаТаблицы.БазовыйВидЦены = СтрокаТаблицы.ВидЦены Тогда
				Возврат Истина;
			КонецЕсли;
			Результат = ВыполнитьПроверкуРекурсивно(ТЗ_ВидыЦен, СтрокаТаблицы.БазовыйВидЦены, ТЗ_ВидыЦен.НайтиСтроки(Новый Структура("БазовыйВидЦены", СтрокаТаблицы.ВидЦены)));
			Если Результат Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции // ПроверитьТаблицуВидовЦен()

Функция ВыполнитьПроверкуРекурсивно(ТЗ_ВидыЦен, БазовыйВидЦены, МассивСтрок)

	Если МассивСтрок.Количество() = 0 Тогда Возврат Ложь; КонецЕсли;
	
	Для каждого СтрокаТаблицы ИЗ МассивСтрок Цикл
		Если БазовыйВидЦены = СтрокаТаблицы.ВидЦены Тогда
			Возврат Истина;
		Иначе
			Если НЕ СтрокаТаблицы.БазовыйВидЦены.Пустая() Тогда
				Возврат ВыполнитьПроверкуРекурсивно(ТЗ_ВидыЦен, БазовыйВидЦены, ТЗ_ВидыЦен.НайтиСтроки(Новый Структура("БазовыйВидЦены", СтрокаТаблицы.ВидЦены)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ВыполнитьПроверкуРекурсивно()
 


 








///////////////////////////////////////////////////////////////////////////////////////////
// 							2. ОБРАБОТЧИКИ ТАЛИЦЫ ТЗ_СписокEmailРассылки
///////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузитьEmailОповещения(мФорма, ВидЦены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Регламент_EmailОповещение.Склад,
	                      |	Регламент_EmailОповещение.Кому,
	                      |	Регламент_EmailОповещение.Профиль,
	                      |	Регламент_EmailОповещение.ВидЦены
	                      |ИЗ
	                      |	РегистрСведений.Регламент_EmailОповещение КАК Регламент_EmailОповещение
	                      |ГДЕ
	                      |	Регламент_EmailОповещение.ВидЦены = &ВидЦены
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Регламент_EmailОповещение.Склад.Наименование");
						  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	мФорма["ТЗ_СписокEmailРассылки"].Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры
  
Процедура ДобавитьEmailОповещание(ВидЦены, ТаблицаЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.Регламент_EmailОповещение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(ВидЦены);
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	НаборЗаписей.Записать();
		
КонецПроцедуры
 






///////////////////////////////////////////////////////////////////////////////////////////
// 							3. ОБРАБОТЧИКИ ТАЛИЦЫ ТЗ_Наценки
///////////////////////////////////////////////////////////////////////////////////////////

// Загрузка наценок в ТЗ_Наценки
//
Процедура ЗагрузитьНаценки(мФорма, ИмяТаблицы, ВидЦены, ВидНоменклатуры=Неопределено, Входная=Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидНоменклатуры=Неопределено Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ТЗ_Наценки = мФорма[ИмяТаблицы];
	ТЗ_Наценки.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НаценкиДляВидовНоменклатуры.НижняяГраница КАК НижняяГраница,
	                      |	НаценкиДляВидовНоменклатуры.ВерхняяГраница,
	                      |	НаценкиДляВидовНоменклатуры.Значение,
	                      |	НаценкиДляВидовНоменклатуры.ВидЦены,
	                      |	НаценкиДляВидовНоменклатуры.ВидНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.ALPS_НаценкиДляВидовНоменклатуры КАК НаценкиДляВидовНоменклатуры
	                      |ГДЕ
	                      |	НаценкиДляВидовНоменклатуры.ВидЦены = &ВидЦены
	                      |	И НаценкиДляВидовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НижняяГраница");
						  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТЗ_Наценки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СформироватьПредставлениеИнтервала(мФорма, ТЗ_Наценки, ВидЦены, ВидНоменклатуры); 

	Если мФорма.ИмяФормы = "ВнешняяОбработка.НастройкиЦенообразования.Форма.Форма" Тогда
		ЗагрузитьЦеновыеГруппы(мФорма, "ТЗ_ЦеновыеГруппы", ВидЦены);
		ЗагрузитьКонкурентов(мФорма, ВидЦены, Входная);
		ЗагрузитьФормулу(мФорма, "Подвал_Настройки_Шаблон", ВидЦены, Справочники.ВидыНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

// Добавляем новое значение к фасету и сортируем.
//
Процедура ДобавитьУдалитьЗначениеКФасету(мФорма, ИмяТаблицы, ВидЦены, ВидНоменклатуры=Неопределено) Экспорт	
	
	Если ВидНоменклатуры=Неопределено Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли; 
	
	ТЗ_Наценки = мФорма[ИмяТаблицы];
	ТЗ_Наценки.Сортировать("НижняяГраница");
	
	СформироватьПредставлениеИнтервала(мФорма, ТЗ_Наценки, ВидЦены, ВидНоменклатуры);
КонецПроцедуры

// Формирование представление интервала в формате "от х до у"
//
Процедура СформироватьПредставлениеИнтервала(мФорма, ТаблицаНаценок, ВидЦены, ВидНоменклатуры)
	ВалютаУпрУчета  = Константы.ВалютаУправленческогоУчета.Получить().Наименование;
	КоличествоСтрок = ТаблицаНаценок.Количество()-1;
	
	Попытка
		мФорма["Наценки_ОшибкаВНаценках"] = Ложь;
	Исключение
	КонецПопытки;
	
	Для Индекс=0 По КоличествоСтрок Цикл
		ТаблицаНаценок[Индекс].ВидЦены = ВидЦены;
		ТаблицаНаценок[Индекс].ВидНоменклатуры = ВидНоменклатуры;
		Если Индекс=КоличествоСтрок Тогда
			ТаблицаНаценок[Индекс].ПредставлениеИнтервала = "От " + ТаблицаНаценок[Индекс].НижняяГраница + " " + ВалютаУпрУчета;
			ТаблицаНаценок[Индекс].ВерхняяГраница 		  = 0;
		Иначе
			ТаблицаНаценок[Индекс].ПредставлениеИнтервала = "От " + ТаблицаНаценок[Индекс].НижняяГраница + " до " + ТаблицаНаценок[Индекс+1].НижняяГраница + " " + ВалютаУпрУчета;
			ТаблицаНаценок[Индекс].ВерхняяГраница 		  = ТаблицаНаценок[Индекс+1].НижняяГраница;
		КонецЕсли;
		Для ИндексВложенногоЦикла = 0 По КоличествоСтрок Цикл
			Если ТаблицаНаценок[Индекс].НижняяГраница = ТаблицаНаценок[ИндексВложенногоЦикла].НижняяГраница И Индекс <> ИндексВложенногоЦикла Тогда
				ТаблицаНаценок[Индекс].ПредставлениеИнтервала = "ОШИБКА: такая нижняя граница уже есть!";
				Попытка
					мФорма["Наценки_ОшибкаВНаценках"] = Истина;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;		
КонецПроцедуры

// Запись наценок в регистр
Процедура ЗаписатьНаценки(мФорма, ИмяТаблицы, ВидЦены, ВидНоменклатуры=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидНоменклатуры=Неопределено Тогда
	    ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();			
	КонецЕсли; 
	
	Если ВидНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Наценки_ОшибкаВНаценках = Ложь;
	
	Попытка
	    Наценки_ОшибкаВНаценках = мФорма["Наценки_ОшибкаВНаценках"];
	Исключение
	КонецПопытки;
	
	Если Наценки_ОшибкаВНаценках Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В таблице наценок есть ошибки. Запись невозможна.";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ТЗ_Наценки = мФорма[ИмяТаблицы].Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ALPS_НаценкиДляВидовНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(ВидЦены);
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
	НаборЗаписей.Загрузить(ТЗ_Наценки);
	
	НаборЗаписей.Записать();
	
	Попытка
		мФорма["Наценки_НаценкиИзменены"] = Ложь;
	Исключение
	КонецПопытки;
							  
КонецПроцедуры







///////////////////////////////////////////////////////////////////////////////////////////
// 							4. ОБРАБОТЧИКИ ТАЛИЦЫ ТЗ_ЦеновыеГруппы
///////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузитьЦеновыеГруппы(мФорма, ИмяТаблицы, ВидЦены, ВидНоменклатуры=Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидНоменклатуры=Неопределено Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
      	|ВЫБРАТЬ
		|	ВидЦены,
      	|	ВидНоменклатуры,
		|	Производитель,
      	|	ALPS.ЦеноваяГруппа,
		|	Базовые.СниматьЦеновуюГруппу,
      	|	ИгнорироватьВНаличии,
      	|	ИгнорироватьАктуальные
      	|ИЗ
      	|	РегистрСведений.ALPS_ЦеновыеГруппы КАК ALPS
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_БазовыеНастройкиЦеновыхГрупп КАК Базовые
		|ПО	Базовые.ЦеноваяГруппа = ALPS.ЦеноваяГруппа
		|
      	|ГДЕ
      	|	ВидЦены 		= &ВидЦены
      	|И 	ВидНоменклатуры = &ВидНоменклатуры
      	|";				  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);						  
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	мФорма[ИмяТаблицы].Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры
 
Процедура ЗаписатьЦеновыеГруппы(мФорма, ИмяТаблицы, ВидЦены, БазовыеНастройки, ВидНоменклатуры=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидНоменклатуры=Неопределено Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ_ЦеновыеГруппы = мФорма[ИмяТаблицы].Выгрузить();
	
	Если БазовыеНастройки Тогда		
		НаборЗаписей = РегистрыСведений.ALPS_БазовыеНастройкиЦеновыхГрупп.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТЗ_ЦеновыеГруппы);
	
		НаборЗаписей.Записать();
	Иначе
		НаборЗаписей = РегистрыСведений.ALPS_ЦеновыеГруппы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЦены.Установить(ВидЦены);
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
		НаборЗаписей.Загрузить(ТЗ_ЦеновыеГруппы);
		
		НаборЗаписей.Записать();
	КонецЕсли;
    	
КонецПроцедуры 




///////////////////////////////////////////////////////////////////////////////////////////
// 							5. ОБРАБОТЧИКИ ТАЛИЦЫ ТЗ_Конкуренты
///////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузитьКонкурентов(мформа, ВидЦены, Входная=Ложь)
	
	мФорма["ТЗ_Конкуренты"].Очистить();
	Если Входная Тогда Возврат; КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Библиотека = GetLibrary("Библиотека внешних обработок");
		ТаблицаПрайсов = Библиотека.ПолучитьТаблицуПрайсов(Настройки);
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	ТабПрайсов.Соглашение
			|ПОМЕСТИТЬ ТабПрайсов
			|ИЗ
			|	&ТабПрайсов КАК ТабПрайсов
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
          	|	ТабПрайсов.Соглашение 	КАК Соглашение
          	|ПОМЕСТИТЬ КешКонкуренты
          	|ИЗ
          	|	Справочник.Партнеры КАК Партнеры
			|
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПрайсов КАК ТабПрайсов 
			|ПО	 ТабПрайсов.Соглашение.Партнер = Партнеры.Ссылка 
			|
          	|ГДЕ
          	|НЕ Партнеры.ПометкаУдаления
          	|И 	Партнеры.Конкурент
          	|;
          	////////////////////////////////////////////////////////////////////////////////
			//
          	|ВЫБРАТЬ
          	|	КешКонкуренты.Соглашение,
          	|	ЕСТЬNULL(ALPS_НастройкиКонкурентов.КонкурентПоВидуЦены, ЛОЖЬ) КАК Конкурент
          	|ИЗ
          	|	КешКонкуренты КАК КешКонкуренты
          	|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_НастройкиКонкурентов КАК ALPS_НастройкиКонкурентов
          	|ПО ALPS_НастройкиКонкурентов.ВидЦены = &ВидЦены
          	|И 	КешКонкуренты.Соглашение = ALPS_НастройкиКонкурентов.Соглашение
			|";
		Запрос.УстановитьПараметр("ТабПрайсов", ТаблицаПрайсов);					  
		Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
		
		мФорма["ТЗ_Конкуренты"].Загрузить(Запрос.Выполнить().Выгрузить());
		Запрос.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ЗаписатьКонкурента(ВидЦены, Соглашение, Записать) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ALPS_НастройкиКонкурентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(ВидЦены);
	НаборЗаписей.Отбор.Соглашение.Установить(Соглашение);
	
	Если Записать Тогда
		Запись 						= НаборЗаписей.Добавить();
		Запись.ВидЦены 				= ВидЦены;
		Запись.Соглашение 			= Соглашение;
		Запись.КонкурентПоВидуЦены 	= Истина;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
 





///////////////////////////////////////////////////////////////////////////////////////////
// 							6. ЗАГРУЗКА ЗАГОЛОВКА ФОРМЫ
///////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузитьТекущийКурс(мФорма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КурсыВалютСрезПоследних.Курс КАК Курс
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних(
	                      |			,
	                      |			Валюта В
	                      |				(ВЫБРАТЬ
	                      |					ВалютаУпрУчета.Значение
	                      |				ИЗ
	                      |					Константа.ВалютаУправленческогоУчета КАК ВалютаУпрУчета)) КАК КурсыВалютСрезПоследних");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	мФорма["Заголовок_Курс"] = ?(Выборка.Следующий(), Выборка.Курс, 0);
	
КонецПроцедуры

Процедура ПолучитьСписокВидовЦенДляЗаголовока(СписокЦен) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыЦен.Ссылка КАК ВидЦены
	                      |ПОМЕСТИТЬ КешВидыЦен
	                      |ИЗ
	                      |	Справочник.ВидыЦен КАК ВидыЦен
	                      |ГДЕ
	                      |	НЕ ВидыЦен.ПометкаУдаления
	                      |	И (ВидыЦен.ИспользоватьПриПродаже
	                      |			ИЛИ ВидыЦен.ИспользоватьПриПередачеМеждуОрганизациями)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешВидыЦен.ВидЦены,
	                      |	ЕСТЬNULL(ALPS_ВидыЦен.БазовыйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК БазовыйВидЦены
	                      |ИЗ
	                      |	КешВидыЦен КАК КешВидыЦен
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_ВидыЦен КАК ALPS_ВидыЦен
	                      |		ПО КешВидыЦен.ВидЦены = ALPS_ВидыЦен.ВидЦены");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокЦен.Вставить(Выборка.ВидЦены, ?(Выборка.БазовыйВидЦены=Справочники.ВидыЦен.ПустаяСсылка(), Строка(Выборка.ВидЦены), Строка(Выборка.ВидЦены)+" (базовая цена: "+Строка(Выборка.БазовыйВидЦены)+")"));
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаголовокВидЦеныПриИзменении(мФорма) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	мФорма["Заголовок_БазоваяЦена"] = Справочники.ВидыЦен.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ALPS_ВидыЦен.БазовыйВидЦены
	                      |ИЗ
	                      |	РегистрСведений.ALPS_ВидыЦен КАК ALPS_ВидыЦен
	                      |ГДЕ
	                      |	ALPS_ВидыЦен.ВидЦены = &ВидЦены");
						  
	Запрос.УстановитьПараметр("ВидЦены", мФорма["Заголовок_ВидЦены"]);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		мФорма["Заголовок_БазоваяЦена"]	= Выборка.БазовыйВидЦены;
	КонецЕсли;

КонецПроцедуры
                                                  
 




///////////////////////////////////////////////////////////////////////////////////////////
// 							7. Список_ВидыНоменклатуры
///////////////////////////////////////////////////////////////////////////////////////////

Процедура ОбработкаАктивизацииСтрокиСписок_ВидыНоменклатуры(мФорма, ВидНоменклатурыСсылка) Экспорт

	Элементы = мФорма.Элементы;
	
	Если ВидНоменклатурыСсылка=Неопределено ИЛИ ВидНоменклатурыСсылка.ЭтоГруппа Тогда
	    //ОчиститьТаблицыАналитики(мФорма);
		Возврат;
	КонецЕсли; 
	
	Если мФорма["Заголовок_ВидЦены"].Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//Элементы.ТЗ_АналитикаНаценки.Доступность 		= Истина;
	//Элементы.ТЗ_АналитикаЦеновыеГруппы.Доступность 	= Истина;
	//Элементы.Аналитика_ЗаписатьНаценки.Доступность 	= Истина;
	//Элементы.Аналитика_ЗагрузитьШаблон.Доступность 	= Истина;
	
	ЗагрузитьНаценки(мФорма, "ТЗ_АналитикаНаценки", мФорма["Заголовок_ВидЦены"], ВидНоменклатурыСсылка);
	ЗагрузитьЦеновыеГруппы(мФорма, "ТЗ_АналитикаЦеновыеГруппы", мФорма["Заголовок_ВидЦены"], ВидНоменклатурыСсылка);
	ЗагрузитьФормулу(мФорма, "Подвал_Аналитика_Шаблон", мФорма["Заголовок_ВидЦены"], ВидНоменклатурыСсылка);
              
КонецПроцедуры
 
Процедура ОчиститьТаблицыАналитики(мФорма)

	Элементы = мФорма.Элементы;
	
	мФорма["ТЗ_АналитикаНаценки"].Очистить();
	мФорма["ТЗ_АналитикаЦеновыеГруппы"].Очистить();
	
	//Элементы.ТЗ_АналитикаНаценки.Доступность 		= Ложь;
	//Элементы.ТЗ_АналитикаЦеновыеГруппы.Доступность 	= Ложь;
	//Элементы.Аналитика_ЗаписатьНаценки.Доступность 	= Ложь;
	//Элементы.Аналитика_ЗагрузитьШаблон.Доступность 	= Ложь;

КонецПроцедуры
 




///////////////////////////////////////////////////////////////////////////////////////////
// 							8. Конструктуор формул
///////////////////////////////////////////////////////////////////////////////////////////

Функция ПостроитьДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Разделители");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " + ""/"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "\", " + ""\"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "|", " + ""|"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "_", " + ""_"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ",", " + "", "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ".", " + "". "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Space", " + "" "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, """", " + """""""" + ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Логические операторы и константы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "AND", " AND ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "OR", " OR ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "NOT", " NOT ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TRUE", " TRUE ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "FALSE", " FALSE ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Числовые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Max", "Max(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Min", "Min(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Round", "Round(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Int", "Int()", 1);
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Строковые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Upper", "Upper()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Lower", "Lower()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Left", "Left()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Right", "Right()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimL", "TrimL()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimAll", "TrimAll()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimR", "TrimR()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Title", "Title()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "StrReplace", "StrReplace(,,)");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Прочие функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Условие", "?(,,)", 3);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Предопределенное значение", "ПредопределенноеЗначение()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Значение заполнено", "ЗначениеЗаполнено()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Формат", "Формат(,)");
	
	Возврат Дерево;
	
КонецФункции // ПостроитьДеревоОператоров()

Функция ПолучитьПустоеДеревоОператоров()
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Идентификатор");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	
	Возврат Дерево;
	
КонецФункции

Функция ДобавитьГруппуОператоров(Дерево, Наименование)
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Идентификатор 	= Наименование;
	НоваяГруппа.ЭтоГруппа 		= Истина;
	
	Возврат НоваяГруппа;
	
КонецФункции

Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0)
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Идентификатор 	= Наименование;
	НоваяСтрока.Оператор 		= ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг 			= Сдвиг;
	НоваяСтрока.ЭтоГруппа 		= Ложь;
	
	Возврат НоваяСтрока;
	
КонецФункции



Функция ПостроитьДеревоОперандов(ВидНоменклатуры, ВидЦены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Дерево = ПолучитьДеревоОперандов();
	
	ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "ALPS_БазоваяЦена", 	Неопределено, Ложь));
	ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "ALPS_ФасетЦена", 	Неопределено, Ложь));
	ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "ALPS_ВНаличии", 	Неопределено, Ложь));
	ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Производитель", 	Неопределено, Ложь));
	
	НодаКонкуренты = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Конкуренты", Неопределено, Истина));
	ЗагрузитьКонкурентовВДерево(НодаКонкуренты, ВидЦены);
	
	НодаСклады = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Склады", Неопределено, Истина));
	ЗагрузитьСкладыВДерево(НодаСклады);
	
	НодаВидыЦен = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "ВидыЦен", Неопределено, Истина));
	ЗагрузитьВидыЦенВДерево(НодаВидыЦен);
	
	НодаВалюты = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Валюты", Неопределено, Истина));
	ЗагрузитьВалютыВДерево(НодаВалюты);
	
	//НодаРеквизиты = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Реквизиты", Неопределено, Истина));
	//ЗагрузитьРеквизитыВДерево(НодаРеквизиты);
	
	НодаДопРеквизиты = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Дополнительные реквизиты номенклатуры", Неопределено, Истина));
	ЗагрузитьДополнительныеРеквизитыНоменклатуры(НодаДопРеквизиты);
	
	НодаДопСвойства = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Свойства видов номенклатуры", Неопределено, Истина));
	ЗагрузитьСвойстваВидаНоменклатуры(НодаДопСвойства, ВидНоменклатуры);
		
	Возврат Дерево;
	
КонецФункции // ПостроитьДеревоОперандов()

Функция ПолучитьДеревоОперандов()
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	Дерево.Колонки.Добавить("Ссылка", 		 Новый ОписаниеТипов("СправочникСсылка.Склады, СправочникСсылка.СоглашенияСПоставщиками, СправочникСсылка.ВидыЦен, СправочникСсылка.Валюты, ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Дерево.Колонки.Добавить("ЭтоГруппа", 	 Новый ОписаниеТипов("Булево"));
	Возврат Дерево;
КонецФункции // ПолучитьДеревоОперандов()

Функция ДобавитьЭлементВДерево(Дерево, Параметры)
	НоваяНода = Дерево.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНода, Параметры);
	Возврат НоваяНода;
КонецФункции
 
 
Процедура ЗагрузитьКонкурентовВДерево(Дерево, ВидЦены)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |		ALPS_НастройкиКонкурентов.Соглашение,
	                      |		ALPS_НастройкиКонкурентов.Соглашение.Наименование КАК Наименование
	                      |ИЗ
	                      |		РегистрСведений.ALPS_НастройкиКонкурентов КАК ALPS_НастройкиКонкурентов
	                      |
						  |ГДЕ
						  |		ВидЦены = &ВидЦены
						  |И	КонкурентПоВидуЦены
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.Соглашение, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(Дерево);
						  
КонецПроцедуры

Процедура ЗагрузитьСкладыВДерево(Дерево)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Склады.Ссылка КАК Склад,
	                      |	ПРЕДСТАВЛЕНИЕ(Склады.Ссылка) КАК Наименование
	                      |ИЗ
	                      |	Справочник.Склады КАК Склады");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.Склад, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(Дерево);
						  
КонецПроцедуры

//Добавляет в дерево значений в строку "ВидыЦен" элементы справочника ВидыЦен
//
//Параметры:
//	СтрокаДереваЗначений - СтрокаДереваЗначений - Строка дерева значений "ВидыЦен"	
//
Процедура ЗагрузитьВидыЦенВДерево(СтрокаДереваЗначений)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
       	|	ПРЕДСТАВЛЕНИЕ(ВидыЦен.Ссылка) КАК Наименование,
       	|	ВидыЦен.Ссылка КАК ВидЦены
       	|ИЗ
       	|	Справочник.ВидыЦен КАК ВидыЦен
       	|ГДЕ
       	|	ВидыЦен.ПометкаУдаления = ЛОЖЬ
       	|И 	ВидыЦен.ИспользоватьПриПродаже = ИСТИНА";					  
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(СтрокаДереваЗначений, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.ВидЦены, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(СтрокаДереваЗначений);
						  
КонецПроцедуры // ЗагрузитьВидыЦенВДерево()

//Добавляет в дерево значений в строку "Валюты" элементы справочника Валюты
//
//Параметры:
//	СтрокаДереваЗначений - СтрокаДереваЗначений - Строка дерева значений "Валюты"	
//
Процедура ЗагрузитьВалютыВДерево(СтрокаДереваЗначений)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
       	|	ПРЕДСТАВЛЕНИЕ(Валюты.Ссылка)КАК Наименование,
       	|	Валюты.Ссылка 				КАК Валюта
       	|ИЗ
       	|	Справочник.Валюты КАК Валюты
       	|ГДЕ
       	|	Валюты.ПометкаУдаления = ЛОЖЬ
		|";					  
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(СтрокаДереваЗначений, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.Валюта, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(СтрокаДереваЗначений);
						  
КонецПроцедуры // ЗагрузитьВалютыВДерево()



//Процедура ЗагрузитьРеквизитыВДерево(Дерево)
//		
//	ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Производитель", Неопределено, Ложь));	
//	ПроверитьДеревоНаКлоны(Дерево);
//						  
//КонецПроцедуры

Процедура ЗагрузитьДополнительныеРеквизитыНоменклатуры(Дерево)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДопРеквизиты.Свойство,
	                      |	ДопРеквизиты.Свойство.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
	                      |ГДЕ
	                      |	ДопРеквизиты.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.Свойство, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(Дерево);
	
КонецПроцедуры

Процедура ЗагрузитьСвойстваВидаНоменклатуры(Дерево, ВидНоменклатуры)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДопРеквизитыСведения.Свойство КАК Свойство,
	                      |	ДопРеквизитыСведения.Свойство.Представление КАК ПредставлениеРеквизита,
	                      |	ЛОЖЬ КАК ОбщееСвойство,
	                      |	ДопРеквизитыСведения.НомерСтроки КАК НомерСтроки
	                      |ПОМЕСТИТЬ ВТ_ДопРеквизитыСведения
	                      |ИЗ
	                      |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДопРеквизитыСведения
	                      |ГДЕ
	                      |	ДопРеквизитыСведения.Ссылка = &НаборСвойств
	                      |	И НЕ ДопРеквизитыСведения.Ссылка.ПометкаУдаления
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ОбщиеДопРеквизитыСведения.Свойство,
	                      |	ОбщиеДопРеквизитыСведения.Свойство.Представление,
	                      |	ИСТИНА,
	                      |	ОбщиеДопРеквизитыСведения.НомерСтроки
	                      |ИЗ
	                      |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ОбщиеДопРеквизитыСведения
	                      |ГДЕ
	                      |	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств
	                      |	И НЕ ОбщиеДопРеквизитыСведения.Ссылка.ПометкаУдаления
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДопРеквизитыСведения.Свойство КАК Свойство,
	                      |	ВТ_ДопРеквизитыСведения.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	                      |	ВТ_ДопРеквизитыСведения.ОбщееСвойство КАК ОбщееСвойство,
	                      |	ВТ_ДопРеквизитыСведения.НомерСтроки КАК НомерСтроки
	                      |ИЗ
	                      |	ВТ_ДопРеквизитыСведения КАК ВТ_ДопРеквизитыСведения
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ОбщееСвойство УБЫВ,
	                      |	ВТ_ДопРеквизитыСведения.НомерСтроки");
							
	Запрос.УстановитьПараметр("НаборСвойств", ВидНоменклатуры.НаборСвойств);
	Запрос.УстановитьПараметр("НаборОбщихСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.ПредставлениеРеквизита, Выборка.Свойство, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(Дерево);

КонецПроцедуры


 
Процедура ПроверитьДеревоНаКлоны(Дерево)

	Для каждого СтрокаДерева Из Дерево.Строки Цикл
	    РезультатПоиска = Дерево.Строки.НайтиСтроки(Новый Структура("Идентификатор", СтрокаДерева.Идентификатор));
		Если РезультатПоиска.Количество() > 1 Тогда
			Для каждого СтрокаМассива Из РезультатПоиска Цикл
		    	СтрокаМассива.Идентификатор = СтрокаМассива.Идентификатор + " (" + СтрокаМассива.Ссылка.УникальныйИдентификатор + ")";					
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры
 

Процедура ЗаписатьФормулуВРегистр(ВидЦены, ВидНоменклатуры, Формула, ХранилищеТипов) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ALPS_ШаблоныКонкурентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦены.Установить(ВидЦены);
	НаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
	Если НЕ ПустаяСтрока(Формула) Тогда	
		Запись 						= НаборЗаписей.Добавить();
		Запись.ВидЦены 				= ВидЦены;
		Запись.ВидНоменклатуры 		= ВидНоменклатуры;
		Запись.Формула 				= Формула;
		Запись.ХранилищеТипов 		= ХранилищеТипов;
	КонецЕсли;	
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПолучитьСоответствияФормулы(ВидЦены, ВидНоменклатуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ALPS_ШаблоныКонкурентов.ХранилищеТипов
		|ИЗ
		|	РегистрСведений.ALPS_ШаблоныКонкурентов КАК ALPS_ШаблоныКонкурентов
		|ГДЕ
		|	ALPS_ШаблоныКонкурентов.ВидЦены = &ВидЦены
		|И 	ALPS_ШаблоныКонкурентов.ВидНоменклатуры = &ВидНоменклатуры";

	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ХранилищеТипов.Получить();
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Процедура ЗагрузитьФормулу(мФорма, ИмяРеквизита, ВидЦены, ВидНоменклатуры)

	УстановитьПривилегированныйРежим(Истина);
	
	мФорма[ИмяРеквизита] = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ALPS_ШаблоныКонкурентов.Формула
	                      |ИЗ
	                      |	РегистрСведений.ALPS_ШаблоныКонкурентов КАК ALPS_ШаблоныКонкурентов
	                      |ГДЕ
	                      |	ALPS_ШаблоныКонкурентов.ВидЦены = &ВидЦены
	                      |	И ALPS_ШаблоныКонкурентов.ВидНоменклатуры = &ВидНоменклатуры");
						  
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		мФорма[ИмяРеквизита] = Выборка.Формула;
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "4.2.7";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Настройки ценообразования");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Настройки ценообразования [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Настройки ценообразования [" + Версия + "]", "МЛ", "ОткрытиеФормы", Ложь, "МЛ");
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление цен [2.0.69]", "ОбновитьЦеныПоРегламенту();", "ВызовСерверногоМетода");

	
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти

Функция GetLibrary(LibraryName) Экспорт
	Ссылка 		    = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки  = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;	
КонецФункции

Функция GetLibraryName(LibraryName) Экспорт
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);	
КонецФункции

