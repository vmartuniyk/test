
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Процедура ПередатьДанныеВZabbix(Хост, Ключ, Значение, УникальныйИдентификатор)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("auth", "a1fds22sfhnbg5");
	СтруктураЗапроса.Вставить("data", Новый Массив);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("host", Хост);
	СтруктураПараметров.Вставить("key", Ключ);
	СтруктураПараметров.Вставить("value", Значение);
	СтруктураПараметров.Вставить("id", УникальныйИдентификатор);

	
	СтруктураЗапроса.data.Добавить(СтруктураПараметров);
	
	ТелоЗапроса = git_JSON.ЗаписатьJSON(СтруктураЗапроса);
	
	HTTPСоединение = Новый HTTPСоединение("192.168.156.2", "9999");											
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/rest", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "windows-1251");
	HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецПроцедуры



Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьВИнтернетМагазин() Экспорт
	
	Перем Server;
	Перем StructConnection;
	Перем FTP_Profiles;
	Перем HTTP_Profiles;
	
	
	УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	ПередатьДанныеВZabbix("gamlet.ktc.local", "b2b_goods_key", "procedure start", УникальныйИдентификатор);
	
	
	
	ЗапросFTP 		= Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Регламент_FTP_Профили");
	FTP_Profiles 	= ЗапросFTP.Выполнить().Выгрузить();
	ЗапросHTTP 		= Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Регламент_HTTP_Профили");
	HTTP_Profiles   = ЗапросHTTP.Выполнить().Выгрузить();
	
	 РезультатПоискаFTP = FTP_Profiles.Найти("order-b2b.com", "Наименование");
	Если  РезультатПоискаFTP <> Неопределено Тогда
		
		StructConnection = Новый Структура("ServerExchange, User, Password, Port, Proxy, PassiveConnection, Timeout", 
											РезультатПоискаFTP.Server, 
											РезультатПоискаFTP.User, 
											РезультатПоискаFTP.Password, 
											РезультатПоискаFTP.Port, 
											РезультатПоискаFTP.Proxy, 
											РезультатПоискаFTP.PassiveConnection,
											РезультатПоискаFTP.Timeout);
		
		Server = ktcОбщийМодульПротоколов.ПодключитсяПоFTP(	StructConnection.ServerExchange, 
															StructConnection.User, 
															StructConnection.Password, 
															StructConnection.Port,
															StructConnection.Proxy,
															StructConnection.PassiveConnection,
															StructConnection.Timeout);
																																									
		//Формирование списка партнеров
		order_b2b_com_ВыгрузкаПартнеров(Server, StructConnection);
		//Формирование групп номенклатуры
		order_b2b_com_ВыгрузкаГруппНоменклатуры(Server, StructConnection);
		
		//Выполнение акутаельности номенклатуры
		git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Регл. обновление прайс-листов").ALPS_ОбновитьАктуальность();
		
		//Формирование выгрузки данных номенклатуры
		order_b2b_com_ВыгрузкаНоменклатуры(Server, StructConnection);
		
	КонецЕсли;
	
	//Поиск нужного профиля для включения обработчика информации
	РезультатПоискаHTTP = HTTP_Profiles.Найти("order-b2b.com", "Наименование");	
	Если РезультатПоискаHTTP <> Неопределено Тогда
		
		Попытка
			
			HTTP = Новый HTTPСоединение(РезультатПоискаHTTP.Server);
			HTTP.Получить("/update/import.php", "C:\1C_LOGS\YT11_CONNECTION\ktc.rovno.ua\" + СтрЗаменить(Строка(ТекущаяДата()), ":", ".") + "full.log");	
			
		Исключение
			
			Тема = 	"Перейти по ссылке order-b2b.com/update/import.php не удалось";
			Тело = 	"Технические данные подключения : " 		+ Символы.ПС +
					"Server: order-b2b.com " 					+ Символы.ПС +
					" "											+ Символы.ПС + 
					ОписаниеОшибки();																						
					
			Кому = Новый Массив;
			Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "Відділ тех. підтримки"));

			ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(Тема, Тело, Кому);
			ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
			
		КонецПопытки;
		
	КонецЕсли;
	
	
	
	ПередатьДанныеВZabbix("gamlet.ktc.local", "b2b_goods_key", "procedure stop", УникальныйИдентификатор);

	
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура order_b2b_com_ВыгрузкаНоменклатуры(Server, StructConnection) 
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Обновление портала order-b2b.com'");
                       
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		//Настройки не найдены!!!	
	КонецЕсли;
		
	ВремяВыполненияЗапроса 		= ТекущаяДата();
	ВремяВыполненияЗаписиВФайл  = 0;
	ВремяВыполненияЗаписиПоFTP	= 0;
	
	ИмяФайла	= "C:\1C_LOGS\YT11_CSV\goods.csv";
	ИмяАрхива	= "C:\1C_LOGS\YT11_CSV\order_b2b_com.zip";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//1. Кешируем таблицу прайсов
		|ВЫБРАТЬ
		|	Соглашение, deadline 
		|ПОМЕСТИТЬ ТабПрайсов
		|ИЗ
		|	&ТаблицаПрайсов КАК ТаблицаПрайсов
		|ИНДЕКСИРОВАТЬ ПО
		|	Соглашение
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//2. Кешируем свойства
		|ВЫБРАТЬ
		|	Ссылка,
		|	Свойство,
		|	Значение
		|
		|ПОМЕСТИТЬ ВтКешСвойств
		|
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты
		|ГДЕ
		|	Свойство = &СвойствоГарантия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура),
		|	Свойство,
		|	Значение
		|
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения
		|ГДЕ
		|	Свойство = &СвойствоLoadToSite
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//3. 
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ВидЦены,
		|   Цена
		|
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|
		|ИЗ
		| 	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены В (&ПарамЦенаПартнерская, &ПарамЦенаОптовая, &ПарамЦенаВип))
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//4. Только актуальная номенклатура
		|ВЫБРАТЬ
		|	Actuality.Номенклатура,
		|	Actuality.ДатаПоставки,
		|   Actuality.СоглашениеСПоставщиком,
		|	1 КАК Актуально,
		|	ТабПрайсов.deadline 
		|	
		|ПОМЕСТИТЬ UniqueActuality
		|ИЗ
		|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(&ТекущаяДата) КАК Actuality
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабПрайсов КАК ТабПрайсов
		|ПО	ТабПрайсов.Соглашение = Actuality.СоглашениеСПоставщиком
        |
		|ГДЕ
		|	Actuality.Актуально
		|И  Actuality.ГарантияДоставки
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//5. Вся номенклатура
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка 			   	КАК Номенклатура,
		|	СпрНоменклатура.Код					КАК Код,
		|	СпрНоменклатура.Артикул,
		|   СпрНоменклатура.НаименованиеПолное,
		|	СпрНоменклатура.Родитель           	КАК ОсновнаяГруппа,
		|	СпрНоменклатура.Родитель.Родитель  	КАК СабГруппа,
		|	СпрНоменклатура.Производитель
		|	
		|ПОМЕСТИТЬ СпрНом
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
        |
		|ГДЕ
		| 	НЕ ЭтоГруппа "
		+ ?(Час(ТекущаяДата()) = 23, "", " И Ссылка В ИЕРАРХИИ (&Родитель)") + "
		|;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//6. 
		|ВЫБРАТЬ
		|	СпрНом.Код 													КАК Код,							    //1
		|	СпрНом.Артикул 												КАК Артикул,                            //2
		|	СпрНом.НаименованиеПолное									КАК ПолноеНаименование,                 //3
		|	ЦенаПарт.Цена												КАК ЦенаПартнерская,                    //4
		|	ЦенаОпт.Цена												КАК ЦенаОптовая,                        //5
		|	0															КАК ЦенаРозничная,                      //6
		|	IsNull(ЦенаСпец.Цена, 0)									КАК ЦенаВип,                            //7
		|	0 КАК Чорновола,																					//8
		|	0 КАК НоутБумРовно,																					//9
		|	Ложь					                                    		КАК Актуальность,              	//10
		|   СпрНом.ОсновнаяГруппа,            																	//11
		|   СпрНом.СабГруппа,                 																	//12
		|	СпрНом.Производитель												КАК Доп1,                      	//13
		|	0 КАК Тернополь,										                                            //14
		|
		|	ISNULL(Warranty.Значение, ""0 міс."")								КАК Доп3,                      	//15
		|
		|	ВЫБОР
		|		КОГДА ЕстьNULL(LoadToSite.Значение, Ложь)  = Истина
		|		ТОГДА 0
		|		КОГДА IsNull(КПП.НеПересчитыватьАвтоматически, Ложь) = Истина И IsNull(КПП.Значение.ОграничениеАктуальностиПоПравам, Ложь) = Истина
		|		ТОГДА 0
		|   	ИНАЧЕ ОстаткиПоСоборна.ВНаличииОстаток - ОстаткиПоСоборна.ВРезервеОстаток 
		|	КОНЕЦ КАК Соборна,                    																//16
		|
		| 	%1 
		|
		|ИЗ
		|	СпрНом КАК СпрНом
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦенаПарт
		|ПО ЦенаПарт.Номенклатура 	= СпрНом.Номенклатура 
		|И	ЦенаПарт.ВидЦены		= &ПарамЦенаПартнерская
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦенаОпт
		|ПО ЦенаОпт.Номенклатура 	= СпрНом.Номенклатура
		|И	ЦенаОпт.ВидЦены			= &ПарамЦенаОптовая
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦенаСпец
		|ПО ЦенаСпец.Номенклатура 	= СпрНом.Номенклатура 
		|И	ЦенаСпец.ВидЦены		= &ПарамЦенаВип
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &СкладСоборна)	КАК ОстаткиПоСоборна 
		|ПО ОстаткиПоСоборна.Номенклатура = СпрНом.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ UniqueActuality КАК UniqueActuality
		|ПО UniqueActuality.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНом)) КАК КПП
		|ПО	КПП.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВтКешСвойств КАК Warranty
		|ПО Warranty.Ссылка		= СпрНом.Номенклатура
		|И	Warranty.Свойство   = &СвойствоГарантия
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВтКешСвойств КАК LoadToSite
		|ПО LoadToSite.Ссылка	 = СпрНом.Номенклатура
		|И	LoadToSite.Свойство  = &СвойствоLoadToSite
		|;";
		
	ВыгружатьАктуальность = НеобходимоВыгружатьНоменклатуруПоАктуальностиНаСайт();
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстЗаросаСУчетомАктуальности(ВыгружатьАктуальность));
		
	Запрос.УстановитьПараметр("Родитель", Справочники.Номенклатура.НайтиПоКоду("00000000001"));
	
	ТоварыВсеДляВыгрузки = Новый СписокЗначений;
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Ноутбуки"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Планшети"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Фотоапарати"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Об'єктиви"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Фотоспалахи"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Графічні планшети"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Ігрові консолі"));
	ТоварыВсеДляВыгрузки.Добавить(Справочники.ВидыНоменклатуры.НайтиПоНаименованию("TV-тюнери"));
	
	Запрос.УстановитьПараметр("Сегодня", 		НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаПрайсов", git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок").ПолучитьТаблицуПрайсов(Настройки));
	
	Запрос.УстановитьПараметр("ТоварыВсеДляВыгрузки", ТоварыВсеДляВыгрузки);
	
	Запрос.УстановитьПараметр("ПарамЦенаПартнерская", 	Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fc-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ПарамЦенаОптовая", 		Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fe-404c-11e0-9f98-001517115d85"))); //Оптовая цена
	Запрос.УстановитьПараметр("ПарамЦенаВип", 			Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fd-404c-11e0-9f98-001517115d85"))); //Спец цена
	
	Запрос.УстановитьПараметр("СкладСоборна", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("СкладТернополь", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("832fe7ba-15c9-11e1-b8a7-001517115d85")));
	Запрос.УстановитьПараметр("СкладЧорновола", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3408-40c2-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("СкладНоутБумРовно", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("f21b1ce0-b16a-11e0-9cc0-001517115d85")));
	
	Запрос.УстановитьПараметр("СвойствоГарантия", 		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія"));
	Запрос.УстановитьПараметр("СвойствоLoadToSite", 	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("21932c8c-6930-11e2-8fd5-001e673c80fc")));
	
	//Запрос.УстановитьПараметр("upload", Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("upload"));
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	
	ВремяВыполненияЗапроса 		= ТекущаяДата() - ВремяВыполненияЗапроса;
	ВремяВыполненияЗаписиВФайл  = ТекущаяДата();
	
	
	TD = Новый ТекстовыйДокумент;
	TD.Вывод = ИспользованиеВывода.Разрешить;
		
	Пока Выборка.Следующий() Цикл
		Строка = "" + 	Формат(Число(Выборка.Код), "ЧГ = 0") 																											+ ";"; //1 art
		Строка = Строка + СтрЗаменить(Выборка.Артикул, ";",".")  																										+ ";"; //2 code_vir
		Строка = Строка + СтрЗаменить(Выборка.ПолноеНаименование,";", ".")																								+ ";"; //3 title
		Строка = Строка + ?(Выборка.ЦенаПартнерская = NULL, 	Формат(99999, "ЧДЦ = 2; ЧРД='.'; ЧГ = 0"), Формат(Выборка.ЦенаПартнерская,"ЧДЦ = 2; ЧРД='.'; ЧГ = 0"))  + ";"; //4 price01
		Строка = Строка + ?(Выборка.ЦенаОптовая = NULL, 		Формат(99999, "ЧДЦ = 2; ЧРД='.'; ЧГ = 0"), Формат(Выборка.ЦенаОптовая,"ЧДЦ = 2; ЧРД='.'; ЧГ = 0")) 		+ ";"; //5 price02
		Строка = Строка + ?(Выборка.ЦенаРозничная = NULL, 	Формат(99999, "ЧДЦ = 2; ЧРД='.'; ЧГ = 0"), Формат(Выборка.ЦенаРозничная,"ЧДЦ = 2; ЧРД='.'; ЧГ = 0")) 		+ ";"; //6 price00
		Строка = Строка + Выборка.Чорновола 																				+ ";";                                           //7 rv1
		Строка = Строка + Выборка.НоутБумРовно 																				+ ";";                                           //8 rv2
		Строка = Строка + ?(Выборка.Актуальность, "1", "0")																	+ ";";                                           //9 actuality
		Строка = Строка + Формат(Число(Выборка.ОсновнаяГруппа.Код), "ЧГ = 0") 												+ ";";                                           //10 grp
		Строка = Строка + Формат(Число(Выборка.СабГруппа.Код), "ЧГ = 0") 													+ ";";                                           //11 subgrp
		Строка = Строка + ?(Выборка.Доп1 = NULL, "", Строка(Выборка.Доп1)) 													+ ";";                                           //12 vendorname
		Строка = Строка + Выборка.Тернополь							 														+ ";";                                           //13 availability
		Строка = Строка + Выборка.Доп3								 														+ ";";                                           //14 warranty
		Строка = Строка + Выборка.Соборна 																					+ ";";                                           //15 presencekur4atova
		Строка = Строка + ?(Выборка.ЦенаВип = 0, Формат(99999, "ЧДЦ = 2; ЧРД='.'; ЧГ = 0"), Формат(Выборка.ЦенаВип,"ЧДЦ = 2; ЧРД='.'; ЧГ = 0")) + ";"; 		 				 //16 pricevip
		Строка = Строка + Формат(ПолучитьUnixTS(Выборка.logist_fast), "ЧГ=0") 			+ ";"; 	//17 logist_fast
		Строка = Строка + Формат(ПолучитьUnixTS(Выборка.logist_slow+84600), "ЧГ=0") 	+ ";"; 	//18 logist_slow
		Строка = Строка + Формат(ПолучитьUnixTS(Выборка.deadline), "ЧГ=0") 				+ ";"; 	//19 deadline
		Строка = Строка + Выборка.order_item; 													//20 order_item
		TD.ДобавитьСтроку(Строка);		
	КонецЦикла;
	
	TD.Записать(ИмяФайла, "windows-1251");
	
	
	ВремяВыполненияЗаписиВФайл  = ТекущаяДата() - ВремяВыполненияЗаписиВФайл;
	ВремяВыполненияЗаписиПоFTP	= ТекущаяДата();

	
	
	
	
	Если ktcОбщийМодульПротоколов.ОтправитьСообщениеПоFTP(Server, ИмяФайла, "/www/update/import", "/goods.csv", StructConnection) Тогда
				
		Тема = 	"Записать goods.csv на FTP сервер " 	+ StructConnection.ServerExchange + " не удалось";
		Тело = 	ВДНССформироватьТелоСообщения(StructConnection, , ВремяВыполненияЗапроса, ВремяВыполненияЗаписиВФайл, ТекущаяДата() - ВремяВыполненияЗаписиПоFTP);																						
				
		Кому = Новый Массив;
		Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "Відділ тех. підтримки"));
		
	Иначе
				
		Тема = 	"Выполнена запись goods.csv на FTP сервер " 	+ StructConnection.ServerExchange;
		Тело = 	ВДНССформироватьТелоСообщения(StructConnection, "Количество номенклатуры : " + Выборка.Количество(), ВремяВыполненияЗапроса, ВремяВыполненияЗаписиВФайл, ТекущаяДата() - ВремяВыполненияЗаписиПоFTP);																						
				
		Кому = Новый Массив;
		Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "Відділ тех. підтримки"));

	КонецЕсли;
	
	ZipАрхив = Новый ЗаписьZipФайла(ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ZipАрхив.Добавить("C:\1C_LOGS\YT11_CSV\*.csv");
	ZipАрхив.Записать();
		
	ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(Тема, Тело, Кому, , , ,);
	ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	
КонецПроцедуры

Процедура order_b2b_com_ВыгрузкаГруппНоменклатуры(Server, StructConnection) 
	
	ВремяВыполненияЗапроса 		= ТекущаяДата();
	ВремяВыполненияЗаписиВФайл  = 0;
	ВремяВыполненияЗаписиПоFTP	= 0;
	
	ИмяФайла	= "C:\1C_LOGS\YT11_CSV\PoKategoriam.csv";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				|	СпрНом.Код	КАК Номер,
				|	СпрНом.Наименование	КАК Группа,
				|	ВЫБОР
				|		КОГДА СпрНом.Родитель = &Группа 	
				|		ТОГДА 0
				|	ИНАЧЕ СпрНом.Родитель.Код
				|	КОНЕЦ КАК Родитель,
				|	СпрНом.Код	КАК КодГруппы,
				|	ВЫБОР
				|		КОГДА СпрНом.Родитель = &Группа
				|		ТОГДА 999
				|	ИНАЧЕ 0
				|	КОНЕЦ КАК Ключ 	
				|Из 
				|	Справочник.Номенклатура		КАК СпрНом	
				|ГДЕ
				|	СпрНом.Ссылка В ИЕРАРХИИ (&Группа)
				|И	СпрНом.ЭтоГруппа = Истина
				|И  СпрНом.Ссылка <> &Группа
				|
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка.Наименование";
	Запрос.Параметры.Вставить("Группа", Справочники.Номенклатура.НайтиПоКоду("00000000001"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	ВремяВыполненияЗапроса 		= ТекущаяДата() - ВремяВыполненияЗапроса;
	ВремяВыполненияЗаписиВФайл  = ТекущаяДата();
	
	
	TD = Новый ТекстовыйДокумент;
	TD.Вывод = ИспользованиеВывода.Разрешить;
		
	Пока Выборка.Следующий() Цикл
		TD.ДобавитьСтроку("" +  Формат(Число(Выборка.Номер), "ЧГ = 0") + ";" + Выборка.Группа + ";" + ?(Выборка.Родитель = 0, 0, Формат(Число(Выборка.Родитель), "ЧГ = 0")) + ";" +  Формат(Число(Выборка.КодГРуппы), "ЧГ = 0") + ";" + Выборка.Ключ);		
	КонецЦикла;
	
	TD.Записать(ИмяФайла, "windows-1251");
	
		
	ВремяВыполненияЗаписиВФайл  = ТекущаяДата() - ВремяВыполненияЗаписиВФайл;
	ВремяВыполненияЗаписиПоFTP	= ТекущаяДата();
	
	
	
	
    
	Если ktcОбщийМодульПротоколов.ОтправитьСообщениеПоFTP(Server, ИмяФайла, "/www/update/import", "/PoKategoriam.csv", StructConnection) Тогда
		
		ВремяВыполненияЗаписиПоFTP	= ТекущаяДата() - ВремяВыполненияЗаписиПоFTP;
		
		Тема = 	"Записать PoKategoriam.csv на FTP сервер " 	+ StructConnection.ServerExchange + " не удалось";
		Тело = 	ВДНССформироватьТелоСообщения(StructConnection, , ВремяВыполненияЗапроса, ВремяВыполненияЗаписиВФайл, ВремяВыполненияЗаписиПоFTP);																						
				
		Кому = Новый Массив;
		Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "Відділ тех. підтримки"));
		
		Вложения = Новый Соответствие;
		Вложения.Вставить("PoKategoriam.csv", Новый ДвоичныеДанные(ИмяФайла));
		
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(Тема, Тело, Кому, , , , Вложения);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
		
	КонецЕсли;
	
		
КонецПроцедуры

Процедура order_b2b_com_ВыгрузкаПартнеров(Server, StructConnection) 
	
	ВремяВыполненияЗапроса 		= ТекущаяДата();
	ВремяВыполненияЗаписиВФайл  = 0;
	ВремяВыполненияЗаписиПоFTP	= 0;
	
	ИмяФайла	= "C:\1C_LOGS\YT11_CSV\clients.csv";
	Запрос 		= ПолучитьЗапросДляВыгрузкиПарнеровFull();
	Выборка 	= Запрос.Выполнить().Выбрать();
	
	
	ВремяВыполненияЗапроса 		= ТекущаяДата() - ВремяВыполненияЗапроса;
	ВремяВыполненияЗаписиВФайл  = ТекущаяДата();
	
	
	TD 			= Новый ТекстовыйДокумент;
	TD.Вывод 	= ИспользованиеВывода.Разрешить;
		
	Пока Выборка.Следующий() Цикл
		TD.ДобавитьСтроку(""+ Формат(Число(Выборка.КодКонтрагента), "ЧГ = 0") + ";" 
							+ Выборка.Мейл 				+ ";" 
							+ Выборка.Логин 			+ ";" 
							+ Выборка.Пароль 			+ ";" 
							+ Выборка.Категория			+ ";"
							+ "True"            		+ ";"
							+ Выборка.БизнесРегион   	+ ";"
							+ Выборка.ОсновнойМенеджер  + ";"
							+ Выборка.email				+ ";"
							+ Выборка.Телефон
							);
	КонецЦикла;
	
	TD.Записать(ИмяФайла, "windows-1251");
	
	
	ВремяВыполненияЗаписиВФайл  = ТекущаяДата() - ВремяВыполненияЗаписиВФайл;
	ВремяВыполненияЗаписиПоFTP	= ТекущаяДата();
	
	
	
	
	
	Если ktcОбщийМодульПротоколов.ОтправитьСообщениеПоFTP(Server, ИмяФайла, "/www/update/import", "/clients.csv", StructConnection) Тогда
		
		ВремяВыполненияЗаписиПоFTP	= ТекущаяДата() - ВремяВыполненияЗаписиПоFTP;
		
		Тема = 	"Записать clients.csv на FTP сервер " 	+ StructConnection.ServerExchange + " не удалось";
		Тело = 	ВДНССформироватьТелоСообщения(StructConnection, , ВремяВыполненияЗапроса, ВремяВыполненияЗаписиВФайл, ВремяВыполненияЗаписиПоFTP);																						
				
		Кому = Новый Массив;
		Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "Відділ тех. підтримки"));
		
		Вложения = Новый Соответствие;
		Вложения.Вставить("clients.csv", Новый ДвоичныеДанные(ИмяФайла));

		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(Тема, Тело, Кому, , , , Вложения);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВДНССформироватьТелоСообщения(StructConnection, ОписаниеОшибки = "", ВремяВыполненияЗапроса = 0, ВремяВыполненияЗаписиВФайл = 0, ВремяВыполненияЗаписиПоFTP = 0)
	
	Тело = 	"Технические данные подключения : " 														+ Символы.ПС +
			"Server: " 								+ StructConnection.ServerExchange 					+ Символы.ПС +
			"Port: " 								+ StructConnection.Port 							+ Символы.ПС +
			"User: " 								+ StructConnection.User 							+ Символы.ПС +
			"Password: ************" 																	+ Символы.ПС +
			"Proxy: " 								+ Строка(StructConnection.Proxy) 					+ Символы.ПС +
			"PassiveMode: " 						+ Строка(StructConnection.PassiveConnection)		+ Символы.ПС +
			"Timeout: "								+ Строка(StructConnection.Timeout)					+ Символы.ПС + 
			" "                                                                                         + Символы.ПС +
			ОписаниеОшибки																				+ Символы.ПС +
			"Время выполнения запроса : " 			+ ВремяВыполненияЗапроса 		+ " (сек)" 			+ Символы.ПС +
			"Время выполнения записи в файл : " 	+ ВремяВыполненияЗаписиВФайл 	+ " (сек)" 			+ Символы.ПС +
			"Время выполнения записи по FTP : " 	+ ВремяВыполненияЗаписиПоFTP 	+ " (сек)" 			+ Символы.ПС +
			" ";																						

	Возврат Тело;
	
КонецФункции

Функция ПолучитьUnixTS(ПараметрДата)
    Возврат ПараметрДата - '19700101000000'; //УниверсальноеВремя(ПараметрДата) - '19700101000000';
КонецФункции

Функция ПолучитьЗапросДляВыгрузкиПарнеровFull()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДопЛогин.Ссылка,
	|	ДопЛогин.Ссылка.Код							КАК КодКонтрагента,
	|	ДопЛогин.Значение							КАК Логин,
	|	ДопЛогин.Ссылка.ПарольКСайту				КАК Пароль,
	//|	ДопПароль.Значение  						КАК Пароль,
	|	ЕСТЬNULL(ДопИнформация.Представление, """") КАК Мейл,
	|	ВЫБОР
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Партнерська"" 
	|		ТОГДА 1
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Спецціни""
	|		ТОГДА 4
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Оптова""
	|		ТОГДА 2
	|		КОГДА ДопТипЦен.Значение.Наименование = ""+2%""
	|		ТОГДА 0
	|	ИНАЧЕ 3
	|	КОНЕЦ КАК Категория,
	|	ДопЛогин.Ссылка.БизнесРегион		КАК БизнесРегион,
	|   ДопЛогин.Ссылка.ОсновнойМенеджер    КАК ОсновнойМенеджер,
	|   МенеджерМейл.Представление          КАК email,
	|   МенеджерТел.Представление           КАК Телефон
	|
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопЛогин
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопПароль
	//|		ПО 	ДопПароль.Ссылка = ДопЛогин.Ссылка
	//|		И 	ДопПароль.Свойство = &Пароль 
	//|		И 	ДопПароль.Значение <> """"
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопТипЦен
	|ПО	ДопТипЦен.Ссылка 	= ДопЛогин.Ссылка
	|И	ДопТипЦен.Свойство	= &ВидЦен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДоступКСайту
	|ПО	ДоступКСайту.Ссылка 	= ДопЛогин.Ссылка
	|И	ДоступКСайту.Свойство	= &ДоступКСайту
    |
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ДопИнформация
	|ПО ДопИнформация.Ссылка = ДопЛогин.Ссылка
	|И	ДопИнформация.Тип	 = &mail	
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК МенеджерМейл
	|ПО МенеджерМейл.Ссылка = ДопЛогин.Ссылка.ОсновнойМенеджер
	|И	МенеджерМейл.Тип	= &mail
	|И  МенеджерМейл.Вид	= &mail_vid
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК МенеджерТел
	|ПО МенеджерТел.Ссылка 	= ДопЛогин.Ссылка.ОсновнойМенеджер
	|И	МенеджерТел.Тип	 	= &tel
	|И	МенеджерТел.Вид	 	= &tel_vid
	|
	|ГДЕ
	|	ДопЛогин.Свойство = &Логин  
	|И 	ДопЛогин.Значение <> """"
	|И 	ДопЛогин.Ссылка.ПарольКСайту <> """"
    |И  ДоступКСайту.Значение = Истина
	|УПОРЯДОЧИТЬ ПО	ДопЛогин.Ссылка.Код ";
	
	//Запрос.УстановитьПараметр("Пароль", 		Константы.order_b2b_comСайт_Пароль_ПВХ.Получить());
	Запрос.УстановитьПараметр("Логин", 			Константы.order_b2b_comСайт_Логин_ПВХ.Получить());
	Запрос.УстановитьПараметр("ВидЦен",			Константы.order_b2b_comСайт_ВидЦен_ПВХ.Получить());
	Запрос.УстановитьПараметр("ДоступКСайту", 	Константы.order_b2b_comДоступКСайту.Получить());
	
	Запрос.УстановитьПараметр("mail", 			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("mail_vid",		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("tel",			Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("tel_vid",		Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Телефон пользователя"));


	
	Возврат Запрос;
	
КонецФункции



// http://r.ktc-ua.com/issues/5358
Функция ТекстЗаросаСУчетомАктуальности(ВыгружатьАктуальность)

	ТекстЗапроса = "";
	
	Если ВыгружатьАктуальность Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|
			| 	ISNULL(UniqueActuality.ДатаПоставки, ДАТАВРЕМЯ(1970, 1, 1))			КАК logist_fast,				//17
			| 	ISNULL(UniqueActuality.ДатаПоставки, ДАТАВРЕМЯ(1970, 1, 1))			КАК logist_slow,				//18
			|	ISNULL(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&Сегодня, ЧАС, ЧАС(UniqueActuality.deadline)), МИНУТА, МИНУТА(UniqueActuality.deadline)), ДАТАВРЕМЯ(1970, 1, 1)) КАК deadline, //19																					//19
			| 	ВЫБОР
			|		КОГДА ЕстьNULL(LoadToSite.Значение, Ложь) = Истина
			|		ТОГДА 0
			|		КОГДА IsNull(КПП.НеПересчитыватьАвтоматически, Ложь) = Истина И IsNull(КПП.Значение.ОграничениеАктуальностиПоПравам, Ложь) = Истина
			|		ТОГДА 0
			|   	ИНАЧЕ ISNULL(UniqueActuality.Актуально, 0) 
			|	КОНЕЦ 																КАК order_item					//20"; 
	Иначе
		ТекстЗапроса = "
			|
			| 	ДАТАВРЕМЯ(1970, 1, 1)											КАК logist_fast,				//17
			| 	ДАТАВРЕМЯ(1970, 1, 1)											КАК logist_slow,				//18
			|	ДАТАВРЕМЯ(1970, 1, 1) 											КАК deadline, //19																					//19
			| 	0 																КАК order_item					//20";
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗаросаСУчетомАктуальности()
 

// http://r.ktc-ua.com/issues/5358
// Функция выполняет проверку необходимости выгрузки номенклатуры
// по актуальности на сайт.
//
// Возвращаемое значение:
//  Истина - выполняем выгрузку на сайт, Ложь - выгружаем только остатки.
//
Функция НеобходимоВыгружатьНоменклатуруПоАктуальностиНаСайт()

	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда // Если настройки не заданы - выгружаем акуальную номенклатуру на сайт постоянно.
		ОповеститьОбОшибкеВSlack("Возможно не заданы настройки расписания выгрузки актуальной номенклатуры на сайт orderb2b.com. Установить расписание возможно в «Библиотеке внешних обработок».");
		Возврат Истина;
	КонецЕсли;
	
	Если Не Настройки.Свойство("order_b2b_com_расписание") Тогда // Если настройки не заданы - выгружаем акуальную номенклатуру на сайт постоянно.
		ОповеститьОбОшибкеВSlack("Возможно не заданы настройки расписания выгрузки актуальной номенклатуры на сайт orderb2b.com. Установить расписание возможно в «Библиотеке внешних обработок».");
		Возврат Истина;
	КонецЕсли;
	
	order_b2b_com_расписание = Настройки.order_b2b_com_расписание;
	
	Если ТипЗнч(order_b2b_com_расписание) <> Тип("ТаблицаЗначений") Тогда
		ОповеститьОбОшибкеВSlack("Возможно не заданы настройки расписания выгрузки актуальной номенклатуры на сайт orderb2b.com. Установить расписание возможно в «Библиотеке внешних обработок».");
		Возврат Истина;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из order_b2b_com_расписание Цикл
		Расписание = СтрокаТаблицы.Расписание;
		Если Расписание.Количество() > 0 Тогда
			Если Расписание[0].Значение.ТребуетсяВыполнение(,, Дата("00010101")) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;


КонецФункции // НеобходимоВыгружатьНоменклатуруПоАктуальностиНаСайт()

Процедура ОповеститьОбОшибкеВSlack(ОписаниеОшибки)
	
	МассивПрикреплений = Новый Массив;
    СтруктураПрикреплений = git_Slack.ПолучитьСтруктуруПрикреплений();
    СтруктураПрикреплений.Вставить("fallback",  "Не удалось прочитать настройки расписания выгрузки актуальной номенклатуры на orderb2b.com");
    СтруктураПрикреплений.Вставить("pretext",   ОписаниеОшибки);
    СтруктураПрикреплений.Вставить("color",     "danger");
    МассивПрикреплений.Добавить(СтруктураПрикреплений);

    СтруктураДанных = git_Slack.ПолучитьПустуюСтруктуруДанных();
    СтруктураДанных.Вставить("username",    "Base (yt11)");
    СтруктураДанных.Вставить("icon_emoji",  ":goberserk:");
    СтруктураДанных.Вставить("channel",     "#1c");
    СтруктураДанных.Вставить("attachments", МассивПрикреплений);
    git_Slack.ОтправитьДанные("ktchat.slack.com", "x2VEjiOJKl2UnSA5t2DinjEt", СтруктураДанных);
	
КонецПроцедуры

#КонецОбласти  

#Область СведенияОВнешнейОбработке
	
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.3.69";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. обновление order-b2b.com [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обновление order-b2b.com [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление order-b2b.com [" + Версия + "]", "ВыгрузитьВИнтернетМагазин();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

#КонецОбласти 
