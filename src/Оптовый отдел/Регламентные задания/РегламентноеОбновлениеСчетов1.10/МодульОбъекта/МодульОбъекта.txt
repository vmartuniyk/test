
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Процедура ПередатьДанныеВZabbix(Хост, Ключ, Значение)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("auth", "a1fds22sfhnbg5");
	СтруктураЗапроса.Вставить("data", Новый Массив);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("host", Хост);
	СтруктураПараметров.Вставить("key", Ключ);
	СтруктураПараметров.Вставить("value", Значение);
	
	СтруктураЗапроса.data.Добавить(СтруктураПараметров);
	
	ТелоЗапроса = git_JSON.ЗаписатьJSON(СтруктураЗапроса);
	
	HTTPСоединение = Новый HTTPСоединение("192.168.156.2", "9999");											
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/rest", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "windows-1251");
	HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецПроцедуры



Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьСчета() 
	
	
	
	ПередатьДанныеВZabbix("gamlet.ktc.local", "b2b_order_key", "procedure start");
	
	
	
	МассивФайлов = НайтиФайлы("C:\1C_LOGS\order-b2b.com\www\update\export", "*");			
	tmpКаталог = "C:\1C_LOGS\YT11_INCOMING\bill_tmp\";
	 
	Для Каждого Файл из МассивФайлов Цикл
		Если Файл.ЭтоФайл() Тогда
			
			Попытка
				КопироватьФайл(Файл.ПолноеИмя, tmpКаталог + Файл.Имя);
			Исключение
				
			КонецПопытки;
			
			Попытка
				УдалитьФайлы(Файл.ПолноеИмя);	
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
	МассивФайлов = НайтиФайлы(tmpКаталог , "*");
	НоминальноеКоличество = 9;
	
	Для Каждого Файл Из МассивФайлов ЦИкл
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя, "windows-1251");
		Если ТекстовыйДокумент.КоличествоСтрок() < 2 ТОгда
			УдалитьФайлы(Файл.ПолноеИмя);
			Продолжить;;	
		КонецЕсли;
		
		Для Инд = 2 по ТекстовыйДокумент.КоличествоСтрок() Цикл
			
			СтрокаЗагрузки = ТекстовыйДокумент.ПолучитьСтроку(Инд); 
			ктсКоличествоКолонок = ктсКоличествоКолонок(СтрокаЗагрузки, НоминальноеКоличество);
			
			Если ктсКоличествоКолонок <> НоминальноеКоличество Тогда
				УдалитьФайлы(Файл.ПолноеИмя);
				Прервать;
			КонецЕсли;
						
		КонецЦикла;
			
	КонецЦикла;
	
	МассивФайлов = НайтиФайлы(tmpКаталог , "*");
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	Иначе
		
		Для Каждого Файл Из МассивФайлов Цикл
			тмпТекДокумент = Новый ТекстовыйДокумент;
			тмпТекДокумент.Прочитать(Файл.ПолноеИмя, "windows-1251");
			
			ТекДокумент = ПроверитьТекДокумент(тмпТекДокумент, ";", 8);
			
			Таблица = Новый ТаблицаЗначений;
			Таблица.Колонки.Добавить("КодКонтрагента", , "КодКонтрагента");
			Таблица.Колонки.Добавить("НомерСчета", , "НомерСчета");
			Таблица.Колонки.Добавить("Дата", , "Дата");
			Таблица.Колонки.Добавить("Время", , "Время");
			Таблица.Колонки.Добавить("КодТовара", , "КодТовара");
			Таблица.Колонки.Добавить("ЦенаТовара", , "ЦенаТовара");
			Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"), "Количество");
			Таблица.Колонки.Добавить("Комментарий", , "Комментарий");
			
			Для Ном = 2 по ТекДокумент.КоличествоСтрок() Цикл
				Строка = ТекДокумент.ПолучитьСтроку(Ном);
				ЗаполнениеТаблицыСчета(Таблица, Строка, ";");
			КонецЦикла;
			Таблица.Сортировать("НомерСчета");
			
			НомерСчета = Неопределено;
			СсылкаСчет = Неопределено;
			МассивОбъектов = Новый Массив;
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				
				Если ПустаяСтрока(СтрокаТаблицы.НомерСчета) Тогда
					Продолжить;
				КонецЕсли;

				Если НомерСчета = Неопределено ИЛИ НомерСчета <> СтрокаТаблицы.НомерСчета Тогда
					МассивОбъектов.Добавить(Документы.ЗаказКлиента.СоздатьДокумент());
					СсылкаСчет = МассивОбъектов[МассивОбъектов.ВГраница()];
					СсылкаСчет.Комментарий = "i-shop: " + СтрокаТаблицы.Комментарий;
					СсылкаСчет.ДополнительнаяИнформацияПоДоставке = СтрокаТаблицы.НомерСчета;
					НомерСчета = СтрокаТаблицы.НомерСчета;
				КонецЕсли;
				
				ЗаполнениеДокумента(СсылкаСчет.Товары, СтрокаТаблицы, СсылкаСчет);
				
			КонецЦикла;
			
			Для каждого ЭлементОбъект Из МассивОбъектов Цикл
				
				Если ПроверитьЗаказНаНаличиеВБазе(ЭлементОбъект.ДополнительнаяИнформацияПоДоставке) Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					ЭлементОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ЭлементОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
				
			КонецЦикла; 
			
			УдалитьФайлы(Файл.ПолноеИмя);
			
		КонецЦикла;
		
	КонецЕсли;

	
	
	ПередатьДанныеВZabbix("gamlet.ktc.local", "b2b_order_key", "procedure stop");
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ктсКоличествоКолонок(Строка, НоминальноеКоличество)
	
	Строка = Строка + ";";
	Длина = СтрДлина(Строка);	
	КолКолонок = 0;
	
	Пока (Длина <> 0) Цикл 
 
		ИндРазделителя = Найти (Строка,";");
		Строка = Прав(Строка,Длина - ИндРазделителя);
		
		КолКолонок = КолКолонок + 1;
		Длина = СтрДлина(Строка);	
		
	КонецЦикла;  	             
		
	Возврат КолКолонок;
		
КонецФункции

Функция ПроверитьТекДокумент(тмпТекДокумент, Разделитель, КолВхожденийДок) 
	
	ТекДокумент = Новый ТекстовыйДокумент;
	ТекДокумент.ДобавитьСтроку(тмпТекДокумент.ПолучитьСтроку(1));
	Для Ном = 2 по тмпТекДокумент.КоличествоСтрок() Цикл
		Строка = тмпТекДокумент.ПолучитьСтроку(Ном);
		ЧислоВхождений = СтрЧислоВхождений(Строка, Разделитель);
		Если ЧислоВхождений = КолВхожденийДок Тогда
			ТекДокумент.ДобавитьСтроку(Строка);
			Продолжить;
		Иначе
			Если ЧислоВхождений + СтрЧислоВхождений(тмпТекДокумент.ПолучитьСтроку(Ном + 1), Разделитель) = КолВхожденийДок Тогда
				ТекДокумент.ДобавитьСтроку(Строка + тмпТекДокумент.ПолучитьСтроку(Ном + 1));
				Ном = Ном + 1;
				Продолжить;
			Иначе
				Возврат тмпТекДокумент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекДокумент;
	
КонецФункции

//Заполняет динамискую таблицу данными и значениями из заказа + дополнительно проверяет на пустоту
//
Процедура ЗаполнениеТаблицыСчета (Таблица, Строка, Разделитель) 
	
	НоваяСтрока = Таблица.Добавить();
	КоличествоВхождений = СтрЧислоВхождений(Строка, Разделитель);
	Для Инд = 1 По КоличествоВхождений Цикл
		Длина = СтрДлина(Строка);
		ИндРазделителя = Найти (Строка,";");
		НоваяСтрока[Инд-1] = Лев(Строка, ИндРазделителя - 1);
		Строка = Прав(Строка,Длина - ИндРазделителя);
	КонецЦикла;
	
	Если СтрЧислоВхождений(НоваяСтрока.Дата, "-") > 0 Тогда   
		НоваяСтрока.Дата = СтрЗаменить(НоваяСтрока.Дата, "-", ".");
	КонецЕсли;

КонецПроцедуры

//Заполняет документ базовыми значениями, товарами и другими данными
//
Процедура ЗаполнениеДокумента(Товары, СтрокаТаблицы, СсылкаСчет) 
	
	Если СтрДлина(СтрокаТаблицы.КодТовара) = 0 Тогда
		Возврат;
	Иначе
		СтрокаТаблицы.КодТовара = "00000000000" + СтрокаТаблицы.КодТовара;
		СтрокаТаблицы.КодТовара = Прав(СтрокаТаблицы.КодТовара, 11);
	КонецЕсли;
	
	Если СтрДлина(СтрокаТаблицы.КодКонтрагента) = 0 Тогда
		Возврат;
	Иначе
		Пока СтрДлина(СтрокаТаблицы.КодКонтрагента) < 9 Цикл
			СтрокаТаблицы.КодКонтрагента = "0" + СтрокаТаблицы.КодКонтрагента;	
		КонецЦикла;
	КонецЕсли;
	
	Если СтрДлина(СтрокаТаблицы.Количество) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СтрокаТаблицы.ЦенаТовара) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Если НЕ СсылкаСчет.Партнер.Пустая() Тогда
		//Проверка контрагента и соглашения
		ПроверкаЗаполненияПоПартнеру(СсылкаСчет.Партнер, СсылкаСчет);
	КонецЕсли;
	
	Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")); 
	
	ТаблицаТоваров = Товары.Добавить();
	ТаблицаТоваров.СтавкаНДС 	= Перечисления.СтавкиНДС.БезНДС;
	ТаблицаТоваров.ДатаОтгрузки = ТекущаяДата();

	Если СтрокаТаблицы.ЦенаТовара <> Неопределено Тогда
		ТаблицаТоваров.Цена = Число(СтрокаТаблицы.ЦенаТовара);
	Иначе 
		ТаблицаТоваров.Цена = 0;	
	КонецЕсли;

	Если СтрокаТаблицы.КодТовара <> "00000000000" Тогда 
		ТаблицаТоваров.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрокаТаблицы.КодТовара);
	Иначе
		ТаблицаТоваров.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00000001000");
	КонецЕсли;
	
	
	
	
	
	Доступно = ПолучитьКоличествоДоступногоТовара(ТаблицаТоваров.Номенклатура, Склад);
	Если СтрокаТаблицы.Количество <> Неопределено Тогда 					
		КоличествоВЗаказе = Число(СтрокаТаблицы.Количество);
		ТаблицаТоваров.Количество		  = ?(КоличествоВЗаказе > Доступно, Доступно, КоличествоВЗаказе);
		ТаблицаТоваров.КоличествоУпаковок = ?(КоличествоВЗаказе > Доступно, Доступно, КоличествоВЗаказе);
	КонецЕсли;
	
	ТаблицаТоваров.Сумма = ТаблицаТоваров.Количество*ТаблицаТоваров.Цена;
   	ТаблицаТоваров.Сумма = ТаблицаТоваров.Сумма * 0.01 * (100 - ТаблицаТоваров.ПроцентРучнойСкидки); 
	Если Перечисления.СтавкиНДС.НДС20 = ТаблицаТоваров.СтавкаНДС Тогда
		ТаблицаТоваров.СуммаНДС = ТаблицаТоваров.Сумма  * 0.2;
	Иначе
		ТаблицаТоваров.СуммаНДС = 0;
	КонецЕсли;
	ТаблицаТоваров.СуммаСНДС = ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС;
	

	Если КоличествоВЗаказе>Доступно Тогда
		ДопСтрока = Товары.Добавить();
		ДопСтрока.Цена 					= ТаблицаТоваров.Цена;
		ДопСтрока.Номенклатура 			= ТаблицаТоваров.Номенклатура;
		ДопСтрока.ДатаОтгрузки  		= ТаблицаТоваров.ДатаОтгрузки + (Склад.СрокПоставки + 1)*86400;
		ДопСтрока.Количество 			= КоличествоВЗаказе - Доступно;
		ДопСтрока.КоличествоУпаковок 	= КоличествоВЗаказе - Доступно;
		ДопСтрока.Сумма 				= ДопСтрока.Количество*ДопСтрока.Цена;
	   	ДопСтрока.Сумма 				= ДопСтрока.Сумма * 0.01 * (100 - ДопСтрока.ПроцентРучнойСкидки);
		ДопСтрока.СтавкаНДС	 			= ТаблицаТоваров.СтавкаНДС;
		ДопСтрока.СуммаНДС				= ?(Перечисления.СтавкиНДС.НДС20 = ДопСтрока.СтавкаНДС, ДопСтрока.Сумма  * 0.2, 0);
		ДопСтрока.СуммаСНДС 			= ДопСтрока.Сумма + ДопСтрока.СуммаНДС;
	КонецЕсли;
	
	Если ТаблицаТоваров.Количество = 0 ИЛИ ТаблицаТоваров.КоличествоУпаковок = 0 Тогда
		Товары.Удалить(ТаблицаТоваров);		
	КонецЕсли;
		
													
	//Можно сделать настройкой

	Если СсылкаСчет.Организация.Наименование = "" Тогда
		СсылкаСчет.Организация = Справочники.Организации.НайтиПоНаименованию("КТС Поставка");
	КонецЕсли;
	
	Если СсылкаСчет.Партнер.Пустая() Тогда
		СсылкаСчет.Партнер 	= Справочники.Партнеры.НайтиПоКоду(СтрокаТаблицы.КодКонтрагента);
		//Проверка контрагента и соглашения
		ПроверкаЗаполненияПоПартнеру(СсылкаСчет.Партнер, СсылкаСчет);
		
		СсылкаСчет.Валюта 	= Справочники.Валюты.НайтиПоКоду("840");
		
		СсылкаСчет.НалогообложениеНДС 	= Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		СсылкаСчет.Менеджер			  	= Справочники.Партнеры.НайтиПоКоду(СтрокаТаблицы.КодКонтрагента).ОсновнойМенеджер;
		СсылкаСчет.Статус				= Перечисления.СтатусыЗаказовКлиентов.Согласован;
		СсылкаСчет.Приоритет			= Перечисления.Приоритеты.Высокий;
		СсылкаСчет.Склад				= Склад;
		СсылкаСчет.ЗаполнитьУсловияПродажПоУмолчанию();
		СсылкаСчет.Дата = ТекущаяДата();
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ПартнерыКонтактнаяИнформация.Представление     КАК Адрес,
			|	ПартнерыКонтактнаяИнформация.Вид.Представление КАК ВидАдреса
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|ГДЕ
			|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
			|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
		Запрос.УстановитьПараметр("Партнер", СсылкаСчет.Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СсылкаСчет.КТС_АдресДоставки = Выборка.Адрес;
			СсылкаСчет.КТС_ПунктНазначения = ModuleLibraryServer.GetLibrary("Маршруты адресный классификатор").ПолучитьГородПоАдресу(Выборка.Адрес);
		КонецЕсли;
	КонецЕсли;
	
	
	//Пересчет табличной части
		
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(СсылкаСчет.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(СсылкаСчет.Склад, СкладГруппа, СсылкаСчет.Товары, Ложь);
	
	ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(СсылкаСчет, Товары.Итог("Сумма"));
	
КонецПроцедуры
 
Процедура ПроверкаЗаполненияПоПартнеру(Партнер,Документ)
	Если ЗначениеЗаполнено(Документ.Контрагент) И ЗначениеЗаполнено(Документ.Соглашение) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоискСоглашения());
	Запрос.УстановитьПараметр("Партнер"		,Партнер);
	УникИдентификаторВалюты = Новый УникальныйИдентификатор("a56702e0-3ffc-11e0-9f98-001517115d85");
	Запрос.УстановитьПараметр("Валюта"	,Справочники.Валюты.ПолучитьСсылку(УникИдентификаторВалюты));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаИзРезультатаЗапроса.Количество() <> 1 Тогда 
		Документ.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Документ.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	Иначе 
		ВыборкаИзРезультатаЗапроса.Следующий();
		Документ.Контрагент = ВыборкаИзРезультатаЗапроса.Контрагент;
		Документ.Соглашение = ВыборкаИзРезультатаЗапроса.Соглашение;
		Если Документ.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда 
			ПродажиСервер.УстановитьДоступностьДоговора(Документ, Истина, Истина, Документ.Договор);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры



Функция ПолучитьТекстЗапросаПоискСоглашения()
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СоглашенияСКлиентами.Ссылка КАК Соглашение,
		|	СоглашенияСКлиентами.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	НЕ СоглашенияСКлиентами.ПометкаУдаления
		|	И СоглашенияСКлиентами.Партнер = &Партнер
		|	И НЕ СоглашенияСКлиентами.Типовое
		|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И СоглашенияСКлиентами.Валюта = &Валюта";
	Возврат ТекстЗапроса;
КонецФункции
                 
Функция ПолучитьКоличествоДоступногоТовара(Номенклатура, Склад)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	IsNull(ВНаличииОстаток,0) - IsNull(ВРезервеОстаток,0) КАК Остаток
		|
		|ИЗ 
		|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура И Склад = &Склад)
		|");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура); 
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), ?(Выборка.Остаток <= 0, 0, Выборка.Остаток), 0);
	
КонецФункции

Функция ПроверитьЗаказНаНаличиеВБазе(НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента
		|ГДЕ
		|	ВЫРАЗИТЬ(ДополнительнаяИнформацияПоДоставке КАК Строка(9)) = &НомерСчета
		|";
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область  СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.23";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. загрузка счетов с order-b2b.com [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. загрузка счетов с order-b2b.com [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. загрузка счетов с order-b2b.com [" + Версия + "]", "ЗагрузитьСчета();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

#КонецОбласти