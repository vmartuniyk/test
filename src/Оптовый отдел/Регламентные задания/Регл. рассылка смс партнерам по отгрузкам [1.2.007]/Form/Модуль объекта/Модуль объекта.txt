


Процедура ВыполнитьРассылку() Экспорт
	
	Запрос 					= Новый Запрос;
	Запрос.Текст 			= СформироватьТекстЗапроса();
	ОтчетОРассылкеПисем		= "";
	ОтчетОРассылкеПисемСМС	= "";

	УстановитьПараметрыЗапроса(Запрос);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаРезультат = РезультатЗапроса[9].Выгрузить();
	Для Каждого ЭлементВыборки Из ТаблицаРезультат Цикл
		
		АдресЭлектроннойПочты = НормализироватьАдресЭлектроннойПочты(ЭлементВыборки.email);
		НомерТелефона		  = НормализироватьНомерТелефона(ЭлементВыборки.Телефон, ЭлементВыборки.МобТелефон, ЭлементВыборки.МобТелефонДоп);
		
		Если АдресЭлектроннойПочты = Неопределено Тогда Продолжить; КонецЕсли;
		
		ОтчетОРассылкеПисем = ОтчетОРассылкеПисем + СформироватьОтчетОРассылкеПочты(ЭлементВыборки.Партнер, АдресЭлектроннойПочты, ЭлементВыборки.СуммаОплатить)+"<br />";
		
		Если НЕ ЭлементВыборки.ОтправлятьСМС	Тогда Продолжить; КонецЕсли;
		Если НомерТелефона = Неопределено 		Тогда Продолжить; КонецЕсли;
		ВыполнитьРассылкуСМС(НомерТелефона, ЭлементВыборки.СуммаОплатить, ЭлементВыборки.КвоМест);
		ОтчетОРассылкеПисемСМС = ОтчетОРассылкеПисемСМС + СформироватьОтчетОРассылкеСМС(ЭлементВыборки.Партнер, НомерТелефона, ЭлементВыборки.СуммаОплатить)+"<br/>";
		
	КонецЦикла;
	
	БиблиотекаОбработок	= ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		Возврат;	
	КонецЕсли;
	
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Кому = Новый Массив;		
	Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", ""));
	Кому.Добавить(Новый Структура("Адрес, Представление", "partners@ktc-ua.com", ""));
	//Кому.Добавить(Новый Структура("Адрес, Представление", "akomar@ktc.rovno.ua", ""));
	//Кому.Добавить(Новый Структура("Адрес, Представление", "gplusuk@ktc.rovno.ua", ""));

	
	ТекстПисьма = "";
	Если Не ПустаяСтрока(ОтчетОРассылкеПисемСМС) Тогда
		ТекстПисьма = "<h2>Отправленные СМС</h2>";
		ТекстПисьма = ТекстПисьма + ОтчетОРассылкеПисемСМС;
	КонецЕсли;
	Если Не ПустаяСтрока(ОтчетОРассылкеПисем) Тогда
		ТекстПисьма = ТекстПисьма + "<h2>Отправленные письма</h2>";
		ТекстПисьма = ТекстПисьма + ОтчетОРассылкеПисем;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПисьма) Тогда	
		ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма("Отчет о рассылки от " + ТекущаяДатаСеанса(), ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	КонецЕсли;
	ТаблицаДокументов = РезультатЗапроса[10].Выгрузить();
	Для Каждого Элемент Из ТаблицаДокументов Цикл 
		ДокументОбъект = Элемент.ДокументПоездки.ПолучитьОбъект();
		ДокументОбъект.СМСОтправленная = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	
КонецПроцедуры


// ЗАПРОС
			 
Функция СформироватьТекстЗапроса()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПоездкаЗаМаршрутом.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ КешПоездокЗаДень
	               |ИЗ
	               |	Документ.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
	               |ГДЕ
	               |	ПоездкаЗаМаршрутом.Дата >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |	И ПоездкаЗаМаршрутом.Дата <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |	И ПоездкаЗаМаршрутом.Проведен
	               |	И ПоездкаЗаМаршрутом.СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
	               |	И ПоездкаЗаМаршрутом.ВидПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_ВидыПоездки.ОсновнаяПоездка)
	               |	И НЕ ПоездкаЗаМаршрутом.СМСОтправленная
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.ДокументПоездки КАК ДокументПоездки,
	               |	КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.СкладПартнер КАК СкладПартнер
	               |ПОМЕСТИТЬ КешВыездов
	               |ИЗ
	               |	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута.СрезПоследних(&ТекущаяДата, ) КАК КТС_ФиксацияПрохожденияМаршрутаСрезПоследних
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	               |	И КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.ОтгрузкаЗавершена)
	               |	И КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.СкладПартнер = &СкладПартнер
	               |	И РАЗНОСТЬДАТ(КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.Период, &ТекущаяДата, МИНУТА) >= 20
	               |	И КТС_ФиксацияПрохожденияМаршрутаСрезПоследних.Период <= &ТекущаяДата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешПоездокЗаДень.Ссылка КАК ДокументПоездки
	               |ПОМЕСТИТЬ КешПоездок
	               |ИЗ
	               |	КешПоездокЗаДень КАК КешПоездокЗаДень
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешВыездов КАК КешВыездов
	               |		ПО КешПоездокЗаДень.Ссылка = КешВыездов.ДокументПоездки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоездкаЗаМаршрутом.ДокументПоездки КАК ДокументПоездки,
	               |	ПоездкаЗаМаршрутом.МестоДоставки КАК МестоДоставки,
	               |	ПоездкаЗаМаршрутом.Owner КАК Партнер
	               |ПОМЕСТИТЬ ОбъектыДоставки
	               |ИЗ
	               |	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
	               |ГДЕ
	               |	НЕ ПоездкаЗаМаршрутом.ИсключеноИзДоставки
	               |	И ПоездкаЗаМаршрутом.ДокументПоездки В
	               |			(ВЫБРАТЬ
	               |				КешПоездок.ДокументПоездки
	               |			ИЗ
	               |				КешПоездок)
	               |	И ПоездкаЗаМаршрутом.ПогруженоВМашину <> &ПустаяДата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка КАК Партнер,
	               |	КонтактнаяИнформация.Представление КАК email
	               |ПОМЕСТИТЬ КешEmailПартнеров
	               |ИЗ
	               |	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДоставки КАК ОбъектыДоставки
	               |		ПО КонтактнаяИнформация.Ссылка = ОбъектыДоставки.Партнер
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	               |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка КАК Партнер,
	               |	КонтактнаяИнформация.Представление КАК Телефон
	               |ПОМЕСТИТЬ КешТелефоныПартнеров
	               |ИЗ
	               |	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДоставки КАК ОбъектыДоставки
	               |		ПО КонтактнаяИнформация.Ссылка = ОбъектыДоставки.Партнер
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка КАК Партнер,
	               |	КонтактнаяИнформация.Представление КАК МобТелефон
	               |ПОМЕСТИТЬ КешМобТелефоныПартнеров
	               |ИЗ
	               |	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДоставки КАК ОбъектыДоставки
	               |		ПО КонтактнаяИнформация.Ссылка = ОбъектыДоставки.Партнер
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииМобТелефон)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактнаяИнформация.Ссылка КАК Партнер,
	               |	КонтактнаяИнформация.Представление КАК МобТелефонДоп
	               |ПОМЕСТИТЬ КешМобТелефоныПартнеровДоп
	               |ИЗ
	               |	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДоставки КАК ОбъектыДоставки
	               |		ПО КонтактнаяИнформация.Ссылка = ОбъектыДоставки.Партнер
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	               |			И (КонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииМобТелефонДоп)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДопРеквизиты.Ссылка КАК Партнер,
	               |	ДопРеквизиты.Значение КАК ОтправлятьСМС
	               |ПОМЕСТИТЬ КешФлагОтправкиСМС
	               |ИЗ
	               |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыДоставки КАК ОбъектыДоставки
	               |		ПО ДопРеквизиты.Ссылка = ОбъектыДоставки.Партнер
	               |			И (ДопРеквизиты.Свойство = &Свойство)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбъектыДоставки.Партнер КАК Партнер,
	               |	ЕСТЬNULL(ФлагОтправкиСМС.ОтправлятьСМС, ЛОЖЬ) КАК ОтправлятьСМС,
	               |	ЕСТЬNULL(КешEmailПартнеров.email, """""""") КАК email,
	               |	ЕСТЬNULL(КешТелефоныПартнеров.Телефон, """""""") КАК Телефон,
	               |	ЕСТЬNULL(КешМобТелефоныПартнеров.МобТелефон, """""""") КАК МобТелефон,
	               |	ЕСТЬNULL(КешМобТелефоныПартнеровДоп.МобТелефонДоп, """""""") КАК МобТелефонДоп,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, NULL) = NULL
	               |			ТОГДА 0
	               |		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером = 1
	               |			ТОГДА 0
	               |		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером < 0
	               |			ТОГДА 0
	               |		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером = 0
	               |			ТОГДА ПоездкаЗаМаршрутомФинансы.СуммаУчета
	               |		ИНАЧЕ ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером
	               |	КОНЕЦ КАК СуммаОплатить,
	               |	ПоездкаЗаМаршрутомФинансы.ДокументПоездки КАК ДокументПоездки,
	               |	КоличествоМестДоставки.КвоМест
	               |ИЗ
	               |	ОбъектыДоставки КАК ОбъектыДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
	               |		ПО ОбъектыДоставки.ДокументПоездки = ПоездкаЗаМаршрутомФинансы.ДокументПоездки
	               |			И ОбъектыДоставки.Партнер = ПоездкаЗаМаршрутомФинансы.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешEmailПартнеров КАК КешEmailПартнеров
	               |		ПО ОбъектыДоставки.Партнер = КешEmailПартнеров.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешТелефоныПартнеров КАК КешТелефоныПартнеров
	               |		ПО ОбъектыДоставки.Партнер = КешТелефоныПартнеров.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешМобТелефоныПартнеров КАК КешМобТелефоныПартнеров
	               |		ПО ОбъектыДоставки.Партнер = КешМобТелефоныПартнеров.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешМобТелефоныПартнеровДоп КАК КешМобТелефоныПартнеровДоп
	               |		ПО ОбъектыДоставки.Партнер = КешМобТелефоныПартнеровДоп.Партнер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешФлагОтправкиСМС КАК ФлагОтправкиСМС
	               |		ПО ОбъектыДоставки.Партнер = ФлагОтправкиСМС.Партнер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыДоставки.МестоДоставки) КАК КвоМест,
	               |			ОбъектыДоставки.Партнер КАК Партнер
	               |		ИЗ
	               |			ОбъектыДоставки КАК ОбъектыДоставки
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ОбъектыДоставки.Партнер) КАК КоличествоМестДоставки
	               |		ПО ОбъектыДоставки.Партнер = КоличествоМестДоставки.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КешПоездок.ДокументПоездки КАК ДокументПоездки
	               |ИЗ
	               |	КешПоездок КАК КешПоездок";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапроса()
 
Процедура УстановитьПараметрыЗапроса(ОбъектЗапрос)

	ОбъектЗапрос.УстановитьПараметр("ТекущаяДата"	, ТекущаяДатаСеанса());
	ОбъектЗапрос.УстановитьПараметр("ПустаяДата"	, Дата(1,1,1));
	ОбъектЗапрос.УстановитьПараметр("Организация"	, Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));
	ОбъектЗапрос.УстановитьПараметр("Свойство"		, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("8d0c642a-1f3a-11e2-9d4d-001e673c80fc")));
	ОбъектЗапрос.УстановитьПараметр("ТипКонтактнойИнформацииМобТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ОбъектЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииМобТелефон", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85")));
	ОбъектЗапрос.УстановитьПараметр("ТипКонтактнойИнформацииМобТелефонДоп", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ОбъектЗапрос.УстановитьПараметр("ВидКонтактнойИнформацииМобТелефонДоп", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("a8ec65fe-c74a-11e1-9d4d-001e673c80fc")));
    ОбъектЗапрос.УстановитьПараметр("СкладПартнер", Справочники.КТС_ГеографическиеРасположенияПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("2081c4ab-2a5d-11e3-bb25-001e673c80fc")));
КонецПроцедуры 


// CRM


// Элетронная почта
Функция НормализироватьАдресЭлектроннойПочты(знач ПроверяемыйАдрес)	
		
	Результат  		 = РазобратьСтрокуСПочтовымиАдресами(ПроверяемыйАдрес);	
	КоличествоСтрок  = Результат.ВГраница();
	АдресРезультат	 = "";	
	
	Если Результат 		 = Неопределено 	Тогда Возврат Неопределено; КонецЕсли;
	Если КоличествоСтрок = -1 				Тогда Возврат Неопределено; КонецЕсли;

	
	Для Индекс = 0 По КоличествоСтрок Цикл
		АдресДляПроверки = Результат[Индекс].Адрес;
		Если СтрЧислоВхождений(АдресДляПроверки,"@") <> 1 Тогда
			Продолжить; 
		КонецЕсли;
		ДоменныйАдрес = Прав(АдресДляПроверки, СтрДлина(АдресДляПроверки) - Найти(АдресДляПроверки,"@"));
		Если СтрДлина(ДоменныйАдрес) > 0 Тогда
			Если СтрЧислоВхождений(ДоменныйАдрес,".") < 1 ИЛИ Лев(ДоменныйАдрес,1) = "." ИЛИ Прав(ДоменныйАдрес,1) = "." Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Возврат АдресДляПроверки;
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаАдресов)
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	СимволыРазделители = ";,";
	
	Индекс = 1;               
	Накопитель = "";          
	                          
	ПолноеИмяАдресата = "";   
	ПочтовыйАдрес = "";      
	СтадияРазбора = 1; 
		
	Пока Индекс <= СтрДлина(СтрокаАдресов) Цикл
		
		Символ = Сред(СтрокаАдресов, Индекс, 1);
		
		Если      Символ = " " Тогда
			Индекс = ? ((ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1) > Индекс,
			             ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1,
			             Индекс);
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
				СтадияРазбора = 3;
			КонецЕсли;
			Накопитель = "";
		ИначеЕсли Символ = "@" Тогда
			Если      СтадияРазбора = 1 Тогда
				СтадияРазбора = 2;
				
				Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
					Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
				
				Накопитель = Накопитель + Символ;
			ИначеЕсли СтадияРазбора = 2 Тогда
				Возврат Неопределено;
			ИначеЕсли СтадияРазбора = 3 Тогда
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли Найти(СимволыРазделители, Символ) > 0 Тогда
			
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
			КонецЕсли;
			
			СтадияРазбора = 1;
			
			Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
				Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
			КонецЕсли;
			
			ПочтовыйАдрес = "";
			ПолноеИмяАдресата = "";
			Накопитель = "";
		Иначе
			Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
				Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если      СтадияРазбора = 1 Тогда
		ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
	ИначеЕсли СтадияРазбора = 2 Тогда
		ПочтовыйАдрес = Накопитель;
	КонецЕсли;

	Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
		Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

Функция ПропуститьПробелы(знач Строка, знач ТекущийИндекс, знач ПропускаемыйСимвол)	
	Результат = ТекущийИндекс;	
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	Возврат ТекущийИндекс;	
КонецФункции


// Номера телефонов
Функция НормализироватьНомерТелефона(знач НомерТелефона, знач НомерМобильногоТелефона, знач НомерМобильногоТелефонаДоп)

	НомерРезультат = ОбработатьМассивНомеров(РазобратьСтрокуСТелефонами(НомерТелефона));
	Если НомерРезультат <> Неопределено Тогда
	    Возврат НомерРезультат;
	КонецЕсли;

	НомерРезультат = ОбработатьМассивНомеров(РазобратьСтрокуСТелефонами(НомерМобильногоТелефона));
	Если НомерРезультат <> Неопределено Тогда
	    Возврат НомерРезультат;
	КонецЕсли;
	
	НомерРезультат = ОбработатьМассивНомеров(РазобратьСтрокуСТелефонами(НомерМобильногоТелефонаДоп));
	Если НомерРезультат <> Неопределено Тогда
	    Возврат НомерРезультат;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции // НормализироватьНомерТелефона()

Функция РазобратьСтрокуСТелефонами(знач НомерТелефона)

	МассивНомеров 		= Новый Массив;
	СимволыРазделители 	= ";,";	
	Индекс				= 1;
	Накопитель			= "";
	
	Пока Индекс <= СтрДлина(НомерТелефона) Цикл
		Символ = Сред(НомерТелефона, Индекс, 1);
		Если ЭтоЦифра(Символ) Тогда
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		Если Найти(СимволыРазделители, Символ) > 0 Тогда
			МассивНомеров.Добавить(Накопитель);
			Накопитель = "";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Не ПустаяСтрока(Накопитель) Тогда
		МассивНомеров.Добавить(Накопитель);
	КонецЕсли;
	
	Возврат МассивНомеров;

КонецФункции // РазобратьСтрокуСТелефонами()

Функция ОбработатьМассивНомеров(МассивНомеров)
	
	МассивКодовОператоров = Новый Массив;
	МассивКодовОператоров.Добавить("039");
	МассивКодовОператоров.Добавить("050");
	МассивКодовОператоров.Добавить("063");
	МассивКодовОператоров.Добавить("066");
	МассивКодовОператоров.Добавить("067");
	МассивКодовОператоров.Добавить("068");
	МассивКодовОператоров.Добавить("091");
	МассивКодовОператоров.Добавить("092");
	МассивКодовОператоров.Добавить("093");
	МассивКодовОператоров.Добавить("094");
	МассивКодовОператоров.Добавить("095");
	МассивКодовОператоров.Добавить("096");
	МассивКодовОператоров.Добавить("097");
	МассивКодовОператоров.Добавить("098");
	МассивКодовОператоров.Добавить("099");
	
	Для каждого Номер Из МассивНомеров Цикл
		НомерРезультат = Номер;
		Если Лев(НомерРезультат, 1) = "3" Тогда НомерРезультат = Сред(НомерРезультат, 2); КонецЕсли;
		Если Лев(НомерРезультат, 1) = "8" Тогда НомерРезультат = Сред(НомерРезультат, 2); КонецЕсли;
		
		Если СтрДлина(НомерРезультат) < 10 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерРезультат 	= Лев(НомерРезультат, 10);		
		КодОператора 	= Лев(НомерРезультат, 3);
		
		Если МассивКодовОператоров.Найти(КодОператора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат НомерРезультат;
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции // ОбработатьМассивНомеров()
 

Функция ЭтоЦифра(Символ)
 	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ Код>=58, Ложь, Истина);	 
КонецФункции
 



// Рассылка

Процедура ВыполнитьРассылкуПочты(АдресЭлектроннойПочты, СуммаОплаты)
	БиблиотекаОбработок	= ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		Возврат;	
	КонецЕсли;
	
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f2-df88-11e0-8b5f-001517115d85"));
	
	Кому = Новый Массив;		
	Кому.Добавить(Новый Структура("Адрес, Представление", АдресЭлектроннойПочты, ""));
	
	ТекстПисьма = "Доброго дня!" + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "У зв'язку із запланованим на сьогодні відвантаженням товару, для Вас відправлено автоматично згенерований лист." + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Прохання при отриманні товару оплатити суму не менше " + Формат(СуммаОплаты, "ЧДЦ=2; ЧРД=.") + " USD. Лише за умови повної оплати, Вам буде передано товар." + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Дякуємо за увагу!" + Символы.ПС;
	
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма("Інформація по відвантаженням з order-b2b.com", ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.ПростойТекст);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
КонецПроцедуры
 
Процедура ВыполнитьРассылкуСМС(НомерТелефона, СуммаОплаты, КвоМест)
	
	login = "0677979332";
	password = "lkasd894KK";
	from = "order-b2b.com";
	Сервер = "alphasms.com.ua";
	СтрокаПараметраПолучения = "api/http.php?version=http&login=" + login + "&password=" + password + "&command=";
	
	ОстатокНаСчете = ЗапросHTTP(СтрокаПараметраПолучения + "balance", Сервер);
	Если ОстатокНаСчете < 1 Тогда
		ВызватьИсключение "Внимание! Остаток на alphasms.com.ua меньше 1 грн.";
	КонецЕсли;
	
	ТекстСообщения ="B2B доставка, "+Формат(КвоМест,"ЧЦ=15")+" місць, прохання підготувати " + Формат(СуммаОплаты, "ЧДЦ=2; ЧРД=.");
	КодСМССообщения = ЗапросHTTP(СтрокаПараметраПолучения + "send&from=" + from + "&to=" + НомерТелефона + "&message=" + ТекстСообщения, Сервер);
	
КонецПроцедуры

Функция ЗапросHTTP(СтрокаПолучения, Сервер)
	ИмяВходящегоФайла 	= "" + КаталогВременныхФайлов() + "outsms.txt";
	Текст 				= Новый ТекстовыйДокумент();
	Попытка
		Соединение = Новый HTTPСоединение(Сервер,,,,);
		Соединение.Получить(СтрокаПолучения, ИмяВходящегоФайла,);
		ВходящийФайл = Новый Файл(ИмяВходящегоФайла);
		Если НЕ ВходящийФайл.Существует() Тогда
			Сообщить("Не удалось получить ответ с сервера"); 
			Возврат Неопределено;
		КонецЕсли;
		ВыбСтатус = "";
		Текст.Прочитать(ИмяВходящегоФайла, КодировкаТекста.UTF8);
		КолСтрок = Текст.КоличествоСтрок();
		Для Инд = 1 По КолСтрок Цикл
			Стр = Текст.ПолучитьСтроку(Инд);
			ВыбСтатус = ВыбСтатус + Стр + Символы.ПС;
			Если Лев(Стр, 8) = "balance:" Тогда
				Стр = СтрЗаменить(Стр, "balance:", "");
				Возврат Число(Стр);
			ИначеЕсли Лев(Стр, 3) = "id:" Тогда
				Стр = СтрЗаменить(Стр, "id:", "");
				Возврат Число(Стр);
			ИначеЕсли Лев(Стр, 5) = "code:" Тогда
				Стр = СтрЗаменить(Стр, "code:", "");
				Возврат Число(Стр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("Ощибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Возврат Неопределено;
Конецфункции
 

Функция СформироватьОтчетОРассылкеПочты(Партнер, АдресЭлектроннойПочты, СуммаОплатить)

	ТекстПисьма = "Доброго дня!" + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Для Вас сьогодні заплановано відвантаження товару." + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Прошу при отриманні товару оплатити сумму не менше " + Формат(СуммаОплатить, "ЧДЦ=2; ЧРД=.") + " USD. Лише за умови повної оплати товар буде передано вам." + Символы.ПС;
	ТекстПисьма = ТекстПисьма + "Дякую!" + Символы.ПС;
	
	ТекстОтчета = "<table style='border-collapse: collapse; border:2px solid white; background: #FFFACD; width:100%;'>";
	ТекстОтчета = ТекстОтчета + "<tr><td style='border:2px solid white;'><b>Партнер</b></td><td style='border:2px solid white;'>"+Партнер+"</td></tr>";
	ТекстОтчета = ТекстОтчета + "<tr><td style='border:2px solid white;'><b>e-mail</b></td><td style='border:2px solid white;'>"+АдресЭлектроннойПочты+"</td></tr>";
	ТекстОтчета = ТекстОтчета + "<tr><td style='border:2px solid white;'><b>Текст</b></td><td style='border:2px solid white;'>"+ТекстПисьма+"</td></tr>";
	ТекстОтчета = ТекстОтчета + "</table>";
	
	Возврат ТекстОтчета;

КонецФункции // СформироватьОтчетОРассылкеПочты()
 
Функция СформироватьОтчетОРассылкеСМС(Партнер, НомерТелефона, СуммаОплатить)

	ТекстСообщения = "Відвантаження при оплаті від " + Формат(СуммаОплатить, "ЧДЦ=2; ЧРД=.") + ".";
	
	ТекстОтчета = "<table style='border-collapse: collapse; border:2px solid white; background: #FFFACD; width:100%;'>";
	ТекстОтчета = ТекстОтчета + "<tr><td style='border:2px solid white;'><b>Партнер</b></td><td style='border:2px solid white;'>"+Партнер+"</td></tr>";
	ТекстОтчета = ТекстОтчета + "<tr><td style='border:2px solid white;'><b>e-mail</b></td><td style='border:2px solid white;'>"+НомерТелефона+"</td></tr>";
	ТекстОтчета = ТекстОтчета + "<tr><td style='border:2px solid white;'><b>Текст</b></td><td style='border:2px solid white;'>"+ТекстСообщения+"</td></tr>";
	ТекстОтчета = ТекстОтчета + "</table>";
	
	Возврат ТекстОтчета;

КонецФункции // СформироватьОтчетОРассылкеСМС()
 




// Информация о внешней обработке


Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.2.008";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. рассылка смс партнерам по отгрузкам [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. рассылка смс партнерам по отгрузкам [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. рассылка смс партнерам по отгрузкам [" + Версия + "]", "ВыполнитьРассылку();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры


