
#Область ИнтерфейсАвтоматическихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиcокТестов = Новый Массив;	
	
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаПартнерыДоступКПене");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаПартнерыДоступКБонусам");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаРаботникиДоступКБонусам");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаЗарплатноеСоглашение");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаЗарплатныйДоговор");
	СпиcокТестов.Добавить("Тест_ПолучитьТекстЗапросаОстатокЗадолженности");

	Возврат СпиcокТестов;
	
КонецФункции

Процедура Тест_ПолучитьТекстЗапросаПартнерыДоступКПене() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаПартнерыДоступКПене");
	ТекстЗапроса = ПолучитьТекстЗапросаПартнерыДоступКПене();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаПартнерыДоступКБонусам() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаПартнерыДоступКБонусам");
	ТекстЗапроса = ПолучитьТекстЗапросаПартнерыДоступКБонусам();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаРаботникиДоступКБонусам() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаРаботникиДоступКБонусам");
	ТекстЗапроса = ПолучитьТекстЗапросаРаботникиДоступКБонусам();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаЗарплатноеСоглашение() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаЗарплатноеСоглашение");
	ТекстЗапроса = ПолучитьТекстЗапросаЗарплатноеСоглашение();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаЗарплатныйДоговор() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаЗарплатныйДоговор");
	ТекстЗапроса = ПолучитьТекстЗапросаЗарплатныйДоговор();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

Процедура Тест_ПолучитьТекстЗапросаОстатокЗадолженности() Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, "ПолучитьТекстЗапросаОстатокЗадолженности");
	ТекстЗапроса = ПолучитьТекстЗапросаОстатокЗадолженности();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	              
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура order_b2b_com_Пеня() Экспорт
	
	//Начисление пени
	ЗапросПоПартнерам = Новый Запрос;
	ЗапросПоПартнерам.Текст = ПолучитьТекстЗапросаПартнерыДоступКПене();
	ЗапросПоПартнерам.УстановитьПараметр("ИспользоватьПеню", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("037b8a0c-6fe2-11e0-b296-001fd05d5574")));
	ЗапросПоПартнерам.УстановитьПараметр("РаботникиОгранизации", Справочники.ГруппыДоступаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("2807d719-e685-11e0-8b5f-001517115d85")));
	ВыборкаПоПартнерам = ЗапросПоПартнерам.Выполнить().Выбрать();
	Пока ВыборкаПоПартнерам.Следующий() Цикл
		НачислитьПеню(ВыборкаПоПартнерам.Ссылка);
	КонецЦикла;
	
	//Начисление бонусов
	ЗапросПоБонусам = Новый Запрос;
	ЗапросПоБонусам.Текст = ПолучитьТекстЗапросаПартнерыДоступКБонусам();
	ЗапросПоБонусам.УстановитьПараметр("ИспользоватьБонусы", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("d55743c8-77ee-11e0-b51c-001517115d85")));
	ЗапросПоБонусам.УстановитьПараметр("РаботникиОгранизации", Справочники.ГруппыДоступаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("2807d719-e685-11e0-8b5f-001517115d85")));
	ВыборкаПоБонусам = ЗапросПоБонусам.Выполнить().Выбрать();                                                                                 
	Пока ВыборкаПоБонусам.Следующий() Цикл
		НачислитьБонусы(ВыборкаПоБонусам.Ссылка);
	КонецЦикла;
	
	//Начисление бонусов работникам организации
	ЗапросПоБонусам.Текст = ПолучитьТекстЗапросаРаботникиДоступКБонусам(); 
	ВыборкаПоБонусам = ЗапросПоБонусам.Выполнить().Выбрать();
	Пока ВыборкаПоБонусам.Следующий() Цикл
		НачислитьБонусыРаботникамОрганизации(ВыборкаПоБонусам.Ссылка);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НачислитьПеню(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Курсы валют
		|ВЫБРАТЬ
		|	Валюта,
		|	Курс / Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют	
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Аналитика
		|ВЫБРАТЬ
		|	Партнер,
		|	Организация,
		|	КлючАналитики
		|ПОМЕСТИТЬ Аналитика	
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам	
		|ГДЕ
		|	Организация = &Организация
		|И	Партнер 	= &Партнер
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики		
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Долги
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	Сумма(	ВЫБОР ВалютаУправленческогоУчета.Значение
		|				КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|			КОНЕЦ
		|		  ) КАК Долг	
        |
		|ПОМЕСТИТЬ Долги
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|								
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток 				
		|		ИЗ
		|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
		|	) КАК Долги
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО 	Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Долги.Валюта						
        |
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. ГрафикОплат
		|ВЫБРАТЬ
		|	Ссылка,
		|	МИНИМУМ(ДатаПлатежа) КАК ДатаПлатежа
		|	
		|ПОМЕСТИТЬ ГрафикОплат
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты
		|ГДЕ
		|	Ссылка.Организация  = &Организация
		|И	Ссылка.Партнер 		= &Партнер
        |
		|СГРУППИРОВАТЬ ПО 
		|	Ссылка
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Возвраты товаров клиентов
		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента)				КАК Регистратор,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента).Валюта		КАК Валюта
		|ПОМЕСТИТЬ ПервыйКеш_Возвраты        
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.ВозвратТоваровОтКлиента
		|И	СуммаОборот <> 0
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	КлючАналитики
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//6. Возвраты товаров клиентов привязаные к реализациям
		|ВЫБРАТЬ
		|	Возвраты.КлючАналитики,
		|	Возвраты.Валюта,										
		|   ВозвратыТовары.ДокументРеализации,
		|   Сумма(ВозвратыТовары.СуммаСНДС) КАК СуммаРасход
		|ПОМЕСТИТЬ ВторойКеш_Возвраты        
		|ИЗ
		|	ПервыйКеш_Возвраты КАК Возвраты
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратыТовары
		|ПО	ВозвратыТовары.Ссылка = Возвраты.Регистратор
        |
		|СГРУППИРОВАТЬ ПО 
		|	Возвраты.КлючАналитики,
		|	Возвраты.Валюта,										
		|   ВозвратыТовары.ДокументРеализации	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//7. Обороты клиентов cache
		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг)				КАК Регистратор,
		|	Регистратор.МоментВремени КАК МоментВремени,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента 	КАК ЗаказКлиента,	
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа  	КАК ДатаПлатежа,
		|	Период,
		|	Валюта,
		|	СуммаПриход,
		|	СуммаОборот
		|		
		|ПОМЕСТИТЬ Cache_Обороты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|И	СуммаОборот <> 0			
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//8. Обороты клиентов
		|ВЫБРАТЬ
		| 	Аналитика.Партнер КАК Партнер,
		|	Обороты.Регистратор,
		|	Обороты.Период,
		|	ВЫБОР
		|		КОГДА Обороты.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка) 
		|		  ИЛИ Обороты.ЗаказКлиента = Неопределено
		|		  ИЛИ Обороты.ЗаказКлиента = NULL
		|		ТОГДА Обороты.ДатаПлатежа
		|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
		|	КОНЕЦ КАК ДатаПлатежа,
		|   Обороты.МоментВремени,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаПриход 		
		|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ -	ВЫБОР
		|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
		|			  	ТОГДА 0
		|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
		|				ТОГДА Возвраты.СуммаРасход
		|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
		|			КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаОборот
		|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ -	ВЫБОР
		|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
		|		 	 	ТОГДА 0
		|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
		|				ТОГДА Возвраты.СуммаРасход
		|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
		|			КОНЕЦ КАК СуммаОборот
		|   
		|ПОМЕСТИТЬ ОборотыПоКлиенту
		|ИЗ
		|	Cache_Обороты КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО Аналитика.КлючАналитики = Обороты.КлючАналитики 						
        |
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВторойКеш_Возвраты КАК Возвраты
		|ПО Возвраты.КлючАналитики 		= Обороты.КлючАналитики
		|И	Возвраты.ДокументРеализации = Обороты.Регистратор
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВозвраты
		|ПО	КурсыВозвраты.Валюта = Возвраты.Валюта
        |
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
		|ПО ГрафикОплат.Ссылка = Обороты.ЗаказКлиента
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Обороты.Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПервыйКеш_Возвраты;
		|УНИЧТОЖИТЬ ВторойКеш_Возвраты;
		|УНИЧТОЖИТЬ Аналитика;
		|УНИЧТОЖИТЬ КурсыВалют;
		|УНИЧТОЖИТЬ ГрафикОплат;
		|УНИЧТОЖИТЬ Cache_Обороты;	
		//////////////////////////////////////////////////////////////////////////////////////////
		//9. Обороты по месяцам
		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
		|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
		|	СУММА(СуммаОборот) КАК Сумма
		|	
		|ПОМЕСТИТЬ ОборотыПоМесяцам	
		|ИЗ
		|	ОборотыПоКлиенту 
		|															
		|СГРУППИРОВАТЬ ПО
		|	   Партнер,
		|	   НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ),
		|	   КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ)
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//10. По месяцам наростающие
		|ВЫБРАТЬ
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Сумма,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
		|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
		|ИЗ
		|   ОборотыПоМесяцам КАК ОборотыПоМесяцам
		|   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
		|ПО ОборотыПоМесяцам.Партнер     = ОборотыПоМесяцамКопия.Партнер
		|И  ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода
        |
		|СГРУППИРОВАТЬ ПО
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.Сумма
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//11. Долги по выбранным месяцам
		|ВЫБРАТЬ
		|		Долги.Партнер,
		|		Долги.Долг,
		|		ОборотыПоМесНарастающие.НачПериода,
		|		ОборотыПоМесНарастающие.КонПериода,
		|		Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
		|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
		|ИЗ
		|		Долги КАК Долги
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
		|		ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
		|		И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
		|		И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//12. Движения по выбранным месяцам
		|ВЫБРАТЬ
		|		Обороты.Партнер,
		|		Обороты.МоментВремени,
		|		Обороты.Регистратор,
		|		Обороты.Период,
		|		ДолгиПоВыбМесяцам.Долг,
		|		ДолгиПоВыбМесяцам.ОстатокДолга,
		|		Обороты.Сумма,
		|		Обороты.ДатаПлатежа КАК ДатаОтсрочки
		|	
		|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
		|ИЗ
		|	ОборотыПоКлиенту КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
		|ПО Обороты.Партнер 		= ДолгиПоВыбМесяцам.Партнер
		|И  Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
		|И  Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//13. Движения по выбранным месяцам наростающие
		|ВЫБРАТЬ
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияПредварительные
		|ИЗ
		|	   ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
		|	   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
		|ПО 	ДвиженияПоВыбМесяцам.Партнер 		= ДвиженияПоВыбМесяцамКопия.Партнер
		|И  	ДвиженияПоВыбМесяцам.ДатаОтсрочки  <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|И	ВЫБОР
		|		КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки   = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|		ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	   
		|СГРУППИРОВАТЬ ПО
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОборотыПоМесяцам;
		|УНИЧТОЖИТЬ ОборотыПоМесяцамНарастающие;
		|УНИЧТОЖИТЬ Долги;
		|УНИЧТОЖИТЬ ДолгиПоВыбраннымМесяцам;
		|УНИЧТОЖИТЬ ДвиженияПоВыбраннымМесяцам;
		/////////////////////////////////////////////////////////////////////////////////////////////
		//14.       
		|ВЫБРАТЬ
		|	   ДвиженияПредв.Партнер,
		|	   ДвиженияПредв.Регистратор,
		|	   ДвиженияПредв.Период,
		|	   ДвиженияПредв.МоментВремени,
		|	   ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
		|	   ДвиженияПредв.Сумма,
		|	   ДвиженияПредв.ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияОкончательные
		|ИЗ
		|	   ДвиженияПредварительные КАК ДвиженияПредв
		|ГДЕ
		|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
		|И 	ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		//15. 
		|ВЫБРАТЬ
		|	IsNull(СУММА(ВЫБОР
		|				КОГДА Обороты.ДатаПлатежа < &ТекущаяДата
		|				ТОГДА 	ВЫБОР
		|	   						КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
		|							ТОГДА IsNull(ДвиженияОконч.СуммаДолга, 0)
		|							ИНАЧЕ IsNull(Обороты.Сумма, 0)
		|	   					КОНЕЦ
		|				ИНАЧЕ 0
		|		КОНЕЦ
		|		), 0) КАК СуммаПросроченныхОплат
        |
		|ИЗ
		|	   ОборотыПоКлиенту  КАК Обороты
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
		|ПО ДвиженияОконч.Партнер 		= Обороты.Партнер
		|И  ДвиженияОконч.ДатаОтсрочки  <= Обороты.ДатаПлатежа 
		|И	ВЫБОР
		|		КОГДА ДвиженияОконч.ДатаОтсрочки = Обороты.ДатаПлатежа 
		|		ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОборотыПоКлиенту;
		|УНИЧТОЖИТЬ ДвиженияПредварительные;
		|УНИЧТОЖИТЬ ДвиженияОкончательные;";
		
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Партнер", 	 Партнер);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Результат = Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	СуммаПросрочки = 0;
	Пока Выборка.Следующий() Цикл
		СуммаПросрочки = Выборка.СуммаПросроченныхОплат;	
	КонецЦикла;
	
	Если СуммаПросрочки < 3 Тогда
		Возврат;
	КонецЕсли;
	
	Соглашение 							= Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор("4e73f9c0-77d4-11e0-b51c-001517115d85"));//НайтиПоНаименованию("Начисление пени (14 дней)");	
	ДокументОбъект 						= Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина, Истина);
	ДокументОбъект.ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	ДокументОбъект.Дата					= ТекущаяДата();
	ДокументОбъект.ДатаПлатежа			= ТекущаяДата() + 60*60*24*14;
	ДокументОбъект.Организация 			= Соглашение.Организация;
	ДокументОбъект.Подразделение    	= Справочники.СтруктураПредприятия.НайтиПоКоду("000000004");
	ДокументОбъект.Склад				= Соглашение.Склад;
	ДокументОбъект.Менеджер				= Партнер.ОсновнойМенеджер;
	ДокументОбъект.Партнер				= Партнер;
	ДокументОбъект.Контрагент			= ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	ДокументОбъект.Соглашение			= Соглашение;
	ДокументОбъект.Договор				= Соглашение;	
	ДокументОбъект.ХозяйственнаяОперация= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ДокументОбъект.Статус				= Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	ДокументОбъект.Валюта				= Соглашение.Валюта;
	ДокументОбъект.ВалютаВзаиморасчетов	= Соглашение.Валюта;
	ДокументОбъект.НалогообложениеНДС	= Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ДокументОбъект.Комментарий			= "Нарахування пені за просрочені оплати в суммі : " + СуммаПросрочки;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", Партнер);
	СтруктураПараметров.Вставить("Контрагент", ДокументОбъект.Контрагент);
	СтруктураПараметров.Вставить("Организация", Соглашение.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ДокументОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		СтруктураПараметров,
		?(ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			ДокументОбъект.ХозяйственнаяОперация
		),
		Соглашение.Валюта
	);
	
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	Номенклатура 					= Справочники.Номенклатура.НайтиПоКоду("00000012328");
	СуммаПени						= СуммаПросрочки * 0.36 / 12 / 30;
	СуммаПени						= ?(СуммаПени < 0.01, 0.01, СуммаПени);
	НоваяСтрока.Номенклатура 		= Номенклатура;
	НоваяСтрока.Количество 			= 1;
	НоваяСтрока.КоличествоУпаковок 	= 1;
	НоваяСтрока.Цена				= СуммаПени;
	НоваяСтрока.Сумма				= СуммаПени;
	НоваяСтрока.Упаковка			= Номенклатура.ЕдиницаИзмерения;
	НоваяСтрока.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС			= 0;
	НоваяСтрока.СуммаСНДС			= СуммаПени;

		
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;		
	
КонецПроцедуры

Процедура НачислитьБонусы(Партнер)
	
	Дата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Курсы валют
		|ВЫБРАТЬ
		|	Валюта,
		|	Курс / Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют	
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Аналитика
		|ВЫБРАТЬ
		|	Партнер,
		|	Организация,
		|	КлючАналитики
		|ПОМЕСТИТЬ Аналитика	
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам	
		|ГДЕ
		|	Организация = &Организация  И Партнер = &Партнер
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики		
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Долги
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	Сумма(	ВЫБОР ВалютаУправленческогоУчета.Значение
		|				КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|			КОНЕЦ
		|		  ) КАК Долг	
        |
		|ПОМЕСТИТЬ Долги
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|								
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток 				
		|		ИЗ
		|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
		|	) КАК Долги
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО 	Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Долги.Валюта						
        |
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. ГрафикОплат
		|ВЫБРАТЬ
		|	Ссылка,
		|	МИНИМУМ(ДатаПлатежа) КАК ДатаПлатежа
		|	
		|ПОМЕСТИТЬ ГрафикОплат
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты
		|ГДЕ
		|	Ссылка.Организация  = &Организация
		|И	Ссылка.Партнер 		= &Партнер
        |
		|СГРУППИРОВАТЬ ПО 
		|	Ссылка
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Обороты клиентов cache
		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг)				КАК Регистратор,
		|	Регистратор.МоментВремени КАК МоментВремени,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента 	КАК ЗаказКлиента,	
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа  	КАК ДатаПлатежа,
		|	Период,
		|	Валюта,
		|	СуммаПриход,
		|	СуммаОборот
		|		
		|ПОМЕСТИТЬ Cache_Обороты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|И	СуммаОборот <> 0			
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//6. Обороты клиентов
		|ВЫБРАТЬ
		| 	Аналитика.Партнер КАК Партнер,
		|	Обороты.Регистратор,
		|	Обороты.Период,
		|	ВЫБОР
		|		КОГДА Обороты.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка) 
		|		  ИЛИ Обороты.ЗаказКлиента = Неопределено
		|		  ИЛИ Обороты.ЗаказКлиента = NULL
		|		ТОГДА Обороты.ДатаПлатежа
		|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
		|	КОНЕЦ КАК ДатаПлатежа,
		|   	Обороты.МоментВремени,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаПриход
		|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаОборот
		|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ КАК СуммаОборот
		|   
		|ПОМЕСТИТЬ ОборотыПоКлиенту
		|ИЗ
		|	Cache_Обороты КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО Аналитика.КлючАналитики = Обороты.КлючАналитики 						
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
		|ПО ГрафикОплат.Ссылка = Обороты.ЗаказКлиента
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Обороты.Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют;
		|УНИЧТОЖИТЬ ГрафикОплат;
		|УНИЧТОЖИТЬ Cache_Обороты;
		//////////////////////////////////////////////////////////////////////////////////////////
		//7. Обороты по месяцам
		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
		|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
		|	СУММА(СуммаОборот) КАК Сумма
		|	
		|ПОМЕСТИТЬ ОборотыПоМесяцам	
		|ИЗ
		|	ОборотыПоКлиенту 
		|															
		|СГРУППИРОВАТЬ ПО
		|	   Партнер,
		|	   НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ),
		|	   КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ)
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//8. По месяцам наростающие
		|ВЫБРАТЬ
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Сумма,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
		|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
		|ИЗ
		|   ОборотыПоМесяцам КАК ОборотыПоМесяцам
		|   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
		|ПО ОборотыПоМесяцам.Партнер     = ОборотыПоМесяцамКопия.Партнер
		|И  ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода
        |
		|СГРУППИРОВАТЬ ПО
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.Сумма
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//9. Долги по выбранным месяцам
		|ВЫБРАТЬ
		|		Долги.Партнер,
		|		Долги.Долг,
		|		ОборотыПоМесНарастающие.НачПериода,
		|		ОборотыПоМесНарастающие.КонПериода,
		|		Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
		|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
		|ИЗ
		|		Долги КАК Долги
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
		|		ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
		|		И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
		|		И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//10. Движения по выбранным месяцам
		|ВЫБРАТЬ
		|		Обороты.Партнер,
		|		Обороты.МоментВремени,
		|		Обороты.Регистратор,
		|		Обороты.Период,
		|		ДолгиПоВыбМесяцам.Долг,
		|		ДолгиПоВыбМесяцам.ОстатокДолга,
		|		Обороты.Сумма,
		|		Обороты.ДатаПлатежа КАК ДатаОтсрочки
		|	
		|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
		|ИЗ
		|	ОборотыПоКлиенту КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
		|ПО Обороты.Партнер 		= ДолгиПоВыбМесяцам.Партнер
		|И  Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
		|И  Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//11. Движения по выбранным месяцам наростающие
		|ВЫБРАТЬ
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияПредварительные
		|ИЗ
		|	   ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
		|	   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
		|ПО 	ДвиженияПоВыбМесяцам.Партнер 		= ДвиженияПоВыбМесяцамКопия.Партнер
		|И  	ДвиженияПоВыбМесяцам.ДатаОтсрочки  <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|И	ВЫБОР
		|		КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки   = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|		ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	   
		|СГРУППИРОВАТЬ ПО
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОборотыПоМесяцам;
		|УНИЧТОЖИТЬ ОборотыПоМесяцамНарастающие;
		|УНИЧТОЖИТЬ ДолгиПоВыбраннымМесяцам;
		|УНИЧТОЖИТЬ ДвиженияПоВыбраннымМесяцам;
		/////////////////////////////////////////////////////////////////////////////////////////////
		//12.       
		|ВЫБРАТЬ
		|	   ДвиженияПредв.Партнер,
		|	   ДвиженияПредв.Регистратор,
		|	   ДвиженияПредв.Период,
		|	   ДвиженияПредв.МоментВремени,
		|	   ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
		|	   ДвиженияПредв.Сумма,
		|	   ДвиженияПредв.ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияОкончательные
		|ИЗ
		|	   ДвиженияПредварительные КАК ДвиженияПредв
		|ГДЕ
		|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
		|И 	ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
		|;
		////////////////////////////////////////////////////////////////////////////////
		//13. 
		|ВЫБРАТЬ
		|	Обороты.Партнер 					КАК Контрагент,
		|	Обороты.Регистратор 				КАК ДокументПени,
		|	ВЫБОР
		|		КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
		|		ТОГДА ДвиженияОконч.СуммаДолга
		|		ИНАЧЕ Обороты.Сумма
		|	КОНЕЦ 								КАК СуммаОстаток,
		|	Обороты.Сумма 						КАК НачальнаяСумма
		|	
		|ПОМЕСТИТЬ ТаблицаНеОплачено
		|ИЗ
		|	ОборотыПоКлиенту КАК Обороты
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
		|ПО 	ДвиженияОконч.Партнер 		 = Обороты.Партнер
		|И  	ДвиженияОконч.ДатаОтсрочки  <= Обороты.ДатаПлатежа 
		|И	ВЫБОР
		|		КОГДА ДвиженияОконч.ДатаОтсрочки   = Обороты.ДатаПлатежа 
		|		ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		////////////////////////////////////////////////////////////////////////////////
		//14. 
		|ВЫБРАТЬ
		|	СУММА(Вл.СуммаПредоплата) КАК СуммаПредоплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаНеОплачено.ДокументПени, 0) = 0
		|						ТОГДА ОборотыПоКлиенту.Сумма
		|					ИНАЧЕ ТаблицаНеОплачено.НачальнаяСумма - ТаблицаНеОплачено.СуммаОстаток
		|				КОНЕЦ - ЕСТЬNULL(Возвраты.СуммаРасход, 0)), 0) КАК СуммаПредоплата
		|	ИЗ
		|		ОборотыПоКлиенту КАК ОборотыПоКлиенту
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ (	ВЫБРАТЬ
		|							ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента).ДокументРеализации КАК ДокументРеализации,
		|							СуммаРасход КАК СуммаРасход
		|						ИЗ
		|							РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|						ГДЕ
		|							Регистратор  Ссылка Документ.ВозвратТоваровОтКлиента) КАК Возвраты
		|	ПО ОборотыПоКлиенту.Регистратор = Возвраты.ДокументРеализации
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНеОплачено КАК ТаблицаНеОплачено
		|	ПО ОборотыПоКлиенту.Регистратор = ТаблицаНеОплачено.ДокументПени
		|			
		|	ГДЕ
		|		ОборотыПоКлиенту.ДатаПлатежа > &ТекущаяДата
		|	И (ЕСТЬNULL(ТаблицаНеОплачено.ДокументПени, 0) = 0
		|	ИЛИ ТаблицаНеОплачено.СуммаОстаток <> ТаблицаНеОплачено.НачальнаяСумма)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		-ЕСТЬNULL(Долги.Долг, 0)
		|	ИЗ
		|		Долги КАК Долги
		|	ГДЕ
		|		Долги.Долг < 0) КАК Вл		
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Долги;
		|УНИЧТОЖИТЬ Аналитика;
		|УНИЧТОЖИТЬ ОборотыПоКлиенту;
		|УНИЧТОЖИТЬ ДвиженияПредварительные;
		|УНИЧТОЖИТЬ ДвиженияОкончательные;";
	
	Запрос.УстановитьПараметр("Партнер", 	 Партнер);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаБонусов = Результат[Результат.ВГраница()-5].Выбрать();
	ВыборкаБонусов.Следующий();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСКлиентамиОбороты.СуммаРасход),0) КАК СуммаРасход
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(НАЧАЛОПЕРИОДА(&ТекущаяДата, Полугодие), , Регистратор, ЗаказКлиента = НЕОПРЕДЕЛЕНО) КАК РасчетыСКлиентамиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|		И (РегистрАналитикаУчетаПоПартнерам.Партнер 	= &Партнер)
	|		И (РегистрАналитикаУчетаПоПартнерам.Организация = &Организация)
	|ГДЕ
	|	РасчетыСКлиентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента";
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммаБонусов = ВыборкаБонусов.СуммаПредоплата - ?(Выборка.Следующий(), Выборка.СуммаРасход, 0);
	
	Если СуммаБонусов < 30 Тогда Возврат; КонецЕсли; // Если сумма меньше 0.01 не начислять 30 * 0.12 / 12 / 31 = 0.0097

	СуммаБонусов							= Окр(СуммаБонусов * 0.12 / 12 / 31, 2);
	
	Соглашение 								= Справочники.СоглашенияСПоставщиками.ПолучитьСсылку(Новый УникальныйИдентификатор("b1782c14-8ae5-11e0-888a-001517115d85"));//("Начисление бонусов, USD");	
	ДокументОбъект 							= Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ДокументОбъект.Дата						= дата;
	ДокументОбъект.ДатаПлатежа				= дата + 60*60*24*14;
	ДокументОбъект.Организация 				= Соглашение.Организация;
	ДокументОбъект.Подразделение    		= Справочники.СтруктураПредприятия.НайтиПоКоду("000000004");
	ДокументОбъект.Менеджер					= Партнер.ОсновнойМенеджер;
	ДокументОбъект.Партнер					= Партнер;
	ДокументОбъект.Контрагент				= ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	ДокументОбъект.Соглашение				= Соглашение;
	ДокументОбъект.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокументОбъект.Валюта					= Соглашение.Валюта;
	ДокументОбъект.ВалютаВзаиморасчетов		= Соглашение.Валюта;
	ДокументОбъект.НалогообложениеНДС		= Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ДокументОбъект.Комментарий				= "Нарахування бонусів за передоплату в суммі : " + СуммаБонусов;
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	Номенклатура 					= Справочники.Номенклатура.НайтиПоКоду("00000041990");
	НоваяСтрока.Номенклатура 		= Номенклатура;
	НоваяСтрока.Количество 			= 1;
	НоваяСтрока.КоличествоУпаковок 	= 1;
	НоваяСтрока.Цена				= СуммаБонусов;
	НоваяСтрока.Сумма				= СуммаБонусов;
	НоваяСтрока.Упаковка			= Номенклатура.ЕдиницаИзмерения;                     
	НоваяСтрока.СтатьяРасходов		= ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("УТ-000035");
	НоваяСтрока.АналитикаРасходов	= ДокументОбъект.Подразделение;
	НоваяСтрока.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС			= 0;
	НоваяСтрока.СуммаСНДС			= СуммаБонусов;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
		
	
	
	Попытка
		НачатьТранзакцию();
		
		КассаВыдачиПолучения = ПолучитьДоступнуюКассу(Соглашение.Организация, Соглашение.Валюта);
		
		Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		ЗаказПоставщику 				= ДокументОбъект.Ссылка;
		Заявка.Заполнить(ЗаказПоставщику);
		Заявка.Дата 					= ЗаказПоставщику.Дата + 1;
		Заявка.ЖелательнаяДатаПлатежа	= ЗаказПоставщику.Дата + 1;
		Заявка.Заметки					= "Автоматический перезачет бонусов из колонки Поставщик в колонку Клиент по документу : " + ЗаказПоставщику + Символы.ПС + " Ссылка : " + ПолучитьНавигационнуюСсылку (ЗаказПоставщику);
		Заявка.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		Заявка.Статус   				= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
		Заявка.ФормаОплатыНаличная		= Истина;
		Заявка.ФормаОплатыБезналичная	= Ложь;
    	Заявка.ФормаОплатыПлатежнаяКарта= Ложь;
		Заявка.Касса					= КассаВыдачиПолучения;
		Заявка.Приоритет				= Перечисления.Приоритеты.Низкий;
		Заявка.ФормаОплатыЗаявки		= Перечисления.ФормыОплаты.Наличная;
		Заявка.Организация				= Соглашение.Организация;
		Заявка.Подразделение			= Справочники.СтруктураПредприятия.НайтиПоКоду("000000001");
		Заявка.КтоЗаявил				= Справочники.Пользователи.НайтиПоНаименованию("<Не указан>");
		Заявка.Контрагент				= ДокументОбъект.Контрагент;
		Заявка.СуммаДокумента			= СуммаБонусов;
		Заявка.Валюта					= Соглашение.Валюта;
		Заявка.СтатьяДвиженияДенежныхСредств					= Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000003");			
		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		
		
		
		РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		РКО.Заполнить(Заявка.Ссылка);
		РКО.Дата 			= Заявка.Дата + 1;
		РКО.Комментарий		= Заявка.Заметки;
		РКО.Касса			= Заявка.Касса;
		РКО.Записать(РежимЗаписиДокумента.Проведение);

		Соглашение = Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор("4e73f9c0-77d4-11e0-b51c-001517115d85"));//НайтиПоНаименованию("Начисление пени (14 дней)");
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Партнер", РКО.Контрагент.Партнер);
		СтруктураПараметров.Вставить("Контрагент", РКО.Контрагент);
		СтруктураПараметров.Вставить("Организация", Соглашение.Организация);
		СтруктураПараметров.Вставить("Соглашение", Соглашение);
		СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
						СтруктураПараметров,
						Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
						Соглашение.Валюта);
					
					
		
		ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();				
		ПКО.Дата 					= РКО.Дата + 1;
		ПКО.Комментарий				= РКО.Комментарий;
		ПКО.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		ПКО.Касса					= РКО.Касса;
		ПКО.Контрагент				= РКО.Контрагент;
		ПКО.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
		ПКО.СуммаДокумента			= РКО.СуммаДокумента;
		ПКО.Валюта					= РКО.Валюта;
		ПКО.Организация				= РКО.Организация;
		
		Расшифровка 		= ПКО.РасшифровкаПлатежа.Добавить();
		Расшифровка.Заказ   = Договор;
		Расшифровка.ОснованиеПлатежа = Договор;
		Расшифровка.Партнер = РКО.Контрагент.Партнер;
		Расшифровка.Сумма	= РКО.СуммаДокумента;
				
		ПКО.Записать(РежимЗаписиДокумента.Проведение);

	Исключение
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура НачислитьБонусыРаботникамОрганизации(Партнер)
	
	Перем ЗарплатноеСоглашение, ЗарплатныйДоговор, ПроцентНаОстатокДенежныхСредств;
	Дата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗарплатноеСоглашение();
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("4ee34348-d52e-11e3-80cb-001e676b0175"))); // Исп. соглашение для начисления бонусов на остаток ЗП
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗарплатноеСоглашение = Выборка.Соглашение;
	Иначе
		//Сообщить в отдел технической поддержки
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗарплатныйДоговор();
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("5908fd9b-d52e-11e3-80cb-001e676b0175"))); // Исп. договор для начисления бонусов на остаток ЗП
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗарплатныйДоговор = Выборка.Договор;
	Иначе
		//Сообщить в отдел технической поддержки
	КонецЕсли;
	
	Если ЗарплатноеСоглашение <> Неопределено И ЗарплатныйДоговор <> Неопределено Тогда
		Если ЗарплатноеСоглашение.Организация <> ЗарплатныйДоговор.Организация Тогда
			//		
		КонецЕсли;
	Иначе
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстатокЗадолженности();	
	Запрос.УстановитьПараметр("Партнер", 	 Партнер);
	Запрос.УстановитьПараметр("Организация", ЗарплатноеСоглашение.Организация);
	Запрос.УстановитьПараметр("Контрагент", ЗарплатноеСоглашение.Контрагент);
	Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаБонусов = Результат[Результат.ВГраница()-2].Выбрать();
	ВыборкаБонусов.Следующий();
		
	СуммаБонусов = - ВыборкаБонусов.Долг;
	
	Если СуммаБонусов < 500 Тогда 
		Возврат; // Если сумма меньше 0.01 не начислять 500 * 0.15 / 12 / 31 = 0.202
	КонецЕсли; 
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовНаОстаток", , , "ДополнительныеНастройкиПроцентовНаОстаток");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("ПроцентНаОстатокДенежныхСредств", ПроцентНаОстатокДенежныхСредств) = Ложь Тогда
			ПроцентНаОстатокДенежныхСредств = 12;	
		КонецЕсли;
	Иначе
		ПроцентНаОстатокДенежныхСредств = 12;
	КонецЕсли;

	СуммаБонусов							= Окр(СуммаБонусов * (ПроцентНаОстатокДенежныхСредств / 100) / 12 / 31, 2);
	
	Соглашение 								= ЗарплатноеСоглашение;	
	ДокументОбъект 							= Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ДокументОбъект.Дата						= Дата;
	ДокументОбъект.ДатаПлатежа				= Дата + 60*60*24*14;
	ДокументОбъект.Организация 				= Соглашение.Организация;
	ДокументОбъект.Подразделение    		= ЗарплатныйДоговор.Подразделение;
	ДокументОбъект.Менеджер					= Партнер.ОсновнойМенеджер;
	ДокументОбъект.Партнер					= Партнер;
	ДокументОбъект.Контрагент				= Соглашение.Контрагент;
	ДокументОбъект.Соглашение				= Соглашение;
	ДокументОбъект.Договор					= ЗарплатныйДоговор;
	ДокументОбъект.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокументОбъект.Валюта					= Соглашение.Валюта;
	ДокументОбъект.ВалютаВзаиморасчетов		= Соглашение.Валюта;
	ДокументОбъект.НалогообложениеНДС		= Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	ДокументОбъект.Комментарий				= "Нарахування бонусів на залишок зарплатного балансу в сумі: " + СуммаБонусов;
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	Номенклатура 					= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("9be93e58-ccc3-4b59-9c4b-126f66e2d667"));
	НоваяСтрока.Номенклатура 		= Номенклатура;
	НоваяСтрока.Количество 			= 1;
	НоваяСтрока.КоличествоУпаковок 	= 1;
	НоваяСтрока.Цена				= СуммаБонусов;
	НоваяСтрока.Сумма				= СуммаБонусов;
	НоваяСтрока.Упаковка			= Номенклатура.ЕдиницаИзмерения;                     
	НоваяСтрока.СтатьяРасходов		= ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("5cd67be7-d523-11e3-80cb-001e676b0175"));
	НоваяСтрока.АналитикаРасходов	= ДокументОбъект.Подразделение;
	НоваяСтрока.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС			= 0;
	НоваяСтрока.СуммаСНДС			= СуммаБонусов;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
			
КонецПроцедуры


Функция ПолучитьТекстЗапросаПартнерыДоступКПене()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПеняПартнеры.Ссылка
		|Из
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПеняПартнеры
		|ГДЕ
		|	ПеняПартнеры.Свойство = &ИспользоватьПеню	
		|И 	ПеняПартнеры.Значение = Истина
		|И  ПеняПартнеры.Ссылка.ГруппаДоступа <> &РаботникиОгранизации";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПартнерыДоступКБонусам()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПеняПартнеры.Ссылка
		|Из
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПеняПартнеры
		|ГДЕ
		|	ПеняПартнеры.Свойство = &ИспользоватьБонусы	
		|И 	ПеняПартнеры.Значение = Истина
		|И  ПеняПартнеры.Ссылка.ГруппаДоступа <> &РаботникиОгранизации";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаРаботникиДоступКБонусам()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПеняПартнеры.Ссылка
		|Из
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПеняПартнеры
		|ГДЕ
		|	ПеняПартнеры.Свойство = &ИспользоватьБонусы	
		|И 	ПеняПартнеры.Значение = Истина
		|И  ПеняПартнеры.Ссылка.ГруппаДоступа = &РаботникиОгранизации";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаЗарплатноеСоглашение()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками.ДополнительныеРеквизиты
		|ГДЕ
		|	Ссылка.Партнер = &Ссылка
		|И	Свойство = &Свойство
		|И	Значение = Истина";
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ПолучитьТекстЗапросаЗарплатныйДоговор()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты
		|ГДЕ
		|	Ссылка.Партнер = &Ссылка
		|И	Свойство = &Свойство
		|И	Значение = Истина";
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ПолучитьТекстЗапросаОстатокЗадолженности()
	
	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. Курсы валют
		|ВЫБРАТЬ
		|	Валюта,
		|	Курс / Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют	
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. Аналитика
		|ВЫБРАТЬ
		|	Партнер,
		|	Организация,
		|	КлючАналитики
		|ПОМЕСТИТЬ Аналитика	
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам	
		|ГДЕ
		| 	Партнер 	= &Партнер
		|И	Организация = &Организация
		|И	Контрагент  = &Контрагент
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики		
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Долги
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	IsNull(Сумма(	ВЫБОР ВалютаРеглУчета.Значение
		|				КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютРегл.Курс * КурсыВалют.Курс
		|			КОНЕЦ
		|		  		), 0) КАК Долг	
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|								
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток 				
		|		ИЗ
		|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
		|	) КАК Долги
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО 	Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета
		|ПО  Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
		|ПО	КурсыВалютРегл.Валюта = ВалютаРеглУчета.Значение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Долги.Валюта						
        |
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют;
		|УНИЧТОЖИТЬ Аналитика;";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИерархияПартнеров.Родитель КАК Партнер,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ИерархияПартнеров.Уровень
	|ПОМЕСТИТЬ ДоступныеКонтрагентыПартнера
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ИерархияПартнеров.Родитель = Контрагенты.Партнер
	|ГДЕ
	|	ИерархияПартнеров.Партнер = &Партнер
	|	И (НЕ Контрагенты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоступныеКонтрагентыПартнера.Уровень КАК Уровень,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) КАК КоличествоНаУровне
	|ПОМЕСТИТЬ БлижнийУровень
	|ИЗ
	|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеКонтрагентыПартнера.Уровень
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоступныеКонтрагентыПартнера.Контрагент
	|ИЗ
	|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БлижнийУровень КАК БлижнийУровень
	|		ПО ДоступныеКонтрагентыПартнера.Уровень = БлижнийУровень.Уровень
	|ГДЕ
	|	БлижнийУровень.КоличествоНаУровне = 1");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Контрагент;
	Иначе
		Результат = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция ПолучитьДоступнуюКассу(Организация, Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Ссылка
	|Из
	|	Справочник.Кассы
	|ГДЕ 
	|	Владелец 				= &Организация
	|И	ВалютаДенежныхСредств 	= &Валюта ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта",		 Валюта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.1.24";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. начисление пени и бонусов [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. начисление пени и бонусов [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. начисление пени и бонусов [" + Версия + "]", "order_b2b_com_Пеня();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

#КонецОбласти


