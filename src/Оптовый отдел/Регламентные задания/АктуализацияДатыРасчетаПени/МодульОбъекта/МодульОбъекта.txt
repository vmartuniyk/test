
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ПрограмныйИнтерфейс

// Точка входа регламентного задания "Актуализация расчета даты расчета пени".
//
Процедура ВыполнитьАктуализацию() Экспорт
	
	ЗафиксироватьСобытиеВЖурналеРегистрации(
					НСтр("ru='Начало выполнения регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					, 
					,
					УровеньЖурналаРегистрации.Информация);
						
	ТаблицаКалендарей = СоздатьТаблицуКалендарей();
	
	//Запрос 		 = Новый Запрос;
	//Запрос.Текст = ТекстЗапросаАктуализации();
	//
	//// Включить доступ к пене
	//Запрос.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")));
	//Запрос.УстановитьПараметр("НачалоСегодняшнегоДня", НачалоДня(ТекущаяДатаСеанса()));
	//Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру);
	//
	//РезультатЗапроса  = Запрос.ВыполнитьПакет();
	//ТаблицаРеализаций = РезультатЗапроса[26].Выгрузить(); // Документы «Реализация товаров и услуг»
	//ТаблицаЗаказов	  = РезультатЗапроса[37].Выгрузить(); // Документы «Заказ клиента»
	//
	//ИзменитьДатыПлатежаРеализаций(ТаблицаРеализаций);
	//ИзменитьДатыПлатежаЗаказов(ТаблицаЗаказов);
		
	ЗафиксироватьСобытиеВЖурналеРегистрации(
					НСтр("ru='Начало выполнения регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					, 
					,
					УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов
// Получает текст запроса для выполнения актуализаци даты расчета пени.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаАктуализации()

	ТекстЗапроса = "
					// 0. Партнеры для которых установлено галочка «Включить доступ к пене».
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Партнер КАК Партнер
					|ПОМЕСТИТЬ ПартнерыОптовогоОтдела
					|ИЗ
					|	РегистрСведений.ПартнерыСегмента
					|ГДЕ 
					|	Сегмент = &Сегмент
					|;
					|
					// 1. Места которые были отгружены сегодня.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Место КАК Место
					|ПОМЕСТИТЬ ОтгруженныеМеста
					|ИЗ
					|	РегистрСведений.ОтгрузкаМест.СрезПоследних(
					|			,
					|			Период >= &НачалоСегодняшнегоДня
					|				И Место.Владелец В
					|					(ВЫБРАТЬ
					|						Партнер
					|					ИЗ
					|						ПартнерыОптовогоОтдела))
					|ГДЕ
					|	СтатусОтгрузки = &СтатусОтгрузки
					|;
					|
					// 2.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ПартнерыОптовогоОтдела;
					|
					// 3. Документы, спомощью которых отгружались места: Расходный ордер на товары,
					//    Отгрузка товаров из безордерных складов
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МестаПоДокументам.Документ КАК Документ
					|ПОМЕСТИТЬ ДокументыОтгрузки
					|ИЗ
					|	ОтгруженныеМеста КАК ОтгруженныеМеста
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
					|		ПО ОтгруженныеМеста.Место = МестаПоДокументам.Место
					|;
					|
					// 4.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ОтгруженныеМеста;
					|
					// 5. На основании документов отгрузки получаем документы «Реализация товаров и услуг»
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
					|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
					|		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
					|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
					|	КОНЕЦ КАК ДокументРеализации
					|ПОМЕСТИТЬ ДокументыРеализации
					|ИЗ
					|	ДокументыОтгрузки
					|;
					|
					// 6.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДокументыОтгрузки;
					|
					//7. Если реализации были созданы на основании заказа - получаем заказы.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ВЫБОР
					|		КОГДА ВЫРАЗИТЬ(ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
					|			ТОГДА ВЫРАЗИТЬ(ДокументРеализации КАК Документ.РеализацияТоваровУслуг)
					|		ИНАЧЕ ВЫРАЗИТЬ(ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
					|	КОНЕЦ КАК Документ
					|ПОМЕСТИТЬ ДокументыПродажы
					|ИЗ
					|	ДокументыРеализации
					|ГДЕ
					|	ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
					|;
					|
					// 8.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДокументыРеализации;
					|
					// 9. Получаем заказы клиентов, которые еще не были отгружены.
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗаказКлиента КАК ЗаказКлиента
					|ПОМЕСТИТЬ НеОтгруженныеЗаказы
					|ИЗ
					|	РегистрНакопления.ЗаказыКлиентов.Остатки(
					|			,
					|			ЗаказКлиента В
					|				(ВЫБРАТЬ
					|					Документ
					|				ИЗ
					|					ДокументыПродажы
					|				ГДЕ
					|					Документ ССЫЛКА Документ.ЗаказКлиента))
					|;
					|
					// 10. Список полность отгруженных заказов клиента из ссылками на графики оплат.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Документ КАК Документ,
					|	ВЫБОР
					|		КОГДА ВЫРАЗИТЬ(Документ КАК Документ.ЗаказКлиента).ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
					|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ЗаказКлиента).Соглашение.ГрафикОплаты
					|		ИНАЧЕ ВЫРАЗИТЬ(Документ КАК Документ.ЗаказКлиента).ГрафикОплаты
					|	КОНЕЦ КАК ГрафикОплаты
					|ПОМЕСТИТЬ ОтгруженныеЗаказы
					|ИЗ
					|	ДокументыПродажы
					|ГДЕ
					|	Документ ССЫЛКА Документ.ЗаказКлиента
					|	И Документ НЕ В
					|				(ВЫБРАТЬ
					|					ЗаказКлиента
					|				ИЗ
					|					НеОтгруженныеЗаказы)
					|;
					|
					// 11.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ НеОтгруженныеЗаказы;
					|
					// 12. Список неотгруженных реализаций.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Документ
					|ПОМЕСТИТЬ НеОтгруженныеРеализации
					|ИЗ
					|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
					|			,
					|			ДокументОтгрузки В
					|				(ВЫБРАТЬ
					|					Документ
					|				ИЗ
					|					ДокументыПродажы
					|				ГДЕ
					|					Документ ССЫЛКА Документ.РеализацияТоваровУслуг))
					|;
					|
					// 13. Список полностью отгруженных реализаций из графиками оплаты и датамы платежей.
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Документ 							КАК Документ,
					|	Документ.Соглашение.ГрафикОплаты 	КАК ГрафикОплаты,
					|	Документ.ДатаПлатежа 				КАК ДатаПлатежа
					|ПОМЕСТИТЬ ОтгруженныеРеализации
					|ИЗ
					|	ДокументыПродажы
					|ГДЕ
					|	Документ ССЫЛКА Документ.РеализацияТоваровУслуг
					|	И НЕ ДокументыПродажы.Документ В
					|				(ВЫБРАТЬ
					|					Документ
					|				ИЗ
					|					НеОтгруженныеРеализации)
					|;
					|
					// 14.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДокументыПродажы;
					|
					// 15.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ НеОтгруженныеРеализации;
					|
					// 16. Получаем даты платежа по графику оплаты в реализациях которые были 
					//     сделаны не на основании заказов.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ГрафикиОплатыЭтапы.Ссылка			КАК Ссылка,
					|	ГрафикиОплатыЭтапы.Ссылка.Календарь	КАК Календарь,
					|	МАКСИМУМ(ГрафикиОплатыЭтапы.Сдвиг) 	КАК Сдвиг,
					|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоСегодняшнегоДня, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ГрафикиОплатыЭтапы.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
					|ПОМЕСТИТЬ ДатаОплатыРеализацийПоГрафику
					|	ИЗ
					|	ОтгруженныеРеализации КАК ОтгруженныеРеализации
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
					|		ПО ОтгруженныеРеализации.ГрафикОплаты = ГрафикиОплатыЭтапы.Ссылка
					|			И (ГрафикиОплатыЭтапы.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))
					|
					|СГРУППИРОВАТЬ ПО
					|	ГрафикиОплатыЭтапы.Ссылка,
					|	ГрафикиОплатыЭтапы.Ссылка.Календарь
					|;
					|
					// 17. Получаем крайние точки календарей (фактически получаем сколько рабочих дней в году).
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КалендарныеГрафики.Календарь									КАК Календарь,
					|	КалендарныеГрафики.Год											КАК Год,
					|	МАКСИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) 	КАК КоличествоДней
					|ПОМЕСТИТЬ КалендариКрайниеТочки
					|ИЗ
					|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
					|ГДЕ
					|	КалендарныеГрафики.ДатаГрафика >= &НачалоСегодняшнегоДня
					|	И КалендарныеГрафики.ДеньВключенВГрафик
					|
					|СГРУППИРОВАТЬ ПО
					|	КалендарныеГрафики.Календарь,
					|	КалендарныеГрафики.Год
					|;
					|
					// 18. Для облегчения расчета даты платежа нам необходимо расчитать смещение,
					//     чтобы нумерация дней вы календаре начиналась с 0.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КалендарныеГрафики.Календарь									КАК Календарь,
					|	МИНИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) 	КАК Смещение
					|ПОМЕСТИТЬ ТаблицаСмещений
					|ИЗ
					|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
					|ГДЕ
					|	КалендарныеГрафики.ДатаГрафика > &НачалоСегодняшнегоДня
					|	И КалендарныеГрафики.ДеньВключенВГрафик
					|
					|СГРУППИРОВАТЬ ПО
					|	КалендарныеГрафики.Календарь
					|;
					|
					// 19. Сколько дней нужно добавить к дате платежа, если она попадает в следующий год.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КалендариКрайниеТочки.Календарь									КАК Календарь,
					|	КалендариКрайниеТочки.Год										КАК Год,
					|	СУММА(ЕСТЬNULL(КалендариКрайниеТочкиКопия.КоличествоДней, 0)) 	КАК КоличествоДней
					|ПОМЕСТИТЬ КалендариНаростающие
					|ИЗ
					|	КалендариКрайниеТочки КАК КалендариКрайниеТочки
					|		ЛЕВОЕ СОЕДИНЕНИЕ КалендариКрайниеТочки КАК КалендариКрайниеТочкиКопия
					|		ПО КалендариКрайниеТочки.Календарь = КалендариКрайниеТочкиКопия.Календарь
					|			И КалендариКрайниеТочки.Год > КалендариКрайниеТочкиКопия.Год
					|
					|СГРУППИРОВАТЬ ПО
					|	КалендариКрайниеТочки.Календарь,
					|	КалендариКрайниеТочки.Год
					|;
					|
					// 20.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ КалендариКрайниеТочки;
					|
					// 21. Получаем сколько дней от сегодняшней даты до любой даты в календаре.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КалендарныеГрафики.Календарь		КАК Календарь,
					|	КалендарныеГрафики.ДатаГрафика		КАК ДатаГрафика,
					|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода + КалендариНаростающие.КоличествоДней - ТаблицаСмещений.Смещение + 1 КАК КоличествоДней
					|ПОМЕСТИТЬ КалендариПоДням
					|ИЗ
					|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалендариНаростающие КАК КалендариНаростающие
					|		ПО КалендарныеГрафики.Календарь = КалендариНаростающие.Календарь
					|			И КалендарныеГрафики.Год = КалендариНаростающие.Год
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСмещений КАК ТаблицаСмещений
					|		ПО КалендарныеГрафики.Календарь = ТаблицаСмещений.Календарь
					|ГДЕ
					|	КалендарныеГрафики.ДатаГрафика >= &НачалоСегодняшнегоДня
					|	И КалендарныеГрафики.ДеньВключенВГрафик
					|;
					|
					// 22.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ КалендариНаростающие;
					|
					// 23.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ТаблицаСмещений;
					|
					// 24. Если в соглашении используют календари для расчета дата платежа,
					//     используем дату по календарю. 
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ДатаОплатыРеализацийПоГрафику.Ссылка КАК ГрафикОплат,
					|	ВЫБОР
					|		КОГДА ДатаОплатыРеализацийПоГрафику.Календарь = ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
					|			ТОГДА ДатаОплатыРеализацийПоГрафику.ДатаПлатежа
					|		ИНАЧЕ КалендариПоДням.ДатаГрафика
					|	КОНЕЦ КАК ДатаПлатежа
					|ПОМЕСТИТЬ ДатыПлатежейРеализаций
					|ИЗ
					|	ДатаОплатыРеализацийПоГрафику КАК ДатаОплатыРеализацийПоГрафику
					|		ЛЕВОЕ СОЕДИНЕНИЕ КалендариПоДням КАК КалендариПоДням
					|		ПО ДатаОплатыРеализацийПоГрафику.Календарь = КалендариПоДням.Календарь
					|			И ДатаОплатыРеализацийПоГрафику.Сдвиг = КалендариПоДням.КоличествоДней
					|;
					|
					// 25.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДатаОплатыРеализацийПоГрафику;
					|
					// 26. Отбираем только те реализции в которых нужно изменить дату платежа.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОтгруженныеРеализации.Документ КАК Документ,
					|	ВЫБОР
					|		КОГДА ДатыПлатежейРеализаций.ДатаПлатежа ЕСТЬ NULL 
					|			ТОГДА ОтгруженныеРеализации.ДатаПлатежа
					|		ИНАЧЕ ДатыПлатежейРеализаций.ДатаПлатежа
					|	КОНЕЦ КАК ДатаПлатежа
					|ИЗ
					|	ОтгруженныеРеализации КАК ОтгруженныеРеализации
					|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПлатежейРеализаций КАК ДатыПлатежейРеализаций
					|		ПО ОтгруженныеРеализации.ГрафикОплаты = ДатыПлатежейРеализаций.ГрафикОплат
					|ГДЕ
					|	ОтгруженныеРеализации.ДатаПлатежа <> ЕСТЬNULL(ДатыПлатежейРеализаций.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1))
					|;
					|
					// 27.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ОтгруженныеРеализации;
					|
					// 28.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДатыПлатежейРеализаций;
					|
					// 29. Получаем даты платежа по графикам оплаты из заказов клиента.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ГрафикиОплатыЭтапы.Ссылка				КАК Ссылка,
					|	ГрафикиОплатыЭтапы.Ссылка.Календарь		КАК Календарь,
					|	МАКСИМУМ(ГрафикиОплатыЭтапы.Сдвиг) 		КАК Сдвиг,
					|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоСегодняшнегоДня, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ГрафикиОплатыЭтапы.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
					|ПОМЕСТИТЬ ДатаОплатыЗаказовПоГрафику
					|ИЗ
					|	ОтгруженныеЗаказы КАК ОтгруженныеЗаказы
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
					|		ПО ОтгруженныеЗаказы.ГрафикОплаты = ГрафикиОплатыЭтапы.Ссылка
					|			И (ГрафикиОплатыЭтапы.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))
					|
					|СГРУППИРОВАТЬ ПО
					|	ГрафикиОплатыЭтапы.Ссылка,
					|	ГрафикиОплатыЭтапы.Ссылка.Календарь
					|;
					|
					// 30. Если в графику оплаты используется календарь для расчета даты оплаты - расчитываем по календарю.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ДатаОплатыЗаказовПоГрафику.Ссылка КАК ГрафикОплат,
					|	ВЫБОР
					|		КОГДА ДатаОплатыЗаказовПоГрафику.Календарь = ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
					|			ТОГДА ДатаОплатыЗаказовПоГрафику.ДатаПлатежа
					|		ИНАЧЕ КалендариПоДням.ДатаГрафика
					|	КОНЕЦ КАК ДатаПлатежа
					|ПОМЕСТИТЬ ДатыПлатежейЗаказов
					|ИЗ
					|	ДатаОплатыЗаказовПоГрафику КАК ДатаОплатыЗаказовПоГрафику
					|		ЛЕВОЕ СОЕДИНЕНИЕ КалендариПоДням КАК КалендариПоДням
					|		ПО ДатаОплатыЗаказовПоГрафику.Календарь = КалендариПоДням.Календарь
					|			И ДатаОплатыЗаказовПоГрафику.Сдвиг = КалендариПоДням.КоличествоДней
					|;
					|
					// 31.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ КалендариПоДням;
					|
					// 32.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДатаОплатыЗаказовПоГрафику;
					|
					// 33. Расчитываем новые даты платежей для заказов клиентов.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОтгруженныеЗаказы.Документ		КАК Документ,
					|	ДатыПлатежейЗаказов.ДатаПлатежа КАК ДатаПлатежа
					|ПОМЕСТИТЬ ДатыОплаченныхЗаказов
					|ИЗ
					|	ОтгруженныеЗаказы КАК ОтгруженныеЗаказы
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПлатежейЗаказов КАК ДатыПлатежейЗаказов
					|		ПО ОтгруженныеЗаказы.ГрафикОплаты = ДатыПлатежейЗаказов.ГрафикОплат
					|;
					|
					// 34.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДатыПлатежейЗаказов;
					|
					// 35.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ОтгруженныеЗаказы;
					|
					// 36. Получаем уже установленные даты оплаты в документах-заказах.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ДатыОплаченныхЗаказов.Документ						КАК Документ,
					|	МИНИМУМ(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
					|ПОМЕСТИТЬ ТекущиеДатыОплатПоЗаказам
					|ИЗ
					|	ДатыОплаченныхЗаказов КАК ДатыОплаченныхЗаказов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
					|		ПО ДатыОплаченныхЗаказов.Документ = ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка
					|			И (ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))
					|
					|СГРУППИРОВАТЬ ПО
					|	ДатыОплаченныхЗаказов.Документ
					|;
					|
					// 37. Получаем только те заказы, в которых нужно изменить даты платежей.
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ДатыОплаченныхЗаказов.Документ КАК Документ,
					|	ВЫБОР
					|		КОГДА ДатыОплаченныхЗаказов.ДатаПлатежа ЕСТЬ NULL 
					|			ТОГДА ТекущиеДатыОплатПоЗаказам.ДатаПлатежа
					|		ИНАЧЕ ДатыОплаченныхЗаказов.ДатаПлатежа
					|	КОНЕЦ КАК ДатаПлатежа
					|ИЗ
					|	ТекущиеДатыОплатПоЗаказам КАК ТекущиеДатыОплатПоЗаказам
					|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыОплаченныхЗаказов КАК ДатыОплаченныхЗаказов
					|		ПО (ДатыОплаченныхЗаказов.Документ = ТекущиеДатыОплатПоЗаказам.Документ)
					|ГДЕ
					|	ЕСТЬNULL(ДатыОплаченныхЗаказов.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1)) <> ТекущиеДатыОплатПоЗаказам.ДатаПлатежа
					|;
					|
					// 38.
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ДатыОплаченныхЗаказов;
					|
					////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ТекущиеДатыОплатПоЗаказам;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаАктуализации()

Функция ТекстЗапросаМассивКалендарей()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Календарь
	               |ИЗ
	               |	Справочник.Календари
	               |ГДЕ
	               |	ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКалендарей()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Календарь		КАК Календарь,
	|	ДатаГрафика		КАК ДатаГрафика,
	|	0 				КАК СмещениеКалендаря
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики
	|ГДЕ
	|	ДатаГрафика >= &ТекущаяДата
	|	И ДеньВключенВГрафик = ИСТИНА
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика ВОЗР";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ПолучитьМассивКалендарей()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаМассивКалендарей();
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Календарь");
	
КонецФункции

// Для рассчета даты оплаты по календарю, необходимо 
// пронумеровать рабочие дни в календаре где 0 - смещение
// для текущего дня в графике (начальное значение)
//
Функция СоздатьТаблицуКалендарей()
	
	МассивКалендарей = ПолучитьМассивКалендарей();
	ДатаОтбора		 = НачалоДня(ТекущаяДата());
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТаблицаКалендарей();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаОтбора);
	
	ТаблицаКалендарей = Запрос.Выполнить().Выгрузить();
	ТаблицаКалендарей.Индексы.Очистить();
	ТаблицаКалендарей.Индексы.Добавить("Календарь");
	
	Для Каждого Календарь Из МассивКалендарей Цикл 
		СтруктураПоиска  = Новый Структура("Календарь", Календарь);
		РезультатыПоиска = ТаблицаКалендарей.НайтиСтроки(СтруктураПоиска);
		Если РезультатыПоиска.Количество() > 0 Тогда
			СмещениеКалендаря = ?(РезультатыПоиска[0].ДатаГрафика = ДатаОтбора, 0, 1);
			Для каждого РезультатПоиска ИЗ РезультатыПоиска Цикл РезультатПоиска.СмещениеКалендаря = СмещениеКалендаря; СмещениеКалендаря = СмещениеКалендаря + 1; КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаКалендарей;
	
КонецФункции



// Изменяет даты платежей в документах «Реализация товаров и услуг»
// на те, которые были расчитаны в соответстии с временем отгруки.
//
// Параметры:
//  ТаблицаРеализаций - ТаблицаЗначений - таблица значений с колонками:
//    * Документ    - ДокументСсылка.РеализацияТоваровУслуг - документ в котором нужно изменить дату платежа.
//    * ДатаПлатежа - Дата - дата платежа, которую нужно установить в  документе.
//
Процедура ИзменитьДатыПлатежаРеализаций(ТаблицаРеализаций)

	Для каждого СтрокаТаблицы Из ТаблицаРеализаций Цикл
	
		ДокументРеализации 			   = СтрокаТаблицы.Документ.ПолучитьОбъект();
		ДокументРеализации.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
		
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);    				
		Исключение
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
			ТемаПисьма  = НСтр("ru='[ПЕНЯ] Не удалось изменить дату платежа в документе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = НСтр("ru='Документ: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, НавигационнаяСсылка);
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТемаПисьма, СтрокаТаблицы.Документ, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры

// Изменяет етапы графиков оплаты в документе «Заказ клиента» которые проставились раньше
// рассчитаной даты оплаты.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - таблица значений с колонками:
//    * Документ    - ДокументСсылка.ЗаказКлиента - документ в котором нужно изменить дату платежа.
//    * ДатаПлатежа - Дата - дата платежа, которую нужно установить в  документе.
//
Процедура ИзменитьДатыПлатежаЗаказов(ТаблицаЗаказов)

	СтруктураПоиска = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаказов Цикл
	
		ДокументЗаказ 		= СтрокаТаблицы.Документ.ПолучитьОбъект();
		ЭтапыГрафикаОплаты  = ДокументЗаказ.ЭтапыГрафикаОплаты;
		РезультатыПоиска	= ЭтапыГрафикаОплаты.НайтиСтроки(СтруктураПоиска);
		
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			Если РезультатПоиска.ДатаПлатежа < СтрокаТаблицы.ДатаПлатежа Тогда
				РезультатПоиска.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
			КонецЕсли;
		КонецЦикла; 
		
		Попытка
			ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);    				
		Исключение
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
			ТемаПисьма  = НСтр("ru='[ПЕНЯ] Не удалось изменить даты етапы графиков оплаты в документе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = НСтр("ru='Документ: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, НавигационнаяСсылка);
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТемаПисьма, СтрокаТаблицы.Документ, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры
 


// Отправляет сообщение на 777 о проблеме
//
// Параметры:
// ТемаПисьма   	- Строка 		- Тема письма в техническую поддрежку.
// ТекстПисьма  	- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической суперподдержки"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация даты расчета пени.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
		
КонецПроцедуры

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "2.0.10";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. актуализация даты расчета пени [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. актуализация даты расчета пени [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. актуализация даты расчета пени [" + Версия + "]", "ВыполнитьАктуализацию();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 