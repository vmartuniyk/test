
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ПрограмныйИнтерфейс

// Точка входа регламентного задания "Актуализация расчета даты расчета пени".
//
Процедура ВыполнитьАктуализацию() Экспорт
	
	ЗафиксироватьСобытиеВЖурналеРегистрации(
					НСтр("ru='Начало выполнения регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					, 
					,
					УровеньЖурналаРегистрации.Информация);
					
	ОповеститьВSlack("Начало актуализации");
						
	ТаблицаКалендарей = СоздатьТаблицуКалендарей();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАктуализации();
	
	//// Включить доступ к пене
	//Запрос.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")));
	//Запрос.УстановитьПараметр("НачалоСегодняшнегоДня", НачалоДня(ТекущаяДатаСеанса()));
	//Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру);
	//
	//РезультатЗапроса  = Запрос.ВыполнитьПакет();
	//ТаблицаРеализаций = РезультатЗапроса[26].Выгрузить(); // Документы «Реализация товаров и услуг»
	//ТаблицаЗаказов	  = РезультатЗапроса[37].Выгрузить(); // Документы «Заказ клиента»
	//
	//ИзменитьДатыПлатежаРеализаций(ТаблицаРеализаций);
	//ИзменитьДатыПлатежаЗаказов(ТаблицаЗаказов);
		
	ЗафиксироватьСобытиеВЖурналеРегистрации(
					НСтр("ru='Начало выполнения регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					, 
					,
					УровеньЖурналаРегистрации.Информация);
					
	ОповеститьВSlack("Конец актуализации");
	
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов
// Получает текст запроса для выполнения актуализаци даты расчета пени.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаАктуализации()

	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|// Блок получения документов по местах:
	|// - которые лежат на складе
	|// - которые едут в машыне
	|// 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ПогруженныеМеста
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних
	|ГДЕ
	|	СтатусОтгрузки = &СтатусМестоПогружено
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка КАК ДокументПоездка
	|ПОМЕСТИТЬ ДокументыПоездки
	|ИЗ
	|	Документ.ПоездкаЗаМаршрутом 
	|ГДЕ
	|	СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
	|	И Проведен 	  = ИСТИНА
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоездка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрПоездка.МестоДоставки КАК Место
	|ПОМЕСТИТЬ ПогруженныеМестаПоДокументу
	|ИЗ
	|	РегистрСведений.ПоездкаЗаМаршрутом КАК РегистрПоездка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоездки КАК ДокументыПоездки
	|		ПО РегистрПоездка.ДокументПоездки = ДокументыПоездки.ДокументПоездка
	|ГДЕ
	|	РегистрПоездка.ЭтоЗадача = ЛОЖЬ
	|	И РегистрПоездка.ИсключеноИзДоставки = ЛОЖЬ
	|	И РегистрПоездка.Архивное = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогруженныеМеста.Место КАК Место
	|ПОМЕСТИТЬ ТаблицаПогруженныхМест
	|ИЗ
	|	ПогруженныеМеста КАК ПогруженныеМеста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогруженныеМестаПоДокументу КАК ПогруженныеМестаПоДокументу
	|		ПО ПогруженныеМеста.Место = ПогруженныеМестаПоДокументу.Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ТаблицаУкомплектованныхМест
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних
	|ГДЕ
	|	СтатусОтгрузки = &СтатусМестоУкомплектовано
	|	И Место.Архивный = ЛОЖЬ
	|	И ВариантМаршрута.НеАктивен = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ТаблицаМест
	|ИЗ
	|	ТаблицаПогруженныхМест
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Место
	|ИЗ
	|	ТаблицаУкомплектованныхМест
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПогруженныеМеста;
	|УНИЧТОЖИТЬ ДокументыПоездки;
	|УНИЧТОЖИТЬ ПогруженныеМестаПоДокументу;
	|УНИЧТОЖИТЬ ТаблицаПогруженныхМест;
	|УНИЧТОЖИТЬ ТаблицаУкомплектованныхМест;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	|	КОНЕЦ КАК Документ.РеализацияТоваровУслуг) КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	ТаблицаМест КАК ТаблицаМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|		ПО ТаблицаМест.Место = МестаПоДокументам.Место
	|ГДЕ
	|	ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|	КОНЕЦ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|// Документы по местам сформированы (только реализации товаров).
	|// Храним документы в ВТ ТаблицаДокументов
	|//
	|////////////////////////////////////////////////////////////////////////////////
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // Сюда добавить неотгруженные РТиУ из Соборной
	|	Документ 				КАК Документ,
	|	Документ.ДатаПлатежа    КАК ДатаПлатежа,
	|	Документ.Соглашение		КАК Соглашение
	|ПОМЕСТИТЬ ТаблицаРеализаций
	|ИЗ
	|	ТаблицаДокументов
	|ГДЕ
	|	Документ.РеализацияПоЗаказам = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Получаем заказы клиентов из ТЧ Товары, думаю самый оптимальный способ.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыРеализаций.ЗаказКлиента КАК Документ
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТоварыРеализаций
	|		ПО ТаблицаДокументов.Документ = ТоварыРеализаций.Ссылка
	|ГДЕ
	|	ТаблицаДокументов.Документ.РеализацияПоЗаказам = ИСТИНА
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДокументов;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеализаций.Документ 						КАК Документ,
	|	МАКСИМУМ(ЕСТЬNULL(ЭтапыГрафикаОплаты.Сдвиг, 0)) КАК Сдвиг,
	|	ЕСТЬNULL(ЭтапыГрафикаОплаты.Ссылка.Календарь, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК Календарь,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
	|ПОМЕСТИТЬ ТаблицаЭтаповОплатыПоРеализациям
	|ИЗ
	|	ТаблицаРеализаций КАК ТаблицаРеализаций
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|		ПО ТаблицаРеализаций.Соглашение = ЭтапыГрафикаОплаты.Ссылка
	|		
	|СГРУППИРОВАТЬ ПО 
	|	ТаблицаРеализаций.Документ,
	|	ЭтапыГрафикаОплаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРеализаций;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКалендарей.Календарь 			КАК Календарь,
	|	ТаблицаКалендарей.ДатаГрафика 			КАК ДатаГрафика,
	|	ТаблицаКалендарей.СмещениеКалендаря 	КАК СмещениеКалендаря
	|ПОМЕСТИТЬ ТаблицаСмещений
	|ИЗ
	|	&ТаблицаКалендарей КАК ТаблицаКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // Результирующая таблица по реализациям
	|	ОплатыПоРеализациям.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ОплатыПоРеализациям.Календарь = ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|			ТОГДА ОплатыПоРеализациям.ДатаПлатежа
	|		КОГДА ТаблицаСмещений.СмещениеКалендаря ЕСТЬ NULL
	|			ТОГДА ОплатыПоРеализациям.ДатаПлатежа
	|		ИНАЧЕ
	|			ТаблицаСмещений.ДатаПлатежа
	|	КОНЕЦ КАК ДатаПлатежа
	|			
	|ИЗ
	|	ТаблицаЭтаповОплатыПоРеализациям КАК ОплатыПоРеализациям
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСмещений КАК ТаблицаСмещений
	|		ПО ОплатыПоРеализациям.Календарь = ТаблицаСмещений.Календарь
	|			И ОплатыПоРеализациям.Сдвиг  = ТаблицаСмещений.СмещениеКалендаря
	|
	|УНИЧТОЖИТЬ ТаблицаСмещений;
	|УНИЧТОЖИТЬ ТаблицаЭтаповОплатыПоРеализациям;
	|УНИЧТОЖИТЬ ТаблицаЗаказов;
	|";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаАктуализации()

Функция ТекстЗапросаМассивКалендарей()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Календарь
	               |ИЗ
	               |	Справочник.Календари
	               |ГДЕ
	               |	ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКалендарей()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Календарь		КАК Календарь,
	|	ДатаГрафика		КАК ДатаГрафика,
	|	0 				КАК СмещениеКалендаря
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики
	|ГДЕ
	|	ДатаГрафика >= &ТекущаяДата
	|	И ДеньВключенВГрафик = ИСТИНА
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика ВОЗР";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ПолучитьМассивКалендарей()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаМассивКалендарей();
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Календарь");
	
КонецФункции

// Для рассчета даты оплаты по календарю, необходимо 
// пронумеровать рабочие дни в календаре где 0 - смещение
// для текущего дня в графике (начальное значение)
//
Функция СоздатьТаблицуКалендарей()
	
	МассивКалендарей = ПолучитьМассивКалендарей();
	ДатаОтбора		 = НачалоДня(ТекущаяДата());
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТаблицаКалендарей();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаОтбора);
	
	ТаблицаКалендарей = Запрос.Выполнить().Выгрузить();
	ТаблицаКалендарей.Индексы.Очистить();
	ТаблицаКалендарей.Индексы.Добавить("Календарь");
	
	Для Каждого Календарь Из МассивКалендарей Цикл 
		СтруктураПоиска  = Новый Структура("Календарь", Календарь);
		РезультатыПоиска = ТаблицаКалендарей.НайтиСтроки(СтруктураПоиска);
		Если РезультатыПоиска.Количество() > 0 Тогда
			СмещениеКалендаря = ?(РезультатыПоиска[0].ДатаГрафика = ДатаОтбора, 0, 1);
			Для каждого РезультатПоиска ИЗ РезультатыПоиска Цикл РезультатПоиска.СмещениеКалендаря = СмещениеКалендаря; СмещениеКалендаря = СмещениеКалендаря + 1; КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаКалендарей;
	
КонецФункции



// Изменяет даты платежей в документах «Реализация товаров и услуг»
// на те, которые были расчитаны в соответстии с временем отгруки.
//
// Параметры:
//  ТаблицаРеализаций - ТаблицаЗначений - таблица значений с колонками:
//    * Документ    - ДокументСсылка.РеализацияТоваровУслуг - документ в котором нужно изменить дату платежа.
//    * ДатаПлатежа - Дата - дата платежа, которую нужно установить в  документе.
//
Процедура ИзменитьДатыПлатежаРеализаций(ТаблицаРеализаций)

	Для каждого СтрокаТаблицы Из ТаблицаРеализаций Цикл
	
		ДокументРеализации 			   = СтрокаТаблицы.Документ.ПолучитьОбъект();
		ДокументРеализации.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
		
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);    				
		Исключение
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
			ТемаПисьма  = НСтр("ru='[ПЕНЯ] Не удалось изменить дату платежа в документе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = НСтр("ru='Документ: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, НавигационнаяСсылка);
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТемаПисьма, СтрокаТаблицы.Документ, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры

// Изменяет етапы графиков оплаты в документе «Заказ клиента» которые проставились раньше
// рассчитаной даты оплаты.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - таблица значений с колонками:
//    * Документ    - ДокументСсылка.ЗаказКлиента - документ в котором нужно изменить дату платежа.
//    * ДатаПлатежа - Дата - дата платежа, которую нужно установить в  документе.
//
Процедура ИзменитьДатыПлатежаЗаказов(ТаблицаЗаказов)

	СтруктураПоиска = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаказов Цикл
	
		ДокументЗаказ 		= СтрокаТаблицы.Документ.ПолучитьОбъект();
		ЭтапыГрафикаОплаты  = ДокументЗаказ.ЭтапыГрафикаОплаты;
		РезультатыПоиска	= ЭтапыГрафикаОплаты.НайтиСтроки(СтруктураПоиска);
		
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			Если РезультатПоиска.ДатаПлатежа < СтрокаТаблицы.ДатаПлатежа Тогда
				РезультатПоиска.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
			КонецЕсли;
		КонецЦикла; 
		
		Попытка
			ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);    				
		Исключение
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
			ТемаПисьма  = НСтр("ru='[ПЕНЯ] Не удалось изменить даты етапы графиков оплаты в документе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = НСтр("ru='Документ: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, НавигационнаяСсылка);
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТемаПисьма, СтрокаТаблицы.Документ, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры
 


// Отправляет сообщение на 777 о проблеме
//
// Параметры:
// ТемаПисьма   	- Строка 		- Тема письма в техническую поддрежку.
// ТекстПисьма  	- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической суперподдержки"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация даты расчета пени.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
		
	КонецПроцедуры
	
Процедура ОповеститьВSlack(СообщениеSlack)
    
    МассивПрикреплений = Новый Массив;
    СтруктураПрикреплений = git_Slack.ПолучитьСтруктуруПрикреплений();
    СтруктураПрикреплений.Вставить("fallback",  "Уведомление");
    СтруктураПрикреплений.Вставить("text",      "Дата: " + ТекущаяДата());
    СтруктураПрикреплений.Вставить("pretext",   СообщениеSlack);
    СтруктураПрикреплений.Вставить("color",     "#3399FF");
    МассивПрикреплений.Добавить(СтруктураПрикреплений);

    СтруктураДанных = git_Slack.ПолучитьПустуюСтруктуруДанных();
    СтруктураДанных.Вставить("username",    "Base (yt11)");
    СтруктураДанных.Вставить("icon_emoji",  ":jack_o_lantern:");
    СтруктураДанных.Вставить("channel",     "#test_channel");
    СтруктураДанных.Вставить("attachments", МассивПрикреплений);
    git_Slack.ОтправитьДанные("ktchat.slack.com", "x2VEjiOJKl2UnSA5t2DinjEt", СтруктураДанных);
    
КонецПроцедуры // ОповеститьВSlack()


#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "2.0.10";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. актуализация даты расчета пени [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. актуализация даты расчета пени [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. актуализация даты расчета пени [" + Версия + "]", "ВыполнитьАктуализацию();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 