
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ПрограмныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Как работает дата актуализации даты оплаты.
//
// ОБЩИЕ ПОЛОЖЕНИЯ
// 1. Изменение проводим только для документов выписаных на партнеров
// 	  в которых установлен сегмент - Партнеры, покупатели оптового отдела.
// 2. Считается, что у всех соглашениях и этапах графика оплаты установлен
//    только один етап, и если он не "Кредит после отгрузки" то такой
//    документ можно игнорировать.
// 3. Календари в рассчете не используем, поскольку выходные дни на 
//    рассчет пени не влияют.
// 4. Если текущая дата больше или равна дате первой отгрузки + отстрочка
//    тогда прекращаем перерасчет для таких заказов / реализаций.
//
// ПРОЦЕДУРА РАССЧЕТА
//
// ДЛЯ РЕАЛИЗАЦИЙ ТОВАРОВ И УСЛУГ.
// 1. Если у нас ордерный склад. 
//		1.1. Если на основании РТиУ нету расходных ордеров тогда для
//			 реализации необходимо пересчитать дату по графику, начиная
//			 из сегодняшнего дня.
//		1.2. Если реализация находится в месте (укомплектовано или
//			 погружено в машину). Тогда нужно посчитать стоимость 
//			 товара в месте и дату рассчета брать как дату комплектации
//			 или отгрузки партнеру (но здесь нужно исключить только 
//			 долю стоимости номенклатуры которая не отгружена партнеру).
//      1.3. Если по реализации есть расходный ордер и нету места
//			 тогда для рассчета среднезвешенной даты берем дату ордера 
//			 (но здесь нужно исключить только долю стоимости номенклатуры
//			 которая не отгружена партнеру).
//      1.4. Для рассчета остатка отгрузки выбираем неотгруженную номенклатуру.
//		1.5. Возвраты на основании реализаций считаются по средневзвешенному
//   	     только минусуют по формуле.
//
// 2. Если у нас безордерный склад. Для реализаций не на основании заказов 
//    дату платежа не перещитываем.
//
// ДЛЯ ЗАКАЗОВ КЛИЕНТОВ.
// 1. Если у нас ордерный склад.
//		1.1. Если на основании ЗК нету документов то такой заказ
//			 не перепроводится.
//		1.2. Если реализация на основнии заказа клиента входит в место
//			 (место укомплектовано или в машыне, отгружено партнеру) тогда для реализации
//           необходимо брать стоимость номенклатуры из места и дату
//			 движения места (но здесь нужно исключить только долю стоимости номенклатуры
//			 которая не отгружена партнеру).
//		1.3. Если реализация на основании заказа клиента не входит в 
//			 место доставки тогда дату берем по расходному ордеру
//			 (но здесь нужно исключить только долю стоимости номенклатуры
//			 которая не отгружена партнеру).
//		1.4. Возвраты на основании реализаций считаются по средневзвешенному
//   	     только минусуют по формуле.
//
// 2. Если ордерный склад.
//		2.1. Рассчет проходит по реализация отгруженным по заказу.
//
// ПРИМЕР РАССЧЕТА НА ОСНОВАНИИ ЗАКАЗА КЛИЕНТА
// Заказ на 1000 грн, (01.01), кредит 10 дней.
// - РТиУ1   (02.01), 200 грн
// - РТиУ2   (05.01), 500 грн
// - Возврат (06.01), 500 грн
// - РТиУ3	 (09.01), 300 грн
//
// Текущая дата		Как считаем (округляем к меньшему)
// 01.01			10.01 - автоматически при создании заказа
// 02.01			(12.01 - 02.01)*0.2 + (10 * 0.8) + 02.01 = 12.01
// 03.01			(12.01 - 03.01)*0.2 + (10 * 0.8) + 03.01 = 12.01
// 04.01			(12.01 - 04.01)*0.2 + (10 * 0.8) + 04.01 = 13.01
// 05.01			(12.01 - 05.01)*0.2 + (15.01 - 05.01)*0.5 + (10 * 0.3) + 05.01 = 14.01
// 06.01			(12.01 - 06.01)*0.2 + (15.01 - 06.01)*0.5 - (16.01 - 06.01)*0.5 + (10 * 0.3) + 06.01 = 09.01
// 07.01			(12.01 - 07.01)*0.2 + (15.01 - 07.01)*0.5 - (16.01 - 07.01)*0.5 + (10 * 0.3) + 07.01 = 10.01
// 08.01			(12.01 - 08.01)*0.2 + (15.01 - 08.01)*0.5 - (16.01 - 08.01)*0.5 + (10 * 0.3) + 08.01 = 11.01
// 09.01			(12.01 - 09.01)*0.2 + (15.01 - 09.01)*0.5 - (16.01 - 09.01)*0.5 + (19.01 - 09.01)*0.3 + 09.01 = 12.01

// Точка входа регламентного задания "Актуализация расчета даты расчета пени".
//
Процедура ВыполнитьАктуализацию() Экспорт
	
	ЗафиксироватьСобытиеВЖурналеРегистрации(
					НСтр("ru='Начало выполнения регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					, 
					,
					УровеньЖурналаРегистрации.Информация);
					
	ОповеститьВSlack("Начало обновления кеша пересчета.");
	
	ОбновитьКешПересчета();
	
	ОповеститьВSlack("Окончание обновления кеша пересчета.");
							
	
		
	ЗафиксироватьСобытиеВЖурналеРегистрации(
					НСтр("ru='Начало выполнения регламентного задания.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					, 
					,
					УровеньЖурналаРегистрации.Информация);
					
	ОповеститьВSlack("Конец актуализации");
	
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов
// Получает текст запроса для выполнения актуализаци даты расчета пени.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаАктуализации()

	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Получаем входную цену (одну из нескольких) нужно только для
	|// рассчета средневзешенного значения по реализациям.
	|// Также нужно получить курсы валют.
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ВходныеЦены
	|ИЗ
	|	РегистрСведений.ALPS_ВидыЦен
	|ГДЕ
	|	Входная = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюта 										КАК Валюта,
	|	ВЫРАЗИТЬ(Курс / Кратность КАК Число(15, 4)) КАК Курс
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, )
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|// Блок получения документов по местах:
	|// - которые лежат на складе
	|// - которые едут в машыне
	|// 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ПогруженныеМеста
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних
	|ГДЕ
	|	СтатусОтгрузки = &СтатусМестоПогружено
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка КАК ДокументПоездка
	|ПОМЕСТИТЬ ДокументыПоездки
	|ИЗ
	|	Документ.ПоездкаЗаМаршрутом 
	|ГДЕ
	|	СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
	|	И Проведен 	  = ИСТИНА
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоездка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрПоездка.МестоДоставки КАК Место
	|ПОМЕСТИТЬ ПогруженныеМестаПоДокументу
	|ИЗ
	|	РегистрСведений.ПоездкаЗаМаршрутом КАК РегистрПоездка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоездки КАК ДокументыПоездки
	|		ПО РегистрПоездка.ДокументПоездки = ДокументыПоездки.ДокументПоездка
	|ГДЕ
	|	РегистрПоездка.ЭтоЗадача = ЛОЖЬ
	|	И РегистрПоездка.ИсключеноИзДоставки = ЛОЖЬ
	|	И РегистрПоездка.Архивное = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогруженныеМеста.Место КАК Место
	|ПОМЕСТИТЬ ТаблицаПогруженныхМест
	|ИЗ
	|	ПогруженныеМеста КАК ПогруженныеМеста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогруженныеМестаПоДокументу КАК ПогруженныеМестаПоДокументу
	|		ПО ПогруженныеМеста.Место = ПогруженныеМестаПоДокументу.Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ТаблицаУкомплектованныхМест
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(,)
	|ГДЕ
	|	СтатусОтгрузки = &СтатусМестоУкомплектовано
	|	И Место.Архивный = ЛОЖЬ
	|	И ВариантМаршрута.НеАктивен = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ТаблицаМест
	|ИЗ
	|	ТаблицаПогруженныхМест
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Место
	|ИЗ
	|	ТаблицаУкомплектованныхМест
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПогруженныеМеста;
	|УНИЧТОЖИТЬ ДокументыПоездки;
	|УНИЧТОЖИТЬ ПогруженныеМестаПоДокументу;
	|УНИЧТОЖИТЬ ТаблицаПогруженныхМест;
	|УНИЧТОЖИТЬ ТаблицаУкомплектованныхМест;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	|	КОНЕЦ КАК Документ.РеализацияТоваровУслуг) КАК Документ,
	|	ТаблицаМест.Место КАК Место
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	ТаблицаМест КАК ТаблицаМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|		ПО ТаблицаМест.Место = МестаПоДокументам.Место
	|ГДЕ
	|	ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|	КОНЕЦ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|// Документы по местам сформированы (только реализации товаров).
	|// Храним документы в ВТ ТаблицаДокументов.
	|//
	|////////////////////////////////////////////////////////////////////////////////
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Блок рассчета документов которые нужно проанализировать. 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ// Сюда добавить неотгруженные РТиУ из Соборной
	|	Документ 				КАК Документ,
	|	Документ.ДатаПлатежа    КАК ДатаПлатежа,
	|	Документ.Соглашение		КАК Соглашение
	|ПОМЕСТИТЬ ТаблицаРеализаций
	|ИЗ
	|	ТаблицаДокументов
	|ГДЕ
	|	Документ.РеализацияПоЗаказам = ЛОЖЬ
	|	
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) 				КАК Документ,
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа	КАК ДатаПлатежа,
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение   КАК Соглашение
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг)
	|ГДЕ
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам = ЛОЖЬ
	|	И КОтгрузкеОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Получаем заказы на основании которых были созданы РТиУ но не отгружены.
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Документ
	|ПОМЕСТИТЬ ТаблицаНеОтгруженныхРТиУПоЗаказам
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг)
	|	
	|ГДЕ
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам = ИСТИНА
	|	И КОтгрузкеОстаток > 0
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Получаем заказы клиентов из ТЧ Товары, думаю самый оптимальный способ.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ // Сюда добавить закази которые не в поездках но которые нужно пересчитать.
	|	ВЫРАЗИТЬ(ТоварыРеализаций.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК Документ
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			Документ КАК Документ
	|		ИЗ
	|			ТаблицаДокументов
	|		ГДЕ
	|			Документ.РеализацияПоЗаказам = ИСТИНА
	|			
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			Документ КАК Документ
	|		ИЗ
	|			ТаблицаНеОтгруженныхРТиУПоЗаказам			
	|	) КАК ВложенныйЗапрос	
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТоварыРеализаций
	|		ПО ВложенныйЗапрос.Документ = ТоварыРеализаций.Ссылка
	|;
	|
	|УНИЧТОЖИТЬ ТаблицаНеОтгруженныхРТиУПоЗаказам;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Работа из реализациями, рассчет даты платежа по средневзвешенному.
	|// Рассчет будем проводить по входной цене.
	|////////////////////////////////////////////////////////////////////////////////
	|// Для начала получим список номенклатуры всей РТиУ (вместе с количеством)
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг) 	КАК Документ,
	|	АналитикаНоменклатуры.Номенклатура							КАК Номенклатура,
	|	СУММА(Продажи.КоличествоОборот)								КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатурыРеализаций
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|							,
	|							,
	|							,
	|							ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг) В 
	|								(ВЫБРАТЬ 
	|									Документ 
	|								 ИЗ 
	|								 	ТаблицаРеализаций)) КАК Продажи
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Продажи.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг),
	|	АналитикаНоменклатуры.Номенклатура
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Цены.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Цены.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА Цены.Цена
	|		ИНАЧЕ 
	|			Цены.Цена * (КурсыВалютРегистра.Курс / КурсыВалютУпр.Курс)
	|	КОНЕЦ * 
	|	ВЫБОР
	|		КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ
	|			Цены.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурРеализаций
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	|						Номенклатура В 
	|						(ВЫБРАТЬ
	|							Номенклатура
	|						 ИЗ
	|						 	ТаблицаНоменклатурыРеализаций)
	|						И ВидЦены В 
	|						(ВЫБРАТЬ
	|							ВидЦены
	|						 ИЗ
	|						 	ВходныеЦены)) КАК Цены
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегистра
	|		ПО Цены.Валюта = КурсыВалютРегистра.Валюта
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Проводим рассчет стоимости полностью всех реализаций
	|ВЫБРАТЬ
	|	НоменклатураРеализаций.Документ КАК Документ,
	|	СУММА(НоменклатураРеализаций.Количество * ЦеныРеализаций.Цена) КАК Сумма
	|ПОМЕСТИТЬ СуммыПоДокументамРеализаций
	|ИЗ
	|	ТаблицаНоменклатурыРеализаций КАК НоменклатураРеализаций
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурРеализаций КАК ЦеныРеализаций
	|		ПО НоменклатураРеализаций.Номенклатура = ЦеныРеализаций.Номенклатура
	|		
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураРеализаций.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураРеализаций.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Проводим рассчет стоимости того, что едет клиенту или остается на остатках.
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	СУММА(ВложенныйЗапрос.Количество * ЕСТЬNULL(ЦеныНоменклатур.Цена, 0)) КАК Сумма
	|ПОМЕСТИТЬ СуммаПоДокументамРеализацийВПоездке
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			ТаблицаДокументов.Документ КАК Документ,
	|			МестаНоменклатуры.Номенклатура КАК Номенклатура,
	|			МестаНоменклатуры.Количество КАК Количество			
	|		ИЗ
	|			РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|				ПО МестаНоменклатуры.Место = ТаблицаДокументов.Место
	|					И ТаблицаДокументов.Документ.РеализацияПоЗаказам = ЛОЖЬ
	|					
	|		ОБЪЕДИНИТЬ ВСЕ
	|					
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Документ,
	|			Номенклатура КАК Номенклатура,
	|			КОтгрузкеОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг)
	|		ГДЕ
	|			ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам = ЛОЖЬ
	|			И КОтгрузкеОстаток > 0
	|	) КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурРеализаций КАК ЦеныНоменклатур
	|	ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатур.Номенклатура
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Документ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ВложенныйЗапрос.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Рассчет коэффициента сдвига даты оплаты по реализациям товаров и услуг
	|ВЫБРАТЬ
	|	СуммыПоРеализациям.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА СуммыВПоездке.Сумма ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 
	|			СуммыВПоездке.Сумма / СуммыПоРеализациям.Сумма
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаКоэффициентовРеализаций
	|ИЗ
	|	СуммыПоДокументамРеализаций КАК СуммыПоРеализациям
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаПоДокументамРеализацийВПоездке КАК СуммыВПоездке
	|		ПО СуммыПоРеализациям.Документ = СуммыВПоездке.Документ
	|		
	|ИНДЕКСИРОВАТЬ ПО
	|	СуммыПоРеализациям.Документ
	|;
	|
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыРеализаций;
	|УНИЧТОЖИТЬ ЦеныНоменклатурРеализаций;
	|УНИЧТОЖИТЬ СуммыПоДокументамРеализаций;
	|УНИЧТОЖИТЬ СуммаПоДокументамРеализацийВПоездке;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеализаций.Документ 						КАК Документ,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЭтапыГрафикаОплаты.Сдвиг, 0) * ЕСТЬNULL(ТаблицаКоэффициентов.Коэффициент, 1) КАК ЧИСЛО(15, 0))) КАК Сдвиг,
	|	ЕСТЬNULL(ЭтапыГрафикаОплаты.Ссылка.Календарь, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК Календарь,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВЫРАЗИТЬ(ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0) * ЕСТЬNULL(ТаблицаКоэффициентов.Коэффициент, 1) КАК ЧИСЛО (15, 0))), ДЕНЬ) КАК ДатаПлатежа
	|ПОМЕСТИТЬ ТаблицаЭтаповОплатыПоРеализациям
	|ИЗ
	|	ТаблицаРеализаций КАК ТаблицаРеализаций
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|		ПО ТаблицаРеализаций.Соглашение = ЭтапыГрафикаОплаты.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоэффициентовРеализаций КАК ТаблицаКоэффициентов
	|		ПО ТаблицаРеализаций.Документ = ТаблицаКоэффициентов.Документ
	|		
	|СГРУППИРОВАТЬ ПО 
	|	ТаблицаРеализаций.Документ,
	|	ЭтапыГрафикаОплаты.Ссылка,
	|	ТаблицаКоэффициентов.Коэффициент
	|;
	|
	|УНИЧТОЖИТЬ ТаблицаКоэффициентовРеализаций;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКалендарей.Календарь 			КАК Календарь,
	|	ТаблицаКалендарей.ДатаГрафика 			КАК ДатаГрафика,
	|	ТаблицаКалендарей.СмещениеКалендаря 	КАК СмещениеКалендаря
	|ПОМЕСТИТЬ ТаблицаСмещений
	|ИЗ
	|	&ТаблицаКалендарей КАК ТаблицаКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатыПоРеализациям.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ОплатыПоРеализациям.Календарь = ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|			ТОГДА ОплатыПоРеализациям.ДатаПлатежа
	|		КОГДА ТаблицаСмещений.СмещениеКалендаря ЕСТЬ NULL
	|			ТОГДА ОплатыПоРеализациям.ДатаПлатежа
	|		ИНАЧЕ
	|			ТаблицаСмещений.ДатаГрафика
	|	КОНЕЦ КАК ДатаПлатежа
	|ПОМЕСТИТЬ ДатыПлатежаПоРеализациям			
	|ИЗ
	|	ТаблицаЭтаповОплатыПоРеализациям КАК ОплатыПоРеализациям
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСмещений КАК ТаблицаСмещений
	|		ПО ОплатыПоРеализациям.Календарь = ТаблицаСмещений.Календарь
	|			И ОплатыПоРеализациям.Сдвиг  = ТаблицаСмещений.СмещениеКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // Результирующая таблица реализаций
	|	ТаблицаРеализаций.Документ 													  КАК Документ,
	|	ЕСТЬNULL(ДатыПлатежаПоРеализациям.ДатаПлатежа, ТаблицаРеализаций.ДатаПлатежа) КАК ДатаПлатежа
	|ИЗ
	|	ТаблицаРеализаций КАК ТаблицаРеализаций
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПлатежаПоРеализациям КАК ДатыПлатежаПоРеализациям
	|		ПО ТаблицаРеализаций.Документ = ДатыПлатежаПоРеализациям.Документ
	|		
	|ГДЕ
	|	ЕСТЬNULL(ДатыПлатежаПоРеализациям.ДатаПлатежа, 0) <> 0
	|	И ЕСТЬNULL(ДатыПлатежаПоРеализациям.ДатаПлатежа, ДАТАВРЕМЯ(1,1,1)) <> ДатыПлатежаПоРеализациям.ДатаПлатежа
	|;
	|
	|УНИЧТОЖИТЬ ДатыПлатежаПоРеализациям;
	|УНИЧТОЖИТЬ ТаблицаРеализаций;
	|УНИЧТОЖИТЬ ТаблицаЭтаповОплатыПоРеализациям;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Проводим средневзвешенный рассчет для заказов клиентов
	|////////////////////////////////////////////////////////////////////////////////
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Получаем суммы всех заказов
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента) КАК Документ,
	|	Номенклатура 									 КАК Номенклатура,
	|	ЗаказаноОборот 									 КАК Количество
	|ПОМЕСТИТЬ ВсяНоменклатураЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(
	|							,
	|							,
	|							,
	|							ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента) В 
	|							(
	|								ВЫБРАТЬ
	|									Документ
	|								ИЗ
	|									ТаблицаЗаказов
	|							))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Цены.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Цены.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА Цены.Цена
	|		ИНАЧЕ 
	|			Цены.Цена * (КурсыВалютРегистра.Курс / КурсыВалютУпр.Курс)
	|	КОНЕЦ * 
	|	ВЫБОР
	|		КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ
	|			Цены.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурЗаказов
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	|						Номенклатура В 
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Номенклатура
	|						 ИЗ
	|						 	ВсяНоменклатураЗаказов)
	|						И ВидЦены В 
	|						(ВЫБРАТЬ
	|							ВидЦены
	|						 ИЗ
	|						 	ВходныеЦены)) КАК Цены
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегистра
	|		ПО Цены.Валюта = КурсыВалютРегистра.Валюта
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	|		ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Проводим рассчет стоимости полностью всех заказов
	|ВЫБРАТЬ
	|	НоменклатураЗаказов.Документ КАК Документ,
	|	СУММА(НоменклатураЗаказов.Количество * ЦеныЗаказов.Цена) КАК Сумма
	|ПОМЕСТИТЬ СуммыПоДокументамЗаказов
	|ИЗ
	|	ВсяНоменклатураЗаказов КАК НоменклатураЗаказов
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурЗаказов КАК ЦеныЗаказов
	|		ПО ЦеныЗаказов.Номенклатура = НоменклатураЗаказов.Номенклатура
	|		
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураЗаказов.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураЗаказов.Документ
	|;
	|
	|УНИЧТОЖИТЬ ВсяНоменклатураЗаказов;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Проводим рассчет стоимости того, что едет клиенту или остается на остатках.
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	СУММА(ВложенныйЗапрос.Количество * ЕСТЬNULL(ЦеныНоменклатур.Цена, 0)) КАК Сумма
	|ПОМЕСТИТЬ СуммаПоДокументамЗаказовВПоездке
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			ТаблицаДокументов.Документ КАК Документ,
	|			МестаНоменклатуры.Номенклатура КАК Номенклатура,
	|			МестаНоменклатуры.Количество КАК Количество			
	|		ИЗ
	|			РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|				ПО МестаНоменклатуры.Место = ТаблицаДокументов.Место
	|					И ТаблицаДокументов.Документ.РеализацияПоЗаказам = ИСТИНА
	|					
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента) КАК Документ,
	|			Номенклатура 									 КАК Номенклатура,
	|			ЗаказаноОстаток 								 КАК Количество
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Остатки(
	|									,
	|									ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента) В 
	|									(
	|										ВЫБРАТЬ
	|											Документ
	|										ИЗ
	|											ТаблицаЗаказов
	|									))
	|		ГДЕ
	|			ЗаказаноОстаток > 0
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|					
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Документ,
	|			Номенклатура КАК Номенклатура,
	|			КОтгрузкеОстаток КАК Количество
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг)
	|		ГДЕ
	|			ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам = ИСТИНА
	|			И КОтгрузкеОстаток > 0
	|	) КАК ВложенныйЗапрос
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурЗаказов КАК ЦеныНоменклатур
	|	ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатур.Номенклатура
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Документ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ВложенныйЗапрос.Документ
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Рассчет коэффициента сдвига даты оплаты по заказам клиента
	|ВЫБРАТЬ
	|	СуммыПоЗаказам.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА СуммыВПоездке.Сумма ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 
	|			СуммыВПоездке.Сумма / СуммыПоЗаказам.Сумма
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаКоэффициентовЗаказов
	|ИЗ
	|	СуммыПоДокументамЗаказов КАК СуммыПоЗаказам
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаПоДокументамЗаказовВПоездке КАК СуммыВПоездке
	|		ПО СуммыПоЗаказам.Документ = СуммыВПоездке.Документ
	|		
	|ИНДЕКСИРОВАТЬ ПО
	|	СуммыПоЗаказам.Документ
	|;
	|
	|УНИЧТОЖИТЬ СуммыПоДокументамЗаказов;
	|УНИЧТОЖИТЬ ЦеныНоменклатурЗаказов;
	|УНИЧТОЖИТЬ СуммаПоДокументамЗаказовВПоездке;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Мощьная работа из заказами клиентов
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.Документ КАК Документ,
	|	ЭтапыГрафикаСоглашения.ВариантОплаты КАК ВариантОплаты,
	|	ВЫРАЗИТЬ(ЭтапыГрафикаСоглашения.Сдвиг * ЕСТЬNULL(ТаблицаКоэффициентов.Коэффициент, 1) КАК Число(15, 0)) КАК Сдвиг,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВЫРАЗИТЬ(ЭтапыГрафикаСоглашения.Сдвиг * ЕСТЬNULL(ТаблицаКоэффициентов.Коэффициент, 1) КАК Число(15, 0))) КАК ДатаПлатежа,
	|	ЭтапыГрафикаСоглашения.Ссылка.Календарь КАК Календарь
	|ПОМЕСТИТЬ ЭтапыПоСоглашению
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаСоглашения
	|		ПО ТаблицаЗаказов.Документ.Соглашение = ЭтапыГрафикаСоглашения.Ссылка
	|			И ЭтапыГрафикаСоглашения.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоэффициентовЗаказов КАК ТаблицаКоэффициентов
	|		ПО ТаблицаЗаказов.Документ = ТаблицаКоэффициентов.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаЗаказов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.Документ КАК Документ,
	|	ЭтапыГрафикаОплат.ВариантОплаты КАК ВариантОплаты,
	|	ВЫРАЗИТЬ(ЭтапыГрафикаОплат.Сдвиг * ЕСТЬNULL(ТаблицаКоэффициентов.Коэффициент, 1) КАК Число(15, 0)) КАК Сдвиг,
	|	ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВЫРАЗИТЬ(ЭтапыГрафикаОплат.Сдвиг * ЕСТЬNULL(ТаблицаКоэффициентов.Коэффициент, 1) КАК Число(15, 0))) КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплат.Ссылка.Календарь КАК Календарь
	|ПОМЕСТИТЬ ЭтапыПоГрафику
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплат
	|		ПО ТаблицаЗаказов.Документ.ГрафикОплаты = ЭтапыГрафикаОплат.Ссылка
	|			И ЭтапыГрафикаОплат.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоэффициентовЗаказов КАК ТаблицаКоэффициентов
	|		ПО ТаблицаЗаказов.Документ = ТаблицаКоэффициентов.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаЗаказов.Документ
	|;
	|
	|УНИЧТОЖИТЬ ТаблицаКоэффициентовЗаказов;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.Документ 		КАК Документ,
	|	ЭтапыПоГрафику.ВариантОплаты 	КАК ВариантОплаты,
	|	ЭтапыПоГрафику.Сдвиг 			КАК Сдвиг,
	|	ЭтапыПоГрафику.ДатаПлатежа 		КАК ДатаПлатежа,
	|	ЭтапыПоГрафику.Календарь 		КАК Календарь
	|ПОМЕСТИТЬ ЭтапыОплатПоЗаказам
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыПоГрафику КАК ЭтапыПоГрафику
	|		ПО ТаблицаЗаказов.Документ = ЭтапыПоГрафику.Документ
	|ГДЕ
	|	ТаблицаЗаказов.Документ.ГрафикОплаты <> ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.Документ 		КАК Документ,
	|	ЭтапыПоСоглашению.ВариантОплаты КАК ВариантОплаты,
	|	ЭтапыПоСоглашению.Сдвиг 		КАК Сдвиг,
	|	ЭтапыПоСоглашению.ДатаПлатежа 	КАК ДатаПлатежа,
	|	ЭтапыПоСоглашению.Календарь 	КАК Календарь
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыПоСоглашению КАК ЭтапыПоСоглашению
	|		ПО ТаблицаЗаказов.Документ = ЭтапыПоСоглашению.Документ
	|ГДЕ
	|	ТаблицаЗаказов.Документ.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
	|;
	|
	|УНИЧТОЖИТЬ ЭтапыПоСоглашению;
	|УНИЧТОЖИТЬ ЭтапыПоГрафику;  
	|УНИЧТОЖИТЬ ТаблицаЗаказов;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // Результирующая таблица для заказов клиента
	|	ЭтапыОплатПоЗаказам.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаСмещений.ДатаГрафика ЕСТЬ NULL
	|			ТОГДА ЭтапыОплатПоЗаказам.ДатаПлатежа
	|		ИНАЧЕ ТаблицаСмещений.ДатаГрафика
	|	КОНЕЦ КАК ДатаПлатежа
	|ИЗ
	|	ЭтапыОплатПоЗаказам КАК ЭтапыОплатПоЗаказам
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСмещений КАК ТаблицаСмещений
	|		ПО ЭтапыОплатПоЗаказам.Календарь = ТаблицаСмещений.Календарь
	|			И ЭтапыОплатПоЗаказам.Сдвиг  = ТаблицаСмещений.СмещениеКалендаря
	|ИТОГИ ПО
	|	ЭтапыОплатПоЗаказам.Документ
	|;
	|
	|УНИЧТОЖИТЬ ЭтапыОплатПоЗаказам;
	|
	|УНИЧТОЖИТЬ КурсыВалют;
	|УНИЧТОЖИТЬ ТаблицаСмещений;
	|УНИЧТОЖИТЬ ТаблицаДокументов;
	|УНИЧТОЖИТЬ ВходныеЦены;
	|";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаАктуализации()

Функция ТекстЗапросаКешПересчета()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Кешироватся должны документы партнеров, которые входять
	|// в состав сегметна <Партнеры, покупатели оптового отдела>
	|// 0.
	|ВЫБРАТЬ
	|	Партнер КАК Партнер
	|ПОМЕСТИТЬ ТаблицаПартнеры
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента
	|ГДЕ
	|	Сегмент = &Сегмент
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Блок получения документов по местах:
	|// - которые лежат на складе
	|// - которые едут в машыне
	|// 
	|////////////////////////////////////////////////////////////////////////////////
	|// 1.
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ПогруженныеМеста
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних
	|ГДЕ
	|	СтатусОтгрузки = &СтатусМестоПогружено
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.
	|ВЫБРАТЬ
	|	Ссылка КАК ДокументПоездка
	|ПОМЕСТИТЬ ДокументыПоездки
	|ИЗ
	|	Документ.ПоездкаЗаМаршрутом 
	|ГДЕ
	|	СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
	|	И Проведен 	  = ИСТИНА
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоездка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 3.
	|ВЫБРАТЬ
	|	РегистрПоездка.МестоДоставки КАК Место
	|ПОМЕСТИТЬ ПогруженныеМестаПоДокументу
	|ИЗ
	|	РегистрСведений.ПоездкаЗаМаршрутом КАК РегистрПоездка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоездки КАК ДокументыПоездки
	|		ПО РегистрПоездка.ДокументПоездки = ДокументыПоездки.ДокументПоездка
	|ГДЕ
	|	РегистрПоездка.ЭтоЗадача = ЛОЖЬ
	|	И РегистрПоездка.ИсключеноИзДоставки = ЛОЖЬ
	|	И РегистрПоездка.Архивное = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 4.
	|ВЫБРАТЬ
	|	ПогруженныеМеста.Место КАК Место
	|ПОМЕСТИТЬ ТаблицаПогруженныхМест
	|ИЗ
	|	ПогруженныеМеста КАК ПогруженныеМеста
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПогруженныеМестаПоДокументу КАК ПогруженныеМестаПоДокументу
	|		ПО ПогруженныеМеста.Место = ПогруженныеМестаПоДокументу.Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 5.
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ТаблицаУкомплектованныхМест
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(,)
	|ГДЕ
	|	СтатусОтгрузки = &СтатусМестоУкомплектовано
	|	И Место.Архивный = ЛОЖЬ
	|	И ВариантМаршрута.НеАктивен = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 6.
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ ТаблицаМест
	|ИЗ
	|	ТаблицаПогруженныхМест
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Место
	|ИЗ
	|	ТаблицаУкомплектованныхМест
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 7.
	|УНИЧТОЖИТЬ ПогруженныеМеста;
	|// 8.
	|УНИЧТОЖИТЬ ДокументыПоездки;
	|// 9.
	|УНИЧТОЖИТЬ ПогруженныеМестаПоДокументу;
	|// 10.
	|УНИЧТОЖИТЬ ТаблицаПогруженныхМест;
	|// 11.
	|УНИЧТОЖИТЬ ТаблицаУкомплектованныхМест;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 12.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	|	КОНЕЦ КАК Документ.РеализацияТоваровУслуг) КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	ТаблицаМест КАК ТаблицаМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|		ПО ТаблицаМест.Место = МестаПоДокументам.Место
	|ГДЕ
	|	ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|	КОНЕЦ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|// Получаем заказы которые едут в местах
	|////////////////////////////////////////////////////////////////////////////////
	|// 13.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ // Сюда добавить закази которые не в поездках но которые нужно пересчитать.
	|	ВЫРАЗИТЬ(ТоварыРеализаций.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК Документ
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			ТаблицаДокументов.Документ КАК Документ
	|		ИЗ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|				
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПартнеры КАК ТаблицаПартнеры
	|				ПО ТаблицаДокументов.Документ.Партнер = ТаблицаПартнеры.Партнер
	|		ГДЕ
	|			Документ.РеализацияПоЗаказам = ИСТИНА
	|			
	|		ОБЪЕДИНИТЬ
	|		
	|		// Получаем заказы на основании которых были созданы РТиУ но не отгружены.
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(РегистрОтгрузки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Документ
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг) КАК РегистрОтгрузки
	|				
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПартнеры КАК ТаблицаПартнеры
	|				ПО ВЫРАЗИТЬ(РегистрОтгрузки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Партнер = ТаблицаПартнеры.Партнер
	|	
	|ГДЕ
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам = ИСТИНА
	|	И КОтгрузкеОстаток > 0			
	|	) КАК ВложенныйЗапрос	
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТоварыРеализаций
	|		ПО ВложенныйЗапрос.Документ = ТоварыРеализаций.Ссылка
	|;
	|
	|// Получаем список реализаций которые едут
	|////////////////////////////////////////////////////////////////////////////////
	|// 14.
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Документ КАК Документ
	|ПОМЕСТИТЬ РеализацииВПоездке
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПартнеры КАК ТаблицаПартнеры
	|		ПО ТаблицаДокументов.Документ.Партнер = ТаблицаПартнеры.Партнер
	|	
	|ГДЕ
	|	ТаблицаДокументов.Документ.РеализацияПоЗаказам = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 15.
	|УНИЧТОЖИТЬ ТаблицаДокументов;
	|
	|// В список документов дожны попадать частично 
	|// отгруженные РТиУ из ордерного склада
	|////////////////////////////////////////////////////////////////////////////////
	|// 16.
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|							,
	|							ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг)
	|ГДЕ
	|	КОтгрузкеОстаток > 0
	|	И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).
	|
	|// Должны попадать реализации которые едут партнеру
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ
	|ИЗ
	|	РеализацииВПоездке
	|	
	|// Должны попадать заказы клиенту, которые едут / или укомплектованы
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ
	|ИЗ
	|	ТаблицаЗаказов
	|	
	|// Должны попадать заказы, которые не полностью отгружены
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РегистрЗаказы.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиента.Остатки(,) КАК РегистрЗаказы
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПартнеры КАК ТаблицаПартнеры
	|		ПО ВЫРАЗИТЬ(РегистрЗаказы.ЗаказКлиента КАК Документ.ЗаказКлиента).Партнер = ТаблицаПартнеры.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 17.
	|УНИЧТОЖИТЬ ТаблицаПартнеры;
	|// 18.
	|УНИЧТОЖИТЬ РеализацииВПоездке;
	|// 19.
	|УНИЧТОЖИТЬ ТаблицаЗаказов;";
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти


// Процедура выполняет поиск документов в которых необходимо 
// пересчитать или дату платежа (если это реализация товаров 
// и услуг) или обновить этапы графика оплаты.
// Если у нас в этапах графика оплаты первый этап не "кредит после
// отгрузки" тогда такой документ игнорируеться.
//
Процедура ОбновитьКешПересчета()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаКешПересчета();
	
	Запрос.УстановитьПараметр("Сегмент", ктс_ПредопределенныеЗначенияПовтИсп.СегментПартнераОптовогоОтдела());
	Запрос.УстановитьПараметр("СтатусМестоПогружено", Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину);
	Запрос.УстановитьПараметр("СтатусМестоУкомплектовано", Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[16].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатыЗапроса[16].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.Пеня_ДокументыДляПересчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		Запись 				= НаборЗаписей.Добавить();
		Запись.Документ 	= Выборка.Документ;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры





// Изменяет даты платежей в документах «Реализация товаров и услуг»
// на те, которые были расчитаны в соответстии с временем отгруки.
//
// Параметры:
//  ТаблицаРеализаций - ТаблицаЗначений - таблица значений с колонками:
//    * Документ    - ДокументСсылка.РеализацияТоваровУслуг - документ в котором нужно изменить дату платежа.
//    * ДатаПлатежа - Дата - дата платежа, которую нужно установить в  документе.
//
Процедура ИзменитьДатыПлатежаРеализаций(ТаблицаРеализаций)

	Для каждого СтрокаТаблицы Из ТаблицаРеализаций Цикл
	
		ДокументРеализации 			   = СтрокаТаблицы.Документ.ПолучитьОбъект();
		ДокументРеализации.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
		
		Попытка
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);    				
		Исключение
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
			ТемаПисьма  = НСтр("ru='[ПЕНЯ] Не удалось изменить дату платежа в документе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = НСтр("ru='Документ: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, НавигационнаяСсылка);
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТемаПисьма, СтрокаТаблицы.Документ, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры

// Изменяет етапы графиков оплаты в документе «Заказ клиента» которые проставились раньше
// рассчитаной даты оплаты.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - таблица значений с колонками:
//    * Документ    - ДокументСсылка.ЗаказКлиента - документ в котором нужно изменить дату платежа.
//    * ДатаПлатежа - Дата - дата платежа, которую нужно установить в  документе.
//
Процедура ИзменитьДатыПлатежаЗаказов(ТаблицаЗаказов)

	СтруктураПоиска = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗаказов Цикл
	
		ДокументЗаказ 		= СтрокаТаблицы.Документ.ПолучитьОбъект();
		ЭтапыГрафикаОплаты  = ДокументЗаказ.ЭтапыГрафикаОплаты;
		РезультатыПоиска	= ЭтапыГрафикаОплаты.НайтиСтроки(СтруктураПоиска);
		
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			Если РезультатПоиска.ДатаПлатежа < СтрокаТаблицы.ДатаПлатежа Тогда
				РезультатПоиска.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
			КонецЕсли;
		КонецЦикла; 
		
		Попытка
			ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);    				
		Исключение
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
			ТемаПисьма  = НСтр("ru='[ПЕНЯ] Не удалось изменить даты етапы графиков оплаты в документе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = НСтр("ru='Документ: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПисьма, НавигационнаяСсылка);
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТемаПисьма, СтрокаТаблицы.Документ, УровеньЖурналаРегистрации.Ошибка);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла; 

КонецПроцедуры
 


// Отправляет сообщение на 777 о проблеме
//
// Параметры:
// ТемаПисьма   	- Строка 		- Тема письма в техническую поддрежку.
// ТекстПисьма  	- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической суперподдержки"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация даты расчета пени.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
		
	КонецПроцедуры
	
Процедура ОповеститьВSlack(СообщениеSlack)
    
    МассивПрикреплений = Новый Массив;
    СтруктураПрикреплений = git_Slack.ПолучитьСтруктуруПрикреплений();
    СтруктураПрикреплений.Вставить("fallback",  "Уведомление");
    СтруктураПрикреплений.Вставить("text",      "Дата: " + ТекущаяДата());
    СтруктураПрикреплений.Вставить("pretext",   СообщениеSlack);
    СтруктураПрикреплений.Вставить("color",     "#3399FF");
    МассивПрикреплений.Добавить(СтруктураПрикреплений);

    СтруктураДанных = git_Slack.ПолучитьПустуюСтруктуруДанных();
    СтруктураДанных.Вставить("username",    "Base (yt11)");
    СтруктураДанных.Вставить("icon_emoji",  ":jack_o_lantern:");
    СтруктураДанных.Вставить("channel",     "#test_channel");
    СтруктураДанных.Вставить("attachments", МассивПрикреплений);
    git_Slack.ОтправитьДанные("ktchat.slack.com", "x2VEjiOJKl2UnSA5t2DinjEt", СтруктураДанных);
    
КонецПроцедуры // ОповеститьВSlack()


#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "3.1.10";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. актуализация даты расчета пени [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. актуализация даты расчета пени [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. актуализация даты расчета пени [" + Версия + "]", "ВыполнитьАктуализацию();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 