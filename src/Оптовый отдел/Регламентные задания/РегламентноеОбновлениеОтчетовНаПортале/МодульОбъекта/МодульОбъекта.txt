
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Процедура ПередатьДанныеВZabbix(Хост, Ключ, Значение, УникальнийИдентификатор)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("auth", "a1fds22sfhnbg5");
	СтруктураЗапроса.Вставить("data", Новый Массив);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("host", Хост);
	СтруктураПараметров.Вставить("key", Ключ);
	СтруктураПараметров.Вставить("value", Значение);
	СтруктураПараметров.Вставить("id", УникальнийИдентификатор);
	
	СтруктураЗапроса.data.Добавить(СтруктураПараметров);
	
	ТелоЗапроса = git_JSON.ЗаписатьJSON(СтруктураЗапроса);
	
	HTTPСоединение = Новый HTTPСоединение("192.168.156.2", "9999");											
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос = Новый HTTPЗапрос("/rest", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "windows-1251");
	HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
КонецПроцедуры



Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти 

#Область ПрограммныйИнтерфейс
	
Процедура order_b2b_com_СерийныеНомера() Экспорт
															
	Запрос			 = ПолучитьЗапросДляВыгрузкиПарнеровFull();
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		
		Код = Формат(Число(ВыборкаИзЗапроса.КодКонтрагента), "ЧГ = 0");
		ПутьККатологу	= "C:\1C_LOGS\order-b2b.com\www\users\" + Код;
		КаталогПартнера = Новый Файл(ПутьККатологу);
		Если НЕ КаталогПартнера.Существует() Тогда
			СоздатьКаталог(ПутьККатологу);	
		КонецЕсли;
		
		ОтчетПДТ = СформироватьОтчетПоДвижениюТоваров(ВыборкаИзЗапроса.Ссылка);
		Записать_XLS_HTML4(ОтчетПДТ, ПутьККатологу + "\serial");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура order_b2b_com_Взаиморасчеты() Экспорт
	
	
	УникальнийИдентификатор = Строка(Новый УникальныйИдентификатор);
	ПередатьДанныеВZabbix("gamlet.ktc.local", "b2b_vzm_key", "procedure start", УникальнийИдентификатор);
	
	
	
	РаботникиОгранизации = Справочники.ГруппыДоступаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("2807d719-e685-11e0-8b5f-001517115d85"));
	
	ТабПартнеров = ПолучитьТабПартнеровДляОбновления();	
	Если ТабПартнеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ModuleLibraryServer.GetLibrary("Регл. кеширование данных").РегламентноеКешированиеДанныхГрафикаПлатежей();
	
	ОбъектОтчет = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Отчет по пене (основной)");
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ОбъектОтчет.ХранилищеОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	ВнешниеОтчетПоПене = ВнешниеОтчеты.Создать(ИмяФайла);
	ВнешниеОтчетПоПене.КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных" , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	
	СвойствоГарантия = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія");
	Если Час(ТекущаяДата()) = 21 Тогда
		Запрос = ПолучитьЗапросДляВыгрузкиПарнеровFull();
	Иначе	
		Запрос = ПолучитьЗапросДляВыгрузкиПарнеровОптимизирован();
	КонецЕсли;
	
	ЗапросОбновлений = Новый Запрос("ВЫБРАТЬ
									|	Период,
									|	Справочник,
									|	Документ,
									|	ПВХ,
									|	Истина КАК ОбработаноРегламентнымЗаданием,
									|	Документ.Дата  КАК Дата
									|ИЗ
									|	РегистрСведений.ktcОптимизацияВыгрузкиДанных КАК Оптимизация
									|ГДЕ	
									|	Оптимизация.Справочник 						= &Партнер
									|И	Оптимизация.ОбработаноРегламентнымЗаданием 	= Ложь
									|И	Оптимизация.Документ 						<> Неопределено");
	ЗапросОбновлений.УстановитьПараметр("Партнер", Неопределено);
	
	ВыборкаПартнеров = Запрос.Выполнить().Выбрать();	
	Пока ВыборкаПартнеров.Следующий() Цикл
		
	    Код = Формат(Число(ВыборкаПартнеров.КодКонтрагента), "ЧГ = 0");
		ПутьККатологу	= "C:\1C_LOGS\order-b2b.com\www\users\" + Код;
		КаталогПартнера = Новый Файл(ПутьККатологу);
		Если НЕ КаталогПартнера.Существует() Тогда
			СоздатьКаталог(ПутьККатологу);	
		КонецЕсли;
		
		МесяцыДляОбновления = Новый Соответствие;
		МесяцыДляОбновления.Вставить(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
		
        ЗапросОбновлений.УстановитьПараметр("Партнер", ВыборкаПартнеров.Ссылка);
		ВыборкаОбновлений = ЗапросОбновлений.Выполнить().Выбрать();
		Пока ВыборкаОбновлений.Следующий() Цикл
			НачДатаОбновлений = НачалоМесяца(ВыборкаОбновлений.Дата);
			Если МесяцыДляОбновления[НачДатаОбновлений] = Неопределено Тогда
				МесяцыДляОбновления.Вставить(НачДатаОбновлений, КонецМесяца(НачДатаОбновлений));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МесяцыДляОбновления Цикл
			МесячныеВЗМ = СформироватьМесячныеВзаиморасчеты(Элемент.Ключ, Элемент.Значение, ВыборкаПартнеров.Ссылка, СвойствоГарантия, ВыборкаПартнеров.Ссылка.ГруппаДоступа = РаботникиОгранизации);
			Записать_XLS_HTML4(МесячныеВЗМ, ПутьККатологу + "\" + МесяцПрописью(Элемент.Значение)  + "_new_" + Формат(Число(Год(Элемент.Значение)), "ЧГ = 0"));
			//Месячныеусц = СформироватьОтчет по усц(Элемент.Ключ, Элемент.Значение, ВыборкаПартнеров.Ссылка);
			//Записать_XLS_HTML4(Месячныеусц, ПутьККатологу + "\" + МесяцПрописью(Элемент.Значение)  + "_service_" + Формат(Число(Год(Элемент.Значение)), "ЧГ = 0"));
		КонецЦикла;	
		
		Если ВыборкаПартнеров.Ссылка.ГруппаДоступа <> РаботникиОгранизации Тогда
			//Формируеться отчет по пене
			ОтчетПеня = СформироватьОтчетПоПене(ВыборкаПартнеров.Ссылка, ВнешниеОтчетПоПене);
			Записать_XLS_HTML4(ОтчетПеня, ПутьККатологу + "\fine");
		КонецЕсли;
			
		ЛинкВЗМ = ПорталLinks(ПутьККатологу, Код, ВыборкаПартнеров.Ссылка, ВыборкаПартнеров.Ссылка.ГруппаДоступа = РаботникиОгранизации);
		ЛинкВЗМ.Записать(ПутьККатологу + "\links.html", "windows-1251");

		
		
		НаборЗаписей 		= РегистрыСведений.ktcОптимизацияВыгрузкиДанных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Справочник.Установить(ВыборкаПартнеров.Ссылка);
		НаборЗаписей.Записать();
				
	КонецЦикла;
	
	
	
	ПередатьДанныеВZabbix("gamlet.ktc.local", "b2b_vzm_key", "procedure stop", УникальнийИдентификатор);
	
	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗапросДляВыгрузкиПарнеровFull()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДопЛогин.Ссылка,
	|	ДопЛогин.Ссылка.Код							КАК КодКонтрагента,
	|	ДопЛогин.Значение							КАК Логин,
	|	ДопЛогин.Ссылка.ПарольКСайту				КАК Пароль,
	//|	ДопПароль.Значение  						КАК Пароль,
	|	ЕСТЬNULL(ДопИнформация.Представление, """") КАК Мейл,
	|	ВЫБОР
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Партнерська"" 
	|		ТОГДА 1
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Спецціни""
	|		ТОГДА 4
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Оптова""
	|		ТОГДА 2
	|		КОГДА ДопТипЦен.Значение.Наименование = ""+2%""
	|		ТОГДА 0
	|	ИНАЧЕ 3
	|	КОНЕЦ КАК Категория,
	|	ДопЛогин.Ссылка.БизнесРегион		КАК БизнесРегион,
	|   ДопЛогин.Ссылка.ОсновнойМенеджер    КАК ОсновнойМенеджер,
	|   МенеджерМейл.Представление          КАК email,
	|   МенеджерТел.Представление           КАК Телефон
	|
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопЛогин
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопПароль
	//|		ПО 	ДопПароль.Ссылка = ДопЛогин.Ссылка
	//|		И 	ДопПароль.Свойство = &Пароль 
	//|		И 	ДопПароль.Значение <> """"
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопТипЦен
	|ПО	ДопТипЦен.Ссылка 	= ДопЛогин.Ссылка
	|И	ДопТипЦен.Свойство	= &ВидЦен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДоступКСайту
	|ПО	ДоступКСайту.Ссылка 	= ДопЛогин.Ссылка
	|И	ДоступКСайту.Свойство	= &ДоступКСайту
    |
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ДопИнформация
	|ПО ДопИнформация.Ссылка = ДопЛогин.Ссылка
	|И	ДопИнформация.Тип	 = &mail	
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК МенеджерМейл
	|ПО МенеджерМейл.Ссылка = ДопЛогин.Ссылка.ОсновнойМенеджер
	|И	МенеджерМейл.Тип	= &mail
	|И  МенеджерМейл.Вид	= &mail_vid
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК МенеджерТел
	|ПО МенеджерТел.Ссылка 	= ДопЛогин.Ссылка.ОсновнойМенеджер
	|И	МенеджерТел.Тип	 	= &tel
	|И	МенеджерТел.Вид	 	= &tel_vid
	|
	|ГДЕ
	|	ДопЛогин.Свойство = &Логин  
	|И 	ДопЛогин.Значение <> """"
	|И 	ДопЛогин.Ссылка.ПарольКСайту <> """"
    |И  ДоступКСайту.Значение = Истина
	|УПОРЯДОЧИТЬ ПО	ДопЛогин.Ссылка.Код ";
	
	//Запрос.УстановитьПараметр("Пароль", 		Константы.order_b2b_comСайт_Пароль_ПВХ.Получить());
	Запрос.УстановитьПараметр("Логин", 			Константы.order_b2b_comСайт_Логин_ПВХ.Получить());
	Запрос.УстановитьПараметр("ВидЦен",			Константы.order_b2b_comСайт_ВидЦен_ПВХ.Получить());
	Запрос.УстановитьПараметр("ДоступКСайту", 	Константы.order_b2b_comДоступКСайту.Получить());
	
	Запрос.УстановитьПараметр("mail", 			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("mail_vid",		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("tel",			Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("tel_vid",		Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Телефон пользователя"));


	
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьЗапросДляВыгрузкиПарнеровОптимизирован() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДопЛогин.Ссылка,
	|	ДопЛогин.КодКонтрагента						КАК КодКонтрагента,
	|	ДопЛогин.Значение							КАК Логин,
	|	ДопЛогин.Ссылка.ПарольКСайту				КАК Пароль,
	//|	ДопПароль.Значение  						КАК Пароль,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДопИнформация.Представление КАК Строка(255)), """") 	КАК Мейл,
	|	ВЫБОР
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Партнерська"" 
	|		ТОГДА 1
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Спецціни""
	|		ТОГДА 4
	|		КОГДА ДопТипЦен.Значение.Наименование = ""Оптова""
	|		ТОГДА 2
	|	ИНАЧЕ 3
	|	КОНЕЦ КАК Категория
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДопЛогин.Ссылка,
	|		ДопЛогин.Ссылка.Код							КАК КодКонтрагента,
	|		ДопЛогин.Свойство,
	|		ДопЛогин.Значение	
	|	 ИЗ	 
	|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопЛогин
	|   	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ktcОптимизацияВыгрузкиДанных КАК Оптимизация
	|       ПО	Оптимизация.Справочник 						= ДопЛогин.Ссылка
	|		И	Оптимизация.ОбработаноРегламентнымЗаданием 	= Ложь
	|
	|	 СГРУППИРОВАТЬ ПО
	|	 	ДопЛогин.Ссылка, ДопЛогин.Ссылка.Код, ДопЛогин.Свойство, ДопЛогин.Значение 	
	|    ) КАК ДопЛогин
	|
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопПароль
	//|		ПО 	ДопПароль.Ссылка = ДопЛогин.Ссылка
	//|		И 	ДопПароль.Свойство = &Пароль 
	//|		И 	ДопПароль.Значение <> """"
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопТипЦен
	|ПО	ДопТипЦен.Ссылка 	= ДопЛогин.Ссылка
	|И	ДопТипЦен.Свойство	= &ВидЦен
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДоступКСайту
	|ПО	ДоступКСайту.Ссылка 	= ДопЛогин.Ссылка
	|И	ДоступКСайту.Свойство	= &ДоступКСайту
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ДопИнформация
	|ПО ДопИнформация.Ссылка = ДопЛогин.Ссылка
	|И	ДопИнформация.Тип	 = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)	
	|	
	|ГДЕ
	|	ДопЛогин.Свойство = &Логин  
	|И 	ДопЛогин.Значение <> """"
	|И 	ДопЛогин.Ссылка.ПарольКСайту <> """"
	|И  ДоступКСайту.Значение = Истина
	|
	|УПОРЯДОЧИТЬ ПО	ДопЛогин.Ссылка.Код";
	
	Запрос.УстановитьПараметр("Пароль", 		Константы.order_b2b_comСайт_Пароль_ПВХ.Получить());
	Запрос.УстановитьПараметр("Логин", 			Константы.order_b2b_comСайт_Логин_ПВХ.Получить());
	Запрос.УстановитьПараметр("ВидЦен",			Константы.order_b2b_comСайт_ВидЦен_ПВХ.Получить());
	Запрос.УстановитьПараметр("ДоступКСайту", 	Константы.order_b2b_comДоступКСайту.Получить());
	
	Возврат Запрос;
	
КонецФункции


Функция ПолучитьТабПартнеровДляОбновления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	Свойство,
	|	Значение
	|
	|ПОМЕСТИТЬ КешПартнеров
	|	
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты
	|	
	|ГДЕ
	|		Свойство = &Логин
	|ИЛИ	Свойство = &Пароль		
	|ИЛИ	Свойство = &ДоступКСайту
    |
	|ИНДЕКСИРОВАТЬ ПО Ссылка, Свойство
    |;
	|////////////////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
	|	ДопЛогин.Ссылка,
	|	ДопЛогин.Код			КАК Код
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДопЛогин.Ссылка,
	|		ДопЛогин.Ссылка.Код	КАК Код,
	|		ДопЛогин.Свойство,
	|		ДопЛогин.Значение	
	|	 ИЗ	 
	|		КешПартнеров КАК ДопЛогин
	|   		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ktcОптимизацияВыгрузкиДанных КАК Оптимизация
	|      		ПО	Оптимизация.Справочник 						= ДопЛогин.Ссылка
	|			И	Оптимизация.ОбработаноРегламентнымЗаданием 	= Ложь
	|
	|	 ГДЕ
	|    	ДопЛогин.Свойство = &Логин
	|	 И 	ДопЛогин.Значение <> """"
	|
	|	 СГРУППИРОВАТЬ ПО
	|	 	ДопЛогин.Ссылка, ДопЛогин.Ссылка.Код, ДопЛогин.Свойство, ДопЛогин.Значение 	
	|    ) КАК ДопЛогин
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПартнеров КАК ДопПароль
	|		ПО 	ДопПароль.Ссылка 	= ДопЛогин.Ссылка
	|		И 	ДопПароль.Свойство 	= &Пароль 
	|		И 	ДопПароль.Значение  <> """"
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПартнеров КАК ДоступКСайту
	|		ПО	ДоступКСайту.Ссылка 	= ДопЛогин.Ссылка
	|		И	ДоступКСайту.Свойство	= &ДоступКСайту
	|       И	ДоступКСайту.Значение 	= Истина
	|
	|УПОРЯДОЧИТЬ ПО	ДопЛогин.Код
	|;
	|////////////////////////////////////////////////////////////////////////////////////////////
	|";	
	Запрос.УстановитьПараметр("Пароль", 		Константы.order_b2b_comСайт_Пароль_ПВХ.Получить());
	Запрос.УстановитьПараметр("Логин", 			Константы.order_b2b_comСайт_Логин_ПВХ.Получить());
	Запрос.УстановитьПараметр("ДоступКСайту", 	Константы.order_b2b_comДоступКСайту.Получить());

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьМесячныеВзаиморасчеты(ДатаНач, ДатаКон, Партнер, СвойствоГарантия, РаботникОгранизации)
	
	ТабДок = Новый ТабличныйДокумент;
	ПараметрыОтбораНоменклатура = Новый Структура("Номенклатура");
	
	Если РаботникОгранизации Тогда
		МакетОтчета = ПолучитьВнешнийОтчет("Отчет по взаиморасчетам с партнерами (основной)").ПолучитьМакет("ВзаиморасчетыСокращенныеГРН");		
	Иначе
		МакетОтчета = ПолучитьВнешнийОтчет("Отчет по взаиморасчетам с партнерами (основной)").ПолучитьМакет("ВзаиморасчетыСокращенные");
	КонецЕсли;
	 	
	ОбластьЗаголовок		= МакетОтчета.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаТаблицы 	= МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьДокументДвижения = МакетОтчета.ПолучитьОбласть("ДокументДвижения");
	ОбластьДетальныхЗаписей = МакетОтчета.ПолучитьОбласть("Детали");
	ОбластьОбщийИтог 		= МакетОтчета.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьПодвалТаблицы 	= МакетОтчета.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьПодвал 			= МакетОтчета.ПолучитьОбласть("Подвал");
	

	ДатаНачала 	  = ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоМесяца(ДатаНач));
	ДатаОкончания = ?(ДатаКон = Дата('00010101000000'), ДатаКон, КонецМесяца(ДатаКон));
    ТекущаяДата		= ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата);
	Запрос.УстановитьПараметр("Партнер", 		Партнер);
	Запрос.УстановитьПараметр("ДатаПредПер", 	ДатаНачала-1);
	Запрос.УстановитьПараметр("ДатаКон", 		ДатаОкончания);
	Если РаботникОгранизации Тогда
		Запрос.УстановитьПараметр("Валюта",			Константы.ВалютаРегламентированногоУчета.Получить());	
	Иначе
		Запрос.УстановитьПараметр("Валюта",			Константы.ВалютаУправленческогоУчета.Получить());
	КонецЕсли;
	Запрос.УстановитьПараметр("ГраницаПредПер", Новый Граница(ДатаНачала, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ГраницаДатаНач", Новый Граница(ДатаНачала, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаДатаКон", Новый Граница(ДатаОкончания, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Номенклатура", 	Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("7833fff5-4336-11e0-9f98-001517115d85")));
 	Запрос.Текст = "ВЫБРАТЬ
 	               |	КурсыВалют.Период,
 	               |	КурсыВалют.Валюта,
 	               |	КурсыВалют.Курс / КурсыВалют.Кратность КАК Курс
 	               |ПОМЕСТИТЬ КешКурс
 	               |ИЗ
 	               |	РегистрСведений.КурсыВалют КАК КурсыВалют
 	               |
 	               |ОБЪЕДИНИТЬ
 	               |
 	               |ВЫБРАТЬ
 	               |	КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
 	               |	КурсыВалют.Валюта,
 	               |	КурсыВалют.Курс / КурсыВалют.Кратность
 	               |ИЗ
 	               |	РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //1
				   |ВЫБРАТЬ
 	               |	ОборотыКурса.Валюта,
 	               |	ОборотыКурса.Курс,
 	               |	ОборотыКурса.Период КАК НачалоПериода,
 	               |	МИНИМУМ(ОборотыКурсаКопия.Период) КАК КонецПериода
 	               |ПОМЕСТИТЬ КурсыПоДатам
 	               |ИЗ
 	               |	КешКурс КАК ОборотыКурса
 	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешКурс КАК ОборотыКурсаКопия
 	               |		ПО ОборотыКурса.Валюта = ОборотыКурсаКопия.Валюта
 	               |			И ОборотыКурса.Период < ОборотыКурсаКопия.Период
 	               |
 	               |СГРУППИРОВАТЬ ПО
 	               |	ОборотыКурса.Период,
 	               |	ОборотыКурса.Валюта,
 	               |	ОборотыКурса.Курс
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //2
				   |УНИЧТОЖИТЬ КешКурс
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //3
				   |ВЫБРАТЬ
 	               |	КлючиАналитикиУчетаПоПартнерам.Ссылка
 	               |ПОМЕСТИТЬ Аналитика
 	               |ИЗ
 	               |	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
 	               |ГДЕ
 	               |	КлючиАналитикиУчетаПоПартнерам.Партнер = &Партнер
 	               |
 	               |ИНДЕКСИРОВАТЬ ПО
 	               |	КлючиАналитикиУчетаПоПартнерам.Ссылка
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //4
				   |ВЫБРАТЬ
 	               |	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) КАК СуммаКонечныйДолг,
 	               |	РасчетыСКлиентами.Валюта КАК Валюта
 	               |ПОМЕСТИТЬ КешСуммаКонечныйДолг
 	               |ИЗ
 	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
 	               |			&ГраницаДатаКон,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК РасчетыСКлиентами
 	               |
 	               |ОБЪЕДИНИТЬ ВСЕ
 	               |
 	               |ВЫБРАТЬ
 	               |	ЕСТЬNULL(РасчетыСПоставщиками.СуммаОстаток, 0),
 	               |	РасчетыСПоставщиками.Валюта
 	               |ИЗ
 	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
 	               |			&ГраницаДатаКон,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК РасчетыСПоставщиками
 	               |;
 	               ////////////////////////////////////////////////////////////////////////////////
				   //5
				   |ВЫБРАТЬ
 	               |	КешСуммаКонечныйДолг.Валюта,
 	               |	СУММА(ЕСТЬNULL(КешСуммаКонечныйДолг.СуммаКонечныйДолг, 0)) КАК СуммаКонечныйДолг
 	               |ПОМЕСТИТЬ КешСуммаКонечногоДолга
 	               |ИЗ
 	               |	КешСуммаКонечныйДолг КАК КешСуммаКонечныйДолг
 	               |
 	               |СГРУППИРОВАТЬ ПО
 	               |	КешСуммаКонечныйДолг.Валюта
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //6
				   |ВЫБРАТЬ
 	               |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(КешСуммаКонечныйДолг.СуммаКонечныйДолг, 0) * ЕСТЬNULL(КурсыПоДатам.Курс, 0) / ЕСТЬNULL(КурсыУпрУЧ.Курс, 1) КАК ЧИСЛО(15, 2))) КАК СуммаКонечныйДолг
 	               |ИЗ
 	               |	КешСуммаКонечногоДолга КАК КешСуммаКонечныйДолг
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыПоДатам КАК КурсыПоДатам
 	               |		ПО КешСуммаКонечныйДолг.Валюта = КурсыПоДатам.Валюта
 	               |			И (&ТекущаяДата >= КурсыПоДатам.НачалоПериода)
 	               |			И (&ТекущаяДата < КурсыПоДатам.КонецПериода)
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыПоДатам КАК КурсыУпрУЧ
 	               |		ПО (&Валюта = КурсыУпрУЧ.Валюта)
 	               |			И (&ТекущаяДата >= КурсыУпрУЧ.НачалоПериода)
 	               |			И (&ТекущаяДата < КурсыУпрУЧ.КонецПериода)
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //7
				   |ВЫБРАТЬ
 	               |	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) КАК СуммаНачальныйДолг,
 	               |	РасчетыСКлиентами.Валюта КАК Валюта
 	               |ПОМЕСТИТЬ КешСуммаНачальныйДолг
 	               |ИЗ
 	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
 	               |			&ГраницаПредПер,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК РасчетыСКлиентами
 	               |
 	               |ОБЪЕДИНИТЬ ВСЕ
 	               |
 	               |ВЫБРАТЬ
 	               |	ЕСТЬNULL(РасчетыСПоставщиками.СуммаОстаток, 0),
 	               |	РасчетыСПоставщиками.Валюта
 	               |ИЗ
 	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
 	               |			&ГраницаПредПер,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК РасчетыСПоставщиками
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //8
				   |ВЫБРАТЬ
 	               |	КешСуммаНачальныйДолг.Валюта,
 	               |	СУММА(ЕСТЬNULL(КешСуммаНачальныйДолг.СуммаНачальныйДолг, 0)) КАК СуммаНачальныйДолг
 	               |ПОМЕСТИТЬ КешТаблицаСуммаНачальныйДолга
 	               |ИЗ
 	               |	КешСуммаНачальныйДолг КАК КешСуммаНачальныйДолг
 	               |
 	               |СГРУППИРОВАТЬ ПО
 	               |	КешСуммаНачальныйДолг.Валюта
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //9
				   |ВЫБРАТЬ
 	               |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(КешСуммаНачальныйДолг.СуммаНачальныйДолг, 0) * ЕСТЬNULL(КурсыПоДатам.Курс, 0) / ЕСТЬNULL(КурсыУпрУЧ.Курс, 1) КАК ЧИСЛО(15, 2))) КАК СуммаНачальныйДолг
 	               |ПОМЕСТИТЬ КешНачальныйДолг
 	               |ИЗ
 	               |	КешТаблицаСуммаНачальныйДолга КАК КешСуммаНачальныйДолг
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыПоДатам КАК КурсыПоДатам
 	               |		ПО КешСуммаНачальныйДолг.Валюта = КурсыПоДатам.Валюта
 	               |			И (&ТекущаяДата >= КурсыПоДатам.НачалоПериода)
 	               |			И (&ТекущаяДата < КурсыПоДатам.КонецПериода)
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыПоДатам КАК КурсыУпрУЧ
 	               |		ПО (&Валюта = КурсыУпрУЧ.Валюта)
 	               |			И (&ТекущаяДата >= КурсыУпрУЧ.НачалоПериода)
 	               |			И (&ТекущаяДата < КурсыУпрУЧ.КонецПериода)
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //10
				   |ВЫБРАТЬ
 	               |	ЕСТЬNULL(КешНачальныйДолг.СуммаНачальныйДолг, 0) КАК СуммаНачальныйДолг
 	               |ИЗ
 	               |	КешНачальныйДолг КАК КешНачальныйДолг
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //11
				   |ВЫБРАТЬ
 	               |	СУММА(Выручка.СуммаВыручкиОборот) КАК Пеня
 	               |ПОМЕСТИТЬ кеш
 	               |ИЗ
 	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ГраницаДатаНач, &ГраницаДатаКон, , АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура) КАК Выручка
 	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
 	               |		ПО (Аналитика.Ссылка = Выручка.АналитикаУчетаПоПартнерам)
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //12
				   |ВЫБРАТЬ
 	               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ЕСТЬNULL(ВлПеня.Пеня, 0) КАК ОборотПоКонтрагенту
 	               |ИЗ
 	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
 	               |			&ГраницаДатаНач,
 	               |			&ГраницаДатаКон,
 	               |			,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК ВыручкаИСебестоимостьПродажОбороты
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ кеш КАК ВлПеня
 	               |		ПО (ИСТИНА)
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //13
				   |ВЫБРАТЬ
 	               |	0 КАК ВидДвижения,
 	               |	РасчетыСКлиентами.Период КАК ДокументДвиженияДата,
 	               |	РасчетыСКлиентами.Регистратор КАК ДокументДвижения,
 	               |	ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) КАК ДокументДвиженияТип,
 	               |	РасчетыСКлиентами.Регистратор.Номер КАК ДокументДвиженияНомер,
 	               |	ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор.Комментарий КАК СТРОКА(100)) КАК ДокументДвиженияКомментарий,
 	               |	ВЫБОР
 	               |		КОГДА ЕСТЬNULL(РасчетыСКлиентами.Регистратор.Менеджер, 0) <> 0
 	               |			ТОГДА РасчетыСКлиентами.Регистратор.Менеджер
 	               |		КОГДА ЕСТЬNULL(РасчетыСКлиентами.Регистратор.Кассир, 0) <> 0
 	               |			ТОГДА РасчетыСКлиентами.Регистратор.Кассир
 	               |		КОГДА ЕСТЬNULL(РасчетыСКлиентами.Регистратор.Ответственный, 0) <> 0
 	               |			ТОГДА РасчетыСКлиентами.Регистратор.Ответственный
 	               |	КОНЕЦ КАК ДокументДвиженияОтветственный,
 	               |	РасчетыСКлиентами.Регистратор.Валюта КАК ВалютаДокумента,
 	               |	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
 	               |	РасчетыСКлиентами.СуммаПриход,
 	               |	РасчетыСКлиентами.СуммаРасход,
 	               |	РасчетыСКлиентами.СуммаКонечныйОстаток
 	               |ПОМЕСТИТЬ КешДокументыРасчетыСПартнером
 	               |ИЗ
 	               |	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
 	               |			&ГраницаДатаНач,
 	               |			&ГраницаДатаКон,
 	               |			Регистратор,
 	               |			,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК РасчетыСКлиентами
 	               |ГДЕ
 	               |	РасчетыСКлиентами.Регистратор <> НЕОПРЕДЕЛЕНО
 	               |
 	               |ОБЪЕДИНИТЬ ВСЕ
 	               |
 	               |ВЫБРАТЬ
 	               |	1,
 	               |	РасчетыСПоставщиками.Период,
 	               |	РасчетыСПоставщиками.Регистратор,
 	               |	ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.Регистратор),
 	               |	РасчетыСПоставщиками.Регистратор.Номер,
 	               |	ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор.Комментарий КАК СТРОКА(100)),
 	               |	ВЫБОР
 	               |		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.Регистратор.Менеджер, 0) <> 0
 	               |			ТОГДА РасчетыСПоставщиками.Регистратор.Менеджер
 	               |		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.Регистратор.Кассир, 0) <> 0
 	               |			ТОГДА РасчетыСПоставщиками.Регистратор.Кассир
 	               |		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.Регистратор.Ответственный, 0) <> 0
 	               |			ТОГДА РасчетыСПоставщиками.Регистратор.Ответственный
 	               |	КОНЕЦ,
 	               |	РасчетыСПоставщиками.Регистратор.Валюта,
 	               |	РасчетыСПоставщиками.Валюта,
 	               |	РасчетыСПоставщиками.СуммаПриход,
 	               |	РасчетыСПоставщиками.СуммаРасход,
 	               |	РасчетыСПоставщиками.СуммаКонечныйОстаток
 	               |ИЗ
 	               |	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
 	               |			&ГраницаДатаНач,
 	               |			&ГраницаДатаКон,
 	               |			Регистратор,
 	               |			,
 	               |			АналитикаУчетаПоПартнерам В
 	               |				(ВЫБРАТЬ
 	               |					Аналитика.Ссылка
 	               |				ИЗ
 	               |					Аналитика)) КАК РасчетыСПоставщиками
 	               |ГДЕ
 	               |	РасчетыСПоставщиками.Регистратор <> НЕОПРЕДЕЛЕНО
 	               |;
 	               |
 	               ////////////////////////////////////////////////////////////////////////////////
				   //14
				   |ВЫБРАТЬ
 	               |	КешДокументыРасчетыСПартнером.ВидДвижения,
 	               |	КешДокументыРасчетыСПартнером.ДокументДвижения,
 	               |	КешДокументыРасчетыСПартнером.ДокументДвиженияТип,
 	               |	КешДокументыРасчетыСПартнером.ДокументДвиженияДата,
 	               |	КешДокументыРасчетыСПартнером.ДокументДвиженияНомер,
 	               |	КешДокументыРасчетыСПартнером.ДокументДвиженияКомментарий,
 	               |	КешДокументыРасчетыСПартнером.ДокументДвиженияОтветственный,
 	               |	КешДокументыРасчетыСПартнером.ВалютаДокумента,
 	               |	КешДокументыРасчетыСПартнером.ВалютаВзаиморасчетов,
 	               |	ВЫРАЗИТЬ(КешДокументыРасчетыСПартнером.СуммаРасход * КурсыПоДатам.Курс / ВалютаУпрУч.Курс КАК ЧИСЛО(15, 2)) КАК СуммаРасход,
 	               |	ВЫРАЗИТЬ(КешДокументыРасчетыСПартнером.СуммаПриход * КурсыПоДатам.Курс / ВалютаУпрУч.Курс КАК ЧИСЛО(15, 2)) КАК СуммаПриход,
 	               |	ВЫРАЗИТЬ(КешДокументыРасчетыСПартнером.СуммаКонечныйОстаток * КурсыПоДатам.Курс / ВалютаУпрУч.Курс КАК ЧИСЛО(15, 2)) КАК СуммаКонечныйОстаток
 	               |ИЗ
 	               |	КешДокументыРасчетыСПартнером КАК КешДокументыРасчетыСПартнером
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыПоДатам КАК КурсыПоДатам
 	               |		ПО КешДокументыРасчетыСПартнером.ВалютаВзаиморасчетов = КурсыПоДатам.Валюта
 	               |			И (&ТекущаяДата > КурсыПоДатам.НачалоПериода)
 	               |			И (&ТекущаяДата <= КурсыПоДатам.КонецПериода)
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыПоДатам КАК ВалютаУпрУч
 	               |		ПО (ВалютаУпрУч.Валюта = &Валюта)
 	               |			И (&ТекущаяДата > ВалютаУпрУч.НачалоПериода)
 	               |			И (&ТекущаяДата <= ВалютаУпрУч.КонецПериода)
 	               |
 	               |УПОРЯДОЧИТЬ ПО
 	               |	КешДокументыРасчетыСПартнером.ДокументДвиженияДата";
		
	РезультатПакета 	= Запрос.ВыполнитьПакет();
	
	Выборка 			= РезультатПакета[6].Выбрать();
	СуммаКонечныйДолг 	= ?(Выборка.Следующий(), Выборка.СуммаКонечныйДолг, 0);
	
	Выборка 			= РезультатПакета[10].Выбрать();
	СуммаНачальныйДолг 	= ?(Выборка.Следующий(), Выборка.СуммаНачальныйДолг, 0);
	
	Выборка 			= РезультатПакета[12].Выбрать();
	ОборотПоКонтрагенту = ?(Выборка.Следующий(), Выборка.ОборотПоКонтрагенту, 0);
		
	
	ОбластьЗаголовок.Параметры.Контрагент 			= Партнер;
	ОбластьЗаголовок.Параметры.СтрПериод 			= "Период: "+ Формат(ДатаНач,"ДФ=""дд.ММ.гг""")+" - "+Формат(ДатаКон, "ДФ=""дд.ММ.гг""");
	ОбластьЗаголовок.Параметры.ОборотПоКонтрагенту 	= ОборотПоКонтрагенту;
	ОбластьЗаголовок.Параметры.СуммаКонечныйДолг	= СуммаКонечныйДолг;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

		
	ВыборкаДокДвижения 	= РезультатПакета[14].Выбрать();
	
	Пока ВыборкаДокДвижения.Следующий() Цикл
		
		Если Найти(ВыборкаДокДвижения.ДокументДвиженияКомментарий, "Автоматический перезачет бонусов из колонки Поставщик в колонку Клиент по документу") <> 0 Тогда Продолжить; КонецЕсли;
		Если Найти(ВыборкаДокДвижения.ДокументДвиженияКомментарий, "Автосписание ДС по документу:") <> 0 Тогда Продолжить; КонецЕсли;
		
		РасшифроватьПоНоменклатуре 	 = Ложь;
		стрСумма					 = "";
		
		Если ВыборкаДокДвижения.ДокументДвиженияКомментарий	= "" Тогда
			стрПримечание = "";
		Иначе
			стрПримечание = ", " + ВыборкаДокДвижения.ДокументДвиженияКомментарий;
		КонецЕсли;
		
		МетаданныеДокумента = ВыборкаДокДвижения.ДокументДвижения.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
			Если ВыборкаДокДвижения.ВалютаДокумента <> ВыборкаДокДвижения.ВалютаВзаиморасчетов 
			 И	 ВыборкаДокДвижения.ВалютаДокумента <> Справочники.Валюты.ПустаяСсылка() Тогда
			 
			 	Курс = ВыборкаДокДвижения.СуммаПриход - ВыборкаДокДвижения.СуммаРасход;
				Курс = ?(Курс < 0, -Курс, Курс);
				стрСумма = " (" + ВыборкаДокДвижения.ДокументДвижения.СуммаДокумента + " " + ВыборкаДокДвижения.ВалютаДокумента + " по курсу : " + Формат(ВыборкаДокДвижения.ДокументДвижения.СуммаДокумента / (Курс), "ЧЦ=15; ЧДЦ=2") + ")";
								
			КонецЕсли;
		
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
			
			Если ВыборкаДокДвижения.ДокументДвижения.Товары.Количество() Тогда
				РасшифроватьПоНоменклатуре = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьДокументДвижения.Параметры.Заполнить(ВыборкаДокДвижения);
		ОбластьДокументДвижения.Параметры.Примечание =""+СокрЛП(ВыборкаДокДвижения.ДокументДвиженияОтветственный)+ стрПримечание + стрСумма;
			
		СуммаНачальныйДолг = СуммаНачальныйДолг  + ВыборкаДокДвижения.СуммаПриход - ВыборкаДокДвижения.СуммаРасход;
		ОбластьДокументДвижения.Параметры.Приход = ВыборкаДокДвижения.СуммаРасход;
		ОбластьДокументДвижения.Параметры.Расход = ВыборкаДокДвижения.СуммаПриход;
		ОбластьДокументДвижения.Параметры.Сальдо = СуммаНачальныйДолг;
		
		//Вывели документ движения
		ТабДок.Вывести(ОбластьДокументДвижения, 1);
				
		Если РасшифроватьПоНоменклатуре Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = ПолучитьТекстЗапросаРасшифровкиНоменклатуры(ВыборкаДокДвижения.ВидДвижения, ВыборкаДокДвижения.ДокументДвижения.Метаданные().Имя);
			Запрос.УстановитьПараметр("Ссылка", ВыборкаДокДвижения.ДокументДвижения);
			Запрос.УстановитьПараметр("Свойство", СвойствоГарантия);
			Запрос.УстановитьПараметр("ВидДвижения", ВыборкаДокДвижения.ВидДвижения);
			РезультатПакета = Запрос.ВыполнитьПакет();
			
			ТаблицаСерийныеНомера = РезультатПакета[2].Выгрузить();
			ВыборкаТовары = РезультатПакета[3].Выбрать();
			
			Пока ВыборкаТовары.Следующий() Цикл
				
				ОбластьДетальныхЗаписей = МакетОтчета.ПолучитьОбласть("Детали");
				ЗаполнитьЗначенияСвойств(ОбластьДетальныхЗаписей.Параметры, ВыборкаТовары);
				ТабДок.Вывести(ОбластьДетальныхЗаписей, 2);
				
				ПараметрыОтбораНоменклатура.Вставить("Номенклатура", ВыборкаТовары.Номенклатура);
				РезультатПоиска = ТаблицаСерийныеНомера.НайтиСтроки(ПараметрыОтбораНоменклатура);
				Если РезультатПоиска.Количество() > 0 Тогда
					ОбластьСерийныеНомера	= МакетОтчета.ПолучитьОбласть("СерийныеНомера");
	               	Для каждого ЭлементМассива Из РезультатПоиска Цикл
				   		ОбластьСерийныеНомера.Параметры.СерийныйНомер = ЭлементМассива.СерийныеНомера;
						ТабДок.Вывести(ОбластьСерийныеНомера, 3);
				   КонецЦикла; 
				КонецЕсли;
		
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьДокументДвижения = МакетОтчета.ПолучитьОбласть("ДокументДвижения");
		
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	Возврат ТабДок;

КонецФункции

Функция СформироватьОтчетПоПене(Партнер, ВнешниеОтчет)
	
	ДобавитьОтборПоЗначению(ВнешниеОтчет.КомпоновщикНастроек, "Контрагент", Партнер);
	    		
	ТабДок	= Новый ТабличныйДокумент;
	ТабДок.Вывод = ИспользованиеВывода.Разрешить;
	ВнешниеОтчет.СкомпоноватьРезультат(ТабДок);
	
	Возврат ТабДок;
	
КонецФункции

Функция СформироватьОтчетПоДвижениюТоваров(Партнер)
	
	ТабДок = Новый ТабличныйДокумент;
	ОтчетИнициализация(Партнер);
	ОтчетВывести(ТабДок);
	Возврат ТабДок;
	
КонецФункции

Процедура ДобавитьОтборПоЗначению(КомпоновщикНастроек, ИмяЭлемента, Значение)
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ЭлементОтбора.Представление = ЭлементОтбора.ЛевоеЗначение;
		Если ЭлементОтбора.Представление = ИмяЭлемента Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);	
		КонецЕсли;
	КонецЦикла;
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	ЭлементОтбора.Представление = ЭлементОтбора.ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Значение;
	
КонецПроцедуры





// Отчет по СН

Процедура ОтчетИнициализация(Партнер)
	
	УникальныйИд = Новый УникальныйИдентификатор("a3e0fd0e-4712-11e0-9f98-001517115d85");
	Гарантия = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УникальныйИд);	
	
	ПостроительОтчета = Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	NULL КАК ФинДок
	|ПОМЕСТИТЬ РеализацииТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Партнер = &Партнер
	|	И РеализацияТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТовары.Распоряжение КАК ФинДок
	|ПОМЕСТИТЬ РасходныеОрдераНаТовары
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РасходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ТОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТовары.Распоряжение КАК Документ.РеализацияТоваровУслуг).Партнер = &Партнер
	|			КОГДА РасходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ТОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТовары.Распоряжение КАК Документ.ВозвратТоваровПоставщику).Партнер = &Партнер
	|		КОНЕЦ
	|	И РасходныйОрдерНаТовары.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТовары.Распоряжение КАК ФинДок
	|ПОМЕСТИТЬ ПриходныеОрдераНаТовары
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ВозвратТоваровОтКлиента).Партнер = &Партнер
	|			КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|				ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Партнер = &Партнер
	|			КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Документ.ПоступлениеТоваровУслуг).Партнер = &Партнер
	|		КОНЕЦ
	|	И ПриходныйОрдерНаТовары.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РТиУ.Номенклатура
	|ПОМЕСТИТЬ КешНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РТиУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацииТоваровУслуг КАК РеализацииТоваровУслуг
	|		ПО (РеализацииТоваровУслуг.Ссылка = РТиУ.Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РОнТ.Номенклатура
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РОнТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходныеОрдераНаТовары КАК РасходныеОрдераНаТовары
	|		ПО (РасходныеОрдераНаТовары.Ссылка = РОнТ.Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПОнТ.Номенклатура
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПОнТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриходныеОрдераНаТовары КАК ПриходныеОрдераНаТовары
	|		ПО (ПриходныеОрдераНаТовары.Ссылка = ПОнТ.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РТиУ.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	ДополнительныеРеквизиты.Значение КАК Гарантия
	|ПОМЕСТИТЬ КешГарантия
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				КешНоменклатуры.Номенклатура
	|			ИЗ
	|				КешНоменклатуры)
	|	И ДополнительныеРеквизиты.Свойство = &Гарантия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацииТоваровУслуг.Ссылка КАК Ссылка,
	|	""КУПЛЕН"" КАК Статус,
	|	РеализацииТоваровУслуг.ФинДок КАК ФинДок
	|ПОМЕСТИТЬ КешСсылок
	|ИЗ
	|	РеализацииТоваровУслуг КАК РеализацииТоваровУслуг
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасходныеОрдераНаТовары.Ссылка,
	|	""КУПЛЕН"",
	|	РасходныеОрдераНаТовары.ФинДок
	|ИЗ
	|	РасходныеОрдераНаТовары КАК РасходныеОрдераНаТовары
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриходныеОрдераНаТовары.Ссылка,
	|	""ВОЗВРАЩЕН"",
	|	ПриходныеОрдераНаТовары.ФинДок
	|ИЗ
	|	ПриходныеОрдераНаТовары КАК ПриходныеОрдераНаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомераНоменклатуры.Регистратор КАК СкладДок,
	|	СерийныеНомераНоменклатуры.Номенклатура КАК Номенклатура,
	|	СерийныеНомераНоменклатуры.СерийныеНомера
	|ПОМЕСТИТЬ КешСерийНоменклатуры
	|ИЗ
	|	РегистрНакопления.СерийныеНомераНоменклатуры КАК СерийныеНомераНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешСсылок КАК КешСсылок
	|		ПО (КешСсылок.Ссылка = СерийныеНомераНоменклатуры.Регистратор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкладДок,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешСсылок.Статус,
	|	ТоварыНаСкладах.Период КАК ДатаОтгрузки,
	|	КешСсылок.ФинДок,
	|	ТоварыНаСкладах.Регистратор КАК СкладДок,
	|	ТоварыНаСкладах.Номенклатура.Родитель КАК Группа,
	|	ТоварыНаСкладах.Номенклатура.Артикул КАК Артикул,
	|	ТоварыНаСкладах.Номенклатура.Код КАК Код,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КешГарантия.Гарантия, """") КАК Гарантия,
	|	КешСерийНоменклатуры.СерийныеНомера КАК СерийныйНомер
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					КешНоменклатуры.Номенклатура
	|				ИЗ
	|					КешНоменклатуры)) КАК ТоварыНаСкладах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешСсылок КАК КешСсылок
	|		ПО ТоварыНаСкладах.Регистратор = КешСсылок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешСерийНоменклатуры КАК КешСерийНоменклатуры
	|		ПО ТоварыНаСкладах.Регистратор = КешСерийНоменклатуры.СкладДок
	|			И ТоварыНаСкладах.Номенклатура = КешСерийНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешГарантия КАК КешГарантия
	|		ПО ТоварыНаСкладах.Номенклатура = КешГарантия.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группа,
	|	ДатаОтгрузки
	|ИТОГИ ПО
	|	Группа,
	|	Номенклатура";
	ПостроительОтчета.ЗаполнитьНастройки();
	ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчета.Параметры.Вставить("Партнер", Партнер);
	ПостроительОтчета.Параметры.Вставить("Гарантия", Гарантия);

	ПостроительОтчета.ТекстЗаголовка = "Отчет по движению номенклатуры";
	 	
КонецПроцедуры

Процедура ОтчетВывести(ТабДок) 
	ТабДок.Очистить();
 	ПостроительОтчета.Выполнить();
	ПостроительОтчета.РазмещениеИзмеренийВСтроках 				= ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчета.РазмещениеРеквизитовИзмеренийВСтроках 	= ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчета.РазмещениеРеквизитовИзмеренийВКолонках 	= ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчета.Макет = ПолучитьМакет("Макет");
	ПостроительОтчета.ОформитьМакет();
	ПостроительОтчета.Вывести(ТабДок);
КонецПроцедуры





Процедура Записать_XLS_HTML4(МакетОтчета, ИмяФайла)
	МакетОтчета.Записать(ИмяФайла + ".html", ТипФайлаТабличногоДокумента.HTML4);	
	МакетОтчета.Записать(ИмяФайла + ".xls", ТипФайлаТабличногоДокумента.XLS97);	
КонецПроцедуры


Функция ПолучитьТекстЗапросаРасшифровкиНоменклатуры(ВидДвижения, ИмяДокумента)

	ТекстЗапроса = "
		// 0.
		|ВЫБРАТЬ
		|	Номенклатура	                КАК Номенклатура,
		|	ПОДСТРОКА(Номенклатура.Код, 6, 6)		КАК НоменклатураКод,
		|	Номенклатура.Артикул 			КАК НоменклатураАртикул,
		|	Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	Количество                      КАК Кво,
		|	Цена							КАК Цена,
		|	ВЫБОР
		|		КОГДА &ВидДвижения = 0
		|		ТОГДА 0
		|		ИНАЧЕ Сумма
		|	КОНЕЦ							КАК Приход,
		|	ВЫБОР
		|		КОГДА &ВидДвижения = 1
		|		ТОГДА 0
		|		ИНАЧЕ Сумма
		|	КОНЕЦ							КАК Расход
		|ПОМЕСТИТЬ КешТоваров
		|ИЗ
		|	Документ." + ИмяДокумента + ".Товары
		|ГДЕ
		|	Ссылка = &Ссылка
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура	
		|;
		// 1.
		|ВЫБРАТЬ
		|	Ссылка		КАК Номенклатура,
		|	Значение 	КАК Гарантия
		|ПОМЕСТИТЬ КешГарантия
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты 	
		|ГДЕ
		|	Ссылка В (Выбрать Номенклатура ИЗ КешТоваров)
		|И 	Свойство = &Свойство
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка		
		|;
		// 2.
		|ВЫБРАТЬ
		|	Номенклатура,
		|	СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры
		|ГДЕ 
		|	ВЫРАЗИТЬ(Регистратор КАК Документ." + ИмяДокумента + ") = &Ссылка 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
        |
		|ВЫБРАТЬ
		|	Номенклатура,
		|	СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры
		|ГДЕ                                
		|	ВЫРАЗИТЬ(Регистратор КАК Документ." + ?(ВидДвижения = 1, "ПриходныйОрдерНаТовары", "РасходныйОрдерНаТовары") + ").Распоряжение = &Ссылка
		|;
		// 3.
		|ВЫБРАТЬ
		|	КешТоваров.Номенклатура,
		|	КешТоваров.НоменклатураКод,
		|	КешТоваров.НоменклатураАртикул,
		|	КешТоваров.НоменклатураПредставление,
		|	КешТоваров.Кво,
		|	КешТоваров.Цена,
		|	КешТоваров.Приход,
		|	КешТоваров.Расход,
		|	КешГарантия.Гарантия			
		|ИЗ
		|	КешТоваров КАК КешТоваров
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ КешГарантия КАК КешГарантия
		|ПО	КешГарантия.Номенклатура = КешТоваров.Номенклатура
		// 4.
		|;
		|УНИЧТОЖИТЬ КешТоваров;
		|УНИЧТОЖИТЬ КешГарантия;
		|";
	Возврат ТекстЗапроса;

КонецФункции // ()
 
//Возвращает месяц прописю по числу
//
Функция МесяцПрописью(Дата)
	
	Если Месяц(Дата) = 1 Тогда
		Возврат "January";
	ИначеЕсли Месяц(Дата) = 2 Тогда
		Возврат "February";
	ИначеЕсли Месяц(Дата) = 3 Тогда
		Возврат "March";
	ИначеЕсли Месяц(Дата) = 4 Тогда
		Возврат "April";
	ИначеЕсли Месяц(Дата) = 5 Тогда
		Возврат "May";
	ИначеЕсли Месяц(Дата) = 6 Тогда
		Возврат "June";
	ИначеЕсли Месяц(Дата) = 7 Тогда
		Возврат "July";
	ИначеЕсли Месяц(Дата) = 8 Тогда
		Возврат "August";
	ИначеЕсли Месяц(Дата) = 9 Тогда
		Возврат "September";
	ИначеЕсли Месяц(Дата) = 10 Тогда
		Возврат "October";
	ИначеЕсли Месяц(Дата) = 11 Тогда
		Возврат "November";
    ИначеЕсли Месяц(Дата) = 12 Тогда
		Возврат "December";
	Иначе  
		Возврат "Unknown";
	КонецЕсли;
	
КонецФункции

Функция ЕстьДоступКПене(Партнер) Экспорт
	
	ЗапросПоПартнерам = Новый Запрос;
	ЗапросПоПартнерам.Текст = "
	|ВЫБРАТЬ
	|	ПеняПартнеры.Ссылка
	|Из
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПеняПартнеры
	|ГДЕ
	|	ПеняПартнеры.Ссылка   = &Партнер
	|И	ПеняПартнеры.Свойство = &ИспользоватьПеню	
	|И 	ПеняПартнеры.Значение = Истина
	|";
	ЗапросПоПартнерам.УстановитьПараметр("ИспользоватьПеню", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Включить доступ к пене"));
	ЗапросПоПартнерам.УстановитьПараметр("Партнер", Партнер);
	Возврат НЕ ЗапросПоПартнерам.Выполнить().Пустой();
	
КонецФункции

//Формирует файл links.html
Функция ПорталLinks(ПутьККаталогу, Код, Партнер, РаботникОгранизации) Экспорт
	
	LinksHTML = Новый ТекстовыйДокумент;
	LinksHTML.Вывод = ИспользованиеВывода.Разрешить;
	LinksHTML.ДобавитьСтроку("<h3>Шановний партнер: " + Партнер.Наименование + "</h3>");
	LinksHTML.ДобавитьСтроку("<p>На цій сторінці Ви можете переглянути взаєморозрахунки. Останнє оновлення: " + ТекущаяДата());
	
	Если РаботникОгранизации = Ложь Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаШапки();
		Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")));
		Запрос.УстановитьПараметр("Партнер", Партнер);	
		Запрос.УстановитьПараметр("КонецСегодня", КонецДня(ТекущаяДата()) + 1);
		Запрос.УстановитьПараметр("УсловияБонусирования", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("18d111a4-b6eb-11e2-b56c-001e673c80fc")));
		Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
		РезультатПакета = Запрос.ВыполнитьПакет();
		Выборка = РезультатПакета[28].Выбрать();	
		Если Выборка.Следующий() Тогда 	
			LinksHTML.ДобавитьСтроку("<h4>Діючі умови бонусування:</h4><p>" + Строка(Выборка.УсловияБонусирования) + "<BR>");
			LinksHTML.ДобавитьСтроку("<h4>Діючі умови відвантаження:</h4>");
			LinksHTML.ДобавитьСтроку("<p>Відтермінування платежу: " + Строка(Выборка.ОтстрочкаПлатежа));
			LinksHTML.ДобавитьСтроку("<p>Кредитний ліміт: " + Строка(Выборка.КредитныйЛимит));
			LinksHTML.ДобавитьСтроку("<p>Кредитний договір діє до: " + ?(ТипЗнч(Выборка.ДействителенДо) = Тип("Дата"), Формат(Выборка.ДействителенДо, "ДЛФ=Д"), Выборка.ДействителенДо));
			LinksHTML.ДобавитьСтроку("<BR><BR>");
			Если Выборка.СуммаКОплатеСегодня <> 0 Тогда
				LinksHTML.ДобавитьСтроку("<p>Сума до оплати сьогодні: " + Формат(Выборка.СуммаКОплатеСегодня, "ЧДЦ=2"));
				LinksHTML.ДобавитьСтроку("<p>Сума отримана водієм (ще не зарахована): " + Формат(Выборка.СуммаПолученнаяВодителями, "ЧДЦ=2"));
			Иначе
				LinksHTML.ДобавитьСтроку("<p>Наступна планова оплата: " + ?(ТипЗнч(Выборка.ДатаПлатежа) = Тип("Дата"), Формат(Выборка.ДатаПлатежа, "ДЛФ=Д"), Выборка.ДатаПлатежа) + ": <b>" + Формат(Выборка.СуммаСледующейОплаты, "ЧДЦ=2") + "</b>");	
			КонецЕсли;
			//LinksHTML.ДобавитьСтроку("<BR><BR>");
			//LinksHTML.ДобавитьСтроку("<p>Курс зарахування гривні: " + Строка(Выборка.Курс) + "<BR><BR>");
			LinksHTML.ДобавитьСтроку("<HR>");
		КонецЕсли;
	
		Если ЕстьДоступКПене(Партнер) Тогда
			LinksHTML.ДобавитьСтроку("<h4>Звіт по пені :</h4>");	
			LinksHTML.ДобавитьСтроку("<ul><li><a href=""/users/" + Код + "/fine.html"">Звіт по пені з графіком оплат </a> <a href=""/users/" + Код + "/fine.xls" + """> [.xls] </a></li></ul>");
		КонецЕсли;
	
	КонецЕсли;
	
	Если НайтиФайлы(ПутьККаталогу + "\serial.html").Количество() = 1 Тогда
		LinksHTML.ДобавитьСтроку("<h4>Історія рухів товару (закупки, повернення):</h4>");	
		LinksHTML.ДобавитьСтроку("<ul><li><a href=""/users/" + Код + "/serial.html"">Історія рухів товару </a> <a href=""/users/" + Код + "/serial.xls" + """> [.xls] </a></li></ul>");
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(ПутьККаталогу + "\", "*");
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "December", 	"Грудень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "November", 	"Листопад"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "October", 	"Жовтень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "September", "Вересень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "August", 	"Серпень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "July", 		"Липень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "June", 		"Червень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "May", 		"Травень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "April", 	"Квітень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "March", 	"Березень"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "February", 	"Лютий"));
	МассивМесяцев.Добавить(Новый Структура("Анг, Укр", "January", 	"Січень"));
	
	
	
		
//	LinksHTML.ДобавитьСтроку("<h4>Детальний звіт по взаєморозрахункам (за 2 місяці):</h4>");
//	LinksHTML.ДобавитьСтроку("<ul><li><a href=""/users/" + Код + "/Detalized.html"">Деталізовані взаєморозрахунки</a> <a href=""/users/" + Код + "/Detalized.xls""> [.xls] </a></li></ul>");
//	LinksHTML.ДобавитьСтроку("<h4>Звіт по термінам оплати та розрахунку пені:</h4>");
//  LinksHTML.ДобавитьСтроку("<ul><li><a href=""/users/" + Код + "/fine.html"">Звіт по пені</a> <a href=""/users/" + Код + "/fine.xls""> [.xls] </a></li></ul>");
	LinksHTML.ДобавитьСтроку("<h4>Звіти по взаєморозрахункам помісячно <b>(Нові взаєморозрахунки)</b>:</h4>");

	Инд = Год(ТекущаяДата());
	Пока Истина Цикл
		
		Для Каждого Месяц ИЗ МассивМесяцев Цикл
			
			Для Каждого Файл Из МассивФайлов Цикл
				
				Если СтрЧислоВхождений(Файл.Имя, Месяц.Анг + "_new_" + Формат(Инд,"ЧГ=0")) Тогда
					Если Файл.ЭтоФайл() И Файл.Расширение = ".html" Тогда
						LinksHTML.ДобавитьСтроку("<ul><li><a href=""/users/" + Код + "/" + Файл.Имя + """>Взаєморозрахунки за " + СтрЗаменить(Файл.ИмяБезРасширения, Месяц.Анг, Месяц.Укр) + "</a> <a href=""/users/" + Код + "/" + Файл.ИмяБезРасширения + ".xls" + """> [.xls] </a></li></ul>");
					КонецЕсли;
                КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Инд = Инд - 1;
		
		Если Инд < 2011 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	
    LinksHTML.ДобавитьСтроку("<hr>");
	LinksHTML.ДобавитьСтроку("<h4>Спрощенні звіти по взаєморозрахункам помісячно <b>(Старі взаєморозрахунки)</b>:</h4>");
	
	Инд = Год(ТекущаяДата());
	Пока Истина Цикл
		
		Для Каждого Месяц ИЗ МассивМесяцев Цикл
			
			Для Каждого Файл Из МассивФайлов Цикл
				
				Если СтрЧислоВхождений(Файл.Имя, Месяц.Анг + "_" + Формат(Инд,"ЧГ=0")) Тогда
					Если Файл.ЭтоФайл() И Файл.Расширение = ".html" Тогда
						LinksHTML.ДобавитьСтроку("<ul><li><a href=""/users/" + Код + "/" + Файл.Имя + """>Взаєморозрахунки за " + СтрЗаменить(Файл.ИмяБезРасширения, Месяц.Анг, Месяц.Укр) + "</a> <a href=""/users/" + Код + "/" + Файл.ИмяБезРасширения + ".xls" + """> [.xls] </a></li></ul>");
					КонецЕсли;
                КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Инд = Инд - 1;
		
		Если Инд < 2009 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат LinksHTML;
	
КонецФункции

Функция ПолучитьТекстЗапросаШапки()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 0.
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 1.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПартнерыСегмента.Партнер КАК Партнер
		|ПОМЕСТИТЬ ПартнерыСегмента
		|ИЗ
		|	РегистрСведений.КТС_НастройкиСегментовУсловийОтгрузки КАК СегментыУсловийОтгрузки
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ПО	ПартнерыСегмента.Сегмент = СегментыУсловийОтгрузки.СегментПартнеров
		|И	ПартнерыСегмента.Партнер = &Партнер
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	ПартнерыСегмента.Партнер	 		
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 2.
		|ВЫБРАТЬ
		|	АналитикаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаПоПартнерам.Организация 	КАК Организация,
		|	АналитикаПоПартнерам.КлючАналитики 	КАК КлючАналитики
		|ПОМЕСТИТЬ Аналитика
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартнерыСегмента КАК ПартнерыСегмента
		|ПО 	ПартнерыСегмента.Партнер = АналитикаПоПартнерам.Партнер
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 3.
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	СУММА(ВЫБОР &ВалютаУправленческогоУчета
		|			КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|			ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|		КОНЕЦ) КАК Долг
		|ПОМЕСТИТЬ Долги
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|		РасчетыСКлиентами.Валюта 					КАК Валюта,
		|		РасчетыСКлиентами.СуммаОстаток 				КАК СуммаОстаток
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(
		|				&КонецСегодня,
		|				АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						Аналитика.КлючАналитики
		|					ИЗ
		|						Аналитика)) КАК РасчетыСКлиентами
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
		|		РасчетыСПоставщиками.Валюта,
		|		РасчетыСПоставщиками.СуммаОстаток
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|				&КонецСегодня,
		|				АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						Аналитика.КлючАналитики
		|					ИЗ
		|						Аналитика)) КАК РасчетыСПоставщиками
		|		) КАК Долги
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО (Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам)
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО (КурсыВалютУПР.Валюта = &ВалютаУправленческогоУчета)
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО (КурсыВалют.Валюта = Долги.Валюта)
        |
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Аналитика;
		|УНИЧТОЖИТЬ КурсыВалют;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 6.
		|ВЫБРАТЬ
		|	Ссылка КАК ДокументПоездки
		|ПОМЕСТИТЬ ДокПоездка
		|ИЗ
		|	Документ.ПоездкаЗаМаршрутом
		|ГДЕ
		|	СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 7.
		|ВЫБРАТЬ
		|	ПоездкаЗаМаршрутом.ДокументПоездки		КАК ДокументПоездки,
		|	ВЫРАЗИТЬ(Owner КАК Справочник.Партнеры)	КАК Партнер,
		|	ПоездкаЗаМаршрутом.МестоДоставки 		КАК Место
		|ПОМЕСТИТЬ СписокМестИПартнеров
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокПоездка КАК ДокПоездка
		|ПО	ДокПоездка.ДокументПоездки = ПоездкаЗаМаршрутом.ДокументПоездки
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартнерыСегмента КАК ПартнерыСегмента
		|ПО	ПартнерыСегмента.Партнер = ВЫРАЗИТЬ(Owner КАК Справочник.Партнеры)
        |
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	ПоездкаЗаМаршрутом.ДокументПоездки,
		|	ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры),
		|	ПоездкаЗаМаршрутом.МестоДоставки
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокПоездка КАК ДокПоездка
		|ПО	ДокПоездка.ДокументПоездки = ПоездкаЗаМаршрутом.ДокументПоездки
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартнерыСегмента КАК ПартнерыСегмента
		|ПО	ПартнерыСегмента.Партнер = ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры)
		|;
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 8.
		|ВЫБРАТЬ
		|	ТаблицаПартнеров.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
		|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
		|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
		|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
		|	КОНЕЦ КАК Документ	
		|ПОМЕСТИТЬ ТаблицаДокументовПоМестам
		|ИЗ
		|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокМестИПартнеров КАК ТаблицаПартнеров
		|ПО 	МестаПоДокументам.Место = ТаблицаПартнеров.Место
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СписокМестИПартнеров;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 10.
		|ВЫБРАТЬ
		|	ГрафикПлатежейПартнеров.Партнер,
		|	ГрафикПлатежейПартнеров.Документ,
		|	ГрафикПлатежейПартнеров.ДатаПлатежа,
		|	ГрафикПлатежейПартнеров.СуммаОстаток,
		|	ВЫБОР
		|		КОГДА ГрафикПлатежейПартнеров.ДатаПлатежа < &КонецСегодня
		|		ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Прострочено
		|ПОМЕСТИТЬ ГрафикПлатежейПартнеров
		|ИЗ
		|	РегистрСведений.КТС_ГрафикПлатежейПартнеров.СрезПервых(&КонецСегодня, Партнер В (ВЫБРАТЬ Партнер ИЗ ПартнерыСегмента))  КАК ГрафикПлатежейПартнеров
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 11.
		|ВЫБРАТЬ
		|	ГрафикПлатежейПартнеров.Партнер 			КАК Партнер,
		|	СУММА(ГрафикПлатежейПартнеров.СуммаОстаток) КАК СуммаПрострочки
		|ПОМЕСТИТЬ ТаблицаПрострочек
		|ИЗ
		|	ГрафикПлатежейПартнеров КАК ГрафикПлатежейПартнеров
		|ГДЕ
		|	ГрафикПлатежейПартнеров.Прострочено = 1
        |
		|СГРУППИРОВАТЬ ПО
		|	ГрафикПлатежейПартнеров.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 12.
		|ВЫБРАТЬ
		|	ГрафикПлатежейПартнеров.Партнер 			КАК Партнер,
		|	МИНИМУМ(ГрафикПлатежейПартнеров.ДатаПлатежа)КАК ДатаПлатежа
		|ПОМЕСТИТЬ ПредварительнаяТаблицаБудущихОплат
		|ИЗ
		|	ГрафикПлатежейПартнеров КАК ГрафикПлатежейПартнеров
		|	
		|СГРУППИРОВАТЬ ПО
		|	ГрафикПлатежейПартнеров.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 13.
		|ВЫБРАТЬ
		|	ПредварительнаяТаблицаБудущихОплат.Партнер 		КАК Партнер,
		|	ПредварительнаяТаблицаБудущихОплат.ДатаПлатежа	КАК ДатаПлатежа,
		|	СУММА(ГрафикПлатежейПартнеров.СуммаОстаток) 	КАК СуммаУчета
		|ПОМЕСТИТЬ ТаблицаБудущихОплат
		|ИЗ
		|	ПредварительнаяТаблицаБудущихОплат КАК ПредварительнаяТаблицаБудущихОплат
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГрафикПлатежейПартнеров КАК ГрафикПлатежейПартнеров
		|ПО	ГрафикПлатежейПартнеров.Партнер		= ПредварительнаяТаблицаБудущихОплат.Партнер
		|И	ГрафикПлатежейПартнеров.ДатаПлатежа = ПредварительнаяТаблицаБудущихОплат.ДатаПлатежа
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПредварительнаяТаблицаБудущихОплат.Партнер,
		|	ПредварительнаяТаблицаБудущихОплат.ДатаПлатежа	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПредварительнаяТаблицаБудущихОплат;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 15.
		|ВЫБРАТЬ
		|	ГрафикПлатежейПартнеров.Партнер 			КАК Партнер,
		|	СУММА(ГрафикПлатежейПартнеров.СуммаОстаток)	КАК СуммаОстаток
		|ПОМЕСТИТЬ ДолгиПоДокументам
		|ИЗ
		|	ГрафикПлатежейПартнеров КАК ГрафикПлатежейПартнеров
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовПоМестам КАК ДокументыПоМестам
		|ПО 	ДокументыПоМестам.Партнер = ГрафикПлатежейПартнеров.Партнер
		|И 	ДокументыПоМестам.Документ= ГрафикПлатежейПартнеров.Документ
        |
		|СГРУППИРОВАТЬ ПО
		|	ГрафикПлатежейПартнеров.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ГрафикПлатежейПартнеров;
		|УНИЧТОЖИТЬ ТаблицаДокументовПоМестам;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 18.
		|ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер,
		|	IsNull(УсловияОтгрузки.УсловиеОтгрузки, УсловияОтгрузкиПоУмолчанию.УсловиеОтгрузки) 			КАК УсловиеОтгрузки,
		|	IsNull(УсловияОтгрузки.КредитныйЛимит, УсловияОтгрузкиПоУмолчанию.КредитныйЛимит) 				КАК КредитныйЛимит, 
		|	IsNull(УсловияОтгрузки.ДополнительныйПроцент, УсловияОтгрузкиПоУмолчанию.ДополнительныйПроцент) КАК ДополнительныйПроцент
		|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерам
		|ИЗ
		|	ПартнерыСегмента КАК ПартнерыСегмента
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК УсловияОтгрузкиПоУмолчанию
		|ПО	Истина
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер В (ВЫБРАТЬ Партнер ИЗ ПартнерыСегмента)) КАК УсловияОтгрузки 
		|ПО УсловияОтгрузки.Партнер = ПартнерыСегмента.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 19.
		|ВЫБРАТЬ
		|	УсловияОтгрузки.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0) < ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
		|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
		|					ИНАЧЕ ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0)
		|				КОНЕЦ
		|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.РеструктуризацияДолга)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток, 0) * (1 + УсловияОтгрузки.ДополнительныйПроцент * 0.01) < ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
		|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
		|					ИНАЧЕ ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток, 0) * (1 + УсловияОтгрузки.ДополнительныйПроцент * 0.01)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУчета
		|ПОМЕСТИТЬ КОплатеСегодня
		|ИЗ
		|	УсловияОтгрузкиПоПартнерам КАК УсловияОтгрузки
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ Долги КАК Долги
		|ПО УсловияОтгрузки.Партнер = Долги.Партнер
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПрострочек КАК ТаблицаПрострочек
		|ПО УсловияОтгрузки.Партнер = ТаблицаПрострочек.Партнер
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоДокументам КАК ДолгиПоДокументам
		|ПО УсловияОтгрузки.Партнер = ДолгиПоДокументам.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Долги;
		|УНИЧТОЖИТЬ ТаблицаПрострочек;
		|УНИЧТОЖИТЬ ДолгиПоДокументам;
		|УНИЧТОЖИТЬ УсловияОтгрузкиПоПартнерам;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 24.
		|ВЫБРАТЬ
		|	Партнер 		КАК Партнер,
		|	ГрафикОплаты 	КАК ГрафикОплаты
		|ПОМЕСТИТЬ СпрСоглашенияСКлиентами
		|ИЗ
		|	Справочник.СоглашенияСКлиентами
		|ГДЕ
		|	Партнер = &Партнер
		|И   Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|И	Валюта = &ВалютаУправленческогоУчета
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 25.
		|ВЫБРАТЬ
		|	СпрПартнер.Ссылка 	КАК Партнер,
		|	СпрПартнер.Значение КАК УсловияБонусирования
		|ПОМЕСТИТЬ СпрПартнер
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК СпрПартнер
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартнерыСегмента КАК ПартнерыСегмента
		|ПО	ПартнерыСегмента.Партнер = СпрПартнер.Ссылка
		|И   &УсловияБонусирования	 = СпрПартнер.Свойство
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 26.
		|ВЫБРАТЬ 
		|	ПоездкаЗаМаршрутомФинансы.Партнер 		КАК Партнер,
		|	ПоездкаЗаМаршрутомФинансы.СуммаУчета 	КАК СуммаУчета,
		|	СУММА(СуммаПолученнаяВодителем) 		КАК СуммаПолученнаяВодителями
		|ПОМЕСТИТЬ ПоездкаЗаМаршрутомФинансы
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокПоездка КАК ДокПоездка
		|ПО 	ДокПоездка.ДокументПоездки = ПоездкаЗаМаршрутомФинансы.ДокументПоездки	
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПартнерыСегмента КАК ПартнерыСегмента
		|ПО	ПартнерыСегмента.Партнер = ПоездкаЗаМаршрутомФинансы.Партнер
        |
		|СГРУППИРОВАТЬ ПО
		|	ПоездкаЗаМаршрутомФинансы.Партнер,
		|	ПоездкаЗаМаршрутомФинансы.СуммаУчета	 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДокПоездка;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 28.
		|ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер,
		|	СпрПартнер.УсловияБонусирования,
		|	СоглашенияСКлиентами.ГрафикОплаты											КАК ОтстрочкаПлатежа,
		|	IsNull(НастройкиУсловийОтгрузки.КредитныйЛимит, ""Відсутній"") 				КАК КредитныйЛимит,
		|	IsNull(НастройкиУсловийОтгрузки.ДействителенДо, ""Договір не підписаний"")	КАК ДействителенДо,
		|	IsNull(КОплатеСегодня.СуммаУчета, 0)									КАК СуммаКОплатеСегодня,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителями, 0) 			КАК СуммаПолученнаяВодителями,
		|	IsNull(ТаблицаБудущихОплат.ДатаПлатежа, ""Дані відсутні"")				КАК ДатаПлатежа,
		|	IsNull(ТаблицаБудущихОплат.СуммаУчета, 0)								КАК СуммаСледующейОплаты,
		|	КурсВалют.Курс / КурсВалют.Кратность									КАК Курс
		|		
		|ИЗ
		|	ПартнерыСегмента КАК ПартнерыСегмента
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ СпрПартнер КАК СпрПартнер
		|ПО	СпрПартнер.Партнер = ПартнерыСегмента.Партнер
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ СпрСоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ПО	СоглашенияСКлиентами.Партнер = ПартнерыСегмента.Партнер
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер В (ВЫБРАТЬ Партнер ИЗ ПартнерыСегмента)) КАК НастройкиУсловийОтгрузки
		|ПО 	НастройкиУсловийОтгрузки.Партнер = ПартнерыСегмента.Партнер 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсВалют
		|ПО	Истина
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КОплатеСегодня КАК КОплатеСегодня
		|ПО	КОплатеСегодня.Партнер = ПартнерыСегмента.Партнер
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаБудущихОплат КАК ТаблицаБудущихОплат
		|ПО	ТаблицаБудущихОплат.Партнер = ПартнерыСегмента.Партнер
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ПО	ПоездкаЗаМаршрутомФинансы.Партнер = ПартнерыСегмента.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СпрПартнер;
		|УНИЧТОЖИТЬ КОплатеСегодня;
		|УНИЧТОЖИТЬ ПартнерыСегмента;
		|УНИЧТОЖИТЬ ТаблицаБудущихОплат;
		|УНИЧТОЖИТЬ СпрСоглашенияСКлиентами;
		|УНИЧТОЖИТЬ ПоездкаЗаМаршрутомФинансы;
		|";		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаШапки()
 
#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "2.0.15";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. обновление отчетов на order-b2b.com [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обновление отчетов на order-b2b.com [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление серийных номеров на order-b2b.com [" + Версия + "]", 				"order_b2b_com_СерийныеНомера();", 	"ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление взаиморасчетов с партнерами на order-b2b.com [" + Версия + "]", 	"order_b2b_com_Взаиморасчеты();", 	"ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

Функция ПолучитьВнешнийОтчет(ИмяВнешнегоОтчета)
	Ссылка 		    = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяВнешнегоОтчета);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Внешний отчет с именем не найден: " + ИмяВнешнегоОтчета;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОтчета  	= ВнешниеОтчеты.Подключить(АдресХранилища, , Ложь);
	ВнешнийОтчетОбъект = ВнешниеОтчеты.Создать(ИмяВнОтчета);
	Возврат ВнешнийОтчетОбъект;
КонецФункции

#КонецОбласти






