
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРассылку() Экспорт
	
	Отказ = ЛОЖЬ;
	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	Если Отказ = Истина Тогда  Возврат; КонецЕсли;  	
	
	ГруппаДоступаОптовыйОтдел 					=  ктс_ПредопределенныеЗначенияПовтИсп.ГруппаДоступаПартнерОптовогоОтдела();
	УчетнаяЗаписьЭлектроннойПочты 				=  ктс_ПредопределенныеЗначенияПовтИсп.УчетнаяЗаписьЭлектроннойПочтыОптовогоПартнера(); 
	КоличествоДеньДоОкончанияУсловияОтгрузки 	=  ктс_ПредопределенныеЗначенияПовтИсп.КоличествоДеньДоОкончанияУсловияОтгрузки();
	
	ТемаПисьма = НСтр("ru='На %1 по партнерам есть условия отгрузки, срок которых завершивается через менее чем %2 дней'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма, ТекущаяДата(),КоличествоДеньДоОкончанияУсловияОтгрузки);

	Кому = Новый Массив;		
	Кому.Добавить(Новый Структура("Адрес, Представление", УчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты, ""));
		
	Запрос 			= Новый Запрос;
	
	Запрос.Текст    = ТекстЗапросаВыполненияРассылки(); 
	
	Запрос.УстановитьПараметр("ГруппаДоступаОптовыйОтдел"				,ГруппаДоступаОптовыйОтдел);
	Запрос.УстановитьПараметр("ТекущаяДата"								,ТекущаяДата());
	Запрос.УстановитьПараметр("КоличествоДеньДоОкончанияУсловияОтгрузки",КоличествоДеньДоОкончанияУсловияОтгрузки);

	Тело = "";
	ВыборкаОсновнойМенеджер 	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОсновнойМенеджер.Следующий() Цикл      
		
		Тело = Тело+ "<br/><h2><b><font>Основний Менеджер - "+ВыборкаОсновнойМенеджер.ОсновнойМенеджер+"</font></b></h2>";
		
		Тело = Тело + "<table align=""left"" border=""1"" cellpadding=""5"" cellspacing=""0""  width=""95%"">";
			//Тело = "<table border=""1"" cellspacing=""0"" width=""95%"" style=""font-family:ms shell dlg font-size:8""> ";
		Тело =  Тело+
					"<tbody>"
						"<tr  bgcolor= ""#ff9999"">"
							"<th scope=""row"" style=""text-align: left;""><b>Партнер</b></th>"
							"<td><b>Начало действия условия</b></td>"
							"<td><b>Условие отгрузки</b></td>"
							"<td><b>Кредитный лимит</b></td>"
							"<td><b>Доп. процент</b></td>"
							"<td><b>Действителен до</b></td>"
						"</tr>"; 
						
		Выборка		= ВыборкаОсновнойМенеджер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
						
		Пока Выборка.Следующий() Цикл
			Тело = Тело +
							"<tr>"
								"<td>" + Выборка.Партнер 				+ "</td>" +
								"<td>" + Формат(Выборка.НачалоДействияУсловия,"ДФ=dd.MM.yyyy; ДЛФ=D")+ "</td>" +                 
								"<td>" + Выборка.УсловиеОтгрузки 		+ "</td>" +
								"<td>" + Выборка.КредитныйЛимит 		+ "</td>" +
								"<td>" + Выборка.ДополнительныйПроцент	+ "</td>" +
								"<td>" + Выборка.ДействителенДо 		+ "</td>" +
							"</tr>"; 
		КонецЦикла;
		Тело = Тело + "</tbody>"
					"</table>"; 

	КонецЦикла;  
		
	Если ПустаяСтрока(Тело)= ЛОЖЬ  Тогда
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(ТемаПисьма,  Тело, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	КонецЕсли;
КонецПроцедуры  

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ) 
	
	КоличествоДеньДоОкончанияУсловияОтгрузки =  ктс_ПредопределенныеЗначенияПовтИсп.КоличествоДеньДоОкончанияУсловияОтгрузки();
	
	Если ЗначениеЗаполнено(КоличествоДеньДоОкончанияУсловияОтгрузки) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - КоличествоДеньДоОкончанияУсловияОтгрузки.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("РегламентнаяРассылкаОУсловииОтгрузкиПартнера",СообщениеОбОшибке);
	КонецЕсли;
	
	УчетнаяЗаписьЭлектроннойПочты = ктс_ПредопределенныеЗначенияПовтИсп.УчетнаяЗаписьЭлектроннойПочтыОптовогоПартнера();
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьЭлектроннойПочты) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - УчетнаяЗаписьЭлектроннойПочты.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("РегламентнаяРассылкаОУсловииОтгрузкиПартнера",СообщениеОбОшибке);
	КонецЕсли;
	
	ГруппаДоступаОптовыйОтдел = ктс_ПредопределенныеЗначенияПовтИсп.ГруппаДоступаПартнерОптовогоОтдела();
	Если ЗначениеЗаполнено(ГруппаДоступаОптовыйОтдел) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - ГруппаДоступаПартнерОптовогоОтдела.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("РегламентнаяРассылкаОУсловииОтгрузкиПартнера",СообщениеОбОшибке);
	КонецЕсли; 	
	
КонецПроцедуры

Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'РегламентнаяРассылкаОУсловииОтгрузкиПартнера'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()
									
Процедура ОповеститьОбОшибкеВSlack(ИмяСобытия, ОписаниеОшибки)
	
	МассивПрикреплений = Новый Массив;
	СтруктураПрикреплений = git_Slack.ПолучитьСтруктуруПрикреплений();
	СтруктураПрикреплений.Вставить("fallback",  "Ошибка");
	СтруктураПрикреплений.Вставить("text",      ИмяСобытия);
	СтруктураПрикреплений.Вставить("pretext",   ОписаниеОшибки);
	СтруктураПрикреплений.Вставить("color",     "danger");
	МассивПрикреплений.Добавить(СтруктураПрикреплений);

	СтруктураДанных = git_Slack.ПолучитьПустуюСтруктуруДанных();
	СтруктураДанных.Вставить("username",    "Base (yt11)");
	СтруктураДанных.Вставить("icon_emoji",  ":shit:");
	СтруктураДанных.Вставить("channel",     "#general");
	СтруктураДанных.Вставить("attachments", МассивПрикреплений);
	git_Slack.ОтправитьДанные("ktchat.slack.com", "x2VEjiOJKl2UnSA5t2DinjEt", СтруктураДанных);
	
КонецПроцедуры // ОповеститьОбОшибкеВSlack()


Функция ТекстЗапросаВыполненияРассылки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.Партнер КАК Партнер
	               |ПОМЕСТИТЬ ПартнерыБезУсловногоДоговора
	               |ИЗ
	               |	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних КАК КТС_НастройкиУсловийОтгрузкиСрезПоследних
	               |ГДЕ
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.КредитныйЛимит = 0
	               |	И КТС_НастройкиУсловийОтгрузкиСрезПоследних.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.Партнер,
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.Партнер.ОсновнойМенеджер КАК ОсновнойМенеджер,
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.Период КАК НачалоДействияУсловия,
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.УсловиеОтгрузки,
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.КредитныйЛимит,
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.ДополнительныйПроцент,
	               |	РАЗНОСТЬДАТ(&ТекущаяДата, КТС_НастройкиУсловийОтгрузкиСрезПоследних.ДействителенДо, ДЕНЬ) КАК ДействителенДо
	               |ИЗ
	               |	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(
	               |			,
	               |			НЕ Партнер В
	               |					(ВЫБРАТЬ
	               |						ПартнерыБезУсловногоДоговора.Партнер
	               |					ИЗ
	               |						ПартнерыБезУсловногоДоговора КАК ПартнерыБезУсловногоДоговора)) КАК КТС_НастройкиУсловийОтгрузкиСрезПоследних
	               |ГДЕ
	               |	КТС_НастройкиУсловийОтгрузкиСрезПоследних.Партнер.ГруппаДоступа = &ГруппаДоступаОптовыйОтдел
	               |	И РАЗНОСТЬДАТ(&ТекущаяДата, КТС_НастройкиУсловийОтгрузкиСрезПоследних.ДействителенДо, ДЕНЬ) <= &КоличествоДеньДоОкончанияУсловияОтгрузки
	               |	И РАЗНОСТЬДАТ(&ТекущаяДата, КТС_НастройкиУсловийОтгрузкиСрезПоследних.ДействителенДо, ДЕНЬ) >= 0
	               |ИТОГИ ПО
	               |	ОсновнойМенеджер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВыполненияРассылки()


#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. рассылка о условии отгрузки партнера");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. рассылка о условии отгрузки партнера [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. рассылка о условии отгрузки партнера [" + Версия + "]", "ВыполнитьРассылку();", "ВызовСерверногоМетода");
		
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти