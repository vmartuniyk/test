
// ПРОГРАМНЫЙ ИНТЕРФЕЙС МОДУЛЯ

// Процедура выполняет рассылку по регламентному заданию
//
Процедура ВыполнитьРассылку() Экспорт
	ПровестиРассылку();	
КонецПроцедуры
						
// Процедура выполняэт тестовую рассылку на указанный
// адрес электронной почты (в ручном режиме)
// 
Процедура ВыполнитьТестовуюРассылку(АдресЭлектроннойПочты) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПровестиРассылку(АдресЭлектроннойПочты);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры
 
 

// Процедура загружает сохраненные настройки в реквизиты формы
//
Процедура ЗагрузитьНастройкиЗадания() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОрганизацииДляРасчета.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ДополнительныеАдреса.ТипЗначения  = Новый ОписаниеТипов("Строка");
	СегментыПартнеров.ТипЗначения 	  = Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров");
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("Настройки_РассылкаДебиторки"
													   , 
													   , 
													   , 
													   "Настройки_РассылкаДебиторки");
													   
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("СписокПользователей") Тогда
			СписокПользователей.Загрузить(Настройки.СписокПользователей.Получить());
		КонецЕсли;
		Если Настройки.Свойство("ОрганизацииДляРасчета") Тогда
			ОрганизацииДляРасчета.ЗагрузитьЗначения(Настройки.ОрганизацииДляРасчета.Получить());
		КонецЕсли;
		Если Настройки.Свойство("УчетнаяЗапись") Тогда
			УчетнаяЗапись = Настройки.УчетнаяЗапись;
		КонецЕсли;
		Если Настройки.Свойство("ДополнительныеАдреса") Тогда
			ДополнительныеАдреса.ЗагрузитьЗначения(Настройки.ДополнительныеАдреса.Получить());
		КонецЕсли;
		Если Настройки.Свойство("СегментыПартнеров") Тогда
			СегментыПартнеров.ЗагрузитьЗначения(Настройки.СегментыПартнеров.Получить());
		КонецЕсли;

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ЗагрузитьНастройкиНаСервере()

// Процедура сохраняет измененные настройки на сервере
//
Процедура СохранитьНастройкиЗадания(Отказ=Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьЗаполнениеСписокПользователей(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Настройки 				= КонструкторСтруктурыНастроекФормы();
	ТЗ_СписокПользователей  = СписокПользователей.Выгрузить();
	Сжатие					= Новый СжатиеДанных(9);
	Настройки.Вставить("СписокПользователей", Новый ХранилищеЗначения(ТЗ_СписокПользователей, Сжатие));
	Настройки.Вставить("ОрганизацииДляРасчета", Новый ХранилищеЗначения(ОрганизацииДляРасчета.ВыгрузитьЗначения(), Сжатие));
	Настройки.Вставить("ДополнительныеАдреса", Новый ХранилищеЗначения(ДополнительныеАдреса.ВыгрузитьЗначения(), Сжатие));
	Настройки.Вставить("СегментыПартнеров", Новый ХранилищеЗначения(СегментыПартнеров.ВыгрузитьЗначения(), Сжатие));
	Настройки.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Настройки_РассылкаДебиторки", 
										  , 
										  Настройки, 
										  "Настройки рассылки просречнной дебиторки", 
										  "Настройки_РассылкаДебиторки");

	УстановитьПривилегированныйРежим(Ложь);									  
										  
КонецПроцедуры // СохранитьНастройкиНаСервере()









// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ



Процедура ПровестиРассылку(АдресЭлектроннойПочты=Неопределено)
	
	МассивРассылки = Новый Массив;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск регламентного задания: Регл. рассылка просроченной дебиторки'")
							, УровеньЖурналаРегистрации.Информация, 
							, 
							, НСтр("ru = 'Начало выполнения'"));
	
	ЗагрузитьНастройкиЗадания();
	
	
	Отказ = Ложь;
	ПроверитьПравильностьНастроекРегламетногоЗадания(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если АдресЭлектроннойПочты=Неопределено Тогда
	
		ПользователиДляРассылки = ПользователиДляРассылки(СписокПользователей);
		МассивРассылки 			= ПользователиДляРассылки.МассивРассылки;
		ДобавитьДополнительныеАдресаКРассылке(МассивРассылки);
		
		Если МассивРассылки.Количество() = 0 Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Завершение регламентного задания: Регл. рассылка просроченной дебиторки'")
								, УровеньЖурналаРегистрации.Информация, 
								, 
								, НСтр("ru = 'Успешно завершено'"));
			Возврат;
		КонецЕсли;
	// Ручной вызов - нам настройки не нужны	
	Иначе
		Если Не ПустаяСтрока(АдресЭлектроннойПочты) Тогда
			МассивРассылки.Добавить(Новый Структура("Адрес, Представление", АдресЭлектроннойПочты, ""));
		КонецЕсли;
	КонецЕсли;
		
	ТекстПисьма = СформироватьТелоПисьма(ОрганизацииДляРасчета);
	ТемаПисьма  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Партнеры с потенциально проблемной дебиторкой (%1)'"),
							ТекущаяДата());
	
	ПараметрыПисьма = СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, МассивРассылки,,,,,, ТипТекстаПочтовогоСообщения.HTML);
	ОтправитьСообщениеПоSMTP(УчетнаяЗапись, ПараметрыПисьма);

	
	// Если вызываем из регламентного задания - необходимо запомнить параметры
	// которые были зменены
	Если АдресЭлектроннойПочты=Неопределено Тогда	
		ОбработатьСписокПользователей(СписокПользователей, ПользователиДляРассылки.МассивПерезаписи);	
		СохранитьНастройкиЗадания();
	КонецЕсли;
										  
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Завершение регламентного задания: Регл. рассылка просроченной дебиторки'")
							, УровеньЖурналаРегистрации.Информация, 
							, 
							, НСтр("ru = 'Успешно завершено'"));


КонецПроцедуры
 




// Получение пользователей для рассылки

Функция ПользователиДляРассылки(СписокПользователей)

	Результат = Новый Структура;
	Результат.Вставить("МассивРассылки", Новый Массив);
	Результат.Вставить("МассивПерезаписи", Новый Массив);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаПользователиДляРассылки();
	
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	Запрос.УстановитьПараметр("ТипЭлПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидЭлПочта", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("РазВДень", "раз в день");
	Запрос.УстановитьПараметр("РазВНеделю", "раз в неделю");
	Запрос.УстановитьПараметр("РазВДекаду", "раз в декаду");
	Запрос.УстановитьПараметр("РазВМесяц", "раз в месяц");
	Запрос.УстановитьПараметр("РазВКвартал", "раз в квартал");
	Запрос.УстановитьПараметр("РазВГод", "раз в год");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРассылки 	= Новый Структура("Адрес, Представление", Выборка.АдресЭлПочты, "");
		СтруктураПерезаписи = Новый Структура("Пользователь, ЧастотаОтправки, ПоследняяРассылка",
												Выборка.Пользователь,
												СокрЛП(Выборка.ЧастотаОтправки),
												Выборка.ПоследняяРассылка);
		Результат.МассивРассылки.Добавить(СтруктураРассылки);
		Результат.МассивПерезаписи.Добавить(СтруктураПерезаписи);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПользователиДляРассылки()


Функция ПолучитьТекстЗапросаПользователиДляРассылки()

	ТекстЗапроса = "ВЫБРАТЬ
	                      |	СписокПользователей.Пользователь КАК Пользователь,
	                      |	ВЫРАЗИТЬ(СписокПользователей.ЧастотаОтправки КАК Строка(20)) КАК ЧастотаОтправки,
	                      |	СписокПользователей.ПоследняяРассылка КАК ПоследняяРассылка
	                      |ПОМЕСТИТЬ КешПользователи
	                      |ИЗ
	                      |	&СписокПользователей КАК СписокПользователей
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешПользователи.Пользователь КАК Пользователь,
	                      |	ВЫБОР КешПользователи.ЧастотаОтправки
	                      |		КОГДА &РазВДень
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РАЗНОСТЬДАТ(КешПользователи.ПоследняяРассылка, &ТекущаяДата, ДЕНЬ) > 0
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		КОГДА &РазВНеделю
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РАЗНОСТЬДАТ(КешПользователи.ПоследняяРассылка, &ТекущаяДата, ДЕНЬ) > 6
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		КОГДА &РазВДекаду
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РАЗНОСТЬДАТ(КешПользователи.ПоследняяРассылка, &ТекущаяДата, ДЕНЬ) > 9
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		КОГДА &РазВМесяц
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РАЗНОСТЬДАТ(КешПользователи.ПоследняяРассылка, &ТекущаяДата, МЕСЯЦ) > 0
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		КОГДА &РазВКвартал
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РАЗНОСТЬДАТ(КешПользователи.ПоследняяРассылка, &ТекущаяДата, КВАРТАЛ) > 0
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		КОГДА &РазВГод
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА РАЗНОСТЬДАТ(КешПользователи.ПоследняяРассылка, &ТекущаяДата, ГОД) > 0
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ВыполнятьРассылку,
	                      |	КешПользователи.ЧастотаОтправки КАК ЧастотаОтправки,
	                      |	КешПользователи.ПоследняяРассылка КАК ПоследняяРассылка
	                      |ПОМЕСТИТЬ КешОчередьРассылки
	                      |ИЗ
	                      |	КешПользователи КАК КешПользователи
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
	                      |	ПользователиКонтактнаяИнформация.Представление КАК АдресЭлПочты
	                      |ПОМЕСТИТЬ КешКонтактнаяИнформация
	                      |ИЗ
	                      |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	                      |ГДЕ
	                      |	ПользователиКонтактнаяИнформация.Тип = &ТипЭлПочта
	                      |	И ПользователиКонтактнаяИнформация.Вид = &ВидЭлПочта
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешОчередьРассылки.Пользователь КАК Пользователь,
	                      |	КешОчередьРассылки.ЧастотаОтправки КАК ЧастотаОтправки,
	                      |	КешОчередьРассылки.ПоследняяРассылка КАК ПоследняяРассылка,
	                      |	КешКонтактнаяИнформация.АдресЭлПочты КАК АдресЭлПочты
	                      |ИЗ
	                      |	КешОчередьРассылки КАК КешОчередьРассылки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ КешКонтактнаяИнформация КАК КешКонтактнаяИнформация
	                      |		ПО КешОчередьРассылки.Пользователь = КешКонтактнаяИнформация.Пользователь
	                      |ГДЕ
	                      |	КешОчередьРассылки.ВыполнятьРассылку";
						  
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПользователиДляРассылки()
 

Процедура ОбработатьСписокПользователей(СписокПользователей, МассивПерезаписи)

	ТекДата = ТекущаяДата();
	
	Для каждого ЭлементМассива Из МассивПерезаписи Цикл
		РезультатыПоиска = СписокПользователей.НайтиСтроки(ЭлементМассива);
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			РезультатПоиска.ПоследняяРассылка = ТекДата;
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры


Функция КонструкторСтруктурыСохраненияНастроек()

	Настройки = Новый Структура;
	Настройки.Вставить("СписокПользователей");
	Настройки.Вставить("ОрганизацииДляРасчета");
	Настройки.Вставить("УчетнаяЗапись");
	
	Возврат Настройки;

КонецФункции // КонструкторСтруктурыНасроек()


Процедура ДобавитьДополнительныеАдресаКРассылке(МассивРассылки)
	Для каждого ДополнительныйАдрес Из ДополнительныеАдреса Цикл
		МассивРассылки.Добавить(Новый Структура("Адрес, Представление", ДополнительныйАдрес.Значение, ""));
	КонецЦикла; 
КонецПроцедуры
 




// Формирование тела писем

Функция СформироватьТелоПисьма(ОранизацииДляРасчета)

	ТелоПисьма	 = КодЗаголовкаТелаПисьма();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПросроченнойДебиторки();
	
	Запрос.УстановитьПараметр("Организации", ОранизацииДляРасчета);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СписокСегментов", СегментыПартнеров);
	
	Выбока = Запрос.Выполнить().Выбрать();
	
	Пока Выбока.Следующий() Цикл
		ТелоПисьма = ТелоПисьма + СформироватьСтрокуТелаПисьма(Выбока);
	КонецЦикла;
	
	ТелоПисьма = ТелоПисьма + "</table>";
	
	Возврат ТелоПисьма;

КонецФункции // СформироватьТелоПисьма()

Функция КодЗаголовкаТелаПисьма()

	ТекстПисьма = "
	|<table style='border-collapse: collapse; border:2px solid white; width:100%;'>
	|<tr>
	|<td style='border:2px solid white; background: #589CE8;'>Партнер</td>
	|<td style='border:2px solid white; background: #589CE8;'>Размер дебиторки</td>
	|<td style='border:2px solid white; background: #589CE8;'>Размер просроченной дебиторки</td>
	|<td style='border:2px solid white; background: #589CE8;'>Срок просрочки</td>
	|</tr>";
	
	Возврат ТекстПисьма;

КонецФункции // КодЗаголовкаТелаПисьма()

Функция СформироватьСтрокуТелаПисьма(Выборка)

	ТекстПисьма = "
	|<tr>
	|<td style='border:2px solid white; background: #58E8E7;'>%1</td>
	|<td style='border:2px solid white; background: #58E8E7;' align='right'>%2</td>
	|<td style='border:2px solid white; background: #58E8E7;' align='right'>%3</td>
	|<td style='border:2px solid white; background: #58E8E7;' align='right'>%4</td>
	|</tr>";
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%1", Выборка.Партнер);
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%2", Формат(Выборка.СуммаОстаток, "ЧДЦ=2"));
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%3", Формат(Выборка.СуммаПросроченныхОплат, "ЧДЦ=2"));	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%4", Формат(Выборка.КоличествоДнейОтстрочки, "ЧДЦ=2"));
														
	Возврат ТекстПисьма;

КонецФункции // СформироватьСтрокуТелаПисьма()
 
Функция ПолучитьТекстЗапросаПросроченнойДебиторки()

	ТекстЗапроса = "
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//0. Сегменты партнеров
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		| 	Партнер КАК Партнер
		|ПОМЕСТИТЬ ВсеПартнерыСегмента
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента
		|ГДЕ 
		|	Сегмент В (&СписокСегментов)
		|;
		|
		|//1. Курсы валют
		|ВЫБРАТЬ
		|	Валюта КАК Валюта,
		|	Курс / Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют	
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//2. Аналитика
		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	Организация КАК Организация,
		|	КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ Аналитика	
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам	
		|ГДЕ
		|	Партнер В (
		|				ВЫБРАТЬ
		|					Партнер
		|				ИЗ
		|					ВсеПартнерыСегмента)
		|	И Организация В (&Организации)
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики		
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//3. Долги
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	Сумма(	ВЫБОР ВалютаУправленческогоУчета.Значение
		|				КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|			КОНЕЦ
		|		  ) КАК Долг	

		|ПОМЕСТИТЬ Долги
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|								
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток 				
		|		ИЗ
		|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
		|	) КАК Долги
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО 	Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам

		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Долги.Валюта						

		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//4. ГрафикОплат
		|ВЫБРАТЬ
		|	Ссылка КАК Ссылка,
		|	МИНИМУМ(ДатаПлатежа) КАК ДатаПлатежа
		|	
		|ПОМЕСТИТЬ ГрафикОплат
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты
		|ГДЕ
		|	Ссылка.Организация В (&Организации)

		|СГРУППИРОВАТЬ ПО 
		|	Ссылка
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//5. Обороты клиентов cache
		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг)				КАК Регистратор,
		|	Регистратор.МоментВремени 												КАК МоментВремени,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента 	КАК ЗаказКлиента,	
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа  	КАК ДатаПлатежа,
		|	Период КАК Период,
		|	Валюта КАК Валюта,
		|	СуммаПриход КАК СуммаПриход,
		|	СуммаОборот КАК СуммаОборот
		|		
		|ПОМЕСТИТЬ Cache_Обороты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|И	СуммаОборот <> 0			
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//6. Обороты клиентов
		|ВЫБРАТЬ
		| 	Аналитика.Партнер КАК Партнер,
		|	Обороты.Регистратор КАК Регистратор,
		|	Обороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА Обороты.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка) 
		|		  ИЛИ Обороты.ЗаказКлиента = Неопределено
		|		  ИЛИ Обороты.ЗаказКлиента = NULL
		|		ТОГДА Обороты.ДатаПлатежа
		|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
		|	КОНЕЦ КАК ДатаПлатежа,
		|   	Обороты.МоментВремени,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаПриход
		|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаОборот
		|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ КАК СуммаОборот
		|   
		|ПОМЕСТИТЬ ОборотыПоКлиенту
		|ИЗ
		|	Cache_Обороты КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО Аналитика.КлючАналитики = Обороты.КлючАналитики 						

		|ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
		|ПО ГрафикОплат.Ссылка = Обороты.ЗаказКлиента

		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Обороты.Валюта
		|;
		
		|//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Аналитика;
		|УНИЧТОЖИТЬ КурсыВалют;
		|УНИЧТОЖИТЬ ГрафикОплат;
		|УНИЧТОЖИТЬ Cache_Обороты;
		
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//7. Обороты по месяцам
		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
		|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
		|	СУММА(СуммаОборот) КАК Сумма
		|	
		|ПОМЕСТИТЬ ОборотыПоМесяцам	
		|ИЗ
		|	ОборотыПоКлиенту 
		|															
		|СГРУППИРОВАТЬ ПО
		|	   Партнер,
		|	   НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ),
		|	   КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ)
		|;
		
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//8. По месяцам наростающие
		|ВЫБРАТЬ
		|		ОборотыПоМесяцам.Партнер КАК Партнер,
		|		ОборотыПоМесяцам.НачПериода КАК НачПериода,
		|		ОборотыПоМесяцам.КонПериода КАК КонПериода,
		|		ОборотыПоМесяцам.Сумма КАК Сумма,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
		|		СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
		|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
		|ИЗ
		|   ОборотыПоМесяцам КАК ОборотыПоМесяцам
		|   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
		|ПО ОборотыПоМесяцам.Партнер     = ОборотыПоМесяцамКопия.Партнер
		|И  ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода

		|СГРУППИРОВАТЬ ПО
		|		ОборотыПоМесяцам.НачПериода,
		|		ОборотыПоМесяцам.КонПериода,
		|		ОборотыПоМесяцам.Партнер,
		|		ОборотыПоМесяцам.Сумма
		|;
		
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//9. Долги по выбранным месяцам
		|ВЫБРАТЬ
		|		Долги.Партнер КАК Партнер,
		|		Долги.Долг КАК Долг,
		|		ОборотыПоМесНарастающие.НачПериода КАК НачПериода,
		|		ОборотыПоМесНарастающие.КонПериода КАК КонПериода,
		|		Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
		|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
		|ИЗ
		|		Долги КАК Долги
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
		|		ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
		|		И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
		|		И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
		|;
		
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//10. Движения по выбранным месяцам
		|ВЫБРАТЬ
		|		Обороты.Партнер КАК Партнер,
		|		Обороты.МоментВремени КАК МоментВремени,
		|		Обороты.Регистратор КАК Регистратор,
		|		Обороты.Период КАК Период,
		|		ДолгиПоВыбМесяцам.Долг КАК Долг,
		|		ДолгиПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
		|		Обороты.Сумма КАК Сумма,
		|		Обороты.ДатаПлатежа КАК ДатаОтсрочки
		|	
		|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
		|ИЗ
		|	ОборотыПоКлиенту КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
		|ПО Обороты.Партнер 		= ДолгиПоВыбМесяцам.Партнер
		|И  Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
		|И  Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
		|;
		
		|//////////////////////////////////////////////////////////////////////////////////////////
		|//11. Движения по выбранным месяцам наростающие
		|ВЫБРАТЬ
		|	   ДвиженияПоВыбМесяцам.Партнер КАК Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор КАК Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период КАК Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени КАК МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма КАК Сумма,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
		|	   СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки КАК ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияПредварительные
		|ИЗ
		|	   ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
		|	   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
		|ПО 	ДвиженияПоВыбМесяцам.Партнер 		= ДвиженияПоВыбМесяцамКопия.Партнер
		|И  	ДвиженияПоВыбМесяцам.ДатаОтсрочки  <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|И	ВЫБОР
		|		КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки   = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|		ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	   
		|СГРУППИРОВАТЬ ПО
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|;
		
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОборотыПоМесяцам;
		|УНИЧТОЖИТЬ ОборотыПоМесяцамНарастающие;
		|УНИЧТОЖИТЬ Долги;
		|УНИЧТОЖИТЬ ДолгиПоВыбраннымМесяцам;
		|УНИЧТОЖИТЬ ДвиженияПоВыбраннымМесяцам;
		
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|//12.       
		|ВЫБРАТЬ
		|	   ДвиженияПредв.Партнер КАК Партнер,
		|	   ДвиженияПредв.Регистратор КАК Регистратор,
		|	   ДвиженияПредв.Период КАК Период,
		|	   ДвиженияПредв.МоментВремени КАК МоментВремени,
		|	   ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
		|	   ДвиженияПредв.Сумма КАК Сумма,
		|	   ДвиженияПредв.ДатаОтсрочки КАК ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияОкончательные
		|ИЗ
		|	   ДвиженияПредварительные КАК ДвиженияПредв
		|ГДЕ
		|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
		|И 	ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
		|;
		
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|//13. 
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Обороты.Партнер) КАК Партнер,
		|	СУММА(ВЫБОР
		|			КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
		|			ТОГДА ДвиженияОконч.СуммаДолга
		|			ИНАЧЕ Обороты.Сумма
		|	   КОНЕЦ) КАК СуммаОстаток,
		|	   МАКСИМУМ(РАЗНОСТЬДАТ(Обороты.ДатаПлатежа, &ТекущаяДата, День)) КАК КоличествоДнейОтстрочки,
		|	СУММА(ВЫБОР
		|	   КОГДА Обороты.ДатаПлатежа < &ТекущаяДата
		|	    	ТОГДА 	ВЫБОР
		|	   					КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
		|						ТОГДА ДвиженияОконч.СуммаДолга
		|						ИНАЧЕ Обороты.Сумма
		|	   				КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПросроченныхОплат

		|ИЗ
		|	   ОборотыПоКлиенту  КАК Обороты

		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
		|ПО ДвиженияОконч.Партнер 		= Обороты.Партнер
		|И  ДвиженияОконч.ДатаОтсрочки  <= Обороты.ДатаПлатежа 
		|И	ВЫБОР
		|		КОГДА ДвиженияОконч.ДатаОтсрочки = Обороты.ДатаПлатежа 
		|		ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	Обороты.Партнер
		|
		|ИМЕЮЩИЕ 
		|	МАКСИМУМ(РАЗНОСТЬДАТ(Обороты.ДатаПлатежа, &ТекущаяДата, День)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоДнейОтстрочки УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()
 





// Процедуры и функции для работы с электронной почтой

Функция СформироватьПараметрыПисьма(Тема = "", 
									Тело = "", 
									Кому = Неопределено, 
									Копии = Неопределено, 
									СлепыеКопии = Неопределено,
									АдресОтвета = Неопределено,
									Вложения	= Неопределено,
									ИдентификаторыОснований = Неопределено,
									ТипТекста = Неопределено,
									Важность = Неопределено,
									Кодировка = Неопределено,
									Пароль = Неопределено)
										
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", Тема);	
	ПараметрыПисьма.Вставить("Тело", Тело);
	
	Если Кому <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	КонецЕсли;
	
	Если Копии <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Копии", Копии);
	КонецЕсли;
	
	Если СлепыеКопии <> Неопределено Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", СлепыеКопии);
	КонецЕсли;
	
	Если АдресОтвета <> Неопределено Тогда
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	КонецЕсли;
	
	Если Вложения <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	Если ИдентификаторыОснований <> Неопределено Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	Если ТипТекста <> Неопределено Тогда
		ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
	КонецЕсли;
	
	Если Важность <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Важность", Важность);
	КонецЕсли;
	
	Если Кодировка <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	Если Пароль <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции


// Функция-констуктор получает адреса, на которые следует отправлять 
// сообщение о неоприходованных заказах, а также учетную запись ел. почты,
// с которой будет идти рассылка
//
// Возвращаемое значение:
// Структура
//  Кому 		  - массив строк, содержит список адресов, кода следует отправлять
//				  	сообщения о неоприходованных товарах.
//  УчетнаяЗапись - учетная запись, с которой будут отправляться письма
// 
Функция УчетныеЗаписиДляПочты()

	Результат = Новый Структура;
	Кому	  = Новый Массив;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("Настройки_УпрощениеКонтроляОприходования"
													   , 
													   , 
													   , 
													   "Настройки_УпрощениеКонтроляОприходования");
													   
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена отправки электронных писем'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо задать настройки'"));												   
		Возврат Неопределено;												   
	КонецЕсли;				
	
	Если Настройки.Свойство("АдресЭлектроннойПочты") И НЕ ПустаяСтрока(Настройки.АдресЭлектроннойПочты) Тогда
		Кому.Добавить(Новый Структура("Адрес, Представление", Настройки.АдресЭлектроннойПочты, ""));
	КонецЕсли;
	
	Если Настройки.Свойство("СписокПользователей") Тогда
		ЗаполнитьМассивАдресовПолучателей(Настройки.СписокПользователей, Кому);
	КонецЕсли;
	
	Если Кому.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена отправки электронных писем'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо задать хотя бы один адрес или выбрать одного пользователя в настройках'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Настройки.Свойство("СтандартнаяУчетнаяЗаписьЭлектроннойПочты") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена отправки электронных писем'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо указать учетную запись для электронной почты в настройках'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если Настройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты.Пустая() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена отправки электронных писем'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо указать учетную запись для электронной почты в настройках'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Вставить("Кому", Кому);
	Результат.Вставить("УчетнаяЗапись", Настройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты);
	
	Возврат Результат

КонецФункции // УчетныеЗаписиДляПочты()

// Заполняем массив адресов по списку значений
//
// Параметры:
//  СписокПользователей - Список значений
//  Кому - Массив - массив адресов электронной почты
//
Процедура ЗаполнитьМассивАдресовПолучателей(СписокПользователей, Кому)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтактнаяИнформация.Ссылка.Наименование КАК Представление,
	                      |	КонтактнаяИнформация.Представление КАК Адрес
	                      |ИЗ
	                      |	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Ссылка В(&МассивПользователей)");
	Запрос.УстановитьПараметр("МассивПользователей", СписокПользователей.ВыгрузитьЗначения());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Адрес) Тогда
			СтруктураЗаполнения = Новый Структура("Адрес, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
			Кому.Добавить(СтруктураЗаполнения);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры



Функция КонструкторСтруктурыНастроек()

	Настройки = Новый Структура;
	Настройки.Вставить("СтандартнаяУчетнаяЗаписьЭлектроннойПочты");
	Настройки.Вставить("АдресЭлектроннойПочты");
	Настройки.Вставить("СписокПользователей");
	
	Возврат Настройки;

КонецФункции // КонструкторСтруктурыНасроек()
 
 

// Функция отправления - непосредственная реализация механики отправления
// электронного сообщения
//
// Функция, реализующая механику отправки сообщения электронной почты
//
// Параметры:
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
//                 учетную запись электронной почты
// ПараметрыПисьма - структура - содержит всю необходимую информацию о письме:
//                   содержит следующие ключи:
//    Кому*      - Массив структур, строка - интернет адрес получателя письма
//                 Адрес         - строка - почтовый адрес
//                 Представление - строка - имя адресата
//    Копии      - массив структур, строка - интернет адреса получателей письма
//                 используется при формировании письма для поля копий
//                 в случае массива структур, формат каждой структуры:
//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
//                 Представление - строка - имя адресата
//    СлепыеКопии - массив структур, строка - интернет адреса получателей письма
//                 используется при формировании письма для поля скрытых копий
//                 в случае массива структур, формат каждой структуры:
//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
//                 Представление - строка - имя адресата
//
//    Тема*      - строка - тема почтового сообщения
//    Тело*      - тело почтового сообщения (простой текст в кодировке win-1251)
//    Вложения   - соответствие
//                 ключ     - наименованиеВложения - строка - наименование вложения
//                 значение - ДвоичныеДанные - данные вложения
//
// дополнительные ключи структуры, которые могут использоваться:
//    АдресОтвета - соответствие - см. такие же поля как и кому
//    Пароль      - строка - пароль для доступа учетной записи
//    ТипТекста   - Строка / Перечисление.ТипыТекстовЭлектронныхПисем/ТипТекстаПочтовогоСообщения  определяет тип переданного теста
//                  допустимые значения:
//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML
//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения. Отображается "как есть" (значение по умолчанию)
//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате Rich Text
//
//    прим.: параметры письма помеченные символом '*' являются обязательными
//           т.е. к началу работы функции считается что они уже заполнены
//
// Возвращаемое значение:
// Строка - идентификатор отправленного почтового сообщения на smtp сервере
//
// ПРИМЕЧАНИЕ: функция может вызвать исключение, которое требуется обработать
//
Функция ОтправитьСообщениеПоSMTP(знач УчетнаяЗапись, знач ПараметрыПисьма) 
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	Кому = ПараметрыПисьма.Кому;
	// формируем адрес получателя	
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// формируем адрес ответа, если необходимо
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// добавляем к письму имя отправителя
	Письмо.ИмяОтправителя              = УчетнаяЗапись.ИмяПользователя;
	Письмо.Отправитель.ОтображаемоеИмя = УчетнаяЗапись.ИмяПользователя;
	Письмо.Отправитель.Адрес           = УчетнаяЗапись.АдресЭлектроннойПочты;
	
	// добавляем вложения к письму
	Если Вложения <> Неопределено Тогда
		Для Каждого ЭлементВложение Из Вложения Цикл
			Письмо.Вложения.Добавить(ЭлементВложение.Значение, ЭлементВложение.Ключ);
		КонецЦикла;
	КонецЕсли;

	// Установим строку с идентификаторами оснований
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	// добавляем текст
	Текст = Письмо.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;

	Если ПараметрыПисьма.Свойство("Пароль") Тогда
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, ПараметрыПисьма.Пароль);
	Иначе
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись);
	КонецЕсли;
	
	Возврат ОтправитьПочту(Профиль, Письмо).ИдентификаторСообщения;
	
КонецФункции

Функция СформироватьИнтернетПрофиль(знач УчетнаяЗапись, 
									знач Пароль = Неопределено, 
									знач ФормироватьSMTPПрофиль = Истина, 
									знач ФормироватьPOP3Профиль = Истина)
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;	
	Профиль.Пользователь = УчетнаяЗапись.Пользователь;
	Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжидания;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		Профиль.Пароль = Пароль;
	Иначе
		Профиль.Пароль = УчетнаяЗапись.Пароль;
	КонецЕсли;
	
	Если ФормироватьSMTPПрофиль Тогда
		Профиль.АдресСервераSMTP = УчетнаяЗапись.СерверИсходящейПочтыSMTP;
		Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
		
		Если      УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3 Тогда
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			Профиль.ПользовательSMTP   = УчетнаяЗапись.Пользователь;
			Профиль.ПарольSMTP         = УчетнаяЗапись.Пароль;
		ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
			
			Если      УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.CramMD5 Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.CramMD5;
			ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.Login Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
			ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.Plain Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Plain;
			ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.БезАутентификации Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			Иначе
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			КонецЕсли;
			
			Профиль.ПользовательSMTP = УчетнаяЗапись.ПользовательSMTP;
			Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
			
		ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.POP3ПередSMTP Тогда
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			Профиль.POP3ПередSMTP = Истина;
		Иначе
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормироватьPOP3Профиль Тогда
		Профиль.АдресСервераPOP3 = УчетнаяЗапись.СерверВходящейПочтыPOP3;
		Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
		
		Если      УчетнаяЗапись.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.APOP Тогда
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.APOP;
		ИначеЕсли УчетнаяЗапись.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.CramMD5 Тогда
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.CramMD5;
		Иначе
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции

Функция ОтправитьПочту(Профиль, Письмо)
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль);
	Соединение.Послать(Письмо);
	Соединение.Отключиться();
	Возврат Письмо;
КонецФункции







// Работа с хранилищем настроек


Функция КонструкторСтруктурыНастроекФормы()

	Настройки = Новый Структура;
	Настройки.Вставить("СписокПользователей");
	Настройки.Вставить("ОрганизацииДляРасчета");
	Настройки.Вставить("УчетнаяЗапись");
	Настройки.Вставить("ДополнительныеАдреса");
	
	Возврат Настройки;

КонецФункции // КонструкторСтруктурыНасроек()

// Проверка корректности заполнения настроек
//
Процедура ПроверитьЗаполнениеСписокПользователей(Отказ)
		
	Для каждого СтрокаТч Из СписокПользователей Цикл
		
		Идентификатор = СтрокаТч.НомерСтроки-1;
		
		Если СтрокаТч.Пользователь.Пустая() Тогда
			ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"Объект.СписокПользователей[%1].Пользователь",
							Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
												НСтр("ru='Для продолжения заполнения списка необходимо выбрать пользователя'"),
												,
												ИмяРеквизита,
												,
												Отказ);
		КонецЕсли;
											
		Если ПустаяСтрока(СтрокаТч.ЧастотаОтправки) Тогда
			ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"Объект.СписокПользователей[%1].ЧастотаОтправки",
							Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
												НСтр("ru='Для продолжения заполнения списка необходимо установить частоту расслыки'"),
												,
												ИмяРеквизита,
												,
												Отказ);
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры // ПроверкаНовойСтрокиСписокПользователей()

Процедура ПроверитьПравильностьНастроекРегламетногоЗадания(Отказ)

	Если ОрганизацииДляРасчета.Количество()=0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения регламентного задания: Регл. рассылка просроченной дебиторки'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо выбрать хотя бы одну организацию для расчета пени в настройках'"));
		Отказ=Истина;
	КонецЕсли;
	
	Если СегментыПартнеров.Количество()=0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения регламентного задания: Регл. рассылка просроченной дебиторки'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо выбрать хотя бы один сегмент партнеров в настройках'"));
		Отказ=Истина;
	КонецЕсли;
	
	Если УчетнаяЗапись.Пустая() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения регламентного задания: Регл. рассылка просроченной дебиторки'")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо указать учетную запись электронной почты для выполнения расылки в настройках'"));
		Отказ=Истина;
	КонецЕсли;


КонецПроцедуры
 





// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.1.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. рассылка просроченной дебиторки [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. рассылка просроченной дебиторки [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Настройки рассылки просроченной дебиторки", "Форма", "ОткрытиеФормы", Ложь, "НРПД");
	ДобавитьКоманду(ТаблицаКоманд, "Регл. рассылка просроченной дебиторки [" + Версия + "]", "ВыполнитьРассылку();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры