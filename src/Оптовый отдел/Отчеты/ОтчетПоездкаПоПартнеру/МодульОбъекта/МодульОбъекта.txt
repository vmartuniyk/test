#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
		
	СпиокТестов = Новый Массив;
	СпиокТестов.Добавить("Тест_ПроверкаКомпоновкиПриВыгрузке");
	
	Возврат СпиокТестов;
	
КонецФункции

Процедура Тест_ПроверкаКомпоновкиПриВыгрузке() Экспорт
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных" , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоДня", ТекущаяДата());
  		
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывод = ИспользованиеВывода.Разрешить;
	СкомпоноватьРезультат(ТабДок);
	 	
КонецПроцедуры

#КонецОбласти

#Область ПрограмныйИнтерфейс

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
		
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыДанных = НастройкиКомпоновкиДанных.ПараметрыДанных;
	
	НаборДанныех = ПолучитьНаборДанных(ПараметрыДанных);
	СтруктураНабораДанных = Новый Структура;
	СтруктураНабораДанных.Вставить("Отчет", НаборДанныех);
	 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, СтруктураНабораДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуриИФункции

Функция ПолучитьНаборДанных(ПараметрыДанных)
	
	
	
	Запрос 		 	= Новый Запрос;
	ТекстЗапроса 	= ПолучитьТекстЗапросаНаборДанных();
	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ОтделОптовыхПродаж", Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f508-3ffd-11e0-9f98-001517115d85")));

	
	Для Каждого Элемент Из ПараметрыДанных.Элементы Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			Запрос.УстановитьПараметр(Строка(Элемент.Параметр), Элемент.Значение.Дата);
		Иначе
			Запрос.УстановитьПараметр(Строка(Элемент.Параметр), Элемент.Значение);	
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПоездкаЗаМаршрутомФинансы.ДокументПоездки КАК ДокументПоездки,
	               |	ПоездкаЗаМаршрутомФинансы.Партнер КАК Партнер,
	               |	ЕСТЬNULL(ПоездкаЗаМаршрутом.МестоДоставки, ЗНАЧЕНИЕ(Справочник.МестаДоставки.ПустаяСсылка)) КАК МестоДоставки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0) = 1
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0) <> 0
	               |				И ЕСТЬNULL(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0) <> 1
	               |			ТОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером
	               |		ИНАЧЕ ПоездкаЗаМаршрутомФинансы.СуммаУчета
	               |	КОНЕЦ КАК СуммаКОплате,
	               |	ПоездкаЗаМаршрутомФинансы.Партнер.ОсновнойМенеджер КАК ОсновнойМенеджер
	               |ПОМЕСТИТЬ ПартнерыКОплате
	               |ИЗ
	               |	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
	               |		ПО ПоездкаЗаМаршрутомФинансы.ДокументПоездки = ПоездкаЗаМаршрутом.ДокументПоездки
	               |			И (ПоездкаЗаМаршрутомФинансы.Партнер = (ВЫРАЗИТЬ(ПоездкаЗаМаршрутом.Owner КАК Справочник.Партнеры)))
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ПоездкаЗаМаршрутом.ДокументПоездки.Дата, ДЕНЬ) = &НачалоДня
	               |	И НЕ ПоездкаЗаМаршрутом.ДокументПоездки.ПометкаУдаления
	               |	И ПоездкаЗаМаршрутом.ДокументПоездки.Проведен
	               |	И ПоездкаЗаМаршрутом.Owner ССЫЛКА Справочник.Партнеры
	               |	И ПоездкаЗаМаршрутомФинансы.Партнер.ОсновнойМенеджер.ТекущееПодразделение = &ОтделОптовыхПродаж
				   |    И НЕ ПоездкаЗаМаршрутом.ИсключеноИзДоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоездкаЗаМаршрутом.ДокументПоездки КАК ДокументПоездки,
	               |	ПоездкаЗаМаршрутом.МестоДоставки КАК МестоДоставки
	               |ПОМЕСТИТЬ ПоездкиЗаСегодня
	               |ИЗ
	               |	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ПоездкаЗаМаршрутом.ДокументПоездки.Дата, ДЕНЬ) = &НачалоДня
	               |	И НЕ ПоездкаЗаМаршрутом.ДокументПоездки.ПометкаУдаления
	               |	И ПоездкаЗаМаршрутом.ДокументПоездки.Проведен
	               |	И ПоездкаЗаМаршрутом.Owner ССЫЛКА Справочник.Партнеры
	               |	И ВЫРАЗИТЬ(ПоездкаЗаМаршрутом.Owner КАК Справочник.Партнеры).ОсновнойМенеджер.ТекущееПодразделение = &ОтделОптовыхПродаж
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоездкиЗаСегодня.ДокументПоездки,
	               |	ПоездкиЗаСегодня.МестоДоставки,
	               |	ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары) КАК Документ
	               |ПОМЕСТИТЬ МестаПоДокументам
	               |ИЗ
	               |	ПоездкиЗаСегодня КАК ПоездкиЗаСегодня
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	               |		ПО ПоездкиЗаСегодня.МестоДоставки = МестаПоДокументам.Место
	               |ГДЕ
	               |	МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МестаПоДокументам.ДокументПоездки,
	               |	МестаПоДокументам.МестоДоставки,
	               |	МестаПоДокументам.Документ.Распоряжение КАК ДокументРеализации,
	               |	РасходныйОрдерНаТоварыТовары.Номенклатура,
	               |	РасходныйОрдерНаТоварыТовары.КоличествоУпаковок
	               |ПОМЕСТИТЬ ОтгруженаНоменклатура
	               |ИЗ
	               |	МестаПоДокументам КАК МестаПоДокументам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	               |		ПО МестаПоДокументам.Документ = РасходныйОрдерНаТоварыТовары.Ссылка
	               |ГДЕ
	               |	РасходныйОрдерНаТоварыТовары.НеОтгружать = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтгруженаНоменклатура.ДокументПоездки,
	               |	ОтгруженаНоменклатура.МестоДоставки,
	               |	ОтгруженаНоменклатура.ДокументРеализации,
	               |	ОтгруженаНоменклатура.Номенклатура,
	               |	МАКСИМУМ(ОтгруженаНоменклатура.КоличествоУпаковок) КАК КоличествоУпаковок,
	               |	СРЕДНЕЕ(РТУТовары.Цена) КАК Цена
	               |ПОМЕСТИТЬ ЦенаТовараСДокументаПродаж
	               |ИЗ
	               |	ОтгруженаНоменклатура КАК ОтгруженаНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РТУТовары
	               |		ПО ОтгруженаНоменклатура.ДокументРеализации = РТУТовары.Ссылка
	               |			И ОтгруженаНоменклатура.Номенклатура = РТУТовары.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтгруженаНоменклатура.ДокументПоездки,
	               |	ОтгруженаНоменклатура.МестоДоставки,
	               |	ОтгруженаНоменклатура.ДокументРеализации,
	               |	ОтгруженаНоменклатура.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПартнерыКОплате.ДокументПоездки,
	               |	ПартнерыКОплате.МестоДоставки,
	               |	ПартнерыКОплате.Партнер,
	               |	ПартнерыКОплате.СуммаКОплате,
	               |	ПартнерыКОплате.ОсновнойМенеджер,
	               |	ЕСТЬNULL(ЦенаТовараСДокументаПродаж.ДокументРеализации, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК ДокументРеализации,
	               |	ЕСТЬNULL(ЦенаТовараСДокументаПродаж.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	               |	ЕСТЬNULL(ЦенаТовараСДокументаПродаж.КоличествоУпаковок, 0) КАК Количество,
	               |	ЕСТЬNULL(ЦенаТовараСДокументаПродаж.Цена, 0) КАК Цена,
	               |	ЕСТЬNULL(ЦенаТовараСДокументаПродаж.ДокументПоездки.Водитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Водитель,
	               |	ЕСТЬNULL(ЦенаТовараСДокументаПродаж.ДокументПоездки.ВариантМаршрута, ЗНАЧЕНИЕ(Справочник.ВариантыМаршрутов.ПустаяСсылка)) КАК ВариантМаршрута
	               |ИЗ
	               |	ПартнерыКОплате КАК ПартнерыКОплате
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЦенаТовараСДокументаПродаж КАК ЦенаТовараСДокументаПродаж
	               |		ПО ПартнерыКОплате.ДокументПоездки = ЦенаТовараСДокументаПродаж.ДокументПоездки
	               |			И (ВЫБОР
	               |				КОГДА ПартнерыКОплате.МестоДоставки = ЗНАЧЕНИЕ(Справочник.МестаДоставки.ПустаяСсылка)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ПартнерыКОплате.МестоДоставки = ЦенаТовараСДокументаПродаж.МестоДоставки
	               |			КОНЕЦ)";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СведенияОВнешнемОтчете

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.7";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Отчет поездка по партнеру");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "Отчет поездка по партнеру");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Отчет поездка по партнеру", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

#КонецОбласти
