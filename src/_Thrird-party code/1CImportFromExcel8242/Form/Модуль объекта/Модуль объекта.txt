//////////////////////////////////////////////////////////////////////
// Необходим установленный MS Office/LibreOffice.
// ADODB: Для 64-bit возможно необходимо установить:
// Office Microsoft Access Database Engine 2010 Redistributable.
//
// Недопустимые символы в именах колонок " ~`!@""#№$;%^:&?*()-+=/\|.,"
//
          
// Получить список, содержащий имена листов книги Excel (формат Excel 97-2010) или Пустой СписокЗначений.
// <ИмяФайла> - полное имя файла (путь к файлу с именем файла и расширением)
// <Список> содержит СписокЗначений, с именами листов в файле, например: Лист1$, Лист2$, Лист3$.
&НаСервере
Функция ФайлExcelПолучитьСписокЛистов(ФайлИсходныхДанных) Экспорт
	
	СписокЛистов = Новый СписокЗначений;
	
	Файл = Новый Файл(ФайлИсходныхДанных);
	Если ВРег(Файл.Расширение) = ".XLS" ИЛИ ВРег(Файл.Расширение) = ".XLSX" Тогда
		
		Если ЭтотОбъект.ПодключениеADODB = "" ИЛИ ЭтотОбъект.ПодключениеADODB = "MicrosoftJetOLEDB40" Тогда
			СтрокаСоединения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлИсходныхДанных) + ";Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;""";
			//СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq="    + СокрЛП(ФайлИсходныхДанных) + ";";
		Иначе
			СтрокаСоединения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлИсходныхДанных) + ";Extended Properties=""Excel 12.0;HDR=NO;IMEX=1;""";
			//СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq="    + СокрЛП(ФайлИсходныхДанных) + ";";
		КонецЕсли;
		
		Попытка
			ADOConnection = Новый COMОбъект("ADODB.Connection");
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Новый СписокЗначений;
		КонецПопытки;
		
		Попытка
			ADOConnection.Open(СтрокаСоединения); 
			// получаем recordset, содержащий схему таблиц базы даннных
			// поля таблицы-схемы: TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE, TABLE_GUID, DESCRIPTION, TABLE_PROPID, DATE_CREATED, DATE_MODIFIED
			// из них заполнены: TABLE_NAME, TABLE_TYPE 
			adSchemaTables = 20;
			SchemaRecordset = ADOConnection.OpenSchema(adSchemaTables); 
			Пока SchemaRecordset.EOF() = 0 Цикл
				ИмяЛиста = SchemaRecordset.Fields("TABLE_NAME").Value;
				Если ИмяЛиста = "Excel_BuiltIn_Database" Тогда
					SchemaRecordset.MoveNext();
					Продолжить;
				КонецЕсли;
				СписокЛистов.Вставить(0, Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-1));
				SchemaRecordset.MoveNext();
			КонецЦикла;  
		Исключение
			Сообщить(ИнформацияОбОшибке());
			Возврат Новый СписокЗначений;
		КонецПопытки;
		
	Иначе
		
		Попытка
			СОМОбъектТипаExcel = Новый COMОбъект("com.sun.star.ServiceManager");
		Исключение
			Сообщить(ИнформацияОбОшибке());
			Возврат Новый СписокЗначений;
		КонецПопытки;
		
		РабочийСтол = СОМОбъектТипаExcel.createInstance("com.sun.star.frame.Desktop");
		
		Свойства = СОМОбъектТипаExcel.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
		Свойства.Name = "AsFile";
		Свойства.Value = Истина;
		Аргументы = Новый COMSafeArray("VT_VARIANT", 2);
		Аргументы.SetValue(0, Свойства);
		
		Свойства1 = СОМОбъектТипаExcel.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
		Свойства1.Name 	= "Hidden";
		Свойства1.Value = Истина;
		Аргументы.SetValue(1, Свойства1);
		
		Книга = РабочийСтол.LoadComponentFromURL(ConvertToURL(ФайлИсходныхДанных), "_blank", 0, Аргументы);
		
		Листы = Книга.getSheets(); 
		Всего = Листы.getCount();
		
		Для ит = 0 ПО Всего-1 Цикл
			ИмяЛиста = Листы.getByIndex(ит).Name;
			СписокЛистов.Добавить(ИмяЛиста);
		КонецЦикла;
		
		// Закроем Книгу и LibreOffice.
		Книга.close(Истина);
		
		РабочийСтол.terminate();
		РабочийСтол = Неопределено;
		СОМОбъектТипаExcel = Неопределено;
		
	КонецЕсли;
	
	Возврат СписокЛистов;
	
КонецФункции

// Методом "Microsoft ADODB".
//
&НаСервере
Функция ЗагрузитьМетодом_MSADODB(ФайлИсходныхДанных, НомерЛиста, СтрокаЗаголовкаИсходныхДанных = 1, НачальнаяСтрокаИсходныхДанных = 0, КонечнаяСтрокаИсходныхДанных = 0, КоличествоСтрокExcel) Экспорт
	
	Если ЭтотОбъект.ПодключениеADODB = "" ИЛИ ЭтотОбъект.ПодключениеADODB = "MicrosoftJetOLEDB40" Тогда
		СтрокаСоединения = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлИсходныхДанных) + ";Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;""";
		//СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq="    + СокрЛП(ФайлИсходныхДанных) + ";";
	Иначе
		СтрокаСоединения = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлИсходныхДанных) + ";Extended Properties=""Excel 12.0;HDR=NO;IMEX=1;""";
		//СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq="    + СокрЛП(ФайлИсходныхДанных) + ";";
	КонецЕсли;
	
	Попытка
		СОМОбъектТипаExcel = Новый COMОбъект("ADODB.Connection");
		СОМОбъектТипаExcel.ConnectionString =  СтрокаСоединения;
		СОМОбъектТипаExcel.Open();
	Исключение
		Сообщить ("Невозможно создать подключение ADODB.Connection.");
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	СОМОбъектТипаExcel.CursorLocation = 3;						// По-умолчанию 2.
	
	ТекстЗапроса = "SELECT * FROM [" + НомерЛиста + "$]";
	
	Попытка
		Recordset = Новый COMОбъект("ADODB.Recordset");
		Recordset.Open(ТекстЗапроса, СОМОбъектТипаExcel);
	Исключение
		Сообщить ("Невозможно создать подключение ADODB.Recordset.");
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	Recordset.AbsolutePage = 1;
	Recordset.AbsolutePosition = 1;
	
	ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
	
	ТаблицаИсходныхДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаИсходныхДанных.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"));
	
	Для Счетчик = 1 ПО Recordset.Fields.Count Цикл
		
		Поле = Recordset.Fields.Item(Счетчик - 1);
		
		Если Поле.ActualSize = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = ТаблицаИсходныхДанных.Колонки.Добавить("К_" + Счетчик, , Поле.Name);
		
	КонецЦикла;
	
	КолвоКолонок = Recordset.Fields.Count;
	
	КолвоСтрок  = Recordset.RecordCount;	// Верно при Recordset.AbsolutePage = 1 и СОМОбъектТипаExcel.CursorLocation = 3.
	
	КоличествоСтрокExcel = КолвоСтрок;
	
	НомерСтроки = 0;
	Пока Recordset.EOF() = 0 Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки <= СтрокаЗаголовкаИсходныхДанных Тогда		// Строка-Заголовок.
		
			НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			
			Для Счетчик = 1 По Recordset.Fields.Count Цикл
				
				Поле = Recordset.Fields.Item(Счетчик - 1);
				
				Если Поле.ActualSize = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяКолонки = "К_" + Счетчик;
				Если ТаблицаИсходныхДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока["К_" + Счетчик] = Поле.Value;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НомерСтроки < НачальнаяСтрокаИсходныхДанных Тогда
			Recordset.MoveNext();
			Продолжить;
		КонецЕсли;
		
		Если КонечнаяСтрокаИсходныхДанных > 0 И НомерСтроки > КонечнаяСтрокаИсходныхДанных Тогда
			Прервать;
		КонецЕсли;
		
	    // ТаблицаЗначений. Строки Диапазона.
		
		НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		Для Счетчик = 1 ПО Recordset.Fields.Count Цикл
			
			Поле = Recordset.Fields.Item(Счетчик - 1);
				
			Если Поле.ActualSize = 0 Тогда
				Продолжить;
			КонецЕсли;
				
			ИмяКолонки = "К_" + Счетчик;
			Если ТаблицаИсходныхДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//ЗначениеЯчейки = СокрЛП(Строка(Поле.Value));
			ЗначениеЯчейки = Поле.Value;
			НоваяСтрока["К_" + Счетчик] = ЗначениеЯчейки;
			ТаблицаИсходныхДанных.Колонки[ИмяКолонки].Ширина = ?(ТаблицаИсходныхДанных.Колонки[ИмяКолонки].Ширина < СтрДлина(СокрЛП(ЗначениеЯчейки)), СтрДлина(СокрЛП(ЗначениеЯчейки)), ТаблицаИсходныхДанных.Колонки[ИмяКолонки].Ширина);
				
		КонецЦикла;
		
		// Обработка следующая строка.
		Recordset.MoveNext();
		
	КонецЦикла;
	
	// Завершение работы
	
	Recordset.Close();
	СОМОбъектТипаExcel.Close();
	Recordset = Неопределено;
	СОМОбъектТипаExcel = Неопределено;
	
	Возврат ТаблицаИсходныхДанных;
	
КонецФункции

// Методом "Microsoft Excel".
//
&НаСервере
Функция ЗагрузитьМетодом_MSExcel(ФайлИсходныхДанных, НомерЛиста, СтрокаЗаголовкаИсходныхДанных = 1, НачальнаяСтрокаИсходныхДанных = 0, КонечнаяСтрокаИсходныхДанных = 0, КоличествоСтрокExcel) Экспорт

	Попытка
		Если ПоказыватьСообщения Тогда
			Сообщить("Инициализация ""MS Excel"".");
		КонецЕсли;
		
		СОМОбъектТипаExcel = Новый COMОбъект("Excel.Application");
		СОМОбъектТипаExcel.Visible       = Ложь;
		СОМОбъектТипаExcel.DisplayAlerts = Ложь;
		
		Если ПоказыватьСообщения Тогда
			Сообщить("""MS Excel"" инициализирован.");
		КонецЕсли;
		
		ТипСОМОбъекта = "MSOffice";
	Исключение
		Сообщить(ИнформацияОбОшибке());
		Сообщить("""MS Excel"" не инициализирован.");
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	Книга = СОМОбъектТипаExcel.WorkBooks.Open(ФайлИсходныхДанных);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("""MS Excel"" Книга """ + ФайлИсходныхДанных + """ открыта.");
	КонецЕсли;
	
	Всего = Книга.Sheets.Count;
	Если НомерЛиста > Всего Тогда
		Сообщить("№ выбранного листа: " + НомерЛиста + ", а всего в книге " + Всего + " листов.");
		НомерЛиста = 1;
		
		Книга.Close();
		Если ПоказыватьСообщения Тогда
			Сообщить("""MS Excel"" Книга """ + ФайлИсходныхДанных + """ закрыта.");
		КонецЕсли;
		
		СОМОбъектТипаExcel.Application.Quit();
		СОМОбъектТипаExcel = Неопределено;
		Если ПоказыватьСообщения Тогда
			Сообщить("""MS Excel"" закрыт.");
		КонецЕсли;
		
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Лист = Книга.WorkSheets(НомерЛиста);
	
	ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
	
	ТаблицаИсходныхДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаИсходныхДанных.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"));
	
	НачальнаяКолонка	= 1;
	НачальнаяСтрока 	= 1;
	//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
	Версия = Лев(СОМОбъектТипаExcel.Version,Найти(СОМОбъектТипаExcel.Version,".")-1);
	Если Версия = "8" тогда
    	КонечнаяКолонка	= Лист.Cells.CurrentRegion.Columns.Count;
    	КонечнаяСтрока	= Лист.Cells.CurrentRegion.Rows.Count;
	Иначе
    	КонечнаяКолонка	= Лист.Cells.SpecialCells(11).Column;   
    	КонечнаяСтрока	= Лист.Cells.SpecialCells(11).Row;
	Конецесли;
	
	КоличествоСтрокExcel= КонечнаяСтрока;
	
	НачальнаяСтрока 	= ?(НачальнаяСтрокаИсходныхДанных = 0	, НачальнаяСтрока	, НачальнаяСтрокаИсходныхДанных);
	КонечнаяСтрока		= ?(КонечнаяСтрокаИсходныхДанных = 0	, КонечнаяСтрока	, КонечнаяСтрокаИсходныхДанных);
	
	КонечнаяСтрока		= ?(КонечнаяСтрока > КоличествоСтрокExcel, КоличествоСтрокExcel, КонечнаяСтрока);
	НачальнаяСтрока		= ?(НачальнаяСтрока > КоличествоСтрокExcel, КоличествоСтрокExcel, НачальнаяСтрока);
	
	// ТаблицаЗначений. Диапазон значений.
	Диапазон = Лист.Range(Лист.Cells(НачальнаяСтрока, НачальнаяКолонка), Лист.Cells(КонечнаяСтрока, КонечнаяКолонка));
	СтрокДиапазона = Диапазон.Rows.Count;
	
	// ТаблицаЗначений. Имена колонок.
	МассивИменКолонок = Новый Массив;
	Для ит = 1 ПО КонечнаяКолонка Цикл
		
		ТекИмя = Сред(Диапазон.Columns(ит).Address, 2);
		ПозДоллар = Найти(ТекИмя, "$");
		ТекИмя = Лев(ТекИмя, ПозДоллар-1);
		
		МассивИменКолонок.Добавить(ТекИмя);
		
		Если Диапазон.Columns(ит).Hidden Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКол = "К_" + ТекИмя;
		
		ТаблицаИсходныхДанных.Колонки.Добавить(ИмяКол, Новый ОписаниеТипов);
	
	КонецЦикла;
	
    // ТаблицаЗначений. Диапазон Строка-Заголовок.
	Диапазон_З = Лист.Range(Лист.Cells(СтрокаЗаголовкаИсходныхДанных, НачальнаяКолонка), Лист.Cells(СтрокаЗаголовкаИсходныхДанных, КонечнаяКолонка));
	
	НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
	НоваяСтрока.НомерСтроки = 1;
	
	ит = -1;
	тмпПростойМассив = Диапазон_З.Value.Выгрузить();
	Для Каждого Массив ИЗ тмпПростойМассив Цикл
		
		Для Каждого ЭлементМассива ИЗ массив Цикл
			ит = ит + 1;
			ИмяКол = "К_" + МассивИменКолонок[ит];
			Если ТаблицаИсходныхДанных.Колонки.Найти(ИмяКол) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока[ИмяКол] = СокрЛП(ЭлементМассива);
		КонецЦикла;
		
	КонецЦикла;
	
    // ТаблицаЗначений. Строки Диапазона.

	нСтроки = НачальнаяСтрока-1;
	
	Диапазон = Диапазон.Value;
	
	Для НомерСтроки = 1 ПО СтрокДиапазона Цикл
		
		нСтроки = нСтроки + 1;
		НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
		НоваяСтрока.НомерСтроки = нСтроки;

		Для НомерКолонки = 1 По КонечнаяКолонка Цикл
			ИмяКол = "К_" + МассивИменКолонок[НомерКолонки-1];
			Если ТаблицаИсходныхДанных.Колонки.Найти(ИмяКол) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЯчейки = СокрЛП(Диапазон.GetValue(НомерКолонки, НомерСтроки));
			
			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				ТаблицаИсходныхДанных.Колонки[ИмяКол].Ширина = ?(ТаблицаИсходныхДанных.Колонки[ИмяКол].Ширина < СтрДлина(СокрЛП(ЗначениеЯчейки))+2, СтрДлина(СокрЛП(ЗначениеЯчейки))+2, ТаблицаИсходныхДанных.Колонки[ИмяКол].Ширина);
				НоваяСтрока[ИмяКол] = ЗначениеЯчейки;
			Иначе	
				НоваяСтрока[ИмяКол] = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
    
    Если КонечнаяКолонка > 99 Тогда
    	Сообщить("КонечнаяКолонка: " + КонечнаяКолонка + ". У Вас действительно так много колонок в Файле исходных данных ?!");
    КонецЕсли;
    
    УдалитьКолонкиСНулевойШириной(ТаблицаИсходныхДанных);
    
    // Закроем MS Officce.
	
	Книга.Close();
	Если ПоказыватьСообщения Тогда
		Сообщить("""MS Excel"" Книга """ + ФайлИсходныхДанных + """ закрыта.");
	КонецЕсли;
	
	СОМОбъектТипаExcel.Application.Quit();
	СОМОбъектТипаExcel = Неопределено;
	Если ПоказыватьСообщения Тогда
		Сообщить("""MS Excel"" Закрыт.");
	КонецЕсли;

	Возврат ТаблицаИсходныхДанных;
	
КонецФункции

// Методом "LibreOffice Calc".
//
&НаСервере
Функция ЗагрузитьМетодом_LOCalc(ФайлИсходныхДанных, НомерЛиста, СтрокаЗаголовкаИсходныхДанных = 1, НачальнаяСтрокаИсходныхДанных = 0, КонечнаяСтрокаИсходныхДанных = 0, КоличествоСтрокExcel) Экспорт

	Попытка
		Если ПоказыватьСообщения Тогда
			Сообщить("Инициализация ""LibreOffice Calc"".");
		КонецЕсли;
		
		СОМОбъектТипаExcel = Новый COMОбъект("com.sun.star.ServiceManager");
		
		Если ПоказыватьСообщения Тогда
			Сообщить("""LibreOffice Calc"" инициализирован.");
		КонецЕсли;
		
		ТипСОМОбъекта = "LibreOffice";
	Исключение
		Сообщить(ИнформацияОбОшибке());
		Сообщить("""LibreOffice Calc"" не инициализирован.");
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	РабочийСтол = СОМОбъектТипаExcel.createInstance("com.sun.star.frame.Desktop");
	
	Свойства = СОМОбъектТипаExcel.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Если Найти(ВРег(ФайлИсходныхДанных), ".ODS") > 0 ИЛИ Найти(ВРег(ФайлИсходныхДанных), ".SXC") > 0 Тогда
		Свойства.Name = "AsFile";
	Иначе
		Свойства.Name = "AsTemplate";
	КонецЕсли;
	Свойства.Value = Истина;
	Аргументы = Новый COMSafeArray("VT_VARIANT", 2);
	Аргументы.SetValue(0, Свойства);
	
	Свойства1 = СОМОбъектТипаExcel.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства1.Name 	= "Hidden";
	Свойства1.Value = Истина;
	Аргументы.SetValue(1, Свойства1);
	
	Книга = РабочийСтол.LoadComponentFromURL(ConvertToURL(ФайлИсходныхДанных), "_blank", 0, Аргументы);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("""LibreOffice Calc"" Книга """ + ФайлИсходныхДанных + """ открыта.");
	КонецЕсли;
	
	Листы = Книга.getSheets(); 
	Всего = Листы.getCount();
	
	Если НомерЛиста > Всего Тогда
		Сообщить("№ выбранного листа: " + НомерЛиста + ", а всего в книге " + Всего + " листов.");
		НомерЛиста = 1;
		
		Книга.close(Истина);
		Если ПоказыватьСообщения Тогда
			Сообщить("""LibreOffice Calc"" Книга """ + ФайлИсходныхДанных + """ закрыта.");
		КонецЕсли;
		
		РабочийСтол.terminate();
		РабочийСтол = Неопределено;
		СОМОбъектТипаExcel = Неопределено;
		Если ПоказыватьСообщения Тогда
			Сообщить("""LibreOffice Calc"" закрыт.");
		КонецЕсли;
		
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	Лист = Листы.getByIndex(НомерЛиста-1); 
	
	Курсор = Лист.createCursor();
	Курсор.gotoEndOfUsedArea(Истина);
	
	ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
	
	ТаблицаИсходныхДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаИсходныхДанных.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"));
	
	// ТаблицаЗначений.Колонки.
	НачальнаяКолонка	= 0;
	НачальнаяСтрока 	= 0;
	КонечнаяКолонка		= Курсор.Columns.Count - 1;
	КонечнаяСтрока		= Курсор.Rows.Count - 1;
	
	КоличествоСтрокExcel= КонечнаяСтрока+1;
	
	НачальнаяСтрока 	= ?(НачальнаяСтрокаИсходныхДанных = 0	, НачальнаяСтрока	, НачальнаяСтрокаИсходныхДанных);
	КонечнаяСтрока		= ?(КонечнаяСтрокаИсходныхДанных = 0	, КонечнаяСтрока	, КонечнаяСтрокаИсходныхДанных);
	
	КонечнаяСтрока		= ?(КонечнаяСтрока > КоличествоСтрокExcel-1, КоличествоСтрокExcel-1, КонечнаяСтрока);
	НачальнаяСтрока		= ?(НачальнаяСтрока > КоличествоСтрокExcel-1, КоличествоСтрокExcel-1, НачальнаяСтрока);
	
	// ТаблицаЗначений.Строки.
	Диапазон = Лист.getCellRangeByPosition(НачальнаяКолонка, НачальнаяСтрока, КонечнаяКолонка, КонечнаяСтрока);
	СтрокДиапазона = Диапазон.Rows.Count;
	
	МассивИменКолонок = Новый Массив;
	Для ит = 1 ПО КонечнаяКолонка+1 Цикл
		
		ТекИмя = Диапазон.Columns.getbyindex(ит-1).Name;
		МассивИменКолонок.Добавить(ТекИмя);
		
		Если НЕ Диапазон.Columns.getbyindex(ит-1).isVisible Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКол = "К_" + ТекИмя;
		
		ТаблицаИсходныхДанных.Колонки.Добавить(ИмяКол, Новый ОписаниеТипов);
	
	КонецЦикла;
	
	нСтроки = 0;
	// ТаблицаЗначений. Строка-Заголовок.
	Диапазон_З = Лист.getCellRangeByPosition(0, 0, КонечнаяКолонка, СтрокаЗаголовкаИсходныхДанных);
	
	МассивКом = Новый COMSafeArray("VT_VARIANT", Диапазон_З.Columns.Count, Диапазон.Rows.Count);
	МассивКом = Диапазон_З.getDataArray();
	
	тмпПростойМассив = МассивКом.Выгрузить();
	Для Каждого Массив ИЗ тмпПростойМассив Цикл
		
		нСтроки = нСтроки + 1;
		НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
		НоваяСтрока.НомерСтроки = нСтроки;
		
		ит = -1;
		Для Каждого ЭлементМассива ИЗ массив Цикл
			ит = ит + 1;
			ИмяКол = "К_" + МассивИменКолонок[ит];
			Если ТаблицаИсходныхДанных.Колонки.Найти(ИмяКол) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока[ИмяКол] = СокрЛП(ЭлементМассива);
		КонецЦикла;
			
	КонецЦикла;
	
	// ТаблицаЗначений. Строки Диапазона.
	
	нСтроки = НачальнаяСтрока;
	
	МассивКом = Новый COMSafeArray("VT_VARIANT", Диапазон.Columns.Count, Диапазон.Rows.Count);
	МассивКом = Диапазон.getDataArray();
  
	тмпПростойМассив = МассивКом.Выгрузить();
	Для Каждого Массив ИЗ тмпПростойМассив Цикл
		
		нСтроки = нСтроки + 1;
		НоваяСтрока = ТаблицаИсходныхДанных.Добавить();
		НоваяСтрока.НомерСтроки = нСтроки;
		
		ит = -1;
		Для Каждого ЭлементМассива ИЗ Массив Цикл
			ит = ит + 1;
			ИмяКол = "К_" + МассивИменКолонок[ит];
			Если ТаблицаИсходныхДанных.Колонки.Найти(ИмяКол) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементМассива) Тогда
				ТаблицаИсходныхДанных.Колонки[ИмяКол].Ширина = ?(ТаблицаИсходныхДанных.Колонки[ИмяКол].Ширина < СтрДлина(СокрЛП(ЭлементМассива)), СтрДлина(СокрЛП(ЭлементМассива)), ТаблицаИсходныхДанных.Колонки[ИмяКол].Ширина);
				НоваяСтрока[ИмяКол] = СокрЛП(ЭлементМассива);
			Иначе	
				НоваяСтрока[ИмяКол] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если КонечнаяКолонка > 99 Тогда
		Сообщить("КонечнаяКолонка: " + КонечнаяКолонка + ". У Вас действительно так много колонок в Файле исходных данных ?!");
	КонецЕсли;
	
	УдалитьКолонкиСНулевойШириной(ТаблицаИсходныхДанных);
	
	// Закроем Книгу и LibreOffice.
	Книга.close(Истина);
	Если ПоказыватьСообщения Тогда
		Сообщить("""LibreOffice Calc"" Книга """ + ФайлИсходныхДанных + """ закрыта.");
	КонецЕсли;
	
	РабочийСтол.terminate();
	РабочийСтол = Неопределено;
	СОМОбъектТипаExcel = Неопределено;
	Если ПоказыватьСообщения Тогда
		Сообщить("""LibreOffice Calc"" закрыт.");
	КонецЕсли;
	
	Возврат ТаблицаИсходныхДанных;
	
КонецФункции

// Очистить от "лишнего".
//
&НаСервере
Процедура УдалитьКолонкиСНулевойШириной(ТаблицаИсходныхДанных)
	
	// Удалим пустые колонки.
	Для Каждого Колонка ИЗ ТаблицаИсходныхДанных.Колонки Цикл
		Если Колонка.Ширина = 0 Тогда
			ТаблицаИсходныхДанных.Колонки.Удалить(Колонка);
		КонецЕсли;
	КонецЦикла;
	
	// Остались ли пустые?
	ЕстьПустые = Ложь;
	Для Каждого Колонка ИЗ ТаблицаИсходныхДанных.Колонки Цикл
		Если Колонка.Ширина = 0 Тогда
			ЕстьПустые = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Рекурсивный вызов, если остались ли пустые.
	Если ЕстьПустые Тогда
		УдалитьКолонкиСНулевойШириной(ТаблицаИсходныхДанных);
	КонецЕсли;

КонецПроцедуры

// Конвертировать имя файла для метода "LibreOffice Calc".
//
&НаСервере
функция ConvertToURL(ФайлИсходныхДанных)
	
	ФайлИсходныхДанных = СтрЗаменить(ФайлИсходныхДанных," ","%20");
	ФайлИсходныхДанных = СтрЗаменить(ФайлИсходныхДанных,"\","/");
	
	Возврат "file:/" + "/localhost/" + ФайлИсходныхДанных;
	
Конецфункции

////////////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ ОБРАБОТКИ.
// 

// Параметры сеанса выполнения Обработки (начальные).
//
&НаСервере
Функция ОбработкаПолучитьПараметрыСеанса(Форма) Экспорт
	
	ПараметрыСеансаОбработки = Новый Структура;
	ПараметрыСеансаОбработки.Вставить("ИмяОбработки"							, МетаДанные().Имя);
	ПараметрыСеансаОбработки.Вставить("СинонимОбработки"						, МетаДанные().Синоним);
	ПараметрыСеансаОбработки.Вставить("Конфигурация"							, МетаДанные.Имя);
	ПараметрыСеансаОбработки.Вставить("Версия"									, МетаДанные.Версия);
	ПараметрыСеансаОбработки.Вставить("КраткаяИнформация"						, МетаДанные.КраткаяИнформация);
	ПараметрыСеансаОбработки.Вставить("РежимСовместимости"						, Строка(МетаДанные.РежимСовместимости));	// Строка( - Для возможности передачи между Сервером и Клиентом.
	ПараметрыСеансаОбработки.Вставить("ОсновнойРежимЗапуска"					, МетаДанные.ОсновнойРежимЗапуска);
	ПараметрыСеансаОбработки.Вставить("ТекущийРежимЗапуска"						, ТекущийРежимЗапуска());
	ПараметрыСеансаОбработки.Вставить("ТонкийТолстый"							, ОбработкаПолучитьТонкийТолстый());
	ПараметрыСеансаОбработки.Вставить("ПривилегированныйРежим"					, ПривилегированныйРежим());
	ПараметрыСеансаОбработки.Вставить("СтрокаСоединенияИнформационнойБазы"		, СтрокаСоединенияИнформационнойБазы());
	ПараметрыСеансаОбработки.Вставить("ИмяФайлаОбработки"						, ЭтотОбъект.ИспользуемоеИмяФайла);
	ПараметрыСеансаОбработки.Вставить("ТекущийПользовательИБ"					, ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ПараметрыСеансаОбработки.Вставить("ПравоАдминистрирование"					, ПравоДоступа("Администрирование", Метаданные));
	ПараметрыСеансаОбработки.Вставить("ПолныеПрава"								, РольДоступна("ПолныеПрава"));
	
	// Следующие параметры должны быть последними.
	// Анализируется Параметр: "ТекущийРежимЗапуска".
	ПараметрыСеансаОбработки.Вставить("ИмяФормыНастройкиОбработки"				, ОбработкаПолучитьИмяФормыНастройкиОбработки());
	
	Возврат ПараметрыСеансаОбработки;
	
КонецФункции

// Для работы с обработкой необходимо: ПравоАдминистрирование и ПолныеПрава.
//
&НаСервере
Функция ОбработкаПроверитьПраваПользователяИРежимЗапуска() Экспорт

	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("Отказ", Ложь);
	
	Если ((ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение)
		И (ПараметрыСеансаОбработки.ТонкийТолстый = "Толстый клиент")) Тогда
		
		РезультатПроверки.ОписаниеОшибки = "Текущий режим запуска 1С:Предприятие:
		|
		|""УПРАВЛЯЕМОЕ ПРИЛОЖЕНИЕ (ТОЛСТЫЙ КЛИЕНТ)"".
		|
		|Некоторые действия могут завершаться с ошибкой.
		|
		|ЗАПУСТИТЕ ПРИЛОЖЕНИЕ В РЕЖИМЕ ТОНКОГО КЛИЕНТА.";
		
		РезультатПроверки.Отказ = Ложь;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Если (НЕ (ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение)
		И НЕ (ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение)) Тогда
		
		РезультатПроверки.ОписаниеОшибки = "Текущий режим запуска 1С:Предприятие:
		|
		|""" + ВРег(ПараметрыСеансаОбработки.ТекущийРежимЗапуска) + """.
		|
		|ВЫПОЛНЕНИЕ ОБРАБОТКИ ПРЕДУСМОТРЕНО В СЛЕДУЮЩИХ РЕЖИМАХ ЗАПУСКА 1С:ПРЕДПРИЯТИЕ:
		|
		|1. ОБЫЧНОЕ ПРИЛОЖЕНИЕ;
		|2. УПРАВЛЯЕМОЕ ПРИЛОЖЕНИЕ.
		|
		|ВОСПОЛЬЗОВАТЬСЯ ОБРАБОТКОЙ НЕВОЗМОЖНО.";
		
		РезультатПроверки.Отказ = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Если НЕ ПараметрыСеансаОбработки.ПравоАдминистрирование Тогда
		
		РезультатПроверки.ОписаниеОшибки = "ОБРАБОТКА: """ + ПараметрыСеансаОбработки.СинонимОбработки + """.
		|
		|ПОЛЬЗОВАТЕЛЬ: " + ПараметрыСеансаОбработки.ТекущийПользовательИБ + ".
		|
		|Для входа администратору ТРЕБУЕТСЯ ПРАВО: ""Администрирование"".";
		
		РезультатПроверки.Отказ = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Если НЕ ПараметрыСеансаОбработки.ПолныеПрава Тогда
		
		РезультатПроверки.ОписаниеОшибки = "ОБРАБОТКА: """ + ПараметрыСеансаОбработки.СинонимОбработки + """.
		|
		|ПОЛЬЗОВАТЕЛЬ: " + ПараметрыСеансаОбработки.ТекущийПользовательИБ + ".
		|
		|Для входа администратору ТРЕБУЕТСЯ РОЛЬ: ""Полные права"".";
		
		РезультатПроверки.Отказ = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Форма Режим запуска 1С:Предприятие.
//
&НаСервере
Функция ОбработкаПолучитьТонкийТолстый()

    ТонкийТолстый = "";
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение ИЗ МассивСоединений Цикл
		Если ТекСоединение.Пользователь.Имя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя Тогда
			Если ((ТекСоединение.ИмяПриложения = "1CV8") 
				ИЛИ (ТекСоединение.ИмяПриложения = "1CV8C")) Тогда		// Режим 1С:Предприятие ТолстыйКлиент или ТонкийКлиент.
				// ~ "ТонкийКлиент"	 = ПредставлениеПриложения("1CV8C")
				// ~ "ТолстыйКлиент" = ПредставлениеПриложения("1CV8")
				ТонкийТолстый = ПредставлениеПриложения(ТекСоединение.ИмяПриложения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТонкийТолстый;

КонецФункции

// Кнопка "Настройка". Вспомогательная.
//
&НаСервере
Функция ОбработкаПолучитьИмяФормыНастройкиОбработки()
	
	ИмяФормыНастройкиОбработки = Неопределено;
	
	Если ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ИмяФормыНастройкиОбработки = "ВнешняяОбработка.ImportExcel1C.Форма.Настройка";
	Иначе
		ИмяФормыНастройкиОбработки = "";
	КонецЕсли;
	
	Возврат ИмяФормыНастройкиОбработки;
	
КонецФункции

// Вызов из Форма.ПриСозданииНаСервере.
//
&НаСервере
Функция ОбработкаПолучитьДоступныеТипыСОМОбъекта() Экспорт
	
	ДоступныеТипыСОМОбъектов = Новый Структура;
	
	// Microsoft ADO. 
	// + Метод должен работать и в файловом и Клиент-Серверном вариантах.
	// + Как правило специальная установка не требуется.
	// - Наименее функционален из 3-х вариантов.
	// + 1-ый по скорости чтения.
	// + Выделенной цены не имеет.
	
	MessageDB = "";
	ТипСОМОбъекта = "";
	Попытка
		Если ПоказыватьСообщения Тогда
			Сообщить("Инициализация ""ADODB.Connection"".");
		КонецЕсли;
	
		СОМОбъектТипаExcel 	= Новый COMОбъект("ADODB.Connection");
		RecordSet 			= Новый COMОбъект("ADODB.Recordset");
		
		Если ПоказыватьСообщения Тогда
			Сообщить("""ADODB.Connection"" инициализирован.");
		КонецЕсли;
		
		ТипСОМОбъекта = "ADODB";
		ДоступныеТипыСОМОбъектов.Вставить(ТипСОМОбъекта, "ADODB");
		
		RecordSet = Неопределено;
		СОМОбъектТипаExcel = Неопределено;

		Если ПоказыватьСообщения Тогда
			Сообщить("Метод = " + ТипСОМОбъекта + ". Ок.");
		КонецЕсли;
		
	Исключение
		MessageDB = "Подключение ADODB невозможно.
		|Обратитесь к системному администратору.";
	КонецПопытки;
	
	// Microsoft Office.
	// - Метод может не работать в Клиент-Серверном варианте.
	// - Требуется установка программного продукта.
	// + Наиболее функционален из 3-х вариантов.
	// + 2-ой по скорости чтения.
	// - Платный.
	
	MessageMC = "";
	Если ПроверятьMSOffice Тогда
		ТипСОМОбъекта = "";
		Попытка
			Если ПоказыватьСообщения Тогда
				Сообщить("Инициализация ""MS Excel"".");
			КонецЕсли;
			
			СОМОбъектТипаExcel = Новый COMОбъект("Excel.Application");
			СОМОбъектТипаExcel.Visible       = Ложь;
			СОМОбъектТипаExcel.DisplayAlerts = Ложь;
			
			Если ПоказыватьСообщения Тогда
				Сообщить("""MS Excel"" инициализирован.");
			КонецЕсли;
			
			ТипСОМОбъекта = "MSOffice";
			ДоступныеТипыСОМОбъектов.Вставить(ТипСОМОбъекта, "" + СОМОбъектТипаExcel.Value + " " + СОМОбъектТипаExcel.Version);
			
			СОМОбъектТипаExcel.Application.Quit();
			СОМОбъектТипаExcel = Неопределено;
			
			Если ПоказыватьСообщения Тогда
				Сообщить("Метод = " + ТипСОМОбъекта + ". Ок.");
			КонецЕсли;
			
		Исключение
			MessageMC = "Программа MS Office не установлена на данном компьютере.
			|Обратитесь к системному администратору.";
		КонецПопытки;
	КонецЕсли;
	
	// Document Foundation LibreOffice. Требуется установленное ПО.
	// - Метод может не работать в Клиент-Серверном варианте.
	// - Требуется установка программного продукта.
	// - Наименее функционален из 3-х вариантов.
	// - 3-ий по скорости чтения.
	// + Бесплатен.
	
	MessageLO = "";
	Если ПроверятьLibreOffice Тогда
		ТипСОМОбъекта = "";
		Попытка
			Если ПоказыватьСообщения Тогда
				Сообщить("Инициализация ""LibreOffice Calc"".");
			КонецЕсли;
			
			СОМОбъектТипаExcel = Новый COMОбъект("com.sun.star.ServiceManager");
			РабочийСтол = СОМОбъектТипаExcel.createInstance("com.sun.star.frame.Desktop");
			
			Если ПоказыватьСообщения Тогда
				Сообщить("""LibreOffice Calc"" инициализирован.");
			КонецЕсли;
			
			ТипСОМОбъекта = "LibreOffice";
			ДоступныеТипыСОМОбъектов.Вставить(ТипСОМОбъекта, "~ LibreOffice");
			
			РабочийСтол.terminate();		// Можно и Нужно.
			РабочийСтол = Неопределено;
			СОМОбъектТипаExcel = Неопределено;
			
			Если ПоказыватьСообщения Тогда
				Сообщить("Метод = " + ТипСОМОбъекта + ". Ок.");
			КонецЕсли;
			
		Исключение
			MessageLO = "Программа LibreOffice/OpenOffice не установлена на данном компьютере.
			|Обратитесь к системному администратору.";
		КонецПопытки;
	КонецЕсли;
	
	Если ДоступныеТипыСОМОбъектов.Количество() = 0 Тогда
		Сообщить(MessageDB);
		Сообщить(MessageMC);
		Сообщить(MessageLO);
	КонецЕсли;
	
	Возврат ДоступныеТипыСОМОбъектов;
	
КонецФункции
