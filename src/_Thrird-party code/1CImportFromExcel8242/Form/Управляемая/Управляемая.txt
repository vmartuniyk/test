////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 1. Для метода "MS Excel" необходим установленный MS Office.
// 2. Для метода "LibreOffice Calc" необходим установленный LibreOffice.
// 3. Для метода "MS ADODB" необходим установленный Microsoft MDAC (Microsoft Data Access Components).
//    Как правило, установка MS MDAC не требуется. О последней версии можно узнать из справочний информации.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем КэшированныеЗначения;

// Основные действия Обработки: Создать/Изменить документы.
//
&НаКлиенте
Процедура ОсновноеДействиеПриИзменении(Элемент)
	
	ПолучитьОписаниеТиповДоступныхКОбработкеДокументовКонфигурации();			// ВСЕ ВОЗМОЖНЫЕ.
	
	Документы_Неопределено();													// Документы = Неопределено.	
	
	Если ЭтоОсновноеДействиеСоздать() Тогда

	Иначе
		
		Массив = Новый Массив;
		Массив.Добавить(Объект.СписокТиповДокументовПоступления[0].Значение);
		Объект.ТипДокумента = Новый ОписаниеТипов(Массив);						// ТОЛЬКО ОДИН - ДОКУМЕНТ ПОСТУПЛЕНИЕ.
		
		ПараметрыТипДокументаПриИзменении(Элемент);
		
		Предупреждение("Изменение документа ""Поступление"":
		|
		|1. Укажите корректируемый документ Поступления.
		|2. Проверьте в разделе ""Параметры-Опции"" фильтр по ценам.");

	КонецЕсли;
	
	ОсновноеДействиеЗаголовки();

	Объект.Таблица1С.Очистить();
	
	ФормаОпределитьДоступнностьВТаблицах();
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Заголовок пункта меню "Создать/Изменить документы" и Декорации "* Цены определены ..." для таблицы "1С".
//
&НаСервере
Процедура ОсновноеДействиеЗаголовки()
	
	Если ЭтоОсновноеДействиеСоздать() И НЕ Объект.ДокументыСозданы Тогда
		Элементы.ОМСформироватьДокументы.Заголовок = "Создать Документы";
	Иначе
		Элементы.ОМСформироватьДокументы.Заголовок = "Изменить Документы";
	КонецЕсли;
	
	Если ЭтоОсновноеДействиеСоздать() Тогда
		Элементы.ДекорацияОЦенахВТаблице1С.Заголовок = "* Цены определены на текущий момент.";
	Иначе
		Элементы.ДекорацияОЦенахВТаблице1С.Заголовок = "* Цены: ""Закупочная"" - указана по содержимому документа, ""Розничная"" - определена на дату-время документа.";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоОсновноеДействиеСоздать()
	Возврат Объект.ОсновноеДействие = "Создать";
КонецФункции

&НаСервере
Функция ЭтоОсновноеДействиеИзменить()
	Возврат Объект.ОсновноеДействие = "Изменить";
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА ОБРАБОТКИ ДЛЯ РАБОТЫ В КОНФИГУРАЦИЯХ:
// "РОЗНИЦА 2.0", "УПРАВЛЕНИЕ ТОРГОВЛЕЙ 11.0", "КОМПЛЕКСНАЯ АВТОМАТИЗАЦИЯ 1.1", "БУХГАЛТЕРИЯ ПРЕДПРИЯТИЯ 3.0".
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура СопоставлениеОбработкиИКонфигурации()
	
	ПолучитьОписаниеТиповДоступныхКОбработкеДокументовКонфигурации();
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		////////////////////////////////////////////////////////////////////////////////////
		// КОНСТАНТЫ.
		
		Объект.КонтролироватьУникальностьНоменклатурыИХарактеристик = Истина;

		Объект.ИспользоватьХарактеристикиНоменклатуры				= Константы["ИспользоватьХарактеристикиНоменклатуры"].Получить();
		
		Объект.ИспользоватьУпаковкиНоменклатуры 					= Константы["ИспользоватьУпаковкиНоменклатуры"].Получить();
		
		Объект.ИспользоватьКачествоТоваров 							= Ложь;
		
		Объект.ИспользоватьНоменклатуруПоставщиков 					= Истина;
		
		Объект.ИспользоватьЦеновыеГруппы 							= Константы["ИспользоватьЦеновыеГруппы"].Получить();
		
		Объект.ИспользоватьЗаказыПоставщикам 						= Истина;
		
		Объект.ИспользоватьГруппыДоступаНоменклатуры				= Ложь;
		
		Объект.ИспользоватьГруппыФинансовогоУчета 					= Ложь;
		
		Объект.ИспользоватьУчетСебестоимости 						= Константы["ИспользоватьУчетСебестоимости"].Получить();	// ТОЛЬКО ДЛЯ ОПРЕДЕЛЕНИЯ ВОЗМОЖНОСТИ СОЗДАНИЯ ДОУМКЕНТА "УстановкаСебестоимости".
		
		Объект.ИспользоватьКомиссиюПриЗакупках 						= Ложь;
		
		Объект.ИспользоватьИмпортныеЗакупки 						= Ложь;
		
		Объект.ИспользоватьПрочееОприходованиеТоваров 				= Ложь;
		
		// По-умолчанию устанавливаем Составное ПолноеНаименование = Наименование + Характеристика.
		Объект.СоставноеПолноеНаименование = НЕ Объект.ИспользоватьХарактеристикиНоменклатуры;
		Если Объект.СоставноеПолноеНаименование Тогда
			Объект.СоставноеПолноеНаименованиеРеквизит = "Характеристика";
			Элементы.СоставноеПолноеНаименованиеРеквизит.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// ПЕРЕЧИСЛЕНИЯ.
		
		// Реквизит ТипНоменклатуры имеет тип ПеречислениеСсылка. Уточнение.
		ОграничитьТипЭлемента("ТипНоменклатуры"						, "ПеречислениеСсылка.ТипыНоменклатуры");
		
		// Реквизит ХозяйственнаяОперация имеет тип ПеречислениеСсылка. Уточнение.
		ОграничитьТипЭлемента("ХозяйственнаяОперация"				, "ПеречислениеСсылка.ХозяйственныеОперации");
		
		////////////////////////////////////////////////////////////////////////////////////
		// СПРАВОЧНИКИ.
		
		// Реквизит АналитикаХозяйственнойОперации имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("АналитикаХозяйственнойОперации"		, "СправочникСсылка.АналитикаХозяйственныхОпераций");
		
		// Реквизит Магазин имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("Магазин"								, "СправочникСсылка.Магазины");
		
		// Реквизит ЕдиницаИзмерения имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ЕдиницаИзмерения"					, "СправочникСсылка.БазовыеЕдиницыИзмерения");
		
		// Реквизит ВидНоменклатуры имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидНоменклатуры"						, "СправочникСсылка.ВидыНоменклатуры");
		
		// Реквизит ВидЦеныЗакупочная имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидЦеныЗакупочная"					, "СправочникСсылка.ВидыЦен");
		
		// Реквизит ВидЦеныРозничная имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидЦеныРозничная"					, "СправочникСсылка.ВидыЦен");
		
		// Реквизит ВидЦеныРасчетная имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидЦеныРасчетная"					, "СправочникСсылка.ВидыЦен");
		
		// Реквизит ЦеноваяГруппа имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ЦеноваяГруппа"						, "СправочникСсылка.ЦеновыеГруппы");
		
		// Реквизит НоменклатурнаяГруппа имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("НоменклатурнаяГруппа"				, "СправочникСсылка.НоменклатурныеГруппы");
		
		// Реквизит НаборУпаковок имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("НаборУпаковок"						, "СправочникСсылка.НаборыУпаковок");
		
		// Реквизит Упаковка имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("Упаковка"							, "СправочникСсылка.УпаковкиНоменклатуры");
		
		////////////////////////////////////////////////////////////////////////////////////
		// ПЛАНЫ ВИДОВ ХАРАКТЕРИСТИК.
		
		// Реквизит ТипШтрихКода имеет составной тип ПВХ+Строка. Уточнение.
		ОграничитьТипЭлемента("ТипШтрихКода"						, "ПланВидовХарактеристикСсылка.ТипыШтрихкодов");
		
		////////////////////////////////////////////////////////////////////////////////////
		// ДОКУМЕНТЫ.
		
		// Реквизит ДокументКорректируемый имеет тип ДокументСсылка. Уточнение.
		Массив = Новый Массив;
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
		Массив.Добавить(Тип("ДокументСсылка.ОприходованиеТоваров"));
		ОграничитьТипЭлемента("ДокументКорректируемый", Массив);
		
		// Реквизит ДокументПоступление имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументПоступление"					, "ДокументСсылка.ПоступлениеТоваров");
		
		// Реквизит ДокументЗаказПоставщику имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументЗаказПоставщику"				, "ДокументСсылка.ЗаказПоставщику");	// Только для документа ПоступлениеТоваров.
		
		// Реквизит ДокументОприходование имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументОприходование"				, "ДокументСсылка.ОприходованиеТоваров");
		
		// Реквизит ДокументОснование имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументОснование"					, "ДокументСсылка.ИнвентаризацияТоваров");	// Только для документа ОприходованиеТоваров.
		
		// Реквизит ДокументУстановкаЦены имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументУстановкаЦены"				, "ДокументСсылка.УстановкаЦенНоменклатуры");
		
		// Реквизит ДокументУстановкаСебестоимости имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументУстановкаСебестоимости"		, "ДокументСсылка.УстановкаСебестоимости");
		
		////////////////////////////////////////////////////////////////////////////////////
		// ТАБЛИЦА "1С".
		
		ОграничитьТипЭлемента("Таблица1СНоменклатураПоставщика"		, "СправочникСсылка.Номенклатура");
		ОграничитьТипЭлемента("Таблица1СТипШтрихКода"				, "ПланВидовХарактеристикСсылка.ТипыШтрихкодов");
		ОграничитьТипЭлемента("Таблица1СЕдиницаИзмерения"			, "СправочникСсылка.БазовыеЕдиницыИзмерения");
		ОграничитьТипЭлемента("Таблица1СВидНоменклатуры"			, "СправочникСсылка.ВидыНоменклатуры");
		ОграничитьТипЭлемента("Таблица1СТипНоменклатуры"			, "ПеречислениеСсылка.ТипыНоменклатуры");
		ОграничитьТипЭлемента("Таблица1СЦеноваяГруппа"				, "СправочникСсылка.ЦеновыеГруппы");
		ОграничитьТипЭлемента("Таблица1СНоменклатурнаяГруппа"		, "СправочникСсылка.НоменклатурныеГруппы");
		
		ОграничитьТипЭлемента("Таблица1ССтранаПроисхождения"		, "СправочникСсылка.СтраныМира");
		ОграничитьТипЭлемента("Таблица1СПроизводитель"				, "СправочникСсылка.Контрагенты");
		
		ОграничитьТипЭлемента("Таблица1СНаборУпаковок"				, "СправочникСсылка.НаборыУпаковок");
		ОграничитьТипЭлемента("Таблица1СУпаковка"					, "СправочникСсылка.УпаковкиНоменклатуры");
		
		ОграничитьТипЭлемента("Таблица1СХарактеристика1С"			, "СправочникСсылка.ХарактеристикиНоменклатуры");
		
		////////////////////////////////////////////////////////////////////////////////////
		// ОТСУТСТВУЮТ ИЛИ ОГРАНИЧЕНЫ В КОНФИГУРАЦИИ "РОЗНИЦА".
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ХозяйственнаяОперация.Видимость					= Истина;
		Элементы.ХозяйственнаяОперация.ТолькоПросмотр				= Ложь;
		
		Элементы.АналитикаХозяйственнойОперации.Видимость			= Истина;
		Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр		= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Таблица1СХарактеристика.Видимость					= Истина;
		Элементы.Таблица1СХарактеристика.ТолькоПросмотр 			= НЕ Объект.ИспользоватьХарактеристикиНоменклатуры;
		
		Элементы.Таблица1СХарактеристика1С.Видимость				= Истина;
		Элементы.Таблица1СХарактеристика1С.ТолькоПросмотр 			= НЕ Объект.ИспользоватьХарактеристикиНоменклатуры;
		
		// Отбор Характеристики в Таблице "1С".
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Элементы.Таблица1С.ТекущиеДанные.ВидНоменклатуры", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.Таблица1СХарактеристика1С.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Элементы.Таблица1С.ТекущиеДанные.Номенклатура1С", РежимИзмененияСвязанногоЗначения.НеИзменять));
		//Элементы.Таблица1СХарактеристика1С.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.НаборУпаковок.Видимость	 						= Истина;
		Элементы.НаборУпаковок.ТолькоПросмотр 						= НЕ Объект.ИспользоватьУпаковкиНоменклатуры;
		
		Элементы.Упаковка.Видимость									= Истина;
		Элементы.Упаковка.ТолькоПросмотр							= Истина;	// Изначально.
		
		// Отбор Упаковки.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Объект.НаборУпаковок"							, РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.Упаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		// Отбор Упаковки в Таблице "1С".
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Элементы.Таблица1С.ТекущиеДанные.НаборУпаковок"	, РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.Таблица1СУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ЦеноваяГруппа.Видимость	 						= Истина;
		Элементы.ЦеноваяГруппа.ТолькоПросмотр 						= НЕ Объект.ИспользоватьЦеновыеГруппы;
		
		Элементы.ЦеноваяГруппаПроверять.Видимость					= Истина;
		Элементы.ЦеноваяГруппаПроверять.ТолькоПросмотр 				= НЕ Объект.ИспользоватьЦеновыеГруппы;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.Качество.Видимость									= Объект.ИспользоватьКачествоТоваров;
		Элементы.Качество.ТолькоПросмотр							= НЕ Объект.ИспользоватьКачествоТоваров;
		
		Элементы.Таблица1СКачество.Видимость						= Объект.ИспользоватьКачествоТоваров;
		Элементы.Таблица1СКачество.ТолькоПросмотр					= НЕ Объект.ИспользоватьКачествоТоваров;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ГруппаФинансовогоУчета.Видимость					= Объект.ИспользоватьГруппыФинансовогоУчета;
		Элементы.ГруппаФинансовогоУчета.ТолькоПросмотр 				= НЕ Объект.ИспользоватьГруппыФинансовогоУчета;
		
		Элементы.ГруппаФинансовогоУчетаПроверять.Видимость			= Объект.ИспользоватьГруппыФинансовогоУчета;
		Элементы.ГруппаФинансовогоУчетаПроверять.ТолькоПросмотр 	= НЕ Объект.ИспользоватьГруппыФинансовогоУчета;
		
		Элементы.Таблица1СГруппаФинансовогоУчета.Видимость			= Объект.ИспользоватьГруппыФинансовогоУчета;
		Элементы.Таблица1СГруппаФинансовогоУчета.ТолькоПросмотр		= НЕ Объект.ИспользоватьГруппыФинансовогоУчета;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ГруппаДоступа.Видимость							= Объект.ИспользоватьГруппыДоступаНоменклатуры;
		Элементы.ГруппаДоступа.ТолькоПросмотр						= НЕ Объект.ИспользоватьГруппыДоступаНоменклатуры;
		
		Элементы.ГруппаДоступаПроверять.Видимость					= Объект.ИспользоватьГруппыДоступаНоменклатуры;
		Элементы.ГруппаДоступаПроверять.ТолькоПросмотр				= НЕ Объект.ИспользоватьГруппыДоступаНоменклатуры;
		
		Элементы.Таблица1СГруппаДоступа.Видимость					= Объект.ИспользоватьГруппыДоступаНоменклатуры;
		Элементы.Таблица1СГруппаДоступа.ТолькоПросмотр				= НЕ Объект.ИспользоватьГруппыДоступаНоменклатуры;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ВестиУчетПоГТД.Видимость							= Объект.ИспользоватьИмпортныеЗакупки;
		Элементы.ВестиУчетПоГТД.ТолькоПросмотр 						= НЕ Объект.ИспользоватьИмпортныеЗакупки;
		
		Элементы.Таблица1СВестиУчетПоГТД.Видимость		 			= Объект.ИспользоватьИмпортныеЗакупки;
		Элементы.Таблица1СВестиУчетПоГТД.ТолькоПросмотр 			= НЕ Объект.ИспользоватьИмпортныеЗакупки;
		
		Элементы.Таблица1СНомерГТД.Видимость						= Объект.ИспользоватьИмпортныеЗакупки;
		Элементы.Таблица1СНомерГТД.ТолькоПросмотр 					= НЕ Объект.ИспользоватьИмпортныеЗакупки;

		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.УчитыватьНДС.Видимость 							= Истина;
		Элементы.УчитыватьНДС.ТолькоПросмотр						= Ложь;
		
		// Не используется в документах конфигурации Розница.
		Элементы.НалогообложениеНДС.Видимость 						= Ложь;
		Элементы.НалогообложениеНДС.ТолькоПросмотр					= Истина;	// УчитыватьНДС (БУЛЕВО).
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Организация.Видимость	 							= Истина;
		Элементы.Организация.ТолькоПросмотр							= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Магазин.Видимость									= Истина;
		Элементы.Магазин.ТолькоПросмотр								= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.Поставщик.Видимость 								= Ложь;
		Элементы.Поставщик.ТолькоПросмотр	 						= Истина;
		
		// НоменклатураПоставщика = Номенклатура.
		Элементы.Таблица1СНоменклатураПоставщика.Видимость			= Объект.ИспользоватьНоменклатуруПоставщиков;
		Элементы.Таблица1СНоменклатураПоставщика.ТолькоПросмотр 	= НЕ Объект.ИспользоватьНоменклатуруПоставщиков;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.Подразделение.Видимость							= Ложь;
		Элементы.Подразделение.ТолькоПросмотр						= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ПодакцизныйТовар.Видимость 						= Ложь;
		Элементы.ПодакцизныйТовар.ТолькоПросмотр					= Истина;
		
		Элементы.Таблица1СПодакцизныйТовар.Видимость				= Ложь;
		Элементы.Таблица1СПодакцизныйТовар.ТолькоПросмотр			= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ФизическоеЛицо.Видимость							= Ложь;
		Элементы.ФизическоеЛицо.ТолькоПросмотр						= Истина;
		
		Элементы.Таблица1СФизическоеЛицо.Видимость					= Ложь;
		Элементы.Таблица1СФизическоеЛицо.ТолькоПросмотр				= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.СтатьяРасходов.Видимость							= Ложь;
		Элементы.СтатьяРасходов.ТолькоПросмотр						= Истина;
		
		Элементы.Таблица1ССтатьяРасходов.Видимость					= Ложь;
		Элементы.Таблица1ССтатьяРасходов.ТолькоПросмотр				= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.СтатьяДоходов.Видимость							= Ложь;
		Элементы.СтатьяДоходов.ТолькоПросмотр						= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.СтатьяЗатрат.Видимость								= Ложь;
		Элементы.СтатьяЗатрат.ТолькоПросмотр						= Истина;
		
		Элементы.Таблица1ССтатьяЗатрат.Видимость					= Ложь;
		Элементы.Таблица1ССтатьяЗатрат.ТолькоПросмотр				= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ВидВоспроизводства.Видимость						= Ложь;
		Элементы.ВидВоспроизводства.ТолькоПросмотр					= Истина;
		
		Элементы.Таблица1СВидВоспроизводства.Видимость				= Ложь;
		Элементы.Таблица1СВидВоспроизводства.ТолькоПросмотр			= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.НоменклатурнаяГруппаЗатрат.Видимость				= Ложь;
		Элементы.НоменклатурнаяГруппаЗатрат.ТолькоПросмотр			= Истина;
		
		Элементы.Таблица1СНоменклатурнаяГруппаЗатрат.Видимость		= Ложь;
		Элементы.Таблица1СНоменклатурнаяГруппаЗатрат.ТолькоПросмотр	= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Не используется в документах конфигурации Розница.
		Элементы.ВестиОперативныйУчетОстатковНЗП.Видимость			= Ложь;
		Элементы.ВестиОперативныйУчетОстатковНЗП.ТолькоПросмотр		= Истина;
		
		Элементы.Таблица1СВестиОперативныйУчетОстатковНЗП.Видимость	= Ложь;
		Элементы.Таблица1СВестиОперативныйУчетОстатковНЗП.ТолькоПросмотр	= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Здесь и в ФормаОпределитьДоступность().
		Элементы.ДокументЗаказПоставщику.Видимость		 			= Объект.ИспользоватьЗаказыПоставщикам;
		Элементы.ДокументЗаказПоставщику.ТолькоПросмотр 			= Истина;	// Изначально.
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Здесь и в ФормаОпределитьДоступность().
		Элементы.ДокументУстановкаСебестоимости.Видимость	 		= Объект.ИспользоватьУчетСебестоимости;
		Элементы.ДокументУстановкаСебестоимости.ТолькоПросмотр 		= Истина;	// Изначально.
		
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		
		////////////////////////////////////////////////////////////////////////////////////
		// КОНСТАНТЫ.
		
		Объект.КонтролироватьУникальностьНоменклатурыИХарактеристик = Константы["КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик"].Получить();
		
		Объект.ИспользоватьХарактеристикиНоменклатуры 				= Константы["ИспользоватьХарактеристикиНоменклатуры"].Получить();
		
		Объект.ИспользоватьУпаковкиНоменклатуры 					= Константы["ИспользоватьУпаковкиНоменклатуры"].Получить();
		
		Объект.ИспользоватьКачествоТоваров 							= Константы["ИспользоватьКачествоТоваров"].Получить();
		
		Объект.ИспользоватьНоменклатуруПоставщиков 					= Константы["ИспользоватьНоменклатуруПоставщиков"].Получить();
		
		Объект.ИспользоватьЦеновыеГруппы 							= Константы["ИспользоватьЦеновыеГруппы"].Получить();
		
		Объект.ИспользоватьЗаказыПоставщикам						= Константы["ИспользоватьЗаказыПоставщикам"].Получить();
		
		Объект.ИспользоватьГруппыДоступаНоменклатуры				= Константы["ИспользоватьГруппыДоступаНоменклатуры"].Получить();
		
		Объект.ИспользоватьГруппыФинансовогоУчета 					= Константы["ИспользоватьГруппыФинансовогоУчета"].Получить();
		
		Объект.ИспользоватьУчетСебестоимости 						= Ложь;		// ТОЛЬКО ДЛЯ ОПРЕДЕЛЕНИЯ ВОЗМОЖНОСТИ СОЗДАНИЯ ДОУМКЕНТА "УстановкаСебестоимости".
		
		Объект.ИспользоватьКомиссиюПриЗакупках 						= Константы["ИспользоватьКомиссиюПриЗакупках"].Получить();
		
		Объект.ИспользоватьИмпортныеЗакупки 						= Константы["ИспользоватьИмпортныеЗакупки"].Получить();
		
		Объект.ИспользоватьПрочееОприходованиеТоваров 				= Константы["ИспользоватьПрочееОприходованиеТоваров"].Получить();
		
		// По-умолчанию устанавливаем Составное ПолноеНаименование = Наименование + Характеристика.
		Объект.СоставноеПолноеНаименование = НЕ Объект.ИспользоватьХарактеристикиНоменклатуры;
		Если Объект.СоставноеПолноеНаименование Тогда
			Объект.СоставноеПолноеНаименованиеРеквизит = "Характеристика";
			Элементы.СоставноеПолноеНаименованиеРеквизит.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// ПЕРЕЧИСЛЕНИЯ.
		
		// Реквизит ТипНоменклатуры имеет тип ПеречислениеСсылка. Уточнение.
		ОграничитьТипЭлемента("ТипНоменклатуры"						, "ПеречислениеСсылка.ТипыНоменклатуры");
		
		// Реквизит ХозяйственнаяОперация имеет тип ПеречислениеСсылка. Уточнение.
		ОграничитьТипЭлемента("ХозяйственнаяОперация"				, "ПеречислениеСсылка.ХозяйственныеОперации");
		
		// Реквизит УчитыватьНДС имеет тип Булево, ПеречислениеСсылка. Уточнение.
		ОграничитьТипЭлемента("НалогообложениеНДС"					, "ПеречислениеСсылка.ТипыНалогообложенияНДС");
		
		// Реквизит Качество имеет тип ПеречислениеСсылка. Уточнение.
		ОграничитьТипЭлемента("Качество"							, "ПеречислениеСсылка.ГрадацииКачества");
		
		////////////////////////////////////////////////////////////////////////////////////
		// СПРАВОЧНИКИ.
		
		// Реквизит ЕдиницаИзмерения имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ЕдиницаИзмерения"					, "СправочникСсылка.ЕдиницыИзмерения");
		
		// Реквизит ВидНоменклатуры имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидНоменклатуры"						, "СправочникСсылка.ВидыНоменклатуры");
		
		// Реквизит ВидЦеныЗакупочная имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидЦеныЗакупочная"					, "СправочникСсылка.ВидыЦен");
		
		// Реквизит ВидЦеныРасчетная имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидЦеныРозничная"					, "СправочникСсылка.ВидыЦен");
		
		// Реквизит ВидЦеныРасчетная имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ВидЦеныРасчетная"					, "СправочникСсылка.ВидыЦен");
		
		// Реквизит ЦеноваяГруппа имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ЦеноваяГруппа"						, "СправочникСсылка.ЦеновыеГруппы");
		
		// Реквизит Поставщик имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("Поставщик"							, "СправочникСсылка.Партнеры");
		
		// Реквизит Подразделение имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("Подразделение"						, "СправочникСсылка.СтруктураПредприятия");
		
		// Реквизит НоменклатурнаяГруппа имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("НоменклатурнаяГруппа"				, "СправочникСсылка.СкладскиеГруппыНоменклатуры");
		Элементы.НоменклатурнаяГруппа.Заголовок = "Складская группа~";
		
		// Реквизит НаборУпаковок имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("НаборУпаковок"						, "СправочникСсылка.НаборыУпаковок");
		
		// Реквизит Упаковка имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("Упаковка"							, "СправочникСсылка.УпаковкиНоменклатуры");
		
		// Реквизит ГруппаДоступа имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ГруппаДоступа"						, "СправочникСсылка.ГруппыДоступаНоменклатуры");
		
		// Реквизит ГруппаФинансовогоУчета имеет тип СправочникСсылка. Уточнение.
		ОграничитьТипЭлемента("ГруппаФинансовогоУчета"				, "СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		
		////////////////////////////////////////////////////////////////////////////////////
		// ПЛАНЫ ВИДОВ ХАРАКТЕРИСТИК.
		
		// ПВХ Тип штрихкода неопределен. Скрыть.
		// Выбирать из заданного в элементе списка.
		// Элементы.ТипШтрихКода.Видимость = Ложь;
		// Элементы.ТипШтрихКода.РежимВыбораИзСписка = Истина;
		
		// Реквизит СтатьяДоходов имеет тип ПланВидовХарактеристикСсылка. Уточнение.
		ОграничитьТипЭлемента("СтатьяДоходов"						, "ПланВидовХарактеристикСсылка.СтатьиДоходов");
		
		// Реквизит СтатьяРасходов имеет тип ПланВидовХарактеристикСсылка. Уточнение.
		ОграничитьТипЭлемента("СтатьяРасходов"						, "ПланВидовХарактеристикСсылка.СтатьиРасходов");
		
		////////////////////////////////////////////////////////////////////////////////////
		// ДОКУМЕНТЫ.
		
		// Реквизит ДокументКорректируемый имеет тип ДокументСсылка. Уточнение.
		Массив = Новый Массив;
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		Массив.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
		Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда
			Массив.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
		КонецЕсли;
		ОграничитьТипЭлемента("ДокументКорректируемый"				, Массив);
		
		// Реквизит ДокументПоступление имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументПоступление"					, "ДокументСсылка.ПоступлениеТоваровУслуг");
		
		// Реквизит ДокументЗаказПоставщику имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументЗаказПоставщику"				, "ДокументСсылка.ЗаказПоставщику");						// Только для документа ПоступлениеТоваров.
		
		// Реквизит ДокументОприходование имеет тип ДокументСсылка. Уточнение.
		Массив = Новый Массив;
		Массив.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
		Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда
			Массив.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
		КонецЕсли;
		ОграничитьТипЭлемента("ДокументОприходование"				, Массив);
		
		// Это один из нескольких.
		// Реквизит ДокументОснование имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументОснование"					, "ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров");	// Только для документа ОприходованиеТоваров.
		
		// Реквизит ДокументУстановкаЦены имеет тип ДокументСсылка. Уточнение.
		ОграничитьТипЭлемента("ДокументУстановкаЦены"				, "ДокументСсылка.УстановкаЦенНоменклатуры");
		
		// Реквизит ДокументУстановкаСебестоимости имеет тип ДокументСсылка. Уточнение.
		//ОграничитьТипЭлемента("ДокументУстановкаСебестоимости", "ДокументСсылка.РасчетСебестоимостиТоваров");
		
		// Таблица1С:
		ОграничитьТипЭлемента("Таблица1СНоменклатураПоставщика"	, "СправочникСсылка.НоменклатураПоставщиков");
		
		// Отбор НоменклатурыПоставщика.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Объект.Поставщик"								, РежимИзмененияСвязанногоЗначения.НеИзменять));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Номенклатура"	, "Элементы.Таблица1С.ТекущиеДанные.Номенклатура1С"	, РежимИзмененияСвязанногоЗначения.НеИзменять));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Характеристика"	, "Элементы.Таблица1С.ТекущиеДанные.Характеристика"	, РежимИзмененияСвязанногоЗначения.НеИзменять));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Упаковка"		, "Элементы.Таблица1С.ТекущиеДанные.Упаковка"		, РежимИзмененияСвязанногоЗначения.НеИзменять));
		
		Элементы.Таблица1СНоменклатураПоставщика.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить("Объект.Поставщик");
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(МассивЗначений)));
	
		Элементы.Таблица1СНоменклатураПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		//
		
		ОграничитьТипЭлемента("Таблица1СТипШтрихКода"				, "Строка");
		Элементы.Таблица1СТипШтрихКода.РежимВыбораИзСписка = Истина;
		ОграничитьТипЭлемента("Таблица1СЕдиницаИзмерения"			, "СправочникСсылка.ЕдиницыИзмерения");
		ОграничитьТипЭлемента("Таблица1СВидНоменклатуры"			, "СправочникСсылка.ВидыНоменклатуры");
		ОграничитьТипЭлемента("Таблица1СТипНоменклатуры"			, "ПеречислениеСсылка.ТипыНоменклатуры");
		ОграничитьТипЭлемента("Таблица1СЦеноваяГруппа"				, "СправочникСсылка.ЦеновыеГруппы");
		ОграничитьТипЭлемента("Таблица1СНоменклатурнаяГруппа"		, "СправочникСсылка.СкладскиеГруппыНоменклатуры");
		Элементы.Таблица1СНоменклатурнаяГруппа.Заголовок = "Складская группа";
		
		ОграничитьТипЭлемента("Таблица1ССтранаПроисхождения"		, "СправочникСсылка.СтраныМира");
		ОграничитьТипЭлемента("Таблица1СПроизводитель"				, "СправочникСсылка.Производители");
		ОграничитьТипЭлемента("Таблица1СНомерГТД"					, "СправочникСсылка.НомераГТД");
		
		ОграничитьТипЭлемента("Таблица1СНаборУпаковок"				, "СправочникСсылка.НаборыУпаковок");
		ОграничитьТипЭлемента("Таблица1СУпаковка"					, "СправочникСсылка.УпаковкиНоменклатуры");
		
		ОграничитьТипЭлемента("Таблица1СХарактеристика1С"			, "СправочникСсылка.ХарактеристикиНоменклатуры");
		
		// Отбор Характеристики.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Таблица1С.ТекущиеДанные.Номенклатура1С"	, РежимИзмененияСвязанногоЗначения.НеИзменять));
		
		Элементы.Таблица1СНоменклатураПоставщика.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить("Элементы.Таблица1С.ТекущиеДанные.Номенклатура1С");
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец" , Новый ФиксированныйМассив(МассивЗначений)));
		//
		
		ОграничитьТипЭлемента("Таблица1СГруппаДоступа"				, "СправочникСсылка.ГруппыДоступаНоменклатуры");
		
		ОграничитьТипЭлемента("Таблица1СГруппаФинансовогоУчета"		, "СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ОграничитьТипЭлемента("Таблица1СКачество"					, "ПеречислениеСсылка.ГрадацииКачества");
		
		ОграничитьТипЭлемента("Таблица1ССтатьяРасходов"				, "ПланВидовХарактеристикСсылка.СтатьиРасходов");
		
		// Отсутствуют в УТ.
		
		// Склад не связан напрямую с Организацией. Выбирать.
		Элементы.Организация.Доступность = Истина;
		
		////////////////////////////////////////////////////////////////////////////////////
		// ОТСУТСТВУЮТ ИЛИ ОГРАНИЧЕНЫ В КОНФИГУРАЦИИ "УПРАВЛЕНИЕ ТОРГОВЛЕЙ".
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ХозяйственнаяОперация.Видимость					= Истина;
		Элементы.ХозяйственнаяОперация.ТолькоПросмотр				= Ложь;
		
		Элементы.АналитикаХозяйственнойОперации.Видимость			= Ложь;
		Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр		= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Таблица1СХарактеристика.Видимость					= Истина;
		Элементы.Таблица1СХарактеристика.ТолькоПросмотр 			= НЕ Объект.ИспользоватьХарактеристикиНоменклатуры;
		
		Элементы.Таблица1СХарактеристика1С.Видимость				= Истина;
		Элементы.Таблица1СХарактеристика1С.ТолькоПросмотр 			= НЕ Объект.ИспользоватьХарактеристикиНоменклатуры;
		
		// Отбор Характеристики в Таблице "1С".
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Элементы.Таблица1С.ТекущиеДанные.ВидНоменклатуры", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.Таблица1СХарактеристика1С.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Элементы.Таблица1С.ТекущиеДанные.Номенклатура1С", РежимИзмененияСвязанногоЗначения.НеИзменять));
		//Элементы.Таблица1СХарактеристика1С.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.НаборУпаковок.Видимость	 						= Истина;
		Элементы.НаборУпаковок.ТолькоПросмотр 						= НЕ Объект.ИспользоватьУпаковкиНоменклатуры;
		
		Элементы.Упаковка.Видимость									= Истина;
		Элементы.Упаковка.ТолькоПросмотр							= Истина;	// Изначально.
		
		//// В УТ справочник УпаковкиНоменклатуры не имеет владельцев.
		//// Отбор Упаковки.
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Объект.НаборУпаковок"							, РежимИзмененияСвязанногоЗначения.НеИзменять));
		//Элементы.Упаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		//
		//// Отбор Упаковки в Таблице "1С".
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец"		, "Элементы.Таблица1С.ТекущиеДанные.НаборУпаковок"	, РежимИзмененияСвязанногоЗначения.НеИзменять));
		//Элементы.Таблица1СУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ЦеноваяГруппа.Видимость	 						= Истина;
		Элементы.ЦеноваяГруппа.ТолькоПросмотр 						= НЕ Объект.ИспользоватьЦеновыеГруппы;
		
		Элементы.ЦеноваяГруппаПроверять.Видимость					= Истина;
		Элементы.ЦеноваяГруппаПроверять.ТолькоПросмотр 				= НЕ Объект.ИспользоватьЦеновыеГруппы;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Качество.Видимость									= Объект.ИспользоватьКачествоТоваров;
		Элементы.Качество.ТолькоПросмотр							= НЕ Объект.ИспользоватьКачествоТоваров;
		
		Элементы.Таблица1СКачество.Видимость						= Объект.ИспользоватьКачествоТоваров;
		Элементы.Таблица1СКачество.ТолькоПросмотр					= НЕ Объект.ИспользоватьКачествоТоваров;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ГруппаФинансовогоУчета.Видимость					= Объект.ИспользоватьГруппыФинансовогоУчета;
		Элементы.ГруппаФинансовогоУчета.ТолькоПросмотр 				= НЕ Объект.ИспользоватьГруппыФинансовогоУчета;
		
		Элементы.ГруппаФинансовогоУчетаПроверять.Видимость			= Объект.ИспользоватьГруппыФинансовогоУчета;
		Элементы.ГруппаФинансовогоУчетаПроверять.ТолькоПросмотр 	= НЕ Объект.ИспользоватьГруппыФинансовогоУчета;
		
		Элементы.Таблица1СГруппаФинансовогоУчета.Видимость			= Объект.ИспользоватьГруппыФинансовогоУчета;
		Элементы.Таблица1СГруппаФинансовогоУчета.ТолькоПросмотр		= НЕ Объект.ИспользоватьГруппыФинансовогоУчета;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ГруппаДоступа.Видимость							= Объект.ИспользоватьГруппыДоступаНоменклатуры;
		Элементы.ГруппаДоступа.ТолькоПросмотр						= НЕ Объект.ИспользоватьГруппыДоступаНоменклатуры;
		
		Элементы.ГруппаДоступаПроверять.Видимость					= Объект.ИспользоватьГруппыДоступаНоменклатуры;
		Элементы.ГруппаДоступаПроверять.ТолькоПросмотр				= НЕ Объект.ИспользоватьГруппыДоступаНоменклатуры;
		
		Элементы.Таблица1СГруппаДоступа.Видимость					= Объект.ИспользоватьГруппыДоступаНоменклатуры;
		Элементы.Таблица1СГруппаДоступа.ТолькоПросмотр				= НЕ Объект.ИспользоватьГруппыДоступаНоменклатуры;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ВестиУчетПоГТД.Видимость							= Объект.ИспользоватьИмпортныеЗакупки;
		Элементы.ВестиУчетПоГТД.ТолькоПросмотр 						= НЕ Объект.ИспользоватьИмпортныеЗакупки;
		
		Элементы.Таблица1СВестиУчетПоГТД.Видимость		 			= Объект.ИспользоватьИмпортныеЗакупки;
		Элементы.Таблица1СВестиУчетПоГТД.ТолькоПросмотр 			= НЕ Объект.ИспользоватьИмпортныеЗакупки;
		
		Элементы.Таблица1СНомерГТД.Видимость						= Объект.ИспользоватьИмпортныеЗакупки;
		Элементы.Таблица1СНомерГТД.ТолькоПросмотр 					= НЕ Объект.ИспользоватьИмпортныеЗакупки;

		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.УчитыватьНДС.Видимость 							= Ложь;
		Элементы.УчитыватьНДС.ТолькоПросмотр						= Истина;
		
		Элементы.НалогообложениеНДС.Видимость 						= Истина;
		Элементы.НалогообложениеНДС.ТолькоПросмотр					= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Организация.Видимость	 							= Истина;
		Элементы.Организация.Доступность							= Истина;
		Элементы.Организация.ТолькоПросмотр							= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Магазин.Видимость									= Ложь;
		Элементы.Магазин.ТолькоПросмотр								= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Поставщик.Видимость 								= Объект.ИспользоватьНоменклатуруПоставщиков;
		Элементы.Поставщик.ТолькоПросмотр	 						= Истина;
		
		Элементы.Таблица1СНоменклатураПоставщика.Видимость			= Объект.ИспользоватьНоменклатуруПоставщиков;
		Элементы.Таблица1СНоменклатураПоставщика.ТолькоПросмотр 	= НЕ Объект.ИспользоватьНоменклатуруПоставщиков;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Подразделение.Видимость							= Истина;
		Элементы.Подразделение.ТолькоПросмотр						= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ПодакцизныйТовар.Видимость 						= Истина;
		Элементы.ПодакцизныйТовар.ТолькоПросмотр					= Ложь;
		
		Элементы.Таблица1СПодакцизныйТовар.Видимость				= Истина;
		Элементы.Таблица1СПодакцизныйТовар.ТолькоПросмотр			= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.Таблица1СФизическоеЛицо.Видимость					= Истина;
		Элементы.Таблица1СФизическоеЛицо.ТолькоПросмотр				= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.СтатьяРасходов.Видимость							= Истина;
		Элементы.СтатьяРасходов.ТолькоПросмотр						= Ложь;
		
		Элементы.Таблица1ССтатьяРасходов.Видимость					= Истина;
		Элементы.Таблица1ССтатьяРасходов.ТолькоПросмотр				= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.СтатьяДоходов.Видимость							= Истина;
		Элементы.СтатьяДоходов.ТолькоПросмотр						= Ложь;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.СтатьяЗатрат.Видимость								= Ложь;
		Элементы.СтатьяЗатрат.ТолькоПросмотр						= Истина;
		
		Элементы.Таблица1ССтатьяЗатрат.Видимость					= Ложь;
		Элементы.Таблица1ССтатьяЗатрат.ТолькоПросмотр				= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ВидВоспроизводства.Видимость						= Ложь;
		Элементы.ВидВоспроизводства.ТолькоПросмотр					= Истина;
		
		Элементы.Таблица1СВидВоспроизводства.Видимость				= Ложь;
		Элементы.Таблица1СВидВоспроизводства.ТолькоПросмотр			= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.НоменклатурнаяГруппаЗатрат.Видимость				= Ложь;
		Элементы.НоменклатурнаяГруппаЗатрат.ТолькоПросмотр			= Истина;
		
		Элементы.Таблица1СНоменклатурнаяГруппаЗатрат.Видимость		= Ложь;
		Элементы.Таблица1СНоменклатурнаяГруппаЗатрат.ТолькоПросмотр	= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		Элементы.ВестиОперативныйУчетОстатковНЗП.Видимость			= Ложь;
		Элементы.ВестиОперативныйУчетОстатковНЗП.ТолькоПросмотр		= Истина;
		
		Элементы.Таблица1СВестиОперативныйУчетОстатковНЗП.Видимость	= Ложь;
		Элементы.Таблица1СВестиОперативныйУчетОстатковНЗП.ТолькоПросмотр	= Истина;
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Здесь и в ФормаОпределитьДоступность().
		Элементы.ДокументЗаказПоставщику.Видимость		 			= Объект.ИспользоватьЗаказыПоставщикам;
		Элементы.ДокументЗаказПоставщику.ТолькоПросмотр 			= Истина;	// Изначально.
		
		// ---------------------------------------------------------------------------------------------------------------------
		// Здесь и в ФормаОпределитьДоступность().
		Элементы.ДокументУстановкаСебестоимости.Видимость	 		= Объект.ИспользоватьУчетСебестоимости;
		Элементы.ДокументУстановкаСебестоимости.ТолькоПросмотр 		= Истина;	// Изначально.
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

// Элементы.ТипДокумента.ДоступныеТипы И Элементы.ТипДокумента.ОграничениеТипа для различных конфигураций.
//
&НаСервере
Процедура ПолучитьОписаниеТиповДоступныхКОбработкеДокументовКонфигурации()
	
	Если Объект.ТаблицаЭталон.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации = Новый Массив;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		// Поступление. ОБЯЗАТЕЛЬНО ПЕРВЫМ.
		Объект.СписокТиповДокументовПоступления.Очистить();
		Объект.СписокТиповДокументовПоступления.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
		
		Объект.СписокТиповДокументовОприходования.Очистить();
		Объект.СписокТиповДокументовОприходования.Добавить(Тип("ДокументСсылка.ОприходованиеТоваров"));
		
		Объект.СписокТиповДокументовУстановкаЦен.Очистить();
		Объект.СписокТиповДокументовУстановкаЦен.Добавить(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"));
		
		Если Объект.КоличествоОпределено Тогда
			
			// Поступление.
			МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
		
			Если НЕ ЭтоОсновноеДействиеИзменить() Тогда
			
				// Оприходование.
				МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.ОприходованиеТоваров"));
			
			КонецЕсли;
			
		Иначе
			
			// УстановкаЦен.
			МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"));
			
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		// Поступление. ОБЯЗАТЕЛЬНО ПЕРВЫМ.
		Объект.СписокТиповДокументовПоступления.Очистить();
		Объект.СписокТиповДокументовПоступления.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		
		// Оприходование.
		Объект.СписокТиповДокументовОприходования.Очистить();
		Объект.СписокТиповДокументовОприходования.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
		Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда
			Объект.СписокТиповДокументовОприходования.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
		КонецЕсли;
		
		// УстановкаЦен.
		Объект.СписокТиповДокументовУстановкаЦен.Очистить();
		Объект.СписокТиповДокументовУстановкаЦен.Добавить(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"));
		
		Если Объект.КоличествоОпределено Тогда
		
			// Поступление.
			МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		
			Если НЕ ЭтоОсновноеДействиеИзменить() Тогда
			
				// Оприходование.
				МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров"));
				
				Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда
					МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
		
			// УстановкаЦен.
			МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации.Добавить(Тип("ДокументСсылка.УстановкаЦенНоменклатуры"));
			
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Элементы.ТипДокумента.ДоступныеТипы = Новый ОписаниеТипов(МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации);
	Элементы.ТипДокумента.ОграничениеТипа = Новый ОписаниеТипов(МассивОписанийТиповДоступныхКОбработкеДокументовКонфигурации);
	
КонецПроцедуры

// Органичени типа Реквизита Объекта, т.к. в основном это СправочникСсылка, ПеречислениеСсылка, ДокументСсылка и т.д.
//
&НаСервере
Процедура ОграничитьТипЭлемента(Элемент, Тип)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип(Тип));
	Иначе
		Массив = Тип;
	КонецЕсли;
	
	Попытка
		Элементы[Элемент].ДоступныеТипы = Новый ОписаниеТипов(Массив);
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Элементы[Элемент].ОграничениеТипа = Новый ОписаниеТипов(Массив);
	
	Попытка
		Элементы[Элемент].РежимВыбораИзСписка = Ложь;
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЭтоКонфигурацияРозница()
	Возврат Объект.ПараметрыСеансаОбработки.Конфигурация = "Розница";
КонецФункции

&НаСервере
Функция ЭтоКонфигурацияУправлениеТорговлей()
	Возврат Объект.ПараметрыСеансаОбработки.Конфигурация = "УправлениеТорговлей";
КонецФункции

&НаСервере
Функция ЭтоКонфигурацияБухгалтерияПредприятия()
	Возврат Объект.ПараметрыСеансаОбработки.Конфигурация = "БухгалтерияПредприятия";
КонецФункции

&НаСервере
Функция ЭтоКонфигурацияКомплекснаяАвтоматизация()
	Возврат Объект.ПараметрыСеансаОбработки.Конфигурация = "КомплекснаяАвтоматизация";
КонецФункции

&НаСервере
Функция ЭтоДокументПоступления(Документ)
	Возврат ЭтоДокументДоступныйВВыборкеТипаОбрабатываемогоДокумента(Документ, Объект.СписокТиповДокументовПоступления);
КонецФункции

&НаСервере
Функция ЭтоДокументОприходования(Документ)
	Возврат ЭтоДокументДоступныйВВыборкеТипаОбрабатываемогоДокумента(Документ, Объект.СписокТиповДокументовОприходования);
КонецФункции

&НаСервере
Функция ЭтоДокументУстановкаЦен(Документ)
	Возврат ЭтоДокументДоступныйВВыборкеТипаОбрабатываемогоДокумента(Документ, Объект.СписокТиповДокументовУстановкаЦен);
КонецФункции

// Определение правильности выбранного возможного типа документа: Поступления, Оприходования, УстановкиЦен.
//
&НаСервере
Функция ЭтоДокументДоступныйВВыборкеТипаОбрабатываемогоДокумента(Документ, Список)
	
	Если ТипЗнч(Документ) = Тип("ОписаниеТипов") Тогда
		Если Документ.Типы().Количество() > 0 Тогда
			Возврат НЕ Список.НайтиПоЗначению(Документ.Типы()[0]) = Неопределено;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат НЕ Список.НайтиПоЗначению(ТипЗнч(Документ)) = Неопределено;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоСкладОптовый(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Возврат Склад.ТипСклада = Перечисления.ТипыСкладов.СкладскоеПомещение;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Возврат Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоСкладРозничный(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Возврат Склад.ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Возврат Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоСкладНТТ(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда						// Склад НТТ отсутствует.
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда	// Склад НТТ отсутствует.
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоСкладУправляющейСистемы(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда						// Склад УправляющейСистемы отсутствует.
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда	// Склад УправляющейСистемы отсутствует.
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Файл Исходных данных табличного типа с расширениями xls; xlsx; ods; sxc.
// Поддерживаемые расширения различные для различных методов загрузки.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Выбор файла типа таблица в соответствии с методами загрузки "LibreOffice Calc" (*.xls;*.xlsx;*.ods;*.sxc) / "MS Excel" (*.xls;*.xlsx) / "MS ADODB" (*.xls;*.xlsx).
// 
&НаКлиенте
Процедура ФайлИсходныхДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл исходных данных";
	Диалог.ПолноеИмяФайла = "c:\";
	Если Объект.ТипСОМОбъекта = "LibreOffice" Тогда
		Диалог.Фильтр = "Таблицы (*.xls,*.xlsx,*.ods,*.sxc)|*.xls;*.xlsx;*.ods;*.sxc|Microsoft Excel 97/2000/XP/2003 (*.xls)|*.xls|Microsoft Excel 2007/2010 (*.xlsx)|*.xlsx|Электронная таблица ODF (*.ods)|*.ods|Электронная таблица OpenOffice 1.0 (*.sxc)|*.sxc";
	Иначе
		Диалог.Фильтр = "Таблицы (*.xls,*.xlsx)|*.xls;*.xlsx;|Microsoft Excel 97/2000/XP/2003 (*.xls)|*.xls|Microsoft Excel 2007/2010 (*.xlsx)|*.xlsx";
	КонецЕсли;

	Если Диалог.Выбрать() Тогда
		
		Если НЕ Объект.ФайлИсходныхДанных = Диалог.ПолноеИмяФайла Тогда
			ФормаОчистить();
		КонецЕсли;
		
		Объект.ФайлИсходныхДанных = Диалог.ПолноеИмяФайла;
	
		Объект.СписокЛистовФайла = ФайлExcelПолучитьСписокЛистов(Объект.ФайлИсходныхДанных);
		
		НачальныеПараметрыЛиста();
		
	КонецЕсли;
	
	ФормаОпределитьДоступнность();

КонецПроцедуры

// функция возвращает массив, содержащий имена листов книги из указанного файла Excel (формат Excel 97-2010) или Неопределено, 
// если попытка чтения списка листов не удалась
// <ИмяФайла> - полное имя файла (путь к файлу с именем файла и расширением файла xls или xlsx)
// Пример вызова: Список = ФайлExcelПолучитьСписокЛистов("c:\Отчеты\Прайс.xlsx")
// <Список> содержит массив строк, с именами листов в файле "Прайс.xlsx", например: Лист1$, Лист2$, Лист3$
&НаСервере
Функция ФайлExcelПолучитьСписокЛистов(ФайлИсходныхДанных)

	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
		
	Возврат ЭтотОбъект.ФайлExcelПолучитьСписокЛистов(ФайлИсходныхДанных);
	
КонецФункции

// Проверить существует ли файл. Актуально, т.к. файл может быть удален, а имя его сохраняется при закрытии формы.
// 
&НаКлиенте
Функция ФайлСуществует(ФайлДанных)
	
	Файл = Новый Файл(ФайлДанных);
	Возврат Файл.Существует();
	
КонецФункции

// Получить расширение файла.
// 
&НаКлиенте
Функция ФайлРасширение(ФайлДанных)
	
	Файл = Новый Файл(ФайлДанных);
	Возврат Файл.Расширение;
	
КонецФункции

&НаКлиенте
Процедура ИмяЛистаИсходныхДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(Объект.СписокЛистовФайла, Элемент);
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		Объект.ИмяЛистаИсходныхДанных = ВыбранныйЭлемент.Значение;
		Объект.НомерЛистаИсходныхДанных = Объект.СписокЛистовФайла.Индекс(ВыбранныйЭлемент)+1;
	КонецЕсли;
	
КонецПроцедуры

// ЗапуститьПриложение, связанное с расширением файла.
//
&НаКлиенте
Процедура ФайлИсходныхДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КодВозврата = 0;
	
	ЗапуститьПриложение(Объект.ФайлИсходныхДанных, , Истина, КодВозврата);
	
	Объект.СписокЛистовФайла = ФайлExcelПолучитьСписокЛистов(Объект.ФайлИсходныхДанных);
		
	НачальныеПараметрыЛиста();
	
	Если КодВозврата = 0 Тогда
		Действие = "Произвести повторную загрузку данных из файла
		|""" + Объект.ФайлИсходныхДанных + """?";
		Комментарий = "";
		Если Объект.ДокументыСозданы Тогда
			Комментарий = "
			|ВАЖНО:
			|Необходимо будет формировать/изменять документы:
			|1. ""Поступление товаров"" / (""Оприходование товаров"", ""Установка себестоимости"");
			|2. ""Установка цены номенклатуры"".
			|";
		КонецЕсли;
		
		Если ЗадатьВопросОНовомДействии(Действие, Комментарий) Тогда
		
			ОМЗагрузитьИзФайла(Элемент);
			
		КонецЕсли;
	Иначе
		Предупреждение("Ошибка Открытия/Сохранения файла " + Объект.ФайлИсходныхДанных + ".
		|
		|Загрузка данных не произведена.");
	КонецЕсли;
	
КонецПроцедуры

// Очистка Реквизита Объекта и Элемента Формы.
// 
&НаКлиенте
Процедура ФайлИсходныхДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Вопрос("Прекратить работу с Файлом исходных данных
		|
		|""" + Объект.ФайлИсходныхДанных + """?", 
		РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,  
		Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия + ": " + "ФАЙЛ ИСХОДНЫХ ДАННЫХ", 
		КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
	
		Объект.ФайлИсходныхДанных = "";
		Объект.СписокЛистовФайла = Новый СписокЗначений;
		
		ФормаОчистить();
		
	КонецЕсли;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Очистка Реквизитов Объекта и Элементов формы. 
// Используется при загрузке из файла, при выборе файла, при очистке поля файла на форме.
// 
&НаСервере
Процедура ФормаОчистить(Коменда = Неопределено)
	
	Если НЕ Коменда = ЭтаФорма.Команды.кнОМЗагрузитьИзФайла.Имя Тогда
		НачальныеПараметрыЛиста();
	КонецЕсли;
	Элементы.НачальнаяСтрокаИсходныхДанных.МаксимальноеЗначение = 999999;
	Элементы.КонечнаяСтрокаИсходныхДанных.МаксимальноеЗначение 	= 999999;
	
	Объект.ОсновноеДействие = "Создать";
	ОсновноеДействиеЗаголовки();
	ПолучитьОписаниеТиповДоступныхКОбработкеДокументовКонфигурации();	// ВСЕ ВОЗМОЖНЫЕ.
	ФормаОпределитьДоступнностьВТаблицах();
	
	Объект.ТипДокумента = Неопределено;
	Документы_Неопределено();											// Документы = Неопределено.
	
	ПараметрыСправочникиФлажки_Ложь();
	
	Объект.РеквизитыСопоставленыКолонкам 	= Ложь;
	
	Объект.СправочникиОбновлены 			= Ложь;
	
	Элементы.СтраницаТаблицаИсходныхДанных.Заголовок = "Таблица ""Excel""";
	Объект.ТаблицаИсходныхДанных.Очистить();
	Объект.ТаблицаЭталон.Очистить();
	Объект.Таблица1С.Очистить();
	
	// Удаляемые Элементы Формы.
	ЭлементыДляУдаления = ПолучитьРеквизиты(Элементы.ТаблицаИсходныхДанных.ПутьКДанным);
	Для Каждого ЭлементУдаления ИЗ ЭлементыДляУдаления Цикл
		Если ЭлементУдаления.Имя = "НомерСтроки" ИЛИ ЭлементУдаления.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		// Удаляем элементы формы
		Попытка
			Если Элементы.Найти(Элементы.ТаблицаИсходныхДанных.Имя + ЭлементУдаления.Имя) <> Неопределено Тогда
				Элементы.Удалить(Элементы[Элементы.ТаблицаИсходныхДанных.Имя + ЭлементУдаления.Имя]);
			КонецЕсли;
		Исключение
			Сообщить("" + ЭлементУдаления.Имя + ": " + ОписаниеОшибки() + ".");
		КонецПопытки;
	КонецЦикла;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаТаблицаИсходныхДанных;
	
КонецПроцедуры

// Справочники. Установить Флажки в Ложь.
// 
&НаСервере
Процедура ПараметрыСправочникиФлажки_Ложь()
	
	Объект.НаименованиеСодержитАртикул 		= Ложь;
	Объект.РазделительАртикулаИНаименования = Неопределено;
	Объект.ОставитьАртикулВНаименовании		= Ложь;
	
	//Объект.СоставноеПолноеНаименование		= Ложь;
	//Объект.СоздаватьНовыеГруппыНоменклатуры	= Ложь;
	//Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа = Ложь;

	Объект.ИзменятьНаименование				= Ложь;
	Объект.ИзменятьРеквизитыСправочников 	= Ложь;
	Объект.ИзменятьВТЧЗапрещенные 			= Ложь;
	
КонецПроцедуры

// Документы = Неопределено, ДокументыСозданы = Ложь;
// 
&НаСервере
Процедура Документы_Неопределено(ТолькоСоздаваемые = Ложь)
	
	Объект.ДокументыСозданы					= Ложь;
	
	Объект.ДокументПоступление				= Неопределено;
	Объект.ДокументОприходование			= Неопределено;
	Объект.ДокументУстановкаСебестоимости	= Неопределено;
	Объект.ДокументУстановкаЦены			= Неопределено;
	
	Если НЕ ТолькоСоздаваемые Тогда
	
		Объект.ДокументКорректируемый			= Неопределено;
		Объект.ДокументЗаказПоставщику 			= Неопределено;
		Объект.ДокументОснование				= Неопределено;
	
	КонецЕсли;
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("Ссылки на документы очищены.
		|Необходимо вновь создать документы.");
	КонецЕсли;
	
КонецПроцедуры

// Контроль вводимой начальной строки диапазона. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ФайлНачальнаяСтрокаИсходныхДанныхПриИзменении(Элемент)
	
    Предупреждение = ФайлПараметрыДиапазона(Элемент.Имя, Объект.ТаблицаИсходныхДанных, Объект.НачальнаяСтрокаИсходныхДанных);	// Измененные параметры диапазона по ТаблицеИсходныхДанных.
	
	Если ЗначениеЗаполнено(Предупреждение) Тогда
		Предупреждение(Предупреждение);
	КонецЕсли;
	
	Объект.РеквизитыСопоставленыКолонкам = Ложь;
	
	Объект.СправочникиОбновлены = Ложь;
	
	Объект.Таблица1С.Очистить();
	
	Если Объект.ДокументыСозданы Тогда
		Документы_Неопределено();	// Документы = Неопределено.
		Предупреждение(ПолучитьСтрокуНеобходимоЗагрузитьИзФайлаИСформироватьНовыеДокументы());
	КонецЕсли;

	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Контроль вводимой конечной строки диапазона. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ФайлКонечнаяСтрокаИсходныхДанныхПриИзменении(Элемент)
	
    Предупреждение = ФайлПараметрыДиапазона(Элемент.Имя, Объект.ТаблицаИсходныхДанных, Объект.НачальнаяСтрокаИсходныхДанных);	// Измененные параметры диапазона по ТаблицеИсходныхДанных.
	
	Если ЗначениеЗаполнено(Предупреждение) Тогда
		Предупреждение(Предупреждение);
	КонецЕсли;
	
	Объект.РеквизитыСопоставленыКолонкам = Ложь;
	
	Объект.СправочникиОбновлены = Ложь;
	
	Объект.Таблица1С.Очистить();
	
	Если Объект.ДокументыСозданы Тогда
		Документы_Неопределено();	// Документы = Неопределено.
		Предупреждение(ПолучитьСтрокуНеобходимоЗагрузитьИзФайлаИСформироватьНовыеДокументы());
	КонецЕсли;
	
	ФормаОпределитьДоступнность();

КонецПроцедуры

// Получить строку вида: "Необходимо произвести загрузку из файла и сформировать новые документы: ...".
// 
&НаКлиенте
Функция ПолучитьСтрокуНеобходимоЗагрузитьИзФайлаИСформироватьНовыеДокументы()
	
	Возврат "Необходимо произвести загрузку из файла и сформировать новые документы:
	|1. ""Поступление товаров"" / (""Оприходование товаров"" и ""Установка себестоимости"");
	|2. ""Установка цены номенклатуры"".";
		
КонецФункции

// СтрокаЗаголовка - 1-я строка, СтрокаЭталона - НачальнаяСтрока диапазона, Проверка размера диапазона предполагаемых к считыванию строк файла (рекомендуется не более 1000).
// 
&НаСервере
Функция ФайлПараметрыДиапазона(Элемент, Знач ТаблицаДанных, Знач НачальнаяСтрока = 0)
	
	Объект.СтрокаЗаголовкаИсходныхДанных = 1;
	Объект.СтрокаЭталонаИсходныхДанных = НачальнаяСтрока;
	
	Предупреждение = "";
	ДиапазонСтрок = Объект.КонечнаяСтрокаИсходныхДанных - Объект.НачальнаяСтрокаИсходныхДанных;
	Если ДиапазонСтрок >= 1000 Тогда
		Предупреждение = "Текущий диапазон строк таблицы: " + ДиапазонСтрок + ".
		|
		|Не рекомендуется создавать большие документы.
		|
		|Работа с большими документами затруднена:
		|- Замедление работы с документом в экранной форме;
		|- Возможные проблемы с записью/проведением документа.
		|
		|1С:Предприятие 8.Х:
		|- Количество строк табличной части документа ограничено 99 999.";
	КонецЕсли;
	
	Возврат Предупреждение;
	
КонецФункции

// Проверить правильность расширения файла для выбранного метода загрузки, т.к. у методов "MS Excel" и "MS ADODB" есть ограничение на рсширение файла (только .xls, xlsx).
// 
&НаКлиенте
Функция ФайлПроверитьРасширениеДляМетодаЗагрузки(ФайлДанных)
	
	Если (Объект.ТипСОМОбъекта = "MSOffice" ИЛИ Объект.ТипСОМОбъекта = "ADODB") И ЗначениеЗаполнено(Объект.ФайлИсходныхДанных)
		И (НЕ ВРег(ФайлРасширение(Объект.ФайлИсходныхДанных)) = ".XLS" И НЕ ВРег(ФайлРасширение(Объект.ФайлИсходныхДанных)) = ".XLSX") Тогда
		
		Предупреждение("Метод загрузки """ + Объект.ТипСОМОбъекта + """ не поддерживает файлы с расширением """ + ФайлРасширение(Объект.ФайлИсходныхДанных) + """,
		|
		|Необходимо:
		|- Выбрать файл с расширением "".xls"" или "".xlsx"".
		|или
		|- Выбрать метод загруки ""LibreOffice"" и повторно выбрать последний файл.");
		
		Объект.ФайлИсходныхДанных = Неопределено;
		Объект.ИмяЛистаИсходныхДанных = "";
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЕ МЕНЮ.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Загрузка данных из файла.
// 
&НаКлиенте
Процедура ОМЗагрузитьИзФайла(Команда)
	
	Если (ЗначениеЗаполнено(Объект.ФайлИсходныхДанных) И ЗначениеЗаполнено(Объект.НомерЛистаИсходныхДанных)) Тогда
		
		Если НЕ ФайлСуществует(Объект.ФайлИсходныхДанных) Тогда
			Предупреждение("Файл: " + Объект.ФайлИсходныхДанных + " не существует.");
			ФормаОпределитьДоступнность();
			Возврат;
		КонецЕсли;
	
		Если Объект.ТипСОМОбъекта = "" Тогда
			Предупреждение("MS Office/LibreOffice/OpenOffice/MS MDAC не установлен.
			|
			|ЗАГРУЗКА НЕВОЗМОЖНА.");
			Возврат;
		КонецЕсли;
		
		Если Объект.ДокументыСозданы Тогда
			
			Действие = "Произвести повторную загрузку данных из файла
			|""" + Объект.ФайлИсходныхДанных + """?";
			Комментарий = "
			|ВАЖНО:
			|Необходимо будет формировать/изменять документы:
			|1. ""Поступление товаров"" / (""Оприходование товаров"", ""Установка себестоимости"");
			|2. ""Установка цены номенклатуры"".
			|";
			
			Если НЕ ЗадатьВопросОНовомДействии(Действие, Комментарий) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Состояние("" + Объект.ПараметрыСеансаОбработки.СинонимОбработки + "
		|" + Объект.ТипСОМОбъекта + ": Считывание из " + Объект.ФайлИсходныхДанных);
		
		ФормаОчистить(Команда.Имя);

		Предупреждение = ОМЗагрузитьИзФайлаНаСервере(Объект.ФайлИсходныхДанных, Объект.НомерЛистаИсходныхДанных);
		
		Если Объект.ТаблицаИсходныхДанных.Количество() = 0 Тогда
			Объект.НомерЛистаИсходныхДанных = 1;
		КонецЕсли;
		
		ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаТаблицаИсходныхДанных;
		
		ФормаОпределитьДоступнностьПоУмолчанию();
	
		Если ЗначениеЗаполнено(Предупреждение) Тогда
			Предупреждение(Предупреждение);
		КонецЕсли;
		
	Иначе
		
		Предупреждение("Неопределены параметры:
		|ФайлИсходныхДанных и(или) НомерЛистаИсходныхДанных.
		|Обработка прервана.");
		
	КонецЕсли;
	
КонецПроцедуры

// Загрузка данных из файла. Вызов процедуры загрузки методами: MSOffice/LibreOffice/ADODB из МодуляОбъекта.
// 
&НаСервере
Функция ОМЗагрузитьИзФайлаНаСервере(ФайлИсходныхДанных, НомерЛиста)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	Объект.СтрокаЗаголовкаИсходныхДанных = ?(Объект.СтрокаЗаголовкаИсходныхДанных = 0, 1, 1);
	Объект.НачальнаяСтрокаИсходныхДанных = ?(Объект.НачальнаяСтрокаИсходныхДанных = 0, 2, Объект.НачальнаяСтрокаИсходныхДанных);
	Объект.СтрокаЭталонаИсходныхДанных	 = ?(Объект.СтрокаЭталонаИсходныхДанных	  = 0, 2, Объект.СтрокаЭталонаИсходныхДанных);
	
	Если Объект.ТипСОМОбъекта = "MSOffice" ИЛИ Объект.ТипСОМОбъекта = "ADODB" Тогда
		нЗаголовок	= Объект.СтрокаЗаголовкаИсходныхДанных;
		нНачальная	= Объект.НачальнаяСтрокаИсходныхДанных;
		нКонечная	= Объект.КонечнаяСтрокаИсходныхДанных;
	Иначе
		нЗаголовок	= Объект.СтрокаЗаголовкаИсходныхДанных - 1;
		нНачальная	= Объект.НачальнаяСтрокаИсходныхДанных - 1;
		нКонечная	= Объект.КонечнаяСтрокаИсходныхДанных  - 1;
	КонецЕсли;
	
	нЗаголовок	= ?(нЗаголовок < 0, 0, нЗаголовок);
	нНачальная	= ?(нНачальная < 0, 0, нНачальная);
	нКонечная	= ?(нКонечная  < 0, 0, нКонечная);
	
	ТаблицаИсходныхДанных 	= Новый ТаблицаЗначений;
	Если Объект.ТипСОМОбъекта = "LibreOffice" Тогда
		ТаблицаИсходныхДанных = ЭтотОбъект.ЗагрузитьМетодом_LOCalc(ФайлИсходныхДанных, НомерЛиста, нЗаголовок, нНачальная, нКонечная, Объект.КоличествоСтрокExcel);
	ИначеЕсли Объект.ТипСОМОбъекта = "MSOffice" Тогда
		ТаблицаИсходныхДанных = ЭтотОбъект.ЗагрузитьМетодом_MSExcel(ФайлИсходныхДанных, НомерЛиста, нЗаголовок, нНачальная, нКонечная, Объект.КоличествоСтрокExcel);
	ИначеЕсли Объект.ТипСОМОбъекта = "ADODB" Тогда
		ТаблицаИсходныхДанных = ЭтотОбъект.ЗагрузитьМетодом_MSADODB(ФайлИсходныхДанных, Объект.ИмяЛистаИсходныхДанных, нЗаголовок, нНачальная, нКонечная, Объект.КоличествоСтрокExcel);
	КонецЕсли;
	
	Объект.КоличествоСтрокExcel = ?(Объект.КоличествоСтрокExcel < ТаблицаИсходныхДанных.Количество(), ТаблицаИсходныхДанных.Количество(), Объект.КоличествоСтрокExcel);
	
	Элементы.НачальнаяСтрокаИсходныхДанных.МаксимальноеЗначение = Объект.КоличествоСтрокExcel;
	Элементы.КонечнаяСтрокаИсходныхДанных.МаксимальноеЗначение 	= Объект.КоличествоСтрокExcel;
	
	Объект.НачальнаяСтрокаИсходныхДанных= ?(Объект.НачальнаяСтрокаИсходныхДанных = 0, 2, Объект.НачальнаяСтрокаИсходныхДанных);
	Объект.НачальнаяСтрокаИсходныхДанных= ?(Объект.НачальнаяСтрокаИсходныхДанных > Объект.КоличествоСтрокExcel, Объект.КоличествоСтрокExcel, Объект.НачальнаяСтрокаИсходныхДанных);
	
	Объект.КонечнаяСтрокаИсходныхДанных	= ?(Объект.КонечнаяСтрокаИсходныхДанных = 0, Объект.КоличествоСтрокExcel, Объект.КонечнаяСтрокаИсходныхДанных);
	Объект.КонечнаяСтрокаИсходныхДанных	= ?(Объект.КонечнаяСтрокаИсходныхДанных > Объект.КоличествоСтрокExcel, Объект.КоличествоСтрокExcel, Объект.КонечнаяСтрокаИсходныхДанных);
	
	Элементы.СтраницаТаблицаИсходныхДанных.Заголовок = "Таблица ""Excel"" (R" + ТаблицаИсходныхДанных.Количество() + "C" + ТаблицаИсходныхДанных.Колонки.Количество() + ")";
		
	Предупреждение = "";
	ДиапазонСтрок = Объект.КонечнаяСтрокаИсходныхДанных - Объект.НачальнаяСтрокаИсходныхДанных;
	Если ДиапазонСтрок >= 1000 Тогда
		Предупреждение = "Текущий диапазон строк таблицы: " + ДиапазонСтрок + ".
		|
		|Не рекомендуется создавать большие документы.
		|
		|Работа с большими документами затруднена:
		|- Замедление работы с документом в экранной форме;
		|- Возможные проблемы с записью/проведением документа.
		|
		|1С:Предприятие 8.Х:
		|- Количество строк табличной части документа ограничено 99 999.";
	КонецЕсли;
		
	ТаблицаФормы = ФормаСоздатьРеквизитТипаТаблицаФормы(Элементы.ТаблицаИсходныхДанных.Имя, Элементы.ТаблицаИсходныхДанных.ПутьКДанным, ТаблицаИсходныхДанных, Элементы.СтраницаТаблицаИсходныхДанных);
	
	Возврат Предупреждение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ПАРАМЕТРЫ".
//
// КЛЮЧЕВОЙ ПАРАМЕТР. 
// Параметр, принципиально влияющий на формируемые данные в таблице "1С:Предприятие".
// Параметр, влияющий на поведение формы.
//
// ВАЖНЫЙ ПАРАМЕТР.
// Параметр, влияющий на формируемые данные в таблице "1С:Предприятие".
// Параметр, который может быть незаполненным.
//
// Блокируемый реквизит. Реквизит справочника "Номенклатура", который не должен изменяться после записи элемента.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// КЛЮЧЕВОЙ ПАРАМЕТР. Проверка введенного значения: ТипДокумента во взаимосвязи с другими параметрами. Влияет на поведение формы.
//
&НаКлиенте
Процедура ПараметрыТипДокументаПриИзменении(Элемент)
	
	Если Объект.ТипДокументаТекущий = Объект.ТипДокумента Тогда
		ФормаОпределитьДоступнность();
		Возврат;
	КонецЕсли;
	
	// 1.
	ПараметрыТипДокумента_СформироватьСтруктуруПроверяемыхРеквизитовФормы(Истина);
	
	// 2.
	Документы_Неопределено();	// Документы = Неопределено.
	
	// 3.
	ОсновноеДействиеЗаголовки();
	
	// 4.
	ПараметрыСправочникиФлажки_Ложь();
	
	// 5.
	Предупреждение = ПараметрыТипДокументаПриИзмененииНаСервере();
	Если ЗначениеЗаполнено(Предупреждение) Тогда
		Предупреждение(Предупреждение);
	КонецЕсли;
	
	// 6.
	Объект.ТипДокументаТекущий = Объект.ТипДокумента;
	
	ПараметрыИзменениеКлючевогоЗначения(Истина);	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТипДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ТипДокумента = Объект.ТипДокументаТекущий;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТипДокумента_СформироватьСтруктуруПроверяемыхРеквизитовФормы(ПоказатьСообщение = Ложь)
	
	Если ПоказатьСообщение Тогда
		Состояние("Подождите. Производится определение необходимых реквизитов ...");
	КонецЕсли;
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	СтруктураПроверяемыхРеквизитов.Вставить("АналитикаХозяйственнойОперации", ЕстьРеквизитДокумента("АналитикаХозяйственнойОперации"	));
	СтруктураПроверяемыхРеквизитов.Вставить("ХозяйственнаяОперация"			, ЕстьРеквизитДокумента("ХозяйственнаяОперация"				));
	СтруктураПроверяемыхРеквизитов.Вставить("КонтрАгент"					, ЕстьРеквизитДокумента("КонтрАгент"						));
	СтруктураПроверяемыхРеквизитов.Вставить("Организация"					, ЕстьРеквизитДокумента("Организация"						));
	СтруктураПроверяемыхРеквизитов.Вставить("Склад"							, ЕстьРеквизитДокумента("Склад"								));
	СтруктураПроверяемыхРеквизитов.Вставить("Подразделение"					, ЕстьРеквизитДокумента("Подразделение"						));
	СтруктураПроверяемыхРеквизитов.Вставить("ФизическоеЛицо"				, ЕстьРеквизитДокумента("ФизическоеЛицо"					));
	СтруктураПроверяемыхРеквизитов.Вставить("ЗаказПоставщику"				, ЕстьРеквизитДокумента("ЗаказПоставщику"					));
	СтруктураПроверяемыхРеквизитов.Вставить("ДокументОснование"				, ЕстьРеквизитДокумента("ДокументОснование"					));
	СтруктураПроверяемыхРеквизитов.Вставить("НалогообложениеНДС"			, ЕстьРеквизитДокумента("НалогообложениеНДС"				));
	СтруктураПроверяемыхРеквизитов.Вставить("УчитыватьНДС"					, ЕстьРеквизитДокумента("УчитыватьНДС"						));
	СтруктураПроверяемыхРеквизитов.Вставить("ЦенаВключаетНДС"				, ЕстьРеквизитДокумента("ЦенаВключаетНДС"					));
	СтруктураПроверяемыхРеквизитов.Вставить("СтатьяРасходов"				, ЕстьРеквизитДокумента("СтатьяРасходов"					));
	СтруктураПроверяемыхРеквизитов.Вставить("СтатьяДоходов"					, ЕстьРеквизитДокумента("СтатьяДоходов"						));
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// УТОЧНЕНИЕ ТИПОВ ДОКУМЕНТОВ: ДокументКорректируемый, ДокументОснование В КОНФИГУРАЦИЯХ:
// "РОЗНИЦА 2.0", "УПРАВЛЕНИЕ ТОРГОВЛЕЙ 11.0", "КОМПЛЕКСНАЯ АВТОМАТИЗАЦИЯ 1.1", "БУХГАЛТЕРИЯ ПРЕДПРИЯТИЯ 3.0".
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// КЛЮЧЕВОЙ ПАРАМЕТР. Проверка введенного значения: ТипДокумента во взаимосвязи с другими параметрами. Влияет на поведение формы.
// 
&НаСервере
Функция ПараметрыТипДокументаПриИзмененииНаСервере()
	
	Объект.ДокументОснование 		= Неопределено;
	Объект.ДокументЗаказПоставщику 	= Неопределено;
	
	Если ЭтоДокументОприходования(Объект.ТипДокумента) Тогда	// Оприходование товаров.
		Объект.ХозяйственнаяОперация= Неопределено;
		
		Объект.КонтрАгент 			= Неопределено;
		Объект.Поставщик 			= Неопределено;
		Объект.НалогообложениеНДС	= Неопределено;
		Объект.УчитыватьНДС			= Ложь;
		Объект.ЦенаВключаетНДС		= Ложь;
		
		Объект.СтатьяРасходов		= Неопределено;
		
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
		
			// НоменклатураПоставщика = Номенклатура.
			Элементы.Таблица1СНоменклатураПоставщика.Видимость	= Истина;
			
			// Реквизит ДокументКорректируемый имеет тип ДокументСсылка. Уточнение.
			ОграничитьТипЭлемента("ДокументКорректируемый", "ДокументСсылка.ОприходованиеТоваров");
			
			// Реквизит ДокументОснование имеет тип ДокументСсылка. Уточнение.
			ОграничитьТипЭлемента("ДокументОснование", "ДокументСсылка.ИнвентаризацияТоваров");						// Только для документа ОприходованиеТоваров.
			
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
			
			// НоменклатураПоставщика формируется только по документу Поступление.
			Элементы.Таблица1СНоменклатураПоставщика.Видимость	= Ложь;
			
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
			
			// Реквизит ДокументКорректируемый имеет тип ДокументСсылка. Уточнение.
			Если Объект.ТипДокумента.СодержитТип(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")) Тогда
				
				ОграничитьТипЭлемента("ДокументКорректируемый", "ДокументСсылка.ОприходованиеИзлишковТоваров");
				
			Иначе
				
				Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда
					
					ОграничитьТипЭлемента("ДокументКорректируемый", "ДокументСсылка.ПрочееОприходованиеТоваров");
				
					Объект.ХозяйственнаяОперация = ПараметрыПеречисленияХозяйственнаяОперация("ПоступлениеИзПроизводства");
					
				КонецЕсли;

			КонецЕсли;
			
			// Реквизит ДокументОснование имеет тип ДокументСсылка. Уточнение.
			ОграничитьТипЭлемента("ДокументОснование", "ДокументСсылка.ПриказНаПроведениеИнвентаризацииТоваров");	// Только для документа ОприходованиеТоваров.
			
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		КонецЕсли;
		
	ИначеЕсли ЭтоДокументПоступления(Объект.ТипДокумента) Тогда	// Поступление товаров.
			
		Объект.СтатьяДоходов = Неопределено;
	
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
			
			Объект.ХозяйственнаяОперация			= Неопределено;
			Объект.АналитикаХозяйственнойОперации 	= Неопределено;
		
			// НоменклатураПоставщика формируется только по документу Поступление.
			Элементы.Таблица1СНоменклатураПоставщика.Видимость	= Истина;
			
			// Реквизит ДокументКорректируемый имеет тип ДокументСсылка. Уточнение.
			ОграничитьТипЭлемента("ДокументКорректируемый", "ДокументСсылка.ПоступлениеТоваров");
			
			// Реквизит ДокументОснование называется ДокументЗаказПоставщику. Определен в СопоставлениеОбработкиИКонфигурации().
			
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
			// НоменклатураПоставщика формируется только по документу Поступление.
			Элементы.Таблица1СНоменклатураПоставщика.Видимость	= Истина;
			
			Объект.ХозяйственнаяОперация = ПараметрыПеречисленияХозяйственнаяОперация("ЗакупкаУПоставщика");
			
			// Реквизит ДокументКорректируемый имеет тип ДокументСсылка. Уточнение.
			ОграничитьТипЭлемента("ДокументКорректируемый", "ДокументСсылка.ПоступлениеТоваровУслуг");
			
			// Реквизит ДокументОснование называется ДокументЗаказПоставщику. Определен в СопоставлениеОбработкиИКонфигурации().
			
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредупреждениеОпределенСкладУкажитеВидЦены();
	
КонецФункции

&НаКлиенте
Процедура ПараметрыАналитикаХозяйственнойОперацииПриИзменении(Элемент)
	
	Объект.ХозяйственнаяОперация = ПараметрыАналитикаХозяйственнойОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыАналитикаХозяйственнойОперацииПриИзмененииНаСервере()
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Возврат Объект.АналитикаХозяйственнойОперации.ХозяйственнаяОперация;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// КЛЮЧЕВОЙ ПАРАМЕТР. Проверка введенного значения: ДокументКорректируемый во взаимосвязи с другими параметрами. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыДокументКорректируемыйПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументКорректируемый) Тогда
		
		ДокументОснование = ПолучитьДляДокументаПоступлениеДокументОснование(Объект.ДокументКорректируемый);
		
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
			Объект.ДокументЗаказПоставщику = ДокументОснование;
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
			Объект.ДокументЗаказПоставщику = ДокументОснование;
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		КонецЕсли;
		
		Объект.ДокументПоступление = Объект.ДокументКорректируемый;
		
		ПараметрыДокументКорректируемыйПриИзмененииНаСервере();
		ПараметрыСкладПриИзменении(Элемент);
		
		// Связанный документ.
		Объект.ДокументУстановкаЦены = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументПоступление, "УстановкаЦенНоменклатуры");

		ПараметрыКорректируемыйДокументПриИзмененииНаСервере();
		
	Иначе
		Документы_Неопределено();
	КонецЕсли;
	
	Объект.ДокументыСозданы = ЗначениеЗаполнено(Объект.ДокументКорректируемый);
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.

КонецПроцедуры

// Получить параметры по корректируемому Документу.
//
&НаСервере
Процедура ПараметрыДокументКорректируемыйПриИзмененииНаСервере()
	
	Объект.КонтрАгент 	= Объект.ДокументКорректируемый.КонтрАгент;
	Объект.Склад		= Объект.ДокументКорректируемый.Склад;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Объект.УчитыватьНДС 	= Объект.ДокументКорректируемый.УчитыватьНДС;
		Объект.ЦенаВключаетНДС 	= Объект.ДокументКорректируемый.ЦенаВключаетНДС;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

// Получить Документ-Основание = ЗаказПоставщику.
//
&НаСервере
Функция ПолучитьДляДокументаПоступлениеДокументОснование(ДокПоступление)
	
	ДокументОснование = Неопределено;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		ДокументОснование = ДокПоступление.ЗаказПоставщику;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		ДокументОснование = ДокПоступление.ЗаказПоставщику;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

// Проверить есть ли реквизит ДокументОснование или ЗаказПоставщику.
//
&НаСервере
Функция ЕстьРеквизитДокумента(ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументМД = МетаДанные.НайтиПоТипу(Объект.ТипДокумента.Типы()[0]);
	
	Если НЕ ДокументМД.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Интересующие Табличные части: "Товары", "ТоварыПоДаннымПоставщика".
	// Документ "Оприходование", "УстановкаЦен" - не имеют Табличной части "ТоварыПоДаннымПоставщика".
	// Документ "Поступление" Табличная часть "Товары" имеет большее количество реквизитов, чем Табличная часть "ТоварыПоДаннымПоставщика".
	// При первоначальном заполнении документа "Поступление" заполняется только Табличная часть "Товары".
	// Табличная часть "ТоварыПоДаннымПоставщика" заполняется непосредственно в форме документа при имеющихся расхождениях по поставке.
	// Другие возможные Табличные части в данной Обработке не заполняются.
	Попытка
		Если НЕ ДокументМД.ТабличныеЧасти.Товары.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

// Получить Первый из списка связанных документов УстановкаЦен.
//
&НаСервере
Функция ПолучитьДляДокументаСвязанныйДокумент(ИсходныйДокумент, ИмяСвязанногоДокумента)
	
	ЗначениеКритерияОтбора = ИсходныйДокумент;
	
	СвязанныйДокумент = Неопределено;
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеДокументы.Ссылка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
		
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ДокументЗапроса ИЗ РезультатЗапроса Цикл
			Если ТипЗнч(ДокументЗапроса.Ссылка) = Тип("ДокументСсылка." + ИмяСвязанногоДокумента) Тогда
				СвязанныйДокумент = ДокументЗапроса.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвязанныйДокумент;
	
КонецФункции

&НаСервере
Процедура ПараметрыКорректируемыйДокументПриИзмененииНаСервере()
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументКорректируемыйОчистка(Элемент, СтандартнаяОбработка)
	
	Документы_Неопределено();
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументЗаказПоставщикуПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументЗаказПоставщику) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПоступление = Неопределено;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		ДокументПоступление = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументЗаказПоставщику, "ПоступлениеТоваров");
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		ДокументПоступление = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументЗаказПоставщику, "ПоступлениеТоваровУслуг");
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПоступление) Тогда
		Предупреждение("Документ: 
		|" + Объект.ДокументЗаказПоставщику + "
		|
		|служит основанием для: 
		|" + ДокументПоступление + "
		|
		|использование данного ""Заказа Поставщику"" некорректно.");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДокументОснованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОприходование = Неопределено;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		ДокументОприходование = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументОснование, "ОприходованиеТоваров");
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		ДокументОприходование = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументОснование, "ОприходованиеИзлишковТоваров");
		Если Объект.ИспользоватьПрочееОприходованиеТоваров И НЕ ЗначениеЗаполнено(ДокументОприходование) Тогда
			ДокументОприходование = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументОснование, "ПрочееОприходованиеТоваров");
		КонецЕсли;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОприходование) Тогда
		Предупреждение("Документ: 
		|" + Объект.ДокументОснование + "
		|
		|служит основанием для: 
		|" + ДокументОприходование + "
		|
		|использование данного Документа-Основания некорректно.");
	КонецЕсли;

КонецПроцедуры

// Значение актуально только для документа "Поступление товаров".
// 
&НаКлиенте
Процедура ПараметрыКонтрАгентПриИзменении(Элемент)
	
	Объект.Поставщик = ПараметрыКонтрАгентПриИзмененииНаСервере(Объект.КонтрАгент);
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.

КонецПроцедуры

// Значение актуально только для документа "Поступление товаров".
// 
&НаСервере
Функция ПараметрыКонтрАгентПриИзмененииНаСервере(КонтрАгент)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Возврат Неопределено;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Если ЗначениеЗаполнено(Объект.КонтрАгент) Тогда
			Возврат КонтрАгент.Партнер;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Неопределено;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// КЛЮЧЕВОЙ ПАРАМЕТР. Проверка введенного значения: Склад во взаимосвязи с другими параметрами: Магазин. Влияет на поведение формы.
// Проверка введенного значения: Склад на соответствие Магазину.
// 
&НаКлиенте
Процедура ПараметрыСкладПриИзменении(Элемент)
	
	Если НЕ Объект.СкладТекущий = Объект.Склад Тогда
		
		Если Объект.ДокументыСозданы Тогда
			Документы_Неопределено();	// Документы = Неопределено.
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Магазин = ПараметрыПолучитьПоСкладуМагазинНаСервере(Объект.Склад);
		
		Объект.Организация = ПараметрыПолучитьПоСкладуОрганизациюНаСервере(Объект.Склад);
		
		Объект.ВидЦеныЗакупочная = ПараметрыПолучитьПоСкладуВидЦеныУчетнаяНаСервере(Объект.Склад);
		Объект.ВидЦеныРозничная = ПараметрыПолучитьПоСкладуВидЦеныРозничнаяНаСервере(Объект.Склад);
		Объект.ВидЦеныРасчетная = ПараметрыПолучитьИзКонстантыВидМаксимальноДопустимыхЦенПродажиНаСервере();
	Иначе	
		Объект.Магазин = Неопределено;
		Объект.Организация = Неопределено;
	КонецЕсли;
	
	Предупреждение = ПредупреждениеОпределенСкладУкажитеВидЦены();
	Если ЗначениеЗаполнено(Предупреждение) Тогда
		Предупреждение(Предупреждение);
	КонецЕсли;
	
	Объект.СкладТекущий = Объект.Склад;
		
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// Заполнение реквизитов Объекта в зависимости от Склада.
//
&НаСервере
Процедура ПараметрыСкладПриИзмененииНаСервере(Склад)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Магазин = ПараметрыПолучитьПоСкладуМагазинНаСервере(Склад);
		
		Объект.Организация = ПараметрыПолучитьПоСкладуОрганизациюНаСервере(Склад);
		
		Объект.ВидЦеныЗакупочная = ПараметрыПолучитьПоСкладуВидЦеныУчетнаяНаСервере(Склад);
		Объект.ВидЦеныРозничная = ПараметрыПолучитьПоСкладуВидЦеныРозничнаяНаСервере(Склад);
		Объект.ВидЦеныРасчетная = ПараметрыПолучитьИзКонстантыВидМаксимальноДопустимыхЦенПродажиНаСервере();
	Иначе	
		Объект.Магазин = Неопределено;
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Формрует текст сообщения о необходимости выбрать правильную цену.
// 
&НаСервере
Функция ПредупреждениеОпределенСкладУкажитеВидЦены()
	Предупреждение = "";
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ЭтоСкладОптовый(Объект.Склад) Тогда								// Оптовый склад.
			ТипСклада = "Оптовый";
		ИначеЕсли ЭтоСкладРозничный(Объект.Склад) Тогда							// Розничный склад
			ТипСклада = "Розничный";
		ИначеЕсли ЭтоСкладНТТ(Объект.Склад) Тогда								// НТТ-Склад.
			ТипСклада = "Склад НТТ";
		ИначеЕсли ЭтоСкладУправляющейСистемы(Объект.Склад) Тогда				// Склад управляющей системы.
			ТипСклада = "Склад управляющей системы";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦеныЗакупочная) Тогда
			Предупреждение = "Документ: """ + Объект.ТипДокумента + """:
			|
			|В качестве Склада-Получателя указан """ + ТипСклада + """ склад.
			|
			|В реквизите ""Вид цены Закупочная"" укажите вид цены учета на складе.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Предупреждение;
КонецФункции

// Возвращает ссылку на Магазин из данных о Складе.
// 
&НаСервере
Функция ПараметрыПолучитьПоСкладуМагазинНаСервере(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Возврат Склад.Магазин;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда	// Есть склады, но нет магазинов. Возврат "как есть".
		Возврат Объект.Магазин;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Объект.Магазин;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Объект.Магазин;
	КонецЕсли;
	
	Возврат Объект.Магазин;
	
КонецФункции

// Возвращает ссылку на Организацию из данных о Складе.
// 
&НаСервере
Функция ПараметрыПолучитьПоСкладуОрганизациюНаСервере(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Возврат Склад.Организация;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда	// Организация по Складу явно не определяется. Возврат "как есть".
		Возврат Объект.Организация;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Объект.Организация;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Объект.Организация;
	КонецЕсли;
	
	Возврат Объект.Организация;
	
КонецФункции

// Возвращает ссылку на Организацию из данных о Складе.
// 
&НаСервере
Функция ПараметрыПолучитьПоСкладуВидЦеныУчетнаяНаСервере(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда						// Вид цены по Складу не определяется. Возврат "как есть".
		Возврат Объект.ВидЦеныЗакупочная;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
//		ВидЦеныУчетная = ?(ЗначениеЗаполнено(Склад.УчетныйВидЦены), Склад.УчетныйВидЦены, Объект.ВидЦеныЗакупочная);
		Возврат Склад.УчетныйВидЦены;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Объект.ВидЦеныЗакупочная;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Объект.ВидЦеныЗакупочная;
	КонецЕсли;
	
	Возврат Объект.ВидЦеныЗакупочная;
	
КонецФункции

// Возвращает ссылку на Организацию из данных о Складе.
// 
&НаСервере
Функция ПараметрыПолучитьПоСкладуВидЦеныРозничнаяНаСервере(Склад)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда						// Вид цены по Складу не определяется. Возврат "как есть".
		Возврат Объект.ВидЦеныРозничная;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		ВидЦеныРозничная = ?(ЗначениеЗаполнено(Склад.РозничныйВидЦены), Склад.РозничныйВидЦены, Объект.ВидЦеныРозничная);
		Возврат ВидЦеныРозничная;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Объект.ВидЦеныРозничная;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Объект.ВидЦеныРозничная;
	КонецЕсли;
	
	Возврат Объект.ВидЦеныРозничная;
	
КонецФункции

// Возвращает ссылку на Организацию из данных о Складе.
// 
&НаСервере
Функция ПараметрыПолучитьИзКонстантыВидМаксимальноДопустимыхЦенПродажиНаСервере()
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда						// Вид цены по Складу не определяется. Возврат "как есть".
		Возврат Объект.ВидЦеныРасчетная;
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда	// В конфигурации вариант расчетной цены может быть ВидМаксимальноДопустимыхЦенПродажи.
		Возврат Константы["ВидМаксимальноДопустимыхЦенПродажи"].Получить();
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		Возврат Объект.ВидЦеныРасчетная;
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		Возврат Объект.ВидЦеныРасчетная;
	КонецЕсли;
	
	Возврат Объект.ВидЦеныРасчетная;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыПодразделениеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСтатьяДоходовПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда	
			Если НЕ ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
				Предупреждение("Тип Документа не определен.");
				Возврат;
			КонецЕсли;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
			ТипДокументаПрочееОприходованиеТоваров = Новый ОписаниеТипов(Массив);						// ТОЛЬКО ОДИН - ДОКУМЕНТ ПОСТУПЛЕНИЕ.
			
			ХозОперацияВозвратИзЭксплуатации 		= ПараметрыПеречисленияХозяйственнаяОперация("ВозвратИзЭксплуатации");
			ХозОперацияПоступлениеИзПроизводства 	= ПараметрыПеречисленияХозяйственнаяОперация("ПоступлениеИзПроизводства");
			
			ХозОперацияЗакупкаУПоставщика			= ПараметрыПеречисленияХозяйственнаяОперация("ЗакупкаУПоставщика");
			ХозОперацияЗакупкаУПоставщикаРеглУчет	= ПараметрыПеречисленияХозяйственнаяОперация("ЗакупкаУПоставщикаРеглУчет");
			ХозОперацияЗакупкаЧерезПодотчетноеЛицо	= ПараметрыПеречисленияХозяйственнаяОперация("ЗакупкаЧерезПодотчетноеЛицо");
			ХозОперацияПриемНаКомиссию				= ПараметрыПеречисленияХозяйственнаяОперация("ПриемНаКомиссию");
			ХозОперацияЗакупкаПоИмпорту				= ПараметрыПеречисленияХозяйственнаяОперация("ЗакупкаПоИмпорту");
			
			Если Объект.ТипДокумента = ТипДокументаПрочееОприходованиеТоваров Тогда
				
				Если НЕ Объект.ХозяйственнаяОперация = ХозОперацияВозвратИзЭксплуатации И НЕ Объект.ХозяйственнаяОперация = ХозОперацияПоступлениеИзПроизводства Тогда
					
					Предупреждение("Возможные Хозяйственные операции: 
					|для документа типа """ + Объект.ТипДокумента + """
					|
					|1. Возврат из эксплуатации;
					|2. Поступление из производства.");
					//Объект.ХозяйственнаяОперация = Неопределено;
					Возврат;
					
				КонецЕсли;
			
				Если Объект.ТипДокумента = ТипДокументаПрочееОприходованиеТоваров И Объект.ХозяйственнаяОперация = ХозОперацияВозвратИзЭксплуатации И НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
					Предупреждение("Необходимо ввести Физическое лицо");
				КонецЕсли;
				
			ИначеЕсли ЭтоДокументПоступления(Объект.ТипДокумента) Тогда		// Возможные варианты ХозяйственнаяОперация у документа ПоступлениеТоваровУслуг.
				
				Если НЕ Объект.ХозяйственнаяОперация = ХозОперацияЗакупкаУПоставщика 
					И НЕ Объект.ХозяйственнаяОперация = ХозОперацияЗакупкаУПоставщикаРеглУчет
					И НЕ Объект.ХозяйственнаяОперация = ХозОперацияЗакупкаЧерезПодотчетноеЛицо 
					И (Объект.ИспользоватьКомиссиюПриЗакупках И НЕ Объект.ХозяйственнаяОперация = ХозОперацияПриемНаКомиссию)
					И (Объект.ИспользоватьИмпортныеЗакупки И НЕ Объект.ХозяйственнаяОперация = ХозОперацияЗакупкаПоИмпорту) Тогда
					
					Предупреждение = "Возможные Хозяйственные операции: 
					|для документа типа """ + Объект.ТипДокумента + """
					|
					|- Закупка у поставщика;
					|- Закупка по регл. учету;
					|- Закупка через подотчетное лицо;";
					
					Если Объект.ИспользоватьКомиссиюПриЗакупках Тогда
						Предупреждение = Предупреждение + "
						|- Прием на комиссию;";
					КонецЕсли;
					
					Если Объект.ИспользоватьИмпортныеЗакупки Тогда
						Предупреждение = Предупреждение + "
						|- Закупка по импорту.";
					КонецЕсли;
					
					Предупреждение(Предупреждение);
					
					//Объект.ХозяйственнаяОперация = Неопределено;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПеречисленияХозяйственнаяОперация(ИмяХозОперации)
	Попытка
		Возврат Перечисления.ХозяйственныеОперации[ИмяХозОперации];
	Исключение
	    Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПараметрыФизическоеЛицоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Если Объект.ИспользоватьПрочееОприходованиеТоваров Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
				Предупреждение("Тип Документа не определен.");
				Возврат;
			КонецЕсли;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"));
			ТипДокументаОприходования = Новый ОписаниеТипов(Массив);						// ТОЛЬКО ОДИН - ДОКУМЕНТ ПОСТУПЛЕНИЕ.
			
			ХозОперацияВозвратИзЭксплуатации = ПараметрыПеречисленияХозяйственнаяОперация("ВозвратИзЭксплуатации");
			
			Если Объект.ТипДокумента = ТипДокументаОприходования И НЕ Объект.ХозяйственнаяОперация = ХозОперацияВозвратИзЭксплуатации Тогда
				Предупреждение("Хозяйственная операция: """ + ХозОперацияВозвратИзЭксплуатации + """
				|не указана.");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. Правило "Хорошего тона". Справочник "Номенклатура" должен быть СТРУКТУРИРОВАННЫМ.
// 
&НаКлиенте
Процедура ПараметрыГруппаНоменклатурыПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// КЛЮЧЕВОЙ ПАРАМЕТР. "БЛОКИРУЕМЫЙ РЕКВИЗИТ". Из ВидаНоменклатуры берется ТипНоменклатуры. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыВидНоменклатурыПриИзменении(Элемент)
	
	ПараметрыТипНоменклатурыПриИзменении(Объект.ВидНоменклатуры);
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Попытка
			ГруппаДоступа = ПараметрыВидНоменклатурыПолучитьГруппуДоступа(Объект.ВидНоменклатуры);
			Если ЗначениеЗаполнено(ГруппаДоступа) Тогда
				Объект.ГруппаДоступа = ГруппаДоступа;
			КонецЕсли;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВидНоменклатурыПолучитьГруппуДоступа(ВидНоменклатуры)
	
	Попытка
		Возврат ВидНоменклатуры.ГруппаДоступа;
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// КЛЮЧЕВОЙ ПАРАМЕТР. "БЛОКИРУЕМЫЙ РЕКВИЗИТ". Возвращает ссылку на ТипНоменклатуры из данных о ВидеНоменклатуры.
// 
&НаСервере
Процедура ПараметрыТипНоменклатурыПриИзменении(ВидНоменклатуры)
	
	Объект.ТипНоменклатуры = ВидНоменклатуры.ТипНоменклатуры;
	
КонецПроцедуры

// КЛЮЧЕВОЙ ПАРАМЕТР. Проверяет значения в Реквизитах: ВидЦеныЗакупочная, ВидЦеныРозничная, ВидЦеныРасчетная. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыВидЦеныЗакупочнаяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныЗакупочная) И Объект.ВидЦеныЗакупочная = Объект.ВидЦеныРозничная Тогда
		Предупреждение("Виды цен ""Закупочная"" и ""Розничная"" не должны совпадать.");
		Объект.ВидЦеныРозничная = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныЗакупочная) И Объект.ВидЦеныЗакупочная = Объект.ВидЦеныРасчетная Тогда
		Предупреждение("Виды цен ""Закупочная"" и ""Расчетная"" не должны совпадать.");
		Объект.ВидЦеныРасчетная = Неопределено;
	КонецЕсли;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// КЛЮЧЕВОЙ ПАРАМЕТР. Проверяет значения в Реквизитах: ВидЦеныЗакупочная, ВидЦеныРозничная, ВидЦеныРасчетная. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыВидЦеныРозничнаяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныРозничная) И Объект.ВидЦеныРозничная = Объект.ВидЦеныЗакупочная Тогда
		Предупреждение("Виды цен ""Закупочная"" и ""Розничная"" не должны совпадать.");
		Объект.ВидЦеныРозничная = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныРозничная) И Объект.ВидЦеныРозничная = Объект.ВидЦеныРасчетная Тогда
		Предупреждение("Виды цен ""Розничная"" и ""Расчетная"" не должны совпадать.");
		Объект.ВидЦеныРасчетная = Неопределено;
	КонецЕсли;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. Проверяет значения в Реквизитах: ВидЦеныЗакупочная, ВидЦеныРозничная, ВидЦеныРасчетная. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыВидЦеныРасчетнаяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) И Объект.ВидЦеныРасчетная = Объект.ВидЦеныЗакупочная Тогда
		Предупреждение("Виды цен ""Закупочная"" и ""Расчетная"" не должны совпадать.");
		Объект.ВидЦеныРасчетная = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) И Объект.ВидЦеныРасчетная = Объект.ВидЦеныРозничная Тогда
		Предупреждение("Виды цен ""Розничная"" и ""Расчетная"" не должны совпадать.");
		Объект.ВидЦеныРасчетная = Неопределено;
	КонецЕсли;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// КЛЮЧЕВОЙ ПАРАМЕТР. "БЛОКИРУЕМЫЙ РЕКВИЗИТ". Из Перечисления "СтавкиНДС". Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыСтавкаНДСПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. "БЛОКИРУЕМЫЙ РЕКВИЗИТ". Если Ценоввые группы используются, то рекомендуется заполнять реквизит.
// 
&НаКлиенте
Процедура ПараметрыЦеноваяГруппаПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// КЛЮЧЕВОЙ ПАРАМЕТР. "БЛОКИРУЕМЫЙ РЕКВИЗИТ". Здесь - это базовая ЕдиницаИзмерения. Влияет на поведение формы.
// В таблице "1С:Предприятие" в общем случае может находиться номенклатура с разными Единицами измерения.
// в таком случае, для N строк необходимо будет указать другую ЕдиницуИзмерения.
// Если ЕдиницаИзмерения указана в файле, то берется из файла.
// 
&НаКлиенте
Процедура ПараметрыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР.
// 
&НаКлиенте
Процедура ПараметрыИзменятьНаименованиеПриИзменении(Элемент)
	
	Элементы.Таблица1СЧтоДелать_НесовпадающиеНаименования.Доступность = Объект.ИзменятьНаименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСоставноеПолноеНаименованиеПриИзменении(Элемент)
	
	Если Объект.СоставноеПолноеНаименование Тогда
		Объект.СоставноеПолноеНаименованиеРеквизит = "Характеристика";
		Элементы.СоставноеПолноеНаименованиеРеквизит.ТолькоПросмотр = Ложь;
	Иначе
		Объект.СоставноеПолноеНаименованиеРеквизит = "";
		Элементы.СоставноеПолноеНаименованиеРеквизит.ТолькоПросмотр = Истина;
	КонецЕсли;
		
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. При действии "Изменить" Документ Поступления. Наименование Номенклатуры в Excel может содержать Артикул в начале.
// 
&НаКлиенте
Процедура ПараметрыНаименованиеСодержитАртикулПриИзменении(Элемент)
	
	Элементы.РазделительАртикулаИНаименования.ТолькоПросмотр = НЕ Объект.НаименованиеСодержитАртикул;
	Элементы.ОставитьАртикулВНаименовании.ТолькоПросмотр = НЕ Объект.НаименованиеСодержитАртикул;
	
	Объект.ОставитьАртикулВНаименовании = Объект.НаименованиеСодержитАртикул;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОставитьАртикулВНаименованииПриИзменении(Элемент)
	
	Если НЕ Объект.ОставитьАртикулВНаименовании Тогда
		Предупреждение("Проверьте установку флажка ""Изменять Наименование"".");
	КонецЕсли;
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. Аналитика, собирающая Номенклатуру из разных ГруппНоменклатуры. Распределение по складам.
// 
&НаКлиенте
Процедура ПараметрыНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР.
// 
&НаКлиенте
Процедура ПараметрыТипШтрихКодаПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодакцизныйТоварПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВестиУчетПоГТДПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВестиОперативныйУчетОстатковНЗППриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНаборУпаковокПриИзменении(Элемент)
	
	ПараметрыНаборУпаковокПриИзмененииОбщий(Элемент, Объект.НаборУпаковок, Объект.НаборУпаковокТекущий, Объект.Упаковка, Элементы.Упаковка);
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаСервере
Функция ПараметрыНаборУпаковокПолучитьПредопределенныйДляНоменклатуры()
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Возврат ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПараметрыНаборУпаковокОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыУпаковкаНачалоВыбораОбщий(Элемент, ДанныеВыбора, СтандартнаяОбработка, Объект.НаборУпаковок, Объект.Упаковка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУпаковкаПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СНаборУпаковокПриИзменении(Элемент)
	
	ПараметрыНаборУпаковокПриИзмененииОбщий(Элемент, Элементы.Таблица1С.ТекущиеДанные.НаборУпаковок, ЭтаФорма.Таблица1СНаборУпаковокТекущий, Элементы.Таблица1С.ТекущиеДанные.Упаковка, Элементы.Таблица1С.ПодчиненныеЭлементы.Таблица1СГруппаНаборУпаковокИУпаковка.ПодчиненныеЭлементы.Таблица1СУпаковка);
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СНаборУпаковокОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыУпаковкаНачалоВыбораОбщий(Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.Таблица1С.ТекущиеДанные.НаборУпаковок, Элементы.Таблица1С.ТекущиеДанные.Упаковка);
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица1СУпаковкаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНаборУпаковокПриИзмененииОбщий(Элемент, НаборУпаковок, НаборУпаковокТекущий, Упаковка, ЭлементУпаковка)
	
	НаборУпаковокПредопределенныйДляНоменклатуры = ПараметрыНаборУпаковокПолучитьПредопределенныйДляНоменклатуры();
	
	Если ЗначениеЗаполнено(НаборУпаковок) Тогда
		Если ЗначениеЗаполнено(НаборУпаковокПредопределенныйДляНоменклатуры) И НаборУпаковок = НаборУпаковокПредопределенныйДляНоменклатуры Тогда
			Упаковка = Неопределено;
			ЭлементУпаковка.ТолькоПросмотр = Истина;
		Иначе
			ЭлементУпаковка.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе
		Упаковка = Неопределено;
		ЭлементУпаковка.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ НаборУпаковок = НаборУпаковокТекущий Тогда
		Упаковка = Неопределено;
	КонецЕсли;
	
	НаборУпаковокТекущий = НаборУпаковок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУпаковкаНачалоВыбораОбщий(Элемент, ДанныеВыбора, СтандартнаяОбработка, НаборУпаковок, Упаковка)
	
	СтандартнаяОбработка = Истина;
	Если НЕ ЗначениеЗаполнено(НаборУпаковок) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для выбора ""Упаковки"" необходимо предварительно выбрать ""Набор упаковок"".");
		Возврат;
	КонецЕсли;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", НаборУпаковок);

		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		
		ФормаВыбораУпаковки = ПолучитьФорму("ВнешняяОбработка.ImportExcel1C.Форма.ФормаВыбораУпаковокУТ", ПараметрыФормы, ЭтаФорма);
		
		ФормаВыбораУпаковки.Параметры.РежимВыбора = Истина;
		ФормаВыбораУпаковки.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВыбораУпаковки.ЗакрыватьПриВыборе = Истина;
		
		УпаковкаВыбранная = ФормаВыбораУпаковки.ОткрытьМодально();
		Если ЗначениеЗаполнено(УпаковкаВыбранная) Тогда
			Упаковка = УпаковкаВыбранная;
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВидВоспроизводстваПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКачествоПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСтатьяЗатратПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНоменклатурнаяГруппаЗатратПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГруппаФинансовогоУчетаПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГруппаДоступаПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСтатьяРасходовПриИзменении(Элемент)
	
	ПараметрыИзменениеКлючевогоЗначения();	// Есть вызов ФормаОпределитьДоступнность(), если необходимо.
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОрганизацияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. Проверка введенного значения: УчитыватьНДС во взаимосвязи с другими параметрами: ЦенаВключаетНДС. Влияет на поведение формы.
// 
&НаКлиенте
Процедура ПараметрыУчитыватьНДСПриИзменении(Элемент)
	
	Если НЕ Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если Объект.ДокументыСозданы Тогда
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
			Предупреждение("ДОКУМЕНТЫ СОЗДАНЫ.
			|
			|- Выполните ""Изменить Документы"".
			|или
			|- Измените параметр ""Учитывать НДС"" непосредственно в документе.");
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		КонецЕсли;
	КонецЕсли;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// ВАЖНЫЙ ПАРАМЕТР. Используется в УТ в документе ПоступлениеТоваровИУслуг.
// 
&НаКлиенте
Процедура ПараметрыНалогообложениеНДСПриИзменении(Элемент)
	
	УчитыватьНДС = ПараметрыНалогообложениеНДСПриИзмененииНаСервере();
	
	Объект.УчитыватьНДС = ?(УчитыватьНДС = Неопределено, Объект.УчитыватьНДС, УчитыватьНДС);
	
	ПараметрыУчитыватьНДСПриИзменении(Элемент);
	
	Если Объект.ДокументыСозданы Тогда
		Предупреждение("ДОКУМЕНТЫ СОЗДАНЫ.
		|
		|- Выполните ""Изменить Документы"".
		|или
		|- Измените параметр ""Налогообложение НДС"" непосредственно в документе.");
	КонецЕсли;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Получить значение Перечисления "ТипыНалогообложенияНДС".
//
&НаСервере
Функция ПараметрыНалогообложениеНДСПриИзмененииНаСервере()
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Возврат Объект.НалогообложениеНДС  = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// ВАЖНЫЙ ПАРАМЕТР. Влияет на поведение формы.
//
&НаКлиенте
Процедура ПараметрыЦенаВключаетНДСПриИзменении(Элемент)
	
	Объект.УчитыватьНДС = ?(Объект.ЦенаВключаетНДС, Истина, Объект.УчитыватьНДС);
	
	Если Объект.ДокументыСозданы Тогда
		Предупреждение("ДОКУМЕНТЫ СОЗДАНЫ.
		|
		|- Выполните ""Изменить Документы"".
		|или
		|- Измените параметр ""Цена включает НДС"" непосредственно в документе.");
	КонецЕсли;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Вывод предупреждения об активизации режима изменения реквизитов справочника "Номенклатура".
// 
&НаКлиенте
Процедура ПараметрыИзменятьРеквизитыСправочниковПриИзменении(Элемент)
	
	Элементы.ИзменятьВТЧЗапрещенные.ТолькоПросмотр = НЕ Объект.ИзменятьРеквизитыСправочников;
	
	Если Объект.ИзменятьРеквизитыСправочников Тогда
		
		Предупреждение("Активизирован режим изменения рекизитов Справочников,
		|для существующей Номенклатуры (товаров, услуг, материалов).");
		
	Иначе
		Объект.ИзменятьВТЧЗапрещенные = Ложь;
	КонецЕсли;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Вывод предупреждения об активизации режима изменения блокируемых реквизитов справочника "Номенклатура".
// 
&НаКлиенте
Процедура ПараметрыИзменятьВТЧЗапрещенныеПриИзменении(Элемент)
	
	Если Объект.ИзменятьВТЧЗапрещенные Тогда
		
		Объект.ИзменятьРеквизитыСправочников = Истина;
		
		Предупреждение("Активизирован режим изменения рекизитов Справочников, для существующей Номенклатуры,
		|
		|в т.ч. и БЛОКИРУЕМЫХ,
		|
		|т.е. тех, которые не должны изменяться после создания элемента справочника ""Номенклатура"".");
		
	КонецЕсли;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Просмотреть список блокируемых реквизитов справочника "Номенклатура".
// 
&НаКлиенте
Процедура ПараметрыСписокБлокируемыхРеквизитовНажатие(Элемент)
	
	Объект.СписокБлокируемыхРеквизитов = ПолучитьСписокБлокируемыхРеквизитов();
	
	МногострочныйТекст = ПолучитьСтрокуИзМассиваПодстрок(Объект.СписокБлокируемыхРеквизитов.ВыгрузитьЗначения(), Символы.ПС);
	ФормаОткрытьФормуРедактированияМногострочногоТекста(МногострочныйТекст, "", , "БЛОКИРОВАННЫЕ РЕКВИЗИТЫ");
	
КонецПроцедуры

// Получить список блокируемых реквизитов справочника "Номенклатура".
//
// Розница							УТ
//
// О Б Р А Б А Т Ы В А Е М Ы Е
//
// ЕдиницаИзмерения					ЕдиницаИзмерения
// ВидНоменклатуры					ВидНоменклатуры
// ЦеноваяГруппа					ЦеноваяГруппа
// СтавкаНДС						СтавкаНДС
// Весовой
// НаборУпаковок					НаборУпаковок
//									ИспользоватьУпаковки
//									ВестиУчетПоГТД
//									ПодакцизныйТовар
//
// Подакцизные товарами (статья 181 НК РФ) признаются:
//
//	1. Спирт этиловый из всех видов сырья (а также спирт коньячный);
//	2. Спиртосодержащая продукция (растворы, эмульсии, суспензии и другие виды продукции в жидком виде) с объемной долей этилового спирта более 9 процентов, за исключением алкогольной продукции.
//	3. Алкогольная продукция (спирт питьевой, водка, ликероводочные изделия, коньяки, вино, пиво, напитки, изготавливаемые на основе пива, иные напитки с объемной долей этилового спирта более 1,5 процента;
//	4. Табачная продукция;
//	5. Автомобили легковые (мотоциклы с мощностью двигателя свыше 112,5 кВт (150 л.с.));
//	6. Автомобильный бензин;
//	7. Дизельное топливо;
//	8. Моторные масла для дизельных и (или) карбюраторных (инжекторных) двигателей;
//	9. Прямогонный бензин.
//
// Н Е О Б Р А Б А Т Ы В А Е М Ы Е
//
//									Качество (При создании - значение Новый, В Форме не отображается)
//
// Н Е П Л А Н И Р У Е М Ы Е
//
// Номинал (Только Подарочные сертификаты)
// ТипСерийногоНомера (Только Подарочные сертификаты)
// ИспользоватьСерийныеНомера (Только Подарочные сертификаты)
// 
&НаСервере
Функция ПолучитьСписокБлокируемыхРеквизитов()
	
	Объект.СписокБлокируемыхРеквизитов.ЗагрузитьЗначения(Справочники.Номенклатура.ПолучитьБлокируемыеРеквизитыОбъекта());
	
	Возврат Объект.СписокБлокируемыхРеквизитов;
	
КонецФункции

// Вывести на экран Предупреждение с информацией о возможных действиях при работе с Уникальными/Неуникальными Штрихкодами.
// 
&НаКлиенте
Процедура ПараметрыУникальныеШтрихкодыНажатие(Элемент)
	
	Если Объект.УникальныеШтрихкоды Тогда
	
		Предупреждение("В данной информационной базе используются Уникальные Штрихкоды.
		|
		|Рекомендуется использовать Алгоритм ""Поиск по Штрихкоду"".
		|Исключение: Заранее известно, что вся загружаемая номенклатура новая.
		|(Первоначальная загрузка номенклатуры в БД в документ ""Оприходование товаров"")
		|
		|Если, при заполнении таблицы ""1С:Предприятие"" возникает ситуация, когда при поиске
		|по Штрихкоду заполняется реквизит ""Возможные1С"", то это - исключительная ситуация:
		|Несколько элементов номенклатуры имеют одинаковые Штриходы.
		|
		|Проверьте наличие ""двойной"" номенклатуры. Один из элементов - удалить.
		|Возможно он участвует в документах, следовательно, сначала заменить на другой имеющийся.
		|или, если возможно, у одного из элементов номенклатуры заменить Штрихкод.");
	
	Иначе
	
		Предупреждение("В данной информационной базе используются НЕУникальные Штрихкоды.
		|(см. ""Настройка параметров учета"" раздел ""Запасы и закупки"")
		|
		|Поиск по Штрихкоду возможен, но необязателен,
		|
		|Если, при заполнении таблицы ""1С:Предприятие"" возникает ситуация, 
		|когда при поиске по Штрихкоду заполняется реквизит ""Возможные1С"",
		|то при данной настройке это нормальная ситуация.
		|
		|Возможные варианты действий при наличии нескольких значений в колонке ""Возможные1С"":
		|1. Выбрать необходимое значение из списка возможных.
		|2. Оставить поле колонки ""Номенклатура1С"" пустым, т.е. создать новый элемент.");
	
	КонецЕсли;
	
КонецПроцедуры

// Ключевая функция. Очистка Таблицы1С, Справочники не обновлены.
// 
&НаКлиенте
Функция ПараметрыИзменениеКлючевогоЗначения(ОпределитьДоступность = Ложь)
	
	Объект.Таблица1С.Очистить();
	
	Объект.СправочникиОбновлены = Ложь;
	
	Если ОпределитьДоступность Тогда
		ФормаОпределитьДоступнность();
	Иначе
		Элементы.ОМОбновитьСправочники.Доступность = Ложь;
		Элементы.ОМСформироватьДокументы.Доступность = Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ФОРМА. СОБЫТИЯ.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Открыть форму "Настройка Обработки".
// 
&НаКлиенте
Процедура ОМНастройка(Команда)
	
	ИмяФормыНастройкиОбработки = Объект.ПараметрыСеансаОбработки.ИмяФормыНастройкиОбработки;
	
	Если ИмяФормыНастройкиОбработки = Неопределено Тогда
		Предупреждение("Форма Настройки Обработки не найдена.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ПараметрыНастройки = Новый Структура;
		ПараметрыНастройки.Вставить("ПараметрыСеансаОбработки"	, Объект.ПараметрыСеансаОбработки);
		// ЛЕВО.
		ПараметрыНастройки.Вставить("МонопольныйРежим"			, Объект.МонопольныйРежим);
		ПараметрыНастройки.Вставить("ПоказыватьСообщения"		, Объект.ПоказыватьСообщения);
		
		ПараметрыНастройки.Вставить("ДоступныеТипыСОМОбъектов"	, Объект.ДоступныеТипыСОМОбъектов);
		ПараметрыНастройки.Вставить("ТипСОМОбъекта"				, Объект.ТипСОМОбъекта);
		
		ПараметрыНастройки.Вставить("ПроверятьADODB"			, Объект.ПроверятьADODB);
		ПараметрыНастройки.Вставить("ПроверятьMSOffice"			, Объект.ПроверятьMSOffice);
		ПараметрыНастройки.Вставить("ПроверятьLibreOffice"		, Объект.ПроверятьLibreOffice);
		
		ПараметрыНастройки.Вставить("ПодключениеADODB"			, Объект.ПодключениеADODB);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройкиОбработки, ПараметрыНастройки, ЭтаФорма);
		ФормаНастройки.ЗакрыватьПриЗакрытииВладельца 	= Истина;
		Если ФормаНастройки.Открыта() Тогда
			ФормаНастройки.Закрыть();
		КонецЕсли;
		ФормаНастройки.Открыть();	// НЕМОДАЛЬНО !!! ОПОВЕЩЕНИЯ.
		
	Исключение
		
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		
	КонецПопытки;

КонецПроцедуры

// Получить и обработать Параметры, полученные от формы "Настройка Обработки".
// 
&НаКлиенте
Процедура ФормаОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтаФорма.УникальныйИдентификатор Тогда
	
		Если ИмяСобытия = "МонопольныйРежим" Тогда
			
			Объект.МонопольныйРежим		= Параметр;
			
			ФормаУстановитьЗаголовокРежимМонопольныйНеМонопольный();
			
		ИначеЕсли ИмяСобытия = "ТипСОМОбъекта" Тогда
			
			Объект.ТипСОМОбъекта		= Параметр;
			
			Если Объект.ТипСОМОбъекта = "ADODB" Тогда
				Объект.НомерЛистаИсходныхДанных = 1;
			КонецЕсли;
			
			ФормаУстановитьЗаголовокРеквизитаМетодЗагрузки();
			
			ФайлПроверитьРасширениеДляМетодаЗагрузки(Объект.ФайлИсходныхДанных);
			
		ИначеЕсли ИмяСобытия = "ПоказыватьСообщения" Тогда
			
			Объект.ПоказыватьСообщения	= Параметр;
			
		ИначеЕсли ИмяСобытия = "ПроверятьMSOffice" Тогда
			
			Объект.ПроверятьMSOffice	= Параметр;
			
		ИначеЕсли ИмяСобытия = "ПроверятьLibreOffice" Тогда
			
			Объект.ПроверятьLibreOffice	= Параметр;
			
		ИначеЕсли ИмяСобытия = "ПодключениеADODB" Тогда
			
			Объект.ПодключениеADODB	= Параметр;
			
		КонецЕсли;
	
		ФормаОпределитьДоступнность();
		
	КонецЕсли;
	
КонецПроцедуры

// Перед Открытием формы. Определение ПараметровЗапускаОбработки.
//
&НаСервере
Процедура ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");

	Объект.ПараметрыСеансаОбработки	= ЭтотОбъект.ОбработкаПолучитьПараметрыСеанса(ЭтаФорма);

КонецПроцедуры

// Перед Открытием формы: Восстановление значений реквизитов Объекта из настроек.
//
&НаСервере
Процедура ФормаПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Объект.ПроверятьADODB						= Истина;
	
	// При 1-ом запуске обработки - проверка всех методов.
	
	Значение = Настройки.Получить("ПроверятьMSOffice");
	Объект.ПроверятьMSOffice 					= ?(Значение <> Неопределено, Значение, Истина);
	
	Значение = Настройки.Получить("ПроверятьLibreOffice");
	Объект.ПроверятьLibreOffice					= ?(Значение <> Неопределено, Значение, Истина);
	
	Объект.МонопольныйРежим 					= МонопольныйРежим();

	// Ссылочные данные.
	
	Объект.Магазин 		= ПараметрыПолучитьПоСкладуМагазинНаСервере(Объект.Склад);
	Объект.Организация 	= ПараметрыПолучитьПоСкладуОрганизациюНаСервере(Объект.Склад);
	Объект.Поставщик 	= ПараметрыКонтрАгентПриИзмененииНаСервере(Объект.КонтрАгент);

	// Алгоритмы Поиска в 1С:Предприятие.
	
	Значение = Настройки.Получить("ПоискПоШтрихкоду");
	Объект.ПоискПоШтрихкоду						= ?(Значение <> Неопределено, Значение, Истина);
	Значение = Настройки.Получить("ПоискПоЧистомуНаименованию");
	Объект.ПоискПоЧистомуНаименованию			= ?(Значение <> Неопределено, Значение, Истина);
	Значение = Настройки.Получить("ПоискПоНаименованию");
	Объект.ПоискПоНаименованию					= ?(Значение <> Неопределено, Значение, Истина);
	Значение = Настройки.Получить("ПоискПоЧистые34Наименования");
	Объект.ПоискПоЧистые34Наименования			= ?(Значение <> Неопределено, Значение, Истина);
	Значение = Настройки.Получить("ПоискПо34Наименования");
	Объект.ПоискПо34Наименования				= ?(Значение <> Неопределено, Значение, Истина);
	Значение = Настройки.Получить("ПоискПоАртикулу");
	Объект.ПоискПоАртикулу						= ?(Значение <> Неопределено, Значение, Истина);
	
КонецПроцедуры

// Получить основной (первый из доступных) метод загруки:
// 1. "MS Excel".
// 2. "LibreOffice Calc".
// 3. "MS ADODB".
//
&НаСервере
Процедура ПолучитьОсновнойМетодЗагрузки()
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	Объект.ДоступныеТипыСОМОбъектов	= ЭтотОбъект.ОбработкаПолучитьДоступныеТипыСОМОбъекта();
	Если Объект.ТипСОМОбъекта = "" Тогда
		Для Каждого Элемент ИЗ Объект.ДоступныеТипыСОМОбъектов Цикл
			Объект.ТипСОМОбъекта = Элемент.Ключ;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	ФормаУстановитьЗаголовокРеквизитаМетодЗагрузки();
	
КонецПроцедуры

// Перед Закрытием формы: Сохранение значений реквизитов Объекта в настройках.
//
&НаСервере
Процедура ФормаПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПроверятьMSOffice"						, Объект.ПроверятьMSOffice);
	Настройки.Вставить("ПроверятьLibreOffice"					, Объект.ПроверятьLibreOffice);
	
КонецПроцедуры

// При Открытии формы: Установка начальных значений, содержимого надписей на форме.
//
&НаКлиенте
Процедура ФормаПриОткрытии(Отказ)
	
	ПолучитьОсновнойМетодЗагрузки();
	
	Если ЗначениеЗаполнено(Объект.ФайлИсходныхДанных) И ФайлСуществует(Объект.ФайлИсходныхДанных) Тогда
		Объект.СписокЛистовФайла = ФайлExcelПолучитьСписокЛистов(Объект.ФайлИсходныхДанных);
		Состояние("Файл Excel:
		|" + Объект.ФайлИсходныхДанных + " (листов " + Объект.СписокЛистовФайла.Количество() + ")");
	КонецЕсли;
	
	ЭтаФорма.ПоказыватьПредупреждениеОНеВыбранныхАлгоритмахПоиска = Истина;
	Объект.ОсновноеДействие = "Создать";
	ФормаОпределитьДоступнностьВТаблицах();
	
	Объект.УникальныеШтрихкоды = ПолучитьЗначениеКонстантыИспользоватьНеУникальныеШтрихКодыНаСервере();
	
	Если Объект.УникальныеШтрихкоды Тогда
		Элементы.УникальныеШтрихкоды.Заголовок = "Используются Уникальные Штрихкоды. Подробнее ...";
	Иначе
		Элементы.УникальныеШтрихкоды.Заголовок = "Используются Неуникальные Штрихкоды. Подробнее ...";
	КонецЕсли;
				
	Объект.СписокБлокируемыхРеквизитов = ПолучитьСписокБлокируемыхРеквизитов();

	ФормаУстановитьЗаголовокРежимМонопольныйНеМонопольный();
	
	НачальныеПараметрыЛиста();
	
	ФормаПриОткрытии_ПодготовитьТаблицуЗаголовков();
	
	ФормаПриОткрытии_ПодготовитьСписокЗначенийНайденПО();
	
	ФайлПроверитьРасширениеДляМетодаЗагрузки(Объект.ФайлИсходныхДанных);
	
	СопоставлениеОбработкиИКонфигурации();
	
	ПараметрыТипДокумента_СформироватьСтруктуруПроверяемыхРеквизитовФормы();

	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Получить значение Константы "ИспользоватьНеуникальныеШтрихкоды".
//
&НаСервере
Функция ПолучитьЗначениеКонстантыИспользоватьНеУникальныеШтрихКодыНаСервере()
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		Объект.УникальныеШтрихкоды = НЕ Константы["ИспользоватьНеуникальныеШтрихкоды"].Получить();
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда		// Прямого указания на Истина нет. В общем случае это должно быть так.
		Объект.УникальныеШтрихкоды = Истина;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат Объект.УникальныеШтрихкоды;
	
КонецФункции

// Получить заголовок типа Монопольный/Многопользовательский доступ.
//
&НаСервере
Процедура ФормаУстановитьЗаголовокРежимМонопольныйНеМонопольный()
	
	Если Объект.МонопольныйРежим Тогда
		ЭтаФорма.Элементы.Режим.Заголовок = "Монопольный режим";
	Иначе
		ЭтаФорма.Элементы.Режим.Заголовок = "Многопользовательский режим";
	КонецЕсли;
	
КонецПроцедуры

// Формирование заголовки ЭлементаФормы "МетодЗагрузки" (метод загрузки).
//
&НаСервере
Процедура ФормаУстановитьЗаголовокРеквизитаМетодЗагрузки()
	
	Если Объект.ТипСОМОбъекта = "LibreOffice" Тогда
		ЭтаФорма.Элементы.МетодЗагрузки.Заголовок = "~ " + Объект.ТипСОМОбъекта;
	Иначе
		ЭтаФорма.Элементы.МетодЗагрузки.Заголовок = Объект.ТипСОМОбъекта;
	КонецЕсли;
	
КонецПроцедуры

// Определение начальных значений параметров файла типа Excel для загрузки.
//
&НаСервере
Процедура НачальныеПараметрыЛиста()
	
	Объект.НомерЛистаИсходныхДанных			= 1;
	Если Объект.СписокЛистовФайла.Количество() = 0 Тогда
		Объект.ИмяЛистаИсходныхДанных		= "";
	Иначе
		Объект.ИмяЛистаИсходныхДанных		= Объект.СписокЛистовФайла[0];
	КонецЕсли;
	Объект.СтрокаЗаголовкаИсходныхДанных 	= 0;
	Объект.НачальнаяСтрокаИсходныхДанных 	= 0;
	Объект.КонечнаяСтрокаИсходныхДанных 	= 0;
	Объект.СтрокаЭталонаИсходныхДанных	 	= 0;
	
КонецПроцедуры

// Вкладка "Параметры" - Таблица "Синонимы". Заполнение.
//
&НаСервере
Процедура ФормаПриОткрытии_ПодготовитьТаблицуЗаголовков()
	
	ТаблицаЗаголовков = РеквизитФормыВЗначение("Объект.ТаблицаЗаголовков");
	
	// Наименование.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Наименование", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Наименование";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "NAIMENOVANIE; НАИМЕНОВАНИЕ";
	КонецЕсли;
	
	// Штрихкод.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Штрихкод", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Штрихкод";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "STRIH; SCHTRIH; ШТРИХ; EAN8; EAN13; EAN128";
	КонецЕсли;
	
	// Артикул.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Артикул", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Артикул";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "ARTIKUL; ARTICUL; АРТИКУЛ";
	КонецЕсли;
	
	// ЕдиницаИзмерения.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("ЕдиницаИзмерения", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "ЕдиницаИзмерения";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "EDIZM; ED.IZM; ЕДИЗМ; ЕД.ИЗМ";
	КонецЕсли;
	
	// Количество.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Количество", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Количество";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "K-VO; KOL-VO; KOLVO; К-ВО; КОЛ-ВО; КОЛВО; КОЛИЧЕСТВО";
	КонецЕсли;
	
	// ЦенаЗакупочная.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("ЦенаЗакупочная", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "ЦенаЗакупочная";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "CENAZAKUP; ЗАКУП; ЗАКУПОЧНАЯ";
	КонецЕсли;
	
	// ЦенаРозничная.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("ЦенаРозничная", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "ЦенаРозничная";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "CENATRADE; РОЗНИЦА; РОЗНИЧНАЯ";
	КонецЕсли;
	
	// СтавкаНДС.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("СтавкаНДС", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "СтавкаНДС";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "PROCNDS; НДС; ПРОЦЕНТНДС";
	КонецЕсли;
	
	// МаркаБренд. 1-ый уровень справочника "Номенклатура" от Объект.ГруппаНоменклатуры. Если отсутствует, см. 2-ой уровень.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("МаркаБренд", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "МаркаБренд";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "MARKA; BRAND; МАРКА; БРЕНД; ГРУППА-1";
	КонецЕсли;
	
	// КоллекцияСезон. 2-ой уровень справочника "Номенклатура" от Объект.ГруппаНоменклатуры или 1-ый, если МаркаБрендОтсутствует.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("КоллекцияСезон", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "КоллекцияСезон";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "COLLECTION; КОЛЛЕКЦИЯ; ГРУППА-2";
	КонецЕсли;
	
	// Характеристика.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Характеристика", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Характеристика";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "CHARACTERISTIC; ХАРАКТЕРИСТИКА";
	КонецЕсли;
	
	// Описание.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Описание", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Описание";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "DESCRIPTION; ОПИСАНИЕ";
	КонецЕсли;
	
	// СтранаПроисхождения.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("СтранаПроисхождения", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "СтранаПроисхождения";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "STRANA; LAND; СТРАНА";
	КонецЕсли;

	// Производитель.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Производитель", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Производитель";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "MANUFACTURER; ПРОИЗВОДИТЕЛЬ; ИЗГОТОВИТЕЛЬ";
	КонецЕсли;
	
	// Декларация.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("НомерГТД", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "НомерГТД";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "DECLARATION; ДЕКЛАРАЦИЯ; ТАМОЖЕННАЯ; ГТД";
	КонецЕсли;
	
	// Вес.
	СтрокаТЗ = ТаблицаЗаголовков.Найти("Вес", "Колонка");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Объект.ТаблицаЗаголовков.Добавить();
		СтрокаТЗ.НомерСтроки = Объект.ТаблицаЗаголовков.Количество();
		СтрокаТЗ.Колонка = "Вес";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЗ.Синонимы) Тогда
		СтрокаТЗ.Синонимы	= "MASSA; WEIGHT; BRUTTO; NETTO; МАССА; БРУТТО; НЕТТО";
	КонецЕсли;

Конецпроцедуры

// Подготовить Структуру "НайденПО".
//
&НаСервере
Процедура ФормаПриОткрытии_ПодготовитьСписокЗначенийНайденПО()
	
	Объект.стрНайденПО = Новый Структура;
	// Обязательные.
	Объект.стрНайденПО.Вставить("ШтрихКоду"						, "ШК");
	Объект.стрНайденПО.Вставить("ЧистомуНаименованию"			, "ЧистоеНаименование");
	Объект.стрНайденПО.Вставить("Наименованию"					, "Наименование");
	
	// Рекомендуемые.
	Объект.стрНайденПО.Вставить("ЧастиНаименования"				, "ЧастьНаименования");
	Объект.стрНайденПО.Вставить("Артикулу"						, "Арттикул");
	
	// ТОЛЬКО для Действия "Измененить".
	Объект.стрНайденПО.Вставить("ЧистомуНаименованиюБезПробелов", "ЧистоеБезПробелов");
	
КонецПроцедуры

// Создать Элемент формы ТаблицаФормы на Элементе формы СтраницаФормы.
// - ИмяПоляТаблицыФормы - Имя элемента на Форме типа Таблица.
// - ИмяРеквизитаДанныеФормыКоллекция - Имя реквизита формы, который необходимо создать.
// - ТаблицаЗначений - Создаваемая таблица.
//
&НаСервере
Функция ФормаСоздатьРеквизитТипаТаблицаФормы(ИмяПоляТаблицыФормы, ИмяРеквизитаДанныеФормыКоллекция, ТаблицаЗначений, Родитель)
	
	ТаблицаФормы = Элементы[ИмяПоляТаблицыФормы];
	ТаблицаФормы.ЧередованиеЦветовСтрок = Истина;
	ТаблицаФормы.ТолькоПросмотр			= Истина;
	
	// Удаляемые Элементы Формы.
	ЭлементыДляУдаления = ПолучитьРеквизиты(ИмяРеквизитаДанныеФормыКоллекция);
	Для Каждого ЭлементУдаления ИЗ ЭлементыДляУдаления Цикл
		Если ЭлементУдаления.Имя = "НомерСтроки" ИЛИ ЭлементУдаления.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		// Удаляем элементы формы
		Попытка
			Если Элементы.Найти(ИмяПоляТаблицыФормы + ЭлементУдаления.Имя) <> Неопределено Тогда
				Элементы.Удалить(Элементы[ИмяПоляТаблицыФормы + ЭлементУдаления.Имя]);
			КонецЕсли;
		Исключение
			Сообщить("" + ЭлементУдаления.Имя + ": " + ОписаниеОшибки() + ".");
		КонецПопытки;
	КонецЦикла;
		
	// Удаляемые Реквизиты Формы.
	УдаляемыеРеквизиты = Новый Массив;
	РеквизитыДляУдаления = ПолучитьРеквизиты(ИмяРеквизитаДанныеФормыКоллекция);
	Для Каждого РеквизитУдаления ИЗ РеквизитыДляУдаления Цикл
		Если РеквизитУдаления.Имя = "НомерСтроки" ИЛИ РеквизитУдаления.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеРеквизиты.Добавить(ИмяРеквизитаДанныеФормыКоллекция + "." + РеквизитУдаления.Имя);
	КонецЦикла;
	
	// При наличии в ТЧ Колонки с типом "ХранилищеЗначения" на ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты); выходит на ошибку,
	// поэтому: Произвольный тип.
	
	// Добавляемые реквизиты Формы.
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого КолонкаТЧРЕГ ИЗ ТаблицаЗначений.Колонки Цикл
		Если КолонкаТЧРЕГ.Имя = "НомерСтроки" ИЛИ КолонкаТЧРЕГ.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(КолонкаТЧРЕГ.Имя, КолонкаТЧРЕГ.ТипЗначения, ИмяРеквизитаДанныеФормыКоллекция, КолонкаТЧРЕГ.Заголовок));
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавление элементов в Таблицу Формы
	ит = 0;
	Для Каждого КолонкаТЧРЕГ ИЗ ТаблицаЗначений.Колонки Цикл
		ит = ит + 1;
		Если КолонкаТЧРЕГ.Имя = "НомерСтроки" ИЛИ КолонкаТЧРЕГ.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПолеТаблицыФормы = Элементы.Добавить(ТаблицаФормы.Имя + КолонкаТЧРЕГ.Имя, Тип("ПолеФормы"), ТаблицаФормы);
			ПолеТаблицыФормы.Вид 					= ВидПоляФормы.ПолеВвода;
			ПолеТаблицыФормы.ВыделятьОтрицательные	= Истина;
			ПолеТаблицыФормы.ОграничениеТипа		= КолонкаТЧРЕГ.ТипЗначения;
			Если КолонкаТЧРЕГ.Ширина = 0 Тогда
				ПолеТаблицыФормы.Ширина					= 20;
			Иначе
				ПолеТаблицыФормы.Ширина					= КолонкаТЧРЕГ.Ширина;
			КонецЕсли;
			Если ит = ТаблицаЗначений.Колонки.Количество() Тогда
				ПолеТаблицыФормы.РастягиватьПоГоризонтали = Ложь;
			Иначе
				ПолеТаблицыФормы.РастягиватьПоГоризонтали = Истина;
			КонецЕсли;
			
			ПолеТаблицыФормы.ПутьКДанным			= ТаблицаФормы.ПутьКДанным + "." + КолонкаТЧРЕГ.Имя;
		Исключение
			// НомерСтроки.
			// Сообщить("МФ: Ошибка ПолеТаблицыФормы.ПутьКДанным = " + ТаблицаФормы.ПутьКДанным + "." + КолонкаТЧРЕГ.Имя);
		КонецПопытки;
		
	КонецЦикла;
	
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, ИмяРеквизитаДанныеФормыКоллекция);
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Проверить на существование Реквизита в Форме.
//
&НаСервере
Функция ФормаЕстьРеквизит(ИмяРеквизита)
	
	Возврат МассивЕстьЭлемент(ИмяРеквизита, Этаформа.ПолучитьРеквизиты());
	
КонецФункции

// Проверить на существование Элемента в Массиве.
//
&НаСервере
Функция МассивЕстьЭлемент(Знач Элемент, Знач Массив)
	
	Для Каждого Эл Из Массив Цикл
		Если Эл.Имя = Элемент Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверить на существование Элемента на Форме.
//
&НаСервере
Функция ФормаЕстьЭлемент(ИмяРеквизита)
	
	Возврат МассивЕстьЭлемент(ИмяРеквизита, ЭтаФорма.Элементы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ТАБЛИЦЫ-ЭТАЛОН.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Заполнить Таблицу-Эталон, в т.ч. Строку "Реквизит1С".
//
&НаКлиенте
Процедура ОМУстановитьПараметры(Команда)
	
	Если Объект.ТаблицаИсходныхДанных.Количество() = 0 Тогда
		Предупреждение("Таблица Исходных данных не заполнена.
		|Формирование Таблицы-Эталон и Активизации Параметров прервано.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаЗаголовков.Количество() = 0 Тогда
		Предупреждение("Таблица Заголовков-Синонимов не заполнена.
		|Формирование Таблицы-Эталон и Активизации Параметров прервано.");
		Возврат;
	КонецЕсли;
	
	Если Объект.СтрокаЗаголовкаИсходныхДанных = 0 Тогда
		Предупреждение("Не указана Строка-Заголовок (№ Заголовка).
		|Формирование Таблицы-Эталон и Активизации Параметров прервано.");
		Возврат;
	КонецЕсли;
	
	Если Объект.СтрокаЭталонаИсходныхДанных = 0 Тогда
		Предупреждение("Не указана Строка-Эталон (№ Эталона).
		|Формирование Таблицы-Эталон и Активизации Параметров прервано.");
		Возврат;
	КонецЕсли;
	
	Если Объект.СтрокаЭталонаИсходныхДанных <= Объект.СтрокаЗаголовкаИсходныхДанных Тогда
		Предупреждение("Не указана Строка-Эталон (№ Эталона).
		|Формирование Таблицы-Эталон и Активизации Параметров прервано.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаЭталон.Количество() > 0 Тогда
		Предупреждение("Таблица-Эталон уже сформирована. Параметры доступны.
		|Выполнение действия не требуется.");
		Возврат;
	КонецЕсли;
	
	ОсновноеДействиеЗаголовки();

	Состояние("" + Объект.ПараметрыСеансаОбработки.СинонимОбработки + "
	|Формирование таблицы ""Эталон"" ... 
	|Сопоставление Колонок Excel и Реквизитов 1С.");
	
	ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗначениямКолонок();
	
	Отказ = Ложь;
	Объект.РеквизитыСопоставленыКолонкам = Истина;
	
	ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗаголовкамКолонок(Отказ);
	
	// ... ЗДЕСЬ, только лишь потому, что возможно Предупреждение, а состояние уже погасло, а следующие действия требуют времени. ЭРГОНОМИКА.
	ПолучитьОписаниеТиповДоступныхКОбработкеДокументовКонфигурации();					// ВСЕ ВОЗМОЖНЫЕ.
	
	Элементы.ОсновноеДействие.ТолькоПросмотр = Ложь;
	Если НЕ Объект.КоличествоОпределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Объект.СписокТиповДокументовУстановкаЦен[0].Значение);
		Объект.ТипДокумента = Новый ОписаниеТипов(Массив);								// ТОЛЬКО ОДИН - ДОКУМЕНТ УСТАНОВКА ЦЕНЫ.
		Объект.ОсновноеДействие = "Создать";
		Элементы.ОсновноеДействие.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОМУстановитьПараметры_ПроверитьНеобходимостьЗаполненияОтдельныхРеквизитовФормы();	// НУЖНО ЛИ ПРОВЕРЯТЬ НЕОБЯЗАТЕЛЬНЫЕ, НО ВОЗМОЖНЫЕ ПАРАМЕТРЫ.
	
	ОМУстановитьПараметры_РаскраситьТаблицыЭталон_И_1С();
	// ...
	
	Если Отказ Тогда
		ЭтаФорма.ПояснениеСопоставления = "Сопоставление обязательны реквизитов не произведено. см.""Реквизит1С"". Исправьте заголовки колонок в Excel.";
		Элементы.ПояснениеСопоставления.ЦветТекста = Новый Цвет(255, 0, 0);	// Красный
		
		Объект.РеквизитыСопоставленыКолонкам = Ложь;
		Предупреждение("Невозможно получить один/несколько ключевых значения: 
		|
		|1. Наименование;
		|2. Цена закупа.
		|
		|Таблица-Эталон: Строка ""Реквизит 1С"" заполнена неполностью.
		|
		|Исправьте заголовки колонок в файле типа Excel
		|и повторите Загрузку из файла и последующие действия.");
	Иначе	
		ЭтаФорма.ПояснениеСопоставления = "Сопоставление обязательных Колонок Excel и Реквизитов 1С произведено.";
		Элементы.ПояснениеСопоставления.ЦветТекста = Новый Цвет(0, 128, 0);	// Зеленый
		
		Предупреждение = "";
		Если НЕ Объект.КоличествоОпределено Тогда
			Предупреждение ="Колонка ""Количество"" неопределена, поэтому 
			|
			|Можно формировать только документ ""УстановкаЦеныНоменклатуры"".";
		КонецЕсли;
		Если НЕ Объект.ЦенаРозничнаяОпределена Тогда
			Предупреждение = Предупреждение +"
			|
			|Колонка ""ЦенаРозничная"" неопределена, поэтому: 
			|
			|Розничная цена по-возможности будет получена по данным БД.
			|";
		КонецЕсли;
		Если ЗначениеЗаполнено(Предупреждение) Тогда
			Предупреждение(Предупреждение);
		КонецЕсли;
		
	КонецЕсли;
	
	Предупреждение = ОМУстановитьПараметры_ПроверитьИспользуемыеАлгоритмыПоиска();
	
	Если ЭтаФорма.ПоказыватьПредупреждениеОНеВыбранныхАлгоритмахПоиска И ЗначениеЗаполнено(Предупреждение) Тогда
		Предупреждение(Предупреждение);
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаПараметры;

	ФормаОпределитьДоступнность();
		
КонецПроцедуры

// Выставить флажки необходимости проверки заполнения для ЦеновойГруппы и НоменклатурнойГруппы.
//
&НаСервере
Процедура ОМУстановитьПараметры_ПроверитьНеобходимостьЗаполненияОтдельныхРеквизитовФормы()

	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		Если Объект.ИспользоватьЦеновыеГруппы Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ЦеноваяГруппа) Тогда
				Объект.ЦеноваяГруппаПроверять 		= ОМУстановитьПараметры_ПроверитьНаличиеДанных(Справочники.ЦеновыеГруппы);
			Иначе	
				Объект.ЦеноваяГруппаПроверять 		= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
			Объект.НоменклатурнаяГруппаПроверять	= ОМУстановитьПараметры_ПроверитьНаличиеДанных(Справочники.НоменклатурныеГруппы);
		Иначе	
			Объект.НоменклатурнаяГруппаПроверять	= Истина;
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		Если Объект.ИспользоватьЦеновыеГруппы Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ЦеноваяГруппа) Тогда
				Объект.ЦеноваяГруппаПроверять 		= ОМУстановитьПараметры_ПроверитьНаличиеДанных(Справочники.ЦеновыеГруппы);
			Иначе	
				Объект.ЦеноваяГруппаПроверять 		= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
			Объект.НоменклатурнаяГруппаПроверять	= ОМУстановитьПараметры_ПроверитьНаличиеДанных(Справочники.СкладскиеГруппыНоменклатуры);
		Иначе	
			Объект.НоменклатурнаяГруппаПроверять	= Истина;
		КонецЕсли;
		
		Если Объект.ИспользоватьГруппыФинансовогоУчета Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ГруппаФинансовогоУчета) Тогда
				Объект.ГруппаФинансовогоУчетаПроверять	= ОМУстановитьПараметры_ПроверитьНаличиеДанных(Справочники.ГруппыФинансовогоУчетаНоменклатуры);
			Иначе	
				Объект.ГруппаФинансовогоУчетаПроверять	= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
			Объект.ГруппаДоступаПроверять			= ОМУстановитьПараметры_ПроверитьНаличиеДанных(Справочники.ГруппыДоступаНоменклатуры);
		Иначе	
			Объект.ГруппаДоступаПроверять			= Истина;
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

// Проверить наличие данных в БД необязательных параметров для формирования таблицы "1С:Предприятие".
//
&НаСервере
Функция   ОМУстановитьПараметры_ПроверитьНаличиеДанных(ОбъектБД)
	
	// Справочники "ЦеновыеГруппы" И "НоменклатурныеГруппы" - маленькие - поэтому - ВЫБОРКА по скорости сопоставима с ЗАПРОСОМ.
	
	Выборка = ОбъектБД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Истина;
		Прервать;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выделить цветом группы реквизитов Обязательные (Наименование, ЦенаЗакупочная), Важные (Количество, ЦенаРозничная), Поисковые (Артикул, Штрихкод).
//
&НаСервере
Процедура ОМУстановитьПараметры_РаскраситьТаблицыЭталон_И_1С()
	
	ТаблицаЭталон = РеквизитФормыВЗначение("Объект.ТаблицаЭталон");
	
	СтрокаЗаголовка = ТаблицаЭталон[0];
	Строка1С = ТаблицаЭталон[2];
	
	Реквизиты1С = ПолучитьСтруктуруРеквизиты1С();
	Колонки1С 	= Новый Структура;
	
	Для ит = 2 ПО ТаблицаЭталон.Колонки.Количество()-1 Цикл				// ит = 2, т.к. 0 - "НомерСтроки" и 1 - "Сопоставлено".
		хЗначение = Неопределено;
		Если Строка1С[ит] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизиты1С.Свойство(Строка1С[ит], хЗначение) Тогда
			Колонки1С.Вставить(хЗначение, ит);
		КонецЕсли;
	КонецЦикла;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Раскраска ТАБЛИЦЫ "ЭТАЛОН".
	// По-умолчанию цвета заданы. Уточняем, если отсутствуют соответствующие колонки Excel.
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// ОБЯЗАТЕЛЬНЫЕ.
	Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Наименование") = Неопределено Тогда
		ИндексКолонки = НайтиВСтруктуреКлюч(Колонки1С, "Наименование").Значение - 1;	// Колонка "Применено" не выводится.
		Если НЕ ИндексКолонки = Неопределено Тогда
			Элементы.ТаблицаЭталон.ПодчиненныеЭлементы[ИндексКолонки].ЦветТекста = Новый Цвет(255, 0, 0);			// Красный.
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "ЦенаЗакупочная") = Неопределено Тогда
		ИндексКолонки = НайтиВСтруктуреКлюч(Колонки1С, "ЦенаЗакупочная").Значение - 1;	// Колонка "Применено" не выводится.
		Если НЕ ИндексКолонки = Неопределено Тогда
			Элементы.ТаблицаЭталон.ПодчиненныеЭлементы[ИндексКолонки].ЦветТекста = Новый Цвет(255, 0, 0);			// Красный.
		КонецЕсли;
	КонецЕсли;
	
	// ВАЖНЫЕ.
	Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "ЦенаРозничная") = Неопределено Тогда
		ИндексКолонки = НайтиВСтруктуреКлюч(Колонки1С, "ЦенаРозничная").Значение - 1;	// Колонка "Применено" не выводится.
		Если НЕ ИндексКолонки = Неопределено Тогда
			Элементы.ТаблицаЭталон.ПодчиненныеЭлементы[ИндексКолонки].ЦветТекста = Новый Цвет(0, 0, 255);			// Синий.
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Количество") = Неопределено Тогда
		ИндексКолонки = НайтиВСтруктуреКлюч(Колонки1С, "Количество").Значение - 1;		// Колонка "Применено" не выводится.
		Если НЕ ИндексКолонки = Неопределено Тогда
			Элементы.ТаблицаЭталон.ПодчиненныеЭлементы[ИндексКолонки].ЦветТекста = Новый Цвет(0, 0, 255);			// Синий.
		КонецЕсли;
	КонецЕсли;
	
	// ПОИСКОВЫЕ.
	Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Штрихкод") = Неопределено Тогда
		ИндексКолонки = НайтиВСтруктуреКлюч(Колонки1С, "Штрихкод").Значение - 1;	// Колонка "Применено" не выводится.
		Если НЕ ИндексКолонки = Неопределено Тогда
			Элементы.ТаблицаЭталон.ПодчиненныеЭлементы[ИндексКолонки].ЦветТекста = Новый Цвет(128, 0, 0);			// Коричневый.
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Артикул") = Неопределено Тогда
		ИндексКолонки = НайтиВСтруктуреКлюч(Колонки1С, "Артикул").Значение - 1;	// Колонка "Применено" не выводится.
		Если НЕ ИндексКолонки = Неопределено Тогда
			Элементы.ТаблицаЭталон.ПодчиненныеЭлементы[ИндексКолонки].ЦветТекста = Новый Цвет(128, 0, 0);			// Коричневый.
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Раскраска ТАБЛИЦЫ "1С".
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивТаблица1С = Новый Массив;
	МассивТаблица1С.Добавить("Номенклатура1С");	// Наименование.
	МассивТаблица1С.Добавить("Штрихкод");
	МассивТаблица1С.Добавить("Артикул");
	МассивТаблица1С.Добавить("ЕдиницаИзмерения");
	МассивТаблица1С.Добавить("ЦенаЗакупочная");
	МассивТаблица1С.Добавить("ЦенаРозничная");
	МассивТаблица1С.Добавить("СтавкаНДС");
	МассивТаблица1С.Добавить("Количество");
	МассивТаблица1С.Добавить("Вес");
	МассивТаблица1С.Добавить("Характеристика");
	МассивТаблица1С.Добавить("Упаковка");
	МассивТаблица1С.Добавить("Описание");
	МассивТаблица1С.Добавить("СтранаПроисхождения");
	МассивТаблица1С.Добавить("Производитель");
	МассивТаблица1С.Добавить("НомерГТД");
	МассивТаблица1С.Добавить("МаркаБренд");
	МассивТаблица1С.Добавить("КоллекцияСезон");

	// Красота требует жертв.
	Для Каждого ЭлементТаблицы ИЗ Элементы.Таблица1С.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементТаблицы) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементГруппы ИЗ ЭлементТаблицы.ПодчиненныеЭлементы Цикл
				Если ЭлементГруппы = Элементы.Таблица1СНайденПО
					ИЛИ ЭлементГруппы = Элементы.Таблица1СВозможные1С Тогда
					Продолжить;
				КонецЕсли;
				ЭлементГруппы.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива ИЗ МассивТаблица1С Цикл
		ЭлементСтруктуры = НайтиВСтруктуреКлюч(Колонки1С, ЭлементМассива);
		Если ЭлементСтруктуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Элементы.Найти("Таблица1С" + ЭлементСтруктуры.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элементы["Таблица1С" + ЭлементСтруктуры.Ключ].ЦветТекстаЗаголовка = Новый Цвет(0, 0, 255);				// Синий.
		Элементы["Таблица1С" + ЭлементСтруктуры.Ключ].ЦветТекста = Новый Цвет(0, 0, 255);						// Синий.
	КонецЦикла;
	
	Элементы.Таблица1СНаименованиеИД.ЦветТекстаЗаголовка = Новый Цвет(0, 0, 255);
	
	Для Каждого ЭлементТаблицы ИЗ Элементы.Таблица1С.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементТаблицы) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементГруппы ИЗ ЭлементТаблицы.ПодчиненныеЭлементы Цикл
				ИмяРеквизита = ЭлементГруппы.ПутьКДанным;
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Объект.Таблица1С.", "");
				Если НЕ Объект.СписокБлокируемыхРеквизитов.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
					ЭлементГруппы.ЦветТекстаЗаголовка = Новый Цвет(255, 0, 0);									// Красный.
				КонецЕсли;
			КонецЦикла;
		Иначе
			ИмяРеквизита = ЭлементТаблицы.ПутьКДанным;
			ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "Объект.Таблица1С.", "");
			Если НЕ Объект.СписокБлокируемыхРеквизитов.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
				ЭлементТаблицы.ЦветТекстаЗаголовка = Новый Цвет(255, 0, 0);										// Красный.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Таблица1СЦенаЗакупочная1С.ЦветТекстаЗаголовка	= Новый Цвет(0, 128, 0);							// Зеленый.
	Элементы.Таблица1СЦенаРозничная1С.ЦветТекстаЗаголовка	= Новый Цвет(0, 128, 0);							// Зеленый.
	
КонецПроцедуры

// Получить текст Предупреждения в случае, если какой-либо или все Алгоритмы поиска Номенклатуры в Справочнике не активизированы.
//
&НаКлиенте
Функция ОМУстановитьПараметры_ПроверитьИспользуемыеАлгоритмыПоиска(ПредупреждениеВозвращаемое = "", КоличествоНеиспользуемыхАлгоритмовПоиска = 0)
	
	Предупреждение = "";
	ПредупреждениеВозвращаемое = "";
	КоличествоНеВыбранных = 0;
	Если НЕ Объект.ПоискПоШтрихкоду Тогда
		КоличествоНеВыбранных = КоличествоНеВыбранных + 1;
		Предупреждение = Предупреждение + "
		|- По Штрихкоду *";
		ПредупреждениеВозвращаемое = ПредупреждениеВозвращаемое + "
		|- По Штрихкоду *";
	КонецЕсли;
	
	Если НЕ Объект.ПоискПоЧистомуНаименованию Тогда
		КоличествоНеВыбранных = КоличествоНеВыбранных + 1;
		Предупреждение = Предупреждение + "
		|- По ""чистому"" Наименованию *";
		ПредупреждениеВозвращаемое = ПредупреждениеВозвращаемое + "
		|- По ""чистому"" Наименованию *";
	КонецЕсли;
	
	Если НЕ Объект.ПоискПоНаименованию Тогда
		КоличествоНеВыбранных = КоличествоНеВыбранных + 1;
		Предупреждение = Предупреждение + "
		|- По Наименованию *";
		ПредупреждениеВозвращаемое = ПредупреждениеВозвращаемое + "
		|- По Наименованию *";
	КонецЕсли;
	
	// Дополнительные.
	Если НЕ Объект.ПоискПоЧистые34Наименования Тогда
		КоличествоНеВыбранных = КоличествоНеВыбранных + 1;
		Предупреждение = Предупреждение + "
		|- По ""чистым"" 3" + "/" + "4 Наименования ~";
		ПредупреждениеВозвращаемое = ПредупреждениеВозвращаемое + "
		|- По ""чистым"" 3" + "/" + "4 Наименования ~";
	КонецЕсли;
	
	Если НЕ Объект.ПоискПо34Наименования Тогда
		КоличествоНеВыбранных = КоличествоНеВыбранных + 1;
		Предупреждение = Предупреждение + "
		|- По 3" + "/" + "4 Наименования ~";
		ПредупреждениеВозвращаемое = ПредупреждениеВозвращаемое + "
		|- По 3" + "/" + "4 Наименования ~";
	КонецЕсли;
	
	Если НЕ Объект.ПоискПоАртикулу Тогда
		КоличествоНеВыбранных = КоличествоНеВыбранных + 1;
		Предупреждение = Предупреждение + "
		|- По Артикулу ~";
		ПредупреждениеВозвращаемое = ПредупреждениеВозвращаемое + "
		|- По Артикулу ~";
	КонецЕсли;
	
	Если КоличествоНеВыбранных = 6 Тогда
		Предупреждение = "ВНИМАНИЕ!
		|НЕ ВЫБРАН НИ ОДИН ИЗ АЛГОРИТМОВ ПОИСКА:
		|" + Предупреждение + "
		|
		|Это возможно только в случае, если ВСЯ загружаемая Номенклатура НОВАЯ.
		|
		|Укажите необходимые на вкладке ""Параметры"" - ""Алгоритмы поиска""
		|
		|или деактивируйте флажок 
		|""Показывать в текущем сеансе предупреждение о невыбранных алгоритмах поиска"".";
	ИначеЕсли КоличествоНеВыбранных > 0 Тогда
		Предупреждение = "ВНИМАНИЕ!
		|НЕ ВЫБРАНЫ СЛЕДУЮЩИЕ АЛГОРИТМЫ ПОИСКА:
		|" + Предупреждение + "
		|
		|Это существенно ухудшает механизм поиска данных, и как следствие,
		|возможно появление дублирующих элементов справочника ""Номенклатура"".
		|
		|Укажите необходимые на вкладке ""Параметры"" - ""Алгоритмы поиска"",
		|
		|При необходимости деактивируйте флажок 
		|""Показывать в текущем сеансе предупреждение о невыбранных алгоритмах поиска"".";
	КонецЕсли;

	КоличествоНеиспользуемыхАлгоритмовПоиска = КоличествоНеВыбранных;
	Возврат Предупреждение;
	
КонецФункции

// Заполнить Таблицу-Эталон Строку "Реквизит1С" по значениям колонок исходных данных и их типам (Число, Дата, Строка).
// Это 1-ый этап из 2-х этапов заполнения Таблицы-Эталона.
//
&НаСервере
Процедура ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗначениямКолонок()
	
	ЭтотОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаИсходныхДанных 	= РеквизитФормыВЗначение("Объект.ТаблицаИсходныхДанных");
	ТаблицаЗаголовков 		= РеквизитФормыВЗначение("Объект.ТаблицаЗаголовков");
	
	// Создадим Таблицу с Эталонной строкой и отбразим ее.
	ТаблицаЭталон = Новый ТаблицаЗначений;
	Для Каждого Колонка ИЗ ТаблицаИсходныхДанных.Колонки Цикл
		ТаблицаЭталон.Колонки.Добавить(Колонка.Имя, , Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
		
	СтрокаЗаголовка = ТаблицаИсходныхДанных[0];
	ЗаполнитьЗначенияСвойств(ТаблицаЭталон.Добавить(), СтрокаЗаголовка);
	ТаблицаЭталон[ТаблицаЭталон.Количество()-1].НомерСтроки = "КолонкаExcel";
	
	СтрокаЭталона 	= ТаблицаИсходныхДанных[1];
	ЗаполнитьЗначенияСвойств(ТаблицаЭталон.Добавить(), СтрокаЭталона);
	ТаблицаЭталон[ТаблицаЭталон.Количество()-1].НомерСтроки = "СтрокаЭталон";
	
	Строка1С = ТаблицаЭталон.Добавить();
	Строка1С.НомерСтроки = "Реквизит1С";
	
	ТаблицаФормы 	= ФормаСоздатьРеквизитТипаТаблицаФормы(Элементы.ТаблицаЭталон.Имя, Элементы.ТаблицаЭталон.ПутьКДанным, ТаблицаЭталон, Элементы.СтраницаПараметры);
	ТаблицаФормы.ТолькоПросмотр = Ложь;
	
	КлассификаторСтранМира 			= ЭтотОбъект.ПолучитьМакет("КлассификаторСтранМира");
	КлассификаторЕдиницИзмерения	= ЭтотОбъект.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	
	Предположения = ПолучитьСтруктуруПредположения();
	
	ит = 0;
	Для Каждого Колонка ИЗ ТаблицаИсходныхДанных.Колонки Цикл
		Если Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		
		ит = ит + 1;
		
		НомерКолонки 		= ТаблицаИсходныхДанных.Колонки.Индекс(Колонка);
		ЗаголовокКолонки	= СокрЛП(СтрокаЗаголовка[НомерКолонки]);
		ЗначениеКолонки 	= СтрокаЭталона[НомерКолонки];
		ШиринаКолонки 		= СтрДлина(ЗначениеКолонки);
		
		// СтранаПроисхождения.
		Если НЕ ЭтоЧисло(ЗначениеКолонки) И НЕ КлассификаторСтранМира.НайтиТекст(ЗначениеКолонки, , КлассификаторСтранМира.Области.НаименованиеКраткое) = Неопределено Тогда
			Строка1С[НомерКолонки] = Предположения.СтранаПроисхождения;
			Продолжить;
		КонецЕсли;
		
		// Единица измерения.
		Если НЕ ЭтоЧисло(ЗначениеКолонки) И (НЕ КлассификаторЕдиницИзмерения.НайтиТекст(ЗначениеКолонки, , КлассификаторЕдиницИзмерения.Области.НаименованиеКраткое) = Неопределено  ИЛИ Найти(ВРег(СокрЛП(ЗначениеКолонки)),"ШТУК") > 0 ) Тогда
			Строка1С[НомерКолонки] = Предположения.ЕдиницаИзмерения;
			Продолжить;
		КонецЕсли;
		
		// КоллекцияСезон.
		Если Найти(ВРег(ЗначениеКолонки), "ЗИМА") > 0 
			ИЛИ Найти(ВРег(ЗначениеКолонки), "ВЕСНА") > 0
			ИЛИ Найти(ВРег(ЗначениеКолонки), "ЛЕТО") > 0
			ИЛИ Найти(ВРег(ЗначениеКолонки), "ОСЕНЬ") > 0 Тогда
			
			Строка1С[НомерКолонки] = Предположения.КоллекцияСезон;
			Продолжить;
			
		КонецЕсли;
		
		// Дата.
		Если ЭтоДата(ЗначениеКолонки) Тогда
			//Строка1С[НомерКолонки] = Предположения.Дата;
			Продолжить;
		ИначеЕсли СтрЧислоВхождений(ЗначениеКолонки, ".") = 2 Тогда
			хЗначение = СтрЗаменить(ЗначениеКолонки, ".", "");
			Если ЭтоЧисло(хЗначение) И ЧислоЦелое(хЗначение) Тогда
				//Строка1С[НомерКолонки] = Предположения.ДатаВДругомФормате;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Число.
		Если ЭтоЧисло(ЗначениеКолонки) Тогда
			Если ЧислоЦелое(ЗначениеКолонки) Тогда
				Если ШиринаКолонки = 2 И Число(ЗначениеКолонки) = 18 Тогда
					Строка1С[НомерКолонки] = Предположения.СтавкаНДС;
					Продолжить;
				ИначеЕсли ШиринаКолонки = 8 ИЛИ ШиринаКолонки = 12 ИЛИ ШиринаКолонки = 13 Тогда
					Если ШиринаКолонки = 12 Тогда
						ЗначениеКолонки	= ЗначениеКолонки + КонтрольныйСимволEAN13(ЗначениеКолонки);
					КонецЕсли;
					ТипШтрихКода = ОпределитьТипШтрихкода(ЗначениеКолонки);
					Если ЗначениеЗаполнено(ТипШтрихКода) Тогда
						Строка1С[НомерКолонки] = Предположения.Штрихкод;
						Продолжить;
					Иначе
						//Строка1С[НомерКолонки] = Предположения.ЧислоЦелое;
						Продолжить;
					КонецЕсли;
				Иначе
					//Строка1С[НомерКолонки] = Предположения.ЧислоЦелое;
					Продолжить;
				КонецЕсли;
			Иначе
				//Строка1С[НомерКолонки] = Предположения.ЧислоДействительное;
			КонецЕсли;
		Иначе
			Если Найти(ЗначениеКолонки, ",") > 0 Тогда
				хЗначение = СтрЗаменить(ЗначениеКолонки, ",", "");
				Если ЭтоЧисло(ЗначениеКолонки) Тогда
					//Строка1С[НомерКолонки] = Предположения.ЧислоДействительное;
					Продолжить;
				КонецЕсли;
			ИначеЕсли Найти(ЗначениеКолонки, ".") > 0 Тогда
				хЗначение = СтрЗаменить(ЗначениеКолонки, ".", "");
				Если ЭтоЧисло(ЗначениеКолонки) Тогда
					//Строка1С[НомерКолонки] = Предположения.ЧислоДействительное;
					Продолжить;
				КонецЕсли;
			Иначе	
				//Строка1С[НомерКолонки] = Предположения.Строка;	// Ширину Колонки не указывать.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭталон, "Объект.ТаблицаЭталон");
	
КонецПроцедуры

// Дополнить Таблицу-Эталон Строку "Реквизит1С" по сопоставлениям из Таблицы "Синонимы" между именем Реквизита1С и варианта именования колонки файла.
// Это 2-ый этап из 2-х этапов заполнения Таблицы-Эталона.
//
&НаСервере
Процедура ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗаголовкамКолонок(Отказ)
	
	ТаблицаЭталон 		= РеквизитФормыВЗначение("Объект.ТаблицаЭталон");
	ТаблицаЗаголовков	= РеквизитФормыВЗначение("Объект.ТаблицаЗаголовков");
	
	СтрокаЗаголовка = ТаблицаЭталон[0];
	СтрокаЭталона 	= ТаблицаЭталон[1];
	Строка1С 		= ТаблицаЭталон[2];
	
	Предположения = ПолучитьСтруктуруПредположения();
	
	НаименованиеОпределено 		= Ложь;
	ЦенаЗакупочнаяОпределена	= Ложь;
	
	Объект.КоличествоОпределено		= Ложь;
	Объект.ЦенаРозничнаяОпределена	= Ложь;
	Объект.СоздаватьНовыеГруппыНоменклатуры = Ложь;
	Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа = Ложь;
	
	ит = -1;
	Для Каждого Колонка ИЗ ТаблицаЭталон.Колонки Цикл
		Если Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Сопоставлено" Тогда
			Продолжить;
		КонецЕсли;
		
		ит = ит + 1;
		
		НомерКолонки 		= ТаблицаЭталон.Колонки.Индекс(Колонка);
		ЗаголовокКолонки	= СокрЛП(СтрокаЗаголовка[НомерКолонки]);
		ЗначениеКолонки 	= СтрокаЭталона[НомерКолонки];
		
		мНаименование		= ТаблицаЗаголовков.Найти("Наименование"		, "Колонка").Синонимы;
		мНаименование		= РазложитьСтрокуВМассивПодстрок(мНаименование, ";");
		
		мШтрихКод 			= ТаблицаЗаголовков.Найти("Штрихкод"			, "Колонка").Синонимы;
		мШтрихКод 			= РазложитьСтрокуВМассивПодстрок(мШтрихКод, ";");
		
		мАртикул 			= ТаблицаЗаголовков.Найти("Артикул"				, "Колонка").Синонимы;
		мАртикул 			= РазложитьСтрокуВМассивПодстрок(мАртикул, ";");
		
		мЕдиницаИзмерения 	= ТаблицаЗаголовков.Найти("ЕдиницаИзмерения"	, "Колонка").Синонимы;
		мЕдиницаИзмерения 	= РазложитьСтрокуВМассивПодстрок(мЕдиницаИзмерения, ";");
		
		мЦенаЗакупочная		= ТаблицаЗаголовков.Найти("ЦенаЗакупочная"		, "Колонка").Синонимы;
		мЦенаЗакупочная 	= РазложитьСтрокуВМассивПодстрок(мЦенаЗакупочная, ";");
		
		мЦенаРозничная		= ТаблицаЗаголовков.Найти("ЦенаРозничная"		, "Колонка").Синонимы;
		мЦенаРозничная		= РазложитьСтрокуВМассивПодстрок(мЦенаРозничная, ";");
		
		мСтавкаНДС			= ТаблицаЗаголовков.Найти("СтавкаНДС"			, "Колонка").Синонимы;
		мСтавкаНДС			= РазложитьСтрокуВМассивПодстрок(мСтавкаНДС, ";");
		
		мКоличество 		= ТаблицаЗаголовков.Найти("Количество"			, "Колонка").Синонимы;
		мКоличество 		= РазложитьСтрокуВМассивПодстрок(мКоличество, ";");
		
		мВес	 			= ТаблицаЗаголовков.Найти("Вес"					, "Колонка").Синонимы;
		мВес 				= РазложитьСтрокуВМассивПодстрок(мВес, ";");
		
		мХарактеристика		= ТаблицаЗаголовков.Найти("Характеристика"		, "Колонка").Синонимы;
		мХарактеристика		= РазложитьСтрокуВМассивПодстрок(мХарактеристика, ";");
		
		мОписание 			= ТаблицаЗаголовков.Найти("Описание"			, "Колонка").Синонимы;
		мОписание			= РазложитьСтрокуВМассивПодстрок(мОписание, ";");
		
		мСтранаПроисхождения= ТаблицаЗаголовков.Найти("СтранаПроисхождения"	, "Колонка").Синонимы;
		мСтранаПроисхождения= РазложитьСтрокуВМассивПодстрок(мСтранаПроисхождения, ";");
		
		мПроизводитель		= ТаблицаЗаголовков.Найти("Производитель"		, "Колонка").Синонимы;
		мПроизводитель		= РазложитьСтрокуВМассивПодстрок(мПроизводитель, ";");
		
		мНомерГТД			= ТаблицаЗаголовков.Найти("НомерГТД"			, "Колонка").Синонимы;
		мНомерГТД			= РазложитьСтрокуВМассивПодстрок(мНомерГТД, ";");
		
		мМаркаБренд 		= ТаблицаЗаголовков.Найти("МаркаБренд"			, "Колонка").Синонимы;
		мМаркаБренд			= РазложитьСтрокуВМассивПодстрок(мМаркаБренд, ";");
		
		мКоллекцияСезон		= ТаблицаЗаголовков.Найти("КоллекцияСезон"		, "Колонка").Синонимы;
		мКоллекцияСезон		= РазложитьСтрокуВМассивПодстрок(мКоллекцияСезон, ";");
		
		Если НайтиВМассиве(ЗаголовокКолонки, мНаименование) Тогда
			
			НаименованиеОпределено = Истина;
			Строка1С[НомерКолонки] = Предположения.Наименование;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мШтрихКод) Тогда
			
			Строка1С[НомерКолонки] = Предположения.ШтрихКод;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мАртикул) Тогда
			
			Строка1С[НомерКолонки] = Предположения.Артикул;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мЕдиницаИзмерения) Тогда
			
			Строка1С[НомерКолонки] = Предположения.ЕдиницаИзмерения;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мЦенаЗакупочная) Тогда
			
			ЦенаЗакупочнаяОпределена = Истина;
			Строка1С[НомерКолонки] = Предположения.ЦенаЗакупочная;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мЦенаРозничная) Тогда
			
			Объект.ЦенаРозничнаяОпределена = Истина;
			Строка1С[НомерКолонки] = Предположения.ЦенаРозничная;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мСтавкаНДС) Тогда
			
			Строка1С[НомерКолонки] = Предположения.СтавкаНДС;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мКоличество) Тогда
			
			Объект.КоличествоОпределено = Истина;
			Строка1С[НомерКолонки] = Предположения.Количество;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мВес) Тогда
			
			Строка1С[НомерКолонки] = Предположения.Вес;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мХарактеристика) Тогда
			
			Строка1С[НомерКолонки] = Предположения.Характеристика;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мОписание) Тогда
			
			Строка1С[НомерКолонки] = Предположения.Описание;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мСтранаПроисхождения) Тогда
			
			Строка1С[НомерКолонки] = Предположения.СтранаПроисхождения;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мПроизводитель) Тогда
			
			Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа = Истина;
			Строка1С[НомерКолонки] = Предположения.Производитель;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мНомерГТД) Тогда
			
			Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа = Истина;
			Строка1С[НомерКолонки] = Предположения.НомерГТД;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мМаркаБренд) Тогда
			
			Объект.СоздаватьНовыеГруппыНоменклатуры = Истина;
			Строка1С[НомерКолонки] = Предположения.МаркаБренд;
			
		ИначеЕсли НайтиВМассиве(ЗаголовокКолонки, мКоллекцияСезон) Тогда
			
			Объект.СоздаватьНовыеГруппыНоменклатуры = Истина;
			Строка1С[НомерКолонки] = Предположения.КоллекцияСезон;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Розничная цена может быть получена по БД, если есть соответствующая номенклатура с ценой.
	// Если Количество не указано, то можно обновить Справочники и формировать документ УстановкаЦеныНоменклатуры.
	Если НЕ НаименованиеОпределено ИЛИ НЕ ЦенаЗакупочнаяОпределена Тогда	
		Отказ = Истина;
		Объект.РеквизитыСопоставленыКолонкам = Ложь;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаЭталон, "Объект.ТаблицаЭталон");
	
КонецПроцедуры

// Получить Структуру, содержащую возможные реквизиты Номенклатуры, а также "специфические" типы.
// Используется в ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗначениямКолонок и ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗаголовкамКолонок.
//
&НаСервере
Функция ПолучитьСтруктуруПредположения()
	
	Предположения = Новый Структура;
	Предположения.Вставить("Наименование"		, "Наименование");
	Предположения.Вставить("Штрихкод"			, "Штрихкод");
	Предположения.Вставить("Артикул"			, "Артикул");
	Предположения.Вставить("ЕдиницаИзмерения"	, "ЕдиницаИзмерения");
	Предположения.Вставить("ЦенаЗакупочная"		, "ЦенаЗакупочная");
	Предположения.Вставить("ЦенаРозничная"		, "ЦенаРозничная");
	Предположения.Вставить("СтавкаНДС"			, "СтавкаНДС");
	Предположения.Вставить("Количество"			, "Количество");
	Предположения.Вставить("Вес"				, "Вес");
	Предположения.Вставить("Характеристика"		, "Характеристика");
	Предположения.Вставить("Описание"			, "Описание");
	Предположения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	Предположения.Вставить("Производитель"		, "Производитель");
	Предположения.Вставить("НомерГТД"			, "НомерГТД");
	Предположения.Вставить("МаркаБренд"			, "МаркаБренд");
	Предположения.Вставить("КоллекцияСезон"		, "КоллекцияСезон");

	Предположения.Вставить("Строка"				, "Строка");
	Предположения.Вставить("Дата"				, "Дата");
	Предположения.Вставить("ДатаВДругомФормате"	, "ДатаВДругомФормате");
	Предположения.Вставить("ЧислоЦелое"			, "ЧислоЦелое");
	Предположения.Вставить("ЧислоДействительное", "ЧислоДействительное");
	
	Возврат Предположения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ Таблицы1С.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Формирование таблицы "1С:Предприятие".
//
// На основании данной таблицы производится:
//
// 1. Заполнение справочника "Номенклатура".
// 2. Запись Штрихкода в РегистрСведений "Штрихкоды".
// 3. Формирование документов "Поступление товаров" / ("Оприходование товаров", "Установка себестоимости") и "Установка цены номенклатуры".
//
&НаКлиенте
Процедура ОМЗаполнитьТаблицу1С(Команда)

	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнениеПараметров() Тогда
		Возврат;
	КонецЕсли;
	
	Предупреждение = ОМУстановитьПараметры_ПроверитьИспользуемыеАлгоритмыПоиска();
	Если ЭтаФорма.ПоказыватьПредупреждениеОНеВыбранныхАлгоритмахПоиска И ЗначениеЗаполнено(Предупреждение) Тогда
		Ответ = Вопрос(Предупреждение + "
			|
			|Продолжить заполнение таблицы ""1С:Предприятие"" ?
			|", 
			РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,  
			Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия + ": " + "ФАЙЛ ИСХОДНЫХ ДАННЫХ", 
			КодВозвратаДиалога.Нет);
			
		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
			
			Возврат;
		
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДокументыСозданы И Объект.Таблица1С.Количество() > 0 Тогда
		Предупреждение("Документы на основании считанных данных уже созданы.
		|Повторное формирование таблицы не требуется.");
		Элементы.ОМСформироватьДокументы.Заголовок = "Изменить Документы";
		Возврат;
	КонецЕсли;

	Состояние("" + Объект.ПараметрыСеансаОбработки.СинонимОбработки + "
	|Заполнение таблицы 1С:Предприятие ... Номенклатура, цены и т.д.");
	
	Объект.СправочникиОбновлены = НЕ ЭтоОсновноеДействиеСоздать();
	
	ОМУстановитьПараметры_РаскраситьТаблицыЭталон_И_1С();
	
	ОчиститьСообщения();
	
	ЕстьКомментарии = Ложь;
	ЕстьРасхожденияВНаименованияхНайденныхПоШК = Ложь;
	НайденоExcel = 0;
	Найдено1С	 = 0;
	
	Если ЭтоОсновноеДействиеСоздать() Тогда
		
		ОМЗаполнитьТаблицу1С_ДействиеСоздатьДокументы(ЕстьКомментарии, ЕстьРасхожденияВНаименованияхНайденныхПоШК);
		
		ФормаОпределитьДоступнность();
		
		ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаТаблица1С;
		
		Если ЕстьКомментарии Тогда
			Предупреждение("При формировании таблицы возникли исключительные ситуации. см. колонку ""Комментарий"".");
		КонецЕсли;
		
		Элементы.Таблица1СЧтоДелать_НесовпадающиеНаименования.Доступность = ЕстьРасхожденияВНаименованияхНайденныхПоШК ИЛИ Объект.ИзменятьНаименование;
		Элементы.Таблица1СЧтоДелать_НесовпадающиеРеквизиты.Доступность = ЕстьКомментарии;
		
	Иначе
		
		ОМЗаполнитьТаблицу1С_ДействиеИзменитьДокументы(НайденоExcel, Найдено1С);
		
		ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаТаблица1С;
		
		ТекстПредупрежденияДополнительный = ?(Найдено1С = 0, "Возмодно необходимо установить флажок ""Артикул содержится в Наименовании"" на странице ""Параметры-Номенклатура"".", "");
		
		Предупреждение("Документ: " + Объект.ДокументКорректируемый + "
		|
		|По таблице ""Excel"" сопоставлено " + НайденоExcel + " из " + (Объект.ТаблицаИсходныхДанных.Количество()-1) + " позиций данным документа.
		|По таблице Документа сопоставлено " + Найдено1С + " из " + Объект.Таблица1С.Количество() + " позиций данным Excel.
		|
		|" + ТекстПредупрежденияДополнительный);	// "-1": Строка заголовка.
		
		ФормаОпределитьДоступнность();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелать_НесовпадающиеНаименования(Команда)
	
	Предупреждение("2 ПРОБЛЕМЫ
	|
	|==================================================================================================
	|
	|Проблема № 1. Номенклатура найдена по ШТРИХКОДУ,
	|но Наименование в EXCEL не совпадает с Наименованием в СПРАВОЧНИКЕ ""Номенклатура"".
	|
	|Необходимо проверить данные этих строк и при необходимости:
	|
	|1. ОСТАВИТЬ ВСЕ ""КАК ЕСТЬ"".
	|В этом случае Наименование в справочнике ""Номенклатура"" останется прежним.
	|
	|2. НА ВКЛАДКЕ ""ПАРАМЕТРЫ - ОСОБЫЕ"" УСТАНОВИТЬ ФЛАЖОК ""ИЗМЕНЯТЬ НАИМЕНОВАНИЕ"".
	|В этом случае Наименование и НаименованиеПолное справочника будут замещены Наименованиями из файла.
	|
	|3. ИЗМЕНИТЬ ЗНАЧЕНИЕ НАИМЕНОВАНИЯ В ФАЙЛЕ ИЛИ ЭЛЕМЕНТЕ НОМЕНКЛАТУРЫ ВРУЧНУЮ.
	|(""Глаза боятся - а руки делают"" - народная мудрость.)
	|
	|==================================================================================================
	|
	|Проблема № 2. КЕШИРОВАНИЕ.
	|
	|Если Вы произвели переименование элементов Номенклатуры (установлен флажок ""Изменять Наименование""),
	|а в таблице отображается старое наименование - это следствие кеширования данных.
	|
	|Проверка: 
	|- Открыть элемент непосредственно из таблицы.
	|или
	|- Закрыть сеанс 1С:Предприятие и вновь открыть и запустить Обработку,
	|выполнить действия до ""Сформировать таблицу 1С"" включительно.");

КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелать_НесовпадающиеРеквизиты(Команда)
	
	Предупреждение("ВНИМАНИЕ!
	|
	|Найдены строки, в которых значения Ячеек EXCEL не совпадают/не нашли соответствия с Данными 1С.
	|
	|Необходимо проверить данные этих строк и при необходимости:
	|
	|1. ПРОВЕРИТЬ ПРАВИЛЬНОСТЬ идентификации Колонки EXCEL и Реквизита 1С по Типу(содержнию ячейки) или Наименованию.
	|
	|3. ДОПОЛНИТЬ СПРАВОЧНИКИ недостающими элементами либо по классификатору, либо вручную.
	|(исключая справочник ""Номенклатура"")
	|
	|4. ОСТАВИТЬ ВСЕ ""КАК ЕСТЬ"".
	|В этом случае Значение Реквизита в справочнике ""Номенклатура"" останется прежним.
	|
	|5. НА ВКЛАДКЕ ""ПАРАМЕТРЫ - ОСОБЫЕ"" УСТАНОВИТЬ ФЛАЖОК ""ИЗМЕНЯТЬ РЕКВИЗИТЫ"".
	|В этом случае значение Реквизита справочника будут замещены Данными из файла.
	|(дополнительно флажок ""в т.ч. блокированние"" - не рекомендуется для существующих элементов.
	|Блокированные реквизиты можно посмотреть на вкладке ""Параметры-Номенклатура"".)
	|
	|6. ИЗМЕНИТЬ ЗНАЧЕНИЕ в файле EXCEL (повторить загрузку) или элементе НОМЕНКЛАТУРЫ вручную.
	|(""Глаза боятся - а руки делают"" - народная мудрость.)");

КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелать_Справка(Команда)
	ОткрытьСправкуФормы();
КонецПроцедуры

// Формирование таблицы "1С:Предприятие". Основное действие: "Изменить".
//
// На основании данной таблицы производится изменение документа "Поступление товаров".
//
// ПРИНЦИП ФОРМИРОВАНИЯ:
//
// Действие "Изменить" - ОБРАТНОЕ действие по отношению к "Создание" документов,
// т.е. исходные данные - Данные 1С:Предприятие, а не таблица Excel.
//
// Основа: Табличная часть "Товары" документа "Поступление товаров".
// Для каждой строки ТЧ ищется "своя" строка Excel.
//
// 1. Сопоставление по Штрихкоду, если есть в таблице Excel.
// 2. По Наименованию - обязательная колонка таблицы Excel.
// 3. По Наименованию и Артикулу.
//
&НаСервере
Процедура ОМЗаполнитьТаблицу1С_ДействиеИзменитьДокументы(НайденоExcel, Найдено1С)
	
	ТаблицаИсходныхДанных = РеквизитФормыВЗначение("Объект.ТаблицаИсходныхДанных");
	ТаблицаЭталон = РеквизитФормыВЗначение("Объект.ТаблицаЭталон");
	Таблица1С = РеквизитФормыВЗначение("Объект.Таблица1С");
	
	СтрокаЗаголовка = ТаблицаЭталон[0];
	Строка1С = ТаблицаЭталон[2];
	
	Реквизиты1С = ПолучитьСтруктуруРеквизиты1С();
	Колонки1С 	= Новый Структура;
	Значения1С  = ПолучитьСтруктуруРеквизиты1С(Истина);
	
	Для ит = 2 ПО ТаблицаЭталон.Колонки.Количество()-1 Цикл				// ит = 2, т.к. 0 - "НомерСтроки" и 1 - "Сопоставлено".
		хЗначение = Неопределено;
		Если Строка1С[ит] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизиты1С.Свойство(Строка1С[ит], хЗначение) Тогда
			Колонки1С.Вставить(хЗначение, ит);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИсходныхДанных.ЗаполнитьЗначения(Ложь, "Сопоставлено");
	
	Объект.Таблица1С.Очистить();
	Таблица1С.Очистить();
	
	Для Каждого СтрокаТЧ ИЗ Объект.ДокументКорректируемый.Товары Цикл
		
		НоваяСтрока = Таблица1С.Добавить();
		НоваяСтрока.Артикул1С = СтрокаТЧ.Номенклатура.Артикул;
		НоваяСтрока.НомерСтроки = СтрокаТЧ.НомерСтроки;
		НоваяСтрока.Номенклатура1С = СтрокаТЧ.Номенклатура;
			
		НоваяСтрока.ЦенаЗакупочная1С = СтрокаТЧ.Цена;
		НоваяСтрока.ЦенаРозничная1С = ПолучитьЦенуНоменклатурыНаДатуНаСервере(Объект.ВидЦеныРозничная, СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, Объект.ДокументКорректируемый.Дата);
		
		НоваяСтрока.Штрихкод1С = ПолучитьШтрихКодПоНоменклатураСсылкаНаСервере(СтрокаТЧ.Номенклатура, Неопределено);
		
		// 1. Поиск по ШтрихКоду по Таблице исходных данных.
		// Колонка "Штрихкод" ВАЖНЫЙ, НО НЕОБЯЗАТЕЛЬНЫЙ.
		Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Штрихкод") = Неопределено Тогда
			ИндексКолонкиИД = Колонки1С.Штрихкод;
			ИмяКолонкиИД = ТаблицаИсходныхДанных.Колонки[ИндексКолонкиИД].Имя;
			ШтрихКод = НоваяСтрока.Штрихкод1С;
			СтрокаИД = ТаблицаИсходныхДанных.Найти(Строка(ШтрихКод), ИмяКолонкиИД);
			
			Если СтрокаИД = Неопределено И СтрДлина(ШтрихКод) = 13 Тогда
				СтрокаИД = ТаблицаИсходныхДанных.Найти(Лев(ШтрихКод,12), ИмяКолонкиИД);
			КонецЕсли;
			
			Если НЕ СтрокаИД = Неопределено Тогда
				
				НоваяСтрока.Комментарий = "EXCEL. Строка №: " + СтрокаИД[0];
				
				СтрокаИД.Сопоставлено = Истина;							// Строка ТаблицыИсходныхДанных.
				
				НоваяСтрока.НайденПО = Объект.стрНайденПО.ШтрихКоду;
				НоваяСтрока.Штрихкод = СтрокаИД[ИндексКолонкиИД];
				
				// Колонка Наименование ОБЯЗАТЕЛЬНАЯ.
				ИндексКолонкиИД = Колонки1С.Наименование;
				НоваяСтрока.НаименованиеИД = СтрокаИД[ИндексКолонкиИД];
				
				Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Артикул") = Неопределено Тогда
					ИндексКолонкиИД = Колонки1С.Артикул;
					НоваяСтрока.Артикул = СтрокаИД[ИндексКолонкиИД];
				КонецЕсли;
				
				Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "ЦенаЗакупочная") = Неопределено Тогда
					ИндексКолонкиИД = Колонки1С.ЦенаЗакупочная;
					НоваяСтрока.ЦенаЗакупочная = СтрокаИД[ИндексКолонкиИД];
				КонецЕсли;
				
				Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "ЦенаРозничная") = Неопределено Тогда
					ИндексКолонкиИД = Колонки1С.ЦенаРозничная;
					НоваяСтрока.ЦенаРозничная = СтрокаИД[ИндексКолонкиИД];
				КонецЕсли;
				
				Если НЕ НоваяСтрока.ЦенаЗакупочная = 0 Тогда
					НоваяСтрока.Изменить = НЕ НоваяСтрока.ЦенаЗакупочная1С = НоваяСтрока.ЦенаЗакупочная И (Объект.ЦенаМеньше <= НоваяСтрока.ЦенаЗакупочная1С И НоваяСтрока.ЦенаЗакупочная1С <= Объект.ЦенаБольше);
				КонецЕсли;
			
				//Если НЕ НоваяСтрока.ЦенаРозничная = 0 И НЕ НоваяСтрока.Изменить Тогда
				//	НоваяСтрока.Изменить = НЕ НоваяСтрока.ЦенаРозничная1С = НоваяСтрока.ЦенаРозничная;
				//КонецЕсли;
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// 2. Поиск по Наименованию по Таблице исходных данных.
		// Колонка "Наименование" ОБЯЗАТЕЛЬНАЯ.
		
		Артикул = "";
		ИндексКолонкиИД = Колонки1С.Наименование;
		ИмяКолонкиИД = ТаблицаИсходныхДанных.Колонки[ИндексКолонкиИД].Имя;
		
		НайденПоЧистомуНаименованиюБезПробелов = Ложь;
		// Если Номенклатура ищется "КАК ЕСТЬ".
		Если НЕ Объект.НаименованиеСодержитАртикул Тогда
			СтрокаИД = ТаблицаИсходныхДанных.Найти(Строка(СтрокаТЧ.Номенклатура), ИмяКолонкиИД);
			
			// Если Гора не идет к Магомеду, то ...
			
			// По сравнению с "ЧИСТЫМ" "БезПробелов" Наименованием Excel.
			Наименование1СЧистоеБезПробелов = СтрЗаменить(ОчиститьОтЛишнего(СтрокаТЧ.Номенклатура), " ", "");
			Если СтрокаИД = Неопределено Тогда
				Для Каждого СтрокаТаблицыИД ИЗ ТаблицаИсходныхДанных Цикл
					НаименованиеExcelЧистоеБезПробелов = СтрЗаменить(ОчиститьОтЛишнего(СтрокаТаблицыИД[ИндексКолонкиИД]), " ", "");
					Если Найти(Наименование1СЧистоеБезПробелов, НаименованиеExcelЧистоеБезПробелов) > 0 ИЛИ Найти(НаименованиеExcelЧистоеБезПробелов, Наименование1СЧистоеБезПробелов) > 0 Тогда
						НайденПоЧистомуНаименованиюБезПробелов = Истина;
						СтрокаИД = СтрокаТаблицыИД;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			// Если Артикул - 1-е слово в Наименовании 1С.
			Артикул = ПолучитьАртикулИзНаименования(СтрокаТЧ.Номенклатура);
			Если ЗначениеЗаполнено(Артикул) И Артикул = СокрЛП(СтрокаТЧ.Номенклатура.Артикул)  Тогда
				// Да - это 1-ое слово в Наименовании 1С.
				НаименованиеИскомое = СтрокаТЧ.Номенклатура;
			Иначе
				// Нет - Наименование 1С не содержит Артикул.
				Артикул = СтрокаТЧ.Номенклатура.Артикул;
				НаименованиеИскомое = Артикул + Объект.РазделительАртикулаИНаименования + СтрокаТЧ.Номенклатура
			КонецЕсли;
			
			СтрокаИД = ТаблицаИсходныхДанных.Найти(НаименованиеИскомое, ИмяКолонкиИД);
			
			// Если Гора не идет к Магомеду, то ...
			
			// По сравнению с "ЧИСТЫМ" "БезПробелов" Наименованием Excel.
			Наименование1СЧистоеБезПробелов = СтрЗаменить(ОчиститьОтЛишнего(НаименованиеИскомое), " ", "");
			Если СтрокаИД = Неопределено Тогда
				Для Каждого СтрокаТаблицыИД ИЗ ТаблицаИсходныхДанных Цикл
					НаименованиеExcelЧистоеБезПробелов = СтрЗаменить(ОчиститьОтЛишнего(СтрокаТаблицыИД[ИндексКолонкиИД]), " ", "");
					Если Найти(Наименование1СЧистоеБезПробелов, НаименованиеExcelЧистоеБезПробелов) > 0 ИЛИ Найти(НаименованиеExcelЧистоеБезПробелов, Наименование1СЧистоеБезПробелов) > 0 Тогда
						НайденПоЧистомуНаименованиюБезПробелов = Истина;
						СтрокаИД = СтрокаТаблицыИД;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаИД = Неопределено Тогда							// Наименование сопоставлено.
				
			НоваяСтрока.Комментарий = "EXCEL. Строка №: " + СтрокаИД[0];
				
			СтрокаИД.Сопоставлено = Истина;								// Строка ТаблицыИсходныхДанных.
			
			Если ЗначениеЗаполнено(Артикул) Тогда
				Если НайденПоЧистомуНаименованиюБезПробелов Тогда
					НоваяСтрока.НайденПО = Объект.стрНайденПО.Артикулу + "+" + Объект.стрНайденПО.ЧистомуНаименованиюБезПробелов;
				Иначе
					НоваяСтрока.НайденПО = Объект.стрНайденПО.Артикулу + "+" + Объект.стрНайденПО.Наименованию;
				КонецЕсли;
			Иначе
				Если НайденПоЧистомуНаименованиюБезПробелов Тогда
					НоваяСтрока.НайденПО = Объект.стрНайденПО.ЧистомуНаименованиюБезПробелов;
				Иначе
					НоваяСтрока.НайденПО = Объект.стрНайденПО.Наименованию;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.НаименованиеИД = СтрокаИД[ИндексКолонкиИД];
			
			Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "Артикул") = Неопределено Тогда
				ИндексКолонкиИД = Колонки1С.Артикул;
				НоваяСтрока.Артикул = СтрокаИД[ИндексКолонкиИД];
			КонецЕсли;
			
			Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "ЦенаЗакупочная") = Неопределено Тогда
				ИндексКолонкиИД = Колонки1С.ЦенаЗакупочная;
				НоваяСтрока.ЦенаЗакупочная = СтрокаИД[ИндексКолонкиИД];
			КонецЕсли;
				
			Если НЕ НайтиВСтруктуреКлюч(Колонки1С, "ЦенаРозничная") = Неопределено Тогда
				ИндексКолонкиИД = Колонки1С.ЦенаРозничная;
				НоваяСтрока.ЦенаРозничная = СтрокаИД[ИндексКолонкиИД];
			КонецЕсли;
			
			Если НЕ НоваяСтрока.ЦенаЗакупочная = 0 Тогда
				НоваяСтрока.Изменить = НЕ НоваяСтрока.ЦенаЗакупочная1С = НоваяСтрока.ЦенаЗакупочная И (Объект.ЦенаМеньше <= НоваяСтрока.ЦенаЗакупочная1С И НоваяСтрока.ЦенаЗакупочная1С <= Объект.ЦенаБольше);
			КонецЕсли;
			
			//Если НЕ НоваяСтрока.ЦенаРозничная = 0 И НЕ НоваяСтрока.Изменить Тогда
			//	НоваяСтрока.Изменить = НЕ НоваяСтрока.ЦенаРозничная1С = НоваяСтрока.ЦенаРозничная;
			//КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура();
	Отбор.Вставить("НаименованиеИД", "");

	Найдено1С = Таблица1С.Количество() - Таблица1С.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Сопоставлено", Ложь);
	
	НайденоExcel = ТаблицаИсходныхДанных.Количество() - ТаблицаИсходныхДанных.НайтиСтроки(Отбор).Количество();
	
	ЗначениеВРеквизитФормы(Таблица1С, "Объект.Таблица1С");
	ЗначениеВРеквизитФормы(ТаблицаИсходныхДанных, "Объект.ТаблицаИсходныхДанных");
	
КонецПроцедуры

// Получить Штрихкод по известной ссылке на элемент Номенклатуры.
//
&НаСервере
Функция ПолучитьШтрихКодПоНоменклатураСсылкаНаСервере(Номенклатура, ПроверяемыйШтрихкод)
	
	ШтрихКод = Неопределено;
	
	Запрос = Новый Запрос;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец,
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Ссылка";
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Номенклатура,
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Номенклатура = &Ссылка";
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 1 Тогда
		ШтрихКод = ТаблицаЗапроса[0].Штрихкод;									// Единственный в списке ШК для Номенклатуры.
	ИначеЕсли ТаблицаЗапроса.Количество() > 1 Тогда
		Если НЕ ЗначениеЗаполнено(ПроверяемыйШтрихкод) Тогда
			// Не должен начинаться с:
			// 1. Штучный товар: "2" + ПрефиксШтучногоТовара="0" + ПрефиксВнутреннегоШтрихкода="00".
			// 2. Весовой товар: "2" + ПрефиксВесовогоТовара="1".
			ШтрихКод = ТаблицаЗапроса[ТаблицаЗапроса.Количество()-1].Штрихкод;	// Последний в списке ШК для Номенклатуры.
		Иначе
			СтрокаСоШтрихКодом = ТаблицаЗапроса.Найти(ПроверяемыйШтрихкод, "Штрихкод");
			Если НЕ СтрокаСоШтрихКодом = Неопределено Тогда
				ШтрихКод = СтрокаСоШтрихКодом.Штрихкод;							// Соответствующий проверяемому ШК.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШтрихКод;
	
КонецФункции

// Получить Штрихкод по известной ссылке на элемент Номенклатуры.
//
&НаСервере
Функция ПолучитьЦенуНоменклатурыНаДатуНаСервере(ВидЦены, Номенклатура, Характеристика = Неопределено, ДатаДокумента = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(ВидЦены) Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаОтбора = ?(ДатаДокумента = Неопределено, ТекущаяДата(), ДатаДокумента);
	
	ЦенаУстановленнаяНаДату = 0;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидЦены", ВидЦены);
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Характеристика", Характеристика);
	
	ТаблицаЦеныСрезПоследних = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ДатаОтбора, Отбор);
	Если ТаблицаЦеныСрезПоследних.Количество() > 0 Тогда
		ЦенаУстановленнаяНаДату = ТаблицаЦеныСрезПоследних[0].Цена;
	КонецЕсли;
	
	Возврат ЦенаУстановленнаяНаДату;
	
КонецФункции

// Формирование таблицы "1С:Предприятие". Основное действие: "Создать".
//
// На основании данной таблицы производится:
//
// 1. Заполнение справочника "Номенклатура".
// 2. Запись Штрихкода в РегистрСведений "Штрихкоды".
// 3. Формирование документов "Поступление товаров" / ("Оприходование товаров", "Установка себестоимости") и "Установка цены номенклатуры".
//
// ВНИМАНИЕ!
//
// Если количество в файле типа "Excel" не указано, то возможно формирование только документа "Установка цены номенклатуры", при этом возможность записи в справочник "Номенклатура" и
// Штрихкода в РегистрСведений "Штрихкоды" остается.
//
// Понятие «не содержит», «не указано»:
// - Количество/Цена в файле типа «Excel» не указано;
// - Колонка скрыта;
// - Наименование колонки не сопоставилось по таблице «Синонимы»;
// - Неверный формат числа в файле.
//
// Последовательность Алгоритмов поиска:
//
// Обязательные:
// 1. По Штрихкоду;
// 2. По "чистому" Наименованию;
// 3. По Наименованию;
//
// Дополнительные:
// 4. По "чистым" 3/4 Наименования;
// 5. По 3/4 Наименования;
// 6. По Артикулу.
//
// Вывод предупреждения о невыбранных Алгоритмах поиска регулируется флажком:
// "Показывать в текущем сеансе предупреждение о невыбранных алгоритмах поиска".
//
&НаСервере
Функция ОМЗаполнитьТаблицу1С_ДействиеСоздатьДокументы(ЕстьКомментарии, ЕстьРасхожденияВНаименованияхНайденныхПоШК)
	
	ТаблицаИсходныхДанных = РеквизитФормыВЗначение("Объект.ТаблицаИсходныхДанных");
	ТаблицаЭталон = РеквизитФормыВЗначение("Объект.ТаблицаЭталон");
	Таблица1С = РеквизитФормыВЗначение("Объект.Таблица1С");
		
	СтрокаЗаголовка = ТаблицаЭталон[0];
	Строка1С = ТаблицаЭталон[2];
	
	Реквизиты1С = ПолучитьСтруктуруРеквизиты1С();
	Колонки1С 	= Новый Структура;
	Значения1С  = ПолучитьСтруктуруРеквизиты1С(Истина);
	
	Для ит = 2 ПО ТаблицаЭталон.Колонки.Количество()-1 Цикл				// ит = 2, т.к. 0 - "НомерСтроки" и 1 - "Сопоставлено".
		хЗначение = Неопределено;
		Если Строка1С[ит] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизиты1С.Свойство(Строка1С[ит], хЗначение) Тогда
			Колонки1С.Вставить(хЗначение, ит);
		КонецЕсли;
	КонецЦикла;
	
	Таблица1С.Очистить();
	
	ЕстьШтрихкод = Ложь;
	
	ЕстьКомментарии = Ложь;
	ЕстьРасхожденияВНаименованияхНайденныхПоШК = Ложь;
	
	нПП = 0;
	Для Каждого СтрокаТЗ ИЗ ТаблицаИсходныхДанных Цикл
		
		нПП = нПП + 1;
		Если нПП <= Объект.СтрокаЗаголовкаИсходныхДанных Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица1С.Добавить();
		НоваяСтрока.НомерСтроки = СтрокаТЗ.НомерСтроки;
		
		// Считаем строку.
		Для ит = 2 ПО ТаблицаЭталон.Колонки.Количество()-1 Цикл			// ит = 2, т.к. 0 - "НомерСтроки" и 1 - "Сопоставлено".
			хЗначение = Неопределено;
			Если Строка1С[ит] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Реквизиты1С.Свойство(Строка1С[ит], хЗначение) Тогда
				Если НЕ НайтиВСтруктуреКлюч(Колонки1С, хЗначение) = Неопределено Тогда
					Значения1С.Вставить(хЗначение, СтрокаТЗ[Колонки1С[хЗначение]]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		Значения1С.Штрихкод = ПолучитьЧисло(Значения1С.Штрихкод, СтрокаТЗ.НомерСтроки, "ШтрихКод");
		ЕстьШтрихкод = НЕ Значения1С.Штрихкод = 0;
		Если Значения1С.Штрихкод > 0 Тогда
			Значения1С.Штрихкод = СтрЗаменить(Значения1С.Штрихкод, Символы.НПП, "");
		КонецЕсли;
		
		НаименованиеОбрабатываемое = Значения1С.Наименование;
		АртикулОбрабатываемыйИзКолонкиАртикул = Значения1С.Артикул;
		АртикулОбрабатываемыйИзКолонкиНаименование = Неопределено;

		НовоеНаименование = "";
		Если Объект.НаименованиеСодержитАртикул Тогда
			
			НовоеНаименование = "";
			АртикулОбрабатываемыйИзКолонкиНаименование = ПолучитьАртикулИзНаименования(НаименованиеОбрабатываемое, НовоеНаименование);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АртикулОбрабатываемыйИзКолонкиНаименование) Тогда
			АртикулОбрабатываемый = АртикулОбрабатываемыйИзКолонкиНаименование;
		Иначе
			АртикулОбрабатываемый = АртикулОбрабатываемыйИзКолонкиАртикул;
		КонецЕсли;
		
		НоваяСтрока.Артикул = ОчиститьОтЛишнего(АртикулОбрабатываемый);
		
		Если НЕ ОчиститьОтЛишнего(Значения1С.Наименование) = Значения1С.Наименование Тогда
			ЕстьКомментарии = Истина;
			НоваяСтрока.Комментарий = "" + """Наименование"" в Excel содержит ""лишние"" симовлы. Очищено./";
		КонецЕсли;
		
		//Если Объект.НаименованиеСодержитАртикул И НЕ Объект.ОставитьАртикулВНаименовании И ЗначениеЗаполнено(АртикулОбрабатываемыйИзКолонкиНаименование) Тогда
		Если Объект.НаименованиеСодержитАртикул И НЕ Объект.ОставитьАртикулВНаименовании Тогда
			НоваяСтрока.НаименованиеИД = ОчиститьОтЛишнего(НовоеНаименование);			// Исходные данные.
		Иначе	
			НоваяСтрока.НаименованиеИД = ОчиститьОтЛишнего(НаименованиеОбрабатываемое);	// Исходные данные.
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаименованиеИД) Тогда
			ЕстьКомментарии = Истина;
			Сообщить("Наименование по данным EXCEL неопределено.");
			Прервать;
		КонецЕсли;
		
		ЧистоеНаименование = ОчиститьОтЛишнего(НаименованиеОбрабатываемое);
		
		ЧистыеТриЧетвертых = Лев(ЧистоеНаименование, Цел(СтрДлина(ЧистоеНаименование)/4)*3);
		
		ТриЧетвертых = Лев(НаименованиеОбрабатываемое, Цел(СтрДлина(НаименованиеОбрабатываемое)/4)*3);
		
		// Последовательность Алгоритмов поиска:
		// Обязательные:
		сзПоШтрихКоду 						= Новый СписокЗначений;
		сзПоЧистомуНаименованию 			= Новый СписокЗначений;
		сзПоНаименованию 					= Новый СписокЗначений;
		// Дополнительные:
		сзПоЧистые34 						= Новый СписокЗначений;
		сзПо34 								= Новый СписокЗначений;
		сзПоАртикулу						= Новый СписокЗначений;
		
		Если ЕстьШтрихкод Тогда
			Если СтрДлина(Значения1С.ШтрихКод) = 12 Тогда
				Значения1С.ШтрихКод	= Значения1С.ШтрихКод + КонтрольныйСимволEAN13(Значения1С.ШтрихКод);
			КонецЕсли;
			
			НоваяСтрока.ТипШтрихКода= ПолучитьТипШтрихКодаОбъект(НоваяСтрока.Номенклатура1С, Значения1С.ШтрихКод);
			Если ЗначениеЗаполнено(Объект.ТипШтрихКода) И НЕ НоваяСтрока.ТипШтрихКода = Объект.ТипШтрихКода Тогда
				ЕстьКомментарии = Истина;
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Тип ШтрихКода"" не совпадает с эталонным: " + Объект.ТипШтрихКода + "./";
			КонецЕсли;
			
			НоваяСтрока.ШтрихКод 	= Значения1С.ШтрихКод;
			
			// Основные, как правило однозначные выборки.
			Если Объект.ПоискПоШтрихкоду Тогда
				
				// Конфигурации.
				Если ЭтоКонфигурацияРозница() Тогда
					сзПоШтрихКоду = НайтиПоШтрихкодуРозница(Значения1С.ШтрихКод);		// Обязательный.
				ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
					сзПоШтрихКоду = НайтиПоШтрихкодуТорговля(Значения1С.ШтрихКод);		// Обязательный.
				ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
				ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
				КонецЕсли;
				
				Если сзПоШтрихКоду.Количество() = 1 Тогда
					
					НайденныйЭлемент = сзПоШтрихКоду[0].Значение;
					ЧистыйНайденныйЭлемент = ОчиститьОтЛишнего(НайденныйЭлемент.Наименование);
					
					Если НЕ ЧистоеНаименование = ЧистыйНайденныйЭлемент Тогда
						
						ЕстьКомментарии = Истина;
						ЕстьРасхожденияВНаименованияхНайденныхПоШК = Истина;
						
						Сообщение ="№ " + НоваяСтрока.НомерСтроки + ". РАСХОЖДЕНИЕ ПО НАИМЕНОВАНИЮ.";
						Сообщить(Сообщение);
						
						НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + Сообщение + "/";
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ЕстьКомментарии = Истина;
			НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Штрихкод"" в файле Excel не указан или имеет не тот формат./";
		КонецЕсли;
		
		Если сзПоШтрихКоду.Количество() = 0 Тогда
			
			Если Объект.ПоискПоЧистомуНаименованию Тогда
				сзПоЧистомуНаименованию = НайтиПоНаименованию(ЧистоеНаименование);			// Обязательный.
			КонецЕсли;
				
			Если сзПоЧистомуНаименованию.Количество() = 0 Тогда
					
				Если Объект.ПоискПоНаименованию И (Объект.ПоискПоЧистомуНаименованию И НЕ ЧистоеНаименование = НаименованиеОбрабатываемое) Тогда
					сзПоНаименованию = НайтиПоНаименованию(НаименованиеОбрабатываемое);		// Обязательный.
				КонецЕсли;
				
				Если сзПоНаименованию.Количество() = 0 Тогда
					
					Если Объект.ПоискПоЧистые34Наименования Тогда
						сзПоЧистые34 = НайтиПоНаименованию(ЧистыеТриЧетвертых);				// Дополнительный.
					КонецЕсли;
					
					Если сзПоЧистые34.Количество() = 0 Тогда
						
						Если Объект.ПоискПо34Наименования И (Объект.ПоискПоЧистые34Наименования И НЕ ЧистыеТриЧетвертых = ТриЧетвертых) Тогда
							сзПо34 = НайтиПоНаименованию(ТриЧетвертых);						// Дополнительный.
						КонецЕсли;
						
						Если сзПо34.Количество() = 0 Тогда
							
							Если ЗначениеЗаполнено(АртикулОбрабатываемый) Тогда
								
								Если Объект.ПоискПоАртикулу Тогда
									сзПоАртикулу = НайтиПоАртикулу(АртикулОбрабатываемый);	// Дополнительный.
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ДЛЯ ФОРМИРОВАНИЯ НОМЕНКЛАТУРЫ ПОСТАВЩИКА В ОБЩЕМ СЛУЧАЕ НЕОБХОДИМО:
		// 1. ПОСТАВЩИК. ОПРЕДЕЛЯЕТСЯ В ПАРАМЕТРАХ ФОРМЫ.
		// 2. НОМЕНКЛАТУРА.
		// 3. ХАРАКТЕРИСТИКА.
		// 4. УПАКОВКА. (ТОЛЬКО РОЗНИЦА И УТ).
		
		// ДЛЯ ФОРМИРОВАНИЯ НОМЕНКЛАТУРЫ:
		// 2. НОМЕНКЛАТУРА.
		// 3. ХАРАКТЕРИСТИКА.
		
		// ВАЖНО. Наименование - Обязательно должно присутствовать в файле типа "Excel".
		Если ЗначениеЗаполнено(Значения1С.Характеристика) Тогда		// Характеристика - СТРОКОВОЕ - может быть использована в Полном наименовании.
			НоваяСтрока.Характеристика = ОчиститьОтЛишнего(Значения1С.Характеристика);
		КонецЕсли;
		
		// Основные, как правило однозначные выборки.
		Если НЕ сзПоШтрихКоду.Количество() = 0 Тогда						// ВАЖНО. Считаем уникальным, хотя по проектной логике 1С:Розница 2.0 ШК может быть и неуникальным.
			
			НоваяСтрока.НайденПО = Объект.стрНайденПО.ШтрихКоду;
			Если сзПоШтрихКоду.Количество() = 1 Тогда
				НоваяСтрока.Номенклатура1С = сзПоШтрихКоду[0].Значение;		// Уникальный - значит одно значение.
				НоваяСтрока.ШтрихКод1С = ПолучитьШтрихКодПоНоменклатураСсылкаНаСервере(НоваяСтрока.Номенклатура1С, Значения1С.ШтрихКод);
				НоваяСтрока.Артикул1С = НоваяСтрока.Номенклатура1С.Артикул;
			Иначе	
				НоваяСтрока.Возможные1С = сзПоШтрихКоду;
				Если сзПоШтрихКоду.Количество() > 1 Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " По Штрихкоду найдено несколько элементов./";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ сзПоЧистомуНаименованию.Количество() = 0 Тогда			// ВАЖНО. Должно быть уникальным. Если нет, то - дублированная номенклатура. Выбрать из возможных нужное.
			
			НоваяСтрока.НайденПО = Объект.стрНайденПО.ЧистомуНаименованию;
			Если сзПоЧистомуНаименованию.Количество() = 1 Тогда
				НоваяСтрока.Номенклатура1С = сзПоЧистомуНаименованию[0].Значение;
				НоваяСтрока.ШтрихКод1С = ПолучитьШтрихКодПоНоменклатураСсылкаНаСервере(НоваяСтрока.Номенклатура1С, Значения1С.ШтрихКод);
				НоваяСтрока.Артикул1С = НоваяСтрока.Номенклатура1С.Артикул;
			Иначе	
				НоваяСтрока.Возможные1С = сзПоЧистомуНаименованию;
				Если сзПоЧистомуНаименованию.Количество() > 1 Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " По ЧистомуНаименованию найдено несколько элементов./";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ сзПоНаименованию.Количество() = 0 Тогда				// ВАЖНО. Должно быть уникальным. Если нет, то - дублированная номенклатура. Выбрать из возможных нужное.
			
			НоваяСтрока.НайденПО = Объект.стрНайденПО.Наименованию;
			Если сзПоНаименованию.Количество() = 1 Тогда
				НоваяСтрока.Номенклатура1С = сзПоНаименованию[0].Значение;
				НоваяСтрока.ШтрихКод1С = ПолучитьШтрихКодПоНоменклатураСсылкаНаСервере(НоваяСтрока.Номенклатура1С, Значения1С.ШтрихКод);
				НоваяСтрока.Артикул1С = НоваяСтрока.Номенклатура1С.Артикул;
			Иначе	
				НоваяСтрока.Возможные1С = сзПоНаименованию;
				Если сзПоНаименованию.Количество() > 1 Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " По Наименованию найдено несколько элементов./";
				Иначе	
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ВидНоменклатуры """ + НоваяСтрока.Номенклатура1С.ВидНоменклатуры + """ не имеет характеристик./";
				КонецЕсли;
			КонецЕсли;
			
		// Дополнительные, в общем случае неоднозначные выборки.
		ИначеЕсли НЕ сзПоЧистые34.Количество() = 0 Тогда					// Искомого значения может и не быть в списке возможных.
			
			НоваяСтрока.НайденПО = Объект.стрНайденПО.ЧастиНаименования + "=" + ЧистыеТриЧетвертых;
			НоваяСтрока.Возможные1С = сзПоЧистые34;
			
		ИначеЕсли НЕ сзПо34.Количество() = 0 Тогда							// Искомого значения может и не быть в списке возможных.
			
			НоваяСтрока.НайденПО = Объект.стрНайденПО.ЧастиНаименования + "=" + ТриЧетвертых;
			НоваяСтрока.Возможные1С = сзПо34;
			
		ИначеЕсли НЕ сзПоАртикулу.Количество() = 0 Тогда					// Искомого значения может и не быть в списке возможных, хотя список нередко создается.
			
			НоваяСтрока.НайденПО = Объект.стрНайденПО.Артикулу + "=" + АртикулОбрабатываемый;
			НоваяСтрока.Возможные1С = сзПоАртикулу;
			
		Иначе
			
			//Сообщить("НЕ НАЙДЕНО:" + НаименованиеОбрабатываемое);
			
		КонецЕсли;
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// СПЕЦИФИЧНО ДЛЯ КОНФИГУРАЦИИ.
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
			
			// Розница+, УТ+, КА+, БП-.
			НоваяСтрока.ВидНоменклатуры 				= Объект.ВидНоменклатуры;					// ВАЖНО. После записи элемента меняться не должен.
			
			// Розница+, УТ+, КА+, БП-.
			НоваяСтрока.ТипНоменклатуры 				= Объект.ТипНоменклатуры;					// ВАЖНО. Берется из ВидаНоменклатуры.
		
			// Розница+, УТ+, КА+, БП-.
			Если Объект.ИспользоватьЦеновыеГруппы Тогда
				НоваяСтрока.ЦеноваяГруппа 				= Объект.ЦеноваяГруппа;						// ВАЖНО. После записи элемента меняться не должен.
			КонецЕсли;
			
			// ВАЖНО. Реквизит "Вес" после записи элемента справочника "Номенклатура" можно изменять, а флажок "Весовой" после записи элемента меняться не должен.
			// Розница+, УТ+, КА-, БП-.
			Если ЗначениеЗаполнено(Значения1С.Вес) Тогда
				НоваяСтрока.Вес		 		= ПолучитьЧисло(Значения1С.Вес, СтрокаТЗ.НомерСтроки, "Вес");
				Если НоваяСтрока.Вес = 0 Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Вес"" в файле Excel не указан или имеет не тот формат./";
				КонецЕсли;
			КонецЕсли;
			
			// Розница+, УТ-, КА+, БП+.
			Если ЗначениеЗаполнено(Значения1С.СтранаПроисхождения) Тогда
				НоваяСтрока.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения 	= Справочники.СтраныМира.НайтиПоНаименованию(ВРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
						НоваяСтрока.СтранаПроисхождения	= Справочники.СтраныМира.НайтиПоНаименованию(ТРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
							ЕстьКомментарии = Истина;
							НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Страна"" в файле Excel указана, по данным 1С не найдена./";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Розница+, УТ+, КА-, БП+.
			Если ЗначениеЗаполнено(Значения1С.Производитель) Тогда
				НоваяСтрока.Производитель = Справочники.Контрагенты.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.Производитель));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Производитель) Тогда
					Если Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа Тогда
						НоваяСтрока.Производитель = СоздатьНовыйЭлементСправочникаПроизводители(Справочники.Контрагенты, ОчиститьОтЛишнего(Значения1С.Производитель));
					Иначе
						ЕстьКомментарии = Истина;
						НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Производитель"" в файле Excel указан, по данным 1С не найден./";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// ХАРАКТЕРИСТИКА НОМЕНКЛАТУРЫ. Розница+, УТ+, КА+ БП-.
			
			Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрока.ВидНоменклатуры.ИспользоватьХарактеристики 
				И НЕ НоваяСтрока.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				
				Если ЗначениеЗаполнено(НоваяСтрока.ВидНоменклатуры) И НоваяСтрока.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
					// Характеристика ОБЩАЯ для ВидаНоменклатуры.
					НоваяСтрока.Характеристика1С = ПолучитьХарактеристикуНоменклатуры(НоваяСтрока.Номенклатура1С.ВидНоменклатуры, НоваяСтрока.Характеристика);
				ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) И НоваяСтрока.Номенклатура1С.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
					// Характеристика ИНДИВИДУАЛЬНАЯ для Номенклатуры.
					НоваяСтрока.Характеристика1С = ПолучитьХарактеристикуНоменклатуры(НоваяСтрока.Номенклатура1С, НоваяСтрока.Характеристика);
				Иначе
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Не определен вариант использования характеристики./";
				КонецЕсли;
				
			КонецЕсли;
				
			// УПАКОВКА НОМЕНКЛАТУРЫ. Розница+, УТ+, КА-, БП-.
			
			Если Объект.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.НаборУпаковок				= Объект.НаборУпаковок;						// Розница+, УТ+, КА-, БП-.
				НоваяСтрока.Упаковка	 				= Объект.Упаковка;							// Розница+, УТ+, КА-, БП-.
			КонецЕсли;
				
			// НОМЕНКЛАТУРА ПОСТАВЩИКА. Розница+, УТ+, КА-, БП-.
			
			Если Объект.ИспользоватьНоменклатуруПоставщиков И ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) Тогда
				НоваяСтрока.НоменклатураПоставщика 		= НоваяСтрока.Номенклатура1С;
			КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
			
			// Розница+, УТ+, КА+, БП-.
			НоваяСтрока.ВидНоменклатуры 				= Объект.ВидНоменклатуры;					// ВАЖНО. После записи элемента меняться не должен.
			
			// Розница+, УТ+, КА+, БП-.
			НоваяСтрока.ТипНоменклатуры 				= Объект.ТипНоменклатуры;					// ВАЖНО. Берется из ВидаНоменклатуры.
			
			// Розница+, УТ+, КА+, БП-.
			Если Объект.ИспользоватьЦеновыеГруппы Тогда
				НоваяСтрока.ЦеноваяГруппа 				= Объект.ЦеноваяГруппа;						// ВАЖНО. После записи элемента меняться не должен.
			КонецЕсли;
			
			// ВАЖНО. Реквизит "Вес" после записи элемента справочника "Номенклатура" можно изменять, а флажок "Весовой" после записи элемента меняться не должен.
			// Розница+, УТ+, КА-, БП-.
			Если ЗначениеЗаполнено(Значения1С.Вес) Тогда						
				НоваяСтрока.Вес		 		= ПолучитьЧисло(Значения1С.Вес, СтрокаТЗ.НомерСтроки, "Вес");
				Если НоваяСтрока.Вес = 0 Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Вес"" в файле Excel не указан или имеет не тот формат./";
				КонецЕсли;
			КонецЕсли;
			
			// Розница+, УТ+, КА+, БП+.
			Если ЗначениеЗаполнено(Значения1С.СтранаПроисхождения) Тогда
				НоваяСтрока.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения 	= Справочники.СтраныМира.НайтиПоНаименованию(ВРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
					Если  НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
						НоваяСтрока.СтранаПроисхождения	= Справочники.СтраныМира.НайтиПоНаименованию(ТРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
							ЕстьКомментарии = Истина;
							НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Страна"" в файле Excel указана, по данным 1С не найдена./";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Розница+, УТ+, КА-, БП+.
			Если ЗначениеЗаполнено(Значения1С.Производитель) Тогда
				НоваяСтрока.Производитель = Справочники.Производители.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.Производитель));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Производитель) Тогда
					Если Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа Тогда
						НоваяСтрока.Производитель = СоздатьНовыйЭлементСправочникаПроизводители(Справочники.Производители, ОчиститьОтЛишнего(Значения1С.Производитель));
					Иначе
						ЕстьКомментарии = Истина;
						НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Производитель"" в файле Excel указан, по данным 1С не найден./";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// После СтранаПроисхождения.
			Если Объект.ИспользоватьИмпортныеЗакупки И ЗначениеЗаполнено(Значения1С.НомерГТД) Тогда					// Розница-, УТ+, КА+, БП+. Заполнение в документе.
				НоваяСтрока.НомерГТД		= Справочники.НомераГТД.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.НомерГТД));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НомерГТД) Тогда
					Если Объект.СоздаватьНовыеЭлементыНеКлассификаторногоТипа Тогда
						НоваяСтрока.НомерГТД = СоздатьНовыйЭлементСправочникаНомераГТД(Справочники.НомераГТД, ОчиститьОтЛишнего(Значения1С.НомерГТД), НоваяСтрока.СтранаПроисхождения);
					Иначе
						ЕстьКомментарии = Истина;
						НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""НомерГТД"" в файле Excel указан, по данным 1С не найден./";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.ИспользоватьИмпортныеЗакупки Тогда
				НоваяСтрока.ВестиУчетПоГТД				= Объект.ВестиУчетПоГТД;					// Розница-, УТ+, КА-, БП-. Заполнение в справочнике.
			КонецЕсли;
			
			НоваяСтрока.ПодакцизныйТовар				= Объект.ПодакцизныйТовар;					// Розница-, УТ+, КА-, БП-.
		
			НоваяСтрока.ГруппаДоступа					= Объект.ГруппаДоступа;						// Розница-, УТ+, КА-, БП-.
			
			Если Объект.ИспользоватьГруппыФинансовогоУчета Тогда
				НоваяСтрока.ГруппаФинансовогоУчета		= Объект.ГруппаФинансовогоУчета;			// Розница-, УТ+, КА-, БП-.
			КонецЕсли;
			
			Если Объект.ИспользоватьКачествоТоваров Тогда
				НоваяСтрока.Качество					= Объект.Качество;							// Розница-, УТ+, КА-, БП-.
			КонецЕсли;
			
			НоваяСтрока.СтатьяРасходов					= Объект.СтатьяРасходов;					// Розница-, УТ+, КА-, БП-.
		
			НоваяСтрока.ФизическоеЛицо 					= Объект.ФизическоеЛицо;					// Розница+, УТ+, КА+, БП+.
			
			// ХАРАКТЕРИСТИКА НОМЕНКЛАТУРЫ. Розница+, УТ+, КА+ БП-.
			
			Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрока.ВидНоменклатуры.ИспользоватьХарактеристики 
				И НЕ НоваяСтрока.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				
				Если ЗначениеЗаполнено(НоваяСтрока.ВидНоменклатуры) И НоваяСтрока.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
					// Характеристика ОБЩАЯ для ВидаНоменклатуры.
					НоваяСтрока.Характеристика1С = ПолучитьХарактеристикуНоменклатуры(НоваяСтрока.Номенклатура1С.ВидНоменклатуры, НоваяСтрока.Характеристика);
				ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) И НоваяСтрока.Номенклатура1С.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
					// Характеристика ИНДИВИДУАЛЬНАЯ для Номенклатуры.
					НоваяСтрока.Характеристика1С = ПолучитьХарактеристикуНоменклатуры(НоваяСтрока.Номенклатура1С, НоваяСтрока.Характеристика);
				Иначе
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Не определен вариант использования характеристики./";
				КонецЕсли;
				
			КонецЕсли;
				
			// УПАКОВКА НОМЕНКЛАТУРЫ.
		
			Если Объект.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.НаборУпаковок				= Объект.НаборУпаковок;						// Розница+, УТ+, КА-, БП-.
				НоваяСтрока.Упаковка	 				= Объект.Упаковка;							// Розница+, УТ+, КА-, БП-.
			КонецЕсли;
				
			// НОМЕНКЛАТУРА ПОСТАВЩИКА.
			
			Если Объект.ИспользоватьНоменклатуруПоставщиков И ЗначениеЗаполнено(Объект.Поставщик) И ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) И ЭтоДокументПоступления(Объект.ТипДокумента) Тогда
				
				НоваяСтрока.НоменклатураПоставщика = ПолучитьНоменклатуруПоставщика(Объект.Поставщик, НоваяСтрока.Номенклатура1С, НоваяСтрока.Характеристика1С, НоваяСтрока.Упаковка);
				
				Если НЕ НоваяСтрока.НоменклатураПоставщика = Неопределено И НЕ Строка(НоваяСтрока.НоменклатураПоставщика) = Строка(НоваяСтрока.Номенклатура1С) Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Наименование НоменклатурыПоставщика не совпадает с Наименованием Номенклатуры./"
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			
			НоваяСтрока.СтатьяЗатрат					= Объект.СтатьяЗатрат;						// Розница-, УТ-, КА+, БП+.
			
			// Розница+, УТ+, КА+, БП+.
			Если ЗначениеЗаполнено(Значения1С.СтранаПроисхождения) Тогда
				НоваяСтрока.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения 	= Справочники.СтраныМира.НайтиПоНаименованию(ВРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
					Если  НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
						НоваяСтрока.СтранаПроисхождения	= Справочники.СтраныМира.НайтиПоНаименованию(ТРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
							ЕстьКомментарии = Истина;
							НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Страна"" в файле Excel указана, по данным 1С не найдена./";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Розница+, УТ+, КА-, БП+.
			Если ЗначениеЗаполнено(Значения1С.Производитель) Тогда
				НоваяСтрока.Производитель = Справочники.Контрагенты.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.Производитель));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Производитель) Тогда
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Производитель"" в файле Excel указан, по данным 1С не найден./";
				КонецЕсли;
			КонецЕсли;
		
			// После СтранаПроисхождения.
			Если Объект.ИспользоватьИмпортныеЗакупки И ЗначениеЗаполнено(Значения1С.НомерГТД) Тогда
				НоваяСтрока.НомерГТД					= Значения1С.НомерГТД;						// Розница-, УТ+, КА+, БП+.
			КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			
			// Розница+, УТ+, КА+, БП-.
			НоваяСтрока.ВидНоменклатуры 				= Объект.ВидНоменклатуры;					// ВАЖНО. После записи элемента меняться не должен.
			
			// Розница+, УТ+, КА+, БП-.
			НоваяСтрока.ТипНоменклатуры 				= Объект.ТипНоменклатуры;					// ВАЖНО. Берется из ВидаНоменклатуры.
		
			// Розница+, УТ+, КА+, БП-.
			Если Объект.ИспользоватьЦеновыеГруппы Тогда
				НоваяСтрока.ЦеноваяГруппа 				= Объект.ЦеноваяГруппа;						// ВАЖНО. После записи элемента меняться не должен.
			КонецЕсли;
			
			НоваяСтрока.СтатьяЗатрат					= Объект.СтатьяЗатрат;						// Розница-, УТ-, КА+, БП+.
		
			НоваяСтрока.ВидВоспроизводства				= Объект.ВидВоспроизводства;				// Розница-, УТ-, КА+, БП-.
			НоваяСтрока.НоменклатурнаяГруппаЗатрат		= Объект.НоменклатурнаяГруппаЗатрат;		// Розница-, УТ-, КА+, БП-.
			НоваяСтрока.ВестиОперативныйУчетОстатковНЗП	= Объект.ВестиОперативныйУчетОстатковНЗП;	// Розница-, УТ-, КА+, БП-.
			
			// Розница+, УТ-, КА+, БП+.
			Если ЗначениеЗаполнено(Значения1С.СтранаПроисхождения) Тогда
				НоваяСтрока.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения 	= Справочники.СтраныМира.НайтиПоНаименованию(ВРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
					Если  НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
						НоваяСтрока.СтранаПроисхождения	= Справочники.СтраныМира.НайтиПоНаименованию(ТРег(ОчиститьОтЛишнего(Значения1С.СтранаПроисхождения)));
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
							ЕстьКомментарии = Истина;
							НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Страна"" в файле Excel указана, по данным 1С не найдена./";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			// После СтранаПроисхождения.
			Если Объект.ИспользоватьИмпортныеЗакупки И ЗначениеЗаполнено(Значения1С.НомерГТД) Тогда
				НоваяСтрока.НомерГТД		= Значения1С.НомерГТД;				// Розница-, УТ+, КА+, БП+.
			КонецЕсли;
			
			// ХАРАКТЕРИСТИКА НОМЕНКЛАТУРЫ. Розница+, УТ+, КА+ БП-.
			
			Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрока.ВидНоменклатуры.ИспользоватьХарактеристики 
				И НЕ НоваяСтрока.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				
				Если ЗначениеЗаполнено(НоваяСтрока.ВидНоменклатуры) И НоваяСтрока.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
					// Характеристика ОБЩАЯ для ВидаНоменклатуры.
					НоваяСтрока.Характеристика1С = ПолучитьХарактеристикуНоменклатуры(НоваяСтрока.Номенклатура1С.ВидНоменклатуры, НоваяСтрока.Характеристика);
				ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) И НоваяСтрока.Номенклатура1С.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
					// Характеристика ИНДИВИДУАЛЬНАЯ для Номенклатуры.
					НоваяСтрока.Характеристика1С = ПолучитьХарактеристикуНоменклатуры(НоваяСтрока.Номенклатура1С, НоваяСтрока.Характеристика);
				Иначе
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Не определен вариант использования характеристики./";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ОБЩИЕ.
		////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		НоваяСтрока.ЦенаЗакупочная1С = ПолучитьЦенуНоменклатурыНаДатуНаСервере(Объект.ВидЦеныЗакупочная, НоваяСтрока.Номенклатура1С, НоваяСтрока.Характеристика1С);
		НоваяСтрока.ЦенаРозничная1С = ПолучитьЦенуНоменклатурыНаДатуНаСервере(Объект.ВидЦеныРозничная, НоваяСтрока.Номенклатура1С, НоваяСтрока.Характеристика1С);
		
		// ГРУППЫ СПРАВОЧНИКА И НОМЕНКЛАТУРНЫЕ ГРУППЫ НОМЕНКЛАТУРЫ.
		
		// Розница+, УТ+, КА+, БП+.
		НоваяСтрока.ГруппаНоменклатуры	= Объект.ГруппаНоменклатуры;
		
		Если ЗначениеЗаполнено(Значения1С.МаркаБренд) Тогда
			НоваяСтрока.МаркаБренд = ОчиститьОтЛишнего(Значения1С.МаркаБренд);
			Если ЗначениеЗаполнено(Объект.ГруппаНоменклатуры) Тогда
				НоваяСтрока.ГруппаНоменклатуры_2 = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрока.МаркаБренд, Истина, Объект.ГруппаНоменклатуры);
			Иначе
				НоваяСтрока.ГруппаНоменклатуры_2 = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрока.МаркаБренд, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Значения1С.КоллекцияСезон) Тогда
			НоваяСтрока.КоллекцияСезон = ОчиститьОтЛишнего(Значения1С.КоллекцияСезон);
			Если ЗначениеЗаполнено(НоваяСтрока.ГруппаНоменклатуры_2) Тогда
				НоваяСтрока.ГруппаНоменклатуры_3 = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрока.КоллекцияСезон, Истина, НоваяСтрока.ГруппаНоменклатуры_2);
			ИначеЕсли ЗначениеЗаполнено(Объект.ГруппаНоменклатуры) Тогда
				НоваяСтрока.ГруппаНоменклатуры_3 = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрока.КоллекцияСезон, Истина, Объект.ГруппаНоменклатуры);
			Иначе
				НоваяСтрока.ГруппаНоменклатуры_3 = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрока.КоллекцияСезон, Истина);
			КонецЕсли;
		КонецЕсли;
		
		// Розница+, УТ+, КА+, БП+.
		НоваяСтрока.НоменклатурнаяГруппа= Объект.НоменклатурнаяГруппа;
		
		Если НЕ Объект.ИзменятьРеквизитыСправочников Тогда
			Если НоваяСтрока.НайденПО = Объект.стрНайденПО.ШтрихКоду 
				ИЛИ НоваяСтрока.НайденПО = Объект.стрНайденПО.ЧистомуНаименованию
				ИЛИ НоваяСтрока.НайденПО = Объект.стрНайденПО.Наименованию Тогда
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) Тогда	// ВАЖНО. Если значение заполнено, то значит найден только один элемент справочника "Номенклатура".
					
					// Если флажок ИзменятьРеквизитыСправочников = Ложь, то берем группу из справочника "Номенклатура".
					
					// 1-ый Уровень.
					ГруппаУровень_1 = Неопределено;
					Попытка
						ГруппаУровень_1	= НоваяСтрока.Номенклатура1С.Родитель.Родитель.Родитель;
					Исключение
					    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки;
					
					// 2-ой Уровень.
					ГруппаУровень_2 = Неопределено;
					Попытка
						ГруппаУровень_2	= НоваяСтрока.Номенклатура1С.Родитель.Родитель;
					Исключение
					    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки;
					
					// 3-ий Уровень.
					ГруппаУровень_3	= НоваяСтрока.Номенклатура1С.Родитель;
					
					НоваяСтрока.ГруппаНоменклатуры		= Неопределено;
					НоваяСтрока.ГруппаНоменклатуры_2	= Неопределено;
					НоваяСтрока.ГруппаНоменклатуры_3	= Неопределено;
					Если ЗначениеЗаполнено(ГруппаУровень_1) Тогда
						НоваяСтрока.ГруппаНоменклатуры		= ГруппаУровень_1;
						НоваяСтрока.ГруппаНоменклатуры_2	= ГруппаУровень_2;
						НоваяСтрока.ГруппаНоменклатуры_3	= ГруппаУровень_3;
					Иначе
						Если ЗначениеЗаполнено(ГруппаУровень_2) Тогда
							НоваяСтрока.ГруппаНоменклатуры		= ГруппаУровень_2;
							НоваяСтрока.ГруппаНоменклатуры_2	= ГруппаУровень_3;
							НоваяСтрока.ГруппаНоменклатуры_3	= Неопределено;
						Иначе
							Если ЗначениеЗаполнено(ГруппаУровень_3) Тогда
								НоваяСтрока.ГруппаНоменклатуры		= ГруппаУровень_3;
								НоваяСтрока.ГруппаНоменклатуры_2	= Неопределено;
								НоваяСтрока.ГруппаНоменклатуры_3	= Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЕстьКомментарии = Истина;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Группы по уровням: Фактические./";
					
					// Конфигурации.
					Если ЭтоКонфигурацияРозница() Тогда
						
						Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С.НоменклатурнаяГруппа) Тогда
							// Если флажок ИзменятьРеквизитыСправочников = Ложь, то берем группу из справочника "Номенклатура".
							НоваяСтрока.НоменклатурнаяГруппа= НоваяСтрока.Номенклатура1С.НоменклатурнаяГруппа;
							
							ЕстьКомментарии = Истина;
							НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Номенклатурная группа: Фактическая./";
						КонецЕсли;
						
					ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
						
						Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С.СкладскаяГруппа) Тогда
							// Если флажок ИзменятьРеквизитыСправочников = Ложь, то берем группу из справочника "Номенклатура".
							НоваяСтрока.НоменклатурнаяГруппа= НоваяСтрока.Номенклатура1С.СкладскаяГруппа;
							
							ЕстьКомментарии = Истина;
							НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Складская группа: Фактическая./";
						КонецЕсли;
						
					ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
					ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				ЕстьКомментарии = Истина;
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Группировки согласно файлу Excel./";
			КонецЕсли;
		Иначе
			ЕстьКомментарии = Истина;
			НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Группировки согласно файлу Excel./";
		КонецЕсли;
		
		// Розница+, УТ+, КА+, БП+.
		НоваяСтрока.Количество 			= ПолучитьЧисло(Значения1С.Количество, СтрокаТЗ.НомерСтроки, "Количество");
		Если ЗначениеЗаполнено(Объект.ТипДокумента) Тогда		// ВАЖНО. Количество имеет смысл только для документов: ПоступлениеТоваров, ОприходованиеТоваров.
			Если НоваяСтрока.Количество = 0 Тогда
				ЕстьКомментарии = Истина;
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""Количество"" в файле Excel не указано или имеет не тот формат./";
			КонецЕсли;
		КонецЕсли;
		
		// ЦенаЗакупочная - Обязательно должна присутствовать в файле типа "Excel".
		// Розница+, УТ+, КА+, БП+.
		НоваяСтрока.ЦенаЗакупочная 		= ПолучитьЧисло(Значения1С.ЦенаЗакупочная, СтрокаТЗ.НомерСтроки, "ЦенаЗакупочная");
		Если НоваяСтрока.ЦенаЗакупочная = 0 Тогда
			ЕстьКомментарии = Истина;
			НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""ЦенаЗакупочная"" в файле Excel не указана или имеет не тот формат./";
		КонецЕсли;
		
		// Розница+, УТ+, КА+, БП+.
		НоваяСтрока.ЦенаРозничная 		= ПолучитьЧисло(Значения1С.ЦенаРозничная, СтрокаТЗ.НомерСтроки, "ЦенаРозничная");
		Если НоваяСтрока.ЦенаРозничная = 0 И ЗначениеЗаполнено(НоваяСтрока.Номенклатура1С) Тогда	// Устанавливаем цену существующей номенклатуры по данным БД.
			НоваяСтрока.ЦенаРозничная 	= ПолучитьЦенуПоВидуЦен(Объект.ВидЦеныРозничная, ТекущаяДата(), НоваяСтрока.Номенклатура1С);
			Если НЕ НоваяСтрока.ЦенаРозничная = 0 Тогда
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""ЦенаРозничная"" получена по данным БД./";
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрока.ЦенаРозничная = 0 Тогда
			ЕстьКомментарии = Истина;
			НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""ЦенаРозничная"" в файле Excel не указана или имеет не тот формат, получить ее по данным БД также невозможно./";
		КонецЕсли;
		
		// Розница+, УТ+, КА+, БП+.
		Если ЗначениеЗаполнено(Значения1С.СтавкаНДС) Тогда					// ВАЖНО. После записи элемента меняться не должен.
			НоваяСтрока.СтавкаНДС 		= ПолучитьСтавкуНДСОбъект(ОчиститьОтЛишнего(Значения1С.СтавкаНДС));
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				ЕстьКомментарии = Истина;
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""СтавкаНДС"" в файле Excel указана, по данным 1С не найдена./";
			КонецЕсли;
		Иначе
			НоваяСтрока.СтавкаНДС 		= Объект.СтавкаНДС;
		КонецЕсли;
		
		// ВАЖНО. Предупреждение о несоответствии Параметров загрузки и данных из загружаемого файла типа "Excel".
		// Розница+, УТ+, КА+, БП+. (ЦенаВключаетНДС)
		Если (Объект.УчитыватьНДС ИЛИ Объект.ЦенаВключаетНДС) И (НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДСОбъект(0)) Тогда
			ЕстьКомментарии = Истина;
			НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " " + "В параметрах выбрана(ы) настройка(и) по учету НДС, а НДС в таблице ""1С:Предприятие"" не определен./";
		КонецЕсли;
		
		ИмяСправочникаЕдиницыИзмерения = Объект.ЕдиницаИзмерения.Метаданные().Имя;
		
		// Розница+, УТ+, КА+, БП+.
		Если ЗначениеЗаполнено(Значения1С.ЕдиницаИзмерения) Тогда			// ВАЖНО. После записи элемента меняться не должен.
			НоваяСтрока.ЕдиницаИзмерения = Справочники[ИмяСправочникаЕдиницыИзмерения].НайтиПоНаименованию(ОчиститьОтЛишнего(Значения1С.ЕдиницаИзмерения));
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = Справочники[ИмяСправочникаЕдиницыИзмерения].НайтиПоНаименованию(ВРег(ОчиститьОтЛишнего(Значения1С.ЕдиницаИзмерения)));
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = Справочники[ИмяСправочникаЕдиницыИзмерения].НайтиПоНаименованию(ТРег(ОчиститьОтЛишнего(Значения1С.ЕдиницаИзмерения)));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) И НЕ НоваяСтрока.ЕдиницаИзмерения = Объект.ЕдиницаИзмерения Тогда
				ЕстьКомментарии = Истина;
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""ЕдиницаИзмерения"" не совпадает с эталонным: " + Объект.ЕдиницаИзмерения + "./";
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения= Объект.ЕдиницаИзмерения;
			Иначе
				ЕстьКомментарии = Истина;
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ""ЕдиницаИзмерения"" не заполнена./";
			КонецЕсли;
		КонецЕсли;
		
		ЧистоеОписание = ОчиститьОтЛишнего(Значения1С.Описание);
		Если ЗначениеЗаполнено(ЧистоеОписание) Тогда
			НоваяСтрока.Описание = ЧистоеОписание;	// Розница+, УТ+, КА+, БП+.
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Описание) И ЗначениеЗаполнено(Значения1С.Характеристика) Тогда
			НоваяСтрока.Описание = ОчиститьОтЛишнего(Значения1С.Характеристика);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Таблица1С, "Объект.Таблица1С");
	
КонецФункции

// Выбрать из списка "Возможные1С" таблицы "1С:Предприятие" и запись в колонку "Номенклатура1С".
//
&НаКлиенте
Процедура Таблица1СВозможные1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	// Форма СпискаЗначений.
	Массив = РазложитьСтрокуВМассивПодстрок(Элемент.ТекстРедактирования, ";");
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	ВыбранныйЭлемент = ВыбратьИзСписка(Список, Элемент);
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда	// Записать в Объект.Таблица1С.Номенклатура1С.
		ТекущаяСтрока = Объект.Таблица1С.Индекс(Элемент.Родитель.Родитель.ТекущиеДанные);
		Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С = НайтиПоНаименованию(ВыбранныйЭлемент.Значение)[0].Значение;
		
		Если ЭтоДокументПоступления(Объект.ТипДокумента) И ЗначениеЗаполнено(Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С) Тогда
			
			Если Объект.ИспользоватьХарактеристикиНоменклатуры Тогда
				
				Если Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
					
					Объект.Таблица1С[ТекущаяСтрока].Характеристика1С = ПолучитьХарактеристикуНоменклатуры(Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С, Объект.Таблица1С[ТекущаяСтрока].Характеристика);
					
					// Конфигурации.
					Если ЭтоКонфигурацияРозница() Тогда
						Объект.Таблица1С[ТекущаяСтрока].НоменклатураПоставщика = Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С;
					ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
						Объект.Таблица1С[ТекущаяСтрока].НоменклатураПоставщика = ПолучитьНоменклатуруПоставщика(Объект.Поставщик, Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С, Объект.Таблица1С[ТекущаяСтрока].Характеристика1C, Объект.Таблица1С[ТекущаяСтрока].Упаковка);
					ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
					ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Объект.Таблица1С[ТекущаяСтрока].НоменклатураПоставщика) Тогда
						Предупреждение("Номенклатура Поставщика не определена.
						|
						|Проверьте правильность следующих параметров:
						|
						|1. Поставщик;
						|2. Номенклатура;
						|3. Характеристика;
						|4. Упаковка.
						|
						|Выберрите НоменклатуруПоставщика при необходимости.");
					КонецЕсли;
					
				Иначе
					
					Если Найти(Объект.Таблица1С[ТекущаяСтрока].Комментарий, "ВидНоменклатуры") = 0 Тогда
						Объект.Таблица1С[ТекущаяСтрока].Комментарий = Объект.Таблица1С[ТекущаяСтрока].Комментарий + " ВидНоменклатуры """ + Объект.Таблица1С[ТекущаяСтрока].Номенклатура1С.ВидНоменклатуры + """ не использует характеристики.";
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Справочник.ХарактеристикаНоменклатуры.
//
&НаСервере
Функция ПолучитьХарактеристикуНоменклатуры(Владелец, ХарактеристикаПроверяемая = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() ИЛИ ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И (НЕ ХарактеристикиНоменклатуры.Владелец.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Владелец",   Владелец);
		
		РезультатЗапроса = Запрос.Выполнить();
		//СписокВыбора = Новый СписокЗначений();
		
		ХарактеристикаНоменклатуры = Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				//СписокВыбора.Добавить(Выборка.Характеристика);
				
				Если ЗначениеЗаполнено(ХарактеристикаПроверяемая) И ВРег(Строка(Выборка.Характеристика)) = ВРег(ХарактеристикаПроверяемая) Тогда
					ХарактеристикаНоменклатуры = Выборка.Характеристика;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ХарактеристикаНоменклатуры;
		
		//Если СписокВыбора.Количество() = 1 Тогда
		//	Возврат СписокВыбора[0].Значение;
		//Иначе
		//	Возврат Неопределено;
		//КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Справочник.НоменклатураПоставщиков (УТ).
//
&НаСервере
Функция ПолучитьНоменклатуруПоставщика(Партнер, Номенклатура, Характеристика = Неопределено, Упаковка = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Партнер) ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И (НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|			ИЛИ НоменклатураПоставщиков.Номенклатура В
		|				(ВЫБРАТЬ
		|					ТоварыДругогоКачества.Номенклатура
		|				ИЗ
		|					РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		|				ГДЕ
		|					ТоварыДругогоКачества.НоменклатураБрак = &Номенклатура))
		|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)";
		
		Если НЕ Характеристика = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И НоменклатураПоставщиков.Характеристика = &Характеристика";
		КонецЕсли;
		
		Если НЕ Упаковка = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И НоменклатураПоставщиков.Упаковка = &Упаковка";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Партнер",        Партнер);
		Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.УстановитьПараметр("Упаковка",       Упаковка);
		
		РезультатЗапроса = Запрос.Выполнить();
		СписокВыбора = Новый СписокЗначений();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокВыбора.Добавить(Выборка.НоменклатураПоставщика);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СписокВыбора.Количество() = 1 Тогда
			Возврат СписокВыбора[0].Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создать новый Элемент НомерГТД.
//
&НаСервере
Функция СоздатьНовыйЭлементСправочникаНомераГТД(СправочникМенеджер, НомерГТД, СтранаПроисхождения)
	
	Элемент = СправочникМенеджер.НайтиПоКоду(НомерГТД);
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
	НовыйЭлемент.Код = НомерГТД;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		НовыйЭлемент.СтранаПроисхождения = СтранаПроисхождения;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

// Создать новый Элемент Производитель.
//
&НаСервере
Функция СоздатьНовыйЭлементСправочникаПроизводители(СправочникМенеджер, Производитель)
	
	Элемент = СправочникМенеджер.НайтиПоНаименованию(Производитель);
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	МетаданныеСправочника = Элемент.Метаданные();
	
	Если МетаданныеСправочника.Иерархический И МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		Группа = СправочникМенеджер.НайтиПоНаименованию("ПРОИЗВОДИТЕЛИ");
		
		Если НЕ ЗначениеЗаполнено(Группа) Тогда
			НоваяГруппа = СправочникМенеджер.СоздатьГруппу();
			
			Попытка
				НоваяГруппа.УстановитьНовыйКод();
			Исключение
			КонецПопытки;
			
			НоваяГруппа.Наименование = "ПРОИЗВОДИТЕЛИ";
			
			НоваяГруппа.Записать();
			
			Группа = НоваяГруппа.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НовыйЭлемент = СправочникМенеджер.СоздатьЭлемент();
	
	Попытка
		НовыйЭлемент.УстановитьНовыйКод();
	Исключение
	КонецПопытки;
	
	Если МетаданныеСправочника.Иерархический И МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		НовыйЭлемент.Родитель = Группа;
	КонецЕсли;
	
	НовыйЭлемент.Наименование = Производитель;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

// Получить Артикул из Наименования. Необходимо при формировании таблицы "1С:Предприятие".
//
&НаСервере
Функция ПолучитьАртикулИзНаименования(Знач НаименованиеОбрабатываемое, НовоеНаименование = "")
	
	АртикулОбрабатываемый = "";
	
	ПозицияПервогоРазделителя = Найти(НаименованиеОбрабатываемое, Объект.РазделительАртикулаИНаименования);
	АртикулОбрабатываемый = СокрЛП(Лев(НаименованиеОбрабатываемое, ПозицияПервогоРазделителя-1));
	
	НовоеНаименование = СокрЛП(Сред(НаименованиеОбрабатываемое, ПозицияПервогоРазделителя+1));
	
	Возврат АртикулОбрабатываемый;
	
КонецФункции

// Получить цену Номенклатуры по данным БД. Необходимо при формировании таблицы "1С:Предприятие".
//
&НаСервере
Функция ПолучитьЦенуПоВидуЦен(ВидЦены, Дата, Номенклатура)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Цены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Цены.Цена
	|		ИНАЧЕ Цены.Цена / Цены.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ВидЦены = &ВидЦены
	|				И Номенклатура = &Номенклатура) КАК Цены");
	
	Запрос.УстановитьПараметр("ВидЦены"       , ВидЦены);  
	Запрос.УстановитьПараметр("Дата"          , Дата);
	Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда			
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда				
			Цена = Выборка.Цена;                  				
		КонецЕсли;			
	КонецЕсли; 

	Возврат Цена;
	
КонецФункции

// Получить Структуру "Реквизиты1С". Используется при заполнении таблицы "1С:Предприятие.
//
&НаСервере
Функция ПолучитьСтруктуруРеквизиты1С(ЗначенияНоль = Ложь)
	
	Предположения = Новый Структура;
	Предположения.Вставить("Наименование"		, ?(НЕ ЗначенияНоль, "Наименование"			, ""));
	Предположения.Вставить("Штрихкод"			, ?(НЕ ЗначенияНоль, "Штрихкод"				, 0	));
	Предположения.Вставить("Артикул"			, ?(НЕ ЗначенияНоль, "Артикул"				, ""));
	Предположения.Вставить("ЕдиницаИзмерения"	, ?(НЕ ЗначенияНоль, "ЕдиницаИзмерения"		, ""));
	Предположения.Вставить("ЦенаЗакупочная"		, ?(НЕ ЗначенияНоль, "ЦенаЗакупочная"		, 0	));
	Предположения.Вставить("ЦенаРозничная"		, ?(НЕ ЗначенияНоль, "ЦенаРозничная"		, 0	));
	Предположения.Вставить("СтавкаНДС"			, ?(НЕ ЗначенияНоль, "СтавкаНДС"			, 0	));
	Предположения.Вставить("Количество"			, ?(НЕ ЗначенияНоль, "Количество"			, 0	));
	Предположения.Вставить("Вес"				, ?(НЕ ЗначенияНоль, "Вес"					, 0	));
	Предположения.Вставить("Характеристика"		, ?(НЕ ЗначенияНоль, "Характеристика"		, ""));
	Предположения.Вставить("Описание"			, ?(НЕ ЗначенияНоль, "Описание"				, ""));
	Предположения.Вставить("СтранаПроисхождения", ?(НЕ ЗначенияНоль, "СтранаПроисхождения"	, ""));
	Предположения.Вставить("Производитель"		, ?(НЕ ЗначенияНоль, "Производитель"		, ""));
	Предположения.Вставить("НомерГТД"			, ?(НЕ ЗначенияНоль, "НомерГТД"				, ""));
	Предположения.Вставить("МаркаБренд"			, ?(НЕ ЗначенияНоль, "МаркаБренд"			, ""));
	Предположения.Вставить("КоллекцияСезон"		, ?(НЕ ЗначенияНоль, "КоллекцияСезон"		, ""));
	
	Возврат Предположения;
	
КонецФункции

// СтавкаНДС из Перечисления "СтавкиНДС".
//
&НаСервере
Функция ПолучитьСтавкуНДСОбъект(Знач СтавкаНДС)
	
	Попытка
		СтавкаНДСЧислом = Число(СтавкаНДС);
	Исключение
		СтавкаНДСЧислом = 0;
	КонецПопытки;
	
	Если СтавкаНДС = СтавкаНДСЧислом И СтавкаНДС = 0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

	Если СтавкаНДС = СтавкаНДСЧислом ИЛИ СтавкаНДС = "10" ИЛИ СтавкаНДС = "10%" ИЛИ СтавкаНДС = "10 %" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли СтавкаНДС = СтавкаНДСЧислом ИЛИ СтавкаНДС = "18" ИЛИ СтавкаНДС = "18%" ИЛИ СтавкаНДС = "18 %" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецФункции // ПолучитьСтавкуНДСЧислом()

// Вызов ОпределитьТипШтрихкода(Значение).
//
&НаСервере
Функция ПолучитьТипШтрихКодаОбъект(Номенклатура, Штрихкод)
	
	ТипШтрихкода = ОпределитьТипШтрихкода(Штрихкод);
	
	Возврат ТипШтрихкода;

КонецФункции

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN8.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки
//
&НаСервере
Функция ТипШтрихкодаEAN8(Штрихкод)
	
	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 3;
	
	Если СтрДлина(Штрихкод) = 8 Тогда
		
		Для Индекс = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 8) = Сумма + 48);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата ITF14.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
&НаСервере
Функция ТипШтрихкодаITF14(Штрихкод)
	
	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 1;
	
	Если СтрДлина(Штрихкод) = 14 Тогда
		
		Для Индекс = 1 По 13 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 14) = Сумма + 48);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата CODE39.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
&НаСервере
Функция ТипШтрихкодаCODE39(Штрихкод)
	
	Результат = Ложь;
	Длина     = СтрДлина(Штрихкод);
	
	Если Длина > 0 Тогда
		Результат = Истина;
		Для Индекс = 1 По Длина Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если (КодСимв <> 32)
				И (КодСимв < 36 Или КодСимв > 37)
				И (КодСимв <> 43)
				И (КодСимв < 45 Или КодСимв > 57)
				И (КодСимв < 65 Или КодСимв > 90) Тогда
				
				Результат = Ложь;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN13.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
&НаСервере
Функция ТипШтрихкодаEAN13(Штрихкод)
	
	Результат = (СтрДлина(Штрихкод) = 13
	И КонтрольныйСимволEAN13(Штрихкод) = Прав(Штрихкод, 1));
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает контрольный символ штрихкода EAN13.
//
// Параметры:
//  Штрихкод - Строка
//           - Неполный штрихкод (12 символов), для которого вычисляется
//             контрольный 13-й символ.
//
// Возвращаемое значение:
//  Строка - Контрольный символ EAN13.
//
&НаСервере
Функция КонтрольныйСимволEAN13(Штрихкод)
	
	Результат   = "";
	Сумма       = 0;
	Коэффициент = 1;
	
	Для Индекс = 1 По 12 Цикл
		КодСимв     = КодСимвола(Штрихкод, Индекс);
		Сумма       = Сумма + Коэффициент * (КодСимв - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма     = (10 - Сумма % 10) % 10;
	Результат = Символ(Сумма + 48);
	
	Возврат Результат;
	
КонецФункции 

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  Штрихкод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
&НаСервере
Функция КонтрольныйСимволEAN(Штрихкод, Тип)

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции 

// Определить Тип Штрихкода из ПланыВидовХарактеристик "ТипыШтрихкодов" по значению.
//
&НаСервере
Функция ОпределитьТипШтрихкода(Штрихкод)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		ТипШтрихкода = "";
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ITF14 = Ложь;
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда //ITF14
		
		Коэффициент = 1; 		
		Для Сч = 1 По 13 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Прервать;				
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ITF14 = Истина;
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				ТипШтрихкода = "ITF14";
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				ТипШтрихкода = "ITF14";
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
		КонецЕсли;		
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда //EAN13
		
		Коэффициент = 1;				
		Для Сч = 1 По 12 Цикл
			КодСимв     = КодСимвола(Штрихкод, Сч);
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		
		Сумма    = (10 - Сумма % 10) % 10;
		
		ПроверочныйСимвол = Символ(Сумма + 48);
		
		Если ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				ТипШтрихкода = "EAN13";
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда	//EAN8
		
		Коэффициент = 3;		
		Для Сч = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		
		Сумма     = (10 - Сумма % 10) % 10;
		
		Если КодСимвола(Штрихкод, 8) = Сумма + 48 Тогда
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				ТипШтрихкода = "EAN8";
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипШтрихкода)
		И НЕ ITF14 Тогда //CODE39
		
		CODE39 = Ложь;		
		Если ДлинаШтрихкода > 0 Тогда
			CODE39 = Истина;
			Для Сч = 1 По ДлинаШтрихкода Цикл
				КодСимв = КодСимвола(Штрихкод, Сч);
				Если (КодСимв <> 32)
					И (КодСимв < 36 Или КодСимв > 37)
					И (КодСимв <> 43)
					И (КодСимв < 45 Или КодСимв > 57)
					И (КодСимв < 65 Или КодСимв > 90) Тогда
					
					CODE39 = Ложь;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если CODE39 Тогда
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				ТипШтрихкода = "CODE39";
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
		КонецЕсли	                                                     
		
	КонецЕсли;	
	
	Возврат ТипШтрихкода;
	
КонецФункции	

// По Виду Номенклатуры определить Тип Номенклатуры.
//
&НаКлиенте
Процедура Таблица1СВидНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект.Таблица1С.Индекс(Элементы.Таблица1С.ТекущиеДанные);
	
	ВидНоменклатуры = Элемент.Родитель.Родитель.ТекущиеДанные.ВидНоменклатуры;
	
	Объект.Таблица1С[ТекущаяСтрока].ТипНоменклатуры = ПолучитьТипНоменклатурыИзВидаНоменклатурыНаСервере(ВидНоменклатуры);
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		Попытка
			ГруппаДоступа = ПараметрыВидНоменклатурыПолучитьГруппуДоступа(ВидНоменклатуры);
			Если ЗначениеЗаполнено(ГруппаДоступа) Тогда
				Объект.Таблица1С[ТекущаяСтрока].ГруппаДоступа = ГруппаДоступа;
			КонецЕсли;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

// Фактически по Виду Номенклатуры определить Тип Номенклатуры.
//
&НаСервере
Функция ПолучитьТипНоменклатурыИзВидаНоменклатурыНаСервере(ВидНоменклатуры)
	
	Возврат ВидНоменклатуры.ТипНоменклатуры;
	
КонецФункции

// Вызов процедуры открывтия текста Колокки "Комментарий" таблицы "1С:Предприятие" в форме многострочного текста.
//
&НаКлиенте
Процедура Таблица1СКомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИзменяемоеЗначение		= Элемент.ТекстРедактирования;
	РезультатРедактирования = Элемент.ТекстРедактирования;
	ФормаОткрытьФормуРедактированияМногострочногоТекста(ИзменяемоеЗначение, РезультатРедактирования, , "Комментарий");
	
КонецПроцедуры

// Фактически открывает форму редактирования произвольного многострочного текста модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
// Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы
//
&НаКлиенте
Процедура ФормаОткрытьФормуРедактированияМногострочногоТекста(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, , , Истина);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок, , Истина);
	КонецЕсли;
	
	Если НЕ ТекстВведен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатРедактирования = МногострочныйТекст Тогда
		РезультатРедактирования = МногострочныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОИСКА НОМЕНКЛАТУРЫ ДЛЯ ФОРМИРОВАНИЯ ТАБЛИЦЫ "1С:ПРЕДПРИЯТИЕ".
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Запрос к справочнику "Номенклатура" по Наименованию, используется ПОДОБНО.
//
&НаСервере
Функция НайтиПоНаименованию(Наименование, Список = Неопределено)
	
	Если Не ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений;
	Иначе
		Результат = Список;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование
	|	ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%"+Наименование+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));
	
	Возврат Результат;
	
КонецФункции

// Запрос к справочнику "Номенклатура" по Коду, используется ПОДОБНО.
//
&НаСервере
Функция НайтиПоКоду(Код, Список = Неопределено)
	
	Если Не ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений;
	Иначе
		Результат = Список;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код ПОДОБНО &Код";
	
	Запрос.УстановитьПараметр("Код", "%"+Код+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));

	Возврат Результат;
	
КонецФункции

// Запрос к справочнику "Номенклатура" по Артикулу, используется ПОДОБНО.
//
&НаСервере
Функция НайтиПоАртикулу(Артикул, Список = Неопределено)
	
	Если Не ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений;
	Иначе
		Результат = Список;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Артикул";
	
	Запрос.УстановитьПараметр("Артикул", "%"+Артикул+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));

	Возврат Результат;
	
КонецФункции

// Запрос к РегиструСведений "Штрихкоды" по Штрихкоду, используется ПОДОБНО.
//
&НаСервере
Функция НайтиПоШтрихкодуРозница(Штрихкод, Характеристики = Неопределено)
	
	Результат = Новый СписокЗначений;
	Характеристики = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	ЕСТЬNULL(Штрихкоды.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Штрихкоды.Владелец = Номенклатура.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", "%"+Штрихкод+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));
	
	// Формируем список найденных характеристик
	Для Каждого ТекСтрока ИЗ ТЗ.ВыгрузитьКолонку("ХарактеристикаНоменклатуры") Цикл
		Если ЗначениеЗаполнено(ТекСтрока) Тогда
			Характеристики.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Запрос к РегиструСведений "ШтрихкодыНоменклатуры" по Штрихкоду, используется ПОДОБНО.
//
&НаСервере
Функция НайтиПоШтрихкодуТорговля(Штрихкод, Характеристики = Неопределено)
	
	Результат = Новый СписокЗначений;
	Характеристики = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод                     КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура                 КАК Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ШтрихкодыНоменклатуры.Характеристика               КАК ХарактеристикаНоменклатуры,
	|	ШтрихкодыНоменклатуры.Упаковка                          КАК Упаковка,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Коэффициент, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", "%"+Штрихкод+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));
	
	// Формируем список найденных характеристик
	Для Каждого ТекСтрока ИЗ ТЗ.ВыгрузитьКолонку("ХарактеристикаНоменклатуры") Цикл
		Если ЗначениеЗаполнено(ТекСтрока) Тогда
			Характеристики.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;

КонецФункции

// Запрос к справочнику "Номенклатура" по Наименованию, Коду, Артикулу, НаименованиюПолному, используется ПОДОБНО, а также к РегиструСведений "Штрихкоды" по Штрихкоду.
//
&НаСервере
Функция НайтиВездеРозница(Наименование, Список = Неопределено, Характеристики = Неопределено)

	Результат = Новый СписокЗначений;
	Характеристики = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Ссылка,
	|	Штрихкоды.Характеристика КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &Наименование
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	И (НЕ Штрихкоды.Владелец.ЭтоГруппа)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ЕСТЬNULL(Штрихкоды.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (Штрихкоды.Владелец = Номенклатура.Ссылка)
	|ГДЕ
	|	(Номенклатура.Наименование ПОДОБНО &Наименование
	|			ИЛИ Номенклатура.Код ПОДОБНО &Наименование
	|			ИЛИ Номенклатура.Артикул ПОДОБНО &Наименование
	|			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование)
	|	И (НЕ Номенклатура.ЭтоГруппа)";
	
	Запрос.УстановитьПараметр("Наименование", "%"+Наименование+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТЗ.ВыгрузитьКолонку("Ссылка"));
	
	// Формируем список найденных характеристик
	Для каждого ТекСтрока Из ТЗ.ВыгрузитьКолонку("ХарактеристикаНоменклатуры") Цикл
		Если ЗначениеЗаполнено(ТекСтрока) Тогда
			Характеристики.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАПИСЬ В БД:
// 1. Запись элементов в Справочник "Номенклатура";
// 2. Запись Штрихкода в РегистрСведений "Штрихкоды";
// 3. Формирование и Запись Документов комплектами:
//    - Количество в файле указано:
//    	- "Поступление товаров" и "Установка цен номенклатуры";
//      	- При наличии документа "Поступление товаров" документ "Установка себестоимости" не требуется.
//    	- "Оприходование товаров", "Установка себестоимости", "Установка цен номенклатуры";
//    - Количество в файле не указано.
//    	- "Установка цен номенклатуры".
//
// *. Определение "Количество в файле не указано":
//    - Отсутствует в файле типа "Excel";
//    - Скрыта в файле типа "Excel";
//    - Не определилась (не найдено соответствие в Таблице "Синонимы");
//    - Неверный формат числа в файле типа "Excel".
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Запись в справочник "Номенклатура".
//
&НаКлиенте
Процедура ОМОбновитьСправочники(Команда)

	ПредупреждениеВозвращаемое = "";
	КоличествоНеИспользуемыхАлгоритмовПоиска = 0;
	ОМУстановитьПараметры_ПроверитьИспользуемыеАлгоритмыПоиска(ПредупреждениеВозвращаемое, КоличествоНеИспользуемыхАлгоритмовПоиска);
	
	Если Объект.СправочникиОбновлены И КоличествоНеИспользуемыхАлгоритмовПоиска = 6 Тогда
		Ответ = Вопрос("ВНИМАНИЕ!
			|НЕ ВЫБРАН НИ ОДИН ИЗ АЛГОРИТМОВ ПОИСКА:
			|" + ПредупреждениеВозвращаемое + "
			|
			|Справочная информация уже обновлена по данным таблицы ""1С:Предприятие"".
			|
			|ПОВТОРНОЕ ОБНОВЛЕНИЕ ПРИВЕДЕТ К ПЕРЕЗАПИСИ ЭЛЕМЕНТОВ НОМЕНКЛАТУРЫ
			|ИЗ КОЛОНКИ ""НАИМЕНОВАНИЕ1С"".
			|
			|Обновить Справочную информацию
			|согласно подготовленным данным в таблице ""1С:Предприятие"" ?
			|", 
			РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,  
			Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия + ": " + "ОБНОВЛЕНИЕ СПРАВОЧНОЙ ИНФОРМАЦИИ", 
			КодВозвратаДиалога.Нет);
			
		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
			
			Возврат;
			
		КонецЕсли;
	Иначе	
		Ответ = Вопрос("Обновить Справочную информацию
			|согласно подготовленным данным в таблице ""1С:Предприятие"" ?
			|", 
			РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,  
			Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия + ": " + "ОБНОВЛЕНИЕ СПРАВОЧНОЙ ИНФОРМАЦИИ", 
			КодВозвратаДиалога.Нет);
			
		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние("" + Объект.ПараметрыСеансаОбработки.СинонимОбработки + "
	|Обновление Справочных данных.");
	
	Отказ = Ложь;
	Предупреждение = ОМОбновитьСправочникиНаСервере(Отказ);
	
	Если НЕ Отказ И Предупреждение = "" Тогда
		Объект.СправочникиОбновлены = Истина;
	Иначе
		Предупреждение(Предупреждение);
	КонецЕсли;
		
	ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаТаблица1С;
	
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Фактическое изменения в справочнике "Номенклатура".
//
&НаСервере
Функция ОМОбновитьСправочникиНаСервере(Отказ)
	
	Таблица1С = РеквизитФормыВЗначение("Объект.Таблица1С");
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Предупреждение = "";
	
	Если Объект.ИспользоватьНоменклатуруПоставщиков Тогда
				
		// Конфигурации.
		Если ЭтоКонфигурацияУправлениеТорговлей() Тогда
			
			Если НЕ ЭтоДокументПоступления(Объект.ТипДокумента) Тогда
				Сообщить("Объект: " + Объект.ТипДокумента + " не является документом поступления.
				|Номенклатура Поставщика не формируется.");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда
				Сообщить("Параметр: ""Поставщик"" не определен.
				|Номенклатура Поставщика не формируется.");
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Для Каждого Строка1С ИЗ Таблица1С Цикл
		
		Если Найти(Строка1С.Номенклатура1С, "<Объект не найден>") > 0 Тогда
			Строка1С.Номенклатура1С = Неопределено;
		КонецЕсли;
		
		// Справочник.Номенклатура.
		Если НЕ ЗначениеЗаполнено(Строка1С.Номенклатура1С) Тогда	// Не найден элемент справочника при заполнении Таблицы 1С.
			ЭлементНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			ЭлементНоменклатура.УстановитьНовыйКод();
		Иначе
			ЭлементНоменклатура = Строка1С.Номенклатура1С.ПолучитьОбъект();
			Если ЭлементНоменклатура = Неопределено Тогда
				Отказ = Истина;
				Сообщить("Объект: " + Строка1С.Номенклатура1С + " неопределен.
				|Выполнение обновлений справочной информации прервано.");
				Прервать;
			КонецЕсли;
			
			Если ЭлементНоменклатура.Заблокирован() Тогда
				Отказ = Истина;
				Сообщить("Объект: " + Строка1С.Номенклатура1С + " заблокирован.
				|Выполнение обновлений справочной информации прервано.");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		// Справочник.НоменклатураПоставщиков.
		ЭлементНоменклатураПоставщикаПолучен = Ложь;
		Если Объект.ИспользоватьНоменклатуруПоставщиков Тогда
			
			Если ЭтоДокументПоступления(Объект.ТипДокумента) И ЗначениеЗаполнено(Объект.Поставщик) Тогда
			
				// Конфигурации.
				Если ЭтоКонфигурацияУправлениеТорговлей() Тогда
					
					Если НЕ ЗначениеЗаполнено(Строка1С.НоменклатураПоставщика) Тогда	// Не найден элемент справочника при заполнении Таблицы 1С.
						
						ЭлементНоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
						////ЭлементНоменклатураПоставщика.УстановитьНовыйКод();		// НИЖЕ. После Владельца.
						
						ЭлементНоменклатураПоставщикаПолучен = Истина;
						
					Иначе
						
						Попытка
							ЭлементНоменклатураПоставщика = Строка1С.НоменклатураПоставщика.ПолучитьОбъект();
							ЭлементНоменклатураПоставщикаПолучен = Истина;
						Исключение
							//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
							ЭлементНоменклатураПоставщикаПолучен = Ложь;
						КонецПопытки;
						
						Если ЭлементНоменклатураПоставщика = Неопределено Тогда
							Отказ = Истина;
							Сообщить("Объект: " + Строка1С.НоменклатураПоставщика + " неопределен.
							|Выполнение обновлений справочной информации прервано.");
							Прервать;
						КонецЕсли;
						
						Если ЭлементНоменклатураПоставщика.Заблокирован() Тогда
							Отказ = Истина;
							Сообщить("Объект: " + Строка1С.НоменклатураПоставщика + " заблокирован.
							|Выполнение обновлений справочной информации прервано.");
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Справочник.ХарактеристикиНоменклатуры.
		ЭлементХарактеристикаПолучен = Ложь;
		Если Объект.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() ИЛИ ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			
				Если НЕ ЗначениеЗаполнено(Строка1С.Характеристика1С) Тогда	// Не найден элемент справочника при заполнении Таблицы 1С.
					
					ЭлементХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
					////ЭлементХарактеристика.УстановитьНовыйКод();		// НИЖЕ. После Владельца.
					
					ЭлементХарактеристикаПолучен = Истина;
					
				Иначе
						
					Попытка
						ЭлементХарактеристика = Строка1С.Характеристика1С.ПолучитьОбъект();
						ЭлементХарактеристикаПолучен = Истина;
					Исключение
						//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
						ЭлементХарактеристикаПолучен = Ложь;
					КонецПопытки;
					
					Если ЭлементХарактеристика = Неопределено Тогда
						Отказ = Истина;
						Сообщить("Объект: " + Строка1С.Характеристика + " неопределен.
						|Выполнение обновлений справочной информации прервано.");
						Прервать;
					КонецЕсли;
					
					Если ЭлементХарактеристика.Заблокирован() Тогда
						Отказ = Истина;
						Сообщить("Объект: " + Строка1С.Характеристика + " заблокирован.
						|Выполнение обновлений справочной информации прервано.");
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
								
			КонецЕсли;

		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// Наименования.
		////////////////////////////////////////////////////////////////////////////////////
		
		// Розница+, УТ+, КА+, БП+.
		Отказ = Ложь;
		СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Наименование"					, Строка1С.НаименованиеИД, , Отказ);
		Если Отказ Тогда Прервать; 	КонецЕсли;
		
		// Розница+, УТ+, КА+, БП+.
		
		Если Объект.СоставноеПолноеНаименование Тогда
			
			Если (НЕ ЗначениеЗаполнено(Объект.СоставноеПолноеНаименованиеРеквизит) ИЛИ Объект.СоставноеПолноеНаименованиеРеквизит = "Характеристика")
				И ЗначениеЗаполнено(Строка1С.Характеристика) Тогда
				
				ПолноеНаименование = ЭлементНоменклатура.Наименование + " [" + Строка1С.Характеристика + "]";	// [] - т.к. латиница.
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НаименованиеПолное"		, ПолноеНаименование, , Отказ);
				Если Отказ Тогда Прервать; 	КонецЕсли;
				
			ИначеЕсли Объект.СоставноеПолноеНаименованиеРеквизит = "Описание"
				И ЗначениеЗаполнено(Строка1С.Описание) Тогда
				
				ПолноеНаименование = ЭлементНоменклатура.Наименование + " [" + Строка1С.Описание + "]";			// [] - т.к. латиница.
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НаименованиеПолное"		, ПолноеНаименование, , Отказ);
				Если Отказ Тогда Прервать; 	КонецЕсли;
				
			Иначе
				
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НаименованиеПолное"		, ЭлементНоменклатура.Наименование, , Отказ);
				Если Отказ Тогда Прервать; 	КонецЕсли;
				
			КонецЕсли;
				
		Иначе
				
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НаименованиеПолное"		, ЭлементНоменклатура.Наименование, , Отказ);
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// Реквизиты, которые можно повторно изменять.
		////////////////////////////////////////////////////////////////////////////////////
		
		// Розница+, УТ+, КА+, БП+.
		
		// Группа 1-го уровня для создаваемой Номенклатуры.
		Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры) Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Родитель"					, Строка1С.ГруппаНоменклатуры, , Отказ);				// Розница+, УТ+, КА+, БП+.
			
		КонецЕсли;
		
		// Группа 2-го уровня для создаваемой Номенклатуры.
		Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры_2) Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Родитель"					, Строка1С.ГруппаНоменклатуры_2, , Отказ);				// Розница+, УТ+, КА+, БП+.
			
		Иначе
			
			Если Объект.СоздаватьНовыеГруппыНоменклатуры И ЗначениеЗаполнено(Строка1С.МаркаБренд) Тогда
				
				Отказ = Ложь;
				Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры) Тогда
					Строка1С.ГруппаНоменклатуры_2 = СправочникНоменклатураСоздатьНовуюГруппу(Строка1С, Строка1С.МаркаБренд, Строка1С.ГруппаНоменклатуры, Отказ);
				Иначе
					Строка1С.ГруппаНоменклатуры_2 = СправочникНоменклатураСоздатьНовуюГруппу(Строка1С, Строка1С.МаркаБренд, Неопределено, Отказ);
				КонецЕсли;
				
				Если Отказ Тогда Прервать; КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры_2) Тогда
					СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Родитель"			, Строка1С.ГруппаНоменклатуры_2, , Отказ);				// Розница+, УТ+, КА+, БП+.
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Группа 3-го уровня для создаваемой Номенклатуры.
		Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры_3) Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Родитель"					, Строка1С.ГруппаНоменклатуры_3, , Отказ);				// Розница+, УТ+, КА+, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
		Иначе
			
			Если Объект.СоздаватьНовыеГруппыНоменклатуры И ЗначениеЗаполнено(Строка1С.КоллекцияСезон) Тогда
				
				Отказ = Ложь;
				Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры_2) Тогда
					Строка1С.ГруппаНоменклатуры_3 = СправочникНоменклатураСоздатьНовуюГруппу(Строка1С, Строка1С.КоллекцияСезон, Строка1С.ГруппаНоменклатуры_2, Отказ);
				ИначеЕсли ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры) Тогда
					Строка1С.ГруппаНоменклатуры_3 = СправочникНоменклатураСоздатьНовуюГруппу(Строка1С, Строка1С.КоллекцияСезон, Строка1С.ГруппаНоменклатуры, Отказ);
				Иначе
					Строка1С.ГруппаНоменклатуры_3 = СправочникНоменклатураСоздатьНовуюГруппу(Строка1С, Строка1С.КоллекцияСезон, Неопределено, Отказ);
				КонецЕсли;
				
				Если Отказ Тогда Прервать; КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка1С.ГруппаНоменклатуры_3) Тогда
					СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Родитель"			, Строка1С.ГруппаНоменклатуры_3, , Отказ);				// Розница+, УТ+, КА+, БП+.
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Артикул"							, Строка1С.Артикул, , Отказ);							// Розница+, УТ+, КА+, БП+.
			
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НоменклатурнаяГруппа"		, Строка1С.НоменклатурнаяГруппа, , Отказ);				// Розница+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтранаПроисхождения"			, Строка1С.СтранаПроисхождения, , Отказ);				// Розница+, УТ-, КА+, БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Производитель"				, Строка1С.Производитель, , Отказ);						// Розница+, УТ+, КА-, БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Описание"					, Строка1С.Описание, , Отказ);							// Розница+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Вес"							, Строка1С.Вес, , Отказ);								// Розница+, УТ+, КА+, БП-.
			
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СкладскаяГруппа"				, Строка1С.НоменклатурнаяГруппа, , Отказ);				// УТ+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Производитель"				, Строка1С.Производитель, , Отказ);						// Розница+, УТ+, КА-, БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Описание"					, Строка1С.Описание, , Отказ);							// УТ+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Вес"							, Строка1С.Вес, , Отказ);								// Розница+, УТ+, КА+, БП(?).
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ГруппаДоступа"				, Строка1С.ГруппаДоступа, , Отказ);						// Розница-, УТ+, КА-, БП-.
			
			Если Объект.ИспользоватьГруппыФинансовогоУчета Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ГруппаФинансовогоУчета"	, Строка1С.ГруппаФинансовогоУчета, , Отказ);			// Розница-, УТ+, КА-, БП-.
			КонецЕсли;
			
			Если Объект.ИспользоватьКачествоТоваров Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Качество"				, Строка1С.Качество, , Отказ);							// Розница-, УТ+, КА-, БП-.
			КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НоменклатурнаяГруппа"		, Строка1С.НоменклатурнаяГруппа, , Отказ);				// БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтранаПроисхождения"			, Строка1С.СтранаПроисхождения, , Отказ);				// Розница+, УТ-, КА+, БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Производитель"				, Строка1С.Производитель, , Отказ);						// Розница+, УТ+, КА-, БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Комментарий"					, Строка1С.Описание, , Отказ);							// БП+.
			
			Если Объект.ИспользоватьИмпортныеЗакупки Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НомерГТД"				, Строка1С.НомерГТД, , Отказ);							// Розница-, УТ-, КА+, БП+. см. ВестиУчетПоГТД.
			КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтатьяЗатрат"				, Строка1С.СтатьяЗатрат, , Отказ);						// Розница-, УТ-, КА+, БП+.
			
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НоменклатурнаяГруппа"		, Строка1С.НоменклатурнаяГруппа, , Отказ);				// КА+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ВидВоспроизводства"			, Строка1С.ВидВоспроизводства, , Отказ);				// Розница-, УТ-, КА+, БП-.
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НоменклатурнаяГруппаЗатрат"	, Строка1С.НоменклатурнаяГруппаЗатрат, , Отказ);		// Розница-, УТ-, КА+, БП-.
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ВестиОперативныйУчетОстатковНЗП"	, Строка1С.ВестиОперативныйУчетОстатковНЗП, , Отказ);	// Розница-, УТ-, КА+, БП-.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтранаПроисхождения"			, Строка1С.СтранаПроисхождения, , Отказ);				// Розница+, УТ-, КА+, БП+.
			
			Если Объект.ИспользоватьИмпортныеЗакупки Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НомерГТД"				, Строка1С.НомерГТД, , Отказ);							// Розница-, УТ-, КА+, БП+. см. ВестиУчетПоГТД.
			КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтатьяЗатрат"				, Строка1С.СтатьяЗатрат, , Отказ);						// Розница-, УТ-, КА+, БП+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ДополнительноеОписаниеНоменклатуры"	, Строка1С.Описание, , Отказ);					// КА+.
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Вес"							, Строка1С.Вес, , Отказ);								// Розница+, УТ+, КА+, БП(?).
			
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// Блокируемые реквизиты.
		////////////////////////////////////////////////////////////////////////////////////
		
		// Конфигурации.
		Если ЭтоКонфигурацияРозница() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЕдиницаИзмерения"			, Строка1С.ЕдиницаИзмерения, , Отказ);					// Розница+, УТ+, КА-, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ВидНоменклатуры"				, Строка1С.ВидНоменклатуры, , Отказ);					// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ТипНоменклатуры"				, Строка1С.ТипНоменклатуры, , Отказ);					// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			Если Объект.ИспользоватьЦеновыеГруппы Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЦеноваяГруппа"			, Строка1С.ЦеноваяГруппа, , Отказ);						// Розница+, УТ+, КА+, БП-.
				Если Отказ Тогда Прервать; 	КонецЕсли;
			КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтавкаНДС"					, Строка1С.СтавкаНДС, , Отказ);							// Розница+, УТ+, КА+, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Весовой"						, ЗначениеЗаполнено(ЭлементНоменклатура.Вес), Истина, Отказ);	// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			Если Объект.ИспользоватьУпаковкиНоменклатуры Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НаборУпаковок"			, Строка1С.НаборУпаковок, , Отказ);						// Розница+, УТ+, КА-, БП-.
				Отказ = Ложь;	// Блокируемый, но может быть незаполненным.
			КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЕдиницаИзмерения"			, Строка1С.ЕдиницаИзмерения, , Отказ);					// Розница+, УТ+, КА-, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ВидНоменклатуры"				, Строка1С.ВидНоменклатуры, , Отказ);					// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ТипНоменклатуры"				, Строка1С.ТипНоменклатуры, , Отказ);					// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			Если Объект.ИспользоватьЦеновыеГруппы Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЦеноваяГруппа"			, Строка1С.ЦеноваяГруппа, , Отказ);						// Розница+, УТ+, КА+, БП-.
				Если Отказ Тогда Прервать; 	КонецЕсли;
			КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтавкаНДС"					, Строка1С.СтавкаНДС, , Отказ);							// Розница+, УТ+, КА+, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Весовой"						, ЗначениеЗаполнено(ЭлементНоменклатура.Вес), Истина, Отказ);	// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			Если Объект.ИспользоватьУпаковкиНоменклатуры Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "НаборУпаковок"			, Строка1С.НаборУпаковок, , Отказ);						// Розница+, УТ+, КА-, БП-.
				Отказ = Ложь;	// Блокируемый, но может быть незаполненным.
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ИспользоватьУпаковки"	, ЗначениеЗаполнено(ЭлементНоменклатура.НаборУпаковок), Истина, Отказ);	// Розница-, УТ+, КА-, БП-.
				Отказ = Ложь;	// Блокируемый, но может быть незаполненным.
			КонецЕсли;
			
			Если Объект.ИспользоватьИмпортныеЗакупки Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ВестиУчетПоГТД"			, Строка1С.ВестиУчетПоГТД, , Отказ);					// Розница-, УТ+, КА-, БП-. см. НомерГТД.
				Если Отказ Тогда Прервать; 	КонецЕсли;
			КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ПодакцизныйТовар"			, Строка1С.ПодакцизныйТовар, , Отказ);					// Розница-, УТ+, КА-, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			Если Объект.ИспользоватьГруппыФинансовогоУчета Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ГруппаФинансовогоУчета"	, Строка1С.ГруппаФинансовогоУчета, , Отказ);			// Розница-, УТ+, КА-, БП-.
				Если Отказ Тогда Прервать; 	КонецЕсли;
			КонецЕсли;
			
			Если Объект.ИспользоватьКачествоТоваров Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Качество"				, Строка1С.Качество, , Отказ);							// Розница-, УТ+, КА-, БП-.
				Если Отказ Тогда Прервать; 	КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЕдиницаИзмерения"			, Строка1С.ЕдиницаИзмерения, , Отказ);					// Розница+, УТ+, КА-, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтавкаНДС"					, Строка1С.СтавкаНДС, , Отказ);							// Розница+, УТ+, КА+, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
		ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "БазоваяЕдиницаИзмерения"		, Строка1С.ЕдиницаИзмерения, , Отказ);					// КА+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЕдиницаХраненияОстатков"		, Строка1С.ЕдиницаИзмерения, , Отказ);					// КА+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЕдиницаДляОтчетов"			, Строка1С.ЕдиницаИзмерения, , Отказ);					// КА+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЕдиницаИзмеренияМест"		, Строка1С.ЕдиницаИзмерения, , Отказ);					// КА+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ВидНоменклатуры"				, Строка1С.ВидНоменклатуры, , Отказ);					// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ТипНоменклатуры"				, Строка1С.ТипНоменклатуры, , Отказ);					// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			Если Объект.ИспользоватьЦеновыеГруппы Тогда
				СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "ЦеноваяГруппа"			, Строка1С.ЦеноваяГруппа, , Отказ);						// Розница+, УТ+, КА+, БП-.
				Если Отказ Тогда Прервать; 	КонецЕсли;
			КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "СтавкаНДС"					, Строка1С.СтавкаНДС, , Отказ);							// Розница+, УТ+, КА+, БП+.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
			СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, "Весовой"						, ЗначениеЗаполнено(ЭлементНоменклатура.Вес), Истина, Отказ);	// Розница+, УТ+, КА+, БП-.
			Если Отказ Тогда Прервать; 	КонецЕсли;
			
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////
		// Запись Объекта.
		////////////////////////////////////////////////////////////////////////////////////
			
		Попытка
			ЭлементНоменклатура.Записать();
			Строка1С.Номенклатура1С = ЭлементНоменклатура.Ссылка;	// Элемент Справочника сформирован.
			Строка1С.Артикул1С = Строка1С.Номенклатура1С.Артикул;
			Если ЭтоКонфигурацияРозница() Тогда
				Строка1С.НоменклатураПоставщика = ЭлементНоменклатура.Ссылка;
			КонецЕсли;
		Исключение
			Отказ = Истина;
			Предупреждение = "" + Строка1С.НомерСтроки + ". Номенклатура: " + ЭлементНоменклатура + " - " + ОписаниеОшибки();
			Сообщить(Предупреждение);
			Прервать;
		КонецПопытки;
		
		Если НЕ Отказ И ЭлементХарактеристикаПолучен И Объект.ИспользоватьХарактеристикиНоменклатуры И ЭлементНоменклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
			И НЕ ЭлементНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
			
			Если ЭлементНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
				ЭлементХарактеристика.Владелец = ЭлементНоменклатура.Ссылка.ВидНоменклатуры;
			ИначеЕсли ЭлементНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
				ЭлементХарактеристика.Владелец = ЭлементНоменклатура.Ссылка;
			КонецЕсли;
			
			ЭлементХарактеристика.УстановитьНовыйКод();	// После Владельца.
			
			ЭлементХарактеристика.Наименование = Строка1С.Характеристика;
			
			Попытка
				ЭлементХарактеристика.Записать();
				Строка1С.Характеристика1С = ЭлементХарактеристика.Ссылка;	// Элемент Справочника сформирован.
			Исключение
				Отказ = Истина;
				Предупреждение = "" + Строка1С.НомерСтроки + ". Характеристика: " + ЭлементХарактеристика + " - " + ОписаниеОшибки();
				Сообщить(Предупреждение);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ Отказ И Объект.ИспользоватьНоменклатуруПоставщиков И ЭлементНоменклатураПоставщикаПолучен Тогда
			
			// Конфигурации.
			Если ЭтоКонфигурацияУправлениеТорговлей() Тогда
					
					СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Владелец"			, Объект.Поставщик, Истина);
					
					ЭлементНоменклатураПоставщика.УстановитьНовыйКод();	// После Владельца, т.к. ПодчинениеВладельцу.
					
					СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Наименование"		, Строка1С.НаименованиеИД);
					СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Номенклатура"		, ЭлементНоменклатура.Ссылка);
					
					Если Объект.ИспользоватьХарактеристикиНоменклатуры И ЭлементНоменклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
						СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Характеристика", Строка1С.Характеристика1С);
					КонецЕсли;
					
					Если Объект.ИспользоватьУпаковкиНоменклатуры И ЭлементНоменклатура.ИспользоватьУпаковки Тогда
						СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Упаковка"		, Строка1С.Упаковка);
					КонецЕсли;
					
					СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Артикул"			, Строка1С.Артикул);						// Розница+, УТ+, КА+, БП+.
					
					//СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатураПоставщика, "Идентификатор"	, Строка1С.Идентификатор);
				
				Попытка
					ЭлементНоменклатураПоставщика.Записать();
					Строка1С.НоменклатураПоставщика = ЭлементНоменклатураПоставщика.Ссылка;	// Элемент Справочника сформирован.
				Исключение
					Отказ = Истина;
					Предупреждение = "" + Строка1С.НомерСтроки + ". НоменклатураПоставщика: " + ЭлементНоменклатураПоставщика + " - " + ОписаниеОшибки();
					Сообщить(Предупреждение);
					Прервать;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////
		// РегистрСведений "Штрихкоды", "ШтрихкодыНоменклатуры" и т.д.
		Если ЗначениеЗаполнено(Строка1С.ШтрихКод) Тогда
			
			Отказ = Ложь;
			Предупреждение = ПроизвестиДополнительнуюПроверкуШтрихкодаИЗаписатьШтрихКод(ЭлементНоменклатура, Строка1С, Отказ);
			
			Если Отказ ИЛИ ЗначениеЗаполнено(Предупреждение) Тогда
				
				Предупреждение = "КРИТИЧЕСКАЯ СИТУАЦИЯ
				|
				|Запись Штрихкода: " + Строка1С.ШтрихКод + " для элемента справочника ""Номенклатура"":
				|" + ЭлементНоменклатура + "
				|
				|" + Предупреждение + "
				|
				|Обновление справочной информации прервано.
				|";
				
				Прервать;	// Штрихкод не записан - КРИТИЧНО. Прерываем Обновление справочника.
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();
		ЗначениеВРеквизитФормы(Таблица1С, "Объект.Таблица1С");
	Иначе
		Если НЕ ЗначениеЗаполнено(Предупреждение) Тогда
			Предупреждение = "Обновление справочников не произведено.";
		КонецЕсли;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Предупреждение;
	
КонецФункции

// Справочник: Заполнение Реквизита Значением.
//
&НаСервере
Функция СправочникНоменклатураСоздатьНовуюГруппу(Строка1С, ГруппаТХТ, Знач ГруппаРодитель, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ГруппаТХТ) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ГруппаЭлемента = Справочники.Номенклатура.СоздатьГруппу();
	ГруппаЭлемента.УстановитьНовыйКод();
	
	Если ЗначениеЗаполнено(ГруппаРодитель) Тогда
		ГруппаЭлемента.Родитель = ГруппаРодитель;
	КонецЕсли;
	
	ГруппаЭлемента.Наименование = ГруппаТХТ;
	
	Попытка
		ГруппаЭлемента.Записать();
		Возврат ГруппаЭлемента.Ссылка;
	Исключение
		Отказ = Истина;
		Предупреждение = "" + Строка1С.НомерСтроки + ". Группа Номенклатуры: " + ГруппаТХТ + " - " + ОписаниеОшибки();
		Сообщить(Предупреждение);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Справочник: Заполнение Реквизита Значением.
//
&НаСервере
Процедура СправочникНоменклатураЗаполнитьРеквизитЗначением(ЭлементНоменклатура, Реквизит, Значение, ЗаписатьОбязательно = Ложь, Отказ = Ложь)
	
	Если (НЕ ЗначениеЗаполнено(Значение) И НЕ ЗаписатьОбязательно) Тогда
		Если НЕ Объект.СписокБлокируемыхРеквизитов.НайтиПоЗначению(Реквизит) = Неопределено Тогда		// ВАЖНО. После записи элемента меняться не должен.
			Отказ = Истина;
			Сообщить("Не заполнен Блокируемый реквизит """ + Реквизит + """.");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ЭлементНоменклатура.Ссылка.Метаданные();
	
	Если МетаданныеОбъекта.Реквизиты.Найти(Реквизит) = Неопределено Тогда
		
		Найдено = Ложь;
		
		СтандартныеРеквизиты = МетаданныеОбъекта.СтандартныеРеквизиты;
		
		Для Каждого СтандартныйРеквизит ИЗ СтандартныеРеквизиты Цикл
			
			Если СтандартныйРеквизит.Имя = Реквизит Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			
			Владельцы = МетаданныеОбъекта.Владельцы;
			
			Для Каждого Владелец ИЗ СтандартныеРеквизиты Цикл
				
				Если Владелец.Имя = Реквизит Тогда
					Найдено = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			Если НЕ Найдено Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Записать = Ложь;
	
	Если НЕ Объект.СписокБлокируемыхРеквизитов.НайтиПоЗначению(Реквизит) = Неопределено Тогда		// ВАЖНО. После записи элемента меняться не должен.
		Записать = ЭлементНоменклатура.ЭтоНовый() ИЛИ (Объект.ИзменятьРеквизитыСправочников И Объект.ИзменятьВТЧЗапрещенные);
	ИначеЕсли Реквизит = "Наименование" Тогда
		Записать = ЭлементНоменклатура.ЭтоНовый() ИЛИ Объект.ИзменятьНаименование;
	ИначеЕсли Реквизит = "НаименованиеПолное" Тогда
		Записать = ЭлементНоменклатура.ЭтоНовый() ИЛИ Объект.ИзменятьНаименование ИЛИ НЕ ЗначениеЗаполнено(ЭлементНоменклатура.НаименованиеПолное);
	Иначе
		Записать = ЭлементНоменклатура.ЭтоНовый() ИЛИ Объект.ИзменятьРеквизитыСправочников;
	КонецЕсли;
	
	Если Записать ИЛИ ЗаписатьОбязательно Тогда
		ЭлементНоменклатура[Реквизит] = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Произвести поиск по Штрихкоду, если таковой не осуществлялся и запись в РегистрыСведений "Штрихкоды" при необходимости.
//
&НаСервере
Функция ПроизвестиДополнительнуюПроверкуШтрихкодаИЗаписатьШтрихКод(спрОбъект, Строка1С, Отказ)
	
	Предупреждение = "";
	
	Если НЕ ЗначениеЗаполнено(Строка1С.ШтрихКод) Тогда
		Возврат Предупреждение;
	КонецЕсли;
	
	сзТМП = Новый СписокЗначений;
	Если Объект.УникальныеШтрихкоды Тогда
		
		// Уникальные Штрихкоды. Нельзя допустить записи одинаковых штрихкодов 2-х и более элементов справочника "Номенклатура".
		
		Если ( НЕ Объект.ПоискПоШтрихкоду ИЛИ НЕ ЗначениеЗаполнено(Строка1С.НайденПО) ) Тогда	// Если не выбран "Поиск по Штрихкоду" на вкладке "Параметры - Алгоритмы поиска".
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				сзТМП = НайтиПоШтрихкодуРозница(Строка1С.ШтрихКод);
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				сзТМП = НайтиПоШтрихкодуТорговля(Строка1С.ШтрихКод);
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
			ЗаписатьШК = сзТМП.Количество() = 0;								// Штрихкод не найден.
		Иначе
			ЗаписатьШК = НЕ Строка1С.НайденПО = Объект.стрНайденПО.ШтрихКоду;	// Не найдена Номенклатура или найдена по другому Алгоритму поиска.
		КонецЕсли;
		
		Если ЗаписатьШК Тогда
			
			ЗаписатьШтрихКод(спрОбъект, Строка1С.ШтрихКод, Строка1С.ТипШтрихКода, Строка1С.Характеристика1С, Строка1С.Упаковка, Отказ);	// Все Ок - записываем.
			
			Если Отказ Тогда
				Предупреждение = "Штрихкод: " + Строка1С.ШтрихКод + " не записан."
			КонецЕсли;
			
			Строка1С.ШтрихКод1С = Строка1С.ШтрихКод;
			
		Иначе
			
			Если сзТМП.Количество() = 0 Тогда
				
				// Поиск по Штрихкоду производился при заполнении таблицы "1С:Предприятие".
				// Элемент справочника "Номенклатура" найден по Штрихкоду.
				// Перезаписывать Штрихкод не требуется.
				
			ИначеЕсли сзТМП.Количество() = 1 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка1С.Номенклатура1С) Тогда
					ЧистоеНаименование 		= ОчиститьОтЛишнего(Строка1С.НаименованиеИД);
				Иначе
					ЧистоеНаименование 		= ОчиститьОтЛишнего(Строка1С.Номенклатура1С);
				КонецЕсли;
				
				НайденныйЭлемент 		= сзТМП[0].Значение;
				ЧистыйНайденныйЭлемент 	= ОчиститьОтЛишнего(НайденныйЭлемент.Наименование);
				
				// Проверка - это тот же элемент или другой.
				Если НЕ ЧистоеНаименование = ЧистыйНайденныйЭлемент Тогда	// Выдать сообщение и впоследствии предупреждение о незаписаных Штрихкодах.
					
					Отказ = Истина;
					
					Предупреждение = "РАСХОЖДЕНИЕ ПО НАИМЕНОВАНИЮ. 
					|Уникальные штрихкоды: Дополнительная проверка, т.к. поиск по Штрихкоду не использовался.
					|
					|Cтрока № " + Строка1С.НомерСтроки + ". Штрихкод: " + Строка1С.ШтрихКод + " существует и принадлежит:
					|" + сзТМП[0].Значение + "
					|
					|Элемент справочника ""Номенклатура"" не записан.
					|Штрихкод для данного элемента справочника ""Номенклатура"" не записан.";
					
				Иначе	// Совпало по наименованию, НО ВОЗМОЖНО ЭТО ДРУГОЙ ЭЛЕМЕНТ СПРАВОЧНИКА "НОМЕНКЛАТУРА". "ДВОЙНАЯ" НОМЕНКЛАТУРА !!!
					
					Если НЕ НайденныйЭлемент = Строка1С.Номенклатура1С Тогда
						
						Отказ = Истина;
						
						Предупреждение = "ДВОЙНАЯ НОМЕНКЛАТУРА ?!
						|Уникальные штрихкоды: Дополнительная проверка, т.к. поиск по Штрихкоду не использовался.
						|
						|Найдена по крайней мере 1 позиция номенклатуры с Наименованием: 
						|" + ЧистыйНайденныйЭлемент + "
						|
						|Элемент справочника ""Номенклатура"" не записан.
						|Штрихкод для данного элемента справочника ""Номенклатура"" не записан.";
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Отказ = Истина;
				
				Предупреждение = "Уникальные штрихкоды: Дополнительная проверка, т.к поиск по Штрихкоду не использовался.
				|Найдено больше, чем 1 позиция номенклатуры со Штрихкодом: " + Строка1С.ШтрихКод;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Предупреждение) Тогда
				Сообщить(Предупреждение);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// НЕУникальные Штрихкоды - просто записать.
		
		ЗаписатьШтрихКод(спрОбъект, Строка1С.ШтрихКод, Строка1С.ТипШтрихКода, Строка1С.Характеристика1С, Строка1С.Упаковка, Отказ);
		Если Отказ Тогда
			Предупреждение = "Штрихкод: " + Строка1С.ШтрихКод + " не записан."
		Иначе	
			Строка1С.ШтрихКод1С = Строка1С.ШтрихКод;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Предупреждение;
	
КонецФункции

// Запись в РегистрыСведений "Штрихкоды".
//
&НаСервере
Процедура ЗаписатьШтрихКод(ЭлементНоменклатура, ШтрихКод, ТипШтрихКода, Характеристика, Упаковка, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ТипШтрихКода) Тогда
		Отказ = Истина;
		Сообщить("Запись не верна! Значение поля ""Тип штрихкода"" не может быть пустым! " + ЭлементНоменклатура.Ссылка);
		Сообщить("Возможная причина: Неверный ШтрихКод в таблице Excel: " + ШтрихКод);
		Возврат;
	КонецЕсли;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		НовыйШтрихкод              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Владелец     = ЭлементНоменклатура.Ссылка;
		НовыйШтрихкод.ТипШтрихкода = ТипШтрихКода;
		НовыйШтрихкод.Штрихкод     = ШтрихКод;
		Если Объект.ИспользоватьХарактеристикиНоменклатуры И ЭлементНоменклатура.Ссылка.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
			НовыйШтрихкод.Характеристика = Характеристика;
		КонецЕсли;
		Если Объект.ИспользоватьУпаковкиНоменклатуры Тогда
			НовыйШтрихкод.Упаковка = Упаковка;
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		НовыйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Номенклатура = ЭлементНоменклатура.Ссылка; 
		НовыйШтрихкод.Штрихкод = Штрихкод;
		Если Объект.ИспользоватьХарактеристикиНоменклатуры И ЭлементНоменклатура.Ссылка.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
			НовыйШтрихкод.Характеристика = Характеристика;
		КонецЕсли;
		Если Объект.ИспользоватьУпаковкиНоменклатуры И ЭлементНоменклатура.Ссылка.ИспользоватьУпаковки Тогда
			НовыйШтрихкод.Упаковка = Упаковка;
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
	Попытка
		НовыйШтрихкод.Записать(Истина);
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Формирование документов:
// 1. Поступление товаров.
// 2. Опиходование товаров.
// 3. Установка себестоимости.
// 4. Установка цены номенклатуры.
//
&НаКлиенте
Процедура ОМСформироватьДокументы(Команда)
	
	Если ЭтоОсновноеДействиеСоздать() И НЕ Объект.ДокументыСозданы Тогда
		ТекстВопроса = "Создать новые документы
		|согласно подготовленным данным в таблице ""1С"" ?
		|";
	Иначе
		ТекстВопроса = "Изменить существующие документы
		|согласно подготовленным данным в таблице ""1С"" ?
		|";
	КонецЕсли;
	
	Ответ =  Вопрос(ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,  
		Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия + ": " + "ФОРМИРОВАНИЕ ДОКУМЕНТОВ", 
		КодВозвратаДиалога.Нет);
		
	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Состояние("" + Объект.ПараметрыСеансаОбработки.СинонимОбработки + "
	|Формирование документов.");
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ЭтоОсновноеДействиеСоздать() Тогда
		ОМСформироватьДокументыНаСервере(Объект.ТипДокумента, Отказ);
	Иначе
		ОМИзменитьДокументыНаСервере(Объект.ТипДокумента, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		Объект.ДокументыСозданы = Ложь;
		Если ЗначениеЗаполнено(Объект.ДокументПоступление) ИЛИ ЗначениеЗаполнено(Объект.ДокументОприходование) 
			ИЛИ ЗначениеЗаполнено(Объект.ДокументУстановкаЦены) ИЛИ ЗначениеЗаполнено(Объект.ДокументУстановкаСебестоимости) Тогда
			Объект.ДокументыСозданы = Истина;
		Иначе
			Объект.ДокументыСозданы = Ложь;
		КонецЕсли;
		
		СостояниеДокументов = ОМСформироватьДокументыПолучитьСостояниеПолученныхДокументов();
		
		Если Объект.ДокументыСозданы Тогда
			
			ТекстДополнительный = "";
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				
				Если ЭтоДокументПоступления(Объект.ТипДокумента) Тогда
					ТекстДополнительный = "
					|PS: Для обновления цен Номенклатуры поставщика необходимо
					|в документе установить флажок ""Регистрировать цены поставщика автоматически"".
					|
					|Установка данного флажка зависит от значения реквизита ""Соглашение"" 
					|документа ""Поступление товаров и услуг""."
				КонецЕсли;
				
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
			Предупреждение("Возможные документы сформированы:
			|
			|" + СостояниеДокументов.СостояниеДокументаПоступление + "
			|" + СостояниеДокументов.СостояниеДокументаОприходование + "
			|" + СостояниеДокументов.СостояниеДокументаУстановкаСебестоимости + "
			|" + СостояниеДокументов.СостояниеДокументаУстановкаЦен + "
			|
			|В форме документа(ов) укажите оставшиеся незаполненными реквизиты и
			|выполните при необходимости проведение документов.
			|" + ТекстДополнительный);
			
		КонецЕсли;
		
	КонецЕсли;
		
	ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаТаблица1С;
	
	Элементы.Таблица1С.ТекущаяСтрока = 0;
		
	ФормаОпределитьДоступнность();
	
КонецПроцедуры

// Получить состояние сформированных документов (Записан/Проведен/Не создан):
// 1. Поступление товаров.
// 2. Опиходование товаров.
// 3. Установка себестоимости.
// 4. Установка цены номенклатуры.
//
&НаСервере
Функция ОМСформироватьДокументыПолучитьСостояниеПолученныхДокументов()
	
	Если ЗначениеЗаполнено(Объект.ДокументПоступление) Тогда
		СостояниеДокументаПоступление = ?(Объект.ДокументПоступление.Проведен, "- Документ ""Поступление"" проведен.", "- Документ ""Поступление"" записан.");
	Иначе
		СостояниеДокументаПоступление = "- Документ ""Поступление"" не создан, т.к. основное действие """ + Объект.ОсновноеДействие + """ документ """ + Объект.ТипДокумента + """.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОприходование) Тогда
		СостояниеДокументаОприходование = ?(Объект.ДокументОприходование.Проведен, "- Документ ""Оприходование"" проведен.", "- Документ ""Оприходование"" записан.");
	Иначе
		СостояниеДокументаОприходование = "- Документ ""Оприходование"" не создан, т.к. основное действие """ + Объект.ОсновноеДействие + """ документ """ + Объект.ТипДокумента + """.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументУстановкаСебестоимости) Тогда
		СостояниеДокументаУстановкаСебестоимости = ?(Объект.ДокументУстановкаСебестоимости.Проведен, "- Документ ""Установка себестоимости"" проведен.", "- Документ ""Установка себестоимости"" записан.");
	Иначе
		СостояниеДокументаУстановкаСебестоимости = "- Документ ""Установка себестоимости"" не создан, т.к. не создан документ ""Оприходование"".";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументУстановкаЦены) Тогда
		СостояниеДокументаУстановкаЦен = ?(Объект.ДокументУстановкаЦены.Проведен, "- Документ ""Установка цен номенклатуры"" проведен.", "- Документ ""Установка цен номенклатуры"" записан.");
	Иначе
		СостояниеДокументаУстановкаЦен = "- Документ ""Установка цен номенклатуры"" не создан, т.к. нет новых цен Номенклатуры в файле EXCEL.";
	КонецЕсли;
	
	СостояниеДокументов = Новый Структура;
	СостояниеДокументов.Вставить("СостояниеДокументаПоступление"			, СостояниеДокументаПоступление);
	СостояниеДокументов.Вставить("СостояниеДокументаОприходование"			, СостояниеДокументаОприходование);
	СостояниеДокументов.Вставить("СостояниеДокументаУстановкаСебестоимости"	, СостояниеДокументаУстановкаСебестоимости);
	СостояниеДокументов.Вставить("СостояниеДокументаУстановкаЦен"			, СостояниеДокументаУстановкаЦен);
	
	Возврат СостояниеДокументов;
	
КонецФункции

// Фактическое Формирование документов:
// 1. Поступление товаров.
// 2. Опиходование товаров.
// 3. Установка себестоимости.
// 4. Установка цены номенклатуры.
//
&НаСервере
Процедура ОМСформироватьДокументыНаСервере(ТипДокумента, Отказ)
	
	Таблица1С = РеквизитФормыВЗначение("Объект.Таблица1С");
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Если Объект.КоличествоОпределено Тогда
		
		ДокПоступление = Неопределено;
		
		//////////////////////////////////////////////////////////////////////
		// ДОКУМЕНТ ПОСТУПЛЕНИЕ ТОВАРОВ.
		//////////////////////////////////////////////////////////////////////
		
		Если ЭтоДокументПоступления(ТипДокумента) Тогда
			
			ДокументМД = МетаДанные.НайтиПоТипу(ТипДокумента.Типы()[0]);
			
			Если НЕ Объект.ДокументыСозданы Тогда
				ДокПоступление = Документы[ДокументМД.Имя].СоздатьДокумент();
				ДокПоступление.Дата = ТекущаяДата();
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Организация"			, Объект.Организация);
				ДокПоступление.УстановитьНовыйНомер();
			Иначе
				ДокПоступление = Объект.ДокументПоступление.ПолучитьОбъект();
			КонецЕсли;
			
			// ВСЕ.
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Контрагент"					, Объект.КонтрАгент);
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Организация"				, Объект.Организация);
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Склад"						, Объект.Склад);
			
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ЦенаВключаетНДС"			, Объект.ЦенаВключаетНДС);
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Ответственный"				, ПараметрыСеанса.ТекущийПользователь);
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Комментарий"				, "" + ТекущаяДата() + ": Сформирован загрузкой из " + Объект.ФайлИсходныхДанных + ".");
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "УчитыватьНДС"			, Объект.УчитыватьНДС);
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ЗаказПоставщику"		, Объект.ДокументЗаказПоставщику, Истина);	// Истина: Если ошибочно выбран Документ-Основание в другом документе.
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Магазин"				, Объект.Магазин);
				
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "НалогообложениеНДС"		, Объект.НалогообложениеНДС);
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ЗаказПоставщику"		, Объект.ДокументЗаказПоставщику, Истина);	// Истина: Если ошибочно выбран Документ-Основание в другом документе.
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ПоступлениеПоЗаказам"	, ЗначениеЗаполнено(ДокПоступление.ЗаказПоставщику), Истина);
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ХозяйственнаяОперация"	, Объект.ХозяйственнаяОперация);
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Партнер"				, Объект.Поставщик);
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "РегистрироватьЦеныПоставщика"	, Истина);			// Регистрировать ценыПоставщика при проведении документа.
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Подразделение"			, Объект.Подразделение);
				
				Попытка
					ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Принял"				, Объект.Склад.ТекущийОтветственный);
				Исключение
				КонецПопытки;
				
				Попытка
					ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ПринялДолжность"	, Объект.Склад.ТекущаяДолжностьОтветственного);
				Исключение
				КонецПопытки;
				
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Подразделение"			, Объект.Подразделение);
				
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ЗаказПоставщику"		, Объект.ДокументЗаказПоставщику, Истина);	// Истина: Если ошибочно выбран Документ-Основание в другом документе.
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Подразделение"			, Объект.Подразделение);
				
			КонецЕсли;
			
			ДокПоступление.Товары.Очистить();
			Для Каждого Строка1С ИЗ Таблица1С Цикл
				
				НоваяСтрокаТовары = ДокПоступление.Товары.Добавить();
				
				НоваяСтрокаТовары.Номенклатура							= Строка1С.Номенклатура1С;
				
				НоваяСтрокаТовары.Количество 							= Строка1С.Количество;
				
				Попытка
					НоваяСтрокаТовары.КоличествоУпаковок 				= Строка1С.Количество;
				Исключение
				    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
					
				// Конфигурации.
				Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() ИЛИ ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
					
					Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
						И НЕ НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
						
						Если НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
							ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары	, "Характеристика"					, Строка1С.Характеристика1С);
						ИначеЕсли НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
							ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары	, "Характеристика"					, Строка1С.Характеристика1С);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Конфигурации.
				Если ЭтоКонфигурацияРозница() Тогда
					
				ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
					
					// ТАБЛИЧНАЯ ЧАСТЬ Товары.
					
					// НомерСтрокиДокументаПоставщика необходим при фиксации расхождений Факта и Документа Поставщика.
					ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары		, "НомерСтрокиДокументаПоставщика"	, Строка1С.НомерСтроки-1);	// -1, т.к. 1-я строка - Шапка Таблицы.
					
					Если Объект.ИспользоватьНоменклатуруПоставщиков Тогда
						ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары	, "НоменклатураПоставщика"			, Строка1С.НоменклатураПоставщика);
					КонецЕсли;
					
					ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары		, "ЗаказПоставщику"					, ДокПоступление.ЗаказПоставщику);
					
					// НомерГТД - раньше СтранаПроисхождения.
					Если Объект.ИспользоватьИмпортныеЗакупки Тогда
						ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары	, "НомерГТД"						, Строка1С.НомерГТД);
					КонецЕсли;
					
				ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
				ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
				КонецЕсли;
				
				ДокументПоступленияЗаполнитьЦенуСуммыСтрокиТабличнойЧасти(ДокПоступление, НоваяСтрокаТовары, Строка1С.ЦенаЗакупочная, Строка1С.Количество, Строка1С.СтавкаНДС);
				
			КонецЦикла;
			
			ДокПоступление.СуммаДокумента = ДокПоступление.Товары.Итог("Сумма");
			
			Попытка
				Если ДокПоступление.ЭтоНовый() Тогда	// ПОСТУПЛЕНИЕ.
					ДокПоступление.Записать(РежимЗаписиДокумента.Запись);
				Иначе
					Если ДокПоступление.Проведен Тогда
						ДокПоступление.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						ДокПоступление.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				КонецЕсли;
				Объект.ДокументПоступление = ДокПоступление.Ссылка;
			Исключение
				Отказ = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		ИначеЕсли ЭтоДокументОприходования(ТипДокумента) Тогда	// Оприходование товаров.
		
			//////////////////////////////////////////////////////////////////////
			// ДОКУМЕНТ ОПРИХОДОВАНИЕ НОМЕНКЛАТУРЫ.
			//////////////////////////////////////////////////////////////////////
			
			ДокументМД = МетаДанные.НайтиПоТипу(ТипДокумента.Типы()[0]);
			
			Если НЕ Объект.ДокументыСозданы Тогда
				ДокПоступление = Документы[ДокументМД.Имя].СоздатьДокумент();
				ДокПоступление.Дата = ТекущаяДата();
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Организация"					, Объект.Организация);
				ДокПоступление.УстановитьНовыйНомер();
			Иначе
				ДокПоступление = Объект.ДокументОприходование.ПолучитьОбъект();
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Организация"						, Объект.Организация);
			КонецЕсли;
			
			// ВСЕ.
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ДокументОснование"					, Объект.ДокументОснование, Истина);	// Истина: Если ошибочно выбран Документ-Основание в другом документе.
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Склад"								, Объект.Склад);
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Ответственный"						, ПараметрыСеанса.ТекущийПользователь);
			ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Комментарий"						, "" + ТекущаяДата() + ": Сформирован загрузкой из " + Объект.ФайлИсходныхДанных + ".");
			
			ТипСкладаОптовый = Неопределено;
			ТипСкладаРозничный = Неопределено;
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "АналитикаХозяйственнойОперации"	, Справочники.АналитикаХозяйственныхОпераций.ОприходованиеТоваров);
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Магазин"						, Объект.Магазин);
				
				ТипСкладаОптовый = Перечисления.ТипыСкладов.СкладскоеПомещение;
				ТипСкладаРозничный = Перечисления.ТипыСкладов.ТорговыйЗал;
				
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				
				ТипСкладаОптовый = Перечисления.ТипыСкладов.ОптовыйСклад;
				ТипСкладаРозничный = Перечисления.ТипыСкладов.РозничныйМагазин;
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "Подразделение"					, Объект.Подразделение);
				
				Если ДокПоступление.Склад.ТипСклада =  ТипСкладаОптовый Тогда
					ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ВидЦены"					, Объект.ВидЦеныЗакупочная);
				ИначеЕсли ДокПоступление.Склад.ТипСклада = ТипСкладаРозничный Тогда
					ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ВидЦены"					, Объект.ВидЦеныРозничная);
				Иначе
					Сообщить("Тип Склада неопределен, следовательно ВидЦены неопределен.");
				КонецЕсли;
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ХозяйственнаяОперация"			, Объект.ХозяйственнаяОперация);
				
				ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "СтатьяДоходов"					, Объект.СтатьяДоходов);
				
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
			ДокПоступление.Товары.Очистить();
			Для Каждого Строка1С ИЗ Таблица1С Цикл
				
				НоваяСтрокаТовары = ДокПоступление.Товары.Добавить();
				
				НоваяСтрокаТовары.Номенклатура 	= Строка1С.Номенклатура1С;
				
				Если ДокПоступление.Склад.ТипСклада =  ТипСкладаОптовый Тогда
					НоваяСтрокаТовары.Цена 		= Строка1С.ЦенаЗакупочная;
				ИначеЕсли ДокПоступление.Склад.ТипСклада = ТипСкладаРозничный Тогда
					НоваяСтрокаТовары.Цена 		= Строка1С.ЦенаРозничная;
				Иначе
					Сообщить("" + НоваяСтрокаТовары.Номенклатура + ": Тип Склада неопределен, следовательно Цена неопределена.");
				КонецЕсли;
				
				Попытка
					НоваяСтрокаТовары.Количество 			= Строка1С.Количество;
				Исключение
				КонецПопытки;
				
				Попытка
					НоваяСтрокаТовары.КоличествоУпаковок 	= Строка1С.Количество;
				Исключение
				КонецПопытки;
				
				НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.Цена * Строка1С.Количество;
					
				// Конфигурации.
				Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() ИЛИ ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
					
					Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
						И НЕ НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
						
						Если НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
							ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары	, "Характеристика"					, Строка1С.Характеристика1С);
						ИначеЕсли НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
							ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(НоваяСтрокаТовары	, "Характеристика"					, Строка1С.Характеристика1С);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Конфигурации.
				Если ЭтоКонфигурацияРозница() Тогда
				ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
				
					Попытка
						НоваяСтрокаТовары.СтатьяРасходов = Строка1С.СтатьяРасходов;
					Исключение
					КонецПопытки;
					
					Попытка
						Если ДокПоступление.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации Тогда
							НоваяСтрокаТовары.ФизическоеЛицо = Строка1С.ФизическоеЛицо;
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					// НомерГТД - раньше СтранаПроисхождения.
					Если Объект.ИспользоватьИмпортныеЗакупки Тогда
						Попытка
							НоваяСтрокаТовары.НомерГТД = Строка1С.НомерГТД;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					Попытка
						НоваяСтрокаТовары.СтранаПроисхождения = Строка1С.СтранаПроисхождения;
					Исключение
					КонецПопытки;
					
				ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
				ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
				КонецЕсли;
				
			КонецЦикла;
			
			// Конфигурации.
			Если ЭтоКонфигурацияРозница() Тогда
				
				ДокПоступление.СуммаДокумента = ДокПоступление.Товары.Итог("Сумма");
				
			ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
			ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
			ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
			КонецЕсли;
			
			Попытка
				Если ДокПоступление.ЭтоНовый() Тогда	// ОПРИХОДОВАНИЕ.
					ДокПоступление.Записать(РежимЗаписиДокумента.Запись);
				Иначе
					Если ДокПоступление.Проведен Тогда
						ДокПоступление.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						ДокПоступление.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				КонецЕсли;
				Объект.ДокументОприходование = ДокПоступление.Ссылка;
			Исключение
				Отказ = Истина;
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			Если НЕ Отказ И ЭтоКонфигурацияРозница() Тогда		// Документ УстановкаСебестоимости.
				
				//////////////////////////////////////////////////////////////////////
				// ДОКУМЕНТ УСТАНОВКА СЕБЕСТОИМОСТИ НОМЕНКЛАТУРЫ.
				//////////////////////////////////////////////////////////////////////
				
				Если НЕ Объект.ДокументыСозданы Тогда
					
					ДокУстановкаСебестоимости = Документы.УстановкаСебестоимости.СоздатьДокумент();
					ДокУстановкаСебестоимости.Дата = ДокПоступление.Дата - 1;	// -1 СЕК.
					ДокУстановкаСебестоимости.Магазин 			= Объект.Магазин;
					ДокУстановкаСебестоимости.УстановитьНовыйНомер();
					
				Иначе
					ДокУстановкаСебестоимости = Объект.ДокументУстановкаСебестоимости.ПолучитьОбъект();
					ДокУстановкаСебестоимости.Магазин 			= Объект.Магазин;
				КонецЕсли;
				
				ДокУстановкаСебестоимости.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
				ДокУстановкаСебестоимости.Комментарий 		= "" + ТекущаяДата() + ": Сформирован загрузкой из " + Объект.ФайлИсходныхДанных + ".";
				
				ДокУстановкаСебестоимости.Товары.Очистить();
				Для Каждого Строка1С ИЗ Таблица1С Цикл
					
					НоваяСтрокаТовары = ДокУстановкаСебестоимости.Товары.Добавить();
					
					НоваяСтрокаТовары.Номенклатура 	= Строка1С.Номенклатура1С;
					НоваяСтрокаТовары.Цена 			= Строка1С.ЦенаЗакупочная;
					
					// Конфигурации.
					Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() ИЛИ ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
						
						Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
							И НЕ НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
							
							Если НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
								НоваяСтрокаТовары.Характеристика 	= Строка1С.Характеристика1С;
							ИначеЕсли НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
								НоваяСтрокаТовары.Характеристика 	= Строка1С.Характеристика1С;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Попытка
					Если ДокУстановкаСебестоимости.ЭтоНовый() Тогда
						ДокУстановкаСебестоимости.Записать(РежимЗаписиДокумента.Запись);
					Иначе
						Если ДокУстановкаСебестоимости.Проведен Тогда
							ДокУстановкаСебестоимости.Записать(РежимЗаписиДокумента.Проведение);
						Иначе
							ДокУстановкаСебестоимости.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
					КонецЕсли;
					Объект.ДокументУстановкаСебестоимости = ДокУстановкаСебестоимости.Ссылка;
				Исключение
					Отказ = Истина;
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе	// Прочее
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////
	// ДОКУМЕНТ УСТАНОВКА ЦЕН НОМЕНКЛАТУРЫ.
	//////////////////////////////////////////////////////////////////////
	
	Если НЕ Отказ Тогда
		
		Если НЕ Объект.ДокументыСозданы Тогда
			
			ДокУстановкаЦены = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			ДокУстановкаЦены.Дата = ТекущаяДата();
			
			Если НЕ ДокПоступление = Неопределено Тогда		// Если Количество в файле не определено, то только документ УстановкаЦен.
				ДокУстановкаЦены.Дата = ДокПоступление.Дата - 1;	// -1 СЕК.
				ДокУстановкаЦены.ДокументОснование = ДокПоступление.Ссылка;
			КонецЕсли;
			
			ДокУстановкаЦены.УстановитьНовыйНомер();
			
		ИначеЕсли (Объект.ДокументыСозданы И НЕ ЗначениеЗаполнено(Объект.ДокументУстановкаЦены)) Тогда	// Создали документы, а потом скорректировали ценув таблице 1С, например, Розничную, а документ УстановкаЦен не был создан.
			
			Объект.ДокументУстановкаЦены = ПолучитьДляДокументаСвязанныйДокумент(Объект.ДокументПоступление, "УстановкаЦенНоменклатуры");
			
			Если НЕ ЗначениеЗаполнено(Объект.ДокументУстановкаЦены) Тогда
				
				ДокУстановкаЦены = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ДокУстановкаЦены.Дата = ТекущаяДата();
				
				Если НЕ ДокПоступление = Неопределено Тогда		// Если Количество в файле не определено, то только документ УстановкаЦен.
					ДокУстановкаЦены.Дата = ДокПоступление.Дата - 1;	// -1 СЕК.
					ДокУстановкаЦены.ДокументОснование = ДокПоступление.Ссылка;
				КонецЕсли;
				
				ДокУстановкаЦены.УстановитьНовыйНомер();
				
			Иначе	
				
				ДокУстановкаЦены = Объект.ДокументУстановкаЦены.ПолучитьОбъект();
				
			КонецЕсли;
			
		Иначе
			
			ДокУстановкаЦены = Объект.ДокументУстановкаЦены.ПолучитьОбъект();
			
		КонецЕсли;
		
		ДокУстановкаЦены.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокУстановкаЦены.Комментарий = "" + ТекущаяДата() + ": Сформирован загрузкой из " + Объект.ФайлИсходныхДанных + ".";
		
		// Таблица ВидовЦен.
		
		ДокУстановкаЦены.ВидыЦен.Очистить();
		
		НоваяСтрокаВидыЦен = ДокУстановкаЦены.ВидыЦен.Добавить();
		НоваяСтрокаВидыЦен.ВидЦены = Объект.ВидЦеныЗакупочная;
		
		Если ЗначениеЗаполнено(Объект.ВидЦеныРозничная) Тогда
			НоваяСтрокаВидыЦен = ДокУстановкаЦены.ВидыЦен.Добавить();
			НоваяСтрокаВидыЦен.ВидЦены = Объект.ВидЦеныРозничная;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) Тогда
			НоваяСтрокаВидыЦен = ДокУстановкаЦены.ВидыЦен.Добавить();
			НоваяСтрокаВидыЦен.ВидЦены = Объект.ВидЦеныРасчетная;
		КонецЕсли;
		
		// Таблица Товары.
		
		ЗаписатьДокументУстановкаЦены = ДокУстановкаЦены.Товары.Количество() > 0;
		
		ДокУстановкаЦены.Товары.Очистить();
		Для Каждого Строка1С ИЗ Таблица1С Цикл
			
			ДобавитьЦены = Ложь;
			
			РегЦеныАТТ 		= РегистрыСведений.ЦеныНоменклатуры;
			
			// Проверяем: Есть ли Закупочная цена или нет.
			// Если нет, то добавляем все виды цен.
			
			ОтборЦен		= Новый Структура;
			ОтборЦен.Вставить("Номенклатура", Строка1С.Номенклатура1С);
			ОтборЦен.Вставить("ВидЦены", Объект.ВидЦеныЗакупочная);
			
			ТекущиеЦены 	= РегЦеныАТТ.СрезПоследних(КонецДня(ДокУстановкаЦены.Дата), ОтборЦен);
			
			ЦенаЗакупочная = 0;
			Если ТекущиеЦены.Количество() > 0 Тогда
				Если НЕ ТекущиеЦены[0].Регистратор = ДокУстановкаЦены.Ссылка Тогда
					ЦенаЗакупочная = ТекущиеЦены[0].Цена;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьЦены = НЕ ЦенаЗакупочная = Строка1С.ЦенаЗакупочная;
			
			// Проверяем: Есть ли Розничная цена или нет.
			// Если нет, то добавляем все виды цен.
			
			ОтборЦен		= Новый Структура;
			ОтборЦен.Вставить("Номенклатура", Строка1С.Номенклатура1С);
			ОтборЦен.Вставить("ВидЦены", Объект.ВидЦеныРозничная);
			
			ТекущиеЦены 	= РегЦеныАТТ.СрезПоследних(КонецДня(ДокУстановкаЦены.Дата), ОтборЦен);
			
			ЦенаРозничная = 0;
			Если ТекущиеЦены.Количество() > 0 Тогда
				Если НЕ ТекущиеЦены[0].Регистратор = ДокУстановкаЦены.Ссылка Тогда
					ЦенаРозничная = ТекущиеЦены[0].Цена;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДобавитьЦены Тогда
				ДобавитьЦены = НЕ ЦенаРозничная = Строка1С.ЦенаРозничная;
			КонецЕсли;
			
			// Фактическое добавление цен.
			Если ДобавитьЦены Тогда
				
				ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧасти(ДокУстановкаЦены, Строка1С.Номенклатура1С, Строка1С.ЦенаЗакупочная, Строка1С.ЦенаРозничная, Строка1С.Характеристика1С);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			Если ДокУстановкаЦены.Товары.Количество() > 0 ИЛИ ЗаписатьДокументУстановкаЦены Тогда
				Если ДокУстановкаЦены.ЭтоНовый() Тогда
					ДокУстановкаЦены.Записать(РежимЗаписиДокумента.Запись);
				Иначе
					Если ДокУстановкаЦены.Проведен Тогда
						ДокУстановкаЦены.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						ДокУстановкаЦены.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				КонецЕсли;
				Объект.ДокументУстановкаЦены = ДокУстановкаЦены.Ссылка;
				
				Если ДокУстановкаЦены.Товары.Количество() = 0 Тогда
					Сообщить("Документ ""Установка цены номенклатуры"" записан,
					|но не содержит новых цен на Номенклатуру.");
				КонецЕсли;
				
			Иначе
				Если НЕ Объект.ДокументыСозданы Тогда
					Сообщить("Цены на товары: Закупочные, Розничные соответствуют текущим.
					|Документ ""Установка цены номенклатуры"" не создан.");
				КонецЕсли;
			КонецЕсли;
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();
		Объект.ДокументыСозданы = Истина;
		ОсновноеДействиеЗаголовки();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Фактическое Изменение документов:
// 1. Поступление товаров.
// 2. Установка цены номенклатуры.
//
&НаСервере
Процедура ОМИзменитьДокументыНаСервере(ТипДокумента, Отказ)
	
	Таблица1С = РеквизитФормыВЗначение("Объект.Таблица1С");
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
		
	//////////////////////////////////////////////////////////////////////
	// ДОКУМЕНТ ПОСТУПЛЕНИЕ НОМЕНКЛАТУРЫ.
	//////////////////////////////////////////////////////////////////////
	
	ДокПоступление = Объект.ДокументПоступление.ПолучитьОбъект();
	
	// При указании ДокументКорректируемый в форме заполняется поле ЗаказПоставщику.
	// И, если поле очищено - очищаем реквизит документа Поступление.
	Изменять = (ЗначениеЗаполнено(ДокПоступление.ЗаказПоставщику) И НЕ ЗначениеЗаполнено(Объект.ДокументЗаказПоставщику));
	
	ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "ЗаказПоставщику"				, Объект.ДокументЗаказПоставщику, Изменять);	// Истина: Если ошибочно выбран Документ-Основание в другом документе.
	ДокументЗаполнитьРеквизитЗначением(ДокПоступление, "РегистрироватьЦеныПоставщика"	, Истина);	// Регистрировать ценыПоставщика при проведении документа.
	
	Для Каждого Строка1С ИЗ Таблица1С Цикл
		
		Если НЕ Строка1С.Изменить Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = ДокПоступление.Товары.Найти(Строка1С.Номенклатура1С, "Номенклатура");
		
		Если СтрокаТЧ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументПоступленияЗаполнитьЦенуСуммыСтрокиТабличнойЧасти(ДокПоступление, СтрокаТЧ, Строка1С.ЦенаЗакупочная, СтрокаТЧ.Количество, СтрокаТЧ.СтавкаНДС);
		
	КонецЦикла;
			
	Попытка
		Если ДокПоступление.Проведен Тогда
			ДокПоступление.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокПоступление.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//////////////////////////////////////////////////////////////////////
	// ДОКУМЕНТ УСТАНОВКА ЦЕН НОМЕНКЛАТУРЫ.
	//////////////////////////////////////////////////////////////////////
		
	Если НЕ Отказ Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ДокументУстановкаЦены) Тогда
			
			ДокУстановкаЦены = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			ДокУстановкаЦены.Дата = ДокПоступление.Дата - 1;	// -1 СЕК.
			ДокУстановкаЦены.УстановитьНовыйНомер();
			
			ДокУстановкаЦены.ДокументОснование = ДокПоступление.Ссылка;		// Основное действие "Изменить" - Изменение документа Поступление.
			
			// Таблица ВидовЦен.
			
			// Изменяем только закупочную ...
			НоваяСтрокаВидыЦен = ДокУстановкаЦены.ВидыЦен.Добавить();
			НоваяСтрокаВидыЦен.ВидЦены = Объект.ВидЦеныЗакупочная;
			
			// Изменяем только закупочную ...
			//Если ЗначениеЗаполнено(Объект.ВидЦеныРозничная) Тогда
			//	НоваяСтрокаВидыЦен = ДокУстановкаЦены.ВидыЦен.Добавить();
			//	НоваяСтрокаВидыЦен.ВидЦены = Объект.ВидЦеныРозничная;
			//КонецЕсли;
			
			// ... и связанную с ней Расчетную.
			Если ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) Тогда
				НоваяСтрокаВидыЦен = ДокУстановкаЦены.ВидыЦен.Добавить();
				НоваяСтрокаВидыЦен.ВидЦены = Объект.ВидЦеныРасчетная;
			КонецЕсли;
			
		Иначе
			
			ДокУстановкаЦены = Объект.ДокументУстановкаЦены.ПолучитьОбъект();
			
		КонецЕсли;
		
		// Таблица Товары.
		
		Для Каждого Строка1С ИЗ Таблица1С Цикл
		
			Если НЕ Строка1С.Изменить Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Строка1С.Номенклатура1С);
			мСтрокиТЧ = ДокУстановкаЦены.Товары.НайтиСтроки(ПараметрыОтбора);
		
			Если мСтрокиТЧ.Количество() > 0 Тогда	// Данные есть в документе.
				
				Для Каждого СтрокаТЧ ИЗ мСтрокиТЧ Цикл
					
					// Изменяем только закупочную ...
					Если (СтрокаТЧ.ВидЦены = Объект.ВидЦеныЗакупочная И НЕ Строка1С.ЦенаЗакупочная = 0) Тогда
						СтрокаТЧ.Цена = Строка1С.ЦенаЗакупочная;
						Продолжить;
					КонецЕсли;
					
					// Изменяем только закупочную ...
					Если (ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) И СтрокаТЧ.ВидЦены = Объект.ВидЦеныРозничная И НЕ СтрокаТЧ.Цена = 0) Тогда
						СтрокаТЧ.Цена = СтрокаТЧ.Цена;
						Продолжить;
					КонецЕсли;
					
					// ... и связанную с ней Расчетную.
					Если (ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) И СтрокаТЧ.ВидЦены = Объект.ВидЦеныРасчетная) Тогда
						СтрокаТЧ.Цена = РасчитатьРасчетнуюЦену(ДокУстановкаЦены.Товары, Строка1С.Номенклатура1С, Объект.ВидЦеныРасчетная);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе	// Необходимо добавить данные.
				
				ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧасти(ДокУстановкаЦены, Строка1С.Номенклатура1С, Строка1С.ЦенаЗакупочная, Строка1С.ЦенаРозничная, Строка1С.Характеристика1С);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			Если ДокУстановкаЦены.Товары.Количество() > 0 Тогда
				Если ДокУстановкаЦены.Проведен Тогда
					ДокУстановкаЦены.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокУстановкаЦены.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				Объект.ДокументУстановкаЦены = ДокУстановкаЦены.Ссылка;
			КонецЕсли;
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Заполнение Цен и Сумм табличной части "Товары" документа "Поступление".
//
&НаСервере
Процедура ДокументПоступленияЗаполнитьРеквизитСтрокиТабличнойЧастиВПопытке(СтрокаТабличнойЧасти, ИмяРеквизита, Значение)
	
	Попытка
		СтрокаТабличнойЧасти[ИмяРеквизита] = Значение;
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// Заполнение Цен и Сумм табличной части "Товары" документа "Поступление".
//
&НаСервере
Процедура ДокументПоступленияЗаполнитьЦенуСуммыСтрокиТабличнойЧасти(ДокументПоступление, СтрокаТЧДокумента, Цена, Количество, СтавкаНДС)
	
	СтрокаТЧДокумента.Цена 	= Цена;
				
	СтрокаТЧДокумента.Сумма = СтрокаТЧДокумента.Цена * Количество;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		Если ДокументПоступление.УчитыватьНДС Тогда
			
			СтрокаТЧДокумента.СтавкаНДС = СтавкаНДС;
			
			Если ЗначениеЗаполнено(СтрокаТЧДокумента.СтавкаНДС) Тогда
				
				ПроцентНДС = ПолучитьСтавкуНДСЧислом(СтрокаТЧДокумента.СтавкаНДС);
				
				Если ДокументПоступление.ЦенаВключаетНДС Тогда
					СтрокаТЧДокумента.СуммаНДС = СтрокаТЧДокумента.Цена * Количество * ПроцентНДС / (ПроцентНДС + 1);
				Иначе
					СтрокаТЧДокумента.СуммаНДС = СтрокаТЧДокумента.Цена * Количество * ПроцентНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТЧДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		Если ДокументПоступление.НалогообложениеНДС  = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			
			СтрокаТЧДокумента.СтавкаНДС = СтавкаНДС;
			
			Если ЗначениеЗаполнено(СтрокаТЧДокумента.СтавкаНДС) Тогда
				
				ПроцентНДС = ПолучитьСтавкуНДСЧислом(СтрокаТЧДокумента.СтавкаНДС);
				
				Если ДокументПоступление.ЦенаВключаетНДС Тогда
					СтрокаТЧДокумента.СуммаНДС = СтрокаТЧДокумента.Цена * Количество * ПроцентНДС / (ПроцентНДС + 1);
				Иначе
					СтрокаТЧДокумента.СуммаНДС = СтрокаТЧДокумента.Цена * Количество * ПроцентНДС;
					СтрокаТЧДокумента.СуммаСНДС = СтрокаТЧДокумента.Сумма + СтрокаТЧДокумента.СуммаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТЧДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	КонецЕсли;
	
КонецПроцедуры

// Заполнение Цен и табличной части "Товары" документа "УстановкаЦены".
//
&НаСервере
Процедура ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧасти(ДокУстановкаЦены, Номенклатура1С, ЦенаЗакупочная, ЦенаРозничная, Характеристика1С)
	
	НоваяСтрокаТовары = ДокУстановкаЦены.Товары.Добавить();
	
	НоваяСтрокаТовары.Номенклатура 		= Номенклатура1С;
	НоваяСтрокаТовары.ВидЦены			= Объект.ВидЦеныЗакупочная;
	НоваяСтрокаТовары.Цена 				= ЦенаЗакупочная;
	
	ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧастиХарактеристика(НоваяСтрокаТовары, Характеристика1С);
	
	Если ЭтоОсновноеДействиеСоздать() И ЗначениеЗаполнено(Объект.ВидЦеныРозничная) Тогда
		
		НоваяСтрокаТовары = ДокУстановкаЦены.Товары.Добавить();
		
		НоваяСтрокаТовары.Номенклатура 		= Номенклатура1С;
		НоваяСтрокаТовары.ВидЦены			= Объект.ВидЦеныРозничная;
		НоваяСтрокаТовары.Цена 				= ЦенаРозничная;
	
		ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧастиХарактеристика(НоваяСтрокаТовары, Характеристика1С);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦеныРасчетная) Тогда
		
		НоваяСтрокаТовары = ДокУстановкаЦены.Товары.Добавить();
		
		НоваяСтрокаТовары.Номенклатура 		= Номенклатура1С;
		НоваяСтрокаТовары.ВидЦены			= Объект.ВидЦеныРасчетная;
		НоваяСтрокаТовары.Цена 				= РасчитатьРасчетнуюЦену(ДокУстановкаЦены.Товары, Номенклатура1С, Объект.ВидЦеныРасчетная);
	
		ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧастиХарактеристика(НоваяСтрокаТовары, Характеристика1С);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументаУстановкаЦеныЗаполнитьСтрокуТабличнойЧастиХарактеристика(НоваяСтрокаТовары, Характеристика1С)
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() ИЛИ ЭтоКонфигурацияУправлениеТорговлей() ИЛИ ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		
		Если Объект.ИспользоватьХарактеристикиНоменклатуры И НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
			И НЕ НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
			
			Если НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
				НоваяСтрокаТовары.Характеристика = Характеристика1С;
			ИначеЕсли НоваяСтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
				НоваяСтрокаТовары.Характеристика = Характеристика1С;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Документ Заполнение Реквизита Значением.
//
&НаСервере
Процедура ДокументЗаполнитьРеквизитЗначением(Документ, Реквизит, Значение, Изменять = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Значение) И НЕ Изменять Тогда
		Возврат;
	КонецЕсли;
	
	МДДокумента = Документ.Метаданные();
		
	Если МДДокумента.Реквизиты.Найти(Реквизит) = Неопределено Тогда
		
		Найдено = Ложь;
		СтандартныеРеквизиты = МДДокумента.СтандартныеРеквизиты;
		Для Каждого СтандартныйРеквизит ИЗ СтандартныеРеквизиты Цикл
			Если СтандартныйРеквизит.Имя = Реквизит Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Документ[Реквизит] = Значение;
	
КонецПроцедуры

// Формирование документа "Установка цены номенклатуры". Вычисление "Расчетной цены".
//
&НаСервере
Функция РасчитатьРасчетнуюЦену(Знач ТЧасть, Знач Номенклатура1С, Знач СправочникВидыЦенРасчетная)
	
	ЗначениеРасчетнойЦены = 0;
	
	ЦеноваяГруппаНоменклатуры = Номенклатура1С.ЦеноваяГруппа;
	
	Если НЕ ЗначениеЗаполнено(ЦеноваяГруппаНоменклатуры) Тогда
		Возврат 0;
	КонецЕсли;
	
	ЦенаРасчетная = Справочники.ВидыЦен.НайтиПоНаименованию(СправочникВидыЦенРасчетная);
	
	Если НЕ ЗначениеЗаполнено(ЦенаРасчетная) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТЧастьЦеновыеГруппыВидаЦены = ЦенаРасчетная.ЦеновыеГруппы;
	
	Если НЕ ТЧастьЦеновыеГруппыВидаЦены.Количество() = 0 Тогда
		
		НомерСтроки = ТЧастьЦеновыеГруппыВидаЦены.Найти(ЦеноваяГруппаНоменклатуры, "ЦеноваяГруппа").НомерСтроки;
	
		АлгоритмРасчетаЦены = ТЧастьЦеновыеГруппыВидаЦены.Найти(ЦеноваяГруппаНоменклатуры, "ЦеноваяГруппа").АлгоритмРасчетаЦены;
	
		ВидБазовойЦены = ЦенаРасчетная.ВлияющиеВидыЦен.Найти(НомерСтроки, "НомерСтроки").ВлияющийВидЦен;	// Объектная сущность.
		
	Иначе
		
		АлгоритмРасчетаЦены = ЦенаРасчетная.АлгоритмРасчетаЦены;
		
		Если ЦенаРасчетная.ВлияющиеВидыЦен.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		ВидБазовойЦены = ЦенаРасчетная.ВлияющиеВидыЦен[0].ВлияющийВидЦен;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура1С);
	
	Массив = ТЧасть.НайтиСтроки(СтруктураОтбора);
	
	ЗначениеБазовойЦены = 0;
	Для Каждого Строка ИЗ Массив Цикл
		
		Если Строка.ВидЦены = ВидБазовойЦены Тогда
			ЗначениеБазовойЦены = Строка.Цена;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	АлгоритмРасчетаЦены = СтрЗаменить(АлгоритмРасчетаЦены, "[" + ВидБазовойЦены.Идентификатор + "]", Строка(ЗначениеБазовойЦены));
	
	АлгоритмРасчетаЦены = СтрЗаменить(АлгоритмРасчетаЦены, Символы.НПП, "");
	
	АлгоритмРасчетаЦены = СтрЗаменить(АлгоритмРасчетаЦены, ",", ".");
	
	ЗначениеРасчетнойЦены = Вычислить(АлгоритмРасчетаЦены);
	
	Возврат ЗначениеРасчетнойЦены;
	
КонецФункции

// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
// СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
&НаСервере
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС)

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Возврат 0.1;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Возврат 0.18;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьСтавкуНДСЧислом()

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Общего назначения.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Вопрс - Ответ: Да/Нет.
// 
&НаКлиенте
Функция ЗадатьВопросОНовомДействии(Действие, Комментарий = "")
	
	Ответ = Вопрос("" + Действие + "
		|" + Комментарий, 
		РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,  
		Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия, 
		КодВозвратаДиалога.Нет);
		
	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Удалить символы типа Символы.НПП, ПС и др. подобные, а также "двойные" пробелы из наименования.
//
&НаСервере
Функция ОчиститьОтЛишнего(Знач хЗначение)
	
	Попытка
	
		хЗначение = СтрЗаменить(хЗначение,Символы.Таб," ");		// Табуляция.
		хЗначение = СтрЗаменить(хЗначение,Символы.ВК," ");		// Возврат Каретки.
		хЗначение = СтрЗаменить(хЗначение,Символы.ВТаб," ");		// Табуляция (вертикальной).
		хЗначение = СтрЗаменить(хЗначение,Символы.НПП," ");		// Неразрывный пробел.
		хЗначение = СтрЗаменить(хЗначение,Символы.ПС," ");		// Перевод Строки.
		хЗначение = СтрЗаменить(хЗначение,Символы.ПФ," ");		// Перевод Формы (страницы).
		хЗначение = СтрЗаменить(хЗначение,"      "," ");
		хЗначение = СтрЗаменить(хЗначение,"     "," ");
		хЗначение = СтрЗаменить(хЗначение,"    "," ");
		хЗначение = СтрЗаменить(хЗначение,"   "," ");
		хЗначение = СтрЗаменить(хЗначение,"  "," ");
		хЗначение = СтрЗаменить(хЗначение," х ","х");
		хЗначение = СтрЗаменить(хЗначение," x ","x");
		хЗначение = СтрЗаменить(хЗначение," * ","*");
		хЗначение = СтрЗаменить(хЗначение," = ","=");
		хЗначение = СтрЗаменить(хЗначение," - ","-");
		хЗначение = СтрЗаменить(хЗначение," ,",",");
		хЗначение = СтрЗаменить(хЗначение," .",".");
		хЗначение = СтрЗаменить(хЗначение,"( ","(");
		хЗначение = СтрЗаменить(хЗначение," )",")");
		//хЗначение = СтрЗаменить(хЗначение,"""","");
		
		хЗначение = СокрЛП(хЗначение);
		
	Исключение
	КонецПопытки;
	
	Возврат хЗначение;
	
КонецФункции

// Поиск по Структуре.

&НаСервере
Функция НайтиВСтруктуреКлюч(хСтруктура, хКлюч)
	
	Для Каждого хЭлемент ИЗ хСтруктура Цикл
		
		Если хЭлемент.Ключ = хКлюч Тогда
			Возврат хЭлемент;
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиВСтруктуреПоЗначению(хСтруктура, хЗначение)
	
	Для Каждого хЭлемент ИЗ хСтруктура Цикл
		
		Если хЭлемент.Значение = хЗначение Тогда
			Возврат хЭлемент.Ключ;
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиЗначениеВСтруктуреВСтроковомВиде(Значение, Структура)
	
	НайденноеЗначение = Неопределено;
	Для Каждого ЭлементСТР ИЗ Структура Цикл
		Если Строка(ЭлементСТР.Значение) = Строка(Значение) Тогда
			НайденноеЗначение = ЭлементСТР.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Поиск в Массиве.

&НаСервере
Функция НайтиВМассиве(Где, Массив)
	
	Для Каждого Элемент ИЗ Массив Цикл
		Если Найти(ВРег(Где), ВРег(Элемент)) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Массив и Строка.
	
// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(СокрЛП(Стр));
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(СокрЛП(Лев(Стр, Поз - 1)));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(СокрЛП(Стр));
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(СокрЛП(Лев(Стр,Поз - 1)));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
&НаСервере
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",")
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Число.

// Используется в ОМЗаполнитьТаблицу1СНаСервере.
//
&НаСервере
Функция ПолучитьЧисло(Параметр, НомерСтроки, НаименованиеПараметра)
	
	Попытка
		Возврат Число(Параметр);
	Исключение
		//Сообщить("" + НомерСтроки + ". Получить """+ НаименованиеПараметра + """ (число) не удалось.");
		Возврат 0;
	КонецПопытки;

	Возврат 0;
	
КонецФункции

// Используется в ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗначениямКолонок.
//
&НаСервере
Функция ЭтоЧисло(Параметр)
	
	Попытка
		Число = Число(Параметр);
		Возврат Истина;
	Исключение
	КонецПопытки;

	Возврат Ложь;
	
КонецФункции

// Используется в ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗначениямКолонок.
//
&НаСервере
Функция ЧислоЦелое(Параметр)
	
	Попытка
		Число = Число(Параметр);
		Если Найти(Параметр, ".") > 0 ИЛИ Найти(Параметр, ",") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Исключение
	КонецПопытки;

	Возврат Ложь;
	
КонецФункции

// Дата.

// Используется в ОМУстановитьПараметры_ЗаполнитьТаблицуЭталон_ПоЗначениямКолонок.
//
&НаСервере
Функция ЭтоДата(Параметр)
	
	Попытка
		Дата = Дата(Параметр);
		Возврат Истина;
	Исключение
	КонецПопытки;

	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Доступность и Видимость Элементов Формы.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Определить доступность элементов формы.
// 
&НаКлиенте
Процедура ФормаОпределитьДоступнность()
	
	глФайл 													= (ЗначениеЗаполнено(Объект.ФайлИсходныхДанных) И Объект.НомерЛистаИсходныхДанных > 0);
	глТаблицаExcelКоличество 								= Объект.ТаблицаИсходныхДанных.Количество() > 0;
	глТаблицаЭталонКоличество 								= Объект.ТаблицаЭталон.Количество() > 0;
	глТаблица1СКоличество 									= Объект.Таблица1С.Количество() > 0;
	ОбъектТип												= Объект.ТипДокумента;
	глТипДокументаОпределен									= ЗначениеЗаполнено(ОбъектТип);
	глЭтоДокументПоступления								= ЭтоДокументПоступления(ОбъектТип);
	глЭтоДокументОприходования								= ЭтоДокументОприходования(ОбъектТип);
	глЭтоДокументУстановкаЦен								= ЭтоДокументУстановкаЦен(ОбъектТип);
	глКоличествоОпределеноДляДокументаПоступление			= Объект.КоличествоОпределено И глЭтоДокументПоступления;
	глКоличествоОпределеноДляДокументаОприходование			= Объект.КоличествоОпределено И глЭтоДокументОприходования;
	
	// Файл типа Excel.
	
	Элементы.ОМЗагрузитьИзФайла.Доступность 				= глФайл;
	Элементы.НомерЛистаИсходныхДанных.Доступность			= НЕ Объект.ТипСОМОбъекта = "ADODB";
	Элементы.НачальнаяСтрокаИсходныхДанных.Доступность		= глФайл;
	Элементы.КонечнаяСтрокаИсходныхДанных.Доступность		= глФайл;
	
	// Пункты меню.
	Элементы.ОМУстановитьПараметры.Доступность 				= глТаблицаExcelКоличество;
	Элементы.ОМЗаполнитьТаблицу1С.Доступность				= глТаблицаЭталонКоличество;
	Элементы.ОМОбновитьСправочники.Доступность				= глТаблица1СКоличество И ЭтоОсновноеДействиеСоздать();
	Элементы.ОМСформироватьДокументы.Доступность			= глТаблица1СКоличество И ( (ЭтоОсновноеДействиеСоздать() И Объект.СправочникиОбновлены) ИЛИ (ЭтоОсновноеДействиеИзменить() И ЗначениеЗаполнено(Объект.ДокументПоступление)) );
	
	Элементы.СтраницаПараметрыДокумент.ТолькоПросмотр		= НЕ глТаблицаЭталонКоличество;
	Элементы.СтраницаПараметрыНоменклатура.ТолькоПросмотр	= НЕ глТаблицаЭталонКоличество;
	Элементы.СтраницаПараметрыОпции.ТолькоПросмотр			= НЕ глТаблицаЭталонКоличество;
	Элементы.СтраницаПараметрыАлгоритмыПоиска.ТолькоПросмотр= НЕ глТаблицаЭталонКоличество;
	
	// Вкладка "Параметры".
	Элементы.ДокументЗаказПоставщику.Видимость				= НЕ глТипДокументаОпределен ИЛИ глЭтоДокументПоступления;
	Элементы.ДокументОснование.Видимость					= глЭтоДокументОприходования;
	Если глТипДокументаОпределен Тогда
		
		// ЛЕВО.
		
		Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр	= НЕ СтруктураПроверяемыхРеквизитов.АналитикаХозяйственнойОперации;
		Элементы.ХозяйственнаяОперация.ТолькоПросмотр		= НЕ СтруктураПроверяемыхРеквизитов.ХозяйственнаяОперация;
		Элементы.КонтрАгент.ТолькоПросмотр					= НЕ глКоличествоОпределеноДляДокументаПоступление И НЕ СтруктураПроверяемыхРеквизитов.КонтрАгент;
		Если ЭтоКонфигурацияРозница() Тогда
			Элементы.Организация.ТолькоПросмотр				= Истина;
		Иначе
			Элементы.Организация.ТолькоПросмотр				= НЕ СтруктураПроверяемыхРеквизитов.Организация;
		КонецЕсли;
		Элементы.Склад.ТолькоПросмотр						= НЕ (глКоличествоОпределеноДляДокументаПоступление ИЛИ глКоличествоОпределеноДляДокументаОприходование) И НЕ СтруктураПроверяемыхРеквизитов.Склад;
		Элементы.Подразделение.ТолькоПросмотр				= НЕ СтруктураПроверяемыхРеквизитов.Подразделение;
		Элементы.ФизическоеЛицо.ТолькоПросмотр				= НЕ СтруктураПроверяемыхРеквизитов.ФизическоеЛицо;
		
		// ПРАВО.
		
		Элементы.ДокументКорректируемый.ТолькоПросмотр		= НЕ (глЭтоДокументПоступления И ЭтоОсновноеДействиеИзменить());
		
		Если глЭтоДокументПоступления И СтруктураПроверяемыхРеквизитов.ЗаказПоставщику Тогда
			Элементы.ДокументЗаказПоставщику.ТолькоПросмотр	= НЕ глКоличествоОпределеноДляДокументаПоступление;
		Иначе
			Элементы.ДокументЗаказПоставщику.ТолькоПросмотр	= Истина;
		КонецЕсли;
		
		Элементы.ДокументЗаказПоставщику.ТолькоПросмотр 	= НЕ Объект.ИспользоватьЗаказыПоставщикам;
		
		// Оприходование, УстановкаЦен.
		Если НЕ глЭтоДокументПоступления И СтруктураПроверяемыхРеквизитов.ДокументОснование Тогда
			Элементы.ДокументОснование.ТолькоПросмотр		= НЕ глКоличествоОпределеноДляДокументаОприходование;
		Иначе	
			Элементы.ДокументОснование.ТолькоПросмотр		= Истина;
		КонецЕсли;
		
		Элементы.НалогообложениеНДС.ТолькоПросмотр			= НЕ глЭтоДокументПоступления И НЕ СтруктураПроверяемыхРеквизитов.НалогообложениеНДС;
		Элементы.УчитыватьНДС.ТолькоПросмотр				= НЕ глЭтоДокументПоступления И НЕ СтруктураПроверяемыхРеквизитов.УчитыватьНДС;
		Элементы.ЦенаВключаетНДС.ТолькоПросмотр				= НЕ глЭтоДокументПоступления И НЕ СтруктураПроверяемыхРеквизитов.ЦенаВключаетНДС;
		
		Элементы.СтатьяРасходов.ТолькоПросмотр				= НЕ СтруктураПроверяемыхРеквизитов.СтатьяРасходов;
		Элементы.СтатьяДоходов.ТолькоПросмотр				= НЕ СтруктураПроверяемыхРеквизитов.СтатьяДоходов;
		
		Элементы.ВидЦеныЗакупочная.ТолькоПросмотр			= Ложь;
		Элементы.ВидЦеныРозничная.ТолькоПросмотр			= Ложь;
		Элементы.ВидЦеныРасчетная.ТолькоПросмотр			= Ложь;
		
	КонецЕсли;
	
	// Страница Таблица 1С.
	Элементы.СтраницаТаблица1С.ТолькоПросмотр				= НЕ глТаблица1СКоличество;
	
	Если Объект.ДокументыСозданы Тогда
		Элементы.ДокументПоступление.ТолькоПросмотр				= НЕ ((Объект.ДокументыСозданы ИЛИ ЭтоОсновноеДействиеИзменить()) И ЗначениеЗаполнено(Объект.ДокументПоступление));
		Элементы.ДокументУстановкаЦены.ТолькоПросмотр			= НЕ ((Объект.ДокументыСозданы ИЛИ ЭтоОсновноеДействиеИзменить()) И ЗначениеЗаполнено(Объект.ДокументУстановкаЦены));
		Элементы.ДокументОприходование.ТолькоПросмотр			= НЕ ЗначениеЗаполнено(Объект.ДокументОприходование);
		Элементы.ДокументУстановкаСебестоимости.ТолькоПросмотр 	= НЕ ЗначениеЗаполнено(Объект.ДокументУстановкаСебестоимости);
	Иначе	
		Элементы.ДокументПоступление.ТолькоПросмотр				= Истина;
		Элементы.ДокументУстановкаЦены.ТолькоПросмотр			= Истина;
		Элементы.ДокументОприходование.ТолькоПросмотр			= Истина;
		Элементы.ДокументУстановкаСебестоимости.ТолькоПросмотр 	= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормаОпределитьДоступнностьВТаблицах()
	
	ЭтоОсновноеДействиеСоздать = ЭтоОсновноеДействиеСоздать();
	ЭтоОсновноеДействиеИзменить= ЭтоОсновноеДействиеИзменить();
		
	Элементы.Таблица1СВидНоменклатуры.Видимость 					= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СТипНоменклатуры.Видимость 					= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СХарактеристика.Видимость 						= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СХарактеристика1С.Видимость 					= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СВозможные1С.Видимость 						= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СНоменклатураПоставщика.Видимость				= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СНоменклатурнаяГруппа.Видимость 				= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СГруппаНоменклатуры.Видимость 					= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СМаркаБренд.Видимость 							= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СГруппаНоменклатуры_2.Видимость 				= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СКоллекцияСезон.Видимость 						= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СГруппаНоменклатуры_3.Видимость 				= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СЕдиницаИзмерения.Видимость 					= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СТипШтрихКода.Видимость 						= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1ССтавкаНДС.Видимость 							= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СЦеноваяГруппа.Видимость 						= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1ССтранаПроисхождения.Видимость 				= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СПроизводитель.Видимость 						= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СКоличество.Видимость 							= ЭтоОсновноеДействиеСоздать;
	Элементы.Таблица1СВес.Видимость 								= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СОписание.Видимость 							= ЭтоОсновноеДействиеСоздать;
	
	Элементы.Таблица1СКоличество.ТолькоПросмотр						= НЕ Объект.КоличествоОпределено;
	
	// Конфигурации.
	Если ЭтоКонфигурацияРозница() Тогда
		
		Элементы.Таблица1СНаборУпаковок.Видимость					= ЭтоОсновноеДействиеСоздать;		// Розница+, УТ+, КА-, БП-.
		Элементы.Таблица1СУпаковка.Видимость						= ЭтоОсновноеДействиеСоздать;		// Розница+, УТ+, КА-, БП-.
		
	ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
		
		Элементы.Таблица1СНомерГТД.Видимость						= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ+, КА+, БП+.
		Элементы.Таблица1СВестиУчетПоГТД.Видимость					= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ+, КА-, БП-.
		
		Элементы.Таблица1ССтатьяРасходов.Видимость					= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ+, КА-, БП-.
		Элементы.Таблица1СПодакцизныйТовар.Видимость				= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ+, КА-, БП-.
		
		Элементы.Таблица1СГруппаФинансовогоУчета.Видимость			= Объект.ИспользоватьГруппыФинансовогоУчета И ЭтоОсновноеДействиеСоздать;		// Розница-, УТ+, КА-, БП-.
		Элементы.Таблица1СГруппаДоступа.Видимость					= Объект.ИспользоватьГруппыДоступаНоменклатуры И ЭтоОсновноеДействиеСоздать;	// Розница-, УТ+, КА-, БП-.
		
		Элементы.Таблица1СНаборУпаковок.Видимость					= ЭтоОсновноеДействиеСоздать;		// Розница+, УТ+, КА-, БП-.
		Элементы.Таблица1СУпаковка.Видимость						= ЭтоОсновноеДействиеСоздать;		// Розница+, УТ+, КА-, БП-.
		
		Элементы.Таблица1СКачество.Видимость						= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ+, КА-, БП-.
		
	ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
		
		Элементы.Таблица1СНомерГТД.Видимость						= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП+.
		Элементы.Таблица1ССтатьяЗатрат.Видимость					= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП+.
		
	ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
		
		Элементы.Таблица1СНомерГТД.Видимость						= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП+.
		
		Элементы.Таблица1ССтатьяЗатрат.Видимость					= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП+.
	
		Элементы.Таблица1СНоменклатурнаяГруппаЗатрат.Видимость		= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП-.
		
		Элементы.Таблица1СВидВоспроизводства.Видимость				= ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП-.
		
		Элементы.Таблица1СВестиОперативныйУчетОстатковНЗП.Видимость = ЭтоОсновноеДействиеСоздать;		// Розница-, УТ-, КА+, БП-.
		
	КонецЕсли;
	
	// ТРЕБУЕМЫЕ ПРИ ИЗМЕНЕНИИ.
	Элементы.ТаблицаИсходныхДанныхСопоставлено.Видимость			= ЭтоОсновноеДействиеИзменить;

	Элементы.Таблица1СИзменить.Видимость							= ЭтоОсновноеДействиеИзменить;
	
КонецПроцедуры

// Определить доступность элементов формы.
// 
&НаКлиенте
Процедура ФормаОпределитьДоступнностьПоУмолчанию()
	
	Элементы.ОМУстановитьПараметры.Доступность 				= Истина;
	Элементы.ОМЗаполнитьТаблицу1С.Доступность				= Ложь;
	Элементы.ОМОбновитьСправочники.Доступность				= Ложь;
	Элементы.ОМСформироватьДокументы.Доступность			= Ложь;
	
	Элементы.СтраницаПараметрыДокумент.ТолькоПросмотр		= Истина;
	Элементы.СтраницаПараметрыНоменклатура.ТолькоПросмотр	= Истина;
	Элементы.СтраницаПараметрыОпции.ТолькоПросмотр			= Истина;
	Элементы.СтраницаПараметрыАлгоритмыПоиска.ТолькоПросмотр= Истина;
		
	// ЛЕВО.
	
	Элементы.ХозяйственнаяОперация.ТолькоПросмотр			= Истина;
	
	Элементы.КонтрАгент.ТолькоПросмотр						= Истина;
	Элементы.Организация.ТолькоПросмотр						= Истина;
	Элементы.Склад.ТолькоПросмотр							= Истина;
	Элементы.Подразделение.ТолькоПросмотр					= Истина;
	Элементы.ФизическоеЛицо.ТолькоПросмотр					= Истина;
	
	// ПРАВО.
	
	Элементы.ДокументКорректируемый.ТолькоПросмотр			= Истина;
	Элементы.ДокументЗаказПоставщику.ТолькоПросмотр			= Истина;
	Элементы.ДокументОснование.ТолькоПросмотр				= Истина;
	
	Элементы.НалогообложениеНДС.ТолькоПросмотр				= Истина;
	Элементы.УчитыватьНДС.ТолькоПросмотр					= Истина;
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр					= Истина;
	
	Элементы.СтатьяРасходов.ТолькоПросмотр					= Истина;
	Элементы.СтатьяДоходов.ТолькоПросмотр					= Истина;
	Элементы.СтатьяЗатрат.ТолькоПросмотр					= Истина;
	Элементы.НоменклатурнаяГруппаЗатрат.ТолькоПросмотр		= Истина;
	
	Элементы.ВидЦеныЗакупочная.ТолькоПросмотр				= Истина;
	Элементы.ВидЦеныРозничная.ТолькоПросмотр				= Истина;
	Элементы.ВидЦеныРасчетная.ТолькоПросмотр				= Истина;
	
КонецПроцедуры

// Проверить заполнение необязательных параметров для формирования таблицы "1С:Предприятие".
//
&НаСервере
Функция ПроверитьЗаполнениеПараметров()
	
	// Проверяет заполнение реквизитов. Для реквизитов, у которых свойство "Проверка заполнения" установлено в значение "Показывать ошибку" и реквизит не заполнен, будет сформировано сообщение об ошибке.
	Возврат ЭтаФорма.ПроверитьЗаполнение();
	
КонецФункции

// ЭтаФорма.ПроверитьЗаполнение().
&НаСервере
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьИСообщить(Объект.ТипДокумента						, "Объект.ТипДокумента"					, Элементы.ТипДокумента.Заголовок			, Отказ, Ложь);
	
	Если ЭтоОсновноеДействиеСоздать() Тогда			// Создать Документы.
		
		// ОТНОСЯЩЕЕСЯ К ДОКУМЕНТУ.
		
		ПроверитьИСообщить(Объект.АналитикаХозяйственнойОперации, "Объект.АналитикаХозяйственнойОперации", Элементы.АналитикаХозяйственнойОперации.Заголовок	, Отказ);
		
		ПроверитьИСообщить(Объект.ХозяйственнаяОперация			, "Объект.ХозяйственнаяОперация"		, Элементы.ХозяйственнаяОперация.Заголовок	, Отказ);
		
		ПроверитьИСообщить(Объект.КонтрАгент					, "Объект.КонтрАгент"					, Элементы.КонтрАгент.Заголовок				, Отказ);
		
		ПроверитьИСообщить(Объект.Организация					, "Объект.Организация"					, Элементы.Организация.Заголовок			, Отказ);
		
		ПроверитьИСообщить(Объект.Склад							, "Объект.Склад"						, Элементы.Склад.Заголовок					, Отказ);
		
		ПроверитьИСообщить(Объект.Магазин						, "Объект.Магазин"						, Элементы.Магазин.Заголовок				, Отказ);
		
		ПроверитьИСообщить(Объект.Подразделение					, "Объект.Подразделение"				, Элементы.Подразделение.Заголовок			, Отказ);
		
		ПроверитьИСообщить(Объект.НалогообложениеНДС			, "Объект.НалогообложениеНДС"			, Элементы.НалогообложениеНДС.Заголовок		, Отказ);
			
		Если Объект.ГруппаДоступаПроверять Тогда
			ПроверитьИСообщить(Объект.СтатьяРасходов			, "Объект.СтатьяРасходов"				, Элементы.СтатьяРасходов.Заголовок			, Отказ);
		КонецЕсли;
			
		Если Объект.ГруппаДоступаПроверять Тогда
			ПроверитьИСообщить(Объект.СтатьяДоходов				, "Объект.СтатьяДоходов"				, Элементы.СтатьяДоходов.Заголовок			, Отказ);
		КонецЕсли;
		
		// ОТНОСЯЩЕЕСЯ К НОМЕНКЛАТУРЕ.
		
		ПроверитьИСообщить(Объект.ВидЦеныЗакупочная				, "Объект.ВидЦеныЗакупочная"			, Элементы.ВидЦеныЗакупочная.Заголовок		, Отказ, Ложь);
		ПроверитьИСообщить(Объект.ВидЦеныРозничная				, "Объект.ВидЦеныРозничная"				, Элементы.ВидЦеныРозничная.Заголовок		, Отказ, Ложь);
		
		ПроверитьИСообщить(Объект.ВидНоменклатуры				, "Объект.ВидНоменклатуры"				, Элементы.ВидНоменклатуры.Заголовок		, Отказ, Ложь);
		ПроверитьИСообщить(Объект.ЕдиницаИзмерения				, "Объект.ЕдиницаИзмерения"				, Элементы.ЕдиницаИзмерения.Заголовок		, Отказ, Ложь);
		
		// Для Розницы - ПВХ, Для УТ - Срока.
		ПроверитьИСообщить(Объект.ТипШтрихКода					, "Объект.ТипШтрихКода"					, Элементы.ТипШтрихКода.Заголовок			, Отказ, Ложь);
		
		Если Объект.ИспользоватьКачествоТоваров Тогда
			ПроверитьИСообщить(Объект.Качество					, "Объект.Качество"						, Элементы.Качество.Заголовок				, Отказ, Ложь);
		КонецЕсли;
			
		ПроверитьИСообщить(Объект.СтавкаНДС						, "Объект.СтавкаНДС"					, Элементы.СтавкаНДС.Заголовок				, Отказ, Ложь);
		ПроверитьИСообщить(Объект.ГруппаНоменклатуры			, "Объект.ГруппаНоменклатуры"			, Элементы.ГруппаНоменклатуры.Заголовок		, Отказ, Ложь);
		
		Если Объект.НоменклатурнаяГруппаПроверять Тогда
			ПроверитьИСообщить(Объект.НоменклатурнаяГруппа		, "Объект.НоменклатурнаяГруппа"			, Элементы.НоменклатурнаяГруппа.Заголовок	, Отказ, Ложь);
		КонецЕсли;
		
		Если Объект.ИспользоватьЦеновыеГруппы И Объект.ЦеноваяГруппаПроверять Тогда
			ПроверитьИСообщить(Объект.ЦеноваяГруппа				, "Объект.ЦеноваяГруппа"				, Элементы.ЦеноваяГруппа.Заголовок			, Отказ, Ложь);
		КонецЕсли;
		
		Если Объект.ИспользоватьГруппыФинансовогоУчета И Объект.ГруппаФинансовогоУчетаПроверять Тогда
			ПроверитьИСообщить(Объект.ГруппаФинансовогоУчета	, "Объект.ГруппаФинансовогоУчета"		, Элементы.ГруппаФинансовогоУчета.Заголовок	, Отказ, Ложь);
		КонецЕсли;
		
		Если Объект.ГруппаДоступаПроверять Тогда
			ПроверитьИСообщить(Объект.ГруппаДоступа				, "Объект.ГруппаДоступа"				, Элементы.ГруппаДоступа.Заголовок			, Отказ, Ложь);
		КонецЕсли;
		
		Если ЭтоКонфигурацияУправлениеТорговлей() Тогда
			
			// ОТНОСЯЩЕЕСЯ К ДОКУМЕНТУ.
			
			Проверить = Ложь;
			Попытка
				Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации Тогда
					Проверить = Истина;
				КонецЕсли;
			Исключение
				Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
			
			Если Проверить И ЕстьРеквизитДокумента("ФизическоеЛицо") Тогда
				ПроверитьИСообщить(Объект.ФизическоеЛицо		, "Объект.ФизическоеЛицо"			, Элементы.ФизическоеЛицо.Заголовок			, Отказ);
			КонецЕсли;
			
		Иначе
			
			Если ЕстьРеквизитДокумента("ФизическоеЛицо") Тогда
				ПроверитьИСообщить(Объект.ФизическоеЛицо		, "Объект.ФизическоеЛицо"			, Элементы.ФизическоеЛицо.Заголовок			, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоОсновноеДействиеИзменить() Тогда	// Изменить Документы.
		
		ПроверитьИСообщить(Объект.ДокументКорректируемый		, "Объект.ДокументКорректируемый"	, Элементы.ДокументКорректируемый.Заголовок	, Отказ, Ложь);
		ПроверитьИСообщить(Объект.ВидЦеныЗакупочная				, "Объект.ВидЦеныЗакупочная"		, Элементы.ВидЦеныЗакупочная.Заголовок		, Отказ, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// ЭтаФорма.ПроверитьЗаполнение().
&НаСервере
Процедура ПроверитьИСообщить(Знач ЗначениеРеквизитаОбъекта, ИмяРеквизитаОбъекта, ЗаголовокЭлементаФормы, Отказ, ОбязательноПроверять = Истина)
	
	ПозицияТочки = Найти(ИмяРеквизитаОбъекта, ".");
	Если ПозицияТочки = 0 Тогда
		Сообщить("Короткое имя реквизита (после слова Объект) в " + ИмяРеквизитаОбъекта + " не обнаружено.");
		Возврат;
	КонецЕсли;
	
	КороткоеИмя = Сред( ИмяРеквизитаОбъекта, (ПозицияТочки+1) );
	
	Проверять = Истина;
	
	Если ОбязательноПроверять И НЕ ЕстьРеквизитДокумента(КороткоеИмя) Тогда
		Проверять = Ложь;
	КонецЕсли;
	
	Если Проверять И НЕ ЗначениеЗаполнено(ЗначениеРеквизитаОбъекта) Тогда
		СообщитьПользователю(НСтр("ru = 'Поле """ + ЗаголовокЭлементаФормы + """ не заполнено.'")	, , ИмяРеквизитаОбъекта	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
&НаСервере
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Попытка
			Сообщение.КлючДанных = КлючДанных;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

	//// Конфигурации.
	//Если ЭтоКонфигурацияРозница() Тогда
	//ИначеЕсли ЭтоКонфигурацияУправлениеТорговлей() Тогда
	//ИначеЕсли ЭтоКонфигурацияБухгалтерияПредприятия() Тогда
	//ИначеЕсли ЭтоКонфигурацияКомплекснаяАвтоматизация() Тогда
	//КонецЕсли;
	
	//// Склады.
	//Если ЭтоСкладОптовый(Объект.Склад) Тогда								// Оптовый склад.
	//ИначеЕсли ЭтоСкладРозничный(Объект.Склад) Тогда						// Розничный склад
	//ИначеЕсли ЭтоСкладНТТ(Объект.Склад) Тогда								// НТТ-Склад.
	//ИначеЕсли ЭтоСкладУправляющейСистемы(Объект.Склад) Тогда				// Склад управляющей системы.
	//КонецЕсли;
			
	//// Типы документов.
	//Если ЭтоДокументПоступления(Документ) Тогда
	//ИначеЕсли ЭтоДокументОприходования(Документ) Тогда
	//ИначеЕсли ЭтоДокументУстановкаЦен(Документ) Тогда
	//КонецЕсли;
	
