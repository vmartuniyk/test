Перем RegExp Экспорт; 
Перем СимволыЧисла, Цифры;
Перем ЗагружаемыеИзКолонки Экспорт, ЗагружаемыеИзШаблона Экспорт, ЗагружаемыеЗначение Экспорт, ЗагружаемыеИзРеквизита Экспорт, ОбязательныеПоля Экспорт;

//////Функция ПрочитатьИНайтиТовар(ТекущаяСтрока, ДанныеТовара) Экспорт
//////	Для каждого СтрПоля Из ПоляНоменклатуры Цикл
//////		Если Не ПустаяСтрока(СтрПоля.ДанныеКолонки) Тогда // задано
//////			ДанныеТовара.Вставить(СтрПоля.Реквизит, СокрЛП(ТекущаяСтрока[СтрПоля.ДанныеКолонки]));
//////		КонецЕсли;
//////	КонецЦикла; 
//////КонецФункции // ()


//////Функция СчитатьИзКолонки(Стр, ИмяКолонки) Экспорт
//////	СтрПоля = ПоляНоменклатуры.Строки.Найти(ИмяКолонки, "Реквизит");
//////	Если Не ПустаяСтрока(СтрПоля.ДанныеКолонки) Тогда // задана СтранаПроисхождения
//////		Возврат НайтиСтавкуНДС(СтрПоля.ДанныеКолонки);
//////	Иначе
//////		Возврат "";
//////	КонецЕсли;
//////КонецФункции // СчитатьИзКолонки()

// требуется только для способа загрузки "из колонки", поэтому выдаёт истину, только если среди дочерних
// есть заполненные "из колокни"
Функция СтрокаКЗагрузкеНастроена(ДанныеСтроки, ПроверятьТолькоИзКолонки=Ложь) Экспорт
	Если НЕ ПроверятьТолькоИзКолонки И Найти("из реквизита, значение", ДанныеСтроки.СпособЗагрузки) > 0 Тогда
		Возврат ЗначениеЗаполнено(ДанныеСтроки.Значение);
	ИначеЕсли ДанныеСтроки.СпособЗагрузки = "из колонки" Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.ДанныеКолонки) Тогда
			Возврат Истина;
		Иначе
			Для каждого Стр Из ДанныеСтроки.Строки Цикл
				Если ДанныеСтроки.СпособЗагрузки = "из колонки" И ЗначениеЗаполнено(Стр.ДанныеКолонки) Тогда
					Возврат Истина;
				КонецЕсли;
				Если СтрокаКЗагрузкеНастроена(Стр, Истина) Тогда
					Возврат Истина;
				КонецЕсли; 
			КонецЦикла; 
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Ложь;
КонецФункции // СредиДочернихЕстьЗаполненные(ДанныеСтроки)


// добавим кэширующие колонки
Процедура ДобавитьКэширующиеКолонки(Таблица) Экспорт
	Для каждого СтрПоля Из ПоляНоменклатуры.Строки Цикл
		Если ТипЗнч(СтрПоля.Метаданные) = Тип("Строка") И Найти(СтрПоля.Метаданные, ".Справочники.")>0 Тогда // Группа подчинённых
			Для каждого ПодСтрПоля Из СтрПоля.Строки Цикл
				Если Таблица.Колонки.Найти(ПодСтрПоля.Реквизит) = Неопределено Тогда
					Таблица.Колонки.Добавить(ПодСтрПоля.Реквизит);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 


Функция ЗаполнитьДокумент(ДокументОбъект, ИмяТЧ, Таблица, РежимЗаполнения="Очистить") Экспорт
// теперь блок, специфичный для УстановкаЦенНоменклатуры
	Если ДокументОбъект.Метаданные().Имя="УстановкаЦенНоменклатуры"  Тогда
		ИмяТЧ = "Товары"
	КонецЕсли; 
	
	ДобавитьКэширующиеКолонки(Таблица);
	
	Если РежимЗаполнения="Очистить" Тогда
		ДокументОбъект[ИмяТЧ].Очистить();
	ИначеЕсли РежимЗаполнения="Обнулить" Тогда
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТЧ] Цикл
			СтрокаТабличнойЧасти.Количество = 0;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СуммаРегл") <> Неопределено Тогда
				СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.Сумма;
				//= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
				//					мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
			КонецЕсли; 
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
// теперь блок, специфичный для УстановкаЦенНоменклатуры
// добавим типы цен в документ
	Если ДокументОбъект.Метаданные().Имя="УстановкаЦенНоменклатуры" Тогда
		Для каждого Стр Из ПоляНоменклатуры Цикл
			Если ТипЗнч(Стр.Метаданные)=Тип("СправочникСсылка.ТипыЦенНоменклатуры") И ЗначениеЗаполнено(Стр.ДанныеКолонки) Тогда
				Если ДокументОбъект.ТипыЦен.Найти(Стр.Метаданные)=Неопределено Тогда
					НовСтр = ДокументОбъект.ТипыЦен.Добавить();
					НовСтр.ТипЦен = Стр.Метаданные;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
	ПоляТовары = ПоляНоменклатуры.Строки.Найти("<Товары>", "Реквизит");
	Если ПоляТовары = Неопределено Тогда
		Предупреждение("Выберите тип документа для загрузки!");
		Возврат Ложь
	КонецЕсли; 
	
	НеНайдены = Ложь;
	Для каждого Стр Из Таблица Цикл
		Цена = 0;
		Количество = 0;
		
		СпрНом = Стр._Номенклатура;
		
		Если РежимЗаполнения="Очистить" Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = ДокументОбъект[ИмяТЧ].Найти(СпрНом.Ссылка, "Номенклатура");
		КонецЕсли; 
		
		Если СтрокаТабличнойЧасти=Неопределено Тогда
			СтрокаТабличнойЧасти = ДокументОбъект[ИмяТЧ].Добавить();
			СтрокаТабличнойЧасти.Номенклатура = СпрНом.Ссылка;
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("Коэффициент") <> Неопределено Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("Качество") <> Неопределено Тогда
				СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			
			Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
//				СтрокаТабличнойЧасти.СтавкаНДС = СчитатьИзКолонки(Стр, "СтавкаНДС");
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли; 
			КонецЕсли;

			////Если ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("СерийныеНомера")<>Неопределено Тогда
			////	Если Метаданные.ОбщиеМодули.Найти("УчетСерийныхНомеров")<>Неопределено Тогда
			////		Выполнить("УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ДокументОбъект)");
			////	КонецЕсли;
			////КонецЕсли; 
			
			////Если Метаданные.Константы.Найти("ИспользоватьСерииНоменклатуры")<>Неопределено
			////	И Константы.ИспользоватьСерииНоменклатуры.Получить()
			////	И СпрНом.ВестиУчетПоСериям
			////	И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", ДокументОбъект.Метаданные(), ИмяТЧ) Тогда
			////		СтранаПроисхождения = СчитатьИзКолонки(Стр, "СтранаПроисхождения");
			////		НомерГТД = СчитатьИзКолонки(Стр, "НомерГТД");
			////	СтрокаТабличнойЧасти.СерияНоменклатуры = НайтиСоздатьСерию(СтрокаТабличнойЧасти.Номенклатура, СтранаПроисхождения, НомерГТД);
			////КонецЕсли;
			
		КонецЕсли; 
		

			//СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

		Для каждого СтрПоля Из ПоляТовары.Строки Цикл
			Если СтрПоля.Реквизит = "Номенклатура" Тогда
				Продолжить // уже присвоена
			КонецЕсли; 
			ТекЗначение = Неопределено;
			Если СтрПоля.СпособЗагрузки = "значение" Тогда
				ТекЗначение = СтрПоля.Значение
			ИначеЕсли СтрПоля.СпособЗагрузки = "из колонки" И ЗначениеЗаполнено(СтрПоля.ДанныеКолонки) Тогда
			    ТекЗначение = ПолучитьРеквизитИзТекста(СтрПоля, Стр[СтрПоля.ДанныеКолонки]);
			ИначеЕсли СтрПоля.СпособЗагрузки = "из реквизита" Тогда
// вот здесь может быть как реквизит номенклатуры, так и, например, элемент подчинённого спр.
				ОписаниеРеквизита = ПоляНоменклатуры.Строки.Найти(СтрПоля.Значение, "Реквизит", Истина);
				Если ОписаниеРеквизита.Родитель<>Неопределено И ТипЗнч(ОписаниеРеквизита.Родитель.Метаданные)=Тип("Строка") Тогда // это подчинённый справочник
					ТекЗначение = Стр[СтрПоля.Значение];
				Иначе
					ТекЗначение = СпрНом[СтрПоля.Значение];
				КонецЕсли; 
			КонецЕсли;
			Если СтрПоля.Реквизит = "Количество" Тогда
				Если РежимЗаполнения="Добавить" Тогда
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ТекЗначение;
				Иначе
					СтрокаТабличнойЧасти.Количество = ТекЗначение;
				КонецЕсли
			Иначе
				СтрокаТабличнойЧасти[СтрПоля.Реквизит] = ТекЗначение;
			КонецЕсли; 
		КонецЦикла;
		
		
		////// Рассчитываем реквизиты табличной части.
		////ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		////
		////Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", ДокументОбъект.Метаданные(), ИмяТЧ) Тогда
		////	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		////КонецЕсли;
		////

		// сумма
		//////СтрРекв = ПоляНоменклатуры.Строки.Найти("Сумма", "Реквизит");
		//////Если ЗначениеЗаполнено(СтрРекв.ДанныеКолонки) И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", ДокументОбъект.Метаданные(), ИмяТЧ) Тогда // задана сумма
		//////	Сумма = ПрочитатьЧисло(Стр, "Сумма");
		//////	СтрокаТабличнойЧасти.Сумма = Сумма;
		//////	Если СтрокаТабличнойЧасти.Количество>0 Тогда
		//////		// Выполнить общие действия для всех документов при изменении Суммы.
		//////		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));

		//////		// Рассчитать реквизиты табличной части.
		//////		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", ДокументОбъект.Метаданные(), ИмяТЧ) Тогда
		//////			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		//////		КонецЕсли;
		//////	КонецЕсли; 
		//////КонецЕсли;

		
		// цена
		Если ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("Цена") <> Неопределено Тогда // задана цена
			Если СтрокаТабличнойЧасти.Цена=0 Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ЭтотОбъект.ТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения);//,
								 //Валюта = Неопределено, Курс = 0, Кратность = 1, ПроцентСкидкиНаценки = 0, ДоговорКонтрагента = Неопределено, УсловиеПродаж = Неопределено)			
			КонецЕсли; 
							 
			////Если СтрокаТабличнойЧасти.Количество>0 Тогда
			////	
			////	// Рассчитать реквизиты табличной части.
			////	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", ДокументОбъект.Метаданные(), ИмяТЧ) Тогда
			////		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			////	КонецЕсли;
			////	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", ДокументОбъект.Метаданные(), ИмяТЧ) Тогда
			////		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			////	КонецЕсли;
			////КонецЕсли;
		КонецЕсли;
		
		
// теперь блок, специфичный для УстановкаЦенНоменклатуры
		Если ДокументОбъект.Метаданные().Имя="УстановкаЦенНоменклатуры" Тогда
			Для каждого ТЦ Из ДокументОбъект.ТипыЦен Цикл
				//Кол = Неопределено;
				//Колонки.Свойство("_ТипЦен_"+ТЦ.ТипЦен.Код, Кол);
				//Если ТипЗнч(Кол) = Тип("КолонкаТабличногоПоля") Тогда
					Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипЦен) ИЛИ СтрокаТабличнойЧасти.ТипЦен = ТЦ.ТипЦен Тогда
						СтрокаТабличнойЧасти.ТипЦен = ТЦ.ТипЦен;
						ТекСтрока = СтрокаТабличнойЧасти;
					Иначе
						МассСтрок = ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("Номенклатура,ТипЦен", СпрНом.Ссылка, ТЦ.ТипЦен));
						Если МассСтрок.Количество()>0 Тогда
							ТекСтрока = МассСтрок[0]
						Иначе
							ТекСтрока = ДокументОбъект[ИмяТЧ].Добавить();
							ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаТабличнойЧасти);
							ТекСтрока.ТипЦен = ТЦ.ТипЦен;
						КонецЕсли;
					КонецЕсли; 
					СтрПоля = ПоляНоменклатуры.Строки.Найти(ТЦ.ТипЦен, "Метаданные");
					ТекСтрока.Цена = ПолучитьРеквизитИзТекста(СтрПоля, Стр[СтрПоля.ДанныеКолонки]);
					ТекСтрока.Валюта = СтрПоля.Значение;
					ТекСтрока.ЕдиницаИзмерения = ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков;
//				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если НеНайдены Тогда
		Предупреждение("Сначала загрузите новую номенклатуру в справочник! Или используйте кнопку ""Найти"" для установки соответствия");
		Возврат Ложь
	КонецЕсли; 
	Возврат Истина
КонецФункции


// содрано из документа поступления
////////Процедура ОпределитьКатегориюНоменклатуры(СтрокаТабличнойЧасти)
////////		  		
////////	ОтборКатегорий = Новый Структура("Объект", СтрокаТабличнойЧасти.Номенклатура);	
////////		   
////////	ВыборкаКатегорий = РегистрыСведений.КатегорииОбъектов.Выбрать(ОтборКатегорий);
////////	
////////	ВыборкаКатегорий.Следующий();

////////	Если ВыборкаКатегорий.Категория <> Неопределено Тогда
////////			
////////		СтрокаТабличнойЧасти.Категория = ВыборкаКатегорий.Категория;
////////		
////////	Иначе
////////		
////////		СтрокаТабличнойЧасти.Категория = Справочники.КатегорииОбъектов.ПустаяСсылка();
////////		
////////	КонецЕсли;				
////////				
////////КонецПроцедуры

////////Процедура ОпределитьСегментНоменклатуры(СтрокаТабличнойЧасти)
////////		  		
////////	Попытка
////////		
////////		СтрокаТабличнойЧасти.Сегмент = СтрокаТабличнойЧасти.Номенклатура.Родитель;;
////////		
////////	Исключение
////////		
////////	КонецПопытки;
////////					
////////КонецПроцедуры


////////Функция НайтиСоздатьГТД(НомерГТД) Экспорт
////////	Спр = Справочники.НомераГТД.НайтиПоКоду(НомерГТД);
////////	Если Спр=Неопределено ИЛИ НомерГТД="--" Тогда
////////		Возврат Справочники.НомераГТД.ПустаяСсылка()
////////	ИначеЕсли Спр.Пустая() Тогда
////////		СпрОб = Справочники.НомераГТД.СоздатьЭлемент();
////////		СпрОб.Код = СокрЛП(НомерГТД);
////////		СпрОб.Записать();
////////		Возврат СпрОб.Ссылка;
////////	Иначе
////////		Возврат Спр.Ссылка;
////////	КонецЕсли; 
////////КонецФункции

////////Функция НайтиСоздатьСтрану(СтранаПроисхождения) Экспорт
////////	Если ПустаяСтрока(СтранаПроисхождения) ИЛИ СтранаПроисхождения="--" Тогда
////////		Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка()
////////	КонецЕсли; 
////////	Спр = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(СтранаПроисхождения, Истина);
////////	
////////	Макет = Справочники.КлассификаторСтранМира.ПолучитьМакет("КлассификаторСтранМира");
////////	Яч = Макет.НайтиТекст(СтранаПроисхождения, ,Макет.Область("НаименованиеКраткое"),,Истина,,Истина);
////////	СтрокаИзМакета = Новый Структура;
////////	Если Яч <> Неопределено Тогда
////////		СтрокаИзМакета.Вставить("Код", Макет.Область(Яч.Верх, 2).Текст);
////////		СтрокаИзМакета.Вставить("Наименование", Макет.Область(Яч.Верх, 3).Текст);
////////		СтрокаИзМакета.Вставить("КодАльфа2", Макет.Область(Яч.Верх, 4).Текст);
////////		СтрокаИзМакета.Вставить("НаименованиеПолное", Макет.Область(Яч.Верх, 6).Текст);
////////	КонецЕсли;

////////	Если Спр.Пустая() Тогда
////////		СпрОб = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
////////		Если Яч = Неопределено Тогда
////////			Сообщить("Не найдена страна: "+СтранаПроисхождения);
////////			Возврат Справочники.КлассификаторСтранМира.ПустаяСсылка()
////////		Иначе
////////			ЗаполнитьЗначенияСвойств(СпрОб, СтрокаИзМакета);
////////			СпрОб.ОбменДанными.Загрузка = Истина;
////////			СпрОб.Записать();
////////			Возврат СпрОб.Ссылка;
////////		КонецЕсли; 
////////	Иначе
////////		Если Яч <> Неопределено И (СтрокаИзМакета.Код<>Спр.Код ИЛИ СтрокаИзМакета.Наименование<>Спр.Наименование ИЛИ СтрокаИзМакета.КодАльфа2<>Спр.КодАльфа2 ИЛИ СтрокаИзМакета.НаименованиеПолное<>Спр.НаименованиеПолное) Тогда
////////			СпрОб = Спр.ПолучитьОбъект();
////////			ЗаполнитьЗначенияСвойств(СпрОб, СтрокаИзМакета);
////////			СпрОб.ОбменДанными.Загрузка = Истина;
////////			СпрОб.Записать();
////////		КонецЕсли; 
////////		Возврат Спр.Ссылка;
////////	КонецЕсли; 
////////КонецФункции // НайтиСоздатьСтрану(ДанныеТовара.СтранаПроисхождения);
//////// 
////////Функция НайтиСоздатьСерию(Номенклатура, стрСтранаПроисхождения,  стрНомерГТД) Экспорт
////////	
////////	Если ТипЗнч(стрСтранаПроисхождения) = Тип("СправочникСсылка.КлассификаторСтранМира") Тогда
////////		СтранаПроисхождения = стрСтранаПроисхождения;
////////	Иначе
////////		СтранаПроисхождения = НайтиСоздатьСтрану(стрСтранаПроисхождения);
////////	КонецЕсли;
////////	Если ТипЗнч(стрНомерГТД) = Тип("СправочникСсылка.НомераГТД") Тогда
////////		НомерГТД = стрНомерГТД;
////////	Иначе
////////		НомерГТД = НайтиСоздатьГТД(стрНомерГТД);
////////	КонецЕсли;
////////	
////////	Если СтранаПроисхождения.Пустая() И НомерГТД.Пустая() Тогда
////////		Возврат Справочники.СерииНоменклатуры.ПустаяСсылка();
////////	КонецЕсли; 
////////	Запрос = Новый Запрос(
////////		"ВЫБРАТЬ
////////		|	СерииНоменклатуры.Ссылка
////////		|ИЗ
////////		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
////////		|ГДЕ
////////		|	СерииНоменклатуры.Владелец = &Владелец
////////		|	И СерииНоменклатуры.НомерГТД = &НомерГТД
////////		|	И СерииНоменклатуры.СтранаПроисхождения = &СтранаПроисхождения");
////////	Запрос.УстановитьПараметр("Владелец", Номенклатура);
////////	Запрос.УстановитьПараметр("НомерГТД", НомерГТД);
////////	Запрос.УстановитьПараметр("СтранаПроисхождения", СтранаПроисхождения);
////////	Выборка = Запрос.Выполнить().Выбрать();
////////	Если Выборка.Следующий() Тогда
////////		Возврат Выборка.Ссылка
////////	Иначе
////////		СпрОб = Справочники.СерииНоменклатуры.СоздатьЭлемент();
////////		СпрОб.Владелец = Номенклатура;
////////		СпрОб.НомерГТД = НомерГТД;
////////		СпрОб.СтранаПроисхождения = СтранаПроисхождения;
////////		СпрОб.УстановитьНовыйКод();
////////		СпрОб.Наименование = СпрОб.СформироватьНаименование();
////////		СпрОб.Записать();
////////		Возврат СпрОб.Ссылка;
////////	КонецЕсли; 
////////КонецФункции // НайтиСоздатьСерию(Номенклатура, ДанныеТовара)



Функция НайтиСтавкуНДС(Ставка) Экспорт
	Если ПустаяСтрока(Ставка) Тогда
		Возврат Неопределено
	КонецЕсли; 
	
	Если НРег(Лев(Ставка, 3))="без" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС
	Иначе
		Возврат Вычислить("Перечисления.СтавкиНДС.НДС"+ПреобразоватьТекстВЧисло(Ставка));
	КонецЕсли;
КонецФункции // НайтиСтавкуНДС()
 

Процедура Инициализировать(ДокументОбъект, ИмяТЧ, ТабличноеПоле) Экспорт

	ВариантЗаполнения = Новый СписокЗначений;
	ВариантЗаполнения.Добавить("Очистить", "Очистить табличную часть и заполнить.");
	ВариантЗаполнения.Добавить("Добавить", "Дополнить новыми позициями. У существующих добавить количество.");
	ВариантЗаполнения.Добавить("Заменить", "Дополнить новыми позициями. У существующих заменить количество.");
	ВариантЗаполнения.Добавить("Обнулить", "Обнулить колонку количество и дополнить");
	Эл = ВариантЗаполнения.ВыбратьЭлемент();
	Если Эл<>Неопределено Тогда
		Форма = ЭтотОбъект.ПолучитьФорму();
		Форма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(Форма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗагрузитьДокумент);
		ТаблицаДанных = Форма.ОткрытьМодально();
		Если ТаблицаДанных = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ЗаполнитьДокумент(ДокументОбъект, ИмяТЧ, ТаблицаДанных, Эл.Значение);
	КонецЕсли; 
КонецПроцедуры

Функция ПреобразоватьТекстВЧисло(Текст) Экспорт
	ТолькоЧисло = "";
	Для ц=1 По СтрДлина(Текст) Цикл
		Симв = Сред(Текст,ц,1);
		Если Найти(СимволыЧисла, Симв)>0 Тогда // числовой символ
			ТолькоЧисло = ТолькоЧисло + Симв;
		КонецЕсли; 
	КонецЦикла;
	Если ПустаяСтрока(ТолькоЧисло) Тогда
		Возврат Неопределено
	Иначе
		Возврат Число(ТолькоЧисло)
	КонецЕсли; 
КонецФункции // ()

// читает число по внутреннему имени колонки ( F1, F2, и т.д.)
Функция ПрочитатьЧислоF(СтрокаТаблицы, ИмяКолонки) Экспорт
	Возврат ПреобразоватьТекстВЧисло(СтрокаТаблицы[ИмяКолонки])
КонецФункции // ПрочитатьЧислоF()

// читает число по назначенному имени колонки ( Цена, СуммаНДС, и т.д.)
Функция ПрочитатьЧисло(СтрокаТаблицы, НазначенноеИмяКолонки) Экспорт
	СтрПоля = ПоляНоменклатуры.Строки.Найти(НазначенноеИмяКолонки, "Реквизит");
	Возврат ПрочитатьЧислоF(СтрокаТаблицы, СтрПоля.ДанныеКолонки)
КонецФункции // ПрочитатьЧисло()

Функция ПреобразоватьТекстВДату(Текст) Экспорт
Перем Части; // число, месяц
	Части = Новый Массив(2);
	ТекЧасть = 0;
	ТолькоЧисло = "";
	Для ц=1 По СтрДлина(Текст) Цикл
		Симв = Сред(Текст,ц,1);
		Если Найти(Цифры, Симв)>0 Тогда // числовой символ
			ТолькоЧисло = ТолькоЧисло + Симв;
		Иначе
			Если ТекЧасть>1 Тогда
				Прервать
			КонецЕсли; 
			Части[ТекЧасть] = ТолькоЧисло;
			ТолькоЧисло = "";
			ТекЧасть = ТекЧасть+1;
		КонецЕсли; 
	КонецЦикла;
	Год = Число(ТолькоЧисло);
	Если Год<100 Тогда
		Если Год<43 Тогда
			Год = Год + 2000;
		Иначе
			Год = Год + 1900;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Дата(Год, Части[1], Части[0])
КонецФункции // ПреобразоватьТекстВДату()
 

Функция НайтиСоздатьЗначениеИзТекста(Текст, ТипЗначения, Владелец = Неопределено)
	СокрТекст = СокрЛП(Текст);
	Если ТипЗначения = Тип("Число") Тогда
		Возврат ПреобразоватьТекстВЧисло(СокрТекст)
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Возврат СокрТекст
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Возврат Булево(СокрТекст)
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Возврат ПреобразоватьТекстВДату(СокрТекст)
	Иначе
		Мет = Метаданные.НайтиПоТипу(ТипЗначения);
		Если Метаданные.Справочники.Содержит(Мет) Тогда
			Если Мет.Имя = "ХранилищеДополнительнойИнформации" Тогда // особый случай
				Возврат Неопределено;
			КонецЕсли;
			
			Менеджер = Справочники[Мет.Имя];
			
			Если Мет.ДлинаНаименования = 0 Тогда
				СпрСсылка = Менеджер.НайтиПоКоду(СокрТекст, Ложь,, Владелец);
			Иначе
				СпрСсылка = Менеджер.НайтиПоНаименованию(СокрТекст, Истина,, Владелец);
			КонецЕсли;
			
			Если СпрСсылка.Пустая() Тогда
				СпрОбъ = Менеджер.СоздатьЭлемент();
				Если Мет.ДлинаНаименования = 0 Тогда
					СпрОбъ.Код = СокрТекст;
				Иначе
					СпрОбъ.Наименование = СокрТекст;
				КонецЕсли;
				
				Если Мет.Владельцы.Количество()>0 Тогда
					СпрОбъ.Владелец = Владелец;
				КонецЕсли; 
				СпрОбъ.ОбменДанными.Загрузка = Истина;
				СпрОбъ.Записать();
				СпрСсылка = СпрОбъ.Ссылка;
			КонецЕсли; 
			Возврат СпрСсылка
		ИначеЕсли Метаданные.Перечисления.Содержит(Мет) Тогда
// сначала поищем по синониму
			Для каждого МетЗн Из Метаданные.Перечисления[Мет.Имя].ЗначенияПеречисления Цикл
				Если МетЗн.Синоним = СокрТекст Тогда
					Возврат Перечисления[Мет.Имя][МетЗн.Имя]
				КонецЕсли; 
			КонецЦикла;
// Потом поищем по имени /значению
			Если Метаданные.Перечисления[Мет.Имя].ЗначенияПеречисления.Найти(СокрТекст)<>Неопределено Тогда
				Возврат Перечисления[Мет.Имя][СокрТекст]
			КонецЕсли;
// если не удалось, попробуем дуболомными методами
			Если Мет.Имя = "СтавкиНДС" Тогда
				Возврат НайтиСтавкуНДС(СокрТекст);
			КонецЕсли
		КонецЕсли;
	КонецЕсли; 
КонецФункции // ()
 

//***********************************************************************

// Работа с таблицей полей номенклатуры

Функция ПолучитьИмяЗаданнойКолонки(ИмяРеквизита) Экспорт
	СтрПоля = ПоляНоменклатуры.Строки.Найти(ИмяРеквизита, "Реквизит");
	Возврат СтрПоля.ДанныеКолонки
КонецФункции // ()

Функция ПолучитьНаименованиеРеквизита(СтрокаПолей) Экспорт
	Если Лев(СтрокаПолей.Реквизит, 1)="<" Тогда
		Возврат СтрокаПолей.Реквизит
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("Структура") // Наименование, Код, 
		ИЛИ Найти("Родитель, Владелец", СтрокаПолей.Реквизит)>0 Тогда // Родитель, Владелец, колонки документа (Цена, Количество, Сумма)
		Возврат СтрокаПолей.Реквизит
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		Возврат СтрокаПолей.Метаданные.Наименование;
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		Возврат СтрокаПолей.Реквизит;
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные.Родитель()) = Тип("ОбъектМетаданных") Тогда // это чей-то реквизит, найдём описание типа
		Возврат СтрокаПолей.Метаданные.Синоним 
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные.Родитель()) = Тип("ОбъектМетаданныхКонфигурация") Тогда // это сам объект
		Возврат СтрокаПолей.Реквизит
	Иначе
		ВызватьИсключение "Нет такого типа!"
	КонецЕсли; 
КонецФункции // ПолучитьНаименованиеСтроки()
 
Функция ПолучитьРеквизитИзТекста(СтрокаПолей, Текст) Экспорт
	Если ПустаяСтрока(Текст) Тогда
		Возврат Неопределено
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		Возврат НайтиСоздатьЗначениеИзТекста(Текст, СтрокаПолей.Метаданные.ТипЗначения.Типы()[0], СтрокаПолей.Метаданные);
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("СправочникСсылка.ТипыЦенНоменклатуры") 
			ИЛИ ТипЗнч(СтрокаПолей.Метаданные)=Тип("Строка") Тогда // Это колонки для документа
		Возврат ПреобразоватьТекстВЧисло(Текст);
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("ОбъектМетаданных") Тогда // обычные реквизиты
		Возврат НайтиСоздатьЗначениеИзТекста(Текст, СтрокаПолей.Метаданные.Тип.Типы()[0]);
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("Структура") Тогда // наименование, Код, колонки документа (Цена, Количество, Сумма)
		Возврат НайтиСоздатьЗначениеИзТекста(Текст, СтрокаПолей.Метаданные.Тип.Типы()[0])
	Иначе
		ВызватьИсключение "Нет такого типа!"
	КонецЕсли; 
КонецФункции // ()

Функция ПолучитьРеквизитИзНоменклатуры(СтрокаПолей, Номенклатура) Экспорт
	Если ТипЗнч(СтрокаПолей.Метаданные)=Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Значение
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Объект = &Объект
			|	И ЗначенияСвойствОбъектов.Свойство = &Свойство");
		Запрос.УстановитьПараметр("Объект", Номенклатура);
		Запрос.УстановитьПараметр("Свойство", СтрокаПолей.Метаданные);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		// это вряд ли...
		//Возврат ТекущаяСтрока.Реквизит;
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("ОбъектМетаданных") Тогда // обычные реквизиты
		Возврат Номенклатура[СтрокаПолей.Реквизит]
	ИначеЕсли ТипЗнч(СтрокаПолей.Метаданные)=Тип("Структура") Тогда // наименование, Код
		Если Не СтрокаПолей.Метаданные.Свойство("РеквизитДокумента") Тогда
			Возврат Номенклатура[СтрокаПолей.Реквизит]
		КонецЕсли; 
	Иначе
		ВызватьИсключение "Нет такого типа!"
	КонецЕсли; 
КонецФункции // ()

Функция ПолучитьРеквизитДочерних(ОбъНом, СтрокаПолей, СтрокаДанных, Владелец = Неопределено) Экспорт
	СтруктураПоиска = Новый Структура;
	СтруктураРеквизитов = Новый Структура; //Соответствие; с соответствием не работает ЗаполнитьЗначенияСвойств, далее внизу....
	Для каждого Стр Из СтрокаПолей.Строки Цикл
		Если Стр.Строки.Количество()>0 Тогда
			ТекЗначение = ПолучитьРеквизитДочерних(ОбъНом, Стр, СтрокаДанных, Владелец)
		Иначе
			Если Стр.СпособЗагрузки = "значение" И ЗначениеЗаполнено(Стр.Значение) Тогда
				ТекЗначение = Стр.Значение
			ИначеЕсли ЗначениеЗаполнено(Стр.ДанныеКолонки) Тогда
				ТекЗначение = ПолучитьРеквизитИзТекста(Стр, СтрокаДанных[Стр.ДанныеКолонки]);
			ИначеЕсли Стр.СпособЗагрузки = "из реквизита" Тогда
				Если Лев(Стр.Значение, 1) = "<" Тогда
					Ключ = Сред(Стр.Значение,2,СтрДлина(Стр.Значение)-2);
					Если Не ОбъНом.ДополнительныеСвойства.Свойство(Ключ, ТекЗначение) Тогда
						ВызватьИсключение "не найден реквизит "+Стр.Значение
					КонецЕсли; 
				Иначе
					ТекЗначение = ОбъНом[Стр.Значение];
				КонецЕсли; 
			Иначе
				ТекЗначение = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТекЗначение <> Неопределено Тогда
			СтруктураРеквизитов.Вставить(Стр.Реквизит, ТекЗначение);
			Если Стр.Поиск Тогда
				СтруктураПоиска.Вставить(Стр.Реквизит, ТекЗначение);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	// теперь поищем по сформированным данным
	Если СтруктураПоиска.Количество()=0 Тогда
		Возврат Неопределено
	ИначеЕсли Метаданные.РегистрыСведений.Найти("Штрихкоды")<>Неопределено И СтрокаПолей.Метаданные = Метаданные.РегистрыСведений.Штрихкоды Тогда
		Возврат СтруктураРеквизитов;
	Иначе
		Если Найти(СтрокаПолей.Метаданные.ПолноеИмя(), ".Реквизит."+СтрокаПолей.Реквизит)>0 Тогда // реквизит объекта
			Мета = Метаданные.НайтиПоТипу(СтрокаПолей.Метаданные.Тип.Типы()[0]);
		Иначе // объект (например справочник)
			Мета = СтрокаПолей.Метаданные;
		КонецЕсли; 
		Если Мета.Владельцы.Содержит(Метаданные.Справочники.Номенклатура) Тогда
			СтруктураРеквизитов.Вставить("Владелец", Владелец);
			СтруктураПоиска.Вставить("Владелец", Владелец); // если владелец есть - ищем всегда
		КонецЕсли;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	ИСТИНА");
		Для каждого КиЗ Из СтруктураПоиска Цикл
			Запрос.Текст = Запрос.Текст + " И Номенклатура."+КиЗ.Ключ+"=&"+КиЗ.Ключ;
			Запрос.УстановитьПараметр(КиЗ.Ключ, КиЗ.Значение);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Номенклатура", "Справочник."+Мета.Имя);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Ссылка = Выборка.Ссылка
		Иначе
			//Спр = Новый (СтрокаПолей.Метаданные.Тип.Типы()[0]);
			Спр = Справочники[Мета.Имя];
			Если СтрокаПолей.Реквизит="Родитель" Тогда
				СпрОбъ = Спр.СоздатьГруппу();
			Иначе
				СпрОбъ = Спр.СоздатьЭлемент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СпрОбъ, СтруктураРеквизитов);
			СпрОбъ.ОбменДанными.Загрузка = Истина;
			СпрОбъ.Записать();
			Ссылка = СпрОбъ.Ссылка;
			Если Мета.ДлинаКода>0 И Не ЗначениеЗаполнено(СпрОбъ.Код) Тогда
				СпрОбъ.УстановитьНовыйКод();
				СпрОбъ.Записать();
			КонецЕсли; 
		КонецЕсли;
		Возврат Ссылка
	КонецЕсли; 
КонецФункции

Процедура ЗаполнитьЗначенияВКолонкеСтрок(Строки, ИмяКолонки, Значение, ВключаяДочерние=Истина) Экспорт
	Для каждого Стр Из Строки Цикл
		Стр[ИмяКолонки] = Значение;
		Если ВключаяДочерние Тогда
			ЗаполнитьЗначенияВКолонкеСтрок(Стр.Строки, ИмяКолонки, Значение, ВключаяДочерние=Истина)
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
 

Процедура ЗаполнитьЗначенияВКолонке(Строки, ИмяКолонки, Значение, ВключаяДочерние=Истина) Экспорт
	ЗаполнитьЗначенияВКолонкеСтрок(Строки, ИмяКолонки, Значение, ВключаяДочерние=Истина)
КонецПроцедуры

// добавляет строку в настройки загрузки полей. Заполняет способ загрузки по умолчанию
Функция _ДобавитьСтроку(Строки, Реквизит, Метаданные, СпособЗагрузки = Неопределено, Поиск=Ложь) Экспорт
	НовСтр = Строки.Добавить();
	НовСтр.Реквизит = Реквизит;
	НовСтр.Метаданные = Метаданные;
	НовСтр.СпособЗагрузки = СпособЗагрузки;
	НовСтр.Поиск = Поиск;
	
// проставим СпособЗагрузки по-умолчанию для верхнего уровня
	Если СпособЗагрузки=Неопределено Тогда // это бывает на верхнем уровне дерева!
		Если Найти(ЗагружаемыеИзКолонки, Реквизит)>0 Тогда
			НовСтр.СпособЗагрузки = "из колонки";
		ИначеЕсли Найти(ЗагружаемыеИзШаблона, Реквизит)>0 Тогда
			НовСтр.СпособЗагрузки = "из шаблона";
		ИначеЕсли Найти(ЗагружаемыеЗначение, Реквизит)>0 Тогда
			НовСтр.СпособЗагрузки = "значение";
		ИначеЕсли Найти(ЗагружаемыеИзРеквизита, Реквизит)>0 Тогда
			НовСтр.СпособЗагрузки = "из реквизита";
			Поз = Найти(ЗагружаемыеИзРеквизита, Реквизит+"-");
			Подстр = Сред(ЗагружаемыеИзРеквизита, Поз+СтрДлина(Реквизит+"-"));
			Поз = Найти(Подстр, Символы.ПС);
			Если Поз=0 Тогда
				Поз=СтрДлина(Подстр+1);
			КонецЕсли; 
			НовСтр.Значение = Лев(Подстр, Поз-1);
		Иначе
			НовСтр.СпособЗагрузки = "не использовать";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НовСтр;
КонецФункции // ()

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция _НайтиДобавитьСтроку(Строки, Реквизит, Метаданные, СпособЗагрузки = Неопределено, Поиск=Ложь, ВеткиКУдалению=Неопределено) Экспорт
	НовСтр = Строки.Найти(Реквизит, "Реквизит");
	Если НовСтр = Неопределено Тогда
		НовСтр = _ДобавитьСтроку(Строки, Реквизит, Метаданные, СпособЗагрузки, Поиск);
	ИначеЕсли ТипЗнч(ВеткиКУдалению)=Тип("Соответствие") Тогда
		ВеткиКУдалению.Удалить(НовСтр);
	КонецЕсли;
	Возврат НовСтр;
КонецФункции // НайтиДобавитьСтроку()
 

// добавляет элемент из группы подчинённого справочника либо штрихкодов.
// например в группу "Серии номенклатуры" добавляет последовательно элементы "Серии номенклатуры 1", "Серии номенклатуры 2" и т.д. . 
Функция ДобавитьЭлемент(ТекСтрока) Экспорт
	Род = ?(ТекСтрока.Уровень() = 0, ТекСтрока, ТекСтрока.Родитель);
	ИмяБезНомера = Сред(Род.Реквизит, 2, СтрДлина(Род.Реквизит)-2);
// нет!!! сделаем здесь имя без пробелов!
	ИмяБезНомера = Вычислить(Род.Метаданные).Имя;
	МаксНомер = 0;
	Для каждого Стр Из Род.Строки Цикл
		ТекНомер = Число(Сред(Стр.Реквизит, СтрДлина(ИмяБезНомера)+1));
		Если ТекНомер > МаксНомер Тогда
			МаксНомер = ТекНомер;
		КонецЕсли; 
	КонецЦикла;
	НовСтр = _ДобавитьСтроку(Род.Строки, ИмяБезНомера+(МаксНомер+1), Вычислить(Род.Метаданные), "из колонки");
	Если НовСтр.СпособЗагрузки = "из колонки" Тогда
		ЗаполнитьСтрокиВетки(НовСтр, НовСтр.Метаданные, Истина, НовСтр.Уровень());
	КонецЕсли;
	Возврат НовСтр;
КонецФункции



Процедура ЗаполнитьСтрокиВетки(Строка, Мета, ВключаяДочерние=Истина, Уровень=0) Экспорт
	Если Уровень>4 Тогда // защита от зацикливания
		Возврат
	КонецЕсли; 
	
	Если ТипЗнч(Мета)=Тип("Строка") Тогда // это группа верхнего уровня. Надо создать подэлемент.
		ДобавитьЭлемент(Строка);
		Возврат
	КонецЕсли; 

	
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда // а если это сам корень дерева, то не надо.
		СпособЗагрузки = Строка.СпособЗагрузки;
		Поиск = Истина;
	Иначе
		СпособЗагрузки = Неопределено;
		Поиск = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Мета)=Тип("Структура") 
		ИЛИ (ТипЗнч(Мета) = Тип("ОбъектМетаданных")
		И ТипЗнч(Мета.Родитель()) = Тип("ОбъектМетаданных") // подчинённый реквизит
		И НЕ Найти(Мета.ПолноеИмя(), "ТабличнаяЧасть.Товары")+СтрДлина("ТабличнаяЧасть.Товары")-1 = СтрДлина(Мета.ПолноеИмя())  ) // но не табличная часть
			Тогда // это чей-то реквизит, найдём описание типа
		МетОбъекта = Метаданные.НайтиПоТипу(Мета.Тип.Типы()[0]);
	ИначеЕсли ТипЗнч(Мета) = Тип("ОбъектМетаданных") Тогда // это сам объект!
		МетОбъекта = Мета;
	КонецЕсли;
	
	Если МетОбъекта = Неопределено Тогда // например это был реквизит Количество, у него нет метаданных
		Возврат
	КонецЕсли;
	
// запомним все подчинённые ветки и будем их пересоздавать по мере необходимости.
// лишние потом удалим
	СтарыеВетки = Новый Соответствие;
    Для каждого Ветка Из Строка.Строки Цикл
		СтарыеВетки.Вставить(Ветка);
	КонецЦикла; 
	
	Если Метаданные.Справочники.Содержит(МетОбъекта) Тогда
		Для каждого Мет Из МетОбъекта.Реквизиты Цикл
			МетРеквизита = Метаданные.НайтиПоТипу(Мет.Тип.Типы()[0]);
			Если МетРеквизита=Неопределено // скаляр
					ИЛИ НЕ Метаданные.Справочники.Содержит(МетРеквизита) // не справочник
					ИЛИ МетРеквизита.Владельцы.Количество()=0 // не является подчинённым
					ИЛИ МетРеквизита.Владельцы.Содержит(МетОбъекта) // является подчинённым текущему справочнику
					ИЛИ МетРеквизита.Владельцы.Содержит(Метаданные.Справочники.Номенклатура) Тогда // является подчинённым номенклатуре
					
				Если (ТипЗнч(Строка) = Тип("ДеревоЗначений") И Мет.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					 ИЛИ (Строка.Реквизит = "Родитель" И Мет.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ (Строка.Реквизит <> "Родитель" И Мет.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					
					НовСтр = _НайтиДобавитьСтроку(Строка.Строки, Мет.Имя, Мет, СпособЗагрузки, Поиск, СтарыеВетки);
					Если НовСтр.СпособЗагрузки = "из колонки" И МетРеквизита<>Неопределено И Метаданные.Справочники.Содержит(МетРеквизита) Тогда //  справочник
						Если ВключаяДочерние Тогда
							ЗаполнитьСтрокиВетки(НовСтр, МетРеквизита, ВключаяДочерние, Уровень+1);
						Иначе
							НовСтр.Строки.Добавить(); // добавим пустую строку, чтоб можно было плюсик раскрывать
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;

		// таблица реквизитов
		Если МетОбъекта.ДлинаНаименования>0 Тогда
			НовСтр = _НайтиДобавитьСтроку(Строка.Строки, "Наименование", 
				Новый Структура("Тип", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Метаданные.Справочники.Номенклатура.ДлинаНаименования))),
				СпособЗагрузки, Поиск, СтарыеВетки);
		КонецЕсли; 
			
		Если МетОбъекта.Иерархический Тогда
			НовСтр = _НайтиДобавитьСтроку(Строка.Строки, "Родитель", 
				Новый Структура("Тип", Новый ОписаниеТипов("СправочникСсылка."+МетОбъекта.Имя)),
				СпособЗагрузки, Поиск, СтарыеВетки);
		КонецЕсли; 
			
		//////Если МетОбъекта.Владельцы.Количество()>0 Тогда
		//////	НовСтр = _НайтиДобавитьСтроку(Строка.Строки, "Владелец", 
		//////		Новый Структура("Тип", Новый ОписаниеТипов("СправочникСсылка.Номенклатура")),
		//////		СпособЗагрузки, Поиск, СтарыеВетки);
		//////КонецЕсли; 
			
		Если МетОбъекта.ДлинаКода>0 Тогда
			Если МетОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				_Мета = Новый Структура("Тип", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(МетОбъекта.ДлинаКода,0)));
			Иначе
				_Мета = Новый Структура("Тип", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(МетОбъекта.ДлинаКода)));
			КонецЕсли; 
			НовСтр = _НайтиДобавитьСтроку(Строка.Строки, "Код", _Мета , СпособЗагрузки, Поиск, СтарыеВетки);
		КонецЕсли;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетОбъекта) Тогда
		Если Метаданные.РегистрыСведений.Найти("ЦеныНоменклатуры")<>Неопределено И МетОбъекта = Метаданные.РегистрыСведений.ЦеныНоменклатуры Тогда // особый случай
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ТипыЦенНоменклатуры.Ссылка,
				|	ТипыЦенНоменклатуры.Наименование,
				|	ТипыЦенНоменклатуры.ВалютаЦены
				|ИЗ
				|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
				|ГДЕ
				|	(НЕ ТипыЦенНоменклатуры.ПометкаУдаления)
				|	И (НЕ ТипыЦенНоменклатуры.Рассчитывается)");
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НовСтр = _НайтиДобавитьСтроку(Строка.Строки, "Цена """+Выборка.Наименование+"""", Выборка.Ссылка , СпособЗагрузки, Поиск, СтарыеВетки);
				НовСтр.Значение = Выборка.ВалютаЦены;
			КонецЦикла;
		Иначе
			Для каждого Мет Из МетОбъекта.Измерения Цикл
				МетРеквизита = Метаданные.НайтиПоТипу(Мет.Тип.Типы()[0]);
				Если МетРеквизита=Неопределено // скаляр
					ИЛИ НЕ Метаданные.Справочники.Содержит(МетРеквизита) // не справочник
					ИЛИ МетРеквизита.Владельцы.Количество()=0 // не является подчинённым
					ИЛИ МетРеквизита.Владельцы.Содержит(Метаданные.Справочники.Номенклатура) Тогда // является подчинённым номенклатуре
					
					НовСтр = _НайтиДобавитьСтроку(Строка.Строки, Мет.Имя, Мет, СпособЗагрузки, Поиск, СтарыеВетки);
					Если Мет.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
						НовСтр.СпособЗагрузки = "из реквизита";
						НовСтр.Значение = "<Номенклатура>";
					ИначеЕсли НовСтр.СпособЗагрузки = "из колонки" И МетРеквизита<>Неопределено И Метаданные.Справочники.Содержит(МетРеквизита) Тогда //  справочник
						Если ВключаяДочерние Тогда
							ЗаполнитьСтрокиВетки(НовСтр, МетРеквизита, ВключаяДочерние, Уровень+1);
						Иначе
							НовСтр.Строки.Добавить(); // добавим пустую строку, чтоб можно было плюсик раскрывать
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов")<>Неопределено И Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов = МетОбъекта Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СвойстваОбъектов.Ссылка,
			|	СвойстваОбъектов.ТипЗначения,
			|	СвойстваОбъектов.Наименование
			|ИЗ
			|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
			|ГДЕ
			|	СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
			|	И (НЕ СвойстваОбъектов.ПометкаУдаления)");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр = _НайтиДобавитьСтроку(Строка.Строки, Выборка.Наименование, Выборка.Ссылка , СпособЗагрузки, Поиск, СтарыеВетки);
			
			МетСвойства = Метаданные.НайтиПоТипу(Выборка.ТипЗначения.Типы()[0]);
			Если НовСтр.СпособЗагрузки = "из колонки" И МетСвойства <> Неопределено И МетСвойства.Имя<>"ЗначенияСвойствОбъектов" Тогда // Тип-ссылка. Для Справочника ЗначенияСвойствОбъектов упрощаем. Там строго по наименованию
				ЗаполнитьСтрокиВетки(НовСтр, МетСвойства);
			КонецЕсли;
		КонецЦикла;

	Иначе
		Возврат;
	КонецЕсли; 
	
// зачистим лишниее ветки
	Для каждого КиЗ Из СтарыеВетки Цикл
		Строка.Строки.Удалить(КиЗ.Ключ);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьДерево(ДеревоПриёмник, ДеревоИсточник, ПоискПо, Исключая="") Экспорт
	Для каждого Стр Из ДеревоПриёмник.Строки Цикл
		СтрОбразец = ДеревоИсточник.Строки.Найти(Стр.Реквизит, ПоискПо);
		Если СтрОбразец<>Неопределено Тогда // идёт разработка, поля могут меняться, и св старых сохранёнках их может не оказаться
			ЗаполнитьЗначенияСвойств(Стр, СтрОбразец,,Исключая+",Родитель,Строки");
			Если Стр.СпособЗагрузки = "из колонки" Тогда
//				Если Стр.Строки.Количество()=0 Тогда  // тогда надо создать подстроки
					ЗаполнитьСтрокиВетки(Стр, Стр.Метаданные);
//				КонецЕсли; 
				ЗаполнитьДерево(Стр, СтрОбразец, ПоискПо, Исключая);
			Иначе
				Стр.Строки.Очистить();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
 


RegExp = Новый COMОбъект("VBScript.RegExp");
RegExp.IgnoreCase = Истина; //Игнорировать регистр
RegExp.Global = Истина; //Поиск всех вхождений шаблона
RegExp.MultiLine = Истина; //Многострочный режим

Цифры = "09123456789";
СимволыЧисла = "09123456789,.";

ЗагружаемыеИзРеквизита = СтрЗаменить("НаименованиеПолное-Наименование,НаименованиеПоставщика-Наименование", ",", Символы.ПС);
ОбязательныеПоля = СтрЗаменить("Наименование,ВидНоменклатуры,СтавкаНДС,БазоваяЕдиницаИзмерения,", ",", Символы.ПС);
ЗагружаемыеИзШаблона = "";

Если Истина Тогда
	ЗагружаемыеЗначение = СтрЗаменить("ВидНоменклатуры,СтавкаНДС,БазоваяЕдиницаИзмерения,Родитель", ",", Символы.ПС);
	ЗагружаемыеИзКолонки = СтрЗаменить("НоменклатурнаяГруппа,Цена,Количество,Сумма,Код,Артикул,Наименование,СтавкаНДС,НомерГТД,СтранаПроисхождения,ОсновноеИзображение,<Свойства>,<Цены>", ",", Символы.ПС);
ИначеЕсли "Алексей"="Алексей" Тогда
	ЗагружаемыеЗначение = СтрЗаменить("ВидНоменклатуры,СтавкаНДС,БазоваяЕдиницаИзмерения,Родитель", ",", Символы.ПС);
	ЗагружаемыеИзКолонки = СтрЗаменить("НоменклатурнаяГруппа,Цена,Количество,Сумма,Код,Артикул,Наименование,НомерГТД,СтранаПроисхождения,<Свойства>,<Цены>", ",", Символы.ПС);
ИначеЕсли "Максим"="Максим" Тогда
	ЗагружаемыеИзКолонки = СтрЗаменить("Цена,Количество,Сумма,Артикул,Наименование,НомерГТД,СтавкаНДС,СтранаПроисхождения,ОсновноеИзображение,<Цены>", ",", Символы.ПС);
	ЗагружаемыеЗначение = "Родитель,ОсновнойПоставщик";
	ЗагружаемыеИзШаблона = СтрЗаменить("ВидНоменклатуры,СтавкаНДС,БазоваяЕдиницаИзмерения,<Категории>,<Свойства>", ",", Символы.ПС);
КонецЕсли; 
