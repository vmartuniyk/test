Перем ДействиеНазначитьИмяКолонке, КартинкиСчитаны, ТипВсеСсылки;


Процедура ПутьКФайлуНачалоВыбора(Элемент, СтандартнаяОбработка)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКФайлу;
	ДиалогОткрытияФайла.Фильтр = "Excel(*.xls),dBase(*.dbf)|*.xls;*.dbf|Excel(*.xls)|*.xls|dBase(*.dbf)|*.dbf|Все файлы|*.*";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Если ПоляНоменклатуры.Строки.Количество()=0 Тогда // для первого раза
			ЗаполнитьПоляНоменклатурыИПоиска();
		КонецЕсли; 

		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ПолучитьЛистыКниги();
		ПолучитьДанныеТаблицы();
		
		ПоляПоиска.Очистить();
		нКолонкаЛишнихСтрок = "";
		нКолонкаАртикула = "";
		СкрытьНеназначенные = Ложь;
		нНайтиВБазе = Ложь;
		Контрагент = Неопределено;
		//ТипДокумента
		
		УстановитьДоступностьНаШаге(1);
	КонецЕсли;
КонецПроцедуры

Функция СтрокаПодключения(ТипФайла="", ИмяФайла = "")
	Файл = Новый Файл(ПутьКФайлу);
	ТипФайла = Прав(НРег(Файл.Расширение),СтрДлина(Файл.Расширение)-1);
	ИмяФайла = Файл.ИмяБезРасширения;
	Если ТипФайла="xls" Тогда
		флХедер = 0; // в первой строке будут не данные для заголовков (если флХедер=1, то имена полей будут взяты из первой строки таблицы)
	//db.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+НазваниеФайла+";Extended Properties=""Excel 8.0;HDR=NO; IMEX=1;""";
	//HDR=NO - Имена полей имеют вид "F1, F2, F3..." то-есть буква "F" и порядковый номер колонки. Если данный параметр опустить
	// имена полей берутся из первой строки - для таблиц Экселя норма.
		Возврат "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ПутьКФайлу+";Extended Properties=""Excel 8.0;"+?(флХедер=1,"","HDR=NO;")+"IMEX=1;""";
	ИначеЕсли ТипФайла="dbf" Тогда
		Возврат "Provider=VFPOLEDB.1;Data Source=" + ПутьКФайлу + ";Mode=Read;Extended Properties="";User ID="";Password="";Mask Password=False;Collating Sequence=RUSSIAN;DSN=""";
		Возврат "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=277;Dbq="""+ПутьКФайлу+""";";
		Возврат "Driver={Microsoft Visual FoxPro Driver};SourceType=DBF;SourceDB="+ПутьКФайлу+";Exclusive=No;Collate=Machine;NULL=NO;DELETED=NO;BACKGROUNDFETCH=NO";
	Иначе
		ВызватьИсключение("Не поддерживаемый формат данных: "+ТипФайла);
	КонецЕсли; 
КонецФункции // СтрокаПодключения()

Процедура ПолучитьЛистыКниги()
Перем ТипФайла, ИмяФайла;
	
	db = Новый COMОбъект("ADODB.Connection");
	db.ConnectionString = СтрокаПодключения(ТипФайла, ИмяФайла);
	db.Open();
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = db;
	
	ЭлементыФормы.ЛистКниги.СписокВыбора.Очистить();
	
	Для iCount = 0 По Catalog.Tables.Count-1 Цикл
		Если Catalog.Tables.Item(iCount).Type <> "VIEW" Тогда
			ЭлементыФормы.ЛистКниги.СписокВыбора.Добавить(Catalog.Tables.Item(iCount).Name);
		КонецЕсли;
	КонецЦикла;
	db.Close();
	db = "";
	
	// Если лист всего лишь один - то выберем его, иначе - дадим возможность выбора
	Если ЭлементыФормы.ЛистКниги.СписокВыбора.Количество() = 1 Тогда
		ЭлементыФормы.ЛистКниги.Значение = ЭлементыФормы.ЛистКниги.СписокВыбора[0].Значение; // в книге всего один лист - сделаем его текущим
	ИначеЕсли ЭлементыФормы.ЛистКниги.СписокВыбора.Количество()> 1 Тогда
		Если ТипФайла = "dbf" Тогда
			ЭлементыФормы.ЛистКниги.Значение = НРег(ИмяФайла);
		Иначе
			ЭлементыФормы.ЛистКниги.Значение = ЭлементыФормы.ЛистКниги.СписокВыбора[0].Значение; // чаще всего данные на первом листе - установим его текущим
		КонецЕсли;
		ЭлементыФормы.ЛистКниги.Доступность = Истина;
	Иначе 
		Сообщить("В книге Excel не обнаружено ни одного листа!");
	КонецЕсли;

КонецПроцедуры


// Загрузка данных с листа Excel;
// Установка списка полей для сопоставления
Процедура ПолучитьДанныеТаблицы()
	
	ИмяТаблицы = ЭлементыФормы.ЛистКниги.Значение;
	
	db= Новый COMОбъект("ADODB.Connection");
	rs= Новый COMОбъект("ADODB.Recordset");
	db.ConnectionString = СтрокаПодключения();
	db.Open();
	//rs.ActiveConnection = db;
	//rs.CursorType = 3;
	//rs.LockType = 2;
	//rs.Source = "Select * from ["+ИмяТаблицы+"]";
	//rs.Open();
	rs.Open("Select * from ["+ИмяТаблицы+"]", db, 2, 3);//adOpenDynamic, adLockOptimistic

	// Инициализируем колонки
	
	rs_Fields_Count = rs.Fields.Count;
	тзДанных =  Новый ТаблицаЗначений;
	Для iCount = 1 По rs_Fields_Count Цикл
		ИмяКолонки = rs.Fields.Item(iCount-1).Name;
		тзДанных.Колонки.Добавить(ИмяКолонки,,ИмяКолонки,15);
	КонецЦикла;

	// Перебор данных
// ╒══════════════ Ушаков С.И. 3 мая 2012 г. ════════════════╕
	rs.MoveFirst();                 
	
	//Пока rs.EOF() = 0 Цикл
	//	НовСтр = тзДанных.Добавить();
	//	Для iCount = 0 По rs_Fields_Count-1 Цикл
	//		НовСтр[iCount] = rs.Fields(iCount).Value;
	//	КонецЦикла;
	//  rs.MoveNext();
	//КонецЦикла;
	
// ускорение в 3.5 раза
	МассивДанныхCOM = rs.GetRows( , , );

	КолвоПолей = МассивДанныхCOM.GetLength(1);
	КолвоСтрок = МассивДанныхCOM.GetLength(0);

	МассивДанных = МассивДанныхCOM.Выгрузить();

	М2 = Новый Массив(КолвоПолей, КолвоСтрок);

	Для ТекСтр = 0 По КолвоСтрок-1 Цикл Для ТекПоле = 0 По КолвоПолей-1 Цикл М2[ТекПоле][ТекСтр] = МассивДанных[ТекСтр].Получить(ТекПоле); КонецЦикла; тзДанных.Добавить() КонецЦикла; 

	Для ТекПоле = 0 По КолвоПолей-1 Цикл
		тзДанных.ЗагрузитьКолонку(М2[ТекПоле], ТекПоле);
	КонецЦикла;
  // ╘══════════════ Ушаков С.И. 3 мая 2012 г. ════════════════╛
    
	Таблица = тзДанных;
	ЭлементыФормы.Таблица.СоздатьКолонки();
	Для каждого Кол Из ЭлементыФормы.Таблица.Колонки Цикл
		Кол.Формат = "ЧГ=0";
		Кол.ЭлементУправления.Формат = "ЧГ=0"; // не срабатывает, ну и фиг с ним!
	КонецЦикла; 
	
	rs.Close();
	db.Close();
	db = "";
	rs = "";
	
	КартинкиСчитаны = Ложь;
	Если флСчитыватьКартинки Тогда
		ПрочитатьКартинки()
	КонецЕсли;
	ПоляПоиска.Очистить();
	
	ЗаполнитьЗначенияВКолонке(ПоляНоменклатуры.Строки, "ДанныеКолонки", Неопределено);
	ЗаполнитьМенюКолонок();
КонецПроцедуры

Процедура ПрочитатьКартинки()
	Попытка 
		ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.КомментарийЗначения = "";
		ФормаПрогрессора.КомментарийОбработкиДанных = "Запускаем Excel";
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка изображений из Excel";
		ФормаПрогрессора.Открыть();
		
// откроем
		Excel     = Новый COMОбъект ("Excel.Application");
		WorkBook= Excel.Workbooks.Open(ПутьКФайлу, , True);
		Sheet     = WorkBook.Worksheets(1);//Предполагаем, что картинки на первом листе.    
		
		ФормаПрогрессора.КомментарийОбработкиДанных = "Загружаем картинку";
		ФормаПрогрессора.МаксимальноеЗначение = Sheet.Pictures.Count;
		
// поработаем
//		Для Каждого Img Из Sheet.Pictures Цикл
////		 		Таблица[Img.TopLeftCell.Row-1][Img.TopLeftCell.Column-1] = Img.name;
//			НовИмя = КаталогВременныхФайлов()+Img.name+".png";
//			
//			str = Sheet.Name;
//			Img.Select();
//			//pixH = Excel.Selection.Height;
//			//pixW = Excel.Selection.Width;
//			Excel.Selection.ShapeRange.ScaleWidth(1,1); // 100%
//			Excel.Selection.ShapeRange.ScaleHeight(1,1); //100%
//			pixH = Excel.Selection.ShapeRange.Height;
//			pixW = Excel.Selection.ShapeRange.Width;
//			
//			Excel.Selection.Copy();
//			Chart = Excel.Charts.Add();
//			 
//			Excel.ActiveChart.Location(2,str);
//			 
//			ExACName = Excel.ActiveChart.Name;
//			ExACName = СокрЛП(СтрЗаменить(ExACName, str, ""));
//			//Excel.ActiveChart.Height = pixH;
//			//Excel.ActiveChart.Width = pixW;
//			Excel.ActiveSheet.Shapes(ExACName).Height = pixH;
//			Excel.ActiveSheet.Shapes(ExACName).Width = pixW;
//			//Excel.ActiveChart.ChartArea.Height = pixH;
//			//Excel.ActiveChart.ChartArea.Width = pixW;
//			
//			Excel.ActiveChart.Paste();
////			Excel.ActiveChart.Select();
////			Excel.Selection.Borders.LineStyle = 0;
////			Excel.ActiveSheet.Shapes(ExACName).Borders.LineStyle = 0;
//			Excel.ActiveChart.ChartArea.Border.LineStyle = 0;
//			
//			Excel.ActiveChart.Export(НовИмя, "png");
//			Excel.ActiveSheet.Shapes(ExACName).Delete();
////			Excel.ActiveSheet.Shapes(Excel.ActiveChart).Delete();

//			Картинка = Новый Картинка(НовИмя);
//			Таблица[Img.TopLeftCell.Row-1]["F"+Img.TopLeftCell.Column] = Картинка;
//			
//			ФормаПрогрессора.Значение = Img.Index;
//			ФормаПрогрессора.КомментарийЗначения = "Картинка " + Img.Name;
//		  КонецЦикла;    
		  
//П = Новый COMОбъект("Paint.Picture");

		ц = 1;
//				Workbooks.Add
				Excel.Workbooks.Add();
Для Каждого oObj Из Sheet.Shapes Цикл
//	Сообщить(oObj.Width); Прервать;
//			If oObj.Type = 13 Then
				//'13 – картинки
				//'1 – автофигуры
				//'3 – диаграммы
			Если oObj.Type = 13 Тогда
				НовИмя = КаталогВременныхФайлов()+oObj.name+".jpg";
				
				oObj.ScaleWidth(1,1); // 100%
				oObj.ScaleHeight(1,1); //100%
				pixH = oObj.Height;
				pixW = oObj.Width;
			
				oObj.Copy();
				Chart = Excel.ActiveSheet.ChartObjects().Add(0, 0, oObj.Width, oObj.Height).Chart();
				Chart.ChartArea.Border.LineStyle = 0;
//				Chart.Border.LineStyle = 0;
				
//				Excel.ActiveSheet.Paste();
				Chart.Paste();
				
				newShape = Chart.Shapes(1);
				newShape.Placement = 2; //xlMove
				newShape.LockAspectRatio = 0; // msoFalse
				newShape.Top = 0;
				newShape.Left = 0;
				newShape.Height = oObj.Height;
				newShape.Width = oObj.Width;
				Chart.Export(НовИмя);
				
				Картинка = Новый Картинка(НовИмя);
				Таблица[oObj.TopLeftCell.Row-1]["F"+oObj.TopLeftCell.Column] = Картинка;
				
				ФормаПрогрессора.Значение = ц; ц = ц+1;
				ФормаПрогрессора.КомментарийЗначения = "Картинка " + oObj.Name;
				//Excel.Save();
				//Прервать;
			КонецЕсли;
		КонецЦикла;

		
// Блин!!!! 3-я версия!
//		Для Каждого Img Из Sheet.Pictures Цикл
////		 		Таблица[Img.TopLeftCell.Row-1][Img.TopLeftCell.Column-1] = Img.name;
//			НовИмя = КаталогВременныхФайлов()+Img.name+".jpg";
//			Img.Copy();
//			
////clip = Новый  COMОбъект("IClipboard");
////clip.GetFromClipBoard();
////Dim clip As System.Windows.Forms.Clipboard
////Dim idata As System.Windows.Forms.IDataObject = clip.GetDataObject
////idata = Новый COMОбъект("IDataObject");
////Dim stream As IO.MemoryStream
////stream = idata.GetData("JFIF")
////Dim f As New IO.FileStream("f:\test.jpg", IO.FileMode.Create)
////stream.WriteTo(f)
////f.Close()
////			
////			str = Sheet.Name;
////			Img.Select();
////			pixH = Excel.Selection.Height;
////			pixW = Excel.Selection.Width;
////			Excel.Selection.Copy();
////			Chart = Excel.Charts.Add();
////			 
////			Excel.ActiveChart.Location(2,str);
////			 
////			ExACName = Excel.ActiveChart.Name;
////			ExACName = СокрЛП(СтрЗаменить(ExACName, str, ""));
////			Excel.ActiveSheet.Shapes(ExACName).Height = pixH * 1.001;
////			Excel.ActiveSheet.Shapes(ExACName).Width = pixW * 1.001;         
////			Excel.ActiveChart.Paste();          
////			Excel.ActiveChart.Export(НовИмя, "jpg");         
////			Excel.ActiveSheet.Shapes(ExACName).Delete();

////			Картинка = Новый Картинка(НовИмя);
////			Таблица[Img.TopLeftCell.Row-1]["F"+Img.TopLeftCell.Column] = Картинка;
//			
//			ФормаПрогрессора.Значение = Img.Index;
//			ФормаПрогрессора.КомментарийЗначения = "Картинка " + Img.Name;
//		  КонецЦикла;    
//		  
		  
// Блин!!!! 4-я версия!
//		Для Каждого Img Из Sheet.Pictures Цикл
////		 		Таблица[Img.TopLeftCell.Row-1][Img.TopLeftCell.Column-1] = Img.name;
//			НовИмя = КаталогВременныхФайлов()+Img.name+".jpg";
//			Img.Copy();
//		Library = Новый COMОбъект("DynamicWrapper");   
//		Library.Register ("USER32.DLL", "OpenClipboard", "i=l", "f=s", "r=l");   
//		Library.Register ("USER32.DLL", "GetClipboardData", "i=l", "f=s", "r=l");   
//		Library.Register ("USER32.DLL", "CloseClipboard", "f=s", "r=l");   
//		Library.Register ("kernel32", "lstrcpy", "i=rl", "f=s", "r=l");   
//		Library.Register ("kernel32", "GlobalLock", "i=l", "f=s", "r=l");   
//		Library.Register ("kernel32", "GlobalSize", "i=l", "f=s", "r=l");   
//		Library.Register ("kernel32", "GlobalUnlock", "i=l", "f=s", "r=l"); 
//		CF_TEXT = 1; 
//		CF_BITMAP = 2; 
//		CF_METAFILEPICT = 3; 
//		CF_SYLK = 4; 
//		CF_DIF = 5; 
//		CF_TIFF = 6; 
//		CF_OEMTEXT = 7; 
//		CF_DIB = 8; 
//		CF_PALETTE = 9; 
//		CF_PENDATA = 10; 
//		CF_RIFF = 11; 
//		CF_WAVE = 12 ; 
//		CF_UNICODETEXT = 13; 
//		CF_ENHMETAFILE = 14; 
//		CF_HDROP = 15; 
//		CF_LOCALE = 16; 
//		CF_MAX = 17; 
//		RetVal = Library.OpenClipboard(Неопределено); 
//		Для Ст=1 По 17 Цикл 
//			hClipMemory =  Library.GetClipboardData(Ст); 
//			lSize = Library.GlobalSize(hClipMemory); 
//			Сообщить(Строка(Ст)+"  " + Строка(lSize)); 
//		КонецЦикла; 
//		hClipMemory =  Library.GetClipboardData(CF_ENHMETAFILE); 
//		lpClipMemory = Library.GlobalLock(hClipMemory); 
//		MyString=""; 
//		Для Ст=0 По 5000 Цикл 
//			MyString=MyString+"          ";
//		КонецЦикла; 
//		RetVal = Library.lstrcpy(MyString, hClipMemory);
//		RetVal = Library.GlobalUnlock(hClipMemory); 
//		//MyString = Mid(MyString, 1, InStr(1, MyString, Chr$, 0) - 1) 
//		
//		Хранилище = Новый ХранилищеЗначения(lpClipMemory);
//		Картинка = Хранилище.Получить(); //Новый Картинка(Новый ДвоичныеДанные());
//		RetVal = Library.GlobalUnlock(hClipMemory); 
//		
//		RetVal = Library.CloseClipboard();
//			ФормаПрогрессора.Значение = Img.Index;
//			ФормаПрогрессора.КомментарийЗначения = "Картинка " + Img.Name;
//		  КонецЦикла;    
		  

		
// теперь закроем
		Excel.DisplayAlerts = 0;
		WorkBook.Close();
		Excel.Quit();
		Sheet        = Неопределено;
		WorkBook    = Неопределено;
		Excel        = Неопределено;
		КартинкиСчитаны = Истина;
	Исключение
		ФормаПрогрессора.Закрыть();
		Сообщить("Произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Сообщить("     Загрузка картинок невозможна!");
	КонецПопытки;
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
КонецПроцедуры



Процедура ЗаполнитьМенюКолонок()
// надо бы оптимизировать, а то долго перестраивается меню.
// Потом.
	ц = ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.Количество()-1;
	Пока ц>=0 Цикл
		Кн = ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки[ц];
		Если Лев(Кн.Имя,1)="_" Тогда
			ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.Удалить(ц)
		КонецЕсли; 
		ц = ц - 1
	КонецЦикла; 
	
	//Для каждого Стр Из ПоляНоменклатуры.Строки Цикл
	//	Если Стр.СпособЗагрузки = "из колонки" И ПустаяСтрока(Стр.ДанныеКолонки) Тогда
	//		Кн = ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.Найти("_"+Стр.Реквизит); // это, вроде лишнее
	//		Если Кн = Неопределено Тогда
	//			ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.Добавить("_"+Стр.Реквизит, ТипКнопкиКоманднойПанели.Действие, "<"+ПолучитьНаименованиеРеквизита(Стр)+">", ДействиеНазначитьИмяКолонке);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЦикла; 
	ЗаполнитьПодменюНазначенияКолонок(ПоляНоменклатуры.Строки, ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки)
КонецПроцедуры

Функция ЗаполнитьПодменюНазначенияКолонок(Строки, Кнопки, ПолноеИмя="", ПолноеНаименование="")
//	ЕстьНазначение = Ложь;
	Для каждого Стр Из Строки Цикл
		ПолноеИмяСтроки = ?(ПолноеИмя="", Стр.Реквизит, ПолноеИмя+"."+Стр.Реквизит);
		НаименованиеРеквизита = ПолучитьНаименованиеРеквизита(Стр);
		ПолноеНаименованиеСтроки = ?(ПолноеНаименование="", НаименованиеРеквизита, ПолноеНаименование+"."+НаименованиеРеквизита);
		Если Стр.СпособЗагрузки = "из колонки" Тогда
			ЕстьНазначениеУПодчинённых = Ложь;
			Кн = Кнопки.Найти("_"+Стр.Реквизит); // это, вроде лишнее
			Если Кн = Неопределено Тогда
				Если Стр.Строки.Количество()>0 Тогда
					Кн = Кнопки.Добавить("_"+СтрЗаменить(ПолноеИмяСтроки,".", ""), ТипКнопкиКоманднойПанели.Подменю, "<"+НаименованиеРеквизита+">", ДействиеНазначитьИмяКолонке);
					Если Не ПустаяСтрока(Стр.Строки[0].Реквизит) Тогда
//						ЕстьНазначениеУПодчинённых = 
						ЗаполнитьПодменюНазначенияКолонок(Стр.Строки, Кн.Кнопки, ПолноеИмяСтроки, ПолноеНаименованиеСтроки);
					КонецЕсли; 
				Иначе
					Кн = Кнопки.Добавить("_"+СтрЗаменить(ПолноеИмяСтроки,".", ""), ТипКнопкиКоманднойПанели.Действие, "<"+НаименованиеРеквизита+">", ДействиеНазначитьИмяКолонке);
				КонецЕсли; 
			КонецЕсли;
			Кн.Пометка = НЕ ПустаяСтрока(Стр.ДанныеКолонки); // ИЛИ ЕстьНазначениеУПодчинённых; // хреново. Не работает у подменю...
//			ЕстьНазначение = ЕстьНазначение ИЛИ Кн.Пометка;
			
// Имя кнопки = "_"+Стр.Реквизит
// Текст кнопки = "<"+ПолучитьНаименованиеРеквизита(Стр)+">"
// Подсказка кнопки = ПолноеИмя
			Кн.Подсказка = ПолноеИмяСтроки;
// Пояснение кнопки = ПолноеНаименование
			Кн.Пояснение = ПолноеНаименованиеСтроки;
		КонецЕсли; 
	КонецЦикла;
//	Возврат ЕстьНазначение;
КонецФункции
 
Процедура ПерезаполнитьРеквизитыТЧ()
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		СтрДок = ПоляНоменклатуры.Строки.Найти("<Товары>", "Реквизит");
		Если СтрДок = Неопределено Тогда
			СтрДок = _ДобавитьСтроку(ПоляНоменклатуры.Строки, "<Товары>", Метаданные.Документы[ТипДокумента].ТабличныеЧасти.Товары, "из колонки");
		КонецЕсли;
// установим у всех признак поиска. Будем его использовать для контроля, потом очистим.
		Для каждого ПодСтр Из СтрДок.Строки Цикл
			ПодСтр.Поиск = Истина;
		КонецЦикла;
		
		Для каждого Мет Из Метаданные.Документы[ТипДокумента].ТабличныеЧасти.Товары.Реквизиты Цикл
			НовСтр = _НайтиДобавитьСтроку(СтрДок.Строки, Мет.Имя, Мет, "не использовать");
			Если Найти("Цена,Количество,Сумма", Мет.Имя)>0 Тогда
				НовСтр.СпособЗагрузки = "из колонки"
			ИначеЕсли Найти("Номенклатура,СтавкаНДС", Мет.Имя)>0 Тогда
				НовСтр.СпособЗагрузки = "из реквизита";
				Если Мет.Имя = "Номенклатура" Тогда
					НовСтр.Значение = "<Номенклатура>";
				Иначе
					НовСтр.Значение = Мет.Имя;
				КонецЕсли; 
			КонецЕсли; 
			НовСтр.Поиск = Ложь;
		КонецЦикла;
		
		ЛишниеСтроки = СтрДок.Строки.НайтиСтроки(Новый Структура("Поиск", Истина));
		Для каждого Стр Из ЛишниеСтроки Цикл
			СтрДок.Строки.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры
 

Процедура ЗаполнитьПоляНоменклатурыИПоиска()
	ПоляНоменклатуры.Колонки.Добавить("Метаданные"); // скрытая колонка для описания реквизита
	
	Для каждого Кол Из ЭлементыФормы.ПоляНоменклатуры.Колонки Цикл
		Если Кол.ЭлементУправления = Неопределено Тогда
			ПоляНоменклатуры.Колонки.Добавить(Кол.ДанныеФлажка, Новый ОписаниеТипов("Булево")); // создаём в ТЗ колонки, аналогичные колонкам табличного поля
		Иначе
			ПоляНоменклатуры.Колонки.Добавить(Кол.Данные, Кол.ЭлементУправления.ТипЗначения); // создаём в ТЗ колонки, аналогичные колонкам табличного поля
		КонецЕсли; 
	КонецЦикла; 
	
	Спис = Новый СписокЗначений;
	Спис.Добавить("значение");// - указано значение 
//	Спис.Добавить("значение индивидуальное"); // значение указывается для каждой строчки отдельно
	Спис.Добавить("из колонки"); // - есть назначенная колонка, загруженная из файла
	Спис.Добавить("из реквизита"); // - копируется из другого реквизита номенклатуры
	Спис.Добавить("из шаблона");
	Спис.Добавить("не использовать");// - не использовать в меню для назначения колонки
	ЭлементыФормы.ПоляНоменклатуры.Колонки.СпособЗагрузки.ЭлементУправления.СписокВыбора = Спис;
	
	
// РЕКВИЗИТЫ Номенклатуры
	ЗаполнитьСтрокиВетки(ПоляНоменклатуры, Метаданные.Справочники.Номенклатура);
	
// СВОЙСТВА Номенклатуры
	
	
//добавим свойства
	Если Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов")<>Неопределено Тогда
		СтрСвойства = _ДобавитьСтроку(ПоляНоменклатуры.Строки, "<Свойства>", Метаданные.ПланыВидовХарактеристик["СвойстваОбъектов"]);
		ЗаполнитьСтрокиВетки(СтрСвойства, СтрСвойства.Метаданные);
	КонецЕсли; 
	
// добавим типы цен
	Если Метаданные.Справочники.Найти("ТипыЦенНоменклатуры")<>Неопределено Тогда
		СтрЦены = _ДобавитьСтроку(ПоляНоменклатуры.Строки, "<Цены>", Метаданные.РегистрыСведений["ЦеныНоменклатуры"]);
		ЗаполнитьСтрокиВетки(СтрЦены, СтрЦены.Метаданные);
	КонецЕсли; 
	
// добавим штрихкоды
	Если Метаданные.РегистрыСведений.Найти("Штрихкоды")<>Неопределено Тогда
		ШтрСтр = _ДобавитьСтроку(ПоляНоменклатуры.Строки, "<Штрихкоды>", "Метаданные.РегистрыСведений.Штрихкоды");

//заполняем общим способом.
		//Для каждого Мет Из Метаданные.РегистрыСведений.Штрихкоды.Измерения Цикл
		//	Если Мет.Имя<>"Владелец" И Найти(Мет.Имя, "Удалить")=0 Тогда
		//		НовСтр = ШтрСтр.Строки.Добавить();
		//		НовСтр.Реквизит = Мет.Имя;
		//		НовСтр.Метаданные = Мет;
		//		
		//		МетСвойства = Метаданные.НайтиПоТипу(Мет.Тип.Типы()[0]);
		//		Если МетСвойства <> Неопределено И МетСвойства.Имя<>"ЗначенияСвойствОбъектов" Тогда // Тип-ссылка. Для Справочника ЗначенияСвойствОбъектов упрощаем. Там строго по наименованию
		//			ЗаполнитьСтрокиВетки(НовСтр, МетСвойства);
		//		КонецЕсли;
		//	КонецЕсли; 
		//КонецЦикла;
	КонецЕсли;
	
// добавим подчинённые справочники
	Для каждого Мет Из Метаданные.Справочники Цикл
		Если Мет.Владельцы.Содержит(Метаданные.Справочники.Номенклатура) Тогда
			НовСтр = _ДобавитьСтроку(ПоляНоменклатуры.Строки, "<"+Мет.Синоним+">", "Метаданные.Справочники."+Мет.Имя);
			Если НовСтр.СпособЗагрузки = "из колонки" Тогда
				ЗаполнитьСтрокиВетки(НовСтр, НовСтр.Метаданные);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;

	
// добавим реквизиты для загрузки документов
	////НовСтр = ПоляНоменклатуры.Строки.Добавить();
	////НовСтр.Реквизит = "Цена";
	////НовСтр.Метаданные = Новый Структура("РеквизитДокумента,Тип", Истина,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	////НовСтр.Значение = Константы.ВалютаРегламентированногоУчета.Получить();
	////
	////НовСтр = ПоляНоменклатуры.Строки.Добавить();
	////НовСтр.Реквизит = "Сумма";
	////НовСтр.Метаданные = Новый Структура("РеквизитДокумента,Тип", Истина,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	////
	////НовСтр = ПоляНоменклатуры.Строки.Добавить();
	////НовСтр.Реквизит = "Количество";
	////НовСтр.Метаданные = Новый Структура("РеквизитДокумента,Тип", Истина,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	
	ПерезаполнитьРеквизитыТЧ();
	
	//ПоляНоменклатуры.Строки.Сортировать("СпособЗагрузки,Реквизит", Истина);
	СортироватьПоляНоменклатуры();
	
//*********************************************************************************************
// таблица поиска
	Список = Новый СписокЗначений;
	Список.Добавить("Код");
	Список.Добавить("Наименование");
	Для каждого Мет Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		Если Мет.Тип.СодержитТип(Тип("Строка")) ИЛИ Мет.Тип.СодержитТип(Тип("Число")) Тогда
			Список.Добавить(Мет.Имя, Мет.Синоним);
		КонецЕсли;
	КонецЦикла; 
	ЭлементыФормы.ПоляПоиска.Колонки.РеквизитПоиска.ЭлементУправления.СписокВыбора = Список;
	
КонецПроцедуры
 

Процедура ПриОткрытии()
	// Выбор листа Excel - информация
    ЭлементыФормы.ЛистКниги.СписокВыбора.Добавить("","<имя листа Excel>");
	ЭлементыФормы.ЛистКниги.Значение = "";
	ЭлементыФормы.ЛистКниги.Доступность = Ложь; // пока не выбран файл
	УстановитьДоступностьНаШаге(0);
	
	Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("ЗагрузитьДокумент") = Неопределено Тогда
		ЭлементыФормы.ТипДокумента.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК);
	КонецЕсли; 

	ВидДокумента = Новый СписокЗначений;
	Для каждого МДок Из Метаданные.Документы Цикл
		Если МДок.ТабличныеЧасти.Найти("Товары") <> Неопределено И Найти(МДок.Имя, "УстановкаЦен")=0 Тогда
			ВидДокумента.Добавить(МДок.Имя, МДок.Синоним);
		КонецЕсли; 
	КонецЦикла;
	ЭлементыФормы.ТипДокумента.СписокВыбора = ВидДокумента;
	флПерезаписатьСуществующуюНоменклатуруПриИзменении(ЭлементыФормы.флПерезаписатьСуществующуюНоменклатуру);
	
	ПодключитьОбработчикОжидания("ОбработчикВыбратьФайл", 0.1, Истина);
КонецПроцедуры

Процедура ОбработчикВыбратьФайл()
	ПутьКФайлуНачалоВыбора(ЭлементыФормы.ПутьКФайлу, Истина);
КонецПроцедуры


Процедура ДействиеЗагрузитьНоменклатуру(Кнопка)
	Если флПерезаписатьСуществующуюНоменклатуру И Вопрос("Данное действие перезапишет у всех позиций, указанных в колонке ""Номенклатура 1с""
		|все реквизиты на новые значения! Отменить результат данного действия будет невозможно.
		|Продолжить?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
		флПерезаписатьСуществующуюНоменклатуру=Ложь;
		Возврат
	КонецЕсли; 
	ЗагрузитьНоменклатуру(Не флПерезаписатьСуществующуюНоменклатуру);
	УстановитьДоступностьНаШаге(3);
	Предупреждение("Номенклатура Успешно загружена!");
КонецПроцедуры

Процедура ЗагрузитьНоменклатуру(ТолькоНовую=Истина)
	Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
		НайтиНажатие(Неопределено);
		Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	
	Отказ = Ложь;
	
	Пустые = Таблица.НайтиСтроки(Новый Структура("_Номенклатура", Справочники.Номенклатура.ПустаяСсылка()));
	Если Пустые.Количество()>0 Тогда
		Для каждого СтрПоля Из ПоляНоменклатуры.Строки Цикл
			Если Найти(ОбязательныеПоля, СтрПоля.Реквизит)>0 Тогда
				Если Не СтрокаКЗагрузкеНастроена(СтрПоля) Тогда
					Сообщить("Задайте "+ПолучитьНаименованиеРеквизита(СтрПоля)+"!", СтатусСообщения.Внимание);
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		Если Отказ Тогда
			Номера = "";
			Для каждого Эл Из Пустые Цикл
				Номера = Номера+(Таблица.Индекс(Эл)+1)+","
			КонецЦикла; 
			Сообщить("В строках "+Лев(Номера, СтрДлина(Номера)-1)+" не найдена номенклатура. Укажите номенклатуру вручную, или выберите шаблон, или задайте значения по-умолчанию (см. выше)");
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Пустые = Таблица.НайтиСтроки(Новый Структура("_Шаблон,_Номенклатура", Справочники.Номенклатура.ПустаяСсылка(), Справочники.Номенклатура.ПустаяСсылка()));
	Если Пустые.Количество()>0 Тогда
		Для каждого СтрПоля Из ПоляНоменклатуры.Строки Цикл
			Если Найти(ОбязательныеПоля, СтрПоля.Реквизит)>0 Тогда
				Если СтрПоля.СпособЗагрузки="из шаблона" Тогда
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		Если Отказ Тогда
			Номера = "";
			Для каждого Эл Из Пустые Цикл
				Номера = Номера+(Таблица.Индекс(Эл)+1)+","
			КонецЦикла; 
			Сообщить("В строках "+Лев(Номера, СтрДлина(Номера)-1)+" не выбран шаблон. Укажите шаблон, или задайте значения по-умолчанию");
			Возврат
		КонецЕсли; 
	КонецЕсли; 
	
	ДокументОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокументОбъект.Дата = РабочаяДата;
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ДокументОбъект.Комментарий = "Загружено из файла поставщика";
	Для каждого Стр Из Таблица Цикл
		ОбработкаПрерыванияПользователя();
//		ДанныеТовара = Новый Структура("Артикул,Наименование,Код,СтавкаНДС,НомерГТД,СтранаПроисхождения");
		Цена = 0;
		
//		ПрочитатьИНайтиТовар(Стр, ДанныеТовара);
		Если Таблица.Колонки.Найти("_Номенклатура")<>Неопределено И ЗначениеЗаполнено(Стр._Номенклатура) Тогда
			// принудительно ставим то, что указано в колонке
			СпрНом = Стр._Номенклатура;
		Иначе
			СпрНом = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли; 
		
		Если СпрНом.Пустая() Тогда
			ОбъНом = Справочники.Номенклатура.СоздатьЭлемент();
			ОбъНом.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку());
			СпрНом = ОбъНом.ПолучитьСсылкуНового();
		Иначе
			ОбъНом = СпрНом.ПолучитьОбъект();
		КонецЕсли;
		
		ОбъНом.ДополнительныеСвойства.Вставить("Номенклатура", СпрНом);
		ОбъНом.ДополнительныеСвойства.Вставить("Свойства", Новый Соответствие);
		ОбъНом.ДополнительныеСвойства.Вставить("Категории", Новый Соответствие);
		ОбъНом.ДополнительныеСвойства.Вставить("Цены", Новый Соответствие);
		Для каждого Мет Из Метаданные.Справочники Цикл
			Если Мет.Владельцы.Содержит(Метаданные.Справочники.Номенклатура) Тогда
				ОбъНом.ДополнительныеСвойства.Вставить(Мет.Имя, Новый Соответствие);
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого СтрПоля Из ПоляНоменклатуры.Строки Цикл
			Если СтрПоля.Реквизит = "<Товары>" Тогда
				Продолжить
			КонецЕсли; 
			ТекЗначение = Неопределено;
			Если СтрПоля.СпособЗагрузки = "значение" Тогда
				ТекЗначение = СтрПоля.Значение
			ИначеЕсли СтрПоля.СпособЗагрузки = "из колонки" Тогда
				Если ЗначениеЗаполнено(СтрПоля.ДанныеКолонки) Тогда
				    ТекЗначение = ПолучитьРеквизитИзТекста(СтрПоля, Стр[СтрПоля.ДанныеКолонки]);
				ИначеЕсли СтрокаКЗагрузкеНастроена(СтрПоля) Тогда
					Если Лев(СтрПоля.Реквизит, 1)="<" Тогда
						ТекЗначение = Новый Соответствие;
						Для каждого ПодСтрПоля Из СтрПоля.Строки Цикл
							Если СтрокаКЗагрузкеНастроена(ПодСтрПоля) Тогда
								Если СтрПоля.Реквизит="<Цены>" Тогда // особый случай
									//ТекЗначение.Вставить(ПодСтрПоля.Реквизит, ПолучитьРеквизитИзТекста(ПодСтрПоля, Стр[ПодСтрПоля.ДанныеКолонки]));
									// ВРЕМЕННО, пока ссылка на тип цен в Метаданных.
									// Потом его надо переместить в Значение, а Валюту внутрь группы
									ТекЗначение.Вставить(ПодСтрПоля.Метаданные, ПолучитьРеквизитИзТекста(ПодСтрПоля, Стр[ПодСтрПоля.ДанныеКолонки]));
								Иначе
									ТекЗн = ПолучитьРеквизитДочерних(ОбъНом, ПодСтрПоля, Стр, СпрНом);
									ТекЗначение.Вставить(ПодСтрПоля.Реквизит, ТекЗн);
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
					Иначе
					    ТекЗначение = ПолучитьРеквизитДочерних(ОбъНом, СтрПоля, Стр, СпрНом);
					КонецЕсли; 
				КонецЕсли; 
			ИначеЕсли СтрПоля.СпособЗагрузки = "из реквизита" Тогда
				ТекЗначение = ОбъНом[СтрПоля.Значение];
			ИначеЕсли СтрПоля.СпособЗагрузки = "из шаблона" Тогда
				ТекЗначение = ПолучитьРеквизитИзНоменклатуры(СтрПоля, Стр._Шаблон);
			Иначе
				Продолжить
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекЗначение) И флНеЗаменятьПустымиЗначениями Тогда
				Продолжить
			КонецЕсли;
			
			Если ТипЗнч(СтрПоля.Метаданные)=Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
				ОбъНом.ДополнительныеСвойства.Свойства.Вставить(СтрПоля.Метаданные, ТекЗначение);
			ИначеЕсли ТипЗнч(СтрПоля.Метаданные)=Тип("Строка") Тогда // Группы подчинённых
				Для каждого КиЗ Из ТекЗначение Цикл
					ОбъНом.ДополнительныеСвойства[Вычислить(СтрПоля.Метаданные).Имя].Вставить(КиЗ.Ключ, КиЗ.Значение);
					Стр[КиЗ.Ключ] = КиЗ.Значение;
				КонецЦикла; 
			ИначеЕсли ТипЗнч(СтрПоля.Метаданные)=Тип("ОбъектМетаданных") Тогда // обычные реквизиты
				Если Метаданные.РегистрыСведений.Найти("Штрихкоды")<>Неопределено И СтрПоля.Метаданные = Метаданные.РегистрыСведений.Штрихкоды Тогда // оп-па!
					ОбъНом.ДополнительныеСвойства.Вставить("МенеджерШтрихКодов", ТекЗначение);
				ИначеЕсли Метаданные.РегистрыСведений.Найти("ЦеныНоменклатуры")<>Неопределено И СтрПоля.Метаданные = Метаданные.РегистрыСведений["ЦеныНоменклатуры"] Тогда
					Для каждого КиЗ Из ТекЗначение Цикл
						ОбъНом.ДополнительныеСвойства.Цены.Вставить(КиЗ.Ключ, КиЗ.Значение);
					КонецЦикла; 
				ИначеЕсли Найти(СтрПоля.Метаданные.ПолноеИмя(), ".Реквизит.")>0 Тогда // реквизит объекта
					ОбъНом[СтрПоля.Реквизит] = ТекЗначение;
				Иначе // объект (например справочник)
					ОбъНом.ДополнительныеСвойства.Вставить(СтрПоля.Реквизит, ТекЗначение);
				КонецЕсли; 
			ИначеЕсли ТипЗнч(СтрПоля.Метаданные)=Тип("Структура") Тогда // наименование, Код
				Если Не СтрПоля.Метаданные.Свойство("РеквизитДокумента") Тогда
					ОбъНом[СтрПоля.Реквизит] = ТекЗначение;
				КонецЕсли; 
			Иначе
				ВызватьИсключение "Нет такого типа!"
			КонецЕсли; 
		КонецЦикла; 
		
		Если ТолькоНовую И Не ОбъНом.ЭтоНовый() Тогда
			Продолжить
		КонецЕсли; 

		
// теперь общим образом это делается, способ "из реквизита"

		// заполняем все реквизиты, содержащие в имени текст "Наименование" тем же, что и само Наименование
		////Для каждого Мет Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		////	Если Мет.Тип.СодержитТип(Тип("Строка")) И Найти(Мет.Имя, "Наименование")>0 И НЕ (ПустаяСтрока(ОбъНом.Наименование) И флНеЗаменятьПустымиЗначениями) Тогда
		////		ОбъНом[Мет.Имя] = ОбъНом.Наименование;
		////	КонецЕсли;
		////КонецЦикла; 
		
// подставим из шаблона
		//////Если ОбъНом.Метаданные().Реквизиты.Найти("ВестиУчетПоСериям")<>Неопределено
		//////	 И ЗначениеЗаполнено(ДанныеТовара.НомерГТД) ИЛИ ЗначениеЗаполнено(ДанныеТовара.СтранаПроисхождения) Тогда
		//////	ОбъНом.ВестиУчетПоСериям = Стр._Шаблон.ВестиУчетПоСериям;
		//////	ОбъНом.НомерГТД = НайтиСоздатьГТД(ДанныеТовара.НомерГТД);
		//////	ОбъНом.СтранаПроисхождения = НайтиСоздатьСтрану(ДанныеТовара.СтранаПроисхождения);
		//////КонецЕсли; 
		//////Если Метаданные.Константы.Найти("ИспользоватьХарактеристикиНоменклатуры")<>Неопределено
		//////	И Константы.ИспользоватьХарактеристикиНоменклатуры.Получить()
		//////	И ОбъНом.Метаданные().Реквизиты.Найти("ВестиУчетПоХарактеристикам")<>Неопределено Тогда
		//////	ОбъНом.ВестиУчетПоХарактеристикам = Стр._Шаблон.ВестиУчетПоХарактеристикам;
		//////КонецЕсли;

		
// могут быть неуникальные коды, то-сё.
		ОбъНом.ОбменДанными.Загрузка = Истина;
		
		// теперь создать единицы, записать цены...
		Если ОбъНом.ЭтоНовый() Тогда
			Если ПустаяСтрока(ОбъНом.Код) Тогда
				ОбъНом.УстановитьНовыйКод();
			КонецЕсли; 
			ОбъНом.Записать();
			
			Стр._Номенклатура = ОбъНом.Ссылка;
		
			//////Если ЗначениеЗаполнено(Категория) Тогда
			//////	Мен = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
			//////	Мен.Категория = Категория;
			//////	Мен.Объект = ОбъНом.Ссылка;
			//////	Мен.Записать();
			//////КонецЕсли; 
		КонецЕсли;
		
// ШТРИХКОДЫ
		Если ОбъНом.ДополнительныеСвойства.Свойство("МенеджерШтрихКодов", ТекЗначение) Тогда
			Мен = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Мен, ТекЗначение);
			Мен.Записать();
		КонецЕсли; 
		
// приведём в порядок единицы (Может быть не новая номенклатура без единиц! Ошибочная, ясен пень)
		Если Метаданные.Справочники.Найти("ЕдиницыИзмерения")<>Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ОбъНом.ЕдиницаДляОтчетов) ИЛИ Не ЗначениеЗаполнено(ОбъНом.ЕдиницаХраненияОстатков) Тогда
				ЕдСсылка = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", ОбъНом.БазоваяЕдиницаИзмерения,,ОбъНом.Ссылка);
				Если ЕдСсылка.Пустая() Тогда
					Ед = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					Ед.Владелец = ОбъНом.Ссылка;
					Ед.ЕдиницаПоКлассификатору = ОбъНом.БазоваяЕдиницаИзмерения;
					Ед.Коэффициент = 1;
					Ед.Наименование = Ед.ЕдиницаПоКлассификатору;
					Ед.Записать();
					ЕдСсылка = Ед.Ссылка;
				КонецЕсли; 
				ОбъНом.ЕдиницаДляОтчетов = ЕдСсылка;
				ОбъНом.ЕдиницаХраненияОстатков = ЕдСсылка;
			КонецЕсли; 
		КонецЕсли; 
		
		
// картинка
		ИмяКол = ПолучитьИмяЗаданнойКолонки("ОсновноеИзображение");
		Если Не ПустаяСтрока(ИмяКол) Тогда // задана картинка
			Картинка = Стр[ИмяКол];
			Если ЗначениеЗаполнено(Картинка) Тогда
				Если ОбъНом.ОсновноеИзображение.Пустая() Тогда
					Осн = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
					Осн.Объект = ОбъНом.Ссылка;
					Осн.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
				Иначе
					Осн = ОбъНом.ОсновноеИзображение.ПолучитьОбъект();
				КонецЕсли;
				Осн.Хранилище = Новый ХранилищеЗначения(Картинка);
				Осн.Записать();
				ОбъНом.ОсновноеИзображение = Осн.Ссылка;
			КонецЕсли; 
		КонецЕсли;
		
// серии
		//////Если Метаданные.Константы.Найти("ИспользоватьСерииНоменклатуры")<>Неопределено
		//////	И Константы.ИспользоватьСерииНоменклатуры.Получить()
		//////	И ОбъНом.ВестиУчетПоСериям Тогда
		//////	НайтиСоздатьСерию(ОбъНом.Ссылка, ОбъНом.СтранаПроисхождения, ОбъНом.НомерГТД);
		//////КонецЕсли;
		
// свойства
		//Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		//Набор.Отбор.Объект.Установить(ОбъНом.Ссылка);
		Для каждого КиЗ Из ОбъНом.ДополнительныеСвойства.Свойства Цикл
			Мен = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Мен.Свойство = КиЗ.Ключ;
			Мен.Объект = ОбъНом.Ссылка;
			Мен.Значение = КиЗ.Значение;
			Мен.Записать();
			
// как ни странно, разницы в скорости нет, несмотря на то, что набор записывает сразу 5 свойств за раз, а менеждер по одному.
// но это в 8.1 надо проверить, возможно в 8.2 оптимизировано.
// И, кроме того, это вообще неправильно. При записи набором - будут удалены все незагружаемые свойства, т.к. отбор только по объекту...
			//////Запись = Набор.Добавить();
			//////Запись.Свойство = КиЗ.Ключ;
			//////Запись.Объект = ОбъНом.Ссылка;
			//////Запись.Значение = КиЗ.Значение;
		КонецЦикла; 
		////Набор.Записать();
		
// подставим из шаблона
		Если ЗначениеЗаполнено(Стр._Шаблон) Тогда
			Если Метаданные.Справочники.Найти("КатегорииОбъектов")<>Неопределено Тогда
		        Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	КатегорииОбъектов.Объект,
					|	КатегорииОбъектов.Категория
					|ИЗ
					|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
					|ГДЕ
					|	КатегорииОбъектов.Объект = &Шаблон
					|	И (НЕ КатегорииОбъектов.Категория.ПометкаУдаления)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗначенияСвойствОбъектов.Объект,
					|	ЗначенияСвойствОбъектов.Свойство,
					|	ЗначенияСвойствОбъектов.Значение
					|ИЗ
					|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|ГДЕ
					|	ЗначенияСвойствОбъектов.Объект = &Шаблон
					|	И (НЕ ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления)");
				Запрос.УстановитьПараметр("Шаблон", Стр._Шаблон);
				Рез = Запрос.ВыполнитьПакет();
// КАТЕГОРИИ
				Набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(ОбъНом.Ссылка);
				ТЗ = Рез[0].Выгрузить();
				ТЗ.ЗаполнитьЗначения(ОбъНом.Ссылка, "Объект");
				Набор.Загрузить(ТЗ);
				Набор.Записать();
				
// СВОЙСТВА
				Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(ОбъНом.Ссылка);
				ТЗ = Рез[1].Выгрузить();
				ТЗ.ЗаполнитьЗначения(ОбъНом.Ссылка, "Объект");
				Набор.Загрузить(ТЗ);
				Набор.Записать();
				
// ХАРАКТЕРИСТИКИ
				Если ОбъНом.Метаданные().Реквизиты.Найти("ВестиУчетПоХарактеристикам")<>Неопределено
					И ОбъНом.ВестиУчетПоХарактеристикам Тогда
					Запрос = Новый Запрос(
						"ВЫБРАТЬ
						|	ХарактеристикиНоменклатуры.Ссылка КАК Объект,
						|	ХарактеристикиНоменклатуры.Наименование,
						|	ЗначенияСвойствОбъектов.Свойство,
						|	ЗначенияСвойствОбъектов.Значение
						|ИЗ
						|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
						|		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Объект
						|ГДЕ
						|	ХарактеристикиНоменклатуры.Владелец = &Владелец
						|	И ЗначенияСвойствОбъектов.Свойство ЕСТЬ НЕ NULL 
						|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
						|	И (НЕ ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления)
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ХарактеристикиНоменклатуры.Ссылка КАК Объект,
						|	ХарактеристикиНоменклатуры.Наименование
						|ИЗ
						|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
						|ГДЕ
						|	ХарактеристикиНоменклатуры.Владелец = &Владелец
						|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)");
					Запрос.УстановитьПараметр("Владелец", Стр._Шаблон);
					Рез = Запрос.ВыполнитьПакет();
					Выборка = Рез[1].Выбрать();
					ХарСвойства = Рез[0].Выгрузить();
					Пока Выборка.Следующий() Цикл // цикл по характеристикам
						// создадим характеристику
						Хар = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Выборка.Наименование,Истина,,ОбъНом.Ссылка);
						Если Хар.Пустая() Тогда
							ХарОб = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
							ХарОб.Наименование = Выборка.Наименование;
							ХарОб.Владелец = ОбъНом.Ссылка;
							ХарОб.Записать();
							Хар = ХарОб.Ссылка;
						КонецЕсли;
						//запишем её свойства
						ТЗ = ХарСвойства.Скопировать(Новый Структура("Объект", Выборка.Объект));
						Если ТЗ.Количество()>0 Тогда
							Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
							Набор.Отбор.Объект.Установить(Хар);
							ТЗ.ЗаполнитьЗначения(Хар, "Объект");
							Набор.Загрузить(ТЗ);
							Набор.Записать();
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		ОбъНом.Записать();

// ЦЕНЫ
// Надо бы оптимизировать, чтобы неизменённые цены не записывались опять.
// Учесть, что если хотя бы один тип цен изменился - его нужно записать.
		Если ОбъНом.ДополнительныеСвойства.Цены.Количество() > 0 Тогда
			ГруппаЦен = ПоляНоменклатуры.Строки.Найти("<Цены>", "Реквизит");
			Для каждого СтрЦена Из ОбъНом.ДополнительныеСвойства.Цены Цикл
				ИндексСтрокиТаблицыЦен = 0;

				СтрокаТипЦен = ДокументОбъект.ТипыЦен.Найти(СтрЦена.Ключ, "ТипЦен");

				Если СтрокаТипЦен = Неопределено Тогда
					СтрокаТипЦен = ДокументОбъект.ТипыЦен.Добавить();
					СтрокаТипЦен.ТипЦен = СтрЦена.Ключ;
				КонецЕсли;

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", ОбъНом.Ссылка);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				СтруктураПоиска.Вставить("ТипЦен", СтрЦена.Ключ);

				СтрокаТовары = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ДокументОбъект.Товары, СтруктураПоиска);

				Если СтрокаТовары = Неопределено Тогда
					СтрокаТовары = ДокументОбъект.Товары.Добавить();
					СтрокаТовары.Номенклатура = ОбъНом.Ссылка;
					//СтрокаТовары.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					СтрокаТовары.ТипЦен = СтрЦена.Ключ;
					СтрокаТовары.ИндексСтрокиТаблицыЦен = ИндексСтрокиТаблицыЦен;
				КонецЕсли;

				СтрокаТовары.Цена = СтрЦена.Значение;
				СтрВалюты = ГруппаЦен.Строки.Найти(СтрЦена.Ключ, "Метаданные");
				СтрокаТовары.Валюта = СтрВалюты.Значение;
				
				СтрокаТовары.ЕдиницаИзмерения = ОбъНом.ЕдиницаХраненияОстатков;
				СтрокаТовары.ПроцентСкидкиНаценки = СтрЦена.Ключ.ПроцентСкидкиНаценки;
				СтрокаТовары.СпособРасчетаЦены = СтрЦена.Ключ.СпособРасчетаЦены;
			КонецЦикла; 
		КонецЕсли; 
		Состояние("Загружено "+(Таблица.Индекс(Стр)+1)+" из "+Таблица.Количество());
	КонецЦикла; 
	
	Если ДокументОбъект.Товары.Количество()>0 Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	УстановитьДоступностьНаШаге(3);
КонецПроцедуры

Процедура ОсновныеДействияФормыВыделитьАртикул(Кнопка)
	Если ЭлементыФормы.Таблица.Колонки.Найти("Артикул")<>Неопределено Тогда
		Предупреждение("Артикул уже задан!")
	//ИначеЕсли ЭлементыФормы.Таблица.Колонки.Найти("Наименование")=Неопределено Тогда
	//	Предупреждение("Не задано наименование!")
	Иначе
		ВыделитьАртикул(ЭлементыФормы.Таблица.ТекущаяКолонка, Кнопка.Имя="ВНачалеСтроки")
	КонецЕсли; 
КонецПроцедуры

Процедура ВыделитьАртикул(РабочаяКолонка, Слева=Истина)
	Если ЭлементыФормы.Таблица.Колонки.Найти("Артикул")=Неопределено Тогда
		Если Лев(Таблица.Колонки[Таблица.Колонки.Количество()-1].Имя, 1)="F" Тогда
			Номер = Число(Сред(Таблица.Колонки[Таблица.Колонки.Количество()-1].Имя, 2));
		Иначе
			Номер = 0;
		КонецЕсли; 
		ВнутреннееИмяКолонкиАртикул = "F"+(Номер+1);
		Таблица.Колонки.Добавить(ВнутреннееИмяКолонкиАртикул);
		Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Артикул")<>Неопределено Тогда
			ИмяКолонки = "Артикул";
			ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.Найти("_Артикул"));
		Иначе
			ИмяКолонки = ВнутреннееИмяКолонкиАртикул;
		КонецЕсли; 
		Колонка = ЭлементыФормы.Таблица.Колонки.Вставить(ЭлементыФормы.Таблица.Колонки.Индекс(РабочаяКолонка)+1, ИмяКолонки);
		Колонка.Имя = ИмяКолонки; // предыдущая строка не работает!! Не назначает колонке имя...  Глюки... По крайней мере в 8.1
		Колонка.Данные = ВнутреннееИмяКолонкиАртикул;
		
		Если ИмяКолонки <> ВнутреннееИмяКолонкиАртикул Тогда
			Колонка.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаФормы; // чёрный
			Колонка.ШрифтШапки = Новый Шрифт(Колонка.ШрифтШапки,,,Истина);
			СтрПоля = ПоляНоменклатуры.Строки.Найти(ИмяКолонки, "Реквизит");
			СтрПоля.ДанныеКолонки = ВнутреннееИмяКолонкиАртикул;
		КонецЕсли; 
		
		ИмяКолонкиНаименование = РабочаяКолонка.Данные;
		
		Для каждого Стр Из Таблица Цикл
			Если Слева Тогда
				// ищем последовательность: 
				// 1. сначала любые символы, кроме латинских,
				// 2. затем любые символы, кроме русских.
				// блок 1 может отсутствовать
			    RegExp.Pattern = "^[\W]*[-+'.()\w\s\d/]*";
			    Matches = RegExp.Execute(Строка(Стр[ИмяКолонкиНаименование]));
				Если Matches.Count()>0 Тогда
					Match = Matches.Item(0);
					//Стр[ВнутреннееИмяКолонкиАртикул] = СокрЛП(Лев(Стр[ИмяКолонкиНаименование], Match.FirstIndex));
					Стр[ВнутреннееИмяКолонкиАртикул] = СокрЛП(Match.Value);
				КонецЕсли; 
			Иначе
				// ищем справа символы латинские/цифры/-_/пробелы.
			    RegExp.Pattern = "[-\w\s/]*$";
			    Matches = RegExp.Execute(Строка(Стр[ИмяКолонкиНаименование]));
				Если Matches.Count()>0 Тогда
					Match = Matches.Item(0);
					Стр[ВнутреннееИмяКолонкиАртикул] = СокрЛП(Сред(Стр[ИмяКолонкиНаименование], Match.FirstIndex+1));
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		ЭтотОбъект.нКолонкаАртикула = РабочаяКолонка.Имя;
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьСтрокуПолейНоменклатурыПоКнопке(Кнопка, ПолноеИмя, ПолноеНаименование)
	
КонецФункции // ()
 

Процедура НазначитьИмяКолонке(Кнопка)
	Колонка = ЭлементыФормы.Таблица.ТекущаяКолонка;
	Если Лев(Колонка.Данные,1)="_" Тогда // это служебная колонка
		Возврат
	КонецЕсли; 
	
// НЕТ! не снимаем назначение. Только добавляем
	////Если Колонка.Имя <> Колонка.Данные Тогда // это уже назначенная колонка
	////	Стр = ПоляНоменклатуры.Найти(Колонка.Имя, "Реквизит");
	////	Стр.ДанныеКолонки = Неопределено;
	////КонецЕсли;
	Если Кнопка.Имя = "ОтменитьНазначениеИмениКолонки" Или Кнопка.Пометка Тогда
		Если Кнопка.Имя = "ОтменитьНазначениеИмениКолонки" Или Колонка.Имя = Сред(Кнопка.Имя, 2) Тогда
			Масс = ПоляНоменклатуры.Строки.НайтиСтроки(Новый Структура("ДанныеКолонки", Колонка.Данные), Истина);
			Для каждого Эл Из Масс Цикл
				Эл.ДанныеКолонки = Неопределено;
			КонецЦикла; 
			ОтменитьНазначениеКолонки(Колонка);
			//Кнопка.Пометка = Ложь; Если кнопка = ОтменитьНазначениеИмениКолонки, то не сработает, поэтому так:
			ЗаполнитьМенюКолонок();
		КонецЕсли; 
	Иначе
		Если Колонка.Имя <> Колонка.Данные Тогда // это уже назначенная колонка
			ТекстШапки = Колонка.ТекстШапки+";   "+Кнопка.Пояснение;
		Иначе
			ТекстШапки = Кнопка.Пояснение;
		КонецЕсли;                         // отрезаем лидирующее _
		УстановитьНазначениеКолонки(Колонка, Сред(Кнопка.Имя, 2), ТекстШапки);
		
		ПолныйПутьКРеквизиту = СтрЗаменить(Кнопка.Подсказка, ".", Символы.ПС);
		Строки = ПоляНоменклатуры.Строки;
		Для ц=1 По СтрЧислоСтрок(ПолныйПутьКРеквизиту) Цикл
			ИмяРеквизита = СтрПолучитьСтроку(ПолныйПутьКРеквизиту, ц);
			СтрПолей = Строки.Найти(ИмяРеквизита,"Реквизит");
			Строки = СтрПолей.Строки;
		КонецЦикла; 
		СтрПолей.ДанныеКолонки = Колонка.Данные;
		
		Кнопка.Пометка = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ПоляНоменклатуры.ОбновитьСтроки(); // чтобы статусы перерисовать
	ТаблицаПриАктивизацииКолонки(ЭлементыФормы.Таблица);
	//ЭтаФорма.Обновить(); // и не только статусы, но и надписи на форме
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузитьПоступление(Кнопка)
	ЗагрузитьДокументВида("ПоступлениеТоваровУслуг")
КонецПроцедуры

Процедура ЗагрузитьДокументВида(Вид, ИмяТЧ="Товары")
	
	Док = Документы[Вид].СоздатьДокумент();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, глЗначениеПеременной("глТекущийПользователь"));
	Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Док.Контрагент = Контрагент;
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док); //, мСтруктураПараметровДляПолученияДоговора);
		//ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Док, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
	КонецЕсли; 
	
	Если Док.Метаданные().Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		//СтрВалюты = ПоляНоменклатуры.Строки.Найти("Цена", "Реквизит");
		//Док.ВалютаДокумента = СтрВалюты.Значение;
		
		Если Док.Метаданные().Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено Тогда
			Курсы = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(, Новый Структура("Валюта", Док.ВалютаДокумента));
			Док.КурсВзаиморасчетов = Курсы.Курс;
			Док.КратностьВзаиморасчетов = Курсы.Кратность;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗаполнитьДокумент(Док, ИмяТЧ, Таблица, "Очистить") Тогда
		Док.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ЛистКнигиПриИзменении(Элемент)
	ПолучитьДанныеТаблицы()
КонецПроцедуры

Процедура КоманднаяПанельТаблицыПрочитатьИННПоставщика(Кнопка)
	Колонка = ЭлементыФормы.Таблица.ТекущаяКолонка;
	НаименованиеПоставщика = ЭлементыФормы.Таблица.ТекущаяСтрока[Колонка.Данные];
	RegExp.Pattern = "ИНН\s(\d*)";
	Matches = RegExp.Execute(НаименованиеПоставщика);
	Если Matches.Count()>0 Тогда
		ИНН = Matches.Item(0).SubMatches.Item(0);
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ИНН);
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	Найден = ЗначениеЗаполнено(Контрагент);
	ЭлементыФормы.НадписьКонтрагент.Видимость = Найден;
	ЭлементыФормы.Контрагент.Видимость = Найден;
	Если Не Найден Тогда
		Предупреждение("Контрагент с ИНН:"+ИНН+" не найден.");
	КонецЕсли; 
КонецПроцедуры

////Процедура ЗагрузитьЗаказПокупателяНажатие(Элемент)
////	ЗагрузитьДокументВида("ЗаказПокупателя")
////КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	Закрыть(Таблица)
КонецПроцедуры



Процедура ОсновныеДействияФормыОсновныеДействияФормыЗагрузитьДокумент(Кнопка)
	Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
		НайтиНажатие(Неопределено);
		Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
//	ДействиеЗагрузитьНоменклатуру(Неопределено);
	ЗагрузитьНоменклатуру(Не флПерезаписатьСуществующуюНоменклатуру);
	УстановитьДоступностьНаШаге(3);
	
	Если Таблица.Найти(Справочники.Номенклатура.ПустаяСсылка(), "_Номенклатура") <> Неопределено Тогда
		Сообщить("Имеются незаполненные значения в колонке ""Номенклатура в 1с"" (выделены розовым).", СтатусСообщения.Важное);
		Возврат
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ТипДокумента.Значение) Тогда
		ВидДокумента = ЭлементыФормы.ТипДокумента.СписокВыбора;
		Эл = ВидДокумента.ВыбратьЭлемент();
		Если Эл<>Неопределено Тогда
			ЭлементыФормы.ТипДокумента.Значение = Эл.Значение
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли; 
	ЗагрузитьДокументВида(ЭлементыФормы.ТипДокумента.Значение);
//	Предупреждение("Номенклатура Успешно загружена!");
КонецПроцедуры

Процедура УдалитьЛишниеСтрокиНажатие(Элемент)
	УдалитьЛишниеСтроки(ЭлементыФормы.Таблица.ТекущаяКолонка.Данные)
КонецПроцедуры

Процедура УдалитьЛишниеСтроки(ДанныеКолонки, ЗадаватьВопрос = Истина)
	Если ПустаяСтрока(ДанныеКолонки) Тогда
		Возврат
	КонецЕсли; 
	Для каждого Кол Из ЭлементыФормы.Таблица.Колонки Цикл
		Если Кол.Данные = ДанныеКолонки Тогда
			Колонка = Кол;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
//	Колонка = ЭлементыФормы.Таблица.Колонки[ИмяКолонки];
	ЧисловаяКолонка = Ложь;
	Если Найти(НРег(Колонка.Имя), "цена")>0 Тогда
		ЧисловаяКолонка = Истина;
	ИначеЕсли Найти(НРег(Колонка.Имя), "сумма")>0 Тогда
		ЧисловаяКолонка = Истина;
	ИначеЕсли Найти(НРег(Колонка.Имя), "количество")>0 Тогда
		ЧисловаяКолонка = Истина;
	ИначеЕсли Найти(НРег(Колонка.Имя), "_типцен_")>0 Тогда
		ЧисловаяКолонка = Истина;
	КонецЕсли;
	
	Если НЕ ЗадаватьВопрос ИЛИ Вопрос("Будут удалены все строки, в которых не заполнено "+?(ЧисловаяКолонка, "числовое ", "")+"значение в колонке "+Колонка.ТекстШапки+". Продолжить?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
		ц = 0;
		Пока ц<Таблица.Количество() Цикл
			Значение = Таблица[ц][Колонка.Данные];
			НужноУдалить = Ложь;
			Если ЧисловаяКолонка Тогда
				Попытка
					ЧисловоеЗначение = ПрочитатьЧислоF(Таблица[ц], Колонка.Данные);
					Если ЧисловоеЗначение = Неопределено Тогда
						НужноУдалить = Истина;
					КонецЕсли; 
				Исключение
					НужноУдалить = Истина;
				КонецПопытки
			ИначеЕсли ПустаяСтрока(Значение) Тогда
				НужноУдалить = Истина;
			КонецЕсли; 
			Если НужноУдалить Тогда
				Таблица.Удалить(ц);
			Иначе
				ц = ц+1;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	ЭтотОбъект.нКолонкаЛишнихСтрок = Колонка.Данные;
КонецПроцедуры
 

Процедура НайтиНажатие(Элемент)
	Если ПоляПоиска.Количество()=0 Тогда
		Предупреждение("Назначьте колонку для поиска!
			|Щёлкните правой кнопкой мыши на загруженной таблице и нажмите ""Колонка поиска"" ");
		Возврат
	КонецЕсли; 
	
	ДобавитьКэширующиеКолонки(Таблица);
	
	Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
// добавляем 2 спец колонки в таблицу. Найденную номенклатуру и Шаблон номенклатуры
		Таблица.Колонки.Вставить(0, "_ТаблицаВыбораНоменклатуры", , "Колонка для хранения нескольких номенклатур, найденных по одному условию");
		
		Таблица.Колонки.Вставить(0, "_Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "Номенклатура в 1с");
		Кол = ЭлементыФормы.Таблица.Колонки.Вставить(0, "Номенклатура в 1с");
		Кол.Данные = "_Номенклатура";
		Кол.Имя = "_Номенклатура_";
		Кол.ЭлементУправления.КнопкаВыбора = Истина;
		Кол.ЭлементУправления.КнопкаОткрытия = Истина;
		Кол.ЭлементУправления.УстановитьДействие("Очистка", Новый Действие("ТаблицаОчистка"));
		Кол.ЭлементУправления.УстановитьДействие("НачалоВыбора", Новый Действие("ТаблицаНачалоВыбора"));
//		Колонки.Вставить(Кол.Имя, Кол);
		ЭлементыФормы.ГрупповаяОбработка.Видимость = Истина;
		
		Таблица.Колонки.Вставить(0, "_Шаблон", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "Шаблон номеклатуры");
		Кол = ЭлементыФормы.Таблица.Колонки.Вставить(0, "Шаблон номеклатуры");
		Кол.Данные = "_Шаблон";
		Кол.Имя = "_Шаблон_";
		Кол.ЭлементУправления.КнопкаВыбора = Истина;
		Кол.ЭлементУправления.КнопкаОткрытия = Истина;
		Кол.ЭлементУправления.УстановитьДействие("Очистка", Новый Действие("ТаблицаОчистка"));
//		Колонки.Вставить(Кол.Имя, Кол);
		ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.НазначитьШаблонСтрокам.Доступность = Истина;
	Иначе
		Если Вопрос("Это действие очистит результаты предыдущего поиска. 
					|Если вы хотите ""суммировать"" результаты нескольких поисков,
					|то вы должны создать несколько строчек с настройками поиска
					|(табличка выше кнопки поиска). Тогда вторая строчка будет 
					|искать только то, что не нашла первая, а третья, то что
					|не нашли первые две, и т.д.
					|Произвести новый поиск?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
			Возврат
		КонецЕсли; 
	КонецЕсли;
	
	Таблица.ЗаполнитьЗначения(Неопределено, "_ТаблицаВыбораНоменклатуры,_Номенклатура");// очищаем результаты предыдущего поиска
	
// нет, сделаем запросом
	//Для каждого Стр Из Таблица Цикл
	//	ДанныеТовара = Новый Структура("Артикул,Наименование,Код");
	//	Стр._Номенклатура = ПрочитатьИНайтиТовар(Стр, ДанныеТовара);
	//КонецЦикла; 
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЗ.ЗначениеПоискаИзКолонки,
		|	ТЗ.АртикулЗаменить КАК ЗначениеПоиска
		|ПОМЕСТИТЬ ТаблицаПоиска
		|ИЗ
		|	&ТЗ КАК ТЗ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.ЗначениеПоискаИзКолонки,
		|	ТаблицаПоиска.ЗначениеПоиска,
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ((НЕ Номенклатура.ПометкаУдаления))
		|			И Номенклатура.Наименование = ТаблицаПоиска.ЗначениеПоиска";
	
	Для Каждого СтрПоиска Из ПоляПоиска Цикл
		ИмяКолонкиВТаблице = СтрПоиска.ИмяКолонкиВТаблице;
		КолонкаПоиска = СтрПоиска.ПредставлениеКолонкиПоиска;
		Если КолонкаПоиска = "ШтрихкодШтрихкод" Тогда // особый случай!
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТЗ.ЗначениеПоискаИзКолонки,
				|	ТЗ.АртикулЗаменить КАК ЗначениеПоиска
				|ПОМЕСТИТЬ ТаблицаПоиска
				|ИЗ
				|	&ТЗ КАК ТЗ
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ЗначениеПоиска
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаПоиска.ЗначениеПоискаИзКолонки,
				|	ТаблицаПоиска.ЗначениеПоиска,
				|	Штрихкоды.Владелец КАК Ссылка,
				|	Штрихкоды.Владелец.Наименование КАК Наименование
				|ИЗ
				|	ТаблицаПоиска КАК ТаблицаПоиска
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
				|		ПО Штрихкоды.Штрихкод = ТаблицаПоиска.ЗначениеПоиска
				|			И ((НЕ Штрихкоды.Владелец.ПометкаУдаления))";
			
		Иначе
			Запрос.Текст = ТекстЗапроса;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Наименование", СтрПоиска.РеквизитПоиска);
		КонецЕсли; 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АртикулЗаменить", СтрПоиска.ИмяКолонкиВТаблице);
		Если СтрПоиска.ПоискПоПервымСимволам Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "= ТаблицаПоиска.ЗначениеПоиска", "ПОДОБНО ТаблицаПоиска.ЗначениеПоиска");
		КонецЕсли; 
		//ТЗ = Таблица.Скопировать(, ИмяКолонкиВТаблице);
		//ТЗ.Колонки[0].Имя = РеквизитПоиска;
		//ТЗ.Колонки[0].ТипЗначения = Новый ОписаниеТипов("Строка");
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ЗначениеПоискаИзКолонки", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная) ));
		ТЗ.Колонки.Добавить(СтрПоиска.ИмяКолонкиВТаблице, Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная) ));
		Суффикс = ?(СтрПоиска.ПоискПоПервымСимволам, "%", "");
		Для каждого Стр Из Таблица Цикл
			Если Не СтрПоиска.ПоискПоПервымСимволам ИЛИ СтрПоиска.КоличествоПервыхСимволов = 0 Тогда
				СтрокаПоиска = Формат(Стр[ИмяКолонкиВТаблице], "ЧГ=0"); // а вообще-то может и числовые реквизиты надо учитывать, хотя... где они используются??? Да и Даты тоже где?
			Иначе
				СтрокаПоиска  = Лев(Формат(Стр[ИмяКолонкиВТаблице], "ЧГ=0"), СтрПоиска.КоличествоПервыхСимволов);
			КонецЕсли;
			Если Не ПустаяСтрока(СтрокаПоиска) Тогда
				НовСтр = ТЗ.Добавить();
				НовСтр["ЗначениеПоискаИзКолонки"] = Строка(Стр[ИмяКолонкиВТаблице]);
				НовСтр[СтрПоиска.ИмяКолонкиВТаблице] = СтрокаПоиска + Суффикс;
			КонецЕсли; 
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Найденные = Запрос.Выполнить().Выгрузить();
		Найденные.Индексы.Добавить("ЗначениеПоискаИзКолонки");
		Для каждого Стр Из Таблица Цикл
			НайденнаяНом = Найденные.НайтиСтроки(Новый Структура("ЗначениеПоискаИзКолонки", Строка(Стр[ИмяКолонкиВТаблице])));
			Если ЗначениеЗаполнено(Стр._Номенклатура) И НайденнаяНом.Найти(Стр._Номенклатура)=Неопределено Тогда
				НайденнаяНом.Добавить(Стр._Номенклатура); // добавим в результаты поиска и уже ранее найденную номенклатуру по этой строке. чтобы далее обрабатывать единообразно.
			КонецЕсли;
			
			Если НайденнаяНом.Количество() = 1 Тогда
				Стр._Номенклатура = НайденнаяНом[0].Ссылка;
			ИначеЕсли НайденнаяНом.Количество() > 1 Тогда
				ТабВыбора = Новый ТаблицаЗначений;
				ТабВыбора.Колонки.Добавить("Ссылка", ,"Наименование");
				ТабВыбора.Колонки.Добавить("Код");
				ТабВыбора.Колонки.Добавить("Артикул");
				ТабВыбора.Колонки.Добавить("Родитель",,"Группа");
				Для каждого Эл Из НайденнаяНом Цикл
					НовСтр = ТабВыбора.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Эл.Ссылка); // можно оптимизировать. Для начала получив все реквизиты всех позиций в запросе.
				КонецЦикла; 
				Стр._ТаблицаВыбораНоменклатуры = ТабВыбора;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	ЭтотОбъект.нНайтиВБазе = Истина;
	Если Таблица.Найти(Справочники.Номенклатура.ПустаяСсылка(), "_Номенклатура")=Неопределено Тогда
		УстановитьДоступностьНаШаге(3); // все номенклатуры найдены
	Иначе
		УстановитьДоступностьНаШаге(2); // не все найдены, нужно ещё создать ненайденные
	КонецЕсли; 
КонецПроцедуры

Процедура ТаблицаПриПолученииДанных(Элемент, ОформленияСтрок)
	Если Таблица.Колонки.Найти("_Номенклатура")<>Неопределено Тогда
		Для каждого Оф Из ОформленияСтрок Цикл
			Оф.Ячейки._Номенклатура_.ЦветТекста = WebЦвета.Зеленый;
			Если Не ЗначениеЗаполнено(Оф.ДанныеСтроки._Номенклатура) Тогда
				Если НЕ ЗначениеЗаполнено(Оф.ДанныеСтроки._ТаблицаВыбораНоменклатуры) Тогда
					Оф.ЦветТекста = WebЦвета.Коричневый;
					Оф.ЦветФона = WebЦвета.Розовый;
				ИначеЕсли ТипЗнч(Оф.ДанныеСтроки._ТаблицаВыбораНоменклатуры) = Тип("ТаблицаЗначений") Тогда
					Оф.Ячейки._Номенклатура_.УстановитьТекст("Выберите из списка");
					Оф.ЦветТекста = WebЦвета.Коричневый;
					Оф.ЦветФона = WebЦвета.БледноСиреневый;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Для каждого Оф Из ОформленияСтрок Цикл
		Для каждого Яч Из Оф.Ячейки Цикл
			Если ТипЗнч(Яч.Значение) = Тип("Картинка") Тогда
				Яч.УстановитьКартинку(Яч.Значение);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	ЭлементыФормы.НадписьКоличествоСтрок.Заголовок = Строка(Таблица.Количество())+" строк."
КонецПроцедуры

Процедура СкрытьНеназначенныеКолонкиНажатие(Элемент)
	Для каждого Кол Из ЭлементыФормы.Таблица.Колонки Цикл
		Кол.Видимость = Кол.Имя<>Кол.Данные;
	КонецЦикла; 
КонецПроцедуры

Процедура ОсновныеДействияФормыТест(Кнопка)

	Попытка 
// откроем
        Excel     = Новый COMОбъект ("Excel.Application");
        WorkBook= Excel.Workbooks.Open(ПутьКФайлу, , True);
        Sheet     = WorkBook.Worksheets(1);//Предполагаем, что картинки на первом листе.    
		
// поработаем
		//ТЗ = Новый ТаблицаЗначений;
		//ТЗ.Колонки.Добавить("name");
		//ТЗ.Колонки.Добавить("width");
		//ТЗ.Колонки.Добавить("height");
		//ТЗ.Колонки.Добавить("TopLeftCell");
		//ТЗ.Колонки.Добавить("ID");
	    Для Каждого Img Из Sheet.Pictures Цикл
	 //	   НовСтр = ТЗ.Добавить();
	 //	   НовСтр.name         = Img.name;
	 //	   НовСтр.width         = Img.width;
	 //	   НовСтр.height         = Img.height;
	 //	   НовСтр.ID            = Img.ShapeRange.ID;
	 //	   // выделение номера строки 
	 //
	 //	   TopLeftCell         = Img.TopLeftCell.Address;
	 //	   Бакс                 = Найти(TopLeftCell, "$");
	 //	   TopLeftCell            = Сред(TopLeftCell, Бакс+1, СтрДлина(TopLeftCell));
	 //	   Бакс                 = Найти(TopLeftCell, "$");
	 //	   TopLeftCell            = Сред(TopLeftCell, Бакс+1, СтрДлина(TopLeftCell));
	 //	   НовСтр.TopLeftCell     = Число(TopLeftCell);
	 		Таблица[Img.TopLeftCell.Row-1][Img.TopLeftCell.Column-1] = Img.name;
			НовИмя = КаталогВременныхФайлов()+Img.name+".jpg";
			
            str = Sheet.Name;
            Img.Select();
            pixH = Excel.Selection.Height;
            pixW = Excel.Selection.Width;
            Excel.Selection.Copy();
            Chart = Excel.Charts.Add();
             
            Excel.ActiveChart.Location(2,str);
             
            ExACName = Excel.ActiveChart.Name;
            ExACName = СокрЛП(СтрЗаменить(ExACName, str, ""));
            Excel.ActiveSheet.Shapes(ExACName).Height = pixH * 1.001;
            Excel.ActiveSheet.Shapes(ExACName).Width = pixW * 1.001;         
            Excel.ActiveChart.Paste();          
            Excel.ActiveChart.Export(НовИмя, "jpg");         
            Excel.ActiveSheet.Shapes(ExACName).Delete();

			Картинка = Новый Картинка(НовИмя);
			Таблица[Img.TopLeftCell.Row-1][Img.TopLeftCell.Column-1] = Картинка;
	    КонецЦикла;    
		
		
// теперь закроем
        WorkBook.Close();
        Excel.Quit();
        Sheet        = Неопределено;
        WorkBook    = Неопределено;
        Excel        = Неопределено;
    Исключение
        Сообщить("Произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
        Сообщить("     Загрузка невозможна!");
    КонецПопытки;
КонецПроцедуры

Процедура ТаблицаПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущаяСтрока=Неопределено Тогда
		Возврат
	КонецЕсли; 
	Колонка = Элемент.ТекущаяКолонка;
	ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.КолонкаПоиска.Пометка = ПоляПоиска.Найти(Колонка.Данные, "ИмяКолонкиВТаблице")<>Неопределено;
	Если Лев(Колонка.Данные,1)="_" Или Колонка.Имя = Колонка.Данные Тогда
// надо добавить проверку на подчинённые реквизиты, да и вообще...
		ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.КолонкаПоиска.Доступность = Ложь
	Иначе
		ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.КолонкаПоиска.Доступность = Истина;
	КонецЕсли; 
	Если ТипЗнч(Элемент.ТекущаяСтрока[Колонка.Данные])=Тип("Картинка") Тогда
		Колонка.ЭлементУправления.КнопкаОткрытия = Истина;
		Колонка.ЭлементУправления.УстановитьДействие("Открытие", Новый Действие("ТаблицаОсновноеИзображениеОткрытие"));
	КонецЕсли; 

КонецПроцедуры

Процедура ТаблицаНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ТипЗнч(ЭлементыФормы.Таблица.ТекущаяСтрока._ТаблицаВыбораНоменклатуры)=Тип("ТаблицаЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения                    = ВидСравнения.ВСписке;
		Спис = Новый СписокЗначений;
		Спис.ЗагрузитьЗначения(ЭлементыФормы.Таблица.ТекущаяСтрока._ТаблицаВыбораНоменклатуры.ВыгрузитьКолонку("Ссылка"));
		Спис.Добавить(Элемент.Значение);
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение                            = Спис;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
		ФормаВыбора.Открыть();
		
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельТаблицыНазначитьШаблонСтрокам(Кнопка)
	Перем ВыбШаблон;
	Если ВвестиЗначение(ВыбШаблон, "Выберите шаблон для строк", Тип("СправочникСсылка.Номенклатура")) Тогда
		Для каждого Стр Из ЭлементыФормы.Таблица.ВыделенныеСтроки Цикл
			Стр._Шаблон = ВыбШаблон;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельТаблицыУмножитьЗначенияВКолонке(Кнопка)
	ИмяКол = ЭлементыФормы.Таблица.ТекущаяКолонка.Имя;
	Множитель = 1;
	Если ВвестиЧисло(Множитель, "Введите множитель") Тогда
		Для каждого Стр Из Таблица Цикл
			Попытка
				ИсходноеЧисло = ПрочитатьЧислоF(Стр, ИмяКол)
			Исключение
				Продолжить
			КонецПопытки;
			Стр[ИмяКол] = ИсходноеЧисло*Множитель;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьДоступностьНаШаге(НомерШага=0)
	Кнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
	КнопкаЗагрузки = ?(Кнопки.Найти("ОК")=Неопределено, Кнопки.ЗагрузитьДокумент, Кнопки.ОК);

	Если НомерШага = 0 Тогда // ещё не выбран файл
		ЭлементыФормы.ПоляНоменклатуры.Видимость = Ложь;
		ЭлементыФормы.ПанельЗагрузки.Видимость = Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость = Ложь;
		ЭлементыФормы.Контрагент.Видимость = Ложь;
		ЭлементыФормы.Контрагент.Доступность = Ложь;
		
		КнопкаЗагрузки.Доступность = Ложь;
	//ИначеЕсли НомерШага = 1 Тогда // выбрали файл, теперь надо назначить колонки и поискать номенклатуру
	//	ЭлементыФормы.ПанельПоиска.Видимость = Истина;
	//	ЭлементыФормы.ПанельЗагрузки.Видимость = Ложь;
	//	ЭлементыФормы.НадписьКонтрагент.Видимость = Ложь;
	//	ЭлементыФормы.Контрагент.Видимость = Ложь;
	//	ЭлементыФормы.Контрагент.Доступность = Ложь;
	//	КнопкаЗагрузки.Доступность = Ложь;
	//ИначеЕсли НомерШага = 2 Тогда // номенклатура поискана. Теперь надо создать ненайденную
	//	ЭлементыФормы.ПанельПоиска.Видимость = Истина;
	//	ЭлементыФормы.ПанельЗагрузки.Видимость = Истина;
	//	КнопкаЗагрузки.Доступность = Ложь;
	Иначе
	//	Если НомерШага = 3 Тогда // все строчки есть в справочнике, теперь можно загружать документы
		ЭлементыФормы.ПоляНоменклатуры.Видимость = Истина;
		ЭлементыФормы.ПанельЗагрузки.Видимость = Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость = Истина;
		ЭлементыФормы.Контрагент.Доступность = Истина;
		ЭлементыФормы.Контрагент.Видимость = Истина;
		КнопкаЗагрузки.Доступность = Истина;
		
		Для каждого Кн Из ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки Цикл
			Кн.Доступность = Истина;
		КонецЦикла;
		Для каждого Кн Из ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.ВыделитьАртикул.Кнопки Цикл
			Кн.Доступность = Истина;
		КонецЦикла;
		ЭлементыФормы.КоманднаяПанельТаблицы.Кнопки.НазначитьШаблонСтрокам.Доступность = Таблица.Колонки.Найти("_Номенклатура")<>Неопределено;
	//Иначе
	//	Сообщить("Неверный номер шага!");
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельТаблицыКолонкаПоиска(Кнопка)
	Стр = ПоляПоиска.Найти(ЭлементыФормы.Таблица.ТекущаяКолонка.Данные, "ИмяКолонкиВТаблице");
	Если Стр<>Неопределено Тогда
		ПоляПоиска.Удалить(Стр);
	Иначе
		НовСтр = ПоляПоиска.Добавить();
		НовСтр.ИмяКолонкиВТаблице = ЭлементыФормы.Таблица.ТекущаяКолонка.Данные; // F13 и в таком духе
		НовСтр.ПредставлениеКолонкиПоиска = ЭлементыФормы.Таблица.ТекущаяКолонка.Имя;
		НовСтр.РеквизитПоиска = НовСтр.ПредставлениеКолонкиПоиска;
	КонецЕсли;
	ЭтотОбъект.нНайтиВБазе = Ложь;
КонецПроцедуры

Процедура ПоляПоискаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Список = Новый СписокЗначений;
	Для каждого Кол Из ЭлементыФормы.Таблица.Колонки Цикл
		Если Кол.Имя<>Кол.Данные И Лев(Кол.Имя,1)<>"_" Тогда
			Список.Добавить(Кол.Имя);
		КонецЕсли;
	КонецЦикла; 

	ЭлементыФормы.ПоляПоиска.Колонки.ПредставлениеКолонкиПоиска.ЭлементУправления.СписокВыбора = Список;
КонецПроцедуры


Процедура ТаблицаОсновноеИзображениеОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаКартинок = ПолучитьФорму("ФормаКартинок");
		Если Таблица.Колонки.Найти("_Номенклатура")<>Неопределено И ТипЗнч(ЭлементыФормы.Таблица.ТекущаяСтрока["_Номенклатура"]) =Тип("СправочникСсылка.Номенклатура") Тогда
			Если Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ОсновноеИзображение")<>Неопределено И НЕ ЭлементыФормы.Таблица.ТекущаяСтрока["_Номенклатура"].ОсновноеИзображение.Пустая() Тогда
				ФормаКартинок.ЭлементыФормы.ПолеКартинкиБазы.Картинка = ЭлементыФормы.Таблица.ТекущаяСтрока["_Номенклатура"].ОсновноеИзображение.Хранилище.Получить();
			КонецЕсли; 
		КонецЕсли;
		ФормаКартинок.ЭлементыФормы.ПолеКартинкиФайла.Картинка = ЭлементыФормы.Таблица.ТекущаяСтрока[ЭлементыФормы.Таблица.ТекущаяКолонка.Данные];
		ФормаКартинок.Открыть();
	КонецЕсли; 
КонецПроцедуры

Процедура флСчитыватьКартинкиПриИзменении(Элемент)
	Если флСчитыватьКартинки И не КартинкиСчитаны И Не ПустаяСтрока(ПутьКФайлу) Тогда
		ПрочитатьКартинки()
	КонецЕсли; 
КонецПроцедуры

Процедура ТаблицаОчистка(Элемент, СтандартнаяОбработка)
	Если (ЭлементыФормы.Таблица.ТекущаяКолонка.Данные = "_Номенклатура" И ТипЗнч(ЭлементыФормы.Таблица.ТекущаяСтрока._ТаблицаВыбораНоменклатуры)<>Тип("ТаблицаЗначений"))
			ИЛИ ЭлементыФормы.Таблица.ТекущаяКолонка.Данные = "_Шаблон" Тогда
		Если ЗначениеЗаполнено(Элемент.Значение) И Вопрос("Точно хотите очистить значение?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;  // не очищаем!
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ГрупповаяОбработкаНажатие(Элемент)
	Если Метаданные.Обработки.Найти("ГрупповаяОбработкаСправочниковИДокументов")<>Неопределено Тогда
		Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
			НайтиНажатие(Неопределено);
			Если Таблица.Колонки.Найти("_Номенклатура")=Неопределено Тогда
				Возврат
			КонецЕсли;
		КонецЕсли;
		
		ФормаОбработки = Обработки.ГрупповаяОбработкаСправочниковИДокументов.ПолучитьФорму();
		// ФормаОбработки.ТипОбъекта = 0; // 0 - справочники. Так и есть
		Строка = ФормаОбработки.ТабличноеПолеВидыОбъектов.Добавить();
		Строка.ИмяТаблицы = Метаданные.Справочники.Номенклатура.Имя;
		Строка.ПредставлениеТаблицы = Метаданные.Справочники.Номенклатура.Синоним;
		
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	""Номенклатура"" КАК Ш_Вид,
			|	""Номенклатура"" КАК Ш_ВидПредставление,
			|	Справочник_Номенклатура.Ссылка КАК Ш_Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Справочник_Номенклатура
			|ГДЕ
			|	Справочник_Номенклатура.Ссылка.ЭтоГруппа = ЛОЖЬ";
		ПостроительЗапроса.ЗаполнитьНастройки();
		ФормаОбработки.ПостроительЗапроса_Отбор = ПостроительЗапроса.Отбор;
		ЭлОтбора = ФормаОбработки.ПостроительЗапроса_Отбор.Добавить("Ш_Ссылка",, "Ссылка");
		ЭлОтбора.Использование = Истина;
		ЭлОтбора.ВидСравнения = ВидСравнения.ВСписке;
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("_Номенклатура"));
		ЭлОтбора.Значение = Список;
		ФормаОбработки.Открыть()
	КонецЕсли; 
КонецПроцедуры

Процедура ПоляНоменклатурыПриАктивизацииЯчейки(Элемент)
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекКолонка = Элемент.ТекущаяКолонка;
	Если ТекКолонка = Неопределено ИЛИ ТекСтрока = Неопределено Тогда // Тупая 1с-ка!!! Как может быть активизация ячейки, и при этом не быть активной колонки!!! А ведь бывает, чёрт.
		Возврат
	КонецЕсли;
	
	Если ТекКолонка.Имя = "Значение" Тогда
		Если ТекСтрока.СпособЗагрузки = "значение" Тогда
			Если ТипЗнч(ТекСтрока.Метаданные)=Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
				ТекКолонка.ЭлементУправления.ОграничениеТипа = ТекСтрока.Метаданные.ТипЗначения;
			ИначеЕсли ТипЗнч(ТекСтрока.Метаданные)=Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				ТекКолонка.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Валюты");
			Иначе
				ТекКолонка.ЭлементУправления.ОграничениеТипа = ТекСтрока.Метаданные.Тип;
				Если ТекСтрока.Реквизит = "Родитель" Тогда
					ТекКолонка.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
				Иначе
					ТекКолонка.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
				КонецЕсли; 
			КонецЕсли; 
			ТекКолонка.ЭлементУправления.ВыбиратьТип = ТекКолонка.ЭлементУправления.ОграничениеТипа.Типы().Количество()>1;
			//Если Элемент.ТекущаяКолонка.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("Булево") Тогда
			//	Элемент.ТекущаяКолонка.ДанныеФлажка = Элемент.ТекущаяКолонка.Данные;
			//Иначе
			//	Элемент.ТекущаяКолонка.ДанныеФлажка = "";
			//КонецЕсли; 
			Если Не ТекКолонка.ЭлементУправления.ВыбиратьТип И Не ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
				ТекСтрока.Значение = ТекКолонка.ЭлементУправления.ОграничениеТипа.ПривестиЗначение();
			КонецЕсли;
		ИначеЕсли ТекСтрока.СпособЗагрузки = "из реквизита" Тогда
			ТекКолонка.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			ТекКолонка.ЭлементУправления.ВыбиратьТип = Ложь;
			ТекКолонка.ЭлементУправления.РедактированиеТекста = Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	Элемент.Колонки.Значение.ЭлементУправления.Доступность = ТекСтрока.СпособЗагрузки="значение" ИЛИ ТекСтрока.СпособЗагрузки="из реквизита"
															ИЛИ ТипЗнч(ТекСтрока.Метаданные)=Тип("СправочникСсылка.ТипыЦенНоменклатуры")
															ИЛИ ТекСтрока.Реквизит = "Цена";
//	Элемент.Колонки.СпособЗагрузки.ЭлементУправления.Доступность = ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока.СпособЗагрузки<>"из колонки";
КонецПроцедуры

                                      //строка         ОписаниеТипов
Функция ПолучитьДеревоМетаданныхПоТипу(ИмяСправочника, ДопустимыеТипы, ИсключаяРеквизит = "", Строки=Неопределено, Уровень = 0)
	Если Уровень >4 Тогда
		Возврат Неопределено 
	КонецЕсли; 
	Если Строки = Неопределено Тогда
		Дерево = Новый ДеревоЗначений;
		Дерево.Колонки.Добавить("ИмяРеквизита");
		Строки = Дерево.Строки;
	КонецЕсли;
	
	МетаСправочника = Метаданные.Справочники[ИмяСправочника];
	Для каждого Рекв Из МетаСправочника.Реквизиты Цикл
		Если Рекв.Имя = ИсключаяРеквизит Тогда
			Продолжить
		КонецЕсли; 
		Если ДопустимыеТипы.СодержитТип(Рекв.Тип.Типы()[0]) Тогда
			НовСтр = Строки.Добавить();
			НовСтр.ИмяРеквизита = Рекв.Имя;
		Иначе 
			МетОбъекта = Метаданные.НайтиПоТипу(Рекв.Тип.Типы()[0]);
			Если МетОбъекта <> Неопределено И Метаданные.Справочники.Содержит(МетОбъекта) Тогда
				НовСтр = Строки.Добавить();
				НовСтр.ИмяРеквизита = Рекв.Имя;
				ПолучитьДеревоМетаданныхПоТипу(МетОбъекта.Имя, ДопустимыеТипы, Сред(ИсключаяРеквизит, Найти(ИсключаяРеквизит, ".")+1), НовСтр.Строки, Уровень+1);
				Если НовСтр.Строки.Количество()=0 Тогда
					Строки.Удалить(НовСтр);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	// таблица реквизитов
	Если МетаСправочника.ДлинаНаименования>0 И ДопустимыеТипы.СодержитТип(Тип("Строка"))Тогда
		НовСтр = Строки.Добавить();
		НовСтр.ИмяРеквизита = "Наименование";
	КонецЕсли; 
		
	Если МетаСправочника.ДлинаКода>0 Тогда
		Если (МетаСправочника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число И ДопустимыеТипы.СодержитТип(Тип("Число")))
			ИЛИ (МетаСправочника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка И ДопустимыеТипы.СодержитТип(Тип("Строка")))
			Тогда
				НовСтр = Строки.Добавить();
				НовСтр.ИмяРеквизита = "Код";
		КонецЕсли; 
	КонецЕсли;
	
	Если ДопустимыеТипы.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		НовСтр = Строки.Добавить();
		НовСтр.ИмяРеквизита = "<Номенклатура>";
	КонецЕсли;
	
// здесь добавим типы подчинённых справочников.
	Для каждого Стр Из ПоляНоменклатуры.Строки Цикл
		Если ТипЗнч(Стр.Метаданные) = Тип("Строка") // Группа справочник/регистр
			И Стр.СпособЗагрузки = "из колонки"
			// И ещё проверить, что колонка назначена....
			И Найти(Стр.Метаданные, "Метаданные.Справочники.")<>Неопределено // это справочник
			И ДопустимыеТипы.СодержитТип(Тип("СправочникСсылка."+Вычислить(Стр.Метаданные).Имя))	// тип совпадает
				Тогда
			Для каждого Подстр Из Стр.Строки Цикл
				НовСтр = Строки.Добавить();
				НовСтр.ИмяРеквизита = ПодСтр.Реквизит;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 
	
// надо ещё свойства потом добавить....
	
	Строки.Сортировать("ИмяРеквизита");
	Если Уровень = 0 Тогда
		Возврат Дерево;
	КонецЕсли; 
КонецФункции

Процедура ПоляНоменклатурыЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока.СпособЗагрузки = "значение" Тогда
		Если ТипВсеСсылки.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда // это ссылка
			Если ТипЗнч(ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока.Метаданные)=Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
				СтандартнаяОбработка = Ложь;
				ФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(,Элемент);
				ФормаВыбора.ПараметрОтборПоВладельцу = ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока.Метаданные;
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
				ФормаВыбора.Открыть();
				//Элемент.ТекущаяКолонка.ЭлементУправления.ОграничениеТипа = Элемент.ТекущаяСтрока.Метаданные.ТипЗначения;
			Иначе
				// стандартый выбор
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока.СпособЗагрузки = "из реквизита" Тогда
// здесь надо сформировать список, соответствующий типу значения...
		СтандартнаяОбработка = Ложь;

// полный путь реквизита
		ТекСтрока = ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока;
		ПолныйПутьРеквизита = "";
		Пока ТекСтрока<>Неопределено Цикл
			ПолныйПутьРеквизита = ТекСтрока.Реквизит + "." + ПолныйПутьРеквизита;
			ТекСтрока = ТекСтрока.Родитель;
		КонецЦикла; 

		Дерево = ПолучитьДеревоМетаданныхПоТипу("Номенклатура", ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока.Метаданные.Тип, ПолныйПутьРеквизита);
// ВРЕМЕННО удалим подуровни
		ц = 0;
		Пока ц< Дерево.Строки.Количество() Цикл
			Если Дерево.Строки[ц].Строки.Количество()>0 Тогда
				Дерево.Строки.Удалить(Дерево.Строки[ц]);
			Иначе
				ц = ц+1;
			КонецЕсли; 
		КонецЦикла; 
		
// найдём текущую строку
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Путь = СтрЗаменить(Элемент.Значение, ".", Символы.ПС);
			ТекСтроки = Дерево.Строки;
			Для ц=1 По СтрЧислоСтрок(Путь) Цикл
				ТекСтр = ТекСтроки.Найти(СтрПолучитьСтроку(Путь, ц));
				Если ТекСтр=Неопределено Тогда // если такой строки вообще нет, мало ли какая абракадабра здесь написана.
					Прервать;
				КонецЕсли; 
				ТекСтроки = ТекСтр.Строки;
			КонецЦикла; 
		КонецЕсли; 
		
		Если ТекСтр=Неопределено Тогда
			ВыбСтрока = Дерево.ВыбратьСтроку("Выберите реквизит");
		Иначе
			ВыбСтрока = Дерево.ВыбратьСтроку("Выберите реквизит", ТекСтр);
		КонецЕсли;
		
		Если ВыбСтрока <> Неопределено Тогда
			ПолнаяСтрока = "";
			Пока ВыбСтрока <> Неопределено Цикл
				ПолнаяСтрока = ВыбСтрока.ИмяРеквизита+"."+ПолнаяСтрока;
				ВыбСтрока = ВыбСтрока.Родитель;
			КонецЦикла;
			Элемент.Значение = Лев(ПолнаяСтрока, СтрДлина(ПолнаяСтрока)-1); // за вычетом последней точки
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры


Процедура ПоляНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
// добавить раскраску: розовый фон для незаполненных обязательных, и светло зелёный для заполненных
	ЦветНезаполненный = WebЦвета.СветлоРозовый;
	ЦветЗаполненный = WebЦвета.СветлоЗеленый;
	
	Если СтрокаКЗагрузкеНастроена(ДанныеСтроки) Тогда
		ОформлениеСтроки.ЦветФона = ЦветЗаполненный;
	ИначеЕсли Найти(ОбязательныеПоля, ДанныеСтроки.Реквизит)>0 И ДанныеСтроки.Родитель = Неопределено Тогда // обязательное значение не заполнено
		ОформлениеСтроки.ЦветФона = ЦветНезаполненный;
	КонецЕсли; 
	
	Если ДанныеСтроки.СпособЗагрузки = "значение" Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
		ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;
	ИначеЕсли ДанныеСтроки.СпособЗагрузки = "из реквизита" Тогда
	Иначе
		Если ТипЗнч(ДанныеСтроки.Метаданные)<>Тип("СправочникСсылка.ТипыЦенНоменклатуры") И ДанныеСтроки.Реквизит <> "Цена" Тогда
			ОформлениеСтроки.Ячейки.Значение.УстановитьТекст("");
		КонецЕсли; 
		
		Если ДанныеСтроки.СпособЗагрузки = "из колонки" Тогда // заполняем из колонки
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
		ИначеЕсли ДанныеСтроки.СпособЗагрузки = "не использовать" Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,,,,Истина);
			ОформлениеСтроки.ЦветТекста = WebЦвета.СветлоГрифельноСерый;
		КонецЕсли; 
	КонецЕсли;
	
 	ОформлениеСтроки.Ячейки.Реквизит.УстановитьТекст(ПолучитьНаименованиеРеквизита(ДанныеСтроки));
	Если ДанныеСтроки.Строки.Количество()>0 И ДанныеСтроки.СпособЗагрузки = "из колонки" Тогда
		ОформлениеСтроки.Ячейки.СпособЗагрузки.УстановитьТекст("");
	КонецЕсли; 
	Если ДанныеСтроки.Родитель = Неопределено ИЛИ ДанныеСтроки.СпособЗагрузки = "не использовать" 
		ИЛИ (Не ЗначениеЗаполнено(ДанныеСтроки.Значение) И Не ЗначениеЗаполнено(ДанныеСтроки.ДанныеКолонки) И НЕ СтрокаКЗагрузкеНастроена(ДанныеСтроки)) Тогда
		ОформлениеСтроки.Ячейки.Поиск.ОтображатьФлажок = Ложь;
	КонецЕсли; 
КонецПроцедуры

Процедура ПоляНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//ПоляНоменклатуры.Строки.Сортировать("СпособЗагрузки,Реквизит", Истина);
	СортироватьПоляНоменклатуры();
КонецПроцедуры

Процедура ПоляНоменклатурыСпособЗагрузкиПриИзменении(Элемент)
	ТекСтрока = ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока;
	Если ТекСтрока.СпособЗагрузки <> "из колонки" Тогда
		Если Не ПустаяСтрока(ТекСтрока.ДанныеКолонки) Тогда // значит была назначена колонка
			Колонка = ЭлементыФормы.Таблица.Колонки.Найти(ТекСтрока.Реквизит);
			Колонка.ТекстШапки = Колонка.Данные;
			Колонка.Имя = Колонка.Данные;
			Колонка.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки; // серый
			Колонка.ШрифтШапки = Новый Шрифт(Колонка.ШрифтШапки,,,Ложь);
			
			ТекСтрока.ДанныеКолонки = ""
		КонецЕсли;
		ТекСтрока.Строки.Очистить();
	Иначе 
		МетаданныеОбъекта = Неопределено;
		Если ТипЗнч(ТекСтрока.Метаданные) = Тип("ОбъектМетаданных") ИЛИ ТипЗнч(ТекСтрока.Метаданные) = Тип("Строка") Тогда // или реквизит, или сам справочник/регистр
			МетаданныеОбъекта = ТекСтрока.Метаданные;
		ИначеЕсли ТипЗнч(ТекСтрока.Метаданные) = Тип("Структура") Тогда // Код, Владелец, Родитель, и т.д.
			Если Найти("Родитель,Владелец", ТекСтрока.Реквизит)>0 Тогда
				МетаданныеОбъекта = ТекСтрока.Метаданные;
			КонецЕсли; 
		КонецЕсли;
		
		Если МетаданныеОбъекта <> Неопределено Тогда
			ЗаполнитьСтрокиВетки(ТекСтрока, МетаданныеОбъекта, ТекСтрока.Уровень());
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьМенюКолонок();
КонецПроцедуры

Процедура ВерхняяКоманднаяПанельСохранитьЗначения(Кнопка)
	СтруктураНастройки = Новый Структура("ИмяОбъекта,НаименованиеНастройки,СохраненнаяНастройка", Метаданные().Имя);
	
	СкрытьНеназначенные = Истина;
	Для каждого Кол Из ЭлементыФормы.Таблица.Колонки Цикл
		Если Кол.Видимость И (Кол.Имя = Кол.Данные) Тогда
			СкрытьНеназначенные = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	СтруктураНастройки.Вставить("СохраненнаяНастройка", Новый Структура("ПоляНоменклатуры,ПоляПоиска,нКолонкаЛишнихСтрок,нКолонкаАртикула,СкрытьНеназначенные,нНайтиВБазе,флПерезаписатьСуществующуюНоменклатуру,флНеЗаменятьПустымиЗначениями,Контрагент,ТипДокумента",
		ПоляНоменклатуры, ПоляПоиска, нКолонкаЛишнихСтрок, нКолонкаАртикула, СкрытьНеназначенные, нНайтиВБазе, флПерезаписатьСуществующуюНоменклатуру,флНеЗаменятьПустымиЗначениями,Контрагент,ТипДокумента));
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
// ????????????	
	//Если Результат <> Неопределено Тогда
	//	Объект.мТекущаяНастройка = Результат;
	//Иначе
	//	Объект.мТекущаяНастройка = СтруктураНастройки;
	//КонецЕсли
КонецПроцедуры

Процедура ВерхняяКоманднаяПанельВосстановитьЗначения(Кнопка)
	СтруктураНастройки = Новый Структура("ИмяОбъекта,НаименованиеНастройки,СохраненнаяНастройка", Метаданные().Имя);
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	Если Результат <> Неопределено Тогда
		ТипДокумента = Результат.СохраненнаяНастройка.ТипДокумента;
		ТипДокументаПриИзменении(ЭлементыФормы.ТипДокумента);
		
		флПерезаписатьСуществующуюНоменклатуру = Результат.СохраненнаяНастройка.флПерезаписатьСуществующуюНоменклатуру;
		флПерезаписатьСуществующуюНоменклатуруПриИзменении(ЭлементыФормы.флПерезаписатьСуществующуюНоменклатуру);
		
		флНеЗаменятьПустымиЗначениями = Результат.СохраненнаяНастройка.флНеЗаменятьПустымиЗначениями;
		Контрагент = Результат.СохраненнаяНастройка.Контрагент;
		
// проколбасим всё
		ЗаполнитьДерево(ЭтотОбъект.ПоляНоменклатуры, Результат.СохраненнаяНастройка.ПоляНоменклатуры, "Реквизит", "Метаданные");
		СортироватьПоляНоменклатуры();
		ЗаполнитьОформленияКолонок();
		ЗаполнитьМенюКолонок();
		
//		ПоляПоиска = Результат.СохраненнаяНастройка.ПоляПоиска;
// не присваиваем напрямую, потому что идёт разработка, имена колонок могут меняться...
		ПоляПоиска.Очистить(); 
		Для каждого СохрСтр Из Результат.СохраненнаяНастройка.ПоляПоиска Цикл
			Стр = ПоляПоиска.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, СохрСтр);
		КонецЦикла;
		
		Если Не ПустаяСтрока(Результат.СохраненнаяНастройка.нКолонкаАртикула) Тогда
			ВыделитьАртикул(ЭлементыФормы.Таблица.Колонки[Результат.СохраненнаяНастройка.нКолонкаАртикула], Истина); // выделяем слева
		КонецЕсли;
		
		Если Результат.СохраненнаяНастройка.нНайтиВБазе Тогда
			НайтиНажатие(ЭлементыФормы.Найти);
		КонецЕсли; // сначала поиск, потом удаление строк. Так как может быть удаление назначено по колонке "Номенклатура в 1с",
		// а она появляется только после поиска
		УдалитьЛишниеСтроки(Результат.СохраненнаяНастройка.нКолонкаЛишнихСтрок, Ложь); // не задавать вопросов
		Если Результат.СохраненнаяНастройка.СкрытьНеназначенные Тогда
			СкрытьНеназначенныеКолонкиНажатие(Неопределено);
		КонецЕсли; 
	Иначе
		// заполнение по-умолчанию... Или ничего не делать
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьОформленияКолонок() // по данным из ПоляНоменклатуры
	Для каждого Колонка Из ЭлементыФормы.Таблица.Колонки Цикл
		Если Лев(Колонка.Данные,1) <> "_" Тогда // это служебная колонка
			ОтменитьНазначениеКолонки(Колонка);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьУровень(ПоляНоменклатуры.Строки);
КонецПроцедуры

// рекурсивное заполнение по дереву:
Процедура ЗаполнитьУровень(Строки, ХозяинИмя="", ХозяинСиноним="")
	Для каждого Стр Из Строки Цикл
		НаименованиеРеквизита = ПолучитьНаименованиеРеквизита(Стр);
		Если Стр.СпособЗагрузки = "из колонки" И Не ПустаяСтрока(Стр.ДанныеКолонки) Тогда
			Колонка = ЭлементыФормы.Таблица.Колонки.Найти(Стр.ДанныеКолонки);
			Если Колонка=Неопределено Тогда
				Для каждого Кол Из ЭлементыФормы.Таблица.Колонки Цикл
					Если Кол.Данные = Стр.ДанныеКолонки Тогда
						Колонка = Кол;
						Прервать
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			Если Колонка=Неопределено Тогда //бывает = Неопределено, когда в файле меньше колонок, чем сохранено
				Стр.ДанныеКолонки = ""; // ошибочная настройка, нет такой колонки.
			Иначе
				Если Колонка.Имя <> Колонка.Данные Тогда // это уже назначенная колонка
					ТекстШапки = Колонка.ТекстШапки+";   "+ХозяинСиноним+НаименованиеРеквизита;
				Иначе
					ТекстШапки = ХозяинСиноним+НаименованиеРеквизита;
				КонецЕсли;                         // отрезаем лидирующее _
				УстановитьНазначениеКолонки(Колонка, ХозяинИмя+Стр.Реквизит, ТекстШапки);
			КонецЕсли; 
		КонецЕсли;
		ЗаполнитьУровень(Стр.Строки, ХозяинИмя+Стр.Реквизит+".", ХозяинСиноним+НаименованиеРеквизита+".");
	КонецЦикла; 
КонецПроцедуры



Процедура ОтменитьНазначениеКолонки(Колонка)
	Колонка.ТекстШапки = Колонка.Данные;
	Колонка.Имя = Колонка.Данные;
	Колонка.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки; // серый
	Колонка.ШрифтШапки = Новый Шрифт(Колонка.ШрифтШапки,,,Ложь);
КонецПроцедуры
 
Процедура УстановитьНазначениеКолонки(Колонка, Имя, Текст)
	Колонка.Имя = Имя;
	Колонка.ТекстШапки = Текст;
	Колонка.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаФормы; // чёрный
	Колонка.ШрифтШапки = Новый Шрифт(Колонка.ШрифтШапки,,,Истина);
КонецПроцедуры

Процедура ПоляПоискаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭтотОбъект.нНайтиВБазе = Ложь;
КонецПроцедуры

Процедура ПоляНоменклатурыПередРазворачиванием(Элемент, Строка, Отказ)
	Подстроки = Строка.Строки;
	Если Подстроки.Количество()=1 И ПустаяСтрока(Подстроки[0].Реквизит) 
		И ТипЗнч(Строка.Метаданные)=Тип("ОбъектМетаданных") Тогда // а это должно быть так всегда
		Подстроки.Очистить();
		МетаСправочника = Метаданные.НайтиПоТипу(Строка.Метаданные.Тип.Типы()[0]);
		ЗаполнитьСтрокиВетки(Строка, МетаСправочника);
	КонецЕсли; 
КонецПроцедуры

Процедура ТаблицаПриАктивизацииКолонки(Элемент)
	Если ЭлементыФормы.Таблица.ТекущаяКолонка=Неопределено Тогда
		ЭлементыФормы.НадписьРасшифровкаНазначенияКолонки.Заголовок = "";
	Иначе
		ЭлементыФормы.НадписьРасшифровкаНазначенияКолонки.Заголовок = ЭлементыФормы.Таблица.ТекущаяКолонка.ТекстШапки;
	КонецЕсли; 
КонецПроцедуры

Процедура ПоляНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	//////// Здесь можно добавить Характеристики, Серии, и др. подчинённые справочники.
	//////СписокСправочников = Новый СписокЗначений;
	//////Для каждого Мет Из Метаданные.Справочники Цикл
	//////	Если Мет.Владельцы.Содержит(Метаданные.Справочники.Номенклатура) Тогда
	//////		СписокСправочников.Добавить(Мет);
	//////	КонецЕсли; 
	//////КонецЦикла;
	//////ВыбЭл = СписокСправочников.ВыбратьЭлемент();
	//////Отказ = Истина;
	//////Если ВыбЭл=Неопределено Тогда
	//////Иначе
	//////	НовСтр = ПоляНоменклатуры.Строки.Добавить();
	//////	НовСтр.Метаданные = ВыбЭл.Значение;
	//////	НовСтр.Реквизит = ВыбЭл.Значение.Имя;
	//////	НовСтр.СпособЗагрузки = "из колонки";
	//////	ЗаполнитьСтрокиВетки(НовСтр, НовСтр.Метаданные);
	//////	ПоляНоменклатуры.Строки.Сортировать("СпособЗагрузки,Реквизит", Истина);
	//////	ЗаполнитьМенюКолонок();
	//////КонецЕсли; 
	
// добавляем программно
	Отказ = Истина;
	ТекСтрока = ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока;
	Если (ТекСтрока.Уровень() = 0 ИЛИ ТекСтрока.Уровень() = 1)
		И ТипЗнч(ТекСтрока.Метаданные) = Тип("ОбъектМетаданных")
		И (Метаданные.РегистрыСведений.Содержит(ТекСтрока.Метаданные) // это регистр сведений
		ИЛИ Метаданные.Справочники.Содержит(ТекСтрока.Метаданные)) Тогда // это справочник
		Род = ?(ТекСтрока.Уровень() = 0, ТекСтрока, ТекСтрока.Родитель);
		Если Род.СпособЗагрузки <> "из колонки" Тогда
			Предупреждение("Можно добавлять только при способе загрузки ""из колонки"".");
			Возврат
		КонецЕсли;
		ДобавитьЭлемент(ТекСтрока);
		ЗаполнитьМенюКолонок();
	Иначе
		Предупреждение("Можно добавлять только в подчинённых справочниках и штрихкодах.");
	КонецЕсли; 
КонецПроцедуры

Процедура флПерезаписатьСуществующуюНоменклатуруПриИзменении(Элемент)
	ЭлементыФормы.флНеЗаменятьПустымиЗначениями.Видимость = Элемент.Значение;
КонецПроцедуры

Процедура ПоляНоменклатурыПередУдалением(Элемент, Отказ)
	ТекСтрока = ЭлементыФормы.ПоляНоменклатуры.ТекущаяСтрока;
	Если ТекСтрока.Уровень() = 1 
		И ТипЗнч(ТекСтрока.Метаданные) = Тип("ОбъектМетаданных")
		И (Метаданные.РегистрыСведений.Содержит(ТекСтрока.Метаданные) // это регистр сведений
		ИЛИ Метаданные.Справочники.Содержит(ТекСтрока.Метаданные)) Тогда // это справочник
			// можно удалить
	Иначе
		Отказ = Истина;
		Предупреждение("Можно удалять только в подчинённых справочниках и штрихкодах.");
	КонецЕсли;
КонецПроцедуры

Процедура ПоляНоменклатурыПослеУдаления(Элемент)
	ЗаполнитьМенюКолонок();
КонецПроцедуры

Процедура ТипДокументаПриИзменении(Элемент)
	ПерезаполнитьРеквизитыТЧ();
	//ПоляНоменклатуры.Строки.Сортировать("СпособЗагрузки,Реквизит", Истина);
	СортироватьПоляНоменклатуры();
	ЗаполнитьМенюКолонок()
КонецПроцедуры

// Сортируются так:
// "не использовать" в самом конце
// Далее по алфавиту.
// <Товары> - в самом низу, но выше, чем "не использовать"
Процедура СортироватьПоляНоменклатуры()
	Если ПоляНоменклатуры.Колонки.Найти("ПолеСортировки")=Неопределено Тогда
		ПоляНоменклатуры.Колонки.Добавить("ПолеСортировки");
	КонецЕсли;
	ЗаполнитьПолеСортировки(ПоляНоменклатуры.Строки);
	ПоляНоменклатуры.Строки.Сортировать("ПолеСортировки,Реквизит", Истина);
КонецПроцедуры

Процедура ЗаполнитьПолеСортировки(Строки)
	Для каждого Стр Из Строки Цикл
		Стр.ПолеСортировки = ?(Стр.СпособЗагрузки="не использовать", "1", "0")
			+ ?(Лев(Стр.Реквизит, 1)="<", 
					?(Стр.Реквизит="<Товары>", "я", Сред(Стр.Реквизит, 2,1)),
					Лев(Стр.Реквизит, 1));
		ЗаполнитьПолеСортировки(Стр.Строки);
	КонецЦикла; 
КонецПроцедуры

Процедура ПоляНоменклатурыСпособЗагрузкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Спис = Новый СписокЗначений;
	Спис.Добавить("значение");// - указано значение 
//	Спис.Добавить("значение индивидуальное"); // значение указывается для каждой строчки отдельно
	Спис.Добавить("из колонки"); // - есть назначенная колонка, загруженная из файла
	Спис.Добавить("из реквизита"); // - копируется из другого реквизита номенклатуры
	Спис.Добавить("из шаблона");
	Спис.Добавить("не использовать");// - не использовать в меню для назначения колонки
	Элемент.СписокВыбора = Спис;
КонецПроцедуры

Процедура ПоляПоискаПредставлениеКолонкиПоискаПриИзменении(Элемент)
	ЭлементыФормы.ПоляПоиска.ТекущиеДанные.ИмяКолонкиВТаблице = ПолучитьИмяЗаданнойКолонки(Элемент.Значение);
КонецПроцедуры

флНеЗаменятьПустымиЗначениями = Истина;

ДействиеНазначитьИмяКолонке = Новый Действие("НазначитьИмяКолонке");

ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.УстановитьСтроку(
"<TypeDescription xmlns=""http://v8.1c.ru/8.1/data/core"">
 |      <TypeSet xmlns:cc=""http://v8.1c.ru/8.1/data/enterprise/current-config"">cc:AnyRef</TypeSet>
 |</TypeDescription>");
ТипВсеСсылки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);



КартинкиСчитаны = Ложь;