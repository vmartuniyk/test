Перем Интервалы Экспорт;


Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


Функция СведенияОВнешнейОбработке() Экспорт
	РегистрационныеДанные = Новый Структура;

	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	ДобавитьКоманду(Команды, "SubSys: Рабочее место менеджера по закупкам", "ОткрытиеФормы", "ОткрытиеФормы", , );


	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Назначение", "");
	РегистрационныеДанные.Вставить("Наименование", "SubSys: Рабочее место менеджера по закупкам");
	РегистрационныеДанные.Вставить("Версия", "25-07-2010");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
	РегистрационныеДанные.Вставить("Информация", "");
	РегистрационныеДанные.Вставить("Команды", Команды);

	Возврат РегистрационныеДанные;

КонецФункции
Функция ПолучитьФорматДаты(Дата)
	Перем ТекстВозврата;
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""гггг 'г.'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""к 'квартал'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""ММММ""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ""");
	КонецЕсли;

	Возврат ТекстВозврата;
КонецФункции


Процедура ПрибавитьПериод(ТочкаОтсчета, Периодичность)
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 12);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 6);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ТочкаОтсчета = ТочкаОтсчета + 60 * 60 * 24 * 10;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТочкаОтсчета = ТочкаОтсчета + 60 * 60 * 24 * 7;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ТочкаОтсчета = ТочкаОтсчета + 60 * 60 * 24;
	КонецЕсли;

КонецПроцедуры


Функция ОпределитьНачалоИнтервала(ДатаОпределения, Периодичность)
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(ДатаОпределения);


	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(ДатаОпределения);
	КонецЕсли;

КонецФункции


Функция ОпределитьКонецИнтервала(ДатаОпределения, Периодичность)
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(ДатаОпределения);


	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(ДатаОпределения);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(ДатаОпределения);
	КонецЕсли;

КонецФункции


Функция ОбновитьИнтервал(Параметры) Экспорт
	ДатаНач = Параметры.ДатаНач;
	ДатаКон = Параметры.ДатаКон;
	Периодичность = Параметры.Периодичность;
	КоличествоПериодовАнализа = Параметры.КоличествоПериодовАнализа;

	КоличествоПериодовАнализа = 0;

	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата", Неопределено, Неопределено, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Интервалы.Колонки.Добавить("КонецИнтервала", Новый ОписаниеТипов("Дата", Неопределено, Неопределено, Новый КвалификаторыДаты(ЧастиДаты.Дата)));

	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	КонецЕсли;

	ДатаНач = ОпределитьНачалоИнтервала(ДатаНач, Периодичность);

	ТочкаОтсчета = ДатаНач;
	Если ТочкаОтсчета < ДатаКон Тогда
		Пока ТочкаОтсчета <= ДатаКон Цикл
			НачалоИнтервала = ОпределитьНачалоИнтервала(ТочкаОтсчета, Периодичность);
			КонецИнтервала = ОпределитьКонецИнтервала(ТочкаОтсчета, Периодичность);

			Стр = Интервалы.Добавить();
			Стр.НачалоИнтервала = НачалоИнтервала;
			Стр.КонецИнтервала = КонецИнтервала;

			Если НачалоИнтервала = ОпределитьНачалоИнтервала(ДатаКон, Периодичность) Тогда
				РазницаДнейВПериоде = КонецИнтервала - НачалоИнтервала;
				ДнейСНачала = КонецДня(ДатаКон) - ?(НачалоИнтервала < НачалоДня(ДатаНач), НачалоДня(ДатаНач), НачалоИнтервала);

				Вычислим = ДнейСНачала / РазницаДнейВПериоде;

				КоличествоПериодовАнализа = КоличествоПериодовАнализа + Вычислим;
			Иначе
				КоличествоПериодовАнализа = КоличествоПериодовАнализа + 1;
			КонецЕсли;

			ПрибавитьПериод(ТочкаОтсчета, Периодичность);
		КонецЦикла;
	КонецЕсли;

	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("Интервалы", Интервалы);
	ПараметрыВозврата.Вставить("КоличествоПериодовАнализа", КоличествоПериодовАнализа);

	Возврат ПараметрыВозврата;

КонецФункции


Функция ИнициализацияПостроителяОтчета(Параметры) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗапросПоВсемДанным.Номенклатура КАК Номенклатура,
	|	ЗапросПоВсемДанным.Номенклатура.ЭтоГруппа КАК ОбъектЭтоГруппа,
	|	ЗапросПоВсемДанным.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗапросПоВсемДанным.ПроданоВСЕГО) КАК ПроданоВСЕГО,
	|	СУММА(ЗапросПоВсемДанным.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапросПоВсемДанным.ЗаказаноПоставщикам) КАК ЗаказаноПоставщикам,
	|	СУММА(ЗапросПоВсемДанным.РезервыНаСкладах) КАК РезервыНаСкладах,
	|	СУММА(ЗапросПоВсемДанным.ЗаказаноПокупателями) КАК ЗаказаноПокупателями,
	|	СУММА(ЗапросПоВсемДанным.КоличествоПереданные) КАК КоличествоПереданные,
	|	СУММА(ЗапросПоВсемДанным.СредняяПродаваемость) КАК СредняяПродаваемость,
	|	СУММА(ЗапросПоВсемДанным.ПланПродаж) КАК ПланПродаж,
	|	СУММА(ЗапросПоВсемДанным.Ликвидность) КАК Ликвидность,
	|	СУММА(ЗапросПоВсемДанным.КоличествоДнейНаСкладе) КАК КоличествоДнейНаСкладе,
	|	СУММА(ЗапросПоВсемДанным.СредняяПродаваемостьПоДням) КАК СредняяПродаваемостьПоДням,
	|	СУММА(ЗапросПоВсемДанным.ПланПродажПоДням) КАК ПланПродажПоДням,
	|	МАКСИМУМ(ЗапросПоВсемДанным.МинимальноеКоличествоЗапаса) КАК МинимальноеКоличествоЗапаса,
	|	МАКСИМУМ(ЗапросПоВсемДанным.МаксимальноеКоличествоЗапаса) КАК МаксимальноеКоличествоЗапаса
	|{ВЫБРАТЬ
	|	Номенклатура.*}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|		ВложенныйЗапрос.Номенклатура.ЭтоГруппа КАК ОбъектЭтоГруппа,
	|		СУММА(ВложенныйЗапрос.ПроданоВСЕГО) КАК ПроданоВСЕГО,
	|		СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ВложенныйЗапрос.ЗаказаноПоставщикам) КАК ЗаказаноПоставщикам,
	|		СУММА(ВложенныйЗапрос.РезервыНаСкладах) КАК РезервыНаСкладах,
	|		СУММА(ВложенныйЗапрос.ЗаказаноПокупателями) КАК ЗаказаноПокупателями,
	|		СУММА(ВложенныйЗапрос.КоличествоПереданные) КАК КоличествоПереданные,
	|		СУММА(ВложенныйЗапрос.СредняяПродаваемость) КАК СредняяПродаваемость,
	|		СУММА(ВложенныйЗапрос.СредняяПродаваемость * &КоличествоПериодовЗаказа) КАК ПланПродаж,
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.СредняяПродаваемость) > 0
	|				ТОГДА СУММА(ВложенныйЗапрос.КоличествоОстаток) / СУММА(ВложенныйЗапрос.СредняяПродаваемость * &КоличествоПериодовЗаказа)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Ликвидность,
	|		СУММА(ВложенныйЗапрос.КоличествоДнейНаСкладе) КАК КоличествоДнейНаСкладе,
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.КоличествоДнейНаСкладе) > 0
	|				ТОГДА СУММА(ВложенныйЗапрос.ПроданоВСЕГО) / СУММА(ВложенныйЗапрос.КоличествоДнейНаСкладе)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СредняяПродаваемостьПоДням,
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.КоличествоДнейНаСкладе) > 0
	|				ТОГДА СУММА(ВложенныйЗапрос.ПроданоВСЕГО) / СУММА(ВложенныйЗапрос.КоличествоДнейНаСкладе) * &КоличествоДнейЗаказа
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПланПродажПоДням,
	|		МАКСИМУМ(ВложенныйЗапрос.МинимальноеКоличествоЗапаса) КАК МинимальноеКоличествоЗапаса,
	|		МАКСИМУМ(ВложенныйЗапрос.МаксимальноеКоличествоЗапаса) КАК МаксимальноеКоличествоЗапаса
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СпрНоменклатура.Ссылка КАК Номенклатура,
	|			0 КАК ПроданоВСЕГО,
	|			0 КАК КоличествоОстаток,
	|			0 КАК ЗаказаноПоставщикам,
	|			0 КАК СредняяПродаваемость,
	|			0 КАК РезервыНаСкладах,
	|			0 КАК КоличествоПереданные,
	|			0 КАК МинимальноеКоличествоЗапаса,
	|			0 КАК КоличествоДнейНаСкладе,
	|			0 КАК МаксимальноеКоличествоЗапаса,
	|			0 КАК ЗаказаноПокупателями
	|		ИЗ
	|			Справочник.Номенклатура КАК СпрНоменклатура
	|		ГДЕ
	|			СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗначенияТочкиЗаказа.Номенклатура,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			ЗначенияТочкиЗаказа.МинимальноеКоличествоЗапаса,
	|			0,
	|			ЗначенияТочкиЗаказа.МаксимальноеКоличествоЗапаса,
	|			0
	|		ИЗ
	|			РегистрСведений.ТоварныеОграничения КАК ЗначенияТочкиЗаказа
	|		{ГДЕ
	|			ЗначенияТочкиЗаказа.Номенклатура.* КАК Номенклатура}
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			АналитикаНоменклатуры.Номенклатура,
	|			Продажи.КоличествоОборот,
	|			0,
	|			0,
	|			ВЫБОР
	|				КОГДА &КоличествоПериодовАнализа > 0
	|						И Продажи.КоличествоОборот > 0
	|					ТОГДА Продажи.КоличествоОборот / &КоличествоПериодовАнализа
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0
	|		ИЗ
	|			РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНач, &ДатаКон, , ) КАК Продажи
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|				ПО Продажи.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТоварыНаСкладах.Номенклатура,
	|			0,
	|			ТоварыНаСкладах.ВНаличииОстаток,
	|			0,
	|			0,
	|			ТоварыНаСкладах.ВРезервеОстаток,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0
	|		ИЗ
	|			РегистрНакопления.СвободныеОстатки.Остатки(&ДатаОстатков, {(Номенклатура).* КАК Номенклатура}) КАК ТоварыНаСкладах
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТоварыПереданные.Номенклатура,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			ТоварыПереданные.КоличествоОстаток,
	|			0,
	|			0,
	|			0,
	|			0
	|		ИЗ
	|			РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(&ДатаОстатков, {(Номенклатура).* КАК Номенклатура}) КАК ТоварыПереданные
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказыПоставщикамОстатки.Номенклатура,
	|			0,
	|			0,
	|			ЗаказыПоставщикамОстатки.ЗаказаноОстаток,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0
	|		ИЗ
	|			РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, {(Номенклатура).* КАК Номенклатура}) КАК ЗаказыПоставщикамОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказыПокупателей.Номенклатура,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			ЗаказыПокупателей.ЗаказаноОстаток
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Остатки(&ДатаОстатков, {(Номенклатура).* КАК Номенклатура}) КАК ЗаказыПокупателей
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НоменклатураСКолДней.Номенклатура,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			0,
	|			СУММА(НоменклатураСКолДней.КоличествоДнейВПродаже),
	|			0,
	|			0
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РабочиеДниНоменклатуры.Номенклатура КАК Номенклатура,
	|				СУММА(ВЫБОР
	|						КОГДА ИсторияОстатков.ВНаличииКонечныйОстаток > 0
	|								ИЛИ КОНЕЦПЕРИОДА(РабочиеДниНоменклатуры.ДатаГрафика, ДЕНЬ) = КОНЕЦПЕРИОДА(ИсторияОстатков.Период, ДЕНЬ)
	|									И ИсторияОстатков.ВНаличииКонечныйОстаток <= ИсторияОстатков.ВНаличииРасход
	|									И (НЕ ИсторияОстатков.ВНаличииРасход = 0)
	|									И ИсторияОстатков.ВНаличииНачальныйОстаток > 0
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК КоличествоДнейВПродаже
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ДниКалендаря.ДатаГрафика КАК ДатаГрафика,
	|					МАКСИМУМ(ИсторияОстатков.Период) КАК Период,
	|					ИсторияОстатков.Номенклатура КАК Номенклатура
	|				ИЗ
	|					РегистрСведений.КалендарныеГрафики КАК ДниКалендаря
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.ОстаткиИОбороты(&ДатаНач, &ДатаКон, ДЕНЬ, , {(Номенклатура).* КАК Номенклатура}) КАК ИсторияОстатков
	|						ПО (НАЧАЛОПЕРИОДА(ДниКалендаря.ДатаГрафика, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ИсторияОстатков.Период, ДЕНЬ))
	|				ГДЕ
	|					ДниКалендаря.ДатаГрафика <= &ДатаКон
	|					И ДниКалендаря.ДатаГрафика >= &ДатаНач
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ДниКалендаря.ДатаГрафика,
	|					ИсторияОстатков.Номенклатура) КАК РабочиеДниНоменклатуры
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, {(Номенклатура).* КАК Номенклатура}) КАК ИсторияОстатков
	|					ПО РабочиеДниНоменклатуры.Период = ИсторияОстатков.Период
	|						И РабочиеДниНоменклатуры.Номенклатура = ИсторияОстатков.Номенклатура
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РабочиеДниНоменклатуры.Номенклатура) КАК НоменклатураСКолДней
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НоменклатураСКолДней.Номенклатура) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Номенклатура,
	|		ВложенныйЗапрос.Номенклатура.ЭтоГруппа) КАК ЗапросПоВсемДанным
	|{ГДЕ
	|	ЗапросПоВсемДанным.Номенклатура.* КАК Номенклатура,
	|	ЗапросПоВсемДанным.ПроданоВСЕГО КАК КоличествоПродано,
	|	ЗапросПоВсемДанным.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗапросПоВсемДанным.ПланПродаж,
	|	ЗапросПоВсемДанным.Ликвидность}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросПоВсемДанным.Номенклатура,
	|	ЗапросПоВсемДанным.Номенклатура.ЭтоГруппа,
	|	ЗапросПоВсемДанным.Номенклатура.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросПоВсемДанным.Номенклатура.Наименование
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.*}
	|ИТОГИ ПО
	|	Номенклатура ИЕРАРХИЯ
	|{ИТОГИ ПО
	|	Номенклатура.*}";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("КоличествоПериодовАнализа", Параметры.КоличествоПериодовАнализа);
	Запрос.УстановитьПараметр("КоличествоПериодовЗаказа", Параметры.КоличествоПериодовЗаказа);
	Запрос.УстановитьПараметр("КоличествоДнейЗаказа", Параметры.КоличествоДнейЗаказа);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Параметры.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Параметры.ДатаКон));
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

КонецФункции




Функция ОкруглитьЧисло(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону = Истина) Экспорт
	Перем Результат;
	КоличествоИнтервалов = Число / ТочностьОкругления;


	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);

	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда

		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда

			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе


			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции


Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦенНоменклатуры, Дата)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * КурсыСрезПоследних.Курс / КурсыСрезПоследних.Кратность / КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаЦены.Кратность КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			Номенклатура = &Номенклатура
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследних
	|		ПО (КурсыСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (ИСТИНА)");

	Запрос.УстановитьПараметр("ВидЦены", ВидЦенНоменклатуры);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Валюта", ВидЦенНоменклатуры.ВалютаЦены);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			Возврат Выборка.Цена;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции


Процедура ВывестиДеревоВДерево(Дерево, НовоеДерево, Параметры)
	Подчиненные = Дерево.Строки;
	НоваяВетка = НовоеДерево.Строки;

	Для каждого Подчиненный Из Подчиненные Цикл
		Номенклатура = Подчиненный.Номенклатура;

		СтрокаДоб = НоваяВетка.Добавить();
		СтрокаДоб.Номенклатура = Номенклатура;
		СтрокаДоб.Артикул = Номенклатура.Артикул;
		СтрокаДоб.Код = Номенклатура.Код;
		СтрокаДоб.ЭтоГруппа = Номенклатура.ЭтоГруппа;

		СтрокаДоб.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;

		СтрокаДоб.ПроданоВсего = Подчиненный.ПроданоВсего;

		КоличествоОстаток = ?(Подчиненный.КоличествоОстаток = Null, 0, Подчиненный.КоличествоОстаток);
		Если УчитыватьОтданныеНаРеализацию Тогда
			КоличествоПереданные = ?(Подчиненный.КоличествоПереданные = Null, 0, Подчиненный.КоличествоПереданные);
			КоличествоОстаток = КоличествоОстаток + КоличествоПереданные;
		КонецЕсли;

		СтрокаДоб.КоличествоОстаток = КоличествоОстаток;
		СтрокаДоб.ЗаказаноПоставщикам = Подчиненный.ЗаказаноПоставщикам;
		СтрокаДоб.РезервыНаСкладах = Подчиненный.РезервыНаСкладах;
		ЗаказаноПокупателями = ?(Подчиненный.ЗаказаноПокупателями = Null, 0, Подчиненный.ЗаказаноПокупателями);
		СтрокаДоб.ЗаказаноПокупателями = ЗаказаноПокупателями - СтрокаДоб.РезервыНаСкладах;

		СтрокаДоб.КоличествоДнейНаСкладе = Подчиненный.КоличествоДнейНаСкладе;
		СтрокаДоб.СредниеПродажи = ?(Подчиненный.СредняяПродаваемость = Null, 0, Подчиненный.СредняяПродаваемость);
		СтрокаДоб.СредниеПродажиВДень = ?(Подчиненный.СредняяПродаваемостьПоДням = Null, 0, Подчиненный.СредняяПродаваемостьПоДням);

		Если ВариантАнализаИПланирования = 1 Тогда
			ПланПродаж = ?(Подчиненный.ПланПродаж = Null, 0, Подчиненный.ПланПродаж);
		ИначеЕсли ВариантАнализаИПланирования = 2 Тогда
			ПланПродаж = ?(Подчиненный.ПланПродажПоДням = Null, 0, Подчиненный.ПланПродажПоДням);
		КонецЕсли;

		СтрокаДоб.ПланПродаж = ПланПродаж;

		ПланПродаж = СтрокаДоб.ПланПродаж;

		СтрокаДоб.МинимальноеКоличествоЗапаса = Подчиненный.МинимальноеКоличествоЗапаса;
		СтрокаДоб.МаксимальноеКоличествоЗапаса = Подчиненный.МаксимальноеКоличествоЗапаса;

		СтрокаДоб.Ликвидность = Подчиненный.Ликвидность;

		СводныйОстаток = СтрокаДоб.КоличествоОстаток + СтрокаДоб.ЗаказаноПоставщикам - СтрокаДоб.РезервыНаСкладах;

		РекомендуетсяЗаказать = 0;
		Если ПланПродаж > СводныйОстаток Тогда
			РекомендуетсяЗаказать = ПланПродаж - СводныйОстаток + СтрокаДоб.МинимальноеКоличествоЗапаса + СтрокаДоб.ЗаказаноПокупателями;
		КонецЕсли;
		Если СтрокаДоб.МинимальноеКоличествоЗапаса > 0 И ПланПродаж < СводныйОстаток Тогда
			РекомендуетсяЗаказать = СтрокаДоб.МинимальноеКоличествоЗапаса - СводныйОстаток;
			РекомендуетсяЗаказать = ?(РекомендуетсяЗаказать > 0, РекомендуетсяЗаказать, 0);
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.ТочностьОкругления) Тогда
			РекомендуетсяЗаказать = ОкруглитьЧисло(РекомендуетсяЗаказать, Параметры.ТочностьОкругления);
		КонецЕсли;

		СтрокаДоб.РекомендуетсяЗаказать = РекомендуетсяЗаказать;


		Если ЗначениеЗаполнено(Параметры.ВидЦенНоменклатуры) Тогда
			СтрокаДоб.Цена = ПолучитьЦенуНоменклатуры(Номенклатура, Параметры.ВидЦенНоменклатуры, ТекущаяДата());
		КонецЕсли;

		Если ВариантАнализаИПланирования = 1 Тогда
			Если ПорогНормальнойЛиквидности > 0 Тогда
				Если ПорогНормальнойЛиквидности < СтрокаДоб.Ликвидность Тогда
					СтрокаДоб.КоличествоКВозврату = СтрокаДоб.КоличествоОстаток - СтрокаДоб.ПланПродаж;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВариантАнализаИПланирования = 2 Тогда
			Если СтрокаДоб.КоличествоДнейНаСкладе > КоличествоДнейЗаказа Тогда
				Если ПорогНормальнойЛиквидностиВДнях < СтрокаДоб.ЛиквидностьВДнях Тогда
					СтрокаДоб.КоличествоКВозврату = СтрокаДоб.КоличествоОстаток - СтрокаДоб.ПланПродаж;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если СтрокаДоб.КоличествоОстаток > 0 И СтрокаДоб.ПроданоВсего = 0 Тогда
			СтрокаДоб.КоличествоКВозврату = СтрокаДоб.КоличествоОстаток;
		КонецЕсли;

		ВывестиДеревоВДерево(Подчиненный, СтрокаДоб, Параметры);

	КонецЦикла;

КонецПроцедуры


Процедура ПосчитатьИтогиГруппДерева(Дерево) Экспорт
	Подчиненные = Дерево.Строки;

	Для каждого Подчиненный Из Подчиненные Цикл

		Если Подчиненный.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ПосчитатьИтогиГруппДерева(Подчиненный);

		Подчиненный.Заказать = Подчиненный.Строки.Итог("Заказать");

	КонецЦикла;

КонецПроцедуры


Процедура мУстановитьРасчет(Дерево, УстановитьРасчет = 1, ТаблицаКЗаказу) Экспорт
	Подчиненные = Дерево.Строки;
	Для каждого Подчиненный Из Подчиненные Цикл

		Если Подчиненный.ЭтоГруппа Тогда
		Иначе

			Если УстановитьРасчет = 1 Тогда
				Подчиненный.Заказать = Подчиненный.РекомендуетсяЗаказать;
			КонецЕсли;

			Если УстановитьРасчет = 2 Тогда
				Подчиненный.Заказать = 0;
			КонецЕсли;

			Если УстановитьРасчет = 3 Тогда
				СводныйОстаток = Подчиненный.КоличествоОстаток + Подчиненный.Заказано - Подчиненный.РезервыНаСкладах;

				Если ВариантАнализаИПланирования = 1 Тогда
					ПланПродаж = Подчиненный.СредниеПродажи * КоличествоПериодовЗаказа;
				ИначеЕсли ВариантАнализаИПланирования = 2 Тогда
					ПланПродаж = Подчиненный.СредниеПродажиВДень * КоличествоДнейЗаказа;
				КонецЕсли;

				Подчиненный.ПланПродаж = ПланПродаж;

				Ликвидность = 0;
				Если ПланПродаж > 0 Тогда
					Ликвидность = СводныйОстаток / ПланПродаж;
				КонецЕсли;
				Подчиненный.Ликвидность = Ликвидность;

				РекомендуетсяЗаказать = 0;
				Если ПланПродаж > СводныйОстаток Тогда
					РекомендуетсяЗаказать = ПланПродаж - СводныйОстаток + Подчиненный.МинимальныйСтраховойЗапас + Подчиненный.ЗаказаноПокупателями;
				КонецЕсли;
				Если Подчиненный.ЗначениеТочкиЗаказа > 0 Тогда
					РекомендуетсяЗаказать = Подчиненный.ЗначениеТочкиЗаказа - Подчиненный.КоличествоОстаток;
					РекомендуетсяЗаказать = ?(РекомендуетсяЗаказать > 0, РекомендуетсяЗаказать, 0);
				КонецЕсли;

				Подчиненный.РекомендуетсяЗаказать = РекомендуетсяЗаказать;
			КонецЕсли;

			Если УстановитьРасчет = 4 Тогда
				Если Подчиненный.КоличествоКВозврату > 0 Тогда
					СтрокаДоб = ТаблицаКЗаказу.Добавить();
					СтрокаДоб.Номенклатура = Подчиненный.Номенклатура;
					СтрокаДоб.Заказать = Подчиненный.Заказать;
				КонецЕсли;
			Иначе
				Если Подчиненный.Заказать > 0 Тогда
					СтрокаДоб = ТаблицаКЗаказу.Добавить();
					СтрокаДоб.Номенклатура = Подчиненный.Номенклатура;
					СтрокаДоб.Заказать = Подчиненный.Заказать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		мУстановитьРасчет(Подчиненный, УстановитьРасчет, ТаблицаКЗаказу);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеНоменклатуры(ПараметрыЗапроса, ДеревоНоменклатуры) Экспорт
	Перем СхемаКомпоновкиДанных, КомпоновщикНастроекИзХранилища;
	СхемаКомпоновкиДанных = ПолучитьМакет("СхемаЗапроса");
	КомпоновщикНастроекИзХранилища = ПолучитьИзВременногоХранилища(ПараметрыЗапроса.АдресСхемыВХранилище);

	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", ПараметрыЗапроса.ДатаНач);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", ПараметрыЗапроса.ДатаКон);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОстатков", ПараметрыЗапроса.ДатаОстатков);


	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоПериодовАнализа", ПараметрыЗапроса.КоличествоПериодовАнализа);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоПериодовЗаказа", ПараметрыЗапроса.КоличествоПериодовЗаказа);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоДнейЗаказа", ПараметрыЗапроса.КоличествоДнейЗаказа);

	ВариантАнализаИПланирования = ПараметрыЗапроса.ВариантАнализаИПланирования;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекИзХранилища.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	ДеревоНоменклатуры.Строки.Очистить();




	ВывестиДеревоВДерево(ДеревоЗначений, ДеревоНоменклатуры, ПараметрыЗапроса);

КонецПроцедуры


Процедура ПолучитьДеревоОстатковНоменклатуры(ТаблицаОстаткиТоваров, ПараметрыЗапроса) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	СвободныеОстатки.Склад.Родитель КАК СкладРодитель,
	|	СвободныеОстатки.Склад КАК Склад,
	|	СвободныеОстатки.Характеристика КАК Характеристика,
	|	СУММА(СвободныеОстатки.ВНаличииОстаток) КАК Свободно,
	|	СУММА(СвободныеОстатки.ВНаличииОстаток - СвободныеОстатки.ВРезервеОстаток) КАК Общий,
	|	СУММА(СвободныеОстатки.ВРезервеОстаток) КАК ВРезерве
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &ОбъектУсловия) КАК СвободныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстатки.Склад.Родитель,
	|	СвободныеОстатки.Склад,
	|	СвободныеОстатки.Характеристика
	|ИТОГИ
	|	СУММА(Свободно),
	|	СУММА(Общий),
	|	СУММА(ВРезерве)
	|ПО
	|	СкладРодитель,
	|	Склад,
	|	Характеристика";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектУсловия", ПараметрыЗапроса.Номенклатура);

	ТаблицаОстаткиТоваров.Строки.Очистить();

	РезультатЗапроса = Запрос.Выполнить();


	ВыборкаСкладРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкладРодитель");
	Пока ВыборкаСкладРодитель.Следующий() Цикл
		СтрокаСклад = ТаблицаОстаткиТоваров.Строки.Добавить();
		СтрокаСклад.Склад = ВыборкаСкладРодитель.СкладРодитель;
		СтрокаСклад.Общий = ВыборкаСкладРодитель.Общий;
		СтрокаСклад.Свободно = ВыборкаСкладРодитель.Свободно;
		СтрокаСклад.ВРезерве = ВыборкаСкладРодитель.ВРезерве;

		ВыборкаСклад = ВыборкаСкладРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл
			Склад = ВыборкаСклад.Склад;

			ВыборкаХарактеристика = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаХарактеристика.Следующий() Цикл
				СтрокаХарактеристика = СтрокаСклад.Строки.Добавить();
				СтрокаХарактеристика.Склад = Склад;
				СтрокаХарактеристика.Характеристика = ВыборкаХарактеристика.Характеристика;
				СтрокаХарактеристика.Общий = ВыборкаХарактеристика.Общий;
				СтрокаХарактеристика.Свободно = ВыборкаХарактеристика.Свободно;
				СтрокаХарактеристика.ВРезерве = ВыборкаХарактеристика.ВРезерве;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры


Процедура ЗаполнитьВспомогательнуюТаблицу(СписокИсторияПродаж, ПараметрыЗапроса) Экспорт
	ПериодичностьДляЗапроса = Строка(ПараметрыЗапроса.Периодичность);

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интервалы.НачалоИнтервала КАК Период
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	&Интервалы КАК Интервалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.КоличествоОборот КАК Продажи,
	|	ВложенныйЗапрос.КоличествоНачальныйОстаток КАК НачальныйОстаток,
	|	ВложенныйЗапрос.КоличествоКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	Периоды КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Период КАК Период,
	|			СУММА(ВложенныйЗапрос.КоличествоОборот) КАК КоличествоОборот,
	|			СУММА(ВложенныйЗапрос.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
	|			СУММА(ВложенныйЗапрос.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПартииТоваровНаСкладах.Период КАК Период,
	|				0 КАК КоличествоОборот,
	|				ПартииТоваровНаСкладах.ВНаличииНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|				ПартииТоваровНаСкладах.ВНаличииКонечныйОстаток КАК КоличествоКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.СвободныеОстатки.ОстаткиИОбороты(&ДатаНач, &ДатаКон, ДЕНЬ, , Номенклатура = &УсловиеОтбора) КАК ПартииТоваровНаСкладах
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПродажиОбороты.Период,
	|				ПродажиОбороты.КоличествоОборот,
	|				0,
	|				0
	|			ИЗ
	|				РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНач, &ДатаКон, ДЕНЬ, ) КАК ПродажиОбороты
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|					ПО ПродажиОбороты.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|			ГДЕ
	|				АналитикаНоменклатуры.Номенклатура = &УсловиеОтбора) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|		ПО Периоды.Период = ВложенныйЗапрос.Период
	|ИТОГИ
	|	СУММА(Продажи),
	|	СУММА(НачальныйОстаток),
	|	СУММА(КонечныйОстаток)
	|ПО
	|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНач, &ДатаКон)
	|АВТОУПОРЯДОЧИВАНИЕ";


	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "День", ПериодичностьДляЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДЕНЬ", ПериодичностьДляЗапроса);

	ПараметрыРеквизитов = Новый Структура;
	ПараметрыРеквизитов.Вставить("ДатаНач", ПараметрыЗапроса.ДатаНач);
	ПараметрыРеквизитов.Вставить("ДатаКон", ПараметрыЗапроса.ДатаКон);
	ПараметрыРеквизитов.Вставить("Периодичность", ПараметрыЗапроса.Периодичность);
	ПараметрыРеквизитов.Вставить("КоличествоПериодовАнализа", ПараметрыЗапроса.КоличествоПериодовАнализа);

	Интервалы = ОбновитьИнтервал(ПараметрыРеквизитов).Интервалы;


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УсловиеОтбора", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПараметрыЗапроса.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыЗапроса.ДатаКон));
	Запрос.УстановитьПараметр("Интервалы", Интервалы);



	СписокИсторияПродаж.Очистить();

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	Пока Выборка.Следующий() Цикл
		ВыборкаПериод = Выборка.Период;
		ВыборкаКоличествоОборот = Выборка.Продажи;
		ВыборкаНачальныйОстаток = Выборка.НачальныйОстаток;
		ВыборкаКонечныйОстаток = Выборка.КонечныйОстаток;

		Стр = СписокИсторияПродаж.Добавить();
		Стр.Период = ВыборкаПериод;
		Стр.Продажи = ВыборкаКоличествоОборот;
		Стр.НачальныйОстаток = ВыборкаНачальныйОстаток;
		Стр.КонечныйОстаток = ВыборкаКонечныйОстаток;
	КонецЦикла;

	СписокИсторияПродаж.Сортировать("Период Убыв");

КонецПроцедуры


Процедура ЗаполнитьТаблицуИсторииПоступления(ИсторияПоступлений, ПараметрыЗапроса) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Ссылка.Контрагент,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваровУслуг,
	|	СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ПоступлениеТоваровУслуг.Количество) > 0
	|			ТОГДА СУММА(ПоступлениеТоваровУслуг.Сумма) / СУММА(ПоступлениеТоваровУслуг.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаЗакупки,
	|	ПоступлениеТоваровУслуг.Ссылка.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.Ссылка.Склад
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Номенклатура = &ВыбНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Ссылка.Дата,
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Ссылка.Контрагент,
	|	ПоступлениеТоваровУслуг.Ссылка.Валюта,
	|	ПоступлениеТоваровУслуг.Ссылка.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПараметрыЗапроса.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыЗапроса.ДатаКон));

	ИсторияПоступлений = Запрос.Выполнить().Выгрузить();

КонецПроцедуры


Процедура ЗаполнитьТаблицуАктуальныеЗаказы(АктуальныеЗаказы, ПараметрыЗапроса) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщикам.ЗаказаноОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаКон, Номенклатура = &ВыбНоменклатура) КАК ЗаказыПоставщикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыЗапроса.ДатаКон));

	АктуальныеЗаказы = Запрос.Выполнить().Выгрузить();

КонецПроцедуры




