Перем Интервалы Экспорт;





Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


Функция СведенияОВнешнейОбработке() Экспорт
	РегистрационныеДанные = Новый Структура;

	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	ДобавитьКоманду(Команды, "SubSys: Рабочее место менеджера по закупкам", "ОткрытиеФормы", "ОткрытиеФормы", , );


	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Назначение", "");
	РегистрационныеДанные.Вставить("Наименование", "SubSys: Рабочее место менеджера по закупкам");
	РегистрационныеДанные.Вставить("Версия", "25-07-2010");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
	РегистрационныеДанные.Вставить("Информация", "");
	РегистрационныеДанные.Вставить("Команды", Команды);

	Возврат РегистрационныеДанные;

КонецФункции



































































































































Функция ОкруглитьЧисло(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону = Истина) Экспорт
	Перем Результат;
	КоличествоИнтервалов = Число / ТочностьОкругления;


	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);

	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда

		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда

			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе


			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции





Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦенНоменклатуры, Дата)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена * КурсыСрезПоследних.Курс / КурсыСрезПоследних.Кратность / КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаЦены.Кратность КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			Номенклатура = &Номенклатура
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследних
	|		ПО (КурсыСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (ИСТИНА)");

	Запрос.УстановитьПараметр("ВидЦены", ВидЦенНоменклатуры);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Валюта", ВидЦенНоменклатуры.ВалютаЦены);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			Возврат Выборка.Цена;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции


Процедура ВывестиДеревоВДерево(Дерево, НовоеДерево, ГруппыНом, Параметры)
	Подчиненные = Дерево.Строки;
	НоваяВетка = НовоеДерево.Строки;

	Для каждого Подчиненный Из Подчиненные Цикл
		Номенклатура = Подчиненный.Номенклатура;

		УчетПохарактеристикам = Подчиненный.ИспользоватьХарактеристики;
		УчетПохарактеристикам = ?(Параметры.ИспользоватьХарактеристикиНоменклатуры, УчетПохарактеристикам, Ложь);

		СтрокаДоб = НоваяВетка.Добавить();
		СтрокаДоб.Номенклатура = Номенклатура;
		СтрокаДоб.ЭтоГруппа = Номенклатура.ЭтоГруппа;

		Если СтрокаДоб.ЭтоГруппа Тогда
			НоваяГруппа = ГруппыНом.Строки;

			СтрокаГрупп = НоваяГруппа.Добавить();
			СтрокаГрупп.Группа = Номенклатура;
		Иначе
			СтрокаДоб.Характеристика = Подчиненный.ХарактеристикаНоменклатуры;
			СтрокаДоб.ХарактеристикиИспользуются = Подчиненный.ИспользоватьХарактеристики;
			СтрокаДоб.Артикул = Подчиненный.НоменклатураАртикул;
			СтрокаДоб.Код = Подчиненный.НоменклатураКод;
			СтрокаДоб.Производитель = Подчиненный.НоменклатураПроизводитель;

			СтрокаДоб.ЕдиницаИзмерения = Подчиненный.НоменклатураЕдиницаИзмерения;

			СтрокаДоб.ПроданоВсего = Подчиненный.ПроданоВсего;
			СтрокаДоб.КоличествоПериодовПродаж = Подчиненный.КоличествоПериодовПродаж;
			СтрокаДоб.КоличествоСделок = Подчиненный.КоличествоСделок;

			КоличествоОстаток = ?(Подчиненный.КоличествоОстаток = Null, 0, Подчиненный.КоличествоОстаток);
			Если УчитыватьОтданныеНаРеализацию Тогда
				КоличествоПереданные = ?(Подчиненный.КоличествоПереданные = Null, 0, Подчиненный.КоличествоПереданные);
				КоличествоОстаток = КоличествоОстаток + КоличествоПереданные;
			КонецЕсли;

			СтрокаДоб.КоличествоОстаток = КоличествоОстаток;
			СтрокаДоб.ЗаказаноПоставщикам = Подчиненный.ЗаказаноПоставщикам;
			СтрокаДоб.РезервыНаСкладах = Подчиненный.РезервыНаСкладах;
			ЗаказаноПокупателями = ?(Подчиненный.ЗаказаноПокупателями = Null, 0, Подчиненный.ЗаказаноПокупателями);
			СтрокаДоб.ЗаказаноПокупателями = ЗаказаноПокупателями - СтрокаДоб.РезервыНаСкладах;

			СтрокаДоб.КоличествоДнейНаСкладе = Подчиненный.КоличествоДнейНаСкладе;
			СтрокаДоб.СредниеПродажи = ?(Подчиненный.СредняяПродаваемость = Null, 0, Подчиненный.СредняяПродаваемость);
			СтрокаДоб.СредниеПродажиВДень = ?(Подчиненный.СредняяПродаваемостьПоДням = Null, 0, Подчиненный.СредняяПродаваемостьПоДням);

			Если ВариантАнализаИПланирования = 1 Тогда
				ПланПродаж = ?(Подчиненный.ПланПродаж = Null, 0, Подчиненный.ПланПродаж);
			ИначеЕсли ВариантАнализаИПланирования = 2 Тогда
				ПланПродаж = ?(Подчиненный.ПланПродажПоДням = Null, 0, Подчиненный.ПланПродажПоДням);
			КонецЕсли;

			СтрокаДоб.ПланПродаж = ПланПродаж;

			ПланПродаж = СтрокаДоб.ПланПродаж;

			СтрокаДоб.МинимальноеКоличествоЗапаса = Подчиненный.МинимальноеКоличествоЗапаса;
			СтрокаДоб.МаксимальноеКоличествоЗапаса = Подчиненный.МаксимальноеКоличествоЗапаса;

			СтрокаДоб.Ликвидность = Подчиненный.Ликвидность;

			СводныйОстаток = СтрокаДоб.КоличествоОстаток + СтрокаДоб.ЗаказаноПоставщикам - СтрокаДоб.РезервыНаСкладах;

			РекомендуетсяЗаказать = 0;
			Если ПланПродаж > СводныйОстаток Тогда
				РекомендуетсяЗаказать = ПланПродаж - СводныйОстаток + СтрокаДоб.МинимальноеКоличествоЗапаса + СтрокаДоб.ЗаказаноПокупателями;
			КонецЕсли;
			Если СтрокаДоб.МинимальноеКоличествоЗапаса > 0 И ПланПродаж < СводныйОстаток Тогда
				РекомендуетсяЗаказать = СтрокаДоб.МинимальноеКоличествоЗапаса - СводныйОстаток;
				РекомендуетсяЗаказать = ?(РекомендуетсяЗаказать > 0, РекомендуетсяЗаказать, 0);
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.ТочностьОкругления) Тогда
				РекомендуетсяЗаказать = ОкруглитьЧисло(РекомендуетсяЗаказать, Параметры.ТочностьОкругления);
			КонецЕсли;

			СтрокаДоб.РекомендуетсяЗаказать = РекомендуетсяЗаказать;


			Если ЗначениеЗаполнено(Параметры.ВидЦенНоменклатуры) Тогда
				СтрокаДоб.Цена = ПолучитьЦенуНоменклатуры(Номенклатура, Параметры.ВидЦенНоменклатуры, ТекущаяДата());
			КонецЕсли;

			Если ВариантАнализаИПланирования = 1 Тогда
				Если ПорогНормальнойЛиквидности > 0 Тогда
					Если ПорогНормальнойЛиквидности < СтрокаДоб.Ликвидность Тогда
						СтрокаДоб.КоличествоКВозврату = СтрокаДоб.КоличествоОстаток - СтрокаДоб.ПланПродаж;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВариантАнализаИПланирования = 2 Тогда
				Если СтрокаДоб.КоличествоДнейНаСкладе > КоличествоДнейЗаказа Тогда
					Если ПорогНормальнойЛиквидностиВДнях < СтрокаДоб.ЛиквидностьВДнях Тогда
						СтрокаДоб.КоличествоКВозврату = СтрокаДоб.КоличествоОстаток - СтрокаДоб.ПланПродаж;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаДоб.КоличествоОстаток > 0 И СтрокаДоб.ПроданоВсего = 0 Тогда
				СтрокаДоб.КоличествоКВозврату = СтрокаДоб.КоличествоОстаток;
			КонецЕсли;
		КонецЕсли;

		Если СтрокаДоб.ЭтоГруппа Или УчетПохарактеристикам Тогда
			ВывестиДеревоВДерево(Подчиненный, СтрокаДоб, СтрокаГрупп, Параметры);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


Процедура ДеревоНоменклатурыИтогиГрупп(Дерево) Экспорт
	Подчиненные = Дерево.Строки;

	Для каждого Подчиненный Из Подчиненные Цикл

		Если Подчиненный.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		ДеревоНоменклатурыИтогиГрупп(Подчиненный);

		Подчиненный.Заказать = Подчиненный.Строки.Итог("Заказать");

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеНоменклатуры(ПараметрыЗапроса, ДеревоНоменклатуры, ГруппыНоменклатуры) Экспорт
	Перем СхемаКомпоновкиДанных, КомпоновщикНастроекИзХранилища;
	СхемаКомпоновкиДанных = ПолучитьМакет("СхемаЗапроса");
	КомпоновщикНастроекИзХранилища = ПолучитьИзВременногоХранилища(ПараметрыЗапроса.АдресСхемыВХранилище);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Месяц", Строка(ПараметрыЗапроса.Периодичность));
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;

	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", ПараметрыЗапроса.ДатаНач);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", ПараметрыЗапроса.ДатаКон);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОстатков", ПараметрыЗапроса.ДатаОстатков);


	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоПериодовАнализа", ПараметрыЗапроса.КоличествоПериодовАнализа);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоПериодовЗаказа", ПараметрыЗапроса.КоличествоПериодовЗаказа);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоДнейЗаказа", ПараметрыЗапроса.КоличествоДнейЗаказа);
	КомпоновщикНастроекИзХранилища.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("РабочийКалендарь", ПараметрыЗапроса.РабочийКалендарь);

	ВариантАнализаИПланирования = ПараметрыЗапроса.ВариантАнализаИПланирования;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекИзХранилища.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	ДеревоНоменклатуры.Строки.Очистить();




	ВывестиДеревоВДерево(ДеревоЗначений, ДеревоНоменклатуры, ГруппыНоменклатуры, ПараметрыЗапроса);

КонецПроцедуры


Процедура мУстановитьАвторасчетЗаказа(Дерево, УстановитьРасчет = 1, ТаблицаКЗаказу) Экспорт
	Подчиненные = Дерево.Строки;
	Для каждого Подчиненный Из Подчиненные Цикл

		Если Подчиненный.ЭтоГруппа Тогда
		Иначе

			Если УстановитьРасчет = 1 Тогда
				Подчиненный.Заказать = Подчиненный.РекомендуетсяЗаказать;
			КонецЕсли;

			Если УстановитьРасчет = 2 Тогда
				Подчиненный.Заказать = 0;
			КонецЕсли;

			Если УстановитьРасчет = 3 Тогда
				СводныйОстаток = Подчиненный.КоличествоОстаток + Подчиненный.Заказано - Подчиненный.РезервыНаСкладах;

				Если ВариантАнализаИПланирования = 1 Тогда
					ПланПродаж = Подчиненный.СредниеПродажи * КоличествоПериодовЗаказа;
				ИначеЕсли ВариантАнализаИПланирования = 2 Тогда
					ПланПродаж = Подчиненный.СредниеПродажиВДень * КоличествоДнейЗаказа;
				КонецЕсли;

				Подчиненный.ПланПродаж = ПланПродаж;

				Ликвидность = 0;
				Если ПланПродаж > 0 Тогда
					Ликвидность = СводныйОстаток / ПланПродаж;
				КонецЕсли;
				Подчиненный.Ликвидность = Ликвидность;

				РекомендуетсяЗаказать = 0;
				Если ПланПродаж > СводныйОстаток Тогда
					РекомендуетсяЗаказать = ПланПродаж - СводныйОстаток + Подчиненный.МинимальныйСтраховойЗапас + Подчиненный.ЗаказаноПокупателями;
				КонецЕсли;
				Если Подчиненный.ЗначениеТочкиЗаказа > 0 Тогда
					РекомендуетсяЗаказать = Подчиненный.ЗначениеТочкиЗаказа - Подчиненный.КоличествоОстаток;
					РекомендуетсяЗаказать = ?(РекомендуетсяЗаказать > 0, РекомендуетсяЗаказать, 0);
				КонецЕсли;

				Подчиненный.РекомендуетсяЗаказать = РекомендуетсяЗаказать;
			КонецЕсли;

			Если УстановитьРасчет = 4 Тогда
				Если Подчиненный.КоличествоКВозврату > 0 Тогда
					СтрокаДоб = ТаблицаКЗаказу.Добавить();
					СтрокаДоб.Номенклатура = Подчиненный.Номенклатура;
					СтрокаДоб.Характеристика = Подчиненный.Характеристика;
					СтрокаДоб.Заказать = Подчиненный.Заказать;
					СтрокаДоб.ХарактеристикиИспользуются = Подчиненный.ХарактеристикиИспользуются;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		мУстановитьАвторасчетЗаказа(Подчиненный, УстановитьРасчет, ТаблицаКЗаказу);
	КонецЦикла;

КонецПроцедуры


Процедура мПолучитьТаблицуПотребностей(Дерево, ТаблицаКЗаказу) Экспорт
	Подчиненные = Дерево.Строки;
	Для каждого Подчиненный Из Подчиненные Цикл

		Если Подчиненный.ЭтоГруппа Или Подчиненный.Строки.Количество() > 0 Тогда
		Иначе

			Если Подчиненный.Заказать > 0 Тогда
				СтрокаДоб = ТаблицаКЗаказу.Добавить();
				СтрокаДоб.Номенклатура = Подчиненный.Номенклатура;
				СтрокаДоб.Характеристика = Подчиненный.Характеристика;
				СтрокаДоб.Заказать = Подчиненный.Заказать;
				СтрокаДоб.ХарактеристикиИспользуются = Подчиненный.ХарактеристикиИспользуются;
			КонецЕсли;
		КонецЕсли;

		мПолучитьТаблицуПотребностей(Подчиненный, ТаблицаКЗаказу);
	КонецЦикла;

КонецПроцедуры






Процедура ИнформацияСформироватьОстаткиПоСкладам(ТаблицаОстаткиТоваров, ПараметрыЗапроса) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	СвободныеОстатки.Склад.Родитель КАК СкладРодитель,
	|	СвободныеОстатки.Склад КАК Склад,
	|	СвободныеОстатки.Характеристика КАК Характеристика,
	|	СУММА(СвободныеОстатки.ВНаличииОстаток) КАК Свободно,
	|	СУММА(СвободныеОстатки.ВНаличииОстаток - СвободныеОстатки.ВРезервеОстаток) КАК Общий,
	|	СУММА(СвободныеОстатки.ВРезервеОстаток) КАК ВРезерве
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &ОбъектУсловия) КАК СвободныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстатки.Склад.Родитель,
	|	СвободныеОстатки.Склад,
	|	СвободныеОстатки.Характеристика
	|ИТОГИ
	|	СУММА(Свободно),
	|	СУММА(Общий),
	|	СУММА(ВРезерве)
	|ПО
	|	СкладРодитель,
	|	Склад,
	|	Характеристика";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектУсловия", ПараметрыЗапроса.Номенклатура);

	ТаблицаОстаткиТоваров.Строки.Очистить();

	РезультатЗапроса = Запрос.Выполнить();


	ВыборкаСкладРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкладРодитель");
	Пока ВыборкаСкладРодитель.Следующий() Цикл
		СтрокаСклад = ТаблицаОстаткиТоваров.Строки.Добавить();
		СтрокаСклад.Склад = ВыборкаСкладРодитель.СкладРодитель;
		СтрокаСклад.Общий = ВыборкаСкладРодитель.Общий;
		СтрокаСклад.Свободно = ВыборкаСкладРодитель.Свободно;
		СтрокаСклад.ВРезерве = ВыборкаСкладРодитель.ВРезерве;

		ВыборкаСклад = ВыборкаСкладРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл
			Склад = ВыборкаСклад.Склад;

			ВыборкаХарактеристика = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
			Пока ВыборкаХарактеристика.Следующий() Цикл
				СтрокаХарактеристика = СтрокаСклад.Строки.Добавить();
				СтрокаХарактеристика.Склад = Склад;
				СтрокаХарактеристика.Характеристика = ВыборкаХарактеристика.Характеристика;
				СтрокаХарактеристика.Общий = ВыборкаХарактеристика.Общий;
				СтрокаХарактеристика.Свободно = ВыборкаХарактеристика.Свободно;
				СтрокаХарактеристика.ВРезерве = ВыборкаХарактеристика.ВРезерве;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры






















































































































Процедура ИнформацияСформироватьДинамикаПродаж(СписокИсторияПродаж, ПараметрыЗапроса, Диаграмма) Экспорт
КонецПроцедуры


Процедура ИнформацияСформироватьИсторияПоступлений(ИсторияПоступлений, ПараметрыЗапроса) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка.Дата КАК Дата,
	|	ПоступлениеТоваровУслуг.Ссылка.Контрагент,
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваровУслуг,
	|	СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА СУММА(ПоступлениеТоваровУслуг.Количество) > 0
	|			ТОГДА СУММА(ПоступлениеТоваровУслуг.Сумма) / СУММА(ПоступлениеТоваровУслуг.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаЗакупки,
	|	ПоступлениеТоваровУслуг.Ссылка.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.Ссылка.Склад
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Номенклатура = &ВыбНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслуг.Ссылка.Дата,
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Ссылка.Контрагент,
	|	ПоступлениеТоваровУслуг.Ссылка.Валюта,
	|	ПоступлениеТоваровУслуг.Ссылка.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПараметрыЗапроса.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыЗапроса.ДатаКон));

	ИсторияПоступлений = Запрос.Выполнить().Выгрузить();

КонецПроцедуры


Процедура ИнформацияСформироватьАктуальныеЗаказыПоставщикам(АктуальныеЗаказы, ПараметрыЗапроса) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад КАК Склад,
	|	СУММА(ЗаказыПоставщикам.ЗаказаноОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаКон, Номенклатура = &ВыбНоменклатура) КАК ЗаказыПоставщикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Склад,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ЖелаемаяДатаПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";


	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбНоменклатура", ПараметрыЗапроса.Номенклатура);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыЗапроса.ДатаКон));

	РезультатЗапроса = Запрос.Выполнить();
	АктуальныеЗаказы = РезультатЗапроса.Выгрузить();

КонецПроцедуры




