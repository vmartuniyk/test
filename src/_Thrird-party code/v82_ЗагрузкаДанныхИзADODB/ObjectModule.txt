
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Загрузка данных из электронных таблиц через ADODB 1С УТ 8.2");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь); // в безопасном режиме не будет работать при включенных RLS
	РегистрационныеДанные.Вставить("Версия", "3.23");
	
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Обработка Загрузка данных из электронных таблиц через ADODB 1С УТ 8.2. ");
	
	///////////// команды /////////////////////////
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "1";
	строкаКоманды.Представление = "Загрузка данных из электронных таблиц через ADODB";
	строкаКоманды.ПоказыватьОповещение = Истина;
	строкаКоманды.Использование = "ОткрытиеФормы";
	
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции
 
&НаСервере
Функция ЗагрузкаРезультатаИзТабличнойЧасти(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Пользователь = Пользователи.ТекущийПользователь();
	ТаблицаТоваров = СтруктураПараметров.Товары;
	
	Если СтруктураПараметров.НазначениеДанных = "Расходная накладная" Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
		ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Заказ покупателя" Тогда
		НовыйДокумент = Документы.ЗаказКлиента.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
		ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Возврат от покупателя" Тогда
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.Соглашение = СтруктураПараметров.Соглашение;
		НовыйДокумент.ЗаполнитьУсловияПродажПоCоглашению();
		ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Возврат поставщику" Тогда
		НовыйДокумент = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.Соглашение = СтруктураПараметров.Соглашение;
		НовыйДокумент.ЗаполнитьУсловияЗакупокПоCоглашению();
		ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Приходная накладная" Тогда
		НовыйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.Соглашение = СтруктураПараметров.Соглашение;
		НовыйДокумент.ЗаполнитьУсловияЗакупокПоCоглашению();
		ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Заказ поставщику" Тогда
		НовыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.Соглашение = СтруктураПараметров.Соглашение;
		НовыйДокумент.ЗаполнитьУсловияЗакупокПоСоглашению();
		ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	// прочие документы
	//
	
	Если СтруктураПараметров.НазначениеДанных = "Ввод остатков" Тогда
		НовыйДокумент = Документы.ВводОстатков.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Заполнить(СтруктураПараметров);
		НовыйДокумент.Склад = СтруктураПараметров.Склад;
		НовыйДокумент.Товары.Загрузить(ТаблицаТоваров);
		НовыйДокумент.Ответственный = Пользователь;
		НовыйДокумент.ТипОперации=Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров;
		НовыйДокумент.записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Перемещение товара" Тогда
		НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация      = СтруктураПараметров.Организация;
		НовыйДокумент.СкладОтправитель = СтруктураПараметров.Склад;
		НовыйДокумент.Товары.Загрузить(ТаблицаТоваров);
		НовыйДокумент.Ответственный = Пользователь;
		Для каждого СтрокаТабличнойЧасти Из НовыйДокумент.Товары Цикл
			СтрокаТабличнойЧасти.КоличествоУпаковок  = СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.Упаковка  = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		КонецЦикла;
		НовыйДокумент.записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Установка цен номенклатуры" Тогда
		НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Товары.Загрузить(ТаблицаТоваров);
		НовыйДокумент.Заполнить(СтруктураПараметров);
		//НовыйДокумент.Ответственный = Пользователь;
		
		НовыйТипЦен = НовыйДокумент.ВидыЦен.Добавить();
		НовыйТипЦен.ВидЦены = СтруктураПараметров.ВидЦен;
		
		Для каждого СтрокаТабличнойЧасти Из НовыйДокумент.Товары Цикл
			СтрокаТабличнойЧасти.ВидЦены  = СтруктураПараметров.ВидЦен;
			СтрокаТабличнойЧасти.Упаковка = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		КонецЦикла; 
		НовыйДокумент.записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйДокумент.Ссылка;
	КонецЕсли;
	
	Если СтруктураПараметров.НазначениеДанных = "Сегменты номенклатуры" Тогда
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		Попытка
			Для каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
				
				НаборЗаписей.Очистить();
				НоваяСтрока = НаборЗаписей.Добавить();
				
				НоваяСтрока.Сегмент      = СтруктураПараметров.СегментНоменклатуры;
				НоваяСтрока.Номенклатура = СтрокаТаблицыТоваров.Номенклатура;

				НаборЗаписей.Отбор.Сегмент.Установить(НоваяСтрока.Сегмент);
				НаборЗаписей.Отбор.Номенклатура.Установить(НоваяСтрока.Номенклатура);

				НаборЗаписей.Записать();
			КонецЦикла;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнениеТорговогоДокумента(НовыйДокумент,СтруктураПараметров)

	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Организация     = СтруктураПараметров.Организация;
	НовыйДокумент.Склад           = СтруктураПараметров.Склад;
	
	// не во всех документах есть склады
	Если НовыйДокумент.Метаданные().Реквизиты.Найти("Договор")<>Неопределено Тогда
		НовыйДокумент.Договор  = СтруктураПараметров.Договор;
	КонецЕсли; 
	
	НовыйДокумент.Товары.Загрузить(СтруктураПараметров.Товары);
	НовыйДокумент.Менеджер = Пользователи.ТекущийПользователь();
	Для каждого СтрокаТабличнойЧасти Из НовыйДокумент.Товары Цикл
		
		// не во всех документах есть склады
		Если НовыйДокумент.Метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("Склад")<>Неопределено Тогда
			СтрокаТабличнойЧасти.Склад  = СтруктураПараметров.Склад;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.КоличествоУпаковок  = СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.Упаковка  = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сумма) Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		КонецЕсли; 
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС);
		СтрокаТабличнойЧасти.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, ТекПроцентНДС, НовыйДокумент.Соглашение.ЦенаВключаетНДС);
		СтрокаТабличнойЧасти.СуммаСНДС = СтрокаТабличнойЧасти.Сумма + ?(НовыйДокумент.Соглашение.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла;
	НовыйДокумент.записать(РежимЗаписиДокумента.Запись);

КонецПроцедуры

Функция СоглашениеСПоставщикомПоУмолчанию(Организация,Партнер,Склад)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСПоставщиками.Ссылка
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	СоглашенияСПоставщиками.Статус = &Статус
	|	И СоглашенияСПоставщиками.Партнер = &Партнер
	|	И СоглашенияСПоставщиками.Организация = &Организация
	|	И СоглашенияСПоставщиками.Склад = &Склад";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер",     Партнер);
	Запрос.УстановитьПараметр("Склад",       Склад);
	Запрос.УстановитьПараметр("Статус",      Перечисления.СтатусыСоглашенийСПоставщиками.Действует);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		НовоеСоглашение = Справочники.СоглашенияСПоставщиками.СоздатьЭлемент();
		НовоеСоглашение.Наименование = "основное соглашение";
		НовоеСоглашение.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		НовоеСоглашение.ДоступноДляЗакупки = Истина;
		НовоеСоглашение.Партнер = Партнер;
		НовоеСоглашение.Организация = Организация;
		НовоеСоглашение.Склад = Склад;
		НовоеСоглашение.ИспользуютсяДоговорыКонтрагентов = Ложь;
		НовоеСоглашение.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		НовоеСоглашение.РегистрироватьЦеныПоставщика = Истина;
		НовоеСоглашение.Статус = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
		НовоеСоглашение.ЦенаВключаетНДС = Истина;
		Попытка
			НовоеСоглашение.Записать();
			Возврат НовоеСоглашение.Ссылка;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;

КонецФункции // СоглашениеСПоставщикомПоУмолчанию()
 