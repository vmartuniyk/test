
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ

&НаСервере
Функция ЗагрузкаДанныхСервер(НазначениеДанных)

	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
    СтруктураПараметров = Новый Структура("НазначениеДанных,ДатаВремяЗаписиИнформации,ВидЦен,Контрагент,ДоговорКонтрагента,ЦеныБратьИзФайла");
	СтруктураПараметров.Вставить("НазначениеДанных",          НазначениеДанных);
	СтруктураПараметров.Вставить("Дата", 					  ТекущаяДата());
	СтруктураПараметров.Вставить("ДатаПлатежа",			      ТекущаяДата());
	
	СтруктураПараметров.Вставить("Склад",                	  Объект.Склад);
	СтруктураПараметров.Вставить("Организация",               Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                Объект.Контрагент);
	СтруктураПараметров.Вставить("Партнер",               	  Объект.Партнер);
	
	СтруктураПараметров.Вставить("Соглашение",                Объект.Соглашение);
	СтруктураПараметров.Вставить("Договор",                   Объект.ДоговорКонтрагента);
	
	СтруктураПараметров.Вставить("ВидЦены",                   Объект.ВидЦены);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	      Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
	СтруктураПараметров.Вставить("Товары",     				  Объект.КопияВыходнойТаблицы.Выгрузить());
	СтруктураПараметров.Вставить("ЗначениеСвойстваОбъекта",   Объект.ЗначениеСвойстваОбъекта);
	СтруктураПараметров.Вставить("СегментНоменклатуры",       Объект.СегментНоменклатуры);
	
	
	ВозвращаемаяСсылка = ОбъектЗначение.ЗагрузкаРезультатаИзТабличнойЧасти(СтруктураПараметров);
	Возврат ВозвращаемаяСсылка;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанных(Команда)
	
	ВозвращаемаяСсылка = ЗагрузкаДанныхСервер(Элементы.НазначениеДанных.ВыделенныйТекст);
	Если ВозвращаемаяСсылка<>Неопределено Тогда
		ОткрытьЗначение(ВозвращаемаяСсылка);
	Иначе
		Предупреждение("Загрузка завершена");
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОСМОТРА

&НаКлиенте
Процедура ПредварительнаяЗагрузкаДанныхИзТабличногоДокументаВТабличнуюЧасть() Экспорт

	Объект.КопияВыходнойТаблицы.Очистить();
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////// подключение к объекту
	
	//Создание объекта для установки связи с источником данных 
    Connection = Новый COMОбъект("ADODB.Connection");
    //сформируем строку подключения 
    //Если необходимо в дальнейшем оперировать цифровыми значениями колонок,то ставим признак HDR = NO 
    //если необходимо производить загрузку с учетом псевдонимов в 1й строке,то ставим HDR = YES 
    СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source = "+СокрЛП(Объект.ИмяФайлаВыгрузки);
    СтрокаПодключения = СтрокаПодключения + "; Extended Properties = "+"""Excel 8.0"+";HDR=NO;IMEX=1"";";
    //подключение к источнику данных 
    Попытка
        Connection.Open(СтрокаПодключения);
    Исключение
        Сообщить(ОписаниеОшибки());
	КонецПопытки;   
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////// чтение листов
	
	//создание объекта выполнения команды 
    Command = Новый COMОбъект("ADODB.Command");
    //создание объекта подключения к файлу 
    axCatalog = Новый COMОбъект("ADOX.Catalog"); 
    axCatalog.ActiveConnection = Connection; 
	
	//получим листы документа, 
    //для обработки колонок листа можно обратится к коллекции Лист.Columns,которую тоже можно обойти посредством цикла Для каждого  
	СписокЛистов = Новый СписокЗначений;
    Для каждого Лист ИЗ axCatalog.Tables Цикл
		
        ТекстЗапросаКолонки = "";
		Если Лист.Name="Excel_BuiltIn__FilterDatabase" Тогда // пропускаем технический лист
            Продолжить;
		КонецЕсли; 
		
		Если Лист.Columns.Count() > 1 Тогда // на нашем листе должны быть как минимум соответствие чего-то чему-то, т.е. большой одной колонки
            Для к = 1 По Лист.Columns.Count() Цикл
                ТекстЗапросаКолонки = ТекстЗапросаКолонки + ?(ТекстЗапросаКолонки="","F"+Формат(к,"ЧЦ=15; ЧГ=0"),",F"+Формат(к,"ЧЦ=15; ЧГ=0"));    
			КонецЦикла;
			СписокЛистов.Добавить(Лист.Name,ТекстЗапросаКолонки);
			Продолжить;
		КонецЕсли;
        
    КонецЦикла;	
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////// работаем с записями
	
	ЧитаемСЛистаНомер = Объект.ЧитаемСЛистаНомер-1;
	
    RecordSet = Новый COMОбъект("ADODB.RecordSet");  //Создание объекта набора записей 
    Command.ActiveConnection = Connection;           //Указание активного соединения 
	
	//	 можем посчитать количество строк на листе
	Command.CommandText = "SELECT COUNT(*)FROM ["+СписокЛистов[ЧитаемСЛистаНомер].Значение+"]"; //получим количество строк в документе 
	Command.CommandType = 1;                         //определение типа команды 
	RecordSet           = Command.Execute();         //Выполнение и получение набора данных 
	КоличествоСтрок     = RecordSet.Fields(0).Value; //первая запись это количество строк 
	
	//Command.CommandText = "SELECT "+СписокЛистов[ЧитаемСЛистаНомер].Представление+" FROM ["+СписокЛистов[ЧитаемСЛистаНомер].Значение+"]"; //опредлеление текста команды 
    Command.CommandText = "SELECT * FROM ["+СписокЛистов[ЧитаемСЛистаНомер].Значение+"]"; //опредлеление текста команды A1:B545
    Command.CommandType = 1; //определение типа команды 
    
    //Выполнение и получение набора данных 
    Попытка 
        RecordSet = Command.Execute();
    Исключение 
        Сообщить(ОписаниеОшибки());
    КонецПопытки;	
	
	// ограничим по количеству вменяемых строк
	КоличествоСчитанныхСтрок = 0;
	Пока RecordSet.EOF() = 0 Цикл
		
		КоличествоСчитанныхСтрок = КоличествоСчитанныхСтрок+1;
		Если КоличествоСчитанныхСтрок>КоличествоСтрок Тогда
			Прервать;
		КонецЕсли; 
		
		Если Объект.НомерКолонки_КодПоставщика<>0 Тогда
			НомерКолонкиПоиска = Объект.НомерКолонки_КодПоставщика; 
		ИначеЕсли  Объект.НомерКолонки_НаименованиеПоставщика<>0 Тогда
			НомерКолонкиПоиска = Объект.НомерКолонки_НаименованиеПоставщика; 
		Иначе
			НомерКолонкиПоиска = Объект.НомерКолонки_Код; 
		КонецЕсли; 
		КодНоменклатуры        = RecordSet.Fields(НомерКолонкиПоиска-1).Value;
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(КодНоменклатуры)) Тогда
			RecordSet.MoveNext();
			Продолжить;
		КонецЕсли; 
		Если Найти(КодНоменклатуры, " ") > 0 Тогда
			КодНоменклатуры = СтрЗаменить(КодНоменклатуры, " ", "");
		КонецЕсли;
		
		// если числовое значение кода, приводим к нужному виду
		Попытка	
			Если ТипЗнч(Число(КодНоменклатуры)) = Тип("Число") Тогда
				КодНоменклатуры = Строка(Формат(число(КодНоменклатуры),"ЧЦ=15; ЧГ=0"));
				Если СтрДлина(КодНоменклатуры)=4 Тогда
					КодНоменклатуры = "0"+КодНоменклатуры;
				КонецЕсли; 
				Если СтрДлина(КодНоменклатуры)=3 Тогда
					КодНоменклатуры = "00"+КодНоменклатуры;
				КонецЕсли; 
				Если СтрДлина(КодНоменклатуры)=2 Тогда
					КодНоменклатуры = "000"+КодНоменклатуры;
				КонецЕсли; 
				Если СтрДлина(КодНоменклатуры)=1 Тогда
					КодНоменклатуры = "0000"+КодНоменклатуры;
				КонецЕсли; 
			КонецЕсли;
		Исключение 
		КонецПопытки;
		
		Если Объект.НомерКолонки_Количество<>0 Тогда
			КоличествоНоменклатуры = RecordSet.Fields(Объект.НомерКолонки_Количество-1).Value;
			// sockor 13.04.2011 13:19:05
			// блок проверок количества номенклатуры
			Попытка	КоличествоНоменклатуры = Число(КоличествоНоменклатуры) 
			Исключение 
				RecordSet.MoveNext();
				Продолжить;
			КонецПопытки; 
		Иначе
			КоличествоНоменклатуры = 1;
		КонецЕсли;
		
		Если Объект.НомерКолонки_Цена<>0 Тогда
			ЦенаНоменклатуры       = RecordSet.Fields(Объект.НомерКолонки_Цена-1).Value;
			// sockor 14.03.2011 15:18:20
			// блок проверок цены номенклатуры
			Если Найти(ЦенаНоменклатуры, "-") > 0 Тогда
				ЦенаНоменклатуры = СтрЗаменить(ЦенаНоменклатуры, "-", ".");
			КонецЕсли;
			Попытка	ЦенаНоменклатуры  = Число(ЦенаНоменклатуры) 
			Исключение 
				RecordSet.MoveNext();
				Продолжить 
			КонецПопытки; 
			СуммаНоменклатуры = ЦенаНоменклатуры * КоличествоНоменклатуры;
		КонецЕсли;
		
		Если Объект.НомерКолонки_Сумма<>0 Тогда
			СуммаНоменклатуры      = RecordSet.Fields(Объект.НомерКолонки_Сумма-1).Value;
			// sockor 14.03.2011 15:18:20
			// блок проверок суммы номенклатуры
			Если Найти(СуммаНоменклатуры, "-") > 0 Тогда
				СуммаНоменклатуры = СтрЗаменить(СуммаНоменклатуры, "-", ".");
			КонецЕсли;
			Попытка	СуммаНоменклатуры = Число(СуммаНоменклатуры) 
			Исключение 
				RecordSet.MoveNext();
				Продолжить; 
			КонецПопытки; 
			Если НЕ ЗначениеЗаполнено(ЦенаНоменклатуры) Тогда
				ЦенаНоменклатуры = СуммаНоменклатуры/КоличествоНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
		////// закончен блок проверок
		
		НоваяСтрокаТаблицы = Объект.КопияВыходнойТаблицы.Добавить();
		НоваяСтрокаТаблицы.Код          = КодНоменклатуры;     		
		НоваяСтрокаТаблицы.Количество   = КоличествоНоменклатуры;
		НоваяСтрокаТаблицы.Сумма        = СуммаНоменклатуры;
		НоваяСтрокаТаблицы.Цена         = ЦенаНоменклатуры;
		
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();    
    Connection.Close();	
	
	УправлениеВидимостиДоступности();
	
КонецПроцедуры // ПредварительнаяЗагрузкаДанныхИзТабличногоДокументаВТабличнуюЧасть()

&НаСервере
Функция РасчетЗначенийДанныхТабличнойЧасти()


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КопияВыходнойТаблицы.НомерСтроки,
		|	КопияВыходнойТаблицы.Код,
		|	КопияВыходнойТаблицы.Количество,
		|	КопияВыходнойТаблицы.Цена,
		|	КопияВыходнойТаблицы.Сумма
		|ПОМЕСТИТЬ ВнешнийВременныйИсточник
		|ИЗ
		|	&КопияВыходнойТаблицы КАК КопияВыходнойТаблицы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КопияВыходнойТаблицы.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнешнийИсточник.НомерСтроки КАК НомерСтроки,
		|	ВнешнийИсточник.Код,
		|	ВнешнийИсточник.Количество,
		|	ВнешнийИсточник.Цена,
		|	ВнешнийИсточник.Сумма,
		|	СправочникПоиска.Ссылка КАК Номенклатура
		|ИЗ
		|	ВнешнийВременныйИсточник КАК ВнешнийИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникПоиска
		|		ПО ВнешнийИсточник.Код = СправочникПоиска.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Если Объект.НомерКолонки_КодПоставщика<>0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"СправочникПоиска.Ссылка КАК Номенклатура","СправочникПоиска.Номенклатура КАК Номенклатура");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура","ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков");   
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПО ВнешнийИсточник.Код = СправочникПоиска.Код","ПО ВнешнийИсточник.Код = СправочникПоиска.Артикул ГДЕ СправочникПоиска.Владелец = &Владелец");   
			Запрос.УстановитьПараметр("Владелец",Объект.Партнер);
		ИначеЕсли  Объект.НомерКолонки_НаименованиеПоставщика<>0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"СправочникПоиска.Ссылка КАК Номенклатура","СправочникПоиска.Номенклатура КАК Номенклатура");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура","ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков");   
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПО ВнешнийИсточник.Код = СправочникПоиска.Код","ПО ВнешнийИсточник.Код = СправочникПоиска.Наименование  ГДЕ СправочникПоиска.Владелец = &Владелец");   
			Запрос.УстановитьПараметр("Владелец",Объект.Партнер);
		КонецЕсли; 
		
	Запрос.УстановитьПараметр("КопияВыходнойТаблицы",Объект.КопияВыходнойТаблицы.Выгрузить());
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
	Объект.КопияВыходнойТаблицы.Загрузить(ВыборкаДетальныеЗаписи);
	//Объект.КопияВыходнойТаблицы.Сортировать("НомерСтроки");

КонецФункции // ВозвратЭлемента()

&НаКлиенте
Процедура ПроверкаТабличнойЧастиНаЗаполненностьНоменклатурныхСсылок()

	Для каждого СтрокаТЧ Из Объект.КопияВыходнойТаблицы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Сообщить(СтрокаТЧ.Код);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ПроверкаТабличнойЧастиНаЗаполненностьНоменклатурныхСсылок()
 
&НаКлиенте
Процедура ПросмотрТаблицы(Команда)
	
	ПредварительнаяЗагрузкаДанныхИзТабличногоДокументаВТабличнуюЧасть();
	РасчетЗначенийДанныхТабличнойЧасти();
	ПроверкаТабличнойЧастиНаЗаполненностьНоменклатурныхСсылок();
	УправлениеВидимостиДоступности();
	
КонецПроцедуры
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.НомерКолонки_Код        = 1;
	Объект.НомерКолонки_Количество = 2;
	Объект.НомерКолонки_Цена       = 0;
	Объект.НомерКолонки_Сумма      = 0;
	Объект.ЧитаемСЛистаНомер       = 1;
	НомерКолонки_КодПоставщика     = 0;
	НомерКолонки_НаименованиеПоставщика = 0;
	ДатаВремяЗаписиИнформации = ТекущаяДата();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - МЕХАНИЗМЫ УПРАВЛЕНИЯ ЭЛЕМЕНТАМИ ФОРМЫ

&НаСервере
Функция КопиияВыходнойТаблицыИмеетСтроки()

	Если Объект.КопияВыходнойТаблицы.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УправлениеВидимостиДоступности()
	
	// sockor 13.04.2011 13:13:09
	// значения зависящие от выбора пользователя 
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Значения");
	МассивЭлементов.Добавить("ЛеваяКолонка");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("ДоговорКонтрагента");
	МассивЭлементов.Добавить("ПраваяКолонка");
	МассивЭлементов.Добавить("ЗначениеСвойстваОбъекта");
	МассивЭлементов.Добавить("СегментНоменклатуры");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("ВидЦены");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	
	Если Элементы.НазначениеДанных.ВыделенныйТекст = "Установка цен номенклатуры" Тогда
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ПраваяКолонка");
		МассивЭлементов.Добавить("ВидЦены");
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Расходная накладная" 
		или Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат поставщику" 
		или Элементы.НазначениеДанных.ВыделенныйТекст = "Заказ покупателя" 
		Тогда 
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ЛеваяКолонка");
		МассивЭлементов.Добавить("Организация");
		МассивЭлементов.Добавить("Склад");
		МассивЭлементов.Добавить("Контрагент");
		МассивЭлементов.Добавить("Партнер");
		МассивЭлементов.Добавить("ПраваяКолонка");
		МассивЭлементов.Добавить("Соглашение");
		Если Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат поставщику" Тогда
			МассивЭлементов.Добавить("ДоговорКонтрагента");
		КонецЕсли;
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Приходная накладная" 
		или Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат от покупателя" 
		или Элементы.НазначениеДанных.ВыделенныйТекст = "Заказ поставщику" 
		Тогда 
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ЛеваяКолонка");
		МассивЭлементов.Добавить("Организация");
		МассивЭлементов.Добавить("Склад");
		МассивЭлементов.Добавить("Контрагент");
		МассивЭлементов.Добавить("Партнер");
		МассивЭлементов.Добавить("ПраваяКолонка");
		Если Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат от покупателя" Тогда
		Иначе
			МассивЭлементов.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		МассивЭлементов.Добавить("Соглашение");
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Перемещение товара" Тогда 
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ЛеваяКолонка");
		МассивЭлементов.Добавить("Организация");
		МассивЭлементов.Добавить("Склад");
		МассивЭлементов.Добавить("ПраваяКолонка");
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Ввод остатков" Тогда 
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ЛеваяКолонка");
		МассивЭлементов.Добавить("Организация");
		МассивЭлементов.Добавить("Склад");
		МассивЭлементов.Добавить("ПраваяКолонка");
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Сегменты номенклатуры" Тогда 
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ЛеваяКолонка");
		МассивЭлементов.Добавить("СегментНоменклатуры");
	ИначеЕсли Объект.НомерКолонки_КодПоставщика<>0 ИЛИ Объект.НомерКолонки_НаименованиеПоставщика<>0 Тогда
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("Значения");
		МассивЭлементов.Добавить("ЛеваяКолонка");
		МассивЭлементов.Добавить("Партнер");
	Иначе
		МассивЭлементов = Новый Массив();
	КонецЕсли; 
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Истина);
	
	// sockor 13.04.2011 13:13:09
	// общие правила видимости
	ЗначениеВидимости = КопиияВыходнойТаблицыИмеетСтроки();
	Элементы.ЗагрузкаДанных.Видимость = ЗначениеВидимости;
	Элементы.ЗагрузкаДанных.Заголовок = "Загрузка данных в ("+Элементы.НазначениеДанных.ВыделенныйТекст+")";
	Элементы.Значения.Видимость       = ЗначениеВидимости;
	Элементы.Настройки.Видимость      = НЕ ЗначениеВидимости;
	Элементы.ПросмотрТаблицы.Видимость= НЕ ЗначениеВидимости;
	
	Элементы.ОчиститьТаблицуПерейтиКНастройкам.Видимость = ЗначениеВидимости;
	Элементы.НазначениеДанных.Видимость = ЗначениеВидимости;
	
	Если Объект.НомерКолонки_КодПоставщика<>0 ИЛИ Объект.НомерКолонки_НаименованиеПоставщика<>0 Тогда
		Элементы.Значения.Видимость       = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ИмяФайлаВыгрузки;
	Фильтр = "Файл таблицы Excel(*.xls)|*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ИмяФайлаВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостиДоступности();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуПерейтикНастройкам(Команда)
	
	Объект.КопияВыходнойТаблицы.Очистить();
	УправлениеВидимостиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеДанныхПриИзменении(Элемент)
	УправлениеВидимостиДоступности();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ЗаполнениеКонтрагентаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКонтрагентаНаСервере()

	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);

КонецПроцедуры // ЗаполнениеКонтрагентаНаСервере()

&НаКлиенте
Процедура ПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	Если Элементы.НазначениеДанных.ВыделенныйТекст = "Расходная накладная" ИЛИ
		Элементы.НазначениеДанных.ВыделенныйТекст = "Заказ покупателя" ИЛИ 
		Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат от покупателя" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначениеОтбора  = Новый Структура("Клиент", Истина);
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыВыбора, Элементы.Партнер);
		
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат поставщику" ИЛИ
		Элементы.НазначениеДанных.ВыделенныйТекст = "Приходная накладная" ИЛИ 
		Элементы.НазначениеДанных.ВыделенныйТекст = "Заказ поставщику" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначениеОтбора  = Новый Структура("Поставщик", Истина);
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыВыбора, Элементы.Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.НазначениеДанных.ВыделенныйТекст = "Расходная накладная" ИЛИ
		Элементы.НазначениеДанных.ВыделенныйТекст = "Заказ покупателя" ИЛИ 
		Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат от покупателя" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначениеОтбора  = Новый Структура("Организация", Объект.Организация);
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора", ПараметрыВыбора, Элементы.Соглашение);
		
	ИначеЕсли Элементы.НазначениеДанных.ВыделенныйТекст = "Возврат поставщику" ИЛИ
		Элементы.НазначениеДанных.ВыделенныйТекст = "Приходная накладная" ИЛИ 
		Элементы.НазначениеДанных.ВыделенныйТекст = "Заказ поставщику" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗначениеОтбора  = Новый Структура("Организация", Объект.Организация);
		ЗначениеОтбора  = Новый Структура("Партнер", Объект.Партнер);
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.СоглашенияСПоставщиками.ФормаВыбора", ПараметрыВыбора, Элементы.Соглашение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКолонки_КодПоставщикаПриИзменении(Элемент)
	УправлениеВидимостиДоступности();
КонецПроцедуры

&НаКлиенте
Процедура НомерКолонки_НаименованиеПоставщикаПриИзменении(Элемент)
	УправлениеВидимостиДоступности();
КонецПроцедуры
 
