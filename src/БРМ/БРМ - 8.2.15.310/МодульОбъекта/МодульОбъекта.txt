
#Область ПрограммныйИнтерфейс
// Определяет доступность профиля группы доступа «продакт-менеджер»,
// а также доступность административных прав для доступа к 
// управлению корзиной прадакт менеджера.
//
// Возвращаемое значение:
// Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю,
// либо у него есть административные права.
//
Функция ПолучитьПравоДоступаКорзинаПродакта() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДоступКорзинаПродакта();
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Идентифкатор = Новый УникальныйИдентификатор("edded9c1-e07c-11e0-8b5f-001517115d85"); // Продакт менеджери
	Запрос.УстановитьПараметр("ПрофильПродактМенеджер", Справочники.ГруппыДоступа.ПолучитьСсылку(Идентифкатор));
	Идентифкатор = Новый УникальныйИдентификатор("91202cc1-0bab-11e2-9d4d-001e673c80fc"); // Керівник продакт менеджерів (відділ закупки)
	Запрос.УстановитьПараметр("ПрофильРуководительПродактМенеджеров", Справочники.ГруппыДоступа.ПолучитьСсылку(Идентифкатор));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой(); // разрешать доступ или продакту или чуваку из полными правами
	
КонецФункции

// Работа с библиотеками
Функция ПолучитьБиблиотеку() Экспорт
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Библиотека внешних обработок");	
	ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;
КонецФункции

Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки) Экспорт
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);        
    ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
    АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
    Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
КонецФункции

Функция GetLibrary(LibraryName) Экспорт
	Ссылка 		    = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки  = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;	
КонецФункции

Функция GetLibraryName(LibraryName) Экспорт
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);	
КонецФункции

Функция GetLibraryNameByUID(UID) Экспорт
	Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(UID));
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Обработка\Отчет с уникальным идентификатором не найдена: " + UID;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		Возврат "ВнешняяОбработка." + ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ИначеЕсли Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат "ВнешнийОтчет." + ВнешниеОтчеты.Подключить(АдресХранилища, , Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Определяес доступность настроеной роли из "Библиотеки внешних обработок"
//
// Параметры:
//  Идентификатор  - Строка - уникальный идентификатор роли
//
// Возвращаемое значение:
//   Булево   - признак доступности настроеной роли
//
&НаСервере
Функция НастроеннаяРольДоступна(Идентификатор) Экспорт

	//Настройка рассылки
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиРолей", , , "ДополнительныеНастройкиРолей");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос 			= Новый Запрос;
	Запрос.Текст	= ПолучитьТекстЗапросаПроверкаДоступностиРоли();
	
	Запрос.УстановитьПараметр("Идентификатор"		,Идентификатор);
	Запрос.УстановитьПараметр("ВключитьРоль"		,Настройки.ВключитьРоль);
	Запрос.УстановитьПараметр("ИсключитьРоль"		,Настройки.ИсключитьРоль);
	Запрос.УстановитьПараметр("ТекущийПользователь"	,ПараметрыСеанса.ТекущийПользователь);
	 
	Возврат Не Запрос.Выполнить().Пустой();	

КонецФункции // НастроеннаяРольДоступна() 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
// Получение права доступа к корзине продакта
Функция ПолучитьТекстЗапросаДоступКорзинаПродакта()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ГруппыПользователей
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав
	               |ГДЕ
	               |	Пользователь = &Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ПользователиГруппДоступа
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи
	               |ГДЕ
	               |	Ссылка = &ПрофильПродактМенеджер
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Пользователь КАК Пользователь
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи
	               |ГДЕ
	               |	Ссылка = &ПрофильРуководительПродактМенеджеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователь КАК Пользователь
	               |ИЗ
	               |	ПользователиГруппДоступа
	               |ГДЕ
	               |	Пользователь В(&Пользователь)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Пользователь КАК Пользователь
	               |ИЗ
	               |	ПользователиГруппДоступа
	               |ГДЕ
	               |	Пользователь В
	               |			(ВЫБРАТЬ
	               |				Ссылка
	               |			ИЗ
	               |				ГруппыПользователей)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДоступКорзинаПродакта()
	
// Возвращает текст запроса для проверки доступности настроеной роли из "Библиотеки внешних обработок"
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаПроверкаДоступностиРоли()

	ТекстЗапроса =
		////////////////////////////////////////////////////////////////////////////////
		//0. Загружаем таблицу настроек с составом(пользователи, профили) которым не доступна роль
		"ВЫБРАТЬ
		|	ИсключитьРоль.Идентификатор КАК Идентификатор,
		|	ИсключитьРоль.Состав КАК Состав
		|ПОМЕСТИТЬ ИсключитьРоль
		|ИЗ
		|	&ИсключитьРоль КАК ИсключитьРоль
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//1. Загружаем таблицу настроек с составом(пользователи, профили) которым доступна роль
		|ВЫБРАТЬ
		|	ВключитьРоль.Идентификатор КАК Идентификатор,
		|	ВключитьРоль.Состав КАК Состав
		|ПОМЕСТИТЬ ВключитьРоль
		|ИЗ
		|	&ВключитьРоль КАК ВключитьРоль
		|;
		////////////////////////////////////////////////////////////////////////////////
		//2. Формируем пользователей которым доступна роль
		//2.1 - составом загруженной таблицы настроек есть профили
		//- составом профиля есть пользователи
		|ВЫБРАТЬ
		|	Пользователь
		|ПОМЕСТИТЬ КешВключитьРоль
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи
		|ГДЕ
		|	Пользователь ССЫЛКА Справочник.Пользователи
		|И	Ссылка.Профиль В (ВЫБРАТЬ Состав ИЗ ВключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|И	НЕ Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		//- составом профиля есть группа доступа
		|ВЫБРАТЬ
		|	ГруппыПользователей.Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
		|	ПО 
		|		ГруппыПользователей.Ссылка = ГруппыДоступа.Пользователь
		|	И	НЕ ГруппыПользователей.Ссылка.ПометкаУдаления
		|	И 	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
		|
		|ГДЕ
		|	ГруппыДоступа.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|И	ГруппыДоступа.Ссылка.Профиль В (ВЫБРАТЬ Состав  ИЗ ВключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|		
		|ОБЪЕДИНИТЬ
		|		
		//2.2 - составом загруженной таблицы настроек есть пользователи
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В (ВЫБРАТЬ Состав  ИЗ ВключитьРоль ГДЕ Состав Ссылка Справочник.Пользователи И Идентификатор = &Идентификатор)
		|
		|;
		////////////////////////////////////////////////////////////////////////////////
		//3. Формируем пользователей которым не доступна роль
		//3.1 - составом загруженной таблицы настроек есть профили
		//- составом профиля есть пользователи
		|ВЫБРАТЬ
		|	ГруппыДоступа.Пользователь
		|ПОМЕСТИТЬ КешИсключитьРоль
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Пользователь ССЫЛКА Справочник.Пользователи
		|И  ГруппыДоступа.Ссылка.Профиль В (ВЫБРАТЬ Состав ИЗ ИсключитьРоль  ГДЕ  Идентификатор = &Идентификатор)
		|И	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		//- составом профиля есть группа доступа
		|ВЫБРАТЬ
		|	ГруппыПользователей.Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
		|	ПО 
		|		ГруппыПользователей.Ссылка = ГруппыДоступа.Пользователь
		|	И	НЕ ГруппыПользователей.Ссылка.ПометкаУдаления
		|	И 	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
		|
		|ГДЕ
		|	ГруппыДоступа.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|И	ГруппыДоступа.Ссылка.Профиль В (ВЫБРАТЬ Состав ИЗ ИсключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|
		|ОБЪЕДИНИТЬ
		|		
		//3.2 - составом загруженной таблицы настроек есть пользователи
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В (ВЫБРАТЬ Состав  ИЗ ИсключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|;
		////////////////////////////////////////////////////////////////////////////////
		//4. Таблица email для рассылки
		|ВЫБРАТЬ
		|	КешВключитьРоль.Пользователь
		|ИЗ
		|	КешВключитьРоль КАК КешВключитьРоль
		|	
		|ГДЕ
		|	НЕ КешВключитьРоль.Пользователь В (ВЫБРАТЬ Пользователь ИЗ КешИсключитьРоль)
		|И	КешВключитьРоль.Пользователь = &ТекущийПользователь";
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПроверкаДоступностиРоли()


#КонецОбласти 

#Область СведенияОВнешнейОбработке
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "3.11.87";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Многофункциональное рабочее место");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Многофункциональное рабочее место [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Многофункциональное рабочее место [" + Версия + "]", "МРМ", "ОткрытиеФормы", Ложь, "МРМ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти


