#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест 		= ЮнитТестирование;
	СпиcокТестов 	= Новый Массив;
	//СпиcокТестов.Добавить("Тест_ПроверитьВалидностьЗапроса");
	//СпиcокТестов.Добавить("Тест_ПроверитьФормированияОтчета");


	Возврат СпиcокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьВалидностьЗапроса() Экспорт   	
	ТекстЗапроса = ПолучитьТекстЗапросаНаСервере();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса);
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаНаСервере() Экспорт   	
	Запрос 				= Новый Запрос;
	ТекстЗапроса = СформироватьТекстЗапроса(Запрос,Ложь);
	Возврат ТекстЗапроса;
КонецФункции



&НаСервере
Процедура Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса) Экспорт
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 					  = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных 							 = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            				 = "НаборДанных";
	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос 						 = ТекстЗапроса;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
 

КонецПроцедуры // Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса)

&НаКлиенте
Процедура Тест_ПроверитьФормированияОтчета() Экспорт   	
	СформироватьОтчетНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	Если Параметры.Свойство("Номенклатура") Тогда
		Номенклатура = Параметры.Номенклатура;
		СформироватьОтчетНаСервере();
	КонецЕсли; 

КонецПроцедуры
#КонецОбласти 

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СформироватьОтчет(Команда)
    СформироватьОтчетНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура СформироватьОтчетНаСервере()
	
	Отказ=Ложь;
	
	Результат.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 				= Новый Запрос;
	ТекстЗапроса		= СформироватьТекстЗапроса(Запрос, Отказ);
	Если ТекстЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Запрос.Текст 		= ТекстЗапроса;
	СписокНоменклатуры  = Запрос.Выполнить().Выгрузить();
	Если Отказ Тогда Возврат; КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	
	ОбъектОбработки 		= РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных   = ОбъектОбработки.ПолучитьМакет("СКД_ЦеныПоставщиков");
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	Настройки 					= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровкиКД			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки				= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровкиКД);
	
	ПроцессорКомпоновкиДанны    = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанны.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиКД);
	
	ПроцессорВывода				= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанны);
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ЗагрузитьДеревоПрайсов()

	Перем Темп;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	ALPS_РегистрАктуальности = НЕ Метаданные.РегистрыСведений.Найти("АктуальностьНоменклатуры") = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("ДеревоПрайсов", Темп) Тогда
			ЗначениеВРеквизитФормы(Темп, "ALPS_ДеревоПрайсов");
		КонецЕсли;
	КонецЕсли;
	
	Если Темп = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаПрайсов = Новый ТаблицаЗначений;
	ТаблицаПрайсов.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ТаблицаПрайсов.Колонки.Добавить("deadline", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаПрайсов.Колонки.Добавить("ФайлПрайсЛиста", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщикамиПрисоединенныеФайлы"));
	ТаблицаПрайсов.Колонки.Добавить("ДнейАктуальности", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	
	Для каждого СтрокаДерева ИЗ Темп.Строки Цикл
		Для каждого Подстрока Из СтрокаДерева.Строки Цикл
		    НоваяСтрока = ТаблицаПрайсов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Подстрока);
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаПрайсов;

КонецФункции // ЗагрузитьДеревоПрайсов()
 

&НаСервере
Функция СформироватьТекстЗапроса(Запрос, Отказ)
	
	Перем ДатаОбработкиЗаказа;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект").ПолучитьБиблиотеку();
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		Отказ = Истина;
		ОбработкаОбъект.СообщитьПользователю("Не удалось получить настройки отчета. Сообщите на 777.");
		Возврат Неопределено;
	КонецЕсли;	
	
	ЗапросОбработкаЗаказа = Новый Запрос;                                          
	ЗапросОбработкаЗаказа.Текст = "
		|ВЫБРАТЬ 
		|	Минимум(ДатаГрафика) КАК ДатаОбработкиЗаказа 
		|ИЗ 
		|	РегистрСведений.КалендарныеГрафики 
		|ГДЕ 
		|	Календарь 	= 	&Календарь
		|И  ДатаГрафика >= 	&Сегодня
		|И  ДеньВключенВГрафик ";
	
	ЗапросОбработкаЗаказа.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	ЗапросОбработкаЗаказа.УстановитьПараметр("Календарь", Настройки.ALPS_Календарь);
	
	Выборка = ЗапросОбработкаЗаказа.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда ДатаОбработкиЗаказа = Выборка.ДатаОбработкиЗаказа КонецЕсли;
	Если ДатаОбработкиЗаказа = Неопределено Тогда 
		Отказ = Истина;
		ОбработкаОбъект.СообщитьПользователю("Не удалось получить дату обработки заказа. Сообщите на 777.");
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаПрайсов = ЗагрузитьДеревоПрайсов();
	
	Если ТаблицаПрайсов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Календарь", Настройки.ALPS_Календарь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаПрайсов", ТаблицаПрайсов);
	Запрос.УстановитьПараметр("ДатаОбработкиЗаказа", ДатаОбработкиЗаказа);
	Запрос.УстановитьПараметр("ВходнаяЦена", Справочники.ВидыЦен.НайтиПоНаименованию("Вхідна"));
	Если Не Номенклатура.Пустая() Тогда Запрос.УстановитьПараметр("Номенклатура", Номенклатура); КонецЕсли;
	
	Возврат "
		|ВЫБРАТЬ
		|	Соглашение, ФайлПрайсЛиста, ДнейАктуальности, deadline
		|ПОМЕСТИТЬ ПредКешТаблицаПрайсов
		|ИЗ
		|	&ТаблицаПрайсов КАК ТаблицаПрайсов
		|;
		|///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//1. Урезание не актуальных прайсов
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ КешТаблицаПрайсов
		|ИЗ
		|	ПредКешТаблицаПрайсов
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(ФайлПрайсЛиста.ДатаМодификацииУниверсальная, День, ДнейАктуальности) >= &Сегодня
		|	ИЛИ ДнейАктуальности = 0
		|;
		|ВЫБРАТЬ
		|	СпрНоменклатура.Номенклатура,
		|	СпрНоменклатура.Характеристика,
		|	СпрНоменклатура.НоменклатураПоставщика,
		|	СпрНоменклатура.Партнер,
		|	МИНИМУМ(ДатаДоставкиЗаказа.ДатаГрафика) КАК Актуальность,
		|	РасчетАктуальности.Цена КАК Цена,
		|	РасчетАктуальности.Регистратор КАК Регистратор,
		|	РасчетАктуальности.Период КАК Период,
		|   ВЫБОР
		|  		КОГДА РасчетАктуальности.Период >= ТаблицаПрайсов.ФайлПрайсЛиста.ДатаМодификацииУниверсальная
		|     	ТОГДА Истина
		|     	ИНАЧЕ Ложь
		|  	КОНЕЦ КАК НоменклатураАктуальная
		|ПОМЕСТИТЬ ТабНоменклатураПоставщика
		|ИЗ
		|	(ВЫБРАТЬ Номенклатура, Характеристика, Владелец КАК Партнер, Ссылка КАК НоменклатураПоставщика  ИЗ Справочник.НоменклатураПоставщиков "+?(Номенклатура.Пустая(),")"," ГДЕ Номенклатура=&Номенклатура)") + "КАК СпрНоменклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, "+?(Номенклатура.Пустая(),"","Номенклатура=&Номенклатура И ")+"Соглашение В (ВЫБРАТЬ Соглашение ИЗ ПредКешТаблицаПрайсов)) КАК РасчетАктуальности
		|ПО СпрНоменклатура.Номенклатура 			= РасчетАктуальности.Номенклатура
		|И	СпрНоменклатура.НоменклатураПоставщика 	= РасчетАктуальности.НоменклатураПоставщика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешТаблицаПрайсов КАК ТаблицаПрайсов
		|ПО РасчетАктуальности.Соглашение = ТаблицаПрайсов.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаОбработкиЗаказа
		|ПО ДатаОбработкиЗаказа.Календарь = &Календарь
		|И  ДатаОбработкиЗаказа.ДатаГрафика = &ДатаОбработкиЗаказа
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаДоставкиЗаказа
		|ПО ДатаДоставкиЗаказа.Календарь = &Календарь
		|И	ДатаДоставкиЗаказа.ДатаГрафика >= &ДатаОбработкиЗаказа
		|И	ДатаДоставкиЗаказа.КоличествоДнейВГрафикеСНачалаГода = ДатаОбработкиЗаказа.КоличествоДнейВГрафикеСНачалаГода + ТаблицаПрайсов.Соглашение.СрокПоставки + 
		|		ВЫБОР 
		|			КОГДА (ЧАС(&ТекущаяДата) > ЧАС(ТаблицаПрайсов.deadline))
		|			  ИЛИ (ЧАС(&ТекущаяДата) >= ЧАС(ТаблицаПрайсов.deadline) И МИНУТА(&ТекущаяДата) > МИНУТА(ТаблицаПрайсов.deadline))
		|           ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Номенклатура,
		|	СпрНоменклатура.Характеристика,
		|	СпрНоменклатура.НоменклатураПоставщика,
		|	СпрНоменклатура.Партнер,
		|	РасчетАктуальности.Цена,
		|	РасчетАктуальности.Регистратор,
		|   РасчетАктуальности.Период,
		|	ТаблицаПрайсов.ФайлПрайсЛиста
		|;
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СебестоимостьТоваровОбороты.Период) КАК Период,
		|	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТабМаксПериод
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Обороты(
		|		,
		|		,
		|		Регистратор,
		|		(АналитикаУчетаНоменклатуры.Номенклатура, АналитикаУчетаНоменклатуры.Характеристика) В
		|		(ВЫБРАТЬ
		|			ТабНоменклатураПоставщика.Номенклатура,
		|			ТабНоменклатураПоставщика.Характеристика
		|		ИЗ
		|			ТабНоменклатураПоставщика КАК ТабНоменклатураПоставщика)) КАК СебестоимостьТоваровОбороты
		|ГДЕ
		|	СебестоимостьТоваровОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(СебестоимостьТоваровОбороты.Период) КАК Период,
		|	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
		|	СебестоимостьТоваровОбороты.СтоимостьПриход / СебестоимостьТоваровОбороты.КоличествоПриход КАК Цена
		|ПОМЕСТИТЬ ТабЦенаПоследнегоВхода
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(АналитикаУчетаНоменклатуры.Номенклатура, АналитикаУчетаНоменклатуры.Характеристика) В
		|				(ВЫБРАТЬ
		|					ТабНоменклатураПоставщика.Номенклатура,
		|					ТабНоменклатураПоставщика.Характеристика
		|				ИЗ
		|					ТабНоменклатураПоставщика КАК ТабНоменклатураПоставщика)) КАК СебестоимостьТоваровОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабМаксПериод КАК МаксПериод
		|		ПО СебестоимостьТоваровОбороты.Период = МаксПериод.Период
		|			И СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура = МаксПериод.Номенклатура
		|ГДЕ
		|	СебестоимостьТоваровОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|СГРУППИРОВАТЬ ПО
		|	СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Номенклатура,
		|   СебестоимостьТоваровОбороты.АналитикаУчетаНоменклатуры.Характеристика,
		|   СебестоимостьТоваровОбороты.СтоимостьПриход,
		|	СебестоимостьТоваровОбороты.КоличествоПриход
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТНоменклатураПоставщика.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ТНоменклатураПоставщика.НоменклатураПоставщика.Артикул КАК АртикулПоставщика,
		|	ТНоменклатураПоставщика.Номенклатура КАК Номенклатура,
		|	ТНоменклатураПоставщика.Характеристика КАК Характеристика,
		|	ТНоменклатураПоставщика.Номенклатура.Артикул КАК Артикул,
		|	ТНоменклатураПоставщика.Актуальность КАК Актуальность,
		|	ТНоменклатураПоставщика.Цена КАК Цена,
		|	ТНоменклатураПоставщика.Регистратор,
		|	ТНоменклатураПоставщика.Период КАК ДатаУстановкиЦен,
		|	ТНоменклатураПоставщика.Партнер КАК Поставщик,
		|	ТНоменклатураПоставщика.НоменклатураАктуальная,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ВходнаяЦена,
		|	ЕСТЬNULL(ТабЦенаПоследнегоВхода.Цена, 0) КАК ЦенаПоследнегоВхода,
		|	ЕСТЬNULL(ТабЦенаПоследнегоВхода.Период, """") КАК ДатаПоследнегоВхода
		|ИЗ
		|	ТабНоменклатураПоставщика КАК ТНоменклатураПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				,
		|				ВидЦены В (&ВходнаяЦена)
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							ТабНоменклатураПоставщика.Номенклатура,
		|							ТабНоменклатураПоставщика.Характеристика
		|						ИЗ
		|							ТабНоменклатураПоставщика КАК ТабНоменклатураПоставщика)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТНоменклатураПоставщика.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТНоменклатураПоставщика.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабЦенаПоследнегоВхода КАК ТабЦенаПоследнегоВхода
		|		ПО ТНоменклатураПоставщика.Номенклатура = ТабЦенаПоследнегоВхода.Номенклатура
		|			И ТНоменклатураПоставщика.Характеристика = ТабЦенаПоследнегоВхода.Характеристика";
		
КонецФункции

#КонецОбласти