
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_Заглушка");
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция Тест_Заглушка(Параметр) Экспорт
	ЮнитТест.ПроверитьИстину(Истина,);
КонецФункции // Тест_Заглушка()


#КонецОбласти


&НаКлиенте
Процедура Выбрать(Команда)
	Если НЕ СкладОтправитель.Пустая() И НЕ СкладПолучатель.Пустая() Тогда 
		Закрыть(Новый Структура("СкладОтправитель, СкладПолучатель, ВидЦены", СкладОтправитель, СкладПолучатель, ВидЦены));	
	КонецЕсли;
КонецПроцедуры




&НаКлиенте
Процедура СкладОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	СкладОтправитель 		= ВыбранноеЗначение;
	СкладОтправительСтрока 	= Элементы.СкладОтправитель.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	СкладПолучатель 		= ВыбранноеЗначение;
	СкладПолучательСтрока 	= Элементы.СкладПолучатель.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ВыбораИзСписка("СкладОтправитель");
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	Обработчик 				= Новый ОписаниеОповещения("ВыборСкладОтправительИзВыпадающегоСписка", ЭтаФорма);
	СписокВыбора			= Новый СписокЗначений;
	
	СписокЭлементов = ПолучитьСписокСкладов("СкладОтправитель");
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление); КонецЦикла;
	
	НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(СкладОтправитель);
	Если НачальныйЭлемент = Неопределено Тогда
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент);
	Иначе 
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладОтправительИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СкладОтправитель 		= ВыбранныйЭлемент.Значение;
		СкладОтправительСтрока  = ВыбранныйЭлемент.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ВыбораИзСписка("СкладПолучатель");
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	Обработчик 				= Новый ОписаниеОповещения("ВыборСкладПолучательИзВыпадающегоСписка", ЭтаФорма);
	СписокВыбора			= Новый СписокЗначений;
	
	СписокЭлементов = ПолучитьСписокСкладов("СкладПолучатель");
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление); КонецЦикла;
	
	НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(СкладПолучатель);
	Если НачальныйЭлемент = Неопределено Тогда
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент);
	Иначе 
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладПолучательИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СкладПолучатель 		= ВыбранныйЭлемент.Значение;
		СкладПолучательСтрока   = ВыбранныйЭлемент.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбораИзСписка(ИмяЭлемента)
	СписокЭлементов = ПолучитьСписокСкладов(ИмяЭлемента);
	Элементы[ИмяЭлемента].СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл Элементы[ИмяЭлемента].СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление); КонецЦикла;
КонецПроцедуры







&НаСервере
Функция ПолучитьСписокСкладов(ИмяЭлемента)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(?(ИмяЭлемента = "СкладПолучатель","ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.Склады", "ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.Склады ГДЕ Ссылка = &Склад ИЛИ Ссылка.ИспользоватьОрдернуюСхемуПриОтгрузке"));
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокЗначений = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл СписокЗначений.Добавить(Выборка.Ссылка, Выборка.Наименование) КонецЦикла;
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	Возврат СписокЗначений;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Склад 					= Параметры.Склад;
	СкладОтправитель		= Склад;
	СкладОтправительСтрока 	= Склад;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.ALPS_ВидыЦен ГДЕ Входная");
	Выборка = Запрос.Выполнить().Выбрать();
	ВидЦены = ?(Выборка.Следующий(), Выборка.ВидЦены, ВидЦены);	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
КонецПроцедуры

