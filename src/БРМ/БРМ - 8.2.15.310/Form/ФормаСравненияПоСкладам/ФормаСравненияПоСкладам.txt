&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ГруппаНоменклатуры.Видимость 	= НЕ ГруппаНоменклатуры.Пустая();
	Элементы.ВидНоменклатуры.Видимость 		= НЕ ВидНоменклатуры.Пустая();
КонецПроцедуры



&НаКлиенте
Процедура Сформировать(Команда)
	
	Если ПустаяСтрока(СкладОтправитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле необходимо заполнить.";
		Сообщение.Поле = "СкладОтправитель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СкладПолучатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле необходимо заполнить.";
		Сообщение.Поле = "СкладПолучатель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ГруппаНоменклатуры) И  ПустаяСтрока(ВидНоменклатуры) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле необходимо заполнить: Группа номенклатуры или Вид номенклатуры.";
		Сообщение.Поле = "ГруппаНоменклатуры";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Закрыть(СоздатьДокументПеремещениеТоваров());
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументПеремещениеТоваров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных;
	НаборДанных.Запрос = СформироватьТекстЗапросаПеремещение();

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	УстановитьЗначениеПараметраКомпоновкиДанных("Группа", ГруппаНоменклатуры);
	УстановитьЗначениеПараметраКомпоновкиДанных("ВидНоменклатуры", ВидНоменклатуры);
	УстановитьЗначениеПараметраКомпоновкиДанных("СкладПриемки", Справочники.Склады.НайтиПоНаименованию(СкладПолучатель));
	УстановитьЗначениеПараметраКомпоновкиДанных("СкладОтгрузки", Справочники.Склады.НайтиПоНаименованию(СкладОтправитель));
	
	КомпоновщикМакетаДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ_Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивПередачи = Новый Массив;
	Для каждого СтрокаТаблицы Из ТЗ_Результат Цикл
		ЭлементМассива = Новый Структура("Номенклатура, Характеристика, Количество");
		ЗаполнитьЗначенияСвойств(ЭлементМассива, СтрокаТаблицы);
		МассивПередачи.Добавить(ЭлементМассива);
	КонецЦикла; 
	
	Возврат МассивПередачи;
			
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПараметраКомпоновкиДанных(ИмяПараметра, ЗначенияПараметра)

	ПараметрКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрКомпоновки <> Неопределено Тогда
		ПараметрКомпоновки.Значение = ЗначенияПараметра;
		ПараметрКомпоновки.Использование = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьЗначениеПараметраКомпоновкиДанных()
 

&НаСервере
Функция СформироватьТекстЗапросаПеремещение()

	ТекстЗапроса = "
	   |ВЫБРАТЬ
       |	НоменклатураХарактеристики.Номенклатура 	КАК Номенклатура,
       |	НоменклатураХарактеристики.Характеристика 	КАК Характеристика,
       |	ЕСТЬNULL(ОстаткиОтгрузки.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиОтгрузки.ВРезервеОстаток, 0) КАК Количество
       |ИЗ
       |	(ВЫБРАТЬ
       |		СправочникНоменклатура.Ссылка КАК Номенклатура,
       |		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
       |	ИЗ
       |		Справочник.Номенклатура КАК СправочникНоменклатура
       |	ГДЕ
       |		(НЕ СправочникНоменклатура.ЭтоГруппа)
       |		" + ?(ГруппаНоменклатуры.Пустая(), " И СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры ", " И СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&Группа) ") + "
       |	
       |	ОБЪЕДИНИТЬ ВСЕ
       |	
       |	ВЫБРАТЬ
       |		СправочникНоменклатура.Ссылка,
       |		СправочникХарактеристики.Ссылка
       |	ИЗ
       |		Справочник.Номенклатура КАК СправочникНоменклатура
       |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристики
       |			ПО (СправочникХарактеристики.Владелец = СправочникНоменклатура.Ссылка
       |					ИЛИ СправочникХарактеристики.Владелец = СправочникНоменклатура.ВидНоменклатуры)
       |	ГДЕ
       |		" + ?(ГруппаНоменклатуры.Пустая(), " СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры ", " СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&Группа) ") + ") КАК НоменклатураХарактеристики
	   |
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
       |				,
       |				Номенклатура" + ?(ГруппаНоменклатуры.Пустая(), ".ВидНоменклатуры = &ВидНоменклатуры ", " В ИЕРАРХИИ(&Группа) ") + "
       |					И Склад = &СкладПриемки) КАК ОстаткиПриемки
       |		ПО (ОстаткиПриемки.Номенклатура = НоменклатураХарактеристики.Номенклатура)
       |			И (ОстаткиПриемки.Характеристика = НоменклатураХарактеристики.Характеристика)
	   |
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
       |				,
       |				Номенклатура" + ?(ГруппаНоменклатуры.Пустая(), ".ВидНоменклатуры = &ВидНоменклатуры ", " В ИЕРАРХИИ(&Группа) ") + "
       |					И Склад = &СкладОтгрузки) КАК ОстаткиОтгрузки
       |		ПО (ОстаткиОтгрузки.Номенклатура = НоменклатураХарактеристики.Номенклатура)
       |			И (ОстаткиОтгрузки.Характеристика = НоменклатураХарактеристики.Характеристика)
	   |
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(,	Номенклатура" + ?(ГруппаНоменклатуры.Пустая(), ".ВидНоменклатуры = &ВидНоменклатуры ", " В ИЕРАРХИИ(&Группа) ") + " И Склад = &СкладПриемки) КАК ТоварыКПоступлению
       |		ПО ТоварыКПоступлению.Номенклатура   = НоменклатураХарактеристики.Номенклатура
       |		 И ТоварыКПоступлению.Характеристика = НоменклатураХарактеристики.Характеристика
       |
       |ГДЕ
       |	ЕСТЬNULL(ОстаткиОтгрузки.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиОтгрузки.ВРезервеОстаток, 0) > 0
       |  И ЕСТЬNULL(ОстаткиПриемки.ВНаличииОстаток,  0) - ЕСТЬNULL(ОстаткиПриемки.ВРезервеОстаток,  0) " + ?(УчитыватьОжидаемыеТовары, " + ЕСТЬNULL(ТоварыКПоступлению.КПоступлениюОстаток,  0) ", "") + " <= 0
       |
       |УПОРЯДОЧИТЬ ПО
       |	НоменклатураХарактеристики.Номенклатура.Родитель ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаПеремещение()
 



&НаКлиенте
Процедура СкладОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)	
	Элементы.СкладОтправитель.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСкладов());
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.СкладПолучатель.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСкладов());	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Представление
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Представление");
	
КонецФункции




&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СформироватьКомпоновкуДанных();
КонецПроцедуры


&НаСервере
Процедура СформироватьКомпоновкуДанных()

	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = СформироватьТекстЗапросаПеремещение();
	
	ДобавитьПолеКНаборуДанных(НаборДанных, "Номенклатура");
	ДобавитьПолеКНаборуДанных(НаборДанных, "Характеристика");
	ДобавитьПолеКНаборуДанных(НаборДанных, "Количество");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));

	ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Имя = "ДетальныеЗаписи";
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	ДобавитьПолеКВыбраннымПолям(ГруппировкаДетальныеЗаписи, "Номенклатура");
	ДобавитьПолеКВыбраннымПолям(ГруппировкаДетальныеЗаписи, "Характеристика");
	ДобавитьПолеКВыбраннымПолям(ГруппировкаДетальныеЗаписи, "Количество");
	
КонецПроцедуры // СформироватьКомпоновкуДанных()

&НаСервере
Процедура ДобавитьПолеКВыбраннымПолям(Группировка, ИмяПоля)

	ВыбранноеПоле = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ВыбранноеПоле.Заголовок = ИмяПоля;

КонецПроцедуры // ДобавитьПолеКВыбраннымПолям()

&НаСервере
Процедура ДобавитьПолеКНаборуДанных(НаборДанных, ИмяПоля)

	ПолеНоменклатуры = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНоменклатуры.ПутьКДанным = ИмяПоля;
	ПолеНоменклатуры.Заголовок 	 = ИмяПоля;
	ПолеНоменклатуры.Поле		 = ИмяПоля;

КонецПроцедуры // ДобавитьПолеКНаборуДанных()