#Область АвтоТест
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	МассивЗначенийИсточникаЗапроса = Новый Массив;
	МассивЗначенийИсточникаЗапроса.Добавить("По всему справочнику");
	МассивЗначенийИсточникаЗапроса.Добавить("По актуальности");
	МассивЗначенийИсточникаЗапроса.Добавить("По остаткам");
	МассивЗначенийИсточникаЗапроса.Добавить("По остаткам склада");
	ВариантыИсточникаЗапроса = "По остаткам склада"; 
	Элементы.ВариантыИсточникаЗапроса.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийИсточникаЗапроса);
	
	
	ИсточникВариантОтбора 		   	= "НавигацияИерархияНоменклатуры";
	Навигация_СсылкаНаИсточник 		= Справочники.Номенклатура.ПустаяСсылка();
	КоличествоНоменклатурыВТаблице 	= "250";
	ALPS_ОграниченнаяАктуальность	= Ложь;
	
	Элементы.ЗакладкаПодборНоменклатуры.Пометка = Истина;
	ПредыдущаяКоманда 	= "ЗакладкаПодборНоменклатуры";
		
	//Корзина 
	ИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	Элементы.ТЗ_КорзинаХарактеристика.Видимость = ИспользоватьХарактеристики;
		
	Если РеквизитФормыВЗначение("Объект").GetLibrary("LoyaltyLibrary").ЛояльностьИспользуетсяПодразделением() Тогда 
		Элементы.ДИ_Партнер.РедактированиеТекста = Ложь; 
	КонецЕсли;	
	
	Заголовок = "Рабочее место продаж 3.11.7.    Тех. поддержка: 777@ktc-ua.com";
	ОписаниеИзменений = "
	    |*3.10.46 - http://c.ktc-ua.com:8080/issues/2331
		|*3.10.45 - http://c.ktc-ua.com:8080/issues/2207
		|*3.10.44 - http://c.ktc-ua.com:8080/issues/2357
		|*3.10.43 - http://c.ktc-ua.com:8080/issues/2295
		|*3.10.42 - http://c.ktc-ua.com:8080/issues/2283
	    |*3.10.41 - http://c.ktc-ua.com:8080/issues/2307
		|*3.10.40 - Он-лайн загрузка описаний
		|*3.10.39 - http://c.ktc-ua.com:8080/issues/2298
		|*3.10.38 - http://c.ktc-ua.com:8080/issues/2303
		|*3.10.37 - http://c.ktc-ua.com:8080/issues/2279
		|*3.10.36 - http://c.ktc-ua.com:8080/issues/2215
		|*3.10.35 - http://c.ktc-ua.com:8080/issues/2178
		|*3.10.34 - http://c.ktc-ua.com:8080/issues/2282
		|*3.10.33 - http://c.ktc-ua.com:8080/issues/1757
		|*3.10.32 - http://c.ktc-ua.com:8080/issues/2280
		|*3.10.31 - http://c.ktc-ua.com:8080/issues/2281
		|*3.10.30 - http://c.ktc-ua.com:8080/issues/2151
		|*3.10.29 - http://c.ktc-ua.com:8080/issues/2269
		|*3.10.28 - http://c.ktc-ua.com:8080/issues/2234
		|*3.10.27 - Поиск в icecat.com.ua;
		|*3.10.26 - Исправлена робота с доступностью подборов;
		|*3.10.25 - http://c.ktc-ua.com:8080/issues/2140 - Статусы в ЗаказахКлиента должны обрабатываться в УЗ по-разному;
		|*3.10.1-3.10.24
		|	- Добавлен новый функционал для работы с корзиной, 90% пока не работает или в режиме тестирования;
		|	- Поддерджка шаблонов в поиске;
		|	- Удалены лишние функции и добавлена дополнительная оптимизация некоторых механизмав;
		|	- Рефакторинг создания заказа поставщику;
		|	- Добавлены ссылки на наши форумы, соц. сети;
		|	- Добавлены сортировки в УЗ;
		|	- Рефакторинг интерфейса;
		|	- Интергация с печатью ценников стандартная;
		|	- Изменено отображение актуальности;
		|	- Переход из корзины на сайт;
		|	- Новая версия управления запасами проработана по новой схеме;
		|	- Кеш видов номенклатуры больше не используется, используется запрос к справочнику;
		|	- Исправлена ошибка при очистке поиска, исправлена ошибка при переходе между вариантами отбора когда задан поиск;
		|	- Реализирован поиск по нескольким словам;
		|	- Дополнительные отчеты и обработки интегрированы в рабочее место менеджера;
		|	- Оптимизирован механизм поиска номенклатуры;
		|	- Оптимизирована выборка дополнительных свойств;
		|	- Поиск работает сразу после запуска;
		|*3.9.1-3.9.288 
		|	- Подключена новая вкладка ""КТС Помощь"";
		|	- Подключен новый механизм актуальности;
		|	- Оптимизирована и ускорена работа по получению данных из базы;
		|	- Обновлен механизм создания номенклатуры сборки(теперь сборки всегда попадают в реализации);
		|	- Обновлен интерфейс;
		|	- Оптимизирована работа интерфейса корзины и основной таблицы, добавлена возможность сортировки и отбора по колонке дополнительных бонусов;
		|	- Обновлена корзина для работы с дополнительными бонусами;
		|	- Добавлена возможность продактам редактировать размер дополнительного бонуса;
		|	- Добавлена возможность видеть дополнительные бонусы за продажу товара;
		|	- Добавлена возможность создавать напоминания для пользователей;
		|	- Добавлено поле для ввода Кода, EAN, Артикула и серийного номера сверху над таблицей корзины;
		|	- Добавлена кнопка ""Показать все"", которая показывает всю номенклатуру в выбранной группе;
		|	- Добавлено на закладке настройка максимальное количество выводимой номенклатуры в табличное поле;
		|	- Удалена опция ""Этот склад"". Добавлен новый пункт отбора номенклатуры: ""По остаткам склада"";
		|	- Добавлен поиск только для текущей группы номенклатуры, вида номенклатуры и сегмента номенлатуры. Удалены кнопки поиска по текущему списку;
		|	- Добавлен поиск и добавление в корзину по Артикулу (Alt+W);
		|	- Изменена загрузка цен номенклатуры поставщиков и вычисление актуальности этих цен;
		|	- Изменена и оптимизирована загрузка цен номенклатуры;
		|	- Оптимизировано использование флажка ""Этот склад"";
		|	- Исправлена ошибка при использовании карт лояльности при создании документа ""Встреча"";
		|	- Добавлена возможность использования смс-рассылки(только для ""Полных прав"");
		|	- Обновлена форма отправки смс;
		|	- Исправлена ошибка при отправке смс - при создании взаимодействия заполняется ""Тема""; 
		|	- Удалены неиспользуемые реквизиты формы, оптимизирована выборка;
		|	- Удалено сохранение позиции пользователя (для востановления) на группах, видах и сегментах номенклатуры;
		|	- Подключена новая интуитивно-понятная форма лояльности при выборе клиента;
		|	- Договор, при создании реализаций товаров услуг, автоматически подставляется в документ ""Реализация товаров услуг"";
		|	- Договор, при создании заказов клиента, автоматически подставляется в документ ""Заказ Клиента"";
		|	- Договор, при создании заказов поставщику, автоматически подставляется в документ ""Заказ Поставщику"";
		|	- Исправлена ошибка работы с НДС, ошибка возникала если несколько раз из корзины создать документ, без предварительной очистки корзины;
		|	- Исправлена ошибка работы с НДС, ошибка проявлялась когда в соглашении было установлено ""цена включает НДС"" в значение ""Истина"";
		|	- Исправлена ошибка множественого поиска по кодам номенклатуры, если разделителем является табулятор (Alt+A);
		|	- Добавлен множественный поиск по кодам номенклатуры (Alt+A);
		|	- Добавлен поиск и добавление в корзину по EAN, коду и серийному номеру (Alt+W);";
		
	
	ДополнительноеСвойствоЗаработок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("904cd00e-c6ba-11e2-b7da-001e673c80fc"));
	
	// Строим дерево Виды номенклатуры + товарные категории
	ИнициализироватьВидыНоменклатуры();
	
	//Отчеты и обработки
	ИнициализироватьМенюДополнительныеОтчетыИОбработки();
	
	ДоступКорзинаПродакта = РеквизитФормыВЗначение("Объект").ПолучитьПравоДоступаКорзинаПродакта();
	Если Не ДоступКорзинаПродакта Тогда
	    Элементы.ГруппаУправлениеКорзиной.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Параметры по соглашению
	Если НЕ Соглашение.Пустая() Тогда  
		ИнициализироватьПараметрыПоСоглашению(Соглашение); //Сервер
	КонецЕсли;

	ИнициализироватьПраваПользователей();  	//Сервер
	ИнициализироватьДополнительныеКолонки();//Клиент
	
	УстановитьВариантОтбора(Новый Структура("Имя", ИсточникВариантОтбора));
	
	ОбновитьСуммаИтог(); //Клиент
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
		
	Результат = Вопрос(НСтр("ru = 'Завершить работу с обработкой?'"), РежимДиалогаВопрос.ДаНет);
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры




&НаСервере
Функция ИнициализироватьМенюДополнительныеОтчетыИОбработки()
	
	Library = РеквизитФормыВЗначение("Объект").GetLibrary("Библиотека внешних обработок");
	ДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ДополнительныйОтчет		= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
	    |	ДополнительныйОтчетИлиОбработка 	КАК ДОТ,
		|	ДополнительныйОтчетИлиОбработка.Вид КАК Вид
		|ИЗ
	    |	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам
	    |ГДЕ
	    |	Доступно
	    |И 	Пользователь = &ТекущийПользователь
	    |И 	НЕ ДополнительныйОтчетИлиОбработка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяКоманды = "uid" + СтрЗаменить(Выборка.ДОТ.УникальныйИдентификатор(), "-", "_");
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Имя", 		ИмяКоманды);
		ПараметрыКоманды.Вставить("Действие", 	"ЗапуститьОбработкуОтчет");
		Попытка
			Library.ДобавитьКомандуВКоллекциюКомандФормы(Команды, ПараметрыКоманды);
		Исключение
			Сообщить(ИмяКоманды + Символы.ПС + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("Имя", 		ИмяКоманды);
		ПараметрыКнопки.Вставить("Вид", 		ВидКнопкиФормы.КнопкаКоманднойПанели);
		ПараметрыКнопки.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
		ПараметрыКнопки.Вставить("ИмяКоманды", 	ИмяКоманды);
		ПараметрыКнопки.Вставить("Заголовок", 	Выборка.ДОТ.Наименование);
		Попытка
			Если 	  Выборка.Вид = ДополнительнаяОбработка Тогда
				Library.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопки, Элементы.Обработки);	
			ИначеЕсли Выборка.Вид = ДополнительныйОтчет Тогда
				Library.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопки, Элементы.Отчеты);
			КонецЕсли;
		Исключение
			Сообщить(ИмяКоманды + Символы.ПС + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ИнициализироватьДополнительныеОтчетыИОбработки(UID)
	Возврат РеквизитФормыВЗначение("Объект").GetLibraryNameByUID(UID);	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбработкуОтчет(Команда)
	ВнешнийУникальныйИдентификатор = СтрЗаменить(СтрЗаменить(Команда.Имя, "uid", ""), "_", "-");
	ИмяОбработкиОтчета = ИнициализироватьДополнительныеОтчетыИОбработки(ВнешнийУникальныйИдентификатор);
	Если ИмяОбработкиОтчета = Неопределено Тогда Возврат; КонецЕсли;
	ОткрытьФорму(ИмяОбработкиОтчета + ".Форма", , , Новый УникальныйИдентификатор);
КонецПроцедуры



&НаСервере
Функция ЛояльностьИспользуется(Организация) 
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ЛояльностьИспользуетсяПодразделением()
	
	Подразделение = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Подразделение = &Подразделение");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////Н А В И Г А Ц И Я////////////////////////////////////////

&НаКлиенте
Процедура Навигация_ВидыНоменклатуры(Команда)
	УстановитьВариантОтбора(Команда); 
	ВидыНоменклатурыПриАктивизацииСтроки(Элементы.ВидыНоменклатуры);
КонецПроцедуры

&НаКлиенте
Процедура Навигация_ИерархияНоменклатуры(Команда)
	 УстановитьВариантОтбора(Команда);
	 Загрузить_ТЗ_НоменклатураКлиент(Элементы.ИерархияНоменклатуры.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Навигация_СегментыНоменклатуры(Команда)
	 УстановитьВариантОтбора(Команда);
	 Загрузить_ТЗ_НоменклатураКлиент(Элементы.СегментыНоменклатуры.ТекущаяСтрока);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбора(Команда)
	ИсточникВариантОтбора = СтрЗаменить(Команда.Имя, "_", "");
	ЭлВариантыНавигации = Элементы.ВариантыНавигации;
	Для Каждого ЭлВариантОтбора Из Элементы.УстановитьВариантОтбора.ПодчиненныеЭлементы Цикл
		ЭлВариантОтбора.Пометка = ИсточникВариантОтбора = СтрЗаменить(ЭлВариантОтбора.Имя, "_", ""); 	
	КонецЦикла;
	ЭлВариантыНавигации.ТекущаяСтраница = ЭлВариантыНавигации.ПодчиненныеЭлементы[ИсточникВариантОтбора];
КонецПроцедуры



&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	Поиск_СтрокаПоиска = "";
	Если ИсточникВариантОтбора = "НавигацияИерархияНоменклатуры" Тогда 
		Загрузить_ТЗ_НоменклатураКлиент(Элемент.ТекущаяСтрока); 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	Поиск_СтрокаПоиска = "";
	
	Если ФормаБудетПерерисована Тогда
		ФормаБудетПерерисована = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИсточникВариантОтбора = "НавигацияВидыНоменклатуры" Тогда 
		Если Элемент.ТекущаяСтрока <> Неопределено Тогда
			Навигация_СсылкаНаТоварнуюКатегорию = Элемент.ТекущиеДанные.ТоварнаяКатегория;
			Загрузить_ТЗ_НоменклатураКлиент(Элемент.ТекущиеДанные.Ссылка); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СегментыНоменклатурыПриАктивизацииСтроки(Элемент)
	Поиск_СтрокаПоиска = "";
	Если ИсточникВариантОтбора = "НавигацияСегментыНоменклатуры" Тогда
		Загрузить_ТЗ_НоменклатураКлиент(Элемент.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ЗакладкаНастройки(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
	Элементы[ПредыдущаяКоманда].Пометка 	= Ложь;
	Элементы.ЗакладкаНастройки.Пометка 		= Истина;	
	ПредыдущаяКоманда 	= "ЗакладкаНастройки";
КонецПроцедуры


&НаКлиенте
Процедура ЗакладкаЗаказыПокупателей(Команда)	
	Элементы.ГруппаСтраницы.ТекущаяСтраница    = Элементы.ГруппаЗаказыПокупателей;
	Элементы[ПредыдущаяКоманда].Пометка 	   = Ложь;	
	Элементы.ЗакладкаЗаказыПокупателей.Пометка = Истина;
	ПредыдущаяКоманда 	= "ЗакладкаЗаказыПокупателей";	
	ОбновитьЗаказыКлиентовКлиент();	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПодборНоменклатуры(Команда)	
	Элементы.ГруппаСтраницы.ТекущаяСтраница 	= Элементы.ГруппаПодборНоменклатуры;
	Элементы[ПредыдущаяКоманда].Пометка 		= Ложь;
	Элементы.ЗакладкаПодборНоменклатуры.Пометка = Истина;	
	ПредыдущаяКоманда 	= "ЗакладкаПодборНоменклатуры";	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаКТСПомощь(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКТСПомощь;
	Элементы[ПредыдущаяКоманда].Пометка 	= Ложь;
	Элементы.ЗакладкаКТСПомощь.Пометка 		= Истина;	
	ПредыдущаяКоманда 	= "ЗакладкаКТСПомощь";
	КТСПомощь_ЗагрузитьСписокРеализаций();
	ПодключитьОбработчикОжидания("КТСПомощь_АвтоматическоеОбновлениеСписка", 300);
	КТСПомощь_АвтоматическоеОбновление = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаОплатыПартнеров(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОплата;
	Элементы[ПредыдущаяКоманда].Пометка = Ложь;
	Элементы.ЗакладкаОплатыПартнеров.Пометка = Истина;	
	ПредыдущаяКоманда = "ЗакладкаОплатыПартнеров";
	Оплаты_Обновить(Неопределено);
КонецПроцедуры




////////////////////////////////////////////П О И С К/////////////////////////////////////////////////
                                                                                                  
&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		Поиск_СтрокаПоиска = "";
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(Поиск_ИсторияПоиска.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Поиск_СтрокаПоиска = ВыбранноеЗначение;
	Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Поиск_СтрокаПоиска = СокрЛП(СтрЗаменить(СтрЗаменить(Текст, Символ(182), ""), " ", "%"));
	Если НЕ ПустаяСтрока(Поиск_СтрокаПоиска) Тогда
		Поиск_ИсторияПоиска.Вставить(0, Поиск_СтрокаПоиска);
		Если Поиск_ИсторияПоиска.Количество() = 21 Тогда
			Поиск_ИсторияПоиска.Удалить(20);
		КонецЕсли;
	КонецЕсли;
	
	Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИнсертОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	InsertCodeСервер(Текст);
	Поиск_СтрокаИнсерт = "";
КонецПроцедуры




&НаКлиенте
Процедура КартинкаПоискаНажатие(Элемент)
	Элементы.Навигация.Видимость = НЕ Элементы.Навигация.Видимость; 
КонецПроцедуры


////////////////////////////////////////////И С Т О Ч Н И К////////////////////////////////////////////


&НаКлиенте
Процедура ВариантыИсточникаЗапросаПриИзменении(Элемент)
	Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВПапкеПриИзменении(Элемент)
	Если НЕ ПустаяСтрока(Поиск_СтрокаПоиска) Тогда
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеПозиции(Команда)
	Если Вопрос("Вывод всех позиций номенклатуры может занять продолжительное время, продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		СтароеКоличествоНоменклатурыВТаблице = КоличествоНоменклатурыВТаблице;
		КоличествоНоменклатурыВТаблице 		 = "99999";
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
		КоличествоНоменклатурыВТаблице 		 = СтароеКоличествоНоменклатурыВТаблице;
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если НЕ Соглашение.Пустая() Тогда
		ИнициализироватьПараметрыПоСоглашению(Соглашение);
		Если ЛояльностьИспользуетсяПодразделением() Тогда
			ДИ_Партнер = Неопределено;
		КонецЕсли;
		ОбновитьВзаиморасчетыСПартнером();
		ОбновитьСодержанииеКорзиныКлиент();	
	 КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Партнер = ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Клиент", Истина)));	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ОткрытьФорму(
			"Справочник.СоглашенияСКлиентами.ФормаВыбора",
			Новый Структура("ДатаДокумента, Партнер, ТолькоТиповые, ТолькоИспользуемыеВРаботеТП, ТолькоНаКомиссию, ТолькоКредитные, ТекущаяСтрока", 
			"00010101", 
			Партнер,
			Ложь,
			Ложь, 
			Ложь,
			Ложь),
			Элемент
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыПоСоглашению(ПараметрСоглашение)
	УстановитьПривилегированныйРежим(Истина);	
	СоглашениеОрганизация 	= ПараметрСоглашение.Организация;
	СоглашениеСклад			= ПараметрСоглашение.Склад;
	СоглашениеВидЦены		= ПараметрСоглашение.ВидЦен; 
	СоглашениеВалюта		= ПараметрСоглашение.Валюта;
	ДИ_Партнер				= ПараметрСоглашение.Партнер;
	
	ЛояльностьИспользуеться = РеквизитФормыВЗначение("Объект").GetLibrary("LoyaltyLibrary").ЛояльностьИспользуеться(СоглашениеОрганизация);
	
	Элементы.Цена.Заголовок 		= Строка(СоглашениеВидЦены) + "," +  Строка(СоглашениеВидЦены.ВалютаЦены);
	Элементы.НаличиеСклад.Заголовок = СоглашениеСклад;
	
	ПродажаОблагаетсяНДС = ПараметрСоглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Элементы.ТЗ_КорзинаСтавкаНДС.Видимость 			= ПродажаОблагаетсяНДС;
	Элементы.ТЗ_КорзинаСуммаНДС.Видимость  			= ПродажаОблагаетсяНДС;
	Элементы.ТЗ_КорзинаПродактаСтавкаНДС.Видимость 	= ПродажаОблагаетсяНДС;
	Элементы.ТЗ_КорзинаПродактаСуммаНДС.Видимость  	= ПродажаОблагаетсяНДС;
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйВидЦены1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(СоглашениеВидЦены);
	СписокЗначений.Добавить(ДополнительныйВидЦены2);
	Элементы.ДополнительныйВидЦены1.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДопВидовЦенНоменклатуры(СписокЗначений));
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйВидЦены2НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(СоглашениеВидЦены);
	СписокЗначений.Добавить(ДополнительныйВидЦены1);
	Элементы.ДополнительныйВидЦены2.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДопВидовЦенНоменклатуры(СписокЗначений));
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйВидЦены3НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(СоглашениеВидЦены);
	СписокЗначений.Добавить(ДополнительныйВидЦены3);
	Элементы.ДополнительныйВидЦены3.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДопВидовЦенНоменклатуры(СписокЗначений));
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйВидЦены4НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(СоглашениеВидЦены);
	СписокЗначений.Добавить(ДополнительныйВидЦены4);
	Элементы.ДополнительныйВидЦены4.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДопВидовЦенНоменклатуры(СписокЗначений));
КонецПроцедуры




&НаКлиенте
Процедура ДополнительноеСвойство1ПриИзменении(Элемент)
	ИнициализироватьДополнительныеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеСвойство2ПриИзменении(Элемент)
	ИнициализироватьДополнительныеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеСвойство1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ДополнительноеСвойство1.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДопСвойств(ДополнительноеСвойство2));
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеСвойство2НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ДополнительноеСвойство2.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДопСвойств(ДополнительноеСвойство1));
КонецПроцедуры

&НаСервере 
Функция ПолучитьСписокДопСвойств(Значение)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Свойство
		|	
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты
		|
		|ГДЕ
		|	Ссылка 	= Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
		|И	Свойство <> &Значение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Свойство
		|	
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения
		|
		|ГДЕ
		|	Ссылка = Значение(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
		|И	Свойство <> &Значение
		|");
	Запрос.УстановитьПараметр("Значение", Значение); 
	Свойства = Запрос.Выполнить().Выгрузить();	
	МассивСвойств = Свойства.ВыгрузитьКолонку("Свойство");
	Возврат МассивСвойств;	
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьСписокДопВидовЦенНоменклатуры(СписокЗначений)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Ссылка
		|
		|ИЗ
		|	Справочник.ВидыЦен 
		|ГДЕ 
		|	Ссылка НЕ В (&СписокЗначений)");
	Запрос.УстановитьПараметр("СписокЗначений", СписокЗначений); 
	ВидыЦен = Запрос.Выполнить().Выгрузить();	
	МассивВидовЦен = ВидыЦен.ВыгрузитьКолонку("Ссылка");
	Возврат МассивВидовЦен;	
	
КонецФункции

&НаКлиенте
Процедура ДополнительныйВидЦеныПоставщикаПриИзменении(Элемент)
	ИнициализироватьДополнительныеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура КолонкаДнейНаСкалдеПриИзменении(Элемент)
	ИнициализироватьДополнительныеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура КолонкаАналитикаПриИзменении(Элемент)
	
	Отказ = Ложь;
	Если Период_ПериодПланирования = 0 Тогда
		ВывестиСообщениеПользователю("Задайте период планирования", "Период_ПериодПланирования");
		Отказ = Истина;	
	КонецЕсли;
	
	Если Период_Анализа.ДатаНачала = '00010101' ИЛИ Период_Анализа.ДатаОкончания = '00010101' Тогда
		ВывестиСообщениеПользователю("Задайте период анализа", "Период_Анализа");
		Отказ = Истина;	
	КонецЕсли;
	
	Если Отказ Тогда
		КолонкаАналитика = Ложь;
	КонецЕсли;
	
	ИнициализироватьДополнительныеКолонки();
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользоватьТоварныеКатегорииПриИзменении(Элемент)
	ИнициализироватьДополнительныеКолонки()
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПраваПользователей()
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) И НЕ РольДоступна(Метаданные.Роли.Продакт_менеджер) Тогда
		ALPS_ОграниченнаяАктуальность 				  = Истина;
		КолонкаАналитика 							  = Ложь;
		Элементы.КолонкаАналитика.Видимость 		  = Ложь;
		Элементы.Период_ДнейОтстрочки.Видимость 	  = Ложь;
		Элементы.Период_НачалоАнализа.Видимость 	  = Ложь;
	Иначе
		ALPS_ПродактМенеджер						  = Истина;
		Элементы.МенюКнопокДляПродактов.Видимость	  = Истина;	
	КонецЕсли;
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) И НЕ РольДоступна(Метаданные.Роли.ОтклонениеОтУсловийПродаж) Тогда
		Элементы.ТЗ_КорзинаВидЦены.ТолькоПросмотр 			= Истина;
		Элементы.ТЗ_КорзинаПродактаВидЦены.ТолькоПросмотр 	= Истина;
	КонецЕсли;
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) И НЕ РольДоступна(Метаданные.Роли.КТС_СозданиеСкидочныхКарт) Тогда
		Элементы.Создание_СкидочныхКарт.Видимость = Ложь;	
	КонецЕсли;
	
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.КТС_ДобавлениеИзменениеУсловийОтгрузки) Тогда
		Элементы.ЗакладкаОплатыПартнеров.Видимость = Истина;
	КонецЕсли;
	
	// КТС Помощь
	ВидимостьЗакладкиКТСПомощь				= УстановитьВидимостьЗакладкиКТСПомощь();
	Элементы.ЗакладкаКТСПомощь.Видимость 	= ВидимостьЗакладкиКТСПомощь;
	Элементы.ГруппаКТСПомощь.Видимость 		= ВидимостьЗакладкиКТСПомощь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДополнительныеКолонки()
	
	Для Инд = 1 По 4  Цикл
	
		Элементы["ДопЦена" + Инд].Видимость = НЕ ЭтаФорма["ДополнительныйВидЦены" + Инд].Пустая();
		Если ЭтаФорма["ДополнительныйВидЦены" + Инд].Пустая() Тогда
			Если Сортировка_Поле = "КешДопЦен" + Инд + ".Цена" Тогда Сортировка_Поле = ""; КонецЕсли;
		Иначе
			Элементы["ДопЦена" + Инд].Заголовок = Строка(ЭтаФорма["ДополнительныйВидЦены" + Инд]);
		КонецЕсли;
	
	
	КонецЦикла; 
	
	
	СписокИнд = Новый Соответствие;

	Для Инд = 1 По 21 Цикл
		Элементы["ТЗ_НоменклатураГруппа_ЦенаПоставщика" + Инд].Видимость = НЕ ЭтаФорма["ДополнительныйВидЦеныПоставщика" + Инд].Пустая();
		Если ЭтаФорма["ДополнительныйВидЦеныПоставщика" + Инд].Пустая() Тогда
			Если Сортировка_Поле = "КешДопЦенПоставщика" + Инд + ".Цена" Тогда Сортировка_Поле = ""; КонецЕсли;
		Иначе
			Элементы["ЦенаПоставщика" + Инд].Заголовок = Строка(ЭтаФорма["ДополнительныйВидЦеныПоставщика" + Инд]);
			СписокИнд.Вставить(Инд,Инд);
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьУсловноеОформлениеНаСервере(СписокИнд);
  	
	Элементы.ДопСвойство1.Видимость = НЕ ДополнительноеСвойство1.Пустая();
	Если ДополнительноеСвойство1.Пустая() Тогда
		Если Сортировка_Поле = "КешДопСвойство1.Значение" Тогда Сортировка_Поле = ""; КонецЕсли;
	Иначе
		Элементы.ДопСвойство1.Заголовок = Строка(ДополнительноеСвойство1);
	КонецЕсли;
	
	
	
	Элементы.ДопСвойство2.Видимость = НЕ ДополнительноеСвойство2.Пустая();
	Если ДополнительноеСвойство2.Пустая() Тогда
		Если Сортировка_Поле = "КешДопСвойство2.Значение" Тогда Сортировка_Поле = ""; КонецЕсли;
	Иначе
		Элементы.ДопСвойство2.Заголовок = Строка(ДополнительноеСвойство2);
	КонецЕсли;
	
	
	Элементы.ПланПродаж.Видимость 		  = КолонкаАналитика;
	Элементы.А_Заказ.Видимость 			  = КолонкаАналитика;
	Элементы.ТЗ_АнализПродажи.Видимость   = КолонкаАналитика;
	Элементы.ТЗ_Вал.Видимость 			  = КолонкаАналитика;
	Элементы.ТЗ_СреднийЗапас.Видимость 	  = КолонкаАналитика;
	Элементы.ТЗ_ХранениеВДнях.Видимость   = КолонкаАналитика;
	Элементы.ТЗ_Оборачиваемость.Видимость = КолонкаАналитика;
	Если НЕ КолонкаАналитика Тогда
		Если 	  Сортировка_Поле = "РезультатАнализа.А_ПродажиЗаПериод" 	Тогда Сортировка_Поле = ""; 
		ИначеЕсли Сортировка_Поле = "РезультатАнализа.А_Вал" 				Тогда Сортировка_Поле = ""; 
		ИначеЕсли Сортировка_Поле = "РезультатАнализа.А_СреднийЗапас" 		Тогда Сортировка_Поле = ""; 
		ИначеЕсли Сортировка_Поле = "РезультатАнализа.А_ХранениеВДнях" 		Тогда Сортировка_Поле = ""; 
		ИначеЕсли Сортировка_Поле = "РезультатАнализа.А_Оборачиваемость" 	Тогда Сортировка_Поле = ""; 
		ИначеЕсли Сортировка_Поле = "А_СреднийЗапас / А_ХранениеВДнях * &Планирование - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)" Тогда Сортировка_Поле = ""; 
		ИначеЕсли Сортировка_Поле = "ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 9999 ИНАЧЕ А_ХранениеВДнях / А_СреднийЗапас * (ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) + ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)) КОНЕЦ" Тогда Сортировка_Поле = ""; КонецЕсли;
	КонецЕсли;
	
	//Товарные Категории
	Элементы.ТЗ_НоменклатураГруппаКатегория.Видимость = ИспользоватьТоварныеКатегории; 
	
КонецПроцедуры

//Установить условное оформления для полей цени поставщиков
//
// Параметры:
//  СписокИнд - Соответствие - Список индексов для получения цен поставщика
// 				   	
&НаСервере
Процедура УстановитьУсловноеОформлениеНаСервере(СписокИнд)
	ЭлементУО	=  ЭтаФорма.УсловноеОформление.Элементы;
	
	СписокДляУдаления = Новый Соответствие;
	Для каждого Строка Из ЭлементУО Цикл
		Если Лев(Строка.Поля,14)  = "ЦенаПоставщика" Тогда
		     Инд = Сред(Строка.Поля,15,2);
			 СписокДляУдаления.Вставить(Инд,Строка);
        КонецЕсли;
	КонецЦикла; 
	
	Для каждого Строка Из СписокИнд Цикл
		Инд = Строка.Значение;
		Если	СписокДляУдаления.Получить(Строка(Инд)) = Неопределено Тогда
			ЭлементУсловногоОформления 		= ЭлементУО.Добавить();
			ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ЦенаПоставщика"+ Инд);
			ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЗ_Номенклатура.ПСЦенаП"+ Инд);
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение	= Ложь;
			ЦветТекстПоля					= Новый Цвет(128,128,128);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстПоля);
			ШрифтПоля 						= Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , , , ,Истина);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПоля);
		Иначе
			СписокДляУдаления.Удалить(Инд);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Строка Из СписокДляУдаления Цикл
	    ЭлементУО.Удалить(Строка.Значение);
	КонецЦикла; 	
КонецПроцедуры // УстановитьУсловноеОформлениеНаСервере(Инд)



////////////////////////////////////////////Н О М Е Н К Л А Т У Р А////////////////////////////////////

&НаКлиенте
Процедура ТЗ_НоменклатураПриАктивизацииСтроки(Элемент)
	
	ДИ_СсылкаНаСайт 		= "";
	ДИ_Гарантия				= "";
	ДИ_ДатаПоступления 		= Неопределено;
	ДИ_ДокументПоступления 	= Неопределено;
	
	//ПодключитьОбработчикОжидания("НоменклатураПриАктивизацииСтроки", 0.2, Истина);
	НоменклатураПриАктивизацииСтроки()
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_НоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элемент.ТекущийЭлемент;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ИмяКолонки = ТекущийЭлементТЗ.Имя;
		Если 		ИмяКолонки = "Номенклатура" ИЛИ Найти(ИмяКолонки, "Номенклатура_") = 1 Тогда ОбработатьВыборНоменклатуры(ТекущиеДанные.Номенклатура, Неопределено, ТекущиеДанные.Цена);		
		ИначеЕсли 	ИмяКолонки = "Цена"      			 Тогда ОбработатьВвестиЗначение(СоглашениеВидЦены, "Цена");
		ИначеЕсли	ИмяКолонки = "ДопЦена1"      		 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦены1, "ДопЦена1");
		ИначеЕсли	ИмяКолонки = "ДопЦена2" 	    	 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦены2, "ДопЦена2");
		ИначеЕсли	ИмяКолонки = "ДопЦена3"      		 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦены3, "ДопЦена3");
		ИначеЕсли	ИмяКолонки = "ДопЦена4" 	    	 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦены4, "ДопЦена4");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика1"       Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика1");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика2"       Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика2");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика3" 	     Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика3");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика4"       Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика4");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика5"       Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика5");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика6" 	     Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика6");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика7"       Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика7");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика8"       Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика8");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика9" 	     Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика9");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика10"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика10");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика11"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика11");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика12" 	 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика12");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика13" 	 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика13");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика14"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика14");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика15"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика15");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика16" 	 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика16");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика17"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика17");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика18"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика18");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика19" 	 Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика3, "ЦенаПоставщика19");
		ИначеЕсли 	ИмяКолонки = "ЦенаПоставщика20"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика1, "ЦенаПоставщика20");
		ИначеЕсли	ИмяКолонки = "ЦенаПоставщика21"      Тогда ОбработатьВвестиЗначение(ДополнительныйВидЦеныПоставщика2, "ЦенаПоставщика21");
	
	
		ИначеЕсли	ИмяКолонки = "СрокПоставки" 		Тогда 
			Если ALPS_ПродактМенеджер Тогда
				Если ТекущиеДанные.ALPS_Привязки Тогда
					Форма = ПолучитьФорму(	"ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Анализ прайс-листов (ALPS)") + ".Форма.КроссПривязки", 
											Новый Структура("Номенклатура, Код, Артикул, Владелец", ТекущиеДанные.Номенклатура, Неопределено, Неопределено, Неопределено), 
											УникальныйИдентификатор);
					Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
						Форма.ОткрытьМодально();
					КонецЕсли;
					ТекущиеДанные.ALPS_Привязки = Ложь;
				Иначе
					ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, "ОтчетПоЦенамПоставщиков");	
				КонецЕсли;		
			Иначе
				Предупреждение("Недостаточно прав для просмотра отчета.");
			КонецЕсли;
		ИначеЕсли 	ИмяКолонки = "РезервСклад"			Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, 	"ОтчетПоРезервам");
		ИначеЕсли 	ИмяКолонки = "ОбщееНаличие"			Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, 	"ОтчетПоОстаткам");
		ИначеЕсли 	ИмяКолонки = "ОбщееСвободно"		Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено,	"ОтчетПоОстаткам");
		ИначеЕсли 	ИмяКолонки = "ОжидаемыйТовар"		Тогда ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, 	"ОтчетПоОжидаемымТоварам"); 
		ИначеЕсли   ИмяКолонки = "НаличиеСклад"	        Тогда ОбработатьВвестиЗначение(СоглашениеСклад, 							"НаличиеСклад");
		ИначеЕсли   ИмяКолонки = "А_ПродажиЗаПериод"    Тогда ОбработатьОткрытиеДиаграммы(ТекущиеДанные.Номенклатура, Неопределено, "ДиаграммаПродаж");
		ИначеЕсли   ИмяКолонки = "БонусПродавца"        Тогда ОбработатьВведениеРазмераБонуса(ТекущиеДанные); 

		КонецЕсли;          
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВведениеРазмераБонуса(ТекущиеДанные)
	Перем РазмерБонуса;
	Если НЕ ПроверитьДоступностьПрава("Продакт_менеджер") Тогда
		Предупреждение("Право устанавливать бонусы менеджеров не доступно, обратитесь к продакт-менеджеру.");
	Иначе
		Если ВвестиЧисло(РазмерБонуса, "Введите размер бонуса", 5, 2) Тогда
			ОбработатьЗаписьБонусМенеджера(ТекущиеДанные.Номенклатура, РазмерБонуса);
			ТекущиеДанные.БонусируемыйТовар = ?(РазмерБонуса = 0, Ложь, Истина);
			ТекущиеДанные.БонусПродавца	    = РазмерБонуса;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПроверитьДоступностьПрава(Право)
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли[Право]) Тогда
		Возврат Истина;	
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ОбработатьЗаписьБонусМенеджера(Номенклатура, РазмерБонуса)
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.БонусыМенеджерам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Дата.Установить(ТекущаяДата());
	Если РазмерБонуса<>0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Дата			= ТекущаяДата();
		Запись.Номенклатура = Номенклатура;
		Запись.Бонус 		= РазмерБонуса;
		Запись.Используется = Истина;
	КонецЕсли;
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВвестиЗначение(Значение, ИмяКолонки)
	ПредЗначение = Значение; ВвестиЗначение(Значение);
	Если НЕ ПредЗначение = Значение Тогда
		Элементы[ИмяКолонки].Заголовок = Значение;
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЦеновойГруппы(ИндексЦеновойГруппы, Номенклатура, Характеристика = Неопределено, Цена)
	ПараметрыФормы = Новый Структура;  
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	ПараметрыФормы.Вставить("Цена", 		  Цена);
	ПараметрыФормы.Вставить("ВидЦены", 		  СоглашениеВидЦены);
	ФормаПланЦеновыхГрупп = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаПланЦеновыхГрупп", ПараметрыФормы);
	ФормаПланЦеновыхГрупп.ОткрытьМодально();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеОтчета(Номенклатура, Характеристика, ИмяФормы)
	ПараметрыФормы = Новый Структура;  
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	Если ИмяФормы = "ОтчетПоРезервам" Тогда
		ФормаОчета = ПолучитьФорму("РегистрСведений.ALPS_АктуальностьНоменклатуры.Форма.ОтчетПоРезервам", ПараметрыФормы);	
	Иначе	
		ФормаОчета = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма." + ИмяФормы, ПараметрыФормы);
	КонецЕсли; 	
	ОткрытьФорму(ФормаОчета);		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеДиаграммы(Номенклатура, Характеристика, ИмяФормы)
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("ВидЦены",   	  СоглашениеВидЦены);
	ПараметрыФормы.Вставить("НачалоПериода",  '20111217');
	ПараметрыФормы.Вставить("КонецПериода",   '20120220');
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	
	ФормаОчета = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма." + ИмяФормы, ПараметрыФормы);
	ФормаОчета.Открыть();		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНоменклатуры(Номенклатура, Характеристика, Цена)
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Номенклатура, Характеристика, Неопределено);
	
	ОбработатьИзменениеКорзины(ПараметрыОтбора, Цена);
	
	Если ЛояльностьИспользуеться Тогда
		
		СтруктураВозврата = ОбновитьСообщениеПроАкционныеТовары(Номенклатура, СоглашениеСклад);
	
		Если НЕ СтруктураВозврата.АкционныеТовары Тогда
			ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаОповещения").ОткрытьМодально();
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтруктураВозврата.СообщениеОбАксессуарах) Тогда
			ПоказатьОповещениеПользователя("Напоминание: ", , СтруктураВозврата.СообщениеОбАксессуарах);	
		КонецЕсли;
		
	КонецЕсли;
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	ЭлементКорзина = ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродакта,  	Элементы.ТЗ_Корзина);
	
	РезультатОтбора = РабочаяКорзина.НайтиСтроки(ПараметрыОтбора);
	Если РезультатОтбора.Количество() Тогда
		ЭлементКорзина.ТекущаяСтрока = РезультатОтбора[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьСуммаИтог();
	
КонецПроцедуры





&НаКлиенте
Процедура НоменклатураПриАктивизацииСтроки()	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОбновитьПанельДополнительнойИнформации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельДополнительнойИнформации(Номенклатура)
	УстановитьПривилегированныйРежим(Истина);
	
	ДИ_СсылкаНаСайт = Номенклатура.НаименованиеПолное; 
	ДИ_Гарантия		= ПолучитьЗначениеСвойства("Гарантія", Номенклатура);	
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументПоступления,
		|	МАКСИМУМ(ВЫБОР 
		|				КОГДА ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|				ТОГДА ТоварыЗаказ.ДатаПоступления
		|				ИНАЧЕ ДокументПоступления.Дата
		|			 КОНЕЦ) КАК ДатаПоступления	
		|ИЗ
		|    РегистрНакопления.ТоварыКПоступлению.Обороты(, , , Номенклатура = &Номенклатура) КАК ТоварыКПоступлению
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказ
		|ПО ТоварыЗаказ.Ссылка			= ТоварыКПоступлению.ДокументПоступления
		|И	ТоварыЗаказ.Номенклатура 	= ТоварыКПоступлению.Номенклатура
		|И	ТоварыЗаказ.Характеристика 	= ТоварыКПоступлению.Характеристика
        |
		|ГДЕ
		|		ДокументПоступления Ссылка Документ.ПоступлениеТоваровУслуг
		|ИЛИ	ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|			 
		|СГРУППИРОВАТЬ ПО ДокументПоступления, 	ВЫБОР 
		|											КОГДА ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|											ТОГДА ТоварыЗаказ.ДатаПоступления
		|											ИНАЧЕ ДокументПоступления.Дата
		|									 	КОНЕЦ 
        |
		|УПОРЯДОЧИТЬ ПО 	ВЫБОР 
		|					КОГДА ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|					ТОГДА ТоварыЗаказ.ДатаПоступления
		|					ИНАЧЕ ДокументПоступления.Дата
		|			 	КОНЕЦ Убыв
		|");
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Партнер", 		ДИ_Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
   	Если Выборка.Следующий() Тогда
		ДИ_ДатаПоступления 		= Выборка.ДатаПоступления;
		ДИ_ДокументПоступления 	= Выборка.ДокументПоступления;	
	КонецЕсли;
	
	
	
	
	
	ФайлКартинки = Номенклатура.ФайлКартинки;	
	Если НЕ Номенклатура.ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка() Тогда
		Если ФайлКартинки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлКартинки;
			МенеджерЗаписи.Прочитать();
			ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
			Картинка = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
	Иначе
		Картинка = "";
	КонецЕсли;
	
	
		
	
	
	Если Элементы.СтраницыИнформацияПродажи.ТекущаяСтраница = Элементы.СтраницаИнформацияПродажи Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Цена
			|
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура 	= &Номенклатура И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.ALPS_ВидыЦен ГДЕ Входная))
			|
			|";
		Выборка = Запрос.Выполнить().Выбрать();
		ДИ_ВходнаяЦена = ?(Выборка.Следующий(), Выборка.Цена, 0);
		
		
		
		Запрос.Текст = "
			|ВЫБРАТЬ 
			|	СуммаВыручки / Количество КАК ПоследняяПродажа
			|
			|ИЗ
			|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
			|
			|ГДЕ
			|	АналитикаУчетаПоПартнерам.Партнер 		= &Партнер
			|И	АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
			|И	Выручка.Регистратор Ссылка Документ.РеализацияТоваровУслуг
			|			
			|
			|УПОРЯДОЧИТЬ ПО Выручка.Период Убыв ";
		Выборка = Запрос.Выполнить().Выбрать();
		ДИ_ПоследняяПродажа = ?(Выборка.Следующий(), Выборка.ПоследняяПродажа, 0);

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСвойства(ИмяСвойства, Объект)
	
	СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);
	Если СсылкаНаСвойство.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ?(СсылкаНаСвойство.ЭтоДополнительноеСведение 
				, "ВЫБРАТЬ Значение ИЗ РегистрСведений.ДополнительныеСведения 		   ГДЕ Объект = &Объект И Свойство = &СсылкаНаСвойство" 
				, "ВЫБРАТЬ Значение ИЗ Справочник.Номенклатура.ДополнительныеРеквизиты ГДЕ Ссылка = &Объект И Свойство = &СсылкаНаСвойство");
	Запрос.УстановитьПараметр("СсылкаНаСвойство", 	СсылкаНаСвойство);				
	Запрос.УстановитьПараметр("Объект", 			Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Значение, Неопределено);
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизита(АдресРеквизита, Объект)
	Перем ЗначениеРеквизита;
	Выполнить("ЗначениеРеквизита = Объект." + АдресРеквизита + ";");
	Возврат ЗначениеРеквизита;
КонецФункции





&НаКлиенте
Процедура Отчет_ДвижениеСерийныхНомеров(Команда)
	
	ИмяТаблицы = ПолучитьИмяТаблицы(Команда.Имя);
	 ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	 Если НЕ ТекущиеДанные = Неопределено Тогда
		ФормаОтчетПоСерийнымНомерам = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ОтчетПоСерийнымНомерам");
		ФормаОтчетПоСерийнымНомерам.Этаформа.Номенклатура = ТекущиеДанные.Номенклатура;
		ФормаОтчетПоСерийнымНомерам.ктсОбновитьСписокСН();
		ФормаОтчетПоСерийнымНомерам.СформироватьПоНоменклатуреНаСервере();
		ФормаОтчетПоСерийнымНомерам.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементСправочникаНоменклатуры(Команда)	
	ИмяТаблицы = ПолучитьИмяТаблицы(Команда.Имя);
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦену(Команда)
	
	ИмяТаблицы = ПолучитьИмяТаблицы(Команда.Имя);
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СтрукутраПередачи 			= Новый Структура;  
		СтрукутраПередачи.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		//СтрукутраПередачи.Вставить("Характеристика", ПустаяСсылкаХарактеристика);
		Форма = ПолучитьФорму("ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Установка цен номенклатуры") + ".Форма.Форма", СтрукутраПередачи, ЭтаФорма, Новый УникальныйИдентификатор());
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАктуальностьНоменклатури(Команда)
	ОткрытьОтчет(ПолучитьИмяТаблицы(Команда.Имя), "ОтчетАктуальностьНоменклатури");
КонецПроцедуры


&НаКлиенте
Процедура Номенклатура_ЗагрузитьХарактеристики(Команда)
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗагрузитьХарактеристикиНаСервере(ТекущиеДанные.Номенклатура) Тогда
			ПоказатьОповещениеПользователя("Характеристики загружены.", ПолучитьНавигационнуюСсылку(ТекущиеДанные.Номенклатура), Строка(ТекущиеДанные.Номенклатура), БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьХарактеристикиНаСервере(Ссылка)
	Возврат ModuleLibraryServer.GetLibrary("Регл. обратный импорт характеристик").ВыполнитьИмпортПоПозиции(Ссылка);
КонецФункции

&НаКлиенте
Процедура Номенклатура_ОбновитьКарточкуТовара(Команда)
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ОбновитьКарточкуТовара(ТекущиеДанные.Номенклатура) Тогда
			ПоказатьОповещениеПользователя("Карточка товара на сайте ktc-ua.com обновлена.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьКарточкуТовара(Ссылка)
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	Попытка	
		HTTP = Новый HTTPСоединение("www.ktc-ua.com", , , , , 5);
		HTTP.Получить("/import/" + Формат(Число(Ссылка.Код), "ЧГ=0"), ВременныйФайл);
		Результат = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	УдалитьФайлы(ВременныйФайл);
	Возврат Результат;
КонецФункции



&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("ТЗ_Номенклатура");
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " Возр";
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник, Истина, , СтруктураПередачи.Идентификатор, СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("ТЗ_Номенклатура");
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " Убыв";
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник, Истина, , СтруктураПередачи.Идентификатор, СтруктураПередачи.Имя);
	КонецЕсли;	
КонецПроцедуры

//&НаКлиенте
//Процедура ОтборИСортировка(Команда)
//	// Вставить содержимое обработчика.
//КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоЗначению(Команда)	
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("ТЗ_Номенклатура");
	Если НЕ СтруктураПередачи.Отказ Тогда
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник, , Истина, СтруктураПередачи.Идентификатор, СтруктураПередачи.Имя);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонки(ИмяКоллекцииЗначений)
	ТДанные  = Элементы[ИмяКоллекцииЗначений].ТекущиеДанные;
	ТЭлемент = Элементы[ИмяКоллекцииЗначений].ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
КонецФункции

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	Если НЕ Сортировка_Отбор_Значение = Неопределено Тогда 
		Сортировка_Отбор_Значение = Неопределено;
		Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияОтборов(Команда)
//	// Вставить содержимое обработчика.
//КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуру(Команда)
	Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПоставщика(Команда)
	ОткрытьОтчет(ПолучитьИмяТаблицы(Команда.Имя), "ОтчетПоЦенамПоставщиков");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоОстаткам(Команда)
	ОткрытьОтчет(ПолучитьИмяТаблицы(Команда.Имя), "ОтчетПоОстаткам");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоРезервам(Команда)
	ОткрытьОтчет(ПолучитьИмяТаблицы(Команда.Имя), "ОтчетПоРезервам");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСвободнымСерийнымНомерам(Команда)
	ОткрытьОтчет(ПолучитьИмяТаблицы(Команда.Имя), "ОтчетПоСвободнымСерийнымНомерам");
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчет(ИмяТаблицы, ИмяОтчета)
	
	ТекущаяСтрока 		= Элементы[ИмяТаблицы].ТекущаяСтрока;
	ТекущиеДанные 		= Элементы[ИмяТаблицы].ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элементы[ИмяТаблицы].ТекущийЭлемент;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, ИмяОтчета);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТаблицы(ИмяКоманды)
	Если Найти(ИмяКоманды, "Корзина") Тогда
		ИмяТаблицы = ?(ИспользуетсяКорзинаПродакта, "ТЗ_КорзинаПродакта", "ТЗ_Корзина");
		Возврат ИмяТаблицы;
	Иначе	
		Возврат "ТЗ_Номенклатура";
	КонецЕсли;	
КонецФункции



///////////////////////////Д О П О Л Н И Т Е Л Ь Н А Я   И Н Ф О Р М А Ц И Я///////////////////////////

&НаКлиенте
Процедура СсылкаНаСайтНажатие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СсылкаНаСайт = "http://www.ktc-ua.com/id/" + Формат(Число(ПолучитьЗначениеРеквизита("Код", ТекущиеДанные.Номенклатура)), "ЧГ=0");
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтПроизводителя(Команда)
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СсылкаНаСайт = ПолучитьСсылкуНаСайт("Лінк на товар на сайті виробника", ТекущиеДанные.Номенклатура);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтРозетки(Команда)	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СсылкаНаСайт = ПолучитьСсылкуНаСайт("Лінк на картку товару на Розетці", ТекущиеДанные.Номенклатура);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтХотЛайн(Команда)
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СсылкаНаПриложения 	= 	ПолучитьЗначениеРеквизита("Артикул", ТекущиеДанные.Номенклатура);
		СсылкаНаСайт		=	"http://hotline.ua/sr/?q=" + ЗакодироватьСтроку(СсылкаНаПриложения);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтГугл(Команда)	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СсылкаНаСайт = "http://www.google.com/search?hl=uk&q=" + ПолучитьЗначениеРеквизита("Артикул", ТекущиеДанные.Номенклатура);
		ЗапуститьПриложение(СсылкаНаСайт);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаКорпоративныйПортал(Команда)
	ЗапуститьПриложение("http://c.ktc-ua.com");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаКорпоративныйТрекер(Команда)
	ЗапуститьПриложение("http://c.ktc-ua.com:8080");
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаСайт(ИмяРеквизита, Номенклатура)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты
		|	
		|ГДЕ
		|	Ссылка = &Ссылка
		|И	Свойство.Наименование = &ИмяРеквизита ");
	Запрос.УстановитьПараметр("Ссылка", 	  Номенклатура);
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Значение, ?(ИмяРеквизита = "Лінк на картку товару на Розетці", "http://rozetka.com.ua/search/?text=", "http://icecat.com.ua/index.cgi?language=uk&new_search=1&lookup_text=") + Номенклатура.Артикул);

КонецФункции

&НаКлиенте
Процедура ДИ_ДатаПоступленияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(ДИ_ДокументПоступления);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВключитьКорзинуНажатие(Элемент)
	Элементы.ГруппаОбластьКорзины.Видимость = Не Элементы.ГруппаОбластьКорзины.Видимость;
КонецПроцедуры



///////////////////////////О Б Р А Б О Т К А     Д Е Й С Т В И Й   К О Р З И Н Ы//////////////////////

&НаКлиенте
Процедура Партнер_Регистрация(Команда)	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Организация",   СоглашениеОрганизация);	
	ФормаРегистрации = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаРегистрацииПартнера", ПараметрыФормы);
	Результат = ФормаРегистрации.ОткрытьМодально();	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Партнеры") Тогда
		ДИ_Партнер = Результат;
		ДИ_ПартнерПриИзменении(ДИ_Партнер);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Партнер_ИспользоватьСкидочнуюКарту(Команда)
	Если ДИ_Партнер.Пустая() Тогда ВывестиСообщениеПользователю("Для использования скидочных\бонусных\оборотных карт выберите партнера!", "ДИ_Партнер"); Возврат; КонецЕсли;
	ВвестиСтроку(Партнер_СкидочнаяКарта);
	Если СтрДлина(СтрЗаменить(Партнер_СкидочнаяКарта, " ", "")) <> 7 Тогда ВывестиСообщениеПользователю("Скидочаня карта имеет не верную длину"); Возврат; КонецЕсли;
	Если Лев(Партнер_СкидочнаяКарта, 1) <> "0" 
	   И Лев(Партнер_СкидочнаяКарта, 1) <> "d" 
	   И Лев(Партнер_СкидочнаяКарта, 1) <> "b" Тогда ВывестиСообщениеПользователю("Скидочаня карта имеет не известный тип"); Возврат; КонецЕсли;
	ИспользоватьСкидочнуюКарту();
	ОбновитьВзаиморасчетыСПартнером();
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСкидочнуюКарту()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.СкидочныеКарты ГДЕ Код = &Код");
	Запрос.УстановитьПараметр("Код", Партнер_СкидочнаяКарта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ Выборка.Использована = Справочники.Пользователи.ПустаяСсылка() Тогда
			ВывестиСообщениеПользователю("Скидочная карта уже использована пользователем: " + Выборка.Использована + "! ");
			Возврат;
		ИначеЕсли Выборка.ТипСкидочнойКарты = Перечисления.ТипыСкидочныхКарт.КарткаРазовайСкидки Тогда
			Партнер_Скидка = Выборка.Скидка;
			Для Каждого Элемент ИЗ РабочаяКорзина Цикл Элемент.ПроцентРучнойСкидки = Партнер_Скидка; КонецЦикла;
		ИначеЕсли Выборка.ТипСкидочнойКарты = Перечисления.ТипыСкидочныхКарт.КартаПовышенияОборотаКлиента Тогда
			
			НаборЗаписей = РегистрыСведений.Лояльность_НачальныйОборот.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Партнер.Установить(ДИ_Партнер);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Дата 	= ТекущаяДата();
			Запись.Партнер 	= ДИ_Партнер;
			Запись.Сумма	= Выборка.Скидка * 1000;
			
			НаборЗаписей.Записать();
			
		ИначеЕсли Выборка.ТипСкидочнойКарты = Перечисления.ТипыСкидочныхКарт.КартаБонус Тогда
			
			Документ = Документы.НачислениеБонусов.СоздатьДокумент();
			Документ.Дата 		= ТекущаяДата();
			Документ.Менеджер 	= ПараметрыСеанса.ТекущийПользователь;
			Документ.Партнер	= ДИ_Партнер;
			Документ.Бонус		= Выборка.Скидка * 10;

			Документ.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		ПогаситьСкидочнуюКарту(Партнер_СкидочнаяКарта);
		СоздатьВстречу_ИспользованиеСкидочнойКарты(ДИ_Партнер, Партнер_СкидочнаяКарта, Выборка.Создана);
		
	Иначе
		ВывестиСообщениеПользователю("Скидочная карта не найдена!");
	КонецЕсли;
	
	
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВстречу_ИспользованиеСкидочнойКарты(Партнер, КодКарты, СоздательКарты)
	
	Контакт = Партнер.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.Телефон, "Тип");
	
	ДокументВстреча = Документы.Встреча.СоздатьДокумент();
	ДокументВстреча.Автор 					= СоздательКарты;
	ДокументВстреча.Тема					= "Использование скидочной карты: " + КодКарты + " Пользователь: " + Строка(ПараметрыСеанса.ТекущийПользователь);
	ДокументВстреча.Важность  				= Перечисления.ВариантыВажностиВзаимодействия.Высокая;
	ДокументВстреча.Дата					= ТекущаяДата();
	ДокументВстреча.ДатаНачала				= ТекущаяДата();
	ДокументВстреча.ДатаОкончания   		= ТекущаяДата() + 600;
	ДокументВстреча.МестоПроведенияВстречи 	= СоглашениеСклад;
	ДокументВстреча.Описание				= "Использование скидочной карты: " + КодКарты;
	ДокументВстреча.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
	ДокументВстреча.Рассмотрено				= Истина;
	ДокументВстреча.СписокУчастников		= Партнер;
	
	Участник = ДокументВстреча.Участники.Добавить();
	Участник.Контакт 				= Партнер;
	Участник.КакСвязаться			= ?(Контакт = Неопределено, "", Контакт.Представление);
	Участник.ПредставлениеКонтакта 	= Партнер;
	ДокументВстреча.Записать();
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ДокументВстреча, ДокументВстреча.Предмет);	
	ДокументВстреча.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПогаситьСкидочнуюКарту(КодКарты)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Код,
		|   Создана,
		|   &Пользователь КАК Использована,
		|   ТипСкидочнойКарты,
		|   Скидка
		|
		|ИЗ 
		|	РегистрСведений.СкидочныеКарты 
		|
		|ГДЕ 
		|	Код = &Код");
	Запрос.УстановитьПараметр("Код", КодКарты);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	НаборЗаписей = РегистрыСведений.СкидочныеКарты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Код.Установить(КодКарты);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Партнер_ЗапланироватьВзаимодействие(Команда)
	Если ДИ_Партнер.Пустая() Тогда ВывестиСообщениеПользователю("Для использования взаимодействия выберите партнера!", "ДИ_Партнер"); Возврат; КонецЕсли;
	ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.ЗапланированноеВзаимодействие.ФормаОбъекта", ДИ_Партнер, ); 
КонецПроцедуры

&НаКлиенте
Процедура Партнер_ЗапланироватьВстречу(Команда)
	Если ДИ_Партнер.Пустая() Тогда ВывестиСообщениеПользователю("Для использования взаимодействия выберите партнера!", "ДИ_Партнер"); Возврат; КонецЕсли;
	ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.Встреча.ФормаОбъекта", ДИ_Партнер, ); 
КонецПроцедуры

&НаКлиенте
Процедура Партнер_НаписатьЭлектронноеПисьмо(Команда)
	Если ДИ_Партнер.Пустая() Тогда ВывестиСообщениеПользователю("Для использования взаимодействия выберите партнера!", "ДИ_Партнер"); Возврат; КонецЕсли; 
	ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ДИ_Партнер, );
КонецПроцедуры

&НаКлиенте
Процедура Партнер_ОтправитьSMS(Команда)
	СМСРассылка = ПолучитьФорму("ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Библиотека внешних обработок") + ".Форма.СМСРассылка", , ЭтаФорма, Новый УникальныйИдентификатор());
	СМСРассылка.Партнер = ДИ_Партнер;
	СМСРассылка.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура Партнер_Позвонить(Команда)
	Если ДИ_Партнер.Пустая() Тогда ВывестиСообщениеПользователю("Для использования взаимодействия выберите партнера!", "ДИ_Партнер"); Возврат; КонецЕсли; 
	ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.ТелефонныйЗвонок.ФормаОбъекта", ДИ_Партнер, ); 		
КонецПроцедуры

&НаКлиенте
Процедура Партнер_Взаиморасчеты(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Партнер_ДосьеПартнера(Команда)
	Если НЕ ДИ_Партнер.Пустая() Тогда 
		ПараметрыКоманды = Новый Массив;
		ПараметрыКоманды.Добавить(ДИ_Партнер);
		ОткрытьФорму("Отчет.ДосьеПартнера.Форма", Новый Структура("Партнер", ПараметрыКоманды), , ПараметрыКоманды,); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Партнер_Покупюрка(Команда)
	ФормаПокупюрка 	= ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаПокупюрка");
	ФормаПокупюрка.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДИ_ПартнерПриИзменении(Элемент)
	ОбновитьВзаиморасчетыСПартнером();
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДИ_ПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	Если ЛояльностьИспользуетсяПодразделением() Тогда 
							
		Если СоглашениеОрганизация.Пустая() Тогда 
			ВывестиСообщениеПользователю("Для начала укажите соглашение!", "Соглашение"); 
			Возврат; 
		КонецЕсли;
		
		ЛояльностьИспользуеться = ЛояльностьИспользуется(СоглашениеОрганизация);
		Если ЛояльностьИспользуеться Тогда
			СтандартнаяОбработка = Ложь;
			LoyalObject = ПолучитьФорму("ВнешняяОбработка." + ПолучитьБиблиотекуФорм("LoyaltyLibrary") + ".Форма.Форма", , ЭтаФорма, Новый УникальныйИдентификатор());
			Результат = LoyalObject.ВвестиНомерМобильного(СоглашениеОрганизация);
			Если Результат = Неопределено Тогда
				Возврат;	
			КонецЕсли;					
			ДИ_Партнер = Результат;
			ОбновитьВзаиморасчетыСПартнером();
			ОбновитьСодержанииеКорзиныКлиент();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВзаиморасчетыСПартнером()
	Партнер_ДолгКлиента = 0;
	Партнер_НашДолг		= 0;
	Партнер_Бонусы		= 0;
	Партнер_Оборот		= 0;
	Партнер_Процент		= 0;
	Партнер_NextLevel	= "";
	Если НЕ ДИ_Партнер.Пустая() Тогда ОбновитьПанельВзаиморасчетов(ДИ_Партнер) КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельВзаиморасчетов(Партнер)
	УстановитьПривилегированныйРежим(Истина);
	ПолучитьДолгПоПартнеру(Партнер);
	ПолучитьБонусыПоПартнеру(Партнер);
	ПолучитьОборотПоПартнеру(Партнер);
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДолгПоПартнеру(Партнер)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА ДолгКлиента ИНАЧЕ ВЫРАЗИТЬ(ДолгКлиента 	* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК ДолгПартнера,
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА НашДолг		ИНАЧЕ ВЫРАЗИТЬ(НашДолг 		* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК НашДолг
		|	
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 ТОГДА  СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК ДолгКлиента,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК НашДолг
		|	ИЗ	
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСКлиентами
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта
		|
		|	ОБЪЕДИНИТЬ 
		|
		|	ВЫБРАТЬ 
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 И ЗаказПоставщику = Неопределено 	ТОГДА СуммаОстаток ИНАЧЕ 0 КОНЕЦ),
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 										ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) 				 
		|	ИЗ	
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСПоставщиками
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта  ) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Курсы
		|ПО Вл.Валюта = Курсы.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ЗапросВалютРегламент
		|ПО ЗапросВалютРегламент.Валюта = &ВалютаКассы ";	
	Запрос.УстановитьПараметр("Партнер", 		Партнер);
	Запрос.УстановитьПараметр("ВалютаКассы", 	СоглашениеВалюта);

	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		Партнер_ДолгКлиента = Выборка.ДолгПартнера;
		Партнер_НашДолг		= Выборка.НашДолг;
	Иначе
		Партнер_ДолгКлиента = 0;
		Партнер_НашДолг		= 0;
	КонецЕсли;
						
КонецПроцедуры

&НаСервере
Процедура ПолучитьБонусыПоПартнеру(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Вл.Бонус, 0) - Сумма(ВЫБОР 
		|									КОГДА ЛояльностьБонусы.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
		|									ТОГДА ЕСТЬNULL(ЛояльностьБонусы.Бонус, 0)
		|									ИНАЧЕ - ЕСТЬNULL(ЛояльностьБонусы.Бонус, 0)
		|								  КОНЕЦ) КАК Бонусы
		|ИЗ (
		|	ВЫБРАТЬ
		|		СУММА(ЛояльностьБонусы.Бонус) КАК Бонус
		|	Из
		|		РегистрНакопления.Лояльность_Бонусы КАК ЛояльностьБонусы
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|			ГДЕ
		|				АналитикаПоПартнерам.Партнер = &Партнер
		|			)) КАК РасчетыСКлиентами
		|	ПО 	ВЫБОР
		|			КОГДА ЛояльностьБонусы.Регистратор.ЗаказКлиента = Неопределено
		|			ТОГДА ЛояльностьБонусы.Регистратор		
		|			КОГДА ЛояльностьБонусы.Регистратор.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка)
		|			ТОГДА ЛояльностьБонусы.Регистратор
		|			ИНАЧЕ ЛояльностьБонусы.Регистратор.ЗаказКлиента
		|		КОНЕЦ  = РасчетыСКлиентами.ЗаказКлиента		
		|			
		|	ГДЕ
		|		Партнер = &Партнер
		|	И	ЛояльностьБонусы.Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|	И	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) <= 0
		|	) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Лояльность_Бонусы КАК ЛояльностьБонусы
		|ПО	ЛояльностьБонусы.Партнер = &Партнер
        |И	ТипЗначения(ЛояльностьБонусы.Регистратор) <> Тип(Документ.РеализацияТоваровУслуг)
        |
		|СГРУППИРОВАТЬ ПО Вл.Бонус";
	Запрос.УстановитьПараметр("Партнер", Партнер); 
    Выборка = Запрос.Выполнить().Выбрать();
	Партнер_Бонусы = ?(Выборка.Следующий(), Выборка.Бонусы, 0);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОборотПоПартнеру(Партнер)
	Запрос = Новый Запрос;
	Запрос.Текст = "		
		|ВЫБРАТЬ
		|	Вл.Партнер,
		|	Сумма(
		|			ВЫБОР
		|				КОГДА Курсы.Валюта = &ВалютаСоглашения
		|				ТОГДА ЕСТЬNULL(СуммаПриход, 0)
		|				ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(СуммаПриход * ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)), 0)
		|		  	КОНЕЦ
		|		  ) - ЕСТЬNULL(ВлЗапрос.Долг, 0) + ЕСТЬNULL(ДопОборот.Сумма, 0) КАК ОборотПоПартнеру
		|
		|ИЗ
		|	(ВЫБРАТЬ 
		|		Ссылка КАК Партнер
		|	ИЗ 
		|		Справочник.Партнеры
		|	ГДЕ
		|		Ссылка = &Партнер) КАК Вл 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК ОборотыСКлиентами 
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК ЗапросВалютРегламент
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют.СрезПоследних() КАК Курсы
		|ПО ОборотыСКлиентами.Валюта = Курсы.Валюта
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			 Аналитика.Партнер,
		|			 Сумма(
		|				ВЫБОР
		|					КОГДА Курсы.Валюта = &ВалютаСоглашения
		|					ТОГДА Долг
		|					ИНАЧЕ ВЫРАЗИТЬ(Долг * ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2))
		|		  		КОНЕЦ) КАК Долг
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО	Аналитика.КлючАналитики = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|				И	Аналитика.Партнер		= &Партнер
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК ЗапросВалютРегламент
		|			ПО Истина
		|
		|   		ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют.СрезПоследних() КАК Курсы
		|   		ПО РасчетыСКлиентами.Валюта = Курсы.Валюта
		|	
		|		ГДЕ	
		|			РасчетыСКлиентами.Регистратор Ссылка Документ.ВозвратТоваровОтКлиента 
		|		СГРУППИРОВАТЬ ПО Аналитика.Партнер) КАК ВлЗапрос 
		|ПО ВлЗапрос.Партнер  = &Партнер
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Лояльность_НачальныйОборот КАК ДопОборот
		|ПО ДопОборот.Партнер =  &Партнер
		|
		|СГРУППИРОВАТЬ ПО Вл.Партнер, ВлЗапрос.Долг, ДопОборот.Сумма 
		|;";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ВалютаСоглашения", СоглашениеВалюта);
	Выборка = Запрос.Выполнить().Выбрать();
	Партнер_Оборот = ?(Выборка.Следующий(), Выборка.ОборотПоПартнеру, 0);
	
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	Значение   
		|ИЗ 
		|	РегистрСведений.СкидкаПоОборотуБонусы 
		|ГДЕ 
		|	НижняяГраница <= &Оборот И (ВерхняяГраница > &Оборот ИЛИ ВерхняяГраница = 0)";
	Запрос.УстановитьПараметр("Оборот", Партнер_Оборот);
	Выборка = Запрос.Выполнить().Выбрать();
	Партнер_Процент   = ?(Выборка.Следующий(), Выборка.Значение, 0);
	
КонецПроцедуры





&НаКлиенте
Процедура Корзина_ОтчетИзмененияЦен(Команда)
	
	НачалоВчера = НачалоДня(ТекущаяДата() - 86400);
	ВвестиДату(НачалоВчера);
		
	ЗагрузитьНоменклатуру(НачалоВчера);
		
	//ФормаПечатьЦенников = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаБыстраяПечатьЦенников", СформироватьСтруктуруПечатиЦенников());
	//ФормаПечатьЦенников.Открыть();
	//ФормаПечатьЦенников.ПечатьЦенниковНаКлиенте();
	
	ОбновитьСуммаИтог();
	
КонецПроцедуры

// Загружаем номенклатуру, в которой изменилась цена на указаную дату 
//
// Параметры:
//  ДатаСравнения  - Дата -  дата на которую изменились цени
//                 
//
&НаСервере
Процедура ЗагрузитьНоменклатуру(ДатаСравнения)
	Запрос		 = Новый Запрос;
	Запрос.Текст = ПолучитьТектсЗапросаНоменклатуриСИзменениямиЦен();
	Запрос.УстановитьПараметр("ДатаСравнения",	ДатаСравнения);
	Запрос.УстановитьПараметр("ВидЦены", 	  	СоглашениеВидЦены);
	Запрос.УстановитьПараметр("Склад", 		  	СоглашениеСклад);
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	РабочаяКорзина.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОбновитьСодержанииеКорзины();
КонецПроцедуры // ЗагрузитьНоменклатуру(ДатаСравнения)

// Получаем номенклатури с изменненими ценами на дату
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - Текст запроса
//
&НаСервере
Функция ПолучитьТектсЗапросаНоменклатуриСИзменениямиЦен()
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	               |	Остатки.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ КешНоменклатура
	               |ИЗ
	               |	РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &Склад) КАК Остатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Остатки.Номенклатура
	               |ИЗ
	               |	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Склад = &Склад) КАК Остатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Цены.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ КешЦены
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПервых(
	               |			&ДатаСравнения,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						КешНоменклатура.Номенклатура
	               |					ИЗ
	               |						КешНоменклатура)
	               |				И ВидЦены = &ВидЦены) КАК Цены
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Цены.Номенклатура,
	               |	Цены.Характеристика КАК Характеристика,
	               |	Цены.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	&ВидЦены КАК ВидЦены,
	               |	&Склад КАК Склад,
	               |	Цены.Цена КАК Цена,
	               |	Цены.Упаковка КАК Упаковка,
	               |	1 КАК КоличествоУпаковок
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						КешЦены.Номенклатура
	               |					ИЗ
	               |						КешЦены)
	               |				И ВидЦены = &ВидЦены) КАК Цены";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТектсЗапросаНоменклатуриСИзменениямиЦен()



&НаКлиенте
Процедура Корзина_БыстраяСборка(Команда)
	ОткрытьФормуМодально("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаБыстройСборки", Новый Структура("Склад, Корзина, Организация", СоглашениеСклад, ПолучитьКорзинуВСтроке(), СоглашениеОрганизация));
КонецПроцедуры

&НаКлиенте
Процедура Создание_СкидочныхКарт(Команда)
	ОткрытьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаРегистрацииСкидок");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРазвернутыеПрайсы(Команда)
	ПолучитьФорму("РегистрСведений.ALPS_РазвернутыеСтроки.ФормаСписка").Открыть();
КонецПроцедуры

&НаСервере
Функция ПолучитьКорзинуВСтроке()	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	Возврат ЗначениеВСтрокуВнутр(РабочаяКорзина.Выгрузить());
КонецФункции

&НаКлиенте
Процедура Корзина_ЗагрузитьИзДокумента(Команда)
	ФормаВыбораДокумента = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаВыбораДокумента", Новый Структура("ВидЦены", СоглашениеВидЦены));	
	ФормаВыбораДокумента.КлючУникальности = ЭтаФорма;
	ФормаВыбораДокумента.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокумента(МассивТоваров) Экспорт
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	Если ТипЗнч(МассивТоваров) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивТоваров Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидЦены", 		СоглашениеВидЦены);
			СтруктураПоиска.Вставить("Номенклатура", 	Элемент.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", 	Элемент.Характеристика);

			Массив = РабочаяКорзина.НайтиСтроки(СтруктураПоиска);
			Если Массив.Количество() > 0 Тогда
				Массив[0].КоличествоУпаковок = Массив[0].КоличествоУпаковок + Элемент.Количество;
			Иначе	
				НоваяСтрока = РабочаяКорзина.Добавить();
				НоваяСтрока.ВидЦены 			= СоглашениеВидЦены;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
				НоваяСтрока.Склад			 	= СоглашениеСклад;
				НоваяСтрока.КоличествоУпаковок 	= Элемент.Количество;
			КонецЕсли;
		КонецЦикла;
		ОбновитьСодержанииеКорзиныКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Иерархия_СравнениеОстатовПоСкладам(Команда)
	ФормаСравненияОстатков = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаСравненияПоСкладам");
	ФормаСравненияОстатков.ГруппаНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	ЗагрузитьИзДокумента(ФормаСравненияОстатков.ОткрытьМодально());
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатуры_СравнениеОстатовПоСкладам(Команда)
	Если Элементы.ВидыНоменклатуры.ТекущаяСтрока <> Неопределено Тогда
		ФормаСравненияОстатков = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаСравненияПоСкладам");
		ФормаСравненияОстатков.ВидНоменклатуры = Элементы.ВидыНоменклатуры.ТекущиеДанные.Ссылка;
		ЗагрузитьИзДокумента(ФормаСравненияОстатков.ОткрытьМодально());
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ТЗ_КорзинаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элемент.ТекущийЭлемент;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		Если ТекущийЭлементТЗ.Имя = "ТЗ_КорзинаНоменклатура" ИЛИ ТекущийЭлементТЗ.Имя = "ТЗ_КорзинаПродактаНоменклатура" Тогда 		
        	СсылкаНаСайт = "http://www.ktc-ua.com/id/" + Формат(Число(ПолучитьЗначениеРеквизита("Код", ТекущиеДанные.Номенклатура)), "ЧГ=0");
			ЗапуститьПриложение(СсылкаНаСайт);
		КонецЕсли;       
		Если ТекущийЭлементТЗ.Имя = "ТЗ_КорзинаПродактаОжидаемыйОстаток" Тогда
			ОбработатьОткрытиеОтчета(ТекущиеДанные.Номенклатура, Неопределено, 	"ОтчетПоОжидаемымТоварам");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаПослеУдаления(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
	ОбновитьСуммаИтог();
КонецПроцедуры

&НаКлиенте
Процедура Корзина_Очистить(Команда)
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	РабочаяКорзина.Очистить();
	ОбновитьСуммаИтог();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	Если РабочаяКорзина.Количество() = 0 Тогда
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма");
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПолучитьДанныеДляПечатиЦенников();
	
	СтруктураПараметры = Новый Структура("АдресВХранилище, НазначениеШаблона");
	СтруктураПараметры.АдресВХранилище = АдресВХранилище;
	
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары", СтруктураПараметры, , Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляПечатиЦенников()
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", 	СоглашениеОрганизация);
	СтруктураДействий.Вставить("ЗаполнитьСклад",       	СоглашениеСклад);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     	СоглашениеВидЦены);
	СтруктураДействий.Вставить("УстановитьРежим", 		"ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу", Истина);
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", РабочаяКорзина.Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);	
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуВыделенныхСтрок(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьСуммаИтог()
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	СуммаИтого = Формат(РабочаяКорзина.Итог("СуммаВсего"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " " + СоглашениеВалюта +  " [Бонус:" +
 			  Формат(РабочаяКорзина.Итог("КолонкаБонусы"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " " + СоглашениеВалюта + "]";	
КонецПроцедуры



&НаКлиенте
Процедура ТЗ_КорзинаСкладПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаСкладНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)	
	
	ЭлементКорзина 	= ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродакта, Элементы.ТЗ_Корзина);
	ЭлементСклад	= ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродактаСклад, Элементы.ТЗ_КорзинаСклад);
	ТекущиеДанные 	= ЭлементКорзина.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Соответствие = ПолучитьСписокНаличияСкладов(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	ЭлементСклад.СписокВыбора.Очистить();
	Для Каждого ЭлС ИЗ Соответствие Цикл ЭлементСклад.СписокВыбора.Добавить(ЭлС.Ключ, , , ?(ЭлС.Значение = 0, БиблиотекаКартинок.Удалить, БиблиотекаКартинок.ОформитьПродажу)); КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаКоличествоПриИзменении(Элемент)	
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаУпаковкаПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаУпаковкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЭлементКорзина 	= ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродакта, Элементы.ТЗ_Корзина);
	ЭлементУпаковка = ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродактаУпаковка, Элементы.ТЗ_КорзинаУпаковка);
	ТекущиеДанные 	= ЭлементКорзина.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда	
		ЭлементУпаковка.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокУпаковокНоменклатуры(ТекущиеДанные.Номенклатура));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаВидЦеныПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаВидЦеныНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЭлементКорзина 	= ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродакта, Элементы.ТЗ_Корзина);
	ЭлементВидЦены  = ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродактаВидЦены, Элементы.ТЗ_КорзинаВидЦены);
	ТекущиеДанные 	= ЭлементКорзина.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ЭлементВидЦены.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокВидовЦенНоменклатуры());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаЦенаПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаСтавкаНДСПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНаличияСкладов(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка,
		|	ЕСТЬNULL(Склады.ВНаличииОстаток, 0) КАК ВНаличии
		|
		|ИЗ
		|	Справочник.Склады
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК Склады
		|ПО Склады.Склад = Ссылка 
		|");                                  	
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл Соответствие.Вставить(Выборка.Ссылка, Выборка.ВНаличии); КонецЦикла;
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокУпаковокНоменклатуры(Номенклатура)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка
		|
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры
		|ГДЕ
		|	Владелец = ВЫБОР КОГДА &НаборУпаковок =  ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|                    ТОГДА &Номенклатура
		|                    КОГДА &НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|                    ТОГДА &НаборУпаковок
		|					 ИНАЧЕ Неопределено
		|			   КОНЕЦ 
		|И  ПометкаУдаления = Ложь
		|");
	Запрос.УстановитьПараметр("Номенклатура",  Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	Упаковки = Запрос.Выполнить().Выгрузить();
	МассивУпаковок = Упаковки.ВыгрузитьКолонку("Ссылка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;

КонецФункции

&НаСервере 
Функция ПолучитьСписокВидовЦенНоменклатуры()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Ссылка
		|
		|ИЗ
		|	Справочник.ВидыЦен ");
	ВидыЦен = Запрос.Выполнить().Выгрузить();	
	МассивВидовЦен = ВидыЦен.ВыгрузитьКолонку("Ссылка");
	Возврат МассивВидовЦен;	
	
КонецФункции



&НаКлиенте
Процедура Корзина_ОформитьПродажу(Команда)
	ОбновитьСодержанииеКорзиныКлиент();
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	РезультатПоиска = РабочаяКорзина.НайтиСтроки(Новый Структура("Доступно", Истина));
	Если РезультатПоиска.Количество() Тогда 
		ВывестиСообщениеПользователю("Не весь товар доступен, сформируйте заказ!"); 
		Возврат; 
	КонецЕсли;	
	СоздатьДокумент("РеализацияТоваровУслуг");	
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ОформитьЗаказКлиента(Команда)
	СоздатьДокумент("ЗаказКлиента");
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ОформитьЗаказПоставщику(Команда)
	СоздатьДокумент("ЗаказПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ЗаказНаПеремещение(Команда)	
	СоздатьДокумент("ЗаказНаПеремещение");
КонецПроцедуры

&НаКлиенте
Процедура Корзина_Перемещения(Команда)	
	ОбновитьСодержанииеКорзиныКлиент();
    СоздатьДокумент("ПеремещениеТоваров");
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ОформитьКоммерческоеПредложение(Команда)
	СоздатьДокумент("КоммерческоеПредложениеКлиенту");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	ИмяСклад 		= ?(ИмяДокумента = "ПеремещениеТоваров" ИЛИ ИмяДокумента = "ЗаказНаПеремещение", "СкладОтправитель", "Склад");
	РабочаяКорзина 	= ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	Если 	ИмяДокумента = "ЗаказПоставщику" Тогда
		СоглашениеПоставщик = ОткрытьФормуМодально("Справочник.СоглашенияСПоставщиками.ФормаВыбора");
		Если СоглашениеПоставщик = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		СтруктураЗаполнения = ПолучитьСтруктурыЗаполненияПоставщик(СоглашениеПоставщик);
	Иначе	
		СтруктураЗаполнения = ПолучитьСтруктурыЗаполненияКлиент(ИмяДокумента); 
	КонецЕсли;
	
	Если ИмяДокумента = "ПеремещениеТоваров" Тогда	
			
		ФормаВыбораСклада = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаПеремещенияМеждуМаршрутами", Новый Структура("Склад", СоглашениеСклад));
		ПараметрыПеремещения = ОткрытьФормуМодально(ФормаВыбораСклада);
		Если ПараметрыПеремещения = КодВозвратаДиалога.Отмена 
		 ИЛИ ПараметрыПеремещения = Неопределено Тогда 
		 	Возврат; 
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыПеремещения) = Тип("Структура") И ПараметрыПеремещения.Свойство("ТранзитныйСклад") Тогда
			СсылкаНаПеремещение = СоздатьДокументыТранзитногоПеремещения(ПараметрыПеремещения, СтруктураЗаполнения);
			ОткрытьЗначение(СсылкаНаПеремещение);
			Возврат;	  	
		КонецЕсли; 
		
	КонецЕсли; 
	
	ТаблицаНоменклатуры		=	ПоместитьКорзинуВременноеХранилище();

	//Обособлене распределения Заказа Клиента
	Если  ИмяДокумента = "ЗаказКлиента" Тогда
		НазначитьАвтоматическиВариантОбеспечения();
	КонецЕсли;
	
				
	
	Для Каждого СкладИзСтруктуры Из СтруктураЗаполнения.СписокСкладов Цикл        
				
		ФормаДокумента = ПолучитьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", , , Новый УникальныйИдентификатор , );
		ЗаполнитьЗначенияСвойств(ФормаДокумента, СтруктураЗаполнения);
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, СтруктураЗаполнения);
		ФормаДокумента.Объект[ИмяСклад]	= СкладИзСтруктуры;
		
		РезультатОтбора = РабочаяКорзина.НайтиСтроки(Новый Структура("Склад", СкладИзСтруктуры));
		ПродажаОблагаетсяНДС   = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
		ПродажаНеОблагаетсяНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС");
		СтавкаБезНДС	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		ВариантОбеспечениеПодЗаказ	= ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПодЗаказ");
		ВариантОбеспечениеСоСклада	= ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада");
		Для Каждого ТекущаяСтрока Из РезультатОтбора Цикл
			НоваяСтрока = ФормаДокумента.Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			Если НоваяСтрока.Свойство("СтавкаНДС") Тогда
				Если 	  СтруктураЗаполнения.НалогообложениеНДС = ПродажаОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС 	= ПолучитьЗначениеРеквизита("СтавкаНДС", НоваяСтрока.Номенклатура);
					ТекПроцентНДС 			= ПолучитьСтавкуНДСЧислом(НоваяСтрока.СтавкаНДС);
					НоваяСтрока.СуммаНДС 	= РассчитатьСуммуНДС(НоваяСтрока.Сумма, ТекПроцентНДС, СтруктураЗаполнения.ЦенаВключаетНДС);
				ИначеЕсли СтруктураЗаполнения.НалогообложениеНДС = ПродажаНеОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС = СтавкаБезНДС;
					НоваяСтрока.СуммаНДС  = 0;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСтрокуТабличнойЧастиДокумента(НоваяСтрока, СтруктураЗаполнения.ЦенаВключаетНДС);
		КонецЦикла;
		
		_Объект = ФормаДокумента.Объект;
		Если 	  ИмяДокумента = "ЗаказКлиента" Тогда	
			
			Партнер_Скидка = 0;
			Если СтруктураЗаполнения.ТребуетсяДоговор Тогда
				ФормаДокумента.Элементы.Договор.Доступность = Истина;
				ФормаДокумента.Элементы.Договор.Видимость = Истина; 
			КонецЕсли;
				
			РассчитатьИтоговыеПоказателиЗаказКлиента(ФормаДокумента);
			ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(_Объект, ФормаДокумента.СуммаЗаказано, Истина);
			Для Каждого ЭтапОплаты Из _Объект.ЭтапыГрафикаОплаты Цикл 
				НоваяСтрока = ФормаДокумента.Объект.ЭтапыГрафикаОплаты.Добавить(); ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапОплаты); 
			КонецЦикла;

			Если СтруктураЗаполнения.Свойство("ОчиститьРеквизитПартнер") Тогда
				ФормаДокумента.Объект.Партнер = Неопределено;
				ФормаДокумента.Объект.Контрагент = Неопределено;
			КонецЕсли;

		ИначеЕсли  ИмяДокумента = "КоммерческоеПредложениеКлиенту" Тогда
			
			Партнер_Скидка 			= 0;
			РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ФормаДокумента);
			ФормаДокумента.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует");
			ФормаДокумента.Объект.СрокДействия = ТекущаяДата() + 86400;
			
		ИначеЕсли  ИмяДокумента = "ЗаказПоставщику" Тогда
			
			Если СтруктураЗаполнения.ТребуетсяДоговор Тогда 
				ФормаДокумента.Элементы.Договор.Доступность = Истина; 
			КонецЕсли;
			
			РассчитатьИтоговыеПоказателиЗаказПоставщику(ФормаДокумента);
			ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(_Объект, ФормаДокумента.СуммаЗаказано, Истина);
			Для Каждого ЭтапОплаты Из _Объект.ЭтапыГрафикаОплаты Цикл 
				НоваяСтрока = ФормаДокумента.Объект.ЭтапыГрафикаОплаты.Добавить(); ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапОплаты); 
			КонецЦикла;
			
		ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда
			
			Партнер_Скидка = 0;
			Если СтруктураЗаполнения.ТребуетсяДоговор Тогда 
				ФормаДокумента.Элементы.Договор.Доступность = Истина;
				ФормаДокумента.Элементы.Договор.Видимость = Истина;
			КонецЕсли;
						
			РассчитатьИтоговыеПоказателиРеализации(ФормаДокумента);
			
		ИначеЕсли  	ИмяДокумента = "ЗаказНаПеремещение" 
			ИЛИ		ИмяДокумента = "ПеремещениеТоваров"	Тогда
			
			Если ИмяДокумента = "ЗаказНаПеремещение" Тогда
				ФормаВыбораСклада = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаВыбораСклада", Новый Структура("Склад", СоглашениеСклад));
				ПараметрыПеремещения = ФормаВыбораСклада.ОткрытьМодально();
				Если ПараметрыПеремещения = КодВозвратаДиалога.Отмена 
				 ИЛИ ПараметрыПеремещения = Неопределено Тогда 
				 	Возврат; 
				КонецЕсли;
			КонецЕсли;
				
			ФормаДокумента.Объект.СкладПолучатель  = ПараметрыПеремещения.СкладПолучатель;
			ФормаДокумента.Объект.СкладОтправитель = ПараметрыПеремещения.СкладОтправитель;
			Если ИмяДокумента = "ПеремещениеТоваров" Тогда
				ФормаДокумента.Объект.ВидЦены          = ПараметрыПеремещения.ВидЦены;
			Иначе	
				ФормаДокумента.Объект.Статус           = ПредопределенноеЗначение("Перечисление.СтатусыВнутреннихЗаказов.КВыполнению");
			КонецЕсли; 
			
			МаршрутыБиблиотекаКлиент = ПолучитьФорму("ВнешняяОбработка." + ModuleLibraryServer.GetLibraryName("Маршруты адресный классификатор") + ".Форма.Форма");			
										
		КонецЕсли;
		
		ФормаДокумента.Открыть();
		Если ТаблицаНоменклатуры<>Неопределено Тогда
			ЗагрузитьКорзинуИзВременногоХранилища(ТаблицаНоменклатуры);
        КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		
		Возврат 0.1;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		
		Возврат 0.18;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда
		
		Возврат 0.2;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуТабличнойЧастиДокумента(Приемник, ЦенаВключаетНДС)
	//11.0.9.8
	Если Приемник.Свойство("СуммаСНДС")  			Тогда Приемник.СуммаСНДС 		   = ?(ЦенаВключаетНДС, Приемник.Сумма, Приемник.Сумма + Приемник.СуммаНДС); КонецЕсли;
	Если Приемник.Свойство("Активность") 			Тогда Приемник.Активность 		   = Истина; КонецЕсли;
	Если Приемник.Свойство("СуммаАктивность")   	Тогда Приемник.СуммаАктивность     = Приемник.Сумма; КонецЕсли;
	Если Приемник.Свойство("СуммаСНДСАктивность")   Тогда Приемник.СуммаСНДСАктивность = Приемник.СуммаСНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаНДСАктивность")   	Тогда Приемник.СуммаНДСАктивность  = Приемник.СуммаНДС; КонецЕсли;
	//11.1.1.17
	Если Приемник.Свойство("СуммаСНДСАктивностьБезВозвратнойТары")  Тогда Приемник.СуммаСНДСАктивностьБезВозвратнойТары = Приемник.СуммаСНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаНДСАктивностьБезВозвратнойТары")   Тогда Приемник.СуммаНДСАктивностьБезВозвратнойТары  = Приемник.СуммаНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары")  Тогда  КонецЕсли;
	Если Приемник.Свойство("СуммаРучнойСкидкиАктивностьБезВозвратнойТары")   		Тогда  КонецЕсли;
	Если Приемник.Свойство("СуммаСНДСБезВозвратнойТары")   							Тогда Приемник.СуммаСНДСБезВозвратнойТары = ?(ЦенаВключаетНДС, Приемник.Сумма, Приемник.Сумма + Приемник.СуммаНДС); КонецЕсли;
	Если Приемник.Свойство("СуммаАктивностьБезВозвратнойТары")   					Тогда Приемник.СуммаАктивностьБезВозвратнойТары = Приемник.Сумма; КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказКлиента(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;

	Форма.СуммаЗаказано     = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаНДСЗаказано  = КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары");
	Форма.СуммаАвтоСкидки   = КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары");;
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары") = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Заполнение итогов по этапам оплаты
	
	ПредыдущееЗначениеДаты = Дата(1,1,1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	ПроцентПлатежейОбщий = 0;
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки")
	);
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор странцицы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		
	Иначе
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказПоставщику(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаОтменено = КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаЗаказано = КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано = КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаРучнойСкидки);
	ИначеЕсли Форма.СуммаРучнойСкидки > 0 Тогда
		Форма.ПроцентРучнойСкидки = 100;
	Иначе
		Форма.ПроцентРучнойСкидки = 0;
	КонецЕсли;
	
	// Заполнение итогов по таблице этапы оплаты
	
	Форма.СуммаАвансаДоПодтверждения     = 0;
	Форма.СуммаПредоплатыДоПоступления   = 0;
	Форма.СуммаКредитаПослеПоступления   = 0;
	Форма.ПроцентАвансаДоПодтверждения   = 0;
	Форма.ПроцентПредоплатыДоПоступления = 0;
	Форма.ПроцентКредитаПослеПоступления = 0;
	ПроцентПлатежейОбщий                 = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоПодтверждения", "ПроцентАвансаДоПодтверждения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоПоступления", "ПроцентПредоплатыДоПоступления")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеПоступления", "ПроцентКредитаПослеПоступления")
	);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор страницы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаАктивныхСтрок 	= КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары");
	Форма.СуммаНДСАктивныхСтрок = КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары");
	Форма.СуммаАвтоСкидки 		= КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары");
	Форма.СуммаРучнойСкидки 	= КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары");
	Форма.СуммаСкидки 			= Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего 			= КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары");
	
	СуммаАктивныхСтрокБезНДС = КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары");
	
	Если СуммаАктивныхСтрокБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиРеализации(Форма)
	
	Форма.СуммаВсего = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	Форма.СуммаНДС = Форма.Объект.Товары.Итог("СуммаНДСБезВозвратнойТары");
	Форма.СуммаАвтоСкидки   = Форма.Объект.Товары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = Форма.Объект.Товары.Итог("СуммаРучнойСкидкиБезВозвратнойТары");
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	
	Если Форма.СуммаВсего > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (Форма.СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (Форма.СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	Иначе
		
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
	 Или Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыТранзитногоПеремещения(ПараметрыПеремещения, СтруктураЗаполнения)

	УстановитьПривилегированныйРежим(Истина);
	
	БиблиотекаМаршруты = ModuleLibraryServer.GetLibrary("Маршруты адресный классификатор");
	РабочаяКорзина	   = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	НачатьТранзакцию();
	
	ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ЗаказНаПеремещение, СтруктураЗаполнения);
	ЗаказНаПеремещение.Дата				= ТекущаяДата();
	ЗаказНаПеремещение.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	ЗаказНаПеремещение.Подразделение    = ЗаказНаПеремещение.Ответственный.ТекущееПодразделение;
	ЗаказНаПеремещение.СкладОтправитель = ПараметрыПеремещения.ТранзитныйСклад;
	ЗаказНаПеремещение.СкладПолучатель  = ПараметрыПеремещения.СкладПолучатель;
	ЗаказНаПеремещение.Статус           = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
	
	РезультатОтбора = РабочаяКорзина.НайтиСтроки(Новый Структура("Склад", ПараметрыПеремещения.СкладОтправитель));
	Для Каждого ТекущаяСтрока Из РезультатОтбора Цикл
		НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НачалоОтгрузки 		 = ТекущаяДата();
		НоваяСтрока.ОкончаниеПоступления = ТекущаяДата();
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ;
	КонецЦикла;
	
	Попытка
		ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Заметка = НСтр("ru='Автосоздание на заказ перемещения : %Ссылка%'");
	Если ЗаказНаПеремещение<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказНаПеремещение);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;

	

	
	
	ПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ПеремещениеТоваров, СтруктураЗаполнения);
	ПеремещениеТоваров.Дата						= ТекущаяДата();
	ПеремещениеТоваров.ВидЦены          		= ПараметрыПеремещения.ВидЦены;
	ПеремещениеТоваров.СпособДоставки			= Перечисления.СпособыДоставки.Самовывоз;
	ПеремещениеТоваров.Ответственный    		= ПараметрыСеанса.ТекущийПользователь;
	ПеремещениеТоваров.СкладОтправитель 		= ПараметрыПеремещения.СкладОтправитель;
	ПеремещениеТоваров.СкладПолучатель  		= ПараметрыПеремещения.ТранзитныйСклад;
	ПеремещениеТоваров.Статус           		= Перечисления.СтатусыПеремещенийТоваров.Принято;
	ПеремещениеТоваров.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ПеремещениеТоваров.Комментарий				= Заметка;

	ПеремещениеТоваров.ИспользуетсяОбособленноеОбеспечение = Истина;
	
	РезультатОтбора = РабочаяКорзина.НайтиСтроки(Новый Структура("Склад", ПараметрыПеремещения.СкладОтправитель));
	Для Каждого ТекущаяСтрока Из РезультатОтбора Цикл
		НоваяСтрока = ПеремещениеТоваров.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Если ТекущаяСтрока.Назначение= Справочники.Назначения.ПустаяСсылка() Тогда
			НоваяСтрока.Назначение = ПолучитьСсылкуНаНазначение(ЗаказНаПеремещение.Ссылка);
        КонецЕсли;
	
	КонецЦикла;

	Попытка
		ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
		
	ЗафиксироватьТранзакцию();

	
	Возврат ПеремещениеТоваров.Ссылка;

КонецФункции



&НаСервере
Процедура НазначитьАвтоматическиВариантОбеспечения()
	УстановитьПривилегированныйРежим(Истина);
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	Запрос =Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВариантыОбеспеченияНоменклатуры();
	Запрос.УстановитьПараметр("Оборот", 					Партнер_Оборот);
	Запрос.УстановитьПараметр("НачалоДня", 					НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущаяДата", 				ТекущаяДата());
	Запрос.УстановитьПараметр("СкладПолучатель",			Матрица_СкладПолучатель);
	Запрос.УстановитьПараметр("ФорматМагазинаПолучателя",	Матрица_СкладПолучатель.ФорматМагазина);
	Запрос.УстановитьПараметр("ТабКорзина", 				РабочаяКорзина.Выгрузить());
	Запрос.УстановитьПараметр("ВалютаСоглашения",			СоглашениеВалюта);
	Запрос.УстановитьПараметр("НалогообложениеНДС",			Соглашение.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",			Соглашение.ЦенаВключаетНДС);
    Результат = Запрос.Выполнить().Выгрузить();
	РабочаяКорзина.Очистить();
	РабочаяКорзина.Загрузить(Результат);
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли; 
КонецПроцедуры // НазначитьАвтоматическиВариантОбеспечения(СкладОтправителя)




&НаСервере
Функция ПолучитьТекстЗапросаУстановкиНазначенияНоменклатуре()
ТекстЗапроса= "ВЫБРАТЬ
              |	ТаблицаНоменклатура.Номенклатура,
              |	ТаблицаНоменклатура.Характеристика,
              |	ТаблицаНоменклатура.Упаковка,
              |	ТаблицаНоменклатура.Цена,
			  |	ТаблицаНоменклатура.КоличествоУпаковок,
			  |	ТаблицаНоменклатура.Сумма,
			  |	ТаблицаНоменклатура.Количество,
			  |	ТаблицаНоменклатура.ВидЦены,
			  |	ТаблицаНоменклатура.Доступно,
              |	ТаблицаНоменклатура.ЕдиницаИзмерения,
              |	ТаблицаНоменклатура.Склад,
              |	ТаблицаНоменклатура.СтавкаНДС,
              |	ТаблицаНоменклатура.СуммаНДС,
			  |	ТаблицаНоменклатура.ПроцентРучнойСкидки,
              |	ТаблицаНоменклатура.СуммаРучнойСкидки,
 			  |	ТаблицаНоменклатура.ПроцентАвтоматическойСкидки,
              |	ТаблицаНоменклатура.СуммаАвтоматическойСкидки,
			  |	ТаблицаНоменклатура.СуммаВсего,
              |	ТаблицаНоменклатура.КолонкаБонусы,
 			  |	ТаблицаНоменклатура.ОборотПроцент,
			  |	ТаблицаНоменклатура.ВариантОбеспечения
			  |ПОМЕСТИТЬ КешКорзинаНоменклатуры
              |ИЗ
              |	&ТаблицаНоменклатурыКорзина КАК ТаблицаНоменклатура
              |;
              ////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	ОбеспечениеЗаказовОстатки.Номенклатура,
              |	ОбеспечениеЗаказовОстатки.Характеристика,
              |	ОбеспечениеЗаказовОстатки.Склад,
              |	СУММА(ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0)) КАК СуммаЗаказано,
              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбеспечениеЗаказовОстатки.Назначение) КАК КоличествоНазначение
              |ПОМЕСТИТЬ КешСуммаЗаказовОстаток
              |ИЗ
              |	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
              |			,
              |			Номенклатура В
              |					(ВЫБРАТЬ
              |						КешНоменклатура.Номенклатура
              |					ИЗ
              |						КешКорзинаНоменклатуры КАК КешНоменклатура)
              |				И Склад = &СкладПолучатель) КАК ОбеспечениеЗаказовОстатки
              |
              |СГРУППИРОВАТЬ ПО
              |	ОбеспечениеЗаказовОстатки.Характеристика,
              |	ОбеспечениеЗаказовОстатки.Склад,
              |	ОбеспечениеЗаказовОстатки.Номенклатура
              |;
              ////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	КешКорзинаНоменклатуры.Номенклатура,
              |	КешКорзинаНоменклатуры.Характеристика,
              |	КешКорзинаНоменклатуры.Упаковка,
              |	КешКорзинаНоменклатуры.Цена,
			  |	КешКорзинаНоменклатуры.КоличествоУпаковок,
			  |	КешКорзинаНоменклатуры.Сумма,
			  |	КешКорзинаНоменклатуры.Количество,
			  |	КешКорзинаНоменклатуры.ВидЦены,
			  |	КешКорзинаНоменклатуры.Доступно,
              |	КешКорзинаНоменклатуры.ЕдиницаИзмерения,
              |	КешКорзинаНоменклатуры.Склад,
              |	КешКорзинаНоменклатуры.СтавкаНДС,
              |	КешКорзинаНоменклатуры.СуммаНДС,
			  |	КешКорзинаНоменклатуры.ПроцентРучнойСкидки,
              |	КешКорзинаНоменклатуры.СуммаРучнойСкидки,
 			  |	КешКорзинаНоменклатуры.ПроцентАвтоматическойСкидки,
              |	КешКорзинаНоменклатуры.СуммаАвтоматическойСкидки,
			  |	КешКорзинаНоменклатуры.СуммаВсего,
              |	КешКорзинаНоменклатуры.КолонкаБонусы,
 			  |	КешКорзинаНоменклатуры.ОборотПроцент,
			  |	КешКорзинаНоменклатуры.ВариантОбеспечения,
              |	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
              |	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) КАК Заказано,
			  |	ЕСТЬNULL(КешСуммаЗаказовОстаток.КоличествоНазначение,0) КАК КоличествоЗаказов,
              |	ЕСТЬNULL(КешСуммаЗаказовОстаток.СуммаЗаказано,0) КАК  СуммаЗаказано
              |ИЗ
              |	КешКорзинаНоменклатуры КАК КешКорзинаНоменклатуры
              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Номенклатура В
              |					(ВЫБРАТЬ
              |						КешНоменклатура.Номенклатура
              |					ИЗ
              |						КешКорзинаНоменклатуры КАК КешНоменклатура) и  Склад = &СкладПолучатель) КАК ОбеспечениеЗаказовОстатки
              |		ПО КешКорзинаНоменклатуры.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
              |		ЛЕВОЕ СОЕДИНЕНИЕ КешСуммаЗаказовОстаток КАК КешСуммаЗаказовОстаток
              |		ПО КешКорзинаНоменклатуры.Номенклатура = КешСуммаЗаказовОстаток.Номенклатура";
Возврат ТекстЗапроса;
КонецФункции // ()

&НаСервере
Функция ПолучитьТекстЗапросаАвтоматическогоЗаполнения()
ТекстЗапроса ="ВЫБРАТЬ
              |	ТаблицаНоменклатура.Номенклатура,
              |	ТаблицаНоменклатура.Характеристика,
              |	ТаблицаНоменклатура.Упаковка,
              |	ТаблицаНоменклатура.КоличествоУпаковок,
              |	ТаблицаНоменклатура.Количество,
              |	ТаблицаНоменклатура.Склад
              |ПОМЕСТИТЬ КешКорзинаНоменклатуры
              |ИЗ
              |	&ТаблицаНоменклатурыКорзина КАК ТаблицаНоменклатура
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	ОбеспечениеЗаказовОстатки.Номенклатура,
              |	ОбеспечениеЗаказовОстатки.Характеристика,
              |	ОбеспечениеЗаказовОстатки.Склад,
              |	СУММА(ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0)) КАК СуммаЗаказано,
              |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбеспечениеЗаказовОстатки.Назначение) КАК КоличествоНазначение
              |ПОМЕСТИТЬ КешСуммаЗаказовОстаток
              |ИЗ
              |	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
              |			,
              |			Номенклатура В
              |					(ВЫБРАТЬ
              |						КешНоменклатура.Номенклатура
              |					ИЗ
              |						КешКорзинаНоменклатуры КАК КешНоменклатура)
              |				И Склад = &СкладПолучатель) КАК ОбеспечениеЗаказовОстатки
              |
              |СГРУППИРОВАТЬ ПО
              |	ОбеспечениеЗаказовОстатки.Характеристика,
              |	ОбеспечениеЗаказовОстатки.Склад,
              |	ОбеспечениеЗаказовОстатки.Номенклатура
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	КешКорзинаНоменклатуры.Номенклатура,
              |	КешКорзинаНоменклатуры.Характеристика,
              |	КешКорзинаНоменклатуры.Упаковка,
              |	КешКорзинаНоменклатуры.КоличествоУпаковок,
              |	КешКорзинаНоменклатуры.Количество,
              |	КешКорзинаНоменклатуры.Склад,
              |	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
              |	ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0) КАК Заказано,
              |	ЕСТЬNULL(КешСуммаЗаказовОстаток.КоличествоНазначение, 0) КАК КоличествоЗаказов,
              |	ЕСТЬNULL(КешСуммаЗаказовОстаток.СуммаЗаказано, 0) КАК СуммаЗаказано,
              |	ВЫБОР
              |		КОГДА ЕСТЬNULL(КешСуммаЗаказовОстаток.СуммаЗаказано, 0) > ЕСТЬNULL(ОбеспечениеЗаказовОстатки.КЗаказуОстаток, 0)
              |			ТОГДА 1
              |		ИНАЧЕ 0
              |	КОНЕЦ КАК Проверка
              |ПОМЕСТИТЬ КешПроверкаЗаполненияВручную
              |ИЗ
              |	КешКорзинаНоменклатуры КАК КешКорзинаНоменклатуры
              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Склад = &СкладПолучатель) КАК ОбеспечениеЗаказовОстатки
              |		ПО КешКорзинаНоменклатуры.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
              |		ЛЕВОЕ СОЕДИНЕНИЕ КешСуммаЗаказовОстаток КАК КешСуммаЗаказовОстаток
              |		ПО КешКорзинаНоменклатуры.Номенклатура = КешСуммаЗаказовОстаток.Номенклатура
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	СУММА(КешПроверкаЗаполненияВручную.Проверка) КАК Проверка
              |ПОМЕСТИТЬ КешСуммаПроверки
              |ИЗ
              |	КешПроверкаЗаполненияВручную КАК КешПроверкаЗаполненияВручную
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	ВЫБОР
              |		КОГДА КешСуммаПроверки.Проверка > 0
              |			ТОГДА ИСТИНА
              |		ИНАЧЕ ЛОЖЬ
              |	КОНЕЦ КАК Проверка
              |ИЗ
              |	КешСуммаПроверки КАК КешСуммаПроверки";
Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаАвтоматическогоЗаполнения()


&НаСервере
Функция ПолучитьТекстЗапросаВариантыОбеспеченияНоменклатуры()
 ТекстЗапроса = "ВЫБРАТЬ 
			|	ТабКорзина.Номенклатура,
			|	ТабКорзина.Характеристика,
			|	ТабКорзина.Склад,
			|	ТабКорзина.Количество,
			|	ТабКорзина.КоличествоУпаковок,
			|	ТабКорзина.ЕдиницаИзмерения,
			|	ТабКорзина.Упаковка,
			|	ТабКорзина.ВидЦены,
			|	ТабКорзина.Цена,
			|	ТабКорзина.ПроцентРучнойСкидки,
			|	ТабКорзина.СуммаРучнойСкидки,
			|	ТабКорзина.ПроцентАвтоматическойСкидки,
			|	ТабКорзина.СуммаАвтоматическойСкидки,	
			|	ТабКорзина.СтавкаНДС,
			|	ВЫБОР
			|			КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
			|			  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
			|				ТОГДА 0.1
			|			КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
			|			  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
			|				ТОГДА 0.18
			|			КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
			|			  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
			|				ТОГДА 0.2
			|			ИНАЧЕ 0
			|	КОНЕЦ КАК СтавкаНДСЧислом

			|ПОМЕСТИТЬ КешНоменклатура
			|ИЗ 
			|	&ТабКорзина КАК ТабКорзина

			|;

			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатура.Номенклатура,
			|	КешНоменклатура.Характеристика,
			|	КешНоменклатура.Склад,
			|	КешНоменклатура.Количество,
			|	КешНоменклатура.КоличествоУпаковок,
			|	КешНоменклатура.ЕдиницаИзмерения,
			|	КешНоменклатура.Упаковка,
			|	КешНоменклатура.ВидЦены,
			|	КешНоменклатура.Цена,
			|	КешНоменклатура.ПроцентРучнойСкидки,
			|	КешНоменклатура.СуммаРучнойСкидки,
			|	КешНоменклатура.ПроцентАвтоматическойСкидки,
			|	КешНоменклатура.СуммаАвтоматическойСкидки,
			|	КешНоменклатура.СтавкаНДС,
			|	КешНоменклатура.СтавкаНДСЧислом,
			|	"""" КАК Назначения
			|ПОМЕСТИТЬ КешУслуга
			|ИЗ
			|	КешНоменклатура КАК КешНоменклатура
			|ГДЕ
			|	КешНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатура.Номенклатура,
			|	КешНоменклатура.Характеристика,
			|	КешНоменклатура.Склад,
			|	КешНоменклатура.Количество,
			|	КешНоменклатура.КоличествоУпаковок,
			|	КешНоменклатура.ЕдиницаИзмерения,
			|	КешНоменклатура.Упаковка,
			|	КешНоменклатура.ВидЦены,
			|	КешНоменклатура.Цена,
			|	КешНоменклатура.ПроцентРучнойСкидки,
			|	КешНоменклатура.СуммаРучнойСкидки,
			|	КешНоменклатура.ПроцентАвтоматическойСкидки,
			|	КешНоменклатура.СуммаАвтоматическойСкидки,
			|	КешНоменклатура.СтавкаНДС,
			|	КешНоменклатура.СтавкаНДСЧислом
			|ПОМЕСТИТЬ КешНоменклатураБезУслуг
			|ИЗ
			|	КешНоменклатура КАК КешНоменклатура
			|ГДЕ
			|	КешНоменклатура.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатураБезУслуг.Номенклатура,
			|	КешНоменклатураБезУслуг.Характеристика,
			|	КешНоменклатураБезУслуг.Склад,
			|	КешНоменклатураБезУслуг.Количество,
			|	КешНоменклатураБезУслуг.КоличествоУпаковок,
			|	КешНоменклатураБезУслуг.ЕдиницаИзмерения,
			|	КешНоменклатураБезУслуг.Упаковка,
			|	КешНоменклатураБезУслуг.ВидЦены,
			|	КешНоменклатураБезУслуг.Цена,
			|	КешНоменклатураБезУслуг.ПроцентРучнойСкидки,
			|	КешНоменклатураБезУслуг.СуммаРучнойСкидки,
			|	КешНоменклатураБезУслуг.ПроцентАвтоматическойСкидки,
			|	КешНоменклатураБезУслуг.СуммаАвтоматическойСкидки,
			|	КешНоменклатураБезУслуг.СтавкаНДС,
			|	КешНоменклатураБезУслуг.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеОстаток > 0
			|			ТОГДА СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток
			|ПОМЕСТИТЬ КешОстаток
			|ИЗ
			|	КешНоменклатураБезУслуг КАК КешНоменклатураБезУслуг
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
			|				,
			|				Номенклатура В
			|					(ВЫБРАТЬ
			|						КешНоменклатура.Номенклатура
			|					ИЗ
			|						КешНоменклатура)) КАК СвободныеОстаткиОстатки
			|		ПО (СвободныеОстаткиОстатки.Номенклатура = КешНоменклатураБезУслуг.Номенклатура)
			|			И (СвободныеОстаткиОстатки.Склад = КешНоменклатураБезУслуг.Склад)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешОстаток.Номенклатура,
			|	КешОстаток.Характеристика,
			|	КешОстаток.Склад,
			|	КешОстаток.Упаковка,
			|	ВЫБОР
			|		КОГДА КешОстаток.КоличествоУпаковок <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.КоличествоУпаковок
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешОстаток.Количество
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.Количество
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешОстаток.Количество
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК Количество,
			|	КешОстаток.Цена,
			|	КешОстаток.ЕдиницаИзмерения,
			|	КешОстаток.ВидЦены,
			|	КешОстаток.ПроцентРучнойСкидки,
			|	КешОстаток.СуммаРучнойСкидки,
			|	КешОстаток.ПроцентАвтоматическойСкидки,
			|	КешОстаток.СуммаАвтоматическойСкидки,
			|	КешОстаток.СтавкаНДС,
			|	КешОстаток.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество > КешОстаток.Остаток
			|			ТОГДА -(КешОстаток.Остаток - КешОстаток.Количество)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешОстатокСоСклада
			|ИЗ
			|	КешОстаток КАК КешОстаток
			|ГДЕ
			|	КешОстаток.Остаток = 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешОстаток.Номенклатура,
			|	КешОстаток.Характеристика,
			|	КешОстаток.Склад,
			|	КешОстаток.Упаковка,
			|	ВЫБОР
			|		КОГДА КешОстаток.КоличествоУпаковок <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.КоличествоУпаковок
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА 0
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.Количество
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА 0
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК Количество,
			|	КешОстаток.Цена,
			|	КешОстаток.ЕдиницаИзмерения,
			|	КешОстаток.ВидЦены,
			|	КешОстаток.ПроцентРучнойСкидки,
			|	КешОстаток.СуммаРучнойСкидки,
			|	КешОстаток.ПроцентАвтоматическойСкидки,
			|	КешОстаток.СуммаАвтоматическойСкидки,
			|	КешОстаток.СтавкаНДС,
			|	КешОстаток.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество > КешОстаток.Остаток
			|			ТОГДА -(КешОстаток.Остаток - КешОстаток.Количество)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешСоСклада
			|ИЗ
			|	КешОстаток КАК КешОстаток
			|ГДЕ
			|	КешОстаток.Остаток > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатура.Номенклатура,
			|	КешНоменклатура.Характеристика,
			|	КешНоменклатура.Склад,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.КПоступлениюОстаток, 0) < ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - ЕСТЬNULL(КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.КПоступлениюОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КПоступлениюОстаток
			|ПОМЕСТИТЬ КешПоступленияОстаток
			|ИЗ
			|	КешНоменклатура КАК КешНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(
			|				,
			|               НЕ ДокументПоступления Ссылка Документ.ЗаказПоставщику
			|               И
			|				Номенклатура В
			|					(ВЫБРАТЬ
			|						КешНоменклатура.Номенклатура
			|					ИЗ
			|						КешНоменклатура)) КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешНоменклатура.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешНоменклатура.Склад)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(
			|				,
			|				Номенклатура В
			|					(ВЫБРАТЬ
			|						КешНоменклатура.Номенклатура
			|					ИЗ
			|						КешНоменклатура)) КАК КТС_ТоварыКПоступлениюПодОбеспечениеОстатки
			|		ПО (КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Номенклатура = КешНоменклатура.Номенклатура)
			|			И (КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Склад = КешНоменклатура.Склад)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК Количество,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	"""" КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешОстатокСАвто
			|ИЗ
			|	КешОстатокСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	КешСоСклада.Остаток > 0

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	""""
			|ИЗ
			|	КешСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	КешСоСклада.Остаток > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК Количество,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|				И КешСоСклада.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	"""" КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешАвто
			|ИЗ
			|	КешОстатокСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	ВЫБОР
			|			КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|				ТОГДА ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ИНАЧЕ 1
			|		КОНЕЦ > 0

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|				И КешСоСклада.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	""""
			|ИЗ
			|	КешСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешАвто.Номенклатура,
			|	КешАвто.Характеристика,
			|	КешАвто.Упаковка,
			|	КешАвто.Склад,
			|	КешАвто.Остаток КАК КоличествоУпаковок,
			|	КешАвто.Остаток КАК Количество,
			|	КешАвто.Цена,
			|	КешАвто.ЕдиницаИзмерения,
			|	КешАвто.ВидЦены,
			|	КешАвто.ПроцентРучнойСкидки,
			|	КешАвто.СуммаРучнойСкидки,
			|	КешАвто.ПроцентАвтоматическойСкидки,
			|	КешАвто.СуммаАвтоматическойСкидки,
			|	КешАвто.СтавкаНДС,
			|	КешАвто.СтавкаНДСЧислом,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ) КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешПодЗаказ
			|ИЗ
			|	КешОстатокСАвто КАК КешАвто
			|ГДЕ
			|	КешАвто.Остаток > 0

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешАвто.Номенклатура,
			|	КешАвто.Характеристика,
			|	КешАвто.Упаковка,
			|	КешАвто.Склад,
			|	КешАвто.Остаток,
			|	КешАвто.Остаток,
			|	КешАвто.Цена,
			|	КешАвто.ЕдиницаИзмерения,
			|	КешАвто.ВидЦены,
			|	КешАвто.ПроцентРучнойСкидки,
			|	КешАвто.СуммаРучнойСкидки,
			|	КешАвто.ПроцентАвтоматическойСкидки,
			|	КешАвто.СуммаАвтоматическойСкидки,
			|	КешАвто.СтавкаНДС,
			|	КешАвто.СтавкаНДСЧислом,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
			|ИЗ
			|	КешАвто КАК КешАвто
			|ГДЕ
			|	КешАвто.Остаток > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	КешСоСклада.КоличествоУпаковок,
			|	КешСоСклада.Количество,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.Упаковка КАК Упаковка1,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	КешСоСклада.ВариантОбеспечения
			|ПОМЕСТИТЬ КешВариантыОбечспечения
			|ИЗ
			|	КешСоСклада КАК КешСоСклада

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешАвто.Номенклатура,
			|	КешАвто.Характеристика,
			|	КешАвто.Упаковка,
			|	КешАвто.Склад,
			|	КешАвто.КоличествоУпаковок,
			|	КешАвто.Количество,
			|	КешАвто.Цена,
			|	КешАвто.ЕдиницаИзмерения,
			|	КешАвто.Упаковка,
			|	КешАвто.ВидЦены,
			|	КешАвто.ПроцентРучнойСкидки,
			|	КешАвто.СуммаРучнойСкидки,
			|	КешАвто.ПроцентАвтоматическойСкидки,
			|	КешАвто.СуммаАвтоматическойСкидки,
			|	КешАвто.СтавкаНДС,
			|	КешАвто.СтавкаНДСЧислом,
			|	КешАвто.ВариантОбеспечения
			|ИЗ
			|	КешАвто КАК КешАвто

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешПодЗаказ.Номенклатура,
			|	КешПодЗаказ.Характеристика,
			|	КешПодЗаказ.Упаковка,
			|	КешПодЗаказ.Склад,
			|	КешПодЗаказ.КоличествоУпаковок,
			|	КешПодЗаказ.Количество,
			|	КешПодЗаказ.Цена,
			|	КешПодЗаказ.ЕдиницаИзмерения,
			|	КешПодЗаказ.Упаковка,
			|	КешПодЗаказ.ВидЦены,
			|	КешПодЗаказ.ПроцентРучнойСкидки,
			|	КешПодЗаказ.СуммаРучнойСкидки,
			|	КешПодЗаказ.ПроцентАвтоматическойСкидки,
			|	КешПодЗаказ.СуммаАвтоматическойСкидки,
			|	КешПодЗаказ.СтавкаНДС,
			|	КешПодЗаказ.СтавкаНДСЧислом,
			|	КешПодЗаказ.ВариантОбеспечения
			|ИЗ
			|	КешПодЗаказ КАК КешПодЗаказ

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешУслуга.Номенклатура,
			|	КешУслуга.Характеристика,
			|	КешУслуга.Упаковка,
			|	КешУслуга.Склад,
			|	КешУслуга.КоличествоУпаковок,
			|	КешУслуга.Количество,
			|	КешУслуга.Цена,
			|	КешУслуга.ЕдиницаИзмерения,
			|	NULL,
			|	КешУслуга.ВидЦены,
			|	КешУслуга.ПроцентРучнойСкидки,
			|	КешУслуга.СуммаРучнойСкидки,
			|	КешУслуга.ПроцентАвтоматическойСкидки,
			|	КешУслуга.СуммаАвтоматическойСкидки,
			|	КешУслуга.СтавкаНДС,
			|	КешУслуга.СтавкаНДСЧислом,
			|	КешУслуга.Назначения
			|ИЗ
			|	КешУслуга КАК КешУслуга
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КешВариантыОбечспечения.Номенклатура,
			|	КешВариантыОбечспечения.Характеристика,
			|	КешВариантыОбечспечения.Упаковка,
			|	КешВариантыОбечспечения.Склад,
			|	КешВариантыОбечспечения.КоличествоУпаковок,
			|	КешВариантыОбечспечения.Количество,
			|	КешВариантыОбечспечения.Цена,
			|	КешВариантыОбечспечения.ЕдиницаИзмерения,
			|	КешВариантыОбечспечения.Упаковка КАК Упаковка1,
			|	КешВариантыОбечспечения.ВидЦены,
			|	КешВариантыОбечспечения.ПроцентРучнойСкидки,
			|	КешВариантыОбечспечения.СуммаРучнойСкидки,
			|	КешВариантыОбечспечения.ПроцентАвтоматическойСкидки,
			|	КешВариантыОбечспечения.СуммаАвтоматическойСкидки,
			|	КешВариантыОбечспечения.СтавкаНДС,
			|	КешВариантыОбечспечения.СтавкаНДСЧислом,
			|	КешВариантыОбечспечения.ВариантОбеспечения
			|ПОМЕСТИТЬ КешКорзина
			|ИЗ
			|	КешВариантыОбечспечения КАК КешВариантыОбечспечения
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешКорзина.Номенклатура,
			|	КешКорзина.Характеристика,
			|	КешКорзина.Склад,
			|	КешКорзина.КоличествоУпаковок,
			|	КешКорзина.ЕдиницаИзмерения,
			|	КешКорзина.Упаковка,
			|	КешКорзина.ВидЦены,
			|	ВЫБОР
			|		КОГДА КешКорзина.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			ТОГДА КешКорзина.Цена
			|		ИНАЧЕ ЦеныКорзины.Цена * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) * (КурсЦены.Курс / КурсЦены.Кратность) / (КурсСоглашения.Курс / КурсСоглашения.Кратность)
			|	КОНЕЦ КАК Цена,
			|	КешКорзина.ПроцентРучнойСкидки,
			|	КешКорзина.СуммаРучнойСкидки,
			|	КешКорзина.ПроцентАвтоматическойСкидки,
			|	КешКорзина.СуммаАвтоматическойСкидки,
			|	КешКорзина.СтавкаНДС,
			|	КешКорзина.СтавкаНДСЧислом,
			|	КурсСоглашения.Курс / КурсСоглашения.Кратность КАК КурсПоСоглашению,
			|	ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) КАК Коэффициент,
			|	ВЫБОР
			|		КОГДА КешКорзина.КоличествоУпаковок * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) <= ОстатокНаСкладе.ВНаличииОстаток - ОстатокНаСкладе.ВРезервеОстаток
			|			ТОГДА ЛОЖЬ
			|		КОГДА КешКорзина.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Доступно,
			|	КешКорзина.ВариантОбеспечения,
			|	ЕСТЬNULL(ОстатокНаСкладе.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстатокНаСкладе.ВРезервеОстаток, 0) КАК СвободныйОстаток
			|ПОМЕСТИТЬ PreResult
			|ИЗ
			|	КешКорзина КАК КешКорзина
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						КешКорзина.Номенклатура,
			|						КешКорзина.Характеристика
			|					ИЗ
			|						КешКорзина)) КАК ЦеныКорзины
			|		ПО КешКорзина.Номенклатура = ЦеныКорзины.Номенклатура
			|			И КешКорзина.Характеристика = ЦеныКорзины.Характеристика
			|			И КешКорзина.ВидЦены = ЦеныКорзины.ВидЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК КурсСоглашения
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦены
			|		ПО (ЦеныКорзины.Валюта = КурсЦены.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
			|				,
			|				(Номенклатура, Характеристика, Склад) В
			|					(ВЫБРАТЬ
			|						КешКорзина.Номенклатура,
			|						КешКорзина.Характеристика,
			|						КешКорзина.Склад
			|					ИЗ
			|						КешКорзина)) КАК ОстатокНаСкладе
			|		ПО КешКорзина.Номенклатура = ОстатокНаСкладе.Номенклатура
			|			И КешКорзина.Характеристика = ОстатокНаСкладе.Характеристика
			|			И КешКорзина.Склад = ОстатокНаСкладе.Склад
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(PreResult.Цена * PreResult.КоличествоУпаковок) КАК Оборот
			|ПОМЕСТИТЬ КешБудущийОборот
			|ИЗ
			|	PreResult КАК PreResult
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешПредвРезультат.Номенклатура,
			|	КешПредвРезультат.Характеристика,
			|	ВЫБОР
			|		КОГДА КешПредвРезультат.ВидЦены <> УчПолБонусы.ВидЦеныБонус
			|			ТОГДА 0
			|		КОГДА КешПредвРезультат.ПроцентРучнойСкидки <> 0
			|				ИЛИ КешПредвРезультат.ПроцентАвтоматическойСкидки <> 0
			|			ТОГДА 0
			|		КОГДА Ставки.Значение = 0
			|			ТОГДА 0
			|		КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
			|				И НЕ УчПолБонусы.ЕстьСкидкиДляАкций
			|			ТОГДА 0
			|		ИНАЧЕ Ставки.Значение
			|	КОНЕЦ КАК БонусПроцент,
			|	КешПредвРезультат.Склад
			|ПОМЕСТИТЬ КешПроценты
			|ИЗ
			|	PreResult КАК КешПредвРезультат
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				(Номенклатура, Характеристика) В
			|						(ВЫБРАТЬ
			|							КешКорзина.Номенклатура,
			|							КешКорзина.Характеристика
			|						ИЗ
			|							КешКорзина)
			|					И ВидЦены В
			|						(ВЫБРАТЬ
			|							РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних.ВидЦены
			|						ИЗ
			|							РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних)) КАК ВходнаяЦена
			|		ПО (ВходнаяЦена.Номенклатура = КешПредвРезультат.Номенклатура)
			|			И (ВходнаяЦена.Характеристика = КешПредвРезультат.Характеристика)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦена
			|		ПО (КурсЦена.Валюта = ВходнаяЦена.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешБудущийОборот КАК КешБудущийОборот
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК Ставки
			|		ПО (Ставки.НижняяГраница / КешПредвРезультат.КурсПоСоглашению <= &Оборот + КешБудущийОборот.Оборот)
			|			И (Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению > &Оборот + КешБудущийОборот.Оборот
			|				ИЛИ Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению = 0)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних КАК УчПолБонусы
			|		ПО (ИСТИНА)
			|;";

			Если ИспользуетсяКорзинаПродакта Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				// 4. Получаем ожыдаемы товар на складе в корзине продакта.
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
				|	ВложенныйЗапрос.Характеристика 		КАК Характеристика,
				|	ВложенныйЗапрос.Склад 				КАК Склад,
				|	СУММА(ВложенныйЗапрос.Количество) 	КАК Количество
				|ПОМЕСТИТЬ ТаблицаОжидаемыхТоваров
				|ИЗ
				|	(ВЫБРАТЬ
				|		Номенклатура 			КАК Номенклатура,
				|		Характеристика  		КАК Характеристика,
				|		Склад					КАК Склад,
				|		КПоступлениюОстаток     КАК Количество
				|	ИЗ
				|		РегистрНакопления.ТоварыКПоступлению.Остатки(,
				|								(Номенклатура, Характеристика, Склад) В 
				|									(ВЫБРАТЬ
				|										Номенклатура,
				|										Характеристика,
				|										&СкладПолучатель
				|									ИЗ КешНоменклатура))
				|	ОБЪЕДИНИТЬ ВСЕ
				|
				|	ВЫБРАТЬ
				|		Номенклатура 			КАК Номенклатура,
				|		Характеристика  		КАК Характеристика,
				|		Склад					КАК Склад,
				|		КПоступлениюОстаток     КАК Количество
				|	ИЗ
				|		РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(,
				|								(Номенклатура, Характеристика, Склад) В 
				|									(ВЫБРАТЬ
				|										Номенклатура,
				|										Характеристика,
				|										&СкладПолучатель
				|									ИЗ КешНоменклатура))) КАК ВложенныйЗапрос
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.Номенклатура,
				|	ВложенныйЗапрос.Характеристика,
				|	ВложенныйЗапрос.Склад
				|;
				|
				|ВЫБРАТЬ
				|	ТоварнаяКатегория 		КАК ТоварнаяКатегория,
				|	СУММА(Квота)			КАК Квота
				|ПОМЕСТИТЬ КвотыПоКатегориям
				|ИЗ
				|	РегистрСведений.КвотыАссортимента.СрезПоследних(&ТекущаяДата, (ТоварнаяКатегория, ОбъектПланирования) В (ВЫБРАТЬ ТоварнаяКатегория, &ФорматМагазинаПолучателя ИЗ PreResult))
				|
				|СГРУППИРОВАТЬ ПО
				|	ТоварнаяКатегория
				|;
				|
				|ВЫБРАТЬ
				|	ТоварнаяКатегория 		КАК ТоварнаяКатегория,
				|	Марка					КАК Марка,
				|	СУММА(Квота)			КАК Квота
				|ПОМЕСТИТЬ КвотыПоБрендам
				|ИЗ
				|	РегистрСведений.КвотыАссортимента.СрезПоследних(&ТекущаяДата, (ТоварнаяКатегория, ОбъектПланирования, Марка) В (ВЫБРАТЬ ТоварнаяКатегория, &ФорматМагазинаПолучателя, Марка ИЗ PreResult))
				|
				|СГРУППИРОВАТЬ ПО
				|	ТоварнаяКатегория,
				|	Марка
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СпрНоменклатура.Ссылка 				КАК Номенклатура,
				|	&СкладПолучатель					КАК Склад,
				|	СпрНоменклатура.ТоварнаяКатегория	КАК ТоварнаяКатегория
				|ПОМЕСТИТЬ НоменклатураПоКатегориям
				|ИЗ
				|	Справочник.Номенклатура КАК СпрНоменклатура
				|		
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ PreResult КАК PreResult
				|		ПО СпрНоменклатура.ТоварнаяКатегория = PreResult.ТоварнаяКатегория
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Склад
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СпрНоменклатура.Ссылка 				КАК Номенклатура,
				|	&СкладПолучатель					КАК Склад,
				|	СпрНоменклатура.ТоварнаяКатегория   КАК ТоварнаяКатегория,
				|	СпрНоменклатура.Марка				КАК Марка
				|ПОМЕСТИТЬ НоменклатураПоБрендам
				|ИЗ
				|	Справочник.Номенклатура КАК СпрНоменклатура
				|		
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ PreResult КАК PreResult
				|		ПО СпрНоменклатура.ТоварнаяКатегория = PreResult.ТоварнаяКатегория
				|		И  СпрНоменклатура.Марка 			 = PreResult.Марка
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Склад
				|;
				|
				|ВЫБРАТЬ
				|	НоменклатураПоКатегориям.ТоварнаяКатегория					КАК ТоварнаяКатегория,
				|	КОЛИЧЕСТВО(НоменклатураПоКатегориям.ТоварнаяКатегория) 		КАК Количество
				|ПОМЕСТИТЬ ТаблицаПредставленностьПоКатегориям
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(, (Номенклатура, Склад) В (ВЫБРАТЬ Номенклатура, Склад ИЗ НоменклатураПоКатегориям)) КАК Товары
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПоКатегориям КАК НоменклатураПоКатегориям
				|		ПО Товары.Номенклатура = НоменклатураПоКатегориям.Номенклатура
				|			И Товары.Склад = НоменклатураПоКатегориям.Склад
				|
				|СГРУППИРОВАТЬ ПО
				|	НоменклатураПоКатегориям.ТоварнаяКатегория
				|;
				|
				|ВЫБРАТЬ
				|	НоменклатураПоБрендам.ТоварнаяКатегория				КАК ТоварнаяКатегория,
				|	НоменклатураПоБрендам.Марка                         КАК Марка,
				|	КОЛИЧЕСТВО(НоменклатураПоБрендам.Марка) 			КАК Количество
				|ПОМЕСТИТЬ ТаблицаПредставленностьПоБрендам
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(, (Номенклатура, Склад) В (ВЫБРАТЬ Номенклатура, Склад ИЗ НоменклатураПоБрендам)) КАК Товары
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПоБрендам КАК НоменклатураПоБрендам
				|		ПО Товары.Номенклатура 	= НоменклатураПоБрендам.Номенклатура
				|			И Товары.Склад 		= НоменклатураПоБрендам.Склад
				|
				|СГРУППИРОВАТЬ ПО
				|	НоменклатураПоБрендам.ТоварнаяКатегория,
				|	НоменклатураПоБрендам.Марка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	PreResult.Номенклатура,
				|	PreResult.Номенклатура.ТоварнаяКатегория.Наименование КАК ТоварнаяКатегория,
				|	PreResult.Номенклатура.Марка.Наименование КАК Марка,
				|	ПРЕДСТАВЛЕНИЕ(PreResult.Номенклатура) КАК Содержание,
				|	PreResult.Характеристика,
				|	PreResult.Склад,
				|	PreResult.Коэффициент * PreResult.КоличествоУпаковок КАК Количество,
				|	PreResult.КоличествоУпаковок,
				|	PreResult.ЕдиницаИзмерения,
				|	PreResult.Упаковка,
				|	PreResult.ВидЦены,
				|	PreResult.Цена,
				|	PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки КАК Сумма,
				|	PreResult.ПроцентРучнойСкидки,
				|	PreResult.СуммаРучнойСкидки,
				|	PreResult.ПроцентАвтоматическойСкидки,
				|	PreResult.СуммаАвтоматическойСкидки,
				|	PreResult.СтавкаНДС,
				|	ВЫБОР
				|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
				|			ТОГДА ВЫБОР
				|					КОГДА &ЦенаВключаетНДС
				|						ТОГДА (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) / (1 + PreResult.СтавкаНДСЧислом) * PreResult.СтавкаНДСЧислом
				|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * PreResult.СтавкаНДСЧислом
				|				КОНЕЦ
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СуммаНДС,
				|	ВЫБОР
				|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
				|			ТОГДА ВЫБОР
				|					КОГДА &ЦенаВключаетНДС
				|						ТОГДА PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки
				|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * (1 + PreResult.СтавкаНДСЧислом)
				|				КОНЕЦ
				|		ИНАЧЕ PreResult.КоличествоУпаковок * PreResult.Цена
				|	КОНЕЦ КАК СуммаВсего,
				|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
				|	КешПроценты.БонусПроцент КАК ОборотПроцент,
				|	PreResult.Доступно,
				|	PreResult.ВариантОбеспечения КАК ВариантОбеспечения,
				|
				|
				|	ЕСТЬNULL(ОстатокНаСкладе.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстатокНаСкладе.ВРезервеОстаток, 0)		КАК ОстатокНаСкладе,
				|	ЕСТЬNULL(ОжидаемыеТовары.Количество, 0) 														КАК ОжидаемыйОстаток,
				|	ЕСТЬNULL(КвотыПоКатегориям.Квота, 0)															КАК КвотаПоКатегории,
				|	ЕСТЬNULL(КвотыПоБрендам.Квота, 0)																КАК КвотаПоБренду,
				|	ЕСТЬNULL(ТабПредставленностьПоКат.Количество, 0)												КАК ПредставленностьПоКатегории,
				|	ЕСТЬNULL(ТабПредставленностьПоБр.Количество, 0)													КАК ПредставленностьПоБренду
				|
				|ИЗ
				|	PreResult КАК PreResult
				|		ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
				|		ПО (КешПроценты.Номенклатура = PreResult.Номенклатура)
				|			И (КешПроценты.Характеристика = PreResult.Характеристика)
				|			И PreResult.Склад = КешПроценты.Склад
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОжидаемыхТоваров КАК ОжидаемыеТовары
				|ПО ОжидаемыеТовары.Номенклатура 	= PreResult.Номенклатура
				|И 	ОжидаемыеТовары.Характеристика 	= PreResult.Характеристика
				|И 	ОжидаемыеТовары.Склад 			= PreResult.Склад
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ КвотыПоКатегориям КАК КвотыПоКатегориям
				|ПО PreResult.ТоварнаяКатегория 	= КвотыПоКатегориям.ТоварнаяКатегория
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ КвотыПоБрендам КАК КвотыПоБрендам
				|ПО PreResult.ТоварнаяКатегория 	= КвотыПоБрендам.ТоварнаяКатегория
				|И PreResult.Марка 					= КвотыПоБрендам.Марка
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредставленностьПоКатегориям КАК ТабПредставленностьПоКат
				|ПО PreResult.ТоварнаяКатегория = ТабПредставленностьПоКат.ТоварнаяКатегория
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредставленностьПоБрендам КАК ТабПредставленностьПоБр
				|ПО PreResult.ТоварнаяКатегория = ТабПредставленностьПоБр.ТоварнаяКатегория
				|И  PreResult.Марка				= ТабПредставленностьПоБр.Марка
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Характеристика, Склад) В (ВЫБРАТЬ Номенклатура, Характеристика, &СкладПолучатель ИЗ КешКорзина)) КАК ОстатокНаСкладе
				|ПО PreResult.Номенклатура 		= ОстатокНаСкладе.Номенклатура
				|И  PreResult.Характеристика 	= ОстатокНаСкладе.Характеристика";

				
			Иначе
                ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	PreResult.Номенклатура,
				|	ПРЕДСТАВЛЕНИЕ(PreResult.Номенклатура) КАК Содержание,
				|	PreResult.Характеристика,
				|	PreResult.Склад,
				|	PreResult.Коэффициент * PreResult.КоличествоУпаковок КАК Количество,
				|	PreResult.КоличествоУпаковок,
				|	PreResult.ЕдиницаИзмерения,
				|	PreResult.Упаковка,
				|	PreResult.ВидЦены,
				|	PreResult.Цена,
				|	PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки КАК Сумма,
				|	PreResult.ПроцентРучнойСкидки,
				|	PreResult.СуммаРучнойСкидки,
				|	PreResult.ПроцентАвтоматическойСкидки,
				|	PreResult.СуммаАвтоматическойСкидки,
				|	PreResult.СтавкаНДС,
				|	ВЫБОР
				|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
				|			ТОГДА ВЫБОР
				|					КОГДА &ЦенаВключаетНДС
				|						ТОГДА (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) / (1 + PreResult.СтавкаНДСЧислом) * PreResult.СтавкаНДСЧислом
				|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * PreResult.СтавкаНДСЧислом
				|				КОНЕЦ
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СуммаНДС,
				|	ВЫБОР
				|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
				|			ТОГДА ВЫБОР
				|					КОГДА &ЦенаВключаетНДС
				|						ТОГДА PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки
				|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * (1 + PreResult.СтавкаНДСЧислом)
				|				КОНЕЦ
				|		ИНАЧЕ PreResult.КоличествоУпаковок * PreResult.Цена
				|	КОНЕЦ КАК СуммаВсего,
				|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
				|	КешПроценты.БонусПроцент КАК ОборотПроцент,
				|	PreResult.Доступно,
				|	PreResult.ВариантОбеспечения КАК ВариантОбеспечения
				|ИЗ
				|	PreResult КАК PreResult
				|		ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
				|		ПО (КешПроценты.Номенклатура = PreResult.Номенклатура)
				|			И (КешПроценты.Характеристика = PreResult.Характеристика)
				|			И PreResult.Склад = КешПроценты.Склад";
		КонецЕсли;
 Возврат ТекстЗапроса;	
КонецФункции // ()


&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаНазначение(ЗаказНаПеремещениеСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
        |	Назначения.Ссылка
        |ИЗ
        |	Справочник.Назначения КАК Назначения
        |ГДЕ
        |	Назначения.Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ", ЗаказНаПеремещениеСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);

КонецФункции // ПолучитьСсылкуНаНазначение()
 
 
&НаСервере
Функция ПолучитьСтруктурыЗаполненияКлиент(ИмяДокумента)
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	Если НЕ ДИ_Партнер.Пустая() И НЕ Соглашение.СегментПартнеров.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ПартнерыСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Соглашение.СегментПартнеров);
		НаборЗаписей.Отбор.Партнер.Установить(ДИ_Партнер);
			Запись = НаборЗаписей.Добавить();
			Запись.Партнер = ДИ_Партнер;
			Запись.Сегмент = Соглашение.СегментПартнеров;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	
	
	УсловияПродаж  = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
	УсловияПродаж.Вставить("Партнер", 				ДИ_Партнер);
	УсловияПродаж.Вставить("Контрагент",			ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДИ_Партнер));
	УсловияПродаж.Вставить("ВалютаДокумента", 		УсловияПродаж.Валюта);
	УсловияПродаж.Вставить("ВалютаВзаиморасчетов", 	СоглашениеВалюта);
	УсловияПродаж.Вставить("ВалютаВзаиморасчетовДокумента", СоглашениеВалюта);
	УсловияПродаж.Вставить("ДатаПлатежа",  			ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение));
	Если НЕ РеквизитФормыВЗначение("Объект").GetLibrary("LoyaltyLibrary").ЛояльностьИспользуетсяПодразделением() Тогда
		УсловияПродаж.Вставить("КТС_АдресДоставки", 	ПолучитьАдресПартнера(ДИ_Партнер));
		МаршрутыБиблиотека = ModuleLibraryServer.GetLibrary("Маршруты адресный классификатор");
		УсловияПродаж.Вставить("КТС_ПунктНазначения", 	МаршрутыБиблиотека.ПолучитьГородПоАдресу(УсловияПродаж.КТС_АдресДоставки));
	КонецЕсли;

	
	
	УсловияПродаж.Вставить("СписокСкладов",			ПолучитьСписокСкладов(РабочаяКорзина));
	УсловияПродаж.Вставить("Дата",					ТекущаяДата());
	УсловияПродаж.Вставить("ЖелаемаяДатаОтгрузки",	ТекущаяДата());
	УсловияПродаж.Вставить("ГлавныйБухгалтер", ПолучитьОтветственноеЛицоОрганизации(УсловияПродаж.Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер));
	УсловияПродаж.Вставить("Руководитель", ПолучитьОтветственноеЛицоОрганизации(УсловияПродаж.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияПродаж.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияПродаж.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияПродаж.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		СтруктураПараметров,
		?(УсловияПродаж.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			УсловияПродаж.ХозяйственнаяОперация
		),
		УсловияПродаж.Валюта
	);
	

	УсловияПродаж.Вставить("Договор",	Договор);
	УсловияПродаж.Вставить("ТребуетсяДоговор",	Соглашение.ИспользуютсяДоговорыКонтрагентов);
	УсловияПродаж.Вставить("БанковскийСчетОрганизации", ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				УсловияПродаж.Организация,
				, // ФормаОплаты
				Неопределено)
			);
		
	УсловияПродаж.Вставить("Касса", ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
				УсловияПродаж.Организация,
				УсловияПродаж.ФормаОплаты,
				Неопределено)
			);
	УсловияПродаж.Вставить("ХозяйственнаяОперация", ?(ИмяДокумента="ПеремещениеТоваров",Перечисления.ХозяйственныеОперации.ПеремещениеТоваров,УсловияПродаж.ХозяйственнаяОперация));
			
	Если ЛояльностьИспользуетсяПодразделением() Тогда
		Если ЛояльностьИспользуется(СоглашениеОрганизация) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Лояльность_Настройки.РозничныйКлиент
				|ИЗ
				|	РегистрСведений.Лояльность_Настройки КАК Лояльность_Настройки
				|ГДЕ
				|	Лояльность_Настройки.РозничныйКлиент = &РозничныйКлиент");
			Запрос.УстановитьПараметр("РозничныйКлиент", ДИ_Партнер);
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				УсловияПродаж.Вставить("ОчиститьРеквизитПартнер");
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	Возврат УсловияПродаж;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктурыЗаполненияПоставщик(Соглашение)
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	УсловияЗакупки  = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	УсловияЗакупки.Вставить("Партнер", 				Соглашение.Партнер);
	УсловияЗакупки.Вставить("ВалютаВзаиморасчетов", СоглашениеВалюта);
	УсловияЗакупки.Вставить("ДатаПлатежа",  		ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), Соглашение));
	УсловияЗакупки.Вставить("СписокСкладов",		ПолучитьСписокСкладов(РабочаяКорзина));
	УсловияЗакупки.Вставить("Дата",					ТекущаяДата());
	
	ХозяйственнаяОперацияДоговора = ?(
			УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
		Или УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
		Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
		УсловияЗакупки.ХозяйственнаяОперация
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияЗакупки.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияЗакупки.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияЗакупки.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
	    СтруктураПараметров,
		ХозяйственнаяОперацияДоговора,
		УсловияЗакупки.Валюта);
	
	УсловияЗакупки.Вставить("Договор",	Договор);
	УсловияЗакупки.Вставить("ТребуетсяДоговор",	Соглашение.ИспользуютсяДоговорыКонтрагентов);
	УсловияЗакупки.Вставить("ЖелаемаяДатаПоступления", ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(УсловияЗакупки.Дата, Перечисления.Периодичность.День, УсловияЗакупки.СрокПоставки) + 1);
		
	Возврат УсловияЗакупки;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктурыЗаполненияНоменклатуры()

	РабочаяКорзина 		= ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	ТаблицаНоменлатуры	= РабочаяКорзина.Выгрузить();

	Возврат   ТаблицаНоменлатуры;

КонецФункции // ПолучитьСтруктурыЗаполненияНоменклатуры()

&НаСервереБезКонтекста
Функция ПолучитьАдресПартнера(ПартнерСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|И	ПартнерыКонтактнаяИнформация.Тип = &Тип");	
	Запрос.УстановитьПараметр("Тип", 	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", ПартнерСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Представление, "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов(ТабКорзина)
	
	Запрос = Новый Запрос("	ВЫБРАТЬ 
							|	ТабКорзина.Склад 
							|
							|ПОМЕСТИТЬ Кеш 
							|Из 
							|	&ТабКорзина КАК ТабКорзина
							|
							|; 
							|ВЫБРАТЬ РАЗЛИЧНЫЕ 
							|	Склад
							|
							|Из
							|	Кеш
							|;");
	Запрос.УстановитьПараметр("ТабКорзина", ТабКорзина.Выгрузить());
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтветственноеЛицоОрганизации(Организация, ОтветственноеЛицо)

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственноеЛицо = &ОтветственноеЛицо
		|И	(ДатаОкончания > &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
		|И	Владелец = &Организация";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
    Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции // ПолучитьОтветственноеЛицоОрганизации()
 





&НаСервере
Процедура ОбработатьИзменениеКорзины(ПараметрыОтбора, Цена = 0)
		
	Если ПараметрыОтбора.Номенклатура 	  = Неопределено Тогда ПараметрыОтбора.Номенклатура 	= Справочники.Номенклатура.ПустаяСсылка(); 				КонецЕсли;
	Если ПараметрыОтбора.Характеристика   = Неопределено Тогда ПараметрыОтбора.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();КонецЕсли;
	Если ПараметрыОтбора.ЕдиницаИзмерения = Неопределено Тогда ПараметрыОтбора.ЕдиницаИзмерения = ПараметрыОтбора.Номенклатура.ЕдиницаИзмерения; 		КонецЕсли;
	
	Номенклатура 	= ПараметрыОтбора.Номенклатура;
	Характеристика 	= ПараметрыОтбора.Характеристика;
	ЕдиницаИзмерения= ПараметрыОтбора.ЕдиницаИзмерения;
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	РезультатСтрока = РабочаяКорзина.НайтиСтроки(ПараметрыОтбора);
	Если РезультатСтрока.Количество() Тогда
		РезультатСтрока[0].КоличествоУпаковок = РезультатСтрока[0].КоличествоУпаковок + 1;
	Иначе
		РезультатСтрока = РабочаяКорзина.Добавить();
		РезультатСтрока.Номенклатура   	   = Номенклатура;
		РезультатСтрока.Характеристика     = Характеристика;
		РезультатСтрока.Склад			   = СоглашениеСклад;
		РезультатСтрока.КоличествоУпаковок = 1;
		РезультатСтрока.ЕдиницаИзмерения   = ЕдиницаИзмерения;
		РезультатСтрока.ВидЦены			   = СоглашениеВидЦены;
		РезультатСтрока.Цена		       = Цена;
		РезультатСтрока.ПроцентРучнойСкидки= Партнер_Скидка;
		РезультатСтрока.СтавкаНДС		   = ?(Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, Номенклатура.СтавкаНДС);
	КонецЕсли;

	ОбновитьСодержанииеКорзины(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСодержанииеКорзиныКлиент()
	//Запомнили ссылку на номенклатуру, что бы востановить позицию при обновлении списка
	Перем ПараметрыОтбора;	
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	ЭлементКорзина = ?(ИспользуетсяКорзинаПродакта, Элементы.ТЗ_КорзинаПродакта, Элементы.ТЗ_Корзина);
	
	ТекущаяСтрока = ЭлементКорзина.ТекущаяСтрока;
	ТекущиеДанные = ЭлементКорзина.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
		 ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения, Упаковка",  ТекущиеДанные.Номенклатура, 
		 																								ТекущиеДанные.Характеристика,
																										ТекущиеДанные.ЕдиницаИзмерения,
																										ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	ОбновитьСодержанииеКорзины();
	
	//Востанавливаем курсор на нужную строку, если он не пропал	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = РабочаяКорзина.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда ЭлементКорзина.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); КонецЕсли;
	КонецЕсли;
	
	ОбновитьСуммаИтог();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСодержанииеКорзины()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "
		//0. Кешируем содержание корзины
		|ВЫБРАТЬ 
		|   ТабКорзина.Номенклатура,
		|   ТабКорзина.Характеристика,
		|
		|	ТабКорзина.Склад,
		|   ТабКорзина.КоличествоУпаковок,
		|	ТабКорзина.ЕдиницаИзмерения,
		|	ТабКорзина.Упаковка,
		|
		|   ТабКорзина.ВидЦены,
		|   ТабКорзина.Цена,
		|	ТабКорзина.ПроцентРучнойСкидки,
		|	ТабКорзина.СуммаРучнойСкидки,
		|	ТабКорзина.ПроцентАвтоматическойСкидки,
		|	ТабКорзина.СуммаАвтоматическойСкидки,	
		|
		|	ТабКорзина.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА 0.1
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА 0.18
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|			ТОГДА 0.2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтавкаНДСЧислом
		|
		|ПОМЕСТИТЬ КешКорзина
		|ИЗ 
		|	&ТабКорзина КАК ТабКорзина
		|;
		//1. Расчитываем цены и прочие значения
		|ВЫБРАТЬ
		|   КешКорзина.Номенклатура,
		|	КешКорзина.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	КешКорзина.Номенклатура.Марка КАК Марка,
		|   КешКорзина.Характеристика,
		|
		|	КешКорзина.Склад,
		|   КешКорзина.КоличествоУпаковок,
		|	КешКорзина.ЕдиницаИзмерения,
		|	КешКорзина.Упаковка,
		|
		|   КешКорзина.ВидЦены,
		|   ВЫБОР 
		|		КОГДА КешКорзина.ВидЦены = Значение(Справочник.ВидыЦен.ПустаяСсылка)
		|		ТОГДА КешКорзина.Цена
		|		ИНАЧЕ ЦеныКорзины.Цена * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) * (КурсЦены.Курс /  КурсЦены.Кратность) / (КурсСоглашения.Курс / КурсСоглашения.Кратность)
		|	КОНЕЦ КАК Цена,
		|
		|	КешКорзина.ПроцентРучнойСкидки,
		|	КешКорзина.СуммаРучнойСкидки,
		|
		|	КешКорзина.ПроцентАвтоматическойСкидки,
		|	КешКорзина.СуммаАвтоматическойСкидки,
		|
		|	КешКорзина.СтавкаНДС,
		|   КешКорзина.СтавкаНДСЧислом,
		|
		|   КурсСоглашения.Курс / КурсСоглашения.Кратность  КАК КурсПоСоглашению,
		|	ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1)	КАК Коэффициент,
		|   ВЫБОР
		|		КОГДА КешКорзина.КоличествоУпаковок * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) <= (ОстатокНаСкладе.ВНаличииОстаток - ОстатокНаСкладе.ВРезервеОстаток)
		|       ТОГДА Ложь
		|      	КОГДА КешКорзина.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|       ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК Доступно
		|
		|ПОМЕСТИТЬ PreResult
		|ИЗ
		|	КешКорзина КАК КешКорзина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика)  В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешКорзина)) КАК ЦеныКорзины
		|ПО КешКорзина.Номенклатура 	= ЦеныКорзины.Номенклатура
		|И  КешКорзина.Характеристика 	= ЦеныКорзины.Характеристика
		|И	КешКорзина.ВидЦены			= ЦеныКорзины.ВидЦены
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК КурсСоглашения
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦены
		|ПО ЦеныКорзины.Валюта = КурсЦены.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Характеристика, Склад) В (ВЫБРАТЬ Номенклатура, Характеристика, Склад ИЗ КешКорзина)) КАК ОстатокНаСкладе
		|ПО КешКорзина.Номенклатура 	= ОстатокНаСкладе.Номенклатура
		|И  КешКорзина.Характеристика 	= ОстатокНаСкладе.Характеристика
		|И	КешКорзина.Склад			= ОстатокНаСкладе.Склад 
		|
		|;
		//2. Оборот если продажа осуществится 
		|ВЫБРАТЬ
		|	Сумма(Цена * КоличествоУпаковок) КАК Оборот
		|
		|ПОМЕСТИТЬ КешБудущийОборот
		|ИЗ
		|	PreResult	
		|;
		//3.
		|ВЫБРАТЬ
		|	КешПредвРезультат.Номенклатура,	
		|	КешПредвРезультат.Характеристика,
		|	ВЫБОР
		|  		КОГДА КешПредвРезультат.ВидЦены <> УчПолБонусы.ВидЦеныБонус
		|       ТОГДА 0
		|		КОГДА КешПредвРезультат.ПроцентРучнойСкидки <> 0 ИЛИ КешПредвРезультат.ПроцентАвтоматическойСкидки <> 0
		|       ТОГДА 0
		|		КОГДА Ставки.Значение = 0
		|       ТОГДА 0
		|   	КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
		|		 И НЕ УчПолБонусы.ЕстьСкидкиДляАкций
		|		ТОГДА 0
		|		ИНАЧЕ Ставки.Значение  
		|	КОНЕЦ КАК БонусПроцент
		|
		|ПОМЕСТИТЬ КешПроценты
		|ИЗ
		|	PreResult КАК КешПредвРезультат
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешКорзина) И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних)) КАК ВходнаяЦена
		|ПО ВходнаяЦена.Номенклатура 	= КешПредвРезультат.Номенклатура
		|И  ВходнаяЦена.Характеристика 	= КешПредвРезультат.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦена
		|ПО КурсЦена.Валюта = ВходнаяЦена.Валюта
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешБудущийОборот КАК КешБудущийОборот
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК Ставки
        |ПО 	Ставки.НижняяГраница  / КешПредвРезультат.КурсПоСоглашению <= 	&Оборот + КешБудущийОборот.Оборот
		|И	(	Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению > 	&Оборот + КешБудущийОборот.Оборот 
		|	ИЛИ Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению = 	0)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних КАК УчПолБонусы
		|ПО Истина
		|;";
		
	Если ИспользуетсяКорзинаПродакта Тогда
			
		Запрос.Текст = Запрос.Текст + "
		// 4. Получаем ожыдаемы товар на складе в корзине продакта.
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика 		КАК Характеристика,
		|	ВложенныйЗапрос.Склад 				КАК Склад,
		|	СУММА(ВложенныйЗапрос.Количество) 	КАК Количество
		|ПОМЕСТИТЬ ТаблицаОжидаемыхТоваров
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура 			КАК Номенклатура,
		|		Характеристика  		КАК Характеристика,
		|		Склад					КАК Склад,
		|		КПоступлениюОстаток     КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.Остатки(,
		|								(Номенклатура, Характеристика, Склад) В 
		|									(ВЫБРАТЬ
		|										Номенклатура,
		|										Характеристика,
		|										&СкладПолучатель
		|									ИЗ КешКорзина))
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Номенклатура 			КАК Номенклатура,
		|		Характеристика  		КАК Характеристика,
		|		Склад					КАК Склад,
		|		КПоступлениюОстаток     КАК Количество
		|	ИЗ
		|		РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(,
		|								(Номенклатура, Характеристика, Склад) В 
		|									(ВЫБРАТЬ
		|										Номенклатура,
		|										Характеристика,
		|										&СкладПолучатель
		|									ИЗ КешКорзина))) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Склад
		|;
		|
		// 6. Квоты по категориям
		|ВЫБРАТЬ
		|	ТоварнаяКатегория 		КАК ТоварнаяКатегория,
		|	СУММА(Квота)			КАК Квота
		|ПОМЕСТИТЬ КвотыПоКатегориям
		|ИЗ
		|	РегистрСведений.КвотыАссортимента.СрезПоследних(&ТекущаяДата, (ТоварнаяКатегория, ОбъектПланирования) В (ВЫБРАТЬ ТоварнаяКатегория, &ФорматМагазинаПолучателя ИЗ PreResult))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварнаяКатегория
		|;
		// 7. Квоты по брендам
		|ВЫБРАТЬ
		|	ТоварнаяКатегория 		КАК ТоварнаяКатегория,
		|	Марка					КАК Марка,
		|	СУММА(Квота)			КАК Квота
		|ПОМЕСТИТЬ КвотыПоБрендам
		|ИЗ
		|	РегистрСведений.КвотыАссортимента.СрезПоследних(&ТекущаяДата, (ТоварнаяКатегория, ОбъектПланирования, Марка) В (ВЫБРАТЬ ТоварнаяКатегория, &ФорматМагазинаПолучателя, Марка ИЗ PreResult))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварнаяКатегория,
		|	Марка
		|;
		// 8. Получаем номенклатуру по товарной категории
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпрНоменклатура.Ссылка 				КАК Номенклатура,
		|	&СкладПолучатель					КАК Склад,
		|	СпрНоменклатура.ТоварнаяКатегория	КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ НоменклатураПоКатегориям
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ PreResult КАК PreResult
		|		ПО СпрНоменклатура.ТоварнаяКатегория = PreResult.ТоварнаяКатегория
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|
		// 9. Получаем номенклатуру по бренду
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпрНоменклатура.Ссылка 				КАК Номенклатура,
		|	&СкладПолучатель					КАК Склад,
		|	СпрНоменклатура.ТоварнаяКатегория   КАК ТоварнаяКатегория,
		|	СпрНоменклатура.Марка				КАК Марка
		|ПОМЕСТИТЬ НоменклатураПоБрендам
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ PreResult КАК PreResult
		|		ПО СпрНоменклатура.ТоварнаяКатегория = PreResult.ТоварнаяКатегория
		|		И  СпрНоменклатура.Марка 			 = PreResult.Марка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|	
		// 10. Представленность по категориям
		|ВЫБРАТЬ
		|	НоменклатураПоКатегориям.ТоварнаяКатегория					КАК ТоварнаяКатегория,
		|	КОЛИЧЕСТВО(НоменклатураПоКатегориям.ТоварнаяКатегория) 		КАК Количество
		|ПОМЕСТИТЬ ТаблицаПредставленностьПоКатегориям
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, (Номенклатура, Склад) В (ВЫБРАТЬ Номенклатура, Склад ИЗ НоменклатураПоКатегориям)) КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПоКатегориям КАК НоменклатураПоКатегориям
		|		ПО Товары.Номенклатура = НоменклатураПоКатегориям.Номенклатура
		|			И Товары.Склад = НоменклатураПоКатегориям.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоКатегориям.ТоварнаяКатегория
		|;
		// 11. Представленность по маркам
		|ВЫБРАТЬ
		|	НоменклатураПоБрендам.ТоварнаяКатегория				КАК ТоварнаяКатегория,
		|	НоменклатураПоБрендам.Марка                         КАК Марка,
		|	КОЛИЧЕСТВО(НоменклатураПоБрендам.Марка) 			КАК Количество
		|ПОМЕСТИТЬ ТаблицаПредставленностьПоБрендам
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, (Номенклатура, Склад) В (ВЫБРАТЬ Номенклатура, Склад ИЗ НоменклатураПоБрендам)) КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПоБрендам КАК НоменклатураПоБрендам
		|		ПО Товары.Номенклатура 	= НоменклатураПоБрендам.Номенклатура
		|			И Товары.Склад 		= НоменклатураПоБрендам.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоБрендам.ТоварнаяКатегория,
		|	НоменклатураПоБрендам.Марка
		|;
		|
		|ВЫБРАТЬ 
		|	PreResult.Номенклатура,
		|	PreResult.Номенклатура.ТоварнаяКатегория.Наименование КАК ТоварнаяКатегория,
		|	PreResult.Номенклатура.Марка.Наименование КАК Марка,
		|	ПРЕДСТАВЛЕНИЕ(PreResult.Номенклатура) КАК Содержание,
		|	PreResult.Характеристика,
		|
		|   PreResult.Склад,
		|	PreResult.Коэффициент * PreResult.КоличествоУпаковок КАК Количество,
		|   PreResult.КоличествоУпаковок,
		|   PreResult.ЕдиницаИзмерения,
		|   PreResult.Упаковка,
		|
		|   PreResult.ВидЦены,
		|	PreResult.Цена,
		|   PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки КАК Сумма,
		|   PreResult.ПроцентРучнойСкидки,
		|	PreResult.СуммаРучнойСкидки,
		|   PreResult.ПроцентАвтоматическойСкидки,
		|	PreResult.СуммаАвтоматическойСкидки,
		|   PreResult.СтавкаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|					КОГДА &ЦенаВключаетНДС
		|					ТОГДА (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) / (1 + PreResult.СтавкаНДСЧислом ) * PreResult.СтавкаНДСЧислом
		|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * PreResult.СтавкаНДСЧислом
		|			  КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|				    КОГДА &ЦенаВключаетНДС
		|				  	ТОГДА PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки
		|					ИНАЧЕ(PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * (1 + PreResult.СтавкаНДСЧислом)
		|			  КОНЕЦ 
		|		ИНАЧЕ КоличествоУпаковок * Цена  
		|	КОНЕЦ КАК СуммаВсего,
		|
		|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
		|	КешПроценты.БонусПроцент														КАК ОборотПроцент,
		|                                         						
		|	PreResult.Доступно,
		|ВЫБОР
		|   КОГДА PreResult.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|       ТОГДА """"
		|	КОГДА НЕ PreResult.Доступно И PreResult.Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
		|КОНЕЦ КАК ВариантОбеспечения,
		|
		|	ЕСТЬNULL(ОстатокНаСкладе.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстатокНаСкладе.ВРезервеОстаток, 0)		КАК ОстатокНаСкладе,
		|	ЕСТЬNULL(ОжидаемыеТовары.Количество, 0) 														КАК ОжидаемыйОстаток,
		|	ЕСТЬNULL(КвотыПоКатегориям.Квота, 0)															КАК КвотаПоКатегории,
		|	ЕСТЬNULL(КвотыПоБрендам.Квота, 0)																КАК КвотаПоБренду,
		|	ЕСТЬNULL(ТабПредставленностьПоКат.Количество, 0)												КАК ПредставленностьПоКатегории,
		|	ЕСТЬNULL(ТабПредставленностьПоБр.Количество, 0)													КАК ПредставленностьПоБренду
        |
		|ИЗ
		| 	PreResult КАК PreResult
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
		|ПО КешПроценты.Номенклатура   = PreResult.Номенклатура   
		|И  КешПроценты.Характеристика = PreResult.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОжидаемыхТоваров КАК ОжидаемыеТовары
		|ПО ОжидаемыеТовары.Номенклатура 	= PreResult.Номенклатура
		|И 	ОжидаемыеТовары.Характеристика 	= PreResult.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КвотыПоКатегориям КАК КвотыПоКатегориям
		|ПО PreResult.ТоварнаяКатегория 	= КвотыПоКатегориям.ТоварнаяКатегория
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КвотыПоБрендам КАК КвотыПоБрендам
		|ПО PreResult.ТоварнаяКатегория 	= КвотыПоБрендам.ТоварнаяКатегория
		|И PreResult.Марка 					= КвотыПоБрендам.Марка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредставленностьПоКатегориям КАК ТабПредставленностьПоКат
		|ПО PreResult.ТоварнаяКатегория = ТабПредставленностьПоКат.ТоварнаяКатегория
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредставленностьПоБрендам КАК ТабПредставленностьПоБр
		|ПО PreResult.ТоварнаяКатегория = ТабПредставленностьПоБр.ТоварнаяКатегория
		|И  PreResult.Марка				= ТабПредставленностьПоБр.Марка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Характеристика, Склад) В (ВЫБРАТЬ Номенклатура, Характеристика, &СкладПолучатель ИЗ КешКорзина)) КАК ОстатокНаСкладе
		|ПО PreResult.Номенклатура 		= ОстатокНаСкладе.Номенклатура
		|И  PreResult.Характеристика 	= ОстатокНаСкладе.Характеристика 
		|;";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		//4. Результат пересчета
		|ВЫБРАТЬ 
		|	PreResult.Номенклатура,
		|	ПРЕДСТАВЛЕНИЕ(PreResult.Номенклатура) КАК Содержание,
		|	PreResult.Характеристика,
		|
		|   PreResult.Склад,
		|	PreResult.Коэффициент * PreResult.КоличествоУпаковок КАК Количество,
		|   PreResult.КоличествоУпаковок,
		|   PreResult.ЕдиницаИзмерения,
		|   PreResult.Упаковка,
		|
		|   PreResult.ВидЦены,
		|	PreResult.Цена,
		|   PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки КАК Сумма,
		|   PreResult.ПроцентРучнойСкидки,
		|	PreResult.СуммаРучнойСкидки,
		|   PreResult.ПроцентАвтоматическойСкидки,
		|	PreResult.СуммаАвтоматическойСкидки,
		|   PreResult.СтавкаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|					КОГДА &ЦенаВключаетНДС
		|					ТОГДА (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) / (1 + PreResult.СтавкаНДСЧислом ) * PreResult.СтавкаНДСЧислом
		|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * PreResult.СтавкаНДСЧислом
		|			  КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|				    КОГДА &ЦенаВключаетНДС
		|				  	ТОГДА PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки
		|					ИНАЧЕ(PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * (1 + PreResult.СтавкаНДСЧислом)
		|			  КОНЕЦ 
		|		ИНАЧЕ КоличествоУпаковок * Цена  
		|	КОНЕЦ КАК СуммаВсего,
		|
		|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
		|	КешПроценты.БонусПроцент														КАК ОборотПроцент,
		|                                         						
		|	PreResult.Доступно,
		|ВЫБОР
		|   КОГДА PreResult.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|       ТОГДА """"
		|	КОГДА НЕ PreResult.Доступно И PreResult.Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
		|КОНЕЦ КАК ВариантОбеспечения
        |
		|ИЗ
		| 	PreResult КАК PreResult
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
		|ПО КешПроценты.Номенклатура   = PreResult.Номенклатура   
		|И  КешПроценты.Характеристика = PreResult.Характеристика 
		|;";
			
	КонецЕсли;
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
		
	Запрос.УстановитьПараметр("Оборот", 					Партнер_Оборот);
	Запрос.УстановитьПараметр("НачалоДня", 					НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущаяДата",				ТекущаяДата());
	Запрос.УстановитьПараметр("СкладПолучатель",			Матрица_СкладПолучатель);
	Запрос.УстановитьПараметр("ФорматМагазинаПолучателя",	Матрица_СкладПолучатель.ФорматМагазина);
	Запрос.УстановитьПараметр("ТабКорзина", 				РабочаяКорзина.Выгрузить());
	Запрос.УстановитьПараметр("ВалютаСоглашения",			СоглашениеВалюта);
	Запрос.УстановитьПараметр("НалогообложениеНДС",			Соглашение.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",			Соглашение.ЦенаВключаетНДС);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	РабочаяКорзина.Загрузить(РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ОбновитьСообщениеПроАкционныеТовары(Номенклатура, Склад)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СегментыНоменклатуры.Номенклатура
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|				   &ТекущаяДата,
		|				   (ДатаОкончания >= &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
		|				   И (Склад = &Склад ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|				) КАК ДействиеСкидокНаценок
		|				
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК Условия
		|ПО Условия.Ссылка = ДействиеСкидокНаценок.СкидкаНаценка
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК СегментыНоменклатуры
		|ПО 	СегментыНоменклатуры.Сегмент  = Условия.УсловиеПредоставления.СегментНоменклатурыОграничения
		|И	СегментыНоменклатуры.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("ТекущаяДата",  ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", 		  Склад);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("АкционныеТовары", Запрос.Выполнить().Пустой());
	СтруктураВозврата.Вставить("СообщениеОбАксессуарах", СообщениеОбАксессуарах(Номенклатура));
	Возврат СтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция СообщениеОбАксессуарах(Номенклатура)
	СвойствоСообщениеОбАксессуарах = 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("67760c23-c9b4-11e2-b7da-001e673c80fc"));
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения
		|ГДЕ
		| 	ВЫРАЗИТЬ(Объект КАК Справочник.ВидыНоменклатуры) = &Объект
		|И	Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект",   Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Свойство", СвойствоСообщениеОбАксессуарах);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Значение, "");
КонецФункции










/////////////////////////////////////////////////////////// 








&НаКлиенте
Процедура Загрузить_ТЗ_НоменклатураКлиент(СсылкаНаИсточник, Сортировка = Ложь, Отбор = Ложь, Идентификатор = 0, ПолноеИмя = "")
	Перем ПараметрыОтбора;
	Если НЕ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодборНоменклатуры Тогда 
		Возврат; 
	КонецЕсли;	
		
	Загрузить_ТЗ_НоменклатураСервер(СсылкаНаИсточник, Сортировка, Отбор, Идентификатор, ПолноеИмя);
		
КонецПроцедуры

&НаСервере
Процедура Загрузить_ТЗ_НоменклатураСервер(СсылкаНаИсточник, Сортировка, Отбор, Идентификатор, ПолноеИмя)	
	Перем ВремЗнч;
	УстановитьПривилегированныйРежим(Истина);

	//Запоминаем текущую строку
	ТекущаяСтрока = Элементы.ТЗ_Номенклатура.ТекущаяСтрока;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = ТЗ_Номенклатура.НайтиПоИдентификатору(ТекущаяСтрока);
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли; 
	
	Если Сортировка ИЛИ Отбор Тогда
		ТДанные = ТЗ_Номенклатура.НайтиПоИдентификатору(Идентификатор);
		ЭтоАддон = ТДанные.Свойство(ПолноеИмя);
		Если НЕ ЭтоАддон Тогда
			Разделитель	= Найти(ПолноеИмя, "_");
			ИмяОбъекта 	= Лев(ПолноеИмя, Разделитель - 1);
			АдресноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - Разделитель);
			Если НЕ ТДанные.Свойство(ИмяОбъекта, ВремЗнч) Тогда
				ВывестиСообщениеПользователю("Возникла неизвестная ошибка. В таблице нет данных о имени: " + ИмяОбъекта + " сообщите в службу поддержки");
				Возврат;
			КонецЕсли;
			
			Если Найти(XMLТипЗнч(ВремЗнч).ИмяТипа, "Ref") = 0 Тогда
				ВывестиСообщениеПользователю("Возникла неизвестная ошибка. Метаданные не определены: " + ИмяОбъекта + " сообщите в службу поддержки");
				Возврат;
			КонецЕсли;
			
			МассивСлов = ПолучитьМассивСловОтборИСортировка(АдресноеИмя);
			
			АдресноеИмя = "";
			КолСлов		= МассивСлов.Количество() - 1;
			МетаВремЗнч = ВремЗнч.Метаданные();
			Для Итератор = 0 По КолСлов Цикл
				ВремСлв = МассивСлов[Итератор];
				ВремЗнч = МетаВремЗнч.Реквизиты.Найти(ВремСлв);
				Если НЕ ВремЗнч = Неопределено Тогда
					АдресноеИмя = АдресноеИмя + ВремСлв;
					СловаОбработаныОтборИСортировка(Итератор, КолСлов, МетаВремЗнч, ВремЗнч, АдресноеИмя);
				Иначе
					Попытка 
						ВремЗнч = МетаВремЗнч.СтандартныеРеквизиты[ВремСлв];
						АдресноеИмя = АдресноеИмя + ВремСлв;
						СловаОбработаныОтборИСортировка(Итератор, КолСлов, МетаВремЗнч, ВремЗнч, АдресноеИмя);
					Исключение
						МассивСлов[Итератор + 1] = ВремСлв + "_" + МассивСлов[Итератор + 1];  
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		УстановитьЗначенияОтборИСортировка(?(Сортировка, Сортировка_Поле, Сортировка_Отбор_Поле), ?(ЭтоАддон, ПолноеИмя, АдресноеИмя));
		Если Отбор Тогда
			Сортировка_Отбор_Значение = ?(ЭтоАддон, ТДанные[ПолноеИмя], ПолучитьЗначениеРеквизита(АдресноеИмя, ТДанные[ИмяОбъекта]));
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗ_Номенклатура.Очистить();
	Если СсылкаНаИсточник = Неопределено Тогда Возврат; КонецЕсли; 
	Если СсылкаНаИсточник.Пустая() 		 И ПустаяСтрока(Поиск_СтрокаПоиска) Тогда Возврат; КонецЕсли;	
	Навигация_СсылкаНаИсточник = СсылкаНаИсточник;
	
 	Если ТипЗнч(Навигация_СсылкаНаИсточник) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ИнициализироватьМенюТоварныеКатегорииНоменклатуры(Навигация_СсылкаНаИсточник);
	КонецЕсли;
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаТЗ_Номенклатура());
	
	Запрос.УстановитьПараметр("СсылкаНаИсточник", 	СсылкаНаИсточник);
	Запрос.УстановитьПараметр("СтрокаПоиска", 		"%"+Поиск_СтрокаПоиска+"%");
	Запрос.УстановитьПараметр("Склад", 	 			СоглашениеСклад);
	Запрос.УстановитьПараметр("КалендарьСклад",		СоглашениеСклад.Календарь);

	Запрос.УстановитьПараметр("ПустаяДата",			'00010101000000');
	Запрос.УстановитьПараметр("НачалоДня", 			НачалоДня(ТекущаяДата()));
	
	
	
	СписокВидовЦен = Новый СписокЗначений;
	СписокВидовЦен.Добавить(СоглашениеВидЦены);
	СписокВидовЦен.Добавить(ДополнительныйВидЦены1);
	СписокВидовЦен.Добавить(ДополнительныйВидЦены2);
	СписокВидовЦен.Добавить(ДополнительныйВидЦены3);
	СписокВидовЦен.Добавить(ДополнительныйВидЦены4);
	Запрос.УстановитьПараметр("СписокВидовЦен", 	СписокВидовЦен);
	Запрос.УстановитьПараметр("ВидЦены", 	 		СоглашениеВидЦены);
	Запрос.УстановитьПараметр("ВидДопЦены1", 		ДополнительныйВидЦены1);
	Запрос.УстановитьПараметр("ВидДопЦены2", 		ДополнительныйВидЦены2);
	Запрос.УстановитьПараметр("ВидДопЦены3", 		ДополнительныйВидЦены3);
	Запрос.УстановитьПараметр("ВидДопЦены4", 		ДополнительныйВидЦены4);
	
	
	
	СписокВидовЦенПоставщика = Новый СписокЗначений;
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика1);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика2);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика3);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика4);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика5);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика6);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика7);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика8);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика9);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика10);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика11);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика12);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика13);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика14);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика15);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика16);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика17);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика18);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика19);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика20);
	СписокВидовЦенПоставщика.Добавить(ДополнительныйВидЦеныПоставщика21);
	Запрос.УстановитьПараметр("СписокВидовЦенПоставщика", СписокВидовЦенПоставщика);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика1", ДополнительныйВидЦеныПоставщика1);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика2", ДополнительныйВидЦеныПоставщика2);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика3", ДополнительныйВидЦеныПоставщика3);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика4", ДополнительныйВидЦеныПоставщика4);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика5", ДополнительныйВидЦеныПоставщика5);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика6", ДополнительныйВидЦеныПоставщика6);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика7", ДополнительныйВидЦеныПоставщика7);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика8", ДополнительныйВидЦеныПоставщика8);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика9", ДополнительныйВидЦеныПоставщика9);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика10",ДополнительныйВидЦеныПоставщика10);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика11",ДополнительныйВидЦеныПоставщика11);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика12",ДополнительныйВидЦеныПоставщика12);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика13",ДополнительныйВидЦеныПоставщика13);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика14",ДополнительныйВидЦеныПоставщика14);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика15",ДополнительныйВидЦеныПоставщика15);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика16",ДополнительныйВидЦеныПоставщика16);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика17",ДополнительныйВидЦеныПоставщика17);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика18",ДополнительныйВидЦеныПоставщика18);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика19",ДополнительныйВидЦеныПоставщика19);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика20",ДополнительныйВидЦеныПоставщика20);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика21",ДополнительныйВидЦеныПоставщика21);

	
	Запрос.УстановитьПараметр("ДопСвойство1", 		ДополнительноеСвойство1);
	Запрос.УстановитьПараметр("ДопСвойство2", 		ДополнительноеСвойство2);
	Запрос.УстановитьПараметр("СвойствоЗаработок",  ДополнительноеСвойствоЗаработок);
	
	Запрос.УстановитьПараметр("Сортировка_Отбор",	Сортировка_Отбор_Значение);
	
	Запрос.УстановитьПараметр("НачПериодаАнализа", 	Период_Анализа.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериодаАнализа", 	Период_Анализа.ДатаОкончания);
	Запрос.УстановитьПараметр("НачПериодаТенденции",Период_Анализа.ДатаНачала - (Период_Анализа.ДатаОкончания - Период_Анализа.ДатаНачала) - 1);
	Запрос.УстановитьПараметр("КонПериодаТенденции",Период_Анализа.ДатаНачала - 1);
	Запрос.УстановитьПараметр("Планирование",		Период_ПериодПланирования);
	
	Запрос.УстановитьПараметр("ТоварнаяКатегория", Навигация_СсылкаНаТоварнуюКатегорию);
	
	Попытка
		Результат = Запрос.Выполнить();
		Выгрузка  = Результат.Выгрузить();
		ТЗ_Номенклатура.Загрузить(Выгрузка);
	Исключение
		ВывестиСообщениеПользователю(ОписаниеОшибки());
	КонецПопытки;							
	
	
	
	//Востанавливаем курсор на нужный документ, если он не пропал из выгрузки	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = ТЗ_Номенклатура.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда 
			Элементы.ТЗ_Номенклатура.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияОтборИСортировка(ПолеСортировки, ИмяЭлемента)
	
	Если 	  ИмяЭлемента = "Цена" 				Тогда ПолеСортировки = "ISNULL(КешЦен.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦеноваяГруппа"     Тогда ПолеСортировки = "КешЦГ.Значение";
	ИначеЕсли ИмяЭлемента = "ОжидаемыйТовар"    Тогда ПолеСортировки = "ISNULL(КПоступлениюОстаток,0)";
	ИначеЕсли ИмяЭлемента = "РезервСклад" 		Тогда ПолеСортировки = "ISNULL(СвободныеОстатки.ВРезервеОстаток,0)";
	ИначеЕсли ИмяЭлемента = "СрокПоставки"		Тогда ПолеСортировки = "ISNULL(СрокПоставки, &ПустаяДата)";
	ИначеЕсли ИмяЭлемента = "НаличиеСклад"      Тогда ПолеСортировки = "ISNULL(СвободныеОстатки.ВНаличииОстаток,0) - ISNULL(СвободныеОстатки.ВРезервеОстаток,0)";
	ИначеЕсли ИмяЭлемента = "ОбщееНаличие" 		Тогда ПолеСортировки = "ISNULL(СвОстаткиДругие.ВНаличииОстаток,0)";
	ИначеЕсли ИмяЭлемента = "ОбщееСвободно" 	Тогда ПолеСортировки = "ISNULL(СвОстаткиДругие.ВНаличииОстаток,0) - ISNULL(СвОстаткиДругие.ВРезервеОстаток,0)";
	ИначеЕсли ИмяЭлемента = "ДопЦена1" 			Тогда ПолеСортировки = "ISNULL(КешДопЦен1.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ДопЦена2" 			Тогда ПолеСортировки = "ISNULL(КешДопЦен2.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ДопЦена3" 			Тогда ПолеСортировки = "ISNULL(КешДопЦен3.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ДопЦена4" 			Тогда ПолеСортировки = "ISNULL(КешДопЦен4.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика1" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика1.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика2" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика2.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика3" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика3.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика4" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика4.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика5" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика5.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика6" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика6.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика7" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика7.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика8" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика8.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика9" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика9.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика10" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика10.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика11" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика11.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика12" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика12.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика13" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика13.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика14" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика14.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика15" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика15.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика16" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика16.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика17" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика17.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика18" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика18.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика19" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика19.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика20" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика20.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ЦенаПоставщика21" 	Тогда ПолеСортировки = "ISNULL(КешДопЦенПоставщика21.Цена,0)";
	ИначеЕсли ИмяЭлемента = "ДопСвойство1" 		Тогда ПолеСортировки = "КешДопСвойство1.Значение";
	ИначеЕсли ИмяЭлемента = "ДопСвойство2" 		Тогда ПолеСортировки = "КешДопСвойство2.Значение";
	ИначеЕсли ИмяЭлемента = "Номенклатура" 		Тогда ПолеСортировки = "СпрНом.Наименование";
	ИначеЕсли ИмяЭлемента = "А_ПродажиЗаПериод" Тогда ПолеСортировки = "РезультатАнализа.А_ПродажиЗаПериод";
	ИначеЕсли ИмяЭлемента = "А_Вал"      		Тогда ПолеСортировки = "РезультатАнализа.А_Вал";
	ИначеЕсли ИмяЭлемента = "А_СреднийЗапас"    Тогда ПолеСортировки = "РезультатАнализа.А_СреднийЗапас";
	ИначеЕсли ИмяЭлемента = "А_ХранениеВДнях"   Тогда ПолеСортировки = "РезультатАнализа.А_ХранениеВДнях";
	ИначеЕсли ИмяЭлемента = "А_Оборачиваемость" Тогда ПолеСортировки = "РезультатАнализа.А_Оборачиваемость";
	ИначеЕсли ИмяЭлемента = "А_Заказ"      		Тогда ПолеСортировки = "А_СреднийЗапас / А_ХранениеВДнях * &Планирование - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(КПоступлениюОстаток, 0)";
	ИначеЕсли ИмяЭлемента = "ПланПродаж"      	Тогда ПолеСортировки = "ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 9999 ИНАЧЕ А_ХранениеВДнях / А_СреднийЗапас * (ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) + ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)) КОНЕЦ";
	ИначеЕсли ИмяЭлемента = "БонусПродавца"     ТОГДА ПолеСортировки = "БонусыМенеджерам.Значение";
		
	//ИначеЕсли ИмяЭлемента = "Продано"               Тогда ПолеСортировки = "КешДопЦенПоставщика3.";
	//ИначеЕсли ИмяЭлемента = "ПроданоВПериод"		Тогда ПолеСортировки = "КешДопЦенПоставщика3.";
	//ИначеЕсли ИмяЭлемента = "Вал"					Тогда ПолеСортировки = "КешОборотыПоСкладу.";
	Иначе       									  ПолеСортировки = "СпрНом." + ИмяЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СловаОбработаныОтборИСортировка(Итератор, КоличествоСлов, МетаВремЗнч, ВремЗнч, АдресРеквизита)
	Если Итератор + 1 <= КоличествоСлов Тогда 
    	МетаВремЗнч = ВремЗнч.Тип.ПривестиЗначение(Неопределено).Метаданные();
		АдресРеквизита = АдресРеквизита + ".";
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСловОтборИСортировка(АдресноеИмя)
	
	МассивСлов = Новый Массив;
	ЧислоВхождений = СтрЧислоВхождений(АдресноеИмя, "_");
	Если ЧислоВхождений = 0 Тогда
		МассивСлов.Добавить(АдресноеИмя);
	Иначе
		Для Итератор = 0 По ЧислоВхождений - 1 Цикл
			Разделитель = Найти(АдресноеИмя, "_");
			МассивСлов.Добавить(Лев(АдресноеИмя, Разделитель - 1));
			АдресноеИмя = Прав(АдресноеИмя, СтрДлина(АдресноеИмя) - Разделитель);			
		КонецЦикла;
	    МассивСлов.Добавить(АдресноеИмя);
	КонецЕсли;
	
	Возврат МассивСлов;
	
КонецФункции
	
	

&НаСервере
Функция ПолучитьТекстЗапросаТЗ_Номенклатура()
	Если 		ВариантыИсточникаЗапроса = "По всему справочнику" Тогда
		Возврат ПолучитьТекстЗапросаПоСправочнику();
	ИначеЕсли 	ВариантыИсточникаЗапроса = "По актуальности" Тогда
		Возврат ПолучитьТекстЗапросаПоАктуальности();	
	ИначеЕсли   ВариантыИсточникаЗапроса = "По остаткам" Тогда
		Возврат ПолучитьТекстЗапросаПоОстаткам();
	ИначеЕсли 	ВариантыИсточникаЗапроса = "По остаткам склада" Тогда
		Возврат ПолучитьТекстЗапросаПоОстаткамНаСкладе();
	КонецЕсли;		
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаПоСправочнику()
	Стр = ПолучитьТекстЗапросаДополнительныхКолонок();
 
	ЭтоНеПоиск = ПустаяСтрока(Поиск_СтрокаПоиска);
	Если ИсточникВариантОтбора = "НавигацияИерархияНоменклатуры" 		И (ЭтоНеПоиск ИЛИ ТолькоВПапке) Тогда
		ТекстCache = "ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + " Номенклатура ПОМЕСТИТЬ Cache ИЗ РегистрСведений.Модуль_НоменклатураПоГруппам ГДЕ Группа = &СсылкаНаИсточник
		| " +?(ТолькоВПапке, " И (
							|	 Номенклатура.Код 					ПОДОБНО &СтрокаПоиска 
							|ИЛИ Номенклатура.Артикул 				ПОДОБНО &СтрокаПоиска 
							|ИЛИ Номенклатура.Наименование 			ПОДОБНО &СтрокаПоиска
							|ИЛИ Номенклатура.НаименованиеПолное 	ПОДОБНО &СтрокаПоиска
							|	 )", "") + "
		|ИНДЕКСИРОВАТЬ ПО Номенклатура
		|; ";
	ИначеЕсли ИсточникВариантОтбора = "НавигацияВидыНоменклатуры" 		И (ЭтоНеПоиск ИЛИ ТолькоВПапке) Тогда
		ТекстCache = "ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + " Ссылка КАК Номенклатура ПОМЕСТИТЬ Cache ИЗ Справочник.Номенклатура ГДЕ ВидНоменклатуры = &СсылкаНаИсточник
		| " +?(Навигация_СсылкаНаТоварнуюКатегорию.Пустая(), "", " И ТоварнаяКатегория = &ТоварнаяКатегория") + "
		| " +?(ТолькоВПапке, " И (
							|	 Код 				ПОДОБНО &СтрокаПоиска 
							|ИЛИ Артикул 			ПОДОБНО &СтрокаПоиска 
							|ИЛИ Наименование 		ПОДОБНО &СтрокаПоиска
							|ИЛИ НаименованиеПолное ПОДОБНО &СтрокаПоиска
							|	 )", "") + "
		|ИНДЕКСИРОВАТЬ ПО Номенклатура
		|; ";
	ИначеЕсли ИсточникВариантОтбора = "НавигацияСегментыНоменклатуры" 	И (ЭтоНеПоиск ИЛИ ТолькоВПапке) Тогда
		ТекстCache = "ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + " 
				|	НомСегмент.Номенклатура
				|ПОМЕСТИТЬ Cache
				|ИЗ 
				|	РегистрСведений.НоменклатураСегмента КАК НомСегмент
				|
				|ГДЕ НомСегмент.Сегмент = &СсылкаНаИсточник
				| " +?(ТолькоВПапке, " И (
									|	 Номенклатура.Код 					ПОДОБНО &СтрокаПоиска 
									|ИЛИ Номенклатура.Артикул 				ПОДОБНО &СтрокаПоиска 
									|ИЛИ Номенклатура.Наименование 			ПОДОБНО &СтрокаПоиска
									|ИЛИ Номенклатура.НаименованиеПолное 	ПОДОБНО &СтрокаПоиска
									|	 )", "") + "
				|ИНДЕКСИРОВАТЬ ПО Номенклатура
				|; ";
	Иначе 
		ТекстCache = "ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + "
				|	Ссылка КАК Номенклатура 
				|ПОМЕСТИТЬ Cache 
				|ИЗ Справочник.Номенклатура 
				|ГДЕ 
				|  ( Код 		  		ПОДОБНО &СтрокаПоиска 
				|ИЛИ Артикул 	  		ПОДОБНО &СтрокаПоиска 
				|ИЛИ Наименование 		ПОДОБНО &СтрокаПоиска
				|ИЛИ НаименованиеПолное ПОДОБНО &СтрокаПоиска
				|  )
				|И НЕ ЭтоГруппа
				|ИНДЕКСИРОВАТЬ ПО Номенклатура
				|; ";
	КонецЕсли;
			 
	Возврат
		ТекстCache + ПолучитьТекстЗапрос_Cache_ALPS(ALPS_ПродактМенеджер) + "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ВидЦены,
		|	Цена
		|
		|ПОМЕСТИТЬ КешЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И ВидЦены В (&СписокВидовЦен))
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Период > &НачалоДня 
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Сегодня,
		|	Номенклатура,
		|	Соглашение,
		|   Цена
		|
		|ПОМЕСТИТЬ КешЦенПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Соглашение В (&СписокВидовЦенПоставщика))	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки,
		|	МИНИМУМ(КалендарьДоставок.ДатаГрафика) КАК СрокПоставки
		|ПОМЕСТИТЬ Actuality
		|ИЗ
		|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)) КАК Actuality
		|						
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК КонтрольОстатков
		|ПО	КонтрольОстатков.Склад 	   	  = &Склад
		|И	КонтрольОстатков.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарьДоставок 
		|ПО	&КалендарьСклад = КалендарьДоставок.Календарь
		|И	ДобавитьКДате(Actuality.ДатаПоставки, День, КонтрольОстатков.СрокПоставки) <= КалендарьДоставок.ДатаГрафика 
		|И  КалендарьДоставок.ДеньВключенВГрафик 
		|
		|СГРУППИРОВАТЬ ПО
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки
		|;"
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		+ ПолучитьТекстЗапросаБонусыМенеджера() + " "
		+ ПолучитьТекстЗапросаАналитики(КолонкаАналитика) + "
		|ВЫБРАТЬ
		|	СпрНом.Номенклатура, 	
		|	КешЦГ.Значение КАК ЦеноваяГруппа,
		|
		|	Актуальность.Актуально,
		|	Актуальность.ГарантияДоставки,
		|	Актуальность.СрокПоставки,
		|
		|	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК НаличиеСклад,
		|	ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ПотребностьОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеСоСкладаОстаток, 0) КАК РезервСклад,
		|	Ожидаемые.КПоступлениюОстаток КАК ОжидаемыйТовар,
		|	СвОстаткиДругие.ВНаличииОстаток+ЕСТЬNULL(ОбеспениеОстаткиДругие.НаличиеСоСкладаОстаток,0) КАК ОбщееНаличие,
		|	СвОстаткиДругие.ВНаличииОстаток - СвОстаткиДругие.ВРезервеОстаток КАК ОбщееСвободно,
      	|
		|	КешЦен.Цена 
		|
		|	, ДопБонусыМенеджерам.Используется			КАК БонусируемыйТовар 
		|	, 	ВЫБОР ДопБонусыМенеджерам.Используется
		|			КОГДА Истина
		|			ТОГДА ДопБонусыМенеджерам.Бонус
		|			ИНАЧЕ БонусыМенеджерам.Значение 
		|	 	КОНЕЦ КАК БонусПродавца " 
		
		+ Стр.ШапкаЗапроса 
		+ ?(КолонкаАналитика, ", РезультатАнализа.*
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 9999 ИНАЧЕ А_ХранениеВДнях / А_СреднийЗапас * (ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) + ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)) КОНЕЦ КАК ПланПродаж 
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 0    ИНАЧЕ А_СреднийЗапас / А_ХранениеВДнях * &Планирование - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(КПоступлениюОстаток, 0) КОНЕЦ КАК А_Заказ ", "") 
		
		+ "
		|
		|ИЗ 
		|	Cache КАК СпрНом
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Actuality КАК Актуальность
		|ПО Актуальность.Номенклатура = СпрНом.Номенклатура
        |
		//Товары на складе
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад = &Склад) КАК СвободныеОстатки 					
		|ПО СвободныеОстатки.Номенклатура = СпрНом.Номенклатура 
		|
		//Товары на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК СвОстаткиДругие					 
		|ПО СвОстаткиДругие.Номенклатура = СпрНом.Номенклатура 
		
		//По особленому учете
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|		,
		|		Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)И Склад = &Склад) КАК ОбеспечениеЗаказовОстатки
		|ПО СпрНом.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
        // По особленому учете на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) 
		|		И Склад В (ВЫБРАТЬ  Склад	ИЗ  РегистрСведений.Модуль_ДоступныеСклады 	ГДЕ Основной)) КАК ОбеспениеОстаткиДругие
        |       ПО (ОбеспениеОстаткиДругие.Номенклатура=СпрНом.Номенклатура) 
		//Ожидаемые товары
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК Ожидаемые						
		|ПО Ожидаемые.Номенклатура = СпрНом.Номенклатура 
		
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, Бонус, Используется  ИЗ РегистрСведений.БонусыМенеджерам ГДЕ &НачалоДня = Дата) КАК ДопБонусыМенеджерам
		|ПО ДопБонусыМенеджерам.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ БонусыМенеджерам КАК БонусыМенеджерам
		|ПО БонусыМенеджерам.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен
		|ПО КешЦен.Номенклатура = СпрНом.Номенклатура
		|И	КешЦен.ВидЦены      = &ВидЦены  
		|
		//Кеш ценовых групп
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_КешЦеновыхГрупп КАК КешЦГ
		|ПО СпрНом.Номенклатура.ЦеноваяГруппа = КешЦГ.ЦеноваяГруппа " 
		
		+ Стр.СоединениеЗапроса 
		+ ?(КолонкаАналитика, "	ЛЕВОЕ СОЕДИНЕНИЕ РезультатАнализа КАК РезультатАнализа ПО СпрНом.Номенклатура = РезультатАнализа.Номенклатура ", "")
		+ ?(ПустаяСтрока(Сортировка_Отбор_Поле) ИЛИ Сортировка_Отбор_Значение = Неопределено, "", " ГДЕ " + СтрЗаменить(Сортировка_Отбор_Поле, "СпрНом", "СпрНом.Номенклатура") + " = &Сортировка_Отбор ")
		+ ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), "", " УПОРЯДОЧИТЬ ПО " + СтрЗаменить(Сортировка_Поле, "СпрНом", "СпрНом.Номенклатура") + Сортировка_Направление)
		
		+ "
		|;";	
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаПоАктуальности()
	Стр = ПолучитьТекстЗапросаДополнительныхКолонок();
	Возврат "
		|ВЫБРАТЬ
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки,
		|	МИНИМУМ(КалендарьДоставок.ДатаГрафика) КАК СрокПоставки
		|ПОМЕСТИТЬ Cache
		|ИЗ
		| (
		|  	ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + "
		|		Номенклатура,
		|		Актуально,
		|		ГарантияДоставки,
		|		ДатаПоставки
		|	ИЗ
		|		РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, " + ПолучитьПараметрНоменклатураВТ() + ") КАК Actuality
		|	ГДЕ
		|		Актуально
		| ) КАК Actuality
		|						
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК КонтрольОстатков
		|ПО	КонтрольОстатков.Склад 	      = &Склад
		|И	КонтрольОстатков.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарьДоставок 
		|ПО	&КалендарьСклад = КалендарьДоставок.Календарь
		|И	ДобавитьКДате(Actuality.ДатаПоставки, День, КонтрольОстатков.СрокПоставки) <= КалендарьДоставок.ДатаГрафика 
		|И  КалендарьДоставок.ДеньВключенВГрафик 
		|
		|СГРУППИРОВАТЬ ПО
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки
		|ИНДЕКСИРОВАТЬ ПО 
		|	Actuality.Номенклатура
		|; " + ПолучитьТекстЗапрос_Cache_ALPS(ALPS_ПродактМенеджер) + "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ВидЦены,
		|	Цена
		|
		|ПОМЕСТИТЬ КешЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И ВидЦены В (&СписокВидовЦен))
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Период > &НачалоДня 
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Сегодня,
		|	Номенклатура,
		|	Соглашение,
		|   Цена
		|
		|ПОМЕСТИТЬ КешЦенПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Соглашение В (&СписокВидовЦенПоставщика))	
		|
		|;"
		+ ПолучитьТекстЗапросаБонусыМенеджера() + " "
		+ ПолучитьТекстЗапросаАналитики(КолонкаАналитика) + "
		|ВЫБРАТЬ
		|	СпрНом.Номенклатура						КАК Номенклатура, 	
		|	КешЦГ.Значение 							КАК ЦеноваяГруппа,
		|
		|	СпрНом.Актуально,
		|	СпрНом.ГарантияДоставки,
		|	СпрНом.СрокПоставки,
		|
		|	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток,0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток,0) КАК НаличиеСклад,
		|	ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ПотребностьОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеСоСкладаОстаток, 0) КАК РезервСклад,
		|	ЕСТЬNULL(Ожидаемые.КПоступлениюОстаток, 0) КАК ОжидаемыйТовар,
		|	СвОстаткиДругие.ВНаличииОстаток + ЕСТЬNULL(ОбеспениеОстаткиДругие.НаличиеСоСкладаОстаток, 0) КАК ОбщееНаличие,
		|	СвОстаткиДругие.ВНаличииОстаток - СвОстаткиДругие.ВРезервеОстаток КАК ОбщееСвободно,
        |
		|	КешЦен.Цена 
		|
		|	, ДопБонусыМенеджерам.Используется			КАК БонусируемыйТовар 
		|	, 	ВЫБОР ДопБонусыМенеджерам.Используется
		|			КОГДА Истина
		|			ТОГДА ДопБонусыМенеджерам.Бонус
		|			ИНАЧЕ БонусыМенеджерам.Значение 
		|	 	КОНЕЦ КАК БонусПродавца " 
		+ Стр.ШапкаЗапроса  
		+ ?(КолонкаАналитика, ", РезультатАнализа.*
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 9999 ИНАЧЕ А_ХранениеВДнях / А_СреднийЗапас * (ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) + ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)) КОНЕЦ КАК ПланПродаж 
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 0    ИНАЧЕ А_СреднийЗапас / А_ХранениеВДнях * &Планирование - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(КПоступлениюОстаток, 0) КОНЕЦ КАК А_Заказ ", "") 
		
		+ "
		|
		|ИЗ 
		|	Cache КАК СпрНом
		|
		//Товары на складе
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад = &Склад) КАК СвободныеОстатки 					
		|ПО СвободныеОстатки.Номенклатура = СпрНом.Номенклатура 
		|
		//Товары на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК СвОстаткиДругие					 
		|ПО СвОстаткиДругие.Номенклатура = СпрНом.Номенклатура 
		|
		
		// Товары по обособленому учете
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад = &Склад) КАК ОбеспечениеЗаказовОстатки
		|ПО СпрНом.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		
		//Товары по обособленому учете на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК ОбеспениеОстаткиДругие
		|ПО (ОбеспениеОстаткиДругие.Номенклатура = СпрНом.Номенклатура)

		//Ожидаемые товары
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад = &Склад) КАК Ожидаемые						
		|ПО Ожидаемые.Номенклатура = СпрНом.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, Бонус, Используется  ИЗ РегистрСведений.БонусыМенеджерам ГДЕ &НачалоДня = Дата) КАК ДопБонусыМенеджерам
		|ПО ДопБонусыМенеджерам.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ БонусыМенеджерам КАК БонусыМенеджерам
		|ПО БонусыМенеджерам.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен
		|ПО КешЦен.Номенклатура = СпрНом.Номенклатура 
		|И	КешЦен.ВидЦены		= &ВидЦены 	
		|
		//Кеш ценовых групп
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_КешЦеновыхГрупп КАК КешЦГ
		|ПО СпрНом.Номенклатура.ЦеноваяГруппа = КешЦГ.ЦеноваяГруппа " 
		
		+ Стр.СоединениеЗапроса  
		+ ?(КолонкаАналитика, "	ЛЕВОЕ СОЕДИНЕНИЕ РезультатАнализа КАК РезультатАнализа ПО СпрНом.Номенклатура = РезультатАнализа.Номенклатура ", "")
		+ ?(ПустаяСтрока(Сортировка_Отбор_Поле) ИЛИ Сортировка_Отбор_Значение = Неопределено, "", " ГДЕ " + СтрЗаменить(Сортировка_Отбор_Поле, "СпрНом", "СпрНом.Номенклатура") + " = &Сортировка_Отбор ")
	    + ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), "", " УПОРЯДОЧИТЬ ПО " + СтрЗаменить(Сортировка_Поле, "СпрНом", "СпрНом.Номенклатура") + Сортировка_Направление)
		
		+ "
		|;";	
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаПоОстаткамНаСкладе()
	Стр = ПолучитьТекстЗапросаДополнительныхКолонок();
	Возврат 
		"ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + "
		|	ЕСТЬNULL(ОстаткиНаСкладе.Номенклатура, 	ОжидаемыеНаСкладе.Номенклатура) КАК Номенклатура,
		|	ВНаличииОстаток,
		|	ВРезервеОстаток,
		|	КПоступлениюОстаток
		|
		|ПОМЕСТИТЬ Cache 
		|ИЗ
		|		РегистрНакопления.СвободныеОстатки.Остатки(, "+ПолучитьПараметрНоменклатураВТ()+" И Склад = &Склад) КАК ОстаткиНаСкладе
		|    
		|	 ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, "+ПолучитьПараметрНоменклатураВТ()+" И Склад = &Склад) КАК ОжидаемыеНаСкладе						
		|	 ПО ОстаткиНаСкладе.Номенклатура = ОжидаемыеНаСкладе.Номенклатура
		|
		|	 ОБЪЕДИНИТЬ 
		|	
		|ВЫБРАТЬ
		|	Номенклатура,
		|	0,
		|	0,
		|	0
		|ИЗ
		|    РегистрСведений.Модуль_НоменклатураПоГруппам 
		|
		|ГДЕ
		|	Группа 			= &СсылкаНаИсточник	
		|И	ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|ИНДЕКСИРОВАТЬ ПО Номенклатура
		|; " + ПолучитьТекстЗапрос_Cache_ALPS(ALPS_ПродактМенеджер) + "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ВидЦены,
		|	Цена
		|
		|ПОМЕСТИТЬ КешЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И ВидЦены В (&СписокВидовЦен))
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Период > &НачалоДня 
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Сегодня,
		|	Номенклатура,
		|	Соглашение,
		|   Цена
		|
		|ПОМЕСТИТЬ КешЦенПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Соглашение В (&СписокВидовЦенПоставщика))	
		|
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки,
		|	МИНИМУМ(КалендарьДоставок.ДатаГрафика) КАК СрокПоставки
		|ПОМЕСТИТЬ Actuality
		|ИЗ
		|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)) КАК Actuality
		|						
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК КонтрольОстатков
		|ПО	КонтрольОстатков.Склад 	   = &Склад
		|И	КонтрольОстатков.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарьДоставок 
		|ПО	&КалендарьСклад = КалендарьДоставок.Календарь
		|И	ДобавитьКДате(Actuality.ДатаПоставки, День, КонтрольОстатков.СрокПоставки) <= КалендарьДоставок.ДатаГрафика 
		|И  КалендарьДоставок.ДеньВключенВГрафик 
		|
		|СГРУППИРОВАТЬ ПО
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки
		|;"
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		+ ПолучитьТекстЗапросаБонусыМенеджера() + " "
		+ ПолучитьТекстЗапросаАналитики(КолонкаАналитика) + "
		|ВЫБРАТЬ
		|	СвободныеОстатки.Номенклатура			КАК Номенклатура, 	
		|	КешЦГ.Значение 							КАК ЦеноваяГруппа,
		|
		|	Актуальность.Актуально,
		|	Актуальность.ГарантияДоставки,
		|	Актуальность.СрокПоставки,
		|
		|	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК НаличиеСклад,
		|	ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ПотребностьОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеСоСкладаОстаток, 0) КАК РезервСклад,
		|	ЕСТЬNULL(СвободныеОстатки.КПоступлениюОстаток, 0) КАК ОжидаемыйТовар,
		|	ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) + ЕСТЬNULL(ОбеспениеОстаткиДругие.НаличиеСоСкладаОстаток, 0) КАК ОбщееНаличие,
		|	ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВРезервеОстаток, 0) КАК ОбщееСвободно,
	    |	КешЦен.Цена
		|
		|	, ДопБонусыМенеджерам.Используется			КАК БонусируемыйТовар 
		|	, 	ВЫБОР ДопБонусыМенеджерам.Используется
		|			КОГДА Истина
		|			ТОГДА ДопБонусыМенеджерам.Бонус
		|			ИНАЧЕ БонусыМенеджерам.Значение 
		|	 	КОНЕЦ КАК БонусПродавца " 
		
		+ Стр.ШапкаЗапроса   
		+ ?(КолонкаАналитика, ", РезультатАнализа.*
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 9999 ИНАЧЕ А_ХранениеВДнях / А_СреднийЗапас * (ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) + ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)) КОНЕЦ КАК ПланПродаж 
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 0    ИНАЧЕ А_СреднийЗапас / А_ХранениеВДнях * &Планирование - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(КПоступлениюОстаток, 0) КОНЕЦ КАК А_Заказ ", "") 
		
		+ "
		|
		|ИЗ 
		|	Cache КАК СвободныеОстатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Actuality КАК Актуальность
		|ПО Актуальность.Номенклатура = СвободныеОстатки.Номенклатура 
        |
		//Товары на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК СвОстаткиДругие					 
		|ПО СвОстаткиДругие.Номенклатура = СвободныеОстатки.Номенклатура 
		
		//Товары по обеспеченому заказу
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|		,
		|		Номенклатура В
		|				(ВЫБРАТЬ
		|					Cache.Номенклатура
		|				ИЗ
		|					Cache)
		|			И Склад =&Склад) КАК ОбеспечениеЗаказовОстатки
		|ПО СвободныеОстатки.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		
		//  Товары по обеспеченому заказу на других складах
        |ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК ОбеспениеОстаткиДругие
		|ПО (ОбеспениеОстаткиДругие.Номенклатура = СвободныеОстатки.Номенклатура)
        
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, Бонус, Используется  ИЗ РегистрСведений.БонусыМенеджерам ГДЕ &НачалоДня = Дата) КАК ДопБонусыМенеджерам
		|ПО ДопБонусыМенеджерам.Номенклатура = СвободныеОстатки.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ БонусыМенеджерам КАК БонусыМенеджерам
		|ПО БонусыМенеджерам.Номенклатура = СвободныеОстатки.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен
		|ПО КешЦен.Номенклатура = СвободныеОстатки.Номенклатура     			  
		|И	КешЦен.ВидЦены		= &ВидЦены
		|
		//Кеш ценовых групп
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_КешЦеновыхГрупп КАК КешЦГ
		|ПО СвободныеОстатки.Номенклатура.ЦеноваяГруппа = КешЦГ.ЦеноваяГруппа " 
		
		+ СтрЗаменить(Стр.СоединениеЗапроса, "СпрНом.Номенклатура", "СвободныеОстатки.Номенклатура")  
		+ ?(КолонкаАналитика, "	ЛЕВОЕ СОЕДИНЕНИЕ РезультатАнализа КАК РезультатАнализа ПО СвободныеОстатки.Номенклатура = РезультатАнализа.Номенклатура ", "")
		+ ?(ПустаяСтрока(Сортировка_Отбор_Поле) ИЛИ Сортировка_Отбор_Значение = Неопределено, "", " ГДЕ " + СтрЗаменить(Сортировка_Отбор_Поле, "СпрНом", "СвободныеОстатки.Номенклатура") + " = &Сортировка_Отбор ")
	    + ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), "", " УПОРЯДОЧИТЬ ПО " + СтрЗаменить(Сортировка_Поле, "СпрНом", "СвободныеОстатки.Номенклатура") + Сортировка_Направление) 
		+ "
		|;";	
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаПоОстаткам()
	Стр = ПолучитьТекстЗапросаДополнительныхКолонок();
	Возврат 
		"
		|ВЫБРАТЬ ПЕРВЫЕ " + КоличествоНоменклатурыВТаблице + "
		|	ЕСТЬNULL(ОстаткиНаСкладе.Номенклатура, 	ОжидаемыеНаСкладе.Номенклатура) КАК Номенклатура,
		|	КПоступлениюОстаток
		|
		|ПОМЕСТИТЬ Cache
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,"+ПолучитьПараметрНоменклатураВТ()+" И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК ОстаткиНаСкладе
		|    
		|ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(,"+ПолучитьПараметрНоменклатураВТ()+") КАК ОжидаемыеНаСкладе						
		|ПО ОстаткиНаСкладе.Номенклатура = ОжидаемыеНаСкладе.Номенклатура
		|
		|ОБЪЕДИНИТЬ 
		|	
		|ВЫБРАТЬ
		|	Номенклатура,
		|	0
		|ИЗ
		|   РегистрСведений.Модуль_НоменклатураПоГруппам 
		|
		|ГДЕ
		|	Группа 			= &СсылкаНаИсточник	
		|И	ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|ИНДЕКСИРОВАТЬ ПО Номенклатура
		|; " + ПолучитьТекстЗапрос_Cache_ALPS(ALPS_ПродактМенеджер) + "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ВидЦены,
		|	Цена
		|
		|ПОМЕСТИТЬ КешЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И ВидЦены В (&СписокВидовЦен))
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Период > &НачалоДня 
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Сегодня,
		|	Номенклатура,
		|	Соглашение,
		|   Цена
		|
		|ПОМЕСТИТЬ КешЦенПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Соглашение В (&СписокВидовЦенПоставщика))	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки,
		|	МИНИМУМ(КалендарьДоставок.ДатаГрафика) КАК СрокПоставки
		|ПОМЕСТИТЬ Actuality
		|ИЗ
		|	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)) КАК Actuality
		|						
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК КонтрольОстатков
		|ПО	КонтрольОстатков.Склад 	   = &Склад
		|И	КонтрольОстатков.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарьДоставок 
		|ПО	&КалендарьСклад = КалендарьДоставок.Календарь
		|И	ДобавитьКДате(Actuality.ДатаПоставки, День, КонтрольОстатков.СрокПоставки) <= КалендарьДоставок.ДатаГрафика 
		|И  КалендарьДоставок.ДеньВключенВГрафик 
		|
		|СГРУППИРОВАТЬ ПО
		|	Actuality.Номенклатура,
		|	Actuality.Актуально,
		|   Actuality.ГарантияДоставки
		|;"
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		+ ПолучитьТекстЗапросаБонусыМенеджера() + " "
		+ ПолучитьТекстЗапросаАналитики(КолонкаАналитика) + "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНом.Номенклатура						КАК Номенклатура, 	
		|	КешЦГ.Значение 							КАК ЦеноваяГруппа,
		|
		|	Актуальность.Актуально,
		|	Актуальность.ГарантияДоставки,
		|	Актуальность.СрокПоставки,
		|
		|	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК НаличиеСклад,
		|	ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.ПотребностьОстаток, 0) + ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеСоСкладаОстаток, 0) КАК РезервСклад,
		|	СпрНом.КПоступлениюОстаток 				КАК ОжидаемыйТовар,
		|	ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) + ЕСТЬNULL(ОбеспениеОстаткиДругие.НаличиеСоСкладаОстаток, 0) КАК ОбщееНаличие,
		|	ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВРезервеОстаток, 0) КАК ОбщееСвободно,
	    |	КешЦен.Цена
		|
		|	, ДопБонусыМенеджерам.Используется			КАК БонусируемыйТовар 
		|	, 	ВЫБОР ДопБонусыМенеджерам.Используется
		|			КОГДА Истина
		|			ТОГДА ДопБонусыМенеджерам.Бонус
		|			ИНАЧЕ БонусыМенеджерам.Значение 
		|	 	КОНЕЦ КАК БонусПродавца " 
		
		+ Стр.ШапкаЗапроса 
		+ ?(КолонкаАналитика, ", РезультатАнализа.*
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 9999 ИНАЧЕ А_ХранениеВДнях / А_СреднийЗапас * (ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) + ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0)) КОНЕЦ КАК ПланПродаж 
							  |, ВЫБОР КОГДА ЕСТЬNULL(А_ХранениеВДнях, 0) = 0 ТОГДА 0    ИНАЧЕ А_СреднийЗапас / А_ХранениеВДнях * &Планирование - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвОстаткиДругие.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(КПоступлениюОстаток, 0) КОНЕЦ КАК А_Заказ ", "") 
		
		+ "
		|
		|ИЗ 
		|	Cache КАК СпрНом
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Actuality  КАК Актуальность
		|ПО Актуальность.Номенклатура = СпрНом.Номенклатура
		|
		//Товары на складе
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад = &Склад) КАК СвободныеОстатки 					
		|ПО СвободныеОстатки.Номенклатура = СпрНом.Номенклатура 
		|
		
		//Товары по обособленому учете
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|		,
		|		Номенклатура В
		|				(ВЫБРАТЬ
		|					Cache.Номенклатура
		|				ИЗ
		|					Cache)
		|			И Склад = &Склад) КАК ОбеспечениеЗаказовОстатки
		|ПО СпрНом.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		
		//Товары по обособленому учете на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК ОбеспениеОстаткиДругие
		|ПО (ОбеспениеОстаткиДругие.Номенклатура = СвободныеОстатки.Номенклатура)


		//Товары на других складах
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.Модуль_ДоступныеСклады ГДЕ Основной)) КАК СвОстаткиДругие					 
		|ПО СвОстаткиДругие.Номенклатура = СпрНом.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, Бонус, Используется  ИЗ РегистрСведений.БонусыМенеджерам ГДЕ &НачалоДня = Дата) КАК ДопБонусыМенеджерам
		|ПО ДопБонусыМенеджерам.Номенклатура = СпрНом.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ БонусыМенеджерам КАК БонусыМенеджерам
		|ПО БонусыМенеджерам.Номенклатура = СпрНом.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешЦен
		|ПО КешЦен.Номенклатура = СпрНом.Номенклатура  
		|И	КешЦен.ВидЦены		= &ВидЦены 
		
				|
		//Кеш ценовых групп
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_КешЦеновыхГрупп КАК КешЦГ
		|ПО СпрНом.Номенклатура.ЦеноваяГруппа = КешЦГ.ЦеноваяГруппа " 
		
		+ Стр.СоединениеЗапроса  
		+ ?(КолонкаАналитика, "	ЛЕВОЕ СОЕДИНЕНИЕ РезультатАнализа КАК РезультатАнализа ПО СпрНом.Номенклатура = РезультатАнализа.Номенклатура ", "")
		+ ?(ПустаяСтрока(Сортировка_Отбор_Поле) ИЛИ Сортировка_Отбор_Значение = Неопределено, "", " ГДЕ " + СтрЗаменить(Сортировка_Отбор_Поле, "СпрНом", "СпрНом.Номенклатура") + " = &Сортировка_Отбор ")
        + ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), "", " УПОРЯДОЧИТЬ ПО " + СтрЗаменить(Сортировка_Поле, "СпрНом", "СпрНом.Номенклатура") + Сортировка_Направление)
		
		+ "
		|;";	
	
	КонецФункции
	
&НаСервере
Функция ПолучитьПараметрНоменклатураВТ()
	
	ЭтоНеПоиск = ПустаяСтрока(Поиск_СтрокаПоиска);
	Если ИсточникВариантОтбора = "НавигацияИерархияНоменклатуры" 		И (ЭтоНеПоиск ИЛИ ТолькоВПапке) Тогда
		Возврат " Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.Модуль_НоменклатураПоГруппам ГДЕ Группа = &СсылкаНаИсточник
			| " +?(ТолькоВПапке, " И (
								|	 Номенклатура.Код 					ПОДОБНО &СтрокаПоиска 
								|ИЛИ Номенклатура.Артикул 				ПОДОБНО &СтрокаПоиска 
								|ИЛИ Номенклатура.Наименование 			ПОДОБНО &СтрокаПоиска
								|ИЛИ Номенклатура.НаименованиеПолное 	ПОДОБНО &СтрокаПоиска
								|	 )", "") + ") ";
	ИначеЕсли ИсточникВариантОтбора = "НавигацияВидыНоменклатуры" 		И (ЭтоНеПоиск ИЛИ ТолькоВПапке) Тогда
		Возврат " Номенклатура В (ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура ГДЕ ВидНоменклатуры = &СсылкаНаИсточник
			| " +?(Навигация_СсылкаНаТоварнуюКатегорию.Пустая(), "", " И ТоварнаяКатегория = &ТоварнаяКатегория") + "
			| " +?(ТолькоВПапке, " И (
								|	 Код 				ПОДОБНО &СтрокаПоиска 
								|ИЛИ Артикул 			ПОДОБНО &СтрокаПоиска 
								|ИЛИ Наименование 		ПОДОБНО &СтрокаПоиска
								|ИЛИ НаименованиеПолное ПОДОБНО &СтрокаПоиска
								|	 )", "") + ") ";
	ИначеЕсли ИсточникВариантОтбора = "НавигацияСегментыНоменклатуры" 	И (ЭтоНеПоиск ИЛИ ТолькоВПапке) Тогда
		Возврат " Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.НоменклатураСегмента ГДЕ Сегмент = &СсылкаНаИсточник
			| " +?(ТолькоВПапке, " И (
								|	 Номенклатура.Код 					ПОДОБНО &СтрокаПоиска 
								|ИЛИ Номенклатура.Артикул 				ПОДОБНО &СтрокаПоиска 
								|ИЛИ Номенклатура.Наименование 			ПОДОБНО &СтрокаПоиска
								|ИЛИ Номенклатура.НаименованиеПолное 	ПОДОБНО &СтрокаПоиска
								|	 )", "") + ") ";
	Иначе 
		Возврат " Номенклатура В (ВЫБРАТЬ 
				|					Ссылка 
				|				ИЗ Справочник.Номенклатура 
				|				ГДЕ 
				|				  (	Код 		 		ПОДОБНО &СтрокаПоиска 
				|				ИЛИ Артикул 	 		ПОДОБНО &СтрокаПоиска 
				|				ИЛИ Наименование 		ПОДОБНО &СтрокаПоиска
				|				ИЛИ НаименованиеПолное 	ПОДОБНО &СтрокаПоиска
				|				  )
				|				И НЕ ЭтоГруппа)";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДополнительныхКолонок()	
	
	ШапкаЗапроса 		= "";
	СоединениеЗапроса 	= "";
	
	Для Инд = 1 По 4 Цикл
		Если НЕ ЭтаФорма["ДополнительныйВидЦены" + Инд].Пустая() Тогда
		   	ШапкаЗапроса = ШапкаЗапроса + ", КешДопЦен"+Инд+".Цена КАК ДопЦена"+Инд+" ";
			СоединениеЗапроса = СоединениеЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ КешЦен КАК КешДопЦен"+Инд+"
				|ПО СпрНом.Номенклатура = КешДопЦен"+Инд+".Номенклатура
				|И  &ВидДопЦены"+Инд+"	= КешДопЦен"+Инд+".ВидЦены";
		КонецЕсли;
	
	КонецЦикла;
		
	ШаблонШапкиЗапроса = " 
		|, КешДопЦенПоставщика[знч].Цена    КАК ЦенаПоставщика[знч]
		|, КешДопЦенПоставщика[знч].Сегодня КАК ПСЦенаП[знч] ";	
	ШаблонСоединениеЗапроса =  "
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЦенПоставщиков КАК КешДопЦенПоставщика[знч]
		|ПО СпрНом.Номенклатура 		= КешДопЦенПоставщика[знч].Номенклатура
		|И	&ВидЦеныПоставщика[знч] 	= КешДопЦенПоставщика[знч].Соглашение
		|";
			
	Для Инд = 1 По 21 Цикл
		Если НЕ ЭтаФорма["ДополнительныйВидЦеныПоставщика" + Инд].Пустая() Тогда
			ШапкаЗапроса 		= ШапкаЗапроса 		+ СтрЗаменить(ШаблонШапкиЗапроса, 		"[знч]", Инд);
			СоединениеЗапроса 	= СоединениеЗапроса + СтрЗаменить(ШаблонСоединениеЗапроса, 	"[знч]", Инд);
		КонецЕсли;	
	КонецЦикла;
	
	
	Если НЕ ДополнительноеСвойство1.Пустая() Тогда	
		ШапкаЗапроса = ШапкаЗапроса + ", КешДопСвойство1.Значение КАК ДопСвойство1 ";
		СоединениеЗапроса = СоединениеЗапроса + ?(ДополнительноеСвойство1.ЭтоДополнительноеСведение, "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура, Значение ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Объект В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Свойство = &ДопСвойство1) КАК КешДопСвойство1
			|ПО	КешДопСвойство1.Номенклатура = СпрНом.Номенклатура   
			|", "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка КАК Номенклатура, Значение ИЗ Справочник.Номенклатура.ДополнительныеРеквизиты ГДЕ Ссылка В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Свойство = &ДопСвойство1) КАК КешДопСвойство1
			|ПО	КешДопСвойство1.Номенклатура = СпрНом.Номенклатура   
			|");
	КонецЕсли;
	
	Если НЕ ДополнительноеСвойство2.Пустая() Тогда
		ШапкаЗапроса = ШапкаЗапроса + ", КешДопСвойство2.Значение КАК ДопСвойство2 ";
		СоединениеЗапроса = СоединениеЗапроса + ?(ДополнительноеСвойство2.ЭтоДополнительноеСведение, "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура, Значение ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Объект В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Свойство = &ДопСвойство2) КАК КешДопСвойство2
			|ПО	КешДопСвойство2.Номенклатура = СпрНом.Номенклатура  
			|", "
			|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка КАК Номенклатура, Значение ИЗ Справочник.Номенклатура.ДополнительныеРеквизиты ГДЕ Ссылка В (ВЫБРАТЬ Номенклатура ИЗ Cache) И Свойство = &ДопСвойство2) КАК КешДопСвойство2
			|ПО	КешДопСвойство2.Номенклатура = СпрНом.Номенклатура    
			|");
	КонецЕсли;
		
	Если ALPS_ПродактМенеджер Тогда
		ШапкаЗапроса = ШапкаЗапроса + ", Cache_ALPS.ALPS_Привязки ";
		СоединениеЗапроса = СоединениеЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Cache_ALPS КАК Cache_ALPS
			|ПО Cache_ALPS.Номенклатура = СпрНом.Номенклатура ";	
	КонецЕсли;
	
	Если ИспользоватьТоварныеКатегории Тогда
		ШапкаЗапроса = ШапкаЗапроса + " , ТоварныеКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория ";
		СоединениеЗапроса = СоединениеЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТоварныеКатегории
			|ПО СпрНом.Номенклатура = ТоварныеКатегории.Ссылка";	
	КонецЕсли;
			
	Возврат Новый Структура("ШапкаЗапроса, СоединениеЗапроса", ШапкаЗапроса, СоединениеЗапроса);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапрос_Cache_ALPS(ALPS_ПродактМенеджер)
	Если ALPS_ПродактМенеджер Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Cache.Номенклатура,
			|	Количество(ALPS_РазвернутыеСтроки.Партнер) КАК ALPS_Привязки
			|
			|ПОМЕСТИТЬ Cache_ALPS
			|ИЗ
			|	Cache КАК Cache	
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_РазвернутыеСтроки КАК ALPS_РазвернутыеСтроки
			|ПО	Cache.Номенклатура.Артикул <> """"
			|И	ALPS_РазвернутыеСтроки.Артикул = Cache.Номенклатура.Артикул 
			|И	ALPS_РазвернутыеСтроки.НоменклатураПоставщика = Значение(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
			|И	(	ALPS_РазвернутыеСтроки.Партнер, 
			|		ALPS_РазвернутыеСтроки.Код, 
			|		ALPS_РазвернутыеСтроки.Артикул, 
			|		ALPS_РазвернутыеСтроки.Наименование, 
			|		ALPS_РазвернутыеСтроки.Штрихкод) НЕ В (	ВЫБРАТЬ 
			|													Партнер, 
			|													Код, 
			|													Артикул, 
			|													Наименование, 
			|													Штрихкод 
			|												ИЗ 
			|													РегистрСведений.ALPS_РазвернутыеСтрокиИсключения 
			|												ГДЕ 
			|													Исключено
			|												)
			|СГРУППИРОВАТЬ ПО
			|	Cache.Номенклатура	
			|;";	
	Иначе
		ТекстЗапроса = "";	
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаАналитики(Аналитика)
	
	Если НЕ Аналитика Тогда Возврат ""; КонецЕсли;
	
	Возврат "
	|ВЫБРАТЬ   
	|	Период,
	|	Номенклатура,
	|	КоличествоНачальныйОстаток 	КАК НачальныйОстаток,
	|	КоличествоКонечныйОстаток 	КАК КонечныйОстаток
	|	
	|ПОМЕСТИТЬ ОстаткиПоДням
	|ИЗ
	| 	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(&НачПериодаАнализа, &КонПериодаАнализа, День, , Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache))
	|
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Период	
	|
	|ПОМЕСТИТЬ ДниВыбытия
	|ИЗ
	|	ОстаткиПоДням	
	|
	|ГДЕ
	| 	КонечныйОстаток = 0
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДням.Номенклатура,
	|	ОстаткиПоДням.Период							 			КАК ПериодПоявления,
	|	Минимум(ЕСТЬNULL(ДниВыбытия.Период, &КонПериодаАнализа)) 	КАК ПериодИсчезновения
	|
	|ПОМЕСТИТЬ МинПериодИсчезновения
	|ИЗ
	|	ОстаткиПоДням КАК ОстаткиПоДням	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ДниВыбытия КАК ДниВыбытия
	|ПО ДниВыбытия.Номенклатура = ОстаткиПоДням.Номенклатура
	|И	ДниВыбытия.Период	   >= ОстаткиПоДням.Период
	|
	|ГДЕ
	| 	ОстаткиПоДням.КонечныйОстаток <> 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	ОстаткиПоДням.Номенклатура, 
	|	ОстаткиПоДням.Период
	|;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинПериод.Номенклатура,
	|
	|   Минимум(МинПериод.ПериодПоявления) КАК ПериодПоявления,
	|   МинПериод.ПериодИсчезновения,
	|
	|	Минимум(ПерваяДата.ПериодПоявления)			КАК ПерваяДата,
	|  	Максимум(ПоследняяДата.ПериодИсчезновения)	КАК ПоследняяДата
	|
	|ПОМЕСТИТЬ ДиапазонНаличия
	|ИЗ
	| 	МинПериодИсчезновения КАК МинПериод 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ МинПериодИсчезновения КАК ПерваяДата
	|ПО ПерваяДата.Номенклатура = МинПериод.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ МинПериодИсчезновения КАК ПоследняяДата
	|ПО ПоследняяДата.Номенклатура = МинПериод.Номенклатура  
	|
	|СГРУППИРОВАТЬ ПО 
	|	МинПериод.Номенклатура,
	|	МинПериод.ПериодИсчезновения
	|
	|;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,	
	|   Сумма(РАЗНОСТЬДАТ(ПериодПоявления, ПериодИсчезновения, День) + 1) КАК ДнейНаСкладе
	|
	|ПОМЕСТИТЬ ДнейПрисутсвия
	|ИЗ
	|	ДиапазонНаличия
	|
	|СГРУППИРОВАТЬ ПО Номенклатура
	|;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| 	ОстаткиПоДням.Период,
	| 	Минимум(СледДвижение.Период) КАК СледДвижение,
	| 	
	|	ОстаткиПоДням.Номенклатура,
	|	ОстаткиПоДням.НачальныйОстаток,
	|	ОстаткиПоДням.КонечныйОстаток,
	|	
	|	ДиапазонНаличия.ПериодПоявления,
	|	ДиапазонНаличия.ПериодИсчезновения,
	|	ДиапазонНаличия.ПерваяДата,
	|	ДиапазонНаличия.ПоследняяДата
	|	
	|ПОМЕСТИТЬ ТБРасчетаДср
	|ИЗ
	|	ОстаткиПоДням КАК ОстаткиПоДням
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоДням КАК СледДвижение
	|ПО СледДвижение.Номенклатура = ОстаткиПоДням.Номенклатура
	|И  СледДвижение.Период		 > ОстаткиПоДням.Период 
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ДиапазонНаличия КАК ДиапазонНаличия
	|ПО ДиапазонНаличия.Номенклатура = ОстаткиПоДням.Номенклатура
	|И  (ОстаткиПоДням.Период 	   >= ДиапазонНаличия.ПериодПоявления И ОстаткиПоДням.Период <= ДиапазонНаличия.ПериодИсчезновения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДням.Период,
	|	ОстаткиПоДням.Номенклатура,
	|	ОстаткиПоДням.НачальныйОстаток,
	|	ОстаткиПоДням.КонечныйОстаток,
	|	
	|	ДиапазонНаличия.ПериодПоявления,
	|	ДиапазонНаличия.ПериодИсчезновения,
	|	ДиапазонНаличия.ПерваяДата,
	|	ДиапазонНаличия.ПоследняяДата
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТБРасчетаДср.Номенклатура,
	|	Сумма(ВЫБОР
	|				КОГДА ТБРасчетаДср.Период = ТБРасчетаДср.ПерваяДата
	|				ТОГДА 	ВЫБОР 
	|							КОГДА ТБРасчетаДср.НачальныйОстаток = 0
	|							ТОГДА ТБРасчетаДср.КонечныйОстаток  * (РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День) - 0.5)
	|							ИНАЧЕ ТБРасчетаДср.НачальныйОстаток * (РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День) - 0.5)
	|						КОНЕЦ 
	|				КОГДА ТБРасчетаДср.Период = ТБРасчетаДср.ПоследняяДата
	|				ТОГДА 	ВЫБОР
	|							КОГДА ТБРасчетаДср.НачальныйОстаток = 0
	|							ТОГДА ТБРасчетаДср.КонечныйОстаток  * 0.5
	|							ИНАЧЕ ТБРасчетаДср.НачальныйОстаток * 0.5
	|						КОНЕЦ
	|				КОГДА ТБРасчетаДср.НачальныйОстаток = 0 
	|				ТОГДА ТБРасчетаДср.КонечныйОстаток  * РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День)
	|				КОГДА ТБРасчетаДср.КонечныйОстаток  = 0 
	|				ТОГДА ТБРасчетаДср.НачальныйОстаток 
	|				ИНАЧЕ ТБРасчетаДср.НачальныйОстаток + ТБРасчетаДср.КонечныйОстаток * (РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День) - 1)	
	|		КОНЕЦ) / ВЫБОР КОГДА ДнейПрисутсвия.ДнейНаСкладе = 1 ТОГДА 1 ИНАЧЕ (ДнейПрисутсвия.ДнейНаСкладе - 1) КОНЕЦ КАК Дср,
	|		ДнейПрисутсвия.ДнейНаСкладе
	|		
	|ПОМЕСТИТЬ СТЗ 	
	|ИЗ
	|	ТБРасчетаДср
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ДнейПрисутсвия КАК ДнейПрисутсвия
	|ПО	ДнейПрисутсвия.Номенклатура = ТБРасчетаДср.Номенклатура
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТБРасчетаДср.Номенклатура,
	|	ДнейПрисутсвия.ДнейНаСкладе	
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СТЗ.Номенклатура,
	|	Сумма(КоличествоОборот) 							 КАК ПродажиЗаПериод, 
	|	СТЗ.Дср												 КАК СреднийЗапас,
	//|	СТЗ.Дср * СТЗ.ДнейНаСкладе / Сумма(КоличествоОборот) КАК ХранениеВДнях,
	|	СТЗ.Дср * СТЗ.ДнейНаСкладе							 КАК Хранение,
	|	Сумма(КоличествоОборот) / ВЫБОР КОГДА ЕСТЬNULL(СТЗ.Дср, 0) = 0 ТОГДА 1 ИНАЧЕ СТЗ.Дср КОНЕЦ	КАК Оборачиваемость,
	|	Сумма(СуммаВыручкиОборот - СебестоимостьОборот - СуммаДополнительныхРасходовОборот)	КАК Вал
	|
	|ПОМЕСТИТЬ Анализ	
	|ИЗ
	|	СТЗ
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачПериодаАнализа, &КонПериодаАнализа, , 
	|		  АналитикаУчетаПоПартнерам  В (ВЫБРАТЬ КлючАналитики ИЗ РегистрСведений.АналитикаУчетаПоПартнерам  ГДЕ Партнер <> Значение(Справочник.Партнеры.НашеПредприятие)) 
	|		И АналитикаУчетаНоменклатуры.Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)) КАК ВыручкиИСебестоимость
	|ПО ВыручкиИСебестоимость.АналитикаУчетаНоменклатуры.Номенклатура = СТЗ.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СТЗ.Номенклатура,
	|	СТЗ.Дср,
	|	СТЗ.ДнейНаСкладе
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиПоДням; 
	|УНИЧТОЖИТЬ ДниВыбытия;
	|УНИЧТОЖИТЬ МинПериодИсчезновения;
	|УНИЧТОЖИТЬ ДиапазонНаличия;
	|УНИЧТОЖИТЬ ДнейПрисутсвия;
	|УНИЧТОЖИТЬ ТБРасчетаДср; 
	|УНИЧТОЖИТЬ СТЗ;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ   
	|	Период,
	|	Номенклатура,
	|	КоличествоНачальныйОстаток 	КАК НачальныйОстаток,
	|	КоличествоКонечныйОстаток 	КАК КонечныйОстаток
	|	
	|ПОМЕСТИТЬ ОстаткиПоДням
	|ИЗ
	| 	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(&НачПериодаТенденции, &КонПериодаТенденции, День, , Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache))
	|
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Период	
	|
	|ПОМЕСТИТЬ ДниВыбытия
	|ИЗ
	|	ОстаткиПоДням	
	|
	|ГДЕ
	| 	КонечныйОстаток = 0
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДням.Номенклатура,
	|	ОстаткиПоДням.Период							 			КАК ПериодПоявления,
	|	Минимум(ЕСТЬNULL(ДниВыбытия.Период, &КонПериодаТенденции)) 	КАК ПериодИсчезновения
	|
	|ПОМЕСТИТЬ МинПериодИсчезновения
	|ИЗ
	|	ОстаткиПоДням КАК ОстаткиПоДням	
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ДниВыбытия КАК ДниВыбытия
	|ПО ДниВыбытия.Номенклатура = ОстаткиПоДням.Номенклатура
	|И	ДниВыбытия.Период	   >= ОстаткиПоДням.Период
	|
	|ГДЕ
	| 	ОстаткиПоДням.КонечныйОстаток <> 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	ОстаткиПоДням.Номенклатура, 
	|	ОстаткиПоДням.Период
	|;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинПериод.Номенклатура,
	|
	|   Минимум(МинПериод.ПериодПоявления) КАК ПериодПоявления,
	|   МинПериод.ПериодИсчезновения,
	|
	|	Минимум(ПерваяДата.ПериодПоявления)			КАК ПерваяДата,
	|  	Максимум(ПоследняяДата.ПериодИсчезновения)	КАК ПоследняяДата
	|
	|ПОМЕСТИТЬ ДиапазонНаличия
	|ИЗ
	| 	МинПериодИсчезновения КАК МинПериод 
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ МинПериодИсчезновения КАК ПерваяДата
	|ПО ПерваяДата.Номенклатура = МинПериод.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ МинПериодИсчезновения КАК ПоследняяДата
	|ПО ПоследняяДата.Номенклатура = МинПериод.Номенклатура  
	|
	|СГРУППИРОВАТЬ ПО 
	|	МинПериод.Номенклатура,
	|	МинПериод.ПериодИсчезновения
	|
	|;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,	
	|   Сумма(РАЗНОСТЬДАТ(ПериодПоявления, ПериодИсчезновения, День) + 1) КАК ДнейНаСкладе
	|
	|ПОМЕСТИТЬ ДнейПрисутсвия
	|ИЗ
	|	ДиапазонНаличия
	|
	|СГРУППИРОВАТЬ ПО Номенклатура
	|;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| 	ОстаткиПоДням.Период,
	| 	Минимум(СледДвижение.Период) КАК СледДвижение,
	| 	
	|	ОстаткиПоДням.Номенклатура,
	|	ОстаткиПоДням.НачальныйОстаток,
	|	ОстаткиПоДням.КонечныйОстаток,
	|	
	|	ДиапазонНаличия.ПериодПоявления,
	|	ДиапазонНаличия.ПериодИсчезновения,
	|	ДиапазонНаличия.ПерваяДата,
	|	ДиапазонНаличия.ПоследняяДата
	|	
	|ПОМЕСТИТЬ ТБРасчетаДср
	|ИЗ
	|	ОстаткиПоДням КАК ОстаткиПоДням
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоДням КАК СледДвижение
	|ПО СледДвижение.Номенклатура = ОстаткиПоДням.Номенклатура
	|И  СледДвижение.Период		 > ОстаткиПоДням.Период 
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ДиапазонНаличия КАК ДиапазонНаличия
	|ПО ДиапазонНаличия.Номенклатура = ОстаткиПоДням.Номенклатура
	|И  (ОстаткиПоДням.Период 	   >= ДиапазонНаличия.ПериодПоявления И ОстаткиПоДням.Период <= ДиапазонНаличия.ПериодИсчезновения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДням.Период,
	|	ОстаткиПоДням.Номенклатура,
	|	ОстаткиПоДням.НачальныйОстаток,
	|	ОстаткиПоДням.КонечныйОстаток,
	|	
	|	ДиапазонНаличия.ПериодПоявления,
	|	ДиапазонНаличия.ПериодИсчезновения,
	|	ДиапазонНаличия.ПерваяДата,
	|	ДиапазонНаличия.ПоследняяДата
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТБРасчетаДср.Номенклатура,
	|	Сумма(ВЫБОР
	|				КОГДА ТБРасчетаДср.Период = ТБРасчетаДср.ПерваяДата
	|				ТОГДА 	ВЫБОР 
	|							КОГДА ТБРасчетаДср.НачальныйОстаток = 0
	|							ТОГДА ТБРасчетаДср.КонечныйОстаток  * (РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День) - 0.5)
	|							ИНАЧЕ ТБРасчетаДср.НачальныйОстаток * (РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День) - 0.5)
	|						КОНЕЦ 
	|				КОГДА ТБРасчетаДср.Период = ТБРасчетаДср.ПоследняяДата
	|				ТОГДА 	ВЫБОР
	|							КОГДА ТБРасчетаДср.НачальныйОстаток = 0
	|							ТОГДА ТБРасчетаДср.КонечныйОстаток  * 0.5
	|							ИНАЧЕ ТБРасчетаДср.НачальныйОстаток * 0.5
	|						КОНЕЦ
	|				КОГДА ТБРасчетаДср.НачальныйОстаток = 0 
	|				ТОГДА ТБРасчетаДср.КонечныйОстаток  * РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День)
	|				КОГДА ТБРасчетаДср.КонечныйОстаток  = 0 
	|				ТОГДА ТБРасчетаДср.НачальныйОстаток 
	|				ИНАЧЕ ТБРасчетаДср.НачальныйОстаток + ТБРасчетаДср.КонечныйОстаток * (РАЗНОСТЬДАТ(ТБРасчетаДср.Период, ТБРасчетаДср.СледДвижение, День) - 1)	
	//|	КОНЕЦ) КАК Дср,
	|		КОНЕЦ) / ВЫБОР КОГДА ДнейПрисутсвия.ДнейНаСкладе = 1 ТОГДА 1 ИНАЧЕ (ДнейПрисутсвия.ДнейНаСкладе - 1)КОНЕЦ КАК Дср,
	|		ДнейПрисутсвия.ДнейНаСкладе
	|		
	|ПОМЕСТИТЬ СТЗ 	
	|ИЗ
	|	ТБРасчетаДср
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ ДнейПрисутсвия КАК ДнейПрисутсвия
	|ПО	ДнейПрисутсвия.Номенклатура = ТБРасчетаДср.Номенклатура
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТБРасчетаДср.Номенклатура,
	|	ДнейПрисутсвия.ДнейНаСкладе	
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СТЗ.Номенклатура,
	|	Сумма(КоличествоОборот) 							 КАК ПродажиЗаПериод, 
	|	СТЗ.Дср												 КАК СреднийЗапас,
	|	СТЗ.Дср * СТЗ.ДнейНаСкладе							 КАК Хранение,
	|	Сумма(КоличествоОборот) / ВЫБОР КОГДА ЕСТЬNULL(СТЗ.Дср, 0) = 0 ТОГДА 1 ИНАЧЕ СТЗ.Дср КОНЕЦ	КАК Оборачиваемость,
	//|	Сумма(КоличествоОборот) / СТЗ.Дср					 КАК Оборачиваемость,
	|	Сумма(СуммаВыручкиОборот - СебестоимостьОборот - СуммаДополнительныхРасходовОборот)	КАК Вал
	|
	|ПОМЕСТИТЬ Тенденция	
	|ИЗ
	|	СТЗ
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачПериодаТенденции, &КонПериодаТенденции, , 
	|		  АналитикаУчетаПоПартнерам  В (ВЫБРАТЬ КлючАналитики ИЗ РегистрСведений.АналитикаУчетаПоПартнерам  ГДЕ Партнер <> Значение(Справочник.Партнеры.НашеПредприятие)) 
	|		И АналитикаУчетаНоменклатуры.Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache)) КАК ВыручкиИСебестоимость
	|ПО ВыручкиИСебестоимость.АналитикаУчетаНоменклатуры.Номенклатура = СТЗ.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СТЗ.Номенклатура,
	|	СТЗ.Дср,
	|	СТЗ.ДнейНаСкладе
	|;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиПоДням; 
	|УНИЧТОЖИТЬ ДниВыбытия;
	|УНИЧТОЖИТЬ МинПериодИсчезновения;
	|УНИЧТОЖИТЬ ДиапазонНаличия;
	|УНИЧТОЖИТЬ ДнейПрисутсвия;
	|УНИЧТОЖИТЬ ТБРасчетаДср; 
	|УНИЧТОЖИТЬ СТЗ;
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Анализ.Номенклатура,
	|	Анализ.ПродажиЗаПериод 								КАК А_ПродажиЗаПериод, 
	|	Анализ.СреднийЗапас									КАК А_СреднийЗапас,
	|	ВЫБОР
	|		КОГДА Анализ.ПродажиЗаПериод = 0
	|		ТОГДА Анализ.Хранение
	|		ИНАЧЕ Анализ.Хранение / Анализ.ПродажиЗаПериод
	|	КОНЕЦ 												КАК А_ХранениеВДнях,
	|	Анализ.Оборачиваемость								КАК А_Оборачиваемость,
	|	Анализ.Вал											КАК А_Вал,
	|	
	|	Анализ.ПродажиЗаПериод 	- ЕСТЬNULL(Тенденция.ПродажиЗаПериод,0) КАК Т_ПродажиЗаПериод,
	|	Анализ.СреднийЗапас 	- Тенденция.СреднийЗапас 	КАК Т_СреднийЗапас, 
	//|	Анализ.ХранениеВДнях 	- Тенденция.ХранениеВДнях 	КАК Т_ХранениеВДнях,
	|	ВЫБОР
	|		КОГДА Анализ.ПродажиЗаПериод = 0
	|		ТОГДА Анализ.Хранение
	|		ИНАЧЕ Анализ.Хранение / Анализ.ПродажиЗаПериод
	|	КОНЕЦ 					-
	|	ВЫБОР
	|		КОГДА Тенденция.ПродажиЗаПериод = 0
	|		ТОГДА Тенденция.Хранение
	|		ИНАЧЕ Тенденция.Хранение / Тенденция.ПродажиЗаПериод
	|	КОНЕЦ                                               КАК Т_ХранениеВДнях,
	|	Анализ.Оборачиваемость 	- Тенденция.Оборачиваемость КАК Т_Оборачиваемость,
	|	Анализ.Вал 				- Тенденция.Вал				КАК Т_Вал 
	|
	|ПОМЕСТИТЬ РезультатАнализа
	|ИЗ
	|	Анализ КАК Анализ
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ Тенденция КАК Тенденция
	|ПО Тенденция.Номенклатура = Анализ.Номенклатура  
	|; "	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаБонусыМенеджера()
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) 	КАК Номенклатура,
		|   Значение										КАК Значение
		|ПОМЕСТИТЬ БонусыМенеджерам
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДопСведения
		|ГДЕ
		|	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) В (ВЫБРАТЬ Номенклатура ИЗ Cache)
		|И	ДопСведения.Свойство = &СвойствоЗаработок
	    |
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаБонусыМенеджера()
 



Процедура ВывестиСообщениеПользователю(ТекстСообщения, Поле="", ОчищатьСообщения = Ложь)
	
#Если ТонкийКлиент Тогда	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
#КонецЕсли	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле);
	
КонецПроцедуры





&НаКлиенте
Процедура ЗК_ОткрытьЭлемент(Команда)
	ОткрытьЗаказКлиента();	
КонецПроцедуры

&НаКлиенте
Процедура ЗК_Обновить(Команда)
	ОбновитьЗаказыКлиентовКлиент();	
КонецПроцедуры

&НаКлиенте
Процедура Период_ЗаказыКлиентовПриИзменении(Элемент)
	ОбновитьЗаказыКлиентовКлиент();
КонецПроцедуры




&НаКлиенте
Процедура ТЗ_ЗаказыКлиентовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ЗК_НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущиеДанные.Документ);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_ЗаказыКлиентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗаказКлиента();
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьЗаказКлиента()
	ТекущиеДанные = Элементы.ТЗ_ЗаказыКлиентов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказыКлиентовКлиент()
	
	Перем ПараметрыОтбора;
	Если НЕ Элементы.ТЗ_ЗаказыКлиентов.ТекущаяСтрока = Неопределено Тогда
		 ПараметрыОтбора = Новый Структура("Документ", Элементы.ТЗ_ЗаказыКлиентов.ТекущиеДанные.Документ);
	КонецЕсли;
	
	//Обновляем страницу на сервере
	ОбновитьЗаказыКлиентовСервер();

	//Востанавливаем курсор на нужный документ, если он не пропал из выгрузки	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = ТЗ_ЗаказыКлиентов.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда Элементы.ТЗ_ЗаказыКлиентов.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); КонецЕсли;
	КонецЕсли;

		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаказыКлиентовСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказыКлиентов(Ложь);
	Запрос.УстановитьПараметр("ДатаНачало", 	Период_ЗаказыКлиентов.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	Период_ЗаказыКлиентов.ДатаОкончания);
	//Запрос.УстановитьПараметр("Организация", 	?(ЗначениеЗаполнено(Касса), Касса.Владелец, Справочники.Организации.ПустаяСсылка()));
	
	ТЗ_ЗаказыКлиентов.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаЗаказыКлиентов(ВсеДокументы)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|			И ЗаказКлиента.СуммаДокумента > 0
        |   	ТОГДА
		|			ВЫРАЗИТЬ(ЕСТЬNULL(КОплатеРасход, 0) / ЗаказКлиента.СуммаДокумента * 100 КАК ЧИСЛО(15, 0))	
		|   	ИНАЧЕ 0
		|   КОНЕЦ КАК ПроцентОплаты, 
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|		И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
		|		И ЗаказКлиента.СуммаДокумента > 0
        |   ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(КОтгрузкеПриход, 0) / ЗаказКлиента.СуммаДокумента * 100 КАК ЧИСЛО(15, 0)) 
		|   ИНАЧЕ 0
		|   КОНЕЦ КАК ПроцентОтгрузки,
		|	ЗаказКлиента.Номер 			КАК Номер,
		|	ЗаказКлиента.Дата 			КАК Дата,
		|	ЗаказКлиента.Статус 		КАК Статус,
		|	ЗаказКлиента.СуммаДокумента КАК Сумма,
		|	Валюта 						КАК Валюта,
		|	ЗаказКлиента 				КАК Документ,
		|	ЗаказКлиента.Менеджер 		КАК Менеджер,
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент 	КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
		|	ЗаказКлиента.Склад 			КАК Склад
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаНачало, &ДатаОкончания, ,
		//|													АналитикаУчетаПоПартнерам В 
		//|														(ВЫБРАТЬ
		//|															АналитикаПоПартнерам.КлючАналитики
		//|														 ИЗ
		//|															РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		//|														 ГДЕ
		//|															АналитикаПоПартнерам.Организация = &Организация) И
		|														    ЗаказКлиента.Дата >= &ДатаНачало
		|														 И  ЗаказКлиента Ссылка Документ.ЗаказКлиента " 
		+ ?(НЕ ВсеДокументы, "
		|														 И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|														 И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|				 ", " ") + "
		|													)
		|
		|УПОРЯДОЧИТЬ ПО ЗаказКлиента.Дата ";
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ИнфоПоНоменклатуре(Команда)
	
	Если Элементы.СтраницыИнформацияПродажи.ТекущаяСтраница = Элементы.СтраницаИнформацияПродажи Тогда
		Элементы.СтраницыИнформацияПродажи.ТекущаяСтраница = Элементы.СтраницаИнформацияСкрыть;
	Иначе
		Элементы.СтраницыИнформацияПродажи.ТекущаяСтраница = Элементы.СтраницаИнформацияПродажи;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОбновитьПанельДополнительнойИнформации(ТекущиеДанные.Номенклатура);
	КонецЕсли;

КонецПроцедуры







///////////////////////////////////   РАБОТА С ВНЕШНИМИ ОБРАБОТКАМИ ////////////////////////////
Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки)
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	БиблиотекаФорм = ОбъектОбработки.ПолучитьБиблиотекуФорм(ИмяБиблиотеки);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	Возврат БиблиотекаФорм;
КонецФункции

&НаКлиенте
Процедура InsertCode(Команда)
	Перем input;
	Если ВвестиСтроку(input, "Введите код, EAN или серийный номер") Тогда
		InsertCodeСервер(input);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура InsertCodeСервер(input)
	
	input_code = input;
	Пока СтрДлина(input_code) < 11 Цикл
		input_code = "0" + input_code;
	КонецЦикла;
	
	Ссылка_input = Справочники.Номенклатура.НайтиПоКоду(input_code);
	Если НЕ Ссылка_input.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input));
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", input);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка_input = Выборка.Номенклатура; 
		Если НЕ Ссылка_input.Пустая() Тогда
			ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Ссылка_input = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", input);
	Если НЕ Ссылка_input.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input));
		Возврат;
	КонецЕсли;
	
	Ссылка_input = Справочники.СерийныеНомераНоменклатуры.НайтиПоКоду(input);
	Если НЕ Ссылка_input.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input.Владелец));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура InsertTxt(Команда)
	ФормаInsert = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.input_order");
	Результат = ФормаInsert.ОткрытьМодально();
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		InsertTxtСервер(Результат);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура InsertTxtСервер(Массив)
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	
	Для Каждого ЭлементМассива Из Массив Цикл
		
		input = ЭлементМассива.Код;
		Пока СтрДлина(input) < 11 Цикл
			input = "0" + input;
		КонецЦикла;
		
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(input);
		Если НЕ Номенклатура.Пустая() Тогда
			ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Номенклатура.ЕдиницаИзмерения);
			РезультатСтрока = РабочаяКорзина.НайтиСтроки(ПараметрыОтбора);
			Если РезультатСтрока.Количество() Тогда
				РезультатСтрока[0].КоличествоУпаковок = РезультатСтрока[0].КоличествоУпаковок + ЭлементМассива.Количество;
            Иначе
				РезультатСтрока = РабочаяКорзина.Добавить();
				РезультатСтрока.Номенклатура   	   = Номенклатура;
				РезультатСтрока.Склад			   = СоглашениеСклад;
				РезультатСтрока.КоличествоУпаковок = ЭлементМассива.Количество;
				РезультатСтрока.ЕдиницаИзмерения   = Номенклатура.ЕдиницаИзмерения;
				РезультатСтрока.ВидЦены			   = СоглашениеВидЦены;
				РезультатСтрока.ПроцентРучнойСкидки= Партнер_Скидка;
				РезультатСтрока.СтавкаНДС		   = ?(Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, Номенклатура.СтавкаНДС);
			КонецЕсли;	
		Иначе
			Сообщить("Номенклатуру с кодом:" + input + " не удалось найти!");
		КонецЕсли;
		
	КонецЦикла;	
	
	ОбновитьСодержанииеКорзины();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьНакладную(Команда)
	ФормаImportOrder = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.import_order");
	ФормаImportOrder.Открыть();
	//Если ТипЗнч(Результат) = Тип("Массив") Тогда
	//	InsertTxtСервер(Результат);	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапоминание(Команда)
	ОткрытьФормуМодально("РегистрСведений.НапоминанияПользователя.Форма.Напоминание");
КонецПроцедуры














// КТС ПОМОЩЬ

&НаСервере
Процедура КТСПомощь_ЗагрузитьСписокРеализаций()

	Перем ПроцентПродажыУслуги, ПроцентИсполненияУслуги, СвойствоПомощьКТС;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо установить настройки 'КТС Помощь'. Обратитесь в службу поддержки 777.";
		Сообщение.Сообщить(); 
		Возврат;				
	КонецЕсли;
	
	Настройки.Свойство("ПроцентПродажыУслуги", ПроцентПродажыУслуги);
	Настройки.Свойство("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	Настройки.Свойство("СвойствоПомощьКТС", СвойствоПомощьКТС);
	
	Если ПроцентПродажыУслуги = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо установить процент от продажы услуги 'КТС Помощь'. Обратитесь в службу поддержки 777.";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	Если ПроцентИсполненияУслуги = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо установить процент от исполнения услуги 'КТС Помощь'. Обратитесь в службу поддержки 777.";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	Если СвойствоПомощьКТС = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо установить свойство 'КТС Помощь'. Обратитесь в службу поддержки 777.";
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	                       
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДополнительныеСведения.Объект КАК ДокументРеализация,
	                      |	ДополнительныеСведения.Объект.Менеджер КАК Менеджер
	                      |ПОМЕСТИТЬ КешСписокДокументов
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	                      |ГДЕ
	                      |	ДополнительныеСведения.Свойство = &Свойство
	                      |	И ДополнительныеСведения.Значение = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешСписокДокументов.ДокументРеализация КАК Документ,
	                      |	КешСписокДокументов.Менеджер КАК Менеджер,
	                      |	СУММА(ДокументРеализации.Сумма * &ПроцентОтОказанияУслуги * 0.01) КАК Сумма
	                      |ИЗ
						  |	Документ.РеализацияТоваровУслуг.Товары КАК ДокументРеализации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешСписокДокументов КАК КешСписокДокументов
	                      |		ПО ДокументРеализации.Ссылка = КешСписокДокументов.ДокументРеализация
						  |ГДЕ
						  |	ДокументРеализации.Номенклатура.ВидНоменклатуры = &ВидНоменклатури
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	КешСписокДокументов.ДокументРеализация,
	                      |	КешСписокДокументов.Менеджер");
						  
	Запрос.УстановитьПараметр("ВидНоменклатури", Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("91f45981-0c03-11e2-9d4d-001e673c80fc")));
	Запрос.УстановитьПараметр("Свойство", СвойствоПомощьКТС);
	Запрос.УстановитьПараметр("ПроцентОтОказанияУслуги", ПроцентИсполненияУслуги);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	
	КТСПомощь_ТЗ.Загрузить(Запрос.Выполнить().Выгрузить());
						  
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // КТСПомощь_ЗагрузитьСписокРеализаций()

&НаКлиенте
Процедура КТСПомощь_Обновить(Команда)
	КТСПомощь_ЗагрузитьСписокРеализаций();
КонецПроцедуры
 
&НаКлиенте
Процедура КТСПомощь_АвтоматическоеОбновлениеСписка()
	КТСПомощь_ЗагрузитьСписокРеализаций();
КонецПроцедуры // КТСПомощьАвтоматическоеОбновлениеСписка()

&НаКлиенте
Процедура КТСПомощь_ПроверкаАвтоматическогоОбновленияСписка()
  	Если КТСПомощь_АвтоматическоеОбновление Тогда
		ОтключитьОбработчикОжидания("КТСПомощь_АвтоматическоеОбновлениеСписка");
	КонецЕсли;
КонецПроцедуры // КТСПомощь_ПроверкаАвтоматическогоОбновленияСписка()

&НаКлиенте
Процедура КТСПомощь_ВыполнитьУслугу(Команда)
	ТекущиеДанные = Элементы.КТСПомощь_ТЗ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Отказ 					= Ложь;
		СписокБанковскихСчетов 	= СформироватьСписокБанковскихСчетов(ТекущиеДанные.Документ);
		
		МассивДокументов    = Новый Массив;
		МассивДокументов.Добавить(ТекущиеДанные.Документ);
		
		БанковскийСчет 		= СписокБанковскихСчетов.ВыбратьЭлемент("Выберите банковский счет.");
		Если БанковскийСчет = Неопределено Тогда Возврат; КонецЕсли;
		
		КТСПомощь_ВыполнитьУслугуНаСервере(ТекущиеДанные.Документ, Отказ);
		
		Если Не Отказ Тогда
			ПараметрыИсточника  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "КТСПомощь_АктВыполненныхРабот", Ложь, Новый Структура("МассивДокументов, БанковскийСчет", МассивДокументов, БанковскийСчет.Значение));
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", Новый Структура("ИсточникДанных, ПараметрыИсточника", ModuleLibraryServer.GetRefLibrary("Обработка 'Внешние печатные формы'"), ПараметрыИсточника));		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
 

&НаСервере
Процедура КТСПомощь_ВыполнитьУслугуНаСервере(ДокументСсылка, Отказ)
	УстановитьПривилегированныйРежим(Истина);
	КТСПомощь_ВыполнитьДвижениеПоРегистрам(ДокументСсылка, Отказ);
	УстановитьПривилегированныйРежим(Ложь);
	КТСПомощь_ЗагрузитьСписокРеализаций();
КонецПроцедуры // КТСПомощь_ВыполнитьУслугуНаСервере()
 
&НаСервере
Процедура КТСПомощь_ВыполнитьДвижениеПоРегистрам(ДокументСсылка, Отказ)

	Перем ПроцентПродажыУслуги, ПроцентИсполненияУслуги, СвойствоПомощьКТС;
		
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда 
		Возврат; 
	КонецЕсли;
	
	Настройки.Свойство("ПроцентПродажыУслуги", ПроцентПродажыУслуги);
	Настройки.Свойство("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	Настройки.Свойство("СвойствоПомощьКТС", СвойствоПомощьКТС);
	
	Если ПроцентПродажыУслуги    = Неопределено Тогда Отказ=Истина; Возврат; КонецЕсли;
	Если ПроцентИсполненияУслуги = Неопределено Тогда Отказ=Истина; Возврат; КонецЕсли;
	Если СвойствоПомощьКТС       = Неопределено Тогда Отказ=Истина; Возврат; КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПомощьКТС);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект   = ДокументСсылка;
	Запись.Свойство = СвойствоПомощьКТС;
	Запись.Значение = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей.Записать();

КонецПроцедуры // КТСПомощь_ВыполнитьДвижениеПоРегистрам()
 
&НаСервере
Функция СформироватьСписокБанковскихСчетов(ДокументСсылка)

	СписокБанковскихСчетов = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БанковскиеСчетаОрганизаций.Наименование КАК НаименованиеСчета,
	                      |	БанковскиеСчетаОрганизаций.Ссылка КАК СсылкаСчет
	                      |ИЗ
	                      |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	                      |ГДЕ
	                      |	БанковскиеСчетаОрганизаций.Владелец = &Организация");
						  
	Запрос.УстановитьПараметр("Организация", ДокументСсылка.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокБанковскихСчетов.Добавить(Выборка.СсылкаСчет, Выборка.НаименованиеСчета);			
	КонецЦикла;
	
	Возврат СписокБанковскихСчетов;

КонецФункции // СформироватьСписокБанковскихСчетов()
 


&НаКлиенте
Процедура КТСПомощь_ТЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.КТСПомощь_ТЗ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КТСПомощь_ТЗПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьДополнительнуюИнформациюКТСПомощь", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДополнительнуюИнформациюКТСПомощь()
	ТекущиеДанные = Элементы.КТСПомощь_ТЗ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьДополнительнуюИнформациюКТСПомощьНаСервере(ТекущиеДанные.Документ);
	Иначе
		ОчиститьДополнительнуюИнформациюКТСПомощь();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительнуюИнформациюКТСПомощьНаСервере(ДокументСсылка)

	Перем ПроцентПродажыУслуги, ПроцентИсполненияУслуги;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	                      |	РеализацияТоваровУслугТовары.Количество КАК Количество,
	                      |	РеализацияТоваровУслугТовары.Цена КАК Цена
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
	                      |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка = &ДокументСсылка
	                      |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Партнер КАК Клиент,
	                      |	РеализацияТоваровУслуг.Организация КАК Организация,
	                      |	РеализацияТоваровУслуг.Менеджер КАК Менеджер
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка");
						  
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("91f45981-0c03-11e2-9d4d-001e673c80fc")));
	
	РезультатЗапроса 			= Запрос.ВыполнитьПакет();
	ВыборкаСуммаДокумента   	= РезультатЗапроса[1].Выбрать();
	ВыборкаДанныеПоДокументу    = РезультатЗапроса[2].Выбрать();
	
	КТСПомощь_ТЗ_ДополнительнаяИнформация.Загрузить(РезультатЗапроса[0].Выгрузить());
	
	Если ВыборкаСуммаДокумента.Следующий() 		Тогда КТСПомощь_СуммаДокумента = ВыборкаСуммаДокумента.Сумма; Иначе КТСПомощь_СуммаДокумента = 0; КонецЕсли;
	Если ВыборкаДанныеПоДокументу.Следующий() 	Тогда 
		КТСПомощь_Клиент 		= ВыборкаДанныеПоДокументу.Клиент; 
		КТСПомощь_Менеджер 		= ВыборкаДанныеПоДокументу.Менеджер; 
		КТСПомощь_Организация 	= ВыборкаДанныеПоДокументу.Организация; 
	Иначе 
		КТСПомощь_Клиент 		= Справочники.Партнеры.ПустаяСсылка(); 
		КТСПомощь_Менеджер 		= Справочники.Пользователи.ПустаяСсылка(); 
		КТСПомощь_Организация 	= Справочники.Организации.ПустаяСсылка(); 
	КонецЕсли;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо установить настройки 'КТС Помощь'. Обратитесь в службу поддержки 777.";
		Сообщение.Сообщить(); 
		Возврат;				
	КонецЕсли;
	
	Настройки.Свойство("ПроцентПродажыУслуги", ПроцентПродажыУслуги);
	Настройки.Свойство("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	
	КТСПомощь_ПроцентПродажыУслуги 		= ПроцентПродажыУслуги;
	КТСПомощь_ПроцентВыполненияУслуги 	= ПроцентИсполненияУслуги;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ОбновитьДополнительнуюИнформациюКТСПомощьНаСервере()
 
&НаСервере
Процедура ОчиститьДополнительнуюИнформациюКТСПомощь()

	КТСПомощь_ТЗ_ДополнительнаяИнформация.Очистить();
	
	КТСПомощь_Клиент 		= Справочники.Партнеры.ПустаяСсылка(); 
	КТСПомощь_Менеджер 		= Справочники.Пользователи.ПустаяСсылка(); 
	КТСПомощь_Организация 	= Справочники.Организации.ПустаяСсылка();
	
	КТСПомощь_ПроцентПродажыУслуги 		= 0;
	КТСПомощь_ПроцентВыполненияУслуги 	= 0;
	
	КТСПомощь_СуммаДокумента			= 0;

КонецПроцедуры // ОчиститьДополнительнуюИнформациюКТСПомощь()
 


&НаСервере
Функция УстановитьВидимостьЗакладкиКТСПомощь()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ГруппыПользователейСостав.Ссылка,
	                      |	ГруппыПользователейСостав.Пользователь
	                      |ПОМЕСТИТЬ ГруппыПользователя
	                      |ИЗ
	                      |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	                      |ГДЕ
	                      |	ГруппыПользователейСостав.Пользователь = &Пользователь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
	                      |ИЗ
	                      |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	                      |ГДЕ
	                      |	(ГруппыДоступаПользователи.Пользователь В
	                      |				(ВЫБРАТЬ
	                      |					ГруппыПользователя.Ссылка
	                      |				ИЗ
	                      |					ГруппыПользователя КАК ГруппыПользователя)
	                      |			ИЛИ ГруппыДоступаПользователи.Пользователь = &Пользователь)");
						  
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	МассивРезультатов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Профиль");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат (МассивРезультатов.Найти(Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("3c456953-0d3b-11e2-9d4d-001e673c80fc"))) <> Неопределено) ИЛИ РольДоступна("ПолныеПрава");

КонецФункции // УстановитьВидимостьЗакладки()








&НаКлиенте
Процедура ПечататьШтрихкод(Команда)
	
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_Корзина, ТЗ_КорзинаПродакта);
	
	Если РабочаяКорзина.Количество() Тогда
		
		ТабличныйДокумент = СформироватьКолекциюПечатныхФорм();	
		ТабличныйДокумент.ИмяПринтера = "eti_shtrih";
		ТабличныйДокумент.Напечатать(); //Показать(); //
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьКолекциюПечатныхФорм()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПРИХОДНЫЙ_ОРДЕР_ПЕЧАТЬ_ШТРИХКОДА";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.МасштабПечати			  = 85;
		
	Макет = РеквизитФормыВЗначение("Объект").GetLibrary("Обработка 'Внешние печатные формы'").ПолучитьМакет("ПФ_MXL_ПриходныйОрдерНаТовары_МакетШтрихкода");
		
	НомерТипаДокумента = 0;	
	РабочаяКорзина 	   = ?(ИспользуетсяКорзинаПродакта, ТЗ_Корзина, ТЗ_КорзинаПродакта);	
	
	Для Каждого СтрокаИзКорзины Из РабочаяКорзина Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ Штрихкод ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", СтрокаИзКорзины.Номенклатура);
		ВыборкаШтрихкод = Запрос.Выполнить().Выбрать();
		Если ВыборкаШтрихкод.Следующий() Тогда
			ЗначениеШтрихкода = ВыборкаШтрихкод.Штрихкод;
		Иначе
			Продолжить;
		КонецЕсли;
				
		ОбластьКодТовара 	 		   = Макет.ПолучитьОбласть("КодТовара");
		ОбластьКодТовара.Параметры.Код = Формат(Число(СтрокаИзКорзины.Номенклатура.Код), "ЧГ=0");
			
		ОбластьШтрихкода 	= Макет.ПолучитьОбласть("ОбластьШтрихкода");
		ВнешняяКомпонента 	= Обработки.ПечатьЭтикетокИЦенников.ПодключитьВнешнююКомпонентуПечатиШтрихкода();	
		Эталон 				= Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
		КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

		Рисунок = ОбластьШтрихкода.Рисунки[0];
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",         4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    10);
		Рисунок.Картинка = Обработки.ПечатьЭтикетокИЦенников.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
			
		Для НомерШтрихкода = 1 ПО СтрокаИзКорзины.КоличествоУпаковок Цикл
        	Если НомерШтрихкода > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКодТовара);
			ТабличныйДокумент.Вывести(ОбластьШтрихкода);
		КонецЦикла;
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

	
КонецФункции





// ПДО

&НаКлиенте
Процедура НазначитьСкидкуПДО(Команда)
	Если ИспользуетсяКорзинаПродакта Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='ПДО нельзя расчитать в корзине для продакт-менеджера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	АдресКорзины = ПоместитьКорзинуВременноеХранилище();
	Результат = ОткрытьФормуМодально("ВнешняяОбработка."+ПолучитьБиблиотекуФорм("Регл. расчет стоимости сертификатов")+".Форма.ФормаУстановкиСкидокПДО",
				Новый Структура("АдресКорзины, Соглашение", АдресКорзины, Соглашение));
				
	Если Результат <> Неопределено Тогда
		ЗагрузитьКорзинуИзВременногоХранилища(Результат);			
	КонецЕсли;			
КонецПроцедуры

&НаСервере
Функция ПоместитьКорзинуВременноеХранилище()
	УстановитьПривилегированныйРежим(Истина);
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
	Возврат ПоместитьВоВременноеХранилище(РабочаяКорзина.Выгрузить(), УникальныйИдентификатор);
КонецФункции // ПоместитьКорзинуВременноеХранилище()

&НаСервере
Процедура ЗагрузитьКорзинуИзВременногоХранилища(АдресКорзины)
	УстановитьПривилегированныйРежим(Истина);
	РабочаяКорзина = ?(ИспользуетсяКорзинаПродакта, ТЗ_КорзинаПродакта, ТЗ_Корзина);
    РабочаяКорзина.Загрузить(ПолучитьИзВременногоХранилища(АдресКорзины));	
КонецПроцедуры // ЗагрузитьКорзинуИзВременногоХранилища()



















&НаКлиенте
Процедура Оплата_АктивныеПоездкиПриАктивизацииСтроки(Элемент)
	Оплата_ОбновитьСписокПартнеров();
КонецПроцедуры

&НаКлиенте
Процедура Оплата_ПартнерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Оплата_ПартнерыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Оплата_ПартнерыСуммаНазначеннаяМенеджеромПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Оплата_Партнеры.ТекущиеДанные;
	ТекущийДокумент = Элементы.Оплата_АктивныеПоездки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущийДокумент <> Неопределено Тогда
		ЗаписатьТекущуюСтрокуПартнеровВРегистр(ТекущиеДанные.ПолучитьИдентификатор(), ТекущийДокумент.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТекущуюСтрокуПартнеровВРегистр(ИдентификаторСтроки, ИдентификаторСтрокиДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаОплата = Оплата_АктивныеПоездки.НайтиПоИдентификатору(ИдентификаторСтрокиДокумента); 	
	ТекущаяСтрока = Оплата_Партнеры.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутомФинансы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПоездки.Установить(СтрокаОплата.Ссылка);
	НаборЗаписей.Отбор.Партнер.Установить(ТекущаяСтрока.Партнер);
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ТекущаяСтрока);
	Запись.ДокументПоездки = СтрокаОплата.Ссылка;
	
	НаборЗаписей.Записать();

КонецПроцедуры // ЗаписатьТекущуюСтрокуПартнеровВрегистр()

&НаКлиенте
Процедура Оплаты_Обновить(Команда)
	Оплата_ОбновитьСписокДокументов();
	Оплата_ОбновитьСписокПартнеров();
КонецПроцедуры

&НаСервере
Процедура Оплата_ОбновитьСписокДокументов()

	УстановитьПривилегированныйРежим(Истина);
	
	//Запоминаем текущую строку
	ТекущаяСтрока = Элементы.Оплата_АктивныеПоездки.ТекущаяСтрока;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Оплата_АктивныеПоездки.НайтиПоИдентификатору(ТекущаяСтрока);
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Ссылка", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
       	|	Ссылка,
		|   ПРЕДСТАВЛЕНИЕ(Ссылка) 			КАК ДокументПоездка,
		|   ПРЕДСТАВЛЕНИЕ(ВариантМаршрута) 	КАК ВариантМаршрута,                     
		|   Водитель			 			КАК Водитель
       	|ИЗ
       	|	Документ.ПоездкаЗаМаршрутом 
	   	|ГДЕ
       	|	Проведен
       	|И 	СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)";
   	Оплата_АктивныеПоездки.Загрузить(Запрос.Выполнить().Выгрузить());	
   
   	Если НЕ ПараметрыОтбора = Неопределено Тогда
		РезультатПоиска = Оплата_АктивныеПоездки.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() Тогда
			Элементы.Оплата_АктивныеПоездки.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();		
		КонецЕсли;
	КонецЕсли;
   
КонецПроцедуры // Оплата_ОбновитьСписокДокументов()

&НаКлиенте
Процедура Оплата_ОбновитьСписокПартнеров()
 	
	ТекущийДокумент = Элементы.Оплата_АктивныеПоездки.ТекущиеДанные;		
    Если ТекущийДокумент <> Неопределено Тогда
		Оплата_ОбновитьСписокПартнеровСервер(ТекущийДокумент.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры // Оплата_ОбновитьСписокДокументов()

&НаСервере
Процедура Оплата_ОбновитьСписокПартнеровСервер(ИдентификаторСтрокиДокумента)

	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаОплата = Оплата_АктивныеПоездки.НайтиПоИдентификатору(ИдентификаторСтрокиДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
      	|	Партнер						КАК Партнер,
      	|	СуммаУчета					КАК СуммаУчета,
      	|	СуммаПолученнаяВодителем	КАК СуммаПолученнаяВодителем,
      	|	СуммаПоФакту				КАК СуммаПоФакту,
      	|	СуммаНазначеннаяМенеджером 	КАК СуммаНазначеннаяМенеджером
      	|ИЗ
      	|	РегистрСведений.ПоездкаЗаМаршрутомФинансы
      	|ГДЕ
      	|	ДокументПоездки = &ДокументПоездки
      	|
      	|УПОРЯДОЧИТЬ ПО
      	|	Порядок";					  
	Запрос.УстановитьПараметр("ДокументПоездки", СтрокаОплата.Ссылка);	
	Оплата_Партнеры.Загрузить(Запрос.Выполнить().Выгрузить());	

КонецПроцедуры // Оплата_ОбновитьСписокДокументовСервер()





&НаКлиенте
Процедура ТЗ_КорзинаВариантОбеспеченияПриИзменении(Элемент)
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьНазначение(Номенклатура, Характеристика, Склад)
	Запрос  		= Новый Запрос();
	Запрос.Текст 	= ТекстЗапросаОбеспечогоНазначения();
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура); 
	Запрос.УстановитьПараметр("Характеристика",Характеристика);
	Запрос.УстановитьПараметр("Склад",Склад);
	Выборка = Запрос.Выполнить().Выбрать();

	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл Соответствие.Вставить(Выборка.Ссылка); КонецЦикла;
	Возврат Соответствие;

КонецФункции

&НаСервере
Функция ТекстЗапросаОбеспечогоНазначения()
 ТекстЗапроса = "ВЫБРАТЬ
                |	ОбеспечениеЗаказовОстатки.Номенклатура,
                |	ОбеспечениеЗаказовОстатки.Характеристика,
                |	ОбеспечениеЗаказовОстатки.Склад,
                |	ОбеспечениеЗаказовОстатки.Назначение КАК Ссылка,
                |	ОбеспечениеЗаказовОстатки.ПотребностьОстаток,
                |	ОбеспечениеЗаказовОстатки.КЗаказуОстаток,
                |	ОбеспечениеЗаказовОстатки.ЗаказаноОстаток
                |ИЗ
                |	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
                |			,
                |			Номенклатура = &Номенклатура
                |				И Склад = &Склад) КАК ОбеспечениеЗаказовОстатки";
	Возврат ТекстЗапроса;


КонецФункции // ТекстЗапросаОбеспечогоНазначения()

&НаКлиенте
Процедура ТЗ_КорзинаНазначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТЗ_Корзина.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	
	Соответствие = ПолучитьНазначение(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.Склад);
	Элементы.ТЗ_КорзинаНазначение.СписокВыбора.Очистить();
	
	Для Каждого ЭлС ИЗ Соответствие Цикл 
		Элементы.ТЗ_КорзинаНазначение.СписокВыбора.Добавить(ЭлС.Ключ, , , ?(ЭлС.Значение = 0, БиблиотекаКартинок.Удалить, БиблиотекаКартинок.Документ)); 
	КонецЦикла;
	

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает текст запроса
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка - текст запроса  
//
&НаСервере
Функция ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка			КАК Ссылка,
		|	ВидыНоменклатуры.ЭтоГруппа		КАК ЭтоГруппа,
		|	ВидыНоменклатуры.Наименование	КАК Наименование,
		|	ВидыНоменклатуры.Родитель		КАК Родитель,
		|	IsNull(ТоварныеКатегории.Ссылка, ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)) КАК ТоварнаяКатегория,
		|	ТоварныеКатегории.ЭтоГруппа		КАК ЭтоГруппа_ТоварныеКатегории,
		|	ТоварныеКатегории.Наименование 	КАК Наименование_ТоварныеКатегории,
		|	ТоварныеКатегории.Родитель	 	КАК Родитель_ТоварныеКатегории
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории 
		|ПО ТоварныеКатегории.Владелец = ВидыНоменклатуры.Ссылка
		|
		//|ГДЕ
		//|	ТоварныеКатегории.ПометкаУдаления = Ложь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыНоменклатуры.ЭтоГруппа ИЕРАРХИЯ,
		|	ВидыНоменклатуры.Наименование Возр,
		|	ТоварныеКатегории.ЭтоГруппа ИЕРАРХИЯ,
		|	ТоварныеКатегории.Наименование Возр	
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры()
 


// Процедура инициализирует ДеревоЗначений Навигация_ВидыНоменклатуры
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИнициализироватьВидыНоменклатуры()
	
	Перем ТекущийУровень;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоВидыНоменклатуры = РеквизитФормыВЗначение("Навигация_ВидыНоменклатуры");
	ДеревоВидыНоменклатуры.Строки.Очистить();
	ПараметрОтбора = Новый Структура("Ссылка");
	ПараметрОтбораКатегории = Новый Структура("ТоварнаяКатегория");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнициализацииВидовНоменклатуры();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрОтбора, Выборка); 
		РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
		Если РезультатПоиска.Количество() = 0 Тогда
			Если Выборка.Родитель.Пустая() Тогда
				СтрокаДереваВид = ДеревоВидыНоменклатуры.Строки.Добавить();
				СтрокаДереваВид.Ссылка = Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа = ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование = Выборка.Наименование;
			Иначе
				ПараметрОтбора.Вставить("Ссылка", Выборка.Родитель);
				РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбора, Истина);
				СтрокаДереваВид = РезультатПоиска[0].Строки.Добавить();
				СтрокаДереваВид.Ссылка = Выборка.Ссылка;
				СтрокаДереваВид.ЭтоГруппа = ?(Выборка.ЭтоГруппа, 0, 3);
				СтрокаДереваВид.Наименование = Выборка.Наименование;		
			КонецЕсли;
		Иначе
			СтрокаДереваВид = РезультатПоиска[0];	
		КонецЕсли;
		
		Если НЕ Выборка.ТоварнаяКатегория.Пустая() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрОтбораКатегории, Выборка); 
			РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
			Если РезультатПоиска.Количество() = 0 Тогда
				Если Выборка.Родитель_ТоварныеКатегории.Пустая() Тогда
					СтрокаДереваКатегория = СтрокаДереваВид.Строки.Добавить();
					СтрокаДереваКатегория.Ссылка = Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа = ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование = Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;
				Иначе
					ПараметрОтбораКатегории.Вставить("ТоварнаяКатегория", Выборка.Родитель_ТоварныеКатегории);
					РезультатПоиска = ДеревоВидыНоменклатуры.Строки.НайтиСтроки(ПараметрОтбораКатегории, Истина);
					СтрокаДереваКатегория = РезультатПоиска[0].Строки.Добавить();
					СтрокаДереваКатегория.Ссылка = Выборка.Ссылка;
					СтрокаДереваКатегория.ЭтоГруппа = ?(Выборка.ЭтоГруппа_ТоварныеКатегории, 2, 5);
					СтрокаДереваКатегория.Наименование = Выборка.Наименование_ТоварныеКатегории;
					СтрокаДереваКатегория.ТоварнаяКатегория = Выборка.ТоварнаяКатегория;		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоВидыНоменклатуры, "Навигация_ВидыНоменклатуры");
	
КонецПроцедуры  // ИнициализироватьВидыНоменклатуры()

// Закодирует  строку в 
// Параметры:
//  value  - строка - кодируемая строка
//
Функция ЗакодироватьСтроку(Строка)

    Симв = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
    Результат	= "";        
  	Длина 		= СтрДлина(Строка);        
    
    Для i = 1 По  Длина Цикл        
        СимволASCII		= Сред(Строка, i, 1 );        
      	КодСимвола	 	= КодСимволаASCII(СимволASCII);
        Результат 		= Результат + Сред( Симв, КодСимвола*3 + 1, 3 );        
    КонецЦикла;
    
    
    
    Возврат Результат;
КонецФункции

//Функция обработивает символ и возвращает код
//
// Параметры:
//  Символ  - строка -  КодUNICODE
//
// Возвращаемое значение:
//   Строка   - код символа ASCII
//
Функция КодСимволаASCII(Символ) 
   КодUNICODE = КодСимвола(Символ); 
   Если ((КодUNICODE > 1039) И (КодUNICODE < 1104)) Тогда 
       Возврат (КодUNICODE - 848); 
   ИначеЕсли КодUNICODE = 8470 Тогда 
       Возврат 185; 
   ИначеЕсли КодUNICODE = 1105 Тогда 
       Возврат 184; 
   ИначеЕсли КодUNICODE = 1025 Тогда 
       Возврат 168; 
   Иначе 
       Возврат КодUNICODE; 
   КонецЕсли; 
КонецФункции




/////////////////////////////////////////////// КОРЗИНА ДЛЯ ПРОДАКТА ////////////////////////////////////////////////

&НаКлиенте
Процедура Корзина_Менеджер(Команда)
	Элементы.ГруппаКорзинаСтраницы.ТекущаяСтраница 					= Элементы.ГруппаКорзинаМенеджера;
	Элементы.ГруппаСтраницыВыбораСкладаПолучателя.ТекущаяСтраница 	= Элементы.ГруппаНетСкладаПолучателя;
	Элементы.Корзина_Менеджер.Пометка 								= Истина;
	Элементы.Корзина_ПродактМенеджер.Пометка 						= Ложь;
	ИспользуетсяКорзинаПродакта										= Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ПродактМенеджер(Команда)
	Элементы.ГруппаКорзинаСтраницы.ТекущаяСтраница 					= Элементы.ГруппаКорзинаПродакта;
	Элементы.ГруппаСтраницыВыбораСкладаПолучателя.ТекущаяСтраница 	= Элементы.ГруппаСкладПолучатель;
	Элементы.Корзина_Менеджер.Пометка 								= Ложь;
	Элементы.Корзина_ПродактМенеджер.Пометка 						= Истина;
	ИспользуетсяКорзинаПродакта										= Истина;
КонецПроцедуры

&НаКлиенте
Процедура Матрица_СкладПолучательПриИзменении(Элемент)
	Если ТЗ_КорзинаПродакта.Количество() > 0 Тогда
		ОбновитьСодержанииеКорзиныКлиент();
	КонецЕсли;
КонецПроцедуры



&НаСервереБезКонтекста
Процедура ЗаписатьКатегорияНоменклатурыНаСервере(МассивНоменклатуры,ТоварнаяКатегория)
	
	Если  ТоварнаяКатегория<>Неопределено Тогда
		ТоварнаяКатегорияСсылка	= Справочники.ТоварныеКатегории.ПолучитьСсылку(Новый УникальныйИдентификатор(ТоварнаяКатегория));
	Иначе
		ТоварнаяКатегорияСсылка = Справочники.ТоварныеКатегории.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого Номенклатура Из  МассивНоменклатуры Цикл
		НоменклатураСсылка 				=  Номенклатура;
		СправочникОбъект				=	НоменклатураСсылка.ПолучитьОбъект();
		Если ТоварнаяКатегорияСсылка	= СправочникОбъект.ТоварнаяКатегория Тогда
			Продолжить;	
		КонецЕсли;
		СправочникОбъект.ТоварнаяКатегория  =	ТоварнаяКатегорияСсылка;
		Попытка
        		СправочникОбъект.Записать();
		Исключение
				 Сообщить("Не удалось записать объект " + НоменклатураСсылка + "",СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЦикла; 
	  	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМенюТоварныеКатегорииНоменклатуры(ВидНоменклатуры)
	
	Перем Библиотека;
	
	УжеНаФорме = Новый Соответствие;
	ПодчиненныеЭлементыМеню = Элементы.МенюГруппаКатегорииНоменклатуры.ПодчиненныеЭлементы;
	Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыМеню Цикл
		УжеНаФорме[ПодчиненныйЭлемент.Имя] = ПодчиненныйЭлемент;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросовИнициализацииКомандВидовНоменклатуры();
	Запрос.УстановитьПараметр("Владелец", ВидНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяКоманды = "uid" + СтрЗаменить(Выборка.Ссылка.УникальныйИдентификатор(), "-", "_");
		Если УжеНаФорме[ИмяКоманды] = Неопределено Тогда
			
			Если Библиотека = Неопределено Тогда
				Библиотека = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
			КонецЕсли;
			
			ПараметрыКоманды = Новый Структура;
			ПараметрыКоманды.Вставить("Имя", ИмяКоманды);
			ПараметрыКоманды.Вставить("Действие", "УстановитьТоварнуюКатегориюНоменклатуры");
			ПараметрыКоманды.Вставить("Картинка", БиблиотекаКартинок.ВнешнийИсточникДанныхКуб);
			Попытка
				Библиотека.ДобавитьКомандуВКоллекциюКомандФормы(Команды, ПараметрыКоманды);
			Исключение
				Продолжить;
			КонецПопытки;

			
			ПараметрыКнопки = Новый Структура;
			ПараметрыКнопки.Вставить("Имя", 		ИмяКоманды);
			ПараметрыКнопки.Вставить("Вид", 		ВидКнопкиФормы.КнопкаКоманднойПанели);
			ПараметрыКнопки.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
			ПараметрыКнопки.Вставить("ИмяКоманды", 	ИмяКоманды);
			ПараметрыКнопки.Вставить("Заголовок", 	Выборка.Наименование);
			Попытка
				Библиотека.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопки, Элементы.МенюГруппаКатегорииНоменклатуры);	
			Исключение
				Продолжить;
			КонецПопытки;
			
			ФормаБудетПерерисована = Истина;
			
		Иначе
			
			УжеНаФорме.Удалить(ИмяКоманды);	
			
		КонецЕсли;
		
	КонецЦикла;

	
	
	Для каждого ПодчиненныйЭлемент Из УжеНаФорме Цикл
		
		Если ПодчиненныйЭлемент.Значение = ПодчиненныеЭлементыМеню.УдалитьТоварнуюКатегорияНоменклатуры Тогда
			Продолжить;		
		КонецЕсли;
		РезультаПоиска = Команды.Найти(ПодчиненныйЭлемент.Ключ);
		Если РезультаПоиска <> Неопределено Тогда
			Команды.Удалить(РезультаПоиска);
		КонецЕсли;
		Элементы.Удалить(ПодчиненныйЭлемент.Значение);
		ФормаБудетПерерисована = Истина;		
	
	КонецЦикла; 
		
КонецПроцедуры



&НаСервере
Функция ПолучитьТекстЗапросовИнициализацииКомандВидовНоменклатуры()

	ТекстЗапроса="ВЫБРАТЬ
			|	ТоварныеКатегории.Ссылка,
			|	ТоварныеКатегории.Наименование
			|ИЗ
			|	Справочник.ТоварныеКатегории КАК ТоварныеКатегории
			|ГДЕ
			|	ТоварныеКатегории.Владелец = &Владелец
			|И	ТоварныеКатегории.ЭтоГруппа = Ложь	
			|И 	ТоварныеКатегории.ПометкаУдаления = Ложь";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросовИнициализацииКомандВидовНоменклатуры()


&НаКлиенте
Процедура УдалитьТоварнуюКатегорияНоменклатуры(Команда)
	Если ИсточникВариантОтбора = "НавигацияВидыНоменклатуры"   Тогда
		ТекущаяСтрока 		= Элементы.ТЗ_Номенклатура.ТекущаяСтрока;       
		ТекущиеДанные 		= Элементы.ТЗ_Номенклатура.ТекущиеДанные;
		ТекущийЭлементТЗ 	= Элементы.ТЗ_Номенклатура.ТекущийЭлемент;
        ВыделенныеСтроки	= Элементы.ТЗ_Номенклатура.ВыделенныеСтроки;
		МассивНоменклатуры	= Новый Массив();
		Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
			Для каждого Строка Из  ВыделенныеСтроки Цикл
				Строка	 	= ТЗ_Номенклатура.НайтиПоИдентификатору(Строка);
				МассивНоменклатуры.Добавить(Строка.Номенклатура);
			КонецЦикла;  
			ЗаписатьКатегорияНоменклатурыНаСервере(МассивНоменклатуры,Неопределено);
			Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьТоварнуюКатегориюНоменклатуры(Команда)
	УИТоварнаяКатегория = СтрЗаменить(СтрЗаменить(Команда.Имя, "uid", ""), "_", "-");

	Если ИсточникВариантОтбора = "НавигацияВидыНоменклатуры"   Тогда
		ТекущаяСтрока 		= Элементы.ТЗ_Номенклатура.ТекущаяСтрока;       
		ТекущиеДанные 		= Элементы.ТЗ_Номенклатура.ТекущиеДанные;
		ТекущийЭлементТЗ 	= Элементы.ТЗ_Номенклатура.ТекущийЭлемент;
        ВыделенныеСтроки	= Элементы.ТЗ_Номенклатура.ВыделенныеСтроки;
		МассивНоменклатуры	= Новый Массив();
		Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
			Для каждого Строка Из  ВыделенныеСтроки Цикл
				Строка	 	= ТЗ_Номенклатура.НайтиПоИдентификатору(Строка);
				МассивНоменклатуры.Добавить(Строка.Номенклатура);
			КонецЦикла;  
			ЗаписатьКатегорияНоменклатурыНаСервере(МассивНоменклатуры,УИТоварнаяКатегория);
			Загрузить_ТЗ_НоменклатураКлиент(Навигация_СсылкаНаИсточник);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры




