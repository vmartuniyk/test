
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Параметры.СоглашениеСклад) = Истина Тогда
		СоглашениеСклад = Параметры.СоглашениеСклад;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СоглашениеВидЦены) = Истина Тогда
		СоглашениеВидЦены = Параметры.СоглашениеВидЦены;	
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(Параметры.Соглашение) = Истина Тогда
		СоглашениеСклад = Параметры.Соглашение;	
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Параметры.Партнер_Скидка) = Истина Тогда
		Партнер_Скидка = Параметры.Партнер_Скидка;	
	КонецЕсли;   
	
	Если ЗначениеЗаполнено(Параметры.Корзина) = Истина Тогда
		СписокНоменклатуры =  ЗначениеИзСтрокиВнутр(Параметры.Корзина); 	
		ТЗ_Корзина.Загрузить(СписокНоменклатуры);
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Параметры.ПолеВвода) = Истина Тогда
		ПолеВвода =  Параметры.ПолеВвода; 	
	КонецЕсли;  
	
	ИнициализироватьОбщиеПараметрыФормы();

	УстановитьВидимостьПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ПустаяСтрока(ПолеВвода)=Ложь Тогда  		
		ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду(ПолеВвода);
		ПодключитьОбработчикОжидания("УстановитьТекущиеЭлементТСД_Номенклатура", 0.1, Истина);   	
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ПриЗакрытии()
	Результат = ПолучитьКорзинуБРМ(); 
	Оповестить("ПослеЗакрытииФормаНабивкиНоменклатуры",Результат);
КонецПроцедуры

#КонецОбласти                              

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеВводаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду(Текст);
	ПодключитьОбработчикОжидания("УстановитьТекущиеЭлементТСД_Номенклатура", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	УстановитьВидимостьПоУмолчанию();
КонецПроцедуры

										
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перенести(Команда)
	Результат = ПолучитьКорзинуБРМ(); 
	Закрыть(Результат);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВидимостьГруппФормы
&НаСервере
Процедура УстановитьВидимостьПоУмолчанию()
	Элементы.ГруппаТаблица.Видимость = Истина;
	Элементы.ГруппаОшибка.Видимость = ЛОЖЬ;
	Элементы.ГруппаФормаНабивкиНоменклатуры.Видимость = ЛОЖЬ; 
КонецПроцедуры // УстановитьВидимостьПоУмолчанию()

&НаСервере
Процедура УстановитьВидимостьДляСообщенияОбОшибке(ПараметрыФормы)
	
	
	СообщениеОбОшибке 		= ПараметрыФормы.СообщениеОбОшибке;

	ПолеЗаголовок			= НСтр("ru = 'Код штрихкода %КодШтрихкода%'");
	Кнопка					= СтрЗаменить(ПолеЗаголовок,"%КодШтрихкода%",ПараметрыФормы.КодШтрихкода);

	ЦветОшибки 				= ПараметрыФормы.ЦветОшибки; 
	Если ЦветОшибки = 1 Тогда //Зеленый   0,128,0
		Элементы.СообщениеОбОшибке.ЦветТекста = Новый Цвет(0, 128, 0);  	
	ИначеЕсли  ЦветОшибки = 2 Тогда //Голубой  15,130,255
		Элементы.СообщениеОбОшибке.ЦветТекста = Новый Цвет(15, 130, 255);  	
	ИначеЕсли ЦветОшибки = 3 Тогда  //204 153 255   153 92 123
		Элементы.СообщениеОбОшибке.ЦветТекста = Новый Цвет(153, 92, 123); 
	ИначеЕсли ЦветОшибки =4 Тогда  //95 158 160
		Элементы.СообщениеОбОшибке.ЦветТекста = Новый Цвет(95, 158, 160); 
	Иначе  //Красный 251, 0, 0
		Элементы.СообщениеОбОшибке.ЦветТекста = Новый Цвет(251, 0, 0); 	
	КонецЕсли;

	Элементы.ГруппаТаблица.Видимость = ЛОЖЬ;
	Элементы.ГруппаОшибка.Видимость = Истина;
	Элементы.ГруппаФормаНабивкиНоменклатуры.Видимость = ЛОЖЬ; 
КонецПроцедуры // УстановитьВидимостьДляСообщенияОбОшибке()

&НаСервере
Процедура УстановитьВидимостьНабивкаНоменклатуры()
	Элементы.ЕдиницаИзмерения.СписокВыбора.ЗагрузитьЗначения(ВыбратьУпаковку());
	Количество = 1;
	Элементы.ГруппаТаблица.Видимость = ЛОЖЬ;
	Элементы.ГруппаОшибка.Видимость = ЛОЖЬ;
	Элементы.ГруппаФормаНабивкиНоменклатуры.Видимость = Истина; 
КонецПроцедуры // УстановитьВидимостьНабивкаНоменклатуры()

#КонецОбласти

#Область СлужебныеПроцедури

&НаСервере
Процедура ИнициализироватьОбщиеПараметрыФормы(НоменклатураПреобразования = Неопределено)
	
	ТЗ = ТЗ_Корзина.Выгрузить();    	
	ОбщееКоличествоПоФакту = ТЗ.Итог("КоличествоУпаковок");
	
	Если НоменклатураПреобразования <> Неопределено 
		И ТипЗнч(НоменклатураПреобразования) = Тип("СправочникСсылка.Номенклатура") Тогда
		Код = НоменклатураПреобразования.Код;
		КоличествоПоФакту = ПолучитьКоличествоПоФактуТовара(НоменклатураПреобразования);
		
	Иначе
		Код = "";
		КоличествоПоФакту = 0;		
	КонецЕсли;  	
	ЗаполнитьСерийныеНомераПоНоменклатуре(НоменклатураПреобразования); 
КонецПроцедуры // ИнициализироватьОбщиеПараметрыФормы()

&НаСервере
Функция ПолучитьКоличествоПоФактуТовара(НоменклатураПреобразования)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаКоличествоПоФакту();
	Запрос.УстановитьПараметр("ТабТовары",ТЗ_Корзина.Выгрузить()); 
	Запрос.УстановитьПараметр("Номенклатура",НоменклатураПреобразования);
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Следующий(),Выборка.КоличествоУпаковок, 0); 

КонецФункции // ПолучитьКоличествоПоФактуТовара(НоменклатураПреобразования)()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаКоличествоПоФакту()
	ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ТабТовары.Номенклатура,
				|	ТабТовары.КоличествоУпаковок
				|ПОМЕСТИТЬ Товары
				|ИЗ
				|	&ТабТовары КАК ТабТовары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок
				|ИЗ
				|	Товары КАК Товары
				|ГДЕ
				|	Товары.Номенклатура = &Номенклатура";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаКоличествоПоФакту()

 &НаКлиенте
Процедура УстановитьТекущиеЭлементТСД_Номенклатура()
	ТекущийЭлемент = Элементы.ПолеВвода;
КонецПроцедуры // УстановитьТекущиеЭлементТСД_Номенклатура()

&НаСервере
Процедура ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду(ТСД_Номенклатура)
	
	Если ПустаяСтрока(ТСД_Номенклатура) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СообщениеОбОшибке", НСтр("ru='Вместо кода товару/штрихкоду/серийного номера/артикулу введена пустая строка.'"));
		ПараметрыФормы.Вставить("ЦветОшибки",1);
		ПараметрыФормы.Вставить("КодШтрихкода","-//-"); 	
		УстановитьВидимостьДляСообщенияОбОшибке(ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	ЦветОшибки = 0;
	ВводПоШтрихкоду  = Ложь;
	ВводКода 		 = Ложь;
	ВвестиКоличество = Ложь;
	ВводПоАртикулу	 = Ложь;

	СообщениеОбОшибке   = "";
	
	СтруктураДанных = ЗаполнитьНачальныеДанные();
	СтруктураОшибок = ЗаполнитьСтруктуруОшибок(ТСД_Номенклатура);
	
	ДобавитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура, ВводПоШтрихкоду, СтруктураДанных, СтруктураОшибок);
			
	Если ВводПоШтрихкоду  = Истина  Тогда
		ДобавитьНоменклатуруПоШтрихКодуНаСервере(ТСД_Номенклатура, СтруктураДанных,  ВвестиКоличество, ВводКода,СтруктураОшибок);
		
		Если ВвестиКоличество Тогда
			Номенклатура = СтруктураДанных.Номенклатура;
			УстановитьВидимостьНабивкаНоменклатуры();
			ТСД_Номенклатура = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ВводКода  = Истина  Тогда
		ДобавитьНоменклатуруПоКодуНаСервере(ТСД_Номенклатура, СтруктураДанных, ВводПоАртикулу, СтруктураОшибок);
	КонецЕсли;
	
	Если ВводПоАртикулу = Истина Тогда
		ДобавитьНоменклатуруПоАртикулуНаСервере(ТСД_Номенклатура,СтруктураДанных, СтруктураОшибок);
	КонецЕсли;
	
	Если  ПустаяСтрока(СтруктураОшибок.СообщениеОбОшибке) = ЛОЖЬ Тогда
		УстановитьВидимостьДляСообщенияОбОшибке(СтруктураОшибок);
	ИначеЕсли СтруктураДанных.Номенклатура = Неопределено Тогда
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар не найдено!'");
		УстановитьВидимостьДляСообщенияОбОшибке(СтруктураОшибок);
	КонецЕсли;
	
	ТСД_Номенклатура = "";
	
КонецПроцедуры // ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду()

&НаКлиенте
Процедура ПослеЗакрытииФормаНабивкиНоменклатуры(Результат,ДопольнительныеПараметры) Экспорт 
	Если Результат = Неопределено ИЛИ ДопольнительныеПараметры = Неопределено  Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество()>0 
		И ТипЗнч(ДопольнительныеПараметры) = Тип("Структура") И ДопольнительныеПараметры.Количество()>0  Тогда
		ЗаполнитьЗначенияСвойств(ДопольнительныеПараметры,Результат);
		ДобавитьНоменклатуруВКорзину(ДопольнительныеПараметры);
	КонецЕсли;  	

КонецПроцедуры // ПослеЗакрытииФормаНабивкиНоменклатуры()

&НаСервереБезКонтекста
Функция ЗаполнитьНачальныеДанные()
	
	СтруктураДанный = Новый Структура; 
	СтруктураДанный.Вставить("Номенклатура",);
	СтруктураДанный.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураДанный.Вставить("Коэффициент",1); 
	СтруктураДанный.Вставить("Упаковка",Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	СтруктураДанный.Вставить("ЕдиницаИзмерения",Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	СтруктураДанный.Вставить("СерийныйНомер");
	СтруктураДанный.Вставить("КоличествоУпаковок",1);  
	
	Возврат СтруктураДанный;
КонецФункции // ЗаполнитьНачальныеДанные()

&НаСервере
Функция ЗаполнитьСтруктуруОшибок(ТСД_Номенклатура)
	
	СтруктураОшибок = Новый Структура; 
	СтруктураОшибок.Вставить("СообщениеОбОшибке","");
	СтруктураОшибок.Вставить("ЦветОшибки",0); 
	СтруктураОшибок.Вставить("КодШтрихкода",ТСД_Номенклатура); 
	Возврат СтруктураОшибок;
КонецФункции // ЗаполнитьСтруктуруОшибок()

&НаСервере
Процедура ДобавитьНоменклатуруВКорзину(СтруктураДанные)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		СтруктураДанные.Коэффициент = СтруктураДанные.ЕдиницаИзмерения.Коэффициент;
	Иначе
		СтруктураДанные.Коэффициент = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.ЕдиницаИзмерения)=ЛОЖЬ Тогда
	    СтруктураДанные.ЕдиницаИзмерения =  СтруктураДанные.Номенклатура.ЕдиницаИзмерения;	
	КонецЕсли;
	
	ПараметрыОтбора = ПолучитьПараметрыОтбора(СтруктураДанные);	
	ТЗ_Товары =  ТЗ_Корзина.Выгрузить();
	РезультатСтрока = ТЗ_Товары.НайтиСтроки(ПараметрыОтбора);
	
	Если РезультатСтрока.Количество() Тогда
		РезультатСтрока[0].КоличествоУпаковок = РезультатСтрока[0].КоличествоУпаковок + СтруктураДанные.КоличествоУпаковок;
		ТЗ_Корзина.Загрузить(ТЗ_Товары);
	Иначе
		РезультатСтрока = ТЗ_Корзина.Добавить();
		РезультатСтрока.Номенклатура   	   = СтруктураДанные.Номенклатура;
		РезультатСтрока.Характеристика     = СтруктураДанные.Характеристика;
		РезультатСтрока.Склад			   = СоглашениеСклад;
		РезультатСтрока.КоличествоУпаковок = СтруктураДанные.КоличествоУпаковок;
		РезультатСтрока.ЕдиницаИзмерения   = СтруктураДанные.ЕдиницаИзмерения;   		
		РезультатСтрока.Упаковка  		   = СтруктураДанные.Упаковка; 
		РезультатСтрока.ВидЦены			   = СоглашениеВидЦены;
		РезультатСтрока.Цена		       = 0;
		РезультатСтрока.ПроцентРучнойСкидки = Партнер_Скидка;
		РезультатСтрока.СтавкаНДС		   = ?(Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, Номенклатура.СтавкаНДС);
	КонецЕсли; 
	
	Если СтруктураДанные.Свойство("ОтсканированоПоСерийномуНомеру") И СтруктураДанные.ОтсканированоПоСерийномуНомеру  Тогда
		НоваяСтрока = ТаблицаНоменклатураПоСерийномуНомеру.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанные,"Номенклатура,СерийныйНомер");	
	КонецЕсли;         
	ИнициализироватьОбщиеПараметрыФормы(СтруктураДанные.Номенклатура);  	
КонецПроцедуры // ДобавитьНоменклатуруВКорзину(Номенклатура)()


&НаСервере
Функция ПолучитьПараметрыОтбора(СтруктураДанные)
	ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения,Упаковка");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора,СтруктураДанные,"Номенклатура,Характеристика,ЕдиницаИзмерения,Упаковка");
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура)   = ЛОЖЬ 		Тогда ПараметрыОтбора.Номенклатура 	= Справочники.Номенклатура.ПустаяСсылка(); 					КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтбора.Характеристика) = ЛОЖЬ 		Тогда ПараметрыОтбора.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтбора.ЕдиницаИзмерения) = ЛОЖЬ И ЗначениеЗаполнено(ПараметрыОтбора.Упаковка) = ЛОЖЬ	Тогда ПараметрыОтбора.ЕдиницаИзмерения = ПараметрыОтбора.Номенклатура.ЕдиницаИзмерения; 		КонецЕсли;
	
	Возврат  ПараметрыОтбора;

КонецФункции // ПолучитьПараметрыОтбора()

	
&НаСервере
Функция ПроверитьСерийныйНомерНаУникальность(СтруктураДанных)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаУникальностиСерийногоНомера();
	Запрос.УстановитьПараметр("СерийныйНомер",СтруктураДанных.СерийныйНомер);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Таблица",ТаблицаНоменклатураПоСерийномуНомеру.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой()  Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат ЛОЖЬ;
КонецФункции // ПроверитьСерийныйНомерНаУникальность()

&НаСервере
Функция ТекстЗапросаУникальностиСерийногоНомера()

	ТекстЗапроса ="ВЫБРАТЬ
	              |	ТабТовары.Номенклатура КАК Номенклатура,
	              |	ТабТовары.СерийныйНомер КАК СерийныйНомер
	              |ПОМЕСТИТЬ КешТаб
	              |ИЗ
	              |	&Таблица КАК ТабТовары
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	КешТаб.Номенклатура,
	              |	КешТаб.СерийныйНомер
	              |ИЗ
	              |	КешТаб КАК КешТаб
	              |ГДЕ
	              |	КешТаб.Номенклатура = &Номенклатура
	              |	И КешТаб.СерийныйНомер = &СерийныйНомер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаУникальностиСерийногоНомера()

&НаСервере
Процедура ЗаполнитьСерийныеНомераПоНоменклатуре(НоменклатураПреобразования)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСерийныеНомераПоНоменклатуре();
	Запрос.УстановитьПараметр("Таблица",ТаблицаНоменклатураПоСерийномуНомеру.Выгрузить());
	Запрос.УстановитьПараметр("Номенклатура",НоменклатураПреобразования);
	Запрос.УстановитьПараметр("Склад",СоглашениеСклад);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаРасходСН.Загрузить(РезультатЗапроса[2].Выгрузить());
	ТаблицаВыбранныеСН.Загрузить(РезультатЗапроса[1].Выгрузить());
КонецПроцедуры // ЗаполнитьСерийныеНомераПоНоменклатуре()

&НаСервере
Функция ТекстЗапросаСерийныеНомераПоНоменклатуре()
	ТекстЗапроса ="ВЫБРАТЬ
	              |	ТабТовары.Номенклатура КАК Номенклатура,
	              |	ТабТовары.СерийныйНомер КАК СерийныйНомер
	              |ПОМЕСТИТЬ КешТаб
	              |ИЗ
	              |	&Таблица КАК ТабТовары
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |
	              |	КешТаб.СерийныйНомер КАК СерийныйНомер 
	              |ИЗ
				  |
	              |	КешТаб КАК КешТаб
	              |ГДЕ
	              |	КешТаб.Номенклатура = &Номенклатура
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СерийныеНомераНоменклатурыОстатки.СерийныеНомера  КАК СерийныйНомер
	              |ИЗ
	              |	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
	              |			,
	              |			Номенклатура = &Номенклатура
	              |				И Склад = &Склад
	              |				И НЕ СерийныеНомера В
	              |						(ВЫБРАТЬ
	              |							КешТаб.СерийныйНомер
	              |						ИЗ
	              |							КешТаб КАК КешТаб
	              |						ГДЕ
	              |							КешТаб.Номенклатура = &Номенклатура)) КАК СерийныеНомераНоменклатурыОстатки";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаСерийныеНомераПоНоменклатуре()

#КонецОбласти

#Область СерийныеНомера

&НаСервере  
Процедура ДобавитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура, ВводПоШтрихкоду,СтруктураДанных,СтруктураОшибок)
	
	УстановитьПривилегированныйРежим(Истина);
	Дубли = ЛОЖЬ;
	
	НайденаНоменклатура = ПолучитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура,СтруктураДанных,Дубли);
	
	Если Дубли = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 2;
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар с данным кода товару/штрихкоду/серийного номера/артикулу найдено больше чем одну. Нужно данной товар установить в документе вручную!'");
		Возврат;	
	КонецЕсли;
	
	Если НайденаНоменклатура <> Неопределено Тогда
	
		Если ПроверитьСерийныйНомерНаУникальность(СтруктураДанных) Тогда
			СтруктураОшибок.ЦветОшибки = 4;
			СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар уже с этим серийным номером сканировался.!'");			
			Возврат;  		
		КонецЕсли;
		СтруктураДанных.Вставить("ОтсканированоПоСерийномуНомеру",Истина);
		ДобавитьНоменклатуруВКорзину(СтруктураДанных);
		
	Иначе 		
		ВводПоШтрихкоду = Истина;
		Возврат; 
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьНоменклатуруПоСерийномуНомеру()

&НаСервере
Функция ПолучитьНоменклатуруПоСерийномуНомеру(СерийныйНомер, СтруктураДанных,Дубли)
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру();	
	Запрос.УстановитьПараметр("СерийныйНомер", ВРег(СерийныйНомер));
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = РезультатЗапроса.Выгрузить();
	Если ТаблицаТоваров.Количество()>1 Тогда
		Дубли = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка);	
		Возврат Выборка.Номенклатура;
	КонецЕсли;	
КонецФункции // ПолучитьНоменклатуруПоСерийномуНомеру()

&НаСервере
Функция ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру()
			
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СерийныеНомераНоменклатуры.Владелец КАК Номенклатура,
		               |	СерийныеНомераНоменклатуры.Ссылка КАК СерийныйНомер,
		               |	СерийныеНомераНоменклатуры.Владелец.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |ИЗ
		               |	Справочник.СерийныеНомераНоменклатуры КАК СерийныеНомераНоменклатуры
		               |ГДЕ
		               |	СерийныеНомераНоменклатуры.Код = &СерийныйНомер
		               |	И СерийныеНомераНоменклатуры.ПометкаУдаления = ЛОЖЬ";   						   
	
	Возврат ТекстЗапроса;              	
КонецФункции // ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру()

#КонецОбласти

#Область ШтрихКод

&НаСервере
Процедура ДобавитьНоменклатуруПоШтрихКодуНаСервере(ШтрихкодНоменклатуры, СтруктураДанные, ВвестиКоличество, ВводКода,СтруктураОшибок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанныеПоРегистру = ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодНоменклатуры);
		
	Если СтруктураДанныеПоРегистру = Неопределено Тогда
		ВводКода = Истина;	
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанныеПоРегистру.Свойство("Упаковка") И СтруктураДанныеПоРегистру.Упаковка.Пустая() = ЛОЖЬ Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанные,СтруктураДанныеПоРегистру);
		ВвестиКоличество = Истина;		
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураДанные,СтруктураДанныеПоРегистру);
		ДобавитьНоменклатуруВКорзину(СтруктураДанные);
	КонецЕсли; 	
КонецПроцедуры // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодНоменклатуры)
	
	МассивШтрихкодов = Новый Массив;
	МассивШтрихкодов.Добавить(ШтрихкодНоменклатуры);
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(МассивШтрихкодов);
	СтруктураДанные    = ДанныеПоШтрихкодам[ШтрихкодНоменклатуры];
	
	Если ТипЗнч(СтруктураДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Номенклатура") Тогда
		КешНоменклатураПодбор = СтруктураДанные.Номенклатура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	          
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьНоменклатуруПоШтрихкоду()
#КонецОбласти

#Область НоменклатуреПоКодИАртикулу

&НаСервере
Процедура ДобавитьНоменклатуруПоКодуНаСервере(КодНоменклатуры,СтруктураДанных, ВводПоАртикулу, СтруктураОшибок)
	УстановитьПривилегированныйРежим(Истина);
	Дубли = ЛОЖЬ;
	КодПоОтборку = Прав("00000000000000000",11-СтрДлина(КодНоменклатуры))+КодНоменклатуры;
	
	Отбор = "И Номенклатура.Код = &Отбор";
	НайденаНоменклатура = ПолучитьНоменклатуруПоРеквизиту(КодПоОтборку,СтруктураДанных,Отбор,Дубли);
	
	Если Дубли = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 2;
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар с данным кода товару/штрихкоду/серийного номера/артикулу найдено больше чем одну. Нужно установить данной товар в документе вручную!'");
		Возврат;	
	КонецЕсли;
	
	Если НайденаНоменклатура = Неопределено Тогда
		ВводПоАртикулу = Истина;	
		Возврат;
	Иначе
		ДобавитьНоменклатуруВКорзину(СтруктураДанных);
	КонецЕсли;
КонецПроцедуры // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Процедура ДобавитьНоменклатуруПоАртикулуНаСервере(АртикулНоменклатуры,СтруктураДанных, СтруктураОшибок)
	Отбор = "И Номенклатура.Артикул = &Отбор";
	Дубли = ЛОЖЬ;
	НайденаНоменклатура = ПолучитьНоменклатуруПоРеквизиту(АртикулНоменклатуры,СтруктураДанных,Отбор, Дубли);
	
	Если Дубли = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 2;
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар найдено больше чем одну. Нужно данной товар установить в документе вручную!'");
		Возврат;	
	КонецЕсли;

	Если НайденаНоменклатура = Неопределено Тогда		
		Возврат;
	Иначе
		ДобавитьНоменклатуруВКорзину(СтруктураДанных); 		
	КонецЕсли;
КонецПроцедуры // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Функция ПолучитьНоменклатуруПоРеквизиту(ЗначенияРеквизита, СтруктураДанные, Отбор,Дубли)
	УстановитьПривилегированныйРежим(Истина);
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаДобавленияНоменклатурыПоРеквизиту();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"%ОтборПоНоменклатуре%",Отбор);
	Запрос.УстановитьПараметр("Отбор", СокрЛП(ЗначенияРеквизита));
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = РезультатЗапроса.Выгрузить();
	Если ТаблицаТоваров.Количество()>1 Тогда
		Дубли = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанные,Выборка);
		Возврат Выборка.Номенклатура;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
КонецФункции // ПолучитьНоменклатуруПоКодуНоменклатуры()

&НаСервере
Функция ПолучитьТекстЗапросаДобавленияНоменклатурыПоРеквизиту()
	ТекстЗапроса =
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Номенклатура,
				|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
				|	Номенклатура.ЕдиницаИзмерения
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
				|           
				|ГДЕ
				|	Номенклатура.ПометкаУдаления = ЛОЖЬ
				|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
				|	%ОтборПоНоменклатуре%";    	
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаДобавленияНоменклатурыПоРеквизиту()

#КонецОбласти

#Область ФормаНабивка
&НаСервере 
Функция ВыбратьУпаковку()
	
	Результат 	  = Новый Массив;	
	Запрос 		  = Новый Запрос();
	Запрос.Текст  = ПолучитьТекстЗапросаУпаковки();	
		
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	
 	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	
	Результат = ТаблицаУпаковок.ВыгрузитьКолонку("Значение");
	Результат.Вставить(0, Номенклатура.ЕдиницаИзмерения);	
	
	Возврат Результат;
		
КонецФункции

&НаСервере 
Функция ПолучитьТекстЗапросаУпаковки()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка 			КАК Значение,
		|	Наименование 	КАК Представление
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры
		|ГДЕ
		|	Владелец = ВЫБОР КОГДА &НаборУпаковок =  ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|                    ТОГДА &Номенклатура
		|                    КОГДА &НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|                    ТОГДА &НаборУпаковок
		|					 ИНАЧЕ Неопределено
		|			   КОНЕЦ 
		|И  ПометкаУдаления = Ложь";
	 
	 Возврат ТекстЗапроса;
	
 КонецФункции

&НаКлиенте
Процедура Добавить(Команда)
	ДобавитьНоменклатуруСУпаковкойНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруСУпаковкойНаСервере()
	СтруктураДанных = ЗаполнитьНачальныеДанные();
	СтруктураДанных.Номенклатура = Номенклатура; 
	СтруктураДанных.КоличествоУпаковок = Количество;
	
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		СтруктураДанных.Вставить("Упаковка",ЕдиницаИзмерения);
	Иначе
		СтруктураДанных.ЕдиницаИзмерения =  ЕдиницаИзмерения; 		
	КонецЕсли;    
	
	ДобавитьНоменклатуруВКорзину(СтруктураДанных);
	УстановитьВидимостьПоУмолчанию();
 КонецПроцедуры


#КонецОбласти

#Область ТЗ_Корзина

&НаКлиенте
Процедура ТЗ_КорзинаУпаковкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ЭлементКорзина 	= Элементы.ТЗ_Корзина;
	ЭлементУпаковка = Элементы.ТЗ_КорзинаУпаковка;
	
	ТекущиеДанные 	= ЭлементКорзина.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда	
		ЭлементУпаковка.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокУпаковокНоменклатуры(ТекущиеДанные.Номенклатура));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементКорзина 	= Элементы.ТЗ_Корзина;
	ЭлементУпаковка = Элементы.ТЗ_КорзинаУпаковка;
	
	ТекущиеДанные 	= ЭлементКорзина.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик 	 = Новый ОписаниеОповещения("ВыборУпаковкаИзВыпадающегоСписка", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокУпаковокНоменклатуры(ТекущиеДанные.Номенклатура));
	
	НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(ТекущиеДанные.Упаковка);
	Если НачальныйЭлемент = Неопределено Тогда
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент);
	Иначе 
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборУпаковкаИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ДополнительныеПараметры.ТекущиеДанные.Упаковка = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры
 
 &НаСервере
Функция ПолучитьСписокУпаковокНоменклатуры(Номенклатура)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка
		|
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры
		|ГДЕ
		|	Владелец = ВЫБОР КОГДА &НаборУпаковок =  ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|                    ТОГДА &Номенклатура
		|                    КОГДА &НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|                    ТОГДА &НаборУпаковок
		|					 ИНАЧЕ Неопределено
		|			   КОНЕЦ 
		|И  ПометкаУдаления = Ложь
		|");
	Запрос.УстановитьПараметр("Номенклатура",  Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	Упаковки = Запрос.Выполнить().Выгрузить();
	МассивУпаковок = Упаковки.ВыгрузитьКолонку("Ссылка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;

КонецФункции

&НаСервере
Функция ПолучитьКорзинуВСтроке()	
	Возврат ЗначениеВСтрокуВнутр(ТЗ_Корзина.Выгрузить());
КонецФункции

&НаСервере
Функция ПолучитьКорзинуБРМ()   
	Возврат Новый Структура("Корзина,", ПолучитьКорзинуВСтроке()); 
КонецФункции // ПолучитьКорзинуБРМ()

#КонецОбласти

#КонецОбласти

