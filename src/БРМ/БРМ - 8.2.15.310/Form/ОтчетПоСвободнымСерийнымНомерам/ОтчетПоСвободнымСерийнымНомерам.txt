#Область ИнтерфейсАвтоматическихТестов
&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест 		= ЮнитТестирование;
	СпиcокТестов 	= Новый Массив;
	СпиcокТестов.Добавить("Тест_ПроверитьВалидностьЗапроса");
	СпиcокТестов.Добавить("Тест_ПроверитьФормированияОтчета");

	Возврат СпиcокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьВалидностьЗапроса() Экспорт   	
	
	ТекстЗапроса = СформироватьТекстЗапроса();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса);
КонецПроцедуры

&НаСервере
Процедура Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса) Экспорт
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 					  = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных 							 = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            				 = "НаборДанных";
	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос 						 = ТекстЗапроса;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
 

КонецПроцедуры // Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса)

&НаКлиенте
Процедура Тест_ПроверитьФормированияОтчета() Экспорт   	
	СформироватьОтчетНаСервере();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Номенклатура = Параметры.Номенклатура;
	СформироватьОтчетНаСервере();
КонецПроцедуры

#КонецОбласти




#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СформироватьОтчетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	СформироватьОтчетНаСервере();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиТаблициРезультат
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
	Перем ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь;
	                             	
	РезультатРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка);
	
	Если РезультатРасшифровки.ДанныеРасшифровки = 0 Тогда 		
		СообщенияОбОшибке = НСтр("ru='Если нужно указать, что номенклатура распакованная, выберите строку с серийным номером.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке); 
		Возврат;	
	КонецЕсли;

	Если ТипЗнч(РезультатРасшифровки.СерийныйНомер)= Тип("СправочникСсылка.СерийныеНомераНоменклатуры") Тогда
		ОбработатьРезультатРасшифровки(РезультатРасшифровки);    	
	Иначе
		СообщенияОбОшибке = НСтр("ru='Значение данных расшифровки отсутствует, либо имеет неправильный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке); 
		Возврат; 	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыдаватьСообщенияПослеЗакрытияФормы(Результат, ДополнительныеПараметры)Экспорт
	СформироватьОтчетНаСервере(); 
КонецПроцедуры // ВыдаватьСообщенияПослеЗакрытияФормы()

&НаКлиенте
Процедура ОбработатьРезультатРасшифровки(РезультатРасшифровки)
	Если РезультатРасшифровки.ДанныеРасшифровки = 1 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПараметрыВопроса = Новый Структура("РезультатРасшифровки",РезультатРасшифровки);  		
		Оповещение 		 = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПараметрыВопроса);

		Если ЭтотТоварРаспакован(РезультатРасшифровки.СерийныйНомер) = ЛОЖЬ Тогда
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Вы уверены, что это распакованный товар?!'"), Режим, 0);
		Иначе
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Вы уверены, что хотите изменить комментарий?!'"), Режим, 0);
		КонецЕсли; 
		
	ИначеЕсли РезультатРасшифровки.ДанныеРасшифровки = 2 Тогда
		УИДФормы	= Новый УникальныйИдентификатор;
		
		Оповещение 	= Новый ОписаниеОповещения("ВыдаватьСообщенияПослеЗакрытияФормы",ЭтаФорма);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",Номенклатура);  
		ПараметрыФормы.Вставить("СерийныйНомер",РезультатРасшифровки.СерийныйНомер);

		ОткрытьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ОтчетПоИсторияПоРаспакованыйСерийнымНомерам",
				ПараметрыФормы,
				ЭтаФорма,
				УИДФормы,
				,
				,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
				);
 	
	КонецЕсли;  	

КонецПроцедуры // ОбработатьРезультатРасшифровки(РезультатРасшифровки)()

	
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ПараметрыВопроса) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	Если ПараметрыВопроса.Свойство("РезультатРасшифровки") = ЛОЖЬ Тогда
		Возврат;	
	КонецЕсли;
	
	РезультатРасшифровки = ПараметрыВопроса.РезультатРасшифровки;	
		
	УИДФормы	= Новый УникальныйИдентификатор;
	Оповещение 	= Новый ОписаниеОповещения("ВыдаватьСообщенияПослеЗакрытияФормы",ЭтаФорма);
	ОткрытьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаРаспакованогоТовараПоСерийнымНомерам",
				Новый Структура("СерийныеНомераНоменклатуры",РезультатРасшифровки.СерийныйНомер),
				ЭтаФорма,
				УИДФормы,
				,
				,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
				);    		
  
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	СформироватьОтчетНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьДанныеРасшифровки(Расшифровка)

	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеРасшифровкиИзХранилища 	= ПолучитьИзВременногоХранилища(АдресХранилища);
	Расшифровки    					= ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка];
	ПоляРасшифровки					= Расшифровки.ПолучитьПоля();
	СтрРасшифровки				= ПолучитьСтрДанныхРасшифровки();
	
	Если ПоляРасшифровки[0].Поле = "СерийныйНомер" Тогда
		СтрРасшифровки.ДанныеРасшифровки = 1;
		СтрРасшифровки.СерийныйНомер = ПоляРасшифровки[0].Значение;
	ИначеЕсли  ПоляРасшифровки[0].Поле = "Ответственный" Тогда
		КоллекцияРасшифровки    = ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка-3];
		ПоляРасшифровки			= КоллекцияРасшифровки.ПолучитьПоля();
		СтрРасшифровки.ДанныеРасшифровки = 2;
		СтрРасшифровки.СерийныйНомер = ПоляРасшифровки[0].Значение;
	ИначеЕсли  ПоляРасшифровки[0].Поле = "Распакован" Тогда
		КоллекцияРасшифровки    = ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка-2];
		ПоляРасшифровки			= КоллекцияРасшифровки.ПолучитьПоля();
		СтрРасшифровки.ДанныеРасшифровки = 1;
		СтрРасшифровки.СерийныйНомер = ПоляРасшифровки[0].Значение;
	ИначеЕсли  ПоляРасшифровки[0].Поле = "Комментарий" Тогда
		КоллекцияРасшифровки    = ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка-4];
		ПоляРасшифровки			= КоллекцияРасшифровки.ПолучитьПоля();
		СтрРасшифровки.ДанныеРасшифровки = 1;
		СтрРасшифровки.СерийныйНомер = ПоляРасшифровки[0].Значение;
	ИначеЕсли  ПоляРасшифровки[0].Поле = "Дата" Тогда
		КоллекцияРасшифровки    = ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка-5];
		ПоляРасшифровки			= КоллекцияРасшифровки.ПолучитьПоля();
		СтрРасшифровки.ДанныеРасшифровки = 1;
		СтрРасшифровки.СерийныйНомер = ПоляРасшифровки[0].Значение;
	ИначеЕсли  ПоляРасшифровки[0].Поле = "Подразделение" Тогда
		КоллекцияРасшифровки    = ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка-1];
		ПоляРасшифровки			= КоллекцияРасшифровки.ПолучитьПоля();
		СтрРасшифровки.ДанныеРасшифровки = 1;
		СтрРасшифровки.СерийныйНомер = ПоляРасшифровки[0].Значение;
	КонецЕсли;
	
	Возврат СтрРасшифровки;	
КонецФункции // ПолучитьДанныеРасшифровки()

&НаСервере
Процедура СформироватьОтчетНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Результат.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапроса();
	
	Если Не Номенклатура.Пустая() Тогда
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СписокНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	
	ОбъектОбработки 		= РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных   = ОбъектОбработки.ПолучитьМакет("СКД_СерийныеНомера");
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	
	Настройки 					= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровкиКД			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки				= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровкиКД);
	
	ПроцессорКомпоновкиДанны    = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанны.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиКД);
	
	ПроцессорВывода				= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанны);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКД,ЭтаФорма.УникальныйИдентификатор);


КонецПроцедуры // СформироватьОтчетНаСервере()

&НаСервере
Функция СформироватьТекстЗапроса()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СерийныеНомераНоменклатуры.Склад КАК Склад,
	               |	СерийныеНомераНоменклатуры.Номенклатура КАК Номенклатура,
	               |	СерийныеНомераНоменклатуры.СерийныеНомера КАК СерийныйНомер
	               |ПОМЕСТИТЬ СерийныеНомера
	               |ИЗ
				   |	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
				   |			,
				   |			%ОтборПоНоменклатуре%) КАК СерийныеНомераНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СерийныеНомера.Склад,
	               |	СерийныеНомера.Номенклатура,
	               |	СерийныеНомера.СерийныйНомер, 
				   |	СерийныеНомераНоменклатуры.Дата КАК Дата,
				   |	СерийныеНомераНоменклатуры.Комментарий КАК Комментарий,
	               |	СерийныеНомераНоменклатуры.Распакован КАК Распакован,
	               |	СерийныеНомераНоменклатуры.Ответственный КАК Ответственный,
	               |	СерийныеНомераНоменклатуры.Ответственный.ТекущееПодразделение  КАК Подразделение
	               |ИЗ
	               |	СерийныеНомера КАК СерийныеНомера
				   |
	               |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомераНоменклатуры КАК СерийныеНомераНоменклатуры
	               |ПО СерийныеНомера.СерийныйНомер = СерийныеНомераНоменклатуры.Ссылка";				   			
	
	Если Не Номенклатура.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоНоменклатуре%", "Номенклатура = &Номенклатура");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоНоменклатуре%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапроса()

&НаСервере
Функция ПолучитьСтрДанныхРасшифровки() 
	
	Стр = Новый Структура();
	Стр.Вставить("ДанныеРасшифровки",0);
	Стр.Вставить("СерийныйНомер",Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Возврат Стр;
КонецФункции // ПолучитьДанныеРасшифровки()

&НаСервере
Функция ЭтотТоварРаспакован(СерийныеНомераНоменклатуры)
	Если СерийныеНомераНоменклатуры.Пустая() Тогда
		Возврат ЛОЖЬ;	
	КонецЕсли; 
	Возврат   СерийныеНомераНоменклатуры.Распакован;
КонецФункции // ()

#КонецОбласти






 