&НаКлиенте
Перем ОтветПередЗакрытием;
&НаКлиенте
Перем ОжидаетсяОтветНаВопрос;


#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;


&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	//СписокТестов.Добавить("Тест_ПроверитьВалидностьЗапросаНаНаличияТовара");
	СписокТестов.Добавить("Тест_ПроверитьВалидностьЗапросаЗадачиДокументаПеремещения");
	СписокТестов.Добавить("Тест_ПроверитьВалидностьЗапросаТранзитногоСклада");
	//СписокТестов.Добавить("Тест_ПроверитьВалидностьЗапросаЗапросаСписокДокументов");

	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_ПроверитьВалидностьЗапросаЗадачиДокументаПеремещения() Экспорт   	
	ТекстЗапроса = ПолучитьТекстЗадачиДокументаПеремещения();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПроверитьВалидностьЗапросаТранзитногоСклада() Экспорт   	

	ТекстЗапроса = ПолучитьТекстЗапросаТранзитногоСклада();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПроверитьВалидностьЗапросаЗапросаСписокДокументов() Экспорт 
	ПараметрТаблициЗнч= СписокДокументов;
	ТекстЗапроса = ПолучитьТекстЗапросаСписокДокументов();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	Тест_ПроверитьТекстЗапросНаОшибкиСПараметрами(ТекстЗапроса,ПараметрТаблициЗнч);
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПроверитьВалидностьЗапросаНаНаличияТовара() Экспорт   	
	ПараметрТаблициЗнч	= Товары;
	ТекстЗапроса 		= ПолучитьТекстЗапросаНаНаличияТовара();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	Тест_ПроверитьТекстЗапросНаОшибкиСПараметрами(ТекстЗапроса,ПараметрТаблициЗнч);
КонецПроцедуры

&НаСервере
Процедура Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса) Экспорт
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 					  = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных 							 = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            				 = "НаборДанных";
	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос 						 = ТекстЗапроса;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
 
КонецПроцедуры // Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса)

&НаСервере
Процедура Тест_ПроверитьТекстЗапросНаОшибкиСПараметрами(ТекстЗапроса,ТаблицаЗнч) Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаЗнч",ТаблицаЗнч.Выгрузить());
		
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 					  = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных 							 = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            				 = "НаборДанных";
	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос 						 = Запрос;
	
	 
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
 
КонецПроцедуры // Тест_ПроверитьТекстЗапросНаОшибки(ТекстЗапроса)




#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);

	Если Параметры.Свойство("АдресТЗ") И Параметры.Свойство("Соглашение")  И Параметры.Свойство("Склад") Тогда
		ПроверкаНаПроведения 	= Ложь;	
		СкладОтправитель		= Параметры.Склад;
		СкладОтправительСтрока 	= СкладОтправитель;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		ВидЦены = ?(Выборка.Следующий(), Выборка.ВидЦены, Неопределено);
		АвторизированныйПользователь  = ПараметрыСеанса.ТекущийПользователь;
		АвторизированноеПодразделение = АвторизированныйПользователь.ТекущееПодразделение;

		ТекущаяДата = ТекущаяДата();
		Если НЕ ПустаяСтрока(Параметры.АдресТЗ) Тогда
			Товары.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресТЗ));
		КонецЕсли;
		
		Если НЕ Параметры.Соглашение.Пустая() Тогда
			Соглашение = Параметры.Соглашение;
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ЗакрытьФормуАвтоматически", 900);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОтветПередЗакрытием <> Истина  Тогда
		ОбновитьНаСервере();
		Если ПроверкаНаПроведения Тогда
			Отказ 		= Истина;
			Отбор		= Новый Структура();
			Отбор.Вставить("Проведен",Ложь);
			РезультатОтбора	= СписокДокументов.НайтиСтроки(Отбор);
			
			ТекстВопроса= ПроверитьДокументПроведенНаСервере(РезультатОтбора);
			Оповещение 	= Новый ОписаниеОповещения("УдалитьНеПроведенныеДокументы",ЭтаФорма, РезультатОтбора);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			ОжидаетсяОтветНаВопрос = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущаяДатаПриИзменении(Элемент)
	ВыполнитьРасчетДоставки();
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ВыбораИзСписка("СкладОтправитель");
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	СкладОтправитель 		= ВыбранноеЗначение;
	СкладОтправительСтрока 	= Элементы.СкладОтправитель.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	ВыполнитьРасчетДоставки();
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ВыбораИзСписка("СкладПолучатель");
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	СкладПолучатель 		= ВыбранноеЗначение;
	СкладПолучательСтрока 	= Элементы.СкладПолучатель.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	ВыполнитьРасчетДоставки();
КонецПроцедуры
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументов
&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 			= Элемент.ТекущаяСтрока;
	ТекущиеДанные 			= Элемент.ТекущиеДанные;
	Если НЕ ТекущаяСтрока 	= Неопределено Тогда
		СсылкаНаЭлемент 	= ТекущиеДанные.Ссылка;
		ПараметрыФормы	 	= Новый Структура("Ключ", СсылкаНаЭлемент);
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("ДокументСсылка.ПеремещениеТоваров")  Тогда
			ФормаДок = "ПеремещениеТоваров";
		Иначе
			ФормаДок = "ЗаказНаПеремещение";
		КонецЕсли;
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",Истина);
		ОткрытьФорму("Документ."+ФормаДок+".Форма.ФормаДокумента", ПараметрыФормы,ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти 



#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьПрямоеПеремещение(Команда)
	
	Если НЕ СкладОтправитель.Пустая() И НЕ СкладПолучатель.Пустая() И СписокДокументов.Количество()=0  Тогда
		ПроверкаНаНаличиеНаСкладе = ПроверитьНаНаличияТовараНаСкладах();
		Если ПроверкаНаНаличиеНаСкладе Тогда
		  	Если ВыездОтОтправителя = Дата(1,1,1) Тогда
				ТекстВопроса = НСтр("ru = 'Данное перемещение не попадает в доставку, продолжить?'");
				Оповещение 	= Новый ОписаниеОповещения("ОтветНаВопрос",ЭтаФорма);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Возврат;	
			КонецЕсли;
			
			Если ВыездКПолучателю = Дата(1,1,1) ИЛИ Телепорт Тогда
				ДокументПеремещения = ПолучитьДокументПеремещениеТоваров();
			КонецЕсли;
					
			Если НЕ ТранзитныйСклад.Пустая() И НЕ Телепорт  Тогда
				ДокументПеремещения = ПолучитьДокументТранзитногоПеремещения();
			КонецЕсли;
			Если ДокументПеремещения<>Неопределено Тогда
				ПараметрыФормы	 	= Новый Структура("Ключ", ДокументПеремещения);
				ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",Истина);
				ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", ПараметрыФормы,ЭтаФорма);
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
			   
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере(); 
КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ВыполнитьРасчетДоставки()	
	Если НЕ СкладОтправитель.Пустая() ИЛИ НЕ СкладПолучатель.Пустая() Тогда
		ВыполнитьРасчетДоставкиНаСервере();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбораИзСписка(ИмяЭлемента)
	СписокЭлементов = ПолучитьСписокСкладов(ИмяЭлемента);
	Элементы[ИмяЭлемента].СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл 
		Элементы[ИмяЭлемента].СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление); 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСкладов(ИмяЭлемента)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(?(ИмяЭлемента = "СкладПолучатель","ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.Склады ГДЕ НЕ ЭтоГруппа", "ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.Склады ГДЕ (Ссылка = &Склад ИЛИ Ссылка.ИспользоватьОрдернуюСхемуПриОтгрузке) И НЕ ЭтоГруппа"));
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокЗначений = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокЗначений.Добавить(Выборка.Ссылка, Выборка.Наименование) 
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

&НаСервере
Процедура ВыполнитьРасчетДоставкиНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	ПрямойВыезд 	= Дата(1,1,1);
	ТранзитВыездОт  = Дата(1,1,1);
	ТранзитВыездК 	= Дата(1,1,1);
	
	ТранзитныйСклад 	  				= Неопределено;
	ВыездОтОтправителя 					= Неопределено;
	ВыездКПолучателю		 			= Неопределено;	
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаТранзитногоСклада();
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДата);	
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	РезультатПакета = Запрос.ВыполнитьПакет();	
	
	Выборка = РезультатПакета[4].Выбрать();
	Если Выборка.Следующий() Тогда
		ПрямойВыезд = Выборка.ДатаВремяВыезда;
		ПрямойВариантМаршрута = Выборка.Маршрут;
	КонецЕсли;
	
	Выборка = РезультатПакета[13].Выбрать();
	Если Выборка.Следующий() Тогда
		ТранзитныйСклад = Выборка.СкладТранзит;
		ТранзитВыездОт = Выборка.ДатаВремяВыездаОтОтправителя;
		ТранзитВыездК = Выборка.ДатаВремяВыездаКПолучателю;
	КонецЕсли;
	
	Если ПрямойВариантМаршрута = Неопределено
	 ИЛИ (ТранзитВыездК <> Дата(1,1,1) И ТранзитВыездК < ПрямойВыезд)Тогда
		ВыездОтОтправителя = ТранзитВыездОт;
		ВыездКПолучателю   = ТранзитВыездК;
		Если ВыездОтОтправителя = ВыездКПолучателю   
		  И	 ВыездОтОтправителя <> Дата(1,1,1) Тогда
			ВыездКПолучателю = ВыездКПолучателю + 86400;		
		КонецЕсли;
	Иначе	
		ВыездОтОтправителя = ПрямойВыезд;
		ТранзитныйСклад	   = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ВыполнитьРасчетДоставкиНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаТранзитногоСклада()

	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Ссылка			КАК Склад,
		|	Представление   КАК Представление
		|ПОМЕСТИТЬ АдресаСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ПОМЕСТИТЬ МаршрутыОтОтправителя	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
		|ГДЕ
		|	Склад = &СкладОтправитель
        |
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладПолучатель  = &СкладПолучатель
		|И	СкладОтправитель = &СкладОтправитель	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ПОМЕСТИТЬ МаршрутыКПолучателю
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СписокАдресов
		|ГДЕ
		|	ГородСклад = &СкладПолучатель
        |
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладПолучатель  = &СкладПолучатель
		|И	СкладОтправитель = &СкладОтправитель
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	&СкладОтправитель								КАК СкладОтправитель,
		|	&СкладПолучатель								КАК СкладПолучатель,
		|	МаршрутыКПолучателю.Маршрут 					КАК Маршрут,
		|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута 	КАК КалендарьМаршрута,
		|	
		|	IsNull(СкладыОтгрузки.ПН, СкладыОтгрузкиРезерв.ПН) КАК ПН,
		|	IsNull(СкладыОтгрузки.ВТ, СкладыОтгрузкиРезерв.ВТ) КАК ВТ,
		|	IsNull(СкладыОтгрузки.СР, СкладыОтгрузкиРезерв.СР) КАК СР,
		|	IsNull(СкладыОтгрузки.ЧТ, СкладыОтгрузкиРезерв.ЧТ) КАК ЧТ,
		|	IsNull(СкладыОтгрузки.ПТ, СкладыОтгрузкиРезерв.ПТ) КАК ПТ,
		|	IsNull(СкладыОтгрузки.СБ, СкладыОтгрузкиРезерв.СБ) КАК СБ,
		|	IsNull(СкладыОтгрузки.ВС, СкладыОтгрузкиРезерв.ВС) КАК ВС,
		|	
		|	IsNull(СкладыОтгрузки.ВремяВыездаПН, СкладыОтгрузкиРезерв.ВремяВыездаПН) КАК ВремяВыездаПН,
		|	IsNull(СкладыОтгрузки.ВремяВыездаВТ, СкладыОтгрузкиРезерв.ВремяВыездаВТ) КАК ВремяВыездаВТ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаСР, СкладыОтгрузкиРезерв.ВремяВыездаСР) КАК ВремяВыездаСР,
		|	IsNull(СкладыОтгрузки.ВремяВыездаЧТ, СкладыОтгрузкиРезерв.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаПТ, СкладыОтгрузкиРезерв.ВремяВыездаПТ) КАК ВремяВыездаПТ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаСБ, СкладыОтгрузкиРезерв.ВремяВыездаСБ) КАК ВремяВыездаСБ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаВС, СкладыОтгрузкиРезерв.ВремяВыездаВС) КАК ВремяВыездаВС
		|	
		|ПОМЕСТИТЬ МаршрутПрямойДоставки
		|ИЗ
		|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
		|ПО МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
		|ПО	АдресаСкладаПолучателя.Склад = &СкладПолучатель 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
		|ПО	АдресаСкладаОтправителя.Склад = &СкладОтправитель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки 
		|ПО	СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут	
		|И	СкладыОтгрузки.Склад  = &СкладОтправитель
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузкиРезерв 
		|ПО	СкладыОтгрузкиРезерв.Ссылка = МаршрутыКПолучателю.Маршрут	
		|И	СкладыОтгрузкиРезерв.Склад  = &СкладПолучатель
        |
		|ГДЕ
		|	АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление		 
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МаршрутПрямойДоставки.СкладОтправитель,
		|	МаршрутПрямойДоставки.СкладПолучатель,
		|	МаршрутПрямойДоставки.Маршрут,
		|	//МаршрутПрямойДоставки.КалендарьМаршрута, 
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыезда
		|ИЗ
		|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
		|	
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ПО	КалендарныеГрафики.Календарь 	= МаршрутПрямойДоставки.КалендарьМаршрута
		|И	КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
		|И	КалендарныеГрафики.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.СР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.СБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
        |
		|ГДЕ
		|	&ДатаСеанса < КалендарныеГрафики.ДатаГрафика	
		|ИЛИ
		|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|ИЛИ
		|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|										КОГДА 1
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|										КОГДА 2
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|										КОГДА 3
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|										КОГДА 4
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|										КОГДА 5
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|										КОГДА 6
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|										КОГДА 7
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|									КОНЕЦ
		|								) 	
		|	)		
        |
		|СГРУППИРОВАТЬ ПО
		|	МаршрутПрямойДоставки.СкладОтправитель,
		|	МаршрутПрямойДоставки.СкладПолучатель,
		|	МаршрутПрямойДоставки.Маршрут
		|	//,МаршрутПрямойДоставки.КалендарьМаршрута
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыОтОтправителя;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыКПолучателю;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутПрямойДоставки;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СкладыОтгрузки.Ссылка 										КАК МаршрутТранзит,
		|	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) 	КАК СкладТранзит
		|ПОМЕСТИТЬ МаршрутыОтОтправителяТранзит	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
		|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
		|И  ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &СкладПолучатель
		|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &СкладОтправитель
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
		|ПО ДоступныеСклады.Склад = СкладыОтгрузки.Ссылка
		|И  ДоступныеСклады.Транзитный
        |
		|ГДЕ
		|	СкладыОтгрузки.Склад = &СкладОтправитель	
		|	
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Ссылка 			КАК МаршрутТранзит,
		|	СкладПолучатель КАК СкладТранзит
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладОтправитель = &СкладОтправитель	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	&СкладОтправитель										КАК СкладОтправитель,
		|	СкладыОтгрузки.Склад									КАК СкладТранзит,
		|	&СкладПолучатель										КАК СкладПолучатель,
		|	МаршрутОтОтправителя.МаршрутТранзит						КАК МаршрутОтОтправителя,
		|	МаршрутОтОтправителя.МаршрутТранзит.КалендарьМаршрута	КАК КалендарьМаршрутаОтОтправителя,
		|	СкладыОтгрузки.Ссылка 									КАК МаршрутКПолучателю,
		|	СкладыОтгрузки.Ссылка.КалендарьМаршрута 				КАК КалендарьМаршрутаКПолучателю,
		|	
		|	СкладыТранзита.ПН,
		|	СкладыТранзита.ВТ,
		|	СкладыТранзита.СР,
		|	СкладыТранзита.ЧТ,
		|	СкладыТранзита.ПТ,
		|	СкладыТранзита.СБ,
		|	СкладыТранзита.ВС,
		|	
		|	СкладыТранзита.ВремяВыездаПН,
		|	СкладыТранзита.ВремяВыездаВТ,
		|	СкладыТранзита.ВремяВыездаСР,
		|	СкладыТранзита.ВремяВыездаЧТ,
		|	СкладыТранзита.ВремяВыездаПТ,
		|	СкладыТранзита.ВремяВыездаСБ,
		|	СкладыТранзита.ВремяВыездаВС,
		|	
		|	СкладыОтгрузки.ПН 				КАК тПН,
		|	СкладыОтгрузки.ВТ 				КАК тВТ,
		|	СкладыОтгрузки.СР 				КАК тСР,
		|	СкладыОтгрузки.ЧТ 				КАК тЧТ,
		|	СкладыОтгрузки.ПТ 				КАК тПТ,
		|	СкладыОтгрузки.СБ 				КАК тСБ,
		|	СкладыОтгрузки.ВС 				КАК тВС,
		|	
		|	СкладыОтгрузки.ВремяВыездаПН 	КАК тВремяВыездаПН,
		|	СкладыОтгрузки.ВремяВыездаВТ 	КАК тВремяВыездаВТ,
		|	СкладыОтгрузки.ВремяВыездаСР 	КАК тВремяВыездаСР,
		|	СкладыОтгрузки.ВремяВыездаЧТ 	КАК тВремяВыездаЧТ,
		|	СкладыОтгрузки.ВремяВыездаПТ 	КАК тВремяВыездаПТ,
		|	СкладыОтгрузки.ВремяВыездаСБ 	КАК тВремяВыездаСБ,
		|	СкладыОтгрузки.ВремяВыездаВС 	КАК тВремяВыездаВС
		|	
		|ПОМЕСТИТЬ МаршрутыКПолучателюТранзит	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителяТранзит КАК МаршрутОтОтправителя
		|ПО МаршрутОтОтправителя.СкладТранзит = СкладыОтгрузки.Склад
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
		|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
		|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) = &СкладПолучатель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита 
		|ПО	СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит	
		|И	СкладыТранзита.Склад  = &СкладОтправитель
        |
		//|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита 
		//|ПО	СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит	
		//|И	СкладыТранзита.Склад  = СкладыОтгрузки.Склад
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
		|ПО	АдресаСкладаПолучателя.Склад = &СкладПолучатель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаТранзита 
		|ПО	АдресаСкладаТранзита.Склад = СкладыОтгрузки.Склад 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
		|ПО	АдресаСкладаОтправителя.Склад = &СкладОтправитель 
        |
		|ГДЕ
		|	АдресаСкладаОтправителя.Представление <> АдресаСкладаПолучателя.Представление
		|И   АдресаСкладаОтправителя.Представление <> АдресаСкладаТранзита.Представление 	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	МаршрутыКПолучателюТранзит.СкладТранзит, 
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафикиОтправителя.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыездаОтОтправителя
		|ПОМЕСТИТЬ ТаблицаПрибытияНаТранзитныйСклад
		|ИЗ
		|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
		|	
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиОтправителя
		|ПО	КалендарныеГрафикиОтправителя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаОтОтправителя
		|И	КалендарныеГрафикиОтправителя.ДатаГрафика  >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
		|И	КалендарныеГрафикиОтправителя.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.СР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.СБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
        |
		|ГДЕ
		|	&ДатаСеанса < КалендарныеГрафикиОтправителя.ДатаГрафика	
		|ИЛИ
		|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|ИЛИ
		|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|										КОГДА 1
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|										КОГДА 2
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|										КОГДА 3
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|										КОГДА 4
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|										КОГДА 5
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|										КОГДА 6
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|										КОГДА 7
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|									КОНЕЦ
		|								) 	
		|	)		
        |
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	МаршрутыКПолучателюТранзит.СкладТранзит
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
		|	
		|	МаршрутыКПолучателюТранзит.СкладТранзит,
		|	
		|	МаршрутыКПолучателюТранзит.СкладПолучатель,
		|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю,
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафикиПолучателя.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыездаКПолучателю
		|ПОМЕСТИТЬ ВариантыТранзитов		
		|ИЗ
		|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрибытияНаТранзитныйСклад КАК ТаблицаПрибытияНаТранзитныйСклад
		|ПО	ТаблицаПрибытияНаТранзитныйСклад.МаршрутОтОтправителя 	= МаршрутыКПолучателюТранзит.МаршрутОтОтправителя
		|И	ТаблицаПрибытияНаТранзитныйСклад.СкладТранзит 			= МаршрутыКПолучателюТранзит.СкладТранзит
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиПолучателя
		|ПО	КалендарныеГрафикиПолучателя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаКПолучателю
		|И	КалендарныеГрафикиПолучателя.ДатаГрафика  >= НачалоПериода(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя, День)
		|И	КалендарныеГрафикиПолучателя.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тСР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тСБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
        |
		|ГДЕ
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя < КалендарныеГрафикиПолучателя.ДатаГрафика	
		|ИЛИ
		|	ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																					КОГДА 1
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																					КОГДА 2
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																					КОГДА 3
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																					КОГДА 4
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																					КОГДА 5
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																					КОГДА 6
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																					КОГДА 7
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																				КОНЕЦ
		|																			 )
		|ИЛИ
		|	(ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																					КОГДА 1
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																					КОГДА 2
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																					КОГДА 3
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																					КОГДА 4
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																					КОГДА 5
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																					КОГДА 6
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																					КОГДА 7
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																				КОНЕЦ
		|																			 )
		|	И МИНУТА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																							КОГДА 1
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																							КОГДА 2
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																							КОГДА 3
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																							КОГДА 4
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																							КОГДА 5
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																							КОГДА 6
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																							КОГДА 7
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																						КОНЕЦ
		|																					) 	
		|	)		
        |
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
		|	
		|	МаршрутыКПолучателюТранзит.СкладТранзит,
		|	
		|	МаршрутыКПолучателюТранзит.СкладПолучатель,
		|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МИНИМУМ(ДатаВремяВыездаКПолучателю) КАК ДатаВремяВыездаКПолучателю
		|ПОМЕСТИТЬ КраткаяДоставкаТранзита
		|ИЗ
		|	ВариантыТранзитов
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ВариантыТранзитов.СкладОтправитель,
		|	ВариантыТранзитов.МаршрутОтОтправителя,
		|	ВариантыТранзитов.ДатаВремяВыездаОтОтправителя,
		|	ВариантыТранзитов.СкладТранзит,
		|	ВариантыТранзитов.СкладПолучатель,
		|	ВариантыТранзитов.МаршрутКПолучателю,
		|	ВариантыТранзитов.ДатаВремяВыездаКПолучателю		
		|ИЗ
		|	ВариантыТранзитов КАК ВариантыТранзитов
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КраткаяДоставкаТранзита КАК КраткаяДоставкаТранзита
		|ПО КраткаяДоставкаТранзита.ДатаВремяВыездаКПолучателю = ВариантыТранзитов.ДатаВремяВыездаКПолучателю
		|; 
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВариантыТранзитов;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КраткаяДоставкаТранзита; 		
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АдресаСкладов;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыОтОтправителяТранзит;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыКПолучателюТранзит;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПрибытияНаТранзитныйСклад;
		////////////////////////////////////////////////////////////////////////////////	
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаТранзитногоСклада()

//Создаем документи для транзитного перемещения - ЗаказНаПеремещения и ПеремещенияТоваров
//
// Параметры:
// НЕТ
//
// Возвращаемое значение:
//   ДокументСсылка.ПеремещениеТоваров   - ссылка на  созданое тразитное перемещения 
&НаСервере
Функция  ПолучитьДокументТранзитногоПеремещения()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
		ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		Если НЕ Соглашение.Пустая()  Тогда
			ЗаказНаПеремещение.Организация     		= Соглашение.Организация;
		КонецЕсли; 	
		ЗаказНаПеремещение.Дата						= ТекущаяДата();
		ЗаказНаПеремещение.Назначение				= Неопределено;
		ЗаказНаПеремещение.Ответственный    		= АвторизированныйПользователь;
		ЗаказНаПеремещение.Подразделение    		= АвторизированноеПодразделение;
		ЗаказНаПеремещение.СкладОтправитель 		= ТранзитныйСклад;
		ЗаказНаПеремещение.СкладПолучатель  		= СкладПолучатель;
		ЗаказНаПеремещение.Статус           		= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
		ЗаказНаПеремещение.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		ЗаказНаПеремещение.ИспользуетсяОбособленноеОбеспечение = Истина;
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			НоваяСтрока = ЗаказНаПеремещение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.НачалоОтгрузки 		 	= ТекущаяДата();
			НоваяСтрока.ОкончаниеПоступления 	= ТекущаяДата();
			НоваяСтрока.ВариантОбеспечения 		= Перечисления.ВариантыОбеспечения.ПодЗаказ;
		КонецЦикла;
			
		Попытка
			ЗаказНаПеремещение.Записать(РежимЗаписиДокумента.Проведение);
			НоваяЗаписьСписок = СписокДокументов.Добавить();
			НоваяЗаписьСписок.ИндентификаторКартинки = 0;
			НоваяЗаписьСписок.СкладОтправительПредставление	 = Строка(ТранзитныйСклад);
			НоваяЗаписьСписок.СкладПолучательПредставления	 = Строка(СкладПолучатель);
			ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ЗаказНаПеремещение);
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗаказНаПеремещение.Ссылка));
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
						
		Заметка = НСтр("ru='Автосоздание на заказ перемещения : %Ссылка%'");
		Если ЗаказНаПеремещение<>Неопределено Тогда
		    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказНаПеремещение);
			Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
		КонецЕсли;
	
					
		ПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
		Если НЕ Соглашение.Пустая()  Тогда
				ПеремещениеТоваров.Организация     		= Соглашение.Организация;
		КонецЕсли; 
		ПеремещениеТоваров.Дата						= ТекущаяДата();
		ПеремещениеТоваров.Проведен					= Ложь;
		ПеремещениеТоваров.ВидЦены          		= ВидЦены;
		ПеремещениеТоваров.СпособДоставки			= Перечисления.СпособыДоставки.Самовывоз;
		ПеремещениеТоваров.Ответственный    		= АвторизированныйПользователь;
		ПеремещениеТоваров.Подразделение			= АвторизированноеПодразделение;
		ПеремещениеТоваров.СкладОтправитель 		= СкладОтправитель;
		ПеремещениеТоваров.СкладПолучатель  		= ТранзитныйСклад;
		ПеремещениеТоваров.Статус           		= Перечисления.СтатусыПеремещенийТоваров.Принято;
		ПеремещениеТоваров.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		ПеремещениеТоваров.Комментарий				= Заметка;
		ПеремещениеТоваров.ИспользуетсяОбособленноеОбеспечение = Истина;
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			НоваяСтрока = ПеремещениеТоваров.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			Если ТекущаяСтрока.Назначение= Справочники.Назначения.ПустаяСсылка() Тогда
				НоваяСтрока.Назначение = ПолучитьСсылкуНаНазначение(ЗаказНаПеремещение.Ссылка);
	        КонецЕсли;
		КонецЦикла;				
		
		Попытка
			ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			НоваяЗаписьСписок = СписокДокументов.Добавить();
			НоваяЗаписьСписок.ИндентификаторКартинки = 2;
			НоваяЗаписьСписок.СкладОтправительПредставление	 = Строка(СкладОтправитель);
			НоваяЗаписьСписок.СкладПолучательПредставления	 = Строка(ТранзитныйСклад);

			ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ПеремещениеТоваров);
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПеремещениеТоваров.Ссылка));
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат  ПеремещениеТоваров.Ссылка;
КонецФункции //ПолучитьДокументТранзитногоПеремещения()

//Создаем документи перемещение товаров для таблици "ТЗ_Козина"(см.Форма)
//Параметры:
// Нет 
// Возвращаемое значение:
//   ДокументСсылка.ПеремещениеТоваров   - документ ссылка на  созданое перемещения
Функция ПолучитьДокументПеремещениеТоваров()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
		ПеремещениеТоваров = Документы.ПеремещениеТоваров.СоздатьДокумент();
		Если НЕ Соглашение.Пустая()  Тогда
			ПеремещениеТоваров.Организация     		= Соглашение.Организация;
		КонецЕсли; 
		ПеремещениеТоваров.Дата						= ТекущаяДата();
		ПеремещениеТоваров.ВидЦены          		= ВидЦены;
		ПеремещениеТоваров.Проведен					= Ложь;
		ПеремещениеТоваров.СпособДоставки			= Перечисления.СпособыДоставки.Самовывоз;
		ПеремещениеТоваров.Ответственный    		= АвторизированныйПользователь;
		ПеремещениеТоваров.Подразделение			= АвторизированноеПодразделение;
		ПеремещениеТоваров.СкладОтправитель 		= СкладОтправитель;
		ПеремещениеТоваров.СкладПолучатель  		= СкладПолучатель;
		ПеремещениеТоваров.Статус           		= Перечисления.СтатусыПеремещенийТоваров.Принято;
		ПеремещениеТоваров.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		
		Для Каждого ТекущаяСтрока Из Товары Цикл
			НоваяСтрока = ПеремещениеТоваров.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		КонецЦикла;
		
		Попытка
			ПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			НоваяЗаписьСписок = СписокДокументов.Добавить();
			НоваяЗаписьСписок.СкладОтправительПредставление	 = Строка(СкладОтправитель);
			НоваяЗаписьСписок.СкладПолучательПредставления	 = Строка(СкладПолучатель);
			НоваяЗаписьСписок.ИндентификаторКартинки = 2;
			ЗаполнитьЗначенияСвойств(НоваяЗаписьСписок, ПеремещениеТоваров);
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПеремещениеТоваров.Ссылка));
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат ПеремещениеТоваров.Ссылка;
КонецФункции //ПолучитьДокументПеремещениеТоваров()

// Получаем ссылку на заполненния назначения документа Перемещения
//Параметры:
// ЗаказНаПеремещениеСсылка -ДокументСсылка.ЗаказНаПеремещения - ссылка на документ для заполнения назначения Перемещения
//                			 ДокументСсылка.ЗаказНаПеремещения ,
// 							 ДокументСсылка.ЗаказКлиента,
// 							 ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
// 							 ДокументСсылка.ЗаказНаСборку,
// 							 ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаНазначение(ЗаказНаПеремещениеСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
        |	Назначения.Ссылка
        |ИЗ
        |	Справочник.Назначения КАК Назначения
        |ГДЕ
        |	Назначения.Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ", ЗаказНаПеремещениеСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
КонецФункции // ПолучитьСсылкуНаНазначение()

// Обновляем таблицу значения "СписокДокументов"
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ОбновитьНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокДокументов();
	Запрос.УстановитьПараметр("СписокДокументов",СписокДокументов.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	СписокДокументов.Загрузить(РезультатЗапроса.Выгрузить());
	Отбор			= Новый Структура();
	Отбор.Вставить("Проведен",Ложь);
	РезультатОтбора	= СписокДокументов.НайтиСтроки(Отбор);
	
	Если РезультатОтбора.Количество()>0 Тогда
	  	ПроверкаНаПроведения = Истина;
	Иначе 
		ПроверкаНаПроведения = Ложь;
	КонецЕсли; 	
КонецПроцедуры // ОбновитьНаСервере()


// Перед закритием формы проверяем пользователь провел все документи,
// если есть не проведенный выдаем сообщение
//
// Параметры:
// НЕТ
//
// Возвращаемое значение:
//   Строка   - текст сообщенияоб ошибке
//
&НаКлиенте
Функция ПроверитьДокументПроведенНаСервере(РезультатОтбора)

	Если РезультатОтбора.Количество()>0 Тогда
		ТекстСообщенияПользователю   = НСтр("ru='Закрыть форму? Будут удалены не проведенные документы : '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());;
		Для каждого Строка Из РезультатОтбора Цикл
			    ТекстСообщения = НСтр("ru='%1,  '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(Строка.Ссылка));
				ТекстСообщенияПользователю = ТекстСообщенияПользователю + ТекстСообщения; 
	   КонецЦикла;
	КонецЕсли;

	Возврат ТекстСообщенияПользователю;	
КонецФункции // ПроверитьДокументПроведенНаСервере()

// Проверяем на проведенныя докуменрта 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
&НаСервере
Функция ПолучитьТекстЗапросаСписокДокументов()
ТекстЗапроса =
			  "ВЫБРАТЬ
			  |	СписокДокументов.Ссылка
			  |ПОМЕСТИТЬ ТабЗнч
			  |ИЗ
			  |	&СписокДокументов КАК СписокДокументов
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ЗаказНаПеремещение.Номер 			КАК Номер,
			  |	ЗаказНаПеремещение.Ссылка			КАК Ссылка,
			  |	ЗаказНаПеремещение.Дата				КАК Дата,
			  |	ЗаказНаПеремещение.СкладОтправитель	КАК СкладОтправитель,
			  |	ЗаказНаПеремещение.СкладПолучатель	КАК СкладПолучатель,
			  |	ПРЕДСТАВЛЕНИЕ(ЗаказНаПеремещение.СкладОтправитель)	КАК СкладОтправительПредставление,
			  |	ПРЕДСТАВЛЕНИЕ(ЗаказНаПеремещение.СкладПолучатель)	КАК СкладПолучательПредставления,
			  |	ЗаказНаПеремещение.Проведен 		КАК Проведен,
			  |ВЫБОР
              |		КОГДА ЗаказНаПеремещение.Проведен
              |			ТОГДА 0
              |		ИНАЧЕ 2
              |	КОНЕЦ 								КАК  ИндентификаторКартинки
			  |ИЗ
			  | ТабЗнч  КАК ТабЗнч
			  |
			  |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ   Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
			  |	ПО ТабЗнч.Ссылка = ЗаказНаПеремещение.Ссылка
			  |
			  |ОБЪЕДИНИТЬ 
			  |
			  |ВЫБРАТЬ
			  |	ПеремещениеТоваров.Номер,
			  |	ПеремещениеТоваров.Ссылка,
			  |	ПеремещениеТоваров.Дата,
			  |	ПеремещениеТоваров.СкладОтправитель,
			  |	ПеремещениеТоваров.СкладПолучатель,
			  |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.СкладОтправитель),
			  |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.СкладПолучатель),

			  |	ПеремещениеТоваров.Проведен,
			  |	ВЫБОР
              |		КОГДА ПеремещениеТоваров.Проведен
              |			ТОГДА 0
              |		ИНАЧЕ 2
              |	КОНЕЦ
			  |ИЗ
			  | ТабЗнч  КАК ТабЗнч
			  |
			  |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			  |	ПО ТабЗнч.Ссылка = ПеремещениеТоваров.Ссылка";        
Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаСписокДокументов()

// удалить не проведенные документы
//
// Параметры:
//  НЕТ
&НаСервере
Процедура УдалитьДокументы()
	УстановитьПривилегированныйРежим(Истина);
	Для каждого Строка Из СписокДокументов Цикл
		Если НЕ Строка.Проведен Тогда
			ДокСсылка 	= Строка.Ссылка;
			ДокОбъект	= ДокСсылка.ПолучитьОбъект(); 
			ДокОбъект.УстановитьПометкуУдаления(Истина);
			ДокОбъект.Записать();
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокОбъект.Ссылка));
		КонецЕсли;
		Если ТипЗнч(Строка.Ссылка)=Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		    ДокСсылка 			=	Строка.Ссылка;
			ПроверкаНаОтгрузку	=   ПолучитьПроверкуНаОтгрузкуДругимПеремещением(ДокСсылка);
			Если ПроверкаНаОтгрузку  Тогда
			    ДокОбъект			=	ДокСсылка.ПолучитьОбъект();
				ДокОбъект.Статус    =	Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
				ТоварыДок				=   ДокОбъект.Товары;
				Для каждого СтрокаТаблицы Из ТоварыДок Цикл
				    СтрокаТаблицы.Отменено = Истина;
				КонецЦикла; 
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокОбъект.Ссылка));
			Иначе 
				ОтправитьПисьмоОбОтгрузкеЗаказа(ДокСсылка);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры // УдалитьДокументы()

// Проверяем не отгрузили заказ перемещениее другим документом
//
// Параметры:
//  ДокСсылка  - СправочникСсылка.ЗаказНаПеремещение- 
//                 ссылка на документ на проверку 
//
// Возвращаемое значение:
//  Булево   -    Истина,если отгрузили
//			 -	  Ложь, если не отгрузили		
&НаСервере
Функция ПолучитьПроверкуНаОтгрузкуДругимПеремещением(ДокСсылка)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗадачиДокументаПеремещения();
	Запрос.УстановитьПараметр("Ссылка",ДокСсылка);
	РезультатЗапроса = Запрос.Выполнить();
Возврат РезультатЗапроса.Пустой();
КонецФункции // ПроверкаНаОтгрузкуДругимПеремещением()

// Загружает документи перемещения создани на основании заказа на перемещения
//
// Параметры:
//  Нет
// Возвращаемое значение:
//   Строка   - текст запроса
&НаСервере
Функция ПолучитьТекстЗадачиДокументаПеремещения()
ТекстЗапроса = "ВЫБРАТЬ
				|	ДокументПоступления,
				|	КПоступлениюОстаток
				|ИЗ
				|	РегистрНакопления.ТоварыКПоступлению.Остатки(,
				|						Выразить(ДокументПоступления КАК Документ.ЗаказНаПеремещение) = &Ссылка)";
Возврат ТекстЗапроса ;
КонецФункции // ПолучитьТекстЗадачиДокументаПеремещения()

// Отправляем сообщения тех подержку об создание автодвижений по документу "ДокСсылка"
//
// Параметры:
//  ДокСсылка  - ДокументСсылка.ЗаказНаПеремещения - ссылка на документ, на которое сработало автодвижения               
&НаСервере
Процедура ОтправитьПисьмоОбОтгрузкеЗаказа(ДокСсылка)
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc.rovno.ua", "Відділ тех. підтримки"));  

	ТемаПисьма = "По заказу на перемещения из МРМ выполнилось регламетированое задания автоматическое движение товаров.";
	ТелоПисьма = "
	|<h3>По заказу на перемещения из МРМ выполнилось регламетированое задания автоматическое движение товаров. <br />
	|Нужно закрыть документ  %1 и удалить подчиненные документи.</h3>";
	НавигационнаяСсылка	= ПолучитьНавигационнуюСсылку(ДокСсылка);
	ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, Строка(НавигационнаяСсылка));

	ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому,,,,,,ТипТекстаПочтовогоСообщения.HTML);
	ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("відділ 1С"), ПараметрыПисьма);
КонецПроцедуры // ОтправитьПисьмоОбОтгрузкеЗаказа(ДокСсылка)()

// После вопроса об закритие документа,  проверяем нужно ли удалить документи
//Параметры:
// Результат - РежимДиалогаВопрос - ответ на вопрос об удалении не проведенных документов, если Да - удаляем
&НаКлиенте
Процедура УдалитьНеПроведенныеДокументы(Результат, ДополнительныеПараметры)  Экспорт
	Если ЭтаФорма.Открыта()  Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			ОтветПередЗакрытием=Истина;
			УдалитьДокументы();
			Закрыть(Ложь);
		КонецЕсли;
	КонецЕсли;
	ОжидаетсяОтветНаВопрос = Ложь;
КонецПроцедуры

// Закрывает форму через 15 минут после открытия
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ЗакрытьФормуАвтоматически() Экспорт
	Если ЭтаФорма.Открыта() И ОжидаетсяОтветНаВопрос<>Истина  Тогда
		ОбновитьНаСервере();
		Если НЕ ТранзитныйСклад.Пустая() Тогда
			ОтветПередЗакрытием=Истина;
			Если ПроверкаНаПроведения Тогда
			   УдалитьДокументы();
		   КонецЕсли;
		   
			Закрыть(ПроверкаНаПроведения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗакрытьФормуАвтоматически()

// Процедура действия,который выполняются после ответа на вопрос пользователя 
//
//Параметры:
// Результат - РежимДиалогаВопрос - ответ на вопрос об удалении не проведенных документов, если Да - удаляем
//
&НаКлиенте
Процедура ОтветНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДокументПеремещения = ПолучитьДокументПеремещениеТоваров();
		Если ДокументПеремещения<>Неопределено Тогда
		    ОткрытьЗначение(ДокументПеремещения);
 		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ОтветНаВопрос()

// Проверить на наличия товара на складах для отгрузки
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Булево  - если товар полность в наличии, тогда ИСТИНА, иначе ЛОЖЬ
//
&НаСервере
Функция ПроверитьНаНаличияТовараНаСкладах()
	УстановитьПривилегированныйРежим(Истина);
	Проверка = Истина;
	Запрос 	= Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНаНаличияТовара();
	Запрос.УстановитьПараметр("Товар",	Товары.Выгрузить());
	Запрос.УстановитьПараметр("Склад", 	СкладОтправитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Номенклатура = Выборка.Номенклатура;
		Если   Выборка.Количество>Выборка.Наличие	Тогда
			Сообщение 	= Новый СообщениеПользователю;
			ТекстСообщения = НСтр("ru='Превышает остаток товара %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(Номенклатура));
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();	
			Проверка  = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Проверка
	

КонецФункции // ПроверитьНаНаличияТовараНаСкладах()

// Получаем текст запроса для проверки наличиия товара на складе 
//
// Параметры:
// НЕТ
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаНаНаличияТовара()

	ТекстЗапроса = "ВЫБРАТЬ
				|	Товары.Номенклатура,
				|	Товары.Количество
				|ПОМЕСТИТЬ ДокументПеремещения
				|ИЗ
				|	&Товар КАК Товары
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Номенклатура,
				|	СУММА(Количество) КАК Количество
				|ПОМЕСТИТЬ Товары
				|ИЗ
				|	ДокументПеремещения

				|СГРУППИРОВАТЬ ПО
				|	Номенклатура
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.Номенклатура,
				|	Товары.Количество,
				|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК Наличие
				|ИЗ
				|	Товары КАК Товары
				|		
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
				|		,
				|		Номенклатура В
				|			(ВЫБРАТЬ Номенклатура ИЗ Товары)
				|		И Склад = &Склад) КАК СвободныеОстаткиОстатки
				|		
				|ПО Товары.Номенклатура = СвободныеОстаткиОстатки.Номенклатура";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНаНаличияТовара()


#КонецОбласти








