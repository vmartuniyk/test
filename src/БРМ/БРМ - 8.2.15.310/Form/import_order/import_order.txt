
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_Заглушка");
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция Тест_Заглушка(Параметр) Экспорт
	ЮнитТест.ПроверитьИстину(Истина,);
КонецФункции // Тест_Заглушка()


#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ПрофильАнализа.Добавить(), Новый Структура("ИмяРеквизита", "Код"));
	ЗаполнитьЗначенияСвойств(ПрофильАнализа.Добавить(), Новый Структура("ИмяРеквизита", "Артикул"));
	ЗаполнитьЗначенияСвойств(ПрофильАнализа.Добавить(), Новый Структура("ИмяРеквизита", "Наименование"));
	ЗаполнитьЗначенияСвойств(ПрофильАнализа.Добавить(), Новый Структура("ИмяРеквизита", "Количество"));
	ЗаполнитьЗначенияСвойств(ПрофильАнализа.Добавить(), Новый Структура("ИмяРеквизита", "Цена"));
	
	ОбъектБиблиотека = РеквизитФормыВЗначение("Объект").GetLibrary("Библиотека внешних обработок");
	ОбъектБиблиотека.ПостроитьДеревоОператоров(АдресХранилищаДереваОператоров, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьРодительВидНоменклатуры(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ИмяСобытия	= "Запись_Номенклатура"	Тогда
		Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
			Если Источник = ТекущиеДанные.Номенклатура Тогда
				Возврат;
			КонецЕсли;
			ПривязатьНаСервере(Источник, ТекущаяСтрока);
			ПривязатьКросПривязкиКлиент(ТекущиеДанные.Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	Для каждого Строка Из ПрофильАнализа Цикл
		Строка.НомерКолонки = 0;
		Строка.Выражение 	= "";
	КонецЦикла; 
	СоглашениеПриИзмененииСервер();
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПрофильАнализа

&НаКлиенте
Процедура ПрофильАнализаПриИзменении(Элемент)
	
	СохранитьНастройкиПоСоглашению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПрофильАнализа.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НаименованиеФормы = "ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Анализ прайс-листов (ALPS)") + ".Форма.КонструкторФормул";
		СтруктураПараметров = Новый Структура("Формула, Заголовок, Операторы", ТекущиеДанные.Выражение, "Доступные поля", АдресХранилищаДереваОператоров);
		РезультатРедактирования = ОткрытьФормуМодально(НаименованиеФормы, СтруктураПараметров, ЭтаФорма);		
		Если РезультатРедактирования <> Неопределено Тогда
			ТекущиеДанные.Выражение = РезультатРедактирования;
			СохранитьНастройкиПоСоглашению();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрофильАнализаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Перем ТекущаяСтрока, ТекущиеДанные, ТекущийЭлементТовары;
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные, ТекущийЭлементТовары) Тогда
		ИмяКолонки = ТекущийЭлементТовары.Имя;
		Если 		ИмяКолонки = "ТоварыНоменклатураКод" ИЛИ ИмяКолонки = "ТоварыНоменклатураАртикул" ИЛИ ИмяКолонки = "ТоварыНоменклатура" Тогда 
			ОткрытьЗначение(ТекущиеДанные.Номенклатура);
		ИначеЕсли 	ИмяКолонки = "ТоварыКод" ИЛИ ИмяКолонки = "ТоварыАртикул" ИЛИ ИмяКолонки = "ТоварыНаименование" Тогда
			ОткрытьЗначение(ТекущиеДанные.НоменклатураПоставщика);
		ИначеЕсли ИмяКолонки = "ТоварыГарантированнаяЦена" ИЛИ ИмяКолонки = "ТоварыМинимальнаяЦена" Тогда
			ПараметрыФормы = Новый Структура;  
			ПараметрыФормы.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
			ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
			ФормаОчета = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ОтчетПоЦенамПоставщиков", ПараметрыФормы);
			ФормаОчета.Открыть();			
		КонецЕсли;          
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		ПостроениеДереваСоответствий(ТекущаяСтрока);
	КонецЕсли;
	
	ЭлементыДерева = ПохожиеОбъекты.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъекты.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура НоменклатураВидНоменклатурыПриИзменении(Элемент)
	ЗаполнитьРодительВидНоменклатуры(Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьИмпорт(Команда)
	ВыполнитьИмпортСервер();
КонецПроцедуры


&НаКлиенте
Процедура МенюТовары_ПривязатьНоменклатуру(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные; 
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		ЭлементыДерева = ПохожиеОбъекты.ПолучитьЭлементы();
		Если НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			Сообщить("Жаль, но чтоб сделать новую привязку старую нужно удалить");
		ИначеЕсли ЭлементыДерева.Количество() = 2 Тогда
			ПривязатьНаСервере(ЭлементыДерева[1].Номенклатура, ТекущаяСтрока);
			ПривязатьКросПривязкиКлиент(ЭлементыДерева[1].Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
		ИначеЕсли ЭлементыДерева.Количество() = 1 Тогда
			Сообщить("Жаль, но ни одного соответствия не найдено");	
		Иначе
			Сообщить("Жаль, но соответствий больше одного, используйте нижнее поле");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МенюТовары_УдалитьПривязку(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		Если НЕ ТекущиеДанные.НоменклатураПоставщика.Пустая() Тогда
			ТекущиеДанные.МинЦена = 0;
			УдалитьПривязкуСервер(ТекущиеДанные.НоменклатураПоставщика);
		КонецЕсли;
		ТекущиеДанные.Номенклатура 			= Неопределено;
		ТекущиеДанные.НоменклатураКод 			= Неопределено;
		ТекущиеДанные.НоменклатураАртикул 		= Неопределено;
		//ТекущиеДанные.НоменклатураНаименование = Неопределено;
		ТекущиеДанные.НоменклатураПоставщика	= Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МенюТовары_СоздатьНоменклатуру(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные; 
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		Если ТекущиеДанные.Номенклатура.Пустая() Тогда
			ФормаСправочника 	= ПолучитьФорму("Справочник.Номенклатура.Форма.ПомощникНового", , ЭтаФорма, Новый УникальныйИдентификатор);
			СтруктураЗаполнения = Новый Структура("Артикул, Наименование");
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ТекущиеДанные);
			ПривязатьКроссНаименованияКлиент(СтруктураЗаполнения);
			ЗаполнитьЗначенияСвойств(ФормаСправочника.Объект, СтруктураЗаполнения);
			ФормаСправочника.Объект.НаименованиеПолное 	= СтруктураЗаполнения.Наименование;
			ФормаСправочника.Объект.ГруппаДоступа  		= Базовые_ГруппаДоступаНоменклатуры; 
			ФормаСправочника.Объект.Родитель 			= Базовые_Родитель;
			ФормаСправочника.Объект.ВидНоменклатуры 	= Базовые_ВидНоменклатуры;
			ФормаСправочника.Объект.ИспользованиеХарактеристик = Базовые_ИспользованиеХарактеристик;
			ФормаСправочника.ГруппаДоступаНоменклатурыДляКонтроля = Базовые_ГруппаДоступаНоменклатуры;
			ОткрытьФормуМодально(ФормаСправочника);
		Иначе
			Состояние("Для создания новой номенклатуры, привязку следует удалить");	                           
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПохожиеОбъекты_ПривязатьНоменклатуру(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	ТекущиеДанные = Элементы.ПохожиеОбъекты.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Номенклатура = ТекущиеДанные.Номенклатура;
		Если Номенклатура.Пустая() ИЛИ НЕ ТекущиеДанные.НоменклатураПоставщика.Пустая() Тогда
			Состояние("Привязывать можно только к номенклатуре, а не к позиции прайса или привязаной номенклатуре поставщика");
			Возврат;
		КонецЕсли;			
	Иначе
		Состояние("ТекущиеДанные в нижнем поле не определены");
		Возврат;	
	КонецЕсли;
		
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		ПривязатьНаСервере(Номенклатура, ТекущаяСтрока);
		ПривязатьКросПривязкиКлиент(Номенклатура, ТекущиеДанные.Код, ТекущиеДанные.Артикул);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъекты_УдалитьПривязку(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("ПохожиеОбъекты", ТекущаяСтрока, ТекущиеДанные) Тогда
		Если НЕ ТекущиеДанные.НоменклатураПоставщика.Пустая() Тогда
			СтрокаДерева 	= ПохожиеОбъекты.НайтиПоИдентификатору(ТекущаяСтрока);
			КоллекцияДерева = СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();
			КоллекцияДерева.Удалить(СтрокаДерева);
			УдалитьПривязкуСервер(ТекущиеДанные.НоменклатураПоставщика);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъекты_СкопироватьНоменклатуру(Команда)
	ТоварыТекущиеДанные  = Элементы.Товары.ТекущиеДанные;
	ПохожиеОбъектыТекущиеДанные = Элементы.ПохожиеОбъекты.ТекущиеДанные;
	Если ТоварыТекущиеДанные <> Неопределено И ПохожиеОбъектыТекущиеДанные <> Неопределено Тогда
		Номенклатура = ПохожиеОбъектыТекущиеДанные.Номенклатура;
		Если Номенклатура.Пустая() ИЛИ НЕ ПохожиеОбъектыТекущиеДанные.НоменклатураПоставщика.Пустая() Тогда
			Состояние("Клонировать можно только номенклатуру (позиция с надписью <Открыть карточку>)");
			Возврат;
		КонецЕсли;
		ФормаСправочника = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("ЗначениеКопирования", Номенклатура), ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаСправочника.Объект.Артикул 		= ТоварыТекущиеДанные.Артикул;
		//ФормаСправочника.ШтрихКод	 			= РА_ТекущиеДанные.Штрихкод;
		ФормаСправочника.Объект.ФайлКартинки 	= Неопределено;
		ФормаСправочника.Объект.ЦеноваяГруппа 	= Неопределено;
		ФормаСправочника.ОткрытьМодально();
	Иначе
		Состояние("ТекущиеДанные в нижнем или верхнем поле не определены");	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КлючевыеСлова_ПоискПоНоменклатуре(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		РучноеПостроениеДереваСоответствий(ТекущаяСтрока, "ПоискПоНоменклатуре");
	КонецЕсли;
	ОбработатьДействиеУстановкиТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСлова_ПоискПоПоставщикам(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		РучноеПостроениеДереваСоответствий(ТекущаяСтрока, "ПоискПоПоставщикам");
	КонецЕсли;
	ОбработатьДействиеУстановкиТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСлова_ПоискПоШтрихкоду(Команда)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("Товары", ТекущаяСтрока, ТекущиеДанные) Тогда
		РучноеПостроениеДереваСоответствий(ТекущаяСтрока, "ПоискПоШтрихкоду");
	КонецЕсли;
	ОбработатьДействиеУстановкиТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСлова_УстановитьФлажки(Команда)
	ОбработатьДействиеСФлажкамиТаблицы("КлючевыеСлова", "Ключ", Истина);
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСлова_СнятьФлажки(Команда)
	ОбработатьДействиеСФлажкамиТаблицы("КлючевыеСлова", "Ключ", Ложь);
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	Если Соглашение.Пустая() Тогда
		Возврат;	
	КонецЕсли;
	СтруктураЗаполнения = ПолучитьСтруктурыЗаполненияПоставщик(Соглашение);

	ФормаДокумента = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", , , Новый УникальныйИдентификатор , );
	ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, СтруктураЗаполнения);
	
	ПродажаОблагаетсяНДС   = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
	ПродажаНеОблагаетсяНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС");
	СтавкаБезНДС	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	Для Каждого ТекущаяСтрока Из Товары Цикл
		НоваяСтрока = ФормаДокумента.Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Если 	  СтруктураЗаполнения.НалогообложениеНДС = ПродажаОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС 	= ПолучитьЗначениеРеквизита("СтавкаНДС", НоваяСтрока.Номенклатура);
			ТекПроцентНДС 			= ПолучитьСтавкуНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаНДС 	= РассчитатьСуммуНДС(НоваяСтрока.Сумма, ТекПроцентНДС, СтруктураЗаполнения.ЦенаВключаетНДС);
		ИначеЕсли СтруктураЗаполнения.НалогообложениеНДС = ПродажаНеОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = СтавкаБезНДС;
			НоваяСтрока.СуммаНДС  = 0;
		КонецЕсли;
		ЗаполнитьСтрокуТабличнойЧастиДокумента(НоваяСтрока, СтруктураЗаполнения.ЦенаВключаетНДС);
	КонецЦикла;
	
	_Объект = ФормаДокумента.Объект;	
	Если СтруктураЗаполнения.ТребуетсяДоговор Тогда 
		ФормаДокумента.Элементы.Договор.Доступность = Истина; 
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказПоставщику(ФормаДокумента);
	
	ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(_Объект, ФормаДокумента.СуммаЗаказано, Истина);
	Для Каждого ЭтапОплаты Из _Объект.ЭтапыГрафикаОплаты Цикл 
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект.ЭтапыГрафикаОплаты.Добавить(), ЭтапОплаты); 
	КонецЦикла;
	
	ФормаДокумента.Открыть();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СоглашениеПриИзмененииСервер()

	ЗагрузитьНастройкиПоСоглашению();		

КонецПроцедуры // СоглашениеПриИзмененииСервере()
 
&НаСервере
Процедура ЗагрузитьНастройкиПоСоглашению()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрофилиСоглашений = ХранилищеНастроекДанныхФорм.Загрузить("ALPS_ХранилищеПрофилиСоглашений", , , "ALPS_ХранилищеПрофилиСоглашений");
	Если ТипЗнч(ПрофилиСоглашений) = Тип("Соответствие") Тогда
		Если НЕ Соглашение.Пустая() Тогда
			ТаблицаПрофиля = ПрофилиСоглашений[Соглашение];
			Если ТипЗнч(ТаблицаПрофиля) = Тип("ТаблицаЗначений") Тогда
				ПрофильАнализа.Загрузить(ТаблицаПрофиля);
			КонецЕсли; 	
		КонецЕсли;
	Иначе
		ХранилищеНастроекДанныхФорм.Сохранить("ALPS_ХранилищеПрофилиСоглашений", , Новый Соответствие, "Профили соглашений", "ALPS_ХранилищеПрофилиСоглашений");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПоСоглашению()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрофилиСоглашений = ХранилищеНастроекДанныхФорм.Загрузить("ALPS_ХранилищеПрофилиСоглашений", , , "ALPS_ХранилищеПрофилиСоглашений");
	Если НЕ ТипЗнч(ПрофилиСоглашений) = Тип("Соответствие") Тогда
		ПрофилиСоглашений = Новый Соответствие;		
	КонецЕсли;
	
	Если НЕ Соглашение.Пустая() Тогда
		ПрофилиСоглашений[Соглашение] = ПрофильАнализа.Выгрузить();
		ХранилищеНастроекДанныхФорм.Сохранить("ALPS_ХранилищеПрофилиСоглашений", , ПрофилиСоглашений, "Профили соглашений", "ALPS_ХранилищеПрофилиСоглашений");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо выбрать соглашение'"), , "Соглашение");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ВыполнитьИмпортСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сигнатура	  = "";
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ВОднойСтроке  = ШиринаТаблицы = 1;
		
	Если ВОднойСтроке Тогда
		//тут коечего не хватает :)
	Иначе
		ВыполнитьОтсечениеЛишнейИнформации(ТабличныйДокумент, ВысотаТаблицы, ШиринаТаблицы);	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьОтсечениеЛишнейИнформации(ТабличныйДокумент, Rmax, Cmax)
	
	ТаблицаДанных	= Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Индекс",   Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(Cmax)));	
	                                                    
	Для j=1 По Cmax Цикл ТаблицаДанных.Колонки.Добавить("C"+j, Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(100))); КонецЦикла;
	
	ЕстьЧисла = Истина;
	Для i=1 По Rmax Цикл
		ДанныеСтрока = ТаблицаДанных.Добавить();
		Для j=1 По Cmax Цикл	
			ДанныеСтрока[j] = СокрЛП(СтрЗаменить(ТабличныйДокумент.Область("R"+i+"C"+j).Текст, "$", ""));
			Если ПустаяСтрока(ДанныеСтрока[j]) Тогда
				ДанныеСтрока.Индекс = ДанныеСтрока.Индекс + "0"; 		
			Иначе
				Попытка 
					тмп = Число(ДанныеСтрока[j]);
					Если тмп <= 0 Тогда
						ДанныеСтрока.Индекс = ДанныеСтрока.Индекс + "1"; 	
					Иначе	
					 	ДанныеСтрока.Индекс = ДанныеСтрока.Индекс + "9";
					КонецЕсли; 
				Исключение
					ДанныеСтрока.Индекс = ДанныеСтрока.Индекс + "1";
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	
	//Выполняем нормализацию
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТабЗнч.Индекс
		|ПОМЕСТИТЬ ТабЗнч
		|ИЗ
		| 	&ТабЗнч КАК ТабЗнч
		|;
		|ВЫБРАТЬ
		|	ТабЗнч.Индекс,
		|	Количество(ТабЗнч.Индекс) КАК Количество
		|ИЗ
		| 	ТабЗнч КАК ТабЗнч
		|ГДЕ
		| 	ТабЗнч.Индекс    ПОДОБНО &ШаблонОтсечения
		|И	ТабЗнч.Индекс НЕ ПОДОБНО &ШаблонИсключения
		|СГРУППИРОВАТЬ ПО
		|	ТабЗнч.Индекс
		|УПОРЯДОЧИТЬ ПО 
		| 	Количество Убыв
		|;";
	Запрос.УстановитьПараметр("ТабЗнч", ТаблицаДанных);
	Запрос.УстановитьПараметр("ШаблонОтсечения",  ПолучитьШаблонОтсечения(ПрофильАнализа, Cmax));
	Запрос.УстановитьПараметр("ШаблонИсключения", ПолучитьШаблонИсключения(ПрофильАнализа, Cmax));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не удалось найти необходимые данные!");
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	НормализованаяТаблица.Индекс
		|ПОМЕСТИТЬ НормализованаяТаблица
		|ИЗ
		| 	&НормализованаяТаблица КАК НормализованаяТаблица
		|; 
		//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЗнч.*
		|ПОМЕСТИТЬ ТабЗнч
		|ИЗ
		| 	&ТабЗнч КАК ТабЗнч	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЗнч.*
		|ИЗ
		| 	ТабЗнч КАК ТабЗнч
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ НормализованаяТаблица КАК НормализованаяТаблица
		|ПО НормализованаяТаблица.Индекс = ТабЗнч.Индекс
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабЗнч;
		|УНИЧТОЖИТЬ НормализованаяТаблица;";
	Запрос.УстановитьПараметр("ТабЗнч", ТаблицаДанных);
	Запрос.УстановитьПараметр("НормализованаяТаблица", Выгрузка);
	ВыгрузкаДанных = Запрос.Выполнить().Выгрузить();
	
	ПрочитатьТабличныйДокумент(ПрофильАнализа, ВыгрузкаДанных, Товары); 	
	БыстрыйПоискСоответствий(ПрофильАнализа, Соглашение, Товары);
	
	Наименований 	= "Всего наименований - " + Товары.Количество();
	ОбщееКоличество = Товары.Итог("Количество");
	ОбщаяСумма		= Товары.Итог("Сумма");
	
	//СохранитьНастройкиПоСигнатуре(Соглашение, Сигнатура)	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонОтсечения(ПрофильАнализа, ШиринаТД)

	ШаблонОтсечения = "";
	СоответствиеКолонок = Новый Соответствие;
	Для каждого Строка  Из ПрофильАнализа Цикл
		Если Строка.ИмяРеквизита = "Количество" 
		 ИЛИ Строка.ИмяРеквизита = "Цена" Тогда
			СоответствиеКолонок[Строка.НомерКолонки] = "9"; 
		КонецЕсли; 
	КонецЦикла;
	
	Для Инд = 1 По ШиринаТД Цикл
	 	Если СоответствиеКолонок[Инд] = Неопределено Тогда
			ШаблонОтсечения = ШаблонОтсечения + "_";
		Иначе
			ШаблонОтсечения = ШаблонОтсечения + "9"; 	
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ШаблонОтсечения;

КонецФункции // ПолучитьШаблонОтсечения()

&НаСервереБезКонтекста
Функция ПолучитьШаблонИсключения(ПрофильАнализа, ШиринаТД)

	ШаблонИсключения = "";
	СоответствиеКолонок = Новый Соответствие;
	Для каждого Строка  Из ПрофильАнализа Цикл
		Если Строка.ИмяРеквизита = "Код" 
		 ИЛИ Строка.ИмяРеквизита = "Артикул"
		 ИЛИ Строка.ИмяРеквизита = "Наименование" Тогда
			СоответствиеКолонок[Строка.НомерКолонки] = "0";
		КонецЕсли; 
	КонецЦикла;
	
	Для Инд = 1 По ШиринаТД Цикл
	 	Если СоответствиеКолонок[Инд] = Неопределено Тогда
			ШаблонИсключения = ШаблонИсключения + "_";
		Иначе
			ШаблонИсключения = ШаблонИсключения + "0"; 	
		КонецЕсли; 
	КонецЦикла; 
		
	Возврат ШаблонИсключения;

КонецФункции // ПолучитьШаблонОтсечения()
 
&НаСервереБезКонтекста
Процедура ПрочитатьТабличныйДокумент(ПрофильАнализа, ВыгрузкаДанных, ТабЗнч)
	
	СкриптФормулы = "";
	СкриптВыполнения = "";
	Операнды = Новый Соответствие;	
	Для i = 1 По ВыгрузкаДанных.Колонки.Количество() Цикл Операнды.Вставить("[R$C" + i + "]", "СтрокаДанных.C" + i); КонецЦикла;
	
	Для Каждого Элемент Из ПрофильАнализа Цикл
		Булево_ОбщЗагружать = Элемент.НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(Элемент.Выражение);
		Если Элемент.ИмяРеквизита = "Код" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Код = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "СтрокаДанных.C" + Элемент.НомерКолонки;
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение); 	
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
        ИначеЕсли Элемент.ИмяРеквизита = "Артикул" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Артикул = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "СтрокаДанных.C" + Элемент.НомерКолонки;
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Наименование" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Наименование = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "СтрокаДанных.C" + Элемент.НомерКолонки;
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		//ИначеЕсли Элемент.ИмяРеквизита = "Штрихкод" И Булево_ОбщЗагружать Тогда
		//	СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Штрихкод = ";
		//	Если ПустаяСтрока(Элемент.Выражение) Тогда
		//		ПраваЧасть = "ТабДок.Область(""R$C" + Элемент.НомерКолонки + """).Текст";
		//	Иначе
		//		ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
		//	КонецЕсли;
		//	СкриптВыполнения = СкриптВыполнения + ПраваЧасть + ";";
		ИначеЕсли Элемент.ИмяРеквизита = "Количество" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Количество = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "СтрокаДанных.C" + Элемент.НомерКолонки;
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + "Число(" + ПраваЧасть + ");";
		ИначеЕсли Элемент.ИмяРеквизита = "Цена" И Булево_ОбщЗагружать Тогда
			СкриптВыполнения = СкриптВыполнения + "СтрокаТабЗнч.Цена = ";
			Если ПустаяСтрока(Элемент.Выражение) Тогда
				ПраваЧасть = "СтрокаДанных.C" + Элемент.НомерКолонки;
			Иначе
				ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Элемент.Выражение);
			КонецЕсли;
			СкриптВыполнения = СкриптВыполнения + "Число(" + ПраваЧасть + ");";
		КонецЕсли;
	КонецЦикла;
	
	Если СкриптВыполнения = "" Тогда Возврат; КонецЕсли;
	
	ТабЗнч.Очистить();
	Индекс = 1;
	Для Каждого СтрокаДанных Из ВыгрузкаДанных Цикл СтрокаТабЗнч = ТабЗнч.Добавить(); СтрокаТабЗнч.НомерСтроки = Индекс; Индекс = Индекс + 1; Выполнить(СкриптВыполнения); КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Выражение)
	ПраваЧасть = Выражение;
	Для Каждого Операнд Из Операнды Цикл ПраваЧасть = СтрЗаменить(ПраваЧасть, Операнд.Ключ, Операнд.Значение); КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БыстрыйПоискСоответствий(ПрофильАнализа, Соглашение, ТабЗнч)
	
	Если 		ПрофильАнализа[0].НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(ПрофильАнализа[0].Выражение) Тогда
		ПараметрСтрока = "И НомПоставщика.Код = ТабЗнч.Код";
	ИначеЕсли   ПрофильАнализа[1].НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(ПрофильАнализа[1].Выражение) Тогда
		ПараметрСтрока = "И НомПоставщика.Артикул = ТабЗнч.Артикул И НомПоставщика.Артикул <> """"";
	ИначеЕсли   ПрофильАнализа[2].НомерКолонки > 0 ИЛИ НЕ ПустаяСтрока(ПрофильАнализа[2].Выражение) Тогда
		ПараметрСтрока = "И НомПоставщика.Наименование = ВЫРАЗИТЬ(ТабЗнч.Наименование КАК Строка(100)) И НомПоставщика.Наименование <> """"";
	Иначе 
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//1. 
		|ВЫБРАТЬ
		|   ТабЗнч.НомерСтроки,
		|
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|
		|	ТабЗнч.Количество,
		|   ТабЗнч.Цена
		|
		|ПОМЕСТИТЬ ТабКеш
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2.
		|ВЫБРАТЬ
		|   ТабЗнч.НомерСтроки,
		|
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|
		|	ТабЗнч.Количество,
		|   ТабЗнч.Цена,
		|	Количество(ТабЗнч.Код) КАК КоличествоЗаписей
		|ПОМЕСТИТЬ ТаблицаЗаписей
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НомПоставщика
		|ПО НомПоставщика.Владелец = &Владелец
		|И	НЕ ПометкаУдаления
		|И	НомПоставщика.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		| " + ПараметрСтрока + " 
		|
        |СГРУППИРОВАТЬ ПО
		|   ТабЗнч.НомерСтроки,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Количество,
		|   ТабЗнч.Цена
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НомПоставщика.Номенклатура КАК Номенклатура,
		|	НомПоставщика.Характеристика КАК Характеристика	
		|ПОМЕСТИТЬ ТабНоменклатура
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НомПоставщика
		|ПО НомПоставщика.Владелец = &Владелец
		|И	НЕ ПометкаУдаления
		|И	НомПоставщика.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		| " + ПараметрСтрока + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура 	КАК Номенклатура,
		|	Характеристика 	КАК Характеристика,
		|	МИНИМУМ(Цена)   КАК МинимальнаяЦена
		|ПОМЕСТИТЬ ТабЦены
		|Из
		| 	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПервых(&НачалоДня, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ  ТабНоменклатура))
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5.
		|ВЫБРАТЬ
		|   ТабЗнч.НомерСтроки,
		|	0 КАК ПроцентСоответствия,
		|
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|
		|	ТабЗнч.Количество,
		|   ТабЗнч.Цена,
		|
		| 	ТаблицаЗаписей.КоличествоЗаписей, 
		|
		|   НомПоставщика.Номенклатура,
		|   &Склад										КАК Склад,
		|	ТабЗнч.Количество 							КАК КоличествоУпаковок,
		|	ТабЗнч.Количество * ТабЗнч.Цена				КАК Сумма,
		|	НомПоставщика.Номенклатура.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
		|	НомПоставщика.Номенклатура.СтавкаНДС		КАК СтавкаНДС,
		|
		|	НомПоставщика.Номенклатура.Код 				КАК НоменклатураКод,
		|   НомПоставщика.Номенклатура.Артикул			КАК НоменклатураАртикул,
		|
		|  	НомПоставщика.Ссылка    					КАК НоменклатураПоставщика,
		|   НомПоставщика.Артикул						КАК АртикулПоставщика,
		|   НомПоставщика.Наименование					КАК НаименованиеПоставщика,
		|
		|	РегистрАктуальность.Цена					КАК ГарантированнаяЦена,
		|	ТабЦены.МинимальнаяЦена						КАК МинимальнаяЦена
		|
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НомПоставщика
		|ПО НомПоставщика.Владелец = &Владелец
		|И	НЕ ПометкаУдаления
		|И	НомПоставщика.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
		| " + ПараметрСтрока + " 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаписей КАК ТаблицаЗаписей
		|ПО ТаблицаЗаписей.НомерСтроки 	= ТабЗнч.НомерСтроки
		|И	ТаблицаЗаписей.Код 			= ТабЗнч.Код
		|И  ТаблицаЗаписей.Артикул 		= ТабЗнч.Артикул
		|И  ТаблицаЗаписей.Наименование = ТабЗнч.Наименование
		|И  ТаблицаЗаписей.Количество 	= ТабЗнч.Количество
		|И  ТаблицаЗаписей.Цена 		= ТабЗнч.Цена
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(,
		|														(Номенклатура, Характеристика) В
		|															(ВЫБРАТЬ
		|																Номенклатура,
		|																Характеристика
		|															ИЗ ТабНоменклатура
		|														)) КАК РегистрАктуальность
		|ПО
		|	НомПоставщика.Номенклатура = РегистрАктуальность.Номенклатура
		|	И НомПоставщика.Характеристика = РегистрАктуальность.Характеристика
		|	И РегистрАктуальность.Актуально
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТабЦены КАК ТабЦены
		|ПО	ТабЦены.Номенклатура   = НомПоставщика.Номенклатура
		|И 	ТабЦены.Характеристика = НомПоставщика.Характеристика
		|;";
	Запрос.УстановитьПараметр("Владелец", Соглашение.Партнер);
	Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч.Выгрузить());
	Запрос.УстановитьПараметр("Склад", Соглашение.Склад);
	Запрос.УстановитьПараметр("ОблагаетсяНДС", Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	НаУдаление		= Новый Массив;
	СтруктураОтбора = ПолучитьСтруктуруОтбора();
	Для каждого Строка Из ТаблицаЗаписей Цикл
		Если Строка.КоличествоЗаписей > 1 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			МассивСтрок = ТаблицаЗаписей.НайтиСтроки(СтруктураОтбора);
			СтрокаМаксимум = Неопределено; 
			Для каждого СтрокаИзМассива Из МассивСтрок Цикл
				СтрокаИзМассива.ПроцентСоответствия = ПолучитьПроцентСоответствия(СтрокаИзМассива);
				Если СтрокаМаксимум = Неопределено Тогда
					СтрокаМаксимум = СтрокаИзМассива;
				ИначеЕсли СтрокаМаксимум.ПроцентСоответствия >= СтрокаИзМассива.ПроцентСоответствия Тогда
					ТаблицаЗаписей.Удалить(СтрокаИзМассива);
				Иначе
					ТаблицаЗаписей.Удалить(СтрокаМаксимум);
					СтрокаМаксимум = СтрокаИзМассива;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
	ТабЗнч.Загрузить(ТаблицаЗаписей);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОтбора()

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НомерСтроки", 0);
    СтруктураОтбора.Вставить("Код", "");
	СтруктураОтбора.Вставить("Артикул", "");
	СтруктураОтбора.Вставить("Наименование", "");
	СтруктураОтбора.Вставить("Количество", 0);
	СтруктураОтбора.Вставить("Цена", 0);
	Возврат СтруктураОтбора;
	
КонецФункции // ПолучитьСтруктуруОтбора()

&НаСервереБезКонтекста
Функция ПолучитьПроцентСоответствия(Строка)

	Артикул		 = Строка.Артикул;
	Наименование = Строка.Наименование; 
	
	ПроцентАртикул 				= 0;
	ПроцентНаименованиеПрямой 	= 0;
	ПроцентНаименованиеОбратный = 0;
	
	Если Строка.АртикулПоставщика = Артикул Тогда
		ПроцентАртикул = 100;		
	Иначе
		//Посимвольное сравнение
	КонецЕсли;
	
	ДлинаЭлемента 		= СтрДлина(ОчиститьСтрокуОтПробелов(Строка.НаименованиеПоставщика));
	ДлинаНаименования 	= СтрДлина(ОчиститьСтрокуОтПробелов(Наименование));
	МассивСлов = РазобратьСтрокуВМассивПоПробелам(Строка.НаименованиеПоставщика);
	ЧислоСовпадений = 0;
	Для Каждого Слово Из МассивСлов Цикл
		Вхождений = СтрЧислоВхождений(Наименование, Слово);
		ЧислоСовпадений = ЧислоСовпадений + Вхождений * СтрДлина(Слово);
	КонецЦикла;	
	ПроцентНаименованиеПрямой = (ЧислоСовпадений / ДлинаНаименования + ЧислоСовпадений / ДлинаЭлемента) / 2 * 100;
	
	
    ДлинаЭлемента 		= СтрДлина(ОчиститьСтрокуОтПробелов(Наименование));
	ДлинаНаименования 	= СтрДлина(ОчиститьСтрокуОтПробелов(Строка.НаименованиеПоставщика));
	МассивСлов = РазобратьСтрокуВМассивПоПробелам(Наименование);
	ЧислоСовпадений = 0;
	Для Каждого Слово Из МассивСлов Цикл
		Вхождений = СтрЧислоВхождений(Строка.НаименованиеПоставщика, Слово);
		ЧислоСовпадений = ЧислоСовпадений + Вхождений * СтрДлина(Слово);
	КонецЦикла;	
	ПроцентНаименованиеОбратный = (ЧислоСовпадений / ДлинаНаименования + ЧислоСовпадений / ДлинаЭлемента) / 2 * 100;
		
	Возврат Окр((ПроцентАртикул + ПроцентНаименованиеПрямой + ПроцентНаименованиеОбратный) / 3, 2);

КонецФункции // ПолучитьПроцентСоответствия()
  
&НаСервереБезКонтекста
Функция ОчиститьСтрокуОтПробелов(Строка)
	Возврат СтрЗаменить(СтрЗаменить(Строка, Символ(160), ""), Символ(32), "");
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьСтрокуВМассивПоПробелам(Строка)
    МассивСтрок = Новый Массив;
    СтрокаЗамены = СтрЗаменить(СтрЗаменить(Строка, Символ(160), Символы.ПС), Символ(32), Символы.ПС);
    Для i=1 По СтрЧислоСтрок(СтрокаЗамены) Цикл МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаЗамены, i)); КонецЦикла;
    Возврат МассивСтрок; 
КонецФункции



&НаСервере
Процедура ПривязатьНаСервере(Номенклатура, Идентификатор)
	
	//Если ПроверитьПривязкуНоменклатуры(Номенклатура, Соглашение.Партнер) Тогда
	//	Возврат;	
	//КонецЕсли;
	
	СтрокаПрайса = Товары.НайтиПоИдентификатору(Идентификатор);
	СтрокаПрайса.НоменклатураКод 	 = Номенклатура.Код;
	СтрокаПрайса.НоменклатураАртикул = Номенклатура.Артикул;
	СтрокаПрайса.ЕдиницаИзмерения 	 = Номенклатура.ЕдиницаИзмерения;
	СтрокаПрайса.СтавкаНДС 	 		 = Номенклатура.СтавкаНДС;
	//СтрокаПрайса.НоменклатураНаименование = Номенклатура.Наименование;
	//СтрокаПрайса.НомПосСсылка 			  = ОбъектПоставщика.Ссылка;
	СтрокаПрайса.Номенклатура 		 = Номенклатура;
	СтрокаПрайса.ГарантированнаяЦена = ПолучитьМинимальнуюЦенуГарантированногоПоставщика(Номенклатура);
	СтрокаПрайса.МинимальнаяЦена     = ПолучитьМинимальнуюЦенуПоставщика(Номенклатура);
	
	ОбновитьИсториюРаботыПользователейСПривязками(Номенклатура, Соглашение, 1, 0);	
	
КонецПроцедуры
 
&НаСервере
Процедура УдалитьПривязкуСервер(Ссылка)
	ОбъектПоставщика 			  = Ссылка.ПолучитьОбъект();
	ОбновитьИсториюРаботыПользователейСПривязками(ОбъектПоставщика.Номенклатура, Соглашение, 0, 1);
	ОбъектПоставщика.Номенклатура = Неопределено;
	ОбъектПоставщика.УстановитьПометкуУдаления(Истина);
	ОбъектПоставщика.Записать();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюРаботыПользователейСПривязками(Номенклатура, СоглашениеПартнера, СозданиеПривязки=0, УдалениеПривязки=0)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаймаутПопыток  = 1;
	ПопытокСделано  = 0;
	УИ_Пользователя = ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор();
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка 	
		|ИЗ	
		|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы
		|ГДЕ
		|	ВладелецФайла = &Соглашение	
		|И	Наименование  = &Наименование
		|");
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Наименование", "ALPS_statistic");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПрисоединенныйФайл = Выборка.Ссылка;
		
~Попытка:

		Если ПрисоединенныйФайл.Редактирует.Пустая() Тогда
			
			Попытка 
				ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ФайлОбъект.Редактирует = ПараметрыСеанса.ТекущийПользователь;
				ФайлОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ВызватьИсключение НСтр("ru='Не удалось обновить статистику, данная привязка не будет учтена в статистике.'");	
			КонецПопытки;
		
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				Запрос = Новый Запрос("
					|ВЫБРАТЬ 
					|	ХранимыйФайл 
					|Из 
					|	РегистрСведений.ПрисоединенныеФайлы 
					|ГДЕ 
					|	ПрисоединенныйФайл = &ПрисоединенныйФайл");
				Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл); 
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
			ИначеЕсли ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ПрисоединенныйФайл.Том) + ПрисоединенныйФайл.ПутьКФайлу;
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
			КонецЕсли;
			
			ЧтениеXML = Новый ЧтениеFastInfoset;
			ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
			ЧтениеXML.Прочитать();
			//ЧтениеXML.Прочитать();
			ЧтениеXML.Прочитать();
			
			Попытка
				ИсторияРаботы = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеXML.Значение).Получить();
			Исключение
			 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ВызватьИсключение НСтр("ru='Не удалось обновить файл статистики, данная привязка не будет учтена.'"); 
			КонецПопытки;
			
			ТаблицаИстории				= ИсторияРаботы["ТаблицаИстории"];
			НоваяСтрока 				= ТаблицаИстории.Добавить();
			НоваяСтрока.Дата			= ТекущаяДата();
			НоваяСтрока.Пользователь	= УИ_Пользователя;
			НоваяСтрока.СделаноПривязок	= СозданиеПривязки;
			НоваяСтрока.УдаленоПривязок	= УдалениеПривязки;
			
			//Если СозданиеПривязки > 0 Тогда
			//	ИсторияРаботы["Соглашение"].ПривязаноПозиций = ИсторияРаботы["Соглашение"].ПривязаноПозиций + СозданиеПривязки;
			//КонецЕсли;
			//Если УдалениеПривязки > 0 Тогда
			//	ИсторияРаботы["Соглашение"].ПривязаноПозиций = ИсторияРаботы["Соглашение"].ПривязаноПозиций - УдалениеПривязки;
			//КонецЕсли;
			//ИсторияРаботы["Соглашение"]     = Новый Структура("Партнер, ПривязаноПозиций, ИтогоПозиций", Соглашение.УникальныйИдентификатор(), ПривязаноПозиций, ИтогоПозиций);
			ИсторияРаботы["ТаблицаИстории"] = ТаблицаИстории;
			
			ХранилищеИстории = Новый ХранилищеЗначения(ИсторияРаботы, Новый СжатиеДанных(9));
		
			ЗаписьXML = Новый ЗаписьFastInfoset;
			ЗаписьXML.УстановитьДвоичныеДанные();
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("root");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеИстории));
			ЗаписьXML.ЗаписатьКонецЭлемента();

			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЗаписьXML.Закрыть());
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ДатаМодификацииУниверсальная", АдресВременногоХранилища, Ложь, УниверсальноеВремя(ТекущаяДата())));
			
~Освободить:

			Попытка
	            ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
				ФайлОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				ВызватьИсключение "Не удалось освободить файл статистики, но данная привязка будет учтена.";
			КонецПопытки;
		Иначе
			ОсвободитьФайлДляНачалаЗаписи(ПопытокСделано, ТаймаутПопыток, ПрисоединенныйФайл.ПолучитьОбъект());
			Перейти ~Попытка;
		КонецЕсли;
		
	Иначе
		
		ТаблицаИстории = СоздатьТаблицуИсторииРаботыПользователей();
		НоваяСтрока 				= ТаблицаИстории.Добавить();
		НоваяСтрока.Дата			= ТекущаяДата();
		НоваяСтрока.Пользователь	= УИ_Пользователя;
		НоваяСтрока.СделаноПривязок	= СозданиеПривязки;
		НоваяСтрока.УдаленоПривязок	= УдалениеПривязки;
		
		ИсторияРаботы = Новый Соответствие;
		ИсторияРаботы.Вставить("Соглашение", Новый Структура("Партнер, ПривязаноПозиций, ИтогоПозиций", Соглашение.УникальныйИдентификатор(), СозданиеПривязки, УдалениеПривязки));
		ИсторияРаботы.Вставить("ТаблицаИстории", ТаблицаИстории);
	
		ХранилищеИстории = Новый ХранилищеЗначения(ИсторияРаботы, Новый СжатиеДанных(9));
		
		ЗаписьXML = Новый ЗаписьFastInfoset;
		ЗаписьXML.УстановитьДвоичныеДанные();
		ЗаписьXML.ЗаписатьОбъявлениеXML();	
		ЗаписьXML.ЗаписатьНачалоЭлемента("root");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеИстории));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЗаписьXML.Закрыть());
		ПрисоединенныеФайлы.ДобавитьФайл(Соглашение, "ALPS_statistic", "xml", ТекущаяДата(), УниверсальноеВремя(ТекущаяДата()), АдресВременногоХранилища);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИсториюРаботыПользователей()

&НаСервереБезКонтекста
Функция ПолучитьМинимальнуюЦенуГарантированногоПоставщика(НоменклатураСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АктуальностьНоменклатуры.Цена КАК Цена
	                      |ИЗ
	                      |	РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК АктуальностьНоменклатуры
	                      |ГДЕ
	                      |	АктуальностьНоменклатуры.Актуально");
						  
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Цена, 0);
	
КонецФункции // ПолучитьМинимальнуюЦенупоставщика()

&НаСервереБезКонтекста
Функция ПолучитьМинимальнуюЦенуПоставщика(НоменклатураСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Минимум(Цена) КАК Цена
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПервых(&НачалоДня, Номенклатура = &Номенклатура)");
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));					  
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Цена, 0);
	
КонецФункции // ПолучитьМинимальнуюЦенупоставщика()

&НаСервере
Функция СоздатьТаблицуИсторииРаботыПользователей()
	БиблиотекаОбработок = РеквизитФормыВЗначение("Объект").GetLibrary("Библиотека внешних обработок");
	ТаблицаИстории = Новый ТаблицаЗначений;
	ТаблицаИстории.Колонки.Добавить("Дата", 			Новый ОписаниеТипов("Дата"));
	ТаблицаИстории.Колонки.Добавить("Пользователь", 	БиблиотекаОбработок.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИстории.Колонки.Добавить("СделаноПривязок", 	БиблиотекаОбработок.ПолучитьОписаниеТиповЧисла(10));
	ТаблицаИстории.Колонки.Добавить("УдаленоПривязок", 	БиблиотекаОбработок.ПолучитьОписаниеТиповЧисла(10));	
	Возврат ТаблицаИстории;
КонецФункции

&НаСервере
Процедура ОсвободитьФайлДляНачалаЗаписи(Попыток, Таймаут, ФайлОбъект)
	ВремяНачала = ТекущаяДата();	
	Пока ТекущаяДата() - ВремяНачала < Таймаут Цикл 
		Если Попыток = 10 Тогда
			ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			ФайлОбъект.Записать();
			Сообщить("Блокировка файла статистики пользователем """ + ФайлОбъект.Редактирует + """ снята. Данные статистики обновлены успешно!");
			Попыток = 0;
		КонецЕсли;
	КонецЦикла;	
	Попыток	= Попыток + 1;	
КонецПроцедуры



&НаКлиенте
Процедура ПривязатьКросПривязкиКлиент(Номенклатура, Код, Артикул)
	НаименованиеФормы = "ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Анализ прайс-листов (ALPS)") + ".Форма.КроссПривязки";	
	Форма = ПолучитьФорму(НаименованиеФормы, Новый Структура("Номенклатура, Код, Артикул, Владелец", Номенклатура, Код, Артикул, Неопределено), УникальныйИдентификатор);
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ОткрытьФормуМодально(Форма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьКроссНаименованияКлиент(СтруктураЗаполнения)
	Если ПустаяСтрока(СтруктураЗаполнения.Артикул) Тогда
		Возврат;
	КонецЕсли; 
	НаименованиеФормы = "ВнешняяОбработка." + ПолучитьБиблиотекуФорм("Анализ прайс-листов (ALPS)") + ".Форма.КроссНаименования";
	Форма = ПолучитьФорму(НаименованиеФормы, СтруктураЗаполнения, УникальныйИдентификатор);
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		СтруктураВозврата = ОткрытьФормуМодально(Форма);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			СтруктураЗаполнения = СтруктураВозврата;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


&НаСервере
Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки)
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	БиблиотекаФорм = ОбъектОбработки.ПолучитьБиблиотекуФорм(ИмяБиблиотеки);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	Возврат БиблиотекаФорм;
КонецФункции



&НаКлиенте
Функция ПроверитьВыделениеСтроки(ИмяТаблицы, ТекущаяСтрока, ТекущиеДанные, ТекущийЭлемент = Неопределено)
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	ТекущийЭлемент= Элементы[ИмяТаблицы].ТекущийЭлемент;
	Возврат ?(ТекущиеДанные = Неопределено ИЛИ ТекущаяСтрока = Неопределено, Ложь, Истина);		
КонецФункции



&НаСервере
Процедура РучноеПостроениеДереваСоответствий(Идентификатор, РежимПоиска)
	ДанныеСтроки = Товары.НайтиПоИдентификатору(Идентификатор);
	ВыполнитьПоискСоответсвий(ДанныеСтроки, РежимПоиска);	
КонецПроцедуры

&НаСервере
Процедура ПостроениеДереваСоответствий(Идентификатор)
	ДанныеСтроки = Товары.НайтиПоИдентификатору(Идентификатор);
	РазобратьСтрокуПоСловам(ДанныеСтроки.Код, ДанныеСтроки.Артикул, ДанныеСтроки.Наименование);
	ВыполнитьПоискСоответсвий(ДанныеСтроки, "ПоискПоНоменклатуре");
	ЗаполнитьРодительВидНоменклатуры(ДанныеСтроки.Номенклатура);
КонецПроцедуры

&НаСервере
Процедура РазобратьСтрокуПоСловам(Код, Артикул, Наименование)
	
	КлючевыеСлова.Очистить();
	Если СтрДлина(Код) Тогда 
		СтрокаКод 	   	= КлючевыеСлова.Добавить();
		СтрокаКод.Слово = Код;
	КонецЕсли;
	
	Если СтрДлина(Артикул) Тогда 
		СтрокаАртикул 	   	= КлючевыеСлова.Добавить();
		СтрокаАртикул.Слово = Артикул;
	КонецЕсли;
		
	МассивСлов = РеквизитФормыВЗначение("Объект").GetLibrary("Библиотека внешних обработок").РазобратьСтрокуПоСловам(Наименование);
	Для Каждого Слово Из МассивСлов Цикл
		Строка = КлючевыеСлова.Добавить();
		Строка.Слово = Слово;	
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискСоответсвий(ДанныеСтроки, РежимПоиска)	
	
	Библиотека = РеквизитФормыВЗначение("Объект").GetLibrary("Библиотека внешних обработок");
	ТЗ_ПохожиеОбъекты = РеквизитФормыВЗначение("ПохожиеОбъекты");
	ТЗ_ПохожиеОбъекты.Строки.Очистить();
		
	СтрокаПрайс = ТЗ_ПохожиеОбъекты.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПрайс, ДанныеСтроки);
	СтрокаПрайс.Владелец 				= Соглашение.Партнер;
	СтрокаПрайс.Номенклатура 			= Неопределено;
	СтрокаПрайс.НоменклатураПоставщика 	= Неопределено;
	
	Запрос = Новый Запрос;
	
	РезультатПоиска = КлючевыеСлова.НайтиСтроки(Новый Структура("Ключ", Истина));
	КоличНайденных = РезультатПоиска.Количество()-1;
	ТекстАртикул = ""; ТекстНаименование = "";
	Для i = 0 По КоличНайденных Цикл
		
		Если i = 0 Тогда
			ТекстАртикул 	  = ТекстАртикул 		+ " ИЛИ (Артикул 	  ПОДОБНО &Парам" + i;
			ТекстНаименование = ТекстНаименование 	+ " ИЛИ (Наименование ПОДОБНО &Парам" + i;
		Иначе
			ТекстАртикул 	  = ТекстАртикул 		+ " И Артикул 	   ПОДОБНО &Парам" + i;
			ТекстНаименование = ТекстНаименование 	+ " И Наименование ПОДОБНО &Парам" + i;
		КонецЕсли;
		
		Если i = КоличНайденных Тогда 
			ТекстАртикул 	  = ТекстАртикул 		+ ")";
			ТекстНаименование = ТекстНаименование 	+ ")";	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Парам" + i, "%" + СтрЗаменить(Библиотека.СформироватьШаблонПоискаПривязки(РезультатПоиска[i].Слово), " ", "%") + "%");
		
	КонецЦикла;
	
	Если 	  РежимПоиска = "ПоискПоНоменклатуре" Тогда
			
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Код,	
			|   Артикул,
			|   Наименование КАК Наименование,
			|   Ссылка КАК Номенклатура,
			|   Родитель КАК Группа,
			|	ЭтоГруппа
			|
			|ПОМЕСТИТЬ SearchCache
			|ИЗ
			| 	Справочник.Номенклатура	КАК СпрНоменклатура
			|
			|ГДЕ
			|	  &Номенклатура = Ссылка
			|ИЛИ (&Код 			<> """" И Код 		   = &Код) 
			|ИЛИ (&Артикул 		<> """" И Артикул 	   " + ?(СтрДлина(ДанныеСтроки.Артикул) > 3, "ПОДОБНО &Артикул)", "= &чсАртикул)") + "	
			|ИЛИ (&Наименование <> """" И Наименование ПОДОБНО &Наименование)" + ТекстАртикул + ТекстНаименование + " 
			|
			|ИНДЕКСИРОВАТЬ ПО 
			|	Номенклатура; ";
				
	ИначеЕсли РежимПоиска = "ПоискПоПоставщикам"  Тогда
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Номенклатура.Код			КАК Код,	
			|   Номенклатура.Артикул		КАК Артикул,
			|   Номенклатура.Наименование 	КАК Наименование,
			|   Номенклатура 				КАК Номенклатура,
			|   Номенклатура.Родитель 		КАК Группа,
			|	Номенклатура.ЭтоГруппа      КАК ЭтоГруппа
			|
			|ПОМЕСТИТЬ SearchCache
			|ИЗ
			| 	Справочник.НоменклатураПоставщиков	КАК СпрНоменклатура
			|
			|ГДЕ
			| НЕ Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка) И (
			|    (&Код 			<> """" И Код 		   = &Код) 
			|ИЛИ (&Артикул 		<> """" И Артикул " + ?(СтрДлина(ДанныеСтроки.Артикул) > 3, "ПОДОБНО &Артикул)", "= &чсАртикул)") + "	
			|ИЛИ (&Наименование <> """" И Наименование ПОДОБНО &Наименование)" + ТекстАртикул + ТекстНаименование + " ) 
			|
			|СГРУППИРОВАТЬ ПО 
			|	Номенклатура
			|
			|ИНДЕКСИРОВАТЬ ПО 
			|	Номенклатура
			|; ";	
		
	ИначеЕсли РежимПоиска = "ПоискПоШтрихкоду"    Тогда
		//Выборка =
	Иначе
		//Выборка = ;
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	SearchCache.Код, 
		|	SearchCache.Артикул, 
		|	SearchCache.Наименование,	
		|   SearchCache.Номенклатура, 
		|	SearchCache.Группа, 
		|	SearchCache.ЭтоГруппа,
		|	ЕСТЬNULL(ЦенаПоставщика.Цена, 0) КАК Цена,  
		|	СпрНомПос.Ссылка		 		 КАК НоменклатураПоставщика
		|
		|ИЗ
		|	SearchCache КАК SearchCache
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Ссылка, Номенклатура ИЗ Справочник.НоменклатураПоставщиков ГДЕ Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ SearchCache)) КАК СпрНомПос
		|ПО СпрНомПос.Номенклатура = SearchCache.Номенклатура 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ SearchCache)) КАК ЦенаПоставщика
		|ПО ЦенаПоставщика.Номенклатура			  = СпрНомПос.Номенклатура 
		|И  ЦенаПоставщика.НоменклатураПоставщика = СпрНомПос.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО SearchCache.Код
		|;";
															
	
	ПараметрАртикул = "";
	Если НЕ ПустаяСтрока(ДанныеСтроки.Артикул) Тогда
		ЭтоБуква = Неопределено; ЭтоСимволы = Истина; 
		ИсходнаяСтрока = СокрЛП(ДанныеСтроки.Артикул);
		Для Инд = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			ТекСимвол = Сред(ИсходнаяСтрока, Инд, 1);
			Если 	  Библиотека.ЭтоБуква(ТекСимвол) И (ЭтоБуква = Ложь ИЛИ ЭтоБуква = Неопределено) Тогда 
				ПараметрАртикул = ПараметрАртикул + "%" + ТекСимвол; 
				ЭтоБуква = Истина;
				ЭтоСимволы = Ложь;
			ИначеЕсли Библиотека.ЭтоБуква(ТекСимвол) Тогда 
				ПараметрАртикул = ПараметрАртикул + ТекСимвол;
			ИначеЕсли Библиотека.ЭтоЦифра(ТекСимвол) И (ЭтоБуква = Истина ИЛИ ЭтоБуква = Неопределено)  Тогда 
				ПараметрАртикул = ПараметрАртикул + "%" + ТекСимвол; 
				ЭтоБуква = Ложь;
				ЭтоСимволы = Ложь;
			ИначеЕсли Библиотека.ЭтоЦифра(ТекСимвол) Тогда 
				ПараметрАртикул = ПараметрАртикул + ТекСимвол;
			Иначе    
				ПараметрАртикул = ПараметрАртикул + "%";
			КонецЕсли;
		КонецЦикла;
		ПараметрАртикул = ?(ЭтоСимволы, "%"+ ИсходнаяСтрока + "%", Библиотека.СформироватьШаблонПоискаПривязки(ПараметрАртикул) + "%");
	КонецЕсли;
	
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("Код", 			ДанныеСтроки.Код);
	Запрос.УстановитьПараметр("Артикул", 		ПараметрАртикул);
	Запрос.УстановитьПараметр("чсАртикул", 		ДанныеСтроки.Артикул);
	Запрос.УстановитьПараметр("Наименование", 	ДанныеСтроки.Наименование);
	Запрос.УстановитьПараметр("Номенклатура", 	ДанныеСтроки.Номенклатура); 
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	
	ТекущаяСтрока = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтрока = Неопределено ИЛИ НЕ ТекущаяСтрока.Номенклатура = Выборка.Номенклатура Тогда
			ТекущаяСтрока = ТЗ_ПохожиеОбъекты.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
			ТекущаяСтрока.Цена 			= ДанныеСтроки.Цена;
			ТекущаяСтрока.НоменклатураПоставщика = Неопределено;
		КонецЕсли;
		
		Если НЕ Выборка.НоменклатураПоставщика = NULL Тогда
			ПривязкаПоставщика = ТекущаяСтрока.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПривязкаПоставщика, Выборка);
			ПривязкаПоставщика.Код 			= Выборка.НоменклатураПоставщика.Код;
			ПривязкаПоставщика.Артикул 		= Выборка.НоменклатураПоставщика.Артикул;
			ПривязкаПоставщика.Наименование = Выборка.НоменклатураПоставщика.Наименование;
			ПривязкаПоставщика.Группа	    = Выборка.НоменклатураПоставщика.Родитель;
			ПривязкаПоставщика.Владелец	    = Выборка.НоменклатураПоставщика.Владелец;
			Если Выборка.НоменклатураПоставщика.Владелец = Соглашение.Партнер Тогда
				ТекущаяСтрока.ЭтоПривязано 		= Истина;
				ПривязкаПоставщика.ЭтоПривязано = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ТЗ_ПохожиеОбъекты, "ПохожиеОбъекты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРодительВидНоменклатуры(Номенклатура)
	Если НЕ Номенклатура = Неопределено И НЕ Номенклатура.Пустая() Тогда
		Базовые_Родитель 		= Номенклатура.Родитель;
		Базовые_ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
	КонецЕсли;
	Базовые_ИспользованиеХарактеристик = Базовые_ВидНоменклатуры.ИспользованиеХарактеристик;
КонецПроцедуры


&НаСервере
Функция ПроверитьПривязкуНоменклатуры(Номенклатура, Партнер) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Код,
		|	Артикул,
		|	Наименование
		|
		|ИЗ
		|	Справочник.НоменклатураПоставщиков	
		|ГДЕ
		|	Номенклатура = &Номенклатура
		|И	Владелец     = &Партнер
		|И	НЕ ЭтоГруппа
		|И	НЕ ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщить("Эта номенклатура уже привязана к номенклатуре поставщика!"); 
		Сообщить("Код поставщика: " 		+ Выборка.Код);
		Сообщить("Артикул поставщика: " 	+ Выборка.Артикул);
		Сообщить("Наименование поставщика: "+ Выборка.Наименование);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПохожиеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Перем ТекущаяСтрока, ТекущиеДанные;
	Если ПроверитьВыделениеСтроки("ПохожиеОбъекты", ТекущаяСтрока, ТекущиеДанные) Тогда
		Если ТекущиеДанные.НоменклатураПоставщика.Пустая() И НЕ ТекущиеДанные.Номенклатура.Пустая() И Поле.Имя = "ПохожиеОбъектыВладелец" Тогда 
			ОткрытьЗначение(ТекущиеДанные.Номенклатура);	
		ИначеЕсли ТекущиеДанные.НоменклатураПоставщика.Пустая() Тогда
			ПохожиеОбъекты_ПривязатьНоменклатуру(Неопределено);
		ИначеЕсли Поле.Имя = "ПохожиеОбъектыКод" ИЛИ Поле.Имя = "ПохожиеОбъектыАртикул" ИЛИ Поле.Имя = "ПохожиеОбъектыНаименование" Тогда
			ОткрытьЗначение(ТекущиеДанные.НоменклатураПоставщика);
		ИначеЕсли Поле.Имя = "ПохожиеОбъектыВладелец" Тогда
			ОткрытьЗначение(ТекущиеДанные.Владелец);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПохожиеОбъектыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры



&НаКлиенте
Процедура ОбработатьДействиеСФлажкамиТаблицы(ИмяТаблицы, ИмяФлажка, Значение)
	Для Каждого Элемент Из ЭтаФорма[ИмяТаблицы] Цикл
		Элемент[ИмяФлажка] = Значение;		
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеУстановкиТекущейСтроки()
	ЭлементыДерева = ПохожиеОбъекты.ПолучитьЭлементы();	
	Если ЭлементыДерева.Количество() = 2 Тогда
		Элементы.ПохожиеОбъекты.ТекущаяСтрока = ЭлементыДерева[1].ПолучитьИдентификатор();		
	КонецЕсли;	
КонецПроцедуры





&НаКлиенте
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		
		Возврат 0.1;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		
		Возврат 0.18;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда
		
		Возврат 0.2;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуТабличнойЧастиДокумента(Приемник, ЦенаВключаетНДС)
	Если Приемник.Свойство("СуммаСНДС")  			Тогда Приемник.СуммаСНДС 		   = ?(ЦенаВключаетНДС, Приемник.Сумма, Приемник.Сумма + Приемник.СуммаНДС); КонецЕсли;
	Если Приемник.Свойство("Активность") 			Тогда Приемник.Активность 		   = Истина; КонецЕсли;
	Если Приемник.Свойство("СуммаАктивность")   	Тогда Приемник.СуммаАктивность     = Приемник.Сумма; КонецЕсли;
	Если Приемник.Свойство("СуммаСНДСАктивность")   Тогда Приемник.СуммаСНДСАктивность = Приемник.СуммаСНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаНДСАктивность")   	Тогда Приемник.СуммаНДСАктивность  = Приемник.СуммаНДС; КонецЕсли;
КонецПроцедуры



&НаСервереБезКонтекста
Функция ПолучитьСтруктурыЗаполненияПоставщик(Соглашение)
		
	УсловияЗакупки  = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	УсловияЗакупки.Вставить("Партнер", 				Соглашение.Партнер);
	УсловияЗакупки.Вставить("ВалютаВзаиморасчетов", Соглашение.Валюта);
	УсловияЗакупки.Вставить("ДатаПлатежа",  		ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), Соглашение));
	УсловияЗакупки.Вставить("Склад",				Соглашение.Склад);
	УсловияЗакупки.Вставить("Дата",					ТекущаяДата());
	
	ХозяйственнаяОперацияДоговора = ?(
			УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
		Или УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
		Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
		УсловияЗакупки.ХозяйственнаяОперация
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияЗакупки.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияЗакупки.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияЗакупки.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
		СтруктураПараметров,
		ХозяйственнаяОперацияДоговора,
		УсловияЗакупки.Валюта);
	
	УсловияЗакупки.Вставить("Договор",	Договор);
	УсловияЗакупки.Вставить("ТребуетсяДоговор",	Соглашение.ИспользуютсяДоговорыКонтрагентов);
	УсловияЗакупки.Вставить("ЖелаемаяДатаПоступления", ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(УсловияЗакупки.Дата, Перечисления.Периодичность.День, УсловияЗакупки.СрокПоставки) + 1);
		
	Возврат УсловияЗакупки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(АдресРеквизита, Объект)
	Перем ЗначениеРеквизита;
	Выполнить("ЗначениеРеквизита = Объект." + АдресРеквизита + ";");
	Возврат ЗначениеРеквизита;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказПоставщику(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаОтменено = КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаЗаказано = КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано = КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаРучнойСкидки);
	ИначеЕсли Форма.СуммаРучнойСкидки > 0 Тогда
		Форма.ПроцентРучнойСкидки = 100;
	Иначе
		Форма.ПроцентРучнойСкидки = 0;
	КонецЕсли;
	
	// Заполнение итогов по таблице этапы оплаты
	
	Форма.СуммаАвансаДоПодтверждения     = 0;
	Форма.СуммаПредоплатыДоПоступления   = 0;
	Форма.СуммаКредитаПослеПоступления   = 0;
	Форма.ПроцентАвансаДоПодтверждения   = 0;
	Форма.ПроцентПредоплатыДоПоступления = 0;
	Форма.ПроцентКредитаПослеПоступления = 0;
	ПроцентПлатежейОбщий                 = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоПодтверждения", "ПроцентАвансаДоПодтверждения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоПоступления", "ПроцентПредоплатыДоПоступления")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеПоступления", "ПроцентКредитаПослеПоступления")
	);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор страницы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры




















