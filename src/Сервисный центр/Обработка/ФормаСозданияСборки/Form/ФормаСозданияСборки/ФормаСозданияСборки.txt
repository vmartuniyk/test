
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
    КонецЕсли;
    Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиCуперСборки", , , "ДополнительныеНастройкиCуперСборки");
    Если ТипЗнч(Настройки) = Тип("Структура") Тогда
        Если Настройки.Свойство("Склад") И ТипЗнч(Настройки.Склад) = Тип("СправочникСсылка.Склады") Тогда
            Склад =    Настройки.Склад; 
            Организация = ПолучитьДоступнуюОрганизация();
            СкладПоУмолчанию = Настройки.Склад; 
        КонецЕсли;
		Если Настройки.Свойство("ВидНоменклатуры") И ТипЗнч(Настройки.ВидНоменклатуры) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			ВидНоменклатурыПоумолчанию = Настройки.ВидНоменклатуры; 
			ВидНоменклатуры = ВидНоменклатурыПоумолчанию;
		КонецЕсли;
		
		Если Настройки.Свойство("Родитель") И ТипЗнч(Настройки.Родитель) = Тип("СправочникСсылка.Номенклатура") Тогда
			РодительПоУмолчанию = Настройки.Родитель; 
			Родитель = РодительПоУмолчанию;
        КонецЕсли;  		
	КонецЕсли;
	
	
	Если Параметры.Свойство("Корзина") Тогда
		ТЗ_Корзина = ЗначениеИзСтрокиВнутр(Параметры.Корзина);
		СписокНоменклатуры.Загрузить(ТЗ_Корзина);  
		ПроставитьНомераСтрок();
	КонецЕсли;                        
	ПолучитьСписокЗначенияТранзитныхСкладов();
    ДатаСборки = ТекущаяДата();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НоменклатураОчистка(Элемент, СтандартнаяОбработка)
    ОчиститьПоляВыборкиНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
    СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомплектацияПриИзменении(Элемент)
   КомплектацияПриИзмененииНаСервере(); 
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
    НоменклатураПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийЭлементоТаблицивСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПослеУдаления(Элемент)
	ПроставитьНомераСтрок();	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриИзменении(Элемент)
	ПроставитьНомераСтрок();	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
    ПроставитьНомераСтрок();
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
    	ЗаполнитьЕдиницуИзмеренияНоменклатуры(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура СписокНоменклатурыУпаковкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
    ЭлСписокНоменклатуры = Элементы.СписокНоменклатуры;
	ТекущиеДанные = ЭлСписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.СписокНоменклатурыУпаковка.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокУпаковокНоменклатуры(ТекущиеДанные.Номенклатура));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыКоличествоУпаковокПриИзменении(Элемент)
	ПолучитьКоличествоПоФакту();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСписокЗначенияИстория
&НаКлиенте
Процедура ИсторияЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Отказ =Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПередУдалением(Элемент, Отказ)
	Отказ =Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.История.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СоздатьДокументы(Команда)
	Отказ = ЛОЖЬ;
    СтруктураДокументов = Новый Структура();
	СоздатьДокументНаСервере(Отказ,СтруктураДокументов);
    Если Отказ = Ложь Тогда
        ВидимостиПриСозданииДокумента(Ложь);
        Если СтруктураДокументов.Свойство("Номенклатура") Тогда
            ОповещенияПользователяОЗаписиДокумента(СтруктураДокументов.Номенклатура);
        КонецЕсли;
        Если СтруктураДокументов.Свойство("ВариантКомплектации") Тогда
            ОповещенияПользователяОЗаписиДокумента(СтруктураДокументов.ВариантКомплектации);
        КонецЕсли;
        Если СтруктураДокументов.Свойство("ЗаказНаПеремещение") Тогда
            ОповещенияПользователяОЗаписиДокумента(СтруктураДокументов.ЗаказНаПеремещение);
        КонецЕсли;          
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Выход(Команда)
    Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявка(Команда)
   ОчиститьНаСервереФорму();
   ВидимостиПриСозданииДокумента(Истина);   
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
    СохранитьНастройкиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ОповещенияПользователяОЗаписиДокумента(ОбъектЗаписи)
    Если ЗначениеЗаполнено(ОбъектЗаписи)=Ложь Тогда
        Возврат;       
    КонецЕсли;                      
    ТекстОповещения =НСтр("ru = 'Создание:'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ОбъектЗаписи);
    ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Строка(ОбъектЗаписи), БиблиотекаКартинок.Информация32);    
КонецПроцедуры //ОповещенияПользователяОЗаписиДокумента

&НаКлиенте
Процедура ВидимостиПриСозданииДокумента(Видимость)
    Элементы.ГруппаНом.Видимость = Видимость;
    Элементы.ГруппаЗаголовокДокументаСборки.Видимость = Видимость;
    Элементы.ГруппаЗаявкаНаСборку.Видимость = Видимость;
    Элементы.ФормаСоздатьДокументы.Видимость = Видимость;
    Элементы.ГруппаСписокНоменклатуры.Видимость = Видимость;
    Элементы.ГруппаИстория.Видимость = Не Видимость; 
КонецПроцедуры //ВидимостиПриСозданииДокумента(Видимость)

&НаСервере
Процедура ОчиститьНаСервереФорму()
    СтрФормы = Новый Структура;
    МассивРеквизитовФормы = ЭтаФорма.ПолучитьРеквизиты();
    Для каждого Строка Из МассивРеквизитовФормы Цикл
        Если Строка.Имя<>"Объект" И НЕ Строка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"))  Тогда
        	СтрФормы.Вставить(Строка.Имя);    
        КонецЕсли;          
    КонецЦикла;
    ЗаполнитьЗначенияСвойств(ЭтаФорма,СтрФормы);
    СписокНоменклатуры.Очистить();
КонецПроцедуры //ОчиститьНаСервереФорму

&НаСервере
Процедура СоздатьДокументНаСервере(Отказ,СтруктураДокументов)
	
	СтруктураОшибок = Новый Структура();
	ПроверитьЗаполненияДанных(СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() Тогда
		Отказ = Истина;
        Возврат;
	КонецЕсли;

	СтруктураПараметров = ЗаполнитьСтруктуруБизнесПроцесов(); 
	git_BusinessProcess.БизнесПроцесСозданияСуперСборки(СтруктураПараметров,СтруктураОшибок,СтруктураДокументов); 
	Если СтруктураОшибок.Количество() Тогда
		Отказ = Истина;
        Возврат;
	КонецЕсли;
КонецПроцедуры

#Область ПроверкаЗаполненияДанных
&НаСервере
Процедура ПроверитьЗаполненияДанных(СтруктураОшибок)
    ПроверитьРеквизитФормы(Номенклатура,"Номенклатура",СтруктураОшибок);
    ПроверитьРеквизитФормы(Артикул,"Артикул",СтруктураОшибок);
    ПроверитьРеквизитФормы(ВидНоменклатуры,"ВидНоменклатуры",СтруктураОшибок);
    ПроверитьРеквизитФормы(Склад,"Склад",СтруктураОшибок);
    ПроверитьРеквизитФормы(Организация,"Организация",СтруктураОшибок);
    ПроверитьРеквизитФормы(Месторасположение,"Месторасположение",СтруктураОшибок);
    ПроверитьРеквизитФормы(КоличествоКомплектов,"КоличествоКомплектов",СтруктураОшибок); 
	ПроверитьРеквизитФормы(СкладОжидания,"СкладОжидания",СтруктураОшибок); 
	ПроверитьРеквизитФормы(Склад,"Склад",СтруктураОшибок);
	ПроверитьРеквизитФормы(СкладДоставки,"СкладДоставки",СтруктураОшибок);
    Если НЕ НоваяНоменклатура Тогда
        ПроверитьРеквизитФормы(Комплектация,"Комплектация",СтруктураОшибок);
    КонецЕсли;   
    Отказ= ?(СписокНоменклатуры.Количество()=0,Истина,Ложь);
    ПроверитьТабличнуюЧастьНаЗаполнениеРеквизитов(СтруктураОшибок);
	ПроверитьНаличияВходнойЦениНоменклатуры(СтруктураОшибок);
    
КонецПроцедуры

&НаСервере
Процедура ПроверитьТабличнуюЧастьНаЗаполнениеРеквизитов(СтруктураОшибок)
    Для Каждого Строка ИЗ СписокНоменклатуры Цикл
        ПроверитьРеквизитФормыТаблициЗначение(Строка.НомерСтроки,"НомерСтроки",   "СписокНоменклатуры["+Строка(Строка.НомерСтроки-1)+"].НомерСтроки", СтруктураОшибок); 
        ПроверитьРеквизитФормыТаблициЗначение(Строка.Номенклатура,"Номенклатура",  "СписокНоменклатуры["+Строка(Строка.НомерСтроки-1)+"].Номенклатура", СтруктураОшибок);
        ПроверитьРеквизитФормыТаблициЗначение(Строка.Количество, "Количество",   "СписокНоменклатуры["+Строка(Строка.НомерСтроки-1)+"].Количество", СтруктураОшибок);
        ПроверитьРеквизитФормыТаблициЗначение(Строка.КоличествоУпаковок,"КоличествоУпаковок","СписокНоменклатуры["+Строка(Строка.НомерСтроки-1)+"].КоличествоУпаковок", СтруктураОшибок);
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитФормы(Реквизит, ИмяРеквизит,СтруктураОшибок)
    Если НЕ ЗначениеЗаполнено(Реквизит)  Тогда
        СообщенияОбОшибке = НСтр("ru='Реквизит формы %ИмяРеквизит% незаполнен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ИмяРеквизит%",ИмяРеквизит);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке,,ИмяРеквизит);
        СтруктураОшибок.Вставить(ИмяРеквизит,СообщенияОбОшибке);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитФормыТаблициЗначение(Реквизит,ИмяРеквизит,Поле,СтруктураОшибок)
    
    Если Не ЗначениеЗаполнено(Реквизит) Тогда
        СообщенияОбОшибке = НСтр("ru='Реквизит табличной части %ИмяРеквизит% незаполнен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ИмяРеквизит%",ИмяРеквизит);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке, ,Поле);
        СтруктураОшибок.Вставить(ИмяРеквизит,СообщенияОбОшибке);
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличияВходнойЦениНоменклатуры(СтруктураОшибок)
	Для Каждого Строка ИЗ СписокНоменклатуры Цикл
		 ПроверитьСтрокуФормыТаблициЗначение(Строка.Номенклатура,"Номенклатура",  "СписокНоменклатуры["+Строка(Строка.НомерСтроки-1)+"].Номенклатура", СтруктураОшибок);
    КонецЦикла;
КонецПроцедуры // ПроверитьНаличияВходнойЦениНоменклатуры()

&НаСервере
Процедура ПроверитьСтрокуФормыТаблициЗначение(Номенклатура,ИмяРеквизит,Поле,СтруктураОшибок)
    
    Если НЕ НаличияВходнойЦени(Номенклатура) Тогда
        СообщенияОбОшибке = НСтр("ru='Реквизит табличной части %ИмяРеквизит% незаполнена входная цена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ИмяРеквизит%",Номенклатура);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке, ,Поле);
        СтруктураОшибок.Вставить(ИмяРеквизит,СообщенияОбОшибке);
    КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаличияВходнойЦени(Номенклатура)
	УстановитьПривилегированныйРежим(Истина);
	ВходнаяЦена = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85"));
	ЦеныНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(,Новый Структура("Номенклатура,ВидЦены",Номенклатура,ВходнаяЦена));
	Если ТипЗнч(ЦеныНоменклатуры) = Тип("Структура")  Тогда
		Если ЦеныНоменклатуры.Цена <> 0 Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;  
	Возврат ЛОЖЬ;
КонецФункции // НаличияВходнойЦени()


#КонецОбласти

#Область СлужебныйИнтерфейс

&НаСервере
Процедура ПолучитьСписокЗначенияТранзитныхСкладов()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТранзитныхСкладов();	
	Элементы.СкладОжидания.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));  

КонецПроцедуры // ПолучитьСписокЗначенияТранзитныхСкладов()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаТранзитныхСкладов()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Модуль_ДоступныеСклады.Склад КАК Склад
	               |ИЗ
	               |	РегистрСведений.Модуль_ДоступныеСклады КАК Модуль_ДоступныеСклады
	               |ГДЕ
	               |	Модуль_ДоступныеСклады.Транзитный = ИСТИНА";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаТранзитныхСкладов()


&НаСервере
Процедура ПроставитьНомераСтрок()
	Индекс = 1;
    Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
        СтрокаТЧ.НомерСтроки = Индекс;
        Индекс = Индекс+1;
	КонецЦикла;	
	ПолучитьКоличествоПоФакту();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕдиницуИзмеренияНоменклатуры(Идентификатор)
	
	ЭлементДанных = СписокНоменклатуры.НайтиПоИдентификатору(Идентификатор);
	Если ЭлементДанных <> Неопределено Тогда
		ЭлементДанных.ЕдиницаИзмерения = ЭлементДанных.Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЕдиницуИзмеренияНоменклатуры

&НаСервере
Функция ПолучитьСписокУпаковокНоменклатуры(Номенклатура)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка
		|
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры
		|ГДЕ
		|	Владелец = ВЫБОР КОГДА &НаборУпаковок =  ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|                    ТОГДА &Номенклатура
		|                    КОГДА &НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|                    ТОГДА &НаборУпаковок
		|					 ИНАЧЕ Неопределено
		|			   КОНЕЦ 
		|И  ПометкаУдаления = Ложь
		|");
	Запрос.УстановитьПараметр("Номенклатура",  Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	Упаковки = Запрос.Выполнить().Выгрузить();
	МассивУпаковок = Упаковки.ВыгрузитьКолонку("Ссылка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;

КонецФункции

&НаСервере
Процедура ПолучитьКоличествоПоФакту()
    Если Организация.Пустая() ИЛИ Склад.Пустая() Тогда
        Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
            СтрокаТЧ.КоличествоПоФакту = 0;
        КонецЦикла;
    Иначе 
        УстановитьПривилегированныйРежим(Истина);
        Запрос = Новый Запрос;
        Запрос.Текст = ТекстЗапросаКоличествоПоФакту();
        
        ТЗ_СписокНоменклатуры = РеквизитФормыВЗначение("СписокНоменклатуры", Тип("ТаблицаЗначений"));
        
        Запрос.УстановитьПараметр("СписокНоменклатуры", ТЗ_СписокНоменклатуры);
        Запрос.УстановитьПараметр("Организация", Организация);
        Запрос.УстановитьПараметр("Склад", Склад);
        ЗначениеВРеквизитФормы(ТЗ_СписокНоменклатуры, "СписокНоменклатуры");
        
        СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
        Если ПривилегированныйРежим() Тогда
    		УстановитьПривилегированныйРежим(Ложь);
    	КонецЕсли;
    КонецЕсли;     
КонецПроцедуры


&НаСервере
Процедура СкладПриИзмененииНаСервере()
    Организация = ПолучитьДоступнуюОрганизация();
	Партнер = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПолучитьПартнераПоСкладу(Склад);
	ЗаполнитьКонтрагентаСоглашенияНаСервере();
    ЗагрузитьМесторасположенияПоСкладу();
	ПолучитьКоличествоПоФакту();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьМесторасположенияПоСкладу() 
	УстановитьПривилегированныйРежим(истина);
	Фильтр = РегистрыСведений.ГНАТ_НастройкаМест.Получить(Новый Структура("Склад",Склад));
	Месторасположение =   Фильтр.Месторасположение;

КонецФункции // ЗагрузитьМесторасположенияПоСкладу()

&НаСервере
Процедура ОбработатьВыборкуНоменклатуры(ВыбранноеЗначение)
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос();
    Запрос.Текст =  ТекстЗапросаВыборкиНоменклатуры();
    Запрос.УстановитьПараметр("Ссылка",Номенклатура);
    Запрос.УстановитьПараметр("СвойствоГарантия",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("a3e0fd0e-4712-11e0-9f98-001517115d85")));
    Выборка = Запрос.Выполнить().Выбрать();
    ОчиститьПоляВыборкиНоменклатуры();
    Пока Выборка.Следующий() Цикл
        ЗаполнитьЗначенияСвойств(ЭтаФорма,Выборка,"Родитель,Артикул,ВидНоменклатуры,Гарантия,ИспользоватьСерийныеНомера"); 
    КонецЦикла;
    ЗагрузитьСписокВариантаКомплектацииПоНоменклатура();  
    Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;       
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуСозданиеНовойНоменклатуры()
    
    УстановитьПривилегированныйРежим(Истина);
	                                                           
	// Поиск группы "Персональные компьютеры"
	СсылкаНаГруппу = Справочники.Номенклатура.ПолучитьСсылку(Новый	УникальныйИдентификатор("4c7a10d1-410e-11e0-9f98-001517115d85")); //"Персональные компьютеры"
	Если НЕ СсылкаНаГруппу.Пустая() Тогда
		Родитель = СсылкаНаГруппу;
	КонецЕсли;
	
	// Поиск вида номенклатуры
	СсылкаНаВидНоменклатуры = Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый	УникальныйИдентификатор("1aadd4a6-6838-11e0-9d74-001fd05d5574")); //Персональні комп’ютери;
	Если Не СсылкаНаВидНоменклатуры.Пустая() Тогда
		ВидНоменклатуры = СсылкаНаВидНоменклатуры;
	КонецЕсли;
    	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ВидНоменклатуры.ТолькоПросмотр = Истина;
		Элементы.Родитель.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	КоличествоКомплектов = 1;
    ИспользоватьСерийныеНомера = Истина;
	ПолучитьКоличествоПоФакту();
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляВыборкиНоменклатуры()
    ГруппаНоменклатуры = Неопределено;
    Артикул            = Неопределено;
    ВидНоменклатуры    = Неопределено;
    Гарантия           = Неопределено;
    ИспользоватьСерийныеНомера = Неопределено;
    Комплектация       = Неопределено;
    СписокНоменклатуры.Очистить();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВариантаКомплектацииПоНоменклатура()
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос();
    Запрос.Текст =  ТекстЗапросаВариантыКомплектацииНоменклатуры();
    Запрос.УстановитьПараметр("Ссылка",Номенклатура);
    Запрос.УстановитьПараметр("Склад",Склад);
	МассивСписка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если МассивСписка.Количество() = 1 Тогда
		Комплектация = МассивСписка[0].Ссылка;
		КомплектацияПриИзмененииНаСервере(); 		
	КонецЕсли;
    Элементы.Комплектация.СписокВыбора.ЗагрузитьЗначения(МассивСписка);
    Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры //ЗагрузитьСписокНоменклатурыПоВыборкеНоменклатура

&НаСервере
Функция ПолучитьДоступнуюОрганизация()
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос();
    Запрос.Текст =  ТекстЗапросаДоступнаяОрганизация();
    Запрос.УстановитьПараметр("Склад",Склад);
    Выборка = Запрос.Выполнить().Выбрать();
    Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
    
    Возврат ?(Выборка.Следующий(),Выборка.Организация, Справочники.Организации.ПустаяСсылка());
КонецФункции //ПолучитьДоступнуюОрганизация(Склад)

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
    Если ТипЗнч(Номенклатура) = Тип("Строка") Тогда
       	Наименование = Номенклатура;
        НоваяНоменклатура = Истина;
		//ОчиститьПоляВыборкиНоменклатуры(); 
        ОбработатьВыборкуСозданиеНовойНоменклатуры();
    Иначе
        НоваяНоменклатура = Ложь;
        ОбработатьВыборкуНоменклатуры(Номенклатура);
    КонецЕсли;
	Элементы.Артикул.Доступность            = НоваяНоменклатура;
	Элементы.ВидНоменклатуры.Доступность    = НоваяНоменклатура;
	Элементы.Родитель.Доступность 			= НоваяНоменклатура;
	Элементы.Гарантия.Доступность           = НоваяНоменклатура;
	Элементы.ИспользоватьСерийныеНомера.Доступность = НоваяНоменклатура;  
	Элементы.Комплектация.Доступность       = НЕ НоваяНоменклатура;
	Элементы.СписокНоменклатуры.ТолькоПросмотр =  НЕ НоваяНоменклатура; 
	Элементы.ГруппаПанельСпискаНоменклатуры.ТолькоПросмотр = НЕ НоваяНоменклатура;
КонецПроцедуры

&НаСервере
Процедура КомплектацияПриИзмененииНаСервере() 
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос();
    Запрос.Текст =  ТекстЗапросаВариантыКомплектации();
    Запрос.УстановитьПараметр("Ссылка",Комплектация);
    Запрос.УстановитьПараметр("Склад",Склад);
    СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
    Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
КонецПроцедуры //ЗагрузитьСписокНоменклатурыПоВыборкеНоменклатура

&НаСервере
Функция ТекстЗапросаВариантыКомплектации()
ТекстЗапроса = "ВЫБРАТЬ
                |    Товары.НомерСтроки,
                |    Товары.Номенклатура,
                |    Товары.Характеристика,
                |    Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
                |    Товары.Упаковка,
                |    Товары.Количество КАК Количество,
                |    Товары.КоличествоУпаковок КАК КоличествоУпаковок,
                |    ЕСТЬNULL(ОстатокНаСкладе.ВНаличииОстаток,0) - ЕСТЬNULL(ОстатокНаСкладе.ВРезервеОстаток,0)/ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1) КАК КоличествоПоФакту    
                |ИЗ
                |    Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Товары
                |
                |ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,Склад=&Склад) КАК ОстатокНаСкладе
                |ПО Товары.Номенклатура 	= ОстатокНаСкладе.Номенклатура
                |И  Товары.Характеристика 	= ОстатокНаСкладе.Характеристика
                |
                |ГДЕ
                |    Ссылка = &Ссылка";
Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ТекстЗапросаДоступнаяОрганизация()
ТекстЗапроса = "ВЫБРАТЬ
               |    Организация,
               |    Склад
               |ИЗ
               |    РегистрСведений.Модуль_ДоступныеСклады
               |ГДЕ
               |    Склад = &Склад";
Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаДоступнаяОрганизация

&НаСервере
Функция ТекстЗапросаВыборкиНоменклатуры()
ТекстЗапроса = "ВЫБРАТЬ
               |    Номенклатура.Ссылка КАК Номенклатура,
               |    Номенклатура.Родитель КАК Родитель,
               |    Номенклатура.ВидНоменклатуры,
               |    Номенклатура.Артикул,
               |    Номенклатура.ИспользоватьСерийныеНомера,
               |    ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК Гарантия
               |ИЗ
               |    Справочник.Номенклатура КАК Номенклатура
               |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
               |ПО (Номенклатура.Ссылка = (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)))
               |И (ДополнительныеСведения.Свойство = &СвойствоГарантия)
               |ГДЕ
               |    Номенклатура.Ссылка = &Ссылка";
Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ТекстЗапросаВариантыКомплектацииНоменклатуры()
ТекстЗапроса = "ВЫБРАТЬ
                |    Ссылка
                |ИЗ
                |    Справочник.ВариантыКомплектацииНоменклатуры 
                |ГДЕ
                |    Владелец = &Ссылка";
Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ТекстЗапросаКоличествоПоФакту()
    ТекстЗапроса =  "ВЫБРАТЬ
                           |	СписокНоменкчлатуры.НомерСтроки,
                           |	СписокНоменкчлатуры.Номенклатура,
                           |	СписокНоменкчлатуры.Упаковка,
                           |	СписокНоменкчлатуры.ЕдиницаИзмерения,
                           |	СписокНоменкчлатуры.КоличествоУпаковок
                           |ПОМЕСТИТЬ ТабНоменклатура
                           |ИЗ
                           |	&СписокНоменклатуры КАК СписокНоменкчлатуры
                           |;
                           |
                           |////////////////////////////////////////////////////////////////////////////////
                           |ВЫБРАТЬ
                           |	ТабНоменклатура.НомерСтроки,
                           |	ТабНоменклатура.Номенклатура,
                           |	ТабНоменклатура.Упаковка,
                           |	ТабНоменклатура.ЕдиницаИзмерения,
                           |	ТабНоменклатура.КоличествоУпаковок,
						   |    ЕСТЬNULL(ТабНоменклатура.Упаковка.Коэффициент, 1)* ТабНоменклатура.КоличествоУпаковок КАК Количество,
                           |	(ЕСТЬNULL(ТоварыОрганизацийОстатки.ВНаличииОстаток, 0)-ЕСТЬNULL(ТоварыОрганизацийОстатки.ВРезервеОстаток, 0))/ЕСТЬNULL(ТабНоменклатура.Упаковка.Коэффициент, 1) КАК КоличествоПоФакту			               
                           |ИЗ
                           |	ТабНоменклатура КАК ТабНоменклатура
                           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
                           |				,
                           |				Номенклатура В
                           |						(ВЫБРАТЬ
                           |							ТабНоменклатура.Номенклатура
                           |						ИЗ
                           |							ТабНоменклатура КАК ТабНоменклатура)
                           |					И Склад = &Склад) КАК ТоварыОрганизацийОстатки
                           |		ПО ТабНоменклатура.Номенклатура = ТоварыОрганизацийОстатки.Номенклатура";
    Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти 

&НаСервере
Функция ЗаполнитьСтруктуруБизнесПроцесов()
	СтруктураПараметров = Новый Структура();
	РеквизитиФормы = ЭтаФорма.ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитиФормы Цикл
		Если Реквизит.Имя <> "Объект" Тогда
			СтруктураПараметров.Вставить(Реквизит.Имя,ЭтаФорма[Реквизит.Имя]); 		
		КонецЕсли; 
		Если Реквизит.Имя = "СписокНоменклатуры" Тогда
			СтруктураПараметров.Вставить("Товары",ПолучитьТаблицуТоваровЗаказа()); 		
		КонецЕсли; 	
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	               
КонецФункции // ЗаполнитьСтруктуруБизнесПроцесов()

&НаСервере
Функция ПолучитьТаблицуТоваровЗаказа()
	ТЗ = СписокНоменклатуры.Выгрузить();     
	ТЗ.Колонки.Добавить("Цена", 				Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СтавкаНДС", 			Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТЗ.Колонки.Добавить("Склад", 				Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТЗ.ЗаполнитьЗначения(Склад,"Склад");
	
	Для каждого Строка Из ТЗ Цикл   	
		Строка.СтавкаНДС = ЗаполнитьСтавкуНДСВСтрокеТЧ(Строка,Соглашение.НалогообложениеНДС);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции // ПолучитьТаблицуТоваровЗаказа()

&НаСервере
Функция ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока,НалогообложениеНДС) 

	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтавкаНДС = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
		
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
		Если Реквизиты.ПодакцизныйТовар Тогда
			СтавкаНДС = Реквизиты.СтавкаНДС;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли; 		
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;  		
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;  		
	КонецЕсли;
	Возврат  СтавкаНДС;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиНаСервере()
    //Настройка формы SS
	Настройки = Новый Структура;        
    Настройки.Вставить("Склад"	        ,СкладПоУмолчанию);
    Настройки.Вставить("Родить"	        ,РодительПоУмолчанию);
	Настройки.Вставить("ВидНоменклатуры",ВидНоменклатурыПоумолчанию);

	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиCуперСборки", , Настройки, "Настройки SS", "ДополнительныеНастройкиCуперСборки"); 
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ЗаполнитьКонтрагентаСоглашенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентаСоглашенияНаСервере()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
								Партнер,
								Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение", Истина, Соглашение));
	Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
		Если Соглашение <> УсловияПродажПоУмолчанию.Соглашение
			И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда 
			Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
			Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
				ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
			КонецЕсли;
		КонецЕсли;    		   
	КонецЕсли;     
КонецПроцедуры // ЗаполнитьКонтрагентаСоглашенияНаСервере()

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Партнер,Соглашение, ТекущаяДата());
КонецПроцедуры

#КонецОбласти 