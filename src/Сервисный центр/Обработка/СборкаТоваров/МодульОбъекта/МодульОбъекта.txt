
#Область ПрограммныйИнтерфейс

// Подготавливает управляемую форму документа к работе с сборкою товаров 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ПодготовитьСборкуТоваровКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	
	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ГНАТ_ЗаявкаСервисногоЦентра") Тогда
		ПодготовитьЗаявкуСервисногоЦентра(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Подготавливает форму документа заявка сервисного центра к работе с сборкою товаров. 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа.
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы.
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте.
//
Процедура ПодготовитьЗаявкуСервисногоЦентра(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)

	Объект = ЭтаФорма.Объект;
	
	ВидимостьЭлементов = Новый Структура();
		
	СоздатьДополнительныеРеквизитыФормы(ЭтаФорма, ИмяОбработки, ВидимостьЭлементов);	
	СоздатьЭлементыФормы(ЭтаФорма, ЭтаФорма.Объект.Ссылка, ЭтаФорма.Элементы.ГруппаСтраницы, ВидимостьЭлементов, Истина, Истина);
	СоздатьУсловноеОформленияФормы(ЭтаФорма);
		
КонецПроцедуры

// Подготавливает форму документа заявка сервисного центра к работе с сборкою товаров. 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа.
//
Процедура СоздатьУсловноеОформленияФормы(ЭтаФорма)
	
	Элементы = ЭтаФорма.Элементы;
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("КомплектацияСборкиСерийныйНомер");
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("КомплектацияСборкиСклад");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.КомплектацияСборки.СерийныйНомер");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Справочники.СерийныеНомераНоменклатуры.ПустаяСсылка();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("КомплектацияСборкиОтменено");
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.КомплектацияСборки.Получено");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("КомплектацияСборки");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.КомплектацияСборки.Получено");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(152, 251, 152));
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("КомплектацияСборкиСерийныйНомер");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.КомплектацияСборки.Получено");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр"	,Истина);

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("КомплектацияСборки");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.КомплектацияСборки.Отменено");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр"	,Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона"		,ЦветаСтиля.АльтернативныйЦветФонаПоля);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"		,Новый Цвет(192, 192, 192));
	
КонецПроцедуры	

// Универсальная процедура создания дополнительных реквизитов на форме документа. 
//
// Параметры:
//  ЭтаФорма 			- УправляемаяФорма 				- Форма документа.
//  ИмяОбработки 		- Строка           				- Имя внешней обработки для подключения методов на клиенте.
// 
Процедура СоздатьДополнительныеРеквизитыФормы(ЭтаФорма, ИмяОбработки, ВидимостьЭлементов)

	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("СборкаТоваровИмяБибилиотеки", Новый ОписаниеТипов("Строка")));
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПолеВводаСканер") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("КТС_ПолеВводаСканер", Новый ОписаниеТипов("Строка")));
	КонецЕсли;
	                        
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.СборкаТоваровИмяБибилиотеки = ИмяОбработки;

КонецПроцедуры

// Процедура создает элементы формы для работы с сборкою товаров.
//
// Параметры:
//  ЭтаФорма 						- УправляемаяФорма 	- Форма документа реализации товаров и услуг.
//  ГруппаРодитель					- ГуппаФормы		- Гуппа в которой будут рисовться элементы для работы с сборкою товаров.
//  ВидимостьЭлементов  			- Структура			- Сожержит имена элементов которые не будуть отображены на форме.
//  ИспользоватьРеквизитыФормы 		- Булево            - Если Истина тогда в элементы подключаются реквизиты формы.
//  УстановитьОтображениеЭлементов  - Булево			- Устанавливает по умолчанию видимость элементов формы.
//
Процедура СоздатьЭлементыФормы(ЭтаФорма, Ссылка, ГруппаРодитель, ВидимостьЭлементов, ИспользоватьРеквизитыФормы=Ложь, УстановитьОтображениеЭлементов=Ложь)

	Элементы = ЭтаФорма.Элементы;
	Команды  = ЭтаФорма.Команды;
	
	// ГРУППЫ ФОРМЫ
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя", 						"КТС_ГруппаСборкаТоваров");
	ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Заголовок", 					"Сборка");
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.Страница);
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Истина);
	ПараметрыГруппы.Вставить("Отображение", 				ОтображениеОбычнойГруппы.ОбычноеВыделение);
	ГруппаСборка = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппы, ГруппаРодитель);
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя"							,"КТС_ГруппаСклады");
	ПараметрыГруппы.Вставить("ТипЭлемента"					,Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Вид"							,ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Группировка"					,ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава"	,Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали"		,Истина);
	ПараметрыГруппы.Вставить("ОтображатьЗаголовок"			,Ложь);
	ПараметрыГруппы.Вставить("Отображение"					,ОтображениеОбычнойГруппы.Нет);
	ГруппаСклады = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппы, ГруппаСборка);
	
	Если НЕ ВидимостьЭлементов.Свойство("СборкаТранзитныйСклад") Тогда
	
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", 						"СборкаТранзитныйСклад");
		ПараметрыЭлемента.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", 				"Объект.СборкаТранзитныйСклад");
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", 	Истина);
		ПараметрыЭлемента.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Верх);
		ПараметрыЭлемента.Вставить("ТолькоПросмотр", 			Истина);
		СборкаТранзитныйСклад = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаСклады);
		
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("СборкаСкладКудаОтправить") Тогда
	
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", 						"СборкаСкладКудаОтправить");
		ПараметрыЭлемента.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", 				"Объект.СборкаСкладКудаОтправить");
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", 	Истина);
		ПараметрыЭлемента.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Верх);
		ПараметрыЭлемента.Вставить("ТолькоПросмотр", 			Истина);
		СборкаСкладКудаОтправить = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаСклады);
		
	КонецЕсли;

	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя"							,"КТС_ГруппаКомплектацияСборки");
	ПараметрыГруппы.Вставить("ТипЭлемента"					,Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Вид"							,ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Группировка"					,ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава"	,Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали"		,Истина);
	ПараметрыГруппы.Вставить("ЦветФона"						,Новый Цвет(245, 251, 247));
	ПараметрыГруппы.Вставить("ОтображатьЗаголовок"			,Ложь);
	ПараметрыГруппы.Вставить("Отображение"					,ОтображениеОбычнойГруппы.Нет);
	ГруппаКомплектацияСборки = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппы, ГруппаСборка);
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя", 						"КТС_ГруппаПолеСканера");
	ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("ЦветФона", 					Новый Цвет(245, 251, 247));
	ПараметрыГруппы.Вставить("Заголовок", 					"Поле ввода\поиск по сер. номеру\штрихкоду");
	ПараметрыГруппы.Вставить("Отображение", 				ОтображениеОбычнойГруппы.СильноеВыделение);
	ГруппаПолеВводаСканер = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппы, ГруппаСборка);
	
	// ЭЛЕМЕНТЫ ФОРМЫ
		
	Если НЕ ВидимостьЭлементов.Свойство("КомплектацияСборки") Тогда
	
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя"						,"КомплектацияСборки");
		ПараметрыЭлемента.Вставить("ТипЭлемента"				,Тип("ТаблицаФормы"));
		ПараметрыЭлемента.Вставить("ПутьКДанным"				,"Объект.КомплектацияСборки");  
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали"	,Истина);
		ПараметрыЭлемента.Вставить("Заголовок"					,"Комплектация сборки");
		ПараметрыЭлемента.Вставить("ПутьКДаннымКартинкиСтроки"	,"Объект.КомплектацияСборки.Номенклатура.ИспользоватьСерийныеНомера");
		ПараметрыЭлемента.Вставить("КартинкаСтрок"				,БиблиотекаКартинок.СерииНоменклатурыМожноУказать);
		ПараметрыЭлемента.Вставить("ПоложениеКоманднойПанели"	,ПоложениеКоманднойПанелиЭлементаФормы.Нет);
		КомплектацияСборки = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаКомплектацияСборки);	
  
		КомплектацияСборки.УстановитьДействие("ПередУдалением"			,"КомплектацияСборки_ПередУдалением");
		КомплектацияСборки.УстановитьДействие("ПередНачаломДобавления"	,"КомплектацияСборки_ПередНачаломДобавления");
		
		ЭлНоменклатура 	= ПолучитьПараметрыЭлементаТаблицы(Элементы
														   ,"КомплектацияСборки"	
														   ,"Номенклатура"	
														   ,ВидПоляФормы.ПолеВвода
														   ,КомплектацияСборки
														   ,Истина);
														   
		ЭлСерийныйНомер	= ПолучитьПараметрыЭлементаТаблицы(Элементы 
														   ,"КомплектацияСборки"	
														   ,"СерийныйНомер"
														   ,ВидПоляФормы.ПолеВвода	 
														   ,КомплектацияСборки
														   ,
														   ,Истина);
		ЭлСерийныйНомер.УстановитьДействие("Очистка","КомплектацияСерийныйНомер_Очистка");
														   
		ЭлОтмена		= ПолучитьПараметрыЭлементаТаблицы(Элементы 
														   ,"КомплектацияСборки"	
														   ,"Отменено"		
														   ,ВидПоляФормы.ПолеФлажка 
														   ,КомплектацияСборки);
														   
		ЭлОтмена.УстановитьДействие("ПриИзменении","КомплектацияСборкиОтмена_ПриИзменении");
														   
		ЭлСклад			= ПолучитьПараметрыЭлементаТаблицы(Элементы 
														   ,"КомплектацияСборки"	
														   ,"Склад"		
														   ,ВидПоляФормы.ПолеВвода	 
														   ,КомплектацияСборки
														   ,
														   ,
														   ,Истина);
		ЭлСклад.Доступность = Ложь;
			
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПолеВводаСканер") Тогда
	
		ПараметрыЭлемента = Новый Структура;
		ПараметрыЭлемента.Вставить("Имя", 						"КТС_ПолеВводаСканер");
		ПараметрыЭлемента.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыЭлемента.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыЭлемента.Вставить("ПутьКДанным", 				"КТС_ПолеВводаСканер");
		ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", 	Истина);
		ПараметрыЭлемента.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Нет);
		ПараметрыЭлемента.Вставить("КнопкаОчистки", 			Истина);
		ПолеВводаСканер = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаПолеВводаСканер);
		ПолеВводаСканер.УстановитьДействие("ОкончаниеВводаТекста", "КТС_ПолеВводаСканер_ОкончаниеВводаТекста");
		
	КонецЕсли;	
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_КнопкаСобраноИПротестировано") Тогда
		
		ПараметрыКоманды = Команды.Добавить("КТС_ПроверитьСобраноИПротестировано");
	    ПараметрыКоманды.Действие = "КТС_ПроверитьСобраноИПротестировано";
		ПараметрыКоманды.Заголовок = "Собрано и протестировано";
		
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("Имя", 			"КТС_КнопкаСобраноИПротестировано");
		ПараметрыКнопки.Вставить("ТипЭлемента", 	Тип("КнопкаФормы"));
		ПараметрыКнопки.Вставить("ИмяКоманды", 	"КТС_ПроверитьСобраноИПротестировано");
		КнопкаАдресПартнера = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопки, ГруппаПолеВводаСканер);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыЭлементаТаблицы(Элементы,ИмяТаблицы,ИмяЭлемента,Вид,Родитель,ТолькоПросмотр = Ложь, КнопкаОчистки = Ложь, КнопкаВыбора = Ложь, КнопкаОткрытия = Ложь)  
	
	ШаблонПутьКДанным	= "Объект.%ИмяТаблицы%.%ИмяЭлемента%";
	ШаблонПутьКДанным	= СтрЗаменить(ШаблонПутьКДанным	,"%ИмяТаблицы%"	, ИмяТаблицы);
	ПутьКДанным			= СтрЗаменить(ШаблонПутьКДанным	,"%ИмяЭлемента%", ИмяЭлемента);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,ИмяТаблицы+ИмяЭлемента);	
	Параметры.Вставить("ПутьКДанным"		,ПутьКДанным);
	Параметры.Вставить("Вид"				,Вид);
	Параметры.Вставить("ЦветТекстаПодвала"	,Новый Цвет(0, 0, 0));
	Параметры.Вставить("ЦветФонаПодвала"	,Новый Цвет(255, 255, 255));
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	Параметры.Вставить("ТолькоПросмотр"		,ТолькоПросмотр);
	Параметры.Вставить("РедактированиеТекста", Ложь);
	Параметры.Вставить("КнопкаОчистки"		,КнопкаОчистки);
	Параметры.Вставить("КнопкаВыбора"		,КнопкаВыбора);
	Параметры.Вставить("КнопкаОткрытия"		,КнопкаОткрытия);
	
	Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	
КонецФункции// ПолучитьПараметрыЭлемента()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "0.0.5";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "СборкаТоваров");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Сборка товаров [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Сборка товаров [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "СборкаТоваров");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

#КонецОбласти
