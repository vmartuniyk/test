#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. задания создания ЗСЦ на основании заказа клиента");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. задания создания ЗСЦ на основании заказа клиента [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. задания создание ЗСЦ на основании заказа клиента [" + Версия + "]", "ВыполнитьАвтоматическоеСозданиеЗаявкиСервисногоЦентра();", "ВызовСерверногоМетода");
	
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

	
#КонецОбласти

#Область ПрограмныйИнтерфейс

Процедура ВыполнитьАвтоматическоеСозданиеЗаявкиСервисногоЦентра() Экспорт
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Автоматическое создание заявки сервисного центра'");
	СвойствоЗаказПодСборку= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("016f5acb-be6d-11e4-80ea-001e676b0175"));  //Заказ клиента под сборку

	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАвтоматическоеСозданиеЗаявкиСервисногоЦентра();
	Запрос.УстановитьПараметр("СвойствоЗаказПодСборку", СвойствоЗаказПодСборку);
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ПараметрыОтбора   = ПолучитьПараметрыОтбора(Выборка);
		ОбеспечениеТовары = ОбновитьСостояниеОбеспечения(Выборка.Ссылка, ПараметрыОтбора);
		
		СостояниеНаличия = ОбеспечениеТовары.Выгрузить(, "СостояниеНаличия");	
		СостояниеНаличия.Свернуть("СостояниеНаличия");
		Если СостояниеНаличия.Количество() = 1 И СостояниеНаличия[0].СостояниеНаличия = Перечисления.СостоянияНаличия.ПолностьюВНаличии Тогда
			ПолностьюВНаличии = Истина;
		Иначе
			ПолностьюВНаличии = Ложь;
		КонецЕсли;   		
		
		Если Не ПолностьюВНаличии Тогда
			Продолжить;	
		КонецЕсли;
		
		СтруктураОшибок = Новый Структура();
		СоздатьДокументЗаявкаСервисногоЦентра(Выборка,СтруктураОшибок);

		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") 
			И СтруктураОшибок.Количество() = 0 Тогда
			ОчиститьДополнительныеСведения(Выборка.Ссылка, СвойствоЗаказПодСборку);
		КонецЕсли;

		
	КонецЦикла;
		
КонецПроцедуры // ВыполнитьАвтоматическоеСозданиеЗаявкиСервисногоЦентра()

	
#КонецОбласти

#Область СлужебныеПроцедуриИФункции

Функция ПолучитьТекстЗапросаАвтоматическоеСозданиеЗаявкиСервисногоЦентра()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
	               |ПОМЕСТИТЬ ЗаказыКлиентов
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СвойствоЗаказПодСборку
	               |	И ДополнительныеСведения.Значение = ИСТИНА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокЗаказы.Дата КАК Дата,
	               |	ДокЗаказы.Ссылка КАК Ссылка,
	               |	ДокЗаказы.Склад,
	               |	ДокЗаказы.Партнер,
	               |	ДокЗаказы.Менеджер
	               |ПОМЕСТИТЬ ДокументыДвижения
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ДокЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыКлиентов КАК ЗаказыКлиентов
	               |		ПО (ЗаказыКлиентов.ЗаказКлиента = ДокЗаказы.Ссылка)
	               |ГДЕ
	               |	ДокЗаказы.Проведен
	               |	И ДокЗаказы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыДвижения.Дата,
	               |	ДокументыДвижения.Ссылка,
	               |	ДокументыДвижения.Склад,
	               |	ДокументыДвижения.Партнер КАК ЗаказчикНаРемонт,
	               |	ДополнительныеСведения.Значение КАК Номенклатура,
	               |	ДокументыДвижения.Менеджер
	               |ИЗ
	               |	ДокументыДвижения КАК ДокументыДвижения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО (ДокументыДвижения.Ссылка = (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента)))
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СвойствоНоменклатураПодСБорку
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ЗаказыКлиентов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДокументыДвижения";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаАвтоматическоеДвижениеТоваров()

	
Функция ПолучитьПараметрыОтбора(Выборка)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заказ", Выборка.Ссылка);
	Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.Склад);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Выборка.Ссылка.НеОтгружатьЧастями);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", Выборка.Ссылка.ЖелаемаяДатаОтгрузки);
	ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.СкладОтправитель);
		ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Ложь);
		ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", ?(ЗначениеЗаполнено(Выборка.Ссылка.ЖелаемаяДатаПоступления), КонецДня(Выборка.Ссылка.Дата), Неопределено));
	КонецЕсли;
	ПараметрыОтбора.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище(Выборка.Ссылка));
	ПараметрыОтбора.Вставить("РассчитатьБезЗаказа", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции // ПолучитьПараметрыОтбора()

Функция ПоместитьТоварыВоВременноеХранилище(ЗаказКлиента)
	
	//Возврат ПоместитьВоВременноеХранилище(ЗаказКлиента.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ПоместитьТоварыВоВременноеХранилище()

Процедура ОчиститьДополнительныеСведения(ДокСсылка, Свойство)

	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
	НаборЗаписей.Записать();

КонецПроцедуры
 
Функция ОбновитьСостояниеОбеспечения(Заказ, Параметры)
	
	ПараметрыСостоянияОбеспечения = ПолучитьПараметрыСостоянияОбеспечения(Параметры);
	ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Истина); // Возможно нужно будет разделить
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать(); 
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости);
	
	Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
		СтрокаТовары.Выбран = Истина;
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения); 
	
	РезультатПоиска = ОбработкаСостояниеОбеспечения.Товары.Найти(Истина, "СтрокаИзменена");
	Если РезультатПоиска <> Неопределено Тогда
		
		РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
		Если РезультатРасчета <> Неопределено Тогда
			
			ДокументОбъект = Заказ.ПолучитьОбъект();
			ДокументОбъект.Товары.Загрузить(РезультатРасчета);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам'"),
					УровеньЖурналаРегистрации.Информация, 
					,
					Заказ,
					НСтр("ru = 'Удачно расчитано дату отгрузки номенклатуры по заказу'"));
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое движение товаров по заказам '"),
					УровеньЖурналаРегистрации.Ошибка, 
					,
					Заказ,
					НСтр("ru = 'Не удалось расчитать дату отгрузки номенклатуры по заказу'") + ОписаниеОшибки()); 	
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаСостояниеОбеспечения.Товары;
	
КонецФункции // ОбновитьСостояниеОбеспечения()

Функция ПолучитьПараметрыСостоянияОбеспечения(Параметры)
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Параметры.НеОтгружатьЧастями);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа", Параметры.РассчитатьБезЗаказа);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии);
	
	Возврат ПараметрыСостоянияОбеспечения;
	
КонецФункции // ПолучитьПараметрыСостоянияОбеспечения()

Процедура ОповеститьОтделТехническойПоддержки(Заказ, ОписаниеОшибки) Экспорт
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ТемаПисьма 					= "[ERROR] Автоматическое движение товаров";
	ТелоПисьма					= "";
	ТелоПисьма					= ТелоПисьма + " " + ОписаниеОшибки + "<br>";
	ТелоПисьма					= ТелоПисьма + " Навигационная ссылка: " + ПолучитьНавигационнуюСсылку(Заказ) + "<br>"; 
	
	Если ПолучитьРазрешениеНаОтправкуПисьма(ТелоПисьма) Тогда
		ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазрешениеНаОтправкуПисьма(знач ТекстПисьма)

	ХешСумма = ПолучитьMD5СуммуСтроки(ТекстПисьма);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаРазрешениеНаОтправкуПисьма();
	
	Запрос.УстановитьПараметр("ХешСумма", ХешСумма);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписатьСуммуВРегистр(ХешСумма);
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Период > 29 Тогда // Если сообщение отправлялось послений раз 30 минут назад и больше - значит нужно отправлять
			ЗаписатьСуммуВРегистр(ХешСумма);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьСуммуВРегистр(ХешСумма);
	Возврат Ложь;
	
КонецФункции
 
Функция ПолучитьMD5СуммуСтроки(знач СтрокаДляРасчета)

	ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5);
	ОбъектХеш.Добавить(СтрокаДляРасчета);

	Возврат СокрЛП(Строка(ОбъектХеш.ХешСумма));

КонецФункции // ПолучитьMD5СуммуСтроки()

Функция ТекстЗапросаРазрешениеНаОтправкуПисьма()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РАЗНОСТЬДАТ(Период, &ТекущаяДата, МИНУТА)	КАК Период,
	               |	ХешСумма									КАК ХешСумма,
	               |	Количество  								КАК Количество
	               |ИЗ
	               |	РегистрСведений.КТС_КонтрольОтправкиСообщений.СрезПоследних(, ХешСумма = &ХешСумма)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРазрешениеНаОтправкуПисьма()

Процедура ЗаписатьСуммуВРегистр(знач ХешСумма)

	ТекДата		 = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.КТС_КонтрольОтправкиСообщений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.ХешСумма.Установить(ХешСумма);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период 		= ТекДата;
	Запись.ХешСумма 	= ХешСумма;
	Запись.Количество 	= 1;
	
	НаборЗаписей.Записать();

КонецПроцедуры
 

#Область ЗаявкаСЦ

Функция СоздатьДокументЗаявкаСервисногоЦентра(ПараметрыДанных,СтруктураОшибок)
	
	
   СтруктураПараметров     = ПолучитьСтруктуруПараметровДокументаЗСЦ(ПараметрыДанных);
   ДокументЗаявкуСЦОбъект    = git_Objcon.СоздатьДокумент("ГНАТ_ЗаявкаСервисногоЦентра",СтруктураПараметров,СтруктураОшибок);
   
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось документ ЗаявкаСЦ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ЗаказНаСборку.ПустаяСсылка();
    КонецЕсли;  
	
	
		//	Попытка
		//	ДокументОбъект.Заполнить(Выборка.Ссылка);
		//Исключение
		//	ОповеститьОтделТехническойПоддержки(Выборка.Ссылка, НСтр("ru = 'Не удалось сформировать документ движения товаров по заказу'") + ОписаниеОшибки());	
		//	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
		//		УровеньЖурналаРегистрации.Ошибка, 
		//		,
		//		Выборка.Ссылка,
		//		НСтр("ru = 'Не удалось сформировать документ движения товаров по заказу'") + ОписаниеОшибки());
		//	Продолжить;	
		//КонецПопытки;

    Попытка
        ДокументЗаявкуСЦОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
		ДокументСсылка = ДокументЗаявкуСЦОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
        Возврат ДокументСсылка;
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаявкаСЦ.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
    КонецПопытки; 

КонецФункции

Функция ПолучитьСтруктуруПараметровДокументаЗСЦ(ПараметрыДанных)
    
    СтруктураПараметров = git_Templates.ПолучитьШаблонЗаявкаСервичногоЦентраСборка();
    ТекстЗаявкиУСЦ = "Создание сборки пользователем ";
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ПараметрыДанных);	
	ПараметрыДанных.Вставить("ВидОперации", Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Сборка);
	ПараметрыДанных.Вставить("ВнешнийВид", ТекстЗаявкиУСЦ);
	ПараметрыДанных.Вставить("Дата", ТекущаяДата());
	ПараметрыДанных.Вставить("ДатаПринятия", ТекущаяДата());
	ПараметрыДанных.Вставить("ЗаявленыйДефект", ТекстЗаявкиУСЦ);
	ПараметрыДанных.Вставить("Комплектность", ТекстЗаявкиУСЦ);
	ПараметрыДанных.Вставить("ОбъектОснование", ПараметрыДанных.Ссылка);
	ПараметрыДанных.Вставить("НомерТелефона", ПолучитьТелефонЗаказчика(ПараметрыДанных.ЗаказчикНаРемонт));
	//ПараметрыДанных.Вставить("ЕкспертПрийомщик", ПараметрыДанных.Користувач);
	
	ХодРабот = Новый ТаблицаЗначений;
	ХодРабот.Колонки.Добавить("Комментарий", 					Новый ОписаниеТипов("Строка"));
	ХодРабот.Колонки.Добавить("МесторасположениеФактическое", 	Новый ОписаниеТипов("СправочникСсылка.ГНАТ_МесторасположениеВСервисе"));
	ХодРабот.Колонки.Добавить("Ответственный", 					Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ХодРабот.Колонки.Добавить("ПартнерАСЦ", 					Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ХодРабот.Колонки.Добавить("Период", 						Новый ОписаниеТипов("Дата"));
	ХодРабот.Колонки.Добавить("ЭтапРаботы", 					Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы"));
	
	Строка 					= ХодРабот.Добавить();
	Строка.Период 			= ТекущаяДата();
	Строка.Комментарий 		= "Сборка товаров";
	Строка.Ответственный 	= ПараметрыДанных.Менеджер;
	Строка.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято;  
	Строка.МесторасположениеФактическое = ЗагрузитьМесторасположенияПоСкладу(ПараметрыДанных.Склад);
	
	ПараметрыДанных.Вставить("ХодРабот", ХодРабот); 
	
    Возврат СтруктураПараметров;
КонецФункции


Функция ЗагрузитьМесторасположенияПоСкладу(Склад) 
	
	Фильтр = РегистрыСведений.ГНАТ_НастройкаМест.СрезПоследних(,Новый Структура("Склад",Склад));
	Если Фильтр.Количество() Тогда
		Возврат  Фильтр[0].Месторасположение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ЗагрузитьМесторасположенияПоСкладу()


Функция ПолучитьТелефонЗаказчика(ЗаказчикРемонта)
	МобНомер				= 	Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85"));  //Мобільний телефон
	МобНомерДоп				= 	Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("a8ec65fe-c74a-11e1-9d4d-001e673c80fc"));  //Мобільний телефон (додатковий)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНомераТелефоновПартнера();	
	Запрос.УстановитьПараметр("Партнер",		ЗаказчикРемонта);
	Запрос.УстановитьПараметр("МобНомер",		МобНомер);
	Запрос.УстановитьПараметр("МобНомерДоп",	МобНомерДоп);
	Выборка = Запрос.Выполнить().Выбрать(); 
	Возврат ?(Выборка.Следующий(),Выборка.НомерТелефона,"");
КонецФункции

Функция ПолучитьТекстЗапросаНомераТелефоновПартнера()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
	    |	НомерТелефона 				КАК НомерТелефона
		|ИЗ
	    | 	РегистрСведений.Лояльность_НомераТелефонов
		|	
		|ГДЕ
		| 	Партнер = &Партнер
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= &МобНомер
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= &МобНомерДоп
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка.Владелец = &Партнер
		|И	Вид	   			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)
		|И	Тип 			= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка.Владелец = &Партнер
		|И	Вид	   			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица)
		|И	Тип 			= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНомераТелефоновПартнера()


#КонецОбласти 


#КонецОбласти


