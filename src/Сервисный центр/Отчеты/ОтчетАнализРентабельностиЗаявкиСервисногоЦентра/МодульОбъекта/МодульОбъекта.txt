
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Таблица", ПолучитьТаблицуЗСЦ());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуЗСЦ()

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСписокЗСЦ();
	ПериодОтчета    = ПолучитьЗначениеПараметра("ПериодОтчета");
	ДатаОкончания = ?(ПериодОтчета.ДатаОкончания = Дата(1,1,1),ТекущаяДата(),ПериодОтчета.ДатаОкончания);	
	
	Запрос.УстановитьПараметр("ДанныеОбЭтапе", 	ПолучитьЗначениеПараметра("ДанныеОбЭтапе"));
	Запрос.УстановитьПараметр("ДанныеОтчета", 	ПолучитьЗначениеПараметра("ДанныеОтчета"));
	Запрос.УстановитьПараметр("ДатаНачала", 	ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецДня(ДатаОкончания));    

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуЗСЦ()

Функция ТекстЗапросаСписокЗСЦ()
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	ЭтапыРаботЗСЦ.Период 					КАК Период,
					|	ЭтапыРаботЗСЦ.ЗаявкаСервисногоЦентра 	КАК ЗаявкаСервисногоЦентра,
					|	ЭтапыРаботЗСЦ.ЭтапРаботы 				КАК ТекущийЭтапРаботы
					|ПОМЕСТИТЬ ОтборПоЗСЦ
					|ИЗ
					|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(&ДатаОкончания,) КАК ЭтапыРаботЗСЦ
					|ГДЕ
					|	ВЫБОР
					|		КОГДА &ДанныеОбЭтапе = 1
					|			ТОГДА ЭтапыРаботЗСЦ.ЭтапРаботы = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
					|		КОГДА &ДанныеОбЭтапе = 2
					|			ТОГДА ЭтапыРаботЗСЦ.ЭтапРаботы <> ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ
					|	И ЭтапыРаботЗСЦ.Период >= &ДатаНачала
					|   
					|ИНДЕКСИРОВАТЬ ПО
					|	ЗаявкаСервисногоЦентра
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ОтборПоЗСЦ.ЗаявкаСервисногоЦентра 	КАК ЗаявкаСервисногоЦентра,
					|	ЭтапыРаботЗСЦ.ЭтапРаботы			КАК ЭтапРаботы
					|ПОМЕСТИТЬ ЗСЦПОВстречномуЭтапу
					|ИЗ
					|	ОтборПоЗСЦ КАК ОтборПоЗСЦ
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ЭтапыРаботЗСЦ
					|		ПО ОтборПоЗСЦ.ЗаявкаСервисногоЦентра = ЭтапыРаботЗСЦ.ЗаявкаСервисногоЦентра
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОтборПоЗСЦ.Период 					КАК Период,
					|	ОтборПоЗСЦ.ЗаявкаСервисногоЦентра 	КАК ЗаявкаСервисногоЦентра,
					|	РентабельностьЗСЦ.Регистратор 		КАК Регистратор,
					|	ОтборПоЗСЦ.ТекущийЭтапРаботы 		КАК ТекущийЭтапРаботы,
					|	ЗСЦПОВстречномуЭтапу.ЭтапРаботы 	КАК ВстречаемыйЭтап,
					|	ВЫБОР
					|		КОГДА &ДанныеОтчета = 1
					|			ТОГДА ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUSDОборот, 0)
					|		ИНАЧЕ ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUAHОборот, 0)
					|	КОНЕЦ КАК Выручка,
					|	ВЫБОР
					|		КОГДА &ДанныеОтчета = 1
					|			ТОГДА ЕСТЬNULL(РентабельностьЗСЦ.СебестоимостьUSDОборот, 0)
					|		ИНАЧЕ ЕСТЬNULL(РентабельностьЗСЦ.СебестоимостьUAHОборот, 0)
					|	КОНЕЦ КАК Себестоимость,
					|	ВЫБОР
					|		КОГДА &ДанныеОтчета = 1
					|			ТОГДА ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUSDОборот, 0) - ЕСТЬNULL(РентабельностьЗСЦ.СебестоимостьUSDОборот, 0)
					|		ИНАЧЕ ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUAHОборот, 0) - ЕСТЬNULL(РентабельностьЗСЦ.СебестоимостьUAHОборот, 0)
					|	КОНЕЦ КАК ВаловаяПрибыль,
					|	ВЫБОР
					|		КОГДА &ДанныеОтчета = 1
					|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
					|						КОГДА ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUSDОборот, 0) <> 0
					|							ТОГДА (ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUSDОборот, 0) - ЕСТЬNULL(РентабельностьЗСЦ.СебестоимостьUSDОборот, 0)) / ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUSDОборот, 0)
					|						ИНАЧЕ 0
					|					КОНЕЦ * 100 КАК ЧИСЛО(15, 2))
					|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
					|					КОГДА ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUAHОборот, 0) <> 0
					|						ТОГДА (ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUAHОборот, 0) - ЕСТЬNULL(РентабельностьЗСЦ.СебестоимостьUAHОборот, 0)) / ЕСТЬNULL(РентабельностьЗСЦ.ВыручкаUAHОборот, 0)
					|					ИНАЧЕ 0
					|				КОНЕЦ * 100 КАК ЧИСЛО(15, 2))
					|	КОНЕЦ КАК Рентабельность
					|ИЗ
					|	ОтборПоЗСЦ КАК ОтборПоЗСЦ
					|		
					|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РентабельностьЗаявокСервисногоЦентра.Обороты(, , Регистратор, ) КАК РентабельностьЗСЦ
					|ПО ОтборПоЗСЦ.ЗаявкаСервисногоЦентра = РентабельностьЗСЦ.ЗаявкаСервисногоЦентра

					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗСЦПОВстречномуЭтапу КАК ЗСЦПОВстречномуЭтапу
					|ПО ОтборПоЗСЦ.ЗаявкаСервисногоЦентра = ЗСЦПОВстречномуЭтапу.ЗаявкаСервисногоЦентра";
			
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаСписокЗСЦ()

Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
   	Если ПараметрДанных <> Неопределено Тогда
    	ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
   		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
     	Иначе
       		Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "ОтчетАнализРентабельностиЗаявкиСервисногоЦентра");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("РассылкаОтчетов", Истина);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "ОтчетАнализРентабельностиЗаявкиСервисногоЦентра");
	
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "ОтчетАнализРентабельностиЗаявкиСервисногоЦентра", "ОтчетАнализРентабельностиЗаявкиСервисногоЦентра", "ОткрытиеФормы", Ложь, "ОтчетАнализРентабельностиЗаявкиСервисногоЦентра");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Процедура СчитатьДокументыНазначений(МассивНазначений)
	
	Макет = ПолучитьМакет("МакетДокументыНазначений");
	
	Для Инд = 1 По Макет.ВысотаТаблицы Цикл
		МассивНазначений.Добавить(Макет.Область(Инд,1).Текст);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти 