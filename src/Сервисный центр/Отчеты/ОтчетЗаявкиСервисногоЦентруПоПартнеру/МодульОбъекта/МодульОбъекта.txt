
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
		
	СпиокТестов = Новый Массив;
	СпиокТестов.Добавить("Тест_ПроверкаКомпоновкиПриВыгрузкеНа_ORDER_B2B");
	
	Возврат СпиокТестов;
	
КонецФункции

Процедура Тест_ПроверкаКомпоновкиПриВыгрузкеНа_ORDER_B2B() Экспорт
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных" , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ТекущаяДата());
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Партнер", Справочники.Партнеры.НашеПредприятие);
	    		
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывод = ИспользованиеВывода.Разрешить;
	СкомпоноватьРезультат(ТабДок);	

КонецПроцедуры

#КонецОбласти

#Область ПрограмныйИнтерфейс

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Отчет						= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить("Отчет",Отчет);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуриИФункции

Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
		Иначе
			Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНаборДанных()
	
	Запрос 		 	= Новый Запрос;
	ТекстЗапроса 	= ПолучитьТекстЗапросаНаборДанных();
	Период 			= ПолучитьЗначениеПараметра("Период");
	Партнер 		= ПолучитьЗначениеПараметра("Партнер");
	Запрос.Текст 	= ТекстЗапроса;
	
	Если ТипЗнч(Период) = Тип("Дата") Тогда
		ДатаОтчета = Период;
	ИначеЕсли
	ТипЗнч(Период.Дата) = Тип("Дата") Тогда
		ДатаОтчета = Период.Дата;	
	Иначе 
		ДатаОтчета = ТекущаяДата();	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", 	ДатаОтчета);
	Запрос.УстановитьПараметр("Партнер", 	Партнер);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗаявкаСервисногоЦентра.Дата 						КАК ДатаПрийома,
		|	ЗаявкаСервисногоЦентра.Номенклатура 				КАК Номенклатура,
		|	ЗаявкаСервисногоЦентра.СерийныйНомер 				КАК СерийныйНомер,
		|	ЗаявкаСервисногоЦентра.РеализацияТоваровУслуг.Дата 	КАК ДатаПродажи,
		|	ЗаявкаСервисногоЦентра.ВнешнийВид 					КАК ВнешнийВид,
		|	ЗаявкаСервисногоЦентра.Комплектность 				КАК Комплектность,
		|	ЗаявкаСервисногоЦентра.ЗаявленыйДефект 				КАК ЗаявленыйДефект,
		|	Период 												КАК ДатаЭтапа,
		|	ЭтапРаботы 											КАК ТекущийЭтап
		|ИЗ
		|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(
		|			&Период,
		|			ЗаявкаСервисногоЦентра.ЗаказчикРемонта = &Партнер
		|		  И ЭтапРаботы.ВыгружатьЭтапДляПартнера = Истина)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СведенияОВнешнемОтчете

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.5";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Отчет заявки сервисного центру по партнеру");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "Отчет заявки сервисного центру по партнеру");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Отчет заявки сервисного центру по партнеру", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

#КонецОбласти
