#Область ИнтерфейсАвтоТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
	
#КонецОбласти

#Область ПрограммныйИнтерфейс


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Отчет						= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить("Отчет",Отчет);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНаборДанных()
	УстановитьПривилегированныйРежим(Истина);
	
	Календар	= Справочники.Календари.ПолучитьСсылку(Новый УникальныйИдентификатор("fbf9ec12-f8bc-11e1-9d4d-001e673c80fc"));
	ТД			= ТекущаяДата();

	Запрос 		 	= Новый Запрос;
	ТекстЗапроса 	= ПолучитьТекстЗапросаНаборДанных();
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Календарь", 		Календар);
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТД);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
	
	ТекстЗапроса = "ВЫБРАТЬ
			|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
			|	КалендарныеГрафики.Год КАК Год
			|ПОМЕСТИТЬ КешКалендар
			|ИЗ
			|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
			|ГДЕ
			|	КалендарныеГрафики.Календарь = &Календарь
			|	И КалендарныеГрафики.ДеньВключенВГрафик

			|ИНДЕКСИРОВАТЬ ПО
			|	Год,
			|	ДатаГрафика
			|;
			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешКалендар.ДатаГрафика КАК НачалоПериода,
			|	МИНИМУМ(КешКалендарКопия.ДатаГрафика) КАК ДатаОкончания,
			|	РАЗНОСТЬДАТ(КешКалендар.ДатаГрафика, МИНИМУМ(КешКалендарКопия.ДатаГрафика), ДЕНЬ) - 1 КАК ДнейВыходных
			|ПОМЕСТИТЬ КешВыходных
			|ИЗ
			|	КешКалендар КАК КешКалендар
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешКалендар КАК КешКалендарКопия
			|		ПО КешКалендар.Год = КешКалендарКопия.Год
			|			И КешКалендар.ДатаГрафика < КешКалендарКопия.ДатаГрафика

			|СГРУППИРОВАТЬ ПО
			|	КешКалендар.ДатаГрафика
			|;
			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Период КАК ДатаЭтапа,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ПартнерАСЦ КАК АСЦ,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.МесторасположениеФактическое,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Ответственный,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Комментарий,
			|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы.НормативноеВремя КАК НормативноеВремя
			|ПОМЕСТИТЬ ЭтапиЗаявкиСЦ
			|ИЗ
			|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
			|;
			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапиЗаявкиСЦ.ДатаЭтапа,
			|	ЭтапиЗаявкиСЦ.ЭтапРаботы,
			|	ЭтапиЗаявкиСЦ.АСЦ,
			|	ЭтапиЗаявкиСЦ.ЗаявкаСервисногоЦентра,
			|	ЭтапиЗаявкиСЦ.МесторасположениеФактическое,
			|	ЭтапиЗаявкиСЦ.Ответственный,
			|	ЭтапиЗаявкиСЦ.Комментарий,
			|	ГНАТ_ЗаявкиСервисногоЦентра.Партнер,
			|	ГНАТ_ЗаявкиСервисногоЦентра.Номенклатура,
			|	ГНАТ_ЗаявкиСервисногоЦентра.СерийныйНомер,
			|	ГНАТ_ЗаявкиСервисногоЦентра.Себестоимость,
			|	ЭтапиЗаявкиСЦ.НормативноеВремя
			|ПОМЕСТИТЬ КешРеквизитыЗаявки
			|ИЗ
			|	ЭтапиЗаявкиСЦ КАК ЭтапиЗаявкиСЦ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЗаявкиСервисногоЦентра КАК ГНАТ_ЗаявкиСервисногоЦентра
			|		ПО ЭтапиЗаявкиСЦ.ЗаявкаСервисногоЦентра = ГНАТ_ЗаявкиСервисногоЦентра.Регистратор
			|;

			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешРеквизитыЗаявки.ДатаЭтапа,
			|	СУММА(КешВыходных.ДнейВыходных* 24 ) КАК ЧасовВиходных,
			|	КешРеквизитыЗаявки.ЭтапРаботы,
			|	КешРеквизитыЗаявки.ЗаявкаСервисногоЦентра
			|ПОМЕСТИТЬ КешВыходнихДнейПослеЭтапа
			|ИЗ
			|	КешРеквизитыЗаявки КАК КешРеквизитыЗаявки
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешВыходных КАК КешВыходных
			|		ПО (КешВыходных.ДатаОкончания >= КешРеквизитыЗаявки.ДатаЭтапа)
			|			И (КешВыходных.НачалоПериода <= &ТекущаяДата)

			|СГРУППИРОВАТЬ ПО
			|	КешРеквизитыЗаявки.ДатаЭтапа,
			|	КешРеквизитыЗаявки.ЭтапРаботы,
			|	КешРеквизитыЗаявки.ЗаявкаСервисногоЦентра
			|;

			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешРеквизитыЗаявки.ДатаЭтапа,
			|	КешРеквизитыЗаявки.НормативноеВремя - РАЗНОСТЬДАТ(КешРеквизитыЗаявки.ДатаЭтапа, &ТекущаяДата, ЧАС) 
			|	+ ЕСТЬNULL(КешВыходнихДнейПослеЭтапа.ЧасовВиходных, 0)  КАК РазницаДат,
			|	КешРеквизитыЗаявки.ЭтапРаботы,
			|	КешРеквизитыЗаявки.АСЦ,
			|	КешРеквизитыЗаявки.ЗаявкаСервисногоЦентра,
			|	КешРеквизитыЗаявки.МесторасположениеФактическое,
			|	КешРеквизитыЗаявки.Ответственный,
			|	КешРеквизитыЗаявки.Комментарий,
			|	КешРеквизитыЗаявки.Партнер,
			|	КешРеквизитыЗаявки.Номенклатура,
			|	КешРеквизитыЗаявки.СерийныйНомер,
			|	КешРеквизитыЗаявки.Себестоимость,
			|	КешРеквизитыЗаявки.НормативноеВремя
			|ИЗ
			|	КешРеквизитыЗаявки КАК КешРеквизитыЗаявки
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешВыходнихДнейПослеЭтапа КАК КешВыходнихДнейПослеЭтапа
			|		ПО КешРеквизитыЗаявки.ЭтапРаботы = КешВыходнихДнейПослеЭтапа.ЭтапРаботы
			|			И КешРеквизитыЗаявки.ЗаявкаСервисногоЦентра = КешВыходнихДнейПослеЭтапа.ЗаявкаСервисногоЦентра";	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СведенияОВнешнейОбработке

	

Функция СведенияОВнешнейОбработке() Экспорт
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Отчет заявка сервисного центра");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", "1.0.1");    
    ПараметрыРегистрации.Вставить("Информация", "ОтчетЗаявкаСервисногоЦентра'");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "ОтчетДляТоваровПоБезналу", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


#КонецОбласти

