#Область ПрограммныйИнтерфейс

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;                                                                     
	                                                      
	УстановитьПривилегированныйРежим(Истина);	
	
	ОбъектОтчета	= ПолучитьНаборДанных();
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ОбъектОтчета",ОбъектОтчета);
	
 	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ПолучитьЗначениеПараметра(ИмяПараметра)

  ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
   Если ПараметрДанных <> Неопределено Тогда
     ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
     Если ПараметрПользовательскойНастройки <> Неопределено Тогда
       Возврат ПараметрПользовательскойНастройки.Значение;
     Иначе
       Возврат ПараметрДанных.Значение;
     КонецЕсли;
   КонецЕсли;

  Возврат Неопределено;

КонецФункции

Функция ПолучитьНаборДанных()
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаНаборДанных();
	ПериодОтчета = ПолучитьЗначениеПараметра("ПериодОтчета");
	
	Запрос.Текст = ТекстЗапроса;    
	Запрос.УстановитьПараметр("ТекущаяДата", 					ТекущаяДата());
	Запрос.УстановитьПараметр("НачалоПериода", 					ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 					ПериодОтчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ЭтапПереданоНаРемонт", 			ктс_ПредопределенныеЗначенияПовтИсп.ЭтапПереданоНаРемонт());
	Запрос.УстановитьПараметр("ЭтапРемонтОказалсяНевозможным", 	ктс_ПредопределенныеЗначенияПовтИсп.ЭтапПроизведенРемонт());
	Запрос.УстановитьПараметр("ЭтапПроизведенРемонт", 			ктс_ПредопределенныеЗначенияПовтИсп.ЭтапРемонтОказалсяНевозможным());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
ТекстЗапроса = "ВЫБРАТЬ
				|	МАКСИМУМ(ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период) КАК Период,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы КАК ЭтапРаботы
				|ПОМЕСТИТЬ ЗСЦСПоследнимиЭтапами
				|ИЗ
				|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
				|ГДЕ
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период <= &ТекущаяДата
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период >= &НачалоПериода
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Принято)

				|СГРУППИРОВАТЬ ПО
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы

				|ОБЪЕДИНИТЬ ВСЕ

				|ВЫБРАТЬ
				|	МАКСИМУМ(ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период),
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы
				|ИЗ
				|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
				|ГДЕ
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период <= &ТекущаяДата
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период >= &НачалоПериода
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы = &ЭтапПереданоНаРемонт

				|СГРУППИРОВАТЬ ПО
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы

				|ОБЪЕДИНИТЬ ВСЕ

				|ВЫБРАТЬ
				|	МАКСИМУМ(ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период),
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы
				|ИЗ
				|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
				|ГДЕ
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период <= &ТекущаяДата
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период >= &НачалоПериода
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы = &ЭтапРемонтОказалсяНевозможным

				|СГРУППИРОВАТЬ ПО
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы

				|ОБЪЕДИНИТЬ ВСЕ

				|ВЫБРАТЬ
				|	МАКСИМУМ(ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период),
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы
				|ИЗ
				|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
				|ГДЕ
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период <= &ТекущаяДата
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период >= &НачалоПериода
				|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы = &ЭтапПроизведенРемонт

				|СГРУППИРОВАТЬ ПО
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра,
				|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы

				|ИНДЕКСИРОВАТЬ ПО
				|	ЗаявкаСервисногоЦентра,
				|	ЭтапРаботы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗСЦСПоследнимиЭтапами.Период,
				|	ЗСЦСПоследнимиЭтапами.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
				|	ЗСЦСПоследнимиЭтапами.ЭтапРаботы КАК ЭтапРаботы
				|ПОМЕСТИТЬ КешЗСЦСЭтапами
				|ИЗ
				|	ЗСЦСПоследнимиЭтапами КАК ЗСЦСПоследнимиЭтапами
				|ГДЕ
				|	ЗСЦСПоследнимиЭтапами.Период <= &КонецПериода
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ЗаявкаСервисногоЦентра,
				|	ЭтапРаботы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КешЗСЦСЭтапами.Период,
				|	КешЗСЦСЭтапами.ЗаявкаСервисногоЦентра,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра) КАК ЗСЦСПредыдущихЭтапом
				|ПОМЕСТИТЬ КешПриняти
				|ИЗ
				|	КешЗСЦСЭтапами КАК КешЗСЦСЭтапами
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
				|		ПО КешЗСЦСЭтапами.ЗаявкаСервисногоЦентра = ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра
				|			И КешЗСЦСЭтапами.Период >= ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период
				|ГДЕ
				|	КешЗСЦСЭтапами.ЭтапРаботы = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Принято)
				|
				|СГРУППИРОВАТЬ ПО
				|	КешЗСЦСЭтапами.Период,
				|	КешЗСЦСЭтапами.ЗаявкаСервисногоЦентра
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КешПриняти.Период,
				|	КешПриняти.ЗаявкаСервисногоЦентра
				|ПОМЕСТИТЬ КешПринятоПоЗСЦ
				|ИЗ
				|	КешПриняти КАК КешПриняти
				|ГДЕ
				|	КешПриняти.ЗСЦСПредыдущихЭтапом = 1
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ГНАТ_ЗаявкиСервисногоЦентра.Период,
				|	ГНАТ_ЗаявкиСервисногоЦентра.Регистратор КАК ЗаявкаСервисногоЦентра
				|ПОМЕСТИТЬ ЗСЦРекламация
				|ИЗ
				|	РегистрСведений.ГНАТ_ЗаявкиСервисногоЦентра КАК ГНАТ_ЗаявкиСервисногоЦентра
				|ГДЕ
				|	ГНАТ_ЗаявкиСервисногоЦентра.Период >= &НачалоПериода
				|	И ГНАТ_ЗаявкиСервисногоЦентра.Период <= &КонецПериода
				|	И ГНАТ_ЗаявкиСервисногоЦентра.Регистратор.Рекламация = ИСТИНА
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КешПринятоПоЗСЦ.Период
				|ПОМЕСТИТЬ ВТ_Период
				|ИЗ
				|	КешПринятоПоЗСЦ КАК КешПринятоПоЗСЦ
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ЗСЦРекламация.Период
				|ИЗ
				|	ЗСЦРекламация КАК ЗСЦРекламация
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	КешЗСЦСЭтапами.Период
				|ИЗ
				|	КешЗСЦСЭтапами КАК КешЗСЦСЭтапами
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Период.Период,
				|	ЕСТЬNULL(КешПринятоПоЗСЦ.ЗаявкаСервисногоЦентра, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) КАК ОткрытиеЗаявкиСервисногоЦентра,
				|	ЕСТЬNULL(ЗСЦРекламация.ЗаявкаСервисногоЦентра, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) КАК ПовторныйРемонт,
				|	ЕСТЬNULL(КешЗСЦЭтапПереданоНаРемонт.ЗаявкаСервисногоЦентра, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) КАК ПереданныхНаРемонт,
				|	ЕСТЬNULL(КешЗСЦЭтапПроизведенРемонт.ЗаявкаСервисногоЦентра, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) КАК Отремонтированных,
				|	ЕСТЬNULL(КешЗСЦЭтапРемонтОказалсяНевозможным.ЗаявкаСервисногоЦентра, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) КАК БезРемонта,
				|	НАЧАЛОПЕРИОДА(ВТ_Период.Период, ГОД) КАК ПериодГод,
				|	НАЧАЛОПЕРИОДА(ВТ_Период.Период, КВАРТАЛ) КАК ПериодКвартал,
				|	НАЧАЛОПЕРИОДА(ВТ_Период.Период, МЕСЯЦ) КАК ПериодМесяц,
				|	НАЧАЛОПЕРИОДА(ВТ_Период.Период, ДЕНЬ) КАК ПериодДень,
				|	НАЧАЛОПЕРИОДА(ВТ_Период.Период, НЕДЕЛЯ) КАК ПериодНеделя,
				|	ВЫБОР
				|		КОГДА КешПринятоПоЗСЦ.ЗаявкаСервисногоЦентра ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК КоличествоОткрытиеЗСЦ,
				|	ВЫБОР
				|		КОГДА ЗСЦРекламация.ЗаявкаСервисногоЦентра ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК КоличествоПовторныйРемонт,
				|	ВЫБОР
				|		КОГДА КешЗСЦЭтапПереданоНаРемонт.ЗаявкаСервисногоЦентра ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК КоличествоПереданныхНаРемонт,
				|	ВЫБОР
				|		КОГДА КешЗСЦЭтапПроизведенРемонт.ЗаявкаСервисногоЦентра ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК КоличествоОтремонтированных,
				|	ВЫБОР
				|		КОГДА КешЗСЦЭтапРемонтОказалсяНевозможным.ЗаявкаСервисногоЦентра ЕСТЬ NULL 
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК КоличествоБезРемонта
				|ИЗ
				|	ВТ_Период КАК ВТ_Период
				|		ЛЕВОЕ СОЕДИНЕНИЕ КешПринятоПоЗСЦ КАК КешПринятоПоЗСЦ
				|		ПО ВТ_Период.Период = КешПринятоПоЗСЦ.Период
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЗСЦРекламация КАК ЗСЦРекламация
				|		ПО ВТ_Период.Период = ЗСЦРекламация.Период
				|		ЛЕВОЕ СОЕДИНЕНИЕ КешЗСЦСЭтапами КАК КешЗСЦЭтапПереданоНаРемонт
				|		ПО ВТ_Период.Период = КешЗСЦЭтапПереданоНаРемонт.Период
				|			И (КешЗСЦЭтапПереданоНаРемонт.ЭтапРаботы = &ЭтапПереданоНаРемонт)
				|		ЛЕВОЕ СОЕДИНЕНИЕ КешЗСЦСЭтапами КАК КешЗСЦЭтапПроизведенРемонт
				|		ПО ВТ_Период.Период = КешЗСЦЭтапПроизведенРемонт.Период
				|			И (КешЗСЦЭтапПроизведенРемонт.ЭтапРаботы = &ЭтапПроизведенРемонт)
				|		ЛЕВОЕ СОЕДИНЕНИЕ КешЗСЦСЭтапами КАК КешЗСЦЭтапРемонтОказалсяНевозможным
				|		ПО ВТ_Период.Период = КешЗСЦЭтапРемонтОказалсяНевозможным.Период
				|			И (КешЗСЦЭтапРемонтОказалсяНевозможным.ЭтапРаботы = &ЭтапРемонтОказалсяНевозможным)";
Возврат ТекстЗапроса;
КонецФункции
#КонецОбласти 

#Область СведенияОВнешнемОтчете

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.2";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Отчет анализ объемов работы СЦ");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Отчет анализ объемов работы СЦ'");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Отчет анализ объемов работы СЦ", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
#КонецОбласти
