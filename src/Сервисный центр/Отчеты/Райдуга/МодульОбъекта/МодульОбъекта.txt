
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьПараметрыКомпоновщика() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаОкраска", ПолучитьТаблицаОкраска());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицаОкраска()

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаТаблицаОкраска();
	ПериодОтчета    = ПолучитьЗначениеПараметра("ПериодОтчета");
	
	Запрос.УстановитьПараметр("ДатаНачало", ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодОтчета.ДатаОкончания));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());     
	Запрос.УстановитьПараметр("Календарь", Справочники.Календари.ПолучитьСсылку(Новый УникальныйИдентификатор("fbf9ec12-f8bc-11e1-9d4d-001e673c80fc")));  //Производственный календарь

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуНоменклатуры()

Функция ТекстЗапросаТаблицаОкраска()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	               |ПОМЕСТИТЬ КешКалендарьПоДнях
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &Календарь
	               |	И КалендарныеГрафики.ДатаГрафика >= &ДатаНачало
	               |	И НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ) <= &ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаГрафика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период КАК ДатаНачало,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.МесторасположениеФактическое,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ДатаИсполнения КАК ДатаДедлайн,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы
	               |ПОМЕСТИТЬ КешМестоРасположение
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
	               |ГДЕ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период >= &ДатаНачало
	               |	И НАЧАЛОПЕРИОДА(ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период, ДЕНЬ) <= &ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешМестоРасположение.ДатаНачало,
	               |	МИНИМУМ(ЕСТЬNULL(КешМестоРасположениеКопия.ДатаНачало, КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ))) КАК ДатаОкончания,
	               |	КешМестоРасположение.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	КешМестоРасположение.ЭтапРаботы,
	               |	КешМестоРасположение.МесторасположениеФактическое,
	               |	КешМестоРасположение.ДатаДедлайн
	               |ПОМЕСТИТЬ НаростающиеПоЗСЦ
	               |ИЗ
	               |	КешМестоРасположение КАК КешМестоРасположение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешМестоРасположение КАК КешМестоРасположениеКопия
	               |		ПО КешМестоРасположение.ЗаявкаСервисногоЦентра = КешМестоРасположениеКопия.ЗаявкаСервисногоЦентра
	               |			И КешМестоРасположение.ДатаНачало < КешМестоРасположениеКопия.ДатаНачало
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КешМестоРасположение.ДатаНачало,
	               |	КешМестоРасположение.ЗаявкаСервисногоЦентра,
	               |	КешМестоРасположение.МесторасположениеФактическое,
	               |	КешМестоРасположение.ДатаДедлайн,
	               |	КешМестоРасположение.ЭтапРаботы
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(НаростающиеПоЗСЦ.ДатаНачало) КАК ДатаНачало,
	               |	КОНЕЦПЕРИОДА(НаростающиеПоЗСЦ.ДатаНачало, ДЕНЬ) КАК КонецДня,
	               |	НаростающиеПоЗСЦ.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра
	               |ПОМЕСТИТЬ СрезПоследних
	               |ИЗ
	               |	НаростающиеПоЗСЦ КАК НаростающиеПоЗСЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КОНЕЦПЕРИОДА(НаростающиеПоЗСЦ.ДатаНачало, ДЕНЬ),
	               |	НаростающиеПоЗСЦ.ЗаявкаСервисногоЦентра
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СрезПоследних.ДатаНачало,
	               |	НаростающиеПоЗСЦ.ДатаОкончания,
	               |	НаростающиеПоЗСЦ.ДатаДедлайн,
	               |	СрезПоследних.КонецДня,
	               |	СрезПоследних.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	НаростающиеПоЗСЦ.ЭтапРаботы,
	               |	НаростающиеПоЗСЦ.МесторасположениеФактическое
	               |ПОМЕСТИТЬ ЗСЦСрезПоследних
	               |ИЗ
	               |	СрезПоследних КАК СрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаростающиеПоЗСЦ КАК НаростающиеПоЗСЦ
	               |		ПО СрезПоследних.ЗаявкаСервисногоЦентра = НаростающиеПоЗСЦ.ЗаявкаСервисногоЦентра
	               |			И СрезПоследних.ДатаНачало = НаростающиеПоЗСЦ.ДатаНачало
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешКалендарьПоДнях.ДатаГрафика,
	               |	ЗСЦСрезПоследних.ДатаНачало,
	               |	ЗСЦСрезПоследних.КонецДня,
	               |	ЗСЦСрезПоследних.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	ЗСЦСрезПоследних.ЭтапРаботы,
	               |	ЗСЦСрезПоследних.МесторасположениеФактическое,
	               |	ЗСЦСрезПоследних.ДатаОкончания,
	               |	ЗСЦСрезПоследних.ДатаДедлайн,
	               |	ВЫБОР
	               |		КОГДА ЗСЦСрезПоследних.ДатаОкончания < КОНЕЦПЕРИОДА(КешКалендарьПоДнях.ДатаГрафика, ДЕНЬ)
	               |			ТОГДА РАЗНОСТЬДАТ(ЗСЦСрезПоследних.ДатаДедлайн, КОНЕЦПЕРИОДА(КешКалендарьПоДнях.ДатаГрафика, ДЕНЬ), ЧАС)
	               |		ИНАЧЕ РАЗНОСТЬДАТ(ЗСЦСрезПоследних.ДатаДедлайн, КОНЕЦПЕРИОДА(КешКалендарьПоДнях.ДатаГрафика, ДЕНЬ), ЧАС)
	               |	КОНЕЦ КАК Разница
	               |ПОМЕСТИТЬ РасчетРазницыДат
	               |ИЗ
	               |	КешКалендарьПоДнях КАК КешКалендарьПоДнях
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗСЦСрезПоследних КАК ЗСЦСрезПоследних
	               |		ПО (КешКалендарьПоДнях.ДатаГрафика >= НАЧАЛОПЕРИОДА(ЗСЦСрезПоследних.ДатаНачало, ДЕНЬ))
	               |			И (ВЫБОР
	               |				КОГДА ЗСЦСрезПоследних.ДатаОкончания = &ТекущаяДата
	               |					ТОГДА КешКалендарьПоДнях.ДатаГрафика <= НАЧАЛОПЕРИОДА(ЗСЦСрезПоследних.ДатаОкончания, ДЕНЬ)
	               |				ИНАЧЕ КешКалендарьПоДнях.ДатаГрафика < НАЧАЛОПЕРИОДА(ЗСЦСрезПоследних.ДатаОкончания, ДЕНЬ)
	               |			КОНЕЦ)
	               |ГДЕ
	               |	ЗСЦСрезПоследних.ЭтапРаботы <> ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетРазницыДат.ДатаГрафика,
	               |	РасчетРазницыДат.ЗаявкаСервисногоЦентра,
	               |	РасчетРазницыДат.МесторасположениеФактическое,
	               |	ВЫБОР
	               |		КОГДА РасчетРазницыДат.Разница <= -25
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Белые,
	               |	ВЫБОР
	               |		КОГДА РасчетРазницыДат.Разница >= -24
	               |				И РасчетРазницыДат.Разница < 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Желтые,
	               |	ВЫБОР
	               |		КОГДА РасчетРазницыДат.Разница >= 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Красные,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(РасчетРазницыДат.ДатаОкончания, ДЕНЬ) <> РасчетРазницыДат.ДатаГрафика
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоЗСЦ
	               |ПОМЕСТИТЬ КешСтатистика
	               |ИЗ
	               |	РасчетРазницыДат КАК РасчетРазницыДат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ГНАТ_МесторасположениеВСервисеОтветственные.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Инженер,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ГОД) КАК ПериодГод,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ДЕКАДА) КАК ПериодДекада,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ДЕНЬ) КАК ПериодДень,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, КВАРТАЛ) КАК ПериодКвартал,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, МЕСЯЦ) КАК ПериодМесяц,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, НЕДЕЛЯ) КАК ПериодНеделя,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	               |	КешСтатистика.ЗаявкаСервисногоЦентра,
	               |	КешСтатистика.МесторасположениеФактическое,
	               |	КешСтатистика.Белые,
	               |	КешСтатистика.Желтые,
	               |	КешСтатистика.Красные,
	               |	КешСтатистика.КоличествоЗСЦ,
	               |	0 КАК ПроцентЖелтых,
	               |	0 КАК ПроцентКрасных
	               |ИЗ
	               |	КешСтатистика КАК КешСтатистика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГНАТ_МесторасположениеВСервисе.Ответственные КАК ГНАТ_МесторасположениеВСервисеОтветственные
	               |		ПО КешСтатистика.МесторасположениеФактическое = ГНАТ_МесторасположениеВСервисеОтветственные.Ссылка";
			
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаНоменклатуры()

Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
   	Если ПараметрДанных <> Неопределено Тогда
    	ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
   		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
     	Иначе
       		Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПроверитьПараметрыКомпоновщика()

	ПериодОтчета = ПолучитьЗначениеПараметра("ПериодОтчета");
	
	Если ТипЗнч(ПериодОтчета) <> Тип("СтандартныйПериод") Тогда
		ВызватьИсключение НСтр("ru='Для работы отчета необходимо установить период.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли;
	
	Если ПериодОтчета.ДатаНачала = Дата("00010101") Тогда
		ВызватьИсключение НСтр("ru='Необходимо задать дату начала выполнения отчета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли;
	
	Если ПериодОтчета.ДатаОкончания = Дата("00010101") Тогда
		ВызватьИсключение НСтр("ru='Необходимо задать дату окончания выполнения отчета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли;
	
	Если ПериодОтчета.ДатаОкончания < ПериодОтчета.ДатаНачала Тогда
		ВызватьИсключение НСтр("ru='Дата начала выполнения отчета должна быть больше даты окончания выполнения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;

КонецФункции // ПроверитьПараметрыКомпоновщика()
 
#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Райдуга");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("РассылкаОтчетов", Истина);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Райдуга");
	
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Райдуга", "Райдуга", "ОткрытиеФормы", Ложь, "Райдуга");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Процедура СчитатьДокументыНазначений(МассивНазначений)
	
	Макет = ПолучитьМакет("МакетДокументыНазначений");
	
	Для Инд = 1 По Макет.ВысотаТаблицы Цикл
		МассивНазначений.Добавить(Макет.Область(Инд,1).Текст);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


#КонецОбласти 