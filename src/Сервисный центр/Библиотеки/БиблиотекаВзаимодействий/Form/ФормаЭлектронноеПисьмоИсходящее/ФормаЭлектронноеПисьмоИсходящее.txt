
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='Данные документа были изменены пользователем. Сохранить изменения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РезультатЗаписи = ЗаписатьДокументНаСервере();
			Если РезультатЗаписи Тогда
				Оповестить("ОбновитьХодРабот");
				Модифицированность = Ложь;
				ПоказатьОповещениеПользователя(НСтр("ru='Документ проведен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПолучитьНавигационнуюСсылку(СсылкаНаВзаимодействие), Строка(СсылкаНаВзаимодействие), БиблиотекаКартинок.Информация32);
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			Возврат;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПолучателейПисьмаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПолучателейПисьмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияАдреснойКниги", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.АдреснаяКнига",,ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
 
  &НаКлиенте
Процедура ВыполнитьПослеЗакрытияАдреснойКниги(Результат,ПараметрыФормы)  Экспорт 
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ПолучателиПисьма.Очистить();
		СписокПолучателейПисьма = "";
		Для Каждого СтруктураПолучателя Из Результат Цикл
			Если Не ПустаяСтрока(СтруктураПолучателя.Адрес) Тогда
				СписокПолучателейПисьма = СписокПолучателейПисьма + СтруктураПолучателя.Представление + " <" + СтруктураПолучателя.Адрес + ">; ";
				НоваяСтрока = ПолучателиПисьма.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПолучателя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	РезультатЗаписи = ЗаписатьДокументНаСервере();
	Если РезультатЗаписи Тогда
		Модифицированность = Ложь;
		Оповестить("ОбновитьХодРабот");
		ПоказатьОповещениеПользователя(НСтр("ru='Документ проведен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПолучитьНавигационнуюСсылку(СсылкаНаВзаимодействие), Строка(СсылкаНаВзаимодействие), БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	
	УчетнаяЗапись				= Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f5-df88-11e0-8b5f-001517115d85"));
	ОтправительПредставление    = УчетнаяЗапись.Наименование;
		
	НоваяСтрока = ПолучателиПисьма.Добавить();
	НоваяСтрока.Контакт 		= Параметры.ЗаявкаСервисногоЦентра.ЗаказчикРемонта;
	НоваяСтрока.Представление 	= НоваяСтрока.Контакт.Наименование;
	НоваяСтрока.Адрес 			= ПолучтьАдресЭПЗаказчика();
	
	СписокПолучателейПисьма = НоваяСтрока.Представление + " <" + НоваяСтрока.Адрес + ">; ";
	
КонецПроцедуры // ЗапонитьРеквизитыФормы()

&НаСервере
Функция ПолучтьАдресЭПЗаказчика()

	Результат = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Представление КАК Адрес
	                      |ИЗ
	                      |	Справочник.Партнеры.КонтактнаяИнформация
	                      |ГДЕ
	                      |	Тип = &Тип
	                      |	И Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка", Параметры.ЗаявкаСервисногоЦентра.ЗаказчикРемонта);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Адрес) Тогда
			Результат = Выборка.Адрес;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучтьАресЭПЗаказчика() 

&НаСервере
Функция ЗаписатьДокументНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьЗаполнениеРеквизитовФормы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ЭлектронноеПисьмоИсходящее = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	ЗаполнитьРеквизитыДокумента(ЭлектронноеПисьмоИсходящее);
	
	Попытка
		ЭлектронноеПисьмоИсходящее.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ЭлектронноеПисьмоИсходящее, ЭлектронноеПисьмоИсходящее.Предмет);
	
	Попытка
		ЭлектронноеПисьмоИсходящее.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	РезультатЗаписи = ЗаписатьВзаимодействиеВРегистр(ЭлектронноеПисьмоИсходящее.Ссылка);
	Если Не РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаНаВзаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // ЗаписатьДокументНаСервере()

&НаСервере
Функция ПроверитьЗаполнениеРеквизитовФормы()

	РезультатПроверки = Истина; // Сначала считаем что все ок.
	
	Если Не ЗначениеЗаполнено(Важность) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Важность"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Важность");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Ответственный"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Ответственный");
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Тема"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Тема");
	КонецЕсли;
	
	Если ПустаяСтрока(СписокПолучателейПисьма) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Кому"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СписокПолучателейПисьма");
	КонецЕсли;
			
	Возврат РезультатПроверки;

КонецФункции // ПроверитьЗаполнениеРеквизитовФормы()

&НаСервере
Процедура ЗаполнитьРеквизитыДокумента(ДокументВстреча)

	ДокументВстреча.Дата 						= ТекущаяДатаСеанса();	
	ДокументВстреча.Автор 						= ПараметрыСеанса.ТекущийПользователь;
	ДокументВстреча.Важность 					= Важность;
	ДокументВстреча.Ответственный 				= Ответственный;
	ДокументВстреча.Тема 						= Тема;
	ДокументВстреча.Комментарий 				= Комментарий; 
	ДокументВстреча.Текст 						= Текст;
	ДокументВстреча.ОтправительПредставление 	= ОтправительПредставление; 
	ДокументВстреча.СписокПолучателейПисьма		= СписокПолучателейПисьма;
	ДокументВстреча.УчетнаяЗапись				= УчетнаяЗапись;
	
	Для каждого СтрокаТаблицы Из ПолучателиПисьма Цикл
	    НоваяСтрока = ДокументВстреча.ПолучателиПисьма.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

&НаСервере
Функция ЗаписатьВзаимодействиеВРегистр(ДокументВзаимодействие)

	Период = ТекущаяДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ГНАТ_ВзаимодействияПоЗаявкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Заявка.Установить(Параметры.ЗаявкаСервисногоЦентра);
 	НаборЗаписей.Отбор.Взаимодействие.Установить(ДокументВзаимодействие);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.Заявка 			= Параметры.ЗаявкаСервисногоЦентра;
	Запись.Взаимодействие 	= ДокументВзаимодействие;
	Запись.Количество		= 1;
	
	Попытка
		НаборЗаписей.Записать();    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьВзаимодействиеВРегистр()

#КонецОбласти