

#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьРеквизитыФормы();
	
	ЗаполнитьТаблицуАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='Данные документа были изменены пользователем. Сохранить изменения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РезультатЗаписи = ЗаписатьДокументНаСервере();
			Если РезультатЗаписи Тогда
				Оповестить("ОбновитьХодРабот");
				Модифицированность = Ложь;
				ПоказатьОповещениеПользователя(НСтр("ru='Документ проведен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПолучитьНавигационнуюСсылку(СсылкаНаВзаимодействие), Строка(СсылкаНаВзаимодействие), БиблиотекаКартинок.Информация32);
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			Возврат;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьВТранслитеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекстСообщенияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Адресаты

&НаКлиенте
Процедура АдресатыКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		 = Элементы.Адресаты.ТекущиеДанные;
	ВзаимодействияКлиент.ВыбратьКонтакт(Неопределено, ТекущиеДанные.КакСвязаться, ТекущиеДанные.ПредставлениеКонтакта, ТекущиеДанные.Контакт, Ложь, Ложь, Истина);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	РезультатЗаписи = ЗаписатьДокументНаСервере();
	Если РезультатЗаписи Тогда
		Модифицированность = Ложь;
		Оповестить("ОбновитьХодРабот");
		ПоказатьОповещениеПользователя(НСтр("ru='Документ проведен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПолучитьНавигационнуюСсылку(СсылкаНаВзаимодействие), Строка(СсылкаНаВзаимодействие), БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	Модифицированность  = Истина;
КонецПроцедуры // ЗапонитьРеквизитыФормы()

&НаСервере
Процедура ЗаполнитьТаблицуАдресатов()

	Партнер 		= Параметры.ЗаявкаСервисногоЦентра.ЗаказчикРемонта;
	НомерТелефона   = Параметры.ЗаявкаСервисногоЦентра.НомерТелефона;
	
	Если Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 		= Адресаты.Добавить();
	НоваяСтрока.Контакт = Партнер;
	ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(НоваяСтрока.Контакт, НоваяСтрока.ПредставлениеКонтакта, НоваяСтрока.КакСвязаться);
	НоваяСтрока.КакСвязаться = НомерТелефона;

КонецПроцедуры // ЗаполнитьКонтактнуюИнфорацию()

&НаСервере
Функция ЗаписатьДокументНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьЗаполнениеРеквизитовФормы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	СообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
	ЗаполнитьРеквизитыДокумента(СообщениеSMS);
	
	Попытка
		СообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(СообщениеSMS, Неопределено);
	
	Попытка
		СообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
		
	РезультатЗаписи = ЗаписатьВзаимодействиеВРегистр(СообщениеSMS.Ссылка);
	Если Не РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаНаВзаимодействие = СообщениеSMS.Ссылка;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // ЗаписатьДокументНаСервере()

&НаСервере
Функция ПроверитьЗаполнениеРеквизитовФормы()

	РезультатПроверки = Истина; // Сначала считаем что все ок.
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Ответственный"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Ответственный");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Текст сообщения"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТекстСообщения");
	КонецЕсли;
	
	Если Адресаты.Количество() = 0 Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Необходимо указать учатсников встречи.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Адресаты");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Адресаты Цикл
	
		Если ПустаяСтрока(СтрокаТаблицы.ПредставлениеКонтакта) Тогда
			РезультатПроверки = Ложь;
			ТекстСообщения	  = НСтр("ru='Необходимо задать представление контакта.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИндексСтроки	  = Адресаты.Индекс(СтрокаТаблицы);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Адресаты[" + ИндексСтроки + "].ПредставлениеКонтакта");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			РезультатПроверки = Ложь;
			ТекстСообщения	  = НСтр("ru='Необходимо задать контакт встречи.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИндексСтроки	  = Адресаты.Индекс(СтрокаТаблицы);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Адресаты[" + ИндексСтроки + "].Контакт");
		КонецЕсли;
	
	КонецЦикла; 
		
	Возврат РезультатПроверки;

КонецФункции // ПроверитьЗаполнениеРеквизитовФормы()

&НаСервере
Процедура ЗаполнитьРеквизитыДокумента(ДокументВстреча)

	ДокументВстреча.Дата 						= ТекущаяДатаСеанса();
	
	ДокументВстреча.Автор 						= ПараметрыСеанса.ТекущийПользователь;
	ДокументВстреча.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ДокументВстреча.Ответственный 				= Ответственный;
	ДокументВстреча.Комментарий 				= Комментарий;
	ДокументВстреча.ТекстСообщения 				= ТекстСообщения;
	ДокументВстреча.Состояние 					= Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
		
	Для каждого СтрокаТаблицы Из Адресаты Цикл
	    НоваяСтрока = ДокументВстреча.Адресаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.НомерДляОтправки 		= "+38" + Прав(СокрЛП(НоваяСтрока.КакСвязаться), 10);
		НоваяСтрока.СостояниеСообщения 		= Перечисления.СостоянияСообщенияSMS.Исходящее;
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

&НаСервере
Функция ЗаписатьВзаимодействиеВРегистр(ДокументВзаимодействие)

	Период = ТекущаяДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ГНАТ_ВзаимодействияПоЗаявкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Заявка.Установить(Параметры.ЗаявкаСервисногоЦентра);
 	НаборЗаписей.Отбор.Взаимодействие.Установить(ДокументВзаимодействие);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.Заявка 			= Параметры.ЗаявкаСервисногоЦентра;
	Запись.Взаимодействие 	= ДокументВзаимодействие;
	Запись.Количество		= 1;
	
	Попытка
		НаборЗаписей.Записать();    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьВзаимодействиеВРегистр()

#КонецОбласти