
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьРеквизитыФормы();
	ЗаполнитьТаблицуУчастников();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='Данные документа были изменены пользователем. Сохранить изменения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РезультатЗаписи = ЗаписатьДокументНаСервере();
			Если РезультатЗаписи Тогда
				Оповестить("ОбновитьХодРабот");
				Модифицированность = Ложь;
				ПоказатьОповещениеПользователя(НСтр("ru='Документ проведен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПолучитьНавигационнуюСсылку(СсылкаНаВзаимодействие), Строка(СсылкаНаВзаимодействие), БиблиотекаКартинок.Информация32);
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			Возврат;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	Модифицированность 	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассмотреноПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияВстречиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбранноеВремя = ВзаимодействияКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ВремяНачала, 1800);

	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВремяНачала = ВыбранноеВремя;

	ВремяНачалаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбранноеВремя = ВзаимодействияКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ВремяОкончание, 1800);

	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВремяОкончание = ВыбранноеВремя;

	ВремяОкончанияПриИзменении(Элемент);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Участники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКонтактПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(ТекущиеДанные.Контакт, ТекущиеДанные.ПредставлениеКонтакта, ТекущиеДанные.КакСвязаться);
		Модифицированность = Истина;
	КонецЕсли;																					 
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные 		 = Элементы.Участники.ТекущиеДанные;
	ВзаимодействияКлиент.ВыбратьКонтакт(Неопределено, ТекущиеДанные.КакСвязаться, ТекущиеДанные.ПредставлениеКонтакта, ТекущиеДанные.Контакт, Ложь, Ложь, Истина);				
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	РезультатЗаписи = ЗаписатьДокументНаСервере();
	Если РезультатЗаписи Тогда
		Модифицированность = Ложь;
		Оповестить("ОбновитьХодРабот");
		ПоказатьОповещениеПользователя(НСтр("ru='Документ проведен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПолучитьНавигационнуюСсылку(СсылкаНаВзаимодействие), Строка(СсылкаНаВзаимодействие), БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаписатьДокументНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьЗаполнениеРеквизитовФормы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ДокументВстреча = Документы.Встреча.СоздатьДокумент();
	ЗаполнитьРеквизитыДокумента(ДокументВстреча);
	
	Попытка
		ДокументВстреча.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ДокументВстреча, ДокументВстреча.Предмет);
	
	Попытка
		ДокументВстреча.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	РезультатЗаписи = ЗаписатьВзаимодействиеВРегистр(ДокументВстреча.Ссылка);
	Если Не РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	СсылкаНаВзаимодействие = ДокументВстреча.Ссылка;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // ЗаписатьДокументНаСервере()

&НаСервере
Процедура ЗаполнитьРеквизитыДокумента(ДокументВстреча)

	ДокументВстреча.Дата 						= ТекущаяДатаСеанса();	
	ДокументВстреча.Автор 						= ПараметрыСеанса.ТекущийПользователь;
	ДокументВстреча.Важность 					= Важность;
	ДокументВстреча.ДатаНачала 					= ДатаНачала + (ВремяНачала - НачалоДня(ВремяНачала));
	ДокументВстреча.ДатаОкончания 				= ДатаОкончания + (ВремяОкончание - НачалоДня(ВремяОкончание));
	ДокументВстреча.МестоПроведенияВстречи 		= МестоПроведенияВстречи;
	ДокументВстреча.Описание 					= Описание;
	ДокументВстреча.Ответственный 				= Ответственный;
	ДокументВстреча.Рассмотрено 				= Рассмотрено;
	ДокументВстреча.РассмотретьПосле 			= РассмотретьПосле;
	ДокументВстреча.Тема 						= Тема;
	ДокументВстреча.Комментарий 				= Комментарий;
		
	Для каждого СтрокаТаблицы Из Участники Цикл
	    НоваяСтрока = ДокументВстреча.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

&НаСервере
Функция ЗаписатьВзаимодействиеВРегистр(ДокументВзаимодействие)

	Период = ТекущаяДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ГНАТ_ВзаимодействияПоЗаявкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Заявка.Установить(Параметры.ЗаявкаСервисногоЦентра);
 	НаборЗаписей.Отбор.Взаимодействие.Установить(ДокументВзаимодействие);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.Заявка 			= Параметры.ЗаявкаСервисногоЦентра;
	Запись.Взаимодействие 	= ДокументВзаимодействие;
	Запись.Количество		= 1;
	
	Попытка
		НаборЗаписей.Записать();    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьВзаимодействиеВРегистр()


&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	Важность 		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	ДатаСеанса		= ТекущаяДатаСеанса();
	
	ДатаНачала 		= НачалоДня(ДатаСеанса);
	ДатаОкончания   = НачалоДня(ДатаСеанса + 3600);
	
	ВремяНачала		= ДатаСеанса;
	ВремяОкончание	= ДатаСеанса + 3600;
	
КонецПроцедуры // ЗапонитьРеквизитыФормы()
 

&НаСервере
Процедура ЗаполнитьТаблицуУчастников()

	Партнер = Параметры.ЗаявкаСервисногоЦентра.ЗаказчикРемонта;
	
	Если Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 		= Участники.Добавить();
	НоваяСтрока.Контакт = Партнер;
	ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(НоваяСтрока.Контакт, НоваяСтрока.ПредставлениеКонтакта, НоваяСтрока.КакСвязаться);

КонецПроцедуры // ЗаполнитьКонтактнуюИнфорацию()



&НаСервере
Функция ПроверитьЗаполнениеРеквизитовФормы()

	РезультатПроверки = Истина; // Сначала считаем что все ок.
	
	Если Не ЗначениеЗаполнено(Важность) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Важность"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Важность");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Ответственный"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Ответственный");
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Тема"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Тема");
	КонецЕсли;
	
	Если ПустаяСтрока(Описание) Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Поле ""Описание"" не заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Описание");
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Необходимо указать учатсников встречи.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Участники");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Участники Цикл
	
		Если ПустаяСтрока(СтрокаТаблицы.ПредставлениеКонтакта) Тогда
			РезультатПроверки = Ложь;
			ТекстСообщения	  = НСтр("ru='Необходимо задать представление контакта.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИндексСтроки	  = Участники.Индекс(СтрокаТаблицы);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Участники[" + ИндексСтроки + "].ПредставлениеКонтакта");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			РезультатПроверки = Ложь;
			ТекстСообщения	  = НСтр("ru='Необходимо задать контакт встречи.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ИндексСтроки	  = Участники.Индекс(СтрокаТаблицы);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Участники[" + ИндексСтроки + "].Контакт");
		КонецЕсли;
	
	КонецЦикла; 
	
	ПолнаяДатаНачало 	= ДатаНачала + (ВремяНачала - НачалоДня(ВремяНачала));
	ПолнаяДатаОкончание = ДатаОкончания + (ВремяОкончание - НачалоДня(ВремяОкончание));
	
	Если ПолнаяДатаНачало > ПолнаяДатаОкончание Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения	  = НСтр("ru='Дата начало встречи должна быть меньшой даты окончания встречи.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверитьЗаполнениеРеквизитовФормы()


&НаКлиенте
Функция ВыделитьВремя(Дата)
	Возврат Час(Дата) * 3600 + Минута(Дата) * 60;
КонецФункции

#КонецОбласти