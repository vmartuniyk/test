
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапонитьРеквизитыФормы();
	ЗаполнитьТаблицуУчастников();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос(НСтр("ru='Данные документа были изменены пользователем. Сохранить изменения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РезультатЗаписи = ЗаписатьДокументНаСервере();
			Если РезультатЗаписи Тогда
				Оповестить("ОбновитьХодРабот");
				Модифицированность = Ложь;
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
			Возврат;
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассмотреноПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияВстречиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Участники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	РезультатЗаписи = ЗаписатьДокументНаСервере();
	Если РезультатЗаписи Тогда
		Оповестить("ОбновитьХодРабот");
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаписатьДокументНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ДокументВстреча = Документы.Встреча.СоздатьДокумент();
	ЗаполнитьРеквизитыДокумента(ДокументВстреча);
	
	Попытка
		ДокументВстреча.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	РезультатЗаписи = ЗаписатьВзаимодействиеВРегистр(ДокументВстреча.Ссылка);
	Если Не РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // ЗаписатьДокументНаСервере()

&НаСервере
Процедура ЗаполнитьРеквизитыДокумента(ДокументВстреча)

	ДокументВстреча.Дата 						= ТекущаяДатаСеанса();	
	ДокументВстреча.Автор 						= ПараметрыСеанса.ТекущийПользователь;
	ДокументВстреча.Важность 					= Важность;
	ДокументВстреча.ДатаНачала 					= ДатаНачала;
	ДокументВстреча.ДатаОкончания 				= ДатаОкончания;
	ДокументВстреча.МестоПроведенияВстречи 		= МестоПроведенияВстречи;
	ДокументВстреча.Описание 					= Описание;
	ДокументВстреча.Ответственный 				= Ответственный;
	ДокументВстреча.Рассмотрено 				= Рассмотрено;
	ДокументВстреча.РассмотретьПосле 			= РассмотретьПосле;
	ДокументВстреча.Тема 						= Тема;
	ДокументВстреча.Комментарий 				= Комментарий;
	
	Для каждого СтрокаТаблицы Из Участники Цикл
	    НоваяСтрока = ДокументВстреча.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

&НаСервере
Функция ЗаписатьВзаимодействиеВРегистр(ДокументВзаимодействие)

	Период = ТекущаяДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ГНАТ_ВзаимодействияПоЗаявкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Заявка.Установить(Параметры.ЗаявкаСервисногоЦентра);
 	НаборЗаписей.Отбор.Взаимодействие.Установить(ДокументВзаимодействие);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.Заявка 			= Параметры.ЗаявкаСервисногоЦентра;
	Запись.Взаимодействие 	= ДокументВзаимодействие;
	Запись.Количество		= 1;
	
	Попытка
		НаборЗаписей.Записать();    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьВзаимодействиеВРегистр()


&НаСервере
Процедура ЗапонитьРеквизитыФормы()

	Важность 		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	ДатаСеанса		= ТекущаяДатаСеанса();
	
	ДатаНачала 		= НачалоДня(ДатаСеанса);
	ДатаОкончания   = НачалоДня(ДатаСеанса + 3600);
	
	ВремяНачала		= ДатаСеанса;
	ВремяОкончание	= ДатаСеанса + 3600;

КонецПроцедуры // ЗапонитьРеквизитыФормы()
 

&НаСервере
Процедура ЗаполнитьТаблицуУчастников()

	Партнер = Параметры.ЗаявкаСервисногоЦентра.ЗаказчикРемонта;
	
	Если Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 						= Участники.Добавить();
	НоваяСтрока.Контакт 				= Партнер;
	НоваяСтрока.ПредставлениеКонтакта   = Партнер.НаименованиеПолное;
	НоваяСтрока.КакСвязаться			= git_МодульДоставкиСервер.ПолучитьАдресПартнера(Партнер);

КонецПроцедуры // ЗаполнитьКонтактнуюИнфорацию()

#КонецОбласти