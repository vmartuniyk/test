
#Область ИнтерфейсАвтоматическихТестов


Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьВалидностьЗапроса");
	СписокТестов.Добавить(ПараметрыТеста);

	Возврат СписокТестов;
	
КонецФункции

Функция Тест_ПроверитьВалидностьЗапроса() Экспорт
	СообщениеОбОшибке	= НСтр("ru = '#5265, Не удалось виполнить запрос Тест_ПроверитьВалидностьЗапроса!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстЗапроса = ТекстЗапросаЗаявокСЦДляРассылкиПоУценки();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"), СообщениеОбОшибке);
	ЮнитТест.ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, СообщениеОбОшибке);  
КонецФункции


#КонецОбласти

#Область ПрограммныйИнтерфейс
// Рассылка листов по задаче http://r.ktc-ua.com/issues/5265
//
// Параметры:
// НЕТ
Процедура ОтправитьПисьмоПродактам()Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	УИ = Новый УникальныйИдентификатор("2cdef421-31b5-11e4-80d4-001e676b0175");
	НачалоДня  = НачалоДня(ТекущаяДата()-1);
	ТекущаяДата = ТекущаяДата();
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаявокСЦДляРассылкиПоУценки();
	Запрос.УстановитьПараметр("НачалоДня",НачалоДня);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УИ));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресЭлектроннойПочты = Выборка.ЭлАдрес;
		АдресЭлектроннойПочты = НормализироватьАдресЭлектроннойПочты(АдресЭлектроннойПочты);
		Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
			Продолжить;		
		КонецЕсли;		
		
		Кому = Новый Массив;		
		Кому.Добавить(Новый Структура("Адрес, Представление", АдресЭлектроннойПочты, ""));
		Кому.Добавить(Новый Структура("Адрес, Представление", "postavka@ktc.rovno.ua", ""));
		ТемаПисьма = "Уцінка по заявці сервисного центру  №"+Выборка.Номер+". Вид номенклатури: "+Строка(Выборка.ВидНоменклатуры)+". Продакт-менеджер: "+Строка(Выборка.Родитель)+".";
		ТекстПисьма = ПолучитьНавигационнуюСсылку(Выборка.ЗаявкаСервисногоЦентра)+"<br>";
		ТекстПисьма = ТекстПисьма +"По номенклатурі: "+ Строка(Выборка.Номенклатура)+" (Код номенклатури: "+Строка(Выборка.КодНоменклатуры)+")"; 			
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ТекстЗапросаЗаявокСЦДляРассылкиПоУценки()
	ТекстЗапроса = "ВЫБРАТЬ
					|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра
					|ПОМЕСТИТЬ ВсеНеВыданыеЗаявки
					|ИЗ
					|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(&ТекущаяДата, Период >= &НачалоДня) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
					|ГДЕ
					|	НЕ ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)

					|ИНДЕКСИРОВАТЬ ПО
					|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра
					|;
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МесторасположениеФактическое КАК МесторасположениеФактическое
					|ПОМЕСТИТЬ МестаРасположенияНаУценку
					|ИЗ
					|	РегистрСведений.ГНАТ_МестоРасположенияНаУценку
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	МесторасположениеФактическое
					|;
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВсеНеВыданыеЗаявки.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
					|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы КАК ЭтапРаботы,
					|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра.Номенклатура КАК Номенклатура,
					|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период
					|ПОМЕСТИТЬ ВсеЗаявкиСЭтапамНаУценку
					|ИЗ
					|	ВсеНеВыданыеЗаявки КАК ВсеНеВыданыеЗаявки
					|	
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
					|ПО ВсеНеВыданыеЗаявки.ЗаявкаСервисногоЦентра = ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра
					|
					|ГДЕ
					|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период >= &НачалоДня
					|	И ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.МесторасположениеФактическое В
					|			(ВЫБРАТЬ МесторасположениеФактическое ИЗ МестаРасположенияНаУценку )
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	ЗаявкаСервисногоЦентра,
					|	ЭтапРаботы
					|;
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра,
					|	МАКСИМУМ(ВсеЗаявкиСЭтапамНаУценку.Период) КАК Период,
					|	ВсеЗаявкиСЭтапамНаУценку.Номенклатура
					|ПОМЕСТИТЬ СрезПоследнихПоЭтапуЗСЦ
					|ИЗ
					|	ВсеЗаявкиСЭтапамНаУценку КАК ВсеЗаявкиСЭтапамНаУценку
					|
					|СГРУППИРОВАТЬ ПО
					|	ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра,
					|	ВсеЗаявкиСЭтапамНаУценку.Номенклатура
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	ЗаявкаСервисногоЦентра,
					|	Период
					|;
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СрезПоследнихПоЭтапуЗСЦ.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
					|	СрезПоследнихПоЭтапуЗСЦ.Номенклатура КАК Номенклатура,
					|	ВсеЗаявкиСЭтапамНаУценку.ЭтапРаботы КАК ЭтапРаботы
					|ПОМЕСТИТЬ ВсеЗаявкиНаУценку
					|ИЗ
					|	СрезПоследнихПоЭтапуЗСЦ КАК СрезПоследнихПоЭтапуЗСЦ
					|		
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеЗаявкиСЭтапамНаУценку КАК ВсеЗаявкиСЭтапамНаУценку
					|ПО СрезПоследнихПоЭтапуЗСЦ.ЗаявкаСервисногоЦентра = ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра
					|	И СрезПоследнихПоЭтапуЗСЦ.Номенклатура = ВсеЗаявкиСЭтапамНаУценку.Номенклатура
					|	И СрезПоследнихПоЭтапуЗСЦ.Период = ВсеЗаявкиСЭтапамНаУценку.Период
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	ЗаявкаСервисногоЦентра	
					|;
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ДополнительныеСведения.Значение КАК ЭлАдрес,
					|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.ВидыНоменклатуры) КАК Объект
					|ПОМЕСТИТЬ ДопСведения
					|ИЗ
					|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|ГДЕ
					|	ДополнительныеСведения.Свойство = &Свойство
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Объект
					|; 
					////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВсеЗаявкиНаУценку.ЗаявкаСервисногоЦентра.Номер КАК Номер,
					|	ВсеЗаявкиНаУценку.ЗаявкаСервисногоЦентра,
					|	ВсеЗаявкиНаУценку.ЭтапРаботы,
					|	ВсеЗаявкиНаУценку.Номенклатура,
					|	ВсеЗаявкиНаУценку.Номенклатура.Код КАК КодНоменклатуры,
					|	ВсеЗаявкиНаУценку.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
					|	ВсеЗаявкиНаУценку.Номенклатура.ВидНоменклатуры.Родитель КАК Родитель,
					|	ЕСТЬNULL(ДопСведения.ЭлАдрес, """") КАК ЭлАдрес
					|ИЗ
					|	ВсеЗаявкиНаУценку КАК ВсеЗаявкиНаУценку
					|
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы.СледующиеЭтапы КАК ГНАТ_ЭтапыРаботыСледующиеЭтапы
					|ПО ВсеЗаявкиНаУценку.ЭтапРаботы = ГНАТ_ЭтапыРаботыСледующиеЭтапы.Ссылка
					|	И (ГНАТ_ЭтапыРаботыСледующиеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано))
					|
					|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
					|ПО ВсеЗаявкиНаУценку.Номенклатура.ВидНоменклатуры = ДопСведения.Объект";
	Возврат ТекстЗапроса;
КонецФункции

Функция НормализироватьАдресЭлектроннойПочты(знач ПроверяемыйАдрес)
		
	Результат  		 = РазобратьСтрокуСПочтовымиАдресами(ПроверяемыйАдрес);	
	КоличествоСтрок  = Результат.ВГраница();
	АдресРезультат	 = "";	
	
	Если Результат 		 = Неопределено 	Тогда Возврат Неопределено; КонецЕсли;
	Если КоличествоСтрок = -1 				Тогда Возврат Неопределено; КонецЕсли;

	
	Для Индекс = 0 По КоличествоСтрок Цикл
		АдресДляПроверки = Результат[Индекс].Адрес;
		Если СтрЧислоВхождений(АдресДляПроверки,"@") <> 1 Тогда
			Продолжить; 
		КонецЕсли;
		ДоменныйАдрес = Прав(АдресДляПроверки, СтрДлина(АдресДляПроверки) - Найти(АдресДляПроверки,"@"));
		Если СтрДлина(ДоменныйАдрес) > 0 Тогда
			Если СтрЧислоВхождений(ДоменныйАдрес,".") < 1 ИЛИ Лев(ДоменныйАдрес,1) = "." ИЛИ Прав(ДоменныйАдрес,1) = "." Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Возврат АдресДляПроверки;
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаАдресов)
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	СимволыРазделители = ";,";
	
	Индекс = 1;               
	Накопитель = "";          
	                          
	ПолноеИмяАдресата = "";   
	ПочтовыйАдрес = "";      
	СтадияРазбора = 1; 
		
	Пока Индекс <= СтрДлина(СтрокаАдресов) Цикл
		
		Символ = Сред(СтрокаАдресов, Индекс, 1);
		
		Если      Символ = " " Тогда
			Индекс = ? ((ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1) > Индекс,
			             ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1,
			             Индекс);
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
				СтадияРазбора = 3;
			КонецЕсли;
			Накопитель = "";
		ИначеЕсли Символ = "@" Тогда
			Если      СтадияРазбора = 1 Тогда
				СтадияРазбора = 2;
				
				Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
					Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
				
				Накопитель = Накопитель + Символ;
			ИначеЕсли СтадияРазбора = 2 Тогда
				Возврат Неопределено;
			ИначеЕсли СтадияРазбора = 3 Тогда
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли Найти(СимволыРазделители, Символ) > 0 Тогда
			
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
			КонецЕсли;
			
			СтадияРазбора = 1;
			
			Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
				Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
			КонецЕсли;
			
			ПочтовыйАдрес = "";
			ПолноеИмяАдресата = "";
			Накопитель = "";
		Иначе
			Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
				Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если      СтадияРазбора = 1 Тогда
		ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
	ИначеЕсли СтадияРазбора = 2 Тогда
		ПочтовыйАдрес = Накопитель;
	КонецЕсли;

	Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
		Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

Функция ПропуститьПробелы(знач Строка, знач ТекущийИндекс, знач ПропускаемыйСимвол)	
	Результат = ТекущийИндекс;	
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	Возврат ТекущийИндекс;	
КонецФункции


#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.4";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рассылка на почту по уценке ЗСЦ");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рассылка на почту по уценке ЗСЦ [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Рассылка на почту по уценке ЗСЦ [" + Версия + "]", "ОтправитьПисьмоПродактам();", "ВызовСерверногоМетода");
		
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 