
#Область ИнтерфейсАвтоматическихТестов


Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверитьВалидностьЗапроса");
	СписокТестов.Добавить(ПараметрыТеста);

	Возврат СписокТестов;
	
КонецФункции

Функция Тест_ПроверитьВалидностьЗапроса() Экспорт
	СообщениеОбОшибке	= НСтр("ru = '#5265, Не удалось виполнить запрос Тест_ПроверитьВалидностьЗапроса!",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстЗапроса = ТекстЗапросаЗаявокСЦДляРассылкиПоУценки();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"), СообщениеОбОшибке);
	ЮнитТест.ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, СообщениеОбОшибке);  
КонецФункции


#КонецОбласти

#Область ПрограммныйИнтерфейс
// Рассылка листов по задаче http://r.ktc-ua.com/issues/5265
//
// Параметры:
// НЕТ
Процедура ОтправитьПисьмоПродактам()Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	УИ = Новый УникальныйИдентификатор("2cdef421-31b5-11e4-80d4-001e676b0175");
	ТекущаяДата = ТекущаяДата();
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаявокСЦДляРассылкиПоУценки();
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УИ));
	ВыборкаПродактМенеджер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Кому = Новый Массив;		
	Кому.Добавить(Новый Структура("Адрес, Представление", "postavka@ktc.rovno.ua", ""));
	//Кому.Добавить(Новый Структура("Адрес, Представление", "odenysuyk@ktc.rovno.ua", ""));
	ТемаПисьма = "Уцінка по заявці сервисного центру  на "+ТекущаяДата;
	
	Тело = "";
	
	Пока ВыборкаПродактМенеджер.Следующий() Цикл
		Тело =  Тело+ "<P><B>Продакт-менеджер: "+ Строка(ВыборкаПродактМенеджер.Родитель)+"</B>"+						
							"<table border=""1"" cellspacing=""0"" width=""95%"" style=""font-family:ms shell dlg font-size:8""> " +
							"<tr bgcolor=""#00CCFF"">" +
								"<td>Номер ЗСЦ</td>" +
								"<td>Посилання на ЗСЦ</td>" +
								"<td>Номенклатура</td>" +
								"<td>Код товару</td>" +
							"</tr>";
		ВиборкаЗСЦ = ВыборкаПродактМенеджер.Выбрать();
		Пока ВиборкаЗСЦ.Следующий() Цикл
			Тело = Тело +
						"<tr>"
							"<td>" + ВиборкаЗСЦ.Номер 						+ "</td>" +
							"<td>" + ПолучитьНавигационнуюСсылку(ВиборкаЗСЦ.ЗаявкаСервисногоЦентра)	+ "</td>" +
							"<td>" + ВиборкаЗСЦ.Номенклатура 			+ "</td>" +
							"<td>" + ВиборкаЗСЦ.КодНоменклатуры 			+ "</td>" +
						"</tr>";

		КонецЦикла;
		Тело = Тело + "</table>";
					
	КонецЦикла;
	Если НЕ ПустаяСтрока(Тело) Тогда
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(ТемаПисьма, Тело, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ТекстЗапросаЗаявокСЦДляРассылкиПоУценки()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Партнеры.Партнер
	               |ПОМЕСТИТЬ КешОплатаСразу
	               |ИЗ
	               |	РегистрСведений.Модуль_ДоступныеСклады КАК Партнеры
	               |ГДЕ
	               |	Партнеры.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_ПредопределеннаяНоменклатура.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ПредопределеннаяНоменклатура
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ПредопределеннаяНоменклатура КАК ГНАТ_ПредопределеннаяНоменклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра
	               |ПОМЕСТИТЬ ВсеНеВыданыеЗаявки
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(
	               |			&ТекущаяДата,
	               |			ЗаявкаСервисногоЦентра.ЗаказчикРемонта В
	               |					(ВЫБРАТЬ
	               |						КешОплатаСразу.Партнер
	               |					ИЗ
	               |						КешОплатаСразу КАК КешОплатаСразу)
	               |				И НЕ ЗаявкаСервисногоЦентра.Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ПредопределеннаяНоменклатура.Номенклатура
	               |						ИЗ
	               |							ПредопределеннаяНоменклатура КАК ПредопределеннаяНоменклатура)) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
	               |ГДЕ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы <> ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_МестоРасположенияНаУценку.МесторасположениеФактическое КАК МесторасположениеФактическое
	               |ПОМЕСТИТЬ МестаРасположенияНаУценку
	               |ИЗ
	               |	РегистрСведений.ГНАТ_МестоРасположенияНаУценку КАК ГНАТ_МестоРасположенияНаУценку
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	МесторасположениеФактическое
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеНеВыданыеЗаявки.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы КАК ЭтапРаботы,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра.Номенклатура КАК Номенклатура,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период
	               |ПОМЕСТИТЬ ВсеЗаявкиСЭтапамНаУценку
	               |ИЗ
	               |	ВсеНеВыданыеЗаявки КАК ВсеНеВыданыеЗаявки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
	               |		ПО ВсеНеВыданыеЗаявки.ЗаявкаСервисногоЦентра = ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра
	               |ГДЕ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.МесторасположениеФактическое В
	               |			(ВЫБРАТЬ
	               |				МестаРасположенияНаУценку.МесторасположениеФактическое
	               |			ИЗ
	               |				МестаРасположенияНаУценку)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра,
	               |	ЭтапРаботы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра,
	               |	МАКСИМУМ(ВсеЗаявкиСЭтапамНаУценку.Период) КАК Период,
	               |	ВсеЗаявкиСЭтапамНаУценку.Номенклатура
	               |ПОМЕСТИТЬ СрезПоследнихПоЭтапуЗСЦ
	               |ИЗ
	               |	ВсеЗаявкиСЭтапамНаУценку КАК ВсеЗаявкиСЭтапамНаУценку
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра,
	               |	ВсеЗаявкиСЭтапамНаУценку.Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СрезПоследнихПоЭтапуЗСЦ.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	СрезПоследнихПоЭтапуЗСЦ.Номенклатура КАК Номенклатура,
	               |	ВсеЗаявкиСЭтапамНаУценку.ЭтапРаботы КАК ЭтапРаботы
	               |ПОМЕСТИТЬ ВсеЗаявкиНаУценку
	               |ИЗ
	               |	СрезПоследнихПоЭтапуЗСЦ КАК СрезПоследнихПоЭтапуЗСЦ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеЗаявкиСЭтапамНаУценку КАК ВсеЗаявкиСЭтапамНаУценку
	               |		ПО СрезПоследнихПоЭтапуЗСЦ.ЗаявкаСервисногоЦентра = ВсеЗаявкиСЭтапамНаУценку.ЗаявкаСервисногоЦентра
	               |			И СрезПоследнихПоЭтапуЗСЦ.Номенклатура = ВсеЗаявкиСЭтапамНаУценку.Номенклатура
	               |			И СрезПоследнихПоЭтапуЗСЦ.Период = ВсеЗаявкиСЭтапамНаУценку.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеЗаявкиНаУценку.ЗаявкаСервисногоЦентра.Номер КАК Номер,
	               |	ВсеЗаявкиНаУценку.ЗаявкаСервисногоЦентра,
	               |	ВсеЗаявкиНаУценку.Номенклатура,
	               |	ВсеЗаявкиНаУценку.Номенклатура.Код КАК КодНоменклатуры,
	               |	ВсеЗаявкиНаУценку.Номенклатура.ВидНоменклатуры.Родитель КАК Родитель
	               |ИЗ
	               |	ВсеЗаявкиНаУценку КАК ВсеЗаявкиНаУценку
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы.СледующиеЭтапы КАК ГНАТ_ЭтапыРаботыСледующиеЭтапы
	               |		ПО ВсеЗаявкиНаУценку.ЭтапРаботы = ГНАТ_ЭтапыРаботыСледующиеЭтапы.Ссылка
	               |			И (ГНАТ_ЭтапыРаботыСледующиеЭтапы.Этап = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано))
	               |ИТОГИ ПО
	               |	Родитель";
	Возврат ТекстЗапроса;
КонецФункции


#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.5";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рассылка на почту по уценке ЗСЦ");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рассылка на почту по уценке ЗСЦ [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Рассылка на почту по уценке ЗСЦ [" + Версия + "]", "ОтправитьПисьмоПродактам();", "ВызовСерверногоМетода");
		
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 