
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейс

Функция ПолучитьТаблицуРеквизитов() Экспорт

	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("Предсталение", Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Булево"));
	ТаблицаРеквизитов.Колонки.Добавить("Значение");
	ТаблицаРеквизитов.Колонки.Добавить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаРеквизитов.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1,0, ДопустимыйЗнак.Неотрицательный)));
	
	МетаданныеДокумент  = Метаданные.Документы.ГНАТ_ЗаявкаСервисногоЦентра;
	Реквизиты 			= МетаданныеДокумент.Реквизиты;
	
	Для Каждого Реквизит ИЗ Реквизиты Цикл
		Если Реквизит.Имя = "ОбъектОснование" Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизит.Имя = "ЗаказКлиента" Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизит.Имя = "Себестоимость" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Наименование 	= Реквизит.Имя;
		НоваяСтрока.Предсталение 	= Реквизит.Представление();
		НоваяСтрока.Тип			 	= Реквизит.Тип;
		НоваяСтрока.ИндексКартинки	= 1;
	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;

КонецФункции // ПолучитьТаблицуРеквизитов()
 

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.0.071";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Изменение выделенных заявок");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Изменение выделенных заявок [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Изменение выделенных заявок [" + Версия + "]", "ИзменениеВыделенныхЗаявок", "ОткрытиеФормы", Ложь, "ИзменениеВыделенныхЗаявок");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
