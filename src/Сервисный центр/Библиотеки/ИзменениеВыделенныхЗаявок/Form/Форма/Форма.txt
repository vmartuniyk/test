
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаявок = Параметры.СписокЗаявок;
	
	Если СписокЗаявок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбрано ни одного документа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
		
	Заголовок 	  			 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменение реквизитов документов «Завка сервисного центра (%1)»'"), СписокЗаявок.Количество());
	Ответственный 			 = ПараметрыСеанса.ТекущийПользователь;
	
	ПолучитьЗаказчикРемонта(СписокЗаявок);
	
	СписокРеквизитов.Загрузить(ОбъектОбработка.ПолучитьТаблицуРеквизитов(ЗаказчикРемонта));
	
	ЗначениеВРеквизитФормы(ОбъектОбработка, "Объект");
		
	ПараметрыРегистрации 	= git_МодульДоставкиСервер.СведенияОВнешнейОбработке();
	ПодключеннаяВерсия 		= git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных("МодульДоставки");
	Если ПодключеннаяВерсия = ПараметрыРегистрации.Версия ИЛИ ПодключеннаяВерсия = "0.0.0" Тогда
		git_МодульДоставкиСервер.ПодготовитьМодульДоставки(ЭтаФорма, "ИзменениеВыделенныхЗаявок");		 
	Иначе
		ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("МодульДоставки");
		ВнешнийОбъект.ПодготовитьМодульДоставки(ЭтаФорма, "ИзменениеВыделенныхЗаявок", "МодульДоставки");
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИзменитьРеквизитыНаКлиенте(Команда)
	
	СтруктураОтправки = ИзменитьРеквизитыНаСервере();
	Если СтруктураОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСМС = СтруктураОтправки.МассивСМС;
	Для каждого ЭлементМассив Из МассивСМС Цикл
		ФормаОтправкиСМС = ПолучитьФорму("Документ.ГНАТ_ЗаявкаСервисногоЦентра.Форма.ФормаОтправкиСМС",, ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаОтправкиСМС.ТекстСообщения 			= ЭлементМассив.ТекстСообщения;
		ФормаОтправкиСМС.НомерТелефона 				= ЭлементМассив.НомерТелефона;
		ФормаОтправкиСМС.Контакт  					= ЭлементМассив.Контакт;
		ФормаОтправкиСМС.ЗаявкаСервисногоЦентра  	= ЭлементМассив.ЗаявкаСервисногоЦентра;
		ФормаОтправкиСМС.Элементы.НомерТелефона.СписокВыбора.ЗагрузитьЗначения(ЭлементМассив.СписокНомеров.ВыгрузитьЗначения()); 
		ОткрытьФорму(ФормаОтправкиСМС);	
	КонецЦикла; 
	
	МассивПисем = СтруктураОтправки.МассивПисем;
	Для каждого ЭлементПисьмо Из МассивПисем Цикл
		ФормаОтправкиЭП							= ПолучитьФорму("Документ.ГНАТ_ЗаявкаСервисногоЦентра.Форма.ФормаОтправитьЭлектронноеПисьмо",, ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаОтправкиЭП.ПрофильОтправитель  	= ЭлементПисьмо.ПрофильОтправитель;
		ФормаОтправкиЭП.ТемаЭлектронногоПисьма 	= ЭлементПисьмо.ТемаПисьма;  
		ФормаОтправкиЭП.ТекстЭлектронногоПисьма	= ЭлементПисьмо.ТелоПисьма;
		ФормаОтправкиЭП.СписокАдресов			= ЭлементПисьмо.СписокАдресов;
		ФормаОтправкиЭП.Контакт  				= ЭлементПисьмо.Контакт;
		ФормаОтправкиЭП.ЗаявкаСервисногоЦентра  = ЭлементПисьмо.ЗаявкаСервисногоЦентра;

		ОткрытьФорму(ФормаОтправкиЭП);
	КонецЦикла;
	
	Оповестить("ОбновитьСписокЗСЦ");
	ПоказатьОповещениеПользователя(НСтр("ru='Операция выполнена.'"),, НСтр("ru='Проведение документов завершено.'"), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ХодРабот

&НаКлиенте
Процедура ХодРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Комментарий = ТекущиеДанные.Комментарий;
		ХодРаботПриАктивизацииСтрокиНаСервере(ТекущиеДанные.ЭтапРаботы, ТекущиеДанные.Период, ТекущиеДанные.НомерСтроки, ТекущиеДанные.ДанныеЗаписаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХодРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ХодРаботПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.НомерСтроки <> Объект.ХодРабот.Количество() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХодРаботПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ДанныеЗаписаны <> 2 Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.НомерСтроки <> Объект.ХодРабот.Количество() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХодРабот.Количество()= 1 Тогда
		Для каждого ЭлементСписка  Из СписокДоступныхЗаявок  Цикл
			 СписокЗаявок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Значение);
		КонецЦикла;	
		СписокДоступныхЗаявок.Очистить();		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЭтап(Команда)
	
	Отказ = Ложь;
	
	Если Объект.ХодРабот.Количество() Тогда 
		ПроверитьКорректностьЗаполненияХодаРабот(Отказ);
	КонецЕсли;
	
	Если Отказ = Ложь Тогда
		НоваяСтрока = Объект.ХодРабот.Добавить();
		НоваяСтрока.Период 			= ТекущаяДата();
		НоваяСтрока.Ответственный 	= Ответственный;
		НоваяСтрока.ДанныеЗаписаны 	= 2;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ХодРаботЭтапРаботыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ПартнерАСЦ = Неопределено;
		ТекущиеДанные.МесторасположениеФактическое = Неопределено;
		ЭтапРаботыПриИзмененииНаСервере(ТекущиеДанные.ЭтапРаботы, ТекущиеДанные.Период, ТекущиеДанные.НомерСтроки, ТекущиеДанные.ДанныеЗаписаны);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХодРаботЭтапРаботыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ЭтапРаботы.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДоступныхЭтаповРабот(ТекущиеДанные.НомерСтроки));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокРеквизитов

&НаКлиенте
Процедура СписокРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокРеквизитовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область Интерфейс_настройки_доставки

&НаКлиенте
Процедура ПД_АдресДоставки_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы 		 = Новый Структура;
	ПараметрыФормы.Вставить("Адрес", 		 					ЭтаФорма.КТС_ПД_АдресДоставки);
	ПараметрыФормы.Вставить("ВыводитьУлицу", 					Истина);
	ПараметрыФормы.Вставить("ЗаполнятьАдресДоставкиФормы", 		Истина);
	
	ОткрытьФорму("Справочник.ВариантыМаршрутов.Форма.ПодборИзКлассификатора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПД_АдресДоставки_ПриИзменении(Элемент) Экспорт
	
	ЭтаФорма.КТС_ПД_ПунктНазначения = Неопределено;
	
	Если НЕ ПустаяСтрока(ЭтаФорма.КТС_ПД_АдресДоставки) Тогда
		ЭтаФорма.КТС_ПД_ПунктНазначения = git_ПолучитьГородПоАдресу(ЭтаФорма.МодульДоставкиИмяБиблиотеки, ЭтаФорма.КТС_ПД_АдресДоставки);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПД_Перевозчик_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.КТС_ПД_Перевозчик.СписокВыбора.ЗагрузитьЗначения(git_ПолучитьСписокПеревозчиков(ЭтаФорма.МодульДоставкиИмяБиблиотеки));
КонецПроцедуры

&НаКлиенте
Процедура ПД_Перевозчик_ПриИзменении(Элемент)
	
	ЭтаФорма.КТС_ПД_АдресДоставки			= Неопределено;
	ЭтаФорма.КТС_ПД_ПунктНазначения			= Неопределено;
	ЭтаФорма.КТС_ПД_ОтделениеНовойПочты 	= Неопределено;

	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.КТС_ПД_Перевозчик.Пустая() Тогда
		
		//Элементы.КТС_ПД_ОбъявленнаяСтоимость.ТолькоПросмотр 	= Ложь;
		Элементы.КТС_ПД_ОтделениеНовойПочты.ТолькоПросмотр 		= Ложь;
		Элементы.КТС_ПД_КонтактноеЛицо.ТолькоПросмотр 			= Ложь;
		Элементы.КТС_ПД_ПлатитПолучатель.ТолькоПросмотр 		= Ложь;
		
		ДанныеПеревозки 						= git_ПеренестиЗаполнениеДанныхПеревозкиНаСервер(ЭтаФорма.МодульДоставкиИмяБиблиотеки, ЭтаФорма.КТС_ПД_Перевозчик, ТекущиеДанные.ПартнерАСЦ, 0);
		ЭтаФорма.КТС_ПД_АдресДоставки   		= ДанныеПеревозки.АдресДоставки;
		ЭтаФорма.КТС_ПД_ОтделениеНовойПочты   	= ДанныеПеревозки.ОтделениеНовойПочты;
		ЭтаФорма.КТС_ПД_КонтактноеЛицо			= ДанныеПеревозки.КонтактноеЛицо;
		//ЭтаФорма.КТС_ПД_ОбъявленнаяСтоимость 	= ДанныеПеревозки.ОбъявленнаяСтоимость;
	
		Если НЕ ПустаяСтрока(ЭтаФорма.КТС_ПД_АдресДоставки) Тогда
			ПД_АдресДоставки_ПриИзменении(Неопределено);
		КонецЕсли; 
		
	Иначе	
		
		ЭтаФорма.КТС_ПД_ОбъявленнаяСтоимость 	= 0;
		ЭтаФорма.КТС_ПД_ОтделениеНовойПочты		= Неопределено;
		ЭтаФорма.КТС_ПД_КонтактноеЛицо 			= Неопределено;
		ЭтаФорма.КТС_ПД_ПлатитПолучатель 		= Неопределено;
		
		Элементы.КТС_ПД_ОбъявленнаяСтоимость.ТолькоПросмотр 	= Истина;
		Элементы.КТС_ПД_ОтделениеНовойПочты.ТолькоПросмотр 		= Истина;
		Элементы.КТС_ПД_КонтактноеЛицо.ТолькоПросмотр 			= Истина;
		Элементы.КТС_ПД_ПлатитПолучатель.ТолькоПросмотр 		= Истина;
		
	КонецЕсли;
	
	ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	
	Модифицированность = Истина;
	 		
КонецПроцедуры

&НаКлиенте
Процедура ПД_ЗаполнитьАдресПартнераПоУмолчанию(Команда)
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.КТС_ПД_АдресДоставки 	= git_ПолучитьАдресДоставкиПоУмолчанию(ЭтаФорма.МодульДоставкиИмяБиблиотеки, ТекущиеДанные.ПартнерАСЦ);
	ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	Модифицированность 		 		= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПД_ОтделениеНовойПочты_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы 		 = Новый Структура;
	ПараметрыФормы.Вставить("Адрес", 		 						ЭтаФорма.КТС_ПД_ОтделениеНовойПочты);
	ПараметрыФормы.Вставить("ВыводитьУлицу",						Истина);
	ПараметрыФормы.Вставить("ЗаполнятьОтделениеНовойПочтыФормы",	Истина);

	ОткрытьФорму("Справочник.ВариантыМаршрутов.Форма.ПодборИзКлассификатора", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура ПД_ОтделениеНовойПочтыПриИзменении(Элемент) Экспорт
	
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	КонецЕсли;
	
	Модифицированность = Истина;
	 		
КонецПроцедуры

&НаКлиенте
Процедура ПД_КонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма.КТС_ПД_КонтактноеЛицо) Тогда
			ЭтаФорма.КТС_ПД_ОтделениеНовойПочты = "";
		КонецЕсли;
		ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	КонецЕсли;
	
	Модифицированность = Истина;
	 		
КонецПроцедуры

&НаКлиенте
Процедура ПД_КонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = Тип("Строка") Тогда
		Возврат;	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат;
	Иначе
		ТекущиеДанные 	= Элементы.ХодРабот.ТекущиеДанные;
		ПартнерАСЦ   	= ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.ПартнерАСЦ);
		Если ЗначениеЗаполнено(ПартнерАСЦ) Тогда
			СтандартнаяОбработка 	= Ложь;
			СписокВыбора 			= ПолучитьКонтакныеЛицаПартнера(ПартнерАСЦ);
			ВыбранныеЗначение   	= СписокВыбора.ВыбратьЭлемент(НСтр("ru='Выберите контактное лицо партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), Этаформа.КТС_ПД_КонтактноеЛицо);
			Если ВыбранныеЗначение <> Неопределено Тогда
				Этаформа.КТС_ПД_КонтактноеЛицо = ВыбранныеЗначение.Значение;
				ОтделениеНовойПочты = ПолучитьАдресКонтактногоЛица(ВыбранныеЗначение.Значение);
				Если Не ПустаяСтрока(ОтделениеНовойПочты) Тогда
					ЭтаФорма.КТС_ПД_ОтделениеНовойПочты = ОтделениеНовойПочты;
				КонецЕсли;
			КонецЕсли;
			ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПД_ОбъявленнаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	КонецЕсли;
	
	Модифицированность = Истина;
	 		
КонецПроцедуры

&НаКлиенте
Процедура ПД_ПлатитПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ХодРабот.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьСтрокуВТаблицуЭтапов(ТекущиеДанные.Период, ТекущиеДанные.ПартнерАСЦ);
	КонецЕсли;
	
	Модифицированность = Истина;
	 		
КонецПроцедуры


&НаСервере
Процедура ДобавитьСтрокуВТаблицуЭтапов(знач Период, знач Партнер)

	КТС_ПД_ТаблицаЭтапов = ЭтаФорма.КТС_ПД_ТаблицаЭтапов;
	
	СтруктураПоиска = Новый Структура("Период", Период);
	РезультатПоиска = КТС_ПД_ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РезультатПоиска[0], ЭтаФорма);
		РезультатПоиска[0].Получатель 	= Партнер;
		РезультатПоиска[0].Период 		= Период;
	Иначе
		НоваяСтрока = КТС_ПД_ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтаФорма);
		НоваяСтрока.Получатель 	= Партнер;
		НоваяСтрока.Период 		= Период;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВТаблицуЭтапов()

&НаСервере
Процедура УдалитьСтрокиИзТаблицыЭтапов(знач Период, знач Этап)

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Этап.ВключатьВОтгрузкуМест Тогда
		Возврат;
	КонецЕсли;
	
	КТС_ПД_ТаблицаЭтапов = ЭтаФорма.КТС_ПД_ТаблицаЭтапов;
	
	СтруктураПоиска = Новый Структура("Период", Период);
	РезультатПоиска = КТС_ПД_ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			КТС_ПД_ТаблицаЭтапов.Удалить(СтрокаРезультат);    					
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры // УдалитьСтрокиИзТаблицыЭтапов()



&НаСервереБезКонтекста
Функция git_ПолучитьАдресДоставкиПоУмолчанию(ВнешнийОбъект, Партнер)
	УстановитьПривилегированныйРежим(Истина);
	Если ПустаяСтрока(ВнешнийОбъект) Тогда
		Возврат git_МодульДоставкиСервер.ПолучитьАдресДоставкиПоУмолчания(Партнер);
	Иначе
		ВнешнийОбъектКлиент = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени(ВнешнийОбъект);
		Возврат ВнешнийОбъектКлиент.ПолучитьАдресДоставкиПоУмолчания(Партнер);
	КонецЕсли;
КонецФункции // git_ПолучитьАдресДоставкиПоУмолчанию()

&НаСервереБезКонтекста
Функция git_ПолучитьСписокПеревозчиков(ВнешнийОбъект)
	УстановитьПривилегированныйРежим(Истина);
	Если ПустаяСтрока(ВнешнийОбъект) Тогда
		Возврат git_МодульДоставкиСервер.ПолучитьСписокПеревозчиков();
	Иначе
		ВнешнийОбъектКлиент = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени(ВнешнийОбъект);
		Возврат ВнешнийОбъектКлиент.ПолучитьСписокПеревозчиков();
	КонецЕсли;
КонецФункции // git_ПолучитьСписокПеревозчиков()

&НаСервереБезКонтекста
Функция git_ПолучитьКурсНаДату(ВнешнийОбъект, Дата, Валюта)
	УстановитьПривилегированныйРежим(Истина);
	Если ПустаяСтрока(ВнешнийОбъект) Тогда
		Возврат git_МодульДоставкиСервер.ПолучитьКурсНаДату(Дата, Валюта);
	Иначе
		ВнешнийОбъектКлиент = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени(ВнешнийОбъект);
		Возврат ВнешнийОбъектКлиент.ПолучитьКурсНаДату(Дата, Валюта);
	КонецЕсли;
КонецФункции // git_ПолучитьКурсНаДату()

&НаСервереБезКонтекста
Функция git_ПолучитьГородПоАдресу(ВнешнийОбъект, АдресДоставки)
	УстановитьПривилегированныйРежим(Истина);
	Если ПустаяСтрока(ВнешнийОбъект) Тогда
		Возврат git_МодульДоставкиСервер.ПолучитьГородПоАдресу(АдресДоставки);
	Иначе
		ВнешнийОбъектКлиент = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени(ВнешнийОбъект);
		Возврат ВнешнийОбъектКлиент.ПолучитьГородПоАдресу(АдресДоставки);
	КонецЕсли;			
КонецФункции

&НаСервереБезКонтекста
Функция git_ПолучитьАдресПартнера(ВнешнийОбъект, Партнер)
	УстановитьПривилегированныйРежим(Истина);
	Если ПустаяСтрока(ВнешнийОбъект) Тогда
		Возврат git_МодульДоставкиСервер.ПолучитьАдресПартнера(Партнер);
	Иначе
		ВнешнийОбъектКлиент = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени(ВнешнийОбъект);
		Возврат ВнешнийОбъектКлиент.ПолучитьАдресПартнера(Партнер);
	КонецЕсли;		
КонецФункции

&НаСервереБезКонтекста
Функция git_ПолучитьПараметрыДоставки(ВнешнийОбъект, Объект)
	УстановитьПривилегированныйРежим(Истина);
	Если ПустаяСтрока(ВнешнийОбъект) Тогда
		Возврат git_МодульДоставкиСервер.ПолучитьПараметрыДоставки(Объект);
	Иначе
		ВнешнийОбъектКлиент = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени(ВнешнийОбъект);
		Возврат ВнешнийОбъектКлиент.ПолучитьПараметрыДоставки(Объект);
	КонецЕсли;
КонецФункции // git_ПолучитьПараметрыДоставки()

&НаСервереБезКонтекста
Функция git_ПеренестиЗаполнениеДанныхПеревозкиНаСервер(знач ВнешнийОбъект, знач Перевозчик, знач Партнер, знач АктуальнаяСебестоимость)

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("АдресДоставки, ОтделениеНовойПочты, КонтактноеЛицо, ОбъявленнаяСтоимость", Неопределено, Неопределено, Неопределено, Неопределено);
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		КонтакноеЛицо = ПолучитьКонтакноеЛицоПартнераПоУмолчанию(Партнер);
		// КонтакноеЛицо = 0 Означает что в контактных лицах партнера установлено нескоько галочек "Переносить в ЗСЦ"
		Если КонтакноеЛицо = 1 Тогда  // Означает что в партнера нету контактных лиц
			Результат.КонтактноеЛицо 		= Партнер;
			Результат.ОтделениеНовойПочты 	= git_ПолучитьАдресПартнера(ВнешнийОбъект, Партнер);
		ИначеЕсли ТипЗнч(КонтакноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Результат.КонтактноеЛицо 		= КонтакноеЛицо;
			Результат.ОтделениеНовойПочты 	= ПолучитьАдресКонтактногоЛица(КонтакноеЛицо);			
		КонецЕсли;
	КонецЕсли;
	
	Результат.АдресДоставки 		= git_ПолучитьАдресПартнера(ВнешнийОбъект, Перевозчик);
	Результат.ОбъявленнаяСтоимость  = ПолучитьОбъявленнуюСтоимость(АктуальнаяСебестоимость);
	
	Возврат Результат;

КонецФункции // git_ПолучитьСтруктуруКонтактныхДанных()

&НаСервереБезКонтекста
Функция ПолучитьКонтакныеЛицаПартнера(Партнер)

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка			КАК Ссылка,
	                      |	Наименование    КАК Наименование
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаПартнеров
	                      |ГДЕ
	                      |	Владелец = &Партнер");
						  
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РезультатВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 
	
	Возврат РезультатВыбора;

КонецФункции // ПолучитьКонтакныеЛицаПартнера()

&НаСервереБезКонтекста
Функция ПолучитьКонтакноеЛицоПартнераПоУмолчанию(Партнер)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ ТаблицаКонтакныхЛиц
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаПартнеров
	                      |ГДЕ
	                      |	Владелец = &Партнер
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаКонтакныхЛиц.Ссылка КАК КонтакноеЛицо,
	                      |	ДопРеквизиты.Значение      КАК Значение
	                      |ПОМЕСТИТЬ ТаблицаДополнительныхРеквизитов
	                      |ИЗ
	                      |	ТаблицаКонтакныхЛиц КАК ТаблицаКонтакныхЛиц
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.ДополнительныеРеквизиты КАК ДопРеквизиты
	                      |		ПО ТаблицаКонтакныхЛиц.Ссылка = ДопРеквизиты.Ссылка
	                      |			И (ДопРеквизиты.Свойство  = &ДополнительныйРеквизит)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КонтакноеЛицо КАК КонтакноеЛицо
	                      |ИЗ
	                      |	ТаблицаДополнительныхРеквизитов
	                      |ГДЕ
	                      |	Значение = ИСТИНА");
						  
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ДополнительныйРеквизит", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("b31ad1b2-f52e-11e3-80cd-001e676b0174")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ?(Выборка.Следующий(), Выборка.КонтакноеЛицо, 1);

КонецФункции // ПолучитьКонтакноеЛицоПартнераПоУмолчанию()

&НаСервереБезКонтекста
Функция ПолучитьАдресКонтактногоЛица(КонтактноеЛицо)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Представление КАК Адрес
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
	                      |ГДЕ
	                      |	Тип 		= &Тип
	                      |	И Вид 		= &Вид
	                      |	И Ссылка 	= &Ссылка");
						  
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("70debd53-f06f-11e3-80cd-001e676b0174")));
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Адрес, "");

КонецФункции // ПолучитьАдресКонтактногоЛица()

&НаСервереБезКонтекста
Функция ПолучитьОбъявленнуюСтоимость(знач АктуальнаяСебестоимость)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Валюта				КАК Валюта,
	                      |	Курс / Кратность 	КАК Курс
	                      |ПОМЕСТИТЬ КурсыВалют
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КурсыВалютУпр.Курс / КурсыВалютРег.Курс КАК Курс
	                      |ИЗ
	                      |	КурсыВалют КАК КурсыВалютУпр
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРег
	                      |		ПО (КурсыВалютРег.Валюта = &ВалютаРегУчета)
	                      |ГДЕ
	                      |	КурсыВалютУпр.Валюта = &ВалютаУпрУчета");
						  
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат АктуальнаяСебестоимость * ?(Выборка.Следующий(), Выборка.Курс, 0);

КонецФункции // ПолучитьОбъявленнуюСтоимость()



&НаСервереБезКонтекста
Функция ПолучитьИмяВнешнегоОбъекта(ИмяОбработки)
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьИмяВнешнегоОбъекта(ИмяОбработки);	
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ХодРаботПриАктивизацииСтрокиНаСервере(ЭтапРаботы, Период, НомерСтроки, ДанныеЗаписаны)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Реквизит Из ЭтапРаботы.РеквизитыДляКонтроля Цикл
		
		Если Элементы[Реквизит.ИмяРеквизита].ТолькоПросмотр = Реквизит.Доступность Тогда
			Элементы[Реквизит.ИмяРеквизита].ТолькоПросмотр = НЕ Реквизит.Доступность;
		КонецЕсли;
		
		Если Элементы[Реквизит.ИмяРеквизита].АвтоОтметкаНезаполненного <> Реквизит.ОбязателенДляЗаполнения Тогда  
			Элементы[Реквизит.ИмяРеквизита].АвтоОтметкаНезаполненного = Реквизит.ОбязателенДляЗаполнения;
		КонецЕсли;
		
	КонецЦикла;
	
	// Модуль доставки начало
	
	Если ЭтапРаботы.ВключатьВОтгрузкуМест Тогда
		
		ЭтаФорма.КТС_ПД_АдресДоставки 			= Неопределено;
		ЭтаФорма.КТС_ПД_ОтделениеНовойПочты	 	= Неопределено;
		ЭтаФорма.КТС_ПД_Перевозчик 				= Неопределено;
		ЭтаФорма.КТС_ПД_ПунктНазначения 		= Неопределено;
		ЭтаФорма.КТС_ПД_КонтактноеЛицо 			= Неопределено;
		ЭтаФорма.КТС_ПД_ОбъявленнаяСтоимость 	= Неопределено;
		ЭтаФорма.КТС_ПД_ПлатитПолучатель 		= Неопределено;
		
		Если НомерСтроки <> Объект.ХодРабот.Количество() Тогда
			Элементы.КТС_ПараметрыДоставки.Доступность = Ложь;
		Иначе	
			Элементы.КТС_ПараметрыДоставки.Доступность = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Период", Период);
		РезультатПоиска = ЭтаФорма.КТС_ПД_ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатПоиска[0]);
		КонецЕсли;
		
	Иначе
		
		Элементы.КТС_ПараметрыДоставки.Доступность = Ложь;
		
		ЭтаФорма.КТС_ПД_АдресДоставки 			= Неопределено;
		ЭтаФорма.КТС_ПД_ОтделениеНовойПочты	 	= Неопределено;
		ЭтаФорма.КТС_ПД_Перевозчик 				= Неопределено;
		ЭтаФорма.КТС_ПД_ПунктНазначения 		= Неопределено;
		ЭтаФорма.КТС_ПД_КонтактноеЛицо 			= Неопределено;
		ЭтаФорма.КТС_ПД_ОбъявленнаяСтоимость 	= Неопределено;
		ЭтаФорма.КТС_ПД_ПлатитПолучатель 		= Неопределено;
		
	КонецЕсли;
	
	// Модуль доставки конец
	
КонецПроцедуры // ХодРаботПриАктивизацииСтрокиНаСервере()

&НаСервере
Процедура ПроверитьКорректностьЗаполненияХодаРабот(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.ХодРабот.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ХодРабот[Объект.ХодРабот.Количество()-1].ЭтапРаботы.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Реквизит обязателен для заполнения!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
																	,
																	ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ХодРабот", Объект.ХодРабот[Объект.ХодРабот.Количество()-1].НомерСтроки, "ЭтапРаботы"), 
																	, 
																	Отказ);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаХодаРабот Из Объект.ХодРабот Цикл
		
		Если СтрокаХодаРабот.ДанныеЗаписаны = 2 Тогда
			
			Для каждого Реквизит Из СтрокаХодаРабот.ЭтапРаботы.РеквизитыДляКонтроля Цикл
					
				Если Реквизит.ОбязателенДляЗаполнения = Истина И НЕ ЗначениеЗаполнено(СтрокаХодаРабот[Реквизит.ИмяРеквизита]) Тогда  
					ТекстОшибки = НСтр("ru='Реквизит обязателен для заполнения!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, 
																	,
																	ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ХодРабот", СтрокаХодаРабот.НомерСтроки, Реквизит.ИмяРеквизита), 
																	, 
																	Отказ);	
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЭтапРаботыПриИзмененииНаСервере(ЭтапРаботы, Период, НомерСтроки, ДанныеЗаписаны)
	
	Для каждого Реквизит Из ЭтапРаботы.РеквизитыДляКонтроля Цикл
		
		Объект.ХодРабот[НомерСтроки-1][Реквизит.ИмяРеквизита] = Реквизит.ЗначениеПоУмолчанию;
		Если Реквизит.ЗаполнитьИзПредыдущегоЭтапа = Истина Тогда
			Объект.ХодРабот[НомерСтроки-1][Реквизит.ИмяРеквизита] = Объект.ХодРабот[НомерСтроки-1][Реквизит.ИмяРеквизита];			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтроки = 1 Тогда 
		ЗаполнитьДоступныеЗаявкиСЦ(ЭтапРаботы);	
	КонецЕсли;
	
	ХодРаботПриАктивизацииСтрокиНаСервере(ЭтапРаботы, Период, НомерСтроки, ДанныеЗаписаны);
	
КонецПроцедуры // ЭтапРаботыПриИзмененииНаСервере()

&НаСервере
Функция ПолучитьСписокДоступныхЭтаповРабот(НомерСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Этап
		|ИЗ
		|	Справочник.ГНАТ_ЭтапыРаботы.ПредыдущиеЭтапы КАК ГНАТ_ЭтапыРаботыПредыдущиеЭтапы
		|ГДЕ
		|	ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Ссылка В (&ТекущийЭтап)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГНАТ_ЭтапыРаботыСледующиеЭтапы.Этап
		|ИЗ
		|	Справочник.ГНАТ_ЭтапыРаботы.СледующиеЭтапы КАК ГНАТ_ЭтапыРаботыСледующиеЭтапы
		|ГДЕ
		|	ГНАТ_ЭтапыРаботыСледующиеЭтапы.Ссылка В (&ТекущийЭтап)
		|";
		
	Если НомерСтроки >1 Тогда
		Запрос.УстановитьПараметр("ТекущийЭтап", Объект.ХодРабот[НомерСтроки-2].ЭтапРаботы);
	Иначе 
		Запрос.УстановитьПараметр("ТекущийЭтап", ПолучитьТекущиеЭтапыРаботы());
	КонецЕсли;
	ЭтапыРабот = Запрос.Выполнить().Выгрузить();
	МассивЭтапов = ЭтапыРабот.ВыгрузитьКолонку("Этап");
	Возврат МассивЭтапов;	
	
КонецФункции // ПолучитьСписокДоступныхЭтаповРабот()

&НаСервере
Процедура ЗаполнитьДоступныеЗаявкиСЦ(ЭтапРаботы)

	УстановитьПривилегированныйРежим(Истина);
	
	Массив = СписокРеквизитов.НайтиСтроки(Новый Структура("Наименование","Комплектность"));
	Комплектность = Массив[0].Флаг;

	
	Для каждого Элемент Из СписокДоступныхЗаявок Цикл
	   	СписокЗаявок.Добавить(Элемент.Значение,Элемент.Значение);
	КонецЦикла;
	
	СписокДоступныхЗаявок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра,
	 |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы
	 |ПОМЕСТИТЬ Этапы
	 |ИЗ
	 |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(, ЗаявкаСервисногоЦентра В (&СписокЗаявок)) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
	 |;
	 |
	 |ВЫБРАТЬ
	 |	Этапы.ЗаявкаСервисногоЦентра
	 |ИЗ
	 |	Справочник.ГНАТ_ЭтапыРаботы.ПредыдущиеЭтапы КАК ГНАТ_ЭтапыРаботыПредыдущиеЭтапы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Этапы КАК Этапы
	 |		ПО ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Ссылка = Этапы.ЭтапРаботы
	 |ГДЕ
	 |	ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Этап = &ЭтапРаботы
	 |
	 |ОБЪЕДИНИТЬ
	 |
	 |ВЫБРАТЬ
	 |	Этапы.ЗаявкаСервисногоЦентра
	 |ИЗ
	 |	Справочник.ГНАТ_ЭтапыРаботы.СледующиеЭтапы КАК ГНАТ_ЭтапыРаботыСледующиеЭтапы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Этапы КАК Этапы
	 |		ПО ГНАТ_ЭтапыРаботыСледующиеЭтапы.Ссылка = Этапы.ЭтапРаботы
	 |ГДЕ
	 |	ГНАТ_ЭтапыРаботыСледующиеЭтапы.Этап = &ЭтапРаботы";
	 Запрос.УстановитьПараметр("СписокЗаявок"	,СписокЗаявок);
	 Запрос.УстановитьПараметр("ЭтапРаботы"		,ЭтапРаботы);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл 
		Если Комплектность И Выборка.ЗаявкаСервисногоЦентра.ХодРабот.Количество()=1 Тогда 
			 СписокДоступныхЗаявок.Добавить(Выборка.ЗаявкаСервисногоЦентра,Выборка.ЗаявкаСервисногоЦентра);
			 СписокЗаявок.Удалить(СписокЗаявок.НайтиПоЗначению(Выборка.ЗаявкаСервисногоЦентра));
		 ИначеЕсли Не Комплектность И Выборка.ЗаявкаСервисногоЦентра.ХодРабот.Количество()>1 Тогда  
		 	 СписокДоступныхЗаявок.Добавить(Выборка.ЗаявкаСервисногоЦентра,Выборка.ЗаявкаСервисногоЦентра);
			 СписокЗаявок.Удалить(СписокЗаявок.НайтиПоЗначению(Выборка.ЗаявкаСервисногоЦентра));
			 
		 Иначе 
		 	 СписокДоступныхЗаявок.Добавить(Выборка.ЗаявкаСервисногоЦентра,Выборка.ЗаявкаСервисногоЦентра);
			 СписокЗаявок.Удалить(СписокЗаявок.НайтиПоЗначению(Выборка.ЗаявкаСервисногоЦентра));
			 
		 КонецЕсли;	 
	 КонецЦикла;
	 
КонецПроцедуры // ЗаполнитьДоступныеЗаявкиСЦ()


&НаСервере
Функция ПолучитьТекущиеЭтапыРаботы()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ГНАТ_ЭтапыРабот.ЭтапРаботы
	 |ИЗ
	 |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(, ЗаявкаСервисногоЦентра В (&СписокЗаявок)) КАК ГНАТ_ЭтапыРабот
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ГНАТ_ЭтапыРабот.ЭтапРаботы
	 |ИЗ
	 |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(, ЗаявкаСервисногоЦентра В (&СписокДоступныхЗаявок)) КАК ГНАТ_ЭтапыРабот";
	 Запрос.УстановитьПараметр("СписокЗаявок", СписокЗаявок);
	 Запрос.УстановитьПараметр("СписокДоступныхЗаявок", СписокДоступныхЗаявок);
	 Выборка = Запрос.Выполнить().Выбрать();
	 СписокЭтапов = Новый СписокЗначений;
	 Пока Выборка.Следующий() Цикл 
		 СписокЭтапов.Добавить(Выборка.ЭтапРаботы);
	 КонецЦикла;
	 
	 Возврат СписокЭтапов;	 

КонецФункции // ПолучитьТекущиеЭтапыРаботы()
	

&НаСервере
Функция ИзменитьРеквизитыНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Отказ 		= Ложь;
	МассивСМС   = Новый Массив;
	МассивПисем = Новый Массив;
	
	ПроверитьКорректностьЗаполненияХодаРабот(Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Заявка Из СписокДоступныхЗаявок Цикл
		
		НачатьТранзакцию();
		
		ЗаявкаОбъект = Заявка.Значение.ПолучитьОбъект();
		
		Для каждого Реквизит Из СписокРеквизитов Цикл
			Если Реквизит.Флаг Тогда
				Если Реквизит.Наименование = "Рекламация" Тогда
					Если Не РольДоступна("ПолныеПрава") И Не РольДоступна("ИзменениеРекламацииВЗаявкеСервисногоЦентра") Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось установить реквизит «Рекламация» провести документе %1. Недостаточно прав.'"), Заявка.Значение); 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Значение);
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если Реквизит.Наименование = "ВидОперации" Тогда
					Если Не РольДоступна("ПолныеПрава") И Не РольДоступна("ИзменениеВидаОперацииВЗаявкеСервисногоЦентра") Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось установить реквизит «Вид операции» провести документе %1. Недостаточно прав.'"), Заявка.Значение);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Значение);
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ЗаявкаОбъект[Реквизит.Наименование] = Реквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаявкаОбъект.ВидОперации = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ГНАТ Тогда
			Если Не ЗначениеЗаполнено(ЗаявкаОбъект.РеализацияТоваровУслуг) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось провести документ %1. Для документа с видом опреции «ГНАТ» необходимо установить документ реализации.'"), Заявка.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Значение);
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаявкаОбъект.ВидОперации = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйБезналичный Тогда
			Если ЗначениеЗаполнено(ЗаявкаОбъект.РеализацияТоваровУслуг) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось провести документ %1. Для документа с видом опреции «Платный безналичный» нельзя устанавливать документ реализации.'"), Заявка.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Значение);
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаявкаОбъект.ВидОперации = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный Тогда
			Если ЗначениеЗаполнено(ЗаявкаОбъект.РеализацияТоваровУслуг) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось провести документ %1. Для документа с видом опреции «Платный наличный» нельзя устанавливать документ реализации.'"), Заявка.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Значение);
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДописатьХодРаботКЗаявке(ЗаявкаОбъект) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);    					
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось провести документ %1.'"), Заявка.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Значение);
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Если Не ДописатьАналитикуДоставкиКЗаявке(ЗаявкаОбъект) Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Для каждого СтрокаХодаРабот Из Объект.ХодРабот Цикл
			
			Если СтрокаХодаРабот.ЭтапРаботы.ОтправлятьСМСПартнеру Тогда
				ПараметрыСМС = Новый Структура;
				ПараметрыСМС.Вставить("ТекстСообщения", Справочники.ГНАТ_ЭтапыРаботы.ОбработатьШаблонСообщения(Заявка.Значение, СтрокаХодаРабот.ЭтапРаботы, СтрокаХодаРабот.МесторасположениеФактическое, СтрокаХодаРабот.ЭтапРаботы.ТекстСМССообщения));
				ПараметрыСМС.Вставить("НомерТелефона", Заявка.Значение.НомерТелефона);
				ПараметрыСМС.Вставить("СписокНомеров", ЗаполнитьСписокНомеровТелефонов(Заявка.Значение.ЗаказчикРемонта));
				ПараметрыСМС.Вставить("ЗаявкаСервисногоЦентра", Заявка.Значение);
				ПараметрыСМС.Вставить("Контакт", Заявка.Значение.ЗаказчикРемонта);
				МассивСМС.Добавить(ПараметрыСМС);
			КонецЕсли;
			
			Если СтрокаХодаРабот.ЭтапРаботы.ОтправлятьЭП Тогда
				ПараметрыЭП = Новый Структура;
				ПараметрыЭП.Вставить("ПрофильОтправитель", Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f5-df88-11e0-8b5f-001517115d85")));
				ПараметрыЭП.Вставить("ТемаПисьма", СтрокаХодаРабот.ЭтапРаботы.ТемаЭлектронногоЛиста);
				ПараметрыЭП.Вставить("ТелоПисьма", Справочники.ГНАТ_ЭтапыРаботы.ОбработатьШаблонСообщения(Заявка.Значение, СтрокаХодаРабот.ЭтапРаботы, СтрокаХодаРабот.МесторасположениеФактическое, СтрокаХодаРабот.ЭтапРаботы.ТекстЭлектронногоПисьма));
				ПараметрыЭП.Вставить("СписокАдресов", ПолучитьСписокАдресовОтправкиЭП(СтрокаХодаРабот.ЭтапРаботы, Заявка.Значение.ЗаказчикРемонта));
				ПараметрыЭП.Вставить("ЗаявкаСервисногоЦентра", Заявка.Значение);
				ПараметрыЭП.Вставить("Контакт", Заявка.Значение.ЗаказчикРемонта);
				МассивПисем.Добавить(ПараметрыЭП);
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЦикла; 
	
	СписокДоступныхЗаявок.Очистить();
	Объект.ХодРабот.Очистить();


	
	Возврат Новый Структура("МассивСМС, МассивПисем", МассивСМС, МассивПисем);

КонецФункции // ИзменитьРеквизитыНаСервере()

&НаСервере
Функция ДописатьХодРаботКЗаявке(Заявка)

	Если Не Объект.ХодРабот.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХодРаботЗаявки 			= Заявка.ХодРабот;
	ПоследнийЭтап  			= ХодРаботЗаявки[ХодРаботЗаявки.Количество()-1].ЭтапРаботы;
	МассивСледующихЭтапов   = ПоследнийЭтап.СледующиеЭтапы.Выгрузить().ВыгрузитьКолонку("Этап");
	
	Если МассивСледующихЭтапов.Найти(Объект.ХодРабот[0].ЭтапРаботы) = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В документе %1 этап %2 не является следующим для этапа %3.'"), Заявка.Ссылка, Объект.ХодРабот[0].ЭтапРаботы, ПоследнийЭтап);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого СтрокаЭтап Из Объект.ХодРабот Цикл
	    НоваяСтрока = Заявка.ХодРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭтап);
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции // ДописатьХодРаботКЗаявке()

&НаСервере
Функция ДописатьАналитикуДоставкиКЗаявке(Заявка)

	Если ЭтаФорма.КТС_ПД_ТаблицаЭтапов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КТС_АналитикаДоставки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Заявка.Ссылка);
	
	Для каждого СтрокаТаблицы ИЗ ЭтаФорма.КТС_ПД_ТаблицаЭтапов Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Запись.Объект = Заявка.Ссылка;
		Запись.КТС_ПД_ОбъявленнаяСтоимость  = ПолучитьОбъявленнуюСтоимость(Заявка.Себестоимость);
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В документе %1 не удалось записать данные о доставке.'"), Заявка.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Заявка.Ссылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ДописатьАналитикуДоставкиКЗаявке()

&НаСервере
Функция ЗаполнитьСписокНомеровТелефонов(Партнер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокВыбора = Новый СписокЗначений;
	
	МобНомер	= Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85"));  //Мобільний телефон
	МобНомерДоп	= Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("a8ec65fe-c74a-11e1-9d4d-001e673c80fc"));  //Мобільний телефон (додатковий)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНомераТелефоновПартнера();	
	Запрос.УстановитьПараметр("Партнер",		Партнер);
	Запрос.УстановитьПараметр("МобНомер",		МобНомер);
	Запрос.УстановитьПараметр("МобНомерДоп",	МобНомерДоп);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НормализированныйНомер = ОтправкаСМСПартнеру.НормализироватьНомерТелефона(Выборка.НомерТелефона);
		НормализированныйНомер = ОтправкаСМСПартнеру.ОбработатьНомерТелефона(НормализированныйНомер);
		Если НормализированныйНомер <> Неопределено Тогда
			СписокВыбора.Добавить(НормализированныйНомер, Выборка.Представление + "(" + НормализированныйНомер + ")");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции // ЗаполнитьСписокНомеровТелефонов()

&НаСервере
Функция ПолучитьТекстЗапросаНомераТелефоновПартнера()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""№ тел. по лояльности"" 	КАК Представление,
	    |	НомерТелефона 				КАК НомерТелефона
		|ИЗ
	    | 	РегистрСведений.Лояльность_НомераТелефонов
		|	
		|ГДЕ
		| 	Партнер = &Партнер
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""№ тел. партнера"",
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""№ моб. партнера"",
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= &МобНомер
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""№ доп. тел. партнера"",
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= &МобНомерДоп
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""№ тел. конт. лица"",
	    |	Представление
		|ИЗ
	    | 	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка.Владелец = &Партнер
		|И	Вид	   			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)
		|И	Тип 			= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	""№ моб. конт. лица"",
	    |	Представление
		|ИЗ
	    | 	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка.Владелец = &Партнер
		|И	Вид	   			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица)
		|И	Тип 			= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНомераТелефоновПартнера()

&НаСервере
Функция ПолучитьСписокАдресовОтправкиЭП(ЭтапДокумента, ЗаказчикРемонта)
	
	СписокАдресов = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВложенныйЗапрос.АдресЭлектроннойПочты,
	               |	ВложенныйЗапрос.Представление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ГНАТ_ЭтапыРаботыПолучательЭлектронногоПисьма.ЭлектроннаяПочта 	КАК АдресЭлектроннойПочты,
	               |		ГНАТ_ЭтапыРаботыПолучательЭлектронногоПисьма.Представление 		КАК Представление
	               |	ИЗ
	               |		Справочник.ГНАТ_ЭтапыРаботы.ПолучателиЭлектронныхПисем КАК ГНАТ_ЭтапыРаботыПолучательЭлектронногоПисьма
	               |	ГДЕ
	               |		ГНАТ_ЭтапыРаботыПолучательЭлектронногоПисьма.Ссылка = &Ссылка
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПартнерыКонтактнаяИнформация.АдресЭП,
	               |		ПартнерыКонтактнаяИнформация.Ссылка.Наименование
	               |	ИЗ
	               |		Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	               |			
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы КАК ГНАТ_ЭтапыРаботы
	               |		ПО  ГНАТ_ЭтапыРаботы.Ссылка 			   = &Ссылка
				   |		И	ГНАТ_ЭтапыРаботы.ОтправлятьЭПЗаказчику = Истина
				   |
	               |	ГДЕ
	               |		ПартнерыКонтактнаяИнформация.Ссылка = &Заказчик
	               |	И 	ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |	) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("Ссылка", 	ЭтапДокумента);
	Запрос.УстановитьПараметр("Заказчик", 	ЗаказчикРемонта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		СписокАдресов.Добавить(Выборка.АдресЭлектроннойПочты,Выборка.Представление);
	КонецЦикла;
	
	Возврат СписокАдресов;
	
КонецФункции

&НаКлиенте
Процедура СписокРеквизитовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Наименование = Элементы.СписокРеквизитов.ТекущиеДанные.Наименование;
	
	Если  Наименование = "ВнешнийВид" Тогда

		Массив = ПолучитьМассивДоступныхВнешнихВидов();
	
	ИначеЕсли Наименование = "Комплектность" Тогда
		
		Массив = ПолучитьМассивДоступныхКомплектностей();
		
	КонецЕсли;
	
	Если Массив <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИзменитьВыборЗначений", Истина);
		ФормаВыбораЗначений = ПолучитьФорму("Документ.ГНАТ_ЗаявкаСервисногоЦентра.Форма.ФормаВыбораЗначений",ПараметрыФормы, ЭтаФорма);
		ФормаВыбораЗначений.РеквизитЗаполнения = Элементы.СписокРеквизитов.ТекущиеДанные.Наименование;
		
		Для Каждого ЭлементМассива ИЗ Массив Цикл
			НоваяСтрока = ФормаВыбораЗначений.ТаблицаЗначений.Добавить();
			НоваяСтрока.Представление = ЭлементМассива;
		КонецЦикла;
		ОткрытьФорму(ФормаВыбораЗначений);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокРеквизитовЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Наименование = Элементы.СписокРеквизитов.ТекущиеДанные.Наименование;
	Элементы.СписокРеквизитовЗначение.СписокВыбора.Очистить();
	Если Наименование = "НомерТелефона" Тогда 
		СписокВыбора = ЗаполнитьСписокНомеровТелефонов(ЗаказчикРемонта);
		Для Каждого ЭлементСписка Из СписокВыбора Цикл 
			Элементы.СписокРеквизитовЗначение.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка) ;		
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОновитьСписокДоступныхЗаявок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.ХодРабот.Количество() И СписокДоступныхЗаявок.Количество() Тогда
		Возврат; 
	КонецЕсли;
	
	Для каждого ЭлементСписка  Из СписокЗаявок  Цикл
		 СписокДоступныхЗаявок.Добавить(ЭлементСписка.Значение,ЭлементСписка.Значение);
	КонецЦикла;	
	СписокЗаявок.Очистить();
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьМассивДоступныхВнешнихВидов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Наименование КАК Представление
		|ИЗ
		|  	Справочник.ГНАТ_ВнешнийВид
		|ГДЕ
		|	ОтображатьДляВыбораВЗаявкеСервисногоЦентра
		|УПОРЯДОЧИТЬ ПО
		|	Наименование Возр
		|";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивДоступныхКомплектностей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Наименование КАК Представление
		|ИЗ
		|  	Справочник.ГНАТ_Комплектность
		|ГДЕ
		|	ОтображатьДляВыбораВЗаявкеСервисногоЦентра
		|УПОРЯДОЧИТЬ ПО
		|	Наименование Возр
		|";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление");
	
КонецФункции


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия	= "ЗаполнитьРеквизитЗаполнения"	Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("РеквизитЗаполнения") И Параметр.Свойство("РезультатВыполнения") Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Наименование",Параметр.РеквизитЗаполнения);
				Массив = СписокРеквизитов.НайтиСтроки(ПараметрыОтбора);
				Если Массив <> Неопределено Тогда 
					Массив[0].Значение =Параметр.РезультатВыполнения;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьЗаказчикРемонта(СписокЗаявок)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта
	               |ИЗ
	               |	Документ.ГНАТ_ЗаявкаСервисногоЦентра КАК ГНАТ_ЗаявкаСервисногоЦентра
	               |ГДЕ
	               |	ГНАТ_ЗаявкаСервисногоЦентра.Ссылка В(&СписокЗаявок)
	               |	И ГНАТ_ЗаявкаСервисногоЦентра.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта";
	Запрос.УстановитьПараметр("СписокЗаявок", СписокЗаявок);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() > 1 Тогда 
		ЗаказчикРемонта = Неопределено;
	Иначе 
		Выборка.Следующий();
		ЗаказчикРемонта = Выборка.ЗаказчикРемонта;		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаказчикаРемонта()


&НаКлиенте
Процедура СписокЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Значение);	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоступныхЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Значение);	
КонецПроцедуры

&НаКлиенте
Процедура СписокРеквизитовФлагПриИзменении(Элемент)
	
	ОновитьСписок();
	

	
КонецПроцедуры

&НаКлиенте
Процедура ОновитьСписок()

	Массив = СписокРеквизитов.НайтиСтроки(Новый Структура("Наименование","Комплектность"));
	Комплектность = Массив[0].Флаг;
	
	Если ПроверкаФлага() Тогда
		
		СП = СписокЗаявок.Скопировать(); 
		Для каждого ЭлементСписка  Из СП  Цикл
			Значение = ЭлементСписка.Значение; 
			Если  Комплектность Тогда
				Если ХодРаботКоличество(Значение)=1 И Не ПроверитьЭтап(Значение) Тогда
					СписокДоступныхЗаявок.Добавить(Значение, Значение);
					СписокЗаявок.Удалить(СписокЗаявок.НайтиПоЗначению(Значение));
				КонецЕсли;
			ИначеЕсли Объект.ХодРабот.Количество() Тогда 
				ЭтапРаботы = Объект.ХодРабот[Объект.ХодРабот.Количество()-1].ЭтапРаботы;
				ЗаполнитьДоступныеЗаявкиСЦ(ЭтапРаботы);	
			Иначе 
				СписокДоступныхЗаявок.Добавить(Значение, Значение);
				СписокЗаявок.Удалить(СписокЗаявок.НайтиПоЗначению(Значение));
			КонецЕсли;
		КонецЦикла;
		
		СП = СписокДоступныхЗаявок.Скопировать(); 
		Для каждого ЭлементСписка  Из СП  Цикл
			Значение = ЭлементСписка.Значение; 
			Если  Комплектность Тогда
				Если ХодРаботКоличество(Значение)>1 Тогда
					СписокЗаявок.Добавить(Значение, Значение);
					СписокДоступныхЗаявок.Удалить(СписокДоступныхЗаявок.НайтиПоЗначению(Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	
	ИначеЕсли Объект.ХодРабот.Количество() Тогда 
		ЭтапРаботы = Объект.ХодРабот[Объект.ХодРабот.Количество()-1].ЭтапРаботы;
		ЗаполнитьДоступныеЗаявкиСЦ(ЭтапРаботы);	
	
	Иначе  
		Для каждого ЭлементСписка  Из СписокДоступныхЗаявок  Цикл
			 СписокЗаявок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Значение);
		 КонецЦикла;	
		СписокДоступныхЗаявок.Очистить();
	КонецЕсли;	

КонецПроцедуры // ОновитьСписок()



&НаСервере
Функция ПроверитьЭтап(Ссылка)

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.ХодРабот.Количество() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЭтапРаботы = Объект.ХодРабот[Объект.ХодРабот.Количество()-1].ЭтапРаботы;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы,
		|	ГНАТ_ЭтапыРаботыСледующиеЭтапы.Ссылка
		|ИЗ
		|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(, ) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы.СледующиеЭтапы КАК ГНАТ_ЭтапыРаботыСледующиеЭтапы
		|		ПО ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы = ГНАТ_ЭтапыРаботыСледующиеЭтапы.Ссылка
		|ГДЕ
		|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра = &ЗаявкаСервисногоЦентра
		|	И ГНАТ_ЭтапыРаботыСледующиеЭтапы.Этап = &Этап
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы,
		|	ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Ссылка
		|ИЗ
		|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(, ) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы.ПредыдущиеЭтапы КАК ГНАТ_ЭтапыРаботыПредыдущиеЭтапы
		|		ПО ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы = ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Ссылка
		|ГДЕ
		|	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра = &ЗаявкаСервисногоЦентра
		|	И ГНАТ_ЭтапыРаботыПредыдущиеЭтапы.Этап = &Этап";
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра",Ссылка);
	Запрос.УстановитьПараметр("Этап",ЭтапРаботы);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой(); 
	
КонецФункции // ХодРаботКоличество()


&НаСервере
Функция ХодРаботКоличество(Значение)

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат  Значение.ХодРабот.Количество();	

КонецФункции // ХодРаботКоличество()

&НаСервере
Функция ПроверкаФлага()

	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Флаг", Истина);

	Массив = СписокРеквизитов.НайтиСтроки(ПараметрыОтбора);
	
	Возврат ?(Массив.Количество()>0, Истина, Ложь);
	
КонецФункции // ПроверкаФлага()

&НаКлиенте
Процедура СписокДоступныхЗаявокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокДоступныхЗаявокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ХодРаботПослеУдаления(Элемент)
	ОновитьСписок();
КонецПроцедуры





#КонецОбласти
 
