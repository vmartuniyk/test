
////////////////////////////////////////////////////////////////////////////////
// Маршруты адресный классификатор: модуль предназначен для расширения функционала
// системы логистики в УТ 11
//  
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Маршруты

Процедура ПодготовитьМаршрутыКРаботе(Форма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки) Экспорт
	
	Ссылка 	 = Форма.Объект.Ссылка;
	Элементы = Форма.Элементы;

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ОбщаяБиблиотека.ПодменитьДействиеУправляемоеПриложение(Форма,"ПередЗаписью",,"ПередЗаписьюСпособДоставки");
		ПодготовитьЗаказПоставщику(Форма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки);		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПодготовитьРеализациюТоваровУслуг(Форма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПодготовитьЗаказКлиента(Форма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ПодготовитьВозвратТоваровПоставщику(Форма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		ПодготовитьВнутреннееПотреблениеТоваров(Форма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// ПОЛЕ С ИНФОРМАЦИЕЙ О ПОЛУЧАТЕЛЕ И ОТПРАВИТЕЛЕ, ЭТИКЕТКАХ

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("ххх_ххх_Получатель", Новый ОписаниеТипов("Строка")));
		Форма.ИзменитьРеквизиты(Реквизиты);
			
		ШапкаЛево = Элементы.Найти("ШапкаЛево");
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ххх_ххх_Получатель");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеНадписи);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		Параметры.Вставить("РазрешитьИзменениеСостава", Ложь);
		Параметры.Вставить("Заголовок", "Получатель");
		Параметры.Вставить("ПутьКДанным", "ххх_ххх_Получатель");
		Параметры.Вставить("ЦветТекста", 			Новый Цвет(138, 43, 226));
		Параметры.Вставить("ЦветТекстаЗаголовка", 	Новый Цвет(138, 43, 226));
		ОбщаяБиблиотека.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ?(ШапкаЛево=Неопределено, Форма, ШапкаЛево));
		
		ШапкаПраво = Элементы.Найти("ШапкаПраво");
		Если ШапкаЛево = Неопределено Тогда Возврат; КонецЕсли;

		УстановитьЗначениеПолучателя(Форма);
	
	КонецЕсли; 

	////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры


Функция ПолучитьМаршрутПоДокументу(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	Маршрут 
		|ИЗ 
		|	РегистрСведений.Маршруты_ДокументыПоМаршрутам 
		|ГДЕ 
		|	Регистратор = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();	
    Возврат ?(Выборка.Следующий(), Выборка.Маршрут, Неопределено);
	
КонецФункции // ПолучитьМаршрутПоДокументу()

Функция ПолучитьМаршрутПоАдресу(АдресДоставки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
       	|	Ссылка КАК Маршрут
       	|ИЗ
       	|	Справочник.Маршруты_Маршруты.СписокГородов
       	|ГДЕ
       	|	Город = &Город";
	СтрокаДоставки = ПолучитьГородПоАдресу(АдресДоставки);
	Запрос.УстановитьПараметр("Город", ?(ПустаяСтрока(СтрокаДоставки), АдресДоставки, СтрокаДоставки));
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Маршрут, Неопределено);
	
КонецФункции

Функция ПолучитьМаршрутПоПареСкладов(СкладОтправитель, СкладПолучатель) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
       	|	Маршруты_МаршрутыСписокГородов.Ссылка
       	|ПОМЕСТИТЬ КешМаршруты
       	|ИЗ
       	|	Справочник.Маршруты_Маршруты.СписокГородов КАК Маршруты_МаршрутыСписокГородов
       	|ГДЕ
       	|	Маршруты_МаршрутыСписокГородов.Город = &СкладОтправитель
       	|
       	|СГРУППИРОВАТЬ ПО
       	|	Маршруты_МаршрутыСписокГородов.Ссылка
       	|
       	|ОБЪЕДИНИТЬ ВСЕ
       	|
       	|ВЫБРАТЬ
       	|	Маршруты_МаршрутыСписокГородов.Ссылка
       	|ИЗ
       	|	Справочник.Маршруты_Маршруты.СписокГородов КАК Маршруты_МаршрутыСписокГородов
       	|ГДЕ
       	|	Маршруты_МаршрутыСписокГородов.Город = &СкладПолучатель
       	|
       	|СГРУППИРОВАТЬ ПО
       	|	Маршруты_МаршрутыСписокГородов.Ссылка
       	|;
       	////////////////////////////////////////////////////////////////////////////////
       	|ВЫБРАТЬ
       	|	КешМаршруты.Ссылка
       	|ИЗ
       	|	КешМаршруты КАК КешМаршруты
       	|
		|ГДЕ                                                       
		|	КешМаршруты.Ссылка НЕ В (
		|								ВЫБРАТЬ
		|                                	Ссылка
		|								ИЗ
		|									Справочник.Маршруты_Маршруты.ОграничениеПеремещений
		|								ГДЕ
		|									ПервыйАдрес = &СкладПолучатель 	И ВторойАдрес = &СкладОтправитель
		|								ИЛИ	ПервыйАдрес = &СкладОтправитель	И ВторойАдрес = &СкладПолучатель
		|							 )
		|
       	|СГРУППИРОВАТЬ ПО
       	|	КешМаршруты.Ссылка
       	|
       	|ИМЕЮЩИЕ
       	|	КОЛИЧЕСТВО(КешМаршруты.Ссылка) = 2";
	Запрос.УстановитьПараметр("СкладПолучатель", 	Строка(СкладПолучатель));
	Запрос.УстановитьПараметр("СкладОтправитель", 	Строка(СкладОтправитель));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция ПолучитьГородПоАдресу(АдресДоставки) Экспорт
	
	Если ТипЗнч(АдресДоставки) = Тип("СправочникСсылка.Склады") Тогда
		Возврат АдресДоставки;
	КонецЕсли;
	
	МассивКлассификаторов = Новый Массив;
	Буффер = СтрЗаменить(АдресДоставки, "Адрес:", "");
	
	Пока СтрДлина(Буффер) > 0 Цикл
		
		НомерРазделителя = Найти(Буффер, ",");
		Если НомерРазделителя > 0 Тогда
			МассивКлассификаторов.Добавить(Сред(Буффер, 1, НомерРазделителя - 1));
			Буффер = Сред(Буффер, НомерРазделителя + 1);
		Иначе
			МассивКлассификаторов.Добавить(Буффер);
			Буффер = "";
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Если МассивКлассификаторов.Количество() > 0 Тогда
		Если Найти(МассивКлассификаторов[0], "обл.") > 0 Тогда
			
			Область = СтрЗаменить(СтрЗаменить(МассивКлассификаторов[0], "обл.", ""), " ", "");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗагружатьГород = Истина;
	
	Если МассивКлассификаторов.Количество() > 1 Тогда	
		Если Найти(МассивКлассификаторов[1], "район") > 0 Тогда
			
			Район = СтрЗаменить(СтрЗаменить(МассивКлассификаторов[1], "район", ""), " ", "");;
			
		ИначеЕсли Найти(МассивКлассификаторов[1], "м.") > 0	Тогда
			
			Город = СтрЗаменить(СтрЗаменить(МассивКлассификаторов[1], "м.", ""), " ", "");
			ЗагружатьГород = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если МассивКлассификаторов.Количество() > 2 Тогда
		Если ЗагружатьГород И Найти(МассивКлассификаторов[2], "м.") > 0 Тогда
			
			Город = СтрЗаменить(СтрЗаменить(МассивКлассификаторов[2], "м.", ""), " ", "");
			
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ?(ПустаяСтрока(Область),"", Область + " обл.") 
			+ ?(ПустаяСтрока(Район),"", ", " + Район + " район") 
			+ ?(ПустаяСтрока(Город),"", ", м. " + Город);
	
КонецФункции
		
Функция ПолучитьВремяИДатаВыезда(ДатаДокумента, Маршрут) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КалендарныеГрафики.ДатаГрафика	КАК ДатаВыезда,
		|	СпрКалендарь.ВремяОкончания		КАК ВремяВыезда
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК СпрКалендарь
		|ПО	СпрКалендарь.Ссылка = &Календарь
		//|И	ДеньНедели(КалендарныеГрафики.ДатаГрафика) = СпрКалендарь.НомерДня
		|И	(
		|		(
		|			Час(СпрКалендарь.ВремяНачала) > Час(&Дата) 
		|		ИЛИ Час(СпрКалендарь.ВремяНачала) = Час(&Дата) И Минута(СпрКалендарь.ВремяНачала) > Минута(&Дата)
		|		)
		|	ИЛИ
		|		&Дата < КалендарныеГрафики.ДатаГрафика	
		|	)
		|  
		|ГДЕ
		|	Календарь 	 = &Календарь
		|И  ДатаГрафика >= НачалоПериода(&Дата, День)
		|И	ДеньВключенВГрафик";
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("Календарь", Маршрут.Календарь);
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Следующий(), Выборка.ДатаВыезда + Час(Выборка.ВремяВыезда)*3600 + Минута(Выборка.ВремяВыезда)*60 + Секунда(Выборка.ВремяВыезда), "Неопределено");
	
КонецФункции

Процедура ВключитьАдресВМаршурт(АдресДоставки, Маршрут) Экспорт
	
	СтрокаДоставки = ПолучитьГородПоАдресу(АдресДоставки);
	
	МаршрутОбъект = Маршрут.ПолучитьОбъект();	
	НовыйАдрес = МаршрутОбъект.СписокГородов.Добавить();
	НовыйАдрес.Город = ?(ПустаяСтрока(СтрокаДоставки), АдресДоставки, СтрокаДоставки);
	Попытка
		МаршрутОбъект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

Процедура ВключитьСкладыВМаршурт(СкладОтправитель, СкладПолучатель, Маршрут) Экспорт
		
	МаршрутОбъект = Маршрут.ПолучитьОбъект();	
	НовыйАдрес = МаршрутОбъект.СписокГородов.Добавить();
	НовыйАдрес.Город = Строка(СкладОтправитель);
	НовыйАдрес = МаршрутОбъект.СписокГородов.Добавить();
	НовыйАдрес.Город = Строка(СкладПолучатель);

	Попытка
		МаршрутОбъект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
		
КонецПроцедуры

Процедура ПодготовитьЗаказКлиента(ЭтаФорма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки) Экспорт

	Элементы = ЭтаФорма.Элементы;	
	Команды	 = ЭтаФорма.Команды;
	Объект	 = ЭтаФорма.Объект;


	
	ОбщаяБиблиотека.ПодменитьДействиеУправляемоеПриложение(ЭтаФорма, "ПриИзменении", "Партнер", "МаршрутыПартнерПриИзменении");
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("МаршрутыИмяБиблиотеки", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.МаршрутыИмяБиблиотеки = МаршрутыИмяБиблиотеки;
	
	
	
	// ГРУППЫ
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Заголовок", 					"КТС доставляет");
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("Отображение", 			ОтображениеОбычнойГруппы.РамкаГруппы);
	ГруппаДоставка = Элементы.Добавить("ГруппаДоставка", 	Тип("ГруппаФормы"));
	ЗаполнитьЗначенияСвойств(ГруппаДоставка, ПараметрыГруппы);
	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, Элементы.ГруппаПодвал);	
	
	ПараметрыГруппыЛево = Новый Структура;
	ПараметрыГруппыЛево.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЛево.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЛево.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЛево.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЛево.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЛево.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЛево = Элементы.Добавить("КТС_ГруппаЛево", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЛево, ПараметрыГруппыЛево);
	
	ПараметрыГруппыЦентр = Новый Структура;
	ПараметрыГруппыЦентр.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЦентр.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЦентр.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЦентр.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЦентр.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЦентр.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЦентр = Элементы.Добавить("КТС_ГруппаЦентр", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЦентр, ПараметрыГруппыЦентр);
	
	ПараметрыГруппыПраво = Новый Структура;
	ПараметрыГруппыПраво.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыПраво.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыПраво.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыПраво.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыПраво.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыПраво.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаПраво = Элементы.Добавить("КТС_ГруппаПраво", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаПраво, ПараметрыГруппыПраво);
	
	ПараметрыГруппыАдресДоставки = Новый Структура;
	ПараметрыГруппыАдресДоставки.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыАдресДоставки.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыАдресДоставки.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыАдресДоставки.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаАдресДоставки = Элементы.Добавить("КТС_ГруппаАдресДоставки",  Тип("ГруппаФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(ГруппаАдресДоставки, ПараметрыГруппыАдресДоставки);
	

	
 	
		
	ПараметрыПеревозчик = Новый Структура;
	ПараметрыПеревозчик.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыПеревозчик.Вставить("ПутьКДанным", 				"Объект.КТС_Перевозчик");
	ПараметрыПеревозчик.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыПеревозчик.Вставить("Ширина", 						30);
	ПараметрыПеревозчик.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыПеревозчик.Вставить("КнопкаВыбора", 				Ложь);
	ПараметрыПеревозчик.Вставить("КнопкаСпискаВыбора", 			Истина);
	ПараметрыПеревозчик.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыПеревозчик.Вставить("РедактированиеТекста", 		Ложь);
	Перевозчик = Элементы.Добавить("КТС_Перевозчик", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(Перевозчик, ПараметрыПеревозчик);
	Перевозчик.УстановитьДействие("ПриИзменении", 			"Перевозчик_ПриИзменении");
	Перевозчик.УстановитьДействие("НачалоВыбораИзСписка", 	"Перевозчик_НачалоВыбораИзСписка");
	
	
		
	ПараметрыАдресДоставки = Новый Структура;
	ПараметрыАдресДоставки.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыАдресДоставки.Вставить("ПутьКДанным", 				"Объект.КТС_АдресДоставки");
	ПараметрыАдресДоставки.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыАдресДоставки.Вставить("Ширина", 					30);
	ПараметрыАдресДоставки.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
	ПараметрыАдресДоставки.Вставить("КнопкаВыбора", 			Истина);
	ПараметрыАдресДоставки.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыАдресДоставки.Вставить("РедактированиеТекста", 	Ложь);
	АдресДоставки = Элементы.Добавить("КТС_АдресДоставки", Тип("ПолеФормы"), ГруппаАдресДоставки);
	ЗаполнитьЗначенияСвойств(АдресДоставки, ПараметрыАдресДоставки);
	АдресДоставки.УстановитьДействие("ПриИзменении", "АдресДоставки_ПриИзменении");
	АдресДоставки.УстановитьДействие("НачалоВыбора", "АдресДоставки_НачалоВыбора");
	
	
	
	КомандаАдресПартнера = ЭтаФорма.Команды.Добавить("КомандаАдресПартнера");
    КомандаАдресПартнера.Действие = "ЗаполнитьАдресПартнераПоУмолчанию";
	КомандаАдресПартнера.Заголовок = "Заполнить";
	
	ПараметрыКнопкаАдресПартнера = Новый Структура;
	ПараметрыКнопкаАдресПартнера.Вставить("ИмяКоманды", "КомандаАдресПартнера");
	КнопкаАдресПартнера = Элементы.Добавить("КнопкаАдресПартнера", Тип("КнопкаФормы"), ГруппаАдресДоставки);
	ЗаполнитьЗначенияСвойств(КнопкаАдресПартнера, ПараметрыКнопкаАдресПартнера);

	
	ПараметрыОтделениеНовойПочты = Новый Структура;
	ПараметрыОтделениеНовойПочты.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыОтделениеНовойПочты.Вставить("ПутьКДанным", 				"Объект.КТС_ОтделениеНовойПочты");
	ПараметрыОтделениеНовойПочты.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыОтделениеНовойПочты.Вставить("Ширина", 					30);
	ПараметрыОтделениеНовойПочты.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыОтделениеНовойПочты.Вставить("КнопкаВыбора", 		 		Истина);
    ПараметрыОтделениеНовойПочты.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыОтделениеНовойПочты.Вставить("РедактированиеТекста", 		Ложь);
	ОтделениеНовойПочты = Элементы.Добавить("КТС_ОтделениеНовойПочты", Тип("ПолеФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(ОтделениеНовойПочты, ПараметрыОтделениеНовойПочты);
	ОтделениеНовойПочты.УстановитьДействие("НачалоВыбора", "ОтделениеНовойПочты_НачалоВыбора");

		
	ПараметрыКонтактноеЛицо = Новый Структура;
	ПараметрыКонтактноеЛицо.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыКонтактноеЛицо.Вставить("ПутьКДанным", 				"Объект.КТС_КонтактноеЛицо");
	ПараметрыКонтактноеЛицо.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыКонтактноеЛицо.Вставить("Ширина", 						30);
	ПараметрыКонтактноеЛицо.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	ПараметрыКонтактноеЛицо.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыКонтактноеЛицо.Вставить("РедактированиеТекста", 		Истина);
	КонтактноеЛицо = Элементы.Добавить("КТС_КонтактноеЛицо", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(КонтактноеЛицо, ПараметрыКонтактноеЛицо);
	
	ПараметрыОбъявленнаяСтоимость = Новый Структура;
	ПараметрыОбъявленнаяСтоимость.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыОбъявленнаяСтоимость.Вставить("ПутьКДанным", 				"Объект.КТС_ОбъявленнаяСтоимость");
	ПараметрыОбъявленнаяСтоимость.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыОбъявленнаяСтоимость.Вставить("Ширина", 					30);
	ПараметрыОбъявленнаяСтоимость.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	ПараметрыОбъявленнаяСтоимость.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыОбъявленнаяСтоимость.Вставить("РедактированиеТекста", 		Истина);
	ОбъявленнаяСтоимость = Элементы.Добавить("КТС_ОбъявленнаяСтоимость", Тип("ПолеФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(ОбъявленнаяСтоимость, ПараметрыОбъявленнаяСтоимость);
	
	ПараметрыГруппыДополнительно = Новый Структура;
	ПараметрыГруппыДополнительно.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыДополнительно.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыДополнительно.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыДополнительно.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыДополнительно.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыДополнительно.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаДополнительно = Элементы.Добавить("КТС_ГруппаДополнительно",  Тип("ГруппаФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(ГруппаДополнительно, ПараметрыГруппыДополнительно);

	ПараметрыПлатитПолучатель = Новый Структура;
	ПараметрыПлатитПолучатель.Вставить("Вид", 						ВидПоляФормы.ПолеФлажка);
	ПараметрыПлатитПолучатель.Вставить("ПутьКДанным", 				"Объект.КТС_ПлатитПолучатель");
	ПараметрыПлатитПолучатель.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыПлатитПолучатель.Вставить("Ширина", 					30);
	ПараметрыПлатитПолучатель.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	ПараметрыПлатитПолучатель.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыПлатитПолучатель.Вставить("РедактированиеТекста", 		Ложь);
	ПлатитПолучатель = Элементы.Добавить("КТС_ПлатитПолучатель", Тип("ПолеФормы"), ГруппаДополнительно);
	ЗаполнитьЗначенияСвойств(ПлатитПолучатель, ПараметрыПлатитПолучатель);


 	ПараметрыВозвратнаяДоставка = Новый Структура;
	ПараметрыВозвратнаяДоставка.Вставить("Вид", 					ВидПоляФормы.ПолеФлажка);
	ПараметрыВозвратнаяДоставка.Вставить("ПутьКДанным", 			"Объект.КТС_ВозвратнаяДоставка");
	ПараметрыВозвратнаяДоставка.Вставить("РастягиватьПоГоризонтали",Ложь);
	ПараметрыВозвратнаяДоставка.Вставить("Ширина", 					30);
	ПараметрыВозвратнаяДоставка.Вставить("ЦветФона", 				Новый Цвет(217, 211, 185));
	ПараметрыВозвратнаяДоставка.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыВозвратнаяДоставка.Вставить("РедактированиеТекста", 	Ложь);
	ВозвратнаяДоставка = Элементы.Добавить("КТС_ВозвратнаяДоставка", Тип("ПолеФормы"), ГруппаДополнительно);
	ЗаполнитьЗначенияСвойств(ВозвратнаяДоставка, ПараметрыВозвратнаяДоставка);

	

	
//	Элементы = ЭтаФорма.Элементы;	
//	
//	ОбщаяБиблиотека.ПодменитьДействиеУправляемоеПриложение(ЭтаФорма, "ПриИзменении", "Партнер", "МаршрутыПартнерПриИзменении");
//	
//	Реквизиты = Новый Массив;
//	Реквизиты.Добавить(Новый РеквизитФормы("МаршрутыИмяБиблиотеки", Новый ОписаниеТипов("Строка")));
//	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
//	ЭтаФорма.МаршрутыИмяБиблиотеки = МаршрутыИмяБиблиотеки;
//	
//	
//	ПараметрыГруппы = Новый Структура;
//	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
//	ПараметрыГруппы.Вставить("Заголовок", 					"КТС доставляет");
//	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
//	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
//	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
//	ПараметрыГруппы.Вставить("Отображение", 				ОтображениеОбычнойГруппы.РамкаГруппы);
//	ГруппаДоставка = Элементы.Добавить("ГруппаДоставка", 	Тип("ГруппаФормы"));
//	ЗаполнитьЗначенияСвойств(ГруппаДоставка, ПараметрыГруппы);
//																		 
//	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, Элементы.ГруппаПодвал);
//	
//	ПараметрыПеревозчик = Новый Структура;
//	ПараметрыПеревозчик.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
//	ПараметрыПеревозчик.Вставить("ПутьКДанным", 				"Объект.КТС_Перевозчик");
//	ПараметрыПеревозчик.Вставить("РастягиватьПоГоризонтали", 	Ложь);
//	ПараметрыПеревозчик.Вставить("Ширина", 						30);
//	ПараметрыПеревозчик.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
//	ПараметрыПеревозчик.Вставить("КнопкаВыбора", 				Ложь);
//	ПараметрыПеревозчик.Вставить("КнопкаСпискаВыбора", 			Истина);
//	ПараметрыПеревозчик.Вставить("КнопкаОчистки", 				Истина);
//	ПараметрыПеревозчик.Вставить("РедактированиеТекста", 		Ложь);
//	Перевозчик = Элементы.Добавить("КТС_Перевозчик", Тип("ПолеФормы"), ГруппаДоставка);
//	ЗаполнитьЗначенияСвойств(Перевозчик, ПараметрыПеревозчик);
//	Перевозчик.УстановитьДействие("ПриИзменении", 			"Перевозчик_ПриИзменении");
//	Перевозчик.УстановитьДействие("НачалоВыбораИзСписка", 	"Перевозчик_НачалоВыбораИзСписка");
//		
//	
//	ПараметрыАдресДоставки = Новый Структура;
//	ПараметрыАдресДоставки.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
//	ПараметрыАдресДоставки.Вставить("ПутьКДанным", 				"Объект.КТС_АдресДоставки");
//	ПараметрыАдресДоставки.Вставить("РастягиватьПоГоризонтали", Ложь);
//	ПараметрыАдресДоставки.Вставить("Ширина", 					30);
//	ПараметрыАдресДоставки.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
//	ПараметрыАдресДоставки.Вставить("КнопкаВыбора", 			Истина);
//	ПараметрыАдресДоставки.Вставить("КнопкаОчистки", 			Истина);
//	ПараметрыАдресДоставки.Вставить("РедактированиеТекста", 	Ложь);
//	АдресДоставки = Элементы.Добавить("КТС_АдресДоставки", Тип("ПолеФормы"), ГруппаДоставка);
//	ЗаполнитьЗначенияСвойств(АдресДоставки, ПараметрыАдресДоставки);
//	АдресДоставки.УстановитьДействие("ПриИзменении", "АдресДоставки_ПриИзменении");
//	АдресДоставки.УстановитьДействие("НачалоВыбора", "АдресДоставки_НачалоВыбора");
//	
//	КомандаАдресПартнера = ЭтаФорма.Команды.Добавить("КомандаАдресПартнера");
//	КомандаАдресПартнера.Действие = "ЗаполнитьАдресПартнераПоУмолчанию";
//	КомандаАдресПартнера.Заголовок = "Заполнить";
//	
//	ПараметрыКнопкаАдресПартнера = Новый Структура;
//	ПараметрыКнопкаАдресПартнера.Вставить("ИмяКоманды", "КомандаАдресПартнера");
//	КнопкаАдресПартнера = Элементы.Добавить("КнопкаАдресПартнера", Тип("КнопкаФормы"), ГруппаДоставка);
//	ЗаполнитьЗначенияСвойств(КнопкаАдресПартнера, ПараметрыКнопкаАдресПартнера);
//	
//	ПараметрыОтделениеНовойПочты = Новый Структура;
//	ПараметрыОтделениеНовойПочты.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
//	ПараметрыОтделениеНовойПочты.Вставить("ПутьКДанным", 				"Объект.КТС_ОтделениеНовойПочты");
//	ПараметрыОтделениеНовойПочты.Вставить("РастягиватьПоГоризонтали", 	Ложь);
//	ПараметрыОтделениеНовойПочты.Вставить("Ширина", 					30);
//	ПараметрыОтделениеНовойПочты.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
//	ПараметрыОтделениеНовойПочты.Вставить("КнопкаОчистки", 				Истина);
//	ПараметрыОтделениеНовойПочты.Вставить("РедактированиеТекста", 		Ложь);
//	ОтделениеНовойПочты = Элементы.Добавить("ОтделениеНовойПочты", Тип("ПолеФормы"), ГруппаДоставка);
//	ЗаполнитьЗначенияСвойств(ОтделениеНовойПочты, ПараметрыОтделениеНовойПочты);
	
КонецПроцедуры

Процедура ПодготовитьРеализациюТоваровУслуг(ЭтаФорма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки) Экспорт

	Элементы = ЭтаФорма.Элементы;	
	Команды	 = ЭтаФорма.Команды;
    Объект	 = ЭтаФорма.Объект;
	
	ОбщаяБиблиотека.ПодменитьДействиеУправляемоеПриложение(ЭтаФорма, "ПриИзменении", "Партнер", "МаршрутыПартнерПриИзменении");
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("МаршрутыИмяБиблиотеки", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.МаршрутыИмяБиблиотеки = МаршрутыИмяБиблиотеки;
	
	
	
	// ГРУППЫ
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Заголовок", 					"КТС доставляет");
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("Отображение", 			ОтображениеОбычнойГруппы.РамкаГруппы);

	ГруппаДоставка = Элементы.Добавить("ГруппаДоставка", 	Тип("ГруппаФормы"));
	ЗаполнитьЗначенияСвойств(ГруппаДоставка, ПараметрыГруппы);
	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, Элементы.ГруппаСчетФактура);	
	
	ПараметрыГруппыЛево = Новый Структура;
	ПараметрыГруппыЛево.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЛево.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЛево.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЛево.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЛево.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЛево.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЛево = Элементы.Добавить("КТС_ГруппаЛево", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЛево, ПараметрыГруппыЛево);
	

	ПараметрыГруппыЦентр = Новый Структура;
	ПараметрыГруппыЦентр.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЦентр.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЦентр.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЦентр.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЦентр.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЦентр.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЦентр = Элементы.Добавить("КТС_ГруппаЦентр", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЦентр, ПараметрыГруппыЦентр);
	
	ПараметрыГруппыПраво = Новый Структура;
	ПараметрыГруппыПраво.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыПраво.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыПраво.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыПраво.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыПраво.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыПраво.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаПраво = Элементы.Добавить("КТС_ГруппаПраво", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаПраво, ПараметрыГруппыПраво);
	
	ПараметрыГруппыАдресДоставки = Новый Структура;
	ПараметрыГруппыАдресДоставки.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыАдресДоставки.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыАдресДоставки.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыАдресДоставки.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаАдресДоставки = Элементы.Добавить("КТС_ГруппаАдресДоставки",  Тип("ГруппаФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(ГруппаАдресДоставки, ПараметрыГруппыАдресДоставки);
	

	
 	
		
	ПараметрыПеревозчик = Новый Структура;
	ПараметрыПеревозчик.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыПеревозчик.Вставить("ПутьКДанным", 				"Объект.КТС_Перевозчик");
	ПараметрыПеревозчик.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыПеревозчик.Вставить("Ширина", 						30);
	ПараметрыПеревозчик.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыПеревозчик.Вставить("КнопкаВыбора", 				Ложь);
	ПараметрыПеревозчик.Вставить("КнопкаСпискаВыбора", 			Истина);
	ПараметрыПеревозчик.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыПеревозчик.Вставить("РедактированиеТекста", 		Ложь);
	Перевозчик = Элементы.Добавить("КТС_Перевозчик", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(Перевозчик, ПараметрыПеревозчик);
	Перевозчик.УстановитьДействие("ПриИзменении", 			"Перевозчик_ПриИзменении");
	Перевозчик.УстановитьДействие("НачалоВыбораИзСписка", 	"Перевозчик_НачалоВыбораИзСписка");
	
	
		
	ПараметрыАдресДоставки = Новый Структура;
	ПараметрыАдресДоставки.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыАдресДоставки.Вставить("ПутьКДанным", 				"Объект.КТС_АдресДоставки");
	ПараметрыАдресДоставки.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыАдресДоставки.Вставить("Ширина", 					30);
	ПараметрыАдресДоставки.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
	ПараметрыАдресДоставки.Вставить("КнопкаВыбора", 			Истина);
	ПараметрыАдресДоставки.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыАдресДоставки.Вставить("РедактированиеТекста", 	Ложь);
	АдресДоставки = Элементы.Добавить("КТС_АдресДоставки", Тип("ПолеФормы"), ГруппаАдресДоставки);
	ЗаполнитьЗначенияСвойств(АдресДоставки, ПараметрыАдресДоставки);
	АдресДоставки.УстановитьДействие("ПриИзменении", "АдресДоставки_ПриИзменении");
	АдресДоставки.УстановитьДействие("НачалоВыбора", "АдресДоставки_НачалоВыбора");
	
	
	
	КомандаАдресПартнера = ЭтаФорма.Команды.Добавить("КомандаАдресПартнера");
    КомандаАдресПартнера.Действие = "ЗаполнитьАдресПартнераПоУмолчанию";
	КомандаАдресПартнера.Заголовок = "Заполнить";
	
	ПараметрыКнопкаАдресПартнера = Новый Структура;
	ПараметрыКнопкаАдресПартнера.Вставить("ИмяКоманды", "КомандаАдресПартнера");
	КнопкаАдресПартнера = Элементы.Добавить("КнопкаАдресПартнера", Тип("КнопкаФормы"), ГруппаАдресДоставки);
	ЗаполнитьЗначенияСвойств(КнопкаАдресПартнера, ПараметрыКнопкаАдресПартнера);

	
	ПараметрыОтделениеНовойПочты = Новый Структура;
	ПараметрыОтделениеНовойПочты.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыОтделениеНовойПочты.Вставить("ПутьКДанным", 				"Объект.КТС_ОтделениеНовойПочты");
	ПараметрыОтделениеНовойПочты.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыОтделениеНовойПочты.Вставить("Ширина", 					30);
	ПараметрыОтделениеНовойПочты.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыОтделениеНовойПочты.Вставить("КнопкаВыбора", 		 		Истина);
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыОтделениеНовойПочты.Вставить("ТолькоПросмотр", 		Истина);
	КонецЕсли;
    ПараметрыОтделениеНовойПочты.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыОтделениеНовойПочты.Вставить("РедактированиеТекста", 		Ложь);
	ОтделениеНовойПочты = Элементы.Добавить("КТС_ОтделениеНовойПочты", Тип("ПолеФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(ОтделениеНовойПочты, ПараметрыОтделениеНовойПочты);
	ОтделениеНовойПочты.УстановитьДействие("НачалоВыбора", "ОтделениеНовойПочты_НачалоВыбора");


		
	ПараметрыКонтактноеЛицо = Новый Структура;
	ПараметрыКонтактноеЛицо.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыКонтактноеЛицо.Вставить("ПутьКДанным", 				"Объект.КТС_КонтактноеЛицо");
	ПараметрыКонтактноеЛицо.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыКонтактноеЛицо.Вставить("Ширина", 						30);
	ПараметрыКонтактноеЛицо.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыКонтактноеЛицо.Вставить("ТолькоПросмотр", 			Истина);
	КонецЕсли;
	ПараметрыКонтактноеЛицо.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыКонтактноеЛицо.Вставить("РедактированиеТекста", 		Истина);
	КонтактноеЛицо = Элементы.Добавить("КТС_КонтактноеЛицо", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(КонтактноеЛицо, ПараметрыКонтактноеЛицо);
	
	ПараметрыОбъявленнаяСтоимость = Новый Структура;
	ПараметрыОбъявленнаяСтоимость.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыОбъявленнаяСтоимость.Вставить("ПутьКДанным", 				"Объект.КТС_ОбъявленнаяСтоимость");
	ПараметрыОбъявленнаяСтоимость.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыОбъявленнаяСтоимость.Вставить("Ширина", 					30);
	ПараметрыОбъявленнаяСтоимость.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыОбъявленнаяСтоимость.Вставить("ТолькоПросмотр", 		Истина);
	КонецЕсли;
	ПараметрыОбъявленнаяСтоимость.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыОбъявленнаяСтоимость.Вставить("РедактированиеТекста", 		Истина);
	ОбъявленнаяСтоимость = Элементы.Добавить("КТС_ОбъявленнаяСтоимость", Тип("ПолеФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(ОбъявленнаяСтоимость, ПараметрыОбъявленнаяСтоимость);
	
	ПараметрыГруппыДополнительно = Новый Структура;
	ПараметрыГруппыДополнительно.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыДополнительно.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыДополнительно.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыДополнительно.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыДополнительно.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыДополнительно.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаДополнительно = Элементы.Добавить("КТС_ГруппаДополнительно",  Тип("ГруппаФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(ГруппаДополнительно, ПараметрыГруппыДополнительно);

	ПараметрыПлатитПолучатель = Новый Структура;
	ПараметрыПлатитПолучатель.Вставить("Вид", 						ВидПоляФормы.ПолеФлажка);
	ПараметрыПлатитПолучатель.Вставить("ПутьКДанным", 				"Объект.КТС_ПлатитПолучатель");
	ПараметрыПлатитПолучатель.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыПлатитПолучатель.Вставить("Ширина", 					30);
	ПараметрыПлатитПолучатель.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыПлатитПолучатель.Вставить("ТолькоПросмотр", 	Истина);
	КонецЕсли;
	ПараметрыПлатитПолучатель.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыПлатитПолучатель.Вставить("РедактированиеТекста", 		Ложь);
	ПлатитПолучатель = Элементы.Добавить("КТС_ПлатитПолучатель", Тип("ПолеФормы"), ГруппаДополнительно);
	ЗаполнитьЗначенияСвойств(ПлатитПолучатель, ПараметрыПлатитПолучатель);


 	ПараметрыВозвратнаяДоставка = Новый Структура;
	ПараметрыВозвратнаяДоставка.Вставить("Вид", 					ВидПоляФормы.ПолеФлажка);
	ПараметрыВозвратнаяДоставка.Вставить("ПутьКДанным", 			"Объект.КТС_ВозвратнаяДоставка");
	ПараметрыВозвратнаяДоставка.Вставить("РастягиватьПоГоризонтали",Ложь);
	ПараметрыВозвратнаяДоставка.Вставить("Ширина", 					30);
	ПараметрыВозвратнаяДоставка.Вставить("ЦветФона", 				Новый Цвет(217, 211, 185));
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыВозвратнаяДоставка.Вставить("ТолькоПросмотр", 		Истина);
	КонецЕсли;
	ПараметрыВозвратнаяДоставка.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыВозвратнаяДоставка.Вставить("РедактированиеТекста", 	Ложь);
	ВозвратнаяДоставка = Элементы.Добавить("КТС_ВозвратнаяДоставка", Тип("ПолеФормы"), ГруппаДополнительно);
	ЗаполнитьЗначенияСвойств(ВозвратнаяДоставка, ПараметрыВозвратнаяДоставка);

	
	
	
КонецПроцедуры

Процедура ПодготовитьВозвратТоваровПоставщику(ЭтаФорма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки) Экспорт

	Элементы = ЭтаФорма.Элементы;	
	
	Команды	 = ЭтаФорма.Команды;
	
	Объект	 = ЭтаФорма.Объект;


	
	ОбщаяБиблиотека.ПодменитьДействиеУправляемоеПриложение(ЭтаФорма, "ПриИзменении", "Партнер", "МаршрутыПартнерПриИзменении");
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("МаршрутыИмяБиблиотеки", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.МаршрутыИмяБиблиотеки = МаршрутыИмяБиблиотеки;
	
	
	
	// ГРУППЫ
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Заголовок", 					"КТС доставляет");
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("Отображение", 			ОтображениеОбычнойГруппы.РамкаГруппы);
	ГруппаДоставка = Элементы.Добавить("ГруппаДоставка", 	Тип("ГруппаФормы"));
	ЗаполнитьЗначенияСвойств(ГруппаДоставка, ПараметрыГруппы);
	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, Элементы.ГруппаПодвал);	
	
	ПараметрыГруппыЛево = Новый Структура;
	ПараметрыГруппыЛево.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЛево.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЛево.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЛево.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЛево.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЛево.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЛево = Элементы.Добавить("КТС_ГруппаЛево", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЛево, ПараметрыГруппыЛево);
	
	ПараметрыГруппыЦентр = Новый Структура;
	ПараметрыГруппыЦентр.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЦентр.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЦентр.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЦентр.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЦентр.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЦентр.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЦентр = Элементы.Добавить("КТС_ГруппаЦентр", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЦентр, ПараметрыГруппыЦентр);
	
	ПараметрыГруппыПраво = Новый Структура;
	ПараметрыГруппыПраво.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыПраво.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыПраво.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыПраво.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыПраво.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыПраво.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаПраво = Элементы.Добавить("КТС_ГруппаПраво", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаПраво, ПараметрыГруппыПраво);
	
	ПараметрыГруппыАдресДоставки = Новый Структура;
	ПараметрыГруппыАдресДоставки.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыАдресДоставки.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыАдресДоставки.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыАдресДоставки.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаАдресДоставки = Элементы.Добавить("КТС_ГруппаАдресДоставки",  Тип("ГруппаФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(ГруппаАдресДоставки, ПараметрыГруппыАдресДоставки);
	
	
 	
		
	ПараметрыПеревозчик = Новый Структура;
	ПараметрыПеревозчик.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыПеревозчик.Вставить("ПутьКДанным", 				"Объект.КТС_Перевозчик");
	ПараметрыПеревозчик.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыПеревозчик.Вставить("Ширина", 						30);
	ПараметрыПеревозчик.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыПеревозчик.Вставить("КнопкаВыбора", 				Ложь);
	ПараметрыПеревозчик.Вставить("КнопкаСпискаВыбора", 			Истина);
	ПараметрыПеревозчик.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыПеревозчик.Вставить("РедактированиеТекста", 		Ложь);
	Перевозчик = Элементы.Добавить("КТС_Перевозчик", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(Перевозчик, ПараметрыПеревозчик);
	Перевозчик.УстановитьДействие("ПриИзменении", 			"Перевозчик_ПриИзменении");
	Перевозчик.УстановитьДействие("НачалоВыбораИзСписка", 	"Перевозчик_НачалоВыбораИзСписка");
	
	
		
	ПараметрыАдресДоставки = Новый Структура;
	ПараметрыАдресДоставки.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыАдресДоставки.Вставить("ПутьКДанным", 				"Объект.КТС_АдресДоставки");
	ПараметрыАдресДоставки.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыАдресДоставки.Вставить("Ширина", 					30);
	ПараметрыАдресДоставки.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
	ПараметрыАдресДоставки.Вставить("КнопкаВыбора", 			Истина);
	ПараметрыАдресДоставки.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыАдресДоставки.Вставить("РедактированиеТекста", 	Ложь);
	АдресДоставки = Элементы.Добавить("КТС_АдресДоставки", Тип("ПолеФормы"), ГруппаАдресДоставки);
	ЗаполнитьЗначенияСвойств(АдресДоставки, ПараметрыАдресДоставки);
	АдресДоставки.УстановитьДействие("ПриИзменении", "АдресДоставки_ПриИзменении");
	АдресДоставки.УстановитьДействие("НачалоВыбора", "АдресДоставки_НачалоВыбора");
	
	
	
	КомандаАдресПартнера = ЭтаФорма.Команды.Добавить("КомандаАдресПартнера");
    КомандаАдресПартнера.Действие = "ЗаполнитьАдресПартнераПоУмолчанию";
	КомандаАдресПартнера.Заголовок = "Заполнить";
	
	ПараметрыКнопкаАдресПартнера = Новый Структура;
	ПараметрыКнопкаАдресПартнера.Вставить("ИмяКоманды", "КомандаАдресПартнера");
	КнопкаАдресПартнера = Элементы.Добавить("КнопкаАдресПартнера", Тип("КнопкаФормы"), ГруппаАдресДоставки);
	ЗаполнитьЗначенияСвойств(КнопкаАдресПартнера, ПараметрыКнопкаАдресПартнера);

	
	ПараметрыОтделениеНовойПочты = Новый Структура;
	ПараметрыОтделениеНовойПочты.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыОтделениеНовойПочты.Вставить("Заголовок", 					"ОтделенияПеревозчика");
	ПараметрыОтделениеНовойПочты.Вставить("ПутьКДанным", 				"Объект.КТС_ОтделениеНовойПочты");
	ПараметрыОтделениеНовойПочты.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыОтделениеНовойПочты.Вставить("Ширина", 					30);
	ПараметрыОтделениеНовойПочты.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыОтделениеНовойПочты.Вставить("Доступность", Истина);
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыОтделениеНовойПочты.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	ПараметрыОтделениеНовойПочты.Вставить("КнопкаВыбора", 		 		Истина);
    ПараметрыОтделениеНовойПочты.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыОтделениеНовойПочты.Вставить("РедактированиеТекста", 		Ложь);
	ОтделениеНовойПочты = Элементы.Добавить("КТС_ОтделениеНовойПочты", Тип("ПолеФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(ОтделениеНовойПочты, ПараметрыОтделениеНовойПочты);
	ОтделениеНовойПочты.УстановитьДействие("НачалоВыбора", "ОтделениеНовойПочты_НачалоВыбора");

		
	ПараметрыКонтактноеЛицо = Новый Структура;
	ПараметрыКонтактноеЛицо.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыКонтактноеЛицо.Вставить("ПутьКДанным", 				"Объект.КТС_КонтактноеЛицо");
	ПараметрыКонтактноеЛицо.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыКонтактноеЛицо.Вставить("Ширина", 						30);
	ПараметрыКонтактноеЛицо.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	ПараметрыКонтактноеЛицо.Вставить("Доступность", Истина);
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыКонтактноеЛицо.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	ПараметрыКонтактноеЛицо.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыКонтактноеЛицо.Вставить("РедактированиеТекста", 		Истина);
	КонтактноеЛицо = Элементы.Добавить("КТС_КонтактноеЛицо", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(КонтактноеЛицо, ПараметрыКонтактноеЛицо);
	
	ПараметрыОбъявленнаяСтоимость = Новый Структура;
	ПараметрыОбъявленнаяСтоимость.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыОбъявленнаяСтоимость.Вставить("ПутьКДанным", 				"Объект.КТС_ОбъявленнаяСтоимость");
	ПараметрыОбъявленнаяСтоимость.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыОбъявленнаяСтоимость.Вставить("Ширина", 					30);
	ПараметрыОбъявленнаяСтоимость.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	ПараметрыОбъявленнаяСтоимость.Вставить("Доступность", 				Истина);
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыОбъявленнаяСтоимость.Вставить("ТолькоПросмотр", 		Истина);
	КонецЕсли;
	ПараметрыОбъявленнаяСтоимость.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыОбъявленнаяСтоимость.Вставить("РедактированиеТекста", 		Истина);
	ОбъявленнаяСтоимость = Элементы.Добавить("КТС_ОбъявленнаяСтоимость", Тип("ПолеФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(ОбъявленнаяСтоимость, ПараметрыОбъявленнаяСтоимость);
	
	ПараметрыПлатитПолучатель = Новый Структура;
	ПараметрыПлатитПолучатель.Вставить("Вид", 						ВидПоляФормы.ПолеФлажка);
	ПараметрыПлатитПолучатель.Вставить("ПутьКДанным", 				"Объект.КТС_ПлатитПолучатель");
	ПараметрыПлатитПолучатель.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыПлатитПолучатель.Вставить("Ширина", 					30);
	ПараметрыПлатитПолучатель.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
	ПараметрыПлатитПолучатель.Вставить("Доступность", 				Истина);
	Если Объект.КТС_Перевозчик.Пустая() Тогда
		ПараметрыПлатитПолучатель.Вставить("ТолькоПросмотр", 	Истина);
	КонецЕсли;
	ПараметрыПлатитПолучатель.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыПлатитПолучатель.Вставить("РедактированиеТекста", 		Ложь);
	ПлатитПолучатель = Элементы.Добавить("КТС_ПлатитПолучатель", Тип("ПолеФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(ПлатитПолучатель, ПараметрыПлатитПолучатель);


	
КонецПроцедуры

Процедура ПодготовитьВнутреннееПотреблениеТоваров(ЭтаФорма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки) Экспорт
	
	Элементы = ЭтаФорма.Элементы;	
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("МаршрутыИмяБиблиотеки", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.МаршрутыИмяБиблиотеки = МаршрутыИмяБиблиотеки;
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Заголовок", 					"КТС доставляет");
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("Отображение", 				ОтображениеОбычнойГруппы.РамкаГруппы);
	ГруппаДоставка = Элементы.Добавить("ГруппаДоставка", 	Тип("ГруппаФормы"));
	ЗаполнитьЗначенияСвойств(ГруппаДоставка, ПараметрыГруппы);
	
	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, Элементы.Ответственный);
	
	ПараметрыАдресДоставки = Новый Структура;
	ПараметрыАдресДоставки.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыАдресДоставки.Вставить("ПутьКДанным", 				"Объект.КТС_АдресДоставки");
	ПараметрыАдресДоставки.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыАдресДоставки.Вставить("Ширина", 					30);
	ПараметрыАдресДоставки.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
	ПараметрыАдресДоставки.Вставить("КнопкаВыбора", 			Истина);
	ПараметрыАдресДоставки.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыАдресДоставки.Вставить("РедактированиеТекста", 	Ложь);
	АдресДоставки = Элементы.Добавить("КТС_АдресДоставки", Тип("ПолеФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(АдресДоставки, ПараметрыАдресДоставки);
	АдресДоставки.УстановитьДействие("НачалоВыбора", "АдресДоставки_НачалоВыбора");
	
КонецПроцедуры
 

Процедура ПодготовитьЗаказПоставщику(ЭтаФорма, ОбщаяБиблиотека, МаршрутыИмяБиблиотеки) Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	Команды  = ЭтаФорма.Команды;
	Объект	 = ЭтаФорма.Объект;
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("ВремяИДатаВыезда", Новый ОписаниеТипов("Строка")));
	Реквизиты.Добавить(Новый РеквизитФормы("МаршрутыИмяБиблиотеки", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.МаршрутыИмяБиблиотеки = МаршрутыИмяБиблиотеки;
	
	
	// ГРУППЫ
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Заголовок", 					"КТС доставляет");
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("Отображение", 			ОтображениеОбычнойГруппы.РамкаГруппы);
	ГруппаДоставка = Элементы.Добавить("ГруппаДоставка", 	Тип("ГруппаФормы"));
	ЗаполнитьЗначенияСвойств(ГруппаДоставка, ПараметрыГруппы);
	
	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, Элементы.ГруппаПодвал);	
	
	ПараметрыГруппыЛево = Новый Структура;
	ПараметрыГруппыЛево.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЛево.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЛево.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЛево.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЛево.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЛево.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЛево = Элементы.Добавить("КТС_ГруппаЛево", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЛево, ПараметрыГруппыЛево);
	
	ПараметрыГруппыЦентр = Новый Структура;
	ПараметрыГруппыЦентр.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЦентр.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЦентр.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЦентр.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЦентр.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЦентр.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЦентр = Элементы.Добавить("КТС_ГруппаЦентр", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаЦентр, ПараметрыГруппыЦентр);
	
	ПараметрыГруппыПраво = Новый Структура;
	ПараметрыГруппыПраво.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыПраво.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыПраво.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыПраво.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыПраво.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыПраво.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаПраво = Элементы.Добавить("КТС_ГруппаПраво", Тип("ГруппаФормы"), ГруппаДоставка);
	ЗаполнитьЗначенияСвойств(ГруппаПраво, ПараметрыГруппыПраво);
	

	
	// Элементы группы ЛЕВО
	
	ПараметрыСпособДоставки = Новый Структура;
	ПараметрыСпособДоставки.Вставить("Вид", 				ВидПоляФормы.ПолеВвода);
	ПараметрыСпособДоставки.Вставить("ПутьКДанным", 		"Объект.КТС_СпособДоставки");
	ПараметрыСпособДоставки.Вставить("КнопкаОчистки", 		Истина); 
	СпособДоставки = Элементы.Добавить("КТС_СпособДоставки", Тип("ПолеФормы"), ГруппаЛево);
    ЗаполнитьЗначенияСвойств(СпособДоставки, ПараметрыСпособДоставки);
	СпособДоставки.УстановитьДействие("ПриИзменении", 			"СпособДоставки_ПриИзменении");
	
	ПараметрыПеревозчик = Новый Структура;
	ПараметрыПеревозчик.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыПеревозчик.Вставить("ПутьКДанным", 				"Объект.КТС_Перевозчик");
	ПараметрыПеревозчик.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
	ПараметрыПеревозчик.Вставить("КнопкаВыбора", 				Ложь);
	Если Объект.КТС_СпособДоставки = Перечисления.КТС_СпособДоставки.НаСкладПеревозчика Тогда
		ПараметрыПеревозчик.Вставить("Доступность", Истина);
	Иначе
		ПараметрыПеревозчик.Вставить("Доступность", Ложь);
	КонецЕсли;
	ПараметрыПеревозчик.Вставить("КнопкаСпискаВыбора", 			Истина);
	ПараметрыПеревозчик.Вставить("КнопкаОчистки", 				Истина);
	ПараметрыПеревозчик.Вставить("РедактированиеТекста", 		Ложь);
	Перевозчик = Элементы.Добавить("КТС_Перевозчик", Тип("ПолеФормы"), ГруппаЛево);
	ЗаполнитьЗначенияСвойств(Перевозчик, ПараметрыПеревозчик);
	Перевозчик.УстановитьДействие("ПриИзменении", 			"Перевозчик_ПриИзменении");
	Перевозчик.УстановитьДействие("НачалоВыбораИзСписка", 	"Перевозчик_НачалоВыбораИзСписка");

	
	
	// Элементы группы ЦЕНТР
	
	ПараметрыНомерТТН = Новый Структура;
	ПараметрыНомерТТН.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
	ПараметрыНомерТТН.Вставить("ПутьКДанным", 				"Объект.КТС_НомерТТН");
	ПараметрыНомерТТН.Вставить("КнопкаОчистки", 				Истина);
	НомерТТН = Элементы.Добавить("КТС_НомерТТН", Тип("ПолеФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(НомерТТН, ПараметрыНомерТТН);
	
	ПараметрыАдресСкладаПеревозчика = Новый Структура;
	ПараметрыАдресСкладаПеревозчика.Вставить("Вид", 					ВидПоляФормы.ПолеВвода);
	ПараметрыАдресСкладаПеревозчика.Вставить("ПутьКДанным", 			"Объект.КТС_АдресСкладаПеревозчика");
	ПараметрыАдресСкладаПеревозчика.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
	Если Объект.КТС_СпособДоставки = Перечисления.КТС_СпособДоставки.НаСкладПеревозчика Тогда
		ПараметрыАдресСкладаПеревозчика.Вставить("Доступность", Истина);
	Иначе
		ПараметрыАдресСкладаПеревозчика.Вставить("Доступность", Ложь);
	КонецЕсли;
	ПараметрыАдресСкладаПеревозчика.Вставить("КнопкаВыбора", 			Истина);
	ПараметрыАдресСкладаПеревозчика.Вставить("КнопкаОчистки", 			Истина);
	ПараметрыАдресСкладаПеревозчика.Вставить("РедактированиеТекста", 	Ложь);
	АдресСкладаПеревозчика = Элементы.Добавить("КТС_АдресСкладаПеревозчика", Тип("ПолеФормы"), ГруппаЦентр);
	ЗаполнитьЗначенияСвойств(АдресСкладаПеревозчика, ПараметрыАдресСкладаПеревозчика);
	АдресСкладаПеревозчика.УстановитьДействие("ПриИзменении", "АдресДоставки_ПриИзменении");
	АдресСкладаПеревозчика.УстановитьДействие("НачалоВыбора", "АдресДоставки_НачалоВыбора");
	
	
	
	
	// Элементы группы ПРАВО
	
	ПараметрыНадписи = Новый Структура;
	ПараметрыНадписи.Вставить("Вид", 						ВидПоляФормы.ПолеНадписи);
	ПараметрыНадписи.Вставить("ПутьКДанным", 				"ВремяИДатаВыезда");
	ПараметрыНадписи.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Нет);
	ПараметрыНадписи.Вставить("РастягиватьПоГоризонтали", 	Ложь);
	ПараметрыНадписи.Вставить("Ширина", 					30);
	Надпись = Элементы.Добавить("ВремяИДатаВыезда", Тип("ПолеФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(Надпись, ПараметрыНадписи);

	ПараметрыМаршрут = Новый Структура;
	ПараметрыМаршрут.Вставить("Вид", 						 ВидПоляФормы.ПолеВвода);
	ПараметрыМаршрут.Вставить("ПутьКДанным", 				 "Объект.КТС_Маршрут");
	ПараметрыМаршрут.Вставить("ЦветФона", 					 Новый Цвет(210, 255, 210));
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("КТС_ПравоРедактироватьМаршруты") Тогда
		ПараметрыМаршрут.Вставить("КнопкаВыбора", Истина);
	Иначе	
		ПараметрыМаршрут.Вставить("КнопкаВыбора", Ложь);
	КонецЕсли; 
	Если Объект.КТС_СпособДоставки = Перечисления.КТС_СпособДоставки.НаСкладПеревозчика Тогда
		ПараметрыМаршрут.Вставить("Доступность", Истина);
	Иначе
		ПараметрыМаршрут.Вставить("Доступность", Ложь);
	КонецЕсли;
	ПараметрыМаршрут.Вставить("КнопкаСпискаВыбора", 		 Истина);
	ПараметрыМаршрут.Вставить("КнопкаОчистки", 				 Истина);
	ПараметрыМаршрут.Вставить("КнопкаОткрытия", 			 Ложь);
	ПараметрыМаршрут.Вставить("РедактированиеТекста", 		 Ложь);
	Маршрут = Элементы.Добавить("Маршрут", Тип("ПолеФормы"), ГруппаПраво);
	ЗаполнитьЗначенияСвойств(Маршрут, ПараметрыМаршрут);
	Маршрут.УстановитьДействие("ПриИзменении", 			"Маршруты_ПриИзменении");
	Маршрут.УстановитьДействие("НачалоВыбораИзСписка", 	"Маршруты_НачалоВыбораИзСписка");
	Маршрут.УстановитьДействие("ОбработкаВыбора", 		"Маршруты_ОбработкаВыбора");
	
КонецПроцедуры


Процедура ЗаполнитьМассивВыбораМаршруты(мФорма) Экспорт
	
	МассивВыбора 	= Новый Массив;
	ОбъектФормы		= мФорма.Объект;
	мЭлементы		= мФорма.Элементы;
	
	ПолучитьСписокАдресовПартнера(ОбъектФормы.Партнер, МассивВыбора);
	ПолучитьСписокСкладов(МассивВыбора);
	
	мЭлементы.АдресДоставки.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	
КонецПроцедуры

Процедура ЗаполнитьАдресДоставкиПоУмолчанию(мФорма) Экспорт
	
	МассивВыбора 	= Новый Массив;
	ОбъектФормы 	= мФорма.Объект;
	мЭлементы		= мФорма.Элементы;
	
	ПолучитьСписокАдресовПартнера(ОбъектФормы.Партнер, МассивВыбора);
	
	Если МассивВыбора.Количество() Тогда
		
		Если НЕ мЭлементы.Найти("АдресДоставки") = Неопределено Тогда
			
			ОбъектФормы.АдресДоставки = МассивВыбора[0];
			
		КонецЕсли;
		
	Иначе
		
		ОбъектФормы.АдресДоставки = "";
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Контактная информация

// Процедура добавляет возможность выбора адреса партнера по классификатору в 
// карточке пратнера
//
// Параметры:
//	мФорма - Управляема форма - форма карточки партнера
//
Процедура ПерерисоватьФорму(мФорма) Экспорт
	
	мЭлементы = мФорма.Элементы;
			
	//Адрес = мЭлементы.Найти("__КИ_Поле1");
	Адрес = мЭлементы.Найти("КонтактнаяИнформацияПоле0");
	Если Адрес <> Неопределено Тогда
		Адрес.РедактированиеТекста = Ложь;
		Адрес.КнопкаОчистки = Истина;
		Адрес.УстановитьДействие("НачалоВыбора", "ВызовКлиентскихПроцедура");
	КонецЕсли;
	
	//ДополнительныйАдрес = мЭлементы.Найти("__КИ_Поле2");
	ДополнительныйАдрес = мЭлементы.Найти("КонтактнаяИнформацияПоле3");
	Если ДополнительныйАдрес <> Неопределено Тогда
		ДополнительныйАдрес.РедактированиеТекста = Ложь;
		ДополнительныйАдрес.КнопкаОчистки = Истина;
		ДополнительныйАдрес.УстановитьДействие("НачалоВыбора", "ВызовКлиентскихПроцедура");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Дубли в заказе поставщику

Функция ПолучитьДублиНоменклатурыВЗаказеПоставщику(ЗаказПоставщику, мФорма) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	                      |	ЗаказПоставщикуТовары.Склад КАК Склад,
	                      |	ЗаказПоставщикуТовары.Количество КАК Количество,
	                      |	ЗаказПоставщикуТовары.Цена КАК Цена,
	                      |	ЗаказПоставщикуТовары.Отменено КАК Отменено
	                      |ПОМЕСТИТЬ КешНоменклатураТовары
	                      |ИЗ
	                      |	&Товары КАК ЗаказПоставщикуТовары
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешНоменклатураТовары.Номенклатура.Код КАК Код,
	                      |	КешНоменклатураТовары.Номенклатура.Артикул КАК Артикул,
	                      |	КешНоменклатураТовары.Номенклатура КАК Номенклатура,
	                      |	КешНоменклатураТовары.Склад КАК Склад,
	                      |	КешНоменклатураТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	СУММА(КешНоменклатураТовары.Количество) КАК Количество,
	                      |	СРЕДНЕЕ(КешНоменклатураТовары.Цена) КАК Цена,
	                      |	&ЗаказПоставщику КАК ЗаказПоставщику
	                      |ПОМЕСТИТЬ КешНоменклатура
	                      |ИЗ
	                      |	КешНоменклатураТовары КАК КешНоменклатураТовары
	                      |ГДЕ
	                      |	НЕ КешНоменклатураТовары.Отменено
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	КешНоменклатураТовары.Номенклатура.Код,
	                      |	КешНоменклатураТовары.Номенклатура.Артикул,
	                      |	КешНоменклатураТовары.Номенклатура,
	                      |	КешНоменклатураТовары.Склад,
	                      |	КешНоменклатураТовары.Номенклатура.ЕдиницаИзмерения
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаказПоставщикуТовары.Ссылка			КАК ЗаказПоставщику,
	                      |	ЗаказПоставщикуТовары.Номенклатура 		КАК Номенклатура,
	                      |	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	ЗаказПоставщикуТовары.Склад 			КАК Склад,
	                      |	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
	                      |	СРЕДНЕЕ(ЗаказПоставщикуТовары.Цена) 	КАК Цена,
	                      |	ЗаказПоставщикуТовары.Назначение 		КАК Назначение,
						  |	МАКСИМУМ(ЗаказПоставщикуТовары.DDP)		КАК DDP
	                      |ПОМЕСТИТЬ КешВсеДокументы
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	                      |ГДЕ
	                      |	ЗаказПоставщикуТовары.Ссылка.Дата МЕЖДУ &ДатаНачало И &ДатаОкончания
	                      |	И ЗаказПоставщикуТовары.Ссылка.Проведен
	                      |	И ЗаказПоставщикуТовары.Номенклатура В
	                      |			(ВЫБРАТЬ
	                      |				КешНоменклатура.Номенклатура
	                      |			ИЗ
	                      |				КешНоменклатура)
	                      |	И НЕ ЗаказПоставщикуТовары.Отменено
	                      |	И ЗаказПоставщикуТовары.Ссылка <> &ЗаказПоставщику
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЗаказПоставщикуТовары.Ссылка,
	                      |	ЗаказПоставщикуТовары.Номенклатура,
	                      |	ЗаказПоставщикуТовары.Номенклатура.ЕдиницаИзмерения,
	                      |	ЗаказПоставщикуТовары.Склад,
	                      |	ЗаказПоставщикуТовары.Назначение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТоварыКПоступлениюОстатки.ДокументПоступления КАК ЗаказПоставщику,
	                      |	ТоварыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
	                      |	ТоварыКПоступлениюОстатки.Склад КАК Склад,
	                      |	ТоварыКПоступлениюОстатки.КПоступлениюОстаток КАК КоличествоОстаток
	                      |ПОМЕСТИТЬ КешТоварыКПоступлению
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыКПоступлению.Остатки(
	                      |			,
	                      |			(ДокументПоступления, Номенклатура, Склад) В
	                      |				(ВЫБРАТЬ
	                      |					КешВсеДокументы.ЗаказПоставщику,
	                      |					КешВсеДокументы.Номенклатура,
	                      |					КешВсеДокументы.Склад
	                      |				ИЗ
	                      |					КешВсеДокументы)) КАК ТоварыКПоступлениюОстатки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешВсеДокументы.ЗаказПоставщику,
	                      |	КешВсеДокументы.ЗаказПоставщику.Партнер КАК Поставщик,
	                      |	ЕСТЬNULL(ДопСведения.Значение, """") КАК НомерТТН,
	                      |	КешВсеДокументы.Номенклатура,
	                      |	КешВсеДокументы.ЕдиницаИзмерения,
	                      |	КешВсеДокументы.Количество КАК Количество,
	                      |	ТоварыКПоступлению.КоличествоОстаток КАК КоличествоОстаток,
	                      |	КешВсеДокументы.Цена,
	                      |	КешВсеДокументы.Назначение КАК Назначение,
						  |	КешВсеДокументы.DDP КАК DDP
	                      |ПОМЕСТИТЬ КешДокументы
	                      |ИЗ
	                      |	КешВсеДокументы КАК КешВсеДокументы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТоварыКПоступлению КАК ТоварыКПоступлению
	                      |		ПО КешВсеДокументы.ЗаказПоставщику = ТоварыКПоступлению.ЗаказПоставщику
	                      |			И КешВсеДокументы.Номенклатура = ТоварыКПоступлению.Номенклатура
	                      |			И КешВсеДокументы.Склад = ТоварыКПоступлению.Склад
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения
	                      |		ПО (ДопСведения.Объект = КешВсеДокументы.ЗаказПоставщику)
	                      |			И (ДопСведения.Свойство = &Свойство)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешНоменклатура.Код КАК Код,
	                      |	КешНоменклатура.Артикул КАК Артикул,
	                      |	КешНоменклатура.Номенклатура КАК Номенклатура,
	                      |	КешНоменклатура.Количество КАК Количество,
	                      |	КешНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                      |	КешНоменклатура.Цена 				КАК Цена,
	                      |	КешДокументы.ЗаказПоставщику 		КАК ЗаказПоставщикуДоп,
	                      |	КешДокументы.Поставщик				КАК Поставщик,
	                      |	КешДокументы.НомерТТН 				КАК НомерТТН,
	                      |	КешДокументы.Количество 			КАК КоличествоДоп,
	                      |	КешДокументы.КоличествоОстаток 		КАК КоличествоОстатокДоп,
	                      |	КешДокументы.ЕдиницаИзмерения		КАК ЕдиницаИзмеренияДоп,
	                      |	КешДокументы.Цена 					КАК ЦенаДоп,
	                      |	КешДокументы.Назначение 			КАК Назначение,
						  |	КешДокументы.DDP 					КАК DDP
	                      |ИЗ
	                      |	КешНоменклатура КАК КешНоменклатура
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешДокументы КАК КешДокументы
	                      |		ПО КешНоменклатура.Номенклатура = КешДокументы.Номенклатура
	                      |			И &Поставщик = КешДокументы.Поставщик
	                      |ИТОГИ
	                      |	МАКСИМУМ(Код),
	                      |	МАКСИМУМ(Артикул),
	                      |	МАКСИМУМ(Количество),
	                      |	МАКСИМУМ(ЕдиницаИзмерения),
	                      |	МАКСИМУМ(Цена)
	                      |ПО
	                      |	Номенклатура");
						  
	ДатыВыборки = ПолучитьДатыИзКалендаря(4);						  
						  
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.УстановитьПараметр("Поставщик",  мФорма.Объект["Партнер"]);
	Запрос.УстановитьПараметр("Товары", мФорма.Объект["Товары"].Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачало", ДатыВыборки.ДатаНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатыВыборки.ДатаОкончания);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("ee52af95-fb1b-11e1-9d4d-001e673c80fc")));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат Неопределено;			
	КонецЕсли; 
	
	ДеревоЗначений = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоЗначений, мФорма.УникальныйИдентификатор);

КонецФункции // ПолучитьДублиНоменклатурыВЗаказеПоставщику()







////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// Заказ клиента

Процедура ПроведениеПоЗаказамКлиента(Источник, Отказ, РежимПроведения) Экспорт
	
	ПроведениеОбработкаЗаказовКлиента(Источник);
	
	Если Отказ = Ложь Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаОтменитьЗаказПодЗаказ();
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.ОтменитьЗаказПодЗаказ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Источник.Ссылка);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
	
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаОтменитьЗаказПодЗаказ()

	ТекстЗапроса = "
		|ВЫБРАТЬ
	 	|	Ссылка			КАК Заказ,
	 	|	КодСтроки		КАК КодСтроки,
	 	|	Номенклатура	КАК Номенклатура,
	 	|	Характеристика	КАК Характеристика,
		|	Ложь			КАК Выполнено,
		|	&Пользователь   КАК Ответственный
	 	|ИЗ
	 	|	Документ.ЗаказКлиента.Товары
		|ГДЕ
		|	Ссылка = &Ссылка
		|И	ОтменитьЗаказПодЗаказ = Истина
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОтменитьЗаказПодЗаказ()
 


////////////////////////////////////////////////////////////////////////////////
// Маршруты

Процедура ВыполнитьСозданиеЗадачиПоЗаказуПоставщику(Источник, Отказ, РежимПроведения) Экспорт

			
	Если Источник.КТС_Маршрут.Пустая() И НЕ  ПустаяСтрока(Источник.КТС_НомерТТН) И Источник.КТС_СпособДоставки = Перечисления.КТС_СпособДоставки.НаСкладПеревозчика  Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Небходимо указать маршрут, для Новой почты - «Ровно»",, "Объект.КТС_Маршрут");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Источник.КТС_НомерТТН)И Источник.КТС_СпособДоставки = Перечисления.КТС_СпособДоставки.НаСкладПеревозчика И  Источник.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению И НЕ  ПустаяСтрока(Источник.КТС_АдресСкладаПеревозчика) Тогда

		ТДата 			= ТекущаяДата();
		АдресДоставки 	= ПолучитьАдресАбонента(Источник.Склад);
		Коментарии		= ПолучитьКомментарийКЗадачеЗаказаПоставщику(Источник);		
			
		НовоеМесто = Справочники.МестаДоставки.СоздатьЭлемент();
		
		НовоеМесто.Владелец		 					= Источник.Склад;
		НовоеМесто.АдресДоставки					= АдресДоставки;
		НовоеМесто.ЗаказПоставщика					= Источник.Ссылка;
		НовоеМесто.Ответственный 					= ПараметрыСеанса.ТекущийПользователь;
		НовоеМесто.ТекстЗадачи						= Коментарии;
		НовоеМесто.Транзит		 					= Ложь;
		НовоеМесто.ТранзитныйСклад					= Справочники.Склады.ПустаяСсылка();
		НовоеМесто.ЗаполнятьУникальныйИдентификатор = Истина;
		НовоеМесто.ЭтоЗадача	 					= Истина;	
		НовоеМесто.УстановитьНовыйКод();
		
		Попытка
			НовоеМесто.Записать();			
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
			
		
		НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТДата);
		НаборЗаписей.Отбор.Место.Установить(НовоеМесто.Ссылка);
		
		Запись 				  	= НаборЗаписей.Добавить();
		Запись.Период		  	= ТДата;
		Запись.Отправитель  	= Источник.КТС_Перевозчик;
		Запись.Место		  	= НовоеМесто.Ссылка;
		Запись.СтатусОтгрузки 	= Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена;
		Запись.Пользователь	 	= ПараметрыСеанса.ТекущийПользователь;
		Запись.АдресОтправителя	= Источник.КТС_АдресСкладаПеревозчика;
		Запись.ВариантМаршрута	= Источник.КТС_Маршрут;
		
		Попытка
			НаборЗаписей.Записать();			
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		ЗаписатьКТС_ГеографическиеРасположенияПартнеров(Источник.Склад, АдресДоставки, Отказ);	
		ЗаписатьКТС_ГеографическиеРасположенияПартнеров(Источник.КТС_Перевозчик, Источник.КТС_АдресСкладаПеревозчика, Отказ);
	
	КонецЕсли;
	
	

КонецПроцедуры

Функция ПолучитьАдресАбонента(Абонент)

	Запрос = Новый Запрос;
	
	Если ТипЗнч(Абонент) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Представление КАК Адрес
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация
		               |ГДЕ
		               |	Ссылка = &Абонент
		               |	И Представление <> """"
		               |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Представление КАК Адрес
		               |ИЗ
		               |	Справочник.Склады.КонтактнаяИнформация
		               |ГДЕ
		               |	Ссылка = &Абонент
		               |	И Представление <> """"
		               |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";			   
	КонецЕсли;
				   
	Запрос.УстановитьПараметр("Абонент", Абонент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Адрес, "");

КонецФункции // ПолучитьАдресАбонента()

Процедура ЗаписатьКТС_ГеографическиеРасположенияПартнеров(Владелец, АдресДоставки, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Владелец,
		|	ГородСклад		
		|ИЗ
		|	Справочник.КТС_ГеографическиеРасположенияПартнеров
		|ГДЕ
		|	Владелец 	= &Владелец
		|И	ГородСклад	= &ГородСклад
		|";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ГородСклад", АдресДоставки);
    Если Запрос.Выполнить().Пустой() Тогда		
		НовыйОбъект = Справочники.КТС_ГеографическиеРасположенияПартнеров.СоздатьЭлемент();
		НовыйОбъект.Владелец 	= Владелец;
		НовыйОбъект.ГородСклад 	= АдресДоставки;
		НовыйОбъект.УстановитьНовыйКод();
		Попытка
			НовыйОбъект.Записать();
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;
	КонецЕсли;
	

КонецПроцедуры


Функция ПолучитьКомментарийКЗадачеЗаказаПоставщику(Источник)

	КомментарийКЗадачи = "";
	КомментарийКЗадачи = Источник.Комментарий + Символы.ПС;
	КомментарийКЗадачи = КомментарийКЗадачи + "Номер ТТН: [" + Источник.КТС_НомерТТН + "]" + Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары
		|ГДЕ
		|	Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.ВидНоменклатуры	
		|";
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КомментарийКЗадачи = КомментарийКЗадачи + Выборка.ВидНоменклатуры + Символы.ПС;			
	КонецЦикла;
	
	Возврат КомментарийКЗадачи;
	
КонецФункции // ()
 
 

// Процедура - обработчик проведения документов «Реализация товаров и услуг»,
// «Перемещение товаров и услуг» и «Заказ поставщику»
//
Процедура ВыполнитьПроведениеПоМаршрутам(Источник, Отказ, РежимПроведения) Экспорт
	
	ВыполнятьДвижениеБезОрдерныеСклады = Ложь;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ВыполнятьДвижениеБезОрдерныеСклады = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ВыполнятьДвижениеБезОрдерныеСклады = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		ВыполнятьДвижениеБезОрдерныеСклады = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		ВыполнятьДвижениеБезОрдерныеСклады = Истина;
	КонецЕсли;
		
	ПодготовитьНаборыЗаписей(Источник, ВыполнятьДвижениеБезОрдерныеСклады);
    ОтразитьДвижения(Источник, Источник.Движения, Отказ, ВыполнятьДвижениеБезОрдерныеСклады);
	ЗаписатьНаборыЗаписей(Источник);
	
КонецПроцедуры

Процедура ВыполнитьУдалениеПроведенияПоМаршрутам(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.РеализацияТоваровУслуг") 
			И ТипЗнч(Источник) <> Тип("ДокументОбъект.ПеремещениеТоваров")
			И ТипЗнч(Источник) <> Тип("ДокументОбъект.ВозвратТоваровПоставщику")
			И ТипЗнч(Источник) <> Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			   = Источник.Движения;	
	ДополнительныеСвойства = Движения.КТС_ОтгрузкаИзБезордерныхСкладов.ДополнительныеСвойства;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ДополнительныеСвойства.ЭтоНовый);
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.ДополнительныеСвойства.Вставить("РассчитыватьИзмененияОтгрузки", Истина);
	
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Записать();
	
	ВыполнитьКонтрольРезультатовМаршруты(Источник, ДополнительныеСвойства ,Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Автоматические поступления

Процедура СоздатьПоступлениеТоваровУслуг(Источник, Отказ, РежимПроведения) Экспорт

	Перем СсылкаНаЗаказ;
	
	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда

		УникальныйИдентификатор =Новый УникальныйИдентификатор( "d10d3409-40c2-11e0-9f98-001517115d85");  //СкладСоборна
		Склад = Справочники.Склады.ПолучитьСсылку(УникальныйИдентификатор);
		Если Источник.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят И Источник.Склад = Склад Тогда 
			ПроверкаШтрихКода(Источник, Отказ, РежимПроведения);
		КонецЕсли;
		Если Отказ Тогда Возврат; КонецЕсли;
		Если ТипЗнч(Источник.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") И Источник.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят Тогда
			СсылкаНаЗаказ = Источник.Распоряжение;
		КонецЕсли;
	КонецЕсли;
	
	Если СсылкаНаЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Документ.Дата = ТекущаяДата();
	Документ.Заполнить(СсылкаНаЗаказ);	
	Попытка
		ЗаполнитьПоПриемкеСервер(Ложь, Ложь, Ложь, Ложь, Документ);
		Если Документ.Товары.Количество() > 0 Тогда
			ПроставитьDDP(Документ,СсылкаНаЗаказ);
			Попытка
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Кому = Новый Массив;
		Кому.Добавить(Новый Структура("Адрес, Представление", "gplusuk@ktc.rovno.ua", "Robik"));
		
		//Кому.Добавить(Новый Структура("Адрес, Представление", "1c@ktc.rovno.ua", "Robik"));
		//Кому.Добавить(Новый Структура("Адрес, Представление", "postavka@ktc.rovno.ua", "Robik"));
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма("Не удалось создать поступление по заказу", "Заказ: " + ПолучитьНавигационнуюСсылку(СсылкаНаЗаказ), Кому);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);	
	КонецПопытки;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	*
			|Из
			|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &Ссылка)
			|;");
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);
		Если Запрос.Выполнить().Пустой() Тогда
			Попытка	
				ЗаказОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
				ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Процедура ПроставитьDDP(Документ,СсылкаНаЗаказ)
	ТаблицаТовары = Документ.Товары;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаТовары.НомерСтроки,
	                      |	ТаблицаТовары.Номенклатура,
	                      |	ТаблицаТовары.НоменклатураПоставщика,
	                      |	ТаблицаТовары.Характеристика,
	                      |	ТаблицаТовары.Упаковка,
	                      |	ТаблицаТовары.КоличествоУпаковок,
	                      |	ТаблицаТовары.Количество,
	                      |	ТаблицаТовары.Цена,
	                      |	ТаблицаТовары.УсловиеЦеныПоставщика,
	                      |	ТаблицаТовары.ПроцентРучнойСкидки,
	                      |	ТаблицаТовары.СуммаРучнойСкидки,
	                      |	ТаблицаТовары.Сумма,
	                      |	ТаблицаТовары.СтавкаНДС,
	                      |	ТаблицаТовары.СуммаНДС,
	                      |	ТаблицаТовары.СуммаСНДС,
	                      |	ТаблицаТовары.СтатьяРасходов,
	                      |	ТаблицаТовары.АналитикаРасходов,
	                      |	ТаблицаТовары.КлючСвязиСерийныхНомеров,
	                      |	ТаблицаТовары.КодСтроки,
	                      |	ТаблицаТовары.НомерГТД,
	                      |	ТаблицаТовары.Склад,
	                      |	ТаблицаТовары.ЗаказПоставщику,
	                      |	ТаблицаТовары.НомерСтрокиДокументаПоставщика,
	                      |	ТаблицаТовары.Сертификат,
	                      |	ТаблицаТовары.НомерПаспорта,
	                      |	ТаблицаТовары.СтатусУказанияСерий,
	                      |	ТаблицаТовары.Сделка,
	                      |	ТаблицаТовары.СуммаВзаиморасчетов,
	                      |	ТаблицаТовары.СуммаНДСВзаиморасчетов,
	                      |	ТаблицаТовары.ВидЗапасов,
	                      |	ТаблицаТовары.ИдентификаторСтроки,
	                      |	ТаблицаТовары.АналитикаУчетаПартий,
	                      |	ТаблицаТовары.Назначение,
	                      |	ТаблицаТовары.DDP,
	                      |	ТаблицаТовары.КурсоваяРазницаDDP,
	                      |	ТаблицаТовары.СуммаСDDP
	                      |ПОМЕСТИТЬ ТаблицаТовары
	                      |ИЗ
	                      |	&ТаблицаТовары КАК ТаблицаТовары
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаТовары.НомерСтроки,
	                      |	ТаблицаТовары.Номенклатура,
	                      |	ТаблицаТовары.НоменклатураПоставщика,
	                      |	ТаблицаТовары.Характеристика,
	                      |	ТаблицаТовары.Упаковка,
	                      |	ТаблицаТовары.КоличествоУпаковок,
	                      |	ТаблицаТовары.Количество,
	                      |	ТаблицаТовары.Цена,
	                      |	ТаблицаТовары.УсловиеЦеныПоставщика,
	                      |	ТаблицаТовары.ПроцентРучнойСкидки,
	                      |	ТаблицаТовары.СуммаРучнойСкидки,
	                      |	ТаблицаТовары.Сумма,
	                      |	ТаблицаТовары.СтавкаНДС,
	                      |	ТаблицаТовары.СуммаНДС,
	                      |	ТаблицаТовары.СуммаСНДС,
	                      |	ТаблицаТовары.СтатьяРасходов,
	                      |	ТаблицаТовары.АналитикаРасходов,
	                      |	ТаблицаТовары.КлючСвязиСерийныхНомеров,
	                      |	ТаблицаТовары.КодСтроки,
	                      |	ТаблицаТовары.НомерГТД,
	                      |	ТаблицаТовары.Склад,
	                      |	ТаблицаТовары.ЗаказПоставщику,
	                      |	ТаблицаТовары.НомерСтрокиДокументаПоставщика,
	                      |	ТаблицаТовары.Сертификат,
	                      |	ТаблицаТовары.НомерПаспорта,
	                      |	ТаблицаТовары.СтатусУказанияСерий,
	                      |	ТаблицаТовары.Сделка,
	                      |	ТаблицаТовары.СуммаВзаиморасчетов,
	                      |	ТаблицаТовары.СуммаНДСВзаиморасчетов,
	                      |	ТаблицаТовары.ВидЗапасов,
	                      |	ТаблицаТовары.ИдентификаторСтроки,
	                      |	ТаблицаТовары.АналитикаУчетаПартий,
	                      |	ТаблицаТовары.Назначение,
	                      |	ВЫБОР
	                      |		КОГДА ТаблицаТовары.Количество = ЗаказыПоставщикамОстатки.КОформлениюОстаток
	                      |			ТОГДА ТаблицаТовары.КурсоваяРазницаDDP
	                      |		ИНАЧЕ ТаблицаТовары.КурсоваяРазницаDDP * ТаблицаТовары.Количество / ЗаказыПоставщикамОстатки.КОформлениюОстаток
	                      |	КОНЕЦ КАК КурсоваяРазницаDDP,
	                      |	ВЫБОР
	                      |		КОГДА ТаблицаТовары.Количество = ЗаказыПоставщикамОстатки.КОформлениюОстаток
	                      |			ТОГДА ТаблицаТовары.СуммаСDDP
	                      |		ИНАЧЕ ТаблицаТовары.СуммаСDDP * ТаблицаТовары.Количество / ЗаказыПоставщикамОстатки.КОформлениюОстаток
	                      |	КОНЕЦ КАК СуммаСDDP,
	                      |	ТаблицаТовары.DDP
	                      |ИЗ
	                      |	ТаблицаТовары КАК ТаблицаТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
	                      |		ПО ТаблицаТовары.КодСтроки = ЗаказыПоставщикамОстатки.КодСтроки
	                      |			И ТаблицаТовары.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура");
	Запрос.УстановитьПараметр("ЗаказПоставщику",СсылкаНаЗаказ);  
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары.Выгрузить());
	
	РезультатЗапроса	= Запрос.Выполнить(); 
	ТаблицаТовары		= РезультатЗапроса.Выгрузить();
	УслугаDDP 			= Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("8014b949-4cca-4dc2-808e-e6fb286406d2"));
	
	СтрокаУслугаDDPЦена = ТаблицаТовары.Итог("КурсоваяРазницаDDP");
	
	Если СтрокаУслугаDDPЦена = 0 Тогда 
		Документ.Товары.Загрузить(ТаблицаТовары);
		Возврат;
	КонецЕсли;
	
	Массив	= ТаблицаТовары.НайтиСтроки(Новый Структура("Номенклатура",УслугаDDP));

	Если Массив.Количество() Тогда
		СтрокаУслугаDDP	= Массив[0];
	Иначе
		СтрокаУслугаDDP	= ТаблицаТовары.Добавить();
		СтрокаУслугаDDP.Номенклатура			= УслугаDDP;
		СтрокаУслугаDDP.СтавкаНДС				= Перечисления.СтавкиНДС.БезНДС;
		СтрокаУслугаDDP.КоличествоУпаковок		= 1;
		СтрокаУслугаDDP.Количество 				= 1;
		СтрокаУслугаDDP.КодСтроки 				= 0;
		СтатьяРасходовУникальныйИдентификатор	= Новый УникальныйИдентификатор("c18cfac8-ae9b-11e3-80c2-001e676b0174");
		СтрокаУслугаDDP.СтатьяРасходов 			= ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(СтатьяРасходовУникальныйИдентификатор);
	КонецЕсли;

	СтрокаУслугаDDP.Цена		= СтрокаУслугаDDPЦена;
	
	ТекПроцентНДС				= ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаУслугаDDP.СтавкаНДС);
	СтрокаУслугаDDP.Сумма		= СтрокаУслугаDDP.Цена;
	СтрокаУслугаDDP.СуммаНДС	= Ценообразование.РассчитатьСуммуНДС(СтрокаУслугаDDP.Сумма, СтрокаУслугаDDP.СтавкаНДС, Документ.ЦенаВключаетНДС);
	СтрокаУслугаDDP.СуммаСНДС   = СтрокаУслугаDDP.Сумма + ?(Документ.ЦенаВключаетНДС, 0, СтрокаУслугаDDP.СуммаНДС);	
	

	
	Документ.Товары.Загрузить(ТаблицаТовары);
КонецПроцедуры



Процедура ПриИзменениеЦеныОбработатьСтрокуТЧ(ТекущаяСтрока,Объект)
	СтруктураДействий	= Новый Структура;	
	ЗаполнитьСтруктуруДействий(СтруктураДействий,Объект);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
КонецПроцедуры	


Процедура ЗаполнитьСтруктуруДействий(СтруктураДействий,Объект)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"					, СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС"					, СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"	, Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры"		, Новый Структура("Номенклатура", "ТипНоменклатуры"));	
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КТС Помощь

Процедура ВыполнитьПроведениеКТСПомощь(Источник, Отказ, РежимПроведения) Экспорт

	Перем ПроцентПродажыУслуги, ПроцентИсполненияУслуги, СвойствоПомощьКТС;
	
	Если ПроверитьВидНоменклатурыКТСПомощь(Источник) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаПовторноеПроведение(Источник, ПроцентПродажыУслуги, ПроцентИсполненияУслуги, СвойствоПомощьКТС) Тогда 
		Возврат; 
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПомощьКТС);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект   = Источник.Ссылка;
	Запись.Свойство = СвойствоПомощьКТС;
	Запись.Значение = Справочники.Пользователи.ПустаяСсылка();
	
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ВыполнитьУдалениеПроведениеКТСПомощь(Источник, Отказ) Экспорт

	Перем ПроцентПродажыУслуги, ПроцентИсполненияУслуги, СвойствоПомощьКТС;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда 
		Возврат; 
	КонецЕсли;
	
	Настройки.Свойство("ПроцентПродажыУслуги", ПроцентПродажыУслуги);
	Настройки.Свойство("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	Настройки.Свойство("СвойствоПомощьКТС", СвойствоПомощьКТС);
	
	Если ПроцентПродажыУслуги    = Неопределено Тогда Возврат; КонецЕсли;
	Если ПроцентИсполненияУслуги = Неопределено Тогда Возврат; КонецЕсли;
	Если СвойствоПомощьКТС       = Неопределено Тогда Возврат; КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПомощьКТС);
		
	НаборЗаписей.Записать();

КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Маршруты

Функция ПолучитьСписокСпособовДоставки()
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов 
		|ГДЕ 
		|	Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("ee52af91-fb1b-11e1-9d4d-001e673c80fc"))); 
	СпособыДоставкиТовара = Запрос.Выполнить().Выгрузить();	
	СписокСпособовДоставки = СпособыДоставкиТовара.ВыгрузитьКолонку("Ссылка");
	Возврат СписокСпособовДоставки;
КонецФункции

Функция ПолучитьСписокПеревозчиков()

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Партнер КАК Партнер
	                      |ИЗ
	                      |	РегистрСведений.ПартнерыСегмента
	                      |ГДЕ
	                      |	Сегмент = &Сегмент");
						  
	Запрос.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("b837dc86-07b1-11e2-9d4d-001e673c80fc")));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");

КонецФункции // ПолучитьСписокПеревозчиков()

Процедура ЗаписатьНаборыЗаписей(Источник) 	
	Источник.Движения.Записать();	
КонецПроцедуры



Процедура ПолучитьСписокАдресовПартнера(Партнер, МассивВыбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыКонтактнаяИнформация.Представление КАК Адрес
	               |ИЗ
	               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	               |ГДЕ
	               |	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	               |	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)" ;
		
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТаблицаАдресов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаАдресов.Количество() Тогда МассивВыбора = ТаблицаАдресов.ВыгрузитьКолонку("Адрес"); КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		 УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСписокСкладов(МассивВыбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Представление КАК Представление
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Представление";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивВыбора.Добавить(Выборка.Представление);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьДатыИзКалендаря(КоличествоДней)

	Результат   = Новый Структура;
	ТекДата 	= НачалоДня(ТекущаяДата());
	
	// Индекс 3 - нужен чтобы дата точно попала в календарь
	ДатаНачалоБезВыходных 		= ТекДата - 3600*24*КоличествоДней*7;
	ДатаОкончанияБезВыходных    = ТекДата + 3600*24*КоличествоДней*7;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КалендарныеГрафики.ДатаГрафика
	                      |ИЗ
	                      |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	                      |ГДЕ
	                      |	КалендарныеГрафики.ДатаГрафика МЕЖДУ &ДатаНачалоБезВыходных И &ТекДата
	                      |	И КалендарныеГрафики.ДеньВключенВГрафик
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КалендарныеГрафики.ДатаГрафика
	                      |ИЗ
	                      |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	                      |ГДЕ
	                      |	КалендарныеГрафики.Календарь = &Календарь
	                      |	И КалендарныеГрафики.ДеньВключенВГрафик
	                      |	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &ТекДата И &ДатаОкончанияБезВыходных");
						  
	Запрос.УстановитьПараметр("Календарь", Справочники.Календари.ПолучитьСсылку(Новый УникальныйИдентификатор("36eec5fa-896d-11e1-ac52-001e67162d38")));
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	Запрос.УстановитьПараметр("ДатаНачалоБезВыходных", ДатаНачалоБезВыходных);
	Запрос.УстановитьПараметр("ДатаОкончанияБезВыходных", ДатаОкончанияБезВыходных);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТЗ_ПрошлыеДаты = РезультатЗапроса[0].Выгрузить();
	ТЗ_БудущиеДаты = РезультатЗапроса[1].Выгрузить();
	
	Результат.Вставить("ДатаНачало", ТЗ_ПрошлыеДаты[ТЗ_ПрошлыеДаты.Количество()-КоличествоДней-1].ДатаГрафика);
	Результат.Вставить("ДатаОкончания", ТЗ_БудущиеДаты[КоличествоДней-1].ДатаГрафика);
	
	Возврат Результат;

КонецФункции // ПолучитьДатыИзКалендаря()


Функция ПолучитьАдресСклада(Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Представление КАК АдресСклада
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация 
						  |ГДЕ
	                      |	Ссылка = &Ссылка
	                      |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	                      |	И Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)");
						  
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.АдресСклада, "");
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Работа с движениями по маршрутам

Процедура ПодготовитьНаборыЗаписей(Источник, ВыполнятьДвижениеБезОрдерныеСклады)
	
	Движения = Источник.Движения;
	
	Если Движения.Маршруты_ДокументыПоМаршрутам.Количество() > 0 И Не ВыполнятьДвижениеБезОрдерныеСклады Тогда
		Движения.Маршруты_ДокументыПоМаршрутам.Очистить();
	КонецЕсли;
	
	Если ВыполнятьДвижениеБезОрдерныеСклады И Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Количество() > 0 Тогда
		Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Очистить();
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		Движения.Маршруты_ДокументыПоМаршрутам.Записывать = Истина;
		Если ВыполнятьДвижениеБезОрдерныеСклады Тогда
			Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтразитьДвижения(Источник, Движения, Отказ, ВыполнятьДвижениеБезОрдерныеСклады)
	
	Если Отказ Тогда 
		Возврат; 
	КонецЕсли;
	
	ОтразитьДвиженияДокументовПоМаршрутам(Источник, Движения, Отказ);
	
	Если ВыполнятьДвижениеБезОрдерныеСклады Тогда
		ОтразитьДвиженияОтгрузкаМест(Источник, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры


Процедура ОтразитьДвиженияДокументовПоМаршрутам(Источник, Движения, Отказ)

	Движения.Маршруты_ДокументыПоМаршрутам.Записывать = Истина;
	НоваяЗапись = Движения.Маршруты_ДокументыПоМаршрутам.Добавить();
	НоваяЗапись.Период		= Источник.Дата;
	НоваяЗапись.Регистратор = Источник.Ссылка;
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		НоваяЗапись.Получатель		= Источник.СкладПолучатель;	
		НоваяЗапись.ПунктНазначения	= Источник.СкладПолучатель;	
		НоваяЗапись.АдресДоставки	= ПолучитьАдресСклада(Источник.СкладПолучатель);
	КонецЕсли;
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
		НоваяЗапись.Получатель			= Источник.Партнер;
		НоваяЗапись.ПунктНазначения 	= ?(ПустаяСтрока(Источник.КТС_ПунктНазначения), ПолучитьГородПоАдресу(Источник.КТС_АдресДоставки), Источник.КТС_ПунктНазначения);

		Если ЗначениеЗаполнено(Источник.КТС_Перевозчик) Тогда
			Если НЕ ЗначениеЗаполнено(Источник.КТС_ОтделениеНовойПочты) Тогда
				Отказ = Истина;
				
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать отделение новой почты'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_ОтделениеНовойПочты");
                
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_КонтактноеЛицо) Тогда
				Отказ = Истина;
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать контактное лицо'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_КонтактноеЛицо");

				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_ОбъявленнаяСтоимость) Тогда
				Отказ = Истина;
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать объявленную стоимость'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_ОбъявленнаяСтоимость");

				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_АдресДоставки) Тогда
				Отказ = Истина;
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать адрес доставки'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_АдресДоставки");

				Возврат;
			КонецЕсли;
		    НоваяЗапись.Перевозчик			 = Источник.КТС_Перевозчик;
			НоваяЗапись.ОтделениеНовойПочты  = Источник.КТС_ОтделениеНовойПочты;
			НоваяЗапись.КонтактноеЛицо		 = Источник.КТС_КонтактноеЛицо;
			НоваяЗапись.ОбъявленнаяСтоимость = Источник.КТС_ОбъявленнаяСтоимость;
        	НоваяЗапись.ПлатитПолучатель     = Источник.КТС_ПлатитПолучатель;  
			НоваяЗапись.ВозвратнаяДоставка   = Источник.КТС_ВозвратнаяДоставка;

		Иначе
			НоваяЗапись.Перевозчик			 = Неопределено;
			НоваяЗапись.ОтделениеНовойПочты  = Неопределено;
			НоваяЗапись.КонтактноеЛицо		 = Неопределено;
			НоваяЗапись.ОбъявленнаяСтоимость = Неопределено;
        	НоваяЗапись.ПлатитПолучатель     = Неопределено;
			НоваяЗапись.ВозвратнаяДоставка   = Неопределено;

        		
		КонецЕсли; 

		Если ТипЗнч(Источник.КТС_АдресДоставки) = Тип("СправочникСсылка.Склады") Тогда
			НоваяЗапись.АдресДоставки = ПолучитьАдресСклада(Источник.КТС_АдресДоставки);
		Иначе
			НоваяЗапись.АдресДоставки = ?(Источник.КТС_АдресДоставки=Неопределено, "", Источник.КТС_АдресДоставки);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда	
		НоваяЗапись.Получатель		= Источник.Партнер;
		НоваяЗапись.ПунктНазначения = ?(ПустаяСтрока(Источник.КТС_ПунктНазначения), ПолучитьГородПоАдресу(Источник.КТС_АдресДоставки), Источник.КТС_ПунктНазначения);
		Если ЗначениеЗаполнено(Источник.КТС_Перевозчик) Тогда
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_ОтделениеНовойПочты) Тогда
				Отказ = Истина;
				
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать отделение новой почты'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_ОтделениеНовойПочты");
                
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_КонтактноеЛицо) Тогда
				Отказ = Истина;
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать контактное лицо'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_КонтактноеЛицо");

				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_ОбъявленнаяСтоимость) Тогда
				Отказ = Истина;
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать объявленную стоимость'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_ОбъявленнаяСтоимость");

				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Источник.КТС_АдресДоставки) Тогда
				Отказ = Истина;
				СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось.Нужно указать адрес доставки'");
				СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка,, "Объект.КТС_АдресДоставки");

				Возврат;
			КонецЕсли;

		    НоваяЗапись.Перевозчик			 = Источник.КТС_Перевозчик;
			НоваяЗапись.ОтделениеНовойПочты  = Источник.КТС_ОтделениеНовойПочты;
			НоваяЗапись.КонтактноеЛицо		 = Источник.КТС_КонтактноеЛицо;
			НоваяЗапись.ОбъявленнаяСтоимость = Источник.КТС_ОбъявленнаяСтоимость;
        	НоваяЗапись.ПлатитПолучатель     = Источник.КТС_ПлатитПолучатель;
		Иначе
			НоваяЗапись.Перевозчик			 = Неопределено;
			НоваяЗапись.ОтделениеНовойПочты  = Неопределено;
			НоваяЗапись.КонтактноеЛицо		 = Неопределено;
			НоваяЗапись.ОбъявленнаяСтоимость = Неопределено;
        	НоваяЗапись.ПлатитПолучатель     = Неопределено;
        		
		КонецЕсли; 
	
		Если ТипЗнч(Источник.КТС_АдресДоставки) = Тип("СправочникСсылка.Склады") Тогда
			НоваяЗапись.АдресДоставки = ПолучитьАдресСклада(Источник.КТС_АдресДоставки);
		Иначе
			НоваяЗапись.АдресДоставки = ?(Источник.КТС_АдресДоставки=Неопределено, "", Источник.КТС_АдресДоставки);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		Если ЗначениеЗаполнено(Источник.КТС_АдресДоставки) Тогда
			НоваяЗапись.Получатель = Источник.КТС_АдресДоставки;
		Иначе
			НоваяЗапись.Получатель = Источник.Склад;
		КонецЕсли;
		НоваяЗапись.ПунктНазначения = Источник.КТС_АдресДоставки;
		НоваяЗапись.АдресДоставки	= ПолучитьАдресСклада(Источник.КТС_АдресДоставки);
	КонецЕсли;

КонецПроцедуры

Процедура ОтразитьДвиженияОтгрузкаМест(Источник, Движения, Отказ)
	
	Ссылка		 = Источник.Ссылка;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОтгрузкаМест(Источник);

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РезультатЗапроса.Выгрузить();
	
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ДополнительныеСвойства.ЭтоНовый);
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.ДополнительныеСвойства.Вставить("РассчитыватьИзмененияОтгрузки", Ложь);
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура("СтруктураВременныеТаблицы", Источник.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));
	
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Очистить();
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Загрузить(НаборЗаписей);
	Движения.КТС_ОтгрузкаИзБезордерныхСкладов.Записать();

КонецПроцедуры


Функция ПолучитьТекстЗапросаОтгрузкаМест(Источник)
 	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
						  | &ВидДвижения КАК ВидДвижения,
						  |	Перемещение.Ссылка.Дата КАК Период,
						  |	Перемещение.Ссылка КАК ДокументОтгрузки,
		                  |	Перемещение.Номенклатура КАК Номенклатура,
		                  |	Перемещение.Характеристика КАК Характеристика,
		                  |	Перемещение.Ссылка.СкладОтправитель КАК Склад,
						  |	ВЫБОР
						  |		КОГДА Перемещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
						  |			ТОГДА Перемещение.КоличествоУпаковок
						  |		ИНАЧЕ Перемещение.КоличествоУпаковок * Перемещение.Упаковка.Коэффициент
						  |	КОНЕЦ КАК Количество
						  |ПОМЕСТИТЬ КешТоварыПеремещения
		                  |ИЗ
		                  |	Документ.ПеремещениеТоваров.Товары КАК Перемещение
						  |ГДЕ
						  |	Перемещение.Ссылка = &Ссылка
						  |	И Перемещение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
						  | И НЕ Перемещение.Ссылка.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
						  |;
						  |
						  ///////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	Ссылка			КАК Склад,
						  |	Представление   КАК Представление
						  |ПОМЕСТИТЬ АдресаСкладов
						  |ИЗ
						  |	Справочник.Склады.КонтактнаяИнформация
						  |ГДЕ
						  |	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
						  |;
						  |
						  ///////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	СкладыОтгрузки.Ссылка КАК Маршрут,
						  |	КешТоварыПеремещения.ДокументОтгрузки КАК Документ
						  |ПОМЕСТИТЬ МаршрутыОтОтправителя	
						  |ИЗ
						  |	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
						  |
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТоварыПеремещения КАК КешТоварыПеремещения
						  |		ПО СкладыОтгрузки.Склад = КешТоварыПеремещения.ДокументОтгрузки.СкладОтправитель
                          |
						  |ОБЪЕДИНИТЬ
                          |
						  |ВЫБРАТЬ
						  |	ВозвратнаяДоставка.Ссылка КАК Маршрут,
						  |	КешТоварыПеремещения.ДокументОтгрузки КАК Документ
						  |	ИЗ
						  |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВозвратнаяДоставка
						  |
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТоварыПеремещения КАК КешТоварыПеремещения
						  |		ПО ВозвратнаяДоставка.СкладОтправитель = КешТоварыПеремещения.ДокументОтгрузки.СкладОтправитель
						  |			И ВозвратнаяДоставка.СкладПолучатель = КешТоварыПеремещения.ДокументОтгрузки.СкладПолучатель	
						  |;
						  |
						  ///////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	СписокАдресов.Ссылка КАК Маршрут,
						  |	КешТоварыПеремещения.ДокументОтгрузки КАК Документ
						  |ПОМЕСТИТЬ МаршрутыКПолучателю
						  |ИЗ
					      |	Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
						  |
						  | 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТоварыПеремещения КАК КешТоварыПеремещения
						  |		ПО СписокАдресов.ГородСклад = КешТоварыПеремещения.ДокументОтгрузки.СкладПолучатель
                          |
						  |ОБЪЕДИНИТЬ
                          |
						  |ВЫБРАТЬ
					      |	ВозвратнаяДоставка.Ссылка КАК Маршрут,
						  |	КешТоварыПеремещения.ДокументОтгрузки КАК Документ
						  |ИЗ
						  |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВозвратнаяДоставка
						  |
						  | 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТоварыПеремещения КАК КешТоварыПеремещения
						  |		ПО ВозвратнаяДоставка.СкладОтправитель = КешТоварыПеремещения.ДокументОтгрузки.СкладОтправитель
						  |			И ВозвратнаяДоставка.СкладПолучатель = КешТоварыПеремещения.ДокументОтгрузки.СкладПолучатель
						  |;
						  |
						  ///////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |	МаршрутыКПолучателю.Документ КАК Документ						
						  |ПОМЕСТИТЬ МаршрутПрямойДоставки
						  |ИЗ
						  |	МаршрутыКПолучателю КАК МаршрутыКПолучателю
						  |	
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
						  |		ПО МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут
						  |			И МаршрутыКПолучателю.Документ = МаршрутыОтОтправителя.Документ
                          |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
						  |		ПО АдресаСкладаПолучателя.Склад = МаршрутыОтОтправителя.Документ.СкладПолучатель
                          |
						  |		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
						  |		ПО АдресаСкладаОтправителя.Склад = МаршрутыОтОтправителя.Документ.СкладОтправитель
                          |
						  |ГДЕ
					      |	АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление		 
						  |;
						  |
						  ///////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	КешТоварыПеремещения.ВидДвижения КАК ВидДвижения,
						  |	КешТоварыПеремещения.Период КАК Период,
						  |	КешТоварыПеремещения.ДокументОтгрузки КАК ДокументОтгрузки,
						  |	КешТоварыПеремещения.Номенклатура КАК Номенклатура,
						  |	КешТоварыПеремещения.Характеристика КАК Характеристика,
		                  |	КешТоварыПеремещения.Склад КАК Склад,
						  |	КешТоварыПеремещения.Количество КАК Количество
						  |ИЗ 
						  |	КешТоварыПеремещения КАК КешТоварыПеремещения
						  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
						  |		ПО КешТоварыПеремещения.ДокументОтгрузки = МаршрутПрямойДоставки.Документ";
						  
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда               
						  
		ТекстЗапроса = "ВЫБРАТЬ
						  | &ВидДвижения КАК ВидДвижения,
						  |	Реализация.Ссылка.Дата КАК Период,
					      |	Реализация.Ссылка КАК ДокументОтгрузки,
					      |	Реализация.Номенклатура КАК Номенклатура,
					      |	Реализация.Характеристика КАК Характеристика,
					      |	ВЫБОР Реализация.Склад
						  |		КОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
						  |			ТОГДА Реализация.Ссылка.Склад
						  |		ИНАЧЕ Реализация.Склад 
						  |	КОНЕЦ КАК Склад,
					      |	ВЫБОР Реализация.Упаковка
						  |		КОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
						  |			ТОГДА Реализация.КоличествоУпаковок
						  |		ИНАЧЕ Реализация.КоличествоУпаковок * Реализация.Упаковка.Коэффициент
						  |	КОНЕЦ КАК Количество
						  |ИЗ
					      |	Документ.РеализацияТоваровУслуг.Товары КАК Реализация
						  |ГДЕ
						  |	Реализация.Ссылка = &Ссылка
						  |	И Реализация.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
						  |	И НЕ Реализация.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
						  | И НЕ Реализация.Ссылка.КТС_АдресДоставки = """"
						  |	И НЕ Реализация.Ссылка.КТС_АдресДоставки = Неопределено";	
						  
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
						  
		ТекстЗапроса = "ВЫБРАТЬ
						  | &ВидДвижения КАК ВидДвижения,
						  |	ВозвратПоставщику.Ссылка.Дата КАК Период,
					      |	ВозвратПоставщику.Ссылка КАК ДокументОтгрузки,
					      |	ВозвратПоставщику.Номенклатура КАК Номенклатура,
					      |	ВозвратПоставщику.Характеристика КАК Характеристика,
					      |	ВозвратПоставщику.Ссылка.Склад КАК Склад,
					      |	ВЫБОР ВозвратПоставщику.Упаковка
						  |		КОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
						  |			ТОГДА ВозвратПоставщику.КоличествоУпаковок
						  |		ИНАЧЕ ВозвратПоставщику.КоличествоУпаковок * ВозвратПоставщику.Упаковка.Коэффициент
						  |	КОНЕЦ КАК Количество
						  |ИЗ
					      |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратПоставщику
						  |ГДЕ
						  |	ВозвратПоставщику.Ссылка = &Ссылка
						  |	И ВозвратПоставщику.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
						  |	И НЕ ВозвратПоставщику.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
						  | И НЕ ВозвратПоставщику.Ссылка.КТС_АдресДоставки = """"
						  |	И НЕ ВозвратПоставщику.Ссылка.КТС_АдресДоставки = Неопределено";
						  
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
						  
		ТекстЗапроса = "ВЫБРАТЬ
						  | &ВидДвижения КАК ВидДвижения,
						  |	ВнутреннееПотребление.Ссылка.Дата КАК Период,
					      |	ВнутреннееПотребление.Ссылка КАК ДокументОтгрузки,
					      |	ВнутреннееПотребление.Номенклатура КАК Номенклатура,
					      |	ВнутреннееПотребление.Характеристика КАК Характеристика,
					      |	ВнутреннееПотребление.Ссылка.Склад КАК Склад,
					      |	ВЫБОР ВнутреннееПотребление.Упаковка
						  |		КОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
						  |			ТОГДА ВнутреннееПотребление.КоличествоУпаковок
						  |		ИНАЧЕ ВнутреннееПотребление.КоличествоУпаковок * ВнутреннееПотребление.Упаковка.Коэффициент
						  |	КОНЕЦ КАК Количество
						  |ИЗ
					      |	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотребление
						  |ГДЕ
						  |	ВнутреннееПотребление.Ссылка = &Ссылка
						  |	И ВнутреннееПотребление.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
						  |	И НЕ ВнутреннееПотребление.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
						  | И НЕ ВнутреннееПотребление.Ссылка.КТС_АдресДоставки = """"
						  |	И НЕ ВнутреннееПотребление.Ссылка.КТС_АдресДоставки = Неопределено
						  | И НЕ ВнутреннееПотребление.Ссылка.КТС_АдресДоставки = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
						  
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОтгрузкаМест()


Процедура ВыполнитьКонтрольРезультатовМаршруты(Источник, ДополнительныеСвойства, Отказ)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура КАК Номенклатура,
	                      |	Характеристика КАК Характеристика,
	                      |	Склад КАК Склад,
	                      |	КоличествоОстаток КАК Количество
	                      |ИЗ
	                      |	РегистрНакопления.КТС_ОтгрузкаИзБезОрдерныхСкладов.Остатки(
	                      |			,
	                      |			(Номенклатура, Характеристика, Склад) В
	                      |				(ВЫБРАТЬ
	                      |					Таблица.Номенклатура КАК Номенклатура,
	                      |					Таблица.Характеристика КАК Характеристика,
	                      |					Таблица.Склад КАК Склад
	                      |				ИЗ
	                      |					РегистрНакопления.КТС_ОтгрузкаИзБезОрдерныхСкладов КАК Таблица
	                      |				ГДЕ
	                      |					Таблица.Регистратор = &Ссылка
	                      |			
	                      |				ОБЪЕДИНИТЬ ВСЕ
	                      |			
	                      |				ВЫБРАТЬ
	                      |					Таблица.Номенклатура КАК Номенклатура,
	                      |					Таблица.Характеристика КАК Характеристика,
	                      |					Таблица.Склад КАК Склад
	                      |				ИЗ
	                      |					ДвиженияОтгрузкаИзБезордерныхСкладовИзменение КАК Таблица))
	                      |ГДЕ
	                      |	КоличествоОстаток < 0");
						  
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
				   
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	Если РезультатыЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	СообщениеОшибка = НСтр("ru='Выполнить проведение %Документа% не удалось'");
	СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Документа%", Источник.Ссылка);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка);
	
	Выборка = РезультатыЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СообщениеОшибка = НСтр("ru='%Номенклатура% %Характеристика% отгружено больше чем указано в распоряжении на %Количество%'");
		СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Номенклатура%", Выборка.Номенклатура);
		СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Характеристика%", Выборка.Характеристика);
		СообщениеОшибка	= СтрЗаменить(СообщениеОшибка, "%Количество%", Выборка.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибка);
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Заказы клиентам

Процедура ПроведениеОбработкаЗаказовКлиента(Источник)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОбработкаЗаказов();
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	РезультатПакета  = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатПакета[РезультатПакета.ВГраница()];
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОбработкаЗаказовКлиентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказКлиента.Установить(Выборка.ЗаказКлиента);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаОбработкаЗаказов()

	ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	Ссылка, 
		|	Номенклатура,
		|	Максимум(ДатаОтгрузки) КАК ДатаОтгрузки
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ 
		|	Документ.ЗаказКлиента.Товары 
		|ГДЕ
		|	Ссылка = &Ссылка
		|И  Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.ОбработкаЗаказовКлиентов ГДЕ ЗаказКлиента = &Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ссылка,
		|   Номенклатура
		|;
		|ВЫБРАТЬ
		|	СписокНоменклатуры.Ссылка 			КАК ЗаказКлиента,	
		|   СписокНоменклатуры.Номенклатура,
		|   IsNull(АктНоменклатуры.ДатаПоставки, СписокНоменклатуры.ДатаОтгрузки) КАК ДатаАктуальности,
		|   АктНоменклатуры.СоглашениеСПоставщиком,
		|	АктНоменклатуры.Цена                КАК ЦенаВЗаказеПоставщика
		|
		|ИЗ
		|  	СписокНоменклатуры КАК СписокНоменклатуры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СписокНоменклатуры)) КАК АктНоменклатуры
		|ПО АктНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура
		|И	АктНоменклатуры.Актуально
		|И	АктНоменклатуры.ГарантияДоставки
		|;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОбработкаЗаказов()



////////////////////////////////////////////////////////////////////////////////
// Процедуры для работы с получателем и отправителем

Процедура СоздатьЭлементПолучателя(мФорма)
	
	//мЭлементы = мФорма.Элементы;
	//
	//ШапкаЛево = мЭлементы.Найти("ШапкаЛево");
	//Если ШапкаЛево = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтруктураПоляФормы = Новый Структура;
	//СтруктураПоляФормы.Вставить("Имя", 		 			"ххх_ххх_Получатель");	
	//СтруктураПоляФормы.Вставить("Вид", 		 			ВидПоляФормы.ПолеНадписи);
	//СтруктураПоляФормы.Вставить("ПутьКДанным", 			"ххх_ххх_Получатель");
	//СтруктураПоляФормы.Вставить("Заголовок", 			"Получатель");
	//СтруктураПоляФормы.Вставить("ЦветТекста", 			Новый Цвет(138, 43, 226));
	//СтруктураПоляФормы.Вставить("ЦветТекстаЗаголовка", 	Новый Цвет(138, 43, 226));
	//
	//ГруппаЛево = СНСерверВызовы.ДобавитьПолеФормы(СтруктураПоляФормы, мЭлементы, ШапкаЛево);
	
КонецПроцедуры

Процедура УстановитьЗначениеПолучателя(мФорма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектФормы = мФорма.Объект;
	
	Если ТипЗнч(ОбъектФормы.Распоряжение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(ОбъектФормы.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		мФорма["ххх_ххх_Получатель"] = ОбъектФормы.Распоряжение.Партнер.Наименование;
	ИначеЕсли ТипЗнч(ОбъектФормы.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		мФорма["ххх_ххх_Получатель"] = ОбъектФормы.Распоряжение.СкладПолучатель.Наименование;
	ИначеЕсли ТипЗнч(ОбъектФормы.Распоряжение) = Тип("ДокументСсылка.СборкаТоваров") ИЛИ ТипЗнч(ОбъектФормы.Распоряжение) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		мФорма["ххх_ххх_Получатель"] = ОбъектФормы.Распоряжение.Склад.Наименование;
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КТС Помощь

Функция ПроверитьВидНоменклатурыКТСПомощь(Источник)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	                      |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры");
						  
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("91f45981-0c03-11e2-9d4d-001e673c80fc")));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();

КонецФункции // ПроверитьВидНоменклатурыКТСПомощь()

Функция ПроверитьНаПовторноеПроведение(Источник, ПроцентПродажыУслуги, ПроцентИсполненияУслуги, СвойствоПомощьКТС)
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда 
		Возврат Истина; 
	КонецЕсли;
	
	Настройки.Свойство("ПроцентПродажыУслуги", ПроцентПродажыУслуги);
	Настройки.Свойство("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	Настройки.Свойство("СвойствоПомощьКТС", СвойствоПомощьКТС);
	
	Если ПроцентПродажыУслуги    = Неопределено Тогда Возврат Истина; КонецЕсли;
	Если ПроцентИсполненияУслуги = Неопределено Тогда Возврат Истина; КонецЕсли;
	Если СвойствоПомощьКТС       = Неопределено Тогда Возврат Истина; КонецЕсли;
	                      
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Объект
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения
	                      |ГДЕ
	                      |	Объект = &Объект
	                      |	И Свойство = &Свойство");
						  
	Запрос.УстановитьПараметр("Объект", Источник.Ссылка);
	Запрос.УстановитьПараметр("Свойство", СвойствоПомощьКТС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции // ПроверитьНаПовторноеПроведение()


////////////////////////////////////////////////////////////////////////////////
// Автоматические передачи

Процедура ВыполнитьПерепродажуМеждуОрганизациями(Источник, Отказ, РежимПроведения)
		
	Если ТипЗнч(Источник) <> Тип("ДокументСсылка.ПеремещениеТоваров") Тогда Возврат; КонецЕсли;
	//Если ПараметрыСеанса.ТекущийПользователь.Наименование <> "Харечко Андрій" И ПараметрыСеанса.ТекущийПользователь.Наименование <> "Комар Андрій" Тогда Возврат; КонецЕсли;
	
	НачатьТранзакцию();	
	Попытка
		ПолучитьДокументыПередачиДляПеремещений(Источник);
	Исключение
		ВызватьИсключение (КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПолучитьДокументыПередачиДляПеремещений(Источник)
	
	Организация	= Источник.Организация;
	ВидЦены  	= ПолучитьВходнуюЦену();
	
	Если ВидЦены = Неопределено Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Модуль_ДоступныеСклады.Организация КАК Организация
	                      |ИЗ
	                      |	РегистрСведений.Модуль_ДоступныеСклады КАК Модуль_ДоступныеСклады
	                      |ГДЕ
	                      |	Модуль_ДоступныеСклады.Склад = &СкладПолучатель
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Товары.Номенклатура КАК Номенклатура,
	                      |	Товары.Характеристика КАК Характеристика,
	                      |	Товары.Количество КАК Количество,
	                      |	Товары.Ссылка.Организация КАК Организация
	                      |ПОМЕСТИТЬ ТабСписокТоваров
	                      |ИЗ
	                      |	Документ.ПеремещениеТоваров.Товары КАК Товары
	                      |ГДЕ
	                      |	Товары.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТабСписокТоваров.Номенклатура,
	                      |	ТабСписокТоваров.Характеристика,
	                      |	ТабСписокТоваров.Организация КАК Организация,
	                      |	ВЫБОР
	                      |		КОГДА ТабСписокТоваров.Количество < ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)
	                      |			ТОГДА ТабСписокТоваров.Количество
	                      |		ИНАЧЕ ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)
	                      |	КОНЕЦ КАК Количество,
	                      |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	                      |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены
	                      |ПОМЕСТИТЬ ТабКоличествоПоОрганизации
	                      |ИЗ
	                      |	ТабСписокТоваров КАК ТабСписокТоваров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
	                      |				&ДатаСреза,
	                      |				Организация В (&Организация)
	                      |					И Склад В (&Склад)
	                      |					И (Номенклатура, Характеристика) В
	                      |						(ВЫБРАТЬ
	                      |							ТабСписокТоваров.Номенклатура,
	                      |							ТабСписокТоваров.Характеристика
	                      |						ИЗ
	                      |							ТабСписокТоваров КАК ТабСписокТоваров)) КАК ТоварыОрганизацийОстатки
	                      |		ПО ТабСписокТоваров.Номенклатура = ТоварыОрганизацийОстатки.Номенклатура
	                      |			И ТабСписокТоваров.Характеристика = ТоварыОрганизацийОстатки.Характеристика
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |				&ДатаСреза,
	                      |				ВидЦены В (&ВходнаяЦена)
	                      |					И (Номенклатура, Характеристика) В
	                      |						(ВЫБРАТЬ
	                      |							ТабСписокТоваров.Номенклатура,
	                      |							ТабСписокТоваров.Характеристика
	                      |						ИЗ
	                      |							ТабСписокТоваров КАК ТабСписокТоваров)) КАК ЦеныНоменклатурыСрезПоследних
	                      |		ПО ТабСписокТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                      |			И ТабСписокТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СистемыНалогообложенияОрганизацийСрезПоследних.Организация,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НДС
	                      |ПОМЕСТИТЬ ТабНалогооблажениеНДС
	                      |ИЗ
	                      |	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	                      |			&ДатаСреза,
	                      |			Организация В (&Организация)
	                      |				И СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)) КАК СистемыНалогообложенияОрганизацийСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТабКоличествоПоОрганизации.Номенклатура КАК Номенклатура,
	                      |	ТабКоличествоПоОрганизации.Характеристика КАК Характериатика,
	                      |	ТабКоличествоПоОрганизации.Количество КАК Количество,
	                      |	ТабКоличествоПоОрганизации.Количество КАК КоличествоУпаковок,
	                      |	ВЫРАЗИТЬ(&ВходнаяЦена КАК Справочник.ВидыЦен) КАК ВидЦены,
	                      |	ТабКоличествоПоОрганизации.Цена КАК Цена,
	                      |	ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество КАК Сумма,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(ТабНалогооблажениеНДС.НДС, 0) = 0
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	                      |		ИНАЧЕ ТабНалогооблажениеНДС.НДС
	                      |	КОНЕЦ КАК НалогообложениеНДС,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(ТабНалогооблажениеНДС.НДС, 0) = 0
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                      |							ИЛИ ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	                      |						ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество * 0.1
	                      |					ИНАЧЕ ВЫБОР
	                      |							КОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                      |									ИЛИ ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                      |								ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество * 0.18
	                      |							ИНАЧЕ ВЫБОР
	                      |									КОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	                      |											ИЛИ ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	                      |										ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество * 0.2
	                      |								КОНЕЦ
	                      |						КОНЕЦ
	                      |				КОНЕЦ
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК СуммаНДС,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(ТабНалогооблажениеНДС.НДС, 0) = 0
	                      |			ТОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	                      |	КОНЕЦ КАК СтавкаНДС,
	                      |	ВЫБОР
	                      |		КОГДА ТабКоличествоПоОрганизации.ВидЦены.ЦенаВключаетНДС
	                      |			ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество
	                      |		ИНАЧЕ ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество + ВЫБОР
	                      |				КОГДА ЕСТЬNULL(ТабНалогооблажениеНДС.НДС, 0) = 0
	                      |					ТОГДА ВЫБОР
	                      |							КОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                      |									ИЛИ ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	                      |								ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество * 0.1
	                      |							ИНАЧЕ ВЫБОР
	                      |									КОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                      |											ИЛИ ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	                      |										ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество * 0.18
	                      |									ИНАЧЕ ВЫБОР
	                      |											КОГДА ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	                      |													ИЛИ ТабКоличествоПоОрганизации.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	                      |												ТОГДА ТабКоличествоПоОрганизации.Цена * ТабКоличествоПоОрганизации.Количество * 0.2
	                      |										КОНЕЦ
	                      |								КОНЕЦ
	                      |						КОНЕЦ
	                      |				ИНАЧЕ 0
	                      |			КОНЕЦ
	                      |	КОНЕЦ КАК СуммаСНДС
	                      |ИЗ
	                      |	ТабКоличествоПоОрганизации КАК ТабКоличествоПоОрганизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТабНалогооблажениеНДС КАК ТабНалогооблажениеНДС
	                      |		ПО (ТабНалогооблажениеНДС.Организация = ТабКоличествоПоОрганизации.Организация)
						  |ГДЕ
						  |	ТабКоличествоПоОрганизации.Количество > 0");
						  
	Запрос.УстановитьПараметр("ДатаСреза", Источник.МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Источник.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", Источник.СкладПолучатель);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("ВходнаяЦена", ВидЦены);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[4].Пустой() ИЛИ РезультатЗапроса[0].Пустой() Тогда Возврат; КонецЕсли;
	
	ВыборкаОрганизация = РезультатЗапроса[0].Выбрать();
	ВыборкаОрганизация.Следующий();
	ОрганизацияПолучатель = ВыборкаОрганизация.Организация;
	
	Если ОрганизацияПолучатель = Источник.Организация Тогда Возврат; КонецЕсли;
	
	ДокументОбъект = СоздатьДокументПередачи(Источник, ОрганизацияПолучатель, ВидЦены);
	
	ДокументОбъект.Товары.Загрузить(РезультатЗапроса[4].Выгрузить());	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаписатьНастройкиДокумента(Источник.Ссылка, ДокументОбъект.Ссылка);
	
КонецПроцедуры

Функция ПолучитьВходнуюЦену()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Регламент_ОбновитьЦены.ВидЦены КАК ВходнаяЦена
	                      |ИЗ
	                      |	РегистрСведений.ALPS_ВидыЦен КАК Регламент_ОбновитьЦены
	                      |ГДЕ
	                      |	Регламент_ОбновитьЦены.Входная = ИСТИНА");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ВходнаяЦена, Неопределено);
	
КонецФункции

Функция СоздатьДокументПередачи(Источник, ОрганизацияОтправитель, ВидЦены)
	
	Перем СвойствоПродажиМеждуОрганизациями;
	Перем СвойствоПеремещениеТоваров;
	
	Настройки 		= ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	CommonLibrary 	= ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	
	Настройки.Свойство("СвойствоПродажиМеждуОрганизациями", СвойствоПродажиМеждуОрганизациями);
	Настройки.Свойство("СвойствоПеремещениеТоваров", СвойствоПеремещениеТоваров);
	
	Запрос = Новый Запрос("ВЫБРАТЬ * Из РегистрСведений.ДополнительныеСведения ГДЕ Объект = &Ссылка И Свойство = &Свойство");
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("Свойство", СвойствоПродажиМеждуОрганизациями);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументОбъект = CommonLibrary.ПолучитьСсылкуПоНавигационнойСсылке(Документы.ПередачаТоваровМеждуОрганизациями, Выборка.Значение).ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
	Иначе
		ДокументОбъект = Документы.ПередачаТоваровМеждуОрганизациями.СоздатьДокумент();
		ДокументОбъект.Заполнить(Источник.Ссылка);
	КонецЕсли;
			
	ДокументОбъект.Дата                        	= Источник.Дата + 1;
    ДокументОбъект.Организация                 	= Источник.Организация;
    ДокументОбъект.ОрганизацияПолучатель     	= ОрганизацияОтправитель;
    ДокументОбъект.ВидЦены                     	= ВидЦены;
    ДокументОбъект.Валюта                    	= ВидЦены.ВалютаЦены;
    ДокументОбъект.Подразделение            	= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
    ДокументОбъект.ВалютаВзаиморасчетов        	= ВидЦены.ВалютаЦены;
    ДокументОбъект.ДатаПлатежа               	= Источник.Дата + 1;
    ДокументОбъект.НалогообложениеНДС        	= Справочники.Организации.НалогообложениеНДС(ОрганизацияОтправитель, Неопределено, Источник.Дата);
    ДокументОбъект.Склад                    	= Источник.СкладПолучатель;
	ДокументОбъект.Комментарий                	= "Автоматическая передача перед перемещением " + ПолучитьНавигационнуюСсылку(Источник.Ссылка);
	ДокументОбъект.БанковскийСчетОрганизации 	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОрганизацияОтправитель, , );
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ЗаписатьНастройкиДокумента(Источник, ДокументПередачи)
	
	Перем СвойствоПродажиМеждуОрганизациями;
	Перем СвойствоПеремещениеТоваров;
	
	Настройки 		= ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	CommonLibrary 	= ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	
	Настройки.Свойство("СвойствоПродажиМеждуОрганизациями", СвойствоПродажиМеждуОрганизациями);
	Настройки.Свойство("СвойствоПеремещениеТоваров", СвойствоПеремещениеТоваров);
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Источник);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПродажиМеждуОрганизациями);
	
	Запись 			= НаборЗаписей.Добавить();
	Запись.Объект 	= Источник;
	Запись.Свойство	= СвойствоПродажиМеждуОрганизациями;
	Запись.Значение	= ПолучитьНавигационнуюСсылку(ДокументПередачи);
	
	НаборЗаписей.Записать();
	
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументПередачи);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПеремещениеТоваров);
	
	Запись 			= НаборЗаписей.Добавить();
	Запись.Объект 	= ДокументПередачи;
	Запись.Свойство	= СвойствоПеремещениеТоваров;
	Запись.Значение	= ПолучитьНавигационнуюСсылку(Источник);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьРазрешениеНаПроведениеПередачи()
	
	Перем ПроводитьПродажиМеждуОрганизациямиПередЗаписью;
	
	НастройкаГлобальная = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если НЕ ТипЗнч(НастройкаГлобальная) = Тип("Структура") Тогда
		БиблиотекаОбъект = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
		БиблиотекаОбъект.СообщитьПользователю("Сообщите на 777, что настойка не найдена при попытке продаж до реализации!");
		Возврат Ложь;	
	КонецЕсли;
	
	НастройкаГлобальная.Свойство("ПроводитьПродажиМеждуОрганизациямиПередЗаписью", ПроводитьПродажиМеждуОрганизациямиПередЗаписью);
	Если ПроводитьПродажиМеждуОрганизациямиПередЗаписью = Неопределено 
	 ИЛИ ПроводитьПродажиМеждуОрганизациямиПередЗаписью = Ложь Тогда Возврат Ложь; КонецЕсли;
 
	Возврат Истина;
 
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Автоматические поступления

Функция ЗаполнитьПоПриемкеСервер(ЕстьПринятыеТовары,
	                             ЕстьПринимающиесяТовары,
	                             ЗаполнятьПринимающимисяТоварами=Ложь,
	                             ПеренестиТоварыВТоварыПоДаннымПоставщика=Ложь, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействийСИзмененнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	Если Объект.ПоступлениеПоЗаказам Тогда
		МассивРаспоряжений = Объект.Товары.Выгрузить(, "ЗаказПоставщику").ВыгрузитьКолонку("ЗаказПоставщику");
	Иначе
		МассивРаспоряжений = Неопределено;
	КонецЕсли;
	
	Если Справочники.Склады.ЭтоГруппа(Объект.Склад) Тогда
		Выборка = Справочники.Склады.Выбрать(Объект.Склад);
		МассивСкладов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивСкладов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли; 
	
	СкладЗаполнения = ?(Справочники.Склады.ЭтоГруппа(Объект.Склад),МассивСкладов,Объект.Склад);
	ЕстьИзменения = ЗакупкиСервер.ЗаполнитьТоварыПоФактическойПриемке(
		ЕстьПринятыеТовары,
		ЕстьПринимающиесяТовары,
		ЗаполнятьПринимающимисяТоварами,
		Объект.Товары,
		Объект.Ссылка,
		МассивРаспоряжений,
		СкладЗаполнения,
		Объект.Соглашение,
		СтруктураДействийСИзмененнымиСтроками,
		СтруктураДействийСДобавленнымиСтроками,
		Дата('00010101')
	);
		
	Возврат ЕстьИзменения;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.2.079";

	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Маршруты адресный классификатор");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Маршруты адресный классификатор [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Маршруты адресный классификатор [" + Версия + "]", "МАК", "ОткрытиеФормы", Ложь, "МАК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

//Приходные ордера на товары
Процедура ПроверкаШтрихКода(Источник, Отказ, РежимПроведения)
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПроверкаНаШтрихКод());
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() Тогда 
		Отказ = Истина;
		Пока РезультатЗапроса.Следующий() Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		        "Не задан штрихкод для номенклатуры "+ РезультатЗапроса.Номенклатура, ,
		        "Товары["+(РезультатЗапроса.НомерСтроки-1)+"].Номенклатура",
		        "Объект");  		
		КонецЦикла;		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьТекстЗапросаПроверкаНаШтрихКод()
	
	ТекстЗапроса=
		"ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура
		|ПОМЕСТИТЬ КешШтрихКодов
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ
		|				КешНоменклатуры.Номенклатура
		|			ИЗ
		|				КешНоменклатуры КАК КешНоменклатуры)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешНоменклатуры.НомерСтроки,
		|	КешНоменклатуры.Номенклатура
		|ИЗ
		|	КешНоменклатуры КАК КешНоменклатуры
		|ГДЕ
		|	НЕ КешНоменклатуры.Номенклатура В
		|				(ВЫБРАТЬ
		|					КешШтрихКодов.Номенклатура
		|				ИЗ
		|					КешШтрихКодов КАК КешШтрихКодов)";
		
	Возврат ТекстЗапроса;
	
КонецФункции



