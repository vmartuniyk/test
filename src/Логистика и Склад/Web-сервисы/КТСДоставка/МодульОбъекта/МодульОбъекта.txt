////////////////////////////////////////////////////////////////////////////////                                                                                                                                                                                ////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция GetCurrentRoute(Driver) Экспорт
	
	Route		  = СоздатьФабрикуXDTOПоИмени("Route");
	RouteMetaData = СоздатьФабрикуXDTOПоИмени("RouteMetaData");

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	Driver);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщение = НСтр("ru='Маршрут водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		RouteMetaData.Data = Неопределено;
		RouteMetaData.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат RouteMetaData;
	КонецЕсли;
	
    Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
			
		ЗаполнитьЗначенияСвойств(Route, Выборка);
		Route.GUID   = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Route.Places = GetPlaces(Выборка.Ссылка, Выборка.СсылкаНаДокумент);
		
		Если Route.Places.RoutePlace.Количество() = 0 Тогда
			Сообщение = НСтр("ru='Поездка вероятно уже завершена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			RouteMetaData.Data = Неопределено;
			RouteMetaData.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				Сообщение);
			Возврат RouteMetaData;
		КонецЕсли; 
		
		Сообщение = НСтр("ru='Список маршрутов загружен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		RouteMetaData.Data = Route;
		RouteMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
		
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
		
	КонецЕсли;
	
	Возврат RouteMetaData;
	
КонецФункции // GetCurrentRoute()
 
Функция ПолучитьСписокВалют() Экспорт

	CurrencyCourse			= СоздатьФабрикуXDTOПоИмени("CurrencyCourse");
	CurrencyCourseMetaData	= СоздатьФабрикуXDTOПоИмени("CurrencyCourseMetaData");

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаКурсыВалют();
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Сообщение = НСтр("ru='Не удалось получить список курсов валют.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		CurrencyCourseMetaData.Data = Неопределено;
		CurrencyCourseMetaData.Meta = СформироватьОбъектMeta(204, "NoContent", Сообщение);
		
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение курса валют'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		
		Возврат CurrencyCourseMetaData;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
			
	Пока Выборка.Следующий() Цикл
		
		КодВалюты 			= Число(Выборка.Code);
		НаименованиеВалюты  = Выборка.Name;
		
		Если КодВалюты = 840 Тогда
			КодВалюты 			= 841;
			НаименованиеВалюты  = "Неисп_USD";
		ИначеЕсли КодВалюты = 841 Тогда
			КодВалюты 			= 840;
			НаименованиеВалюты  = "USD";
		КонецЕсли;
		Currency = СоздатьФабрикуXDTOПоИмени("Currency");
		Currency.Code   		= КодВалюты;
		Currency.Name   		= НаименованиеВалюты;
		Currency.Course 		= Выборка.Course;
		Currency.Multiplicity 	= Выборка.Multiplicity;
		CurrencyCourse.Currency.Добавить(Currency);
		
	КонецЦикла;
	
	Сообщение = НСтр("ru='Список курсов валют загружен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	CurrencyCourseMetaData.Data = CurrencyCourse;
	CurrencyCourseMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);	
	
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение курса валют'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
	
	Возврат CurrencyCourseMetaData;

КонецФункции // ПолучитьСписокВалют()

Функция ПогрузитьМестоВМашину(DeliveryGUID, RouteGUID) Экспорт

	СтруктураОшибки = Новый Структура("Description, Function");
	
	StuckDeliveryMetaData	= СоздатьФабрикуXDTOПоИмени("StuckDeliveryMetaData");

	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "StuckDelivery(RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции StuckDelivery, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		StuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(DeliveryGUID, СтруктураОшибки, "StuckDelivery(DeliveryGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции StuckDelivery, параметр DeliveryGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		StuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	СсылкаНаМесто = Справочники.МестаДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(DeliveryGUID));
	Если ПустаяСтрока(СсылкаНаМесто.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции StuckDelivery, место с уникальным идентификатором %1 не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, DeliveryGUID);
		StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		StuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.ЭтоЗадача Тогда
		ЗадачаМета = ПолучитьЗадачу(DeliveryGUID, RouteGUID, "00000000-0000-0000-0000-000000000000");
		StuckDeliveryMetaData.Meta = ЗадачаМета.Meta;
		StuckDeliveryMetaData.Data = Неопределено;
		Возврат StuckDeliveryMetaData;
	КонецЕсли; 
	
	
	
	Если СсылкаНаМесто.Архивный Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции StuckDelivery, попытка отгрузки архивного места'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		StuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	СсылкаНаМаршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
	Если ПустаяСтрока(СсылкаНаМаршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции StuckDelivery, маршрут с уникальным идентификатором %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
		StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		StuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат StuckDeliveryMetaData; 	
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		StuckDeliveryMetaData.Data = Неопределено;
		StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМеста();
	
	Запрос.УстановитьПараметр("СсылкаНаМесто", СсылкаНаМесто);
	Запрос.УстановитьПараметр("СсылкаНаМаршрут", СсылкаНаМаршрут);
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ПроверитьПолученияДанныхЗагрузкаМест(РезультатЗапроса, StuckDeliveryMetaData) Тогда
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	ВыборкаОтгрузка  = РезультатЗапроса[1].Выбрать();
	ВыборкаПосещения = РезультатЗапроса[2].Выбрать();
	
	ВыборкаОтгрузка.Следующий();
	ВыборкаПосещения.Следующий();
	
	Если ПроверитьСтатусыМестаЗагрузкаМест(ВыборкаОтгрузка, ВыборкаПосещения, StuckDeliveryMetaData) Тогда
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	Если ВыполнитьЗаписьМеста(ВыборкаОтгрузка, StuckDeliveryMetaData, Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину) Тогда
		Возврат StuckDeliveryMetaData;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Место %1 успешно помещено в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, DeliveryGUID);
	StuckDeliveryMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	StuckDeliveryMetaData.Data = Неопределено;
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СообщениеОбОшибке);
	
	Возврат StuckDeliveryMetaData;
	
КонецФункции // ПогрузитьМестоВМашину()

Функция ПогрузитьМестоВМашинуВручную(ManualCode, RouteGUID) Экспорт
	
	ТДата = ТекущаяДата();
	СтруктураОшибки  = Новый Структура("Description, Function");
	
	ManualStuckDeliveryMetaData	= СоздатьФабрикуXDTOПоИмени("ManualStuckDeliveryMetaData");
	
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "ManualStuckDelivery") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualStuckDelivery, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualStuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	Если Число(ManualCode) < 1 Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualStuckDelivery, параметр ManualCode должен быть больше нуля.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualStuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	ManualCode = Формат(ManualCode, "ЧГ=0");
	
	СтрокаМесто   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("000000000000000%1", ManualCode);
	КодМеста 	  = Прав(СтрокаМесто, 15); 
	СсылкаНаМесто = Справочники.МестаДоставки.НайтиПоКоду(КодМеста);
	Если СсылкаНаМесто.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualStuckDelivery, место с кодом %1 не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ManualCode);
        ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualStuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.ЭтоЗадача Тогда
		ЗадачаМета = ПолучитьЗадачу(Строка(СсылкаНаМесто.УникальныйИдентификатор()), RouteGUID, "00000000-0000-0000-0000-000000000000");
		ManualStuckDeliveryMetaData.Meta = ЗадачаМета.Meta;
		ManualStuckDeliveryMetaData.Data = Неопределено;
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.Архивный Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualStuckDelivery, место является [Архивным] работа с этим местом запрещена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualStuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	СсылкаНаМаршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
    Если ПустаяСтрока(СсылкаНаМаршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualStuckDelivery, маршрут с уникальным идентификатором: %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
        ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualStuckDeliveryMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ManualStuckDeliveryMetaData.Data = Неопределено;
		ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();

	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМеста();
	
	Запрос.УстановитьПараметр("СсылкаНаМесто", СсылкаНаМесто);
	Запрос.УстановитьПараметр("СсылкаНаМаршрут", СсылкаНаМаршрут);
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ПроверитьПолученияДанныхЗагрузкаМест(РезультатЗапроса, ManualStuckDeliveryMetaData) Тогда
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	ВыборкаОтгрузка  = РезультатЗапроса[1].Выбрать();
	ВыборкаПосещения = РезультатЗапроса[2].Выбрать();
	
	ВыборкаОтгрузка.Следующий();
	ВыборкаПосещения.Следующий();
	
	Если ПроверитьСтатусыМестаЗагрузкаМест(ВыборкаОтгрузка, ВыборкаПосещения, ManualStuckDeliveryMetaData) Тогда
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	Если ВыполнитьЗаписьМеста(ВыборкаОтгрузка, ManualStuckDeliveryMetaData, Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину) Тогда
		Возврат ManualStuckDeliveryMetaData;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Место успешно помещено в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ManualStuckDeliveryMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	ManualStuckDeliveryMetaData.Data = Неопределено;
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);

	Возврат ManualStuckDeliveryMetaData;
	
КонецФункции // ПогрузитьМестоВМашину()

Функция ЗавершитьДоставкуМеста(DeliveryGUID, RouteGUID) Экспорт

	ТДата = ТекущаяДата();
	СтруктураОшибки  = Новый Структура("Description, Function");
	
	FinishDeliveryPlaceMetaData = СоздатьФабрикуXDTOПоИмени("FinishDeliveryPlaceMetaData");
	
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "FinishDeliveryPlace(RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции FinishDeliveryPlace, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(DeliveryGUID, СтруктураОшибки, "FinishDeliveryPlace(DeliveryGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции FinishDeliveryPlace, параметр DeliveryGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	СсылкаНаМесто = Справочники.МестаДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(DeliveryGUID));
	Если ПустаяСтрока(СсылкаНаМесто.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции FinishDeliveryPlace, место с уникальным идентификатором %1 не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, DeliveryGUID);
		FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.ЭтоЗадача Тогда
		ЗадачаМета = ВыполнитьЗадачу(DeliveryGUID, RouteGUID);
		FinishDeliveryPlaceMetaData.Meta = ЗадачаМета.Meta;
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.Архивный Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции FinishDeliveryPlace, попытка отгрузки архивного места'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат FinishDeliveryPlaceMetaData;	
	КонецЕсли;
	
	СсылкаНаМаршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
    Если ПустаяСтрока(СсылкаНаМаршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции FinishDeliveryPlace, маршрут с уникальным идентификатором %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
		FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		FinishDeliveryPlaceMetaData.Data = Неопределено;
		FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();

	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМеста();
	
	Запрос.УстановитьПараметр("СсылкаНаМесто", СсылкаНаМесто);
	Запрос.УстановитьПараметр("СсылкаНаМаршрут", СсылкаНаМаршрут);
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ПроверитьПолученияДанныхЗагрузкаМест(РезультатЗапроса, FinishDeliveryPlaceMetaData) Тогда
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	ВыборкаОтгрузка  = РезультатЗапроса[1].Выбрать();
	ВыборкаПосещения = РезультатЗапроса[2].Выбрать();
	
	ВыборкаОтгрузка.Следующий();
	ВыборкаПосещения.Следующий();
	
	Если ПроверитьСтатусыМестаОтгрузкаМест(ВыборкаОтгрузка, ВыборкаПосещения, FinishDeliveryPlaceMetaData) Тогда
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
		
	Если ВыполнитьЗаписьМеста(ВыборкаОтгрузка, FinishDeliveryPlaceMetaData, Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру, Истина) Тогда
		Возврат FinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Место %1 успешно отгружено партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, DeliveryGUID);
	FinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	FinishDeliveryPlaceMetaData.Data = Неопределено;
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
	
	Возврат FinishDeliveryPlaceMetaData;		

КонецФункции // ЗавершитьДоставкуМеста()

Функция ЗавершитьДоставкуМестаВручную(ManualCode, RouteGUID) Экспорт

	ТДата = ТекущаяДата();
	СтруктураОшибки  = Новый Структура("Description, Function");
	
	ManualFinishDeliveryPlaceMetaData = СоздатьФабрикуXDTOПоИмени("ManualFinishDeliveryPlaceMetaData");
	
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "ManualFinishDeliveryPlace(RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualFinishDeliveryPlace, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	Если Число(ManualCode) < 1 Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualFinishDeliveryPlace, параметр ManualCode должен быть больше нуля.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	ManualCode = Формат(ManualCode, "ЧГ=0");
	
	СтрокаМесто   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("000000000000000%1", ManualCode);
	КодМеста	  = Прав(СтрокаМесто, 15); 
	СсылкаНаМесто = Справочники.МестаДоставки.НайтиПоКоду(КодМеста);
	Если СсылкаНаМесто.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualFinishDeliveryPlace, место с кодом %1 не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ManualCode);
        ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.ЭтоЗадача Тогда
		ЗадачаМета = ВыполнитьЗадачу(Строка(СсылкаНаМесто.УникальныйИдентификатор()), RouteGUID);
		ManualFinishDeliveryPlaceMetaData.Meta = ЗадачаМета.Meta;
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	
	
	Если СсылкаНаМесто.Архивный Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualFinishDeliveryPlace, место является [Архивным] работа с этим местом запрещена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualFinishDeliveryPlaceMetaData;	
	КонецЕсли;
	
	СсылкаНаМаршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
	Если ПустаяСтрока(СсылкаНаМаршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualFinishDeliveryPlace, маршрут с уникальным идентификатором: %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
        ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
		ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМеста();
	
	Запрос.УстановитьПараметр("СсылкаНаМесто", СсылкаНаМесто);
	Запрос.УстановитьПараметр("СсылкаНаМаршрут", СсылкаНаМаршрут);
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ПроверитьПолученияДанныхЗагрузкаМест(РезультатЗапроса, ManualFinishDeliveryPlaceMetaData) Тогда
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	ВыборкаОтгрузка  = РезультатЗапроса[1].Выбрать();
	ВыборкаПосещения = РезультатЗапроса[2].Выбрать();
	
	ВыборкаОтгрузка.Следующий();
	ВыборкаПосещения.Следующий();
	
	Если ПроверитьСтатусыМестаОтгрузкаМест(ВыборкаОтгрузка, ВыборкаПосещения, ManualFinishDeliveryPlaceMetaData) Тогда
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
		
	Если ВыполнитьЗаписьМеста(ВыборкаОтгрузка, ManualFinishDeliveryPlaceMetaData, Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру, Истина) Тогда
		Возврат ManualFinishDeliveryPlaceMetaData;
	КонецЕсли;
	
	Сообщение = НСтр("ru='Место %1 успешно отгружено партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ManualCode);
	ManualFinishDeliveryPlaceMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	ManualFinishDeliveryPlaceMetaData.Data = Неопределено;
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);


	Возврат ManualFinishDeliveryPlaceMetaData;		

КонецФункции // ЗавершитьДоставкуМеста()
 
Функция ЯЗдесь(GeoPlaceGuid, RouteGUID, IsPartner) Экспорт

	ТДата = ТекущаяДата();
	СтруктураОшибки  = Новый Структура("Description, Function");
	
	IAmHereMetaData = СоздатьФабрикуXDTOПоИмени("IAmHereMetaData");
		
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "IAmHere(RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        IAmHereMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmHereMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmHereMetaData;
	КонецЕсли;
	
	СсылкаНаМаршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
    Если ПустаяСтрока(СсылкаНаМаршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, маршрут с уникальным идентификатором: %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
        IAmHereMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmHereMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmHereMetaData;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(GeoPlaceGuid, СтруктураОшибки, "IAmHere(GeoPlaceGuid)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, неверный формат параметра GeoPlaceGuid.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
        IAmHereMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmHereMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmHereMetaData;
	КонецЕсли;
	
	СсылкаНаGeo = Справочники.КТС_ГеографическиеРасположенияПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(GeoPlaceGuid));
	Если ПустаяСтрока(СсылкаНаGeo.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, партнер с уникальным идентификатором %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, GeoPlaceGuid);
		IAmHereMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmHereMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmHereMetaData;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		IAmHereMetaData.Data = Неопределено;
		IAmHereMetaData.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmHereMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаФиксацияПрохожденияМаршрута();
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Блокировка = Новый БлокировкаДанных;
		ПоездкаЗаМаршрутом 		 = Блокировка.Добавить("РегистрСведений.КТС_ФиксацияПрохожденияМаршрута");
		ПоездкаЗаМаршрутом.Режим = РежимБлокировкиДанных.Исключительный;
		ПоездкаЗаМаршрутом.ИсточникДанных = РезультатЗапроса;
		ПоездкаЗаМаршрутом.ИспользоватьИзИсточникаДанных("ДокументПоездки", "ДокументПоездки");		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			
			ОтменитьТранзакцию();
			
			СообщениеОбОшибке = НСтр("ru='Произошла ошибка блокировки данных при выполнении функции IAmHere. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
			IAmHereMetaData.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);	
			IAmHereMetaData.Data = Неопределено;
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
	 		Возврат IAmHereMetaData;		
		КонецПопытки;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Статус = Перечисления.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки Тогда
				
				ОтменитьТранзакцию();
				
				Если Выборка.СкладПартнер = СсылкаНаGeo Тогда
					СообщениеОбОшибке = "Водитель уже на месте";
	        		IAmHereMetaData.Meta = СформироватьОбъектMeta(304, "NotModified", СообщениеОбОшибке);	
					IAmHereMetaData.Data = Неопределено;
					Возврат IAmHereMetaData;
				Иначе
					СообщениеОбОшибке = "Водитель сейчас находится в другом месте";
	        		IAmHereMetaData.Meta = СформироватьОбъектMeta(409, "Conflict", СообщениеОбОшибке);	
					IAmHereMetaData.Data = Неопределено;
					Возврат IAmHereMetaData;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КТС_ФиксацияПрохожденияМаршрута.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТДата);
		НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеПоездки.СсылкаНаДокумент);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период 		 	= ТДата;
			НоваяЗапись.ДокументПоездки = ДанныеПоездки.СсылкаНаДокумент;
			НоваяЗапись.СкладПартнер 	= СсылкаНаGeo;
			НоваяЗапись.Статус		 	= Перечисления.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ОтменитьТранзакцию();
			
			СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции IAmHere. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
			IAmHereMetaData.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);	
			IAmHereMetaData.Data = Неопределено;
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
	 		Возврат IAmHereMetaData;		
		КонецПопытки;
			
	ЗафиксироватьТранзакцию();

	
	
	Сообщение = НСтр("ru='Функция вполнена успешно'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	IAmHereMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	IAmHereMetaData.Data = Неопределено;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
	
	Возврат IAmHereMetaData;
	
КонецФункции // ЯЗдесь()

Функция ЯУехал(GeoPlaceGuid, RouteGUID, IsPartner) Экспорт

	ТДата = ТекущаяДата();
	СтруктураОшибки  = Новый Структура("Description, Function");
	
	IAmLeftMetaData = СоздатьФабрикуXDTOПоИмени("IAmLeftMetaData");	
	
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "IAmLeft(RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        IAmLeftMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmLeftMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmLeftMetaData;
	КонецЕсли;
	
	СсылкаНаМаршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
    Если ПустаяСтрока(СсылкаНаМаршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, маршрут с уникальным идентификатором: %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
        IAmLeftMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmLeftMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmLeftMetaData;
	КонецЕсли;

	Если Не ПроверитьУникальныйИдентификатор(GeoPlaceGuid, СтруктураОшибки, "IAmLeft(GeoPlaceGuid)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere,  неверный формат параметра GeoPlaceGuid.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
        IAmLeftMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmLeftMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmLeftMetaData;
	КонецЕсли;
	
	СсылкаНаGeo = Справочники.КТС_ГеографическиеРасположенияПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(GeoPlaceGuid));
	Если ПустаяСтрока(СсылкаНаGeo.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции IAmHere, партнер с уникальным идентификатором %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, GeoPlaceGuid);
		IAmLeftMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		IAmLeftMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmLeftMetaData;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		IAmLeftMetaData.Data = Неопределено;
		IAmLeftMetaData.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат IAmLeftMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаФиксацияПрохожденияМаршрута();
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Блокировка = Новый БлокировкаДанных;
		ПоездкаЗаМаршрутом 		 = Блокировка.Добавить("РегистрСведений.КТС_ФиксацияПрохожденияМаршрута");
		ПоездкаЗаМаршрутом.Режим = РежимБлокировкиДанных.Исключительный;
		ПоездкаЗаМаршрутом.ИсточникДанных = РезультатЗапроса;
		ПоездкаЗаМаршрутом.ИспользоватьИзИсточникаДанных("ДокументПоездки", "ДокументПоездки");		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			
			ОтменитьТранзакцию();
			
			СообщениеОбОшибке = НСтр("ru='Произошла ошибка блокировки данных при выполнении функции IAmLeft. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
			IAmLeftMetaData.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);	
			IAmLeftMetaData.Data = Неопределено;
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
	 		Возврат IAmLeftMetaData;		
		КонецПопытки;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.СкладПартнер <> СсылкаНаGeo Тогда
				
				ОтменитьТранзакцию();
				
				СообщениеОбОшибке = "Водитель сейчас находится в другом месте";
        		IAmLeftMetaData.Meta = СформироватьОбъектMeta(409, "Conflict", СообщениеОбОшибке);	
				IAmLeftMetaData.Data = Неопределено;
				Возврат IAmLeftMetaData;
			КонецЕсли;
			
			Если Выборка.Статус <> Перечисления.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки Тогда
				
				ОтменитьТранзакцию();
				
				СообщениеОбОшибке = "Водитель уже завершил отгрузку партнеру";
        		IAmLeftMetaData.Meta = СформироватьОбъектMeta(409, "Conflict", СообщениеОбОшибке);	
				IAmLeftMetaData.Data = Неопределено;
				Возврат IAmLeftMetaData;
			КонецЕсли;
				
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КТС_ФиксацияПрохожденияМаршрута.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТДата);
		НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеПоездки.СсылкаНаДокумент);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период 		 	= ТДата;
			НоваяЗапись.ДокументПоездки = ДанныеПоездки.СсылкаНаДокумент;
			НоваяЗапись.СкладПартнер 	= СсылкаНаGeo;
			НоваяЗапись.Статус		 	= Перечисления.КТС_СтатусыПрохожденияМаршрута.ОтгрузкаЗавершена;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ОтменитьТранзакцию();
			
			СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции IAmLeft. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
			IAmLeftMetaData.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);	
			IAmLeftMetaData.Data = Неопределено;
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
	 		Возврат IAmLeftMetaData;		
		КонецПопытки;
			
	ЗафиксироватьТранзакцию();

	
	
	Сообщение = НСтр("ru='Функция вполнена успешно'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	IAmLeftMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	IAmLeftMetaData.Data = Неопределено;
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Фиксация перемещений водителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СообщениеОбОшибке);
	
	Возврат IAmLeftMetaData;
	
КонецФункции // ЯУехал()

Функция ЗаписатьСообщениеВЖурнал(LogEntries) Экспорт

	ResponseMeta = СоздатьФабрикуXDTOПоИмени("ResponseMeta");
	
	Если ТипЗнч(LogEntries) <> Тип("ОбъектXDTO") Тогда
		СообщениеОбОшибке = НСтр("ru='Параметр LogEntries имеет неверный формат'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Попытка
		СписокЭлементов	= LogEntries.ПолучитьСписок("LogEntry");
	Исключение
		СообщениеОбОшибке = НСтр("ru='Параметр LogEntries имеет неверный формат'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецПопытки;
	
	
	КоличестоЭлементов = СписокЭлементов.Количество();
	
	Если КоличестоЭлементов = 0 Тогда
		СообщениеОбОшибке = НСтр("ru='Параметр LogEntries не содержит данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(204, "NoContent", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	
	
	НачатьТранзакцию();
	
	Для Индекс = 0 По КоличестоЭлементов-1 Цикл
		
		Попытка
			ЭлементДляЗаписи = СписокЭлементов.ПолучитьXDTO(Индекс);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Данные свойств CreatedAt и Message не заполнены'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
			Возврат ResponseMeta;
		КонецПопытки;
		
		Если ТипЗнч(ЭлементДляЗаписи) <> Тип("ОбъектXDTO") Тогда
			СообщениеОбОшибке = НСтр("ru='Свойство LogEntry имеет неверный формат.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
			Возврат ResponseMeta;
		КонецЕсли;
		
		Если ПустаяСтрока(ЭлементДляЗаписи.Message) Тогда
			СообщениеОбОшибке = НСтр("ru='Свойство Message не содержит данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
			Возврат ResponseMeta;
		КонецЕсли;
		
		Если ЭлементДляЗаписи.CreatedAt <= 0 Тогда
			СообщениеОбОшибке = НСтр("ru='Свойство CreatedAt имеет неверный формат.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
			Возврат ResponseMeta;
		КонецЕсли;
		
		Период			  = ТекущаяДата();
		ВремяРегистрации  = ВремяUnix2Время1С(ЭлементДляЗаписи.CreatedAt);
		Сообщение		  = ЭлементДляЗаписи.Message;
		Пользователь	  = ПараметрыСеанса.ТекущийПользователь;
		СообщениеОбОшибке = "";
		Если Не ЗаписатьСообщениевРегистр(Период, ДанныеПоездки.СсылкаНаДокумент, ВремяРегистрации, Сообщение, Пользователь, СообщениеОбОшибке) Тогда
			ОтменитьТранзакцию();
			ResponseMeta.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
			Возврат ResponseMeta;
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	Сообщение = НСтр("ru='Функция вполнена успешно'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ResponseMeta.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				,
				Сообщение);
	Возврат ResponseMeta;

КонецФункции // ЗаписатьСообщениеВЖурнал()

Функция ПрочитатьСообщенияИзЖурнала(Count, AfterTimestamp, BeforeTimestamp) Экспорт

	GetLogMessagesMetaData = СоздатьФабрикуXDTOПоИмени("GetLogMessagesMetaData");
	LogEntries			   = СоздатьФабрикуXDTOПоИмени("LogEntries");
	
	Если Count = Неопределено Тогда
		КоличествоЗаписей = 20;
	Иначе
		КоличествоЗаписей = ?(Count=0, 20, Count);
		КоличествоЗаписей = ?(КоличествоЗаписей > 100, 100, КоличествоЗаписей);
	КонецЕсли;
	
	Если КоличествоЗаписей < 0 Тогда
		СообщениеОбОшибке = НСтр("ru='Свойство Count дожно быть больше 0.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		GetLogMessagesMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат GetLogMessagesMetaData;
	КонецЕсли;
	
	Если AfterTimestamp = Неопределено Тогда
		ДатаНачало = Дата("00010101");
	Иначе
		Если AfterTimestamp < 0 Тогда
			СообщениеОбОшибке = "Свойство AfterTimestamp дожно быть больше 0.";
			GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
			GetLogMessagesMetaData.Data = Неопределено;
			Возврат GetLogMessagesMetaData;
		КонецЕсли;
		ДатаНачало = ?(AfterTimestamp=0, Дата("00010101"), ВремяUnix2Время1С(AfterTimestamp));
	КонецЕсли;
	
	Если BeforeTimestamp = Неопределено Тогда
		ДатаОкончание = Дата("39990101");
	Иначе
		Если BeforeTimestamp < 0 Тогда
			СообщениеОбОшибке = "Свойство BeforeTimestamp дожно быть больше 0.";
			GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
			GetLogMessagesMetaData.Data = Неопределено;
			Возврат GetLogMessagesMetaData;
		КонецЕсли;
		ДатаОкончание = ?(BeforeTimestamp=0, Дата("39990101"), ВремяUnix2Время1С(BeforeTimestamp));
	КонецЕсли;
	
	Если ДатаОкончание <= ДатаНачало Тогда
		СообщениеОбОшибке = НСтр("ru='Свойство BeforeTimestamp должно быть больше свойства AfterTimestamp.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		GetLogMessagesMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат GetLogMessagesMetaData;
	КонецЕсли;
	
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		GetLogMessagesMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат GetLogMessagesMetaData;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	
		
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЧтенияСообщенийЖурнала(КоличествоЗаписей);
	
	Запрос.УстановитьПараметр("ДатаНачало", ДатаНачало);
	Запрос.УстановитьПараметр("ДатаОкончание", ДатаОкончание);
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Отсутствуют сообщения для отображения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(204, "NoContent", СообщениеОбОшибке);	
		GetLogMessagesMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат GetLogMessagesMetaData;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		LogEntry 		   	= СоздатьФабрикуXDTOПоИмени("LogEntry");
		LogEntry.CreatedAt 	= Время1С2ВремяUnix(Выборка.ВремяРегистрации);
		LogEntry.Message	= Выборка.Сообщение;
		LogEntries.LogEntry.Добавить(LogEntry);
	КонецЦикла;
	
	Сообщение = НСтр("ru='Функция виполнена успешно'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	GetLogMessagesMetaData.Meta = СформироватьОбъектMeta(200, "ОК", Сообщение);
	GetLogMessagesMetaData.Data = LogEntries;
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Логирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
	
	Возврат GetLogMessagesMetaData;

КонецФункции // ПрочитатьСообщенияИзЖурнала()

Функция ПолучитьЗадачу(TaskGUID, RouteGUID, AssignedQRCode) Экспорт
		
	Возврат УстановитьСтатусЗадачи(RouteGUID, TaskGUID, Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения, AssignedQRCode);
	
КонецФункции

Функция ВыполнитьЗадачу(TaskGUID, RouteGUID) Экспорт
	
	Возврат УстановитьСтатусЗадачи(RouteGUID, TaskGUID, Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена);

КонецФункции // ВыполнитьЗадачу()

Функция ПринятьОплату(RoutePlaceGuid, RouteGuid, PaymentInfo) Экспорт

	СтруктураОшибки  = Новый Структура("Description, Function");
	ResponseMeta	 = СоздатьФабрикуXDTOПоИмени("ResponseMeta");
	Период			 = ТекущаяДата();
	СсылкаНаДокумент = Неопределено;
	ВалютаУПР		 = Константы.ВалютаУправленческогоУчета.Получить();
	
	НачатьТранзакцию();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщение = НСтр("ru='Маршрут водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
    Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаДокумент = Выборка.СсылкаНаДокумент;
	КонецЕсли;
	
	Если СсылкаНаДокумент = Неопределено Тогда
		Сообщение = НСтр("ru='Маршрут водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "ReceivePayment") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;

	Если Не ПроверитьУникальныйИдентификатор(RoutePlaceGuid, СтруктураОшибки, "ReceivePayment") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, параметр RoutePlaceGuid имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
        ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	
	МаршрутСсылка = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGuid));
	Если ПустаяСтрока(МаршрутСсылка.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, маршрут с уникальным идентификатором %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGuid);
        ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
		
	ПартнерСсылка = Справочники.КТС_ГеографическиеРасположенияПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(RoutePlaceGuid));
	Если ПустаяСтрока(ПартнерСсылка.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, партнер с уникальным идентификатором %1 не найден'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RoutePlaceGuid);
        ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если ТипЗнч(PaymentInfo) <> Тип("ОбъектXDTO") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, параметр PaymentInfo имеет неверный формат'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	
	СуммаОплаты  = ПеревестиКопейкиВСумму(PaymentInfo.Amount);
	КодВалюты    = PaymentInfo.CurrencyCode;
	
	Если СуммаОплаты <= 0 Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, сумма опаты должна бить бульше 0'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(Строка(КодВалюты));
	Если ПустаяСтрока(ВалютаСсылка.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, валюта оплаты не найдена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	Владелец = ПартнерСсылка.Владелец;
	Если ТипЗнч(Владелец) <> Тип("СправочникСсылка.Партнеры") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceivePayment, оплату можна принимать только от партнеров'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RoutePlaceGuid);
        ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецЕсли;
	
	Период = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.КТС_ОплатыПринятыеВодителями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.ДокументПоездки.Установить(СсылкаНаДокумент);
	НаборЗаписей.Отбор.Партнер.Установить(Владелец);
	НаборЗаписей.Отбор.Валюта.Установить(ВалютаСсылка);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.ДокументПоездки 	= СсылкаНаДокумент;
	Запись.Партнер 			= Владелец;
	Запись.Валюта 			= ВалютаСсылка;
	Запись.СуммаПринято 	= СуммаОплаты;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции ReceivePayment. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
		ResponseMeta.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецПопытки;
	
	
	// Пересчитываем по курсу
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Валюта 			 КАК Валюта,
	                      |	Курс / Кратность КАК Курс
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних");
						  
	КурсыВалют = Запрос.Выполнить().Выгрузить();
	КурсУпр	   = 1;
	КурсОплат  = 1;
	
	СтруктураПоиска = Новый Структура("Валюта", ВалютаУПР);
	РезультатПоиска = КурсыВалют.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		КурсУпр = РезультатПоиска[0].Курс;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Валюта", ВалютаСсылка);
	РезультатПоиска = КурсыВалют.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		КурсОплат = РезультатПоиска[0].Курс;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутомФинансы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПоездки.Установить(СсылкаНаДокумент);
	НаборЗаписей.Отбор.Партнер.Установить(Владелец);
	
	НаборЗаписей.Прочитать();
	
	Для каждого Запись ИЗ НаборЗаписей Цикл
		Запись.СуммаПолученнаяВодителем = Запись.СуммаПолученнаяВодителем + (СуммаОплаты*(КурсОплат / КурсУпр));
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции ReceivePayment. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
		ResponseMeta.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат ResponseMeta;
	КонецПопытки;
	
	Сообщение 		  = НСтр("ru='Функция вполнена успешно'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ResponseMeta.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Оплата от партнера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
			
	ЗафиксироватьТранзакцию();
	
	Возврат ResponseMeta;
	
КонецФункции // ПринятьОплату()
 
Функция ПолучитьИнформациюПоИдентифкатору(Guid) Экспорт
	
	ResourceInfoMetaData = СоздатьФабрикуXDTOПоИмени("ResourceInfoMetaData");
	СтруктураОшибки 	 = Новый Структура("Description, Function");
	
	Если Не ПроверитьУникальныйИдентификатор(Guid, СтруктураОшибки, "GetResourceInfo(Guid)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции GetResourceInfo, параметр Guid имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		ResourceInfoMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ResourceInfoMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResourceInfoMetaData;
	КонецЕсли;
	
	Идектификатор = Новый УникальныйИдентификатор(Guid);
	
	СсылкаМесто = Справочники.МестаДоставки.ПолучитьСсылку(Идектификатор);
	Если НЕ ПустаяСтрока(СсылкаМесто.ВерсияДанных) Тогда
		Если СсылкаМесто.ЭтоЗадача Тогда
			ИнформацияПоЗадаче(СсылкаМесто, ResourceInfoMetaData);
		Иначе
			ИнформацияПоМесту(СсылкаМесто, ResourceInfoMetaData);
		КонецЕсли;
		Возврат ResourceInfoMetaData;
	КонецЕсли;
	
	СообщениеОбОшибке			= НСтр("ru='Информации по уникальному идентифкатору не найдено.'" , ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ResourceInfoMetaData.Data 	= Неопределено;
	ResourceInfoMetaData.Meta	= СформироватьОбъектMeta(404, "NotFound", СообщениеОбОшибке);
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
			
	Возврат ResourceInfoMetaData;
	
КонецФункции

Функция ПолучитьИнформациюПоКоду(ManualCode) Экспорт
		
	ResourceInfoMetaData = СоздатьФабрикуXDTOПоИмени("ResourceInfoMetaData");
		
	Если ManualCode < 1 Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ManualGetResourceInfo, параметр ManualCode должен быть больше нуля.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ResourceInfoMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ResourceInfoMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResourceInfoMetaData;
	КонецЕсли;
	
	ManualCode = Формат(ManualCode, "ЧГ=0");
	
	СтрокаМесто   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("000000000000000%1", ManualCode);
	КодМеста	  = Прав(СтрокаМесто, 15); 
	СсылкаНаМесто = Справочники.МестаДоставки.НайтиПоКоду(КодМеста);
	Если ПустаяСтрока(СсылкаНаМесто.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции, место с кодом %1 не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ManualCode);
        ResourceInfoMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		ResourceInfoMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResourceInfoMetaData;
	КонецЕсли;
	
	Если СсылкаНаМесто.ЭтоЗадача Тогда
		ИнформацияПоЗадаче(СсылкаНаМесто, ResourceInfoMetaData);
	Иначе
		ИнформацияПоМесту(СсылкаНаМесто, ResourceInfoMetaData);
	КонецЕсли;
	
	Возврат ResourceInfoMetaData;
	
КонецФункции

Функция ПолучитьСписокСкладов() Экспорт
	
	WarehouseMetaData	= СоздатьФабрикуXDTOПоИмени("WarehouseMetaData");
	WarehouseList		= СоздатьФабрикуXDTOПоИмени("WarehouseList");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Маршрут				= Неопределено;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщение = НСтр("ru='Маршрут водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		WarehouseMetaData.Data = Неопределено;
		WarehouseMetaData.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат WarehouseMetaData;
	КонецЕсли;
	
    Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Маршрут = Выборка.Ссылка;				
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокСкладов();
						  
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Manager 	= СоздатьФабрикуXDTOПоИмени("Manager");
		ContactInfo = СоздатьФабрикуXDTOПоИмени("ContactInfo");
		Warehouse	= СоздатьФабрикуXDTOПоИмени("Warehouse");
		
		Manager.Name 	= Строка(Выборка.Менеджер);
		Manager.Phone   = Выборка.ТелефонПользователя;
		
		ContactInfo.Phone 			= Выборка.ТелефонСклада;
		ContactInfo.MainManager 	= Manager;
		ContactInfo.ContactPersons  = Неопределено;
		
		Warehouse.GUID 			= Строка(Выборка.Склад.УникальныйИдентификатор());
		Warehouse.Name 			= Выборка.НаименованиеСклада;
		Warehouse.Address   	= Выборка.АдресСклада;
		Warehouse.ContactInfo   = ContactInfo;
		
		WarehouseList.Warehouse.Добавить(Warehouse);
		
	КонецЦикла;
	
	Сообщение 			   = НСтр("ru='Список складов загружен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	WarehouseMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	WarehouseMetaData.Data = WarehouseList;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Список складов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
	
	Возврат WarehouseMetaData;
	
КонецФункции

Функция СоздатьЗадачу(AssignedQRCode, WarehouseGUID) Экспорт

	TaskMetaData 		= СоздатьФабрикуXDTOПоИмени("TaskMetaData");
	СтруктураОшибки 	= Новый Структура("Description, Function");
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Маршрут				= Неопределено;
	ДокументСсылка		= Неопределено; // Ссылка на документ «Поездка»
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщение = НСтр("ru='Маршрут водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		TaskMetaData.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение маршрута водителем'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат TaskMetaData;
	КонецЕсли;
	
    Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Маршрут 		= Выборка.Ссылка;
		ДокументСсылка  = Выборка.СсылкаНаДокумент;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(AssignedQRCode, СтруктураОшибки, "CreateTask(AssignedQRCode, WarehouseGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции CreateTask, параметр AssignedQRCode имеет неверный формат. %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(WarehouseGUID, СтруктураОшибки, "CreateTask(AssignedQRCode, WarehouseGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции CreateTask, параметр WarehouseGUID имеет неверный формат. %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьУникальныйИдентификаторНаДубли(AssignedQRCode);
	Если РезультатПроверки <> Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Данный QR-код уже использовался в задачах.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;
	КонецЕсли;
	
	СкладСсылка = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(WarehouseGUID));
	Если ПустаяСтрока(СкладСсылка.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Склад по идентификатору %1 не найден.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, WarehouseGUID);
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;
	КонецЕсли;
	
	Если ПроверитьДоступностьСкладаПоМаршруту(СкладСсылка, Маршрут) Тогда
		СообщениеОбОшибке = НСтр("ru='Склад не может быть назначен в возвратную доставку.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, WarehouseGUID);
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;

	КонецЕсли;
	
	GeoОтправитель   = ПолучитьGeoОтправителя(ДокументСсылка);
	АдресСклада		 = ПолучитьАдресСклада(СкладСсылка);
	GeoСклад		 = ПолучитьGeoСклада(СкладСсылка, АдресСклада);
	
	Если GeoОтправитель = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Невозможно получить геолокацию отправителя'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;
	КонецЕсли;
	
	Если GeoСклад = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Невозможно получить геолокацию склада'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат TaskMetaData;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	НовоеМесто 				 					= Справочники.МестаДоставки.СоздатьЭлемент();
	НовоеМесто.УстановитьНовыйКод();
	НовоеМесто.АдресДоставки 					= АдресСклада;
	НовоеМесто.Владелец	 						= СкладСсылка;
	НовоеМесто.ЗаполнятьУникальныйИдентификатор = Истина;
	НовоеМесто.Ответственный					= ТекущийПользователь;
	НовоеМесто.ТекстЗадачи						= "Задача сформирована вручную водителем #" + Формат(Строка(НовоеМесто.Код), "ЧГ=0") + ". (" + АдресСклада + ")";
	НовоеМесто.УникальныйИдентификатор			= Новый УникальныйИдентификатор(AssignedQRCode);
	НовоеМесто.ЭтоЗадача						= Истина;
	
	Попытка
	    НовоеМесто.Записать();			
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат TaskMetaData;
	КонецПопытки;
	
	
	ТекущаяДата  = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата-1);
	НаборЗаписей.Отбор.Место.Установить(НовоеМесто.Ссылка);
	
	Запись 		  			= НаборЗаписей.Добавить();
	Запись.Период 			= ТекущаяДата-1;
	Запись.Место  			= НовоеМесто.Ссылка;
	Запись.СтатусОтгрузки   = Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена;
	Запись.ВариантМаршрута	= Маршрут;
	Запись.Отправитель		= GeoОтправитель.Отправитель;
	Запись.АдресОтправителя = GeoОтправитель.АдресОтправителя;
	Запись.Пользователь		= ТекущийПользователь;
	
	Попытка
		НаборЗаписей.Записать();    			
	Исключение
	    СообщениеОбОшибке = ОписаниеОшибки();
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат TaskMetaData;
	КонецПопытки; 
	
	
	НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
	НаборЗаписей.Отбор.Место.Установить(НовоеМесто.Ссылка);
	
	Запись 		  			= НаборЗаписей.Добавить();
	Запись.Период 			= ТекущаяДата;
	Запись.Место  			= НовоеМесто.Ссылка;
	Запись.СтатусОтгрузки   = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения;
	Запись.ВариантМаршрута	= Маршрут;
	Запись.Отправитель		= GeoОтправитель.Отправитель;
	Запись.АдресОтправителя = GeoОтправитель.АдресОтправителя;
	Запись.Пользователь		= ТекущийПользователь;
	Запись.Отправитель		= GeoОтправитель.Отправитель;
	
	Попытка
		НаборЗаписей.Записать();    			
	Исключение
	    СообщениеОбОшибке = ОписаниеОшибки();
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат TaskMetaData;
	КонецПопытки;
	
	
	Блокировка = Новый БлокировкаДанных;
	ПоездкаЗаМаршрутом 		 = Блокировка.Добавить("РегистрСведений.ПоездкаЗаМаршрутом");
	ПоездкаЗаМаршрутом.Режим = РежимБлокировкиДанных.Исключительный;
	ПоездкаЗаМаршрутом.УстановитьЗначение("ДокументПоездки", ДокументСсылка);
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат TaskMetaData;		
	КонецПопытки;
	
	
	НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.МестоДоставки.Установить(НовоеМесто.Ссылка);
	
	Запись 								= НаборЗаписей.Добавить();
	Запись.ДокументПоездки 				= ДокументСсылка;
	Запись.МестоДоставки 				= НовоеМесто.Ссылка;
	Запись.ЭтоЗадача 					= Истина;
    Запись.ЗадачаПоставлена 			= ТекущаяДата - 1;
	Запись.ЗадачаВПроцессеВыполнения 	= ТекущаяДата;
	Запись.Owner						= СкладСсылка;
	Запись.OwnerAdress					= АдресСклада;
	Запись.OwnerGeoGUID					= GeoСклад.GUID;
	Запись.OwnerGeoLocation				= GeoСклад.СсылкаGeo;
	Запись.GUID							= Строка(НовоеМесто.Ссылка.УникальныйИдентификатор());
	Запись.ManualCode					= Число(НовоеМесто.Ссылка.Код);
	Запись.AssignedQRCode				= AssignedQRCode;
	Запись.IsQRCodeScanningNeeded		= Истина;
	Запись.Author						= ТекущийПользователь;
	Запись.Comment						= НовоеМесто.ТекстЗадачи;
	Запись.Отправитель					= GeoОтправитель.Отправитель;
	Запись.АдресОтправителя				= GeoОтправитель.АдресОтправителя;
	Запись.ОтправительGeoGUID			= GeoОтправитель.GUID;
	Запись.ОтправительGeoLocation		= GeoОтправитель.GeoСсылка;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		TaskMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		TaskMetaData.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		ОтменитьТранзакцию();
		Возврат TaskMetaData;		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Task = СоздатьФабрикуXDTOПоИмени("Task");
	Task.GUID 					= Строка(НовоеМесто.Ссылка.УникальныйИдентификатор());
	Task.ManualCode 			= Число(НовоеМесто.Ссылка.Код);
	Task.Comment 				= "Задача сформирована вручную водителем.";
	Task.Author					= ТекущийПользователь.Наименование;
	Task.Status 				= 2;
	Task.AssignedQRCode 		= AssignedQRCode;
	Task.IsQRCodeScanningNeeded = Истина;
	
	Сообщение 		  = НСтр("ru='Задача успешно создана.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	TaskMetaData.Meta = СформироватьОбъектMeta(200, "OK", Сообщение);
	TaskMetaData.Data = Task;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
	
    Возврат TaskMetaData;

КонецФункции // СоздатьЗадачу()





////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СоздатьФабрикуXDTOПоИмени(Имя)

	ТипФабрики = ФабрикаXDTO.Тип("http://www.ktc-ua.com/delivery", Имя);
	Возврат ФабрикаXDTO.Создать(ТипФабрики);

КонецФункции // СоздатьФабрикуXDTOПоИмени()



 
 
 

// Функции получения дополнительных типов

Функция GetPlaces(СсылкаНаМаршрут, СсылкаНаДокумент)

	Places 			= СоздатьФабрикуXDTOПоИмени("Places");
	
	ВалютаУпрУчета  = Константы.ВалютаУправленческогоУчета.Получить();
	КодВалюты		= Число(ВалютаУпрУчета.Код);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМестаВПоездке();
	Запрос.УстановитьПараметр("ДокументПоездки", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("ВариантМаршрута", СсылкаНаМаршрут);
	Запрос.УстановитьПараметр("НеПередаватьНаAndroidЗавершенныеМеста", СсылкаНаДокумент.НеПередаватьНаAndroidЗавершенныеМеста);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформацииНомерТелефона", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииНомерТелефонаСклада", Справочники.ВидыКонтактнойИнформации.ТелефонСклада);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииНомерТелефонаПартнера", Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииНомерТелефонПользователя",Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Выборка    			= РезультатПакета[9].Выбрать();
	ПолученныеОплаты    = РезультатПакета[22].Выгрузить();
	PacksTasks 			= РезультатПакета[11].Выгрузить();
	PacksTasks.Индексы.Добавить("Получатель, Отправитель, ЭтоЗадача");
	Пока Выборка.Следующий() Цикл

		RoutePlace = СоздатьФабрикуXDTOПоИмени("RoutePlace");	
		RoutePlace.GUID = Строка(Выборка.Владелец.УникальныйИдентификатор());
		ЗаполнитьЗначенияСвойств(RoutePlace, Выборка);
		
		RoutePlace.PacksToLoad = СоздатьФабрикуXDTOПоИмени("Packs");
		МассивПаков = PacksTasks.НайтиСтроки(Новый Структура("Отправитель, ЭтоЗадача", Выборка.Георасположение, Ложь));
		Для каждого Пак Из МассивПаков Цикл				
			Pack = СоздатьФабрикуXDTOПоИмени("Pack");
			ЗаполнитьЗначенияСвойств(Pack, Пак);
			RoutePlace.PacksToLoad.Pack.Добавить(Pack);
		КонецЦикла;
		
		RoutePlace.PacksToUnload = СоздатьФабрикуXDTOПоИмени("Packs");
		МассивПаков = PacksTasks.НайтиСтроки(Новый Структура("Получатель, ЭтоЗадача", Выборка.Георасположение, Ложь));
		Для каждого Пак Из МассивПаков Цикл				
			Pack = СоздатьФабрикуXDTOПоИмени("Pack");
			ЗаполнитьЗначенияСвойств(Pack, Пак);
			RoutePlace.PacksToUnload.Pack.Добавить(Pack);
		КонецЦикла;
		
		RoutePlace.TasksToReceive = СоздатьФабрикуXDTOПоИмени("TaskList");
		МассивТасков = PacksTasks.НайтиСтроки(Новый Структура("Отправитель, ЭтоЗадача", Выборка.Георасположение, Истина));
		Для каждого Таск Из МассивТасков Цикл				
			Task = СоздатьФабрикуXDTOПоИмени("Task");
			ЗаполнитьЗначенияСвойств(Task, Таск);
			RoutePlace.TasksToReceive.Task.Добавить(Task);
		КонецЦикла;
		
		RoutePlace.TasksToExecute = СоздатьФабрикуXDTOПоИмени("TaskList");
		МассивТасков = PacksTasks.НайтиСтроки(Новый Структура("Получатель, ЭтоЗадача", Выборка.Георасположение, Истина));
		Для каждого Таск Из МассивТасков Цикл				
			Task = СоздатьФабрикуXDTOПоИмени("Task");
			ЗаполнитьЗначенияСвойств(Task, Таск);
			RoutePlace.TasksToExecute.Task.Добавить(Task);
		КонецЦикла;
		
		RoutePlace.ContactInfo = СоздатьФабрикуXDTOПоИмени("ContactInfo");
		RoutePlace.ContactInfo.Phone 			 = НормализироватьНомерТелефона(Выборка.Phone);
		RoutePlace.ContactInfo.MainManager		 = СоздатьФабрикуXDTOПоИмени("Manager");
		RoutePlace.ContactInfo.MainManager.Name  = Строка(Выборка.ОсновнойМенеджер);
		RoutePlace.ContactInfo.MainManager.Phone = НормализироватьНомерТелефона(Строка(Выборка.НомерТелефонаОтветственого));
		
		Если Выборка.IsPartner Тогда
			RoutePlace.ContactInfo.ContactPersons = ПолучитьСписокКонтакныхЛиц(Выборка.Владелец);
			RoutePlace.PaymentInfoSection = ПолучитьИнформациюПроОплаты(СсылкаНаМаршрут, Выборка.Владелец, Выборка.СуммаУчета, КодВалюты, ПолученныеОплаты);
		КонецЕсли;
				
		Places.RoutePlace.Добавить(RoutePlace);

	КонецЦикла;
	
    Возврат Places;
	
КонецФункции // GetPlaces()


Функция ПолучитьТекстЗапросаПоездкаЗаМаршрутом()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка 							КАК СсылкаНаДокумент,
		|	ВариантМаршрута					КАК Ссылка,
		|	ВариантМаршрута.Наименование 	КАК Name,
		|   КонецПериода(&Сегодня, День)	КАК ShipmentEnd
		|ИЗ
		|	Документ.ПоездкаЗаМаршрутом
		|ГДЕ
		|	Проведен
		|И	Водитель = &Водитель
		|И	СтатусПоездки = Значение(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
		|";
	Возврат ТекстЗапроса;
	
Конецфункции
 
Функция ПолучитьТекстЗапросаКурсыВалют()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Валюта 				КАК Currency,
				   |	Валюта.Код 			КАК Code,
				   |	Валюта.Наименование КАК Name,
	               |	Курс 				КАК Course,
	               |	Кратность 			КАК Multiplicity,
				   |	0					КАК Сортировка
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУправленческогоУчета)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
	               |	Валюта 				КАК Currency,
				   |	Валюта.Код 			КАК Code,
				   |	Валюта.Наименование КАК Name,
	               |	Курс 				КАК Course,
	               |	Кратность 			КАК Multiplicity,
				   |	1					КАК Сортировка
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта <> &ВалютаУправленческогоУчета)
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Сортировка";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаКурсыВалют()

Функция ПолучитьТекстЗапросаМестаВПоездке()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//1. Фиксация маршрута
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ФиксацияМаршрута
		|ИЗ
		|	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута.СрезПоследних(, ДокументПоездки = &ДокументПоездки)
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//2. КешПоездки
		|ВЫБРАТЬ
		|	ПоездкаЗаМаршрутом.МестоДоставки.ИспользоватьОтображениеКакЗадачи КАК ИспользоватьОтображениеКакЗадачи,
		|	ПоездкаЗаМаршрутом.*
		|ПОМЕСТИТЬ КешПоездкаЗаМаршрутом
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ФиксацияМаршрута КАК ФМ_OwnerGeoLocation
		|ПО	ФМ_OwnerGeoLocation.СкладПартнер = ПоездкаЗаМаршрутом.OwnerGeoLocation
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ФиксацияМаршрута КАК ФМ_ОтправительGeoLocation
		|ПО	ФМ_ОтправительGeoLocation.СкладПартнер = ПоездкаЗаМаршрутом.ОтправительGeoLocation
		|
		|ГДЕ
		|	ПоездкаЗаМаршрутом.ДокументПоездки = &ДокументПоездки
		|И  НЕ ИсключеноИзДоставки
		|И	ВЫБОР
		|		КОГДА &НеПередаватьНаAndroidЗавершенныеМеста
		|		ТОГДА 	ВЫБОР 
		|					КОГДА ФМ_OwnerGeoLocation.Статус 		= ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки)
		|					ТОГДА ИСТИНА
		|					КОГДА ФМ_ОтправительGeoLocation.Статус 	= ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки)
		|					ТОГДА ИСТИНА
		|					ИНАЧЕ НЕ Архивное
		|				КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//3. FRoutePlace
		|ВЫБРАТЬ
		|	ПоездкаЗаМаршрутом.Owner				КАК Владелец,
		|	ВЫБОР
		|		КОГДА ПоездкаЗаМаршрутом.Owner ССЫЛКА Справочник.Склады				
		|		ТОГДА ВЫРАЗИТЬ(ПоездкаЗаМаршрутом.Owner КАК Справочник.Склады).ТекущийОтветственный
		|		ИНАЧЕ ВЫРАЗИТЬ(ПоездкаЗаМаршрутом.Owner КАК Справочник.Партнеры).ОсновнойМенеджер
		|	КОНЕЦ КАК Менеджер,
		|	ПоездкаЗаМаршрутом.Owner.Наименование 	КАК Name,
		|	ПоездкаЗаМаршрутом.OwnerGeoGUID	      	КАК GUID,
		|	ПоездкаЗаМаршрутом.OwnerAdress	      	КАК Address,
		|	ПоездкаЗаМаршрутом.IsPartner			КАК IsPartner,
		|	ПоездкаЗаМаршрутом.OwnerGeoLocation	    КАК Георасположение
		|ПОМЕСТИТЬ FRoutePlace
		|ИЗ
		|	КешПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
		|	
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	ПоездкаЗаМаршрутом.Отправитель,
		|	ВЫБОР
		|		КОГДА ПоездкаЗаМаршрутом.Отправитель ССЫЛКА Справочник.Склады				
		|		ТОГДА ВЫРАЗИТЬ(ПоездкаЗаМаршрутом.Отправитель КАК Справочник.Склады).ТекущийОтветственный
		|		ИНАЧЕ ВЫРАЗИТЬ(ПоездкаЗаМаршрутом.Отправитель КАК Справочник.Партнеры).ОсновнойМенеджер
		|	КОНЕЦ,
		|	ПоездкаЗаМаршрутом.Отправитель.Наименование,
		|	ПоездкаЗаМаршрутом.ОтправительGeoGUID,
		|	ПоездкаЗаМаршрутом.АдресОтправителя,
		|	ВЫБОР
		|		КОГДА ПоездкаЗаМаршрутом.Отправитель Ссылка Справочник.Партнеры
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ,
		|	ПоездкаЗаМаршрутом.ОтправительGeoLocation	
		|ИЗ
		|	КешПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//4. SRoutePlace
		|ВЫБРАТЬ
		|	FRoutePlace.Владелец,
		|	ВЫБОР
		|		КОГДА КешСторонаПолучатель.ЭтоЗадача
		|		ТОГДА КешСторонаПолучатель.ЗадачаПоставлена
		|		ИНАЧЕ КешСторонаПолучатель.КомплектацияЗавершена
		|	КОНЕЦ КАК Период	
		|ПОМЕСТИТЬ SRoutePlace
		|ИЗ
		|	FRoutePlace КАК FRoutePlace
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешПоездкаЗаМаршрутом КАК КешСторонаПолучатель
		|ПО	КешСторонаПолучатель.Owner = FRoutePlace.Владелец 
        |
		|ОБЪЕДИНИТЬ 
        |
		|ВЫБРАТЬ
		|	FRoutePlace.Владелец,
		|	ВЫБОР
		|		КОГДА КешСторонаОтправитель.ЭтоЗадача
		|		ТОГДА КешСторонаОтправитель.ЗадачаПоставлена
		|		ИНАЧЕ КешСторонаОтправитель.КомплектацияЗавершена
		|	КОНЕЦ КАК Период	
		|ИЗ
		|	FRoutePlace КАК FRoutePlace
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешПоездкаЗаМаршрутом КАК КешСторонаОтправитель
		|ПО	КешСторонаОтправитель.Отправитель = FRoutePlace.Владелец 		
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//5. TRoutePlace
		|ВЫБРАТЬ
		|	SRoutePlace.Владелец,
		|	МАКСИМУМ(SRoutePlace.Период) КАК Период	
		|ПОМЕСТИТЬ TRoutePlace
		|ИЗ
		|	SRoutePlace КАК SRoutePlace
        |
		|СГРУППИРОВАТЬ ПО
		|	SRoutePlace.Владелец
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	SRoutePlace.Владелец				
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//6. Последние визиты партнерам
		|ВЫБРАТЬ
		|	Максимум(Период) 	КАК Период,
		|	СкладПартнер 	  	КАК Георасположение
		|ПОМЕСТИТЬ КешВизитов
		|ИЗ
		|	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута
		|ГДЕ
		|	ДокументПоездки = &ДокументПоездки
		|И	Статус 			= ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.ОтгрузкаЗавершена)
		|	
		|СГРУППИРОВАТЬ ПО
		|	СкладПартнер
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Георасположение			
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//7. 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ссылка 			КАК Владелец,
		|	НомерТелефона 	КАК НомерТелефона
		|ПОМЕСТИТЬ НомераТелефоновПартнеров
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК КИ
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ FRoutePlace КАК FRoutePlace
		|ПО FRoutePlace.Владелец = КИ.Ссылка
		|И	FRoutePlace.IsPartner
        |
		|ГДЕ
		|	Тип = &ТипКонтактнойИнформацииНомерТелефона
		|И 	Вид = &ВидКонтактнойИнформацииНомерТелефонаПартнера
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//8. 
		|ВЫБРАТЬ
		|	Ссылка 			КАК Владелец,
		|	НомерТелефона 	КАК НомерТелефона
		|ПОМЕСТИТЬ НомераТелефоновПользователей
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация
		|ГДЕ
		|	Ссылка В 
		|			(ВЫБРАТЬ
		|		   		Менеджер
		|		   	ИЗ
		|		  		FRoutePlace
		|		   	ГДЕ
		|		   		IsPartner)
		|И Тип = &ТипКонтактнойИнформацииНомерТелефона
		|И Вид = &ВидКонтактнойИнформацииНомерТелефонПользователя
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//9. 
		|ВЫБРАТЬ
		|	Ссылка 			КАК Владелец,
		|	НомерТелефона 	КАК НомерТелефона
		|ПОМЕСТИТЬ НомераТелефоновСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Ссылка В 
		|		   	(ВЫБРАТЬ
		|		   		Владелец
		|		   	ИЗ
		|		   		FRoutePlace
		|		   	ГДЕ
		|		  		НЕ IsPartner)
		|И Тип = &ТипКонтактнойИнформацииНомерТелефона
		|И Вид = &ВидКонтактнойИнформацииНомерТелефонаСклада
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//10.
		|ВЫБРАТЬ
		|	FRoutePlace.Владелец,
		|	FRoutePlace.Name,
		|	FRoutePlace.GUID,
		|	FRoutePlace.Address,
		|	FRoutePlace.IsPartner,
		|	FRoutePlace.Георасположение,
		|	ВЫБОР
		|		КОГДА ФиксацияМаршрута.Статус = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК IsHere,
		|	ВЫБОР
		|		КОГДА ФиксацияМаршрута.Статус = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки)
		|		ТОГДА ЛОЖЬ
		|		КОГДА IsNull(TRoutePlace.Период, ДАТАВРЕМЯ(1,1,1)) >= IsNull(КешВизитов.Период, ДАТАВРЕМЯ(1,1,1))
		|		ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК IsVisited,
		|	ВЫБОР
		|	КОГДА FRoutePlace.IsPartner
		|		ТОГДА ЕСТЬNULL(НомераТелефоновПартнеров.НомерТелефона, """") 
		|		ИНАЧЕ ЕСТЬNULL(НомераТелефоновСкладов.НомерТелефона, """")
		|	КОНЕЦ КАК Phone,
		|	ВЫБОР
		|		КОГДА FRoutePlace.IsPartner
		|		ТОГДА ЕСТЬNULL(НомераТелефоновПользователей.НомерТелефона, """")
		|		ИНАЧЕ ЕСТЬNULL(НомераТелефоновСкладов.НомерТелефона, """")
		|	КОНЕЦ КАК НомерТелефонаОтветственого,
		|	FRoutePlace.Менеджер КАК ОсновнойМенеджер,
		|	ВЫБОР
		|		КОГДА IsNull(СуммыЗаМаршрутом.СуммаНазначеннаяМенеджером, 0) > 1
		|			ТОГДА СуммыЗаМаршрутом.СуммаНазначеннаяМенеджером
		|		КОГДА IsNull(СуммыЗаМаршрутом.СуммаНазначеннаяМенеджером, 0) <= 1
		|		   И  IsNull(СуммыЗаМаршрутом.СуммаНазначеннаяМенеджером, 0) <> 0	
		|			ТОГДА 0
		|		ИНАЧЕ IsNull(СуммыЗаМаршрутом.СуммаУчета, 0)
		|	КОНЕЦ КАК СуммаУчета
		|				
		|ИЗ
		|	FRoutePlace КАК FRoutePlace
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ФиксацияМаршрута КАК ФиксацияМаршрута
		|ПО	ФиксацияМаршрута.СкладПартнер = FRoutePlace.Георасположение
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешВизитов КАК КешВизитов
		|ПО	КешВизитов.Георасположение = FRoutePlace.Георасположение 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ TRoutePlace КАК TRoutePlace
		|ПО	TRoutePlace.Владелец = FRoutePlace.Владелец
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновПользователей КАК НомераТелефоновПользователей
		|ПО НомераТелефоновПользователей.Владелец = FRoutePlace.Менеджер
		|  
		|ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновПартнеров КАК НомераТелефоновПартнеров
		|ПО НомераТелефоновПартнеров.Владелец = FRoutePlace.Владелец
		|		  
		|ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновСкладов КАК НомераТелефоновСкладов
		|ПО НомераТелефоновСкладов.Владелец = FRoutePlace.Владелец
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК СуммыЗаМаршрутом
		|ПО СуммыЗаМаршрутом.ДокументПоездки = &ДокументПоездки
		|И 	СуммыЗаМаршрутом.Партнер		 = FRoutePlace.Владелец
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//11. Получаем список складов с которых может производится отгрузка
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склад КАК Склад
		|ПОМЕСТИТЬ СкладыОтгрузки
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
		|ГДЕ
		|	Ссылка = &ВариантМаршрута
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//12.
		|ВЫБРАТЬ
		|	КешПоездкаЗаМаршрутом.OwnerGeoLocation			КАК Получатель, 
		|	КешПоездкаЗаМаршрутом.ОтправительGeoLocation 	КАК Отправитель,
		|	ВЫБОР
		|		КОГДА КешПоездкаЗаМаршрутом.ЭтоЗадача = ЛОЖЬ
		|		ТОГДА ЛОЖЬ
		|		КОГДА КешПоездкаЗаМаршрутом.IsQRCodeScanningNeeded
		|		ТОГДА ИСТИНА
		|		КОГДА КешПоездкаЗаМаршрутом.ИспользоватьОтображениеКакЗадачи
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЗадача,
		|	КешПоездкаЗаМаршрутом.GUID 						КАК GUID,
		|	КешПоездкаЗаМаршрутом.ManualCode 				КАК ManualCode,
		|	КешПоездкаЗаМаршрутом.AssignedQRCode            КАК AssignedQRCode,
		|	КешПоездкаЗаМаршрутом.IsQRCodeScanningNeeded    КАК IsQRCodeScanningNeeded,
		|	ПРЕДСТАВЛЕНИЕ(КешПоездкаЗаМаршрутом.Author)		КАК Author,
		|	КешПоездкаЗаМаршрутом.Comment    				КАК Comment,
		|	ВЫБОР
		|		КОГДА КешПоездкаЗаМаршрутом.ЭтоЗадача
		|		ТОГДА 	ВЫБОР ЗадачиНаМаршрут.СтатусОтгрузки
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
		|					ТОГДА 1
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения)
		|					ТОГДА 2
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена)
		|					ТОГДА 3
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена)
		|					ТОГДА 4
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 	ВЫБОР ОтгрузкаМест.СтатусОтгрузки
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
		|					ТОГДА 1
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ПогруженоВМашину)
		|					ТОГДА 2
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ОтгруженоПартнеру)
		|					ТОГДА 3
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе)
		|					ТОГДА 4
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ВозвращеноНаСклад)
		|					ТОГДА 5
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|	КОНЕЦ КАК Status
		|ИЗ
		|	КешПоездкаЗаМаршрутом КАК КешПоездкаЗаМаршрутом
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад В (ВЫБРАТЬ Склад ИЗ СкладыОтгрузки)
		|															И Место В (ВЫБРАТЬ МестоДоставки ИЗ КешПоездкаЗаМаршрутом ГДЕ НЕ ЭтоЗадача)
		|															И ВариантМаршрута = &ВариантМаршрута) КАК ОтгрузкаМест
		|ПО	ОтгрузкаМест.Место = КешПоездкаЗаМаршрутом.МестоДоставки
		|И	ОтгрузкаМест.Склад = КешПоездкаЗаМаршрутом.Отправитель
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место В (ВЫБРАТЬ МестоДоставки ИЗ КешПоездкаЗаМаршрутом ГДЕ ЭтоЗадача) 
		|																И ВариантМаршрута = &ВариантМаршрута) КАК ЗадачиНаМаршрут	
		|ПО ЗадачиНаМаршрут.Место = КешПоездкаЗаМаршрутом.МестоДоставки
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ФиксацияМаршрута;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешПоездкаЗаМаршрутом;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СкладыОтгрузки;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ FRoutePlace;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ SRoutePlace;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ TRoutePlace;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешВизитов;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НомераТелефоновСкладов;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НомераТелефоновПартнеров;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НомераТелефоновПользователей;
		|
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 13. Информация о полеченных оплатах
		|ВЫБРАТЬ
		|	Партнер 		КАК Партнер,
		|	Валюта.Код		КАК КодВалюты,
		|	СуммаПринято    КАК СуммаПринято
		|ИЗ
		|	РегистрСведений.КТС_ОплатыПринятыеВодителями
		|ГДЕ
		|	ДокументПоездки = &ДокументПоездки
		|;";
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаМестаВПоездке()
 
Функция ПолучитьТекстЗапросаСписокМест()

		текстзапроса ="
		|// РАСЧЕТ КОЛИЧЕСТВА ДЕНЕГ ДЛЯ ПОЛУЧЕНИЯ

		|ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер КАК Партнер
		|ПОМЕСТИТЬ ТаблицаДопустимыхПартнеровПредварительная
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиСегментовУсловийОтгрузки КАК СегментыУсловийОтгрузки
		|		ПО ПартнерыСегмента.Сегмент    = СегментыУсловийОтгрузки.СегментПартнеров
		|;
		|	
		|ВЫБРАТЬ
		|	GeoLocations.Владелец КАК Партнер
		|ПОМЕСТИТЬ ТаблицаДопустимыхПартнеров
		|ИЗ
		|	GeoLocations КАК GeoLocations
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеровПредварительная КАК ТаблицаПартнеров
		|		ПО GeoLocations.Владелец = ТаблицаПартнеров.Партнер
		|			И GeoLocations.ЭтоПартнер
		|;

		|ВЫБРАТЬ
		|	Валюта КАК Валюта,
		|	Курс / Кратность КАК Курс
		|ПОМЕСТИТЬ КурсыВалют	
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;

		|ВЫБРАТЬ
		|	АналитикаПоПартнерам.Партнер КАК Партнер,
		|	АналитикаПоПартнерам.Организация КАК Организация,
		|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ Аналитика	
		|ИЗ
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
		|		ПО АналитикаПоПартнерам.Партнер = ТаблицаПартнеров.Партнер
		|			И АналитикаПоПартнерам.Организация = &Организация
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики		
		|;

		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	Сумма(	ВЫБОР ВалютаУправленческогоУчета.Значение
		|				КОГДА Долги.Валюта
		|				ТОГДА Долги.СуммаОстаток
		|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|			КОНЕЦ
		|		  ) КАК Долг	

		|ПОМЕСТИТЬ Долги
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(&КонецСегодня, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|								
		|		ВЫБРАТЬ
		|			АналитикаУчетаПоПартнерам,
		|			Валюта,
		|			СуммаОстаток 				
		|		ИЗ
		|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&КонецСегодня, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
		|	) КАК Долги
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам

		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО Истина

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Долги.Валюта						

		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер
		|;

		|ВЫБРАТЬ
		|	Ссылка КАК Ссылка,
		|	МИНИМУМ(ДатаПлатежа) КАК ДатаПлатежа
		|	
		|ПОМЕСТИТЬ ГрафикОплат
		|ИЗ
		|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
		|		ПО ЭтапыОплаты.Ссылка.Партнер = ТаблицаПартнеров.Партнер
		| 			И ЭтапыОплаты.Ссылка.Организация = &Организация					

		|СГРУППИРОВАТЬ ПО 
		|	Ссылка
		|;

		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента)				КАК Регистратор,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента).Валюта		КАК Валюта
		|ПОМЕСТИТЬ ПервыйКеш_Возвраты        
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &КонецСегодня, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.ВозвратТоваровОтКлиента
		|И	СуммаОборот <> 0

		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	КлючАналитики
		|;

		|ВЫБРАТЬ
		|	Возвраты.КлючАналитики,
		|	Возвраты.Валюта,										
		|   ВозвратыТовары.ДокументРеализации,
		|   Сумма(ВозвратыТовары.СуммаСНДС) КАК СуммаРасход
		|ПОМЕСТИТЬ ВторойКеш_Возвраты        
		|ИЗ
		|	ПервыйКеш_Возвраты КАК Возвраты
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратыТовары
		|ПО	ВозвратыТовары.Ссылка = Возвраты.Регистратор

		|СГРУППИРОВАТЬ ПО 
		|	Возвраты.КлючАналитики,
		|	Возвраты.Валюта,										
		|   	ВозвратыТовары.ДокументРеализации	
		|;

		|ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг)				КАК Регистратор,
		|	Регистратор.МоментВремени КАК МоментВремени,
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента 	КАК ЗаказКлиента,	
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа  	КАК ДатаПлатежа,
		|	Период,
		|	Валюта,
		|	СуммаПриход,
		|	СуммаОборот
		|		
		|ПОМЕСТИТЬ Cache_Обороты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &КонецСегодня, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
		|ГДЕ
		|	Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|И	СуммаОборот <> 0			
		|;

		|ВЫБРАТЬ
		| 	Аналитика.Партнер КАК Партнер,
		|	Обороты.Регистратор,
		|	Обороты.Период,
		|	ВЫБОР
		|		КОГДА Обороты.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка) 
		|		  ИЛИ Обороты.ЗаказКлиента = Неопределено
		|		  ИЛИ Обороты.ЗаказКлиента = NULL
		|		ТОГДА Обороты.ДатаПлатежа
		|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
		|	КОНЕЦ КАК ДатаПлатежа,
		|   	Обороты.МоментВремени,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаПриход 		
		|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ -	ВЫБОР
		|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
		|			  	ТОГДА 0
		|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
		|				ТОГДА Возвраты.СуммаРасход
		|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
		|			КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
		|		ТОГДА Обороты.СуммаОборот
		|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
		|	КОНЕЦ -	ВЫБОР
		|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
		|			  	ТОГДА 0
		|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
		|				ТОГДА Возвраты.СуммаРасход
		|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
		|			КОНЕЦ КАК СуммаОборот
		|   
		|ПОМЕСТИТЬ ОборотыПоКлиенту
		|ИЗ
		|	Cache_Обороты КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
		|ПО Аналитика.КлючАналитики = Обороты.КлючАналитики 						


		|ЛЕВОЕ СОЕДИНЕНИЕ ВторойКеш_Возвраты КАК Возвраты
		|ПО  Возвраты.КлючАналитики 		= Обороты.КлючАналитики
		|И	Возвраты.ДокументРеализации = Обороты.Регистратор

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВозвраты
		|ПО	КурсыВозвраты.Валюта = Возвраты.Валюта


		|ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
		|ПО ГрафикОплат.Ссылка = Обороты.ЗаказКлиента

		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|ПО  Истина

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
		|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение

		|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|ПО	КурсыВалют.Валюта = Обороты.Валюта
		|;

		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
		|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
		|	СУММА(СуммаОборот) КАК Сумма
		|	
		|ПОМЕСТИТЬ ОборотыПоМесяцам	
		|ИЗ
		|	ОборотыПоКлиенту 
		|															
		|СГРУППИРОВАТЬ ПО
		|	Партнер,
		|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ)
		|;

		|ВЫБРАТЬ
		|	ОборотыПоМесяцам.Партнер КАК Партнер,
		|	ОборотыПоМесяцам.НачПериода КАК НачПериода,
		|	ОборотыПоМесяцам.КонПериода КАК КонПериода,
		|	ОборотыПоМесяцам.Сумма КАК Сумма,
		|	СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
		|	СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
		|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
		|ИЗ
		|   ОборотыПоМесяцам КАК ОборотыПоМесяцам
		|   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
		|ПО ОборотыПоМесяцам.Партнер     = ОборотыПоМесяцамКопия.Партнер
		|И  ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода

		|СГРУППИРОВАТЬ ПО
		|	ОборотыПоМесяцам.НачПериода,
		|	ОборотыПоМесяцам.КонПериода,
		|	ОборотыПоМесяцам.Партнер,
		|	ОборотыПоМесяцам.Сумма
		|;

		|ВЫБРАТЬ
		|	Долги.Партнер КАК Партнер,
		|	Долги.Долг КАК Долг,
		|	ОборотыПоМесНарастающие.НачПериода КАК НачПериода,
		|	ОборотыПоМесНарастающие.КонПериода КАК КонПериода,
		|	Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
		|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
		|ИЗ
		|	Долги КАК Долги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
		|	ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
		|		И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
		|		И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
		|;

		|ВЫБРАТЬ
		|	Обороты.Партнер КАК Партнер,
		|	Обороты.МоментВремени КАК МоментВремени,
		|	Обороты.Регистратор КАК Регистратор,
		|	Обороты.Период КАК Период,
		|	ДолгиПоВыбМесяцам.Долг КАК Долг,
		|	ДолгиПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
		|	Обороты.Сумма КАК Сумма,
		|	Обороты.ДатаПлатежа КАК ДатаОтсрочки
		|	
		|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
		|ИЗ
		|	ОборотыПоКлиенту КАК Обороты
		|						
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
		|ПО Обороты.Партнер 		= ДолгиПоВыбМесяцам.Партнер
		|И  Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
		|И  Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
		|;

		|ВЫБРАТЬ
		|	ДвиженияПоВыбМесяцам.Партнер КАК Партнер,
		|	ДвиженияПоВыбМесяцам.Регистратор КАК Регистратор,
		|	ДвиженияПоВыбМесяцам.Период КАК Период,
		|	ДвиженияПоВыбМесяцам.МоментВремени КАК МоментВремени,
		|	ДвиженияПоВыбМесяцам.Сумма КАК Сумма,
		|	СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
		|	СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
		|	ДвиженияПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
		|	ДвиженияПоВыбМесяцам.ДатаОтсрочки КАК ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияПредварительные
		|ИЗ
		|	ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
		|	   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
		|ПО 	ДвиженияПоВыбМесяцам.Партнер 		= ДвиженияПоВыбМесяцамКопия.Партнер
		|И  	ДвиженияПоВыбМесяцам.ДатаОтсрочки  <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|И	ВЫБОР
		|		КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки   = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
		|		ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	   
		|СГРУППИРОВАТЬ ПО
		|	   ДвиженияПоВыбМесяцам.Партнер,
		|	   ДвиженияПоВыбМесяцам.Регистратор,
		|	   ДвиженияПоВыбМесяцам.Период,
		|	   ДвиженияПоВыбМесяцам.МоментВремени,
		|	   ДвиженияПоВыбМесяцам.Сумма,
		|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
		|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
		|;

		|ВЫБРАТЬ
		|	   ДвиженияПредв.Партнер КАК Партнер,
		|	   ДвиженияПредв.Регистратор КАК Регистратор,
		|	   ДвиженияПредв.Период КАК Период,
		|	   ДвиженияПредв.МоментВремени КАК МоментВремени,
		|	   ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
		|	   ДвиженияПредв.Сумма КАК Сумма,
		|	   ДвиженияПредв.ДатаОтсрочки КАК ДатаОтсрочки
		|ПОМЕСТИТЬ ДвиженияОкончательные
		|ИЗ
		|	   ДвиженияПредварительные КАК ДвиженияПредв
		|ГДЕ
		|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
		|И 	ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
		|;

		|ВЫБРАТЬ
		|   Обороты.Партнер КАК Партнер,
		|   Обороты.Регистратор КАК Документ,
		|   ВЫБОР
		|  		КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
		|		ТОГДА ДвиженияОконч.СуммаДолга
		|		ИНАЧЕ Обороты.Сумма
		|   КОНЕЦ КАК СуммаОстаток,
		|   ВЫБОР
		|		КОГДА Обороты.ДатаПлатежа < &КонецСегодня
		|		ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Прострочено
		|ПОМЕСТИТЬ ОбщаяТаблицаЗадолженностейПоДокументам
		|ИЗ
		|	   ОборотыПоКлиенту  КАК Обороты

		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
		|ПО ДвиженияОконч.Партнер 		= Обороты.Партнер
		|И  ДвиженияОконч.ДатаОтсрочки  <= Обороты.ДатаПлатежа 
		|И	ВЫБОР
		|		КОГДА ДвиженияОконч.ДатаОтсрочки = Обороты.ДатаПлатежа 
		|		ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;

		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	СУММА(СуммаОстаток) КАК СуммаПрострочки
		|ПОМЕСТИТЬ ТаблицаПрострочек
		|ИЗ
		|	ОбщаяТаблицаЗадолженностейПоДокументам
		|ГДЕ
		|	Прострочено = 1

		|СГРУППИРОВАТЬ ПО
		|	Партнер
		|;

		|ВЫБРАТЬ
		|	СсылкаНаМесто КАК Место,
		|	Владелец КАК Партнер
		|ПОМЕСТИТЬ ТаблицаМестМаршрутногоЛиста
		|ИЗ
		|	PacksToUnload
		|ГДЕ
		|	Владелец ССЫЛКА Справочник.Партнеры
		|;

		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
		|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
		|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
		|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
		|	КОНЕЦ КАК Документ,
		|	ТаблицаМест.Партнер КАК Партнер
		|ПОМЕСТИТЬ ТаблицаДокументовПоМестам
		|ИЗ
		|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМестМаршрутногоЛиста КАК ТаблицаМест
		|		ПО МестаПоДокументам.Место = ТаблицаМест.Место
		|;

		|ВЫБРАТЬ
		|	ОбщаяТаблица.Партнер КАК Партнер,
		|	СУММА(ОбщаяТаблица.СуммаОстаток) КАК СуммаОстаток
		|ПОМЕСТИТЬ ДолгиПоДокументам
		|ИЗ
		|	ОбщаяТаблицаЗадолженностейПоДокументам КАК ОбщаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовПоМестам КАК ДокументыПоМестам
		|		ПО ОбщаяТаблица.Партнер = ДокументыПоМестам.Партнер
		|			И ОбщаяТаблица.Документ = ДокументыПоМестам.Документ

		|СГРУППИРОВАТЬ ПО
		|	ОбщаяТаблица.Партнер
		|;

		|ВЫБРАТЬ
		|	УсловиеОтгрузки КАК УсловиеОтгрузки,
		|	КредитныйЛимит КАК КредитныйЛимит,
		|	ДополнительныйПроцент КАК ДополнительныйПроцент
		|ПОМЕСТИТЬ УсловияОтгрузкиПоУмолчанию
		|ИЗ
		|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|;

		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	УсловиеОтгрузки КАК УсловиеОтгрузки,
		|	КредитныйЛимит КАК КредитныйЛимит,
		|	ДополнительныйПроцент КАК ДополнительныйПроцент
		|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерамПредварительные
		|ИЗ
		|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер В (ВЫБРАТЬ Партнер ИЗ ТаблицаДопустимыхПартнеров))
		|;

		|ВЫБРАТЬ
		|	ТаблицаПартнеров.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки, 0) = 0
		|			ТОГДА УсловияОтгрузкиПоУмолчанию.УсловиеОтгрузки
		|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки
		|	КОНЕЦ КАК УсловиеОтгрузки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит, 0) = 0
		|			ТОГДА УсловияОтгрузкиПоУмолчанию.КредитныйЛимит
		|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит
		|	КОНЕЦ КАК КредитныйЛимит,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент, 0) = 0
		|			ТОГДА УсловияОтгрузкиПоУмолчанию.ДополнительныйПроцент
		|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент
		|	КОНЕЦ КАК ДополнительныйПроцент
		|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерам
		|ИЗ
		|	ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоУмолчанию КАК УсловияОтгрузкиПоУмолчанию
		|		ПО ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоПартнерамПредварительные КАК УсловияОтгрузкиПоПартнерамПредварительные
		|		ПО ТаблицаПартнеров.Партнер = УсловияОтгрузкиПоПартнерамПредварительные.Партнер
		|;

		|ВЫБРАТЬ
		|	УсловияОтгрузки.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит)
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0) < (ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит)
		|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
		|					ИНАЧЕ ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0)
		|				КОНЕЦ
		|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.РеструктуризацияДолга)
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА (ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток,0) * (1+(УсловияОтгрузки.ДополнительныйПроцент*0.01))) < (ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит)
		|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
		|					ИНАЧЕ ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток,0) * (1+(УсловияОтгрузки.ДополнительныйПроцент*0.01))
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ТаблицаОплат
		|ИЗ
		|	УсловияОтгрузкиПоПартнерам КАК УсловияОтгрузки
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Долги КАК Долги
		|	ПО УсловияОтгрузки.Партнер = Долги.Партнер

		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПрострочек КАК ТаблицаПрострочек
		|	ПО УсловияОтгрузки.Партнер = ТаблицаПрострочек.Партнер 

		|	ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоДокументам КАК ДолгиПоДокументам
		|	ПО УсловияОтгрузки.Партнер = ДолгиПоДокументам.Партнер
		|;

		|// КОНЕЦ РАСЧЕТА ОПЛАТЫ
		|///////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокМест()
 
Функция ПолучитьТекстЗапросаСуммаОплаты()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Ссылка КАК Место
			|ПОМЕСТИТЬ МестаДоставки
			|ИЗ
			|	Справочник.МестаДоставки
			|ГДЕ
			|	Не Архивный
			|	И Владелец = &ВладелецМеста
			|	И Маршрут  = &Маршрут
			|;
			|
			|ВЫБРАТЬ
			|	Место КАК Место,
			|	Место.Владелец КАК Получатель,
			|	ИСТИНА КАК ЭтоМесто
			|ПОМЕСТИТЬ ТекущиеОбъектыДоставки
			|ИЗ
			|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место В (ВЫБРАТЬ Место ИЗ МестаДоставки))
			|ГДЕ
			|	СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ПогруженоВМашину)
			|;
			|
			|ВЫБРАТЬ
			|	ПартнерыСегмента.Партнер КАК Партнер
			|ПОМЕСТИТЬ ТаблицаДопустимыхПартнеров
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиСегментовУсловийОтгрузки КАК СегментыУсловийОтгрузки
			|		ПО ПартнерыСегмента.Сегмент    = СегментыУсловийОтгрузки.СегментПартнеров
			|			И ПартнерыСегмента.Партнер = &ВладелецМеста
			|;
			|
			|ВЫБРАТЬ
			|	Валюта КАК Валюта,
			|	Курс / Кратность КАК Курс
			|ПОМЕСТИТЬ КурсыВалют	
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Валюта
			|;
			|
			|ВЫБРАТЬ
			|	АналитикаПоПартнерам.Партнер КАК Партнер,
			|	АналитикаПоПартнерам.Организация КАК Организация,
			|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
			|ПОМЕСТИТЬ Аналитика	
			|ИЗ
			|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
			|		ПО АналитикаПоПартнерам.Партнер = ТаблицаПартнеров.Партнер
			|			И АналитикаПоПартнерам.Организация = &Организация
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючАналитики		
			|;
			|
			|ВЫБРАТЬ
			|	Аналитика.Партнер КАК Партнер,
			|	Сумма(	ВЫБОР ВалютаУправленческогоУчета.Значение
			|				КОГДА Долги.Валюта
			|				ТОГДА Долги.СуммаОстаток
			|				ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
			|			КОНЕЦ
			|		  ) КАК Долг	

			|ПОМЕСТИТЬ Долги
			|ИЗ
			|	(
			|		ВЫБРАТЬ
			|			АналитикаУчетаПоПартнерам,
			|			Валюта,
			|			СуммаОстаток
			|		ИЗ
			|			РегистрНакопления.РасчетыСКлиентами.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСКлиентами
			|			
			|		ОБЪЕДИНИТЬ ВСЕ
			|								
			|		ВЫБРАТЬ
			|			АналитикаУчетаПоПартнерам,
			|			Валюта,
			|			СуммаОстаток 				
			|		ИЗ
			|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ТекущаяДата, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика)) КАК РасчетыСПоставщиками 
			|	) КАК Долги
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
			|ПО Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам

			|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
			|ПО Истина

			|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
			|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение

			|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
			|ПО	КурсыВалют.Валюта = Долги.Валюта						

			|СГРУППИРОВАТЬ ПО
			|	Аналитика.Партнер
			|;
			|
			|ВЫБРАТЬ
			|	Ссылка КАК Ссылка,
			|	МИНИМУМ(ДатаПлатежа) КАК ДатаПлатежа
			|	
			|ПОМЕСТИТЬ ГрафикОплат
			|ИЗ
			|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
			|		ПО ЭтапыОплаты.Ссылка.Партнер = ТаблицаПартнеров.Партнер
			| 			И ЭтапыОплаты.Ссылка.Организация = &Организация					

			|СГРУППИРОВАТЬ ПО 
			|	Ссылка
			|;
			|
			|ВЫБРАТЬ
			|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
			|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента)				КАК Регистратор,
			|	ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтКлиента).Валюта		КАК Валюта
			|ПОМЕСТИТЬ ПервыйКеш_Возвраты        
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
			|ГДЕ
			|	Регистратор Ссылка Документ.ВозвратТоваровОтКлиента
			|И	СуммаОборот <> 0

			|ИНДЕКСИРОВАТЬ ПО
			|	Регистратор,
			|	КлючАналитики
			|;
			|
			|ВЫБРАТЬ
			|	Возвраты.КлючАналитики,
			|	Возвраты.Валюта,										
			|   ВозвратыТовары.ДокументРеализации,
			|   Сумма(ВозвратыТовары.СуммаСНДС) КАК СуммаРасход
			|ПОМЕСТИТЬ ВторойКеш_Возвраты        
			|ИЗ
			|	ПервыйКеш_Возвраты КАК Возвраты
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратыТовары
			|ПО	ВозвратыТовары.Ссылка = Возвраты.Регистратор

			|СГРУППИРОВАТЬ ПО 
			|	Возвраты.КлючАналитики,
			|	Возвраты.Валюта,										
			|   	ВозвратыТовары.ДокументРеализации	
			|;
			|
			|ВЫБРАТЬ
			|	АналитикаУчетаПоПартнерам												КАК КлючАналитики,
			|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг)				КАК Регистратор,
			|	Регистратор.МоментВремени КАК МоментВремени,
			|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента 	КАК ЗаказКлиента,	
			|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа  	КАК ДатаПлатежа,
			|	Период,
			|	Валюта,
			|	СуммаПриход,
			|	СуммаОборот
			|		
			|ПОМЕСТИТЬ Cache_Обороты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, &ТекущаяДата, Регистратор, , АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ Аналитика))
			|ГДЕ
			|	Регистратор Ссылка Документ.РеализацияТоваровУслуг
			|И	СуммаОборот <> 0			
			|;
			|
			|ВЫБРАТЬ
			| 	Аналитика.Партнер КАК Партнер,
			|	Обороты.Регистратор,
			|	Обороты.Период,
			|	ВЫБОР
			|		КОГДА Обороты.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка) 
			|		  ИЛИ Обороты.ЗаказКлиента = Неопределено
			|		  ИЛИ Обороты.ЗаказКлиента = NULL
			|		ТОГДА Обороты.ДатаПлатежа
			|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
			|	КОНЕЦ КАК ДатаПлатежа,
			|   	Обороты.МоментВремени,
			|	ВЫБОР 
			|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
			|		ТОГДА Обороты.СуммаПриход 		
			|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
			|	КОНЕЦ -	ВЫБОР
			|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
			|			  	ТОГДА 0
			|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
			|				ТОГДА Возвраты.СуммаРасход
			|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
			|			КОНЕЦ КАК Сумма,
			|	ВЫБОР 
			|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
			|		ТОГДА Обороты.СуммаОборот
			|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
			|	КОНЕЦ -	ВЫБОР
			|			  	КОГДА IsNull(Возвраты.СуммаРасход, 0) = 0 
			|			  	ТОГДА 0
			|				КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
			|				ТОГДА Возвраты.СуммаРасход
			|				ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
			|			КОНЕЦ КАК СуммаОборот
			|   
			|ПОМЕСТИТЬ ОборотыПоКлиенту
			|ИЗ
			|	Cache_Обороты КАК Обороты
			|						
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
			|ПО Аналитика.КлючАналитики = Обороты.КлючАналитики 						


			|ЛЕВОЕ СОЕДИНЕНИЕ ВторойКеш_Возвраты КАК Возвраты
			|ПО  Возвраты.КлючАналитики 		= Обороты.КлючАналитики
			|И	Возвраты.ДокументРеализации = Обороты.Регистратор

			|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВозвраты
			|ПО	КурсыВозвраты.Валюта = Возвраты.Валюта


			|ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
			|ПО ГрафикОплат.Ссылка = Обороты.ЗаказКлиента

			|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
			|ПО  Истина

			|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
			|ПО	КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение

			|ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
			|ПО	КурсыВалют.Валюта = Обороты.Валюта
			|;
			|
			|ВЫБРАТЬ
			|	Партнер КАК Партнер,
			|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
			|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
			|	СУММА(СуммаОборот) КАК Сумма
			|	
			|ПОМЕСТИТЬ ОборотыПоМесяцам	
			|ИЗ
			|	ОборотыПоКлиенту 
			|															
			|СГРУППИРОВАТЬ ПО
			|	Партнер,
			|	НАЧАЛОПЕРИОДА(ДатаПлатежа, МЕСЯЦ),
			|	КОНЕЦПЕРИОДА(ДатаПлатежа, МЕСЯЦ)
			|;
			|
			|ВЫБРАТЬ
			|	ОборотыПоМесяцам.Партнер КАК Партнер,
			|	ОборотыПоМесяцам.НачПериода КАК НачПериода,
			|	ОборотыПоМесяцам.КонПериода КАК КонПериода,
			|	ОборотыПоМесяцам.Сумма КАК Сумма,
			|	СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
			|	СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
			|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
			|ИЗ
			|   ОборотыПоМесяцам КАК ОборотыПоМесяцам
			|   
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
			|ПО ОборотыПоМесяцам.Партнер     = ОборотыПоМесяцамКопия.Партнер
			|И  ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода

			|СГРУППИРОВАТЬ ПО
			|	ОборотыПоМесяцам.НачПериода,
			|	ОборотыПоМесяцам.КонПериода,
			|	ОборотыПоМесяцам.Партнер,
			|	ОборотыПоМесяцам.Сумма
			|;
			|
			|ВЫБРАТЬ
			|	Долги.Партнер КАК Партнер,
			|	Долги.Долг КАК Долг,
			|	ОборотыПоМесНарастающие.НачПериода КАК НачПериода,
			|	ОборотыПоМесНарастающие.КонПериода КАК КонПериода,
			|	Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
			|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
			|ИЗ
			|	Долги КАК Долги
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
			|	ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
			|		И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
			|		И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
			|;
			|
			|ВЫБРАТЬ
			|	Обороты.Партнер КАК Партнер,
			|	Обороты.МоментВремени КАК МоментВремени,
			|	Обороты.Регистратор КАК Регистратор,
			|	Обороты.Период КАК Период,
			|	ДолгиПоВыбМесяцам.Долг КАК Долг,
			|	ДолгиПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
			|	Обороты.Сумма КАК Сумма,
			|	Обороты.ДатаПлатежа КАК ДатаОтсрочки
			|	
			|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
			|ИЗ
			|	ОборотыПоКлиенту КАК Обороты
			|						
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
			|ПО Обороты.Партнер 		= ДолгиПоВыбМесяцам.Партнер
			|И  Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
			|И  Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
			|;
			|
			|ВЫБРАТЬ
			|	ДвиженияПоВыбМесяцам.Партнер КАК Партнер,
			|	ДвиженияПоВыбМесяцам.Регистратор КАК Регистратор,
			|	ДвиженияПоВыбМесяцам.Период КАК Период,
			|	ДвиженияПоВыбМесяцам.МоментВремени КАК МоментВремени,
			|	ДвиженияПоВыбМесяцам.Сумма КАК Сумма,
			|	СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
			|	СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
			|	ДвиженияПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
			|	ДвиженияПоВыбМесяцам.ДатаОтсрочки КАК ДатаОтсрочки
			|ПОМЕСТИТЬ ДвиженияПредварительные
			|ИЗ
			|	ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
			|	   
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
			|ПО 	ДвиженияПоВыбМесяцам.Партнер 		= ДвиженияПоВыбМесяцамКопия.Партнер
			|И  	ДвиженияПоВыбМесяцам.ДатаОтсрочки  <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
			|И	ВЫБОР
			|		КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки   = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
			|		ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|	   
			|СГРУППИРОВАТЬ ПО
			|	   ДвиженияПоВыбМесяцам.Партнер,
			|	   ДвиженияПоВыбМесяцам.Регистратор,
			|	   ДвиженияПоВыбМесяцам.Период,
			|	   ДвиженияПоВыбМесяцам.МоментВремени,
			|	   ДвиженияПоВыбМесяцам.Сумма,
			|	   ДвиженияПоВыбМесяцам.ОстатокДолга,
			|	   ДвиженияПоВыбМесяцам.ДатаОтсрочки
			|;
			|
			|ВЫБРАТЬ
			|	   ДвиженияПредв.Партнер КАК Партнер,
			|	   ДвиженияПредв.Регистратор КАК Регистратор,
			|	   ДвиженияПредв.Период КАК Период,
			|	   ДвиженияПредв.МоментВремени КАК МоментВремени,
			|	   ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
			|	   ДвиженияПредв.Сумма КАК Сумма,
			|	   ДвиженияПредв.ДатаОтсрочки КАК ДатаОтсрочки
			|ПОМЕСТИТЬ ДвиженияОкончательные
			|ИЗ
			|	   ДвиженияПредварительные КАК ДвиженияПредв
			|ГДЕ
			|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
			|И 	ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
			|;
			|
			|ВЫБРАТЬ
			|   Обороты.Партнер КАК Партнер,
			|   Обороты.Регистратор КАК Документ,
			|   ВЫБОР
			|  		КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
			|		ТОГДА ДвиженияОконч.СуммаДолга
			|		ИНАЧЕ Обороты.Сумма
			|   КОНЕЦ КАК СуммаОстаток,
			|   ВЫБОР
			|		КОГДА Обороты.ДатаПлатежа < &ТекущаяДата
			|		ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Прострочено
			|ПОМЕСТИТЬ ОбщаяТаблицаЗадолженностейПоДокументам
			|ИЗ
			|	   ОборотыПоКлиенту  КАК Обороты

			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
			|ПО ДвиженияОконч.Партнер 		= Обороты.Партнер
			|И  ДвиженияОконч.ДатаОтсрочки  <= Обороты.ДатаПлатежа 
			|И	ВЫБОР
			|		КОГДА ДвиженияОконч.ДатаОтсрочки = Обороты.ДатаПлатежа 
			|		ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|;
			|
			|ВЫБРАТЬ
			|	Партнер КАК Партнер,
			|	СУММА(СуммаОстаток) КАК СуммаПрострочки
			|ПОМЕСТИТЬ ТаблицаПрострочек
			|ИЗ
			|	ОбщаяТаблицаЗадолженностейПоДокументам
			|ГДЕ
			|	Прострочено = 1

			|СГРУППИРОВАТЬ ПО
			|	Партнер
			|;
			|
			|ВЫБРАТЬ
			|	Место КАК Место,
			|	Место.Владелец КАК Партнер
			|ПОМЕСТИТЬ ТаблицаМестМаршрутногоЛиста
			|ИЗ
			|	ТекущиеОбъектыДоставки
			|ГДЕ
			|	ЭтоМесто
			|	И Место.Владелец ССЫЛКА Справочник.Партнеры
			|;
			|
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
			|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
			|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
			|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
			|	КОНЕЦ КАК Документ,
			|	ТаблицаМест.Партнер КАК Партнер
			|ПОМЕСТИТЬ ТаблицаДокументовПоМестам
			|ИЗ
			|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМестМаршрутногоЛиста КАК ТаблицаМест
			|		ПО МестаПоДокументам.Место = ТаблицаМест.Место
			|;
			|
			|ВЫБРАТЬ
			|	ОбщаяТаблица.Партнер КАК Партнер,
			|	СУММА(ОбщаяТаблица.СуммаОстаток) КАК СуммаОстаток
			|ПОМЕСТИТЬ ДолгиПоДокументам
			|ИЗ
			|	ОбщаяТаблицаЗадолженностейПоДокументам КАК ОбщаяТаблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовПоМестам КАК ДокументыПоМестам
			|		ПО ОбщаяТаблица.Партнер = ДокументыПоМестам.Партнер
			|			И ОбщаяТаблица.Документ = ДокументыПоМестам.Документ

			|СГРУППИРОВАТЬ ПО
			|	ОбщаяТаблица.Партнер
			|;
			|
			|ВЫБРАТЬ
			|	УсловиеОтгрузки КАК УсловиеОтгрузки,
			|	КредитныйЛимит КАК КредитныйЛимит,
			|	ДополнительныйПроцент КАК ДополнительныйПроцент
			|ПОМЕСТИТЬ УсловияОтгрузкиПоУмолчанию
			|ИЗ
			|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
			|;
			|
			|ВЫБРАТЬ
			|	Партнер КАК Партнер,
			|	УсловиеОтгрузки КАК УсловиеОтгрузки,
			|	КредитныйЛимит КАК КредитныйЛимит,
			|	ДополнительныйПроцент КАК ДополнительныйПроцент
			|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерамПредварительные
			|ИЗ
			|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(, Партнер В (ВЫБРАТЬ Партнер ИЗ ТаблицаДопустимыхПартнеров))
			|;
			|
			|ВЫБРАТЬ
			|	ТаблицаПартнеров.Партнер КАК Партнер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки, 0) = 0
			|			ТОГДА УсловияОтгрузкиПоУмолчанию.УсловиеОтгрузки
			|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки
			|	КОНЕЦ КАК УсловиеОтгрузки,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит, 0) = 0
			|			ТОГДА УсловияОтгрузкиПоУмолчанию.КредитныйЛимит
			|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит
			|	КОНЕЦ КАК КредитныйЛимит,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент, 0) = 0
			|			ТОГДА УсловияОтгрузкиПоУмолчанию.ДополнительныйПроцент
			|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент
			|	КОНЕЦ КАК ДополнительныйПроцент
			|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерам
			|ИЗ
			|	ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
			|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоУмолчанию КАК УсловияОтгрузкиПоУмолчанию
			|		ПО ИСТИНА
			|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоПартнерамПредварительные КАК УсловияОтгрузкиПоПартнерамПредварительные
			|		ПО ТаблицаПартнеров.Партнер = УсловияОтгрузкиПоПартнерамПредварительные.Партнер
			|;
			|
			|ВЫБРАТЬ
			|	УсловияОтгрузки.Партнер КАК Партнер,
			|	ВЫБОР
			|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит)
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0) < (ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит)
			|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
			|					ИНАЧЕ ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0)
			|				КОНЕЦ
			|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.РеструктуризацияДолга)
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА (ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток,0) * (1+(УсловияОтгрузки.ДополнительныйПроцент*0.01))) < (ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит)
			|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
			|					ИНАЧЕ ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток,0) * (1+(УсловияОтгрузки.ДополнительныйПроцент*0.01))
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сумма
			|ИЗ
			|	УсловияОтгрузкиПоПартнерам КАК УсловияОтгрузки
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ Долги КАК Долги
			|	ПО УсловияОтгрузки.Партнер = Долги.Партнер

			|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПрострочек КАК ТаблицаПрострочек
			|	ПО УсловияОтгрузки.Партнер = ТаблицаПрострочек.Партнер 

			|	ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоДокументам КАК ДолгиПоДокументам
			|	ПО УсловияОтгрузки.Партнер = ДолгиПоДокументам.Партнер";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОплаты()
 
Функция ПолучитьТекстЗапросаЧтенияСообщенийЖурнала(КоличествоЗаписей)

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ %КоличествоЗаписей%
	               |	ВремяРегистрации КАК ВремяРегистрации,
	               |	Сообщение КАК Сообщение
	               |ИЗ
	               |	РегистрСведений.КТС_ЖурналСообщенийВодителей
	               |ГДЕ
	               |	Период >= &ДатаНачало
	               |И 	Период <= &ДатаОкончание
				   |И 	Пользователь = &ТекущийПользователь
				   |И	ДокументПоездки = &ДокументПоездки
	               |
				   |УПОРЯДОЧИТЬ ПО
				   |	Период УБЫВ";
				   
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%КоличествоЗаписей%", Цел(КоличествоЗаписей));
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

Функция ПолучитьТекстЗапросаПолученияЗадачи()

	ТекстЗапроса = "ВЫБРАТЬ
					|	ЗадачиНаМаршрут.Период						 			КАК Период,
					|	ЗадачиНаМаршрут.ВариантМаршрута							КАК ВариантМаршрута,
					|	ЗадачиНаМаршрут.Место.Ответственный 					КАК Автор,
					|	ЗадачиНаМаршрут.Отправитель 							КАК Отправитель,
					|	ЗадачиНаМаршрут.АдресОтправителя                		КАК АдресОтправителя,
					|	ВЫБОР
					|		КОГДА ЗадачиНаМаршрут.Место.Транзит
					|		ТОГДА ЗадачиНаМаршрут.Место.ТранзитныйСклад
					|		ИНАЧЕ ЗадачиНаМаршрут.Место.Владелец
					|	КОНЕЦ  													КАК Получатель,
					|	ЗадачиНаМаршрут.СтатусОтгрузки 							КАК СтатусЗадачи,
					|	ЗадачиНаМаршрут.Место.ТекстЗадачи 						КАК Задача,
					|	ЗадачиНаМаршрут.Место.ЗаполнятьУникальныйИдентификатор 	КАК НужноПечататьQRКод,
					|	ЗадачиНаМаршрут.Место.УникальныйИдентификатор 			КАК ИдентификаторQRКода
					|ИЗ
					|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Место) КАК ЗадачиНаМаршрут
					|
					|ГДЕ
					|	ВариантМаршрута = &Маршрут
					|;
					|
					|ВЫБРАТЬ
					|	Период 					КАК Период,
					|	СкладПартнер.Владелец 	КАК Абонент,
					|	СкладПартнер.ГородСклад КАК ГородСклад,
					|	Статус   				КАК Статус
					|ИЗ
					|	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута.СрезПоследних(, ДокументПоездки = &ДокументПоездки)
					|;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПолученияЗадачи()

Функция ПолучитьТекстЗапросаФиксацияПрохожденияМаршрута()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период 			КАК Период,
		|	ДокументПоездки КАК ДокументПоездки,
		|	Статус 			КАК Статус,
		|	СкладПартнер 	КАК СкладПартнер	
		|ИЗ
		|	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута.СрезПоследних(, ДокументПоездки = &ДокументПоездки)
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЯЗдесь()
 
Функция ПолучитьТекстЗапросаМеста()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Склад КАК Склад
		|ПОМЕСТИТЬ Склады
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
		|ГДЕ
		|	Ссылка = &СсылкаНаМаршрут
		|;
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Место 				КАК Место,
		|	Место.Владелец  	КАК Владелец,
		|	Склад 				КАК Склад,
		|	СтатусОтгрузки  	КАК СтатусОтгрузки,
		|	Место.АдресДоставки КАК АдресДоставки,
		|	ВариантМаршрута		КАК ВариантМаршрута
		|ИЗ
		|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад В (ВЫБРАТЬ Склад ИЗ Склады) И Место = &СсылкаНаМесто)
		|
		|УПОРЯДОЧИТЬ ПО Период Убыв
		|
		|;
		|
		|ВЫБРАТЬ
		|	Период 					КАК Период,
		|	СкладПартнер.Владелец 	КАК Абонент,
		|	СкладПартнер.ГородСклад КАК ГородСклад,
		|	Статус   				КАК Статус
		|ИЗ
		|	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута.СрезПоследних(, ДокументПоездки = &ДокументПоездки)
		|;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗагрузкиМеста()

Функция ПолучитьТекстЗапросаИнформацияПоМесту()

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
      	|	Место			КАК Место,
      |		Склад 			КАК Отправитель,
      |		Место.Владелец 	КАК Получатель,
	  |		ВариантМаршрута КАК ВариантМаршрута
      |ПОМЕСТИТЬ Места
      |ИЗ
      |		РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место = &Место)
	  |
	  |УПОРЯДОЧИТЬ ПО
	  |	Период УБЫВ
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ ПЕРВЫЕ 1
      |	КонтактнаяИнформация.Представление 	КАК АдресОтправителя,
      |	КонтактнаяИнформация.Ссылка 		КАК Отправитель
      |ПОМЕСТИТЬ АдресаОтправителя
      |ИЗ
      |	Справочник.Склады.КонтактнаяИнформация КАК КонтактнаяИнформация
      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Места КАК Места
      |		ПО КонтактнаяИнформация.Ссылка = Места.Отправитель
      |ГДЕ
      |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
      |	И КонтактнаяИнформация.Представление <> """"
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ
      |	Места.Место.Код КАК Код,
      |	Места.Отправитель.Наименование КАК Отправитель,
      |	ЕСТЬNULL(АдресаОтправителя.АдресОтправителя, """") КАК АдресОтправителя,
      |	ВЫБОР
      |		КОГДА Места.Получатель ССЫЛКА Справочник.Склады
      |			ТОГДА ВЫРАЗИТЬ(Места.Получатель КАК Справочник.Склады).Наименование
      |		ИНАЧЕ ВЫРАЗИТЬ(Места.Получатель КАК Справочник.Партнеры).Наименование
      |	КОНЕЦ КАК Получатель,
      |	Места.Место.АдресДоставки КАК АдресПолучателя,
	  |	ВариантМаршрута.Наименование КАК Маршрут
      |ИЗ
      |	Места КАК Места
	  |
      |		ЛЕВОЕ СОЕДИНЕНИЕ АдресаОтправителя КАК АдресаОтправителя
      |		ПО Места.Отправитель = АдресаОтправителя.Отправитель";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнформацияПоместу()
 
Функция ПолучитьТекстЗапросаИнформацияПоЗадаче()

	ТекстЗапроса = "
				  	|ВЫБРАТЬ ПЕРВЫЕ 1
                  	|	Место				КАК Место,
                  	|	Отправитель			КАК Отправитель,
                  	|	Место.Владелец 		КАК Получатель,
					|	ВариантМаршрута		КАК Маршрут,
					|	Место.Ответственный КАК Автор,
					|	Место.Код			КАК Код,
					|	СтатусОтгрузки		КАК СтатусЗадачи
                  	|ПОМЕСТИТЬ ДанныеЗадачи
                  	|ИЗ
                  	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Место)
				  	|
				  	|УПОРЯДОЧИТЬ ПО
				  	|	Период УБЫВ
                  	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ ПЕРВЫЕ 1
	               	|	СкладыКонтактнаяИнформация.Представление КАК АдресДоставки,
	               	|	СкладыКонтактнаяИнформация.Ссылка КАК Отправитель
	               	|ПОМЕСТИТЬ КонтактнаяИнформацияОтправителя
	               	|ИЗ
	              	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗадачи КАК ДанныеЗадачи
	               	|		ПО СкладыКонтактнаяИнформация.Ссылка = ВЫРАЗИТЬ(ДанныеЗадачи.Отправитель КАК Справочник.Склады)
	               	|ГДЕ
	               	|	СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               	|	И СкладыКонтактнаяИнформация.Представление <> """"
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ ПЕРВЫЕ 1
	               	|	ПартнерыКонтактнаяИнформация.Представление,
	               	|	ПартнерыКонтактнаяИнформация.Ссылка
	               	|ИЗ
	               	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗадачи КАК ДанныеЗадачи
	               	|		ПО ПартнерыКонтактнаяИнформация.Ссылка = ВЫРАЗИТЬ(ДанныеЗадачи.Отправитель КАК Справочник.Партнеры)
	               	|;
				   	|
				   	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ ПЕРВЫЕ 1
	               	|	СкладыКонтактнаяИнформация.Представление КАК АдресДоставки,
	               	|	СкладыКонтактнаяИнформация.Ссылка КАК Получатель
	               	|ПОМЕСТИТЬ КонтактнаяИнформацияПолучателя
	               	|ИЗ
	               	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗадачи КАК ДанныеЗадачи
	               	|		ПО СкладыКонтактнаяИнформация.Ссылка = ВЫРАЗИТЬ(ДанныеЗадачи.Получатель КАК Справочник.Склады)
	               	|ГДЕ
	               	|	СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               	|	И СкладыКонтактнаяИнформация.Представление <> """"
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ ПЕРВЫЕ 1
	               	|	ПартнерыКонтактнаяИнформация.Представление,
	               	|	ПартнерыКонтактнаяИнформация.Ссылка
	               	|ИЗ
	               	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗадачи КАК ДанныеЗадачи
	               	|		ПО ПартнерыКонтактнаяИнформация.Ссылка = ВЫРАЗИТЬ(ДанныеЗадачи.Получатель КАК Справочник.Партнеры)
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
				   	|	ВЫБОР
	               	|		КОГДА ДанныеЗадачи.Отправитель ССЫЛКА Справочник.Склады
	               	|			ТОГДА ВЫРАЗИТЬ(ДанныеЗадачи.Отправитель КАК Справочник.Склады).Наименование
	               	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеЗадачи.Отправитель КАК Справочник.Партнеры).Наименование
	               	|	КОНЕЦ КАК Отправитель,
				   	|	ВЫБОР
	               	|		КОГДА ДанныеЗадачи.Получатель ССЫЛКА Справочник.Склады
	               	|			ТОГДА ВЫРАЗИТЬ(ДанныеЗадачи.Получатель КАК Справочник.Склады).Наименование
	               	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеЗадачи.Получатель КАК Справочник.Партнеры).Наименование
	               	|	КОНЕЦ КАК Получатель,
					|	ДанныеЗадачи.Код КАК Код,
				   	|	ДанныеЗадачи.Маршрут.Наименование КАК Маршрут,
	               	|	ДанныеЗадачи.Автор.Наименование КАК Автор,
	               	|	ПРЕДСТАВЛЕНИЕ(ДанныеЗадачи.СтатусЗадачи) КАК СтатусЗадачи,
	               	|	ЕСТЬNULL(КонтактнаяИнформацияОтправителя.АдресДоставки, """") КАК АдресОтправителя,
				   	|	ЕСТЬNULL(КонтактнаяИнформацияПолучателя.АдресДоставки, """") КАК АдресПолучателя
				   	|ИЗ
	               	|	ДанныеЗадачи КАК ДанныеЗадачи
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформацияОтправителя КАК КонтактнаяИнформацияОтправителя
	               	|		ПО ДанныеЗадачи.Отправитель = КонтактнаяИнформацияОтправителя.Отправитель
				   	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформацияПолучателя КАК КонтактнаяИнформацияПолучателя
	               	|		ПО ДанныеЗадачи.Получатель = КонтактнаяИнформацияПолучателя.Получатель";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнформацияПоЗадаче()

Функция ПолучитьТекстЗапросаСписокСкладов()
	
	ТекстЗапроса = "ВЫБРАТЬ
                  |	Склад                                   КАК Склад,
                  |	Склад.Наименование 						КАК Наименование,
				  |	Склад.ТекущийОтветственный				КАК ТекущийОтветственный,
                  |	Склад.ТекущийОтветственный.Наименование КАК ТекущийОтветственныйНаименование
                  |ПОМЕСТИТЬ СписокСкладов
                  |ИЗ
                  |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставкаОтПартнеров 
                  |ГДЕ
                  |	Ссылка = &Маршрут
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  |	СкладыКонтактнаяИнформация.Ссылка			КАК Ссылка,
                  |	СкладыКонтактнаяИнформация.Представление 	КАК Адрес
                  |ПОМЕСТИТЬ АдресаСкладов
                  |ИЗ
                  |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСкладов КАК СписокСкладов
                  |		ПО СкладыКонтактнаяИнформация.Ссылка = СписокСкладов.Склад
                  |			И СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
				  |			И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
                  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  |	СкладыКонтактнаяИнформация.Ссылка			КАК Ссылка,
                  |	СкладыКонтактнаяИнформация.Представление 	КАК Телефон
                  |ПОМЕСТИТЬ ТелефоныСкладов
                  |ИЗ
                  |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСкладов КАК СписокСкладов
                  |		ПО СкладыКонтактнаяИнформация.Ссылка = СписокСкладов.Склад
                  |			И СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
				  |			И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСклада)
				  |			
                  |;
				  |
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |	СписокСкладов.ТекущийОтветственный 	КАК ТекущийОтветственный,
				  |	Пользователи.Представление	 		КАК Телефон
				  |ПОМЕСТИТЬ ТелефоныПользователей
				  |ИЗ
				  |	Справочник.Пользователи.КонтактнаяИнформация КАК Пользователи
				  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСкладов КАК СписокСкладов
				  |		ПО Пользователи.Ссылка.ФизическоеЛицо = СписокСкладов.ТекущийОтветственный
				  |			И Пользователи.Тип				  = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
				  |			И Пользователи.Вид				  = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователя)
				  |;
                  |
                  |////////////////////////////////////////////////////////////////////////////////
                  |ВЫБРАТЬ
                  |	СписокСкладов.Склад								КАК Склад,
                  |	СписокСкладов.Наименование 						КАК НаименованиеСклада,
                  |	СписокСкладов.ТекущийОтветственныйНаименование 	КАК Менеджер,
				  |	ЕСТЬNULL(АдресаСкладов.Адрес, """") 			КАК АдресСклада,
                  |	ЕСТЬNULL(ТелефоныСкладов.Телефон, """") 		КАК ТелефонСклада,
				  |	ЕСТЬNULL(ТелефоныПользователей.Телефон, """")   КАК ТелефонПользователя
                  |ИЗ
                  |	СписокСкладов КАК СписокСкладов
                  |		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладов
                  |		ПО СписокСкладов.Склад = АдресаСкладов.Ссылка
                  |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныСкладов КАК ТелефоныСкладов
                  |		ПО СписокСкладов.Склад = ТелефоныСкладов.Ссылка
				  |		ЛЕВОЕ СОЕДИНЕНИЕ ТелефоныПользователей КАК ТелефоныПользователей
				  |		ПО СписокСкладов.ТекущийОтветственный = ТелефоныПользователей.ТекущийОтветственный";
	
	Возврат ТекстЗапроса;
	
КонецФункции

 






// Проверка правильность заполнения уникального идентификатора

Функция ПроверитьУникальныйИдентификатор(Идентификатор, СтруктураОшибки, Function1C)

	Если Идентификатор = Неопределено Тогда
		СтруктураОшибки.Function 	= Function1C;
		СтруктураОшибки.Description = "Не задано значение уникального идентификатора";
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		СтруктураОшибки.Function 	= Function1C;
		СтруктураОшибки.Description = "Уникальный идентификатор не является строковым типом";
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Идентификатор) <> 36 Тогда
		СтруктураОшибки.Function 	= Function1C;
		СтруктураОшибки.Description = "Неверная длина уникального идентификатора";
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		СтруктураОшибки.Function 	= Function1C;
		СтруктураОшибки.Description = "Униальный идентификатор не может быть пустой строкой, строкой без значащих символов";
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ПроверитьУникальныйИдентификатор()

Функция ПроверитьУникальныйИдентификаторНаДубли(ИдентификаторСтрока)

	Перем ВладелецПустыхМест;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторСтрока);
	ResponseMeta			 = СоздатьФабрикуXDTOПоИмени("ResponseMeta");
	
	МестоСсылка = Справочники.МестаДоставки.ПолучитьСсылку(УникальныйИдентификатор);
	Если ПустаяСтрока(МестоСсылка.ВерсияДанных) Тогда
		Сообщение = "Уникальный идентификатор %1 не может использоватся из задачами.";
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, УникальныйИдентификатор);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Сообщение = "Не указан владелец пустых мест.";
		ResponseMeta.Meta = СформироватьОбъектMeta(500, "ResponseMeta", Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Настройки.Свойство("КТСДоставка_ВладелецПустыхМест", ВладелецПустыхМест);
	Если ВладелецПустыхМест = Неопределено Тогда
		Сообщение = "Не указан владелец пустых мест.";
		ResponseMeta.Meta = СформироватьОбъектMeta(500, "ResponseMeta", Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если МестоСсылка.Владелец <> ВладелецПустыхМест Тогда
		Сообщение = "Уникальный идентификатор %1 не может использовать для задачами.";
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, УникальныйИдентификатор);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	                       
	Запрос = Новый Запрос("ВЫБРАТЬ
					 |	УникальныйИдентификатор КАК Идентификатор
					 |ИЗ
					 |	Справочник.МестаДоставки
					 |ГДЕ
					 |	УникальныйИдентификатор = &Идентификатор
					 |	И Не ПометкаУдаления");
	Запрос.УстановитьПараметр("Идентификатор", УникальныйИдентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Сообщение = НСтр("ru='Уникальный идентификатор %1 не может использоватся из задачами.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, УникальныйИдентификатор);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПроверитьУникальныйИдентификаторНаДубли()
 

// Проверка правильности загрузки мест

Функция ПроверитьПолученияДанныхЗагрузкаМест(РезультатЗапроса, XDTOОбъект)

	Если РезультатЗапроса[1].Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Место не готово к погрузке или не входит в данный маршрут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;
	КонецЕсли;
	
	Если РезультатЗапроса[2].Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ПроверитьПолученияДанныхЗагрузкаМест()

Функция ПроверитьСтатусыМестаЗагрузкаМест(ВыборкаОтгрузка, ВыборкаПосещения, XDTOОбъект)

	Если ВыборкаПосещения.Статус = Перечисления.КТС_СтатусыПрохожденияМаршрута.ОтгрузкаЗавершена Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту. Отгрузка уже завершена! (4110)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;
	КонецЕсли;
	
	Если ВыборкаОтгрузка.Склад <> ВыборкаПосещения.Абонент Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;
	КонецЕсли;
		
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации Тогда
		СообщениеОбОшибке = НСтр("ru='Место еще не полностью укомплектовано на складе!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина; 	
	КонецЕсли;
	
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру Тогда
		СообщениеОбОшибке = НСтр("ru='Место уже отгружено!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина; 	
	КонецЕсли;
	
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину Тогда
		СообщениеОбОшибке = НСтр("ru='Место уже погружено в машину!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина; 	
	КонецЕсли;	
	
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе Тогда
		СообщениеОбОшибке = НСтр("ru='Место %1 разукомплектовано на складе!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина; 	
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ПроверитьСтатусыМестаЗагрузкаМест()

Функция ПроверитьСтатусыМестаОтгрузкаМест(ВыборкаОтгрузка, ВыборкаПосещения, XDTOОбъект)

	Если ВыборкаПосещения.Статус = Перечисления.КТС_СтатусыПрохожденияМаршрута.ОтгрузкаЗавершена Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту. Отгрузка уже завершена! (4188)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;
	КонецЕсли;
	
	Если ВыборкаОтгрузка.Владелец <> ВыборкаПосещения.Абонент Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту' Владелец места не равно Абонент! (4200)", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ВыборкаОтгрузка.Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ВРег(ВыборкаОтгрузка.АдресДоставки) <>  ВРег(ВыборкаПосещения.ГородСклад) Тогда
			СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту. Адрес доставки не соответствует адресу места доставки! (4213)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
			XDTOОбъект.Data   = Неопределено;
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
 			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации Тогда
		СообщениеОбОшибке = НСтр("ru='Место находится в процессе комплектации на складе! (4226)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;			
	КонецЕсли;
	
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена Тогда
		СообщениеОбОшибке = НСтр("ru='Место находится в процессе погрузки на складе! (4238)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;			
	КонецЕсли;
	
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру Тогда
		СообщениеОбОшибке = НСтр("ru='Место уже отгружено! (4250)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат XDTOОбъект;			
	КонецЕсли;
		
	Если ВыборкаОтгрузка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе Тогда
		СообщениеОбОшибке = НСтр("ru='Место разукомплектовано на складе! (4262)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);	
		XDTOОбъект.Data = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина;			
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ПроверитьСтатусыМестаОтгрузкаМест()
 

Функция ВыполнитьЗаписьМеста(ВыборкаОтгрузка, XDTOОбъект, СтатусОтгрузки, АрхивироватьМесто=Ложь)

	ТДата = ТекущаяДата();
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.ОтгрузкаМест.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Место.Установить(ВыборкаОтгрузка.Место);
	НаборЗаписей.Отбор.Склад.Установить(ВыборкаОтгрузка.Склад);
	НаборЗаписей.Отбор.Период.Установить(ТДата);
	
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаОтгрузка);
		НоваяЗапись.Период 			= ТДата;
		НоваяЗапись.СтатусОтгрузки 	= СтатусОтгрузки;
		НоваяЗапись.ВариантМаршрута	= ВыборкаОтгрузка.ВариантМаршрута;
		НоваяЗапись.Пользователь	= ПараметрыСеанса.ТекущийПользователь;
		
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
		XDTOОбъект.Meta   = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);
		XDTOОбъект.Data   = Неопределено;
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Погрузка места в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат Истина; 	
	КонецПопытки;
	
	Если АрхивироватьМесто Тогда
		МестоОбъект = ВыборкаОтгрузка.Место.ПолучитьОбъект();
		МестоОбъект.Архивный = Истина;
		Попытка
			МестоОбъект.Записать();
		Исключение
			ОтменитьТранзакцию();
			СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
			XDTOОбъект.Meta   = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);	
			XDTOОбъект.Data   = Неопределено;
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Выгрузка места из машины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
	 		Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Ложь;

КонецФункции // ВыполнитьЗаписьЗагрузаМест()
 
 


Функция ПроверитьДоступностьСкладаПоМаршруту(Склад, Маршрут)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка,
	                      |	Склад
	                      |ИЗ
	                      |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставкаОтПартнеров
	                      |ГДЕ
	                      |	Ссылка = &Маршрут
	                      |	И Склад = &Склад");
						  
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();

КонецФункции // ПроверитьДоступностьСкладапоМаршруту()

Функция ПолучитьАдресСклада(Склад)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Представление КАК АдресСклада
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация
	                      |ГДЕ
	                      |	Тип 	 = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	                      |	И Вид 	 = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
	                      |	И Ссылка = &Склад");
						  
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.АдресСклада, "");
						  
КонецФункции // ПолучитьАдресСклада()

Функция ПолучитьGeoОтправителя(ДокументПоездки)

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СкладПартнер 			КАК GeoСсылка,
						  |	СкладПартнер.Владелец 	КАК Отправитель,
						  |	СкладПартнер.ГородСклад	КАК АдресОтправителя
	                	  |ИЗ
	                      |	РегистрСведений.КТС_ФиксацияПрохожденияМаршрута.СрезПоследних(, ДокументПоездки = &ДокументПоездки)
	                      |ГДЕ
	                      |	Статус = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПрохожденияМаршрута.НачалоОтгрузки)
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Период УБЫВ");
						  
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументПоездки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("GeoСсылка, Отправитель, АдресОтправителя, GUID");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.GUID = Строка(Выборка.GeoСсылка.УникальныйИдентификатор());
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьТекущийАдресВодителя()

Функция ПолучитьGeoСклада(Склад, АдресСклада)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.КТС_ГеографическиеРасположенияПартнеров
	                      |ГДЕ
	                      |	Владелец 		= &Склад
						  |	И ГородСклад	= &АдресСклада");
						  
	Запрос.УстановитьПараметр("Склад", 		 Склад);
	Запрос.УстановитьПараметр("АдресСклада", АдресСклада);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("СсылкаGeo", Выборка.Ссылка);
		Результат.Вставить("GUID", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьGeoСклада()
 
 





Функция УстановитьСтатусЗадачи(RouteGUID, TaskGUID, СтатусЗадачи, AssignedQRCode = Неопределено)

	ResponseMeta	= СоздатьФабрикуXDTOПоИмени("ResponseMeta");
	СтруктураОшибки = Новый Структура("Description, Function");
	
	Если Не ПроверитьУникальныйИдентификатор(TaskGUID, СтруктураОшибки, "ReceiveTask(TaskGUID, RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceiveTask, параметр TaskGUID имеет неверный формат. %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если Не ПроверитьУникальныйИдентификатор(RouteGUID, СтруктураОшибки, "ReceiveTask(TaskGUID, RouteGUID)") Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceiveTask, параметр RouteGUID имеет неверный формат. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СтруктураОшибки.Description);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения И (AssignedQRCode = Неопределено ИЛИ ПустаяСтрока(AssignedQRCode)) Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка выполнения функции ReceiveTask, параметр AssignedQRCode не может быть пустым.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
		
	Маршрут = Справочники.ВариантыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор(RouteGUID));
	Если ПустаяСтрока(Маршрут.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Маршрут из идентификатором %1 не существует.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, RouteGUID);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Место = Справочники.МестаДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(TaskGUID));
	Если ПустаяСтрока(Место.ВерсияДанных) Тогда
		СообщениеОбОшибке = НСтр("ru='Задача из идентификатором %1 не существует.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, TaskGUID);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если Место.Архивный Тогда
		СообщениеОбОшибке = НСтр("ru='Задача уже отгружена, обновите маршрут.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, TaskGUID);
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездкаЗаМаршрутом();
	Запрос.УстановитьПараметр("Сегодня", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Водитель", 	ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='Вариант маршрута водителю не назначен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(410, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
		Возврат ResponseMeta;
	КонецЕсли;
	
	ДанныеПоездки = РезультатЗапроса.Выбрать();
    ДанныеПоездки.Следующий();
	
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПолученияЗадачи();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеПоездки.СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Сообщение = НСтр("ru='Задача с идентификатором %1 по маршруту %2 не найдена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, TaskGUID, RouteGUID);
		ResponseMeta.Meta = СформироватьОбъектMeta(410, "ResourceNotFoundException", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если РезультатЗапроса[1].ПустоЙ() Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места в машину нужно приехать к абоненту'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат ResponseMeta;
	КонецЕсли;
	
	Выборка 			= РезультатЗапроса[0].Выбрать();
	ВыборкаПосещения    = РезультатЗапроса[1].Выбрать();
	
	Выборка.Следующий();
	ВыборкаПосещения.Следующий();
	
	Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения И ВыборкаПосещения.Абонент <> Выборка.Отправитель Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места/задачи в машину нужно приехать к абоненту'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат ResponseMeta;
	КонецЕсли;
	
	Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена И ВыборкаПосещения.Абонент <> Выборка.Получатель Тогда
		СообщениеОбОшибке = НСтр("ru='Для загрузки места/задачи в машину нужно приехать к абоненту'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			СообщениеОбОшибке);
 		Возврат ResponseMeta;
	КонецЕсли;
	
	Если Выборка.СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена Тогда
		Сообщение = НСтр("ru='Задача из идентификатором %1 уже выполнена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, TaskGUID);
		ResponseMeta.Meta = СформироватьОбъектMeta(409, "Conflict", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения И Выборка.СтатусЗадачи <> Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена Тогда
		Сообщение = НСтр("ru='Задача из идентификатором %1 уже выполнена или находится в процессе выполнения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, TaskGUID);
		ResponseMeta.Meta = СформироватьОбъектMeta(409, "Conflict", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Если  СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена И Выборка.СтатусЗадачи <> Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения Тогда
		Сообщение = НСтр("ru='Для завершения операции задача должна находится в процессе выполнения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ResponseMeta.Meta = СформироватьОбъектMeta(409, "Conflict", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Сообщение);
		Возврат ResponseMeta;
	КонецЕсли;
	
	Период		 = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Место.Установить(Место);
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Период			= Период;
	Запись.Место			= Место;
	
	Запись.СтатусОтгрузки 	= СтатусЗадачи;
	
	Запись.ВариантМаршрута	= Маршрут;
	Запись.Отправитель		= Выборка.Отправитель;
	Запись.АдресОтправителя	= Выборка.АдресОтправителя;
	Запись.Пользователь		= ПараметрыСеанса.ТекущийПользователь;
	
	Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения И Выборка.НужноПечататьQRКод Тогда
		
		Если AssignedQRCode = Неопределено Тогда
			Сообщение 			= НСтр("ru='Параметр AssignedQRCode имеет неверный формат.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ResponseMeta.Meta 	= СформироватьОбъектMeta(400, "BadRequest", Сообщение);
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				Сообщение);
			Возврат ResponseMeta;
		КонецЕсли;
		Если Не ПроверитьУникальныйИдентификатор(AssignedQRCode, СтруктураОшибки, "ReceiveTask") Тогда
			Сообщение 			= НСтр("ru='Параметр AssignedQRCode имеет неверный формат.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ResponseMeta.Meta 	= СформироватьОбъектMeta(400, "BadRequest", Сообщение);
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				Сообщение);
			Возврат ResponseMeta;
		КонецЕсли;
		РезультатПроверки = ПроверитьУникальныйИдентификаторНаДубли(AssignedQRCode);
		Если РезультатПроверки <> Неопределено Тогда
			Возврат РезультатПроверки;
		КонецЕсли;

		МестоОбъект = Место.ПолучитьОбъект();
		МестоОбъект.УникальныйИдентификатор = Новый УникальныйИдентификатор(AssignedQRCode);
		МестоОбъект.Записать();
		
	КонецЕсли;
	
	НачатьТранзакцию();
		Попытка
		    НаборЗаписей.Записать();			
		Исключение
			СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка при выполнении функции ReceiveTask. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
			ResponseMeta.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение,
					,
					,
					СообщениеОбОшибке);
			ОтменитьТранзакцию();
			Возврат ResponseMeta;
		КонецПопытки;
		
		Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения Тогда
			Сообщение = НСтр("ru='Задача %1 успешно помещено в машину'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Иначе
			Если НЕ Место.Транзит Тогда
				Попытка
				 	МестоОбъект = Место.ПолучитьОбъект();
					МестоОбъект.Архивный = Истина;
					МестоОбъект.Записать();
				Исключение
					СообщениеОбОшибке = НСтр("ru='Произошла ошибка при записи статуса: Архивный, транзакция отменена. Описание ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ОписаниеОшибки());
					ResponseMeta.Meta = СформироватьОбъектMeta(500, "InternalServerError", СообщениеОбОшибке);
					ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Предупреждение,
							,
							,
							СообщениеОбОшибке);
					ОтменитьТранзакцию();	
				КонецПопытки;
			КонецЕсли;
			Сообщение = НСтр("ru='Задача %1 успешно выполнена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		
	ЗафиксироватьТранзакцию();
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, TaskGUID);
	ResponseMeta.Meta = СформироватьОбъектMeta(200, "OK", Сообщение); 
	ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Задачи на маршут'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				,
				СообщениеОбОшибке);

	Возврат ResponseMeta;

КонецФункции // УстановитьСтатусЗадачи()
 
 


// Получение информации по месту

Процедура ИнформацияПоМесту(МестоСсылка, XDTOОбъект)

	ResourceInfoList = СоздатьФабрикуXDTOПоИмени("ResourceInfoList");
	
	Запрос 			 = Новый Запрос;
	Запрос.Текст 	 = ПолучитьТекстЗапросаИнформацияПоМесту();
						  
	Запрос.УстановитьПараметр("Место", МестоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Код = ЗапонитьТегИнформацииПоМесту("Код", Выборка.Код);
		ResourceInfoList.Item.Добавить(Код);
		
		Отправитель = ЗапонитьТегИнформацииПоМесту("Отправитель", Выборка.Отправитель);
		ResourceInfoList.Item.Добавить(Отправитель);
		
		АдресОтправителя = ЗапонитьТегИнформацииПоМесту("Адрес отправителя", Выборка.АдресОтправителя);
		ResourceInfoList.Item.Добавить(АдресОтправителя);
		
		Получатель = ЗапонитьТегИнформацииПоМесту("Получатель", Выборка.Получатель);
		ResourceInfoList.Item.Добавить(Получатель);
		
		АдресПолучателя = ЗапонитьТегИнформацииПоМесту("Адрес получателя", Выборка.АдресПолучателя);
		ResourceInfoList.Item.Добавить(АдресПолучателя);
		
		Маршрут = ЗапонитьТегИнформацииПоМесту("Маршрут", Выборка.Маршрут);
		ResourceInfoList.Item.Добавить(Маршрут);
		
		Сообщение		= НСтр("ru='Данные получены.'" , ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Data = ResourceInfoList;
		XDTOОбъект.Meta	= СформироватьОбъектMeta(200, "OK", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				Сообщение);
		
	Иначе
		
		СообщениеОбОшибке = НСтр("ru='Информации по месту не найдено.'" , ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Data   = Неопределено;
		XDTOОбъект.Meta	  = СформироватьОбъектMeta(404, "NotFound", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
		
	КонецЕсли;

КонецПроцедуры

Процедура ИнформацияПоЗадаче(Место, XDTOОбъект)

	ResourceInfoList = СоздатьФабрикуXDTOПоИмени("ResourceInfoList");
	
	Запрос 			 = Новый Запрос;
	Запрос.Текст     = ПолучитьТекстЗапросаИнформацияПоЗадаче();
	
	Запрос.УстановитьПараметр("Место", Место);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстЗадачи = ЗапонитьТегИнформацииПоМесту("Текст задачи", "[" + Место.ТекстЗадачи + "]");
		ResourceInfoList.Item.Добавить(ТекстЗадачи);
		
		Код = ЗапонитьТегИнформацииПоМесту("Код", Формат(Число(Выборка.Код), "ЧРГ=''; ЧГ=0"));
		ResourceInfoList.Item.Добавить(Код);
		
		Отправитель = ЗапонитьТегИнформацииПоМесту("Отправитель", Выборка.Отправитель);
		ResourceInfoList.Item.Добавить(Отправитель);
		
		АдресОтправителя = ЗапонитьТегИнформацииПоМесту("Адрес отправителя", Выборка.АдресОтправителя);
		ResourceInfoList.Item.Добавить(АдресОтправителя);
		
		Получатель = ЗапонитьТегИнформацииПоМесту("Получатель", Выборка.Получатель);
		ResourceInfoList.Item.Добавить(Получатель);
		
		АдресПолучателя = ЗапонитьТегИнформацииПоМесту("Адрес получателя", Выборка.АдресПолучателя);
		ResourceInfoList.Item.Добавить(АдресПолучателя);
		
		Маршрут = ЗапонитьТегИнформацииПоМесту("Маршрут", Выборка.Маршрут);
		ResourceInfoList.Item.Добавить(Маршрут);
		
		Автор = ЗапонитьТегИнформацииПоМесту("Автор", Выборка.Автор);
		ResourceInfoList.Item.Добавить(Автор);
				
		СтатусЗадачи = ЗапонитьТегИнформацииПоМесту("СтатусЗадачи", Выборка.СтатусЗадачи);
		ResourceInfoList.Item.Добавить(СтатусЗадачи);
		
		Сообщение		= НСтр("ru='Данные получены.'" , ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Data = ResourceInfoList;
		XDTOОбъект.Meta	= СформироватьОбъектMeta(200, "OK", Сообщение);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				Сообщение);
		
	Иначе
		
		СообщениеОбОшибке = НСтр("ru='Информации по месту не найдено.'" , ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		XDTOОбъект.Data   = Неопределено;
		XDTOОбъект.Meta	  = СформироватьОбъектMeta(404, "NotFound", СообщениеОбОшибке);
		ЗаписьЖурналаРегистрации(НСтр("ru='КТСДоставка.Получение информации о месте'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				СообщениеОбОшибке);
		
	КонецЕсли;

КонецПроцедуры

Функция ЗапонитьТегИнформацииПоМесту(Ключ, Значение)

	ResourceInfo	   = СоздатьФабрикуXDTOПоИмени("ResourceInfo");
	ResourceInfo.key   = Ключ;
	ResourceInfo.value = Значение;
	
	Возврат ResourceInfo;

КонецФункции



Функция СформироватьОбъектMeta(Code, ErrorType, ErrorMessage)

	MetaTag	= СоздатьФабрикуXDTOПоИмени("MetaTag");
	
	MetaTag.Code 		 = Code;
	MetaTag.ErrorType 	 = ErrorType;
	MetaTag.ErrorMessage = ErrorMessage;
	
	Возврат MetaTag;

КонецФункции // СформироватьОбъектMeta()
 


Функция ПолучитьСписокКонтакныхЛиц(ВладелецМеста)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Ссылка						КАК Ссылка,
				   |	Ссылка.ДолжностьПоВизитке 	КАК Position,
	               |	НомерТелефона 				КАК Phone,
	               |	Ссылка.Наименование 		КАК Name
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
	               |ГДЕ
	               |	Ссылка.Владелец = &ВладелецКонтактногоЛица
	               |	И Тип = &ТипКонтактнойИнформацииТелефон
	               |	И Вид = &ВидКонтактнойИнформацииНомерМобильногоТелефона
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Ссылка						КАК Ссылка,
				   |	Ссылка.ДолжностьПоВизитке 	КАК Position,
	               |	НомерТелефона 				КАК Phone,
	               |	Ссылка.Наименование 		КАК Name
				   |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
	               |ГДЕ
	               |	Ссылка.Владелец = &ВладелецКонтактногоЛица
	               |	И Тип = &ТипКонтактнойИнформацииТелефон
	               |	И Вид = &ВидКонтактнойИнформацииНомерТелефона
				   |;
				   |
				   |ВЫБРАТЬ
				   |	Ссылка 						КАК Ссылка,
				   |	Представление				КАК Position,
				   |	Представление				КАК Phone,
				   |	""Телефон партнера""		КАК Name
				   |ИЗ
				   |	Справочник.Партнеры.КонтактнаяИнформация
				   |ГДЕ
				   |	Ссылка 			=  &ВладелецКонтактногоЛица
				   |	И Тип  			=  &ТипКонтактнойИнформацииТелефон
				   |	И Представление <> """"
				   |;";
				   
	Запрос.УстановитьПараметр("ВладелецКонтактногоЛица", 						ВладелецМеста);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформацииТелефон", 				Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииНомерТелефона", 			Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииНомерМобильногоТелефона", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	
	РезультатПакета			= Запрос.ВыполнитьПакет();
	ВыборкаКонтактныеЛица 	= РезультатПакета[0].Выбрать();
	ВыборкаТелефоныПартнера = РезультатПакета[1].Выбрать();
	
	КонтакныеЛицаСписок = СоздатьФабрикуXDTOПоИмени("ContactPersons");
	
	Пока ВыборкаКонтактныеЛица.Следующий() Цикл
		КонтактноеЛицо = СоздатьФабрикуXDTOПоИмени("ContactPerson");
		ЗаполнитьЗначенияСвойств(КонтактноеЛицо, ВыборкаКонтактныеЛица);
		КонтактноеЛицо.GUID 	= Строка(ВыборкаКонтактныеЛица.Ссылка.УникальныйИдентификатор());
		КонтактноеЛицо.Phone   = НормализироватьНомерТелефона(ВыборкаКонтактныеЛица.Phone);
		КонтакныеЛицаСписок.ContactPerson.Добавить(КонтактноеЛицо);
	КонецЦикла;
	
	Пока ВыборкаТелефоныПартнера.Следующий() Цикл
		КонтактноеЛицо = СоздатьФабрикуXDTOПоИмени("ContactPerson");
		ЗаполнитьЗначенияСвойств(КонтактноеЛицо, ВыборкаТелефоныПартнера);
		КонтактноеЛицо.GUID 	= Строка(ВыборкаТелефоныПартнера.Ссылка.УникальныйИдентификатор());
		КонтактноеЛицо.Phone   = НормализироватьНомерТелефона(ВыборкаТелефоныПартнера.Phone);
		КонтакныеЛицаСписок.ContactPerson.Добавить(КонтактноеЛицо);
	КонецЦикла;
	
	Возврат КонтакныеЛицаСписок;

КонецФункции // ПолучитьСписокКонтакныхЛиц()

Функция ПолучитьИнформациюПроОплаты(Маршрут, Владелец, СуммаОплаты, КодВалюты, ПолученныеОплаты)
	
	PaymentInfoSection = СоздатьФабрикуXDTOПоИмени("PaymentInfoSection");
	PaymentInfo		   = СоздатьФабрикуXDTOПоИмени("PaymentInfo");
		
	PaymentInfo.Amount 					= ?(СуммаОплаты = 0, 0 , ПеревестиСуммуВКопейки(СуммаОплаты));
	PaymentInfo.CurrencyCode	  		= КодВалюты;
	PaymentInfoSection.PaymentToReceive = PaymentInfo;
		
	PaymentInfoSection.ReceivedPayments = СформироватьСписокПолученныхОплат(Владелец, ПолученныеОплаты);
	
	Возврат PaymentInfoSection;
		
КонецФункции

Функция ПолучитьСуммуОплаты(Маршрут, ВладелецМеста)

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСуммаОплаты();
	
	Запрос.УстановитьПараметр("ВладелецМеста", ВладелецМеста);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);

КонецФункции // ПолучитьСуммаОплаты()

Функция СформироватьСписокПолученныхОплат(ВладелецМеста, ПолученныеОплаты)

	PaymentInfoList = СоздатьФабрикуXDTOПоИмени("PaymentInfoList");
	
	СтруктураПоиска  = Новый Структура("Партнер", ВладелецМеста);
	РезультатыПоиска = ПолученныеОплаты.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого РезультатПоиска ИЗ РезультатыПоиска Цикл
		
		PaymentInfo = СоздатьФабрикуXDTOПоИмени("PaymentInfo");
		
		PaymentInfo.Amount	 	 = ПеревестиСуммуВКопейки(РезультатПоиска.СуммаПринято);
		PaymentInfo.CurrencyCode = РезультатПоиска.КодВалюты;
		
		PaymentInfoList.PaymentInfo.Добавить(PaymentInfo);
		                
	КонецЦикла;
	
	Возврат PaymentInfoList;

КонецФункции // СформироватьСписокПолученныхОплат()
 


Функция ПеревестиСуммуВКопейки(Сумма)
	Возврат Сумма * 100;
КонецФункции

Функция ПеревестиКопейкиВСумму(Копейки)
	Возврат Копейки / 100;	
КонецФункции // ПеревестиКопейкиВСумму()
 
 




Функция ВремяUnix2Время1С(ЗначениеВремени)
	Возврат Дата("19700101000000") + ЗначениеВремени;		
КонецФункции

Функция Время1С2ВремяUnix(ЗначениеВремени)
	Возврат ЗначениеВремени - Дата("19700101000000");
КонецФункции

Функция ЗаписатьСообщениевРегистр(Период, ДокументПоездки, ВремяРегистрации, Сообщение, Пользователь, СообщениеОбОшибке)

	НаборЗаписей = РегистрыСведений.КТС_ЖурналСообщенийВодителей.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДокументПоездки);
	НаборЗаписей.Отбор.ВремяРегистрации.Установить(ВремяРегистрации);
	
	Запись 		  			= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.ВремяРегистрации = ВремяРегистрации;
	Запись.ДокументПоездки  = ДокументПоездки;
	Запись.Пользователь 	= Пользователь;
	Запись.Сообщение		= Сообщение;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции
 


Функция НормализироватьНомерТелефона(НомерТелефона)

	НомерРезультат = ОбработатьМассивНомеров(РазобратьСтрокуСТелефонами(НомерТелефона));
	Если НомерРезультат <> Неопределено Тогда
		Возврат НомерРезультат;
	КонецЕсли;
	
	Возврат НомерТелефона;

КонецФункции // НормализироватьНомерТелефона()

Функция РазобратьСтрокуСТелефонами(знач НомерТелефона)

	МассивНомеров 		= Новый Массив;
	СимволыРазделители 	= ";,";	
	Индекс				= 1;
	Накопитель			= "";
	
	Пока Индекс <= СтрДлина(НомерТелефона) Цикл
		Символ = Сред(НомерТелефона, Индекс, 1);
		Если ЭтоЦифра(Символ) Тогда
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		Если Найти(СимволыРазделители, Символ) > 0 Тогда
			МассивНомеров.Добавить(Накопитель);
			Накопитель = "";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Не ПустаяСтрока(Накопитель) Тогда
		МассивНомеров.Добавить(Накопитель);
	КонецЕсли;
	
	Возврат МассивНомеров;

КонецФункции // РазобратьСтрокуСТелефонами()

Функция ОбработатьМассивНомеров(МассивНомеров)
		
	Для каждого Номер Из МассивНомеров Цикл		
		НомерТелефона = Прав(Номер, 10);
		Если СтрДлина(НомерТелефона) <> 10 Тогда
			Продолжить;
		КонецЕсли;
		Возврат НомерТелефона;
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции // ОбработатьМассивНомеров()

Функция ЭтоЦифра(Символ)
 	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ Код>=58, Ложь, Истина);	 
КонецФункции
 




// Сведения о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.16";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "КТС доставка");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "КТС доставка [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "КТС доставка [" + Версия + "]", "КТСД", "ОткрытиеФормы", Ложь, "КТСД");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры