#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейс


// Документы поездки

Процедура ЗагрузитьСписокДокументов(Таблица, ДатаПоездки, ВариантМаршрута) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокДокументов(ВариантМаршрута);
	
	Запрос.УстановитьПараметр("ВариантМаршрута", 	ВариантМаршрута);
	Запрос.УстановитьПараметр("Дата", 				ДатаПоездки);
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры
 


// Места

Процедура ЗагрузитьСписокМестВПоездке(Таблица, ДокументПоездки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМестаВПоездке();
	
	Запрос.УстановитьПараметр("ДокументПоездки", 	ДокументПоездки);
	Запрос.УстановитьПараметр("ПустаяДата", 		Дата(1,1,1));
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ЗагрузитьСписокМестБезПоездки(Таблица, ВариантМаршрута) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаМестаБезПоездки(ВариантМаршрута);
	
	Запрос.УстановитьПараметр("ВариантМаршрута", ВариантМаршрута);
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить())

КонецПроцедуры


Функция ДобавитьМестаВПоездку(ДокументПоездки, МассивМест) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если ДокументПоездки.СтатусПоездки <> Перечисления.КТС_СтатусыПоездки.ВПроцессе Тогда
		ТекстСообщения = НСтр("ru='Для добавления мест документ «Поездка за маршрутом» должен быть в статусе «В процессе»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДобавленияВПоездку();
	
	Запрос.УстановитьПараметр("ДокументПоездки", 	ДокументПоездки);
	Запрос.УстановитьПараметр("МассивМест", 		МассивМест);
	Запрос.УстановитьПараметр("ВариантМаршрута",    ДокументПоездки.ВариантМаршрута);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[8].Пустой() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаЗаписи = РезультатЗапроса[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Блокировка 		  				 = Новый БлокировкаДанных;
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПоездкаЗаМаршрутом");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса[8];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументПоездки", 	"ДокументПоездки");
	
	Попытка
	    Блокировка.Заблокировать();			
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Пока ВыборкаЗаписи.Следующий() Цикл
		
		СтруктураДляЗаписи 		= Новый Структура;
		ВыборкаДетальныеЗаписи  = ВыборкаЗаписи.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.GeoПолучатель = Неопределено Тогда
				ТекстСообщения = НСтр("Для места %1 не удалось определить георасположение получателя.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.GeoОтправитель = Неопределено Тогда
				ТекстСообщения = НСтр("Для места %1 не удалось определить георасположение отправителя.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("ДокументПоездки") Тогда
				СтруктураДляЗаписи.Вставить("ДокументПоездки", ВыборкаДетальныеЗаписи.ДокументПоездки);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("МестоДоставки") Тогда
				СтруктураДляЗаписи.Вставить("МестоДоставки", ВыборкаДетальныеЗаписи.Место);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("Архивное") Тогда
				СтруктураДляЗаписи.Вставить("Архивное", ВыборкаДетальныеЗаписи.Архивный);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("ЭтоЗадача") Тогда
				СтруктураДляЗаписи.Вставить("ЭтоЗадача", ВыборкаДетальныеЗаписи.ЭтоЗадача);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("НачалоКомплектации") 
					И ВыборкаДетальныеЗаписи.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации Тогда
				СтруктураДляЗаписи.Вставить("НачалоКомплектации", ВыборкаДетальныеЗаписи.Дата);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("КомплектацияЗавершена") 
					И ВыборкаДетальныеЗаписи.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена Тогда
				СтруктураДляЗаписи.Вставить("КомплектацияЗавершена", ВыборкаДетальныеЗаписи.Дата);
			КонецЕсли;
						
			Если Не СтруктураДляЗаписи.Свойство("ЗадачаПоставлена") 
					И ВыборкаДетальныеЗаписи.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена Тогда
				СтруктураДляЗаписи.Вставить("ЗадачаПоставлена", ВыборкаДетальныеЗаписи.Дата);
			КонецЕсли;

			Если Не СтруктураДляЗаписи.Свойство("Owner") Тогда
				СтруктураДляЗаписи.Вставить("Owner", ВыборкаДетальныеЗаписи.Получатель);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("OwnerAdress") Тогда
				СтруктураДляЗаписи.Вставить("OwnerAdress", ВыборкаДетальныеЗаписи.АдресПолучателя);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("OwnerGeoGUID") Тогда
				СтруктураДляЗаписи.Вставить("OwnerGeoGUID", Строка(ВыборкаДетальныеЗаписи.GeoПолучатель.УникальныйИдентификатор()));
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("OwnerGeoLocation") Тогда
				СтруктураДляЗаписи.Вставить("OwnerGeoLocation", ВыборкаДетальныеЗаписи.GeoПолучатель);
			КонецЕсли;

			Если Не СтруктураДляЗаписи.Свойство("IsPartner") Тогда
				СтруктураДляЗаписи.Вставить("IsPartner", ВыборкаДетальныеЗаписи.ЭтоПартнер);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("GUID") Тогда
				СтруктураДляЗаписи.Вставить("GUID", Строка(ВыборкаДетальныеЗаписи.Место.УникальныйИдентификатор()));
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("ManualCode") Тогда
				СтруктураДляЗаписи.Вставить("ManualCode", Число(ВыборкаДетальныеЗаписи.Код));
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("AssignedQRCode") Тогда
				СтруктураДляЗаписи.Вставить("AssignedQRCode", Строка(ВыборкаДетальныеЗаписи.AssignedQRCode));
			КонецЕсли;

			Если Не СтруктураДляЗаписи.Свойство("IsQRCodeScanningNeeded") Тогда
				СтруктураДляЗаписи.Вставить("IsQRCodeScanningNeeded", ВыборкаДетальныеЗаписи.IsQRCodeScanningNeeded);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("Author") Тогда
				СтруктураДляЗаписи.Вставить("Author", ВыборкаДетальныеЗаписи.Пользователь);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("Comment") Тогда
				СтруктураДляЗаписи.Вставить("Comment", ВыборкаДетальныеЗаписи.Comment);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("Отправитель") Тогда
				СтруктураДляЗаписи.Вставить("Отправитель", ВыборкаДетальныеЗаписи.Отправитель);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("АдресОтправителя") Тогда
				СтруктураДляЗаписи.Вставить("АдресОтправителя", ВыборкаДетальныеЗаписи.АдресОтправителя);
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("ОтправительGeoGUID") Тогда
				СтруктураДляЗаписи.Вставить("ОтправительGeoGUID", Строка(ВыборкаДетальныеЗаписи.GeoОтправитель.УникальныйИдентификатор()));
			КонецЕсли;
			
			Если Не СтруктураДляЗаписи.Свойство("ОтправительGeoLocation") Тогда
				СтруктураДляЗаписи.Вставить("ОтправительGeoLocation", ВыборкаДетальныеЗаписи.GeoОтправитель);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПоездки.Установить(СтруктураДляЗаписи.ДокументПоездки);
		НаборЗаписей.Отбор.МестоДоставки.Установить(СтруктураДляЗаписи.МестоДоставки);
		
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураДляЗаписи);
		
		Попытка
			НаборЗаписей.Записать();    					
		Исключение
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;	
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

Функция ИсключитьМестаИзПоездки(ДокументПоездки, МассивМест) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаИсключенияИзПоездки();
	
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументПоездки);
	Запрос.УстановитьПараметр("МассивМест",		 МассивМест);
	Запрос.УстановитьПараметр("ВариантМаршрута", ДокументПоездки.ВариантМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Блокировка 		  				 = Новый БлокировкаДанных;
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ПоездкаЗаМаршрутом");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументПоездки", 	"ДокументПоездки");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("МестоДоставки", 	"МестоДоставки");
	
	Попытка
	    Блокировка.Заблокировать();			
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.РазрешитьИсключитьИзДоставки Тогда
			ТекстСообщения = НСтр("ru='Место %1 не может быть исключено из доставки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Число(Выборка.Код));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПоездки.Установить(Выборка.ДокументПоездки);
		НаборЗаписей.Отбор.МестоДоставки.Установить(Выборка.МестоДоставки);
		
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.ИсключеноИзДоставки = Истина;
		
		Попытка
			НаборЗаписей.Записать();    					
		Исключение
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Ложь;	
		КонецПопытки; 
		
		Если Выборка.ЭтоЗадача И Выборка.СтатусМеста = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения Тогда
			НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.ЗадачаВПроцессеВыполнения);
			НаборЗаписей.Отбор.Место.Установить(Выборка.МестоДоставки);
			Попытка
				НаборЗаписей.Записать();    					
			Исключение
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат Ложь;	
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ Выборка.ЭтоЗадача И Выборка.СтатусМеста = Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину Тогда
			НаборЗаписей = РегистрыСведений.ОтгрузкаМест.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.ПогруженоВМашину);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Отправитель);
			НаборЗаписей.Отбор.Место.Установить(Выборка.МестоДоставки);
			Попытка
				НаборЗаписей.Записать();    					
			Исключение
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат Ложь;	
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции // ИсключитьМестаИзПоездки()


Функция ИнформацияПоМесту(Место) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Место.ЭтоЗадача Тогда
		ТабДок = ПолучитьИнформациюПоЗадаче(Место);
	Иначе
		ТабДок = ПолучитьИнформациюПоМесту(Место);
	КонецЕсли;
	
	Возврат ТабДок;

КонецФункции // ПолучитьИнформациюПоМесту()
 
 


 
 
 



// Список перемещений

Процедура ЗагрузитьСписокПеремещений(Таблица, Склад, ТолькоТранзит) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокПеремещений(ТолькоТранзит);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ЗагрузитьСписокНоменклатурыПеремещений(Таблица, Документ, Склад) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокНоменклатурыПеремещений();
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры




// Список задач

Процедура ЗагрузитьСписокЗадач(Таблица, Склад, ТолькоТранзит) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Склад.Пустая() Тогда
		Таблица.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокЗадач(ТолькоТранзит);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Функция ПолучитьТекстЗадачи(Задача) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Задача.ТекстЗадачи;

КонецФункции
 



// Графическая схема

Процедура СформироватьГрафическуюСхемуПеремещения(ЭлементГрафическаСхема, Документ, ТранзитноеПеремещение, ЗаказНаПеремещение) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТранзитноеПеремещение = 0 Тогда
		МакетСхема = ПолучитьМакет("ТранзитныеПеремещения");
	ИначеЕсли ТранзитноеПеремещение = 1 Тогда
		МакетСхема = ПолучитьМакет("ПрямыеПеремещения");
	Иначе
		Возврат;
	КонецЕсли;
	
	МакетСхема.ВертикальныйШагСетки   = 0;
	МакетСхема.ГоризонтальныйШагСетки = 0;

	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаГрафическаяСхема();
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса 	= Запрос.ВыполнитьПакет();
	ВыборкаМеста 	 	= РезультатЗапроса[2].Выбрать();
	
	НаименованиеМест = "";
		
	Пока ВыборкаМеста.Следующий() Цикл
		НаименованиеМест = НаименованиеМест + ВыборкаМеста.НаименованиеМеста + " ";
	КонецЦикла;
	
	УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "Место", НаименованиеМест);
	УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "СкладОтправитель", Строка(Документ.СкладОтправитель));
	
	Если ТранзитноеПеремещение = 0 Тогда
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "ТранзитныйСклад", Строка(Документ.СкладПолучатель));
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "СкладПолучатель", Строка(ЗаказНаПеремещение.СкладПолучатель));
	ИначеЕсли ТранзитноеПеремещение = 1 Тогда
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "СкладПолучатель", Строка(Документ.СкладПолучатель));
	Иначе 
		Возврат;
	КонецЕсли;
		
	ЭлементГрафическаСхема = МакетСхема;

КонецПроцедуры

Процедура СформироватьГрафическуюСхемуЗадачи(ЭлементГрафическаСхема, Задача, ТранзитнаяЗадача) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТранзитнаяЗадача = 0 Тогда
		МакетСхема = ПолучитьМакет("ТранзитныеПеремещения");
	ИначеЕсли ТранзитнаяЗадача = 1 Тогда
		МакетСхема = ПолучитьМакет("ПрямыеПеремещения");
	Иначе
		Возврат;
	КонецЕсли;
	
	МакетСхема.ВертикальныйШагСетки   = 0;
	МакетСхема.ГоризонтальныйШагСетки = 0;

	УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "Место", Строка(Задача));
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаГрафическаяСхемаЗадач();
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "СкладОтправитель", Строка(Выборка.СкладОтправитель));
	КонецЕсли;
	
	Если ТранзитнаяЗадача = 0 Тогда
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "ТранзитныйСклад", Строка(Задача.ТранзитныйСклад));
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "СкладПолучатель", Строка(Задача.Владелец));
	ИначеЕсли ТранзитнаяЗадача = 1 Тогда
		УстановитьНаименованиеГрафическогоЭлемента(МакетСхема, "СкладПолучатель", Строка(Задача.Владелец));
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭлементГрафическаСхема = МакетСхема;

КонецПроцедуры
 



// Партнеры

Процедура ЗагрузитьСписокОплат(Таблица, ДокументПоездки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДокументПоездки) Тогда
		Таблица.Очистить();
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокОплат();
	
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументПоездки);
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Функция ПринятьОплату(ДокументПоездки, Партнер, Период, Валюта, Сумма) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	*	               
				   |ИЗ
	               |	РегистрСведений.КТС_ОплатыПринятыеВодителями
	               |ГДЕ
	               |	Период 			  = &Период
	               |	И ДокументПоездки = &ДокументПоездки
	               |	И Партнер 		  = &Партнер
	               |	И Валюта 		  = &Валюта";
				   
	Запрос.УстановитьПараметр("Период", 			Период);
	Запрос.УстановитьПараметр("ДокументПоездки", 	ДокументПоездки);
	Запрос.УстановитьПараметр("Партнер", 			Партнер);
	Запрос.УстановитьПараметр("Валюта", 			Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
				   
	Блокировка 							= Новый БлокировкаДанных;
	ЭлементБлокировки   				= Блокировка.Добавить("РегистрСведений.КТС_ОплатыПринятыеВодителями");
	ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных    = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументПоездки", 	"ДокументПоездки");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партнер", 			"Партнер");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Валюта", 			"Валюта");
	
	Попытка
		Блокировка.Заблокировать();    			
	Исключение
	    ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей = РегистрыСведений.КТС_ОплатыПринятыеВодителями.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.ДокументПоездки.Установить(ДокументПоездки);
		НаборЗаписей.Отбор.Партнер.Установить(Партнер);
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.СуммаОформлено = Сумма;
		
		Попытка
		    НаборЗаписей.Записать();					
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	
	КонецЦикла;
	
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Партнер			КАК Партнер,
	               |	Валюта			КАК Валюта,
	               |	СуммаОформлено 	КАК СуммаОформлено
	               |ПОМЕСТИТЬ ПринятыеОплаты
	               |ИЗ
	               |	РегистрСведений.КТС_ОплатыПринятыеВодителями
	               |ГДЕ
	               |	ДокументПоездки = &ДокументПоездки
	               |	И Партнер = &Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Валюта			 КАК Валюта,
	               |	Курс / Кратность КАК Курс
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПринятыеОплаты.Партнер	КАК Партнер,
	               |	Сумма(ВЫБОР
	               |		КОГДА ПринятыеОплаты.Валюта = &ВалютаУпр
	               |			ТОГДА ПринятыеОплаты.СуммаОформлено
	               |		ИНАЧЕ ПринятыеОплаты.СуммаОформлено * (КурсыВалютОплат.Курс / КурсыВалютУпр.Курс)
	               |	КОНЕЦ) 					КАК СуммаОплаты
	               |ПОМЕСТИТЬ ОплатыПартнеровУпр
	               |ИЗ
	               |	ПринятыеОплаты КАК ПринятыеОплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОплат
	               |		ПО ПринятыеОплаты.Валюта = КурсыВалютОплат.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
	               |		ПО (КурсыВалютУпр.Валюта = &ВалютаУпр)
				   |СГРУППИРОВАТЬ ПО
				   |	ПринятыеОплаты.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоездкаЗаМаршрутомФинансы.ДокументПоездки				КАК ДокументПоездки,
	               |	ПоездкаЗаМаршрутомФинансы.Партнер						КАК Партнер,
	               |	ПоездкаЗаМаршрутомФинансы.Порядок						КАК Порядок,
	               |	ПоездкаЗаМаршрутомФинансы.СуммаУчета					КАК СуммаУчета,
	               |	ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем		КАК СуммаПолученнаяВодителем,
	               |	ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером	КАК СуммаНазначеннаяМенеджером,
	               |	ЕСТЬNULL(ОплатыПартнеровУпр.СуммаОплаты, 0) 			КАК СуммаПоФакту
	               |ИЗ
	               |	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПартнеровУпр КАК ОплатыПартнеровУпр
	               |		ПО ПоездкаЗаМаршрутомФинансы.Партнер = ОплатыПартнеровУпр.Партнер
	               |ГДЕ
	               |	ПоездкаЗаМаршрутомФинансы.ДокументПоездки = &ДокументПоездки
	               |	И ПоездкаЗаМаршрутомФинансы.Партнер = &Партнер";
				   
	Запрос.УстановитьПараметр("ДокументПоездки", 	ДокументПоездки);
	Запрос.УстановитьПараметр("Партнер", 			Партнер);
	Запрос.УстановитьПараметр("ВалютаУпр", 			Константы.ВалютаУправленческогоУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;

	Блокировка 							= Новый БлокировкаДанных;
	ЭлементБлокировки   				= Блокировка.Добавить("РегистрСведений.ПоездкаЗаМаршрутомФинансы");
	ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных    = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументПоездки", 	"ДокументПоездки");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партнер", 			"Партнер");
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутомФинансы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПоездки.Установить(ДокументПоездки);
		НаборЗаписей.Отбор.Партнер.Установить(Партнер);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Попытка
		    НаборЗаписей.Записать();					
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции




// Печать

Функция ПолучитьМаршрутныйЛист(ДокументПоездки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент 	= Новый ТабличныйДокумент;
	
	Макет 			= ПолучитьМакет("ПФ_MXL_МакетМаршрутныйЛист");	
	ОблЗаголок		= Макет.ПолучитьОбласть("Заголовок");
	ОблПолучатель   = Макет.ПолучитьОбласть("Строка|Получатель");
	ОблОтправитель  = Макет.ПолучитьОбласть("Строка|Отправитель");
	ОблМесто	    = Макет.ПолучитьОбласть("Место|Места");
	ОблКомментарий  = Макет.ПолучитьОбласть("Место|Комментарий");
	ОблПодпись	    = Макет.ПолучитьОбласть("Подпись");
	ОблДата		    = Макет.ПолучитьОбласть("Дата");
	ОблЗадача		= Макет.ПолучитьОбласть("Место");
	
	ОблДата.Параметры.Дата 		= ТекущаяДата();
	ОблДата.Параметры.Маршрут 	= ДокументПоездки.ВариантМаршрута;
	ТабДокумент.Вывести(ОблДата);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаМаршрутныйЛист();
	
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументПоездки);
	
	РезультатыЗапроса 	= Запрос.ВыполнитьПакет();
	
	ВыборкаАбоненты		= РезультатыЗапроса[3].Выбрать();
	ТаблицаМеста		= РезультатыЗапроса[4].Выгрузить();
	ТаблицаТелефоны		= РезультатыЗапроса[5].Выгрузить();
	ТаблицаЗадачПовтор	= РезультатыЗапроса[6].Выгрузить();
	ТаблицаЗадач		= РезультатыЗапроса[7].Выбрать();
	
	МакетСтрокиАбонента = НСтр("%1 %2 %3 %4 %5", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ТабДокумент.Вывести(ОблЗаголок);
	
	Пока ВыборкаАбоненты.Следующий() Цикл
		
		СтрокаМаршрутногоЛиста = Новый ТабличныйДокумент;
		
		СтруктураПоиска 	= Новый Структура("Ссылка", ВыборкаАбоненты.Отправитель);
		НайденныеСтроки 	= ТаблицаТелефоны.НайтиСтроки(СтруктураПоиска);
		ТелефоныОтправителя = "";
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл		
			ТелефоныОтправителя = ТелефоныОтправителя + ?(ПустаяСтрока(ТелефоныОтправителя), "", Символы.ПС);
			ТелефоныОтправителя = ТелефоныОтправителя + НайденнаяСтрока.Телефон;
		КонецЦикла; 
		
		ТекстОтправитель = Строка(ВыборкаАбоненты.Отправитель);
		
		Если Не ПустаяСтрока(ВыборкаАбоненты.АдресОтправителя) Тогда
			ТекстОтправитель = ТекстОтправитель + Символы.ПС + ВыборкаАбоненты.АдресОтправителя;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТелефоныОтправителя) Тогда
			ТекстОтправитель = ТекстОтправитель + Символы.ПС + ТелефоныОтправителя;
		КонецЕсли;
		
		ОблОтправитель.Параметры.Отправитель = ТекстОтправитель;
		
		СтрокаМаршрутногоЛиста.Присоединить(ОблОтправитель);
		
		
		СтруктураПоиска 	= Новый Структура("Ссылка", ВыборкаАбоненты.Получатель);
		НайденныеСтроки 	= ТаблицаТелефоны.НайтиСтроки(СтруктураПоиска);
		ТелефоныПолучателя  = "";
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл		
			ТелефоныПолучателя = ТелефоныПолучателя + ?(ПустаяСтрока(ТелефоныПолучателя), "", Символы.ПС);
			ТелефоныПолучателя = ТелефоныПолучателя + НайденнаяСтрока.Телефон;
		КонецЦикла; 
		
		ТекстПолучатель = Строка(ВыборкаАбоненты.Получатель);
		
		Если Не ПустаяСтрока(ВыборкаАбоненты.АдресПолучателя) Тогда
			ТекстПолучатель = ТекстПолучатель + Символы.ПС + ВыборкаАбоненты.АдресПолучателя;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТелефоныПолучателя) Тогда
			ТекстПолучатель = ТекстПолучатель + Символы.ПС + ТелефоныПолучателя;
		КонецЕсли;
		
		ОблПолучатель.Параметры.Получатель = ТекстПолучатель;
																				
		СтрокаМаршрутногоЛиста.Присоединить(ОблПолучатель);
		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Отправитель", 	  ВыборкаАбоненты.Отправитель);
		СтруктураПоиска.Вставить("Получатель",  	  ВыборкаАбоненты.Получатель);
		СтруктураПоиска.Вставить("АдресОтправителя",  ВыборкаАбоненты.АдресОтправителя);
		СтруктураПоиска.Вставить("АдресПолучателя",   ВыборкаАбоненты.АдресПолучателя);
		
		НайденныеСтроки = ТаблицаМеста.НайтиСтроки(СтруктураПоиска);
		Места 			= Новый ТабличныйДокумент;
		НомерМеста		= 1;
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ОблМесто.Параметры.НомерМеста = НомерМеста; 
			ОблМесто.Параметры.КодМеста	  = Число(НайденнаяСтрока.Код);
			Места.Вывести(ОблМесто);
			НомерМеста = НомерМеста + 1;
		КонецЦикла; 
		
		СтрокаМаршрутногоЛиста.Присоединить(Места);
		
		ОблКомментарий.Параметры.Комментарий = "";
		
		Если ВыборкаАбоненты.СуммаУпр > 0 Тогда
			Комментарий 							= НСтр("ru='Необходимо забрать %1 USD (%2 грн)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОблКомментарий.Параметры.Комментарий 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОблКомментарий, ВыборкаАбоненты.СуммаУпр, ВыборкаАбоненты.СуммаРег);
		КонецЕсли;
		
		СтрокаМаршрутногоЛиста.Присоединить(ОблКомментарий);
				
		ОбластьКомментарий = СтрокаМаршрутногоЛиста.Область(1, 7, НомерМеста-1, 7);
		ОбластьКомментарий.Объединить();
		
		//ТабДокумент.Вывести(СтрокаМаршрутногоЛиста);
		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Отправитель", 	  ВыборкаАбоненты.Отправитель);
		СтруктураПоиска.Вставить("Получатель",  	  ВыборкаАбоненты.Получатель);
		СтруктураПоиска.Вставить("АдресОтправителя",  ВыборкаАбоненты.АдресОтправителя);
		СтруктураПоиска.Вставить("АдресПолучателя",   ВыборкаАбоненты.АдресПолучателя);
		
		НайденныеСтроки = ТаблицаЗадачПовтор.НайтиСтроки(СтруктураПоиска);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			//СтрокаЗадачи = Новый ТабличныйДокумент;
			
			ОблЗадача.Параметры.НомерМеста 		= НомерМеста; 
			ОблЗадача.Параметры.КодМеста	  	= Число(НайденнаяСтрока.Код);			
			ОблЗадача.Параметры.Комментарий 	= НайденнаяСтрока.ТекстЗадачи;
			
			СтрокаМаршрутногоЛиста.Вывести(ОблЗадача);  
			
			ОбластьКЗакраске 		  = СтрокаМаршрутногоЛиста.Область(НомерМеста,1,НомерМеста,7);
			ОбластьКЗакраске.ЦветФона = Новый Цвет(220,220,220);
			
			НомерМеста = НомерМеста + 1;			
		КонецЦикла; 
		
		ОбластьОтправитель = СтрокаМаршрутногоЛиста.Область(1, 1, НомерМеста-1, 1);
		ОбластьОтправитель.Объединить();
		
		ОбластьПолучатель = СтрокаМаршрутногоЛиста.Область(1, 2, НомерМеста-1, 2);
		ОбластьПолучатель.Объединить();
		
		Если ТабДокумент.ПроверитьВывод(СтрокаМаршрутногоЛиста) Тогда
			ТабДокумент.Вывести(СтрокаМаршрутногоЛиста);
		Иначе
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(СтрокаМаршрутногоЛиста);
		КонецЕсли;
	
	КонецЦикла; 
	
	Пока ТаблицаЗадач.Следующий() Цикл
	
		СтрокаМаршрутногоЛиста = Новый ТабличныйДокумент;
		
		СтруктураПоиска 	= Новый Структура("Ссылка", ТаблицаЗадач.Отправитель);
		НайденныеСтроки 	= ТаблицаТелефоны.НайтиСтроки(СтруктураПоиска);
		ТелефоныОтправителя = "";
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл		
			ТелефоныОтправителя = ТелефоныОтправителя + ?(ПустаяСтрока(ТелефоныОтправителя), "", Символы.ПС);
			ТелефоныОтправителя = ТелефоныОтправителя + НайденнаяСтрока.Телефон;
		КонецЦикла; 
		
		ТекстОтправитель = Строка(ТаблицаЗадач.Отправитель);
		
		Если Не ПустаяСтрока(ТаблицаЗадач.АдресОтправителя) Тогда
			ТекстОтправитель = ТекстОтправитель + Символы.ПС + ВыборкаАбоненты.АдресОтправителя;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТелефоныОтправителя) Тогда
			ТекстОтправитель = ТекстОтправитель + Символы.ПС + ТелефоныОтправителя;
		КонецЕсли;
		
		ОблОтправитель.Параметры.Отправитель = ТекстОтправитель;
		
		СтрокаМаршрутногоЛиста.Присоединить(ОблОтправитель);
		
		
		СтруктураПоиска 	= Новый Структура("Ссылка", ТаблицаЗадач.Получатель);
		НайденныеСтроки 	= ТаблицаТелефоны.НайтиСтроки(СтруктураПоиска);
		ТелефоныПолучателя  = "";
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл		
			ТелефоныПолучателя = ТелефоныПолучателя + ?(ПустаяСтрока(ТелефоныПолучателя), "", Символы.ПС);
			ТелефоныПолучателя = ТелефоныПолучателя + НайденнаяСтрока.Телефон;
		КонецЦикла; 
		
		ТекстПолучатель = Строка(ТаблицаЗадач.Получатель);
		
		Если Не ПустаяСтрока(ТаблицаЗадач.АдресПолучателя) Тогда
			ТекстПолучатель = ТекстПолучатель + Символы.ПС + ВыборкаАбоненты.АдресПолучателя;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТелефоныПолучателя) Тогда
			ТекстПолучатель = ТекстПолучатель + Символы.ПС + ТелефоныПолучателя;
		КонецЕсли;
		
		ОблПолучатель.Параметры.Получатель = ТекстПолучатель;
																				
		СтрокаМаршрутногоЛиста.Присоединить(ОблПолучатель);
		
		ОблМесто.Параметры.НомерМеста 	= 1; 
		ОблМесто.Параметры.КодМеста	  	= Число(ТаблицаЗадач.Код);
		
		СтрокаМаршрутногоЛиста.Присоединить(ОблМесто);
		
		ОблКомментарий.Параметры.Комментарий = ТаблицаЗадач.ТекстЗадачи;
		
		СтрокаМаршрутногоЛиста.Присоединить(ОблКомментарий);	  
			
		ОбластьКЗакраске 		  = СтрокаМаршрутногоЛиста.Область(1,1,1,7);
		ОбластьКЗакраске.ЦветФона = Новый Цвет(220,220,220);
		
		Если ТабДокумент.ПроверитьВывод(СтрокаМаршрутногоЛиста) Тогда
			ТабДокумент.Вывести(СтрокаМаршрутногоЛиста);
		Иначе
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(СтрокаМаршрутногоЛиста);
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат ТабДокумент;

КонецФункции // ПолучитьМаршрутныйЛист()

Функция ПолучитьДокументыВодителю(ДокументПоездки, БанковскийСчет) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент			= Новый ТабличныйДокумент;	
	
	Макет 				= ПолучитьМакет("ПФ_MXL_ВидатковаНакладна_Перемещение");
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик    = Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель   = Макет.Получитьобласть("Покупатель");
	ОбластьШапка   		= Макет.Получитьобласть("ШапкаТаблицыПеремещения");
	ОбластьСтрока		= Макет.Получитьобласть("СтрокаТаблицыПеремещения");
	ОбластьПодвал		= Макет.Получитьобласть("ПодвалТаблицыПеремещения");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаДокументыВодителю();
	
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументПоездки);
	
	ВыборкаПолучатель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПолучатель.Следующий() Цикл
				
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокументаВодителю(ВыборкаПолучатель);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПоставщик.Параметры.ПредставлениеПоставщика = БанковскийСчет.ТекстКорреспондента;
		ТабДокумент.Вывести(ОбластьПоставщик);
		
		ОбластьПокупатель.Параметры.Адрес = ВыборкаПолучатель.АдресДоставки;
		ОбластьПокупатель.Параметры.ПредставлениеПолучателя = Строка(ВыборкаПолучатель.Получатель);
		ТабДокумент.Вывести(ОбластьПокупатель);
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		ВыборкаДетальныеЗаписи = ВыборкаПолучатель.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ТабДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПолучатель);
		ТабДокумент.Вывести(ОбластьПодвал);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;

КонецФункции // ПолучитьДокументыВодителю()
 
 
#КонецОбласти
 
 

#Область СлужебныеПроцедурыИФункции

// Тексты запросов

Функция ПолучитьТекстЗапросаРасписаниеВыездов()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Календарь 				КАК Календарь,
			|	ДатаГрафика 			КАК Дата,
			|	ДЕНЬНЕДЕЛИ(ДатаГрафика) КАК ДеньНедели
			|ПОМЕСТИТЬ КалендарныйГрафик
			|ИЗ
			|	РегистрСведений.КалендарныеГрафики
			|ГДЕ
			|	Календарь = ВЫРАЗИТЬ(&Маршрут КАК Справочник.ВариантыМаршрутов).КалендарьМаршрута
			|	И Год = ГОД(&ДатаОтправки)
			|	И ДатаГрафика = НАЧАЛОПЕРИОДА(&ДатаОтправки, ДЕНЬ)
			|	И ДеньВключенВГрафик
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КалендарныйГрафик.Календарь КАК Календарь,
			|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныйГрафик.Дата, ЧАС, ЧАС(РасписаниеРаботы.ВремяОкончания)), МИНУТА, МИНУТА(РасписаниеРаботы.ВремяОкончания)), СЕКУНДА, СЕКУНДА(РасписаниеРаботы.ВремяОкончания)) КАК ВремяВыезда
			|ПОМЕСТИТЬ РасписаниеОтгрузок
			|ИЗ
			|	Справочник.Календари.РасписаниеРаботы КАК РасписаниеРаботы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалендарныйГрафик КАК КалендарныйГрафик
			|		ПО РасписаниеРаботы.Ссылка = КалендарныйГрафик.Календарь
			|			И РасписаниеРаботы.НомерДня = КалендарныйГрафик.ДеньНедели
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Водитель		КАК Водитель,
			|	ВремяОтправки 	КАК ВремяОтправки
			|ПОМЕСТИТЬ РасписаниеВыездов
			|ИЗ
			|	РегистрСведений.КТС_ВыездыВодителей.СрезПоследних(, 
			|								ВремяОтправки В 
			|									(ВЫБРАТЬ 
			|										ВремяВыезда 
			|									 ИЗ РасписаниеОтгрузок))
			|ГДЕ
			|	ВариантМаршрута = &Маршрут
			|;

			|//////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасписаниеОтгрузок.ВремяВыезда КАК ВремяВыезда,
			|	РасписаниеОтгрузок.ВремяВыезда КАК ДатаВыезда,
			|	КТС_ВыездыВодителей.ВремяОтправки,
			|	ЕСТЬNULL(КТС_ВыездыВодителей.Водитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Водитель
			|ИЗ
			|	РасписаниеОтгрузок КАК РасписаниеОтгрузок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РасписаниеВыездов КАК КТС_ВыездыВодителей
			|		ПО РасписаниеОтгрузок.ВремяВыезда = КТС_ВыездыВодителей.ВремяОтправки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТеастЗапросаРасписаниеВыездов()

Функция ПолучитьТекстЗапросаСписокПеремещений(ТолькоТранзит)

	ТекстЗапроса = "ВЫБРАТЬ
					|	ДокументПоступления КАК ДокументПоступления
					|ПОМЕСТИТЬ СписокДокументов
					|ИЗ
					|	РегистрНакопления.ТоварыКПоступлению.Остатки(
					|			,
					|			ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
					|				И Склад = &Склад)
					|;
                    |
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СписокДокументов.ДокументПоступления КАК Документ,
					|	ВЫБОР
					|		КОГДА ЕСТЬNULL(ОбеспечениеЗаказов.Назначение, 0) = 0
					|			ТОГДА 1
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК ТранзитноеПеремещение,
					|	ПРЕДСТАВЛЕНИЕ(СписокДокументов.ДокументПоступления) КАК Представление,
					|	ЕСТЬNULL(ОбеспечениеЗаказов.Назначение.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)) КАК ЗаказНаПеремещение
					|ИЗ
					|	СписокДокументов КАК СписокДокументов
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
					|		ПО ОбеспечениеЗаказов.Регистратор = СписокДокументов.ДокументПоступления
					|%1
					|
					|УПОРЯДОЧИТЬ ПО
					|	СписокДокументов.ДокументПоступления.Дата";
					
	Если ТолькоТранзит Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "ГДЕ ЕСТЬNULL(ОбеспечениеЗаказов.Назначение, 0) <> 0");
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокПеремещений()

Функция ПолучитьТекстЗапросаСписокНоменклатурыПеремещений()

	ТекстЗапроса = "ВЫБРАТЬ
					|	Номенклатура КАК Номенклатура,
					|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ВЫБОР
					|		КОГДА КПоступлениюОстаток - ПринимаетсяОстаток > 0
					|			ТОГДА КПоступлениюОстаток - ПринимаетсяОстаток
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК Количество
					|ИЗ
					|	РегистрНакопления.ТоварыКПоступлению.Остатки(
					|			,
					|			ДокументПоступления = &Документ
					|				И Склад = &Склад)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокНоменклатурыПеремещений()

Функция ПолучитьТекстЗапросаГрафическаяСхема()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ДокументыМест
	               |ИЗ
	               |	Документ.РасходныйОрдерНаТовары 
	               |ГДЕ
	               |	Распоряжение = &Документ
	               |	И НЕ ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Ссылка
	               |ИЗ
	               |	Документ.КТС_ОтгрузкаТоваров
				   |ГДЕ
	               |	Распоряжение = &Документ
	               |	И НЕ ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МестаПоДокументам.Место КАК Место
	               |ПОМЕСТИТЬ Места
	               |ИЗ
	               |	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыМест КАК ДокументыМест
	               |		ПО МестаПоДокументам.Документ = ДокументыМест.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ 
				   |	ПРЕДСТАВЛЕНИЕ(Место) КАК НаименованиеМеста
				   |ИЗ
				   |	Места
				   |;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаГрафическаяСхема()

Функция ПолучитьТекстЗапросаСписокЗадач(ТолькоТранзит)

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Ссылка 			КАК Задача,
	               |	Представление 	КАК ПредставлениеЗадачи,
				   |	ВЫБОР Транзит
				   |		КОГДА ИСТИНА 
				   |			ТОГДА 0
				   |		ИНАЧЕ 1
				   |	КОНЕЦ КАК ТранзитнаяЗадача
				   |ПОМЕСТИТЬ СписокЗадач
	               |ИЗ
	               |	Справочник.МестаДоставки
	               |ГДЕ
				   |	НЕ Архивный
				   |	И НЕ ПометкаУдаления
				   |	%1
				   |;
				   |
				   |ВЫБРАТЬ
				   |	Период 			КАК Период,
				   |	Место 			КАК Задача,
				   |	СтатусОтгрузки  КАК СтатусОтгрузки
				   |ПОМЕСТИТЬ ПериодыМест
				   |ИЗ
				   |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место В (ВЫБРАТЬ Задача ИЗ СписокЗадач))
				   |;
				   |
				   |ВЫБРАТЬ
				   |	МАКСИМУМ(Период) КАК Период,
				   |	Задача			 КАК Задача
				   |ПОМЕСТИТЬ МаксимальныеПериоды
				   |ИЗ
				   |	ПериодыМест
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	Задача
				   |;
				   |
				   |ВЫБРАТЬ
				   |	ПериодыМест.Задача 			КАК Задача,
				   |	ПериодыМест.СтатусОтгрузки  КАК СтатусОтгрузки
				   |ПОМЕСТИТЬ СтатусыМест
				   |ИЗ
				   |	ПериодыМест КАК ПериодыМест
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеПериоды КАК МаксимальныеПериоды
				   |		ПО ПериодыМест.Период 	 = МаксимальныеПериоды.Период
				   |			И ПериодыМест.Задача = МаксимальныеПериоды.Задача
				   |;
				   |
				   |ВЫБРАТЬ
				   |	СписокЗадач.Задача 				КАК Задача,
				   |	СписокЗадач.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
				   |	СписокЗадач.ТранзитнаяЗадача	КАК ТранзитнаяЗадача
				   |ИЗ
				   |	СписокЗадач КАК СписокЗадач
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатусыМест КАК СтатусыМест
				   |		ПО СписокЗадач.Задача = СтатусыМест.Задача
				   |ГДЕ
				   |	СтатусыМест.СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения))
				   |";
				   
	Если ТолькоТранзит Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "И ТранзитныйСклад = &Склад И Транзит");			   
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "И (ТранзитныйСклад = &Склад ИЛИ Владелец = &Склад)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокЗадач()

Функция ПолучитьТекстЗапросаГрафическаяСхемаЗадач()

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПРЕДСТАВЛЕНИЕ(Отправитель) КАК СкладОтправитель
	               |ИЗ
	               |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Задача)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаГрафическаяСхемаЗадач()

Функция ПолучитьТекстЗапросаСписокДокументов(ВариантМаршрута)

	ТекстЗапроса = "ВЫБРАТЬ
				|	Ссылка 							КАК Ссылка,
				|	Представление 					КАК Представление,
				|	Водитель.Представление 			КАК Водитель,
				|	ВариантМаршрута.Представление 	КАК Маршрут,
				|	СтатусПоездки 					КАК Статус,
				|	ВидПоездки						КАК ВидПоездки,
				|	ВЫБОР СтатусПоездки
				|		КОГДА ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
				|			ТОГДА 0
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК Приоритет
				|ИЗ
				|	Документ.ПоездкаЗаМаршрутом 
				|ГДЕ
				|	НАЧАЛОПЕРИОДА(Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
				|	И Проведен
				|	%ОтборПомаршруту%
				|УПОРЯДОЧИТЬ ПО
				|	МоментВремени";
				
	Если ЗначениеЗаполнено(ВариантМаршрута) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПомаршруту%", "И ВариантМаршрута = &ВариантМаршрута");			
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПомаршруту%", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокДокументов()

Функция ПолучитьТекстЗапросаМестаВПоездке()

	ТекстЗапроса = "ВЫБРАТЬ
				|	МестоДоставки КАК Ссылка,
				|	МестоДоставки.Представление КАК Представление,
				|	ВЫБОР
				|		КОГДА Owner ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(Owner КАК Справочник.Партнеры).Представление
				|		КОГДА Owner ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(Owner КАК Справочник.Склады).Представление
				|	КОНЕЦ КАК Получатель,
				|	ВЫБОР
				|		КОГДА Отправитель ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры).Представление
				|		КОГДА Отправитель ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(Отправитель КАК Справочник.Склады).Представление
				|	КОНЕЦ КАК Отправитель,
				|	ВЫБОР
				|		КОГДА МестоДоставки.ЭтоЗадача
				|			ТОГДА 7
				|		ИНАЧЕ 6
				|	КОНЕЦ КАК КартинкаСтроки,
				|	ВЫБОР МестоДоставки.ЭтоЗадача
				|		КОГДА ЛОЖЬ
				|			ТОГДА
				|				ВЫБОР
				|					КОГДА ОтгруженоПартнеру <> &ПустаяДата
				|						ТОГДА ИСТИНА
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		ИНАЧЕ
				|				ВЫБОР
				|					КОГДА ЗадачаВыполнена <> &ПустаяДата
				|						ТОГДА ИСТИНА
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|	КОНЕЦ КАК Доступность,
				|	ВЫБОР
				|		КОГДА РазукомплектованиеНаСкладе <> &ПустаяДата
				|			ТОГДА ""Разукомплектовано""
				|		КОГДА ОтгруженоПартнеру <> &ПустаяДата
				|			ТОГДА ""Отгружено партнеру""
				|		КОГДА ПогруженоВМашину <> &ПустаяДата
				|			ТОГДА ""Погружено в машину""
				|		КОГДА КомплектацияЗавершена <> &ПустаяДата
				|			ТОГДА ""Укомплектовано""
				|		КОГДА ЗадачаОтменена <> &ПустаяДата
				|			ТОГДА ""Задача отменена""
				|		КОГДА ЗадачаВыполнена <> &ПустаяДата
				|			ТОГДА ""Задача выполнена""
				|		КОГДА ЗадачаВПроцессеВыполнения <> &ПустаяДата
				|			ТОГДА ""Задача выполняется""
				|		КОГДА ЗадачаПоставлена <> &ПустаяДата
				|			ТОГДА ""Задача поставлена""
				|	КОНЕЦ КАК СтатусМеста,
				|	ВЫБОР
				|		КОГДА РазукомплектованиеНаСкладе <> &ПустаяДата
				|			ТОГДА 2
				|		КОГДА ОтгруженоПартнеру <> &ПустаяДата
				|			ТОГДА 3
				|		КОГДА ПогруженоВМашину <> &ПустаяДата
				|			ТОГДА 1
				|		КОГДА КомплектацияЗавершена <> &ПустаяДата
				|			ТОГДА 0
				|		КОГДА ЗадачаОтменена <> &ПустаяДата
				|			ТОГДА 2
				|		КОГДА ЗадачаВыполнена <> &ПустаяДата
				|			ТОГДА 3
				|		КОГДА ЗадачаВПроцессеВыполнения <> &ПустаяДата
				|			ТОГДА 1
				|		КОГДА ЗадачаПоставлена <> &ПустаяДата
				|			ТОГДА 0
				|	КОНЕЦ КАК Сортировка
				|ИЗ
				|	РегистрСведений.ПоездкаЗаМаршрутом
				|ГДЕ
				|	ДокументПоездки = &ДокументПоездки
				|	И НЕ ИсключеноИзДоставки

				|УПОРЯДОЧИТЬ ПО
				|	МестоДоставки.ЭтоЗадача ВОЗР,
				|	Сортировка				ВОЗР,
				|	Отправитель				ВОЗР,
				|	Получатель				ВОЗР,
				|	Представление			ВОЗР";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаМестаВПоездке()

Функция ПолучитьТекстЗапросаМестаБезПоездки(ВариантМаршрута)
                    
	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	ОтгрузкаМестСрезПоследних.Период КАК Дата,
				|	ОтгрузкаМестСрезПоследних.Место КАК Ссылка,
				|	ОтгрузкаМестСрезПоследних.Место.Представление КАК Представление,
				|	ОтгрузкаМестСрезПоследних.Склад.Представление КАК Отправитель,
				|	ВЫБОР
				|		КОГДА ОтгрузкаМестСрезПоследних.Место.Владелец ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(ОтгрузкаМестСрезПоследних.Место.Владелец КАК Справочник.Склады).Представление
				|		КОГДА ОтгрузкаМестСрезПоследних.Место.Владелец ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(ОтгрузкаМестСрезПоследних.Место.Владелец КАК Справочник.Партнеры).Представление
				|	КОНЕЦ КАК Получатель,
				|	ОтгрузкаМестСрезПоследних.ВариантМаршрута.Представление КАК Маршрут
				|ПОМЕСТИТЬ ВсеМеста
				|ИЗ
				|	РегистрСведений.ОтгрузкаМест.СрезПоследних КАК ОтгрузкаМестСрезПоследних
				|ГДЕ
				|	ОтгрузкаМестСрезПоследних.СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
				|	И ОтгрузкаМестСрезПоследних.ВариантМаршрута = &ВариантМаршрута
				|	И НЕ ОтгрузкаМестСрезПоследних.Место.Архивный

				|ОБЪЕДИНИТЬ 

				|ВЫБРАТЬ
				|	ЗадачиНаМаршрутСрезПоследних.Период,
				|	ЗадачиНаМаршрутСрезПоследних.Место,
				|	ЗадачиНаМаршрутСрезПоследних.Место.Представление,
				|	ВЫБОР
				|		КОГДА ЗадачиНаМаршрутСрезПоследних.Отправитель ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПоследних.Отправитель КАК Справочник.Склады).Представление
				|		КОГДА ЗадачиНаМаршрутСрезПоследних.Отправитель ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПоследних.Отправитель КАК Справочник.Партнеры).Представление
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА ЗадачиНаМаршрутСрезПоследних.Место.Владелец ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПоследних.Место.Владелец КАК Справочник.Склады).Представление
				|		КОГДА ЗадачиНаМаршрутСрезПоследних.Место.Владелец ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПоследних.Место.Владелец КАК Справочник.Партнеры).Представление
				|	КОНЕЦ,
				|	ЗадачиНаМаршрутСрезПоследних.ВариантМаршрута.Представление
				|ИЗ
				|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место.Транзит = ЛОЖЬ) КАК ЗадачиНаМаршрутСрезПоследних
				|ГДЕ
				|	ЗадачиНаМаршрутСрезПоследних.СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
				|	И ЗадачиНаМаршрутСрезПоследних.ВариантМаршрута = &ВариантМаршрута
				|	И НЕ ЗадачиНаМаршрутСрезПоследних.Место.Архивный

				|ОБЪЕДИНИТЬ 

				|ВЫБРАТЬ
				|	ЗадачиНаМаршрутСрезПоследних.Период,
				|	ЗадачиНаМаршрутСрезПоследних.Место,
				|	ЗадачиНаМаршрутСрезПоследних.Место.Представление,
				|	ВЫБОР
				|		КОГДА ЗадачиНаМаршрутСрезПоследних.Отправитель ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПоследних.Отправитель КАК Справочник.Склады).Представление
				|		КОГДА ЗадачиНаМаршрутСрезПоследних.Отправитель ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПоследних.Отправитель КАК Справочник.Партнеры).Представление
				|	КОНЕЦ,
				|	ЗадачиНаМаршрутСрезПоследних.Место.ТранзитныйСклад,
				|	ЗадачиНаМаршрутСрезПоследних.ВариантМаршрута.Представление
				|ИЗ
				|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место.Транзит = ИСТИНА) КАК ЗадачиНаМаршрутСрезПоследних
				|ГДЕ
				|	ЗадачиНаМаршрутСрезПоследних.СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
				|	И ЗадачиНаМаршрутСрезПоследних.ВариантМаршрута = &ВариантМаршрута
				|	И НЕ ЗадачиНаМаршрутСрезПоследних.Место.Архивный
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПоездкаЗаМаршрутом.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ СписокДокументов
				|ИЗ
				|	Документ.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
				|ГДЕ
				|	ПоездкаЗаМаршрутом.Проведен
				|	И ПоездкаЗаМаршрутом.ВариантМаршрута = &ВариантМаршрута
				|	И ПоездкаЗаМаршрутом.СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПоездкаЗаМаршрутом.МестоДоставки КАК Место
				|ПОМЕСТИТЬ МестаВПоездке
				|ИЗ
				|	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокДокументов КАК СписокДокументов
				|		ПО ПоездкаЗаМаршрутом.ДокументПоездки = СписокДокументов.Ссылка
				|			И (НЕ ПоездкаЗаМаршрутом.ИсключеноИзДоставки)
				|			И (НЕ ПоездкаЗаМаршрутом.Архивное)
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВсеМеста.Дата КАК Дата,
				|	ВсеМеста.Ссылка КАК Ссылка,
				|	ВсеМеста.Представление КАК Представление,
				|	ВсеМеста.Отправитель КАК Отправитель,
				|	ВсеМеста.Получатель КАК Получатель,
				|	ВсеМеста.Маршрут КАК Маршрут,
				|	ВЫБОР
				|		КОГДА ВсеМеста.Ссылка.ЭтоЗадача
				|			ТОГДА 7
				|		ИНАЧЕ 6
				|	КОНЕЦ КАК КартинкаСтроки
				|ИЗ
				|	ВсеМеста КАК ВсеМеста
				|ГДЕ
				|	НЕ ВсеМеста.Ссылка В
				|				(ВЫБРАТЬ
				|					МестаВПоездке.Место
				|				ИЗ
				|					МестаВПоездке)
				|
				|УПОРЯДОЧИТЬ ПО
				|	КартинкаСтроки,
				|	Отправитель,
				|	Получатель";
				 
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаМестаБезПоездки()

Функция ПолучитьТекстЗапросаДобавленияВПоездку()

	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Ссылка 			КАК Склад,
				   |	Представление   КАК АдресСклада
				   |ПОМЕСТИТЬ СписокСкладов
				   |ИЗ
				   |	Справочник.Склады.КонтактнаяИнформация
				   |ГДЕ
				   |	НЕ Ссылка.ЭтоГруппа
				   |	И НЕ Ссылка.ПометкаУдаления
				   |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
				   |	И Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
				   |;
				   |
				   // Отбираем задачи для переноса в документ только из статусом ЗадачаПоставлена
				   |ВЫБРАТЬ
				   |	Место 			КАК Место,
				   |	ВариантМаршрута КАК ВариантМаршрута,
				   |	Отправитель     КАК Отправитель
				   |
				   |ПОМЕСТИТЬ СписокДоступныхЗадач
				   |ИЗ
	               |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место В (&МассивМест))
				   |ГДЕ
	               |	СтатусОтгрузки 	  = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
	               |	И ВариантМаршрута = &ВариантМаршрута
				   |;
				   |
				   // Отбираем места для переноса в документ только из статусом КомплектацияЗавершена
				   |ВЫБРАТЬ
				   |	СписокМест.Место 						  КАК Место,
				   |	СписокМест.ВариантМаршрута  			  КАК ВариантМаршрута,
				   |	ЕСТЬNULL(СписокСкладов.АдресСклада, """") КАК АдресОтправителя
				   |ПОМЕСТИТЬ СписокДоступныхМест
				   |ИЗ
				   |	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место В (&МассивМест)) СписокМест
				   |		ЛЕВОЕ СОЕДИНЕНИЕ СписокСкладов КАК СписокСкладов
				   |		ПО СписокМест.Склад = СписокСкладов.Склад
				   |ГДЕ
				   |	СписокМест.СтатусОтгрузки 	 = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
	               |	И СписокМест.ВариантМаршрута = &ВариантМаршрута
				   |;
				   |
				   |ВЫБРАТЬ
	               |	ЗадачиНаМаршрут.Период КАК Дата,
				   | 	&ДокументПоездки КАК ДокументПоездки,
				   | 	ЗадачиНаМаршрут.Место КАК Место,
				   | 	ЗадачиНаМаршрут.СтатусОтгрузки КАК СтатусОтгрузки,
				   | 	ЗадачиНаМаршрут.ВариантМаршрута КАК ВариантМаршрута,
				   | 	ЗадачиНаМаршрут.Отправитель КАК Отправитель,
				   | 	ЗадачиНаМаршрут.АдресОтправителя КАК АдресОтправителя,
				   | 	ЗадачиНаМаршрут.Пользователь КАК Пользователь,
				   | 	ВЫБОР
				   | 		КОГДА ЗадачиНаМаршрут.Место.Транзит
				   | 			ТОГДА ЗадачиНаМаршрут.Место.ТранзитныйСклад
				   | 		ИНАЧЕ ЗадачиНаМаршрут.Место.Владелец
				   | 	КОНЕЦ КАК Получатель,
				   | 	ВЫБОР
				   | 		КОГДА ЗадачиНаМаршрут.Место.Транзит
				   | 			ТОГДА ЕСТЬNULL(АдресТранзитногоСклада.АдресСклада, """")
				   | 		ИНАЧЕ ЗадачиНаМаршрут.Место.АдресДоставки
				   | 	КОНЕЦ КАК АдресПолучателя,
				   | 	ЗадачиНаМаршрут.Место.УникальныйИдентификатор КАК AssignedQRCode,
				   | 	ИСТИНА КАК ЭтоЗадача
				   | ПОМЕСТИТЬ СписокМест
				   | ИЗ
				   | 	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут
				   | 		
				   | ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокДоступныхЗадач КАК СписокДоступныхЗадач
				   | 	ЛЕВОЕ СОЕДИНЕНИЕ СписокСкладов КАК АдресТранзитногоСклада
				   | 	ПО СписокДоступныхЗадач.Место.ТранзитныйСклад = АдресТранзитногоСклада.Склад
				   | ПО ЗадачиНаМаршрут.Место = СписокДоступныхЗадач.Место
				   | И ЗадачиНаМаршрут.ВариантМаршрута = СписокДоступныхЗадач.ВариантМаршрута
				   | И ЗадачиНаМаршрут.Отправитель = СписокДоступныхЗадач.Отправитель
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	СписокМест.Период 					  	  КАК Дата,
				   |	&ДокументПоездки						  КАК ДокументПоездки,
				   |	СписокМест.Место						  КАК Место,
				   |	СписокМест.СтатусОтгрузки				  КАК СтатусОтгрузки,
				   |	СписокМест.ВариантМаршрута				  КАК ВариантМаршрута,
				   |	СписокМест.Склад						  КАК Отправитель,
				   |	СписокДоступныхМест.АдресОтправителя	  КАК АдресОтправителя,
				   |	СписокМест.Пользователь					  КАК Пользователь,
				   |	СписокМест.Место.Владелец 				  КАК Получатель,
	               |	СписокМест.Место.АдресДоставки 			  КАК АдресПолучателя,
				   |	""00000000-0000-0000-0000-000000000000""  КАК AssignedQRCode,	
				   |	ЛОЖЬ									  КАК ЭтоЗадача
				   |ИЗ
				   |	РегистрСведений.ОтгрузкаМест КАК СписокМест
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокДоступныхМест КАК СписокДоступныхМест
				   |		ПО СписокМест.Место 			 = СписокДоступныхМест.Место
				   |			И СписокМест.ВариантМаршрута = СписокДоступныхМест.ВариантМаршрута
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КТС_Гео.Ссылка 					КАК GeoОтправитель,
	               |	СписокМест.Отправитель			КАК Отправитель,
	               |	СписокМест.АдресОтправителя     КАК АдресОтправителя
	               |ПОМЕСТИТЬ GeoОтправителя
	               |ИЗ
	               |	СписокМест КАК СписокМест
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КТС_ГеографическиеРасположенияПартнеров КАК КТС_Гео
	               |		ПО СписокМест.Отправитель 			= КТС_Гео.Владелец
	               |			И СписокМест.АдресОтправителя 	= КТС_Гео.ГородСклад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КТС_Гео.Ссылка 				КАК GeoПолучатель,
	               |	СписокМест.Получатель		КАК Получатель,
	               |	СписокМест.АдресПолучателя	КАК АдресПолучателя
	               |ПОМЕСТИТЬ GeoПолучателей
	               |ИЗ
	               |	СписокМест КАК СписокМест
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КТС_ГеографическиеРасположенияПартнеров КАК КТС_Гео
	               |		ПО СписокМест.Получатель 			= КТС_Гео.Владелец
	               |			И СписокМест.АдресПолучателя 	= КТС_Гео.ГородСклад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокМест.Дата											КАК Дата,
	               |	СписокМест.ДокументПоездки								КАК ДокументПоездки,
	               |	СписокМест.Место										КАК Место,
	               |	СписокМест.СтатусОтгрузки								КАК СтатусОтгрузки,
	               |	СписокМест.ВариантМаршрута								КАК ВариантМаршрута,
	               |	СписокМест.Отправитель									КАК Отправитель,
	               |	СписокМест.АдресОтправителя								КАК АдресОтправителя,
	               |	СписокМест.Пользователь									КАК Пользователь,
	               |	СписокМест.Получатель									КАК Получатель,
	               |	СписокМест.АдресПолучателя								КАК АдресПолучателя,
				   |	СписокМест.ЭтоЗадача									КАК ЭтоЗадача,
				   |	СписокМест.AssignedQRCode								КАК AssignedQRCode,
	               |	ЕСТЬNULL(GeoОтправителя.GeoОтправитель, НЕОПРЕДЕЛЕНО) 	КАК GeoОтправитель,
	               |	ЕСТЬNULL(GeoПолучателей.GeoПолучатель, НЕОПРЕДЕЛЕНО) 	КАК GeoПолучатель
	               |ПОМЕСТИТЬ ЗадачиПредваритильные
	               |ИЗ
	               |	СписокМест КАК СписокМест
	               |		ЛЕВОЕ СОЕДИНЕНИЕ GeoОтправителя КАК GeoОтправителя
	               |		ПО СписокМест.Отправитель = GeoОтправителя.Отправитель
	               |			И СписокМест.АдресОтправителя = GeoОтправителя.АдресОтправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ GeoПолучателей КАК GeoПолучателей
	               |		ПО СписокМест.Получатель = GeoПолучателей.Получатель
	               |			И СписокМест.АдресПолучателя = GeoПолучателей.АдресПолучателя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Дата									КАК Дата,
	               |	ДокументПоездки							КАК ДокументПоездки,
	               |	Место 									КАК Место,
				   |	Место.Архивный							КАК Архивный,
				   |	Место.Код								КАК Код,
				   |	Место.ЗаполнятьУникальныйИдентификатор  КАК IsQRCodeScanningNeeded,
				   |	Место.ТекстЗадачи						КАК Comment,
	               |	СтатусОтгрузки							КАК СтатусОтгрузки,
	               |	ВариантМаршрута							КАК ВариантМаршрута,
	               |	Отправитель								КАК	Отправитель,
	               |	АдресОтправителя						КАК АдресОтправителя,
	               |	Пользователь							КАК Пользователь,
	               |	Получатель								КАК Получатель,
	               |	АдресПолучателя							КАК АдресПолучателя,
	               |	GeoОтправитель							КАК GeoОтправитель,
	               |	GeoПолучатель							КАК GeoПолучатель,
				   |	ЭтоЗадача								КАК ЭтоЗадача,
				   |	AssignedQRCode							КАК AssignedQRCode,
				   |	ВЫБОР
				   |		КОГДА Получатель ССЫЛКА Справочник.Партнеры
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ 				КАК ЭтоПартнер
	               |ИЗ
	               |	ЗадачиПредваритильные
	               |ИТОГИ ПО
	               |	Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Место				КАК Место,
	               |	ДокументПоездки		КАК ДокументПоездки
	               |ИЗ
	               |	ЗадачиПредваритильные";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДобавленияЗадачиВПоездку()

Функция ПолучитьТекстЗапросаИсключенияИзПоездки()

	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	Место  			КАК Место,
				   |	СтатусОтгрузки 	КАК Статус
				   |ПОМЕСТИТЬ СписокДоступныхМест
				   |ИЗ
	               |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место В (&МассивМест))
				   |ГДЕ
	               |	СтатусОтгрузки 	  <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена)
	               |	И ВариантМаршрута = &ВариантМаршрута
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Место  			КАК Место,
				   |	СтатусОтгрузки 	КАК Статус
				   |ИЗ
				   |	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место В (&МассивМест))
				   |ГДЕ
				   |	СтатусОтгрузки 	  <> ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ОтгруженоПартнеру)
	               |	И ВариантМаршрута = &ВариантМаршрута
				   |;
				   |
				   |ВЫБРАТЬ
				   |	Поездка.МестоДоставки 				КАК МестоДоставки,
				   |	Поездка.МестоДоставки.Код			КАК Код,
				   |	Поездка.ДокументПоездки 			КАК ДокументПоездки,
				   |	Поездка.Архивное 					КАК Архивное,
				   |	Поездка.ЭтоЗадача 					КАК ЭтоЗадача,
				   |	Поездка.МестоНеВыдано 				КАК МестоНеВыдано,
				   |	Поездка.НачалоКомплектации 			КАК НачалоКомплектации,
				   |	Поездка.КомплектацияЗавершена 		КАК КомплектацияЗавершена,
				   |	Поездка.ПогруженоВМашину 			КАК ПогруженоВМашину,
				   |	Поездка.ОтгруженоПартнеру 			КАК ОтгруженоПартнеру,
				   |	Поездка.РазукомплектованиеНаСкладе 	КАК РазукомплектованиеНаСкладе,
				   |	Поездка.ВозвращеноНаСклад 			КАК ВозвращеноНаСклад,
				   |	Поездка.ЗадачаПоставлена 			КАК ЗадачаПоставлена,
				   |	Поездка.ЗадачаВПроцессеВыполнения	КАК ЗадачаВПроцессеВыполнения,
				   |	Поездка.ЗадачаВыполнена 			КАК ЗадачаВыполнена,
				   |	Поездка.ЗадачаОтменена 				КАК ЗадачаОтменена,
				   |	Поездка.ИсключеноИзДоставки 		КАК ИсключеноИзДоставки,
				   |	Поездка.Owner 						КАК Owner,
				   |	Поездка.OwnerAdress 				КАК OwnerAdress,
				   |	Поездка.OwnerGeoGUID 				КАК OwnerGeoGUID,
				   |	Поездка.OwnerGeoLocation 			КАК OwnerGeoLocation,
				   |	Поездка.IsPartner 					КАК IsPartner,
				   |	Поездка.GUID 						КАК GUID,
				   |	Поездка.ManualCode 					КАК ManualCode,
				   |	Поездка.AssignedQRCode 				КАК AssignedQRCode,
				   |	Поездка.IsQRCodeScanningNeeded 		КАК IsQRCodeScanningNeeded,
				   |	Поездка.Author 						КАК Author,
				   |	Поездка.Comment 					КАК Comment,
				   |	Поездка.Отправитель 				КАК Отправитель,
				   |	Поездка.АдресОтправителя 			КАК АдресОтправителя,
				   |	Поездка.ОтправительGeoGUID 			КАК ОтправительGeoGUID,
				   |	Поездка.ОтправительGeoLocation 		КАК ОтправительGeoLocation,
				   |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(СписокДоступныхМест.Место, 0) = 0 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК РазрешитьИсключитьИзДоставки,
				   |	СписокДоступныхМест.Статус			КАК СтатусМеста
				   |ИЗ
				   |	РегистрСведений.ПоездкаЗаМаршрутом КАК Поездка
				   |		ЛЕВОЕ СОЕДИНЕНИЕ СписокДоступныхМест КАК СписокДоступныхМест
				   |		ПО Поездка.МестоДоставки = СписокДоступныхМест.Место
				   |ГДЕ
				   |	ДокументПоездки = &ДокументПоездки
				   |	И МестоДоставки В (&МассивМест)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИсключенияИзПоездки()

Функция ПолучитьТекстЗапросаСписокОплат()

	ТекстЗапроса = "ВЫБРАТЬ
				   |    Период						КАК Период,
	               |	Партнер						КАК Партнер,
	               |	Валюта						КАК Валюта,
	               |	Партнер.Представление		КАК ПартнерПредставление,
	               |	Валюта.Представление		КАК ВалютаПредставление,
	               |	СуммаПринято 				КАК СуммаПолученнаяВодителем,
	               |	СуммаОформлено				КАК СуммаПоФакту
	               |ИЗ
	               |	РегистрСведений.КТС_ОплатыПринятыеВодителями
	               |ГДЕ
	               |	ДокументПоездки = &ДокументПоездки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокОплат()

Функция ПолучитьТекстЗапросаИнформацияПоМесту()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Владелец 									КАК Получатель,
	               |	ВЫБОР
	               |		КОГДА Владелец ССЫЛКА Справочник.Склады
	               |			ТОГДА ВЫРАЗИТЬ(Владелец КАК Справочник.Склады).Представление
	               |		КОГДА Владелец ССЫЛКА Справочник.Партнеры
	               |			ТОГДА ВЫРАЗИТЬ(Владелец КАК Справочник.Партнеры).Представление
	               |	КОНЕЦ 										КАК ПолучательПредставление,
	               |	Код 										КАК Код,
	               |	АдресДоставки 								КАК АдресДоставки,
	               |	Архивный 									КАК Архивный,
	               |	ЗаказНаПеремещение 							КАК ЗаказНаПеремещение,
	               |	ЗаказНаПеремещение.Представление			КАК ЗаказНаПеремещениеПредставление,
	               |	Ответственный								КАК Ответственный,
	               |	Ответственный.Представление					КАК ОтветственныйПредставление,
	               |	ПолучательЧерезПеревозчика					КАК ПолучательЧерезПеревозчика,
	               |	ПолучательЧерезПеревозчика.Представление	КАК ПолучательЧерезПеревозчикаПредставление,
	               |	Транзит										КАК Транзит
				   |ИЗ
	               |	Справочник.МестаДоставки
	               |ГДЕ
	               |	Ссылка = &Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура				КАК Номенклатура,
	               |	Номенклатура.Представление	КАК НоменклатураПредставление,
	               |	Количество					КАК Количество
	               |ИЗ
	               |	РегистрСведений.МестаНоменклатуры
	               |ГДЕ
	               |	Место = &Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Период							КАК Период,
	               |	Склад							КАК Склад,
	               |	Склад.Представление				КАК СкладПредставление,
	               |	СтатусОтгрузки					КАК СтатусОтгрузки,
	               |	ВариантМаршрута					КАК ВариантМаршрута,
	               |	ВариантМаршрута.Представление	КАК ВариантМаршрутаПредставление,
	               |	Пользователь					КАК Пользователь,
	               |	Пользователь.Представление		КАК ПользовательПредставление
	               |ИЗ
	               |	РегистрСведений.ОтгрузкаМест
	               |ГДЕ
	               |	Место = &Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА .Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	               |			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	               |		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	               |			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	               |	КОНЕЦ КАК Документ,
	               |	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	               |			КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	               |				ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	               |			КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	               |				ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	               |		КОНЕЦ) КАК ДокументПредставление
	               |ИЗ
	               |	РегистрСведений.МестаПоДокументам
				   |ГДЕ
				   |	Место = &Место";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнформацияПоМесту()

Функция ПолучитьТекстЗапросаИнформацияПоЗадаче()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Владелец 									КАК Получатель,
	               |	ВЫБОР
	               |		КОГДА Владелец ССЫЛКА Справочник.Склады
	               |			ТОГДА ВЫРАЗИТЬ(Владелец КАК Справочник.Склады).Представление
	               |		КОГДА Владелец ССЫЛКА Справочник.Партнеры
	               |			ТОГДА ВЫРАЗИТЬ(Владелец КАК Справочник.Партнеры).Представление
	               |	КОНЕЦ 										КАК ПолучательПредставление,
	               |	Код 										КАК Код,
	               |	АдресДоставки 								КАК АдресДоставки,
	               |	Архивный 									КАК Архивный,
	               |	ДокументОснования							КАК ЗаказПоставщика,
	               |	ДокументОснования.Представление				КАК ЗаказПоставщикаПредставление,
	               |	ЗаполнятьУникальныйИдентификатор			КАК ЗаполнятьУникальныйИдентификатор,
	               |	Ответственный								КАК Ответственный,
	               |	Ответственный.Представление					КАК ОтветственныйПредставление,
	               |	Транзит										КАК Транзит,
	               |	УникальныйИдентификатор						КАК УникальныйИдентификатор,
				   |	ТекстЗадачи									КАК ТекстЗадачи
	               |ИЗ
	               |	Справочник.МестаДоставки
	               |ГДЕ
	               |	Ссылка = &Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Период							КАК Период,
	               |	Отправитель						КАК Отправитель,
	               |	Отправитель.Представление		КАК ОтправительПредставление,
	               |	СтатусОтгрузки					КАК СтатусОтгрузки,
	               |	ВариантМаршрута					КАК ВариантМаршрута,
	               |	ВариантМаршрута.Представление	КАК ВариантМаршрутаПредставление,
	               |	Пользователь					КАК Пользователь,
	               |	Пользователь.Представление		КАК ПользовательПредставление
	               |ИЗ
	               |	РегистрСведений.ЗадачиНаМаршрут
	               |ГДЕ
	               |	Место = &Место";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаИнформацияПоЗадаче()

Функция ПолучитьТекстЗапросаМаршрутныйЛист()

	ТекстЗапроса = "ВЫБРАТЬ
					|	МестоДоставки 						КАК Место,
					|	МестоДоставки.Код 					КАК Код,
					|	ЭтоЗадача							КАК ЭтоЗадача,
					|	Owner 								КАК Получатель,
					|	OwnerGeoLocation.ГородСклад 		КАК АдресПолучателя,
					|	Отправитель							КАК Отправитель,
					|	ОтправительGeoLocation.ГородСклад 	КАК АдресОтправителя,
					|	МестоДоставки.ТекстЗадачи 			КАК ТекстЗадачи
					|ПОМЕСТИТЬ ДанныеПоМестам
					|ИЗ
					|	РегистрСведений.ПоездкаЗаМаршрутом
					|ГДЕ
					|	ДокументПоездки = &ДокументПоездки
					|	И НЕ ИсключеноИзДоставки
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Валюта				КАК Валюта,
					|	Курс / Кратность 	КАК Курс
					|ПОМЕСТИТЬ КурсыВалют
					|ИЗ
					|	РегистрСведений.КурсыВалют.СрезПоследних
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПоездкаЗаМаршрутомФинансы.Партнер КАК Партнер,
					|	ВЫБОР
					|		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером = 0
					|			ТОГДА ПоездкаЗаМаршрутомФинансы.СуммаУчета
					|		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером > 0
					|				И ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером <= 1
					|			ТОГДА 0
					|		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером > 1
					|			ТОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером
					|	КОНЕЦ КАК СуммаУпр,
					|	ВЫБОР
					|		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером = 0
					|			ТОГДА ПоездкаЗаМаршрутомФинансы.СуммаУчета
					|		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером > 0
					|				И ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером <= 1
					|			ТОГДА 0
					|		КОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером > 1
					|			ТОГДА ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером
					|	КОНЕЦ * (ЕСТЬNULL(КурсыВалютУпр.Курс, 0) / ЕСТЬNULL(КурсыВалютРег.Курс, 1)) КАК СуммаРег
					|ПОМЕСТИТЬ ОплатыПартнеров
					|ИЗ
					|	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
					|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУпр
					|		ПО (КурсыВалютУпр.Валюта В
					|				(ВЫБРАТЬ
					|					ВалютаУправленческогоУчета.Значение
					|				ИЗ
					|					Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета))
					|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРег
					|		ПО (КурсыВалютРег.Валюта В
					|				(ВЫБРАТЬ
					|					ВалютаУправленческогоУчета.Значение
					|				ИЗ
					|					Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета))
					|ГДЕ
					|	ПоездкаЗаМаршрутомФинансы.ДокументПоездки = &ДокументПоездки
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ДанныеПоМестам.Получатель				КАК Получатель,
					|	ДанныеПоМестам.АдресПолучателя			КАК АдресПолучателя,
					|	ДанныеПоМестам.Отправитель				КАК Отправитель,
					|	ДанныеПоМестам.АдресОтправителя			КАК АдресОтправителя,
					|	ЕСТЬNULL(ОплатыПартнеров.СуммаУпр, 0) 	КАК СуммаУпр,
					|	ЕСТЬNULL(ОплатыПартнеров.СуммаРег, 0) 	КАК СуммаРег
					|ИЗ
					|	ДанныеПоМестам КАК ДанныеПоМестам
					|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПартнеров КАК ОплатыПартнеров
					|		ПО ДанныеПоМестам.Отправитель = ОплатыПартнеров.Партнер
					|ГДЕ
					|	НЕ ДанныеПоМестам.ЭтоЗадача
					|УПОРЯДОЧИТЬ ПО 
					|	ДанныеПоМестам.Отправитель.Наименование,
					|	ДанныеПоМестам.Получатель.Наименование	
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Код					КАК Код,
					|	Получатель			КАК Получатель,
					|	АдресПолучателя		КАК АдресПолучателя,
					|	Отправитель			КАК Отправитель,
					|	АдресОтправителя	КАК АдресОтправителя
					|ИЗ
					|	ДанныеПоМестам
					|ГДЕ
					|	НЕ ЭтоЗадача
					|;
					|
                    |////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ВложенныйЗапрос.Ссылка 			КАК Ссылка,
					|	ВложенныйЗапрос.Представление 	КАК Телефон
					|ИЗ
					|	(ВЫБРАТЬ
					|		Ссылка			КАК Ссылка,
					|		Представление 	КАК Представление
					|	ИЗ
					|		Справочник.Партнеры.КонтактнаяИнформация
					|	ГДЕ
					|		Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
					|		И Представление <> ""
					|		И Ссылка В
					|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|					Получатель
					|				ИЗ
					|					ДанныеПоМестам
					|				ГДЕ
					|					Получатель ССЫЛКА Справочник.Партнеры)

					|	ОБЪЕДИНИТЬ ВСЕ

					|	ВЫБРАТЬ
					|		Ссылка 			КАК Ссылка,
					|		Представление 	КАК Представление
					|	ИЗ
					|		Справочник.Партнеры.КонтактнаяИнформация
					|	ГДЕ
					|		Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
					|		И Представление <> ""
					|		И Ссылка В
					|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|					Отправитель
					|				ИЗ
					|					ДанныеПоМестам
					|				ГДЕ
					|					Отправитель ССЫЛКА Справочник.Партнеры)

					|	ОБЪЕДИНИТЬ ВСЕ

					|	ВЫБРАТЬ
					|		Ссылка			КАК Ссылка,
					|		Представление 	КАК Представление
					|	ИЗ
					|		Справочник.Склады.КонтактнаяИнформация
					|	ГДЕ
					|		Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
					|		И Представление <> ""
					|		И Ссылка В
					|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|					Отправитель
					|				ИЗ
					|					ДанныеПоМестам
					|				ГДЕ
					|					Отправитель ССЫЛКА Справочник.Склады)

					|	ОБЪЕДИНИТЬ ВСЕ

					|	ВЫБРАТЬ
					|		Ссылка			КАК Ссылка,
					|		Представление 	КАК Представление
					|	ИЗ
					|		Справочник.Склады.КонтактнаяИнформация
					|	ГДЕ
					|		Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
					|		И редставление <> ""
					|		И Ссылка В
					|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|					Получатель
					|				ИЗ
					|					ДанныеПоМестам
					|				ГДЕ
					|					Получатель ССЫЛКА Справочник.Склады)) КАК ВложенныйЗапрос
					|;
					|
					|ВЫБРАТЬ
					|	Код					КАК Код,
					|	Получатель			КАК Получатель,
					|	АдресПолучателя		КАК АдресПолучателя,
					|	Отправитель			КАК Отправитель,
					|	АдресОтправителя	КАК АдресОтправителя,
					|	ТекстЗадачи			КАК ТекстЗадачи
					|ИЗ
					|	ДанныеПоМестам
					|ГДЕ
					|	ЭтоЗадача
					|И  (Отправитель, АдресОтправителя, Получатель, АдресПолучателя) В 
					|	(ВЫБРАТЬ
					|		Отправитель,
					|		АдресОтправителя,
					|		Получатель,
					|		АдресПолучателя
					|	ИЗ
					|		ДанныеПоМестам
					|	ГДЕ
					|		НЕ ЭтоЗадача)
					|;
					|
					|ВЫБРАТЬ
					|	Код					КАК Код,
					|	Получатель			КАК Получатель,
					|	АдресПолучателя		КАК АдресПолучателя,
					|	Отправитель			КАК Отправитель,
					|	АдресОтправителя	КАК АдресОтправителя,
					|	ТекстЗадачи			КАК ТекстЗадачи
					|ИЗ
					|	ДанныеПоМестам
					|ГДЕ
					|	ЭтоЗадача
					|И  (Отправитель, АдресОтправителя, Получатель, АдресПолучателя) НЕ В 
					|	(ВЫБРАТЬ
					|		Отправитель,
					|		АдресОтправителя,
					|		Получатель,
					|		АдресПолучателя
					|	ИЗ
					|		ДанныеПоМестам
					|	ГДЕ
					|		НЕ ЭтоЗадача)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаМаршрутныйЛист()

Функция ПолучитьТекстЗапросаДокументыВодителю()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	МестоДоставки КАК МестоДоставки,
	               |	ВЫБОР
	               |		КОГДА Owner ССЫЛКА Справочник.Склады
	               |			ТОГДА ВЫРАЗИТЬ(Owner КАК Справочник.Склады).Представление
	               |		КОГДА Owner ССЫЛКА Справочник.Партнеры
	               |			ТОГДА ВЫРАЗИТЬ(Owner КАК Справочник.Партнеры).Представление
	               |	КОНЕЦ КАК Получатель,
	               |	OwnerGeoLocation.ГородСклад КАК АдресПолучателя
	               |ПОМЕСТИТЬ ТаблицаМест
	               |ИЗ
	               |	РегистрСведений.ПоездкаЗаМаршрутом
	               |ГДЕ
	               |	ДокументПоездки = &ДокументПоездки
	               |	И НЕ ЭтоЗадача
	               |	И НЕ ИсключеноИзДоставки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаМест.Получатель 											КАК Получатель,
	               |	ТаблицаМест.АдресПолучателя 									КАК АдресДоставки,
	               |	МестаНоменклатуры.Номенклатура.Код 								КАК Код,
	               |	МестаНоменклатуры.Номенклатура.Представление 					КАК Товар,
	               |	МестаНоменклатуры.Характеристика.Представление 					КАК Характеристика,
	               |	МестаНоменклатуры.Количество 									КАК Количество,
	               |	МестаНоменклатуры.Номенклатура.ЕдиницаИзмерения.Представление 	КАК ЕдиницаЦены
	               |ИЗ
	               |	ТаблицаМест КАК ТаблицаМест
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	               |		ПО ТаблицаМест.МестоДоставки = МестаНоменклатуры.Место
				   |ИТОГИ
				   |	СУММА(МестаНоменклатуры.Количество), 
				   |	МАКСИМУМ(МестаНоменклатуры.Номенклатура.ЕдиницаИзмерения.Представление),
				   |	МАКСИМУМ(ТаблицаМест.АдресПолучателя)
				   |ПО
				   |	ТаблицаМест.Получатель";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДокументыВодителю()
 
 
 
 

 
 
 

Функция ПолучитьИнформациюПоМесту(Место)

	ТабДокумент					= Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Макет 						= ПолучитьМакет("ИнформацияПоМесту");
	ИнформацияПоМесту   		= Макет.ПолучитьОбласть("ИнформацияПоМесту");
	НоменклатураЗаголовок   	= Макет.ПолучитьОбласть("НоменклатураЗаголовок");
	НоменклатураТаблица		   	= Макет.ПолучитьОбласть("НоменклатураТаблица");
	ДвижениеЗаголовок		   	= Макет.ПолучитьОбласть("ДвижениеЗаголовок");
	ДвиженияПоМесту 		   	= Макет.ПолучитьОбласть("ДвиженияПоМесту");
	ДокументыЗаголовок 		   	= Макет.ПолучитьОбласть("ДокументыЗаголовок");
	ДокументыСписок 		   	= Макет.ПолучитьОбласть("ДокументыСписок");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаИнформацияПоМесту();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	
	ВыборкаИнформацияПоМесту 	= РезультатыЗапрос[0].Выбрать();
	ВыборкаСписокНоменклатуры 	= РезультатыЗапрос[1].Выбрать();
	ВыборкаДвиженияПоМесту 		= РезультатыЗапрос[2].Выбрать();
	ВыборкаДокументыПоМесту 	= РезультатыЗапрос[3].Выбрать();
	
	Если ВыборкаИнформацияПоМесту.Следующий() Тогда
		ИнформацияПоМесту.Параметры.Заполнить(ВыборкаИнформацияПоМесту);
		ТабДокумент.Вывести(ИнформацияПоМесту);
	КонецЕсли;
	
	Если Не РезультатыЗапрос[1].Пустой() Тогда
		ТабДокумент.Вывести(НоменклатураЗаголовок);
	КонецЕсли;
	
	Пока ВыборкаСписокНоменклатуры.Следующий() Цикл
		НоменклатураТаблица.Параметры.Заполнить(ВыборкаСписокНоменклатуры);
		ТабДокумент.Вывести(НоменклатураТаблица);
	КонецЦикла;
	
	
	Если Не РезультатыЗапрос[2].Пустой() Тогда
		ТабДокумент.Вывести(ДвижениеЗаголовок);
	КонецЕсли;
	
	Пока ВыборкаДвиженияПоМесту.Следующий() Цикл
		ДвиженияПоМесту.Параметры.Заполнить(ВыборкаДвиженияПоМесту);
		ТабДокумент.Вывести(ДвиженияПоМесту);
	КонецЦикла;
	
	
	Если Не РезультатыЗапрос[3].Пустой() Тогда
		ТабДокумент.Вывести(ДокументыЗаголовок);
	КонецЕсли;
	
	Пока ВыборкаДокументыПоМесту.Следующий() Цикл
		ДокументыСписок.Параметры.Заполнить(ВыборкаДокументыПоМесту);
		ТабДокумент.Вывести(ДокументыСписок);
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПолучитьИнформациюПоМесту()

Функция ПолучитьИнформациюПоЗадаче(Место)

	ТабДокумент					= Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьСетку = Ложь;
	
	Макет 						= ПолучитьМакет("ИнформацияПоЗадаче");
	ИнформацияПоМесту   		= Макет.ПолучитьОбласть("ИнформацияПоМесту");
	ДвижениеЗаголовок		   	= Макет.ПолучитьОбласть("ДвижениеЗаголовок");
	ДвиженияПоМесту 		   	= Макет.ПолучитьОбласть("ДвиженияПоМесту");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаИнформацияПоЗадаче();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	
	ВыборкаИнформацияПоМесту 	= РезультатыЗапрос[0].Выбрать();
	ВыборкаДвиженияПоМесту 		= РезультатыЗапрос[1].Выбрать();
	
	Если ВыборкаИнформацияПоМесту.Следующий() Тогда
		AssignedRoutePlace = Справочники.МестаДоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыборкаИнформацияПоМесту.УникальныйИдентификатор));
		ИнформацияПоМесту.Параметры.Заполнить(ВыборкаИнформацияПоМесту);
		ИнформацияПоМесту.Параметры.AssignedRoutePlace = AssignedRoutePlace;
		ТабДокумент.Вывести(ИнформацияПоМесту);
	КонецЕсли;
	
	Если Не РезультатыЗапрос[1].Пустой() Тогда
		ТабДокумент.Вывести(ДвижениеЗаголовок);
	КонецЕсли;
	
	Пока ВыборкаДвиженияПоМесту.Следующий() Цикл
		ДвиженияПоМесту.Параметры.Заполнить(ВыборкаДвиженияПоМесту);
		ТабДокумент.Вывести(ДвиженияПоМесту);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПолучитьИнформациюПоЗадаче()
 




Функция СформироватьЗаголовокДокументаВодителю(Выборка)

	ТекстЗаголовка = "Транспортна накладна від %1";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка,
								//ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Место.Код, Ложь, Истина),
								Формат(ТекущаяДата(), "ДФ='дд ММММ гггг'"));

КонецФункции // СформироватьЗаголовокДокументаВодителю()
 
 
 
 

 
 


// Работа с графической схемой

Функция УстановитьНаименованиеГрафическогоЭлемента(ГрафическаяСхема, ИмяЭлемента, НовоеНаименование)

	ЭлементСхемы = ГрафическаяСхема.ЭлементыГрафическойСхемы.Найти(ИмяЭлемента);
	
	Если ЭлементСхемы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементСхемы.Наименование = ?(ПустаяСтрока(НовоеНаименование), НСтр("ru='Места по документу не сформированы'"), НовоеНаименование);
	
	Возврат Истина;

КонецФункции
 
#КонецОбласти  
 


#Область СведенияОВнешнейОбработке



Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "2.7.019";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Хьюстон");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Хьюстон [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Хьюстон [" + Версия + "]", "РМЛ", "ОткрытиеФормы", Ложь, "РМЛ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти  
