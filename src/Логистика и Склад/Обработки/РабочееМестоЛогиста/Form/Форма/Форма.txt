

#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Календарь = ТекущаяДата();
	ЗагрузитьСписокДокументовНаСервере();
	ЗагрузитьСписокМестБезПоездки();
	
	ДниГрафикаВыезды = Новый ФиксированноеСоответствие(
				Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(
					Справочники.Календари.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8510-404c-11e0-9f98-001517115d85")), 
					Год(ТекущаяДата())));
	
	МаршрутМеста.ВертикальныйШагСетки   = 0;
	МаршрутМеста.ГоризонтальныйШагСетки = 0;
	
	ЗагрузитьДополнительныеНастройки();
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ГруппаУправлениеДоступомКомандыОтгрузки.Видимость = Ложь;
		УстановитьВидимостьКнопокОтгрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ЗагрузитьСписокМестВПоездкеНаКлиенте", 120);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		
		ТекстВопроса = НСтр("ru='Настройки обработки были изменены. Сохранить измеения?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Ответ		 = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьДополнительныеНастройки();
			СохранитьНастройкиСоответствийВодительКассаНаСервере();
			Модифицированность = Ложь;
		КонецЕсли;	
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Модифицированность = Ложь;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
	ОбновитьСписокМестИДокументов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	ОбновитьСписокМестИДокументов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПеремещений(Команда)
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоТранзитныеПеремещенияПриИзменении(Элемент)
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоТранзитныеПеремещения1ПриИзменении(Элемент)
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Склад1ПриИзменении(Элемент)
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		Если ДниГрафикаВыезды.Получить(СтрокаОформленияПериода.Дата) = Неопределено Тогда
			ЦветТекстаДня = ОбщегоНазначенияКлиент.ЦветСтиля("ВидДняНеУказанЦвет");
		Иначе
			ЦветТекстаДня = ОбщегоНазначенияКлиент.ЦветСтиля("ВидДняРабочийЦвет");
		КонецЕсли;
		СтрокаОформленияПериода.ЦветТекста = ЦветТекстаДня;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоездкаПриИзменении(Элемент)
	ЗагрузитьСписокОплатНаКлиенте();
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийТаблицыФормыСписокДокументов   

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ОткрытьФорму("Документ.ПоездкаЗаМаршрутом.ФормаОбъекта",,, Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	ЗагрузитьСписокМестВПоездкеНаКлиенте();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицыФормыСписокПеремещений   

&НаКлиенте
Процедура СписокПеремещенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СписокПеремещений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеремещенийПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокПеремещений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьСписокНоменклатурыПеремещения(ТекущиеДанные.Документ, ТекущиеДанные.ТранзитноеПеремещение, ТекущиеДанные.ЗаказНаперемещение);
	Иначе
		МаршрутМеста = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокЗадач   
&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьТекстЗадачи(ТекущиеДанные.Задача, ТекущиеДанные.ТранзитнаяЗадача);
	Иначе
		МаршрутМеста = Неопределено;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаОплатСуммаПоФактуПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаОплат.ТекущиеДанные;
	ПринятьОплатуНаСервере(ТекущиеДанные.Партнер, ТекущиеДанные.Период, ТекущиеДанные.Валюта, ТекущиеДанные.СуммаПоФакту);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыМестаБезПоездки  

&НаКлиенте
Процедура МестаБезПоездкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Место",Элемент.ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.МестаДоставки.Форма.ФормаИнформацииПоМесту",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура МестаБезПоездкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура МестаБезПоездкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПеретаскивания.Значение[0].Свойство("МестаВПоездкеПеретаскивание") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаБезПоездкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПеретаскивания.Значение[0].Свойство("МестаВПоездкеПеретаскивание") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для удаления места из поездки необходимо установить документ поездки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	Для каждого Элемент ИЗ ПараметрыПеретаскивания.Значение Цикл
		МассивИдентификаторов.Добавить(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
	УдалитьМестаИзПоездки(ТекущиеДанные.Ссылка, МассивИдентификаторов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыМестаВПоездке  

&НаКлиенте
Процедура МестаВПоездкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Место",Элемент.ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.МестаДоставки.Форма.ФормаИнформацииПоМесту",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура МестаВПоездкеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура МестаВПоездкеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПеретаскивания.Значение[0].Свойство("МестаБезПоездкиПеретаскивание") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;
		
КонецПроцедуры

&НаКлиенте
Процедура МестаВПоездкеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПеретаскивания.Значение[0].Свойство("МестаБезПоездкиПеретаскивание") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для добавления места в поездку необходимо установить документ поездки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	Для каждого Элемент ИЗ ПараметрыПеретаскивания.Значение Цикл
		МассивИдентификаторов.Добавить(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
	ДобавитьМестаВПоездкуНаСервере(ТекущиеДанные.Ссылка, МассивИдентификаторов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогрузитьМестоВМашину(Команда)
	
	ВыделенныеСтроки = Элементы.МестаВПоездке.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ТекущиеДанныеДокументы = Элементы.СписокДокументов.ТекущиеДанные;
		ДокументПоездки		   = ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
		ТекущиеДанныеМесто	   = Элементы.МестаВПоездке.ТекущиеДанные;
		Место				   = ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
		ТекущиеДанныеМестоБезПоездки   	= Элементы.МестаБезПоездки.ТекущиеДанные;
		МестоБезПоездки		   			= ?(ТекущиеДанныеМестоБезПоездки=Неопределено, Неопределено, ТекущиеДанныеМестоБезПоездки.Ссылка);
		
		ВыполнитьОтгрузкуМест(ВыделенныеСтроки, "ПогрузитьВМашину", ДокументПоездки, Место, МестоБезПоездки);
		  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьМестоПартнеру(Команда)
	
	ВыделенныеСтроки = Элементы.МестаВПоездке.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ТекущиеДанныеДокументы = Элементы.СписокДокументов.ТекущиеДанные;
		ДокументПоездки		   = ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
		ТекущиеДанныеМесто	   = Элементы.МестаВПоездке.ТекущиеДанные;
		Место				   = ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
		ТекущиеДанныеМестоБезПоездки   	= Элементы.МестаБезПоездки.ТекущиеДанные;
		МестоБезПоездки		   			= ?(ТекущиеДанныеМестоБезПоездки=Неопределено, Неопределено, ТекущиеДанныеМестоБезПоездки.Ссылка);
		
		ВыполнитьОтгрузкуМест(ВыделенныеСтроки, "ОтгрузитьПартнеру", ДокументПоездки, Место, МестоБезПоездки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаНастроекВодительКассаВодитель  

&НаКлиенте
Процедура ТаблицаНастроекВодительКассаВодительПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекВодительКассаКассаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТаблицаУправленияДоступомККомандамОтгрузки

&НаКлиенте
Процедура ТаблицаУправленияДоступомККомандамОтгрузкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиДоступаКомандамиОтгрузки(Команда)
	СохранитьДополнительныеНастройки();
	Модифицированность = Ложь;
КонецПроцедуры

#КонецОбласти




                                                                                      
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Водители(Команда)
	ОбработкаКнопокЗаголовка(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОплатыОтПартнеров(Команда)
	ОбработкаКнопокЗаголовка(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Документы(Команда)
	ОбработкаКнопокЗаголовка(Команда.Имя);
	ОбновитьСпискиДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствийВодительКасса(Команда)
	ОбработкаКнопокЗаголовка(Команда.Имя);
	ЗаполнитьНастройкаСоответствийВодительКассаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда)
	ЗагрузитьСписокДокументовНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМестВПоездке(Команда)
	ЗагрузитьСписокМестВПоездкеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМестБезПоездки(Команда)
	ЗагрузитьСписокМестБезПоездкиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМестоВПоездку(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Элементы.МестаБезПоездки.ВыделенныеСтроки;
	
	Если МассивИдентификаторов.Количество() > 0 Тогда
		ДобавитьМестаВПоездкуНаСервере(ТекущиеДанные.Ссылка, МассивИдентификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМестоИзПоездки(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Элементы.МестаВПоездке.ВыделенныеСтроки;
	
	Если МассивИдентификаторов.Количество() > 0 Тогда
		УдалитьМестаИзПоездки(ТекущиеДанные.Ссылка, МассивИдентификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДанные(Команда)
	
	ТекущиеДанныеДокументы = Элементы.СписокДокументов.ТекущиеДанные;
	ДокументПоездки		   = ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
	ТекущиеДанныеМесто	   = Элементы.МестаВПоездке.ТекущиеДанные;
	Место				   = ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
	ТекущиеДанныеМестоБезПоездки   	= Элементы.МестаБезПоездки.ТекущиеДанные;
	МестоБезПоездки		   			= ?(ТекущиеДанныеМестоБезПоездки=Неопределено, Неопределено, ТекущиеДанныеМестоБезПоездки.Ссылка);

	ИнициализироватьДанныеНаСервере(ДокументПоездки, Место, МестоБезПоездки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОплаты(Команда)
	
	ТекущиеДанныеДокументы = Элементы.СписокДокументов.ТекущиеДанные;
	ДокументПоездки		   = ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
	ТекущиеДанныеМесто	   = Элементы.МестаВПоездке.ТекущиеДанные;
	Место				   = ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
	ТекущиеДанныеМестоБезПоездки   	= Элементы.МестаБезПоездки.ТекущиеДанные;
	МестоБезПоездки		   			= ?(ТекущиеДанныеМестоБезПоездки=Неопределено, Неопределено, ТекущиеДанныеМестоБезПоездки.Ссылка);
	
	ИнициализироватьОплатыНаСервере(ДокументПоездки, Место, МестоБезПоездки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОплат(Команда)
	ЗагрузитьСписокОплатНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СписокОплат(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьСписокОплатНаСервере(ТекущиеДанные.Ссылка);
	
	ПодключитьОбработчикОжидания("ВыполнитьПереходОплатыПартнеров", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходныйОрдер(Команда)
	
	Перем Сумма;
	
	ТекущиеДанные = Элементы.ТаблицаОплат.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеДляЗаполнения = ПолучитьРеквизитыПриходногоОрдера(ТекущиеДанные.Партнер, ТекущиеДанные.Валюта, ТекущиеДанные.СуммаПоФакту);
	
	ФормаОрдера = ПолучитьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта");
	ЗаполнитьЗначенияСвойств(ФормаОрдера.Объект, ДанныеДляЗаполнения.Форма);
	ФормаОрдера.Объект.Касса = ДанныеДляЗаполнения.Касса;
	
	НоваяСтрока = ФормаОрдера.Объект.РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполнения.РасшифровкаПлатежа);
	
	ОткрытьФорму(ФормаОрдера);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоКодуМесту(Команда)
	Перем КодМеста;
	
	ЗаголовокСтроки = НСтр("ru='Введите номер места'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ВвестиСтроку(КодМеста, ЗаголовокСтроки) Тогда
		
		МестоСсылка = ИнформацияПоМестуПоКоду(КодМеста);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Место",МестоСсылка);
		ОткрытьФорму("Справочник.МестаДоставки.Форма.ФормаИнформацииПоМесту",ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьМаршрутногоЛиста(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТабДокумент = ПолучитьМаршрутныйЛист(ТекущиеДанные.Ссылка);
		ТабДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрМаршрутногоЛиста(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТабДокумент = ПолучитьМаршрутныйЛист(ТекущиеДанные.Ссылка);
		ТабДокумент.Показать();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокументовВодителю(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БанковскийСчет = ОткрытьФормуМодально("Справочник.БанковскиеСчетаОрганизаций.ФормаВыбора");
	
	Если БанковскийСчет <> Неопределено Тогда
		ТабДокумент = ПолучитьДокументыВодителю(ТекущиеДанные.Ссылка, БанковскийСчет);
		ТабДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрДокументовВодителю(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БанковскийСчет = ОткрытьФормуМодально("Справочник.БанковскиеСчетаОрганизаций.ФормаВыбора");
	
	Если БанковскийСчет <> Неопределено Тогда
		ТабДокумент = ПолучитьДокументыВодителю(ТекущиеДанные.Ссылка, БанковскийСчет);
		ТабДокумент.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОплат(Команда)
	
	КнопкаНастройкиОплат = Элементы.ТаблицаОплатНастройкиОплат;
	ЭлементТаблица		 = Элементы.ТаблицаНастроекОплат;
	
	ПометкаКнопки 		 = КнопкаНастройкиОплат.Пометка;
	ВидимостьТаблицы     = ЭлементТаблица.Видимость;
	
	КнопкаНастройкиОплат.Пометка = Не ПометкаКнопки;
	ЭлементТаблица.Видимость	 = Не ВидимостьТаблицы;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиСоответствийВодительКасса(Команда)
	СохранитьНастройкиСоответствийВодительКассаНаСервере();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПереходОплатыПартнеров()
	ОбработкаКнопокЗаголовка("ОплатыОтПартнеров");
КонецПроцедуры // ВыполнитьПереходОплатыПартнеров()
 

// Интерфейс

&НаКлиенте
Процедура ОбработкаКнопокЗаголовка(ИмяКоманды)
	
	КнопкиУправления = Элементы.ГруппаКнопкиУправления.ПодчиненныеЭлементы;

	Для каждого ЭлементКнопка ИЗ КнопкиУправления Цикл
		Если ЭлементКнопка.Имя = ИмяКоманды Тогда
			ЭлементКнопка.Пометка = Истина;
			УстановитьСтраницуФормы(ИмяКоманды);
		Иначе
			ЭлементКнопка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбработкаКнопокЗаголовка()

&НаКлиенте
Процедура УстановитьСтраницуФормы(ИмяКоманды)

	ИмяГруппы	  = "Группа%1";
	ИмяГруппы	  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяГруппы, ИмяКоманды);
	ЭлементГруппа = Элементы.Найти(ИмяГруппы);
	
	Если ЭлементГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭлементГруппа;

КонецПроцедуры // УстановитьСтраницуФормы()

&НаКлиенте
Функция ТекущиеДанныеВыездовВодителей()

	Результат	  = Новый Структура;
	ТекущиеДанные = Элементы.ВыездыВодителей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Вставить("ВариантМаршрута", 	Маршрут);
	Результат.Вставить("ВремяВыезда", 		ТекущиеДанные.ДатаВыезда);
	Результат.Вставить("Водитель", 			ТекущиеДанные.Водитель);
		
	Возврат Результат;

Конецфункции // ТекущиеДанныеВыездовВодителей()

&НаКлиенте
Процедура ОбновитьСпискиДокументовНаКлиенте()
	
	ТекущиеДанные = Элементы.СписокПеремещений.ТекущиеДанные;
	Документ	  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Документ);
	
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Задача	 	  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Задача);
	
	ОбновитьСпискиДокументовНаСервере(Документ, Задача);
	
КонецПроцедуры // ОбновитьСписки()

&НаСервере
Процедура ОбновитьСпискиДокументовНаСервере(ДокументПеремещения, Задача)
	ЗагрузитьСписокПеремещений(ДокументПеремещения);
	ЗагрузитьСписокЗадач(Задача);
КонецПроцедуры // ОбновитьСпискиДокументовНаСервере()

&НаСервере
Процедура ВостановитьСтрокуТаблицы(Таблица, Элемент, Параметр, ИмяПараметра)
	Если Параметр <> Неопределено Тогда
		СтруктураПоиска = Таблица.НайтиСтроки(Новый Структура(ИмяПараметра, Параметр));
		Если СтруктураПоиска.Количество() > 0 Тогда
			Элемент.ТекущаяСтрока = СтруктураПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВостановитьСтрокуТаблицы()

&НаКлиенте
Процедура ОбновитьСписокМестИДокументов(ОбновлятьКалендарь=Ложь)

	ТекущиеДанныеДокументы  = Элементы.СписокДокументов.ТекущиеДанные;
	ДокументСсылка 			= ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
	ТекущиеДанныеМесто		= Элементы.МестаБезПоездки.ТекущиеДанные;
	МестоСсылка				= ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
	ОбновитьСписокМестиДокументовНаСервере(ДокументСсылка, МестоСсылка, ОбновлятьКалендарь);
	
	Элементы.Календарь.Обновить();

КонецПроцедуры // ОбновитьСписокМестиДокументов()

&НаСервере
Процедура ОбновитьСписокМестиДокументовНаСервере(Документ, Место, ОбновлятьКалендарь)
	ЗагрузитьСписокДокументовНаСервере(Документ);
	ЗагрузитьСписокМестБезПоездки(Место);
	Если ОбновлятьКалендарь Тогда
		Если ЗначениеЗаполнено(Маршрут) Тогда
			КалендарьМаршрута = Маршрут.КалендарьМаршрута;
		Иначе
			КалендарьМаршрута = Справочники.Календари.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8510-404c-11e0-9f98-001517115d85"));
		КонецЕсли;
		ДниГрафикаВыезды = Новый ФиксированноеСоответствие(
				Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(КалендарьМаршрута, Год(ТекущаяДата())));
	КонецЕсли;
КонецПроцедуры // ОбновитьСписокМестиДокументовНаСервере()

&НаКлиенте
Процедура ОбновитьСписокМест()

	ТекущиеДанныеДокументы    = Элементы.СписокДокументов.ТекущиеДанные;
	ДокументПоездка		   	  = ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
	ТекущиеДанныеМестоПоездка = Элементы.МестаВПоездке.ТекущиеДанные;
	МестоПоездка		      = ?(ТекущиеДанныеМестоПоездка=Неопределено, Неопределено, ТекущиеДанныеМестоПоездка.Ссылка);
	
	ТекущиеДанныеМесто		  = Элементы.МестаБезПоездки.ТекущиеДанные;
	Место				 	  = ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);	
	
	ОбновитьСписокМестНаСервере(ДокументПоездка, МестоПоездка, Место);

КонецПроцедуры // ОбновитьСписокМест()

&НаСервере
Процедура ОбновитьСписокМестНаСервере(ДокументПоездка, МестоПоездка, Место)
	ЗагрузитьСписокМестВПоездкеНаСервере(ДокументПоездка, МестоПоездка, Место);
КонецПроцедуры // ОбновитьСписокМестНаСервере()

&НаСервере
Процедура ИнициализироватьДанныеНаСервере(ДокументПоездка, Место, МестоБезПоездки)

	УстановитьПривилегированныйРежим(Истина);
	
	Документы.ПоездкаЗаМаршрутом.ИнициализироватьДанныеДокумента(ДокументПоездка);
	
	ЗагрузитьСписокМестВПоездкеНаСервере(ДокументПоездка, Место, МестоБезПоездки);

КонецПроцедуры // ИнициализироватьДанныеНаСервере()

&НаСервере
Процедура ИнициализироватьОплатыНаСервере(ДокументПоездка, Место, МестоБезПоездки)

	УстановитьПривилегированныйРежим(Истина);
	
	Документы.ПоездкаЗаМаршрутом.ИнициализироватьОплатыДокумента(ДокументПоездка);
	
	ЗагрузитьСписокМестВПоездкеНаСервере(ДокументПоездка, Место, МестоБезПоездки);

КонецПроцедуры // ИнициализироватьОплатыНаСервере()
 
&НаСервере
Процедура ОткрытьСписокОплатНаСервере(ДокПоездка)

	ДокументПоездка = ДокПоездка;
	ЗагрузитьСписокОплатНаСервере();
	
	КнопкиУправления = Элементы.ГруппаКнопкиУправления.ПодчиненныеЭлементы;

	Для каждого ЭлементКнопка ИЗ КнопкиУправления Цикл
		Если ЭлементКнопка.Имя = "ОплатыОтПартнеров" Тогда
			ЭлементКнопка.Пометка = Истина;
		Иначе
			ЭлементКнопка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОплатыОтПартнеров;

КонецПроцедуры // ОткрытьСписокОплатНаСервере()

&НаСервере
Функция ИнформацияПоМестуПоКоду(КодМеста)
	
	НормальныйКод = Прав("000000000000000" + КодМеста, 15);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МестоСсылка = Справочники.МестаДоставки.НайтиПоКоду(НормальныйКод);
	Если МестоСсылка = Неопределено Тогда
		Возврат Справочники.МестаДоставки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат МестоСсылка;

КонецФункции // ИнформацияПоМестуПокоду()

&НаСервере
Функция ПолучитьМаршрутныйЛист(ДокументПоездки)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМаршрутныйЛист(ДокументПоездки);
КонецФункции // ПолучитьМаршрутныйЛист()

&НаСервере
Функция ПолучитьДокументыВодителю(ДокументПоездки, БанковскийСчет)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьДокументыВодителю(ДокументПоездки, БанковскийСчет);
КонецФункции // ПолучитьДокументыВодителю()
 
 
 
&НаСервере
Процедура ЗаполнитьНастройкаСоответствийВодительКассаНаСервере()
	Если РольДоступна("ПолныеПрава") Тогда 
		Элементы.ТаблицаНастроекВодительКасса.ТолькоПросмотр = Ложь;			
	КонецЕсли;
	
	ТаблицаНастроекВодительКасса.Очистить();
	УстановитьПривилегированныйРежим(Истина);
	Запрос	= Новый Запрос(ПолучитьТекстЗапросаСоответствияВодительКасса());
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроекВодительКасса.Загрузить(ТаблицаРезультат);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСоответствийВодительКассаНаСервере()
	УстановитьПривилегированныйРежим(Истина);
    НаборЗаписей = РегистрыСведений.КТС_НастройкиСоответствийВодительКасса.СоздатьНаборЗаписей();
    Для каждого Запись Из ТаблицаНастроекВодительКасса Цикл 	
		НоваяЗапись = НаборЗаписей.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись); 
        НоваяЗапись.Валюта = Запись.Касса.ВалютаДенежныхСредств;        
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	Модифицированность = Ложь;	
КонецПроцедуры // СохранитьНастройкиСоответствийВодительКасса()
 

&НаСервере
Функция ПолучитьТекстЗапросаСоответствияВодительКасса()
	ТекстЗапроса =
				 "ВЫБРАТЬ
				 |	КТС_НастройкиСоответствийВодительКасса.Пользователь КАК Пользователь,
				 |	КТС_НастройкиСоответствийВодительКасса.Касса КАК Касса
				 |ИЗ
				 |	РегистрСведений.КТС_НастройкиСоответствийВодительКасса КАК КТС_НастройкиСоответствийВодительКасса
				 |
				 |УПОРЯДОЧИТЬ ПО
				 |	Пользователь";	
	Возврат ТекстЗапроса;
КонецФункции //ПолучитьТекстЗапросаСоответствияВодительКасса()
 
 
 
  
 


// Работа со списком документов

&НаКлиенте
Процедура ЗагрузитьСписокДокументовНаКлиенте()

	ТекущиеДанные  = Элементы.СписокДокументов.ТекущиеДанные;
	ДокументСсылка = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	
	ЗагрузитьСписокДокументовНаСервере(ДокументСсылка);
	
КонецПроцедуры // ЗагрузитьСписокДокументовНаКлиенте()
 
&НаСервере
Процедура ЗагрузитьСписокДокументовНаСервере(ДокументПоездка = Неопределено)
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
    ОбработкаОбъект.ЗагрузитьСписокДокументов(СписокДокументов, Календарь, Маршрут);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ВостановитьСтрокуТаблицы(СписокДокументов, Элементы.СписокДокументов, ДокументПоездка, "Ссылка");
		
КонецПроцедуры // ЗагрузитьСписокДокументовНаСервере()
 



// Работа с местами

&НаКлиенте
Процедура ЗагрузитьСписокМестВПоездкеНаКлиенте()

	ТекущиеДанныеДокументы 			= Элементы.СписокДокументов.ТекущиеДанные;
	ДокументПоездки		   			= ?(ТекущиеДанныеДокументы=Неопределено, Неопределено, ТекущиеДанныеДокументы.Ссылка);
	
	ТекущиеДанныеМесто	   			= Элементы.МестаВПоездке.ТекущиеДанные;
	Место				   			= ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
	ТекущиеДанныеМестоБезПоездки   	= Элементы.МестаБезПоездки.ТекущиеДанные;
	МестоБезПоездки		   			= ?(ТекущиеДанныеМестоБезПоездки=Неопределено, Неопределено, ТекущиеДанныеМестоБезПоездки.Ссылка);

	ЗагрузитьСписокМестВПоездкеНаСервере(ДокументПоездки, Место, МестоБезПоездки);

КонецПроцедуры // ЗагрузитьСписокМестВПоездкеНаКлиенте()

&НаСервере
Процедура ЗагрузитьСписокМестВПоездкеНаСервере(ДокументПоездки, Место, МестоБезПоездки)
	
	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокМестВПоездке(МестаВПоездке, ДокументПоездки);
	ОбработкаОбъект.ЗагрузитьСписокМестБезПоездки(МестаБезПоездки, Маршрут);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");                    
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВостановитьСтрокуТаблицы(МестаВПоездке, 	Элементы.МестаВПоездке, 	Место, 			 "Ссылка");
	ВостановитьСтрокуТаблицы(МестаБезПоездки, 	Элементы.МестаБезПоездки, 	МестоБезПоездки, "Ссылка");
		
КонецПроцедуры // ЗагрузитьСписокМестВПоездкеЗагрузитьСписокМестВПоездке()
 

&НаКлиенте
Процедура ЗагрузитьСписокМестБезПоездкиНаКлиенте()

	ТекущиеДанныеМесто = Элементы.МестаБезПоездки.ТекущиеДанные;
	Место			   = ?(ТекущиеДанныеМесто=Неопределено, Неопределено, ТекущиеДанныеМесто.Ссылка);
	
	ЗагрузитьСписокМестБезПоездки(Место);

КонецПроцедуры // ЗагрузитьСписокМестБезПоездкиНаКлиенте()
 
&НаСервере
Процедура ЗагрузитьСписокМестБезПоездки(Место=Неопределено)

	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокМестБезПоездки(МестаБезПоездки, Маршрут);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ВостановитьСтрокуТаблицы(МестаБезПоездки, Элементы.МестаБезПоездки, Место, "Ссылка");

КонецПроцедуры // ЗагрузитьСписокМестНаКлиенте()


&НаСервере
Процедура ДобавитьМестаВПоездкуНаСервере(ДокументПоезка, МассивИдентификаторов)

	МассивМест = Новый Массив;
	
	Для каждого ИдентифкаторСтроки ИЗ МассивИдентификаторов Цикл
		СтрокаТаблицы = МестаБезПоездки.НайтиПоИдентификатору(ИдентифкаторСтроки);
		МассивМест.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение("Объект");
	РезультатДобавления = ОбработкаОбъект.ДобавитьМестаВПоездку(ДокументПоезка, МассивМест);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если РезультатДобавления Тогда
		ОбновитьСписокМестНаСервере(ДокументПоезка, МассивМест[0], Неопределено);
	КонецЕсли;

КонецПроцедуры // ДобавитьМестоВпоездкуНаСервере()

&НаСервере
Процедура УдалитьМестаИзПоездки(ДокументПоезка, МассивИдентификаторов)

	МассивМест = Новый Массив;
	
	Для каждого ИдентифкаторСтроки ИЗ МассивИдентификаторов Цикл
		СтрокаТаблицы = МестаВПоездке.НайтиПоИдентификатору(ИдентифкаторСтроки);
		МассивМест.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение("Объект");
	РезультатДобавления = ОбработкаОбъект.ИсключитьМестаИзПоездки(ДокументПоезка, МассивМест);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если РезультатДобавления Тогда
		ОбновитьСписокМестНаСервере(ДокументПоезка, Неопределено, МассивМест[0]);
	КонецЕсли;

КонецПроцедуры // УдалитьМестаИзПоездки()
 

&НаСервере
Процедура ВыполнитьОтгрузкуМест(МассивИдентификаторовСтрок, ТипОперации, ДокументПоездки, Место, МестоБезПоездки)

	УстановитьПривилегированныйРежим(Истина);
	
	МассивМест = СформироватьМассивВыделенныхМест(МассивИдентификаторовСтрок);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаВыполнениеОтгрузкиМест();
	
	Запрос.УстановитьПараметр("МассивМест", МассивМест);
	
	РезультатЗапроса 			= Запрос.ВыполнитьПакет();
	РезультатЗапросаМеста		= РезультатЗапроса[РезультатЗапроса.ВГраница()-1];
	РезультатЗапросаЗадачи		= РезультатЗапроса[РезультатЗапроса.ВГраница()];
	
	ВыборкаМеста 	 = РезультатЗапросаМеста.Выбрать();
	ВыборкаЗадачи	 = РезультатЗапросаЗадачи.Выбрать();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	УстановитьБлокировкиНаРегистрыОтгрузки(РезультатЗапросаМеста, РезультатЗапросаЗадачи);
		
	РезультатЗаписиМест  = ВыполнитьОбработкуМест(ВыборкаМеста, ТипОперации);
	РезультатЗаписиЗадач = ВыполнитьОбработкуЗадач(ВыборкаЗадачи, ТипОперации);
	
	Если Не (РезультатЗаписиМест И РезультатЗаписиЗадач) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ИнициализироватьДанныеНаСервере(ДокументПоездки, Место, МестоБезПоездки);

КонецПроцедуры // ВыполнитьОтгрузкуМест()
 
&НаСервере
Функция СформироватьМассивВыделенныхМест(МассивИдентификаторовСтрок)

	МассивМест = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		СтрокаТаблицы = МестаВПоездке.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			МассивМест.Добавить(СтрокаТаблицы.Ссылка);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивМест;

КонецФункции // СформироватьМассивВыделенныхМест()

&НаСервере
Функция ТекстЗапросаВыполнениеОтгрузкиМест()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	МестаДоставки.Ссылка КАК Место,
	               |	МестаДоставки.ЭтоЗадача
	               |ПОМЕСТИТЬ ТаблицаМест
	               |ИЗ
	               |	Справочник.МестаДоставки КАК МестаДоставки
	               |ГДЕ
	               |	МестаДоставки.Ссылка В(&МассивМест)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтгрузкаМестСрезПоследних.Период,
	               |	ОтгрузкаМестСрезПоследних.Склад,
	               |	ОтгрузкаМестСрезПоследних.Место,
	               |	ОтгрузкаМестСрезПоследних.СтатусОтгрузки,
	               |	ОтгрузкаМестСрезПоследних.ВариантМаршрута
	               |ПОМЕСТИТЬ ТаблицаМестДвижения
	               |ИЗ
	               |	РегистрСведений.ОтгрузкаМест.СрезПоследних(
	               |			,
	               |			Место В
	               |				(ВЫБРАТЬ
	               |					ТаблицаМест.Место
	               |				ИЗ
	               |					ТаблицаМест КАК ТаблицаМест
	               |				ГДЕ
	               |					НЕ ТаблицаМест.ЭтоЗадача)) КАК ОтгрузкаМестСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ТаблицаМестДвижения.Период) КАК Период,
	               |	ТаблицаМестДвижения.Место
	               |ПОМЕСТИТЬ ПериодыПоМестам
	               |ИЗ
	               |	ТаблицаМестДвижения КАК ТаблицаМестДвижения
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаМестДвижения.Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаМестДвижения.Склад,
	               |	ТаблицаМестДвижения.Место,
	               |	ТаблицаМестДвижения.СтатусОтгрузки,
	               |	ТаблицаМестДвижения.ВариантМаршрута
	               |ИЗ
	               |	ТаблицаМестДвижения КАК ТаблицаМестДвижения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыПоМестам КАК ПериодыПоМестам
	               |		ПО ТаблицаМестДвижения.Период = ПериодыПоМестам.Период
	               |			И ТаблицаМестДвижения.Место = ПериодыПоМестам.Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗадачиНаМаршрутСрезПоследних.Место,
	               |	ЗадачиНаМаршрутСрезПоследних.СтатусОтгрузки,
	               |	ЗадачиНаМаршрутСрезПоследних.ВариантМаршрута,
	               |	ЗадачиНаМаршрутСрезПоследних.Отправитель,
	               |	ЗадачиНаМаршрутСрезПоследних.АдресОтправителя
	               |ИЗ
	               |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(
	               |			,
	               |			Место В
	               |				(ВЫБРАТЬ
	               |					ТаблицаМест.Место
	               |				ИЗ
	               |					ТаблицаМест КАК ТаблицаМест
	               |				ГДЕ
	               |					ТаблицаМест.ЭтоЗадача)) КАК ЗадачиНаМаршрутСрезПоследних";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВыполнениеОтгрузкиМест()

&НаСервере
Процедура УстановитьБлокировкиНаРегистрыОтгрузки(РезультатЗапросаМеста, РезультатЗапросаЗадачи)

	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки 					= Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
 	ЭлементБлокировки.ИсточникДанных 	= РезультатЗапросаМеста;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Место", "Место");
	
	ЭлементБлокировки 					= Блокировка.Добавить("РегистрСведений.ЗадачиНаМаршрут");
	ЭлементБлокировки.Режим 			= РежимБлокировкиДанных.Исключительный;
 	ЭлементБлокировки.ИсточникДанных 	= РезультатЗапросаЗадачи;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Место", "Место");
	
	Блокировка.Заблокировать();

КонецПроцедуры // УстановитьБлокировкиНаРегистрыОтгрузки()

&НаСервере
Функция ВыполнитьОбработкуМест(ВыборкаМеста, ТипОперации)

	РезультатОбработки 				= Истина;
	Период 							= ТекущаяДатаСеанса();
	Пользователь    				= ПараметрыСеанса.ТекущийПользователь;
	СтатусКомплектацияЗавершена     = Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена;
	СтатусМестоПогружено    		= Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину;
	СтатусМестоОтгружено			= Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру;
	
	Пока ВыборкаМеста.Следующий() Цикл
		
		Если ТипОперации = "ПогрузитьВМашину" Тогда		
			Если ВыборкаМеста.СтатусОтгрузки = СтатусКомплектацияЗавершена Тогда
				УстановитьСтатусМеста(Период, Пользователь, СтатусМестоПогружено, ВыборкаМеста);
			Иначе
				РезультатОбработки = Ложь;
				ВывестиОшибкуИзмененияСтатусаМеста(ВыборкаМеста.Место);
			КонецЕсли;			
		КонецЕсли;
		
		Если ТипОперации = "ОтгрузитьПартнеру" Тогда
			Если ВыборкаМеста.СтатусОтгрузки = СтатусКомплектацияЗавершена Тогда
				УстановитьСтатусМеста(Период-1, Пользователь, СтатусМестоПогружено, ВыборкаМеста);
				УстановитьСтатусМеста(Период, Пользователь, СтатусМестоОтгружено, ВыборкаМеста);
			ИначеЕсли ВыборкаМеста.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ПогруженоВМашину Тогда
				УстановитьСтатусМеста(Период, Пользователь, СтатусМестоОтгружено, ВыборкаМеста);
			Иначе
				РезультатОбработки = Ложь;
				ВывестиОшибкуИзмененияСтатусаМеста(ВыборкаМеста.Место);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОбработки;

КонецФункции // ВыполнитьОбработкуМест()
 
&НаСервере
Процедура УстановитьСтатусМеста(Период, Пользователь, СтатусОтгрузки, ВыборкаМеста)

	НаборЗаписей = РегистрыСведений.ОтгрузкаМест.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Склад.Установить(ВыборкаМеста.Склад);
	НаборЗаписей.Отбор.Место.Установить(ВыборкаМеста.Место);
	
	Запись = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(Запись, ВыборкаМеста);
	Запись.Период 			= Период;
	Запись.СтатусОтгрузки 	= СтатусОтгрузки;
	Запись.Пользователь 	= Пользователь;
	
	НаборЗаписей.Записать();

КонецПроцедуры // УстановитьСтатусМеста()
  
&НаСервере
Процедура ВывестиОшибкуИзмененияСтатусаМеста(МестоСсылка)
	СтрокаСообщения = НСтр("ru='Не удалось выполнить операцию с местом %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, МестоСсылка);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, МестоСсылка);
КонецПроцедуры // ВывестиОшибкуИзмененияСтатусаМеста()

&НаСервере
Функция ВыполнитьОбработкуЗадач(ВыборкаЗадачи, ТипОперации)

	РезультатОбработки 				= Истина;
	Период 							= ТекущаяДатаСеанса();
	Пользователь    				= ПараметрыСеанса.ТекущийПользователь;
	СтатусЗадачаПоставлена		 	= Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена;
	СтатусЗадачаВПроцессе    		= Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения;
	СтатусЗадачаВыполнена			= Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена;
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		Если ТипОперации = "ПогрузитьВМашину" Тогда		
			Если ВыборкаЗадачи.СтатусОтгрузки = СтатусЗадачаПоставлена Тогда
				УстановитьСтатусЗадачи(Период, Пользователь, СтатусЗадачаВПроцессе, ВыборкаЗадачи);
			Иначе
				РезультатОбработки = Ложь;
				ВывестиОшибкуИзмененияСтатусаМеста(ВыборкаЗадачи.Место);
			КонецЕсли;			
		КонецЕсли;
		
		Если ТипОперации = "ОтгрузитьПартнеру" Тогда
			Если ВыборкаЗадачи.СтатусОтгрузки = СтатусЗадачаПоставлена Тогда
				УстановитьСтатусЗадачи(Период-1, Пользователь, СтатусЗадачаВПроцессе, ВыборкаЗадачи);
				УстановитьСтатусЗадачи(Период, Пользователь, СтатусЗадачаВыполнена, ВыборкаЗадачи);
			ИначеЕсли ВыборкаЗадачи.СтатусОтгрузки = СтатусЗадачаВПроцессе Тогда
				УстановитьСтатусЗадачи(Период, Пользователь, СтатусЗадачаВыполнена, ВыборкаЗадачи);
			Иначе
				РезультатОбработки = Ложь;
				ВывестиОшибкуИзмененияСтатусаМеста(ВыборкаЗадачи.Место);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОбработки;

КонецФункции // ВыполнитьОбработкуЗадач()
 
&НаСервере
Процедура УстановитьСтатусЗадачи(Период, Пользователь, СтатусОтгрузки, ВыборкаЗадачи)

	НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Место.Установить(ВыборкаЗадачи.Место);
	
	Запись = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗадачи);
	Запись.Период 			= Период;
	Запись.СтатусОтгрузки 	= СтатусОтгрузки;
	Запись.Пользователь 	= Пользователь;
	
	НаборЗаписей.Записать();

КонецПроцедуры // УстановитьСтатусМеста()




// Работа со списком перемещений

&НаСервере
Процедура ЗагрузитьСписокПеремещений(ДокументПеремещение)
	
    ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокПеремещений(СписокПеремещений, Склад, ТолькоТранзитныеПеремещения);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ВостановитьСтрокуТаблицы(СписокПеремещений, Элементы.СписокПеремещений, ДокументПеремещение, "Документ");
	
КонецПроцедуры // ЗагрузитьСписокПеремещений()

&НаСервере
Процедура ЗагрузитьСписокНоменклатурыПеремещения(Документ, ТранзитныеПеремещения, ЗаказНаПеремещение)
    ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокНоменклатурыПеремещений(СписокНоменклатуры, Документ, Склад);
	ОбработкаОбъект.СформироватьГрафическуюСхемуПеремещения(МаршрутМеста, Документ, ТранзитныеПеремещения, ЗаказНаПеремещение);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗагрузитьСписокНоменклатурыПеремещения()



// Работа со списком задач

&НаСервере
Процедура ЗагрузитьСписокЗадач(ЗадачаСсылка)

	ОбработкаОбъект	= РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокЗадач(СписокЗадач, Склад, ТолькоТранзитныеПеремещения);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ВостановитьСтрокуТаблицы(СписокЗадач, Элементы.СписокЗадач, ЗадачаСсылка, "Задача");
	
КонецПроцедуры // ЗагрузитьСписокЗадач()

&НаСервере
Процедура ЗагрузитьТекстЗадачи(ЗадачаСсылка, ТранзитнаяЗадача)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстЗадачи 	= ОбработкаОбъект.ПолучитьТекстЗадачи(ЗадачаСсылка);
	ОбработкаОбъект.СформироватьГрафическуюСхемуЗадачи(МаршрутМеста, ЗадачаСсылка, ТранзитнаяЗадача);
    ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗагрузитьТекстЗадачи()



// Работа со списком оплат

&НаКлиенте
Процедура ЗагрузитьСписокОплатНаКлиенте()
	
	ТекущиеДанные = Элементы.ТаблицаОплат.ТекущиеДанные;
	Партнер		  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Партнер);
	Валюта		  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Валюта);
	Период		  = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Период);
	
	ЗагрузитьСписокОплатНаСервере(Партнер, Период, Валюта);
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокОплатНаСервере(Партнер=Неопределено, Период = Неопределено, Валюта=Неопределено)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокОплат(ТаблицаОплат, ДокументПоездка);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	СтруктураПоиска = Новый Структура("Партнер, Период, Валюта", Партнер, Период, Валюта);
	РезультатПоиска = ТаблицаОплат.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ТаблицаОплат.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПринятьОплатуНаСервере(Партнер, Период, Валюта, Сумма)

	ОбработкаОбъект  = РеквизитФормыВЗначение("Объект");
	ОбновлятьТаблицу = ОбработкаОбъект.ПринятьОплату(ДокументПоездка, Партнер, Период, Валюта, Сумма);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если ОбновлятьТаблицу Тогда
		ЗагрузитьСписокОплатНаСервере(Партнер, Период, Валюта);
	КонецЕсли;

КонецПроцедуры // ПринятьОплатуНаСервере()

&НаСервере
Функция ПолучитьРеквизитыПриходногоОрдера(Партнер, Валюта, Сумма)

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	Форма     = Новый Структура;
	Форма.Вставить("СуммаДокумента", 					Сумма);
	Форма.Вставить("ХозяйственнаяОперация", 			Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	Форма.Вставить("ПринятоОт", 						Строка(Партнер));
	Форма.Вставить("Контрагент", 						ПолучитьКонтрагента(Партнер));
	Форма.Вставить("Валюта", 							Валюта);
	Форма.Вставить("Кассир", 							ПараметрыСеанса.ТекущийПользователь);
	Форма.Вставить("СтатьяДвиженияДенежныхСредств",		Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента);
	Форма.Вставить("ВТомЧислеНДС",						"Без налога (НДС)");
	
	Договор = ПолучитьДоговорКонтрагента(Форма.Контрагент, Валюта);
	
	РасшифровкаПлатежа = Новый Структура;
	РасшифровкаПлатежа.Вставить("Партнер", 					Партнер);
	РасшифровкаПлатежа.Вставить("ОснованиеПлатежа", 		Договор);
	РасшифровкаПлатежа.Вставить("Заказ", 					Договор);
	РасшифровкаПлатежа.Вставить("Сумма", 					Сумма);
	
	Если Договор <> Неопределено Тогда
		РасшифровкаПлатежа.Вставить("ВалютаВзаиморасчетов", Договор.ВалютаВзаиморасчетов);
		РасшифровкаПлатежа.Вставить("СуммаВзаиморасчетов", Сумма * ПолучитьКурсВзаиморасчетов(Валюта, Договор.ВалютаВзаиморасчетов));
	КонецЕсли;
	
	Результат.Вставить("Форма", 				Форма);
	Результат.Вставить("РасшифровкаПлатежа", 	РасшифровкаПлатежа);
	
	СтруктураПоиска = Новый Структура("Валюта", Валюта);
	РезультатПоиска = ТаблицаНастроекОплат.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() <= 0 Тогда
		Результат.Вставить("Касса", Неопределено);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", , Неопределено);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяКасса", ,  Неопределено);
	Иначе 
		Результат.Вставить("Касса", РезультатПоиска[0].Касса);
		Касса = РезультатПоиска[0].Касса;
		Организация = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Организация;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", , Организация);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяКасса", ,  Касса);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьРеквизитыПриходногоОрдера()

&НаСервереБезКонтекста
Функция ПолучитьКонтрагента(Партнер)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты
	                      |ГДЕ
	                      |	Партнер = &Партнер
	                      |	И НЕ ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции // ПолучитьКонтрагента()

&НаСервереБезКонтекста
Функция ПолучитьДоговорКонтрагента(Контрагент, Валюта)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов
	                      |ГДЕ
	                      |	Контрагент 				= &Контрагент
						  |	И ВалютаВзаиморасчетов  = &Валюта
	                      |	И ТипДоговора 			= ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)");
						  
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Валюта", 	Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
			
	Возврат Выборка.Ссылка; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсВзаиморасчетов(Валюта, ВалютаВзаиморасчетов)

	КурсВалюты 			= 0;
	КурсВзаиморасчетов  = 1;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Валюта,
	                      |	Курс / Кратность КАК Курс
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних 
	                      |ГДЕ
	                      |	Валюта = &Валюта");
						  
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КурсВалюты = Выборка.Курс;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Валюта,
	                      |	Курс / Кратность КАК Курс
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних 
	                      |ГДЕ
	                      |	Валюта = &Валюта");
						  
	Запрос.УстановитьПараметр("Валюта", ВалютаВзаиморасчетов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КурсВзаиморасчетов = Выборка.Курс;
	КонецЕсли;
	
	Возврат КурсВалюты / КурсВзаиморасчетов;

КонецФункции // ПолучитьСуммуВзаиМорасчетов()



// Работа из дополнительными настройками обработки

&НаСервере
Процедура ЗагрузитьДополнительныеНастройки()

	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработкиХьюстон", , , "ДополнительныеНастройкиОбработкиХьюстон");
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("ТаблицаУправленияДоступомККомандамОтгрузки") Тогда
		ТаблицаУправленияДоступомККомандамОтгрузки.Загрузить(Настройки.ТаблицаУправленияДоступомККомандамОтгрузки);
	КонецЕсли;

КонецПроцедуры // ЗагрузитьДополнительныеНастройки()
 
&НаСервере
Процедура СохранитьДополнительныеНастройки()

	Настройки = Новый Структура;
	
	Настройки.Вставить("ТаблицаУправленияДоступомККомандамОтгрузки", ТаблицаУправленияДоступомККомандамОтгрузки.Выгрузить());
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиОбработкиХьюстон", , Настройки, "Дополнительные настройки обработки Хьюстон", "ДополнительныеНастройкиОбработкиХьюстон");

КонецПроцедуры // СохранитьДополнительныеНастройки()


&НаСервере
Процедура УстановитьВидимостьКнопокОтгрузки()

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	СтруктураПоиска		= Новый Структура("Пользователь", ТекущийПользователь);
	РезультатПоиска		= ТаблицаУправленияДоступомККомандамОтгрузки.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		Элементы.МестаВПоездкеКонтекстноеМенюПогрузитьМестоВМашину.Видимость  = Ложь;
		Элементы.МестаВПоездкеКонтекстноеМенюОтгрузитьМестоПартнеру.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКнопокОтгрузки() 
 
#КонецОбласти






                                                    
                                                                                        

 
 

