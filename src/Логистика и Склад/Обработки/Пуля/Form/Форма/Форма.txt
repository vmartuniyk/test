#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбновитьТаблицыФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Ответ = Вопрос(НСтр("ru='Завершить работу с обработкой?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПУЛЯ_ИзменениеКоличестваШтрихкодов" Тогда	
		ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
			ТекущаяНоменклатура  = ?(ТДСписокНоменклатуры=Неопределено, Неопределено, ТДСписокНоменклатуры.Номенклатура);
			СформироватьСписокНоменклатурыНаСервере(ТекущиеДанные.Отправитель, ТекущаяНоменклатура);
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "Запись_Номенклатура" Тогда
		ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
		Если ТДПулПриемки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОбновитьИндексКартинкиСерийныйНомер(ТДПулПриемки.Отправитель, Источник);
	КонецЕсли;
	Если ИмяСобытия = "ОкончаниеОбработкиТранзитнойЗадачи" ИЛИ ИмяСобытия = "ОкончаниеОбработкиТранзитногоМеста" Тогда
		ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
		    Возврат;					
		КонецЕсли; 
		Если ТипЗнч(ТекущиеДанные.Отправитель) <> Тип("Строка") Тогда
		    Возврат;
		КонецЕсли; 
		СформироватьПулНоменклатурыНаСервере(ТекущиеДанные.Отправитель);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийЭлеметовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Отправитель   = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Отправитель);
	Приоритет     = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Приоритет);
	СформироватьПулПриемкиНаСервере(Отправитель, Приоритет);
КонецПроцедуры

#КонецОбласти


#Область ОбработчкиСобытийТаблицыФормы_ПулПриемки

&НаКлиенте
Процедура ПулПриемкиПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Разрешение = ПолучитьРазрешениеНаДобавлениеНоменклатуры();
	Если Разрешение Тогда
		Элементы.ГруппаПулСтраницы.ТекущаяСтраница 		= Элементы.ГруппаПулНоменклатуры;
		Элементы.ГруппаСтраницыТовары.ТекущаяСтраница 	= Элементы.ГруппаСтраницаТовары;
	Иначе
		Элементы.ГруппаПулСтраницы.ТекущаяСтраница 		= Элементы.ГруппаПулМеста;
		Элементы.ГруппаСтраницыТовары.ТекущаяСтраница 	= Элементы.ГруппаСтраницаМеста;
	КонецЕсли; 
	СформироватьПулНоменклатурыНаСервере(ТекущиеДанные.Отправитель);
КонецПроцедуры

&НаКлиенте
Процедура ПулПриемкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;			
	КонецЕсли; 
	Если ТипЗнч(ТекущиеДанные.Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		СписокДокументов  = ПолучитьСписокДокументовПоставщика(ТекущиеДанные.Отправитель, Склад);
		ВыбранныйДокумент = СписокДокументов.ВыбратьЭлемент(НСтр("ru='Выберите документ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Если ВыбранныйДокумент <> Неопределено Тогда
			ОткрытьЗначение(ВыбранныйДокумент.Значение);
		КонецЕсли; 
	Иначе
		ОткрытьЗначение(ТекущиеДанные.Отправитель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборПоМесту(Команда)
	ОтборПоДокументам.Очистить();
	Элементы.ПулПриемкиОтключитьОтборПоМесту.Пометка = Ложь;
	ОбновитьТаблицыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПулПриемки(Команда)
	ОбновитьТаблицыНаКлиенте();
	ПулПриемкиСортировкаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователей(Команда)
	
	ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователей = ПолучитьСписокПользователей(ТекущиеДанные.Отправитель, Склад);
	
	Если МассивПользователей.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Пользователи еще комплектуют отправителя.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Иначе
		ОткрытьЗначение(МассивПользователей);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицыФормы_ПулНоменклатуры

&НаКлиенте
Процедура ПулНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьЗначение(ТекущиеДанные.Номенклатура); 
КонецПроцедуры

&НаКлиенте
Процедура ПулНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Разрешение = ПолучитьРазрешениеНаДобавлениеНоменклатуры();
	Если Разрешение Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументов(Команда)
	
	СтруктураПараметров = Новый Структура("Отправитель, Номенклатура, Характеристика, Склад");
	
	Если Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Если ТДПулНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Склад", Склад);
	СтруктураПараметров.Вставить("Отправитель", ТДПулПриемки.Отправитель);
	СтруктураПараметров.Вставить("Номенклатура", ТДПулНоменклатуры.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика", ТДПулНоменклатуры.Характеристика);
	
	СписокДокументов  = ПолучитьСписокДокументовПриемки(СтруктураПараметров);
	ВыбранныйДокумент = СписокДокументов.ВыбратьЭлемент(НСтр("ru='Выберите документ.'"));
	
	Если ВыбранныйДокумент <> Неопределено Тогда
		ОткрытьЗначение(ВыбранныйДокумент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПулНоменклатуры(Команда)
	ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;					
	КонецЕсли; 
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	ТДНоменклатура	  =?(ТДПулНоменклатуры=Неопределено, Неопределено, ТДПулНоменклатуры.Номенклатура);
	СформироватьПулНоменклатурыНаСервере(ТекущиеДанные.Отправитель, ТДНоменклатура);
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийТаблицыФормы_СписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Разрешение = ПолучитьРазрешениеНаДобавлениеНоменклатуры();
	Если Не Разрешение Тогда
	    Возврат;			
	КонецЕсли; 
	
	Ответ = Вопрос(НСтр("ru='Удалить стороку рабочей области?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Номенклатура	  = ?(ТДПулНоменклатуры=Неопределено, Неопределено, ТДПулНоменклатуры.Номенклатура);
	ВыделенныеСтроки  = Элемент.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда 
		УдалитьНоменклатуруИзСпискаНаСервере(ТДПулПриемки.Отправитель, Номенклатура, ВыделенныеСтроки);
	КонецЕсли;
	
	УстановитьИндексКартинкиПулПриемки();
	
КонецПроцедуры

&НаКлиенте
Процедура СканерШтрихкодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Разрешение = ПолучитьРазрешениеНаДобавлениеНоменклатуры();
	Если Не Разрешение Тогда
		Возврат;
	КонецЕсли;
	
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Номенклатура	  = ?(ТДПулНоменклатуры=Неопределено, Неопределено, ТДПулНоменклатуры.Номенклатура);
	РезультатПроверки = ПроверитьШтрихкодНаСервере(Текст);
	
	Если РезультатПроверки Тогда
		ДобавитьНоменклатуруПоШтрихкодуНаСервере(ТДПулПриемки.Отправитель, Номенклатура, Текст);
	Иначе
		ТекстСообщения = НСтр("ru='Штрихкод %1 не зарегестрирован в базе.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Текст);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СканерШтрихкод");
	КонецЕсли;
	
	УстановитьИндексКартинкиПулПриемки();
	
	СканерШтрихкод = "";
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПеретаскивания.Значение[0].Свойство("ПулНоменклатурыПеретаскивание") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПеретаскивания.Значение[0].Свойство("ПулНоменклатурыПеретаскивание") Тогда
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	Для каждого СтрокаТаблицы ИЗ ПараметрыПеретаскивания.Значение Цикл
		МассивИдентификаторов.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	ТДПулПриемки 	  = Элементы.ПулПриемки.ТекущиеДанные;
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Номенклатура	  = ?(ТДПулНоменклатуры=Неопределено, Неопределено, ТДПулНоменклатуры.Номенклатура);
	
	Если ТДПулПриемки <> Неопределено Тогда
		ДобавитьМассивНоменклатурНаСервере(ТДПулПриемки.Отправитель, Номенклатура, МассивИдентификаторов);
		УстановитьИндексКартинкиПулПриемки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыКоличествоПриИзменении(Элемент)
	
	ТДПулПриемки 	 	 = Элементы.ПулПриемки.ТекущиеДанные;
	ТДПулНоменклатуры 	 = Элементы.ПулНоменклатуры.ТекущиеДанные;
	ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	НоменклатураПул 	= ?(ТДПулНоменклатуры=Неопределено, Неопределено, ТДПулНоменклатуры.Номенклатура);
	НоменклатураСписок 	= ?(ТДСписокНоменклатуры=Неопределено, Неопределено, ТДСписокНоменклатуры.Номенклатура);
	
	Если ТДПулПриемки <> Неопределено Тогда
		ОбработатьИзменениеКоличестваНоменклатурыНаСервере(ТДПулПриемки.Отправитель, НоменклатураПул, НоменклатураСписок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СерийныеНомера.Очистить();
		ТекстСерийныеНомера     = НСтр("ru='Выбрано серийных номеров - %1'");
		ВыбранныеСерийныеНомера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерийныеНомера, 0);
		УстановитьОтборыДинамическихСписков(Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
		Элементы.ГруппаСтраницыСерийныеНомера.ТекущаяСтраница = Элементы.ГруппаСерийныеНомераТаблица;
		ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
		Если ТДПулПриемки = Неопределено Тогда
			УстановитьОтборыДинамическихСписков(Неопределено, Неопределено);
			Возврат;
		КонецЕсли;
		ЗагрузитьСписокСерийныхНомеровНаСервере(ТДПулПриемки.Отправитель, ТекущиеДанные.Номенклатура);
	Иначе
		Элементы.ГруппаСтраницыСерийныеНомера.ТекущаяСтраница = Элементы.ГруппаСерийныеНомераНеИспользуются;
	КонецЕсли;
	УстановитьОтборыДинамическихСписков(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдер(Команда)
	ОчиститьСообщения();
	Если СписокНоменклатуры.Количество() = 0 Тогда
	    Возврат;			
	КонецЕсли; 
	ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;			
	КонецЕсли; 
	МассивДокументов = СоздатьОрдерНаСервере(ТекущиеДанные.Отправитель, ТекущиеДанные.Приоритет);
	Если ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		Для каждого ДокументСсылка Из МассивДокументов Цикл
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументСсылка);
			ПоказатьОповещениеПользователя(
							НСтр("ru='Изменение:'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
							НавигационнаяСсылка,
							Строка(ДокументСсылка),
							БиблиотекаКартинок.Информация32); 
			ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
		КонецЦикла; 
		СписокНоменклатуры.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуру(Команда)
	ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;			
	КонецЕсли;
	ЗаполнитьНоменклатуруНаСервере(ТекущиеДанные.Отправитель);
	ПулПриемкиСортировкаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЯчейку(Команда)
	
	Перем Ячейка; 
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	    Возврат;			
	КонецЕсли; 
	
	РезультатВвода = ВвестиЗначение(Ячейка, НСтр("ru='Введите складскую ячейку.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), Тип("СправочникСсылка.СкладскиеЯчейки"));
	Если Не РезультатВвода Тогда
	    Возврат;
	КонецЕсли; 
	
	РезультатЗаписи = НазначитьСкладскуюЯчейкуНаСервере(Элементы.СписокНоменклатуры.ВыделенныеСтроки, Ячейка);
	Если РезультатЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
				НСтр("ru='Номенклатура размещена по ячейкам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПолучитьНавигационнуюСсылку(Ячейка),
				Строка(Ячейка),
				БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчкиСобытийТаблицыФормы_СерийныеНомера

&НаКлиенте
Процедура СканерСерийныйНомерПриИзменении(Элемент)
	
	Если ПустаяСтрока(СканерСерийныйНомер) Тогда
		Предупреждение(НСтр("ru='Серийный номер не может быть пустым!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Предупреждение(НСтр("ru='Отправитель не найдена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Разрешение = ПолучитьРазрешениеНаДобавлениеНоменклатуры();
	Если Не Разрешение Тогда
	    Возврат;			
	КонецЕсли; 
	
	ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТДСписокНоменклатуры = Неопределено Тогда
		Предупреждение(НСтр("ru='Номенклатура не найдена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ДобавитьСерийныйНомерНаСервере(ТДПулПриемки.Отправитель, ТДСписокНоменклатуры.Номенклатура, СканерСерийныйНомер);
	
	СканерСерийныйНомер = "";
	ТекущийЭлемент		= Элементы.СканерСерийныйНомер;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерийныйНомерПриИзменении(Элемент)
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТДСписокНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницыСерийныеНомера.ТекущаяСтраница = Элементы.ГруппаСерийныеНомераТаблица;
	
	УстановитьИспользованиеСерийныхНомеровНаСервере(ТДПулПриемки.Отправитель, ТДСписокНоменклатуры.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Предупреждение(НСтр("ru='Отправитель не найдена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТДСписокНоменклатуры = Неопределено Тогда
		Предупреждение(НСтр("ru='Номенклатура не найдена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ТДСерийныеНомера = Элементы.СерийныеНомера.ТекущиеДанные;
	Если ТДСерийныеНомера = Неопределено Тогда
		Предупреждение(НСтр("ru='Серийный номер не найден!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	УдалитьСерийныйНомерНаСервере(ТДПулПриемки.Отправитель, ТДСписокНоменклатуры.Номенклатура, ТДСерийныеНомера.СерийныйНомер);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерийныеНомера(Команда)
	
	Если ПустаяСтрока(РучнойСерийныйНомер) Тогда
		Предупреждение(НСтр("ru='Серийный номер не может быть пустым!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Предупреждение(НСтр("ru='Отправитель не найдена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Разрешение = ПолучитьРазрешениеНаДобавлениеНоменклатуры();
	Если Не Разрешение Тогда
	    Возврат;			
	КонецЕсли; 
	
	ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТДСписокНоменклатуры = Неопределено Тогда
		Предупреждение(НСтр("ru='Номенклатура не найдена!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ДобавитьСерийныеНомераНаСервере(ТДПулПриемки.Отправитель, ТДСписокНоменклатуры.Номенклатура, РучнойСерийныйНомер, КоличествоСерийныхНомеров);
	
	КоличествоСерийныхНомеров = 0;
	РучнойСерийныйНомер		  = "";
	ТекущийЭлемент			  = Элементы.РучнойСерийныйНомер;
	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийТаблицыФормы_ПулМест

&НаКлиенте
Процедура ПулМестПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗагрузитьИнформациюОМестеНаСервере(ТекущиеДанные.Место);
КонецПроцедуры

&НаКлиенте
Процедура ПулМестВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Место, ПринтерQRКода", ТекущиеДанные.Место, ПринтерQR);
	ОткрытьФорму("ВнешняяОбработка.Пуля.Форма.ФормаТранзит", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СканерШтрихкодМестаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Текст) Тогда 
		ТекстСообщения = НСтр("ru='Код места не должен быть пустым.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СканерШтрихкод");
		СканерШтрихкод = "";
		ТекущийЭлемент = Элемент;
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьМестоНаСервере(Текст, Склад);
	Если РезультатПроверки = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Место %1 не найдено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Текст);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СканерШтрихкод");
		СканерШтрихкод = "";
		ТекущийЭлемент = Элемент;
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки.ЭтоТранзит Тогда
		ПараметрыФормы = Новый Структура("Место, ПринтерQRКода, ПринтерТоварногоЧека", РезультатПроверки.МестоСсылка, ПринтерQR, ПринтерТоварногоЧека);
		ОткрытьФорму("ВнешняяОбработка.Пуля.Форма.ФормаТранзит", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	Иначе
		Если РезультатПроверки.ЭтоЗадача Тогда
			Вопрос(НСтр("ru='Введенное место - задача, на экран будет выведена информацию по задаче.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ОК, 10);
			ЗагрузитьИнформациюОМестеНаСервере(РезультатПроверки.МестоСсылка);
		Иначе
			Если РезультатПроверки.МассивДокументов = Неопределено Тогда
				Вопрос(НСтр("ru='Документы по введенному месту не найдены, на экран будет выведена информация по месту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ОК, 10);
				ЗагрузитьИнформациюОМестеНаСервере(РезультатПроверки.МестоСсылка);
			Иначе
				Вопрос(НСтр("ru='Будет установлен отбор по документам по месту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), РежимДиалогаВопрос.ОК, 10);
				ОтборПоДокументам.ЗагрузитьЗначения(РезультатПроверки.МассивДокументов);
				Элементы.ПулПриемкиОтключитьОтборПоМесту.Пометка = Истина;
				ОбновитьТаблицыНаКлиенте();
			КонецЕсли;
		КонецЕсли;   
	КонецЕсли; 
	
	СканерШтрихкод = "";
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчкиСобытийТаблицыФормы_СписокШтрихкодов

&НаКлиенте
Процедура СписокШтрихкодовПослеУдаления(Элемент)
	Оповестить("ПУЛЯ_ИзменениеКоличестваШтрихкодов");
КонецПроцедуры

&НаКлиенте
Процедура СписокШтрихкодовОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Оповестить("ПУЛЯ_ИзменениеКоличестваШтрихкодов");
КонецПроцедуры

&НаКлиенте
Процедура ПечатьШтрихкода(Команда)
	
	ТекущиеДанные = Элементы.СписокШтрихкодов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТДСписокНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТДСписокНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;	
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Документ.ПриходныйОрдерНаТовары.ПустаяСсылка"));
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ПриходныйОрдерНаТовары_ПечатьШтрихкода", Ложь, Новый Структура("МассивДокументов, Номенклатура, Количество", ПараметрКоманды, ТДСписокНоменклатуры.Номенклатура, ТДСписокНоменклатуры.Количество));
		
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
		
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = "eti_shtrih";
		ТабличныйДокумент.Напечатать();
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицы(Команда)
	ОбновитьТаблицыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ОткрытьФорму("ВнешняяОбработка.Пуля.Форма.ФормаНастройки", , ЭтаФорма, Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	СтруктураПередачи	= ПолучитьИдентификаторИмяКолонки("ПулПриемки");
	ПолеСортировки 		= СтрЗаменить(СтруктураПередачи.Имя,"ПулПриемки", " ");
	ПорядокСортировки	= " УБЫВ"; 
	
	Если НЕ СтруктураПередачи.Отказ Тогда
		ПулПриемкиСортировкаНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПулПриемкиСортировкаНаСервере()
	Если ПолеСортировки = "" Или ПорядокСортировки = "" Тогда 
		Возврат;
	КонецЕсли;
	ПулПриемки.Сортировать(ПолеСортировки +ПорядокСортировки); 	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСерийныхНомеров(Команда)
	ОткрытьФорму("ВнешняяОбработка.Пуля.Форма.ФормаПечатиСерийныхНомеров", , , Новый УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции


#Область Клиентские_процедуры

&НаКлиенте
Процедура УстановитьИндексКартинкиПулПриемки()
    ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СписокНоменклатуры.Количество() = 0 Тогда
		ТекущиеДанные.ИндексКартинки = 0;
	Иначе
		ТекущиеДанные.ИндексКартинки = 2;
	КонецЕсли;
КонецПроцедуры // УстановитьИндексКартинкиПулПриемки()

&НаКлиенте
Функция ПолучитьРазрешениеНаДобавлениеНоменклатуры()
	ТДПулПриемки = Элементы.ПулПриемки.ТекущиеДанные;
	Если ТДПулПриемки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ТДПулПриемки.Отправитель) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ПолучитьРазрешениеНаДобавлениеНоменклатуры()

&НаКлиенте
Процедура ОбновитьТаблицыНаКлиенте()
	ТекущиеДанные = Элементы.ПулПриемки.ТекущиеДанные;
	Отправитель   = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Отправитель);
	Приоритет     = ?(ТекущиеДанные=Неопределено, Неопределено, ТекущиеДанные.Приоритет);
	ОбновитьТаблицыФормыНаСервере(Отправитель, Приоритет);
КонецПроцедуры // ОбновитьТаблицыНаКлиенте()

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонки("ПулПриемки");
	
	ПолеСортировки 		= СтрЗаменить(СтруктураПередачи.Имя,"ПулПриемки", " ");
	ПорядокСортировки	= " Возр"; 
	
	Если НЕ СтруктураПередачи.Отказ Тогда
		ПулПриемкиСортировкаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


#Область Процедуры_перенаправления_в_модуль_обработки

&НаСервере
Процедура ОбновитьТаблицыФормыНаСервере(знач Отправитель=Неопределено, знач Приоритет=Неопределено, знач НоменклатураПул=Неопределено, знач НоменклатураСписок=Неопределено)
	
	СформироватьПулПриемкиНаСервере(Отправитель, Приоритет);
	
	// Востановление строки
	СписокПараметров = Новый Соответствие;
	СписокПараметров.Вставить("Отправитель", Отправитель);
	ВостановитьТекущуюСтрокуТаблицы("ПулПриемки", СписокПараметров);
	
	СписокПараметров.Очистить();
	СписокПараметров.Вставить("Номенклатура", НоменклатураПул);
	ВостановитьТекущуюСтрокуТаблицы("ПулНоменклатуры", СписокПараметров);
	
	СписокПараметров.Вставить("Номенклатура", НоменклатураСписок);
	ВостановитьТекущуюСтрокуТаблицы("СписокНоменклатуры", СписокПараметров);
	
КонецПроцедуры // ОбновитьТаблицыФормыНаСервере()

&НаСервере
Процедура СформироватьПулПриемкиНаСервере(знач Отправитель, знач Порядок)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьПулПриемки(ЭтаФорма, Отправитель, Порядок, ОтборПоДокументам);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // СформироватьПулПриемкиНаСервере()

&НаСервере
Процедура СформироватьПулНоменклатурыНаСервере(знач Отправитель, знач Номенклатура=Неопределено)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьПулНоменклатуры(ЭтаФорма, Отправитель);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Если Номенклатура <> Неопределено Тогда
		СтруктураПараметров = Новый Соответствие;
		СтруктураПараметров.Вставить("Номенклатура", Номенклатура);
		ВостановитьТекущуюСтрокуТаблицы("ПулНоменклатуры", СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры // СформироватьПулНоменклатурыНаСервере()

&НаСервере
Процедура СформироватьСписокНоменклатурыНаСервере(знач Отправитель, знач Номенклатура)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьСписокНоменклатуры(ЭтаФорма, Отправитель);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// Востановление строки
	СписокПараметров = Новый Соответствие;
	СписокПараметров.Вставить("Номенклатура", Номенклатура);
	ВостановитьТекущуюСтрокуТаблицы("СписокНоменклатуры", СписокПараметров);
	
КонецПроцедуры // СформироватьСписокНоменклатурыНаСервере()

&НаСервере
Процедура ДобавитьНоменклатурупоШтрихкодуНаСервере(знач Отправитель, знач Номенклатура, знач Штрихкод)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьНаменклатуруПоШтрихкоду(ЭтаФорма, Отправитель, Штрихкод);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// Востановление строки
	СписокПараметров = Новый Соответствие;
	СписокПараметров.Вставить("Номенклатура", Номенклатура);
	ВостановитьТекущуюСтрокуТаблицы("ПулНоменклатуры", СписокПараметров);
	
КонецПроцедуры // ДобавитьНоменклатурупоШтрихкодуНаСервере()

&НаСервере
Процедура ДобавитьМассивНоменклатурНаСервере(знач Отправитель, знач Номенклатура, знач МассивИдентификаторов)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьМассивНоменклатур(ЭтаФорма, Отправитель, МассивИдентификаторов);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	СписокПараметров = Новый Соответствие;
	СписокПараметров.Вставить("Номенклатура", Номенклатура);
	ВостановитьТекущуюСтрокуТаблицы("ПулНоменклатуры", СписокПараметров);
	ВостановитьТекущуюСтрокуТаблицы("СписокНоменклатуры", СписокПараметров);
	
КонецПроцедуры // ДобавитьМассивНоменклатурНаСервере()

&НаСервере
Процедура ОбработатьИзменениеКоличестваНоменклатурыНаСервере(знач Отправитель, знач НоменклатураПул, знач НоменклатураСписок)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработатьИзменениеКоличестваНоменклатуры(ЭтаФорма, Отправитель);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// Востановление строки
	СписокПараметров = Новый Соответствие;
	СписокПараметров.Вставить("Номенклатура", НоменклатураПул);
	ВостановитьТекущуюСтрокуТаблицы("ПулНоменклатуры", СписокПараметров);
	СписокПараметров.Вставить("Номенклатура", НоменклатураСписок);
	ВостановитьТекущуюСтрокуТаблицы("СписокНоменклатуры", СписокПараметров);
	
КонецПроцедуры // ОбработатьИзменениеКоличестваНоменклатурыНаСервере()

&НаСервере
Процедура УдалитьНоменклатуруИзСпискаНаСервере(знач Отправитель, знач Номенклатура, знач МассивИдентификаторов)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.УдалитьНоменклатуруИзСписка(ЭтаФорма, Отправитель, МассивИдентификаторов);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");    	
	
	// Востановление строки
	СписокПараметров = Новый Соответствие;
	СписокПараметров.Вставить("Номенклатура", Номенклатура);
	ВостановитьТекущуюСтрокуТаблицы("ПулНоменклатуры", СписокПараметров);
	
КонецПроцедуры // УдалитьНоменклатуруИзСпискаНаСервере()

&НаСервере
Процедура УстановитьИспользованиеСерийныхНомеровНаСервере(знач Отправитель, знач Номенклатура)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.УстановитьИспользованиеСерийныхНомеров(Номенклатура, Истина);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ОбновитьИндексКартинкиСерийныйНомер(Отправитель, Номенклатура);
	
	СформироватьПулПриемкиНаСервере(Отправитель, 0);
		
	ИспользоватьСерийныйНомер = Ложь;

КонецПроцедуры // УстановитьИспользованиеСерийныхНомеровНаСервере()

&НаСервере
Процедура ЗагрузитьСписокСерийныхНомеровНаСервере(знач Отправитель, знач Номенклатура)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьСписокСерийныхНомеров(ЭтаФорма, Отправитель, Номенклатура);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗагрузитьСписокСерийныхНомеровНаСервере()

&НаСервере
Процедура ДобавитьСерийныйНомерНаСервере(знач Отправитель, знач Номенклатура, знач СтрокаСериныйНомер)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьСерийныйНомер(ЭтаФорма, Отправитель, Номенклатура, СтрокаСериныйНомер);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	ОбновитьИндексКартинкиСерийныйНомер(Отправитель, Номенклатура);
КонецПроцедуры // ДобавитьСерийныйНомерНаСервере()

&НаСервере
Процедура ДобавитьСерийныеНомераНаСервере(знач Отправитель, знач Номенклатура, знач СтрокаСериныйНомер, знач КоличествоНомеров)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ДобавитьСерийныеНомера(ЭтаФорма, Отправитель, Номенклатура, СтрокаСериныйНомер, КоличествоНомеров);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	ОбновитьИндексКартинкиСерийныйНомер(Отправитель, Номенклатура);
КонецПроцедуры // ДобавитьСерийныеНомераНаСервере()
 
&НаСервере
Процедура УдалитьСерийныйНомерНаСервере(знач Отправитель, знач Номенклатура, знач СериныйНомер)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.УдалитьСерийныйНомер(ЭтаФорма, Отправитель, Номенклатура, СериныйНомер);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	ОбновитьИндексКартинкиСерийныйНомер(Отправитель, Номенклатура);
КонецПроцедуры // УдалитьСерийныйНомерНаСервере()
 
&НаСервере
Процедура ОбновитьИндексКартинкиСерийныйНомер(знач Отправитель, знач Номенклатура)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИндексКартинки  = ОбработкаОбъект.ПолучитьКоличествоСерийныхНомеров(Склад, Отправитель, Номенклатура);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	СтруктураПоиска = Новый Структура("Номенклатура", Номенклатура);
	
	РезультатПоиска = ПулНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		РезультатПоиска[0].ИндексКартинки = ?(Номенклатура.ИспользоватьСерийныеНомера, 2, 0);
	КонецЕсли;
	
	РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		РезультатПоиска[0].ИндексКартинки = ИндексКартинки;
	КонецЕсли;

КонецПроцедуры // ОбновитьИндексКартинкиШтрихкодов()

&НаСервере
Процедура ЗагрузитьИнформациюОМестеНаСервере(знач Место)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьИнформациюОМесте(ЭтаФорма, Место);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ВывестиИнформациюПоМестуНаСервере()

&НаСервере
Функция СоздатьОрдерНаСервере(знач Отправитель, знач Приоритет)
	Возврат РеквизитФормыВЗначение("Объект").СоздатьПриходныйОрдер(ЭтаФорма, Отправитель, Приоритет, ОтборПоДокументам);
КонецФункции // СоздатьОрдерНаСервере()

&НаСервере
Процедура ЗаполнитьНоменклатуруНаСервере(знач Отправитель)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьНоменклатуруИСерийныеНомера(ЭтаФорма, Отправитель, ОтборПоДокументам);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры // ЗаполнитьНоменклатуруНаСервере()

&НаСервере
Функция НазначитьСкладскуюЯчейкуНаСервере(знач МассивИдентификаторов, знач Ячейка)
	Возврат РеквизитФормыВЗначение("Объект").НазначитьСкладскуюЯчейкуНаСервере(ЭтаФорма, МассивИдентификаторов, Ячейка, Склад);
КонецФункции // НазначитьСкладскуюЯчейкуНаСервере()

#КонецОбласти 


#Область Вспомагательные_процедуры

&НаСервере
Процедура ВостановитьТекущуюСтрокуТаблицы(ИмяТаблицы, СписокПараметров)
		
	СтруктураПоиска = Новый Структура;
	Для каждого Параметр Из СписокПараметров Цикл
		СтруктураПоиска.Вставить(Параметр.Ключ, Параметр.Значение);   			
	КонецЦикла; 
	
	РезультатПоиска = ЭтаФорма[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы[ИмяТаблицы].ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ВостановитьТекущуюСтрокуТаблицы()
 
&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонки(ИмяКоллекцииЗначений)
	ТДанные  = Элементы[ИмяКоллекцииЗначений].ТекущиеДанные;
	ТЭлемент = Элементы[ИмяКоллекцииЗначений].ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
													КонецФункции
													
&НаСервере
Процедура УстановитьОтборыДинамическихСписков(Номенклатура, Характеристика)
	
	Если Номенклатура = Неопределено Тогда
	    Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");			
	КонецЕсли; 
	
	Если Характеристика = Неопределено Тогда
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихкодов.Отбор,
															"Номенклатура",
															Номенклатура,
															ВидСравненияКомпоновкиДанных.Равно,
															,
															Истина);
															
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихкодов.Отбор,
															"Характеристика",
															Характеристика,
															ВидСравненияКомпоновкиДанных.Равно,
															,
															Истина);
															
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЯчеек.Отбор,
															"Склад",
															Склад,
															ВидСравненияКомпоновкиДанных.Равно,
															,
															Истина);															
															
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЯчеек.Отбор,
															"Номенклатура",
															Номенклатура,
															ВидСравненияКомпоновкиДанных.Равно,
															,
															Истина);

КонецПроцедуры // УстановитьОтборыДинамическихСписков()

#КонецОбласти 


#Область Внеконтекстные_вспомогательные_вызовы

// Функция проверяет наличчие штрихкода в базе.
//
// Параметры
//  Штрихкод - Строка - штрихкод введенный пользователем.
//
// Возвращаемое значение:
//  Булево - Истина - штрихкод существует, Ложь - штрихкод не найден.
//
&НаСервереБезКонтекста
Функция ПроверитьШтрихкодНаСервере(знач Штрихкод)
	УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	Номенклатура,
                          |	Характеристика
                          |ИЗ
                          |	РегистрСведений.ШтрихкодыНоменклатуры 
                          |ГДЕ
                          |	Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции // ПроверитьШтрихкодНаСервере()

&НаСервереБезКонтекста
Функция ПроверитьМестоНаСервере(знач Код, знач Склад)

	УстановитьПривилегированныйРежим(Истина);
	
	МестоСсылка = ПолучитьМестоПоКоду(Код);
	Если МестоСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МестоСсылка = ПроверитьЗадачиОтВодителя(МестоСсылка);
	Если МестоСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	
	Если МестоСсылка.ЭтоЗадача Тогда
		МассивДокументов = Неопределено;
	Иначе
	    МассивДокументов = ПолучитьДокументыПоМесту(МестоСсылка, Склад);		
	КонецЕсли;
	
	Результат = Новый Структура("МестоСсылка, ЭтоТранзит, ЭтоЗадача, МассивДокументов", МестоСсылка, МестоСсылка.Транзит, МестоСсылка.ЭтоЗадача, МассивДокументов);
	
	Возврат Результат;

КонецФункции // ПроверитьМестоНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьМестоПоКоду(знач Код)

	КодМеста 	= Прав("000000000000000" + Код, 15);
	МестоСсылка = Справочники.МестаДоставки.НайтиПоКоду(КодМеста);
	
	Если ПустаяСтрока(МестоСсылка.ВерсияДанных) Тогда
	    Возврат Неопределено;			                    
	КонецЕсли; 
	
	Возврат МестоСсылка;

КонецФункции // ПолучитьМестоПоКоду()

&НаСервереБезКонтекста
Функция ПроверитьЗадачиОтВодителя(знач Место)

	Если Место.Владелец <> Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор("2ff630f2-4748-11e0-9f98-001517115d85")) Тогда
		Возврат Место;
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка
	                      |ИЗ
	                      |	Справочник.МестаДоставки
	                      |ГДЕ
	                      |	УникальныйИдентификатор = &УникальныйИдентификатор");
						
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Место.УникальныйИдентификатор());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Ссылка;

КонецФункции // ПроверитьЗадачиОтВодителя()

&НаСервереБезКонтекста
Функция ПолучитьДокументыПоМесту(знач Место, знач Склад)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	                      |			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	                      |		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	                      |			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	                      |	КОНЕЦ КАК Документ
	                      |ПОМЕСТИТЬ ДокументыПоМестуПредварительные
	                      |ИЗ
	                      |	РегистрСведений.МестаПоДокументам
	                      |ГДЕ
	                      |	Место = &Место
	                      |	И ВЫБОР
	                      |			КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	                      |				ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	                      |			КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	                      |				ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	                      |		КОНЕЦ ССЫЛКА Документ.ПеремещениеТоваров
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА Документ.ЗаказНаПеремещение = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	                      |			ТОГДА Документ
	                      |		ИНАЧЕ Документ.ЗаказНаПеремещение
	                      |	КОНЕЦ КАК Документ
	                      |ПОМЕСТИТЬ ДокументыПоМесту
	                      |ИЗ
	                      |	ДокументыПоМестуПредварительные
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДокументПоступления КАК Документ
	                      |ПОМЕСТИТЬ ДокументыПоступления
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
						  |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДокументыПоМесту.Документ КАК Документ
	                      |ИЗ
	                      |	ДокументыПоМесту КАК ДокументыПоМесту
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоступления КАК ДокументыПоступления
	                      |		ПО ДокументыПоМесту.Документ = ДокументыПоступления.Документ");
						  
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    МассивДокументов = Неопределено;
	Иначе
		МассивДокументов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ");
	КонецЕсли;
	
	Возврат МассивДокументов;

КонецФункции // ПолучитьДокументыПоМесту()



&НаСервереБезКонтекста
Функция ПолучитьСписокПользователей(знач Отправитель, знач Склад)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Пользователь.Наименование КАК Пользователи
	                      |ИЗ
	                      |	РегистрСведений.Пуля_ПриемкаТоваров
	                      |ГДЕ
	                      |	Склад 		  = &Склад
	                      |	И Отправитель = &Отправитель");
						  
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователи");

КонецФункции // ПолучитьСписокПользователей()
 


&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовПоставщика(знач Отправитель, знач Склад)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДокументПоступления КАК ДокументПоступления
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
	                      |ГДЕ
	                      |	ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер = &Отправитель
						  |
						  |ОБЪЕДИНИТЬ ВСЕ 
						  |
						  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДокументПоступления КАК ДокументПоступления
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
	                      |ГДЕ
	                      |	ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер = &Отправитель");
						  
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	СписокДокументов  = Новый СписокЗначений;
	
	СписокДокументов.ЗагрузитьЗначения(ТаблицаДокументов.ВыгрузитьКолонку("ДокументПоступления"));
	
	Возврат СписокДокументов;

КонецФункции // ПолучитьСписокДокументовПоставщика()

&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовПриемки(знач СтруктураПараметров)

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса 		= "";
	СписокДокументов    = Новый СписокЗначений;
	
	Если ТипЗнч(СтруктураПараметров.Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТекстЗапроса = "
				  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ДокументПоступления КАК ДокументПоступления
	              |ИЗ
	              |	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
				  |						ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер = &Отправитель
				  |						И Номенклатура 		= &Номенклатура
				  |						И Характеристика 	= &Характеристика
				  |						И Склад 			= &Склад)
				  |
				  |ОБЪЕДИНИТЬ ВСЕ 
				  |
				  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ДокументПоступления КАК ДокументПоступления
	              |ИЗ
	              |	РегистрНакопления.ТоварыКПоступлению.Остатки(,
				  |						ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер = &Отправитель
				  |						И Номенклатура 		= &Номенклатура
				  |						И Характеристика 	= &Характеристика
				  |						И Склад 			= &Склад)";
	Иначе
		ТекстЗапроса = "
				  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	ДокументПоступления КАК ДокументПоступления
	              |ИЗ
	              |	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
				  |						ДокументПоступления = &Отправитель
				  |						И Номенклатура 		= &Номенклатура
				  |						И Характеристика 	= &Характеристика
				  |						И Склад 			= &Склад)";
	КонецЕсли;
			  
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Отправитель", СтруктураПараметров.Отправитель);
	Запрос.УстановитьПараметр("Склад", СтруктураПараметров.Склад);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	СписокДокументов.ЗагрузитьЗначения(ТаблицаДокументов.ВыгрузитьКолонку("ДокументПоступления"));
	
	Возврат СписокДокументов;
	
КонецФункции // ПолучитьСписокДокументовПриемки()

&НаСервереБезКонтекста
Функция СформироватьКолекциюПечатныхФорм(ИмяИсточникаДанных, ПараметрыИсточника, ОбъектыПечати = Неопределено, ПараметрыВывода = Неопределено)
	Перем КоллекцияПечатныхФорм;
	ИсточникДанных = git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект(ИмяИсточникаДанных);		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");					
КонецФункции

#КонецОбласти 


#КонецОбласти 


