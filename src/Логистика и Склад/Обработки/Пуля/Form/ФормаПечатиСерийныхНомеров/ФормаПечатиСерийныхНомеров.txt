

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСписокПринтеров();
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяПринтераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйПринтер = СписокПринтеров.ВыбратьЭлемент(НСтр("ru='Выберите имя принтера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ВыбранныйПринтер = Неопределено Тогда
	    Возврат;	
	КонецЕсли; 
	
	ИмяПринтера = ВыбранныйПринтер.Значение;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СериныеНомера

&НаКлиенте
Процедура СерийныеНомераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСерийныйНомер(Команда)
	
	Если ПустаяСтрока(СерийныйНомер) Тогда
		Предупреждение(НСтр("ru='Серийный номер не может быть пустым!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ДобавитьСерийныйНомерНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСерийныеНомера(Команда)
	
	Если ПустаяСтрока(ИмяПринтера) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для печати серийных номеров необходимо указать принтер'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),, "ИмяПринтера");
		Возврат;
	КонецЕсли; 
	
	ТабДок 				= СформироватьПечатныеФормы();
	ТабДок.ИмяПринтера  = ИмяПринтера;
	ДиалогПечати		= ?(ВыводитьДиалогПечати, РежимИспользованияДиалогаПечати.Использовать, РежимИспользованияДиалогаПечати.НеИспользовать);
	ТабДок.Напечатать(ДиалогПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	ТабДок = СформироватьПечатныеФормы();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерийныеНомера(Команда)
	
	Если КоличествоСимволов = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить количество символов в серийном номере.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), , "КоличествоСимволов");
	КонецЕсли;
	
	Если КоличествоСерийныхНомеров = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить количество серийных новеров.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), , "КоличествоСерийныхНомеров");
	КонецЕсли;
	
	Если КоличествоСимволов = 0 ИЛИ КоличествоСерийныхНомеров = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСерийныеНомераПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерийныеНомера(Команда)
	
	Если КоличествоСимволов = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить количество символов в серийном номере.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), , "КоличествоСимволов");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСерийныеНомераГенератор();
	
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

// Заполняем список доступных принтеров на клиенте в реквизит формы «СписокПринтеров».
//
&НаКлиенте
Процедура СформироватьСписокПринтеров()
	
	ИмяКомпьютера=".";
	ServiceSet=GetCOMObject("winmgmts:{impersonationLevel=impersonate}!\\"+ИмяКомпьютера+"\root\cimv2");
	PrinterSet=ServiceSet.Get("Win32_Printer");
	
	Попытка
		mItems=ServiceSet.ExecQuery("Select * from Win32_Printer");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для каждого Принтер Из mItems Цикл
		НоваяСтрока 				= СписокПринтеров.Добавить();
		НоваяСтрока.Значение 		= Принтер.Name;
		НоваяСтрока.Представление	= Принтер.Name;
	КонецЦикла; 
	
КонецПроцедуры // СформироватьСписокПринтеров

// Добавляем один серийных номер для печати на этикетке с проверкой на дубли.
//
&НаСервере
Процедура ДобавитьСерийныйНомерНаСервере()

	СН = ВРег(СерийныйНомер);
	
	СтруктураПоиска  = Новый Структура("СерийныйНомер", СН);
	РезультатыПоиска = СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатыПоиска.Количество()=0 Тогда
		НоваяСтрока 			  = СерийныеНомера.Добавить();
		НоваяСтрока.СерийныйНомер = СН;
		СерийныйНомер			  = "";
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Серийный номер уже добавлен в таблицу печати.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),, "СерийныйНомер");
	КонецЕсли; 
	
	НадписьКоличествоСерийныхНомеров();
	
КонецПроцедуры // ДобавитьСерийныйНомерНаСервере() 

// Добавляет указанное количество серийных номеров с указанным префиксом.
//
&НаСервере
Процедура ЗаполнитьСерийныеНомераПоШаблону()

	СерийныеНомера.Очистить();
	
	Префикс 			= ВРег(СокрЛП(СерийныйНомерПрефикс));
	ДлинаПрефикса   	= СтрДлина(Префикс);
	МаксДлинаИтератора  = КоличествоСимволов - ДлинаПрефикса;
	
	Если МаксДлинаИтератора < 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Задайте большый размер серийного номера.'"));
		Возврат;
	КонецЕсли;
	
	МаксимальноеЧислоИтератора 	= Pow(10, МаксДлинаИтератора) - 1;
	КоличествоИтераций 			= Мин(МаксимальноеЧислоИтератора, КоличествоСерийныхНомеров);
	ШаблонСерийногоНомера		= ПолучитьШаблонСерийногоНомера();
	
	Для Индекс=1 По КоличествоИтераций Цикл 
		СуфиксНомера = ШаблонСерийногоНомера + Формат(Индекс, "ЧГ=0");
		СуфиксНомера = Прав(СуфиксНомера, МаксДлинаИтератора);
		НоваяСтрока  = СерийныеНомера.Добавить();
		НоваяСтрока.СерийныйНомер = Префикс + СуфиксНомера;
	КонецЦикла; 

	НадписьКоличествоСерийныхНомеров();
	
КонецПроцедуры // ЗаполнитьСерийныеНомераПоШаблону()

// Получает шаблон серийного номера в формате "000000" в зависимости от количества символов в серийном номере.
//
// Возвращаемое значение:
//   Строка - Шаблон серийного номера.
//
&НаСервере
Функция ПолучитьШаблонСерийногоНомера()
	Результат = "";
	Для Индекс=1 ПО КоличествоСимволов Цикл
		Результат = Результат + "0";
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ПолучитьШаблонСерийногоНомера()
 
// Формируем табличные документы из сериныйми номерами
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма из серийником
//
&НаСервере
Функция СформироватьПечатныеФормы()

	Макет   = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетСерийныйНомер");
	Область = Макет.ПолучитьОбласть("МакетСтрока|МакетКолонка");
	ТабДок  = Новый ТабличныйДокумент;
	
	Для каждого СтрокаТаблицы Из СерийныеНомера Цикл
		Область.Параметры.СерийныйНомер = СтрокаТаблицы.СерийныйНомер;
		ВывестиШтрихкодВТабличныйДокумент(Область, СтрокаТаблицы.СерийныйНомер);
		ТабДок.Вывести(Область);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла; 
	
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу  = 0;
	ТабДок.ПолеСлева  = 0;
	ТабДок.ПолеСправа = 0;
	
	ТабДок.РазмерКолонтитулаСверху = 0;
	ТабДок.РазмерКолонтитулаСнизу  = 0;
	
	Возврат ТабДок;

КонецФункции // СформироватьПечатныеФормы()

&НаСервере
Процедура ВывестиШтрихкодВТабличныйДокумент(ОбластьМакета, Штрихкод)
			
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        Штрихкод);
	ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    4);
	
	ОбластьМакета.Рисунки.КартинкаШтрихкода.Картинка = МенеджерОборудованияСервер.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецПроцедуры

// Формирует надпись о количестве сгенерированых серийных номеров
//
&НаСервере
Процедура НадписьКоличествоСерийныхНомеров()
	ПодвалСерийныхНомеров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Количество S/N - %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СерийныеНомера.Количество());
КонецПроцедуры // НадписьКоличествоСерийныхНомеров()

// Заполняем соответствие число - символ для использования генератора случайных чисел.
//
// Возвращаемое значение:
//   Соответствие - соответствие символов.
//
&НаСервере
Функция ЗаполнитьСоответствиеКодов()

	СоответствиеСимволов = Новый Соответствие;
	
	Для Индекс=0 По 35 Цикл
		Если Индекс > 9 Тогда
			СоответствиеСимволов.Вставить(Индекс, Символ(65+Индекс-10)); // Для символов от A до Z
		Иначе
			СоответствиеСимволов.Вставить(Индекс, Символ(48+Индекс)); // Для символов от 0 до 9
		КонецЕсли;
	КонецЦикла; 
	
	Возврат СоответствиеСимволов;

КонецФункции // ЗаполнитьСоответствиеКодов()

// Формируем список серийных номмеров с помощью генератора случайных чисел.
//
&НаСервере
Процедура ЗаполнитьСерийныеНомераГенератор()

	СерийныеНомера.Очистить();
	
	СоответствиеСимволов = ЗаполнитьСоответствиеКодов();
	ГенераторСЧ			 = Новый ГенераторСлучайныхЧисел;
	
	Для ИндексСН = 1 По КоличествоГенератор Цикл
		НовыйСН = "";
		Для ИндексСимвола = 0 По КоличествоСимволов-1 Цикл
			НовыйСН = НовыйСН + СоответствиеСимволов[ГенераторСЧ.СлучайноеЧисло(0, 35)];
		КонецЦикла;
		НоваяСтрока = СерийныеНомера.Добавить();
		НоваяСтрока.СерийныйНомер = НовыйСН;
	КонецЦикла;
	
	НадписьКоличествоСерийныхНомеров();

КонецПроцедуры // ЗаполнитьСерийныеНомераГенератор()

#КонецОбласти 