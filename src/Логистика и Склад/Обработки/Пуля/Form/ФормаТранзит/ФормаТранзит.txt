#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если Не Параметры.Место.Транзит Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Функционал доступен только для транзитных мест.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Место 			= Параметры.Место;
	ПринтерQRКода   = Параметры.ПринтерQRКода;
	
	Если Место.ЭтоЗадача Тогда
		ЗагрузитьИнформациюОЗадаче();
		РасчитатьМаршрутЗадачи();
		СкритьКомандиИПоляДляМест();		
	Иначе
		ЗагрузитьИнформациюОМесте();
		РасчитатьМаршрутМеста();
	КонецЕсли;
	
	ВыполнитьПеремещение = Истина;
	ОприходоватьМесто 	 = Истина;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОприходоватьМестоПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПеремещениеПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюЗадачу(Команда)	
	Если Маршрут.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле маршрут необходмо заполнить.'"),, "Маршрут");
		Возврат;
	КонецЕсли;
	Отказ = ПерезаписатьЗадачуНаМаршрут();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	НапечататьQRКод();
	Оповестить("ОкончаниеОбработкиТранзитнойЗадачи");
	СообщениеПользователюОЗавершершение();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВыполнитьПреобразование(Команда)
	
	Если ВыполнитьПеремещение И Маршрут.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле маршрут необходмо заполнить.'"),, "Маршрут");
		Возврат;
	КонецЕсли;
	
	Отказ = ВыполнитьПреобразованиеНаСервере();
	
	Если Не Отказ Тогда
		НапечататьQRКод();
		Оповестить("ОкончаниеОбработкиТранзитногоМеста");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Управление видимостью элементов

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Если ОприходоватьМесто Тогда
		Элементы.ВыполнитьПеремещение.Доступность = Истина;
	Иначе
		Элементы.ВыполнитьПеремещение.Доступность = Ложь;
		Элементы.Маршрут.Доступность 		      = Ложь;
		ВыполнитьПеремещение 					  = Ложь;
		Маршрут 								  = Неопределено;
	КонецЕсли;
	
	Если ВыполнитьПеремещение Тогда
		Элементы.Маршрут.Доступность = Истина;
	Иначе
		Элементы.Маршрут.Доступность = Ложь;
		Маршрут 					 = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

&НаСервере
Процедура СкритьКомандиИПоляДляМест()
	Элементы.ВыполнитьПеремещение.Видимость 			= Ложь;
	Элементы.ОприходоватьМесто.Видимость	 			= Ложь;
	Элементы.ФормаВыполнитьПреобразование.Видимость 	= Ложь;
	Элементы.ФормаСоздатьНовуюЗадачу.Видимость			= Истина;	
КонецПроцедуры // СкритьКомандиДляМест()





// Расчеты маршрута

&НаСервере
Процедура РасчитатьМаршрутМеста()
	
	Если Место.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
		СкладОтправитель = Место.ЗаказНаПеремещение.СкладОтправитель;
		СкладПолучатель  = Место.ЗаказНаПеремещение.СкладПолучатель;
	Иначе
		Если ТипЗнч(Место.Назначение.Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			СкладПолучатель  				= Место.Назначение.Заказ.СкладПолучатель;
		Иначе
			СкладПолучатель  		= Место.Назначение.Заказ.Склад;
		КонецЕсли;
		СкладОтправитель = Место.Владелец;
	КонецЕсли;
	ПолныйАдресСкладПолучатель	= ПолучитьАдресАбонента(СкладПолучатель);

	АдресСкладПолучатель		= НормализироватьПредставлениеАбонента(СкладПолучатель, ПолныйАдресСкладПолучатель);



	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаМаршрута();
	
	Запрос.УстановитьПараметр("СкладОтправитель", 		СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", 		СкладПолучатель);
	Запрос.УстановитьПараметр("АдресСкладПолучатель", 	АдресСкладПолучатель);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Маршрут = Выборка.Маршрут;
	КонецЕсли;
	
КонецПроцедуры // РасчитатьМаршрут()

&НаСервере
Процедура РасчитатьМаршрутЗадачи()
	
	СкладОтправитель 		 = Место.ТранзитныйСклад;
	СкладПолучатель 		 = Место.Владелец;
	АдресСкладПолучатель	 = НормализироватьПредставлениеАбонента(Место.Владелец, Место.АдресДоставки);

	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаМаршрута();
	
	Запрос.УстановитьПараметр("СкладОтправитель", 		СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", 		СкладПолучатель);
	Запрос.УстановитьПараметр("АдресСкладПолучатель", 	АдресСкладПолучатель);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Маршрут = Выборка.Маршрут;
	КонецЕсли;
	
КонецПроцедуры // РасчитатьМаршрут()





// Тексты запросов

&НаСервере
Функция ПолучитьТекстЗапросаРасчетаМаршрута()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка			КАК Склад,
	|	Представление   КАК Представление
	|ПОМЕСТИТЬ АдресаСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация
	|ГДЕ
	|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыМаршрутовСписокАдресов.ГородСклад,
	|	ВариантыМаршрутовСписокАдресов.ГородСклад
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
	|ГДЕ
	|	НЕ ВариантыМаршрутовСписокАдресов.ГородСклад В
	|				(ВЫБРАТЬ
	|					Справочник.Склады.Ссылка
	|				ИЗ
	|					Справочник.Склады)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|ВЫБРАТЬ
	|	Ссылка КАК Маршрут
	|ПОМЕСТИТЬ МаршрутыОтОтправителя	
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
	|ГДЕ
	|	Склад = &СкладОтправитель
	
	|ОБЪЕДИНИТЬ
	
	|ВЫБРАТЬ
	|	Ссылка КАК Маршрут
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
	|ГДЕ
	|	СкладПолучатель  = &АдресСкладПолучатель
	|И	СкладОтправитель = &СкладОтправитель	
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|ВЫБРАТЬ
	|	Ссылка КАК Маршрут
	|ПОМЕСТИТЬ МаршрутыКПолучателю
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СписокАдресов
	|ГДЕ
	|	ГородСклад = &АдресСкладПолучатель
	
	|ОБЪЕДИНИТЬ
	
	|ВЫБРАТЬ
	|	Ссылка КАК Маршрут
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
	|ГДЕ
	|	СкладПолучатель  = &АдресСкладПолучатель
	|И	СкладОтправитель = &СкладОтправитель
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|ВЫБРАТЬ
	|	&СкладОтправитель								КАК СкладОтправитель,
	|	&СкладПолучатель								КАК СкладПолучатель,
	|	МаршрутыКПолучателю.Маршрут 					КАК Маршрут,
	|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута 	КАК КалендарьМаршрута,
	|	
	|	СкладыОтгрузки.ПН,
	|	СкладыОтгрузки.ВТ,
	|	СкладыОтгрузки.СР,
	|	СкладыОтгрузки.ЧТ,
	|	СкладыОтгрузки.ПТ,
	|	СкладыОтгрузки.СБ,
	|	СкладыОтгрузки.ВС,
	|	
	|	СкладыОтгрузки.ВремяВыездаПН,
	|	СкладыОтгрузки.ВремяВыездаВТ,
	|	СкладыОтгрузки.ВремяВыездаСР,
	|	СкладыОтгрузки.ВремяВыездаЧТ,
	|	СкладыОтгрузки.ВремяВыездаПТ,
	|	СкладыОтгрузки.ВремяВыездаСБ,
	|	СкладыОтгрузки.ВремяВыездаВС
	|	
	|ПОМЕСТИТЬ МаршрутПрямойДоставки
	|ИЗ
	|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
	|	
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
	|ПО МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут
	
	|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
	|ПО	АдресаСкладаПолучателя.Склад = &АдресСкладПолучатель 
	
	|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
	|ПО	АдресаСкладаОтправителя.Склад = &СкладОтправитель
	
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки 
	|ПО	СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут	
	|И	СкладыОтгрузки.Склад  = &СкладОтправитель
	|
	|ГДЕ
	|	АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление	 
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|//
	|ВЫБРАТЬ
	|	МаршрутПрямойДоставки.Маршрут
	|ИЗ
	|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
	|	
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ПО	КалендарныеГрафики.Календарь 	= МаршрутПрямойДоставки.КалендарьМаршрута
	|И	КалендарныеГрафики.ДатаГрафика >= &ТекущаяДата
	|И	КалендарныеГрафики.ДеньВключенВГрафик
	|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
	|		КОГДА 1
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.ПН
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА 2
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.ВТ
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА 3
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.СР
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА 4
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.ЧТ
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА 5
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.ПТ
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА 6
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.СБ
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА 7
	|		ТОГДА 	ВЫБОР
	|					КОГДА МаршрутПрямойДоставки.ВС
	|					ТОГДА Истина
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|	КОНЕЦ)
	
	|СГРУППИРОВАТЬ ПО
	|	МаршрутПрямойДоставки.СкладОтправитель,
	|	МаршрутПрямойДоставки.СкладПолучатель,
	|	МаршрутПрямойДоставки.Маршрут,
	|	МаршрутПрямойДоставки.КалендарьМаршрута";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаРасчетаМаршрута()

&НаСервере
Функция ПолучитьТекстЗапросаИнформацияОМесте()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаСерийныеНомера
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Код КАК Место,
	|	Ответственный.Представление КАК Ответственный,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВЫРАЗИТЬ(&СкладОтправитель КАК Справочник.Склады)) КАК Отправитель,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВЫРАЗИТЬ(&СкладПолучатель КАК Справочник.Склады)) КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Назначение.Заказ) КАК ЗаказНаПеремещение,
	|	Назначение.Заказ КАК ЗаказНаПеремещениеРасшифровка
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Ссылка = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Распоряжение) КАК Документ,
	|	Документ.Распоряжение КАК ДокументРасшифровка
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ЕСТЬNULL(ТаблицаСерийныеНомера.СерийныйНомер, """""""") КАК СерийныйНомер
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаСерийныеНомера.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомераНоменклатуры.ПустаяСсылка) КАК СерийныйНомер
	|ИЗ
	|	ТаблицаНоменклатуры
	|ГДЕ
	|	НЕ Номенклатура.ИспользоватьСерийныеНомера
	|
	|ИТОГИ
	|	МАКСИМУМ(Количество)
	|ПО
	|	Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацияОМесте()

&НаСервере
Функция ПолучитьТекстЗапросаИнформацияОЗадаче()
	
	ТекстЗапроса ="ВЫБРАТЬ
	|	МестаДоставки.Код КАК Место,
	|	МестаДоставки.Ответственный.Представление КАК Ответственный,
	|	МестаДоставки.Владелец КАК Получатель,
	|	ЗадачиНаМаршрут.Отправитель КАК Отправитель,
	|	МестаДоставки.ТранзитныйСклад КАК ТранзитныйСклад,
	|	МестаДоставки.ТекстЗадачи КАК ТекстЗадачи,
	|	ЗадачиНаМаршрут.СтатусОтгрузки КАК СтатусОтгрузки,
	|	МестаДоставки.ЭтоЗадача КАК ЭтоЗадача,
	|	ЗадачиНаМаршрут.ВариантМаршрута КАК Маршрут
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МестаДоставки КАК МестаДоставки
	|		ПО ЗадачиНаМаршрут.Место = МестаДоставки.Ссылка
	|ГДЕ
	|	МестаДоставки.Ссылка = &Место
	|	И МестаДоставки.ЭтоЗадача = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
	
КонецФункции // ПолучитьТекстЗапросаИнформацияОЗадаче()

&НаСервере
Функция СформироватьТекстЗапросаОприходованиеМест()
	
	ОрдерныйСкладМеста = ПолучитьСкладОтгрузкиМеста(Место).ОрдерныйСклад;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	| Характеристика КАК Характеристика,
	| Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатураМеста
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	| Характеристика КАК Характеристика,
	| СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаСерийныеНомераМеста
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументовМеста
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|;";
	
	Если ОрдерныйСкладМеста Тогда				  
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Регистратор КАК Документ,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.КОтгрузке КАК Количество
		|ПОМЕСТИТЬ ТоварыПоДокументам
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовМеста КАК ТаблицаДокументовМеста
		|		ПО ТоварыКОтгрузке.Регистратор = ТаблицаДокументовМеста.Документ
		|;";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК Документ,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыПоДокументам
		|ИЗ
		|	РегистрНакопления.КТС_ОтгрузкаИзБезордерныхСкладов КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовМеста КАК ТаблицаДокументовМеста
		|		ПО ТоварыКОтгрузке.Регистратор = ТаблицаДокументовМеста.Документ
		|;";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	РегистрСерийныеНомера.Регистратор КАК Документ,
	|	РегистрСерийныеНомера.Номенклатура КАК Номенклатура,
	|	РегистрСерийныеНомера.Характеристика КАК Характеристика,
	|	РегистрСерийныеНомера.СерийныеНомера КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаСериныеНомераПоДокументам
	|ИЗ
	|	РегистрНакопления.СерийныеНомераНоменклатуры КАК РегистрСерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыПоДокументам КАК ТоварыПоДокументам
	|		ПО РегистрСерийныеНомера.Регистратор = ТоварыПоДокументам.Документ
	|			И РегистрСерийныеНомера.Номенклатура = ТоварыПоДокументам.Номенклатура
	|			И РегистрСерийныеНомера.Характеристика = ТоварыПоДокументам.Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТоварыПоДокументам.Документ КАК Документ,
	|	ТоварыПоДокументам.Номенклатура КАК Номенклатура,
	|	ТоварыПоДокументам.Характеристика КАК Характеристика,
	|	ТоварыПоДокументам.Количество КАК Количество,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаПредварительная
	|ИЗ
	|	ТоварыПоДокументам КАК ТоварыПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСериныеНомераПоДокументам КАК СерийныеНомера
	|		ПО ТоварыПоДокументам.Документ = СерийныеНомера.Документ
	|			И ТоварыПоДокументам.Номенклатура = СерийныеНомера.Номенклатура
	|			И ТоварыПоДокументам.Характеристика = СерийныеНомера.Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПредварительная.Документ КАК Документ,
	|	ТаблицаПредварительная.Номенклатура КАК Номенклатура,
	|	ТаблицаПредварительная.Характеристика КАК Характеристика,
	|	ТаблицаПредварительная.Количество КАК Количество,
	|	ТаблицаПредварительная.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	ТаблицаПредварительная КАК ТаблицаПредварительная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСерийныеНомераМеста КАК СерийныеНомераМеста
	|		ПО ТаблицаПредварительная.Номенклатура = СерийныеНомераМеста.Номенклатура
	|			И ТаблицаПредварительная.Характеристика = СерийныеНомераМеста.Характеристика
	|			И ТаблицаПредварительная.СерийныйНомер = СерийныеНомераМеста.СерийныйНомер
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомераНоменклатуры.ПустаяСсылка) КАК СерийныйНомер
	|ИЗ
	|	ТаблицаПредварительная 
	|ГДЕ
	|	НЕ Номенклатура.ИспользоватьСерийныеНомера
	|
	|ИТОГИ ПО 
	|	Документ, Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаОприходованиеМест()

&НаСервере
Функция СформироватьТекстЗапросаСерийныеНомера()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаСерийныеНомера
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ЕСТЬNULL(ТаблицаСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомераНоменклатуры.ПустаяСсылка)) КАК СерийныйНомер
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТаблицаСерийныеНомера.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТаблицаСерийныеНомера.Характеристика
	|
	|ИТОГИ ПО
	|	ТаблицаНоменклатуры.Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаСерийныеНомера()

&НаСервере
Функция ПолучитьТекстЗапросаПеремещениеНазначениеОрдер()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Регистратор КАК Документ.ЗаказНаПеремещение) КАК Документ
	|ПОМЕСТИТЬ ЗаказыПоНазначению
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(, , Регистратор, Назначение = &Назначение)
	|ГДЕ
	|	Регистратор ССЫЛКА Документ.ЗаказНаПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказыНаПеремещение.ЗаказНаПеремещение КАК Документ.ЗаказНаПеремещение) 		КАК Документ,
	|	ЗаказыНаПеремещение.Номенклатура														КАК Номенклатура,
	|	ЗаказыНаПеремещение.Характеристика														КАК Характеристика,
	|	ЗаказыНаПеремещение.КодСтроки															КАК КодСтроки,
	|	ЗаказыНаПеремещение.КОформлениюОстаток 													КАК Количество,
	|	ВЫРАЗИТЬ(ЗаказыНаПеремещение.ЗаказНаПеремещение КАК Документ.ЗаказНаПеремещение).Дата 	КАК Дата
	|ПОМЕСТИТЬ СвободныеЗаказы
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(
	|			,
	|			ЗаказНаПеремещение В
	|				(ВЫБРАТЬ
	|					Документ
	|				ИЗ
	|					ЗаказыПоНазначению)) КАК ЗаказыНаПеремещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыПоНазначению КАК ЗаказыПоНазначению
	|		ПО ЗаказыНаПеремещение.ЗаказНаПеремещение = ЗаказыПоНазначению.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура		КАК Номенклатура,
	|	Характеристика		КАК Характеристика,
	|	Количество 			КАК Количество
	|ПОМЕСТИТЬ НоменклатураПоМесту
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеЗаказы.Дата												КАК Дата,
	|	СвободныеЗаказы.Документ											КАК Документ,
	|	СвободныеЗаказы.Номенклатура										КАК Номенклатура,
	|	СвободныеЗаказы.Характеристика										КАК Характеристика,
	|	СУММА(СвободныеЗаказыКопия.Количество) 								КАК КоличествоПосле,
	|	СУММА(СвободныеЗаказыКопия.Количество) - СвободныеЗаказы.Количество КАК КоличествоДо
	|ПОМЕСТИТЬ ЗаказыНаростающие
	|ИЗ
	|	СвободныеЗаказы КАК СвободныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвободныеЗаказы КАК СвободныеЗаказыКопия
	|		ПО СвободныеЗаказы.Номенклатура = СвободныеЗаказыКопия.Номенклатура
	|			И СвободныеЗаказы.Характеристика = СвободныеЗаказыКопия.Характеристика
	|			И (ВЫБОР
	|				КОГДА СвободныеЗаказы.Дата = СвободныеЗаказыКопия.Дата
	|					ТОГДА СвободныеЗаказы.Документ >= СвободныеЗаказыКопия.Документ
	|				ИНАЧЕ СвободныеЗаказы.Дата >= СвободныеЗаказыКопия.Дата
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеЗаказы.Документ,
	|	СвободныеЗаказы.Номенклатура,
	|	СвободныеЗаказы.Характеристика,
	|	СвободныеЗаказы.Количество,
	|	СвободныеЗаказы.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаростающие.Дата				КАК Дата,
	|	ЗаказыНаростающие.Документ			КАК Документ,
	|	ЗаказыНаростающие.Номенклатура		КАК Номенклатура,
	|	ЗаказыНаростающие.Характеристика	КАК Характеристика
	|ПОМЕСТИТЬ ГраничныеУсловия
	|ИЗ
	|	ЗаказыНаростающие КАК ЗаказыНаростающие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураПоМесту КАК НоменклатураПоМесту
	|		ПО ЗаказыНаростающие.Номенклатура = НоменклатураПоМесту.Номенклатура
	|			И ЗаказыНаростающие.Характеристика = НоменклатураПоМесту.Характеристика
	|			И ЗаказыНаростающие.КоличествоДо < НоменклатураПоМесту.Количество
	|			И ЗаказыНаростающие.КоличествоПосле >= НоменклатураПоМесту.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеЗаказы.Документ						КАК Документ,
	|	СвободныеЗаказы.Номенклатура					КАК Номенклатура,
	|	СвободныеЗаказы.Характеристика					КАК Характеристика,
	|	СвободныеЗаказы.КодСтроки						КАК КодСтроки,
	|	СвободныеЗаказы.Количество						КАК Количество
	|ИЗ
	|	СвободныеЗаказы КАК СвободныеЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГраничныеУсловия КАК ГраничныеУсловия
	|		ПО СвободныеЗаказы.Номенклатура = ГраничныеУсловия.Номенклатура
	|			И СвободныеЗаказы.Характеристика = ГраничныеУсловия.Характеристика
	|			И (ВЫБОР
	|				КОГДА СвободныеЗаказы.Дата = ГраничныеУсловия.Дата
	|					ТОГДА СвободныеЗаказы.Документ <= ГраничныеУсловия.Документ
	|				ИНАЧЕ СвободныеЗаказы.Дата <= ГраничныеУсловия.Дата
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура		КАК Номенклатура,
	|	Характеристика		КАК Характеристика,
	|	Количество          КАК Количество
	|ИЗ
	|	НоменклатураПоМесту";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПеремещениеНазначение()







// Заполнение табличного документа

&НаСервере
Процедура ЗагрузитьИнформациюОМесте()
	
	Если Место.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
		СкладОтправитель = Место.ЗаказНаПеремещение.СкладОтправитель;
		СкладПолучатель  = Место.ЗаказНаПеремещение.СкладПолучатель;
	Иначе
		Если ТипЗнч(Место.Назначение.Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			СкладПолучатель  = Место.Назначение.Заказ.СкладПолучатель;
		Иначе
			СкладПолучатель  = Место.Назначение.Заказ.Склад;
		КонецЕсли;
		СкладОтправитель = Место.Владелец;
	КонецЕсли;

	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнформацияОМесте();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	
	Макет 					 = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ИнформацияОМесте");
	ОблМесто 				 = Макет.ПолучитьОбласть("Место");
	ОблДокумент 			 = Макет.ПолучитьОбласть("Документ");
	ОблПолучатель 			 = Макет.ПолучитьОбласть("Получатель");
	ОблЗаказНаПеремещение 	 = Макет.ПолучитьОбласть("ЗаказНаПеремещение");
	ОблНоменклатураЗаголовок = Макет.ПолучитьОбласть("НоменклатураЗаголовок");
	ОблНоменклатура 		 = Макет.ПолучитьОбласть("Номенклатура");
	ОблСерийныйНомер 		 = Макет.ПолучитьОбласть("СерийныйНомер");
	ОблПробел 				 = Макет.ПолучитьОбласть("Пробел");
	ОблДокументыЗаголовок	 = Макет.ПолучитьОбласть("ДокументыЗаголовок");
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМесто 	 	= РезультатЗапроса[РезультатЗапроса.ВГраница()-2].Выбрать();
	ВыборкаДокументы 	= РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выбрать();
	ВыборкаНоменклатура = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыборкаМесто.Следующий() Цикл
		
		ОблМесто.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблМесто);
		
		ОблПолучатель.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблПолучатель);
		
		ОблЗаказНаПеремещение.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблЗаказНаПеремещение);
		
	КонецЦикла;
	
	ИнформацияПоМесту.Вывести(ОблПробел);
	ИнформацияПоМесту.Вывести(ОблДокументыЗаголовок);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		ОблДокумент.Параметры.Заполнить(ВыборкаДокументы);
		ИнформацияПоМесту.Вывести(ОблДокумент);
	КонецЦикла;
	
	ИнформацияПоМесту.Вывести(ОблПробел);
	ИнформацияПоМесту.Вывести(ОблНоменклатураЗаголовок);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ОблНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		ОблНоменклатура.Параметры.ЕдиницаИзмерения = ВыборкаНоменклатура.Номенклатура.ЕдиницаИзмерения;
		ИнформацияПоМесту.Вывести(ОблНоменклатура);
		
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ВыборкаДетальныеЗаписи.СерийныйНомер.Пустая() Тогда
				ОблСерийныйНомер.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ИнформацияПоМесту.Вывести(ОблСерийныйНомер);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьИнформациюОМесте()

&НаСервере
Процедура ЗагрузитьИнформациюОЗадаче()
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнформацияОЗадаче();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	Макет 					 = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ИнформацияОЗадаче");
	ОблМесто 				 = Макет.ПолучитьОбласть("Место");
	ОблПолучатель 			 = Макет.ПолучитьОбласть("Получатель");
	ОблКоментарии			 = Макет.ПолучитьОбласть("ТекстЗадачи");
	ОблПробел 				 = Макет.ПолучитьОбласть("Пробел");
	ОблОтправитель			 = Макет.ПолучитьОбласть("Отправитель");
	ОблТранзитнийСклад		 = Макет.ПолучитьОбласть("ТранзитныйСклад");
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМесто = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	
	Пока ВыборкаМесто.Следующий() Цикл
		
		ОблМесто.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблМесто);
		
		ИнформацияПоМесту.Вывести(ОблПробел);
		
		ОблПолучатель.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблПолучатель);
		
		ИнформацияПоМесту.Вывести(ОблПробел);
		
		ОблОтправитель.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблОтправитель);
		
		ОблТранзитнийСклад.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблТранзитнийСклад);
		
		ОблКоментарии.Параметры.Заполнить(ВыборкаМесто);
		ИнформацияПоМесту.Вывести(ОблКоментарии);
		
	КонецЦикла;
	
	ИнформацияПоМесту.Вывести(ОблПробел);
	
	
КонецПроцедуры // ЗагрузитьИнформациюОЗадаче()







// Выполнить преобразование на сервере

&НаСервере
Функция ВыполнитьПреобразованиеНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	Отказ 	  = Ложь;
	
	Если ПроверитьВозможностьОбработкиТранзита(Место) Тогда
		Отказ = Истина;
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Невозможно обработать транзитное место. Место не было отгружено на складе отправителе.";
		Сообщение.Сообщить();
		Возврат Отказ;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если ОприходоватьМесто Тогда
		ВыполнитьОприходованиеМеста(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат Отказ;
	КонецЕсли;
	
	Если ВыполнитьПеремещение Тогда
		МассивПеремещений = СоздатьПеремещениеТоваров(Результат, Отказ);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат Отказ;
		КонецЕсли;
		Если ПолучитьОрдернуюСхемуСкладаОтправкиМеста() Тогда
			МассивОрдеров = СоздатьРасходныйОрдер(Результат, МассивПеремещений, Отказ)
		КонецЕсли;
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат Отказ;
		КонецЕсли;
		ИзменитьПараметрыМеста(МассивОрдеров, Отказ);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			Возврат Отказ;
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();	
	
	Возврат Отказ;
	
КонецФункции // ВыполнитьПреобразованиеНаСервере()





// Оприходование товара

&НаСервере
Процедура ВыполнитьОприходованиеМеста(Отказ)
	
	Запрос 		 = Новый Запрос; 
	Запрос.Текст = СформироватьТекстЗапросаОприходованиеМест();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ДокументОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		ДокументОбъект.Распоряжение		 = ВыборкаДокумент.Документ;
		ДокументОбъект.Склад		     = Место.Владелец;
		ДокументОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
		ДокументОбъект.Статус			 = Перечисления.СтатусыПриходныхОрдеров.Принят;
		ДокументОбъект.Ответственный	 = ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.Дата				 = ТекущаяДата();
		
		Товары 			= ДокументОбъект.Товары;
		СерийныеНомера  = ДокументОбъект.СерийныеНомера;
		
		ВыборкаНоменклатура = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КлючСвязи			= 1;
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
			ПерваяНоменклатура     = Истина;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ПерваяНоменклатура Тогда
					
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Номенклатура 	   			= ВыборкаДетальныеЗаписи.Номенклатура;
					НоваяСтрока.КоличествоУпаковок 			= ВыборкаДетальныеЗаписи.Количество;
					НоваяСтрока.Количество		   			= ВыборкаДетальныеЗаписи.Количество;
					НоваяСтрока.КлючСвязиСерийныхНомеров 	= КлючСвязи;
					
					ПерваяНоменклатура = Ложь;
					
				КонецЕсли;
				
				Если Не ВыборкаДетальныеЗаписи.СерийныйНомер.Пустая() Тогда
					НоваяСтрокаСН 						   = СерийныеНомера.Добавить();
					НоваяСтрокаСН.СерийныйНомер 		   = ВыборкаДетальныеЗаписи.СерийныйНомер;
					НоваяСтрокаСН.КлючСвязиСерийныхНомеров = КлючСвязи;
				КонецЕсли;
				
			КонецЦикла;

			КлючСвязи = КлючСвязи + 1;
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);					
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОприходованиеМеста()

&НаСервере
Функция ПолучитьСкладОтгрузкиМеста(Место)
	
	Результат = Новый Структура("Склад, ОрдерныйСклад");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Склад КАК Склад,
	|	Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ОрдерныйСклад
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место = &Место)");
	
	Запрос.УстановитьПараметр("Место", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСкладОтгрузкиМеста()

&НаСервере
Функция ПроверитьВозможностьОбработкиТранзита(Место)
	
	Результат = Истина;
	
	Если Место.ЭтоЗадача Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусОтгрузки КАК СтатусОтгрузки
		|ИЗ
		|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Место)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ");
		
		Запрос.УстановитьПараметр("Место", Место);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе                     
		Запрос = Новый Запрос( "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусОтгрузки КАК СтатусОтгрузки
		|ИЗ
		|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место = &Место)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ");
		
		Запрос.УстановитьПараметр("Место", Место);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПроверитьВозможностьОбработкиТранзита()






// Перемещение товара и создание места


&НаСервере
Функция СоздатьПеремещениеТоваров(МассивРезультатов, Отказ)
	
	ОрдернаяСхема 	  = ПолучитьОрдернуюСхемуСкладаОтправкиМеста();
	МассивПеремещений = Новый Массив;
	МассивСсылок	  = Новый Массив;
	
	Если Место.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
		Если ОрдернаяСхема Тогда
			ДокументПеремещение = ВыполнитьПеремещениеОрдерныйСклад();
		Иначе
			ДокументПеремещение = ВыполнитьПеремещениеБезордерныйСклад();
		КонецЕсли;
		МассивПеремещений.Добавить(ДокументПеремещение);
	Иначе
		Если ОрдернаяСхема Тогда
			МассивПеремещений = ВыполнитьПеремещениеОрдерныйСкладНазначение();
		Иначе
			
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ДокументПеремещение Из МассивПеремещений Цикл
		
		Попытка
			ДокументПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		МассивСсылок.Добавить(ДокументПеремещение.Ссылка);
		
		МассивРезультатов.Добавить(ДокументПеремещение.Ссылка);
		
	КонецЦикла; 
	
	Возврат МассивСсылок;
	
КонецФункции // СоздатьПеремещениеТоваров()

&НаСервере
Функция ПолучитьОрдернуюСхемуСкладаОтправкиМеста()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Владелец.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ОрдернаяСхема
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ОрдернаяСхема, Ложь);
	
КонецФункции // ПолучитьСкладОтправкиМеста()

&НаСервере
Функция ВыполнитьПеремещениеОрдерныйСклад()
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПеремещениеОрдерныйСклад();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Назначение", Место.Назначение);
	
	ДокументПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
	ДокументПеремещение.Заполнить(Место.ЗаказНаПеремещение);
	
	ДокументПеремещение.ДокументОснование   = Место.ЗаказНаПеремещение;
	ДокументПеремещение.Дата		  		= ТекущаяДата();
	ДокументПеремещение.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	
	Товары  	= ДокументПеремещение.Товары;
	Выборка 	= Запрос.Выполнить().Выбрать();
	
	Товары.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура 	   = Выборка.Номенклатура;
		НоваяСтрока.Количество 		   = Выборка.Количество;
		НоваяСтрока.КоличествоУпаковок = Выборка.Количество;
		НоваяСтрока.ЗаказНаПеремещение = Место.ЗаказНаПеремещение;
		НоваяСтрока.КодСтроки		   = Выборка.КодСтроки;
		
	КонецЦикла;
	
	Возврат ДокументПеремещение;
	
КонецФункции // ВыполнитьПеремещениеОрдерныйСклад()

&НаСервере
Функция ВыполнитьПеремещениеОрдерныйСкладНазначение()
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПеремещениеНазначениеОрдер();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Назначение", Место.Назначение);
	
	РезультатыЗапроса 	= Запрос.ВыполнитьПакет();
	ТаблицаНоменклатура = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	ТаблицаДокументы	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить();
	НаборДокументов		= Новый Соответствие;
	МассивДокумент		= Новый Массив;
	Назначение			= Место.Назначение;
	ЗаказНаПеремещение	= Назначение.Заказ;
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатура Цикл
		
		КоличествоПереместить = СтрокаТаблицы.Количество;
		
		Если КоличествоПереместить <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска  = Новый Структура("Номенклатура, Характеристика", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);
		РезультатыПоиска = ТаблицаДокументы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			
			ДокументПеремещение = НаборДокументов.Получить(РезультатПоиска.Документ);
			Если ДокументПеремещение = Неопределено Тогда
				ДокументПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
				ДокументПеремещение.Заполнить(РезультатПоиска.Документ);
				ДокументПеремещение.Товары.Очистить();
				НаборДокументов.Вставить(РезультатПоиска.Документ, ДокументПеремещение);
			КонецЕсли;
			
			Количество = Мин(КоличествоПереместить, РезультатПоиска.Количество);
			
			НоваяСтрока 					= ДокументПеремещение.Товары.Добавить();
			НоваяСтрока.КодСтроки 			= РезультатПоиска.КодСтроки;
			НоваяСтрока.Номенклатура 		= РезультатПоиска.Номенклатура;
			НоваяСтрока.Характеристика 		= РезультатПоиска.Характеристика;
			НоваяСтрока.ЗаказНаПеремещение 	= РезультатПоиска.Документ;
			НоваяСтрока.Количество 			= Количество;
			НоваяСтрока.КоличествоУпаковок	= Количество;
			
			Если РезультатПоиска.Документ <> ЗаказНаПеремещение Тогда
				НоваяСтрока.Назначение = Назначение;
			КонецЕсли;
			
			КоличествоПереместить = КоличествоПереместить - РезультатПоиска.Количество;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Для каждого ДокументИзНабора Из НаборДокументов Цикл
		МассивДокумент.Добавить(ДокументИзНабора.Значение);
	КонецЦикла; 
	
	Возврат МассивДокумент;
	
КонецФункции // ВыполнитьПеремещениеОрдерныйСкладНазначение()

&НаСервере
Функция СформироватьТекстЗапросаПеремещениеОрдерныйСклад()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаКодСтроки
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары
	|ГДЕ
	|	Ссылка = &ЗаказНаПеремещение
	|;
	|
	|ВЫБРАТЬ
	|	МестаНоменклатуры.Номенклатура КАК Номенклатура,
	|	МестаНоменклатуры.Характеристика КАК Характеристика,
	|	МестаНоменклатуры.Количество КАК Количество,
	|	ТаблицаКодСтроки.КодСтроки КАК КодСтроки
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКодСтроки КАК ТаблицаКодСтроки
	|		ПО МестаНоменклатуры.Номенклатура = ТаблицаКодСтроки.Номенклатура
	|			И МестаНоменклатуры.Характеристика = ТаблицаКодСтроки.Характеристика
	|ГДЕ
	|	Место = &Место";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПеремещенеОрдерныйСклад()

&НаСервере
Функция ВыполнитьПеремещениеБезордерныйСклад()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = СформироватьТекстЗапросаСерийныеНомера();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	ДокументПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
	ДокументПеремещение.Заполнить(Место.ЗаказНаПеремещение);
	
	ДокументПеремещение.ДокументОснование   = Место.ЗаказНаПеремещение;
	ДокументПеремещение.Дата		  		= ТекущаяДата();
	ДокументПеремещение.Ответственный 		= ПараметрыСеанса.ТекущийПользователь;
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Товары			    = ДокументПеремещение.Товары;
	СерийныеНомера		= ДокументПеремещение.СерийныеНомера;
	КлючСвязи			= 1;
	КодСтроки			= 1;
	
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		ПерваяНоменклатура     = Истина;
		ИзменятьКлючСвязи	   = Ложь;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ПерваяНоменклатура Тогда
				
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 	   = ВыборкаДетальныеЗаписи.Номенклатура;
				НоваяСтрока.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
				НоваяСтрока.Количество		   = ВыборкаДетальныеЗаписи.Количество;
				НоваяСтрока.ЗаказНаперемещение = Место.ЗаказНаПеремещение;
				НоваяСтрока.КодСтроки		   = КодСтроки;
				
				Если Не ВыборкаДетальныеЗаписи.СерийныйНомер.Пустая() Тогда
					НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязи;
				КонецЕсли;
				
				ПерваяНоменклатура = Ложь;
				КодСтроки		   = КодСтроки + 1;
				
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.СерийныйНомер.Пустая() Тогда
				НоваяСтрокаСН 						   = СерийныеНомера.Добавить();
				НоваяСтрокаСН.СерийныйНомер 		   = ВыборкаДетальныеЗаписи.СерийныйНомер;
				НоваяСтрокаСН.КлючСвязиСерийныхНомеров = КлючСвязи;
				ИзменятьКлючСвязи					   = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзменятьКлючСвязи Тогда
			КлючСвязи = КлючСвязи + 1;
		КонецЕсли
		
	КонецЦикла;
	
	Возврат ДокументПеремещение;
	
КонецФункции // ВыполнитьПеремещениеБезордерныйСклад()

&НаСервере
Функция СоздатьРасходныйОрдер(Результат, МассивПеремещений, Отказ)
	
	Запрос 		  = Новый Запрос;
	МассивОрдеров = Новый Массив;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура	КАК Номенклатура,
	|	Характеристика	КАК Характеристика,
	|	СерийныйНомер   КАК СерийныйНомер
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место";
	
	Запрос.УстановитьПараметр("Место", Место);
	
	ТаблицаСерийныхНомеров = Запрос.Выполнить().Выгрузить();
	
	Для каждого ДокументПеремещение Из МассивПеремещений Цикл
		
		РасходныйОрдер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		
		РасходныйОрдер.Распоряжение		 = ДокументПеремещение;
		
		РасходныйОрдер.ЗаполнитьПоРаспоряжению();
		
		РасходныйОрдер.Статус		 	 = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		РасходныйОрдер.Ответственный 	 = ПараметрыСеанса.ТекущийПользователь;
		РасходныйОрдер.Приоритет 	 	 = Перечисления.Приоритеты.Средний;
		РасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
		РасходныйОрдер.Дата 			 = ТекущаяДата();
		
		ТабТовары = РасходныйОрдер.Товары;
		ТабНомера = РасходныйОрдер.СерийныеНомера;
		КлючСвязи = 1;
		
		Для каждого СтрокаТовары Из ТабТовары Цикл
						
			КоличествоНомеров = СтрокаТовары.КоличествоУпаковок;
			СтруктураПоиска   = Новый Структура("Номенклатура, Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
			РезультатыПоиска  = ТаблицаСерийныхНомеров.НайтиСтроки(СтруктураПоиска);
			СтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
			
			Для каждого РезультатПоиска Из РезультатыПоиска Цикл
				СтрокаНомера = ТабНомера.Добавить();
				СтрокаНомера.КлючСвязиСерийныхНомеров = КлючСвязи;
				СтрокаНомера.СерийныйНомер = РезультатПоиска.СерийныйНомер;
			КонецЦикла; 
			
			КлючСвязи = КлючСвязи + 1;
			
		КонецЦикла; 
		
		Попытка
			РасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Результат.Добавить(РасходныйОрдер.Ссылка);
		МассивОрдеров.Добавить(РасходныйОрдер.Ссылка);
		
	КонецЦикла; 
	
	Возврат МассивОрдеров;
	
КонецФункции // СоздатьПриходныйОрдер()

&НаСервере
Процедура ИзменитьПараметрыМеста(МассивОрдеров, Отказ)
	
	Перем ТекущийСклад, СкладОтгрузки;
	
	Если МассивОрдеров.Количество() > 0 Тогда
		
		РасходныйОрдер = МассивОрдеров[0];
		
		СкладОтгрузки   = ПолучитьСкладОтгрузкиМеста(Место).Склад;
		ТекущийСклад    = РасходныйОрдер.Склад;
		
		Если Место.Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
			СкладПолучатель = Место.ЗаказНаПеремещение.СкладПолучатель;
		Иначе
			Если ТипЗнч(Место.Назначение.Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				СкладПолучатель = Место.Назначение.Заказ.СкладПолучатель;
			Иначе
				СкладПолучатель = Место.Назначение.Заказ.Склад;
			КонецЕсли;
		КонецЕсли;
		
		МестоОбъект = Место.ПолучитьОбъект();
		МестоОбъект.Архивный 		= Ложь;
		МестоОбъект.Владелец 		= СкладПолучатель;
		МестоОбъект.АдресДоставки   = ПолучитьАдресСклада(СкладПолучатель);
		МестоОбъект.Транзит			= Ложь;
		
		Попытка
			МестоОбъект.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		
		// Склады отгрузки
		НаборЗаписей = РегистрыСведений.ОтгрузкаМест.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(ТекущийСклад);
		НаборЗаписей.Отбор.Место.Установить(Место);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период         	= ТекущаяДата();
		Запись.Склад  		  	= ТекущийСклад;
		Запись.Место  		  	= Место;
		Запись.ВариантМаршрута  = Маршрут;
		Запись.Пользователь		= ПараметрыСеанса.ТекущийПользователь;
		Запись.СтатусОтгрузки 	= Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена;
		
		Попытка
			НаборЗаписей.Записать(Ложь);
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	
	КонецЕсли;
	
	// Документы отгрузки
	НаборЗаписей = РегистрыСведений.МестаПоДокументам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Место.Установить(Место);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для каждого РасходныйОрдер ИЗ МассивОрдеров Цикл
	
		НаборЗаписей = РегистрыСведений.МестаПоДокументам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Место.Установить(Место);
		НаборЗаписей.Отбор.Документ.Установить(РасходныйОрдер);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Место 			= Место;
		Запись.Документ 		= РасходныйОрдер;
		Запись.СтатусДокумента  = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ТекущийСклад <> Неопределено ИЛИ СкладОтгрузки <> Неопределено Тогда
	
		// Серийные номера
		НаборЗаписей = РегистрыСведений.МестаСерийныеНомераНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(СкладОтгрузки);
		НаборЗаписей.Отбор.Место.Установить(Место);
		
		НаборЗаписей.Прочитать();
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		НаборЗаписей.Очистить();
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Для каждого Запись ИЗ ТаблицаЗаписей Цикл
			Запись.Склад = ТекущийСклад;
		КонецЦикла;	
		
		НаборЗаписей = РегистрыСведений.МестаСерийныеНомераНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(ТекущийСклад);
		НаборЗаписей.Отбор.Место.Установить(Место);
		
		НаборЗаписей.Загрузить(ТаблицаЗаписей);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПараметрыМеста()

&НаСервере
Функция ПолучитьАдресСклада(Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Представление КАК Адрес
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация
	|ГДЕ
	|	Ссылка = &Склад
	|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Адрес, "");
	
КонецФункции // ПолучитьАдресСклада()

&НаСервере
Функция ПерезаписатьЗадачуНаМаршрут()
	
	Отказ =Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверитьВозможностьОбработкиТранзита(Место) Тогда
		Отказ = Истина;
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Невозможно обработать транзитную задачу. Задача не была отгружена на складе отправителе.";
		Сообщение.Сообщить(); 
		Возврат Отказ;
	КонецЕсли;
	
	АдресДоставки		 = ПолучитьАдресАбонента(Место.Владелец);
	АдресОтправителя	 = ПолучитьАдресАбонента(Место.ТранзитныйСклад);
	
	Если ПустаяСтрока(АдресДоставки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить адрес партнера или склада в карточке получателя.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыМеста = Новый Структура;
	ПараметрыМеста.Вставить("Отправитель", 				Место.ТранзитныйСклад);
	ПараметрыМеста.Вставить("АдресОтправителя", 		АдресОтправителя);
	ПараметрыМеста.Вставить("Владелец", 				Место.Владелец);
	ПараметрыМеста.Вставить("АдресДоставки", 			АдресДоставки);
	ПараметрыМеста.Вставить("ВариантМаршрута", 			Маршрут);
	ПараметрыМеста.Вставить("ТекстЗадачи", 				Место.ТекстЗадачи);
	ПараметрыМеста.Вставить("Транзит", 					Ложь);
	
	ПерезаписатьЗадачу(ПараметрыМеста);
	
	Возврат Отказ;
	
КонецФункции // СоздатьЗадачуНаМаршрут()

&НаСервере
Функция ПолучитьАдресАбонента(Отправитель)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Представление КАК Адрес
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация
		|ГДЕ
		|	Ссылка = &Отправитель
		|	И Представление <> """"
		|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Представление КАК Адрес
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Ссылка = &Отправитель
		|	И Представление <> """"
		|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";			   
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Адрес, "");
	
КонецФункции // ПолучитьАдресАбонента()

&НаСервере
Процедура ПерезаписатьЗадачу(ПараметрыМеста)
	
	НачатьТранзакцию();
	
	СсылкаНаМесто = Справочники.МестаДоставки.НайтиПоКоду(Место.Код);
	ЭтоБылТранзит = СсылкаНаМесто.Транзит;
	НовоеМесто = СсылкаНаМесто.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(НовоеМесто, ПараметрыМеста);
	НовоеМесто.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	НовоеМесто.ТранзитныйСклад 	= Справочники.Склады.ПустаяСсылка();
	НовоеМесто.Архивный			= Ложь;
	
	Попытка
		НовоеМесто.Записать();			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки; 
	
	
	Блокировка 		  		= Новый БлокировкаДанных;
	ЭлементБлокировки 		= Блокировка.Добавить("РегистрСведений.ЗадачиНаМаршрут");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Место", СсылкаНаМесто);
	Блокировка.Заблокировать();
	
	
	Период = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Период								КАК Период,
	|	ЗадачиНаМаршрут.Место               КАК Место,
	|	ЗадачиНаМаршрут.Отправитель 		КАК Отправитель,
	|	ЗадачиНаМаршрут.ВариантМаршрута     КАК ВариантМаршрута,
	|	ЗадачиНаМаршрут.СтатусОтгрузки 		КАК Статус,
	|	&СтатусЗадачи                       КАК СтатусОтгрузки,
	|	ЗадачиНаМаршрут.АдресОтправителя 	КАК АдресОтправителя,
	|	&ТекущийПользователь                КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Задача) КАК ЗадачиНаМаршрут
	|";
	Запрос.УстановитьПараметр("Период", Период);					  
	Запрос.УстановитьПараметр("Задача", СсылкаНаМесто);
	Запрос.УстановитьПараметр("СтатусЗадачи", Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить статус задачи'"));
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Если (Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена 
		И 	  ЭтоБылТранзит = Ложь)
		ИЛИ Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаОтменена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выполнять задачи разрешено только для задач из статусом «Поставлена» и «В процессе»'"));
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	
	Если Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена
		ИЛИ Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения Тогда
		НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Место.Установить(СсылкаНаМесто);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	
	НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период+1);
	НаборЗаписей.Отбор.Место.Установить(СсылкаНаМесто);
	
	Запись 				  	= НаборЗаписей.Добавить();
	Запись.Период		  	= Период+1;
	Запись.Место		  	= СсылкаНаМесто;
	
	Запись.СтатусОтгрузки 	= Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена;
	
	Запись.ВариантМаршрута 	= ПараметрыМеста.ВариантМаршрута;
	Запись.Отправитель    	= ПараметрыМеста.Отправитель;
	Запись.АдресОтправителя = ПараметрыМеста.АдресОтправителя;
	Запись.Пользователь	 	= ПараметрыСеанса.ТекущийПользователь;
	
	
	
	Попытка
		НаборЗаписей.Записать();			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // СоздатьЗадачи()




// QR-коды

&НаСервереБезКонтекста
Функция СформироватьКолекциюПечатныхФорм(ИмяИсточникаДанных, ПараметрыИсточника, ОбъектыПечати = Неопределено, ПараметрыВывода = Неопределено) 
	Перем КоллекцияПечатныхФорм;
	ИсточникДанных = ModuleLibraryServer.GetRefLibrary(ИмяИсточникаДанных);                
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);        
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");                                        
КонецФункции

&НаКлиенте
Процедура НапечататьQRКод()
	
	Если ПустаяСтрока(ПринтерQRКода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='QR-код не будет распечатан. Необходимо задать имя принтера QR-кода на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;        
	ПараметрКоманды.Добавить(Место);        
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ПринтерQRКода;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	КонецЦикла;
	
КонецПроцедуры // НапечататьQRКод()





&НаКлиенте
Процедура СообщениеПользователюОЗавершершение()
	
	
	ТекстЗадача  = "ru = ""Задача """;
	ТекстМаршрут = "ru = "" перезаписана по маршруту  """;
	СообщениеТекста = НСтр(ТекстЗадача)+ Место +  НСтр(ТекстМаршрут) +Маршрут;
	ПоказатьОповещениеПользователя("Операция виполнен: ",,СообщениеТекста);
	
	Закрыть();
	
КонецПроцедуры // СообщениеПользователюОЗавершершение()

&НаСервере
Функция НормализироватьПредставлениеАбонента(Абонент, АдресАбонента)
	Если ТипЗнч(Абонент) = Тип("СправочникСсылка.Склады") Тогда
		Возврат Абонент;
	КонецЕсли;
	
	ОбработкаКлассификатор = ModuleLibraryServer.GetLibrary("Маршруты адресный классификатор");
	Возврат ОбработкаКлассификатор.ПолучитьГородПоАдресу(АдресАбонента);
	
КонецФункции // НормализироватьПредставлениеАбонента()

#КонецОбласти

