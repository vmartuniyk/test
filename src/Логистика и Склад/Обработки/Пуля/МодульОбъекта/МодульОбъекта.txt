
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура заполняет таблицу «ПулПриемки» отправителями
// товаров и задач которые нужно принят на складе
//
// Параметры:
//  Форма 			  - УправляемаяФорма - форма обработки на которой размещается таблица «ПулПриемки».
//  ОтборПоДокументам - Массив			 - массив документов по которым нужно построить отбор.
//
Процедура СформироватьПулПриемки(Форма, Отправитель, Приоритет, ОтборПоДокументам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Склад		= Форма.Склад;
	ПулПриемки  = Форма.ПулПриемки;
	Элементы	= Форма.Элементы;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПулПриемки(ОтборПоДокументам);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПустаяДата"			, Дата(1,1,1));
	Запрос.УстановитьПараметр("ОтборПоДокументам", ОтборПоДокументам.ВыгрузитьЗначения());
	
	ПулПриемки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СтруктураПоиска = Новый Структура("Отправитель", Отправитель);
	РезультатПоиска = ПулПриемки.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ПулПриемки.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	Иначе
		СтруктураПоиска = Новый Структура("Приоритет", Приоритет);
		РезультатПоиска = ПулПриемки.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.ПулПриемки.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу «ПулНоменклатуры» списком товаров
// которые нужно принять на складе, а также обновляет список товаров в подборе.
//
// Параметры:
//  Форма		   - УправляемаяФорма - форма обработки на которой размещается таблица «ПулПриемки».
//  ПараметрОтбора -
//					ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  ЗагружатьСписокНоменклатуры - Булево - флаг необхыодимости загрузка списка номенклатуры в рабочую область,
//										   сбрасывается когда добавляем номенклатуру по штрихкоду.
Процедура СформироватьПулНоменклатуры(Форма, ПараметрОтбора, ЗагружатьСписокНоменклатуры=Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПараметрОтбора) = Тип("Строка") Тогда
		СформироватьПулМест(Форма);
	Иначе
		ЗагрузитьПулНоменклатурыДокументы(Форма, ПараметрОтбора, ЗагружатьСписокНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу «СписокНоменклатуры» с учетом отправителя
// который выбрал пользователь.
//
// Параметры:
//  Форма		   - УправляемаяФорма - форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель    -
//					ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//
Процедура СформироватьСписокНоменклатуры(Форма, Отправитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокНоменклатуры();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Форма.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура добавляет номенклатуру в таблицу «СписокНоменклатуры»
// с помощью штрихкода. Допускаесть что все проверки на правильность
// штрихкода уже проведены на клиенте.
//
// Параметры:
//  Форма 	    - УправляемаяФорма 									- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель -
//					ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  Штрихкод   - Строка 											- введеный пользователем штрихкод.
//
Процедура ДобавитьНаменклатуруПоШтрихкоду(Форма, Отправитель, Штрихкод) Экспорт
	
	СписокНоменклатуры = Форма.СписокНоменклатуры;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДобавлениеПоШтрихкоду();
	
	Запрос.УстановитьПараметр("Штрихкод", 		Штрихкод);
	Запрос.УстановитьПараметр("Отправитель", 	Отправитель);
	Запрос.УстановитьПараметр("Склад", 			Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь",	ПараметрыСеанса.ТекущийПользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаНоменклатуры = РезультатЗапроса.Выгрузить();
	ЗаписьВыполнена 	= ЗаписатьНоменклатуруПриемкаТоваров(Форма.Склад, Отправитель, ТаблицаНоменклатуры);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗаписьВыполнена Тогда
		//СписокНоменклатуры.Загрузить(ТаблицаНоменклатуры);
		СформироватьПулНоменклатуры(Форма, Отправитель, Истина);
	Иначе
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура добавляет список номенклатур в таблицу «СписокНоменклатур» 
// по массив идентификаторов, используеться при перетаскивании.
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  МассивИдентификаторов - Массив  								- массив индетификаторов строк таблицы «СписокНоменклатуры».
//
Процедура ДобавитьМассивНоменклатур(Форма, Отправитель, МассивИдентификаторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПулНоменклатуры 	= Форма.ПулНоменклатуры;
	СписокНоменклатуры  = Форма.СписокНоменклатуры;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Для каждого Идентификатор Из МассивИдентификаторов Цикл
		СтрокаПула = ПулНоменклатуры.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаПула = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПула);
		НоваяСтрока.Количество = СтрокаПула.Принять;
	КонецЦикла; 
	
	ТЗ_СписокНоменклатуры = СформироватьТаблицуСписокНоменклатуры(Форма.Склад, Отправитель, СписокНоменклатуры);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатЗаписи = ЗаписатьНоменклатуруПриемкаТоваров(Форма.Склад, Отправитель, ТЗ_СписокНоменклатуры);
	Если Не РезультатЗаписи	Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	СформироватьПулНоменклатуры(Форма, Отправитель);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура выполняет обработку изменения количества номенклатуры в 
// таблице основной формы обработки «СписокНоменклатуры».
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//
Процедура ОбработатьИзменениеКоличестваНоменклатуры(Форма, Отправитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокНоменклатуры = Форма.СписокНоменклатуры;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	ТЗ_СписокНоменклатуры = СформироватьТаблицуСписокНоменклатуры(Форма.Склад, Отправитель, СписокНоменклатуры);
	РезультатЗаписи 	  = ЗаписатьНоменклатуруПриемкаТоваров(Форма.Склад, Отправитель, ТЗ_СписокНоменклатуры);
	
	Если Не РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	СформироватьПулНоменклатуры(Форма, Отправитель);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура удаляет массив номенклатур из таблицы «СписокНоменклатуры»,
// а также очищает регистр «Пуля_ПриемкаТоваров».
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  МассивИдентификаторов - Массив  								- массив индетификаторов строк таблицы «СписокНоменклатуры».
//
Процедура УдалитьНоменклатуруИзСписка(Форма, Отправитель, МассивИдентификаторов) Экспорт
	
	СписокНоменклатуры = Форма.СписокНоменклатуры;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	Для каждого Идентификатор Из МассивИдентификаторов Цикл
		СтрокаТаблицы = СписокНоменклатуры.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РезультатУдаления = УдалитьНоменклатуруИзПриемкиТоваров(Форма.Склад, Отправитель, СтрокаТаблицы.Номенклатура);    			
		Если НЕ РезультатУдаления Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		РезультатУдаления = УдалитьСерийныйНомерИзРегистраПоНоменклатуре(Форма.Склад, Отправитель, СтрокаТаблицы.Номенклатура);
		Если РезультатУдаления Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		СписокНоменклатуры.Удалить(СтрокаТаблицы);
	КонецЦикла; 
	
	СформироватьПулНоменклатуры(Форма, Отправитель, Ложь);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура устанавливает использование серийных номеров в номенклатуре.
//
// Параметры:
//  Номенклатура 			  - СправочникСсылка.Номенклатура - номенклатура для которой нужно изменить статус использования серийных номеров.
//  ИспользоватьСерийныйНомер - Булево						  - флаг установки использования серийных номеров
//
Процедура УстановитьИспользованиеСерийныхНомеров(Номенклатура, ИспользоватьСерийныйНомер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоменклатураОбъект 							  = Номенклатура.ПолучитьОбъект();
	НоменклатураОбъект.ОбменДанными.Загрузка	  = Истина;
	НоменклатураОбъект.ИспользоватьСерийныеНомера = ИспользоватьСерийныйНомер;
	
	НоменклатураОбъект.Записать();
	
КонецПроцедуры

// Функция получает индекс картинки использования серийных номеров в таблице формы.
// 
// Параметры:
//  Отправитель  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой нужно получить индекс картинки.
//
// Возвращаемое значение: 
//  Число - индекс картинки серийного номера.
//
Функция ПолучитьКоличествоСерийныхНомеров(Склад, Отправитель, Номенклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИндексКартинкиСН();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ИндексКартинки, 0);
	
КонецФункции // ПолучитьИндексКартинкиСерийныхНомеров()

// Загрузка списка забитых серийных номеров.
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  Номенклатура		  - НоменклатураСсылка					    - номенклатура из таблицы «СписокНоменклатуры» для которой нужно загружать серийные номера.
//
Процедура ЗагрузитьСписокСерийныхНомеров(Форма, Отправитель, Номенклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СерийныеНомера = Форма.СерийныеНомера;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСерийныеНомера();
	
	Запрос.УстановитьПараметр("Отправитель",  Отправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	СерийныеНомера.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ТекстСерийныеНомера 		  = НСтр("ru='Выбрано серийных номеров - %1'");
	Форма.ВыбранныеСерийныеНомера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерийныеНомера, СерийныеНомера.Количество());
	
КонецПроцедуры

// Добавление и создание серийного номера.
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  Номенклатура  		- СправочникСсылка.Номенклатура 			- ссылка на номенклатуру, для которой нужно добавить серийный номер.
//  СтрокаСерийныйНомер - Строка                        			- строка из серийным номером.
//
Процедура ДобавитьСерийныйНомер(Форма, Отправитель, Номенклатура, СтрокаСерийныйНомер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатБлокировки = УстановитьБлокировкуСерийныеНомера(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатПроверки = ПроверитьКоличествоСерийныхНомеров(Форма, Отправитель, Номенклатура);	
	Если РезультатПроверки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	СерийныйНомер 	= ПолучитьСерийныйНомер(Номенклатура, СтрокаСерийныйНомер);
	
	Если ТипЗнч(Отправитель) = Тип("ДокументСсылка.ЗаказНаПеремещение") ИЛИ ТипЗнч(Отправитель) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		РезультатПроверки = ПроверитьДоступностьСерийногоНомера(Отправитель, Номенклатура, СерийныйНомер);
		Если РезультатПроверки Тогда
			СтрокаСообщения = НСтр("ru='Серийный номер %1 отсутсвует в распоряжении.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СерийныйНомер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	РезультатЗаписи = ЗаписатьСерийныйНомерВРегистр(Форма.Склад, Отправитель, Номенклатура, СерийныйНомер);
	
	Если РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСписокСерийныхНомеров(Форма, Отправитель, Номенклатура);
	
КонецПроцедуры

// Добавление заданого количества серийных номеров.
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  Номенклатура  		- СправочникСсылка.Номенклатура 			- ссылка на номенклатуру, для которой нужно добавить серийный номер.
//  СтрокаСерийныйНомер - Строка                        			- строка из серийным номером.
//  КоличествоНомеров	- Число										- количество серийных номеров которые нужно сгенерировать и добавить.
//
Процедура ДобавитьСерийныеНомера(Форма, Отправитель, Номенклатура, СтрокаСерийныйНомер, КоличествоНомеров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатБлокировки = УстановитьБлокировкуСерийныеНомера(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатПроверки = ПроверитьКоличествоСерийныхНомеровЗаполнение(Форма, Отправитель, Номенклатура, КоличествоНомеров);
	Если РезультатПроверки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	СтрСерийныйНомер = СтрокаСерийныйНомер;
	
	Для Индекс = 1 ПО КоличествоНомеров Цикл
		
		СерийныйНомер 	= ПолучитьСерийныйНомер(Номенклатура, СтрСерийныйНомер);
		РезультатЗаписи = ЗаписатьСерийныйНомерВРегистр(Форма.Склад, Отправитель, Номенклатура, СерийныйНомер);
		
		Если РезультатЗаписи Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		СтрСерийныйНомер = ОбработатьСтрокуСерийногоНомера(СтрСерийныйНомер);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСписокСерийныхНомеров(Форма, Отправитель, Номенклатура);
	
КонецПроцедуры

// Удаление серийного номера.
//
// Параметры:
//  Форма 				  - УправляемаяФорма 						- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Отправитель 		  - ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//  Номенклатура  - СправочникСсылка.Номенклатура 			    - ссылка на номенклатуру, для которой нужно добавить серийный номер.
//  СерийныйНомер - СправочникСсылка.СерийныеНомераНоменклатуры - строка из серийным номером.
//
Процедура УдалитьСерийныйНомер(Форма, Отправитель, Номенклатура, СерийныйНомер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатБлокировки = УстановитьБлокировкуСерийныеНомера(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатЗаписи = УдалитьСерийныйНомерИзРегистра(Форма.Склад, Отправитель, Номенклатура, СерийныйНомер);
	
	Если РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСписокСерийныхНомеров(Форма, Отправитель, Номенклатура);
	
КонецПроцедуры

// Процедура загружает в табличный документ «ИнформацияПоМесту» информацию о месте
// при выделении места курсором.
//
// Параметры:
//  Форма - УправляемаяФорма  				- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Место - СправочникСсылка.МестаДоставки  - место по которому нужно получить информацию.
//
Процедура ЗагрузитьИнформациюОМесте(Форма, Место) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнформацияПоМесту = Форма.ИнформацияПоМесту;
	ИнформацияПоМесту.Очистить();
	
	Если Место.ЭтоЗадача Тогда
		ИнформацияОЗадаче(Место, ИнформацияПоМесту);
	Иначе
		ИнформацияОМесте(Место, ИнформацияПоМесту);
	КонецЕсли;
	
КонецПроцедуры

// Функция создает приходные ордера и если отправитель «Заказ поставщику» или «Поступление товаров и услуг»
// распределяет по документам (от более ранних документов к более поздним).
// 
// Параметры:
//  Форма - УправляемаяФорма  				- основная форма обработки.
//  Отправитель -
//					ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//
// Возвращаемое значение:
//  Массив - массив ссылок созданных документов.
Функция СоздатьПриходныйОрдер(Форма, Отправитель, Приоритет, ОтборПоДокументам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли; 
	
	РезультатБлокировки = УстановитьБлокировкуСерийныеНомера(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли; 
	
	РезультатПроверки = ПроверкаПриходногоОрдера(Форма, Отправитель);
	Если РезультатПроверки Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗнч(Отправитель) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(Отправитель) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		РезультатПроверки = ПроверкаСерийныхНомеров(Форма, Отправитель);
		Если РезультатПроверки Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		МассивДокументов = СоздатьПриходныйОрдерСРаспределением(Отправитель, Форма.Склад, Форма);
		Если МассивДокументов = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;					
		КонецЕсли; 
	Иначе
		РезультатПроверки = ПроверкаНаПерепоставку(Форма, Отправитель);
		Если РезультатПроверки Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецЕсли; 
		МассивДокументов = СоздатьПриходныйОрдерБезРаспределения(Отправитель, Форма.Склад);
		Если МассивДокументов = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат Неопределено;					
		КонецЕсли; 
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();
	
	СформироватьПулПриемки(Форма, Отправитель, Приоритет, ОтборПоДокументам);
	
	Возврат МассивДокументов;
	
КонецФункции

// Процедура заполняет список номенклатуры, количеставо и серийные номера по распоряжению.
// 
// Параметры:
//  Форма - УправляемаяФорма  				- основная форма обработки.
//  Отправитель -
//					ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаказНаПеремещение
//					ДокументСсылка.ПеремещениеТоваров
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле номенклатуры (которое выбрано пользователем).
//
Процедура ЗаполнитьНоменклатуруИСерийныеНомера(Форма, Отправитель, ОтборПоДокументам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	РезультатБлокировки = УстановитьБлокировкуПриемкаТоваров(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатБлокировки = УстановитьБлокировкуСерийныеНомера(Отправитель, Форма.Склад);
	Если РезультатБлокировки Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	РезультатОчищения = ОчиститьРегистры(Форма.Склад, Отправитель);
	Если РезультатОчищения Тогда
		ОтменитьТранзакцию();
		Возврат;		
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьНоменклатуруПоПартнеру(Форма, Отправитель); 
	Иначе
		РезультатЗаписи = ЗаполнитьСерийныеНомераПоОтправителю(Форма, Отправитель);
		Если РезультатЗаписи Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		ЗаполнитьНоменклатуру(Форма, Отправитель);
	КонецЕсли;
	
	ТЗ_СписокНоменклатуры 	= СформироватьТаблицуСписокНоменклатуры(Форма.Склад, Отправитель, Форма.СписокНоменклатуры);
	РезультатЗаписи 		= ЗаписатьНоменклатуруПриемкаТоваров(Форма.Склад, Отправитель, ТЗ_СписокНоменклатуры);
	Если Не РезультатЗаписи Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СформироватьПулПриемки(Форма, Отправитель, 0, ОтборПоДокументам);
	
КонецПроцедуры

// Выполняет запись в регистр «РазмещениеНоменклатурыПоСкладскимЯчейкам».
//
// Параметры:
//  Форма 				  - УправляемаяФорма  - основная форма обработки. 
//  МассивИдентификаторов - Массив 			  - массив идентификаторов строк таблицы «СписокНоменклактуры»
//											    с номенклатурой которую нужно разместить.
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - ячейка для присвоения.
//  Склад  - СправочникСсылка.Склады		  - склад для присвоения ячейки.
//
Функция НазначитьСкладскуюЯчейкуНаСервере(Форма, МассивИдентификаторов, Ячейка, Склад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокНоменклатуры  = Форма.СписокНоменклатуры;
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для каждого ИдентификаторСтроки Из МассивИдентификаторов Цикл
		СтрокаТаблицы = СписокНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		НоваяСтрока   = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Запрос		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРазмещениеНоменклатуры();
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтменитьТранзакцию();
		Возврат Истина;
	КонецЕсли; 
	
	Блокировка 		  		= Новый БлокировкаДанных;
	ЭлементБлокировки 		= Блокировка.Добавить("РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Истина;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
		НаборЗаписей.Отбор.Ячейка.Установить(Выборка.Ячейка);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Ложь;
	
КонецФункции









////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Тексты запросов

Функция ПолучитьТекстЗапросаПулПриемки(ОтборПоДокументам)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Отправитель 			КАК Отправитель,
	|	КОЛИЧЕСТВО(Количество)  КАК Количество
	|ПОМЕСТИТЬ ОтправителиСНоменклатурой
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ 
	|	Склад = &Склад
	|СГРУППИРОВАТЬ ПО
	|	Отправитель
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ВозвратТоваровОтКлиента)
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаПеремещение)
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаСборку)
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПеремещениеТоваров)
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПрочееОприходованиеТоваров)
	|		КОГДА ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.СборкаТоваров)
	|		КОГДА ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Справочник.СоглашенияСПоставщиками)
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА 1
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА 1
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА 2
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА 3
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА 4
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА 5
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
	|			ТОГДА 6
	|		КОГДА ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА 7
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|			ТОГДА 8
	|		КОГДА ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА 9
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ВозвратТоваровОтКлиента).Партнер.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаПеремещение).СкладОтправитель.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаСборку).Склад.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПеремещениеТоваров).СкладОтправитель.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПрочееОприходованиеТоваров).Склад.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.СборкаТоваров).Склад.Наименование
	|		КОГДА ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Наименование
	|	КОНЕЦ КАК ОтправительПредставление,
	|	ВЫБОР
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ""Возврат товаров от клиента""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА ""Заказ на перемещение""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
	|			ТОГДА ""Заказ на сборку (разборку)""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ""Заказ поставщику / Поступление товаров и услуг""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ""Заявка на возврат товаров от клиента""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ""Перемещение товаров""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ""Заказ поставщику / Поступление товаров и услуг""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|			ТОГДА ""Прочее оприходование товаров""
	|		КОГДА ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ""Сборка товаров""
	|		КОГДА ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ""Соглашение с поставщиком""
	|	КОНЕЦ КАК Распоряжение,
	|	ЛОЖЬ  КАК ЭтоМесто,
	|	ВЫБОР
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ВозвратТоваровОтКлиента).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаПеремещение).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаСборку).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер.Код
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПеремещениеТоваров).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер.Код
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПрочееОприходованиеТоваров).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.СборкаТоваров).Номер
	|		КОГДА ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Справочник.СоглашенияСПоставщиками).Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаПеремещение).Дата
	|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПеремещениеТоваров).Дата
	|   ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК Дата
	|
	|ПОМЕСТИТЬ Отправители
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, %1 Склад = &Склад)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Транзитные места"" 	КАК Отправитель,
	|	0						КАК Приоритет,
	|	""Транзитные места"" 	КАК ОтправительПредставление,
	|	""Транзитные места""	КАК Распоряжение,
	|	ИСТИНА					КАК ЭтоМесто,
	|	0						КАК Номер,
	|   &ПустаяДата				КАК Дата
	|;
	|		
	|/////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отправители.Отправитель 						КАК Отправитель,
	|	Отправители.Приоритет 							КАК Приоритет,
	|	Отправители.ОтправительПредставление 			КАК ОтправительПредставление,
	|	Отправители.Распоряжение 						КАК Распоряжение,
	|	ВЫБОР ЕСТЬNULL(ОтправителиСНоменклатурой.Количество, 0)
	|		КОГДА 0
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ 											КАК ИндексКартинки,
	|	Отправители.ЭтоМесто							КАК ЭтоМесто,
	|	Отправители.Номер								КАК Номер,
	|	Отправители.Дата 								КАК Дата
	|ИЗ
	|	Отправители КАК Отправители
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтправителиСНоменклатурой КАК ОтправителиСНоменклатурой
	|		ПО Отправители.Отправитель = ОтправителиСНоменклатурой.Отправитель
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отправители.Приоритет ВОЗР,
	|	Отправители.ОтправительПредставление ВОЗР";
	
	Если ОтборПоДокументам.Количество() > 0 Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "ДокументПоступления В (&ОтборПоДокументам) И ");
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПулОтгрузки()

Функция ПолучитьТекстЗапросаПулНоменклатуры(ПараметрОтбора)
	
	ТекстЗапроса = "
	// 0.
	|ВЫБРАТЬ
	|	Номенклатура					КАК Номенклатура,
	|	Характеристика					КАК Характеристика,
	|	Номенклатура.ВидНоменклатуры    КАК ВидНоменклатуры,
	|	СУММА(КПоступлениюОстаток)		КАК Принять,
	|	СУММА(ПринимаетсяОстаток)		КАК Принимается,
	|	ВЫБОР
	|		КОГДА Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	%1
	// 2. // ПараметриОтбора= Перемещения 12.
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склад						 КАК Склад,
	|	Пользователь				 КАК Пользователь,
	|	ВЫРАЗИТЬ(Отправитель КАК %2) КАК Отправитель,
	|	Номенклатура				 КАК Номенклатура,
	|	Характеристика				 КАК Характеристика,
	|	Количество					 КАК Количество
	|ПОМЕСТИТЬ ПриемкаТоваровПоПользователям
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Склад = &Склад
	|	И Отправитель ССЫЛКА %2
	|;
	|
	// 3. // ПараметриОтбора= Перемещения 13.
	////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склад				КАК Склад,
	|	Отправитель			КАК Отправитель,
	|	Номенклатура		КАК Номенклатура,
	|	Характеристика		КАК Характеристика,
	|	СУММА(Количество)	КАК Количество
	|ПОМЕСТИТЬ ПулПриемки
	|ИЗ
	|	ПриемкаТоваровПоПользователям
	|СГРУППИРОВАТЬ ПО
	|	Склад,
	|	Отправитель,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	// 4. // ПараметриОтбора= Перемещения 14.
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склад				КАК Склад,
	|	Отправитель			КАК Отправитель,
	|	Номенклатура		КАК Номенклатура,
	|	Характеристика		КАК Характеристика,
	|	Количество			КАК Количество	
	|ПОМЕСТИТЬ ПриемкаТоваров
	|ИЗ
	|	ПриемкаТоваровПоПользователям
	|ГДЕ
	|	Пользователь = &Пользователь
	|;
	|
	// 5.   // ПараметриОтбора= Перемещения 15.
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Номенклатура 			КАК Номенклатура,
	|	ТаблицаШтрихкодов.Характеристика 		КАК Характеристика,
	|	КОЛИЧЕСТВО(ТаблицаШтрихкодов.Штрихкод) 	КАК КоличествоШтрихкодов
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ТаблицаШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриемкаТоваров КАК ПриемкаТоваров
	|		ПО ТаблицаШтрихкодов.Номенклатура 		= ПриемкаТоваров.Номенклатура
	|			И ТаблицаШтрихкодов.Характеристика 	= ПриемкаТоваров.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаШтрихкодов.Номенклатура,
	|	ТаблицаШтрихкодов.Характеристика
	|;
	|
	// 6.   // ПараметриОтбора= Перемещения 16.
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Номенклатура 			 КАК Номенклатура,
	|	СерийныеНомера.Характеристика 			 КАК Характеристика,
	|	КОЛИЧЕСТВО(СерийныеНомера.СерийныйНомер) КАК Количество
	|ПОМЕСТИТЬ КоличествоСерийныхНомеров
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера КАК СерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриемкаТоваров КАК ПриемкаТоваров
	|		ПО СерийныеНомера.Отправитель 		= &ПараметрОтбора
	|			И СерийныеНомера.Пользователь	= &Пользователь
	|			И СерийныеНомера.Склад			= &Склад
	|			И СерийныеНомера.Номенклатура   = ПриемкаТоваров.Номенклатура
	|			И СерийныеНомера.Характеристика = ПриемкаТоваров.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	СерийныеНомера.Номенклатура,
	|	СерийныеНомера.Характеристика
	|;
	|
	// 7.  // ПараметриОтбора= Перемещения 17.
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемкаТоваров.Склад								КАК Склад,
	|	ПриемкаТоваров.Номенклатура 						КАК Номенклатура,
	|	ПриемкаТоваров.Характеристика						КАК Характеристика,
	|	ПриемкаТоваров.Количество							КАК Количество,
	|	ЕСТЬNULL(ТаблицаШтрихкодов.КоличествоШтрихкодов, 0) КАК КоличествоШтрихкодов,
	|	ВЫБОР
	|		КОГДА НЕ ПриемкаТоваров.Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 0
	|		КОГДА ПриемкаТоваров.Количество <> ЕСТЬNULL(КоличествоСерийныхНомеров.Количество, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки,
	|	ПриемкаТоваров.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	ПриемкаТоваров КАК ПриемкаТоваров
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ПриемкаТоваров.Номенклатура 		= ТаблицаШтрихкодов.Номенклатура
	|			И ПриемкаТоваров.Характеристика = ТаблицаШтрихкодов.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСерийныхНомеров КАК КоличествоСерийныхНомеров
	|		ПО ПриемкаТоваров.Номенклатура 		= КоличествоСерийныхНомеров.Номенклатура
	|			И ПриемкаТоваров.Характеристика = КоличествоСерийныхНомеров.Характеристика		
	|
	|ГДЕ
	|	ПриемкаТоваров.Отправитель = &ПараметрОтбора
	|;
	|
	// 8.   // ПараметриОтбора= Перемещения 18.
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешНоменклатура.Номенклатура.Код										КАК Код,
	|	КешНоменклатура.Номенклатура.Артикул									КАК Артикул,
	|	КешНоменклатура.Номенклатура											КАК Номенклатура,
	|	КешНоменклатура.Характеристика											КАК Характеристика,
	|	КешНоменклатура.ЕдиницаИзмерения										КАК ЕдиницаИзмерения,
	|	КешНоменклатура.Принять													КАК Принять,
	|	КешНоменклатура.Принимается	+ ЕСТЬNULL(ПулПриемки.Количество, 0)	КАК Принимается,
	|	ВЫБОР
	|		КОГДА (КешНоменклатура.Принять - (КешНоменклатура.Принимается + ЕСТЬNULL(ПулПриемки.Количество, 0))) < 0 
	|			ТОГДА (КешНоменклатура.Принимается + ЕСТЬNULL(ПулПриемки.Количество, 0)) - КешНоменклатура.Принять
	|		ИНАЧЕ 0
	|	КОНЕЦ 																	КАК Перепоставка,
	|	КешНоменклатура.ИндексКартинки											КАК ИндексКартинки,
	|	ЕСТЬNULL(ТоварыВРезерве.ТоварВРезерве, ЛОЖЬ)							КАК ТоварВРезерве
	|ИЗ
	|	КешНоменклатура КАК КешНоменклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПулПриемки КАК ПулПриемки
	|		ПО КешНоменклатура.Номенклатура 		= ПулПриемки.Номенклатура
	|			И КешНоменклатура.Характеристика 	= ПулПриемки.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВРезерве КАК ТоварыВРезерве
	|		ПО КешНоменклатура.Номенклатура 		= ТоварыВРезерве.Номенклатура
	|			И КешНоменклатура.Характеристика 	= ТоварыВРезерве.Характеристика		
	|
	|УПОРЯДОЧИТЬ ПО
	|	КешНоменклатура.ВидНоменклатуры.Наименование ВОЗР,
	|	КешНоменклатура.Номенклатура.Наименование ВОЗР
	|;";
	
	
	
	Если ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Справочник.СоглашенияСПоставщиками
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Справочник.СоглашенияСПоставщиками) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		
		ТипОтправителя = "Справочник.СоглашенияСПоставщиками";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.Партнеры") Тогда
		 ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер = &ПараметрОтбора
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|   	Номенклатура,
		|	Характеристика
		|;
		//1
		|ВЫБРАТЬ
		|	Номенклатура					КАК Номенклатура,
		|	Характеристика					КАК Характеристика,
		|	ДокументПоступления			  	КАК ДокументПоступления	
		|ПОМЕСТИТЬ КешПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер = &ПараметрОтбора
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|   	ДокументПоступления,
		|	Номенклатура,
		|	Характеристика
		|;
		//2
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КешНоменклатура.Номенклатура 	КАК Номенклатура,
		|	КешНоменклатура.Характеристика 	КАК Характеристика,
		|	Выбор
		|		Когда ISNULL(ОбеспечениеЗаказовОстаткиИОбороты.ЗаказаноКонечныйОстаток,0)>0 Тогда
		|			Истина
		|	Конец 							КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	КешПоступления КАК КешНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.ОстаткиИОбороты(, , Регистратор, , Склад = &Склад) КАК ОбеспечениеЗаказовОстаткиИОбороты
		|		ПО КешНоменклатура.ДокументПоступления = ОбеспечениеЗаказовОстаткиИОбороты.Регистратор
		|			И КешНоменклатура.Номенклатура = ОбеспечениеЗаказовОстаткиИОбороты.Номенклатура
		|			И КешНоменклатура.Характеристика = ОбеспечениеЗаказовОстаткиИОбороты.Характеристика
		|;";
		ТипОтправителя = "Справочник.Партнеры";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаПеремещение
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаПеремещение) = &ПараметрОтбора
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		
		ТипОтправителя = "Документ.ЗаказНаПеремещение";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|   ДокументПоступления			  КАК ДокументПоступления	
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПеремещениеТоваров) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|   ДокументПоступления,
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Модуль_ДоступныеСклады.Склад КАК Склад
		|ПОМЕСТИТЬ КешСклады
		|ИЗ
		|	РегистрСведений.Модуль_ДоступныеСклады КАК Модуль_ДоступныеСклады
		|ГДЕ
		|	НЕ Модуль_ДоступныеСклады.Склад.ПометкаУдаления
		|;
		////////////////////////////////////////////////////////////////////////////////
		// 2.
		|ВЫБРАТЬ
		|	ВариантыМаршрутовСкладыОтгрузки.Ссылка КАК Маршрут
		|ПОМЕСТИТЬ МаршрутыОтОтправителя
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
		|ГДЕ
		|	ВариантыМаршрутовСкладыОтгрузки.Склад = &Склад
		
		|ОБЪЕДИНИТЬ
		
		|ВЫБРАТЬ
		|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
		|ГДЕ
		|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель В
		|			(ВЫБРАТЬ
		|				КешСклады.Склад
		|			ИЗ
		|				КешСклады)
		|	И ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &Склад
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 3.
		|ВЫБРАТЬ
		|	КешСклады.Склад КАК СкладПолучателя,
		|	ВариантыМаршрутовСписокАдресов.Ссылка КАК Маршрут
		|ПОМЕСТИТЬ МаршрутыКПолучателю
		|ИЗ
		|	КешСклады КАК КешСклады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
		|		ПО КешСклады.Склад = ВариантыМаршрутовСписокАдресов.ГородСклад
		|ГДЕ
		|	ВариантыМаршрутовСписокАдресов.ГородСклад В
		|			(ВЫБРАТЬ
		|				КешСклады.Склад
		|			ИЗ
		|				КешСклады)
		
		|ОБЪЕДИНИТЬ
		
		|ВЫБРАТЬ
		|	КешСклады.Склад,
		|	ВариантыМаршрутовВозвратнаяДоставка.Ссылка
		|ИЗ
		|	КешСклады КАК КешСклады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
		|		ПО КешСклады.Склад = ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель
		|ГДЕ
		|	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель В
		|			(ВЫБРАТЬ
		|				КешСклады.Склад
		|			ИЗ
		|				КешСклады)
		|	И ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &Склад
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 4.
		|ВЫБРАТЬ
		|	&Склад КАК СкладОтправитель,
		|	МаршрутыКПолучателю.СкладПолучателя КАК СкладПолучатель,
		|	МаршрутыКПолучателю.Маршрут КАК Маршрут,
		|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута КАК КалендарьМаршрута,
		|	ЕСТЬNULL(СкладыОтгрузки.ПН, СкладыОтгрузкиРезерв.ПН) КАК ПН,
		|	ЕСТЬNULL(СкладыОтгрузки.ВТ, СкладыОтгрузкиРезерв.ВТ) КАК ВТ,
		|	ЕСТЬNULL(СкладыОтгрузки.СР, СкладыОтгрузкиРезерв.СР) КАК СР,
		|	ЕСТЬNULL(СкладыОтгрузки.ЧТ, СкладыОтгрузкиРезерв.ЧТ) КАК ЧТ,
		|	ЕСТЬNULL(СкладыОтгрузки.ПТ, СкладыОтгрузкиРезерв.ПТ) КАК ПТ,
		|	ЕСТЬNULL(СкладыОтгрузки.СБ, СкладыОтгрузкиРезерв.СБ) КАК СБ,
		|	ЕСТЬNULL(СкладыОтгрузки.ВС, СкладыОтгрузкиРезерв.ВС) КАК ВС,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаПН, СкладыОтгрузкиРезерв.ВремяВыездаПН) КАК ВремяВыездаПН,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаВТ, СкладыОтгрузкиРезерв.ВремяВыездаВТ) КАК ВремяВыездаВТ,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаСР, СкладыОтгрузкиРезерв.ВремяВыездаСР) КАК ВремяВыездаСР,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаЧТ, СкладыОтгрузкиРезерв.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаПТ, СкладыОтгрузкиРезерв.ВремяВыездаПТ) КАК ВремяВыездаПТ,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаСБ, СкладыОтгрузкиРезерв.ВремяВыездаСБ) КАК ВремяВыездаСБ,
		|	ЕСТЬNULL(СкладыОтгрузки.ВремяВыездаВС, СкладыОтгрузкиРезерв.ВремяВыездаВС) КАК ВремяВыездаВС
		|ПОМЕСТИТЬ МаршрутПрямойДоставки
		|ИЗ
		|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
		|		ПО (МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|		ПО (СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут)
		|			И (СкладыОтгрузки.Склад = &Склад)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузкиРезерв
		|		ПО (СкладыОтгрузкиРезерв.Ссылка = МаршрутыКПолучателю.Маршрут)
		|			И МаршрутыКПолучателю.СкладПолучателя = СкладыОтгрузкиРезерв.Склад
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 5.
		|ВЫБРАТЬ
		|	МаршрутПрямойДоставки.СкладОтправитель,
		|	МаршрутПрямойДоставки.СкладПолучатель,
		|	МаршрутПрямойДоставки.Маршрут,
		|	ПРЕДСТАВЛЕНИЕ(МаршрутПрямойДоставки.Маршрут) КАК МаршрутПредсталение,
		|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|						КОГДА 1
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|						КОГДА 2
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|						КОГДА 3
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|						КОГДА 4
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|						КОГДА 5
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|						КОГДА 6
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|						КОГДА 7
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|					КОГДА 1
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|					КОГДА 2
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|					КОГДА 3
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|					КОГДА 4
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|					КОГДА 5
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|					КОГДА 6
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|					КОГДА 7
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|				КОНЕЦ))) КАК ДатаВремяВыезда
		|ПОМЕСТИТЬ КешМаршруты
		|ИЗ
		|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ПО (КалендарныеГрафики.Календарь = МаршрутПрямойДоставки.КалендарьМаршрута)
		|			И (КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, ДЕНЬ))
		|			И (КалендарныеГрафики.ДеньВключенВГрафик)
		|			И (ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|				КОГДА 1
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.ПН
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОГДА 2
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.ВТ
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОГДА 3
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.СР
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОГДА 4
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.ЧТ
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОГДА 5
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.ПТ
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОГДА 6
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.СБ
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				КОГДА 7
		|					ТОГДА ВЫБОР
		|							КОГДА МаршрутПрямойДоставки.ВС
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|			КОНЕЦ)
		|ГДЕ
		|	(&ДатаСеанса < КалендарныеГрафики.ДатаГрафика
		|			ИЛИ ЧАС(&ДатаСеанса) < ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|					КОГДА 1
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|					КОГДА 2
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|					КОГДА 3
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|					КОГДА 4
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|					КОГДА 5
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|					КОГДА 6
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|					КОГДА 7
		|						ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|				КОНЕЦ)
		|			ИЛИ ЧАС(&ДатаСеанса) = ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|						КОГДА 1
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|						КОГДА 2
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|						КОГДА 3
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|						КОГДА 4
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|						КОГДА 5
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|						КОГДА 6
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|						КОГДА 7
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|					КОНЕЦ)
		|				И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|						КОГДА 1
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|						КОГДА 2
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|						КОГДА 3
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|						КОГДА 4
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|						КОГДА 5
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|						КОГДА 6
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|						КОГДА 7
		|							ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|					КОНЕЦ))
		
		|СГРУППИРОВАТЬ ПО
		|	МаршрутПрямойДоставки.СкладОтправитель,
		|	МаршрутПрямойДоставки.СкладПолучатель,
		|	МаршрутПрямойДоставки.Маршрут
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 6.
		|ВЫБРАТЬ
		|	КешМаршруты.СкладОтправитель,
		|	МИНИМУМ(КешМаршруты.ДатаВремяВыезда) КАК ДатаВремяВыезда
		|ПОМЕСТИТЬ КешПервыйМаршрут
		|ИЗ
		|	КешМаршруты КАК КешМаршруты
		
		|СГРУППИРОВАТЬ ПО
		|	КешМаршруты.СкладОтправитель
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 7.
		|ВЫБРАТЬ
		|	КешМаршруты.СкладОтправитель КАК СкладОтправитель,
		|	КешМаршруты.СкладПолучатель КАК СкладПолучатель,
		|	КешМаршруты.Маршрут КАК Маршрут
		|ПОМЕСТИТЬ КешСкладыПерогоМаршрутаОтгрузки
		|ИЗ
		|	КешМаршруты КАК КешМаршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПервыйМаршрут КАК КешПервыйМаршрут
		|		ПО КешМаршруты.СкладОтправитель = КешПервыйМаршрут.СкладОтправитель
		|			И КешМаршруты.ДатаВремяВыезда = КешПервыйМаршрут.ДатаВремяВыезда
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 8.
		|ВЫБРАТЬ
		|	КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Номенклатура,
		|	КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Характеристика,
		|	КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Склад,
		|	КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Назначение
		|ПОМЕСТИТЬ КешНазначения
		|ИЗ
		|	РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(
		|			,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						КешНоменклатура.Номенклатура,
		|						КешНоменклатура.Характеристика
		|					ИЗ
		|						КешНоменклатура)
		|				И Склад = &Склад) КАК КТС_ТоварыКПоступлениюПодОбеспечениеОстатки
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		// 9.
		|ВЫБРАТЬ
		|	КешНазначения.Номенклатура,
		|	КешНазначения.Характеристика,
		|	КешНазначения.Склад,
		|	ЗаказКлиента.Склад КАК СкладПолучатель
		|ПОМЕСТИТЬ КешСкладыОтправителяИзНазначения
		|ИЗ
		|	КешНазначения КАК КешНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО КешНазначения.Назначение.Заказ = ЗаказКлиента.Ссылка
		
		|ОБЪЕДИНИТЬ ВСЕ
		
		|ВЫБРАТЬ
		|	КешНазначения.Номенклатура,
		|	КешНазначения.Характеристика,
		|	КешНазначения.Склад,
		|	ЗаказНаПеремещение.СкладПолучатель
		|ИЗ
		|	КешНазначения КАК КешНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|		ПО КешНазначения.Назначение.Заказ = ЗаказНаПеремещение.Ссылка
		|;
		
		////////////////////////////////////////////////////////////////////////////////
		//10
		|ВЫБРАТЬ
		|	КешСкладыОтправителяИзНазначения.Номенклатура,
		|	КешСкладыОтправителяИзНазначения.Характеристика,
		|	Истина КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыПодНазначения
		|ИЗ
		|	КешСкладыОтправителяИзНазначения КАК КешСкладыОтправителяИзНазначения
		|ГДЕ
		|	КешСкладыОтправителяИзНазначения.Склад = КешСкладыОтправителяИзНазначения.СкладПолучатель
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	КешСкладыОтправителяИзНазначения.Номенклатура,
		|	КешСкладыОтправителяИзНазначения.Характеристика,
		|	Истина
		|ИЗ
		|	КешСкладыОтправителяИзНазначения КАК КешСкладыОтправителяИзНазначения
		|ГДЕ
		|	КешСкладыОтправителяИзНазначения.СкладПолучатель В(Выбрать  СкладПолучатель Из КешСкладыПерогоМаршрутаОтгрузки)
		|;
		//11
		|ВЫБРАТЬ  Различные
		|	Номенклатура,
		|	Характеристика,
		|	ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	ТоварыПодНазначения КАК ТоварыПодНазначения
		|;";
		ТипОтправителя = "Документ.ПеремещениеТоваров";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ВозвратТоваровОтКлиента) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		
		ТипОтправителя = "Документ.ВозвратТоваровОтКлиента";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		
		ТипОтправителя = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ТекстОтбора = " 
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ПрочееОприходованиеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПрочееОприходованиеТоваров) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		
		ТипОтправителя = "Документ.ПрочееОприходованиеТоваров";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ТекстОтбора = "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.СборкаТоваров
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.СборкаТоваров) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		ТипОтправителя = "Документ.СборкаТоваров";
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		ТекстОтбора = " 
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ДокументПоступления ССЫЛКА Документ.ЗаказНаСборку
		|			ТОГДА ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказНаСборку) = &ПараметрОтбора
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		// 1.
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	Характеристика      КАК Характеристика,
		|	ИСТИНА				КАК ТоварВРезерве
		|ПОМЕСТИТЬ ТоварыВРезерве
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|						(Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешНоменклатура)
		|						И Склад = &Склад)
		|ГДЕ
		|	ВРезервеОстаток > 0
		|;";
		
		ТипОтправителя = "Документ.ЗаказНаСборку";
	Иначе
		ТекстОтбора 	= "
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ КешНоменклатура
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад)
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		ТипОтправителя  = "";
	КонецЕсли;	
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстОтбора, ТипОтправителя);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПулНоменклатуры()

Функция ПолучитьТекстЗапросаДобавлениеПоШтрихкоду()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТабНоменклатура.Номенклатура 	КАК Номенклатура,
	|	ТабНоменклатура.Характеристика 	КАК Характеристика,
	|	ТабНоменклатура.Количество 		КАК Количество
	|ПОМЕСТИТЬ КешНоменклатура
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров КАК ТабНоменклатура
	|ГДЕ
	|	ТабНоменклатура.Пользователь 	= &Пользователь
	|	И ТабНоменклатура.Отправитель 	= &Отправитель
	|	И ТабНоменклатура.Склад 		= &Склад
	|;
	|
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура 	КАК Номенклатура,
	|	Характеристика  КАК Характеристика,
	|	ВЫБОР Упаковка
	|  		КОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Упаковка.Коэффициент
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ НоменклатураПоШтрихкоду
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры
	|ГДЕ
	|	Штрихкод = &Штрихкод
	|;
	|
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика 		КАК Характеристика,
	|	СУММА(ВложенныйЗапрос.Количество) 	КАК Количество
	|ПОМЕСТИТЬ СвернутаяТаблицаНоменклатуры
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			Номенклатура 	КАК Номенклатура,
	|			Характеристика 	КАК Характеристика,
	|			Количество 		КАК Количество		
	|		ИЗ
	|			КешНоменклатура
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Номенклатура 	КАК Номенклатура,
	|			Характеристика 	КАК Характеристика,
	|			Количество 		КАК Количество
	|		ИЗ НоменклатураПоШтрихкоду) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Номенклатура 			КАК Номенклатура,
	|	ТаблицаШтрихкодов.Характеристика 		КАК Характеристика,
	|	КОЛИЧЕСТВО(ТаблицаШтрихкодов.Штрихкод)  КАК КоличествоШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ТаблицаШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвернутаяТаблицаНоменклатуры КАК ТаблицаНоменклатура
	|		ПО ТаблицаШтрихкодов.Номенклатура 		= ТаблицаНоменклатура.Номенклатура
	|			И ТаблицаШтрихкодов.Характеристика 	= ТаблицаНоменклатура.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаШтрихкодов.Номенклатура,
	|	ТаблицаШтрихкодов.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Пользователь						КАК Пользователь,
	|	&Склад								КАК Склад,
	|	&Отправитель						КАК Отправитель,
	|	ТаблицаНоменклатуры.Номенклатура 	КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика 	КАК Характеристика,
	|	ТаблицаНоменклатуры.Количество 		КАК Количество,
	|	ВЫБОР
	|		КОГДА НоменклатураПоШтрихкоду.Количество ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	СвернутаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураПоШтрихкоду КАК НоменклатураПоШтрихкоду
	|		ПО ТаблицаНоменклатуры.Номенклатура 	 = НоменклатураПоШтрихкоду.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = НоменклатураПоШтрихкоду.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаДобавлениеПоШтрихкоду()

Функция ПолучитьТекстЗапросаСписокНоменклатуры()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Склад			КАК Склад,
	|	Номенклатура	КАК Номенклатура,
	|	Характеристика	КАК Характеристика,
	|	Количество      КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь  = &Пользователь
	|	И Склад	      = &Склад
	|	И Отправитель = &Отправитель
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура 			КАК Номенклатура,
	|	Штрихкоды.Характеристика 		КАК Характеристика,
	|	КОЛИЧЕСТВО(Штрихкоды.Штрихкод)  КАК КоличествоШтрихкодов
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ                                                                  
	|	ТаблицаНоменклатуры КАК ТабНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Штрихкоды.Номенклатура 	   = ТабНоменклатуры.Номенклатура
	|			И Штрихкоды.Характеристика = ТабНоменклатуры.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Номенклатура 			 КАК Номенклатура,
	|	СерийныеНомера.Характеристика 			 КАК Характеристика,
	|	КОЛИЧЕСТВО(СерийныеНомера.СерийныйНомер) КАК Количество
	|ПОМЕСТИТЬ КоличествоСерийныхНомеров
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера КАК СерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ПО СерийныеНомера.Отправитель 		= &Отправитель
	|			И СерийныеНомера.Пользователь	= &Пользователь
	|			И СерийныеНомера.Склад 			= &Склад
	|			И СерийныеНомера.Номенклатура   = ТаблицаНоменклатуры.Номенклатура
	|			И СерийныеНомера.Характеристика = ТаблицаНоменклатуры.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	СерийныеНомера.Номенклатура,
	|	СерийныеНомера.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Склад							КАК Склад,
	|	ТаблицаНоменклатуры.Номенклатура 					КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика 					КАК Характеристика,
	|	ТаблицаНоменклатуры.Количество 						КАК Количество,
	|	ЕСТЬNULL(ТаблицаШтрихкодов.КоличествоШтрихкодов, 0) КАК КоличествоШтрихкодов,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаНоменклатуры.Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 0
	|		КОГДА ТаблицаНоменклатуры.Количество <> ЕСТЬNULL(ТаблицаСерийныхНомеров.Количество, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки,
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ТаблицаНоменклатуры.Номенклатура 	 = ТаблицаШтрихкодов.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТаблицаШтрихкодов.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСерийныхНомеров КАК ТаблицаСерийныхНомеров
	|		ПО ТаблицаНоменклатуры.Номенклатура 	 = ТаблицаСерийныхНомеров.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТаблицаСерийныхНомеров.Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСписокНоменклатуры()

Функция ПолучитьТекстЗапросаИндексКартинкиСН()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	Характеристика				КАК Характеристика,
	|	КОЛИЧЕСТВО(СерийныйНомер) 	КАК КоличествоСерийныхНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|	И Номенклатура 	= &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемкаТоваров.Номенклатура				КАК Номенклатура,
	|	ПриемкаТоваров.Характеристика			КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ ПриемкаТоваров.Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 0
	|		КОГДА ПриемкаТоваров.Количество <> ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоСерийныхНомеров, 0)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров КАК ПриемкаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныхНомеров КАК ТаблицаСерийныхНомеров
	|		ПО ПриемкаТоваров.Номенклатура 		= ТаблицаСерийныхНомеров.Номенклатура
	|			И ПриемкаТоваров.Характеристика = ТаблицаСерийныхНомеров.Характеристика
	|ГДЕ
	|	ПриемкаТоваров.Склад			= &Склад
	|	И ПриемкаТоваров.Отправитель 		= &Отправитель
	|	И ПриемкаТоваров.Номенклатура	= &Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИндексКартинкиСН()

Функция ПолучитьТекстЗапросаСерийныеНомера()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СерийныйНомер				КАК СерийныйНомер,
	|	СерийныйНомер.Представление КАК СерийныйНомерПредставление
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|	И Номенклатура	= &Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСерийныеНомера()

Функция ПолучитьТекстЗапросаПроверкиКоличестваСН()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Количество   КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|	И Номенклатура  = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	КОЛИЧЕСТВО(СерийныйНомер) 	КАК КоличествоСерийныхНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныеНомера
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|	И Номенклатура  = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество - ЕСТЬNULL(ТаблицаСерийныеНомера.КоличествоСерийныхНомеров, 0) КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерийныеНомера.Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПроверкиКоличестваСН()

Функция ПолучитьТекстЗапросаПроверкиКоличестваСНЗаполнение()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Количество   КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|	И Номенклатура  = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	КОЛИЧЕСТВО(СерийныйНомер) 	КАК КоличествоСерийныхНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныеНомера
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|	И Номенклатура  = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество - ЕСТЬNULL(ТаблицаСерийныеНомера.КоличествоСерийныхНомеров, 0) - &КоличествоНомеров КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерийныеНомера.Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПроверкиКоличестваСНЗаполнения()

Функция ПолучитьТекстЗапросаПулМест()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Место
	|ПОМЕСТИТЬ ТаблицаМестПредварительная
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Владелец ССЫЛКА Справочник.Партнеры
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫРАЗИТЬ(Владелец КАК Справочник.Склады) = &Склад
	|	КОНЕЦ
	|	И Транзит
	|	И НЕ ПометкаУдаления
	|	И НЕ ЭтоЗадача
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтгрузкаМест.Место КАК Место
	|ПОМЕСТИТЬ РазукомплектованыеМеста
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест КАК ОтгрузкаМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМестПредварительная КАК ТаблицаМест
	|		ПО ОтгрузкаМест.Место = ТаблицаМест.Место
	|ГДЕ
	|	ОтгрузкаМест.СтатусОтгрузки = &СтатусМестоРазукомплектовано
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место 					 КАК Место,
	|	Место.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ПОМЕСТИТЬ ТаблицаМест
	|ИЗ
	|	ТаблицаМестПредварительная
	|ГДЕ
	|	НЕ Место В (ВЫБРАТЬ Место ИЗ РазукомплектованыеМеста)
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгрузкаМест.Место КАК Место,
	|	ОтгрузкаМест.Склад КАК Склад
	|ПОМЕСТИТЬ СкладыОтгрузки
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест КАК ОтгрузкаМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМест КАК ТаблицаМест
	|		ПО ОтгрузкаМест.Место = ТаблицаМест.Место
	|ГДЕ
	|	ОтгрузкаМест.СтатусОтгрузки	= &СтатусОтгрузки
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНаПеремещение				   КАК ЗаказНаПеремещение,
	|	ЗаказНаПеремещение.СкладПолучатель КАК Склад
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (ВЫБРАТЬ ЗаказНаПеремещение ИЗ ТаблицаМест))
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 			КАК Место,
	|	ТранзитныйСклад КАК Склад
	|ПОМЕСТИТЬ ТаблицаЗадачПредварительная
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Транзит
	|	И НЕ ПометкаУдаления
	|	И ЭтоЗадача
	|	И ТранзитныйСклад = &Склад
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиНаМаршрут.Место КАК Место
	|ПОМЕСТИТЬ ТаблицаЗадачИсключений
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗадачПредварительная КАК ТаблицаЗадач
	|		ПО ЗадачиНаМаршрут.Место 		  = ТаблицаЗадач.Место
	|			И ЗадачиНаМаршрут.Отправитель = ТаблицаЗадач.Склад
	|;		
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место 				КАК Место,
	|	Место.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	ТаблицаЗадачПредварительная
	|ГДЕ
	|	Место НЕ В (ВЫБРАТЬ Место ИЗ ТаблицаЗадачИсключений)
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Место 						КАК Место,
	|	ВложенныйЗапрос.МестоПредставление  		КАК МестоПредставление,
	|	ВложенныйЗапрос.Ответственный				КАК Ответственный,
	|	ВложенныйЗапрос.Отправитель					КАК Отправитель,
	|	ВложенныйЗапрос.ОтправительПредставление	КАК ОтправительПредставление,
	|	ВложенныйЗапрос.Получатель					КАК Получатель,
	|	ВложенныйЗапрос.ПолучательПредставление		КАК ПолучательПредставление
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			ТаблицаМест.Место 					КАК Место,
	|			ТаблицаМест.Место.Представление 	КАК МестоПредставление,
	|			ТаблицаМест.Место.Ответственный 	КАК Ответственный,
	|			СкладыОтгрузки.Склад				КАК Отправитель,
	|			СкладыОтгрузки.Склад.Представление  КАК ОтправительПредставление,
	|			ТаблицаЗаказов.Склад				КАК Получатель,
	|			ТаблицаЗаказов.Склад.Представление	КАК ПолучательПредставление
	|		ИЗ
	|			ТаблицаМест КАК ТаблицаМест
	|	
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаказов КАК ТаблицаЗаказов
	|				ПО ТаблицаМест.ЗаказНаПеремещение = ТаблицаЗаказов.ЗаказНаПеремещение
	|		
	|				ЛЕВОЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК СкладыОтгрузки
	|				ПО ТаблицаМест.Место = СкладыОтгрузки.Место
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТаблицаЗадач.Место 					КАК Место,
	|			ТаблицаЗадач.Место.Представление 	КАК МестоПредставление,
	|			ТаблицаЗадач.Ответственный  		КАК Ответственный,
	|			ЗадачиНаМаршрут.Отправитель 		КАК Отправитель,
	|			ВЫБОР
	|				КОГДА ЗадачиНаМаршрут.Отправитель ССЫЛКА Справочник.Склады
	|					ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрут.Отправитель КАК Справочник.Склады).Представление
	|				КОГДА ЗадачиНаМаршрут.Отправитель ССЫЛКА Справочник.Партнеры
	|					ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрут.Отправитель КАК Справочник.Партнеры).Представление
	|			КОНЕЦ КАК ОтправительПредставление, 
	|			ТаблицаЗадач.Место.Владелец	КАК Получатель,
	|			ВЫБОР
	|				КОГДА ТаблицаЗадач.Место.Владелец ССЫЛКА Справочник.Склады
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаЗадач.Место.Владелец КАК Справочник.Склады).Представление
	|				КОГДА ТаблицаЗадач.Место.Владелец ССЫЛКА Справочник.Партнеры
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаЗадач.Место.Владелец КАК Справочник.Партнеры).Представление
	|			КОНЕЦ КАК ПолучательПредставление
	|		ИЗ
	|			РегистрСведений.ЗадачиНаМаршрут	КАК ЗадачиНаМаршрут
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|				ПО ЗадачиНаМаршрут.Место = ТаблицаЗадач.Место) КАК ВложенныйЗапрос
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ОтправительПредставление ВОЗР, ВложенныйЗапрос.МестоПредставление ВОЗР";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПулМест()

Функция ПолучитьТекстЗапросИнформацияПоМесту()
	
	ТекстЗапроса = "
	|/////////////////////////////////////////////////////////////////////////////
	|// 0.
	|ВЫБРАТЬ
	|	Место КАК Место,
	|	Склад КАК СкладОтправитель
	|ПОМЕСТИТЬ ТаблицаОтправителей
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест
	|ГДЕ
	|	Место 	 		 = &Место
	|	И СтатусОтгрузки = &Статус
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// 1.
	|ВЫБРАТЬ
	|	МестаДоставки.Код 												КАК Код,
	|	МестаДоставки.Ответственный.Представление						КАК Ответственный,
	|	ТаблицаОтправителей.СкладОтправитель.Представление				КАК Отправитель,
	|	МестаДоставки.ЗаказНаПеремещение.СкладПолучатель.Представление	КАК Получатель
	|ИЗ
	|	Справочник.МестаДоставки КАК МестаДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтправителей КАК ТаблицаОтправителей
	|		ПО МестаДоставки.Ссылка = ТаблицаОтправителей.Место
	|ГДЕ
	|	Ссылка = &Место
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// 2.
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	|		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	|	КОНЕЦ КАК Документ
	|ПОМЕСТИТЬ ДокументыПредварительные
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// 3.
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВнутреннееПотреблениеТоваров)
	|		КОГДА Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВозвратТоваровПоставщику)
	|		КОГДА Документ ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПеремещениеТоваров)
	|		КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг)
	|		КОГДА Документ ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.СборкаТоваров)
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВнутреннееПотреблениеТоваров).Представление
	|		КОГДА Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВозвратТоваровПоставщику).Представление
	|		КОГДА Документ ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПеремещениеТоваров).Представление
	|		КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг).Представление
	|		КОГДА Документ ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.СборкаТоваров).Представление
	|	КОНЕЦ КАК ПредставлениеДокумента
	|ИЗ
	|	ДокументыПредварительные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение,
	|	ЗаказНаПеремещение.Представление
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Ссылка = &Место
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// 4.
	|ВЫБРАТЬ
	|	Период 							КАК Период,
	|	ВариантМаршрута.Представление   КАК Маршрут,
	|	Склад.Представление				КАК Склад,
	|	Пользователь.Представление		КАК Пользователь,
	|	СтатусОтгрузки					КАК Статус
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест
	|ГДЕ
	|	Место = &Место";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросИнформацияПоМесту()

Функция ПолучитьТекстЗапросаИнформацияПоЗадаче()
	
	ТекстЗапроса = "
	|/////////////////////////////////////////////////////////////////////////////
	|// 0.	
	|ВЫБРАТЬ
	|	Место.Код 							КАК Код,
	|	Место.Ответственный.Представление   КАК Ответственный,
	|	ВЫБОР
	|		КОГДА Отправитель ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(Отправитель КАК Справочник.Склады).Представление
	|		КОГДА Отправитель ССЫЛКА Справочник.Партнеры
	|			ТОГДА ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры).Представление
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА Место.Владелец ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(Место.Владелец КАК Справочник.Склады).Представление
	|		КОГДА Место.Владелец ССЫЛКА Справочник.Партнеры
	|			ТОГДА ВЫРАЗИТЬ(Место.Владелец КАК Справочник.Партнеры).Представление
	|	КОНЕЦ КАК Получатель,
	|	Место.ТекстЗадачи КАК ТекстЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут
	|ГДЕ
	|	Место 			 = &Задача
	|	И СтатусОтгрузки = &СтатусЗадачи
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// 1.
	|ВЫБРАТЬ
	|	Период 							КАК Период,
	|	ВариантМаршрута.Представление   КАК Маршрут,
	|	СтатусОтгрузки					КАК Статус,
	|	Пользователь.Представление		КАК Пользователь,
	|	ВЫБОР
	|		КОГДА Отправитель ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(Отправитель КАК Справочник.Склады).Представление
	|		КОГДА Отправитель ССЫЛКА Справочник.Партнеры
	|			ТОГДА ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры).Представление
	|	КОНЕЦ КАК Отправитель
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут
	|ГДЕ
	|	Место = &Задача";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацияПоЗадаче()

Функция ПолучитьТекстЗапросаПроверкиПриходногоОрдера()
	
	ТекстЗапроса = "
	|//////////////////////////////////////////////////////////
	|// 0.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 	КАК Номенклатура,
	|	Характеристика  КАК Характеристика,
	|	Количество		КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////
	|// 1.
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура 			КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика  		КАК Характеристика,
	|	КОЛИЧЕСТВО(ШтрихкодыНоменклатуры.Штрихкод)  КАК КоличествоШтрихкодов
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Номенклатура 		= ТаблицаНоменклатуры.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика 	= ТаблицаНоменклатуры.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////
	|// 2.
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура 					КАК Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.Представление  	КАК НоменклатураПредставление,
	|	ТаблицаНоменклатуры.Характеристика  				КАК Характеристика,
	|   ЕСТЬNULL(ТаблицаШтрихкодов.КоличествоШтрихкодов, 0) КАК КоличествоШтрихкодов
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ТаблицаШтрихкодов.Номенклатура 		= ТаблицаНоменклатуры.Номенклатура
	|			И ТаблицаШтрихкодов.Характеристика 	= ТаблицаНоменклатуры.Характеристика
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаШтрихкодов.КоличествоШтрихкодов, 0) = 0
	|;
	|
	|//////////////////////////////////////////////////////////
	|// 3.
	|ВЫБРАТЬ
	|	Номенклатура 				КАК Номенклатура,
	|	Характеристика  			КАК Характеристика,
	|	КОЛИЧЕСТВО(СерийныйНомер)   КАК КоличествоСерийныхНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь	= &Пользователь
	|	И Склад			= &Склад
	|	И Отправитель 	= &Отправитель
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////
	|// 4.
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура 				КАК Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.Представление  КАК НоменклатураПредставление,
	|	ТаблицаНоменклатуры.Характеристика  			КАК Характеристика,
	|	ТаблицаНоменклатуры.Количество - ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоСерийныхНомеров, 0) КАК Количество
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныхНомеров КАК ТаблицаСерийныхНомеров
	|		ПО ТаблицаНоменклатуры.Номенклатура 	 = ТаблицаСерийныхНомеров.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТаблицаСерийныхНомеров.Характеристика
	|ГДЕ
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьСерийныеНомера
	|	И ТаблицаНоменклатуры.Количество <> ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоСерийныхНомеров, 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТексатЗапросаПроверкиПриходногоОрдера()

Функция ПолучитьТекстЗапросаПроверкаСН(Отправитель)
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистратор 						КАК Перемещение,
	|	Номенклатура						КАК Номенклатура,
	|	Характеристика						КАК Характеристика,
	|	ЗаказНаПеремещение.СкладОтправитель КАК Склад
	|ПОМЕСТИТЬ ДокументыПеремещения
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(, , Регистратор, ЗаказНаПеремещение = &Отправитель)
	|ГДЕ
	|	Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка						КАК Перемещение,
	|	Номенклатура				КАК Номенклатура,
	|	Характеристика				КАК Характеристика,
	|	Ссылка.СкладОтправитель     КАК Склад
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары
	|ГДЕ
	|	Ссылка = &Отправитель // Привести в запросе
	|;";
	
	Если Отправитель.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистратор 	КАК Ордер,
		|	Номенклатура 	КАК Номенклатура,
		|	Характеристика 	КАК Характеристика,
		|	Склад			КАК Склад
		|ПОМЕСТИТЬ ТаблицаОрдеров
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|							,
		|							,
		|							Регистратор,
		|							(ДокументОтгрузки, Номенклатура, Характеристика, Склад) В 
		|								(ВЫБРАТЬ
		|									Перемещение,
		|									Номенклатура,
		|									Характеристика,
		|									Склад
		|								ИЗ
		|									ДокументыПеремещения))
		|ГДЕ
		|	Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОрдеров.Номенклатура				КАК Номенклатура,
		|	ТаблицаОрдеров.Характеристика			КАК Характеристика,
		|	РегистрСерийныеНомера.СерийныеНомера 	КАК СерийныйНомер
		|ПОМЕСТИТЬ СерийныеНомераДокументов
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Номенклатура,
		|					Характеристика,
		|					Склад
		|				ИЗ
		|					ТаблицаОрдеров)) КАК РегистрСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрдеров КАК ТаблицаОрдеров
		|		ПО ВЫРАЗИТЬ(РегистрСерийныеНомера.Регистратор КАК Документ.РасходныйОрдерНаТовары) 	= ТаблицаОрдеров.Ордер
		|			И РегистрСерийныеНомера.Номенклатура 											= ТаблицаОрдеров.Номенклатура
		|			И РегистрСерийныеНомера.Характеристика 											= ТаблицаОрдеров.Характеристика
		|			И РегистрСерийныеНомера.Склад 													= ТаблицаОрдеров.Склад
		|;";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПеремещения.Номенклатура		КАК Номенклатура,
		|	ДокументыПеремещения.Характеристика		КАК Характеристика,
		|	РегистрСерийныеНомера.СерийныеНомера 	КАК СерийныйНомер
		|ПОМЕСТИТЬ СерийныеНомераДокументов
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					ДокументыПеремещения.Номенклатура,
		|					ДокументыПеремещения.Характеристика,
		|					ДокументыПеремещения.Склад
		|				ИЗ
		|					ДокументыПеремещения КАК ДокументыПеремещения)) КАК РегистрСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПеремещения КАК ДокументыПеремещения
		|		ПО ВЫРАЗИТЬ(РегистрСерийныеНомера.Регистратор КАК Документ.ПеремещениеТоваров) 	= ДокументыПеремещения.Перемещение
		|			И РегистрСерийныеНомера.Номенклатура 										= ДокументыПеремещения.Номенклатура
		|			И РегистрСерийныеНомера.Характеристика 										= ДокументыПеремещения.Характеристика
		|			И РегистрСерийныеНомера.Склад 												= ДокументыПеремещения.Склад
		|;";
		
	КонецЕсли;			
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура 	КАК Номенклатура,
	|	Характеристика  КАК Характеристика,
	|	СерийныйНомер	КАК СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаСерийныеНомера
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь  = &Пользователь
	|	И Склад		  = &Склад
	|	И Отправитель = &Отправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерийныеНомера.Номенклатура 					КАК Номенклатура,
	|	ТаблицаСерийныеНомера.Номенклатура.Представление	КАК НоменклатураПредставление,
	|	ТаблицаСерийныеНомера.Характеристика  				КАК Характеристика,
	|	ТаблицаСерийныеНомера.СерийныйНомер					КАК СерийныйНомер,
	|	ТаблицаСерийныеНомера.СерийныйНомер.Представление 	КАК СерийныйНомерПредставление
	|ИЗ
	|	ТаблицаСерийныеНомера КАК ТаблицаСерийныеНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерийныеНомераДокументов КАК СерийныеНомераДокументов
	|		ПО ТаблицаСерийныеНомера.Номенклатура 		= СерийныеНомераДокументов.Номенклатура
	|			И ТаблицаСерийныеНомера.Характеристика 	= СерийныеНомераДокументов.Характеристика
	|			И ТаблицаСерийныеНомера.СерийныйНомер 	= СерийныеНомераДокументов.СерийныйНомер
	|ГДЕ
	|	СерийныеНомераДокументов.СерийныйНомер ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПроверкаСН()

Функция ПолучитьТекстЗапросаПроверкаПерепоставка()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Отправитель		КАК Отправитель,
	|	Номенклатура	КАК Номенклатура,
	|	Характеристика	КАК Характеристика,
	|	Количество      КАК Количество
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь  = &Пользователь
	|	И Склад		  = &Склад
	|	И Отправитель = &Отправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура							 КАК Номенклатура,
	|	Характеристика							 КАК Характеристика,
	|	КПоступлениюОстаток - ПринимаетсяОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТаблицаКПоступлению
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			(ДокументПоступления, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Отправитель,
	|					Номенклатура,
	|					Характеристика
	|				ИЗ
	|					СписокНоменклатуры)
	|			И Склад = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура														КАК Номенклатура,
	|	СписокНоменклатуры.Номенклатура.Представление										КАК НоменклатураПредставление,
	|	СписокНоменклатуры.Характеристика													КАК Характеристика,
	|	СписокНоменклатуры.Количество - ЕСТЬNULL(ТаблицаКПоступлению.КоличествоОстаток, 0) 	КАК Количество
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКПоступлению КАК ТаблицаКПоступлению
	|		ПО СписокНоменклатуры.Номенклатура = ТаблицаКПоступлению.Номенклатура
	|			И СписокНоменклатуры.Характеристика = ТаблицаКПоступлению.Характеристика
	|ГДЕ
	|	(СписокНоменклатуры.Количество - ЕСТЬNULL(ТаблицаКПоступлению.КоличествоОстаток, 0)) > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПроверкаПерепоставка()

Функция ПолучитьТекстЗапросаОрдерБезРаспределения()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура							КАК Номенклатура,
	|	Характеристика							КАК Характеристика,
	|	Количество								КАК Количество,
	|	Количество								КАК КоличествоУпаковок,
	|	Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь  = &Пользователь
	|	И Склад 	  = &Склад
	|	И Отправитель = &Отправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура	КАК Номенклатура,
	|	Характеристика	КАК Характеристика,
	|	СерийныйНомер	КАК СерийныйНомер
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь  = &Пользователь
	|	И Склад 		  = &Склад
	|	И Отправитель = &Отправитель";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОрдерБезРаспределения()

Функция ПолучитьТекстЗапросаОрдераСРаспределением()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Склад			КАК Склад,
	|	Отправитель		КАК Отправитель,
	|	Номенклатура	КАК Номенклатура,
	|	Характеристика	КАК Характеристика,
	|	Количество      КАК Количество
	|ПОМЕСТИТЬ ПриемкаТоваров
	|ИЗ
	|	РегистрСведений.Пуля_ПриемкаТоваров
	|ГДЕ
	|	Пользователь  = &Пользователь
	|	И Склад 		  = &Склад
	|	И Отправитель = &Отправитель
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Дата КАК Период,
	|	ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику) 		КАК ДокументПоступления,
	|	Номенклатура													КАК Номенклатура,
	|	Характеристика													КАК Характеристика,
	|	КПоступлениюОстаток - ПринимаетсяОстаток 						КАК Количество
	|ПОМЕСТИТЬ ДокументыПоставщиков
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
	|				ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер = &Отправитель
	|				И (Номенклатура, Характеристика, Склад) В
	|					(ВЫБРАТЬ
	|						Номенклатура,
	|						Характеристика,
	|						Склад
	|					ИЗ
	|						ПриемкаТоваров))
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Дата,
	|	ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг),
	|	Номенклатура,
	|	Характеристика,
	|	КПоступлениюОстаток - ПринимаетсяОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
	|				ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер = &Отправитель
	|				И (Номенклатура, Характеристика, Склад) В
	|					(ВЫБРАТЬ
	|						Номенклатура,
	|						Характеристика,
	|						Склад
	|					ИЗ
	|						ПриемкаТоваров))
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоставщиков.Период														КАК Период,
	|	ДокументыПоставщиков.ДокументПоступления										КАК ДокументПоступления,
	|	ДокументыПоставщиков.Номенклатура												КАК Номенклатура,
	|	ДокументыПоставщиков.Характеристика												КАК Характеристика,
	|	СУММА(ДокументыПоставщиковКопия.Количество) 									КАК КоличествоПосле,
	|	СУММА(ДокументыПоставщиковКопия.Количество) - ДокументыПоставщиков.Количество 	КАК КоличестствоДо
	|ПОМЕСТИТЬ ДокументыНаростающиеПредварительные
	|ИЗ
	|	ДокументыПоставщиков КАК ДокументыПоставщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоставщиков КАК ДокументыПоставщиковКопия
	|		ПО ДокументыПоставщиков.Номенклатура = ДокументыПоставщиковКопия.Номенклатура
	|			И ДокументыПоставщиков.Характеристика = ДокументыПоставщиковКопия.Характеристика
	|			И ВЫБОР	
	|				КОГДА ДокументыПоставщиков.Период = ДокументыПоставщиковКопия.Период
	|					ТОГДА ДокументыПоставщиков.ДокументПоступления >= ДокументыПоставщиковКопия.ДокументПоступления
	|				ИНАЧЕ ДокументыПоставщиков.Период >= ДокументыПоставщиковКопия.Период
	|			  КОНЕЦ
	
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоставщиков.Период,
	|	ДокументыПоставщиков.ДокументПоступления,
	|	ДокументыПоставщиков.Номенклатура,
	|	ДокументыПоставщиков.Характеристика,
	|	ДокументыПоставщиков.Количество
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура				КАК Номенклатура,
	|	Характеристика				КАК Характеристика,
	|	МАКСИМУМ(КоличествоПосле)   КАК КоличествоМаксимум
	|ПОМЕСТИТЬ ТаблицаМаксимальнихЗначений
	|ИЗ
	|	ДокументыНаростающиеПредварительные
	
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Период					КАК Период,
	|	ТаблицаДокументов.ДокументПоступления		КАК ДокументПоступления,
	|	ТаблицаДокументов.Номенклатура				КАК Номенклатура,
	|	ТаблицаДокументов.Характеристика			КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаЗначений.КоличествоМаксимум ЕСТЬ NULL
	|			ТОГДА ТаблицаДокументов.КоличествоПосле
	|		ИНАЧЕ 1000000000000
	|	КОНЕЦ 										КАК КоличествоПосле,
	|	ТаблицаДокументов.КоличестствоДо			КАК КоличестствоДо
	|ПОМЕСТИТЬ ДокументыНаростающие
	|ИЗ
	|	ДокументыНаростающиеПредварительные КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМаксимальнихЗначений КАК ТаблицаЗначений
	|		ПО ТаблицаДокументов.Номенклатура 	    = ТаблицаЗначений.Номенклатура
	|			И ТаблицаДокументов.Характеристика  = ТаблицаЗначений.Характеристика
	|			И ТаблицаДокументов.КоличествоПосле = ТаблицаЗначений.КоличествоМаксимум
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыНаростающие.Период					КАК Период,
	|	ДокументыНаростающие.ДокументПоступления	КАК ДокументПоступления,
	|	ДокументыНаростающие.Номенклатура			КАК Номенклатура,
	|	ДокументыНаростающие.Характеристика			КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаГраниц
	|ИЗ
	|	ДокументыНаростающие КАК ДокументыНаростающие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриемкаТоваров КАК ПриемкаТоваров
	|		ПО ДокументыНаростающие.Номенклатура 	   =  ПриемкаТоваров.Номенклатура
	|			И ДокументыНаростающие.Характеристика  =  ПриемкаТоваров.Характеристика
	|			И ДокументыНаростающие.КоличестствоДо  <= ПриемкаТоваров.Количество
	|			И ДокументыНаростающие.КоличествоПосле >  ПриемкаТоваров.Количество
	|;
	|			
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоставщиков.ДокументПоступления	КАК ДокументПоступления,
	|	ДокументыПоставщиков.Номенклатура 			КАК Номенклатура,
	|	ДокументыПоставщиков.Характеристика     	КАК Характеристика,
	|	ДокументыПоставщиков.Количество				КАК Количество
	|ИЗ
	|	ДокументыПоставщиков КАК ДокументыПоставщиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГраниц КАК ТаблицаГраниц
	|		ПО ДокументыПоставщиков.Номенклатура 		= ТаблицаГраниц.Номенклатура
	|			И ДокументыПоставщиков.Характеристика 	= ТаблицаГраниц.Характеристика
	|			И 
	|				ВЫБОР
	|					КОГДА ДокументыПоставщиков.Период = ТаблицаГраниц.Период
	|						ТОГДА ДокументыПоставщиков.ДокументПоступления <= ТаблицаГраниц.ДокументПоступления
	|					ИНАЧЕ ДокументыПоставщиков.Период <= ТаблицаГраниц.Период
	|			  	КОНЕЦ
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура							КАК Номенклатура,
	|	Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	Характеристика							КАК Характеристика,
	|	Количество      						КАК Количество
	|ИЗ
	|	ПриемкаТоваров
	|;
	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура 	КАК Номенклатура,
	|	Характеристика  КАК Характеристика,
	|	СерийныйНомер	КАК СерийныйНомер
	|ИЗ
	|	РегистрСведений.Пуля_СерийныеНомера
	|ГДЕ
	|	Пользователь = &Пользователь
	|	И (Склад, Отправитель, Номенклатура, Характеристика) В
	|		(ВЫБРАТЬ
	|			Склад,
	|			Отправитель,
	|			Номенклатура,
	|			Характеристика
	|		ИЗ
	|			ПриемкаТоваров)
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОрдераСРаспределением()

Функция ПолучитьТекстЗапросаЗаполнениеПоПартнеру()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Склад				КАК Склад,
	|	СУММА(ВложенныйЗапрос.Количество)   КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура							 КАК Номенклатура,
	|		Характеристика							 КАК Характеристика,
	|		Склад									 КАК Склад,
	|		КПоступлениюОстаток - ПринимаетсяОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаказПоставщику).Партнер = &Отправитель
	|					И Склад = &Склад)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		Характеристика,
	|		Склад,
	|		КПоступлениюОстаток - ПринимаетсяОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ПоступлениеТоваровУслуг).Партнер = &Отправитель
	|					И Склад = &Склад)) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО 
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура 			КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика		КАК Характеристика,
	|	КОЛИЧЕСТВО(ШтрихкодыНоменклатуры.Штрихкод)  КАК КоличествоШтрихкодов
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ПО ШтрихкодыНоменклатуры.Номенклатура 	   = ТаблицаНоменклатура.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = ТаблицаНоменклатура.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура							КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаНоменклатура.Характеристика 							КАК Характеристика,
	|	ТаблицаНоменклатура.Склад 									КАК Склад,
	|	ТаблицаНоменклатура.Количество								КАК Количество,
	|	0															КАК Приоритет,
	|	ТаблицаШтрихкодов.КоличествоШтрихкодов						КАК КоличествоШтрихкодов,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаНоменклатура.Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ТаблицаНоменклатура.Номенклатура 	 = ТаблицаШтрихкодов.Номенклатура
	|			И ТаблицаНоменклатура.Характеристика = ТаблицаШтрихкодов.Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаЗаполнениеПоПартнеру()

Функция ПолучитьТекстЗапросаЗаполнние()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Номенклатура							 		КАК Номенклатура,
	|	Характеристика									КАК Характеристика,
	|	Склад											КАК Склад,
	|	СУММА(КПоступлениюОстаток - ПринимаетсяОстаток) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &Отправитель
	|				И Склад = &Склад)
	|СГРУППИРОВАТЬ ПО 
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура 			КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика		КАК Характеристика,
	|	КОЛИЧЕСТВО(ШтрихкодыНоменклатуры.Штрихкод)  КАК КоличествоШтрихкодов
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ПО ШтрихкодыНоменклатуры.Номенклатура 	   = ТаблицаНоменклатура.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = ТаблицаНоменклатура.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура							КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаНоменклатура.Характеристика 							КАК Характеристика,
	|	ТаблицаНоменклатура.Склад 									КАК Склад,
	|	ТаблицаНоменклатура.Количество								КАК Количество,
	|	0															КАК Приоритет,
	|	ТаблицаШтрихкодов.КоличествоШтрихкодов						КАК КоличествоШтрихкодов,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаНоменклатура.Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ТаблицаНоменклатура.Номенклатура 	 = ТаблицаШтрихкодов.Номенклатура
	|			И ТаблицаНоменклатура.Характеристика = ТаблицаШтрихкодов.Характеристика";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаЗаполнние()

Функция ПолучитьТекстЗапросаЗаполнениеСНПоОтправителю(Отправитель)
	
	Если ТипЗнч(Отправитель) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	Номенклатура											КАК Номенклатура,
		|	Характеристика											КАК Характеристика,
		|	Склад													КАК Склад,
		|	КПоступлениюОстаток - ПринимаетсяОстаток 				КАК Количество,
		|	ВЫРАЗИТЬ(&Отправитель КАК Документ.ЗаказНаПеремещение)	КАК Отправитель
		|ПОМЕСТИТЬ ТаблицаЗаказов
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(
		|			,
		|			ДокументПоступления = &Отправитель
		|				И Номенклатура.ИспользоватьСерийныеНомера
		|				И Склад = &Склад)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрЗаказов.Регистратор 						КАК Отправитель,
		|	РегистрЗаказов.Номенклатура 					КАК Номенклатура,
		|	РегистрЗаказов.Характеристика 					КАК Характеристика,
		|	РегистрЗаказов.Регистратор.СкладОтправитель 	КАК Склад,
		|	РегистрЗаказов.ЗаказаноОборот 					КАК Количество
		|ПОМЕСТИТЬ ТаблицаПеремещений
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(
		|									,
		|									,
		|									Регистратор,
		|									(ЗаказНаПеремещение, Номенклатура, Характеристика) В
		|										(ВЫБРАТЬ
		|											Отправитель,
		|											Номенклатура,
		|											Характеристика
		|										ИЗ
		|											ТаблицаЗаказов)) КАК РегистрЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаказов КАК ТаблицаЗаказов
		|		ПО РегистрЗаказов.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|			И РегистрЗаказов.ЗаказНаПеремещение 			= ТаблицаЗаказов.Отправитель
		|			И РегистрЗаказов.Номенклатура 					= ТаблицаЗаказов.Номенклатура
		|			И РегистрЗаказов.Характеристика 				= ТаблицаЗаказов.Характеристика
		|;";			   
	ИначеЕсли ТипЗнч(Отправитель) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	&Отправитель																КАК Отправитель,
		|	Номенклатура																КАК Номенклатура,
		|	Характеристика																КАК Характеристика,
		|	ВЫРАЗИТЬ(&Отправитель КАК Документ.ПеремещениеТоваров).СкладОтправитель 	КАК Склад,
		|	КПоступлениюОстаток - ПринимаетсяОстаток 									КАК Количество
		|ПОМЕСТИТЬ ТаблицаПеремещений
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(
		|			,
		|			ДокументПоступления = &Отправитель
		|				И Номенклатура.ИспользоватьСерийныеНомера
		|				И Склад = &Склад)
		|;";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	&Отправитель								КАК Отправитель,
		|	Номенклатура								КАК Номенклатура,
		|	Характеристика								КАК Характеристика,
		|	&СкладОтправитель 							КАК Склад,
		|	КПоступлениюОстаток - ПринимаетсяОстаток 	КАК Количество
		|ПОМЕСТИТЬ ТаблицаПеремещений
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(
		|			,
		|			ДокументПоступления = &Отправитель
		|				И Номенклатура.ИспользоватьСерийныеНомера
		|				И Склад = &Склад)
		|;";					   
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("ДокументСсылка.ЗаказНаПеремещение") ИЛИ ТипЗнч(Отправитель) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		СкладОтправитель = Отправитель.СкладОтправитель;
	Иначе
		СкладОтправитель = Отправитель.Склад;
	КонецЕсли;
	
	Если СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Регистратор 		КАК Отправитель,
		|	ТоварыКОтгрузке.Номенклатура 		КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика 		КАК Характеристика,
		|	ТоварыКОтгрузке.Склад 				КАК Склад,
		|	ТоварыКОтгрузке.КОтгрузкеОборот    КАК Количество
		|ПОМЕСТИТЬ ТаблицаНоменклатуры 
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|							,
		|							,
		|							Регистратор,
		|							(ДокументОтгрузки, Номенклатура, Характеристика, Склад) В
		|								(ВЫБРАТЬ
		|									Отправитель,
		|									Номенклатура,
		|									Характеристика,
		|									Склад
		|								ИЗ
		|									ТаблицаПеремещений )) КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПеремещений КАК ТаблицаПеремещений
		|		ПО ТоварыКОтгрузке.ДокументОтгрузки 	= ТаблицаПеремещений.Отправитель
		|			И ТоварыКОтгрузке.Номенклатура		= ТаблицаПеремещений.Номенклатура
		|			И ТоварыКОтгрузке.Характеристика 	= ТаблицаПеремещений.Характеристика
		|			И ТоварыКОтгрузке.Склад 			= ТаблицаПеремещений.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Отправитель										КАК Отправитель,
		|	СерийныеНомераНоменклатурыОбороты.Номенклатура		КАК Номенклатура,
		|	СерийныеНомераНоменклатурыОбороты.Характеристика	КАК Характеристика,
		|	&Склад												КАК Склад,
		|	СерийныеНомераНоменклатурыОбороты.СерийныеНомера 	КАК СерийныйНомер,
		|	1 КАК Количество
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Номенклатура,
		|					Характеристика,
		|					Склад
		|				ИЗ
		|					ТаблицаНоменклатуры)) КАК СерийныеНомераНоменклатурыОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО СерийныеНомераНоменклатурыОбороты.Регистратор = ТаблицаНоменклатуры.Отправитель
		|			И СерийныеНомераНоменклатурыОбороты.Номенклатура = ТаблицаНоменклатуры.Номенклатура
		|			И СерийныеНомераНоменклатурыОбороты.Характеристика = ТаблицаНоменклатуры.Характеристика
		|			И СерийныеНомераНоменклатурыОбороты.Склад = ТаблицаНоменклатуры.Склад";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Отправитель										КАК Отправитель,
		|	СерийныеНомераНоменклатурыОбороты.Номенклатура		КАК Номенклатура,
		|	СерийныеНомераНоменклатурыОбороты.Характеристика	КАК Характеристика,
		|	ВЫРАЗИТЬ(&Склад	КАК Справочник.Склады)				КАК Склад,
		|	СерийныеНомераНоменклатурыОбороты.СерийныеНомера 	КАК СерийныйНомер,
		|	1 													КАК Количество
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Номенклатура,
		|					Характеристика,
		|					Склад
		|				ИЗ
		|					ТаблицаПеремещений)) КАК СерийныеНомераНоменклатурыОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПеремещений КАК ТаблицаПеремещений
		|		ПО СерийныеНомераНоменклатурыОбороты.Регистратор 		= ТаблицаПеремещений.Отправитель
		|			И СерийныеНомераНоменклатурыОбороты.Номенклатура 	= ТаблицаПеремещений.Номенклатура
		|			И СерийныеНомераНоменклатурыОбороты.Характеристика 	= ТаблицаПеремещений.Характеристика
		|			И СерийныеНомераНоменклатурыОбороты.Склад 			= ТаблицаПеремещений.Склад";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаЗаполнениеСНПоОтправителю()

Функция ПолучитьТекстЗапросаРазмещениеНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК СписокНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СписокНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура 	КАК Номенклатура,
	|	ОсновнаяЯчейка 	КАК ОсновнаяЯчейка,
	|	Ячейка 			КАК Ячейка
	|ПОМЕСТИТЬ ОсновныеЯчейки
	|ИЗ
	|	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам
	|ГДЕ
	|	Номенклатура В
	|			(ВЫБРАТЬ
	|				Номенклатура
	|			ИЗ
	|				СписокНоменклатуры)
	|	И Склад = &Склад
	|	И ОсновнаяЯчейка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	&Склад КАК Склад,
	|	&Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОсновныеЯчейки.ОсновнаяЯчейка, 0) = 0
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(ОсновныеЯчейки.Ячейка, 0) = &Ячейка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновнаяЯчейка
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеЯчейки КАК ОсновныеЯчейки
	|		ПО СписокНоменклатуры.Номенклатура = ОсновныеЯчейки.Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаРазмещениеНоменклатуры()

Функция ПолучитьТекстЗапросаПроверкиДоступностиСН(Отправитель)
	
	Если ТипЗнч(Отправитель) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Регистратор 						КАК Документ,
		|	Номенклатура						КАК Номенклатура,
		|	Характеристика						КАК Характеристика,
		|	ЗаказНаПеремещение.СкладОтправитель КАК Склад
		|ПОМЕСТИТЬ ТаблицаПеремещений
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ЗаказНаПеремещение = ВЫРАЗИТЬ(&Отправитель КАК Документ.ЗаказНаПеремещение)
		|				И Номенклатура = &Номенклатура)
		|ГДЕ
		|	Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|;";
	Иначе			   
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&Отправитель КАК Документ.ПеремещениеТоваров) 						КАК Документ,
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) 						КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)				КАК Характеристика,
		|	ВЫРАЗИТЬ(&Отправитель КАК Документ.ПеремещениеТоваров).СкладОтправитель		КАК Склад
		|ПОМЕСТИТЬ ТаблицаПеремещений
		|;";			   
	КонецЕсли;
	
	Если Отправитель.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистратор 		КАК Документ,
		|	Номенклатура		КАК Номенклатура,
		|	Характеристика		КАК Характеристика,
		|	Склад  				КАК Склад
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(ДокументОтгрузки, Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Документ,
		|					Номенклатура,
		|					Характеристика,
		|					Склад                                                               
		|				ИЗ
		|					ТаблицаПеремещений)) 
		|ГДЕ
		|	Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСерийныеНомера.Номенклатура,
		|	РегистрСерийныеНомера.Характеристика,
		|	РегистрСерийныеНомера.Склад,
		|	РегистрСерийныеНомера.СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Номенклатура,
		|					Характеристика,
		|					Склад
		|				ИЗ
		|					ТаблицаТоваров)) КАК РегистрСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО РегистрСерийныеНомера.Регистратор 		= ТаблицаТоваров.Документ
		|			И РегистрСерийныеНомера.Номенклатура 	= ТаблицаТоваров.Номенклатура
		|			И РегистрСерийныеНомера.Характеристика  = ТаблицаТоваров.Характеристика
		|			И РегистрСерийныеНомера.Склад 			= ТаблицаТоваров.Склад
		|ГДЕ
		|	РегистрСерийныеНомера.СерийныеНомера = &СерийныйНомер";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСерийныеНомера.Номенклатура,
		|	РегистрСерийныеНомера.Характеристика,
		|	РегистрСерийныеНомера.Склад,
		|	РегистрСерийныеНомера.СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Номенклатура,
		|					Характеристика,
		|					Склад
		|				ИЗ
		|					ТаблицаПеремещений)) КАК РегистрСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПеремещений КАК ТаблицаПеремещений
		|		ПО РегистрСерийныеНомера.Регистратор 		= ТаблицаПеремещений.Документ
		|			И РегистрСерийныеНомера.Номенклатура 	= ТаблицаПеремещений.Номенклатура
		|			И РегистрСерийныеНомера.Характеристика  = ТаблицаПеремещений.Характеристика
		|			И РегистрСерийныеНомера.Склад 			= ТаблицаПеремещений.Склад
		|ГДЕ
		|	РегистрСерийныеНомера.СерийныеНомера = &СерийныйНомер";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПроверкиДоступностиСН()














// Блокировки регистров

Функция УстановитьБлокировкуПриемкаТоваров(Отправитель, Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	&Отправитель КАК Отправитель,
	|	&Склад		 КАК Склад
	|");
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка 						 = Новый БлокировкаДанных;
	ЭлементБлокировки   			 = Блокировка.Добавить("РегистрСведений.Пуля_ПриемкаТоваров");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Отправитель", "Отправитель");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Функция УстановитьБлокировкуСерийныеНомера(Отправитель, Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	&Отправитель КАК Отправитель,
	| &Склад		 КАК Склад");
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка 						 = Новый БлокировкаДанных;
	ЭлементБлокировки   			 = Блокировка.Добавить("РегистрСведений.Пуля_СерийныеНомера");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Отправитель", "Отправитель");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции




// Записи в регистры сведений

Функция ЗаписатьНоменклатуруПриемкаТоваров(Склад, Отправитель, ТаблицаНоменклатуры)
	
	ЗаписьВыполнена  = Истина;
	Пользователь     = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.Пуля_ПриемкаТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Загрузить(ТаблицаНоменклатуры);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ЗаписьВыполнена = Ложь; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ЗаписьВыполнена;
	
КонецФункции

Функция УдалитьНоменклатуруИзПриемкиТоваров(Склад, Отправитель, Номенклатура)
	
	ЗаписьВыполнена = Истина;
	Пользователь	= ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.Пуля_ПриемкаТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ЗаписьВыполнена = Ложь; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ЗаписьВыполнена;
	
КонецФункции // УдалитьНоменклатуруИзПриемкиТолваров()

Функция ЗаписатьСерийныйНомерВРегистр(Склад, Отправитель, Номенклатура, СерийныйНомер)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.Пуля_СерийныеНомера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.СерийныйНомер.Установить(СерийныйНомер);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Пользователь		= Пользователь;
	Запись.Склад			= Склад;
	Запись.Отправитель 		= Отправитель;
	Запись.Номенклатура 	= Номенклатура;
	Запись.СерийныйНомер 	= СерийныйНомер;
	Запись.Количество 		= 1;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаписатьСерийныеНомераВРегистр(Склад, Отправитель, ТаблицаНомеров)
	
	НаборЗаписей = РегистрыСведений.Пуля_СерийныеНомера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	
	НаборЗаписей.Загрузить(ТаблицаНомеров);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
	
КонецФункции // ЗаписатьСерийныеНомераВРегистр()

Функция УдалитьСерийныйНомерИзРегистра(Склад, Отправитель, Номенклатура, СерийныйНомер)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.Пуля_СерийныеНомера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.СерийныйНомер.Установить(СерийныйНомер);
	
	Попытка
		НаборЗаписей.Записать();	    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // УдалитьСерийныйНомерИзРегистра()

Функция УдалитьСерийныйНомерИзРегистраПоНоменклатуре(Склад, Отправитель, Номенклатура)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.Пуля_СерийныеНомера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	Попытка
		НаборЗаписей.Записать();	    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // УдалитьСерийныйНомерИзРегистраПоНоменклатуре()


Функция ОчиститьРегистры(Склад, Отправитель)
	
	// Очищаем список номенклатуры
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей = РегистрыСведений.Пуля_ПриемкаТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	
	Попытка
		НаборЗаписей.Записать();			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	
	// Очищаем список серийных номеров
	
	НаборЗаписей = РегистрыСведений.Пуля_СерийныеНомера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	
	Попытка
		НаборЗаписей.Записать();			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции // ОчиститьРегистры()




// Загрузка пула номенклатуры

Процедура ЗагрузитьПулНоменклатурыДокументы(Форма, ПараметрОтбора, ЗагружатьСписокНоменклатуры=Истина)
	
	Склад 				= Форма.Склад;
	ПулНоменклатуры 	= Форма.ПулНоменклатуры;
	СписокНоменклатуры  = Форма.СписокНоменклатуры;
	ДатаСеанса			= ТекущаяДатаСеанса();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст   	= ПолучитьТекстЗапросаПулНоменклатуры(ПараметрОтбора);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПараметрОтбора", ПараметрОтбора);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ДатаСеанса", ДатаСеанса);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	Если  ТипЗнч(ПараметрОтбора) = Тип("ДокументСсылка.ПеремещениеТоваров")  Тогда
		ПулНоменклатуры.Загрузить(РезультатЗапроса[18].Выгрузить());
		Если ЗагружатьСписокНоменклатуры Тогда
			СписокНоменклатуры.Загрузить(РезультатЗапроса[17].Выгрузить());
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.Партнеры") Тогда
		ПулНоменклатуры.Загрузить(РезультатЗапроса[9].Выгрузить());
		Если ЗагружатьСписокНоменклатуры Тогда
			СписокНоменклатуры.Загрузить(РезультатЗапроса[8].Выгрузить());
		КонецЕсли;
	Иначе
		ПулНоменклатуры.Загрузить(РезультатЗапроса[8].Выгрузить());
		Если ЗагружатьСписокНоменклатуры Тогда
			СписокНоменклатуры.Загрузить(РезультатЗапроса[7].Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПулМест(Форма)
	
	Склад 	= Форма.Склад;
	ПулМест = Форма.ПулМест;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПулМест();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СтатусМестоРазукомплектовано", Перечисления.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе);
	Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации);
	
	ПулМест.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры




// Серийные номера

Функция ПроверитьКоличествоСерийныхНомеров(Форма, Отправитель, Номенклатура)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиКоличестваСН();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Количество серийных номеров больше чем количество номенклатуры!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Если Выборка.Количество <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Количество серийных номеров больше чем количество номенклатуры!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьКоличествоСерийныхНомеров()

Функция ПроверитьКоличествоСерийныхНомеровЗаполнение(Форма, Отправитель, Номенклатура, КоличествоНомеров)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиКоличестваСНЗаполнение();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("КоличествоНомеров", КоличествоНомеров);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Количество серийных номеров больше чем количество номенклатуры!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Если Выборка.Количество < 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Количество серийных номеров больше чем количество номенклатуры!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьКоличествоСерийныхНомеровЗаполнение()

Функция ПолучитьСерийныйНомер(Номенклатура, Строка)
	Строка = ВРег(СокрЛП(Строка));
	Ссылка = Справочники.СерийныеНомераНоменклатуры.НайтиПоКоду(Строка, , , Номенклатура);
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		НовыйОбъект = Справочники.СерийныеНомераНоменклатуры.СоздатьЭлемент();
		НовыйОбъект.Владелец = Номенклатура;
		НовыйОбъект.Код = Строка;
		НовыйОбъект.Записать();
		Ссылка = НовыйОбъект.Ссылка;
	КонецЕсли;
	Возврат Ссылка;	
КонецФункции

Функция ОбработатьСтрокуСерийногоНомера(СтрокаСерийныйНомер)
	
	Длина = СтрДлина(СтрокаСерийныйНомер);
	Стр   = СокрЛП(СтрокаСерийныйНомер);
	
	Нач   = "";
	Кон   = "";
	
	
	к=Прав(Стр,1);
	Пока (к>="0") и (к<="9") Цикл
		Кон=к+Кон;	
		Стр=Лев(Стр,СтрДлина(Стр)-1);
		к=Прав(Стр,1);
	КонецЦикла;
	Нач=Лев(Стр,Длина-СтрДлина(Кон));
	
	к=Лев(Кон,1);
	Пока к="0" Цикл
		Нач=Нач+к;	
		Кон=Прав(Кон,СтрДлина(Кон)-1);
		к=Лев(Кон,1);
	КонецЦикла;
	
	Если Кон = "" Тогда
		Кон = 0;
	Иначе
		Кон=Число(Кон);
	КонецЕсли;
	Кон=Формат(Кон+1, "ЧГ = 0");
	
	Возврат Нач+Строка(Кон);
	
КонецФункции // ОбработатьСтрокуСерийногоНомера()

Функция ПроверитьДоступностьСерийногоНомера(Отправитель, Номенклатура, СерийныйНомер)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиДоступностиСН(Отправитель);
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;			
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ПроверитьДоступностьСерийногоНомера()






// Места

Процедура ИнформацияОМесте(Место, ТабДокумент)
	
	Макет 		  = ПолучитьМакет("МестоИнформация");
	ОбластиМакета = РазбитьМакетНаОбласти(Макет, Ложь);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросИнформацияПоМесту();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаголовок = РезультатыЗапроса[1].Выбрать();
	ВыборкаДокументы = РезультатыЗапроса[3].Выбрать();
	ВыборкаИстория	 = РезультатыЗапроса[4].Выбрать();
	
	Пока ВыборкаЗаголовок.Следующий() Цикл
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИнформация"]);
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Место", ,         Формат(Число(ВыборкаЗаголовок.Код), "ЧРГ=''; ЧГ=0")));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Ответственный", , ВыборкаЗаголовок.Ответственный));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Отправитель", ,   ВыборкаЗаголовок.Отправитель));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Получатель", , 	  ВыборкаЗаголовок.Получатель));
	КонецЦикла; 
	
	ТабДокумент.Вывести(ОбластиМакета["Пробел"]);	
	ТабДокумент.Вывести(ОбластиМакета["ЗаголовокДокументы"]);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "ПредставлениеДокумента", "Документ", ВыборкаДокументы.ПредставлениеДокумента, ВыборкаДокументы.Документ));
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластиМакета["Пробел"]);	
	ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИстория"]);
	ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
	
	Пока ВыборкаИстория.Следующий() Цикл
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Период", , ВыборкаИстория.Период));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Склад", , ВыборкаИстория.Склад));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Статус", , ВыборкаИстория.Статус));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Маршрут", , ВыборкаИстория.Маршрут));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Пользователь", , ВыборкаИстория.Пользователь));
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ИнформацияОЗадаче(Задача, ТабДокумент)
	
	Макет 		  = ПолучитьМакет("ЗадачаИнформация");
	ОбластиМакета = РазбитьМакетНаОбласти(Макет, Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнформацияПоЗадаче();
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("СтатусЗадачи", Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	ВыборкаИнформация = РезультатЗапроса[0].Выбрать();
	ВыборкаИстория	  = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаИнформация.Следующий() Цикл
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИнформация"]);
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Задача", ,        Формат(Число(ВыборкаИнформация.Код), "ЧРГ=''; ЧГ=0")));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Ответственный", , ВыборкаИнформация.Ответственный));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Отправитель", ,   ВыборкаИнформация.Отправитель));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Получатель", , 	  ВыборкаИнформация.Получатель));			
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокТекстЗадачи"]);
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "ТекстЗадачи", , 	  ВыборкаИнформация.ТекстЗадачи));			
	КонецЦикла; 
	
	ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
	ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИстория"]);
	
	Пока ВыборкаИстория.Следующий() Цикл
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Период", , 	  		ВыборкаИстория.Период));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Маршрут", , 	 	ВыборкаИстория.Маршрут));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Статус", , 	  		ВыборкаИстория.Статус));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Пользователь", , 	ВыборкаИстория.Пользователь));
		ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Отправитель", , 	ВыборкаИстория.Отправитель));
	КонецЦикла; 
	
КонецПроцедуры

Функция ОбработатьОбластьМакета(ОбластиМакета, ИмяПараметра, ИмяПараметраРасшифровки=Неопределено, ЗначениеПараметра, ЗначениеПараметраРасшифровки=Неопределено)
	ОбластьМакета = ОбластиМакета.Получить(ИмяПараметра);
	ОбластьМакета.Параметры[ИмяПараметра] = ЗначениеПараметра;
	Если ИмяПараметраРасшифровки <> Неопределено Тогда
		ОбластьМакета.Параметры[ИмяПараметраРасшифровки] = ЗначениеПараметраРасшифровки;
	КонецЕсли;
	Возврат ОбластьМакета;
КонецФункции // ОбработатьОбластьМакета()

Функция РазбитьМакетНаОбласти(Макет, ЭтоЗадача)
	
	Результат = Новый Соответствие;
	
	Если ЭтоЗадача Тогда
		Результат.Вставить("ЗаголовокИнформация", Макет.ПолучитьОбласть("ЗаголовокИнформация"));
		Результат.Вставить("Пробел", Макет.ПолучитьОбласть("Пробел"));
		Результат.Вставить("Задача", Макет.ПолучитьОбласть("Задача"));
		Результат.Вставить("Ответственный", Макет.ПолучитьОбласть("Ответственный"));
		Результат.Вставить("Отправитель", Макет.ПолучитьОбласть("Отправитель"));
		Результат.Вставить("Получатель", Макет.ПолучитьОбласть("Получатель"));
		Результат.Вставить("ЗаголовокТекстЗадачи", Макет.ПолучитьОбласть("ЗаголовокТекстЗадачи"));
		Результат.Вставить("ТекстЗадачи", Макет.ПолучитьОбласть("ТекстЗадачи"));
		Результат.Вставить("ЗаголовокИстория", Макет.ПолучитьОбласть("ЗаголовокИстория"));
		Результат.Вставить("Период", Макет.ПолучитьОбласть("Период"));
		Результат.Вставить("Маршрут", Макет.ПолучитьОбласть("Маршрут"));
		Результат.Вставить("Статус", Макет.ПолучитьОбласть("Статус"));
		Результат.Вставить("Пользователь", Макет.ПолучитьОбласть("Пользователь"));
		Результат.Вставить("Отправитель", Макет.ПолучитьОбласть("Отправитель"));
	Иначе
		Результат.Вставить("ЗаголовокИнформация", Макет.ПолучитьОбласть("ЗаголовокИнформация"));
		Результат.Вставить("Пробел", Макет.ПолучитьОбласть("Пробел"));
		Результат.Вставить("Место", Макет.ПолучитьОбласть("Место"));
		Результат.Вставить("Ответственный", Макет.ПолучитьОбласть("Ответственный"));
		Результат.Вставить("Отправитель", Макет.ПолучитьОбласть("Отправитель"));
		Результат.Вставить("Получатель", Макет.ПолучитьОбласть("Получатель"));
		Результат.Вставить("ЗаголовокДокументы", Макет.ПолучитьОбласть("ЗаголовокДокументы"));
		Результат.Вставить("ПредставлениеДокумента", Макет.ПолучитьОбласть("ПредставлениеДокумента"));
		Результат.Вставить("ЗаголовокИстория", Макет.ПолучитьОбласть("ЗаголовокИстория"));
		Результат.Вставить("Период", Макет.ПолучитьОбласть("Период"));
		Результат.Вставить("Маршрут", Макет.ПолучитьОбласть("Маршрут"));
		Результат.Вставить("Статус", Макет.ПолучитьОбласть("Статус"));
		Результат.Вставить("Пользователь", Макет.ПолучитьОбласть("Пользователь"));
		Результат.Вставить("Склад", Макет.ПолучитьОбласть("Склад"));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // РазбитьМакетНаОбласти()





// Приходные ордера

Функция СоздатьПриходныйОрдерБезРаспределения(Отправитель, Склад)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОрдерБезРаспределения();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	ТаблицаНомера = РезультатыЗапроса[1].Выгрузить();
	
	ДокументОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ДокументОрдер.Заполнить(Отправитель);
	
	ДокументОрдер.Дата 			= ТекущаяДата();
	ДокументОрдер.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОрдер.Статус		= Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	Товары 			= ДокументОрдер.Товары;
	СерийныеНомера  = ДокументОрдер.СерийныеНомера;
	
	Товары.Очистить();
	СерийныеНомера.Очистить();
	
	КлючСвязи = 1;
	
	Для каждого СтрокаТовары Из ТаблицаТовары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		Если СтрокаТовары.ИспользоватьСерийныеНомера Тогда
			НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязи;
			СтруктураПоиска  = Новый Структура("Номенклатура, Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
			РезультатыПоиска = ТаблицаНомера.НайтиСтроки(СтруктураПоиска);
			Для каждого РезультатПоиска Из РезультатыПоиска Цикл
				СтрокаСерийныеНомера = СерийныеНомера.Добавить();
				СтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = КлючСвязи;
				СтрокаСерийныеНомера.СерийныйНомер 			  = РезультатПоиска.СерийныйНомер;
			КонецЦикла; 
			КлючСвязи = КлючСвязи + 1;
		КонецЕсли;
	КонецЦикла; 
	
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;                              
	
	РезультатОчищения = ОчиститьРегистры(Склад, Отправитель);
	Если РезультатОчищения Тогда
		Возврат Неопределено;		
	КонецЕсли; 
	
	Результат = Новый Массив;
	Результат.Добавить(ДокументОрдер.Ссылка);
	
	Возврат Результат;
	
КонецФункции // СоздатьПриходныйОрдерБезРаспределения()

Функция СоздатьПриходныйОрдерСРаспределением(Отправитель, Склад, Форма)
	
	Результат	 = Новый Массив;
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОрдераСРаспределением();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНомера 			= РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	ТаблицаНоменклатура 	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить();
	ТаблицаДокументы		= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выгрузить();
	СписокДокументов		= Новый Соответствие;
	ДокументыПерепоставки   = Новый Соответствие;
	КлючиСвязи				= Новый Соответствие;
	
	Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатура Цикл
		
		КоличествоОприходовать = СтрокаНоменклатуры.Количество;
		
		СтруктураПоиска  = Новый Структура("Номенклатура, Характеристика", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Характеристика);
		РезультатыПоиска = ТаблицаДокументы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			
			Если КоличествоОприходовать <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДокументОрдер = СписокДокументов.Получить(РезультатПоиска.ДокументПоступления);		
			Если ДокументОрдер = Неопределено Тогда
				ДокументОрдер = СоздатьПриходныйОдер(РезультатПоиска.ДокументПоступления);
				СписокДокументов.Вставить(РезультатПоиска.ДокументПоступления, ДокументОрдер);
			КонецЕсли;
			
			КлючСвязи = КлючиСвязи.Получить(РезультатПоиска.ДокументПоступления);
			Если КлючСвязи = Неопределено Тогда
				КлючСвязи = 1;
				КлючиСвязи.Вставить(РезультатПоиска.ДокументПоступления, КлючСвязи);
			КонецЕсли; 
			
			СтрокаТовары = СоздатьИЗаполнитьСтрокуТовары(РезультатПоиска, ДокументОрдер, КоличествоОприходовать);
			
			Если СтрокаНоменклатуры.ИспользоватьСерийныеНомера Тогда
				СтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
				ЗаполнитьСерийныеНомера(ТаблицаНомера, ДокументОрдер, СтруктураПоиска, СтрокаТовары.Количество, КлючСвязи);
				КлючСвязи = КлючСвязи + 1;
				КлючиСвязи.Вставить(РезультатПоиска.ДокументПоступления, КлючСвязи);
			КонецЕсли;
			
		КонецЦикла; 
		
		Если КоличествоОприходовать > 0 Тогда
			
			Если РезультатыПоиска.ВГраница() = -1 Тогда
				ТЗ_СписокНоменклатуры 	= Форма.СписокНоменклатуры.Выгрузить();
				Индекс 		   			= ПолучитьИндексСтрокиСписокНоменклатуры(ТЗ_СписокНоменклатуры, СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика);
				ИмяРеквизита   			= "СписокНоменклатуры[%1].Номенклатура";
				ИмяРеквизита  			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяРеквизита, Индекс);
				ТекстСообщения 			= НСтр("ru='Попытка проведения перепоставки по номенклатуре %1. Создайте ордер вручную, или с помощью стандартной приемки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПоиска.Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита);
				Возврат Неопределено;
			КонецЕсли;
			
			ДокПоступления = РезультатыПоиска[РезультатыПоиска.ВГраница()].ДокументПоступления;
			
			ДокументОрдер = ДокументыПерепоставки.Получить(ДокПоступления);
			Если ДокументОрдер = Неопределено Тогда
				ДокументОрдер 				= СоздатьПриходныйОдер(ДокПоступления);
				ДокументОрдер.Комментарий 	= НСтр("ru='Перепоставка.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ДокументыПерепоставки.Вставить(ДокПоступления, ДокументОрдер);
			КонецЕсли;
			
			КлючСвязи = КлючиСвязи.Получить(ДокПоступления);
			Если КлючСвязи = Неопределено Тогда
				КлючСвязи = 1;
				КлючиСвязи.Вставить(ДокПоступления, КлючСвязи);
			КонецЕсли;
			
			СтрокаТовары = СоздатьИЗаполнитьСтрокуТовары(РезультатПоиска, ДокументОрдер, КоличествоОприходовать);
			
			Если СтрокаНоменклатуры.ИспользоватьСерийныеНомера Тогда
				СтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
				ЗаполнитьСерийныеНомера(ТаблицаНомера, ДокументОрдер, СтруктураПоиска, СтрокаТовары.Количество, КлючСвязи);
				КлючСвязи = КлючСвязи + 1;
				КлючиСвязи.Вставить(ДокПоступления, КлючСвязи);
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Для каждого Документ Из СписокДокументов Цикл
		Попытка
			Документ.Значение.Записать(РежимЗаписиДокумента.Проведение);    					
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		Результат.Добавить(Документ.Значение.Ссылка);    			
	КонецЦикла; 
	
	Для каждого ДокументПерепоставки Из ДокументыПерепоставки Цикл
		Попытка
			ДокументПерепоставки.Значение.Записать(РежимЗаписиДокумента.Проведение);    					
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		Результат.Добавить(ДокументПерепоставки.Значение.Ссылка);
		Кому = Новый Массив;
		Кому.Добавить(Новый Структура("Адрес, Представление", "1c@ktc.rovno.ua", "Robik"));
		Кому.Добавить(Новый Структура("Адрес, Представление", "postavka@ktc.rovno.ua", "Robik"));
		//Кому.Добавить(Новый Структура("Адрес, Представление", "akomar@ktc.rovno.ua", "Robik"));
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма("Внимание выполнена перепоставка", "Ордер: " + ПолучитьНавигационнуюСсылку(ДокументПерепоставки.Значение.Ссылка), Кому);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	КонецЦикла; 
	
	РезультатОчищения = ОчиститьРегистры(Склад, Отправитель);
	Если РезультатОчищения Тогда
		Возврат Неопределено;		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // СоздатьПриходныйОрдерСРаспределением()

Функция СоздатьПриходныйОдер(ДокументОснование)
	
	ДокументОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ДокументОрдер.Заполнить(ДокументОснование);
	
	ДокументОрдер.Дата 			= ТекущаяДата();
	ДокументОрдер.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ДокументОрдер.Статус		= Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	ДокументОрдер.Товары.Очистить();
	ДокументОрдер.СерийныеНомера.Очистить();
	
	Возврат ДокументОрдер;
	
КонецФункции // СоздатьПриходныйОдер()

Функция СоздатьИЗаполнитьСтрокуТовары(ДанныеИсточник, ДокументОрдер, КоличествоОприходовать)
	
	СтрокаТовары = ДокументОрдер.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеИсточник);
	СтрокаТовары.Количество 		= Мин(КоличествоОприходовать, ДанныеИсточник.Количество);
	СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
	
	КоличествоОприходовать = КоличествоОприходовать - СтрокаТовары.Количество;
	
	Возврат СтрокаТовары;
	
КонецФункции // СоздатьИЗаполнитьСтрокуТовары()

Процедура ЗаполнитьСерийныеНомера(ТаблицаНомера, ДокументОрдер, СтруктураПоиска, знач КоличествоНомеров, КлючСвязи)
	
	РезультатыПоиска = ТаблицаНомера.НайтиСтроки(СтруктураПоиска);
	СерийныеНомера	 = ДокументОрдер.СерийныеНомера;
	
	Для каждого РезультатПоиска Из РезультатыПоиска Цикл
		Если КоличествоНомеров <= 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаСерийныйНомер 						 = СерийныеНомера.Добавить();
		СтрокаСерийныйНомер.СерийныйНомер 			 = РезультатПоиска.СерийныйНомер;
		СтрокаСерийныйНомер.КлючСвязиСерийныхНомеров = КлючСвязи;
		ТаблицаНомера.Удалить(РезультатПоиска);
		КоличествоНомеров = КоличествоНомеров - 1;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьСерийныеНомера()

Функция ПроверкаПриходногоОрдера(Форма, Отправитель)
	
	Отмена		 = Ложь;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиПриходногоОрдера();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатыЗапроса 	  = Запрос.ВыполнитьПакет();
	ТЗ_СписокНоменклатуры = Форма.СписокНоменклатуры.Выгрузить();
	
	ВыборкаШтрихкоды 	  = РезультатыЗапроса[2].Выбрать();
	ВыборкаСерийныеНомера = РезультатыЗапроса[4].Выбрать();
	
	Пока ВыборкаШтрихкоды.Следующий() Цикл
		Индекс 		   = ПолучитьИндексСтрокиСписокНоменклатуры(ТЗ_СписокНоменклатуры, ВыборкаШтрихкоды.Номенклатура, ВыборкаШтрихкоды.Характеристика);
		ИмяРеквизита   = "СписокНоменклатуры[%1].Номенклатура";
		ИмяРеквизита   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяРеквизита, Индекс);
		ТекстСообщения = НСтр("ru='Для номенклатуры: %1 необходимо установить штрихкод.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаШтрихкоды.НоменклатураПредставление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита);
		Отмена = Истина;
	КонецЦикла; 
	
	Пока ВыборкаСерийныеНомера.Следующий() Цикл
		Индекс 		 	= ПолучитьИндексСтрокиСписокНоменклатуры(ТЗ_СписокНоменклатуры, ВыборкаСерийныеНомера.Номенклатура, ВыборкаСерийныеНомера.Характеристика);
		ИмяРеквизита 	= "СписокНоменклатуры[%1].Номенклатура";
		ИмяРеквизита 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяРеквизита, Индекс);
		ТекстСообщения  = НСтр("ru='Номенклатура: %1 имеет не верное количество серийных номеров.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаСерийныеНомера.НоменклатураПредставление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита);
		Отмена = Истина;
	КонецЦикла; 
	
	Возврат Отмена;
	
КонецФункции // ПроверкаПриходногоОрдера()

Функция ПроверкаСерийныхНомеров(Форма, Отправитель)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаПроверкаСН(Отправитель);
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;			
	КонецЕсли; 
	
	Выборка 				= РезультатЗапроса.Выбрать();
	ТЗ_СписокНоменклатуры   = Форма.СписокНоменклатуры.Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		Индекс 		   = ПолучитьИндексСтрокиСписокНоменклатуры(ТЗ_СписокНоменклатуры, Выборка.Номенклатура, Выборка.Характеристика);
		ИмяРеквизита   = "СписокНоменклатуры[%1].Номенклатура";
		ИмяРеквизита   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяРеквизита, Индекс);
		ТекстСообщения = НСтр("ru='Серийный номер: %1 номенклатуры %2 не соответствует распоряжению.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НоменклатураПредставление, Выборка.СерийныйНомерПредставление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита);    			
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // ПроверкаСерийныхНомеров()

Функция ПроверкаНаПерепоставку(Форма, Отправитель)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкаПерепоставка();
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;			
	КонецЕсли; 
	
	Выборка 			  = РезультатЗапроса.Выбрать();
	ТЗ_СписокНоменклатуры = Форма.СписокНоменклатуры.Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		Индекс 		   = ПолучитьИндексСтрокиСписокНоменклатуры(ТЗ_СписокНоменклатуры, Выборка.Номенклатура, Выборка.Характеристика);
		ИмяРеквизита   = "СписокНоменклатуры[%1].Номенклатура";
		ИмяРеквизита   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяРеквизита, Индекс);
		ТекстСообщения = НСтр("ru='Попытка проведения перепоставки по номенклатуре %1 в количестве %2.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НоменклатураПредставление, Выборка.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверкаНаПерепоставку()





// Заполнение документов

Процедура ЗаполнитьНоменклатуруПоПартнеру(Форма, Отправитель)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаполнениеПоПартнеру();
	
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	
	Форма.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуру(Форма, Отправитель)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаполнние();
	
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	
	Форма.СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ЗаполнитьСерийныеНомераПоОтправителю(Форма, Отправитель)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаполнениеСНПоОтправителю(Отправитель);
	
	Запрос.УстановитьПараметр("Склад", Форма.Склад);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	
	Если ТипЗнч(Отправитель) <> Тип("ДокументСсылка.ЗаказНаПеремещение") И ТипЗнч(Отправитель) <> Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Запрос.УстановитьПараметр("СкладОтправитель", Отправитель.Склад);
	КонецЕсли;
	
	Возврат ЗаписатьСерийныеНомераВРегистр(Форма.Склад, Отправитель, Запрос.Выполнить().Выгрузить());
	
КонецФункции











// Вспомагательные процедуры

// Функция формирует таблицу для записи в регистр «Пуля_ПриемкаТоваров».
// 
// Параметры:
//  Отправитель -
//					ДокументСсылка.ВозвратТоваровОтКлиента
//					ДокументСсылка.ПрочееОприходованиеТоваров
//					ДокументСсылка.СборкаТоваров
//					ДокументСсылка.ЗаказНаСборку
//					ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента
//					СправочникСсылка.Склады
//					СправочникСсылка.Партнеры
//					СправочникСсылка.СоглашенияСПоставщиками 		- значение параметра отбора в пуле приемки (которое выбрано пользователем).
//
//  Возвращаемое значение:
//   ТаблицаЗначений - таблица которую стразу можно писать в регистр.
//
Функция СформироватьТаблицуСписокНоменклатуры(Склад, Отправитель, ТаблицаНоменклатуры)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура	КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика	КАК Характеристика,
	|	ТаблицаНоменклатуры.Количество 		КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура 		КАК Номенклатура,
	|	Характеристика  	КАК Характеристика,
	|	СУММА(Количество)   КАК Количество
	|ПОМЕСТИТЬ КешНоменкратура
	|ИЗ
	|	ТаблицаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| &Склад				КАК Склад,
	|	&Отправитель		КАК Отправитель,
	|	Номенклатура		КАК Номенклатура,
	|	Характеристика		КАК Характеристика,
	|	Количество			КАК Количество,
	|	&Пользователь		КАК Пользователь
	|ИЗ
	|	КешНоменкратура");
	
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуСписокНоменклатуры()

Функция ПолучитьИндексСтрокиСписокНоменклатуры(СписокНоменклатуры, Номенклатура, Характеристика)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	Возврат СписокНоменклатуры.Индекс(РезультатПоиска[0]);
	
КонецФункции // ПолучитьИндексСтрокиСписокНоменклатуры()







// Сведения о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.1.130";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "ПУЛЯ");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "ПУЛЯ [" + Версия + "]");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "ПУЛЯ [" + Версия + "]", "ПУЛЯ", "ОткрытиеФормы", Ложь, "ПУЛЯ");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры