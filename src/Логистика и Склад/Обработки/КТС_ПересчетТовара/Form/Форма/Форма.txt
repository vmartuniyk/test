&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СсылкаНаДокумент") Тогда
		СсылкаНаДокумент = Параметры.СсылкаНаДокумент;	
	КонецЕсли;
	
	Если СсылкаНаДокумент.Пустая()=Ложь Тогда
		Элементы.СсылкаНаДокумент.ТолькоПросмотр = Истина;
		Если СсылкаНаДокумент.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов 
			ИЛИ СсылкаНаДокумент.Проведен = ЛОЖЬ Тогда
			Элементы.ПолеВвода.ТолькоПросмотр = Ложь;		
		КонецЕсли;
		ВнешнняОбработка = Истина;
		Склад =  СсылкаНаДокумент.Склад;
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ИнициализироватьПоляДокументаНаСервере(Номенклатура);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()  	
	Если ВнешнняОбработка = Истина Тогда
		ФормаДокумента	= ВладелецФормы;
		ФормаДокумента.Закрыть();  
		ОткрытьФорму("Документ.ПересчетТоваров.ФормаОбъекта",Новый Структура("Ключ",СсылкаНаДокумент));
	КонецЕсли;
	
		
КонецПроцедуры

#КонецОбласти                              

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеВводаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	КоличествоПоУчету = 0;
	КоличествоПоФакту = 0;
	Товар = Неопределено;
	Код = Неопределено;
	ТаблицаНоменклатурыПоУчету.Очистить();
	ТаблицаВыбранныеСН.Очистить();
	ТаблицаРасходСН.Очистить();
	ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду(Текст);
	ПодключитьОбработчикОжидания("УстановитьТекущиеЭлементТСД_Номенклатура", 0.1, Истина);
КонецПроцедуры

										
#КонецОбласти

#Область ОбработчикиКомандФормы


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

 &НаКлиенте
Процедура УстановитьТекущиеЭлементТСД_Номенклатура()
	ТекущийЭлемент = Элементы.ПолеВвода;
КонецПроцедуры // УстановитьТекущиеЭлементТСД_Номенклатура()


&НаСервере
Процедура ИнициализироватьПоляДокументаНаСервере(Номенклатура,Пересчет=Истина)
	УстановитьПривилегированныйРежим(Истина);    
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРеквизитовДокумента();
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	 
	РезультатЗапроса = Запрос.Выполнить(); 	 
	Выборка= РезультатЗапроса.Выбрать();
	 
	Если Выборка.Следующий() Тогда
		Если Пересчет Тогда
			Товар = Номенклатура;
			Код = Номенклатура.Код;
			КоличествоПоФакту = Выборка.КоличествоПоФакту;
			КоличествоПоУчету = Выборка.КоличествоПоУчету;
		КонецЕсли;
		ОбщееКоличествоПоУчету = Выборка.ОбщееКоличествоПоУчету;
		ОбщееКоличествоПоФакту = Выборка.ОбщееКоличествоПоФакту;   
	Иначе
		Если Пересчет Тогда
			Товар = Неопределено;
			Код = Неопределено;
			КоличествоПоФакту = Неопределено;
			КоличествоПоУчету = Неопределено;
		КонецЕсли;        
		ОбщееКоличествоПоУчету = Неопределено;
		ОбщееКоличествоПоФакту = Неопределено; 		 	 	
	КонецЕсли;   
КонецПроцедуры // ИнициализироватьПоляДокументаНаСервере()
 
&НаСервере
Функция ПолучитьТекстЗапросаРеквизитовДокумента()
	ТекстЗапроса ="ВЫБРАТЬ
	              |	ПересчетТоваровТовары.Номенклатура,
	              |	ПересчетТоваровТовары.КоличествоФакт,
	              |	ПересчетТоваровТовары.КоличествоУпаковок,
	              |	ПересчетТоваровТовары.КоличествоУпаковокФакт,
	              |	ПересчетТоваровТовары.Количество
	              |ПОМЕСТИТЬ СпрНоменклатура
	              |ИЗ
	              |	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	              |ГДЕ
	              |	ПересчетТоваровТовары.Ссылка = &Ссылка
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СУММА(СпрНоменклатура.КоличествоУпаковок) КАК ОбщееКоличествоПоУчету,
	              |	СУММА(СпрНоменклатура.КоличествоУпаковокФакт) КАК ОбщееКоличествоПоФакту
	              |ПОМЕСТИТЬ ОбщееКоличество
	              |ИЗ
	              |	СпрНоменклатура КАК СпрНоменклатура
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЕСТЬNULL(СпрНоменклатура.КоличествоУпаковок, 0) КАК КоличествоПоУчету,
	              |	ЕСТЬNULL(СпрНоменклатура.КоличествоУпаковокФакт, 0) КАК КоличествоПоФакту,
	              |	ОбщееКоличество.ОбщееКоличествоПоУчету,
	              |	ОбщееКоличество.ОбщееКоличествоПоФакту
	              |ИЗ
	              |	ОбщееКоличество КАК ОбщееКоличество
	              |		
				  |Левое СОЕДИНЕНИЕ СпрНоменклатура КАК СпрНоменклатура
	              |ПО (СпрНоменклатура.Номенклатура = &Номенклатура)";
	
	Возврат ТекстЗапроса; 
КонецФункции // ПолучитьТекстЗапросаРеквизитовДокумента()

&НаКлиенте
Процедура СсылкаНаДокументПриИзменении(Элемент)
	СсылкаНаДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СсылкаНаДокументПриИзмененииНаСервере()
	Если Параметры.Свойство("СсылкаНаДокумент") Тогда
		СсылкаНаДокумент = Параметры.СсылкаНаДокумент;	
	КонецЕсли;
	
	Если СсылкаНаДокумент.Пустая()=Ложь Тогда
		Если СсылкаНаДокумент.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов Тогда
			Элементы.ПолеВвода.ТолькоПросмотр = Ложь;		
		КонецЕсли;
		Склад =  СсылкаНаДокумент.Склад;
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ИнициализироватьПоляДокументаНаСервере(Номенклатура,Истина);  
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду(ТСД_Номенклатура)
	
	Если ПустаяСтрока(ТСД_Номенклатура) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СообщениеОбОшибке", НСтр("ru='Вместо кода товару/штрихкоду/серийного номера/артикулу введена пустая строка.'"));
		ПараметрыФормы.Вставить("ЦветОшибки",1);
		ПараметрыФормы.Вставить("КодШтрихкода","-//-"); 		
		ОткрытьФорму("ВнешняяОбработка.КТС_ПересчетТовара.Форма.ФормаОшибки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ЦветОшибки = 0;
	ВводПоШтрихкоду  = Ложь;
	ВводКода 		 = Ложь;
	ВвестиКоличество = Ложь;
	ВводПоАртикулу	 = Ложь;

	СообщениеОбОшибке   = "";
	
	СтруктураДанных = ЗаполнитьНачальныеДанные();
	СтруктураОшибок = ЗаполнитьСтруктуруОшибок(ТСД_Номенклатура);
	
	ДобавитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура, ВводПоШтрихкоду, СтруктураДанных, СтруктураОшибок);
			
	Если ВводПоШтрихкоду  = Истина  Тогда
		ДобавитьНоменклатуруПоШтрихКодуНаСервере(ТСД_Номенклатура, СтруктураДанных,  ВвестиКоличество, ВводКода,СтруктураОшибок);
		
		Если ВвестиКоличество Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", СтруктураДанных.Номенклатура);
			ОповещениеПослеЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытииФормаНабивкиНоменклатуры",ЭтаФорма,СтруктураДанных);
			ОткрытьФорму("ВнешняяОбработка.КТС_ПересчетТовара.Форма.ФормаНабивкиНоменклатуры"
						,ПараметрыФормы
						,ЭтаФорма
						,
						,
						,
						,ОповещениеПослеЗакрытииФормы
						,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
						);
			ТСД_Номенклатура = "";
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ВводКода  = Истина  Тогда
		ДобавитьНоменклатуруПоКодуНаСервере(ТСД_Номенклатура, СтруктураДанных, ВводПоАртикулу, СтруктураОшибок);
	КонецЕсли;
	
	Если ВводПоАртикулу = Истина Тогда
		ДобавитьНоменклатуруПоАртикулуНаСервере(ТСД_Номенклатура,СтруктураДанных, СтруктураОшибок);
	КонецЕсли;
	
	Если  ПустаяСтрока(СтруктураОшибок.СообщениеОбОшибке) = ЛОЖЬ Тогда
		ОткрытьФорму("ВнешняяОбработка.КТС_ПересчетТовара.Форма.ФормаОшибки", СтруктураОшибок, ЭтаФорма, Новый УникальныйИдентификатор);  		
	ИначеЕсли СтруктураДанных.Номенклатура = Неопределено Тогда
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар не найдено!'");
		ОткрытьФорму("ВнешняяОбработка.КТС_ПересчетТовара.Форма.ФормаОшибки", СтруктураОшибок, ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ТСД_Номенклатура = "";
	
КонецПроцедуры // ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду()

&НаКлиенте
Процедура ПослеЗакрытииФормаНабивкиНоменклатуры(Результат,ДопольнительныеПараметры) Экспорт 
	Если Результат = Неопределено ИЛИ ДопольнительныеПараметры = Неопределено  Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество()>0 
		И ТипЗнч(ДопольнительныеПараметры) = Тип("Структура") И ДопольнительныеПараметры.Количество()>0  Тогда
		ЗаполнитьЗначенияСвойств(ДопольнительныеПараметры,Результат);
		ДобавитьНоменклатуруВДокументПересчетТоваров(ДопольнительныеПараметры);
	КонецЕсли;  	

КонецПроцедуры // ПослеЗакрытииФормаНабивкиНоменклатуры()

&НаСервере
Функция ЗаполнитьНачальныеДанные()
	
	СтруктураДанный = Новый Структура; 
	СтруктураДанный.Вставить("Номенклатура",);
	СтруктураДанный.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураДанный.Вставить("Коэффициент",1); 
	СтруктураДанный.Вставить("Упаковка",Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	СтруктураДанный.Вставить("ЕдиницаИзмерения",Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	СтруктураДанный.Вставить("СерийныйНомер");
	СтруктураДанный.Вставить("Количество",1);  
	
	Возврат СтруктураДанный;
КонецФункции // ЗаполнитьНачальныеДанные()

&НаСервере
Функция ЗаполнитьСтруктуруОшибок(ТСД_Номенклатура)
	
	СтруктураОшибок = Новый Структура; 
	СтруктураОшибок.Вставить("СообщениеОбОшибке","");
	СтруктураОшибок.Вставить("ЦветОшибки",0); 
	СтруктураОшибок.Вставить("КодШтрихкода",ТСД_Номенклатура); 
	Возврат СтруктураОшибок;
КонецФункции // ЗаполнитьСтруктуруОшибок()

#Область СерийныеНомера

&НаСервере  
Процедура ДобавитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура, ВводПоШтрихкоду,СтруктураДанных,СтруктураОшибок)
	
	УстановитьПривилегированныйРежим(Истина);
	Дубли = ЛОЖЬ;
	
	НайденаНоменклатура = ПолучитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура,СтруктураДанных,Дубли);
	
	Если Дубли = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 2;
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар с данным кода товару/штрихкоду/серийного номера/артикулу найдено больше чем одну. Нужно данной товар установить в документе вручную!'");
		Возврат;	
	КонецЕсли;
	
	Если НайденаНоменклатура <> Неопределено Тогда
		Отказ = ПроверитьНаличияНоменклатурыВПопереднемПересчете(НайденаНоменклатура);
		Если Отказ = Истина Тогда
			СтруктураОшибок.ЦветОшибки = 3;
			СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар уже есть в другом документе ПересчетТовара. Нужно либо закрыть тот открытый документ ПересчетаТоваров, либо отсканировать этот товар в том документе.!'");			
			Возврат;  			
		КонецЕсли;
		
		Если ПроверитьСерийныйНомерНаУникальность(СтруктураДанных) Тогда
			СтруктураОшибок.ЦветОшибки = 4;
			СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар уже с этим серийным номером сканировался.!'");			
			Возврат;  		
		КонецЕсли;
		СтруктураДанных.Вставить("ОтсканированоПоСерийномуНомеру",Истина);
		ДобавитьНоменклатуруВДокументПересчетТоваров(СтруктураДанных);
		
	Иначе 		
		ВводПоШтрихкоду = Истина;
		Возврат; 
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьНоменклатуруПоСерийномуНомеру()

&НаСервере
Функция ПолучитьНоменклатуруПоСерийномуНомеру(СерийныйНомер, СтруктураДанных,Дубли)
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру();	
	Запрос.УстановитьПараметр("СерийныйНомер", ВРег(СерийныйНомер));
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = РезультатЗапроса.Выгрузить();
	Если ТаблицаТоваров.Количество()>1 Тогда
		Дубли = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка);	
		Возврат Выборка.Номенклатура;
	КонецЕсли;	
КонецФункции // ПолучитьНоменклатуруПоСерийномуНомеру()

&НаСервере
Функция ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру()
			
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СерийныеНомераНоменклатуры.Владелец КАК Номенклатура,
		               |	СерийныеНомераНоменклатуры.Ссылка КАК СерийныйНомер,
		               |	СерийныеНомераНоменклатуры.Владелец.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |ИЗ
		               |	Справочник.СерийныеНомераНоменклатуры КАК СерийныеНомераНоменклатуры
		               |ГДЕ
		               |	СерийныеНомераНоменклатуры.Код = &СерийныйНомер
		               |	И СерийныеНомераНоменклатуры.ПометкаУдаления = ЛОЖЬ";   						   
	
	Возврат ТекстЗапроса;              	
КонецФункции // ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру()

#КонецОбласти

#Область ШтрихКод

&НаСервере
Процедура ДобавитьНоменклатуруПоШтрихКодуНаСервере(ШтрихкодНоменклатуры, СтруктураДанные, ВвестиКоличество, ВводКода,СтруктураОшибок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанныеПоРегистру = ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодНоменклатуры);
		
	Если СтруктураДанныеПоРегистру = Неопределено Тогда
		ВводКода = Истина;	
		Возврат;
	КонецЕсли;
	
	Отказ = ПроверитьНаличияНоменклатурыВПопереднемПересчете(СтруктураДанныеПоРегистру.Номенклатура);
	Если Отказ = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 3; 
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар уже есть в другом документе ПересчетТовара. Нужно либо закрыть тот открытый документ ПересчетаТоваров, либо отсканировать этот товар в том документе!'");			
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанныеПоРегистру.Свойство("Упаковка") И СтруктураДанныеПоРегистру.Упаковка.Пустая() = ЛОЖЬ Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанные,СтруктураДанныеПоРегистру);
		ВвестиКоличество = Истина;		
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураДанные,СтруктураДанныеПоРегистру);
		ДобавитьНоменклатуруВДокументПересчетТоваров(СтруктураДанные);
	КонецЕсли; 	
КонецПроцедуры // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодНоменклатуры)
	
	МассивШтрихкодов = Новый Массив;
	МассивШтрихкодов.Добавить(ШтрихкодНоменклатуры);
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(МассивШтрихкодов);
	СтруктураДанные    = ДанныеПоШтрихкодам[ШтрихкодНоменклатуры];
	
	Если ТипЗнч(СтруктураДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Номенклатура") Тогда
		КешНоменклатураПодбор = СтруктураДанные.Номенклатура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	          
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьНоменклатуруПоШтрихкоду()
#КонецОбласти

#Область НоменклатуреПоКодИАртикулу

&НаСервере
Процедура ДобавитьНоменклатуруПоКодуНаСервере(КодНоменклатуры,СтруктураДанных, ВводПоАртикулу, СтруктураОшибок)
	УстановитьПривилегированныйРежим(Истина);
	Дубли = ЛОЖЬ;
	КодПоОтборку = Прав("00000000000000000",11-СтрДлина(КодНоменклатуры))+КодНоменклатуры;
	
	Отбор = "И Номенклатура.Код = &Отбор";
	НайденаНоменклатура = ПолучитьНоменклатуруПоРеквизиту(КодПоОтборку,СтруктураДанных,Отбор,Дубли);
	
	Если Дубли = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 2;
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар с данным кода товару/штрихкоду/серийного номера/артикулу найдено больше чем одну. Нужно установить данной товар в документе вручную!'");
		Возврат;	
	КонецЕсли;
	
	Если НайденаНоменклатура = Неопределено Тогда
		ВводПоАртикулу = Истина;	
		Возврат;
	Иначе
		Отказ = ПроверитьНаличияНоменклатурыВПопереднемПересчете(НайденаНоменклатура);
		Если Отказ = Истина Тогда
			СтруктураОшибок.ЦветОшибки = 3;
			СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар уже есть в другом документе ПересчетТовара. Нужно либо закрыть тот открытый документ ПересчетаТоваров, либо отсканировать этот товар в том документе!'");			
			Возврат;
		КонецЕсли;
		ДобавитьНоменклатуруВДокументПересчетТоваров(СтруктураДанных);
	КонецЕсли;
КонецПроцедуры // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Процедура ДобавитьНоменклатуруПоАртикулуНаСервере(АртикулНоменклатуры,СтруктураДанных, СтруктураОшибок)
	Отбор = "И Номенклатура.Артикул = &Отбор";
	Дубли = ЛОЖЬ;
	НайденаНоменклатура = ПолучитьНоменклатуруПоРеквизиту(АртикулНоменклатуры,СтруктураДанных,Отбор, Дубли);
	
	Если Дубли = Истина Тогда
		СтруктураОшибок.ЦветОшибки = 2;
		СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар найдено больше чем одну. Нужно данной товар установить в документе вручную!'");
		Возврат;	
	КонецЕсли;

	Если НайденаНоменклатура = Неопределено Тогда		
		Возврат;
	Иначе
		Отказ = ПроверитьНаличияНоменклатурыВПопереднемПересчете(НайденаНоменклатура);
		Если Отказ = Истина Тогда
			СтруктураОшибок.ЦветОшибки = 3;  
			СтруктураОшибок.СообщениеОбОшибке = НСтр("ru = 'Товар с данным кода товару/штрихкоду/серийного номера/артикулу уже есть в другом документе ПересчетТовара. Нужно либо закрыть тот открытый документ ПересчетаТоваров, либо отсканировать этот товар в том документе!'");			
			Возврат;
		КонецЕсли;
		ДобавитьНоменклатуруВДокументПересчетТоваров(СтруктураДанных); 		
	КонецЕсли;
КонецПроцедуры // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Функция ПолучитьНоменклатуруПоРеквизиту(ЗначенияРеквизита, СтруктураДанные, Отбор,Дубли)
	УстановитьПривилегированныйРежим(Истина);
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаДобавленияНоменклатурыПоРеквизиту();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"%ОтборПоНоменклатуре%",Отбор);
	Запрос.УстановитьПараметр("Отбор", СокрЛП(ЗначенияРеквизита));
	РезультатЗапроса = Запрос.Выполнить();  
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = РезультатЗапроса.Выгрузить();
	Если ТаблицаТоваров.Количество()>1 Тогда
		Дубли = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанные,Выборка);
		Возврат Выборка.Номенклатура;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
КонецФункции // ПолучитьНоменклатуруПоКодуНоменклатуры()

&НаСервере
Функция ПолучитьТекстЗапросаДобавленияНоменклатурыПоРеквизиту()
	ТекстЗапроса =
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Номенклатура,
				|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
				|	Номенклатура.ЕдиницаИзмерения
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		
				|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
				|           
				|ГДЕ
				|	Номенклатура.ПометкаУдаления = ЛОЖЬ
				|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
				|	%ОтборПоНоменклатуре%";    	
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаДобавленияНоменклатурыПоРеквизиту()

#КонецОбласти

&НаСервере
Процедура ДобавитьНоменклатуруВДокументПересчетТоваров(СтруктураДанные)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		СтруктураДанные.Коэффициент = СтруктураДанные.ЕдиницаИзмерения.Коэффициент;
	Иначе
		СтруктураДанные.Коэффициент = 1;
	КонецЕсли;
	
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ТаблицаТовары = ДокументОбъект.Товары; 
		ПараметрыОтбора = Новый Структура("Номенклатура,Упаковка");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора,СтруктураДанные);
		НайденыСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденыСтроки.Количество()>0 Тогда
			ИндексСтроки = ТаблицаТовары.Индекс(НайденыСтроки[0]);   			
			СтрокаТаблициТовары = ТаблицаТовары.Получить(ИндексСтроки);	
			
			КоличествоТовара =  СтрокаТаблициТовары.КоличествоФакт;
			СтрокаТаблициТовары.КоличествоФакт = КоличествоТовара + СтруктураДанные.Количество * СтруктураДанные.Коэффициент;
			СтрокаТаблициТовары.КоличествоУпаковокФакт = КоличествоТовара + СтруктураДанные.Количество;
			Товар = СтруктураДанные.Номенклатура;
			Код = Товар.Код;
			КоличествоПоУчету = СтрокаТаблициТовары.КоличествоУпаковок;
			КоличествоПоФакту = СтрокаТаблициТовары.КоличествоУпаковокФакт;  			
		Иначе
			КоличествоТовара =  1 * СтруктураДанные.Коэффициент;
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанные);
			КоличествоУп = СтруктураДанные.Количество * СтруктураДанные.Коэффициент;
			НоваяСтрока.КоличествоФакт = СтруктураДанные.Количество;
			НоваяСтрока.КоличествоУпаковокФакт = КоличествоУп;	
			
			Товар = СтруктураДанные.Номенклатура;
			Код = Товар.Код;

			КоличествоПоДок = ПолучитьПоУчете(Товар);

			НоваяСтрока.Количество = КоличествоПоДок;
			НоваяСтрока.КоличествоУпаковок = КоличествоПоДок* СтруктураДанные.Коэффициент;
			КоличествоПоУчету = КоличествоПоДок;
			КоличествоПоФакту = КоличествоУп;
		КонецЕсли;    

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Попытка		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);		
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать документ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
		   	Возврат;		
		КонецПопытки;
		
	ЗафиксироватьТранзакцию();
	ИнициализироватьПоляДокументаНаСервере(Товар,ЛОЖЬ);
	ЗаполнитьТаблицаНоменклатурыПоУчету();
		
	Если СтруктураДанные.Свойство("ОтсканированоПоСерийномуНомеру") И СтруктураДанные.ОтсканированоПоСерийномуНомеру  Тогда
		НоваяСтрока = ТаблицаНоменклатураПоСерийномуНомеру.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанные,"Номенклатура,СерийныйНомер");	
	КонецЕсли;
	ЗаполнитьСерийныеНомераПоНоменклатуре();

КонецПроцедуры // ДобавитьНоменклатуруВДокументПересчетТоваров(Номенклатура)()

Функция ПолучитьПоУчете(Номенклатура)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНаличияПоУчету();
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Возврат ?(Выборка.Следующий(),Выборка.ВНаличииОстаток, 0)
	

КонецФункции // ПолучитьПоФакту()

Функция ПолучитьТекстЗапросаНаличияПоУчету()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			,
	               |			Номенклатура = &Номенклатура
	               |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНаличияПоУчету()


&НаСервере
Процедура ЗаполнитьТаблицаНоменклатурыПоУчету()
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаНоменклатурыПоУчету.Очистить();
	
	ДокументОснование = СсылкаНаДокумент.ДокументОснование;
	
	Если ДокументОснование.Пустая() Тогда
		Возврат;	
	КонецЕсли;
	
	ВидНоменклатуры = Товар.ВидНоменклатуры;
	Если ВидНоменклатуры.Пустая() Тогда
		Возврат;	
	КонецЕсли;
	
	Если Склад.Пустая() Тогда
		Возврат;	
	КонецЕсли;  	

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНоменклатураПоУчету();
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.УстановитьПараметр("ВидНоменклатуры",ВидНоменклатуры);
	Запрос.УстановитьПараметр("Склад",Склад);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаНоменклатурыПоУчету.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры // ЗаполнитьТаблицаНоменклатурыПоУчету()

&НаСервере
Функция ТекстЗапросаНоменклатураПоУчету()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СвязанныеДокументы.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ДокументыПересчет
	               |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&ДокументОснование) КАК СвязанныеДокументы
	               |ГДЕ
	               |	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПересчетТоваров
	               |	И ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПересчетТоваров).Проведен = ИСТИНА
	               |	И ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ПересчетТоваров).ПометкаУдаления = ЛОЖЬ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПересчетТоваровТовары.КоличествоУпаковокФакт КАК КоличествоПоФакту
	               |ПОМЕСТИТЬ ТоварПоФакту
	               |ИЗ
	               |	ДокументыПересчет КАК ДокПересчет
	               |	
				   |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	               |ПО ДокПересчет.Ссылка = ПересчетТоваровТовары.Ссылка
				   |
	               |ГДЕ
	               |	ПересчетТоваровТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток - ЕСТЬNULL(ТоварПоФакту.КоличествоПоФакту, 0) КАК КоличествоРасхождения
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |											,
	               |											Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	               |											И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТоварПоФакту КАК ТоварПоФакту
	               |ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварПоФакту.Номенклатура
				   |
	               |ГДЕ   
	               |	ТоварыНаСкладахОстатки.ВНаличииОстаток - ЕСТЬNULL(ТоварПоФакту.КоличествоПоФакту, 0) <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура";
	
	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаНоменклатураПоУчету()

&НаКлиенте
Процедура Объеденить(Команда)
	Если РаспоряжениеНаИнвентаризацию.Пустая()=Истина Тогда
		СообщениеОбОшибке = НСтр("ru = 'Документ Распоряджения на Инвентаризацию незаполнен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	Иначе  
		ОбъеденитьДокументыНаСервере(РаспоряжениеНаИнвентаризацию);  
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбъеденитьДокументыНаСервере(Распоряжение)
	Если Распоряжение.Статус = Перечисления.СтатусыРаспоряженийНаПроведениеИнвентаризацийТоваров.ВРаботе  Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПодчинненныхДокументов();
		Запрос.УстановитьПараметр("ДокументОснование",Распоряжение);
		Выборка = Запрос.Выполнить().Выбрать();
		НачатьТранзакцию();
		Пока Выборка.Следующий()  Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка		
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);		
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось провести объединения документов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				ОтменитьТранзакцию();
				Возврат;		
			КонецПопытки;
		
		КонецЦикла;
		
		ОсновнойДокумент = Документы.ПересчетТоваров.СоздатьДокумент();
		ОсновнойДокумент.Заполнить(Распоряжение);
		
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ОсновнойДокумент.Склад, ОсновнойДокумент.Помещение);
		ИнициализироватьКомпоновкуДанных(ОсновнойДокумент);
		
		УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "ДатаОстатков", ?(ЗначениеЗаполнено(ОсновнойДокумент.Дата), ОсновнойДокумент.Дата, ТекущаяДата()));
		
		
		Если ИспользоватьАдресноеХранение Тогда
			СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
		Иначе	
			СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
		КонецЕсли;
		
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборПересчета);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОтборПересчета.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ОсновнойДокумент.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
		
		Попытка		
			ОсновнойДокумент.Записать(РежимЗаписиДокумента.Проведение);		
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось провести объединения документов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат;		
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Упаковка");
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			ТаблицаТоваров = Выборка.Ссылка.Товары;
			Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТоваров);
				РезультатПоиска = ОсновнойДокумент.Товары.НайтиСтроки(ПараметрыОтбора);
				Если РезультатПоиска.Количество()=0 Тогда
					ЗаполнитьЗначенияСвойств(ОсновнойДокумент.Товары.Добавить(), СтрокаТоваров);		
				Иначе
					РезультатПоиска[0].КоличествоФакт = РезультатПоиска[0].КоличествоФакт + СтрокаТоваров.КоличествоФакт;
					РезультатПоиска[0].КоличествоУпаковокФакт = РезультатПоиска[0].КоличествоУпаковокФакт + СтрокаТоваров.КоличествоУпаковокФакт;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ОсновнойДокумент.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов;
		Попытка		
			ОсновнойДокумент.Записать(РежимЗаписиДокумента.Проведение);		
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось провести объединения документов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат;		
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;

КонецПроцедуры // ОбъеденитьДокументыНаСервере()

&НаСервереБезКонтекста
Функция ТекстЗапросаПодчинненныхДокументов()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СвязанныеДокументы.Ссылка КАК Ссылка
	               |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&ДокументОснование) КАК СвязанныеДокументы
	               |ГДЕ
	               |	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПересчетТоваров
	               |	И СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И СвязанныеДокументы.Ссылка.Проведен = ИСТИНА";
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПодчинненныхДокументов()

&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)

	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных(ОсновнойДокумент)

	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
		
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);

	ОтборПересчета.Инициализировать(ИсточникНастроек);
	ОтборПересчета.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "Склад" , ОсновнойДокумент.Склад);
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "Помещение", ОсновнойДокумент.Помещение);

КонецПроцедуры


&НаСервере
Функция ПроверитьНаличияНоменклатурыВПопереднемПересчете(НоменклатураПроверки)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНаличияНоменклатурыВПопереднемПересчете();
	Запрос.УстановитьПараметр("Номенклатура",НоменклатураПроверки);
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаДокумент);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // ПроверитьНаличияНоменклатурыВПопереднемПересчете()

&НаСервере
Функция ПолучитьТекстЗапросаНаличияНоменклатурыВПопереднемПересчете()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПересчетТоваров.ДокументОснование КАК ДокументОснование
	               |ПОМЕСТИТЬ ДокРаспоряжениеНаИнв
	               |ИЗ
	               |	Документ.ПересчетТоваров КАК ПересчетТоваров
	               |ГДЕ
	               |	ПересчетТоваров.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПересчетТоваров.Ссылка
	               |ПОМЕСТИТЬ ДокПересчет
	               |ИЗ
	               |	ДокРаспоряжениеНаИнв КАК ДокРаспоряжениеНаИнв
	               |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересчетТоваров КАК ПересчетТоваров
	               |ПО ДокРаспоряжениеНаИнв.ДокументОснование = ПересчетТоваров.ДокументОснование
	               |
				   |ГДЕ
	               |	ПересчетТоваров.Ссылка <> &Ссылка
	               |	И ПересчетТоваров.Проведен = ИСТИНА
	               |	И ПересчетТоваров.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПересчетТоваровТовары.Номенклатура
	               |ИЗ
	               |	ДокПересчет КАК ДокПересчет
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	               |		ПО ДокПересчет.Ссылка = ПересчетТоваровТовары.Ссылка
	               |ГДЕ
	               |	ПересчетТоваровТовары.Номенклатура = &Номенклатура";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНаличияНоменклатурыВПопереднемПересчете()

&НаСервере
Функция ПроверитьСерийныйНомерНаУникальность(СтруктураДанных)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаУникальностиСерийногоНомера();
	Запрос.УстановитьПараметр("СерийныйНомер",СтруктураДанных.СерийныйНомер);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Таблица",ТаблицаНоменклатураПоСерийномуНомеру.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой()  Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат ЛОЖЬ;
КонецФункции // ПроверитьСерийныйНомерНаУникальность()

&НаСервере
Функция ТекстЗапросаУникальностиСерийногоНомера()

	ТекстЗапроса ="ВЫБРАТЬ
	              |	ТабТовары.Номенклатура КАК Номенклатура,
	              |	ТабТовары.СерийныйНомер КАК СерийныйНомер
	              |ПОМЕСТИТЬ КешТаб
	              |ИЗ
	              |	&Таблица КАК ТабТовары
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	КешТаб.Номенклатура,
	              |	КешТаб.СерийныйНомер
	              |ИЗ
	              |	КешТаб КАК КешТаб
	              |ГДЕ
	              |	КешТаб.Номенклатура = &Номенклатура
	              |	И КешТаб.СерийныйНомер = &СерийныйНомер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаУникальностиСерийногоНомера()

&НаСервере
Процедура ЗаполнитьСерийныеНомераПоНоменклатуре()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСерийныеНомераПоНоменклатуре();
	Запрос.УстановитьПараметр("Таблица",ТаблицаНоменклатураПоСерийномуНомеру.Выгрузить());
	Запрос.УстановитьПараметр("Номенклатура",Товар);
	Запрос.УстановитьПараметр("Склад",Склад);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаРасходСН.Загрузить(РезультатЗапроса[2].Выгрузить());
	ТаблицаВыбранныеСН.Загрузить(РезультатЗапроса[1].Выгрузить());
КонецПроцедуры // ЗаполнитьСерийныеНомераПоНоменклатуре()

&НаСервере
Функция ТекстЗапросаСерийныеНомераПоНоменклатуре()
	ТекстЗапроса ="ВЫБРАТЬ
	              |	ТабТовары.Номенклатура КАК Номенклатура,
	              |	ТабТовары.СерийныйНомер КАК СерийныйНомер
	              |ПОМЕСТИТЬ КешТаб
	              |ИЗ
	              |	&Таблица КАК ТабТовары
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |
	              |	КешТаб.СерийныйНомер КАК СерийныйНомер 
	              |ИЗ
				  |
	              |	КешТаб КАК КешТаб
	              |ГДЕ
	              |	КешТаб.Номенклатура = &Номенклатура
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	СерийныеНомераНоменклатурыОстатки.СерийныеНомера  КАК СерийныйНомер
	              |ИЗ
	              |	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
	              |			,
	              |			Номенклатура = &Номенклатура
	              |				И Склад = &Склад
	              |				И НЕ СерийныеНомера В
	              |						(ВЫБРАТЬ
	              |							КешТаб.СерийныйНомер
	              |						ИЗ
	              |							КешТаб КАК КешТаб
	              |						ГДЕ
	              |							КешТаб.Номенклатура = &Номенклатура)) КАК СерийныеНомераНоменклатурыОстатки";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаСерийныеНомераПоНоменклатуре()


#КонецОбласти