

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СформироватьСКД();
	//ОбновитьИнформациюОбОтборах();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Проводим инициализацию отборов из загруженных данных при последнем сохранении
	ИнициализироватьОтборы();
	//Обновляем пометки кнопок для визуального восприятия отборов
	ОбновитьДанныеОтбора();
	ОбновитьИнформациюОбОтборах();
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
	АртикулПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрПриИзменении(Элемент)
	СформироватьСписокНаКлиенте(СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Ответ = Вопрос(НСтр("ru='Закрыть обработку?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СформироватьСписок(Команда)
	СформироватьСписокНаКлиенте(СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура Заменить(Команда)
	//Если ПустаяСтрока(СтрокаЗамены) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ru='Необходимо указать строку для замены'",, "СтрокаЗамены");
	//	Возврат;
	//КонецЕсли;
	Ответ = Вопрос(Нстр("ru='Выполнить изменения наименований номенклатуры?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаменитьНаСервере();
		ОбновитьИнтерфейс();
		ПереформироватьТаблицуНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборИСортировка(Команда)
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.ПереименованиеНоменклатуры.Форма.ФормаНастройки", Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек), ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		КомпоновщикНастроек = Результат;
		ОбновитьДанныеОтбора();
		//ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов);
		//СформироватьСписокНаКлиенте(СтрокаПоиска);	
	КонецЕсли;
	ОбновитьИнформациюОбОтборах();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	ОбновитьДанныеОтбора(Истина); 
	СформироватьСписокНаКлиенте(СтрокаПоиска);
	ОбновитьИнформациюОбОтборах();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	СформироватьСписокНаКлиенте(СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	СформироватьСписокНаКлиенте(СтрокаПоиска);
КонецПроцедуры








////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ



// Работа с запросом и компоновкой данных

&НаСервере
Процедура СформироватьСКД()
	
	//1. Создаем схему компоновки данных
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	//1.1 определяем источник данных для схемы
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения   = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	//1.2 определяем набор данных
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	Номенклатура.Ссылка КАК Номенклатура,
						 |	Номенклатура.Наименование КАК Наименование,
						 |	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
						 |	Номенклатура.Артикул КАК Артикул
						 |ИЗ
	                     |	Справочник.Номенклатура КАК Номенклатура
	                     |ГДЕ
						 |	ВЫБОР
						 |		КОГДА &Наименование = """"
						 |			ТОГДА ИСТИНА
						 |		ИНАЧЕ Номенклатура.Наименование ПОДОБНО &Наименование
						 |			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование
						 |	КОНЕЦ
	                     |	И НЕ Номенклатура.ПометкаУдаления";
						 
						 
	//1.2.1 добавляем поля 
	ПолеНоменклатуры = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНоменклатуры.ПутьКДанным = "Номенклатура";
	ПолеНоменклатуры.Заголовок 	 = "Номенклатура";
	ПолеНоменклатуры.Поле		 = "Номенклатура";	
	
	ПолеНоменклатуры = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНоменклатуры.ПутьКДанным = "Наименование";
	ПолеНоменклатуры.Заголовок 	 = "Наименование";
	ПолеНоменклатуры.Поле		 = "Наименование";
	
	ПолеНоменклатуры = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНоменклатуры.ПутьКДанным = "НаименованиеПолное";
	ПолеНоменклатуры.Заголовок 	 = "НаименованиеПолное";
	ПолеНоменклатуры.Поле		 = "НаименованиеПолное";
	
	ПолеНоменклатуры = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНоменклатуры.ПутьКДанным = "Артикул";
	ПолеНоменклатуры.Заголовок 	 = "Артикул";
	ПолеНоменклатуры.Поле		 = "Артикул";
	
	//2. создаем настройки для схемы
	//НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	//2.1 определяем структуру 
    //2.1.1 добавляем группировку "Номенклатура" 
	ГруппировкаНоменклатуры = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаНоменклатуры.Использование = Истина;
	
	//2.2 определим выбранные поля 
	ВыбранноеПоле = ГруппировкаНоменклатуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Заголовок 	= "Номенклатура";
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	
	ВыбранноеПоле = ГруппировкаНоменклатуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Заголовок 	= "Наименование";
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Наименование");
	
	ВыбранноеПоле = ГруппировкаНоменклатуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Заголовок 	= "НаименованиеПолное";
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("НаименованиеПолное");
	
	ВыбранноеПоле = ГруппировкаНоменклатуры.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Заголовок 	= "Артикул";
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Артикул");
	
	ГруппировкаНоменклатуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

КонецПроцедуры // СформироватьСписокНаСервере()

&НаСервере
Процедура ИнициализироватьОтборы()
	//Список значений "ИсторияОтборов" хранит историю отборов, максимум 20 элементов
	Для і=0 По ИсторияОтборов.Количество()-1 Цикл
		//Получаем имя команды которая соответствует отбору
		ИмяКоманды = ИсторияОтборов[і].Значение.ИмяКоманды;
		//Получаем представление отбора, которое является аналогичным 1С 8.1
		Представление = ПолучитьПредставлениеОтбора(ИсторияОтборов[і].Значение.МассивОтборов);
		//Динамически добавляем команду формы и добавляем элемент формы, который привязываем к команде формы 
		ДобавитьКомандуКФорме(ИмяКоманды, Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеОтбора(МассивОтборов)	
	ПредставлениеОтбора = "";
	КоличествоЭлементов = МассивОтборов.Количество()-1;
	Для i=0 По КоличествоЭлементов Цикл
		ПредставлениеОтбора = ПредставлениеОтбора + МассивОтборов[i].ЛевоеЗначение  + " "  
												  +	МассивОтборов[i].ВидСравнения   + " " 
												  + МассивОтборов[i].ПравоеЗначение + ?(i<КоличествоЭлементов, ", ", "");	
	КонецЦикла;
	Возврат ПредставлениеОтбора;	
КонецФункции




&НаКлиенте
Процедура СформироватьСписокНаКлиенте(Наименование, Отбор = Ложь, Сортировка = Ложь, Идентификатор = Неопределено, ИмяЭлемента = Неопределено)
	
	Если Не ПустаяСтрока(Наименование) Тогда
		ПараметрыОтбора = Новый Структура("Наименование", "%"+Наименование+"%");
	КонецЕсли;
	
	СформироватьСервер(Наименование, Отбор, Сортировка, Идентификатор, ИмяЭлемента);
	
	//Обновляем пометки кнопок для визуального восприятия отборов
	ОбновитьДанныеОтбора();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСервер(Наименование, Отбор = Ложь, Сортировка = Ложь, Идентификатор = Неопределено, ИмяЭлемента = Неопределено)
	
	Перем Значение, ВремОбъект;
	//Получаем СКД из временного хранилища
	СхемаКомпоновкиДанных 	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Наименование", "%"+Наименование+"%");
	
	//У пользователя есть возможность изменять форму, нужно проверить имя реквизита - возможно реквизит был добавлен через "Изменить форму..."
	Если Отбор ИЛИ НЕ Сортировка = Ложь Тогда
		ТекущиеДанные = Результаты.НайтиПоИдентификатору(Идентификатор);
		//Проверяем есть ли реквизит
		РеквизитИзТаб = ТекущиеДанные.Свойство(ИмяЭлемента, Значение);
		Если РеквизитИзТаб Тогда
			Если Отбор Тогда 
				//ДобавитьОтборПоЗначению(КомпоновщикНастроек, ИмяЭлемента, Значение);
				//ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов);
			Иначе 
				ДобавитьСортировку(КомпоновщикНастроек, ИмяЭлемента, Сортировка); 
			КонецЕсли;
		Иначе
			//Реквизита нет в таблице, разбиваем ИмяЭлемента на слова
			МассивИмен = ПолучитьМассивИмен(ИмяЭлемента);
			Колич_Имен = МассивИмен.Количество() - 1;
			
			//Данный цикл предназначен для поиска реквизита ссылочного типа, который является родителем реквизита по которому 
			//выполняется отбор или сортировка 
			Для i = 0 По Колич_Имен Цикл
				Если ТекущиеДанные.Свойство(МассивИмен[i], ВремОбъект) Тогда
					Если Найти(XMLТипЗнч(ВремОбъект).ИмяТипа, "Ref") = 0 Тогда
						//Добавлять дополнительные поля возможно только из реквизитов ссылочного типа
						ВызватьИсключение "Возникла неизвестная ошибка. Реквизит имеет не ссылочный тип: " + ИмяЭлемента;
					КонецЕсли;
					ИмяЭлемента = МассивИмен[i];
					i=i+1;
					Прервать;
				ИначеЕсли i+1 <= Колич_Имен Тогда
					МассивИмен[i+1] = МассивИмен[i] + "_" + МассивИмен[i+1];
				Иначе
					ВызватьИсключение "Возникла неизвестная ошибка. В таблице нет данных о имени: " + ИмяЭлемента;
				КонецЕсли;
			КонецЦикла;
			
			//Выполняем построение адреса реквизита по которому нужно выполнить отбор или сортировку
			АдресРеквизита = "";
			МетаВремЗначение = ВремОбъект.Метаданные();
			Пока i <= Колич_Имен Цикл
				ВремЗначение = МетаВремЗначение.Реквизиты.Найти(МассивИмен[i]);
				Если НЕ ВремЗначение = Неопределено Тогда
					АдресРеквизита = АдресРеквизита + МассивИмен[i];
					СформироватьАдресРеквизита(i, Колич_Имен, МетаВремЗначение, ВремЗначение, АдресРеквизита);
				Иначе
					Попытка 
						ВремЗначение = МетаВремЗначение.СтандартныеРеквизиты[МассивИмен[i]];
						АдресРеквизита = АдресРеквизита + МассивИмен[i];
						СформироватьАдресРеквизита(i, Колич_Имен, МетаВремЗначение, ВремЗначение, АдресРеквизита);
					Исключение
						МассивИмен[i+1] = МассивИмен[i] + "_" + МассивИмен[i+1];  
					КонецПопытки;
				КонецЕсли;
				i=i+1;
			КонецЦикла;
			
			Если Отбор Тогда 
				//ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов);
			Иначе 
				ДобавитьСортировку(КомпоновщикНастроек, ИмяЭлемента + ?(ПустаяСтрока(АдресРеквизита), "", "." + АдресРеквизита), Сортировка); 
			КонецЕсли;
						
		КонецЕсли;
			
	КонецЕсли;
		
	//3. готовим макет 
	КомпоновщикМакетаДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//4. исполняем макет 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	//5. выводим результат
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результаты.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	
	ОтфильтроватьТаблицуПоРегистру();
		
	ЗагруженоПозицый = НСтр("ru='Загружено номенклатур: %1%'");
	ЗагруженоПозицый = СтрЗаменить(ЗагруженоПозицый, "%1%", Результаты.Количество());
	Элементы.Декорация1.Заголовок = ЗагруженоПозицый;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизита(АдресРеквизита, Объект)
	Перем ЗначениеРеквизита;
	Выполнить("ЗначениеРеквизита = Объект." + АдресРеквизита + ";");
	Возврат ЗначениеРеквизита;
КонецФункции

&НаСервере
Процедура СформироватьАдресРеквизита(i, Колич_Имен, МетаВремЗначение, ВремЗначение, АдресРеквизита)
	Если i + 1 <= Колич_Имен Тогда
		//Из описания типа получаем метаданные
    	МетаВремЗначение = ВремЗначение.Тип.ПривестиЗначение(Неопределено).Метаданные();
		АдресРеквизита = АдресРеквизита + ".";
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИмен(ИмяЭлемента)
	
	МассивСлов = Новый Массив;
	ЧислоВхождений = СтрЧислоВхождений(ИмяЭлемента, "_");
	Если ЧислоВхождений = 0 Тогда
		МассивСлов.Добавить(ИмяЭлемента);
	Иначе
		Для Итератор = 0 По ЧислоВхождений - 1 Цикл
			Разделитель = Найти(ИмяЭлемента, "_");
			МассивСлов.Добавить(Лев(ИмяЭлемента, Разделитель - 1));
			ИмяЭлемента = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Разделитель);			
		КонецЦикла;
	    МассивСлов.Добавить(ИмяЭлемента);
	КонецЕсли;
	
	Возврат МассивСлов;
	
КонецФункции







&НаКлиенте
Процедура ОбновитьДанныеОтбора(ОтключитьОтбор = Ложь)
	Элементы.ОтборИСортировка.Пометка = Ложь;
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ОтключитьОтбор Тогда Элемент.Использование = Ложь; КонецЕсли;
		Если Элемент.Использование И Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		ИначеЕсли Элемент.Использование Тогда
			Элементы.ОтборИСортировка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСортировку(КомпоновщикНастроек, ИмяЭлемента, Направление)
	 	
	ЭлементыПорядка = КомпоновщикНастроек.Настройки.Порядок.Элементы;
	ЭлементыПорядка.Очистить();
	ЭлементПорядка = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.ТипУпорядочивания = Направление;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюОтборов(КомпоновщикНастроек, ИсторияОтборов)
	//Создаем уникальное имя команды, УникальныйИдентификатор не всегда начинается с буквы, добавляем вначале "n" 
	ИмяКоманды = "n" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	МассивОтборов = Новый Массив;
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			МассивОтборов.Добавить(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.ПравоеЗначение));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОтборов.Количество() Тогда
		ПредставлениеОтбора = ПолучитьПредставлениеОтбора(МассивОтборов);
		КоличествоЭлементов = ИсторияОтборов.Количество()-1;
		Для i=0 По КоличествоЭлементов Цикл
			//Если отбор найден перемещаем команду в начало списка, так же в списке значений изменяем положение отбора
			Если ПредставлениеОтбора = ИсторияОтборов[i].Представление Тогда
				ПереместитьКомандуФормы(ИсторияОтборов[i].Значение.ИмяКоманды, ИсторияОтборов[0].Значение.ИмяКоманды);
				ИсторияОтборов.Сдвинуть(i, -i);
				Прервать;
			//Это новый элемент создаем вначале списка значений, так же команду устанавливаем вначало списка
			ИначеЕсли i = КоличествоЭлементов Тогда
				ДобавитьКомандуКФорме(ИмяКоманды, ПредставлениеОтбора, ИсторияОтборов[0].Значение.ИмяКоманды);
				ИсторияОтборов.Вставить(0, Новый Структура("ИмяКоманды, МассивОтборов", ИмяКоманды, МассивОтборов), ПредставлениеОтбора);
			КонецЕсли;
		КонецЦикла;
		//Элементов еще нет, создаем первые элементы
		Если КоличествоЭлементов < 0 Тогда
			ДобавитьКомандуКФорме(ИмяКоманды, ПредставлениеОтбора);
			ИсторияОтборов.Вставить(0, Новый Структура("ИмяКоманды, МассивОтборов", ИмяКоманды, МассивОтборов), ПредставлениеОтбора);
		КонецЕсли;	
	КонецЕсли;
	
	//Элементов больше 20, удаляем лишнее
	Если ИсторияОтборов.Количество() = 21 Тогда
		УдалитьКомандуФормы(ИсторияОтборов[20].Значение.ИмяКоманды);
		ИсторияОтборов.Удалить(20);
	КонецЕсли;
	
КонецПроцедуры





&НаСервере
Процедура ДобавитьКомандуКФорме(ИмяКоманды, Представление, ИмяПозицииВставки = Неопределено)
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "ОтборИстория";
	Команда.Заголовок = Представление;
	КомандаФормы = Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), Элементы.ИсторияОтборов, Элементы.Найти(ИмяПозицииВставки));
	КомандаФормы.ИмяКоманды = Команда.Имя;
	КомандаФормы.Заголовок  = Представление;
	КомандаФормы.Вид  = ВидКнопкиФормы.КнопкаКоманднойПанели;	
КонецПроцедуры

&НаСервере
Процедура ПереместитьКомандуФормы(ИмяКоманды, ИмяПозицииПеремещения)
	Элементы.Переместить(Элементы.Найти(ИмяКоманды), Элементы.ИсторияОтборов, Элементы.Найти(ИмяПозицииПеремещения));	
КонецПроцедуры

&НаСервере
Процедура УдалитьКомандуФормы(ИмяКоманды)
	Элементы.Удалить(Элементы.Найти(ИмяКоманды));
	Команды.Удалить(Команды.Найти(ИмяКоманды));	
КонецПроцедуры



&НаСервере
Процедура АртикулПриИзмененииНаСервере()
	
	СхемаКомпоновкиДанных 	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("НаборДанных");
	Если Не НаборДанных = Неопределено Тогда
		Если Артикул Тогда
			НаборДанных.Запрос = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	Номенклатура.Ссылка КАК Номенклатура,
						 |	Номенклатура.Наименование КАК Наименование,
						 |	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
						 |	Номенклатура.Артикул КАК Артикул
	                     |ИЗ
	                     |	Справочник.Номенклатура КАК Номенклатура
	                     |ГДЕ
	                     |	ВЫБОР
						 |		КОГДА &Наименование = """"
						 |			ТОГДА ИСТИНА
						 |		ИНАЧЕ Номенклатура.Артикул ПОДОБНО &Наименование
						 |			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование
						 |	КОНЕЦ
	                     |	И НЕ Номенклатура.ПометкаУдаления";
		Иначе
						 НаборДанных.Запрос = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	Номенклатура.Ссылка КАК Номенклатура,
						 |	Номенклатура.Наименование КАК Наименование,
						 |	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
						 |	Номенклатура.Артикул КАК Артикул
	                     |ИЗ
	                     |	Справочник.Номенклатура КАК Номенклатура
	                     |ГДЕ
	                     |	ВЫБОР
						 |		КОГДА &Наименование = """"
						 |			ТОГДА ИСТИНА
						 |		ИНАЧЕ Номенклатура.Наименование ПОДОБНО &Наименование
						 |			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &Наименование
						 |	КОНЕЦ
	                     |	И НЕ Номенклатура.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	СформироватьСервер(СтрокаПоиска);
	
КонецПроцедуры // АртикулПриИзмененииНаСервере()
 




// Замена позицый
 
&НаСервере
Процедура ЗаменитьНаСервере()

	КоличествоПерезаписаных = 0;
	КоличествоКлонов		= 0;
	
	Для каждого СтрокаТаблицы Из Результаты Цикл
	
		НоменклатураОбъект = СтрокаТаблицы.Номенклатура.ПолучитьОбъект();
		
		Если Артикул Тогда
			НоменклатураОбъект.Артикул = СтрЗаменить(НоменклатураОбъект.Артикул, СтрокаПоиска, СтрокаЗамены);
		Иначе
			НоменклатураОбъект.Наименование = СтрЗаменить(НоменклатураОбъект.Наименование, СтрокаПоиска, СтрокаЗамены);
			НоменклатураОбъект.НаименованиеПолное = СтрЗаменить(НоменклатураОбъект.НаименованиеПолное, СтрокаПоиска, СтрокаЗамены);
		КонецЕсли; 
		
		Попытка
			НоменклатураОбъект.Записать();	
		Исключение
			КоличествоКлонов = КоличествоКлонов + 1;
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
				Продолжить;
			КонецПопытки;
		КонецПопытки;
		
		СтрокаТаблицы.Номенклатура = НоменклатураОбъект.Ссылка;
		
	    КоличествоПерезаписаных = КоличествоПерезаписаных + 1;
		
	КонецЦикла; 
	
	Элементы.Декорация1.Заголовок = "Всего - " + Строка(Результаты.Количество()) + " перезаписано - " + Строка(КоличествоПерезаписаных) + " ошибки - " + Строка(КоличествоКлонов);
	
КонецПроцедуры // ЗаменитьНаСервере()




// Фильтрация по регистру буков

&НаСервере
Процедура ОтфильтроватьТаблицуПоРегистру()

	РезультатыКопия.Очистить();

	Для каждого СтрокаТаблицы Из Результаты Цикл
		Если Артикул Тогда
			Если Не Найти(СтрокаТаблицы.Артикул, СтрокаПоиска) = 0 Тогда
				НоваяСтрока = РезультатыКопия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;	
		Иначе
			Если Не Найти(СтрокаТаблицы.Наименование, СтрокаПоиска) = 0 ИЛИ Не Найти(СтрокаТаблицы.НаименованиеПолное, СтрокаПоиска) = 0 Тогда
				НоваяСтрока = РезультатыКопия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Результаты.Загрузить(РезультатыКопия.Выгрузить());

КонецПроцедуры // ОтфильтроватьТаблицуПоРегистру()

&НаСервере
Процедура ПереформироватьТаблицуНаСервере()
	Результаты.Загрузить(РезультатыКопия.Выгрузить());
КонецПроцедуры // ПереформироватьТаблицуНаСервере()
 



&НаКлиенте
Процедура ОбновитьИнформациюОбОтборах()
	
	КоличествоОтборов = 0;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			КоличествоОтборов = КоличествоОтборов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОтборов = 0 Тогда
		Заголовок = "Переименование номенклатуры";
	Иначе
		Заголовок = "Переименование номенклатуры (Внимание установлены отборы).";
	КонецЕсли;
	
КонецПроцедуры
 



 