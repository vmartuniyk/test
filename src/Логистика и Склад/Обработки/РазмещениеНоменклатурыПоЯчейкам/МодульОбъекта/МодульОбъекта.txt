

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбработатьДанныеСканера(Форма, Склад, ДанныеСканера) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивМенеджеров = Новый Массив;
	МассивМенеджеров.Добавить(Справочники.СкладскиеЯчейки.ПустаяСсылка());
	
	МассивЗначений = ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(СокрЛП(ДанныеСканера), МассивМенеджеров);
		
	Если МассивЗначений.Количество() > 0 Тогда
		Форма.СкладскаяЯчейка = МассивЗначений[0];
	Иначе
		ДобавитьПозициюНоменклатуры(Форма, Склад, ДанныеСканера);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементовФормы(Форма, Доступность) Экспорт

	Элементы = Форма.Элементы;
	
	Элементы.ФормаВыполнитьРазмещение.Доступность 	= Доступность;
	Элементы.СкладскаяЯчейка.Доступность 			= Доступность;
	Элементы.СписокНоменклатуры.Доступность 		= Доступность;
	Элементы.Сканер.Доступность 					= Доступность;
	
	Если Не Доступность Тогда
		ОчиститьРеквизитыФормы(Форма);
	КонецЕсли;

КонецПроцедуры
 
Процедура ЗаписатьЯчейки(Форма) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СписокНоменклатуры = Форма.СписокНоменклатуры;
	СкладскаяЯчейка	   = Форма.СкладскаяЯчейка;
	Склад			   = Форма.Склад;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаписьЯчеек();
						  
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("Ячейка",				СкладскаяЯчейка);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
		НаборЗаписей.Отбор.Ячейка.Установить(Выборка.Ячейка);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры
 





////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Обработка добавления номенкалатуры
 
Процедура ДобавитьПозициюНоменклатуры(Форма, Склад, ДанныеСканера)
	
	МассивШтрихкодов = Новый Массив;
	МассивШтрихкодов.Добавить(ДанныеСканера);	
	
	ДанныеПоНоменклатуре = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(МассивШтрихкодов);
	
	СтруктураДанных = ДанныеПоНоменклатуре.Получить(ДанныеСканера);
	
	Если СтруктураДанных.Количество() = 0 Тогда
		ДанныеПоНоменклатуре = НайтиНоменклатуруПоСерийномуНомеру(Форма, Склад, ДанныеСканера);
	КонецЕсли;
	
	СтруктураДанных = ДанныеПоНоменклатуре.Получить(ДанныеСканера);
	
	Если СтруктураДанных.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Номенклатура с штрикодом или серийным номером не найдена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),,"Сканер");
		Возврат;
	КонецЕсли;

	ДобавитьНоменклатуруВТаблицу(Форма, СтруктураДанных, Склад, ДанныеСканера);
	
КонецПроцедуры

Функция НайтиНоменклатуруПоСерийномуНомеру(Форма, Склад, ДанныеСканера)

	Результат	 = Новый Соответствие;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаСерийныйНомер();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СерийныйНомер", ВРег(ДанныеСканера));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Номенклатура", 		Выборка.Номенклатура);
		СтруктураДанных.Вставить("Упаковка", 			Выборка.Упаковка);
		Результат.Вставить(ДанныеСканера, СтруктураДанных);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СформироватьТекстЗапросаСерийныйНомер()

	ТекстЗапроса = "
			   	|ВЫБРАТЬ
               	|	Номенклатура 											КАК Номенклатура,
				|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) 	КАК Упаковка
               	|ИЗ
               	|	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
               	|			,
               	|			Склад = &Склад
               	|				И СерийныеНомера.Код = &СерийныйНомер)";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаСерийныйНомер()
 
Процедура ДобавитьНоменклатуруВТаблицу(Форма, СтруктураДанных, Склад, ДанныеСканера)

	Элементы			= Форма.Элементы;
	СписокНоменклатуры  = Форма.СписокНоменклатуры;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтруктураДанных["Номенклатура"]);
	СтруктураПоиска.Вставить("Упаковка", 	 СтруктураДанных["Упаковка"]);
	
	РезультатПоиска = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Номенклатура уже занесена в список.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),,"Сканер");
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 			 	= СписокНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура 	= СтруктураДанных["Номенклатура"];
	НоваяСтрока.Упаковка 	 	= СтруктураДанных["Упаковка"];
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры
 


Функция ПолучитьТекстЗапросаЗаписьЯчеек()

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	СписокНоменклатуры.Номенклатура КАК Номенклатура
	                      |ПОМЕСТИТЬ СписокНоменклатуры
	                      |ИЗ
	                      |	&СписокНоменклатуры КАК СписокНоменклатуры
						  |ИНДЕКСИРОВАТЬ ПО 
						  |	СписокНоменклатуры.Номенклатура	
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Номенклатура 	КАК Номенклатура,
	                      |	ОсновнаяЯчейка	КАК ОсновнаяЯчейка,
						  |	Ячейка 			КАК Ячейка
	                      |ПОМЕСТИТЬ ОсновныеЯчейки
	                      |ИЗ
	                      |	РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам
	                      |ГДЕ
						  |	Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СписокНоменклатуры)
	                      |	И Склад = &Склад
						  |	И ОсновнаяЯчейка
						  |ИНДЕКСИРОВАТЬ ПО
						  |	Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СписокНоменклатуры.Номенклатура					КАК Номенклатура,
	                      |	&Склад											КАК Склад,
	                      |	&Ячейка											КАК Ячейка,
	                      |	ВЫБОР
						  |		КОГДА ЕСТЬNULL(ОсновныеЯчейки.ОсновнаяЯчейка, 0) = 0
						  |			ТОГДА ИСТИНА
						  |		КОГДА ЕСТЬNULL(ОсновныеЯчейки.Ячейка, 0) = &Ячейка
						  |			ТОГДА ИСТИНА
						  |		ИНАЧЕ ЛОЖЬ
						  |	КОНЕЦ КАК ОсновнаяЯчейка
	                      |ИЗ
	                      |	СписокНоменклатуры КАК СписокНоменклатуры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеЯчейки КАК ОсновныеЯчейки
	                      |		ПО СписокНоменклатуры.Номенклатура = ОсновныеЯчейки.Номенклатура";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗаписьЯчеек()
 
 
 
// Интерфейсные механизмы

Процедура ОчиститьРеквизитыФормы(Форма)
	
	Форма.СкладскаяЯчейка 	= Справочники.СкладскиеЯчейки.ПустаяСсылка();
	Форма.Сканер			= "";
	
	Форма.СписокНоменклатуры.Очистить();
	
КонецПроцедуры
 


// Сведения о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.0.4";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Размещение номенклатуры по ячейкам");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Размещение номенклатуры по ячейкам [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Размещение номенклатуры по ячейкам [" + Версия + "]", "РНПЯ", "ОткрытиеФормы", Ложь, "РНПЯ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры