
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("Тест_ПроверитьТекстЗапросаКонтактныхЛиц");
	СписокТестов.Добавить("Тест_ПолучитьСписокПеревозчиков");
	СписокТестов.Добавить("Тест_ПолучитьСписокСкладов");
	СписокТестов.Добавить("Тест_ПроверитьЗаполненияКонтактноеЛицо");
	СписокТестов.Добавить("Тест_ПроверитьЗаполненияСписокПричинВозврата");
	СписокТестов.Добавить("Тест_ПроверитьЗаполненияДанныеОбКонтактномЛице");


	Возврат СписокТестов;
	
КонецФункции


&НаКлиенте
Процедура Тест_ПроверитьТекстЗапросаКонтактныхЛиц()  Экспорт
	ТекстЗапроса =ПолучитьТекстЗапросаКонтактныхЛиц();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПолучитьСписокПеревозчиков() Экспорт
	СписокВыбора = Новый СписокЗначений;
	ПолучитьСписокПеревозчиков(СписокВыбора);
	ЮнитТест.ПроверитьТип(СписокВыбора, Тип("СписокЗначений"));

КонецПроцедуры

&НаКлиенте
Процедура Тест_ПолучитьСписокСкладов() Экспорт
	СписокВыбора = Новый СписокЗначений;
	ПолучитьСписокСкладов();
	ЮнитТест.ПроверитьТип(СписокВыбора, Тип("СписокЗначений"));

КонецПроцедуры

&НаКлиенте
Процедура Тест_ПроверитьЗаполненияКонтактноеЛицо() Экспорт
	ЗаполнитьКонтактноеЛицо();
	Результат = СформироватьСписокКонтактноеЛиц();   
	ЮнитТест.ПроверитьТип(Результат, Тип("СписокЗначений"));
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПроверитьЗаполненияСписокПричинВозврата()Экспорт
	СписокВыбора = Новый СписокЗначений;
	СформироватьСписокПричинВозвратаНаСервере(СписокВыбора);
	ЮнитТест.ПроверитьТип(СписокВыбора, Тип("СписокЗначений"));
КонецПроцедуры

&НаКлиенте
Процедура Тест_ПроверитьЗаполненияДанныеОбКонтактномЛице() Экспорт
	ПолучитьДанныеОбКонтактномЛице(КонтактноеЛицо);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	НачалоВыполнения	= ТекущаяДата();
	ТДДата 				= ТекущаяДата();
	
	Если НЕ Параметры.НоваяЗадача Тогда
		Если НЕ Параметры.Место 		= Неопределено Тогда
			Модифицированность 			= Ложь;
			МестоДоставки				= Параметры.Место;
			ПолучитьСтруктуруДанных(МестоДоставки);
		КонецЕсли;
	КонецЕсли;
	
	Если   НЕ Параметры.Отправитель= Неопределено Тогда
		Модифицированность 			= Ложь;
		Отправитель 				= Параметры.Отправитель;
		ОтправительПредставление 	= Параметры.Отправитель.Наименование;
	КонецЕсли;
	
	Если   НЕ Параметры.Получатель= Неопределено Тогда
		Модифицированность 			= Ложь;
		Получатель 					= Параметры.Получатель;
		ПолучательПредставление 	= Параметры.Получатель.Наименование;
	КонецЕсли;

	Если Параметры.ДокументОснования<>Неопределено Тогда
		Модифицированность 			=	Ложь;
		ДокументОснования			=	Параметры.ДокументОснования;
		Элементы.ТоварыДатаПродажи.ТолькоПросмотр = Истина;
	КонецЕсли;

		
	Если Параметры.Операция<>Неопределено Тогда
		Операция = Параметры.Операция;
		Если Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьСоСклада")Тогда 
			Элементы.ГруппаШапкаЗабратьСоСклада.Видимость 	= Истина;
			ЭтаФорма.Заголовок 								= "Создать задачу Забрать со склада";
			ЗаполнятьУникальныйИдентификатор 				= Ложь;
			ИспользоватьОтображениеКакЗадачи 				= Ложь;
			КодУжеУпартнера					 				= Ложь;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ИнформационаяЗадача")Тогда 
			Элементы.ГруппаШапкаИнформационаяЗадача.Видимость 	= Истина;
			ЭтаФорма.Заголовок 								= "Создать задачу информационую задачу";
			ЗаполнятьУникальныйИдентификатор 				= Ложь;
			ИспользоватьОтображениеКакЗадачи 				= Истина;
			КодУжеУпартнера					 				= Ложь;
		
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьОтПартнера") Тогда
			ЭтаФорма.Заголовок 								= "Создать задачу Забрать у партнера";
			Элементы.ГруппаШапкаЗабратьУПартнера.Видимость 	= Истина;
			ЗаполнятьУникальныйИдентификатор 				= Истина;
			ИспользоватьОтображениеКакЗадачи				= Ложь;
			КодУжеУпартнера					 				= Ложь;
		
		
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера")	Тогда 
			ЭтаФорма.Заголовок 								= "Создать задачу Возврат на сервис центр от партнера";
			Элементы.ГруппаШапкаВозвратНаСервисЦентр.Видимость 	= Истина;
			ЗаполнятьУникальныйИдентификатор 					= Ложь;
			ИспользоватьОтображениеКакЗадачи 					= Ложь;
			КодУжеУпартнера										= Истина;
			Элементы.ГруппаАСЦ.Видимость 						= Истина;
			Элементы.ГруппаПодвалТекстЗадачи.Видимость 			= Ложь;
			ТекстЗадачи		= "Возврат на сервис-центр от партнера";
			ЗаполнитьКонтактноеЛицо();
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика")	Тогда 
			ЭтаФорма.Заголовок 								= "Создать задачу Возврат на сервис центр через перервозчика";
			Элементы.ГруппаШапкаЗабратьУПартнера.Видимость 	= Истина;
			ЗаполнятьУникальныйИдентификатор 				= Истина;
			ИспользоватьОтображениеКакЗадачи				= Ложь;
			КодУжеУпартнера									= Истина;
			Элементы.ГруппаАСЦ.Видимость 					= Истина;
			ТекстЗадачи		= "Возврат на сервис-центр через перевозчика";
			ЗаполнитьКонтактноеЛицо();
		КонецЕсли;
		
		Если Параметры.КонтактноеЛицо<>Неопределено Тогда
			Модифицированность 		=	Ложь;
			КонтактноеЛицо			=	Параметры.КонтактноеЛицо;
			ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);
		КонецЕсли;

	КонецЕсли;	

	ПроверитьДоступностьАСЦ();

	
	ПроверитьДоступностьНаСозданияЗадачи();
	
  КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьАдресПартнераСкладаАбонента();
    ЗаполнитьАдресПартнераСкладаПолучателя();
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
		ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;
 КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ИнформационаяЗадача") Тогда 
		ВыбратьОтправителяИлиПолучателя("Отправитель", СтандартнаяОбработка);
	Иначе
		ВыбратьОтправителя("Отправитель", СтандартнаяОбработка);
	КонецЕсли;
	ЗаполнитьАдресПартнераСкладаАбонента();
	Если КодУжеУпартнера Тогда
		ЗаполнитьКонтактноеЛицо();
	КонецЕсли;
	
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
			ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;

	//ТипВозвратаТовара	 	= Неопределено;
	//ПричинаВозврата			= Неопределено;
	//Товары.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ИнформационаяЗадача") 
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьСоСклада") Тогда 
		ВыбратьОтправителяИлиПолучателя("Получатель", СтандартнаяОбработка);
	Иначе
		ВыбратьПолучателя("Получатель", СтандартнаяОбработка);
	КонецЕсли;
	ЗаполнитьАдресПартнераСкладаПолучателя();
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
		ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресПолучателяВыборНаКлиенте();
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
		ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресПолучателяВыборНаКлиенте();
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
		ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;
	
КонецПроцедуры
 &НаКлиенте
Процедура АдресОтправителяПредставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
  	АдресОтправителяВыборНаКлиенте();
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
		ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НачалоВыполненияПриИзменении(Элемент)
	ПроверкаДатыНаКлиенте();
	ВыполнитьРасчетДоставкиЗадачи();    
КонецПроцедуры

  
&НаКлиенте
Процедура АдресОтправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
  	АдресОтправителяВыборНаКлиенте();
	Если Не ВроверитьВозможностьРасчетаДоставки() Тогда
		ВыполнитьРасчетДоставкиЗадачи();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	Маршрут 						= Неопределено;
	МаршрутПредставление		 	= Неопределено;
	ТранзитныйСклад 			 	= Неопределено;
	ТранзитныйСкладПредставление 	= Неопределено;
	МаршрутТранзит				 	= Неопределено;
	МаршрутТранзитПредставление  	= Неопределено;
	АдресОтправителя			 	= Неопределено;
	АдресОтправителяПредставления 	= Неопределено;
	КонтактноеЛицо					= Неопределено;
	ТипВозвратаТовара				= Неопределено;
	ПричинаВозврата					= Неопределено;
	Товары.Очистить();	
	ПроверитьДоступностьНаСозданияЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	Маршрут 					 = Неопределено;
	МаршрутПредставление		 = Неопределено;
	ТранзитныйСклад 			 = Неопределено;
	ТранзитныйСкладПредставление = Неопределено;
	МаршрутТранзит				 = Неопределено;
	МаршрутТранзитПредставление  = Неопределено;
	АдресДоставки				 = Неопределено;
	АдресДоставкиПредставление	 = Неопределено;
	ПроверитьДоступностьНаСозданияЗадачи();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовГруппыАСЦ
&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо, щоб отправитель был партнером'"),,, "Отправитель");
		Возврат;
	КонецЕсли;
	Если Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика") Тогда
		Результат = ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора");
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
	    КонтактноеЛицо 				  	= Результат;
		ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);
		Возврат;
	Иначе
		Результат 	  = СформироватьСписокКонтактноеЛиц();
		Если Результат <>Неопределено Тогда
			ЭлементСписка = Результат.ВыбратьЭлемент(НСтр("ru='Выберите контактное лицо.'"));
			Если ЭлементСписка <> Неопределено Тогда
				КонтактноеЛицо 				= ЭлементСписка.Значение;
			    ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	

КонецПроцедуры

&НаКлиенте
Процедура ПричинаВозвратаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	Если ТипВозвратаТовара = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо указать тип возврата'"),,, "ТипВозвратаТовара");
		Возврат;
	КонецЕсли;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора 	  = СформироватьСписокПричинВозвратаНаСервере(СписокВыбора);
	Если СписокВыбора <>Неопределено Тогда
		ЭлементСписка = СписокВыбора.ВыбратьЭлемент(НСтр("ru='Укажите причину возврата.'"));
		Если ЭлементСписка <> Неопределено Тогда
			ПричинаВозврата = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОткрытие(Элемент, СтандартнаяОбработка)
	ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);	
КонецПроцедуры


&НаКлиенте
Процедура ТипВозвратаТовараПриИзменении(Элемент)
	ПроверитьТипВозвратаТовара();
КонецПроцедуры

&НаКлиенте
Процедура КодУжеУпартнераПриИзменении(Элемент)
	ПроверитьДоступностьАСЦ();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Если  НЕ ТекущиеДанные.СерийныеНомераНоменклатуры.Пустая() Тогда
			ТекущиеДанные.Количество = 1;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерийныеНомераНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СерийныйНомер 		= 	ВыбранноеЗначение;
	Номенклатура		=   Элементы.Товары.ТекущиеДанные.Номенклатура;
	Отказ				=	ПроверитьНаУникальностьЗначения(Номенклатура,СерийныйНомер,0);
	Если Отказ Тогда
	    ВыбранноеЗначение	=	Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Таблица товары серийный номер не уникален.'"),,,"ТоварыСерийныеНомераНоменклатуры" );

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПрямуюЗадачу(Команда)
	
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли;

	Отказ 		= Ложь;
	Результат   = СоздатьЗадачуНаМаршрут(Отказ);
	
	Если Не Отказ Тогда
		Оповестить("ОбновитьСписокЗадачНаМаршрут");
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТранзитнуюЗадачу(Команда)
	Если ПроверитьЗаполнениеРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ 		= Ложь;
	Результат   = СоздатьТранзитнуюЗадачуНаМаршрут(Отказ);
	
	Если Не Отказ Тогда
		Оповестить("ОбновитьСписокЗадачНаМаршрут");
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПеревозчиков(СписокВыбора)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
							|	Партнер КАК Партнер,
							|	Партнер.Наименование КАК Наименование
							|ИЗ
							|	РегистрСведений.ПартнерыСегмента
							|ГДЕ
							|	Сегмент = &Сегмент
							|
							|УПОРЯДОЧИТЬ ПО
							|	Партнер.Наименование");
					
	Запрос.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("b837dc86-07b1-11e2-9d4d-001e673c80fc")));
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Партнер,Выборка.Наименование);
	КонецЦикла;	
	
 	Возврат СписокВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый СписокЗначений;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	Ссылка КАК Значение,
	             	  |	Наименование КАК Представление
	             	  |ИЗ
	             	  |	Справочник.Склады
					  |ГДЕ
					  |	НЕ ПометкаУдаления
					  |	И НЕ ЭтоГруппа
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Представление";
					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Выборка.Значение, Выборка.Представление);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПартнеров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый СписокЗначений;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	Партнеры.Ссылка КАК Значение,
	             	  |	Партнеры.Наименование КАК Представление
	             	  |ИЗ
	             	  |	Справочник.Партнеры КАК Партнеры
	             	  |ГДЕ
	             	  |	НЕ Партнеры.ПометкаУдаления
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Представление";
					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Выборка.Значение, Выборка.Представление);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОтправителяИлиПолучателя(ИмяРеквизита, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Склад", "Склад");
	СписокВыбора.Добавить("Партнер", "Партнер");
	
	ПолучитьСписокПеревозчиков(СписокВыбора);
	
	Результат = СписокВыбора.ВыбратьЭлемент("Выберите склад или партнера.");
	
	Если Результат = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если Результат.Значение = "Партнер" Тогда 
		Результат = ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора");
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
	    ЭтаФорма[ИмяРеквизита] 				   = Результат;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Строка(Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Склад" Тогда
		СписокВыбораСклада 	= ПолучитьСписокСкладов();
		Результат			= СписокВыбораСклада.ВыбратьЭлемент("Выберите склад.");
		Если Результат = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		ЭтаФорма[ИмяРеквизита]				   = Результат.Значение;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Представление;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Значение = "Склад" И НЕ Результат.Значение = "Партнер" Тогда 
		ЭтаФорма[ИмяРеквизита]     		       = Результат.Значение;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Значение;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВыбратьОтправителяИлиПолучателя()

&НаКлиенте
Процедура ВыбратьОтправителя(ИмяРеквизита, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьСоСклада") Тогда 
		СписокВыбора	= ПолучитьСписокСкладов();
		Результат 		= СписокВыбора.ВыбратьЭлемент("Выберите склад.");
		Если Результат = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		ЭтаФорма[ИмяРеквизита]     		       = Результат.Значение;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Значение;
		Возврат;

	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьОтПартнера") Тогда
		СписокВыбора.Добавить("Партнер", "Партнер");
		ПолучитьСписокПеревозчиков(СписокВыбора);
		Результат = СписокВыбора.ВыбратьЭлемент("Выберите  партнера или перевозчика.");
		
		Если Результат = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		
		Если Результат.Значение = "Партнер" Тогда 
			Результат = ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора");
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;
		    ЭтаФорма[ИмяРеквизита] 				   = Результат;
			ЭтаФорма[ИмяРеквизита+"Представление"] = Строка(Результат);
			Возврат;
		КонецЕсли;
		
		Если НЕ Результат.Значение = "Склад" И НЕ Результат.Значение = "Партнер" Тогда 
			ЭтаФорма[ИмяРеквизита]     		       = Результат.Значение;
			ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Значение;
			Возврат;
		КонецЕсли;

	
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера") Тогда 
		Результат 		= ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора");
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЭтаФорма[ИмяРеквизита] 				   = Результат;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Строка(Результат);
		Возврат;

	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика") Тогда 
		ПолучитьСписокПеревозчиков(СписокВыбора);
		Результат = СписокВыбора.ВыбратьЭлемент("Выберите  партнера или перевозчика.");
		
		Если Результат = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		
		ЭтаФорма[ИмяРеквизита]     		       = Результат.Значение;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Значение;
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры // ВыбратьОтправителяИлиПолучателя()

&НаКлиенте
Процедура ВыбратьПолучателя(ИмяРеквизита, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьОтПартнера") 
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера")  Тогда 
		
		СписокВыбора	= ПолучитьСписокСкладов();
		Результат 		= СписокВыбора.ВыбратьЭлемент("Выберите склад.");
		Если Результат = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		ЭтаФорма[ИмяРеквизита]     		       = Результат.Значение;
		ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Значение;
		Возврат;

	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ЗабратьСоСклада") Тогда     
		СписокВыбора.Добавить("Партнер", "Партнер");
		ПолучитьСписокПеревозчиков(СписокВыбора);
		Результат = СписокВыбора.ВыбратьЭлемент("Выберите  партнера или перевозчика.");
		
		Если Результат = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		
		Если Результат.Значение = "Партнер" Тогда 
			Результат = ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора");
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;
		    ЭтаФорма[ИмяРеквизита] 				   = Результат;
			ЭтаФорма[ИмяРеквизита+"Представление"] = Строка(Результат);
			Возврат;
		КонецЕсли;
		
		Если НЕ Результат.Значение = "Склад" И НЕ Результат.Значение = "Партнер" Тогда 
			ЭтаФорма[ИмяРеквизита]     		       = Результат.Значение;
			ЭтаФорма[ИмяРеквизита+"Представление"] = Результат.Значение;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ВыбратьОтправителяИлиПолучателя()

&НаСервере
Процедура ЗаполнитьАдресПартнераСкладаАбонента()
	
	АдресОтправителя				 =	Справочники.МестаДоставки.ПолучитьАдресАбонента(Отправитель);
	АдресОтправителяПредставления	 =	АдресОтправителя;

	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Склады") Тогда
	   Элементы.АдресОтправителяПредставления.Доступность  			= Ложь;
	   Элементы.АдресОтправителяПредставления.КнопкаВыбора 			= Ложь;
	 
    Иначе
	   Элементы.АдресОтправителяПредставления.Доступность 			= Истина;
	   Элементы.АдресОтправителяПредставления.КнопкаВыбора 			= Истина;
		   
	КонецЕсли;
КонецПроцедуры // ЗаполнитьАдресПартнераСклада()

&НаСервере
Процедура ЗаполнитьАдресПартнераСкладаПолучателя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресДоставки				 = Справочники.МестаДоставки.ПолучитьАдресАбонента(Получатель); 
	АдресДоставкиПредставление	 = Строка(АдресДоставки);
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Склады") Тогда
	   Элементы.АдресДоставкиПредставление.Доступность 				= 	Ложь;
	   Элементы.АдресДоставкиПредставление.КнопкаВыбора				= 	Ложь;
	   
	Иначе
	   Элементы.АдресДоставкиПредставление.Доступность 				= Истина;
	   Элементы.АдресДоставкиПредставление.КнопкаВыбора				= Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАдресПартнераСклада()

 &НаКлиенте
Процедура АдресОтправителяВыборНаКлиенте()
  
  Если НЕ ТипЗнч(Отправитель) =  Тип("СправочникСсылка.Склады") Тогда
	 	ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Адрес", 		 АдресОтправителя);
		ПараметрыФормы.Вставить("ВыводитьУлицу", Истина);
		АдресОтправителя				 = ОткрытьФормуМодально("Справочник.ВариантыМаршрутов.Форма.ПодборИзКлассификатора", ПараметрыФормы);
		АдресОтправителяПредставления	 = Строка(АдресОтправителя);
  КонецЕсли;
  
КонецПроцедуры // ()

 &НаКлиенте
  Процедура АдресПолучателяВыборНаКлиенте()
  
  Если НЕ ТипЗнч(Получатель) =  Тип("СправочникСсылка.Склады") Тогда
	 	ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Адрес", 		 АдресДоставки);
		ПараметрыФормы.Вставить("ВыводитьУлицу", Истина);
		АдресДоставки 				= ОткрытьФормуМодально("Справочник.ВариантыМаршрутов.Форма.ПодборИзКлассификатора", ПараметрыФормы);
		АдресДоставкиПредставление 	= Строка(АдресДоставки);

  КонецЕсли;
  
  КонецПроцедуры // ()

  &НаКлиенте
Процедура ПроверкаДатыНаКлиенте()
		 
 	Если НачалоВыполнения<ТДДата Тогда
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Начало выполнения задачи менше текущей даты'"),,, "НачалоВыполнения");
	КонецЕсли; 
КонецПроцедуры
 

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	Результат = Ложь;
	
	Если ПустаяСтрока(ОтправительПредставление) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить отправителя'"),,, "ОтправительПредставление");
		Результат = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ПолучательПредставление) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить получатель'"),,, "ПолучательПредставление");
		Результат = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗадачи) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить текст задачи'"),,, "ТекстЗадачи");
		Результат = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") И ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		Результат = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Доставка между двома партнерамы невозможна.'"));
	КонецЕсли;
	
	Если ПустаяСтрока(АдресДоставки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить адрес партнера или склада в карточке получателя.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если КодУжеУпартнера И ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ПроверитьСегментПартнера()  Тогда
		
	
				Если КонтактноеЛицо.Пустая()  Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле обязательно к заполнению.'"),,, "КонтактноеЛицо");
					Результат = Истина;
				КонецЕсли;

				ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);

				Если ПустаяСтрока(ДанныеОПочтеКонтактногоЛица) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить адрес електронной почти контактного лица в партнера'"),,, "КонтактноеЛицо");
					Результат = Истина;
				КонецЕсли;
				
				Если ПустаяСтрока(ДанныеОТелефонКонтактногоЛица) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить телефон контактного лица в партнера'"),,, "КонтактноеЛицо");
					Результат = Истина;
				КонецЕсли;
				
				Если ПустаяСтрока(НомерЗаявки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле обязательно к заполнению.'"),,, "НомерЗаявки");
					Результат = Истина;
				КонецЕсли;
							
		
		КонецЕсли;

		Если ТипВозвратаТовара.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле обязательно к заполнению.'"),,, "ТипВозвратаТовара");
			Результат = Истина;
		КонецЕсли;
		
		Если ПричинаВозврата.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле обязательно к заполнению.'"),,, "ПричинаВозврата");
			Результат = Истина;
		КонецЕсли; 
		
		Если ДокументОснования =Неопределено Тогда
			    Если ТипВозвратаТовара = ПредопределенноеЗначение("Перечисление.ГНАТ_ТипВозвратаТовара.ГарантийныйРемонтНеАСЦ") Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Тип возврата товара ""Гарантийный ремонт ( КТС не авторизован СЦ )"" можно использовать только для задач созданных на основании Реализации'"),,, "ТипВозвратаТовара");
						Результат = Истина;
				КонецЕсли;
					
				Если  ТипВозвратаТовара = ПредопределенноеЗначение("Перечисление.ГНАТ_ТипВозвратаТовара.ВозвращениеНеРаспакованногоТовара") Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Тип возврата возврата ""Возвращение не распакованного товара"" можно использовать только для задач созданных на основании Реализации'"),,, "ТипВозвратаТовара");
						Результат = Истина;
				КонецЕсли;
					
				Если  ТипВозвратаТовара = ПредопределенноеЗначение("Перечисление.ГНАТ_ТипВозвратаТовара.ВозвращениеРаспакованногоТовара")Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Тип возврата возврата ""Возвращение распакованного товара"" можно использовать только для задач созданных на основании Реализации'"),,, "ТипВозвратаТовара");
						Результат = Истина;
				КонецЕсли;
				
		КонецЕсли;

		
		
		Если Товары.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Таблица товары не заполнена.'"),,, );
			Результат = Истина;
		КонецЕсли;
		
		Элемент = 0;
		Пока Элемент <= Товары.Количество()-1 Цикл
			Строка = Товары[Элемент];
			Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					ТекстОшибки = НСтр("ru='Номенклатура не может быть пустой!'");
				    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].Номенклатура",,);	
					Результат = Истина;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
					ТекстОшибки = НСтр("ru='Количество не может быть пустым!'");
				    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].Количество",,);	
					Результат = Истина;
			КонецЕсли;
							
			Номенклатура		=   Строка.Номенклатура;
			СерийныйНомер 		= 	Строка.СерийныеНомераНоменклатуры;
			ИспользоватьСерийныеНомера = ПолучитьИспользоватьСерийныеНомера(Номенклатура);
			Если ИспользоватьСерийныеНомера И Не ЗначениеЗаполнено(Строка.СерийныеНомераНоменклатуры) Тогда
					ТекстОшибки = НСтр("ru='Поле СерийныеНомера не может быть пустым!'");
				    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].СерийныеНомераНоменклатуры",,);	
					Результат = Истина;
			КонецЕсли;
			
			ВыбранноеЗначение	=	ПроверитьНаУникальностьЗначения(Номенклатура,СерийныйНомер,1);
			Если ВыбранноеЗначение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Таблица товары серийный номер не уникален.'"),,, );
				Результат  = Истина;
			КонецЕсли;
			
			
			
			Если Не ЗначениеЗаполнено(Строка.ДатаЗаявки) Тогда
					ТекстОшибки = НСтр("ru='ДатаЗаявки не может быть пустой!'");
				    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].ДатаЗаявки",,);	
					Результат = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(Строка.Комплектация) Тогда
					ТекстОшибки = НСтр("ru='Комплектация не может быть пустой!'");
				    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].Комплектация",,);	
					Результат = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(Строка.Дефект) Тогда
					ТекстОшибки = НСтр("ru='Дефект не может быть пустой!'");
				    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].Дефект",,);	
					Результат = Истина;
			КонецЕсли;
				
			Если ДокументОснования <>Неопределено Тогда
				Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					
				    Если ПроверитьВыборНоменклатуриИзРТУ(Номенклатура) Тогда
						ТекстОшибки = НСтр("ru='Данная номенклатра  не найдена в реализации!'");
					    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,  "Товары["+Элемент+"].Номенклатура",,);	
						Результат = Истина;
					КонецЕсли; 	
				КонецЕсли;
			КонецЕсли;
	
			
			Элемент = Элемент+1;
		КонецЦикла;
	КонецЕсли;

					
	Возврат Результат;
	
КонецФункции // ПроверитьЗаполнениеРеквизитов()

// проверяем на использования серийных номеров номенклатуры
//
// Параметры:
//  Номенклатура  - СправочникСсылка.Номенклатуры - ссылка на позицию номенклатуры табличной части Товары
//
// Возвращаемое значение:
//   Булево   - Истина - если по данной номенклатуре введется учет по серийным номерам
//
&НаСервере
Функция ПолучитьИспользоватьСерийныеНомера(Номенклатура)

Возврат Номенклатура.ИспользоватьСерийныеНомера;	

КонецФункции // ПолучитьИспользоватьСерийныеНомера(Номенклатура)()

// Проверяем возможность расчета маршурута, все ли нужные поля заполненны
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Булево   - Истина -если все нужные поля заполнены
//
&НаКлиенте
Функция ВроверитьВозможностьРасчетаДоставки()

	Результат = Ложь;
	
	
	Если ПустаяСтрока(ОтправительПредставление) ИЛИ ПустаяСтрока(ПолучательПредставление) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") И ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		Результат = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Доставка между двома партнерамы невозможна.'"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ВроверитьВозможностьРасчетаДоставки()
 
// Расчитиваем маршрут доставки
//
// Параметры:
//  НЕТ
//
&НаСервере
Процедура ВыполнитьРасчетДоставкиЗадачи()
	УстановитьПривилегированныйРежим(Истина);
	ДанныеРасчета 	= ПолучитьДанныеДляРасчетаМаршрута();
	РезультатПакета = Справочники.МестаДоставки.ВыполнитьРасчетДоставки(ДанныеРасчета);
	
	ТранзитныйСклад 			 = Неопределено;
	ТранзитныйСкладПредставление = Неопределено;
	
	МаршрутТранзит				 = Неопределено;
	МаршрутТранзитПредставление  = Неопределено;
	
	Маршрут				 		 = Неопределено;
	МаршрутПредставление 		 = Неопределено;
	СтрокаМаршрут		 = НСтр("ru = ""Задача по маршруту:""");
	СтрокаДатаВыезда	 = НСтр("ru = ""; Дата выезда:""");
	СтрокаМаршрутТранзит = НСтр("ru = ""Транзитний маршрут:""");
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Выборка 		= РезультатПакета[4].Выбрать();
		ВыборкаТранзит  = РезультатПакета[7].Выбрать();
				
		Если Выборка.Следующий() Тогда		
			Маршрут 			 = Выборка.Маршрут;
			МаршрутПредставление = СтрокаМаршрут + Выборка.МаршрутПредставление;
		Иначе
			Маршрут				 = Неопределено;
			МаршрутПредставление = Неопределено;
		КонецЕсли;
		
		Если ВыборкаТранзит.Следующий() Тогда
			
			ТранзитныйСклад			     = ВыборкаТранзит.ТранзитныйСклад;
			ТранзитныйСкладПредставление = ВыборкаТранзит.ТранзитныйСкладПредставление;
			МаршрутТранзит				 = ВыборкаТранзит.МаршрутТранзит;
			СтрокаМаршрутТранзит		 = СтрокаМаршрутТранзит + ВыборкаТранзит.МаршрутКПолучателю.Наименование;
			//+ СтрокаДатаВыезда + ВыборкаТранзит.ДатаВремяВыездаОтОтправителя;
			МаршрутТранзитПредставление	 = СтрокаМаршрут +  ВыборкаТранзит.МаршрутТранзитПредставление+ ";"+Символы.ПС + СтрокаМаршрутТранзит;
		Иначе

		КонецЕсли;
	
	Иначе
		
		Выборка 		= РезультатПакета[4].Выбрать();
		ВыборкаТранзит  = РезультатПакета[10].Выбрать();
				
		Если Выборка.Следующий() Тогда
			Маршрут 			 = Выборка.Маршрут;
			МаршрутПредставление = СтрокаМаршрут + Выборка.МаршрутПредсталение + СтрокаДатаВыезда + Выборка.ДатаВремяВыезда;
		КонецЕсли;
		
		Если ВыборкаТранзит.Следующий() Тогда
			
			ТранзитныйСклад			     = ВыборкаТранзит.ТранзитныйСклад;
			ТранзитныйСкладПредставление = ВыборкаТранзит.ТранзитныйСкладПредставление;
			МаршрутТранзит				 = ВыборкаТранзит.МаршрутТранзит;
			СтрокаМаршрутТранзит		 = СтрокаМаршрутТранзит + ВыборкаТранзит.МаршрутТранзитПредставление;
			//+ СтрокаДатаВыезда + ВыборкаТранзит.ДатаВремяВыездаОтОтправителя;
			СтрокаМаршрутКПолучателю	 = СтрокаМаршрут + ВыборкаТранзит.МаршрутКПолучателю.Наименование + СтрокаДатаВыезда + ВыборкаТранзит.ДатаВремяВыездаКПолучателю;	
			МаршрутТранзитПредставление  = СтрокаМаршрутТранзит + Символы.ПС + СтрокаМаршрутКПолучателю;
		
		КонецЕсли;
	КонецЕсли;
	ПроверитьДоступностьНаСозданияЗадачи();
		
КонецПроцедуры

// Получаем структуру данных для выпилнения расчета маршрута//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Структура   - структура данных для расчета маршрута
//
&НаСервере
Функция ПолучитьДанныеДляРасчетаМаршрута()
	ДанныеРасчета = Новый Структура;
	ДанныеРасчета.Вставить("Получатель",		Получатель);
	ДанныеРасчета.Вставить("АдресДоставки",		АдресДоставки);
	ДанныеРасчета.Вставить("Отправитель",		Отправитель);
	ДанныеРасчета.Вставить("АдресОтправителя",	АдресОтправителя);
	ДанныеРасчета.Вставить("НачалоВыполнения",	НачалоВыполнения);
	Возврат ДанныеРасчета
КонецФункции // ()


// Создание задач на маршрут
// Параметры:
//  Отказ  - булево - признак отказа записи создания задачи
//
// Возвращаемое значение:
//    СправочникСсылка.МестаДоставки - ссылка на справочник Места Доставки,в котором записались данные задачи
&НаСервере
Функция СоздатьЗадачуНаМаршрут(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Если Маршрут.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка при автоматической установке маршрута, сообщите на 777'"),,, "МаршрутПредставление");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Операция = Перечисления.КТС_ОперацииМеста.ЗабратьОтПартнера
		Или Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика Тогда
		СообщенияВодителю 		= НСтр("ru='Водій, наклей свій QR-код'");
		ТекстЗадачи			 	= СообщенияВодителю + Символы.ПС + ТекстЗадачи;
	КонецЕсли;

	
	Если НачалоВыполнения<ТДДата Тогда
		 НачалоВыполнения = ТекущаяДата();
	КонецЕсли; 
	
	ТранзитныйСклад = Справочники.Склады.ПустаяСсылка();
	
	ПараметрыМеста 	= Новый Структура;
	ПараметрыМеста.Вставить("НачалоВыполненияЗадачи",			НачалоВыполнения);
	ПараметрыМеста.Вставить("Отправитель", 						Отправитель);
	ПараметрыМеста.Вставить("АдресОтправителя", 				АдресОтправителя);
	ПараметрыМеста.Вставить("Владелец", 						Получатель);
	ПараметрыМеста.Вставить("АдресДоставки", 					АдресДоставки);
	ПараметрыМеста.Вставить("ВариантМаршрута", 					Маршрут);
	ПараметрыМеста.Вставить("ТекстЗадачи", 						ТекстЗадачи);
	ПараметрыМеста.Вставить("Транзит", 							Ложь);
	ПараметрыМеста.Вставить("ТранзитныйСклад", 					ТранзитныйСклад);
	ПараметрыМеста.Вставить("КодУжеУпартнера", 					КодУжеУпартнера);
	ПараметрыМеста.Вставить("ЗаполнятьУникальныйИдентификатор",	ЗаполнятьУникальныйИдентификатор);
	ПараметрыМеста.Вставить("ИспользоватьОтображениеКакЗадачи",	ИспользоватьОтображениеКакЗадачи);
	ПараметрыМеста.Вставить("КонтактноеЛицо", 					КонтактноеЛицо);
	ПараметрыМеста.Вставить("ТипВозвратаТовара", 				ТипВозвратаТовара);
	ПараметрыМеста.Вставить("ПричинаВозврата", 					ПричинаВозврата);
	ПараметрыМеста.Вставить("Товары",							Товары);
	ПараметрыМеста.Вставить("КонтактноеЛицо", 					КонтактноеЛицо);
	ПараметрыМеста.Вставить("НомерЗаявки", 						НомерЗаявки);
	ПараметрыМеста.Вставить("Операция", 						Операция);
	ПараметрыМеста.Вставить("ДокументОснования", 				ДокументОснования);


	Возврат Справочники.МестаДоставки.СоздатьЗадачу(ПараметрыМеста);
		
КонецФункции // СоздатьЗадачуНаМаршрут()

// Создание транзитной задачи на маршрут
// Параметры:
//  Отказ  - булево - признак отказа записи создания задачи
//
// Возвращаемое значение:
//    СправочникСсылка.МестаДоставки - ссылка на справочник Места Доставки,в котором записались данные задачи
&НаСервере
Функция СоздатьТранзитнуюЗадачуНаМаршрут(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	

	Если МаршрутТранзит.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка при автоматической установке маршрута, сообщите на 777'"),,, "МаршрутПредставление");
		Отказ = Истина;
	КонецЕсли;
	
	Если ТранзитныйСклад.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка при автоматической установке маршрута, сообщите на 777'"),,, "МаршрутПредставление");
		Отказ = Истина;
	КонецЕсли;
	

	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Операция = Перечисления.КТС_ОперацииМеста.ЗабратьОтПартнера
		Или Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика Тогда
		СообщенияВодителю 		= НСтр("ru='Водій, наклей свій QR-код'");
		ТекстЗадачи			 	= СообщенияВодителю + Символы.ПС + ТекстЗадачи;
	КонецЕсли;

	ПараметрыМеста = Новый Структура;
	ПараметрыМеста.Вставить("НачалоВыполненияЗадачи",			НачалоВыполнения);
	ПараметрыМеста.Вставить("Отправитель", 						Отправитель);
	ПараметрыМеста.Вставить("АдресОтправителя", 				АдресОтправителя);
	ПараметрыМеста.Вставить("Владелец", 						Получатель);
	ПараметрыМеста.Вставить("ТранзитныйСклад", 					ТранзитныйСклад);
	ПараметрыМеста.Вставить("АдресДоставки", 					АдресДоставки);
	ПараметрыМеста.Вставить("ВариантМаршрута", 					МаршрутТранзит);
	ПараметрыМеста.Вставить("ТекстЗадачи", 						ТекстЗадачи);
	ПараметрыМеста.Вставить("Транзит", 							Истина);
	ПараметрыМеста.Вставить("ИспользоватьОтображениеКакЗадачи",	ИспользоватьОтображениеКакЗадачи);
	ПараметрыМеста.Вставить("КодУжеУпартнера", 					КодУжеУпартнера);
	ПараметрыМеста.Вставить("ЗаполнятьУникальныйИдентификатор",	ЗаполнятьУникальныйИдентификатор);
	ПараметрыМеста.Вставить("ТипВозвратаТовара", 				ТипВозвратаТовара);
	ПараметрыМеста.Вставить("ПричинаВозврата", 					ПричинаВозврата);
	ПараметрыМеста.Вставить("КонтактноеЛицо", 					КонтактноеЛицо);
	ПараметрыМеста.Вставить("Товары",							Товары);
	ПараметрыМеста.Вставить("НомерЗаявки", 						НомерЗаявки);
	ПараметрыМеста.Вставить("Операция", 						Операция);
	ПараметрыМеста.Вставить("ДокументОснования", 				ДокументОснования);

	Возврат Справочники.МестаДоставки.СоздатьЗадачу(ПараметрыМеста);

КонецФункции // СоздатьТранзитнуюЗадачуНаМаршрут()
 
#Область АСЦ

// Проверяем пользователя входит ли он в группу доступа оптового отдела
//
// Параметры:
// НЕТ
//
// Возвращаемое значение:
//   Булево   - Истина, если работник оптового отдела
//
&НаСервере
Функция ПроверитьПользователяЯвлятсяРаботникомОптовогоОтдела()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиПользователяОптовогоОтдела();
	Запрос.УстановитьПараметр("ГруппаДоступа", Справочники.ГруппыДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("a5aacfd7-d439-11e3-80cb-001e676b0175")));  //КТС_РедактированиеQRКодаМеста
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
Возврат  НЕ Запрос.Выполнить().Пустой()
КонецФункции // ПроверитьПользователяЯвлятсяРаботникомОптовогоОтдела()

// Получаем текст запроса пользователя в группе доступа оптового отдела
//
// Параметры:
//  <НЕТ
//
// Возвращаемое значение:
//  Строка   - текст запроса
//
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПроверкиПользователяОптовогоОтдела()
ТекстЗапроса = "
			   |ВЫБРАТЬ
               |	ГруппыДоступаПользователи.Ссылка
               |ИЗ
               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
               |ГДЕ
               |	ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа
               |	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПроверкиПользователяОптовогоОтдела()

// Проверяем заполнения полей маршрута,если незаполнени, тогда сделать не доступними поля задачи на маршрут
//
// Параметры:
// НЕТ
&НаСервере
Процедура ПроверитьДоступностьНаСозданияЗадачи()
	Если ПустаяСтрока(МаршрутПредставление) Тогда
		Элементы.СоздатьПрямуюЗадачу.Доступность = Ложь;
	Иначе 
		Элементы.СоздатьПрямуюЗадачу.Доступность = Истина;
	КонецЕсли;
	Если ПустаяСтрока(МаршрутТранзитПредставление) Тогда
		Элементы.СоздатьТранзитнуюЗадачу.Доступность = Ложь;
	Иначе
		Элементы.СоздатьТранзитнуюЗадачу.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры // 

// Заполнения контактного лица отправителя 
//
// Параметры:
// Абонент  - СправочникСсылка.Склады	- выбраный склад отправителя
//			- СправочникСсылка.Партнер 	- выбраный партнер отправителя
//
&НаСервере
Процедура ЗаполнитьКонтактноеЛицо()
	УстановитьПривилегированныйРежим(Истина);
	ПроверитьДоступностьАСЦ();
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Склады") Тогда
		КонтактноеЛицо		= Неопределено;
		Возврат;
	КонецЕсли;
	Если Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера Тогда
		Результат 			=	ПроверитьСегментПартнера();
		Если Результат Тогда
			Запрос 				= 	Новый Запрос;
			Запрос.Текст 		= 	ПолучитьТекстЗапросаКонтактныхЛиц();
			Запрос.УстановитьПараметр("Владелец", Отправитель);
			РезультатЗапроса	= 	Запрос.Выполнить();
			ТаблЗнч				= 	РезультатЗапроса.Выгрузить();
			Если ТаблЗнч.Количество()=1 Тогда
				КонтактноеЛицо      = ТаблЗнч[0].КонтактныеЛица;
			Иначе
				КонтактноеЛицо		= Неопределено;
			КонецЕсли;
			Элементы.КонтактноеЛицо.Доступность = Истина;

			
			
		Иначе 
			КонтактноеЛицо 						= Неопределено;
			Элементы.КонтактноеЛицо.Доступность = Ложь;
		КонецЕсли; 
		ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКонтактноеЛицо()

// Получить список контактных лиц партнера
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  Строка   - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаКонтактныхЛиц()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК КонтактныеЛица
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	               |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	Возврат  ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаКонтактныхЛиц()

// Формируем список контактныхлиц партнера (Отправителя)
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  СписокЗначения   - список значения для вибора пользователю контактных лиц
//
&НаСервере
Функция СформироватьСписокКонтактноеЛиц()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый СписокЗначений;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаКонтактныхЛиц();
	Запрос.УстановитьПараметр("Владелец", Отправитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() И  Параметры.Свойство("АвтоТест") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить контактное лицо в партнера'"),,, "Отправитель");
		Возврат Результат;	
	КонецЕсли;
	ТабЗнч = РезультатЗапроса.Выгрузить();
	
	Результат.ЗагрузитьЗначения(ТабЗнч.ВыгрузитьКолонку("КонтактныеЛица"));
	
	Возврат Результат;
	
КонецФункции // СформироватьСписокДоступныхМаршрутов()

//Проверяем доступность полей группи АСЦ для редактирования 
//
// Параметры:
//  НЕТ
&НаСервере
Процедура ПроверитьДоступностьАСЦ()
	Если ТипЗнч(Отправитель)=Тип("СправочникСсылка.Партнеры")  Тогда
		Элементы.ГруппаАСЦ.Доступность = Истина;
	Иначе
		Элементы.ГруппаАСЦ.Доступность = Ложь;	
	КонецЕсли; 
	
	Если Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика Тогда
		Элементы.ГруппаПартнерКонтактноеЛицо.Доступность = Ложь;
	КонецЕсли;


КонецПроцедуры // ЗаполнитьДоступностьАСЦ()

//Проверяем ТипВозвратаТовара полей группи АСЦ для редактирования 
//
// Параметры:
//  НЕТ
&НаСервере
Процедура ПроверитьТипВозвратаТовара()
	
	Если ТипВозвратаТовара = Перечисления.ГНАТ_ТипВозвратаТовара.ПлатныйРемонт
		ИЛИ ТипВозвратаТовара = Перечисления.ГНАТ_ТипВозвратаТовара.ГарантийныйРемонтАСЦ
		ИЛИ ТипВозвратаТовара = Перечисления.ГНАТ_ТипВозвратаТовара.ГарантийныйРемонтНеАСЦ
	Тогда
		ПричинаВозврата = Перечисления.ГНАТ_ПричинаВозврата.РемонтТовара;
		Элементы.ПричинаВозврата.Доступность = Ложь;
	Иначе 
		ПричинаВозврата = Неопределено;
		Элементы.ПричинаВозврата.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры // ПроверитьТипВозвратаТовара()

// Формируем список перечислений причин возврата относительно типу возврата
//
// Параметры:
//  СписокВыбора  - СписокЗначения - список значения для заполения списка вибора
//
// Возвращаемое значение:
//  СписокЗначения   - список значения для вибора пользователю причини возврата товара
//
&НаСервере
Функция СформироватьСписокПричинВозвратаНаСервере(СписокВыбора)
	Если ТипВозвратаТовара = Перечисления.ГНАТ_ТипВозвратаТовара.ВозвращениеНеРаспакованногоТовара
	ИЛИ ТипВозвратаТовара = Перечисления.ГНАТ_ТипВозвратаТовара.ВозвращениеРаспакованногоТовара Тогда
		СписокВыбора.Добавить(Перечисления.ГНАТ_ПричинаВозврата.АктЗачисления,"АктЗачисления");
		СписокВыбора.Добавить(Перечисления.ГНАТ_ПричинаВозврата.КлиентПартнераОтказалсяОтТовара,"КлиентПартнераОтказалсяОтТовара");
		СписокВыбора.Добавить(Перечисления.ГНАТ_ПричинаВозврата.Некондиция,"Некондиция, обнаружена к продаже товара");
		СписокВыбора.Добавить(Перечисления.ГНАТ_ПричинаВозврата.ДубльЗаказа,"ДубльЗаказа");
	Иначе
		СписокВыбора.Добавить(Перечисления.ГНАТ_ПричинаВозврата.РемонтТовара,"РемонтТовара");
	КонецЕсли;
	Возврат СписокВыбора;
КонецФункции // СформироватьСписокПричинВозвратаНаСервере(СписокВыбора)

//Получаем данные о контактном лице отправителя для проверки заполнения
//
// Параметры:
//  КонтактноеЛицо  - СправочникСсылка.КонтактныеЛицаПартнеров - контактное лицо отправителя
//
// Возвращаемое значение:
//   Структура   - структура данных об контактном лице для проверки заполнения
//
&НаСервере
Функция ПолучитьДанныеОбКонтактномЛице(Абонент)
	 УстановитьПривилегированныйРежим(Истина);
	 Данные	= Новый Структура;
	 Запрос = Новый Запрос;
	 
	 Запрос.Текст = ПолучитьТекстЗапросаДанныеКонтактногоЛица(Абонент);
	 Запрос.УстановитьПараметр("Абонент",Абонент);
		
	 Выборка = Запрос.Выполнить().Выбрать();
	 АдресАбонента 	= "";
	 Телефон		= "";	
	 Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		    АдресАбонента 	= АдресАбонента + Выборка.Представление +"; ";
		Иначе
			Телефон 		= Телефон + Выборка.Представление +"; ";
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("Телефон",Телефон);
	Данные.Вставить("АдресЭП",АдресАбонента);
	Возврат Данные; 
КонецФункции // ПолучитьДанныеОКотактномЛице(КонтактноеЛицо)()

// Получить текстзапроса данные о контактном лице отправителя
//
// Параметры:
// Абонент	- СправочникСсылка.Партнеры / СправочникСсылка.КонтактныеЛицаПартнеров - контактное лицо отправки товара
// Возвращаемое значение:
// Строка   - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаДанныеКонтактногоЛица(Абонент)
	Если  ТипЗнч(Абонент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТекстЗапроса="ВЫБРАТЬ
			|	Тип			   КАК  Тип,	 
			|	Представление  КАК  Представление
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	Тип,
			|	Представление
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация 
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
	Иначе
		ТекстЗапроса="ВЫБРАТЬ
			|	Тип			   КАК  Тип,	 
			|	Представление  КАК  Представление
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	Тип,
			|	Представление
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация 
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
	КонецЕсли;

	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаДанныеКонтактногоЛица()

// Проверить заполнения данных о контактном лице отправителя
//
// Параметры:
//  КонтактноеЛицо  - СправочникСсылка.КонтактныеЛицаПартнеров - контактное лицо отправителя
//
&НаСервере
Процедура ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо)

	Если КонтактноеЛицо =Неопределено Тогда
		ИнформацияОбКонтактномЛице = "";
		Возврат;	
	КонецЕсли; 
	
	ДанныеОКонтактномЛице		= ПолучитьДанныеОбКонтактномЛице(КонтактноеЛицо);
	НомерТелефонаКЛ		 = НСтр("ru='Номер телефона- %1'");
	ПочтаКонтактногоЛица = НСтр("ru='Е-mail - %1 '");		
	
	Если ДанныеОКонтактномЛице.Количество()>0 Тогда
		
		ДанныеОТелефонКонтактногоЛица 	=	ДанныеОКонтактномЛице.Телефон;
		ДанныеОПочтеКонтактногоЛица		=	ДанныеОКонтактномЛице.АдресЭП;


		Если ПустаяСтрока(ДанныеОТелефонКонтактногоЛица) Тогда
			Телефон = "-//-";
		Иначе
			Телефон =  ДанныеОТелефонКонтактногоЛица;
		КонецЕсли; 	
		
		Если ПустаяСтрока(ДанныеОПочтеКонтактногоЛица) Тогда
	    	АдресЭП = "-//-";
		Иначе
			АдресЭП =  ДанныеОПочтеКонтактногоЛица;
		КонецЕсли;
	Иначе 
		Телефон = "-//-";
		АдресЭП = "-//-";
	КонецЕсли;
	
	НомерТелефонаКЛ	 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НомерТелефонаКЛ, Телефон);
	ПочтаКонтактногоЛица	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПочтаКонтактногоЛица, АдресЭП);

	
	ИнформацияОбКонтактномЛице = НомерТелефонаКЛ + Символы.ПС + ПочтаКонтактногоЛица; 


КонецПроцедуры

// Получаем данные об задачи для заполнения полей
//
// Параметры:
//  МестоДоставки  - СправочникСсылка.МестаДоставки - место на основание которого создается задача
//
&НаСервере
Процедура ПолучитьСтруктуруДанных(МестоДоставки)
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьОтображениеКакЗадачи = МестоДоставки.ИспользоватьОтображениеКакЗадачи;
	ТекстЗадачи 					= МестоДоставки.ТекстЗадачи;
	КонтактноеЛицо			    = МестоДоставки.КонтактноеЛицо;
	ПроверитьЗаполненияИнформацииУКонтактногоЛица(КонтактноеЛицо);	
	НомерЗаявки                 = МестоДоставки.НомерЗаявки;
	ТипВозвратаТовара           = МестоДоставки.ТипВозвратаТовара;
	ПричинаВозврата            	= МестоДоставки.ПричинаВозврата;
	Товары.Загрузить(МестоДоставки.Товары.Выгрузить());


КонецПроцедуры // ПолучитьСтруктуруДанных()


//Проверить на уникальность сериыйний номер
//
// Параметры:
//  СерийныйНомер  - СправочникСсылка.СерийныеНомераНоменклатуры-  серийный номер,который нужно проверить 
//																	на уникальность в табличной части
//
// Возвращаемое значение:
// СерийныйНомер   - СправочникСсылка.СерийныеНомераНоменклатуры	- выбран серийный номер, или неопределено - если есть такой уже С/Н
//
&НаСервере
Функция ПроверитьНаУникальностьЗначения(Номенклатура,СерийныйНомер,КоличествоКлон)
	УстановитьПривилегированныйРежим(Истина);
	Отказ = Ложь;
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",				Номенклатура);
	Отбор.Вставить("СерийныеНомераНоменклатуры",СерийныйНомер);
	

	Строки = Товары.НайтиСтроки(Отбор);
	Если Строки.Количество()>КоличествоКлон Тогда
		Отказ =Истина;
	КонецЕсли; 
	
	Возврат  Отказ;
КонецФункции // ПроверитьНаУникальностьЗначения(СерийныйНомер)

//Проверить входить ли партнер в сегмент "Партнеры", если не входит, то поле контактное лицо не заполняется//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
// Булево   - Истина, если входит в сегмент, Ложь - не входит в сегмент
//
&НаСервере
Функция ПроверитьСегментПартнера()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Истина;
	СегментПартнер = Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")); //Партнери (покупці гуртового відділу)
	
	Запрос 				= 	Новый Запрос;
	Запрос.Текст 		=	ПолучитьТекстЗапросаСегментаПартнера();
	Запрос.УстановитьПараметр("Партнер",Отправитель);
	Запрос.УстановитьПараметр("СегментПартнер",СегментПартнер); 
	РезультатЗапроса 	=	Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Отказ = Ложь;
	КонецЕсли;
	
	Возврат  Отказ;
КонецФункции // ПроверитьНаУникальностьЗначения(СерийныйНомер)

// Текст запроса на проверку Отправителя на сегмент "Партнери
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Строка  - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаСегментаПартнера()
	ТекстЗапроса = "
				|ВЫБРАТЬ
				|	*
				|ИЗ
				|	РегистрСведений.ПартнерыСегмента
				|ГДЕ
				|	Сегмент = &СегментПартнер
				|	И Партнер = &Партнер"; 
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаСегментаПартнера()

//Проверить таблицу Товары на номенклатуру из реализации
//
// Параметры:
//  НЕТ
//
&НаСервере
Функция ПроверитьВыборНоменклатуриИзРТУ(Номенклатура)
	УстановитьПривилегированныйРежим(Истина);
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаДляПроверкиТаблициТоваров();
	Запрос.УстановитьПараметр("Ссылка",	ДокументОснования);
	ТаблЗнч 		= Запрос.Выполнить().Выгрузить();
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура",Номенклатура);
	МассивСтрок 	= ТаблЗнч.НайтиСтроки(ПараметрыПоиска);
	Если МассивСтрок.Количество()>0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПроверитьВыборНоменклатуриИзРТУ()

// Текст запроса на проверку табличну часть на заполнения из документа основания
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Строка  - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаДляПроверкиТаблициТоваров()
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Номенклатура КАК Номенклатура
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары
	               |ГДЕ
	               |	Ссылка = &Ссылка"; 
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаСегментаПартнера()

#КонецОбласти 



#КонецОбласти

