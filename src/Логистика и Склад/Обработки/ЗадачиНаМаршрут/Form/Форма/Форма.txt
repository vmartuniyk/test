

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтатусЗагрузки = 1; // Поставленные задачи
	Автор		   = ПараметрыСеанса.ТекущийПользователь;
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьСписокЗадач", 30); 
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтатусЗагрузкиПриИзменении(Элемент)
	УстановитьТекущуюЗадачу();
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	УстановитьТекущуюЗадачу();
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоДатеПриИзменении(Элемент)
	УстановитьТекущуюЗадачу();
	ЗагрузитьСписокЗадач();
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СПИСОКЗАДАЧ	

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьРеквизитыЗадачи(ТекущиеДанные.Задача);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ 		= Истина;
	Если Копирование Тогда
		ТекущиеДанные 		= Элемент.ТекущиеДанные;
		СтруктураЗадачи		= ЗагрузитьРеквизитыЗадачи(ТекущиеДанные.Задача);
		ПараметрыФормы   = Новый Структура(
		"Отправитель, Получатель,  Маршрута, ТекстЗадачи, НачалоВыполнения, ИспользоватьОтображениеКакЗадачи", 
		ТекущиеДанные.Отправитель, ТекущиеДанные.Получатель, ТекущиеДанные.ВариантМаршрута, СтруктураЗадачи.ТекстЗадачи, ТекущаяДата(), СтруктураЗадачи.ИспользоватьОтображениеКакЗадачи);

		
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.ЗадачиНаМаршрут.Форма.ФормаСозданияЗадачи",ПараметрыФормы);
	
	Иначе
		
	   Результат   = ОткрытьФормуМодально("ВнешняяОбработка.ЗадачиНаМаршрут.Форма.ФормаСозданияЗадачи");
   КонецЕсли;
   
   Если Результат <> Неопределено Тогда
		ТекущаяЗадача = Результат.Задача;
		ЗагрузитьСписокЗадач();
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьСписокЗадач()
	УстановитьТекущуюЗадачу();
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьQRКода(Команда)
	
	УстановитьТекущуюЗадачу();
	
	ПараметрКоманды = Новый Массив;        
	ПараметрКоманды.Добавить(ТекущаяЗадача);        
   	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
   
   	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
   
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
        ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Процедура ПредваритальнойПросмотр(Команда)
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;        
	ПараметрКоманды.Добавить(ТекущиеДанные.Задача);        
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикеткиПредварительнойПросмотр", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	Для каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ТабДок = ТабличныйДокумент;
	КонецЦикла; 
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабДок", ТабДок);
	ОткрытьФорму("ВнешняяОбработка.ЗадачиНаМаршрут.Форма.ФормаТабДок", ПараметрыФормы);	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершитьЗадачу(Команда)
	УстановитьТекущуюЗадачу();
	Если ТекущаяЗадача <> Неопределено И Не ТекущаяЗадача.Пустая() Тогда
		УстановитьСтатусЗадачиНаСервере(ТекущаяЗадача, ПредопределенноеЗначение("Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена"), Истина);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗадачу(Команда)
	УстановитьТекущуюЗадачу();
	Если ТекущаяЗадача <> Неопределено И Не ТекущаяЗадача.Пустая() Тогда
		УстановитьСтатусЗадачиНаСервере(ТекущаяЗадача, ПредопределенноеЗначение("Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена"), Истина);		
	КонецЕсли;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаКлиенте
Процедура УстановитьТекущуюЗадачу()
	ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяЗадача = ТекущиеДанные.Задача;
	Иначе
		ТекущаяЗадача = Неопределено;
	КонецЕсли;
КонецПроцедуры // УстановитьТекущуюЗадачу()

&НаСервере
Процедура ВостановитьТекущуюЗадачу()
	
	Если Не ТекущаяЗадача.Пустая() И Не ТекущаяЗадача = Неопределено Тогда
		СтруктураПоиска = Новый Структура("Задача", ТекущаяЗадача);
		РезультатПоиска = СписокЗадач.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокЗадач.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюЗадачу()

 

&НаСервере
Процедура ЗагрузитьСписокЗадач()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокЗадач();
	
	Запрос.УстановитьПараметр("Автор", Автор);
	Запрос.УстановитьПараметр("ДатаНачало", 	ОтборПоДате.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	?(ОтборПоДате.ДатаОкончания = Дата(1,1,1), Дата(3999,12,31, 23, 59, 59), ОтборПоДате.ДатаОкончания));

	СписокЗадач.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ВостановитьТекущуюЗадачу();
	
КонецПроцедуры // ЗагрузитьСписокзадач()
 
&НаСервере
Функция ПолучитьТекстЗапросаСписокЗадач()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗадачиНаМаршут.Место КАК Задача,
	               |	ПРЕДСТАВЛЕНИЕ(ЗадачиНаМаршут.Место) КАК ЗадачаПредставление,
	               |	ЗадачиНаМаршут.ВариантМаршрута КАК ВариантМаршрута,
	               |	ПРЕДСТАВЛЕНИЕ(ЗадачиНаМаршут.ВариантМаршрута) КАК ВариантМаршрутаПредставление,
	               |	ЗадачиНаМаршут.Место.Владелец КАК Получатель,
	               |	ПРЕДСТАВЛЕНИЕ(ЗадачиНаМаршут.Место.Владелец) КАК ПолучательПредставление,
	               |	ЗадачиНаМаршут.Отправитель КАК Отправитель,
	               |	ПРЕДСТАВЛЕНИЕ(ЗадачиНаМаршут.Отправитель) КАК ОтправительПредставление,
	               |	ЗадачиНаМаршут.Место.Ответственный КАК АвторЗадачи,
	               |	ЗадачиНаМаршут.Место.ТекстЗадачи КАК Коментарии,
	               |	ВЫБОР
	               |		КОГДА ЗадачиНаМаршут.Место.Транзит
	               |			ТОГДА ЗадачиНаМаршут.Место.ТранзитныйСклад
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ТранзитныйСклад,
	               |	ВЫБОР
	               |		КОГДА ЗадачиНаМаршут.Место.Транзит
	               |			ТОГДА ПРЕДСТАВЛЕНИЕ(ЗадачиНаМаршут.Место.ТранзитныйСклад)
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ТранзитныйСкладПредставления
	               |ИЗ
				   |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, %ОтборПоОтветственному%) КАК ЗадачиНаМаршут
				   |%УсловияОтбора%";
 				  
	Если Автор.Пустая() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОтветственному%", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОтветственному%", "Место.Ответственный = &Автор");
	КонецЕсли;
	
	Если СтатусЗагрузки = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловияОтбора%", ""+ ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), " УПОРЯДОЧИТЬ ПО Период Возр ", " УПОРЯДОЧИТЬ ПО " + Сортировка_Поле + Сортировка_Направление));
	ИначеЕсли СтатусЗагрузки = 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловияОтбора%", "
				|ГДЕ
				|	СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
				|И ЗадачиНаМаршут.Период МЕЖДУ &ДатаНачало И &ДатаОкончания"+ ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), " УПОРЯДОЧИТЬ ПО Период Возр ", " УПОРЯДОЧИТЬ ПО " + Сортировка_Поле + Сортировка_Направление));
		
				
	ИначеЕсли СтатусЗагрузки = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловияОтбора%", "
				|ГДЕ
				|	СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения)
				|И ЗадачиНаМаршут.Период МЕЖДУ &ДатаНачало И &ДатаОкончания"+ ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), " УПОРЯДОЧИТЬ ПО Период Возр ", " УПОРЯДОЧИТЬ ПО " + Сортировка_Поле + Сортировка_Направление));
		
	ИначеЕсли СтатусЗагрузки = 3 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловияОтбора%", "
				|ГДЕ
				|	СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена)
				|И ЗадачиНаМаршут.Период МЕЖДУ &ДатаНачало И &ДатаОкончания"+ ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), " УПОРЯДОЧИТЬ ПО Период Возр ", " УПОРЯДОЧИТЬ ПО " + Сортировка_Поле + Сортировка_Направление));

	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловияОтбора%", "
				|ГДЕ
				|	СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена)
				|И ЗадачиНаМаршут.Период МЕЖДУ &ДатаНачало И &ДатаОкончания"+ ?(ПустаяСтрока(Сортировка_Поле) ИЛИ ПустаяСтрока(Сортировка_Направление), " УПОРЯДОЧИТЬ ПО Период Возр ", " УПОРЯДОЧИТЬ ПО " + Сортировка_Поле + Сортировка_Направление));

	КонецЕсли;
			

				
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСписокЗадач()

&НаСервере
Процедура УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстановитьБлокировку=Ложь)
	РеквизитФормыВЗначение("Объект").УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстановитьБлокировку);
	ЗагрузитьСписокЗадач();
КонецПроцедуры // УстановитьСтатусЗадачиНаСервере()
 
&НаСервере
Функция ЗагрузитьРеквизитыЗадачи(Задача)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Период КАК НачалоВыполненияЗадачи,
	                      |	Место.ТекстЗадачи КАК ТекстЗадачи,
	                      |	Место.ЗаказПоставщика КАК ЗаказПоставщика,
						  | Место.ИспользоватьОтображениеКакЗадачи  Как  ИспользоватьОтображениеКакЗадачи
                          |ИЗ
	                      |	РегистрСведений.ЗадачиНаМаршрут
	                      |ГДЕ
	                      |	Место = &Задача
						  |	И СтатусОтгрузки = &СтатусОтгрузки
						  |УПОРЯДОЧИТЬ ПО
						  |	Период УБЫВ");
						  
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Если СтатусЗагрузки = 1 Тогда
		Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена);
	ИначеЕсли СтатусЗагрузки = 2 Тогда
		Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения);
	ИначеЕсли СтатусЗагрузки = 3 Тогда
		Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена);
	ИначеЕсли СтатусЗагрузки = 4 Тогда
		Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ЗадачаОтменена);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстЗадачи 						= Выборка.ТекстЗадачи;
		НачалоВыполнения    				= Выборка.НачалоВыполненияЗадачи;
		ЗаказПоставщика						= Выборка.ЗаказПоставщика;
		ИспользоватьОтображениеКакЗадачи	= Выборка.ИспользоватьОтображениеКакЗадачи;
	Иначе
		ТекстЗадачи 						= Неопределено;
		НачалоВыполнения    				= Неопределено;
		ЗаказПоставщика						= Неопределено;
		ИспользоватьОтображениеКакЗадачи	= Неопределено;

	КонецЕсли;
	СтруктураЗадачи = Новый Структура("ТекстЗадачи, ИспользоватьОтображениеКакЗадачи", ТекстЗадачи, ИспользоватьОтображениеКакЗадачи);	
   Возврат СтруктураЗадачи;
КонецФункции// ЗагрузитьРеквизитыЗадачи()
 
&НаСервереБезКонтекста
Функция СформироватьКолекциюПечатныхФорм(ИмяИсточникаДанных, ПараметрыИсточника, ОбъектыПечати = Неопределено, ПараметрыВывода = Неопределено) 
	Перем КоллекцияПечатныхФорм;
    ИсточникДанных = ModuleLibraryServer.GetRefLibrary(ИмяИсточникаДанных);                
    УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);        
    Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");                                        
КонецФункции

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	ВыполнитьСортировку(" Возр");	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	ВыполнитьСортировку(" Убыв");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСортировку(НаправлениеСортировки)
	
	ТекущиеДанные    = Элементы.СписокЗадач.ТекущиеДанные;
	ТекущийЭлементТЗ = Элементы.СписокЗадач.ТекущийЭлемент;
	Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		ИмяЭлемента = ТекущийЭлементТЗ.Имя;
		Если НЕ НаправлениеСортировки = Неопределено Тогда
			УстановитьЗначенияСортировки(Сортировка_Поле, ИмяЭлемента);
			Сортировка_Направление = НаправлениеСортировки;
			ЗагрузитьСписокЗадач();

			//СписокЗадач.Сортировать(ИмяЭлемента + Сортировка_Направление);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

   &НаСервере
Процедура УстановитьЗначенияСортировки(ПолеСортировки, ИмяЭлемента)
	
	Если 	  ИмяЭлемента = "СписокЗадачЗадачаПредставление" 		   	Тогда ПолеСортировки = "Задача";
	ИначеЕсли ИмяЭлемента = "СписокЗадачАвторЗадачи"           			Тогда ПолеСортировки = "АвторЗадачи";
	ИначеЕсли ИмяЭлемента = "СписокЗадачМаршрутПредставление"      		Тогда ПолеСортировки = "ВариантМаршрута";
	ИначеЕсли ИмяЭлемента = "СписокЗадачОтправительПредставление" 	    Тогда ПолеСортировки = "Отправитель";
	ИначеЕсли ИмяЭлемента = "СписокЗадачТранзитныйСкладПредставления"   Тогда ПолеСортировки = "ТранзитныйСклад";
	ИначеЕсли ИмяЭлемента = "СписокЗадачПолучательПредставление"        Тогда ПолеСортировки = "Получатель";
	ИначеЕсли ИмяЭлемента = "СписокЗадачКоментарии" 					Тогда ПолеСортировки = "Коментарии";
	КонецЕсли;
	
КонецПроцедуры



                                              
 