
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументСсылка	=	Параметры.ДокументСсылка;
	СписокНоменклатуры.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресСписокНоменклатуры));	
	ДоступныеСерийныеНомера.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресСерийныеНомера));
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыПередУдалением(Элемент, Отказ)
	Отказ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
			
		Если ТекущиеДанные.КлючСвязиСерийныхНомеров = 0 Тогда
			ТекущиеДанные.КлючСвязиСерийныхНомеров  = СоздатьКлючСвязи(ТекущиеДанные.Номенклатура);
		КонецЕсли;
		
		Элементы.ДоступныеСерийныеНомера.ОтборСтрок =  Новый ФиксированнаяСтруктура("КлючСвязиСерийныхНомеров", ТекущиеДанные.КлючСвязиСерийныхНомеров);
		Элементы.ВыбраныеСерийныеНомера.ОтборСтрок  =  Новый ФиксированнаяСтруктура("КлючСвязиСерийныхНомеров", ТекущиеДанные.КлючСвязиСерийныхНомеров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.ВыбранноеКоличество = ?(Не ТекущиеДанные.Флаг,0,ТекущиеДанные.Количество);
		
		Если ТекущиеДанные.Флаг И ТекущиеДанные.ИспользоватьСерийныеНомера Тогда 
			
			Отбор = Новый Структура;
			Отбор.Вставить("КлючСвязиСерийныхНомеров", ТекущиеДанные.КлючСвязиСерийныхНомеров);	
			Массив	= ДоступныеСерийныеНомера.НайтиСтроки(Отбор);
			
			Для каждого СтрокаТЧ Из Массив Цикл
				ЗаполнитьЗначенияСвойств(ВыбраныеСерийныеНомера.Добавить(),СтрокаТЧ);
				ДоступныеСерийныеНомера.Удалить(СтрокаТЧ);
			КонецЦикла;
			
		Иначе
			
			Отбор = Новый Структура;
			Отбор.Вставить("КлючСвязиСерийныхНомеров", ТекущиеДанные.КлючСвязиСерийныхНомеров);	
			Массив	= ВыбраныеСерийныеНомера.НайтиСтроки(Отбор);
			
			Для каждого СтрокаТЧ Из Массив Цикл
				ЗаполнитьЗначенияСвойств(ДоступныеСерийныеНомера.Добавить(),СтрокаТЧ);
				ВыбраныеСерийныеНомера.Удалить(СтрокаТЧ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбранноеКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.ВыбранноеКоличество > ТекущиеДанные.Количество Тогда 
			ТекущиеДанные.ВыбранноеКоличество = ТекущиеДанные.Количество;		
		КонецЕсли;
		
		Если ТекущиеДанные.ВыбранноеКоличество <> 0 И Не ТекущиеДанные.Флаг Тогда
        	ТекущиеДанные.Флаг = Истина;
		ИначеЕсли ТекущиеДанные.ВыбранноеКоличество = 0 И ТекущиеДанные.Флаг Тогда 
			ТекущиеДанные.Флаг = Ложь;			
		КонецЕсли;	                                   		
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеСерийныеНомера

&НаКлиенте
Процедура ДоступныеСерийныеНомераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
		ДоступныеСерийныеНомераВыборНаСервере(ТекущиеДанные.КлючСвязиСерийныхНомеров,ТекущиеДанные.СерийныйНомер);			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбраныеСерийныеНомера

&НаКлиенте
Процедура ВыбраныеСерийныеНомераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
		ВыбраныеСерийныеНомераВыборНаСервере(ТекущиеДанные.КлючСвязиСерийныхНомеров,ТекущиеДанные.СерийныйНомер);			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьСнятьФлажки(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьСнятьФлажки(Ложь);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗадачуВозвратНаСЦОтПеревозчика(Команда)
	Операция = ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика");
	СоздатьЗадачуНаМаршрут(Операция);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратНаСервисЦентр(Команда)
	Операция			=	ПредопределенноеЗначение("Перечисление.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера");
	СоздатьЗадачуНаМаршрут(Операция);
КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СоздатьЗадачуНаМаршрут(Операция)
	
	ПолучитьТаблицуТовары();
	
	Если Не Товары.Количество() Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нужно выбрать номенклатуру! '"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы	   = ПолучитьДанныеДляПередачи(Операция);
	
	Форма = ПолучитьФорму("ВнешняяОбработка.ЗадачиНаМаршрут.Форма.ФормаСозданияЗадачи",
							ПараметрыФормы
							,);
	
	Для каждого ЭлементТЧ Из Товары Цикл
	
		НоваяСтрока = Форма.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементТЧ);
	
	КонецЦикла;
	
	ОткрытьФорму(Форма);
	Закрыть();
	
КонецПроцедуры

// Создает связь между таблицами СписокНоменклатуры и ДоступныеСерийныеНомера 
//
// Параметры:
//  Номенклатура  - СправочникСсылка.Номенклатура - ссылка на елемент номенклатуры
//                 
&НаКлиенте
Функция СоздатьКлючСвязи(Номенклатура)
	НовыйКлючСвязи = 0;
	ПроходПоЗначениям = 1;
	ПараметрОтбора = Новый Структура;
	ПараметрОтбора.Вставить("КлючСвязиСерийныхНомеров", ПроходПоЗначениям);	

	Пока НовыйКлючСвязи = 0 Цикл
		РезТовары 			= СписокНоменклатуры.НайтиСтроки(ПараметрОтбора);
		РезСерийныеНомера	= ДоступныеСерийныеНомера.НайтиСтроки(ПараметрОтбора);
		
		Если РезТовары.Количество() = 0 И РезСерийныеНомера.Количество() = 0 Тогда
			НовыйКлючСвязи = ПроходПоЗначениям;
			
			Отбор = Новый Структура;
			Отбор.Вставить("КлючСвязиСерийныхНомеров", 0);	
			Отбор.Вставить("Номенклатура", Номенклатура);
			
			Массив	= ДоступныеСерийныеНомера.НайтиСтроки(Отбор);
			Для каждого Элемент Из Массив Цикл
				Элемент.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;			
			КонецЦикла;
			
		Иначе
			ПроходПоЗначениям = ПроходПоЗначениям + 1;
			ПараметрОтбора.КлючСвязиСерийныхНомеров = ПроходПоЗначениям;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат НовыйКлючСвязи;
КонецФункции

// Установливает или снимает все флажки в таблице СписокНоменклатуры 
//
// Параметры
//  Флаг  - Булево - Истина - установить флажки
//                   Ложь   - снять флажки
//
&НаСервере
Процедура УстановитьСнятьФлажки(Флаг)

	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СтрокаТЧ Из СписокНоменклатуры Цикл
		СтрокаТЧ.Флаг = Флаг;
	    СтрокаТЧ.ВыбранноеКоличество = ?(Флаг,СтрокаТЧ.Количество,0);
		ВыбратьСерийныеНомера(Флаг);
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажки()

// Устанавливает серийный номер выбранным  
//
// Параметры:
//  КлючСвязиСерийныхНомеров	- Число 									  - ключ связи между номенклатурою
//                 						  										и серийными номерами
//  СерийныйНомер  				- СправочникСсылка.СерийныеНомераНоменклатуры - ссылка на елемент справочника 
//                 																серийные номера номенклатуры
//
&НаСервере
Процедура ДоступныеСерийныеНомераВыборНаСервере(КлючСвязиСерийныхНомеров,СерийныйНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСвязиСерийныхНомеров", КлючСвязиСерийныхНомеров);	
	Отбор.Вставить("СерийныйНомер", СерийныйНомер);	
	Массив	= ДоступныеСерийныеНомера.НайтиСтроки(Отбор);
	Если Массив.Количество() Тогда 
		ЗаполнитьЗначенияСвойств(ВыбраныеСерийныеНомера.Добавить(),Массив[0]);
		ДоступныеСерийныеНомера.Удалить(Массив[0]);
		ДобавитьВыбранноеКоличество(КлючСвязиСерийныхНомеров, 1);
	КонецЕсли;
	
КонецПроцедуры // ДоступныеСерийныеНомераВыборНаСервере()

// Устанавливает серийный номер доступным  
//
// Параметры:
//  КлючСвязиСерийныхНомеров	- Число 									  - ключ связи между номенклатурою
//                 						  										и серийными номерами
//  СерийныйНомер  				- СправочникСсылка.СерийныеНомераНоменклатуры - ссылка на елемент справочника 
//                 																серийные номера номенклатуры
//
&НаСервере
Процедура ВыбраныеСерийныеНомераВыборНаСервере(КлючСвязиСерийныхНомеров,СерийныйНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСвязиСерийныхНомеров", КлючСвязиСерийныхНомеров);	
	Отбор.Вставить("СерийныйНомер", СерийныйНомер);	
	Массив	= ВыбраныеСерийныеНомера.НайтиСтроки(Отбор);
	Если Массив.Количество() Тогда 
		ЗаполнитьЗначенияСвойств(ДоступныеСерийныеНомера.Добавить(),Массив[0]);
		ВыбраныеСерийныеНомера.Удалить(Массив[0]);
		ДобавитьВыбранноеКоличество(КлючСвязиСерийныхНомеров, -1);
	КонецЕсли;

КонецПроцедуры // ДоступныеСерийныеНомераВыборНаСервере()


// Доодаеть к текущему елементу ВыбранноеКоличество таблицы СписокНоменклатуры значение Количество
//
// Параметры:
//  КлючСвязиСерийныхНомеров	- Число	- ключ связи между номенклатурою
//                 						  и серийными номерами
//  Количество				 	- Число	- количество, которое необходимо додать к текущему елементу 
//										  ВыбранноеКоличество таблицы СписокНоменклатуры
//                
&НаСервере
Процедура ДобавитьВыбранноеКоличество(КлючСвязиСерийныхНомеров,Количество)

	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСвязиСерийныхНомеров", КлючСвязиСерийныхНомеров);	
	Массив	= СписокНоменклатуры.НайтиСтроки(Отбор);
	Если Массив.Количество() Тогда 
		
		ВыбраннаяСтрока = Массив[0];
		ВыбраннаяСтрока.ВыбранноеКоличество = ВыбраннаяСтрока.ВыбранноеКоличество + Количество;
		
		Если ВыбраннаяСтрока.ВыбранноеКоличество = 0 Тогда 
			ВыбраннаяСтрока.Флаг = Ложь;
		Иначе 
			ВыбраннаяСтрока.Флаг = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьВыбранноеКоличество()


// Выбирает все значения таблицы СписокНоменклатуры и доступные серийные номера   
//
// Параметры:
//  Флаг  - Булево - значение Истина или Ложь
//
&НаСервере
Процедура ВыбратьСерийныеНомера(Флаг)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСерийныеНомера();
	Запрос.УстановитьПараметр("ДоступныеСерийныеНомера",ДоступныеСерийныеНомера.Выгрузить());
	Запрос.УстановитьПараметр("ВыбраныеСерийныеНомера",ВыбраныеСерийныеНомера.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
	
	Если Флаг Тогда
		ДоступныеСерийныеНомера.Очистить();
		ВыбраныеСерийныеНомера.Загрузить(ТаблицаРезультатаЗапроса);
	Иначе 
		ВыбраныеСерийныеНомера.Очистить();
		ДоступныеСерийныеНомера.Загрузить(ТаблицаРезультатаЗапроса);
	КонецЕсли;	

КонецПроцедуры // ВыбратьСерийныеНомера()


// Получаем текст запроса для выбору всех доступных серийных номеров
//
// Параметры:
//
// Возвращаемое значение:
//   Строка - Текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаСерийныеНомера()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДоступныеСерийныеНомера.СерийныйНомер,
		|	ДоступныеСерийныеНомера.КлючСвязиСерийныхНомеров,
		|	ДоступныеСерийныеНомера.Номенклатура
		|ПОМЕСТИТЬ ДоступныеСерийныеНомера
		|ИЗ
		|	&ДоступныеСерийныеНомера КАК ДоступныеСерийныеНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбраныеСерийныеНомера.СерийныйНомер,
		|	ВыбраныеСерийныеНомера.КлючСвязиСерийныхНомеров,
		|	ВыбраныеСерийныеНомера.Номенклатура
		|ПОМЕСТИТЬ ВыбраныеСерийныеНомера
		|ИЗ
		|	&ВыбраныеСерийныеНомера КАК ВыбраныеСерийныеНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеСерийныеНомера.СерийныйНомер,
		|	ДоступныеСерийныеНомера.КлючСвязиСерийныхНомеров,
		|	ДоступныеСерийныеНомера.Номенклатура
		|ИЗ
		|	ДоступныеСерийныеНомера КАК ДоступныеСерийныеНомера
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыбраныеСерийныеНомера.СерийныйНомер,
		|	ВыбраныеСерийныеНомера.КлючСвязиСерийныхНомеров,
		|	ВыбраныеСерийныеНомера.Номенклатура
		|ИЗ
		|	ВыбраныеСерийныеНомера КАК ВыбраныеСерийныеНомера";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСерийныеНомера()

// Получаем структуру данных для создание задачи на мершрут
//
// Параметры:
//
// Возвращаемое значение:
//   Структура    
//
&НаСервере
Функция ПолучитьДанныеДляПередачи(Операция)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УИ = Новый УникальныйИдентификатор("9d099e0d-df38-11e3-80cc-001e676b0174");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НоваяЗадача" 	,		Истина);
	СтруктураДанных.Вставить("ДокументОснования",   ДокументСсылка.Ссылка);
	СтруктураДанных.Вставить("Получатель"	,   	Справочники.Склады.ПолучитьСсылку(УИ));
	СтруктураДанных.Вставить("Операция", 			Операция);
	Если Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера Тогда
		СтруктураДанных.Вставить("Отправитель",		ДокументСсылка.Партнер);
	Иначе
		СтруктураДанных.Вставить("КонтактноеЛицо",	ДокументСсылка.Партнер);
	КонецЕсли;
	
	Возврат СтруктураДанных;	

КонецФункции // ПолучитьДанныеДляПередачи()

// Получаем таблицу Товары для задачи на маршрут
//
// Параметры:
//
&НаСервере
Процедура ПолучитьТаблицуТовары()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокНоменклатуры.Флаг 									КАК Флаг,
		|	СписокНоменклатуры.ИспользоватьСерийныеНомера				КАК ИспользоватьСерийныеНомера,
		|	СписокНоменклатуры.ВыбранноеКоличество 						КАК Количество,
		|	СписокНоменклатуры.КлючСвязиСерийныхНомеров 				КАК КлючСвязиСерийныхНомеров,
		|	СписокНоменклатуры.Номенклатура 							КАК Номенклатура,
		|	&ДатаПродажи КАК ДатаПродажи
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	&СписокНоменклатуры КАК СписокНоменклатуры
		|;
		|
		|ВЫБРАТЬ
		|	ВыбраныеСерийныеНомера.СерийныйНомер 						КАК СерийныеНомераНоменклатуры,
		|	ВыбраныеСерийныеНомера.КлючСвязиСерийныхНомеров 			КАК КлючСвязиСерийныхНомеров,
		|	ВыбраныеСерийныеНомера.Номенклатура 						КАК Номенклатура
		|ПОМЕСТИТЬ ВыбраныеСерийныеНомера
		|ИЗ
		|	&ВыбраныеСерийныеНомера КАК ВыбраныеСерийныеНомера
		|;
		|
		|ВЫБРАТЬ
		|	СписокНоменклатуры.Номенклатура 							КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СписокНоменклатуры.ИспользоватьСерийныеНомера
		|			ТОГДА 1
		|		ИНАЧЕ СписокНоменклатуры.Количество
		|	КОНЕЦ 														КАК Количество,
		|	ВыбраныеСерийныеНомера.СерийныеНомераНоменклатуры			КАК СерийныеНомераНоменклатуры,
		|	СписокНоменклатуры.ДатаПродажи 								КАК ДатаПродажи
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВыбраныеСерийныеНомера КАК ВыбраныеСерийныеНомера
		|	ПО 	  (ВыбраныеСерийныеНомера.КлючСвязиСерийныхНомеров	=	СписокНоменклатуры.КлючСвязиСерийныхНомеров)
		|		И (ВыбраныеСерийныеНомера.Номенклатура 				=	СписокНоменклатуры.Номенклатура)
		|ГДЕ
		|	СписокНоменклатуры.Флаг";
		
	Запрос.УстановитьПараметр("ВыбраныеСерийныеНомера"	,	ВыбраныеСерийныеНомера.Выгрузить());
	Запрос.УстановитьПараметр("СписокНоменклатуры"		,	СписокНоменклатуры.Выгрузить());
	Запрос.УстановитьПараметр("ДатаПродажи"				,	ДокументСсылка.Дата);
	
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ПолучитьТаблицуТовары()



#КонецОбласти





 