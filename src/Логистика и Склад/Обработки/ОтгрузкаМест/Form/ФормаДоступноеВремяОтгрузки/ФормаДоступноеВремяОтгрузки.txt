#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_Заглушка");
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Функция Тест_Заглушка(Параметр) Экспорт
	ЮнитТест.ПроверитьИстину(Истина,);
КонецФункции // Тест_Заглушка()

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;

	Если Параметры.ВремяОтправки = Дата("00010101") Тогда
		Календарь = ТекущаяДата();
	Иначе
		Календарь 	  = Параметры.ВремяОтправки;
		ВремяОтправки = Параметры.ВремяОтправки;
	КонецЕсли;
	Маршрут = Параметры.Маршрут;
	СформироватьВремяОтгрузки();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	СформироватьВремяОтгрузки();
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийТаблициФормыДатыОтгрузки

&НаКлиенте
Процедура ОтправкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатыОтгрузкиФлагПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Отправка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбработатьУстановкуФлагаНаСервере(ТекущиеДанные.ДатаОтправки); 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ДатаОтправки = ПолучитьДатаДляПередачи();
	
	Если Не ДатаОтправки = Неопределено Тогда
		Закрыть(ДатаОтправки);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьВремяОтгрузки()
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаВремяОтгрузки();
	
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("ВремяОтправки", ВремяОтправки);
	Запрос.УстановитьПараметр("Год", Год(Календарь));
	
	Отправка.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // СформироватьВремяОтгрузки()
 
&НаСервере
Функция СформироватьТекстЗапросаВремяОтгрузки()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Календарь КАК Календарь
	               |ПОМЕСТИТЬ КешКалендарь
	               |ИЗ
	               |	Справочник.Маршруты_Маршруты
	               |ГДЕ
	               |	Ссылка = &Маршрут
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДатаГрафика КАК ДатаГрафика
				   |ПОМЕСТИТЬ КешДатаГрафика
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики  
	               |ГДЕ
	               |	Календарь В
	               |			(ВЫБРАТЬ
	               |				Календарь КАК Календарь
	               |			ИЗ
	               |				КешКалендарь)
	               |	И Год = &Год
	               |	И ДатаГрафика = НАЧАЛОПЕРИОДА(&Календарь, ДЕНЬ)
	               |	И ДеньВключенВГрафик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВремяНачала КАК ВремяНачала,
	               |	ВремяОкончания КАК ВремяОкончания,
				   |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Календарь, ДЕНЬ), ЧАС, ЧАС(ВремяОкончания)), МИНУТА, МИНУТА(ВремяОкончания)) КАК ДатаОтправки,
				   |	ВЫБОР ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Календарь, ДЕНЬ), ЧАС, ЧАС(ВремяОкончания)), МИНУТА, МИНУТА(ВремяОкончания))
				   |		КОГДА &ВремяОтправки 
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Флаг
	               |ИЗ
	               |	Справочник.Календари.РасписаниеРаботы
	               |ГДЕ
	               |	Ссылка В
	               |			(ВЫБРАТЬ
	               |				Календарь КАК Календарь
	               |			ИЗ
	               |				КешКалендарь)
	               |	И НомерДня В
	               |			(ВЫБРАТЬ
	               |				ДЕНЬНЕДЕЛИ(ДатаГрафика) КАК ДатаГрафика
	               |			ИЗ
	               |				КешДатаГрафика)
	               |
				   |УПОРЯДОЧИТЬ ПО
				   |	ВремяНачала";
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаВремяОтгрузки()

&НаСервере
Процедура ОбработатьУстановкуФлагаНаСервере(ДатаОтправки)
	Для каждого СтрокаТаблицы Из Отправка Цикл
		Если СтрокаТаблицы.ДатаОтправки = ДатаОтправки Тогда
			СтрокаТаблицы.Флаг = Истина;
			ВремяОтправки = ДатаОтправки;
		Иначе
			СтрокаТаблицы.Флаг = Ложь;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры // ОбработатьУстановкуФлагаНаСервере()
 

&НаСервере
Функция ПолучитьДатаДляПередачи()

	СтруктураПоиска = Новый Структура("Флаг", Истина);
	РезультатПоиска = Отправка.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Неоходимо выбрать время отправки.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатПоиска[0].ДатаОтправки;

КонецФункции // ПолучитьДатаДляПередачи()

 
#КонецОбласти


 