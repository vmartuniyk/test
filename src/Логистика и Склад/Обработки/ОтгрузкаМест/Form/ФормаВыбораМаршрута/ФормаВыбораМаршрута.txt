
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьДанныеФормы(Параметры);
	
	ДанныеРасчета = ДанныеДляРасчетаМаршрута();
		
	РезультатПакета = Справочники.МестаДоставки.ВыполнитьРасчетДоставки(ДанныеРасчета);
	
	ТранзитныйСклад 			 = Неопределено;
	ТранзитныйСкладПредставление = Неопределено;
	
	МаршрутТранзит				 = Неопределено;
	МаршрутТранзитПредставление  = Неопределено;
	
	Маршрут				 		 = Неопределено;
	МаршрутПредставление 		 = Неопределено;
	
	СтрокаМаршрут		 = НСтр("ru = ""Задача по маршруту:""");
	СтрокаДатаВыезда	 = НСтр("ru = ""; Дата выезда:""");
	СтрокаМаршрутТранзит = НСтр("ru = ""Транзитний маршрут:""");
	
	Если ТипЗнч(Параметры.Отправитель) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(Параметры.Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Выборка 		= РезультатПакета[4].Выбрать();
		ВыборкаТранзит  = РезультатПакета[7].Выбрать();
				
		Если Выборка.Следующий() И ВыборкаТранзит.Количество()=0 Тогда		
			ПрямойМаршрут 			 	= Выборка.Маршрут;
			ПрямойМаршрутПредставление  = СтрокаМаршрут + Выборка.МаршрутПредставление;
		Иначе
			ПрямойМаршрут			   = Неопределено;
			ПрямойМаршрутПредставление = Неопределено;
		КонецЕсли;
		
		Если ВыборкаТранзит.Следующий() Тогда
			
			ТранзитныйСклад			     	= ВыборкаТранзит.ТранзитныйСклад;
			ТранзитныйМаршрут				= ВыборкаТранзит.МаршрутТранзит;
			ТранзитныйМаршрутПредставление	= СтрокаМаршрутТранзит + ВыборкаТранзит.МаршрутКПолучателю.Наименование;
			///ТранзитныйМаршрутПредставление	 = СтрокаМаршрут + ВыборкаТранзит.МаршрутТранзитПредставление+ ";"+Символы.ПС + СтрокаМаршрутТранзит;
		Иначе

		КонецЕсли;
		Если НЕ  ПустаяСтрока(МаршрутПредставление) Тогда
		    ТранзитныйМаршрутПредставление = "";
			
		КонецЕсли;
		
	Иначе
		
		Выборка 		= РезультатПакета[4].Выбрать();
		ВыборкаТранзит  = РезультатПакета[10].Выбрать();
				
		Если Выборка.Следующий() Тогда
			ПрямойМаршрут 			 	= Выборка.Маршрут;
			ПрямойМаршрутПредставление 	= СтрокаМаршрут + Выборка.МаршрутПредсталение + СтрокаДатаВыезда + Выборка.ДатаВремяВыезда;
		КонецЕсли;
		
		Если ВыборкаТранзит.Следующий() Тогда
			
			ТранзитныйСклад			     	= ВыборкаТранзит.ТранзитныйСклад;
			ТранзитныйМаршрут				= ВыборкаТранзит.МаршрутТранзит;
			СтрокаМаршрутТранзит		 	= СтрокаМаршрутТранзит + ВыборкаТранзит.МаршрутТранзитПредставление;
			СтрокаМаршрутКПолучателю	 	= СтрокаМаршрут + ВыборкаТранзит.МаршрутКПолучателю.Наименование + СтрокаДатаВыезда + ВыборкаТранзит.ДатаВремяВыездаКПолучателю;	
			ТранзитныйМаршрутПредставление  = СтрокаМаршрутТранзит + Символы.ПС + СтрокаМаршрутКПолучателю;
		
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПрямойМаршрутПредставление) Тогда
		Элементы.СоздатьПрямуюЗадачу.Доступность = Ложь;
	Иначе 
		Элементы.СоздатьПрямуюЗадачу.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(ТранзитныйМаршрутПредставление) Тогда
		Элементы.СоздатьТранзитнуюЗадачу.Доступность = Ложь;
	Иначе
		Элементы.СоздатьТранзитнуюЗадачу.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПрямуюЗадачу(Команда)
	СозданнаяЗадача = СоздатьЗадачуНаСервере(ПрямойМаршрут, ТранзитныйСклад);
	Закрыть();
	Оповестить("СозданиеЗадачиСЦ", Новый Структура("Задача", СозданнаяЗадача.Задача));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТранзитнуюЗадачу(Команда)
	СозданнаяЗадача = СоздатьЗадачуНаСервере(ТранзитныйМаршрут, ТранзитныйСклад);
	Закрыть();
	Оповестить("СозданиеЗадачиСЦ", Новый Структура("Задача", СозданнаяЗадача.Задача));
КонецПроцедуры  

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДанныеДляРасчетаМаршрута()

	ДанныеРасчета = Новый Структура;
	ДанныеРасчета.Вставить("Получатель", Получатель);
	ДанныеРасчета.Вставить("АдресДоставки", АдресДоставки);
	ДанныеРасчета.Вставить("Отправитель", Отправитель);
	ДанныеРасчета.Вставить("АдресОтправителя", git_МодульДоставкиСервер.ПолучитьАдресСклада(Отправитель));
	ДанныеРасчета.Вставить("НачалоВыполнения", ТекущаяДатаСеанса());
	ДанныеРасчета.Вставить("КонтактноеЛицо", КонтактноеЛицо);
	ДанныеРасчета.Вставить("ПолучательЧерезПеревозчика", ПолучательЧерезПеревозчика);
	ДанныеРасчета.Вставить("Операция", Перечисления.КТС_ОперацииМеста.ЗабратьСоСклада);
	
	Если ЗначениеЗаполнено(ПолучательЧерезПеревозчика) Тогда
		ДанныеРасчета.Вставить("Владелец", ПолучательЧерезПеревозчика);
	Иначе
		ДанныеРасчета.Вставить("Владелец", Получатель);
	КонецЕсли;
	
	Возврат ДанныеРасчета;

КонецФункции // ДанніеДляРасчетаМаршрута()

&НаСервере
Процедура ИнициализироватьДанныеФормы(ПереданныеПараметры)

	АдресДоставки 				= ПереданныеПараметры.АдресДоставки;
	КонтактноеЛицо 				= ПереданныеПараметры.КонтактноеЛицо;
	Отправитель 				= ПереданныеПараметры.Отправитель;
	Получатель 					= ПереданныеПараметры.Получатель;
	ПолучательЧерезПеревозчика 	= ПереданныеПараметры.ПолучательЧерезПеревозчика;
	ОтделениеНовойПочты 		= ПереданныеПараметры.ОтделениеНовойПочты;
	ПлатитПолучатель 			= ПереданныеПараметры.ПлатитПолучатель;

КонецПроцедуры // ИнициализироватьДанныеФормы()
 

&НаСервере
Функция СоздатьЗадачуНаСервере(знач Маршрут, знач ТранзитныйСклад)

	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыМеста = Новый Структура;
	ПараметрыМеста.Вставить("Транзит", ?(ЗначениеЗаполнено(ТранзитныйСклад), Истина, Ложь));
	ПараметрыМеста.Вставить("ТранзитныйСклад", 			ТранзитныйСклад);
	ПараметрыМеста.Вставить("НачалоВыполненияЗадачи", 	ТекущаяДатаСеанса());
	ПараметрыМеста.Вставить("КодУжеУпартнера", 			Ложь);
	ПараметрыМеста.Вставить("АдресДоставки", 			АдресДоставки);
	ПараметрыМеста.Вставить("КонтактноеЛицо", 			КонтактноеЛицо);
	ПараметрыМеста.Вставить("Отправитель", 				Отправитель);
	ПараметрыМеста.Вставить("ПолучательЧерезПеревозчика", ПолучательЧерезПеревозчика);
	ПараметрыМеста.Вставить("ВариантМаршрута", 			Маршрут);
	ПараметрыМеста.Вставить("АдресОтправителя", 		git_МодульДоставкиСервер.ПолучитьАдресСклада(Отправитель));
	ПараметрыМеста.Вставить("ИзЗаявкиСервисногоЦентра", Истина);
	ПараметрыМеста.Вставить("Владелец", 				Получатель);
	ПараметрыМеста.Вставить("ОтделениеНовойПочты", 		ОтделениеНовойПочты);
	ПараметрыМеста.Вставить("Операция", 				Перечисления.КТС_ОперацииМеста.ЗадачиПоЗаявкеСЦ);
	ПараметрыМеста.Вставить("ПлатитПолучатель", 		ПлатитПолучатель); 	
	ПараметрыМеста.Вставить("ТекстЗадачи", 				ТекстЗадачи); 	

	Возврат Справочники.МестаДоставки.СоздатьЗадачу(ПараметрыМеста);

КонецФункции // СоздатьЗадачуНаСервере()

#КонецОбласти




