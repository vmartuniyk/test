
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект 	= РеквизитФормыВЗначение("Объект");
	ОписаниеИзменений   = ОбработкаОбъект.ПолучитьОписаниеИзменений();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	УстановитьВидимостьЭлементовФормы();
	ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	
	ДатаОтгрузки = КонецДня(ТекущаяДата());
	
	Сортировка_ПулОтгрузки = Новый Структура;
	Сортировка_ПулОтгрузки.Вставить("Поле", "Получатель");
	Сортировка_ПулОтгрузки.Вставить("Направление", "ВОЗР");
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ГруппаНастройкиРассылкиМаршрутногоЛиста.Видимость = Ложь;
	КонецЕсли;
	
	ТекущееПодразделение = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	
	Если ТекущееПодразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f50f-3ffd-11e0-9f98-001517115d85")) Тогда
		Элементы.МестаКонтекстноеМенюПоместитьВМашину.Видимость = Истина;
	КонецЕсли;
	
	ЗагрузитьНастройкиОтгрузкиМест();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ПолучитьОтветПользователяПередЗакрытием(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьСписокПринтеров();
	//ПодключитьОбработчикОжидания("ВыполнитьОбновлениеТаблиц", 60, Ложь);
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура МаршрутНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнятьВыбор		 = Истина;
	
	Если Склад.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо указать склад.'"),, "Склад");
		ВыполнятьВыбор = Ложь;
	КонецЕсли;
	
	Если ДатаОтгрузки = Дата("00010101") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо указать дату отсгузки.'"),, "ДатаОтгрузки");
		ВыполнятьВыбор = Ложь;
	КонецЕсли;
	
	Если ВыполнятьВыбор Тогда
		Результат 	  = СформироватьСписокДоступныхМаршрутов(Склад, ДатаОтгрузки);
		ЭлементСписка = Результат.ВыбратьЭлемент(НСтр("ru='Выберите доступный маршрут.'"));
		Если ЭлементСписка <> Неопределено Тогда
			Маршрут = ЭлементСписка.Значение;
			УстановитьОтборы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ЗаполнитьКешНаКлиенте();
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
	ЗаполнитьКешНаКлиенте();
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент) 
	ЗаполнитьКешНаКлиенте();
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ТСД_НоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТСД_Номенклатура = Текст;
	ЗаполнитьКешНаКлиенте();
	ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду();
	ТекущийЭлемент = Элементы.ТСД_Номенклатура;
	ТСД_Номенклатура = "";
КонецПроцедуры

&НаКлиенте
Процедура ТСД_СерийныйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТСД_СерийныйНомер = Текст;
	Если ПустаяСтрока(ТСД_СерийныйНомер) Тогда
		ТСД_СерийныйНомер = "";
		ТекущийЭлемент = Элементы.ТСД_СерийныйНомер;
		Возврат;
	КонецЕсли;
	ДобавитьСерийныйНомер();
	ТекущийЭлемент = Элементы.ТСД_СерийныйНомер;
	ТСД_СерийныйНомер = "";
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПулОтгрузки

&НаКлиенте
Процедура ПулОтгрузкиПриАктивизацииСтроки(Элемент)	
	ЗагрузитьПулНоменклатурыНаКлиенте();	
КонецПроцедуры

&НаКлиенте
Процедура ПулОтгрузкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры






////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПулНоменклатуры

&НаКлиенте
Процедура ПулНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВывестиСписокДокументовПоНоменклатуре();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПулНоменклатуры(Команда)
	ЗаполнитьКешНаКлиенте();	
	ЗагрузитьПулНоменклатурыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШтрихкод(Команда)
	ТекущиеДанные = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Введите новый штрихкод");
		Штрихкод = ОткрытьФормуМодально("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаШтрихкода", ПараметрыФормы);
		Если Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьШтрихКодНаСервере(Штрихкод, ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		ПоказатьОповещениеПользователя(НСтр("ru='Штрихкод записан.'"),
		ПолучитьНавигационнуюСсылку(ТекущиеДанные.Номенклатура),
		Строка(ТекущиеДанные.Номенклатура),
		БиблиотекаКартинок.Информация32);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоТовару(Команда)
	ВывестиСписокДокументовПоНоменклатуре();
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПодборНоменклатуры

&НаКлиенте
Процедура ПодборНоменклатурыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПодключитьСерийныеНомера(ТекущиеДанные.Место, ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатурыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	АдресПолучателя = Неопределено;
	Получатель 		= Неопределено;
	
	ТДПулОтгрузки = Элементы.ПулОтгрузки.ТекущиеДанные;
	Если ТДПулОтгрузки <> Неопределено Тогда
		АдресПолучателя = ТДПулОтгрузки.АдресДоставки;
		Получатель		= ТДПулОтгрузки.Получатель;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьКешНаКлиенте();
		УдалитьНоменклатуруИзМеста(ТекущиеДанные.Место, ТекущиеДанные.Номенклатура, Получатель, АдресПолучателя);
	КонецЕсли;
	
	
	ЗаполнитьКешНаКлиенте();	
	ЗагрузитьПулНоменклатурыНаКлиенте();
КонецПроцедуры






////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Места

&НаКлиенте
Процедура МестаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ЗагрузитьНоменклатуруМеста(ТекущиеДанные.Место);
КонецПроцедуры

&НаКлиенте
Процедура МестаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ 		  = Истина;
	ТДПулОтгрузки = Элементы.ПулОтгрузки.ТекущиеДанные;
	
	Если ТДПулОтгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТДСтруктура = ТекущиеДанныеПулОтгрузки(ТДПулОтгрузки);
	
	СоздатьМестоОтгрузки(ТДСтруктура);
	
КонецПроцедуры 

&НаКлиенте
Процедура МестаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МестаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьНоменклатуруМеста(ТекущиеДанные.Место);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Разукомплектовать(Команда)
	ТДМеста 	  = Элементы.Места.ТекущиеДанные;
	ТДПулОтгрузки = Элементы.ПулОтгрузки.ТекущиеДанные;
	Получатель	  = Неопределено;
	Если ТДПулОтгрузки <> Неопределено Тогда
		Получатель = ТДПулОтгрузки.Получатель;
	КонецЕсли;
	Если ТДМеста <> Неопределено Тогда
		РазукомплектоватьМесто(ТДМеста.Место, Получатель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗвершитьКомплектацию(Команда)
	Отказ = Ложь;
	ЗаполнитьКешНаКлиенте();
	ТекущиеДанные = Элементы.Места.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПечатныхФорм = ЗавершитьКомплектацию(ТекущиеДанные.Место, Элементы.Места.ТекущаяСтрока, Отказ);
	Если Не Отказ Тогда
		НапечататьQRКод();
		ПараметрыПеревозчика = ПолучитьПеревозчика(ТекущиеДанные.Место);
		Если ЗначениеЗаполнено(ПараметрыПеревозчика.Перевозчик) Тогда
			НапечататьQRКодПеревозчика();
			Если  ПараметрыПеревозчика.ОбъявленнаяСтоимость>10000 Тогда
				ПечатьТоварногоЧека();
			КонецЕсли
		КонецЕсли;
		Если ПустаяСтрока(ПринтерТоварногоЧека) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Товарный чек не будет распечатаны. Необходимо задать имя принтера на закладке «Настройки».'"));
		Иначе
			Если СтруктураПечатныхФорм.Свойство("ТоварныеЧеки") Тогда
				Для каждого ТоварныйЧек ИЗ СтруктураПечатныхФорм.ТоварныеЧеки Цикл
					ТоварныйЧек.ИмяПринтера = ПринтерТоварногоЧека;
					ТоварныйЧек.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
					//ТоварныйЧек.Показать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Нужно для того, чтобы форма оставалась доступной после печати по умолчанию
	ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
	ОткрытьФорму(ФормаФокус);
	ФормаФокус.Закрыть();
	Активизировать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМест(Команда)
	ОбновитьСписокМестНаКлиенте();
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокЗадачи

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ 			= Истина;
		
	Если Копирование Тогда
		Операция    = Элемент.ТекущиеДанные.Операция;
		СоздатьЗадачуНаМаршрутНаКлиенте(Операция,Ложь);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачиПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		РеквизитЗадачиНачалоВыполнения 			= Неопределено;
		РеквизитЗадачиОтправитель 				= Неопределено;
		РеквизитЗадачиТекстЗадачи 				= Неопределено;
	Иначе
		ЗагрузитьРеквизитыЗадачи(ТекущиеДанные.Задача);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитЗадачиТекстЗадачиПриИзменении(Элемент)
	РеквизитЗадачиМодифицированность  = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Серинійномера

&НаКлиенте
Процедура ТаблицаВыбранныеСНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанныеСН 	= Элемент.ТекущиеДанные;
	ТекущиеДанныеПодбор = Элементы.ПодборНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеПодбор <> Неопределено И ТекущиеДанныеСН <> Неопределено Тогда
		ЗаполнитьКешНаКлиенте();
		УдалитьСерийныйНомер(ТекущиеДанныеПодбор.Место, ТекущиеДанныеПодбор.Номенклатура, ТекущиеДанныеСН.СерийныйНомер);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРасходСНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТДПодборНоменклатуры = Элементы.ПодборНоменклатуры.ТекущиеДанные;
	
	Если ТДПодборНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ТекущиеДанныеПодборНоменклатуры(ТДПодборНоменклатуры);
	ДобавитьСерийныйНомерПодбор(СтруктураДанные, Элемент.ТекущиеДанные.СерийныйНомер);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НастройкиРассылкиМаршрутногоЛиста

&НаКлиенте
Процедура НастройкиРассылкиМаршрутногоЛистаПриИзменении(Элемент)
	СохранитьНастройкиОтгрузкиМест();
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПечатьМаршрутногоЛиста(Команда)
	ПравоЗакрыватьЗадачи = Ложь;
	Если Не ПустаяСтрока(ПринтерА4) Тогда
		ТабДокумент 			= СформироватьПечатнуюФормуМаршрутныйЛист(ПравоЗакрыватьЗадачи);
		ТабДокумент.ИмяПринтера = ПринтерА4;
		ТабДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
		ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
		ОткрытьФорму(ФормаФокус);
		ФормаФокус.Закрыть();
		Активизировать();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Маршрутный лист невозможно вывести на печать. Необходимо задать имя принтера А4 (Все действия - Настройка)'"));
	КонецЕсли;
	КоличествоЗадач = ОткрытыеЗадачи.Количество();
	Если КоличествоЗадач > 0 И ПравоЗакрыватьЗадачи Тогда
		ТекстВопроса = НСтр("ru='Количество задач в маршрутном листе - %1. Закрыть задачи?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, КоличествоЗадач);
		Ответ 		 = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗакрытьЗадачиВодителю();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрМаршрутногоЛиста(Команда)
	ТабДокумент 				= СформироватьПечатнуюФормуМаршрутныйЛист(Ложь, Истина);
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВМашину(Команда)
	ТДМеста = Элементы.Места.ТекущиеДанные;
	Если ТДМеста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоместитьМестоВМашинуНаСервере(ТДМеста.Место);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьQRКодов(Команда)
	НапечататьQRКод();
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
	ОткрытьФорму(ФормаФокус);
	ФормаФокус.Закрыть();
	Активизировать();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокументовВодителю(Команда)
	НапечататьДокументыВодителю();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтборНоменклатуры(Команда)
	ВыделенныеСтроки = Элементы.ПулНоменклатуры.ВыделенныеСтроки;
	ТДПулОтгрузки	 = Элементы.ПулОтгрузки.ТекущиеДанные;
	Если ТДПулОтгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ТабличныйДокумент = СформироватьПечатнуюФормуПодборНоменклатуры(ВыделенныеСтроки, ТДПулОтгрузки.Получатель, ТДПулОтгрузки.АдресДоставки);
		ТабличныйДокумент.ИмяПринтера = ПринтерА4;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		
		// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
		ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
		ОткрытьФорму(ФормаФокус);
		ФормаФокус.Закрыть();
		Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПустыхМест(Команда)
	
	ЧислоКодов = 0;
	Если Не ВвестиЧисло(ЧислоКодов, НСтр("ru='Введите количество QR-кодов'")) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = СформироватьПустыеМеста(ЧислоКодов); 
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	Для каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ПринтерQRКода;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		//ТабличныйДокумент.Показать();	
	КонецЦикла; 
	
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
	ОткрытьФорму(ФормаФокус);
	ФормаФокус.Закрыть();
	Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПулОтгрузки(Команда)
	ЗаполнитьКешНаКлиенте();
	ЗагрузитьПулОтгрузки();
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаМест(Команда)
	Элементы.ОтгрузкаМест.Пометка = Истина;
	Элементы.Настройки.Пометка    = Ложь;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтгрузкаМест;
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	Элементы.ОтгрузкаМест.Пометка = Ложь;
	Элементы.Настройки.Пометка    = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТовароногоЧека(Команда)
	Если ПустаяСтрока(ПринтерТоварногоЧека) Тогда
		Возврат;
	КонецЕсли;
	ТДМеста = Элементы.Места.ТекущиеДанные;
	Если Не ТДМеста.Укомплектовано Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для печати товарного чека неоходимо укомплектовать место.'"));
	КонецЕсли;
	Если ТДМеста <> Неопределено Тогда
		МассивДокументов = СформироватьПечатнуюФормуТоварногоЧека(ТДМеста.Место);
		Если МассивДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нету данных для печати.'"));					
		КонецЕсли; 
		Для каждого ТабличныйДокумент Из МассивДокументов Цикл
			ТабличныйДокумент.ИмяПринтера = ПринтерТоварногоЧека;
			ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
		КонецЦикла; 
		// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
		ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
		ОткрытьФорму(ФормаФокус);
		ФормаФокус.Закрыть();
		Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоСоглашения(Команда)
	Если ПустаяСтрока(ПринтерА4) Тогда
		Возврат;
	КонецЕсли;
	ТДМеста = Элементы.Места.ТекущиеДанные;
	Если Не ТДМеста.Укомплектовано Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для печати гарантийного соглашения неоходимо укомплектовать место.'"));
	КонецЕсли;
	Если ТДМеста <> Неопределено Тогда
		МассивДокументов = формироватьПечатнуюФормуГарантийногоСоглашения(ТДМеста.Место);
		Если МассивДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нету данных для печати.'"));					
		КонецЕсли; 
		Для каждого ТабличныйДокумент Из МассивДокументов Цикл
			ТабличныйДокумент.ИмяПринтера = ПринтерА4;
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЦикла; 
		// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
		ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
		ОткрытьФорму(ФормаФокус);
		ФормаФокус.Закрыть();
		Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПулОтгрузкиСортироватьПоВозрастанию(Команда)
	ТЭлемент = Элементы.ПулОтгрузки.ТекущийЭлемент;
	Если ТЭлемент <> Неопределено Тогда
		Сортировка_ПулОтгрузки.Вставить("Поле", ТЭлемент.Имя);
		Сортировка_ПулОтгрузки.Вставить("Направление", "ВОЗР");
		ЗаполнитьКешНаКлиенте();
		ЗагрузитьПулОтгрузки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПулОтгрузкиСортироватьПоУбыванию(Команда)
	ТЭлемент = Элементы.ПулОтгрузки.ТекущийЭлемент;
	Если ТЭлемент <> Неопределено Тогда
		Сортировка_ПулОтгрузки.Вставить("Поле", ТЭлемент.Имя);
		Сортировка_ПулОтгрузки.Вставить("Направление", "УБЫВ");
		ЗаполнитьКешНаКлиенте();
		ЗагрузитьПулОтгрузки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьТранзитноеМесто(Команда)
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаНомерШтрихкодМеста",,ЭтаФорма);
	Если Результат <> Неопределено Тогда
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаТранзит", Новый Структура("Место, ПринтерQRКода", Результат, ПринтерQRКода), ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоМесту(Команда)
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаНомерШтрихкодМеста",,ЭтаФорма);
	Если Результат <> Неопределено Тогда
		ТабДокумент 			    = ПолучитьИнформациюОМесте(Результат);
		ТабДокумент.ТолькоПросмотр  = Истина;
		ТабДокумент.ОтображатьСетку = Ложь;
		ТабДокумент.Показать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КарточкаНоменклатуры(Команда)
	ТекущиеДанные = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТДСтруктура = ТекущиеДанныеПулНоменклатуры(ТекущиеДанные);
		ОткрытьЗначение(ТДСтруктура.Номенклатура);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗадачу(Команда)
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьСтатусЗадачиНаСервере(ТекущиеДанные.Задача, ПредопределенноеЗначение("Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена"), Истина);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПечатьQRКодаЗадачи(Команда)
	
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ПринтерQRКода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='QR-код не будет распечатан. Необходимо задать имя принтера QR-кода на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;        
	ПараметрКоманды.Добавить(ТекущиеДанные.Задача);        
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ПринтерQRКода;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершитьЗадачу(Команда)
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьСтатусЗадачиНаСервере(ТекущиеДанные.Задача, ПредопределенноеЗначение("Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена"), Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеЗадачи(Команда)
	БиблиотекаФорм = ModuleLibraryServer.GetLibraryName("Задачи на маршрут");
	ОткрытьФорму("ВнешняяОбработка."+БиблиотекаФорм+".Форма.Форма",,,Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВсеЗадачи(Команда)
	ЗакрытьВсеЗадачиНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура МестаПоДокументам(Команда)
	
	СписокТипыДокументов = Новый СписокЗначений;
	
	СписокТипыДокументов.Добавить(Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров"));
	СписокТипыДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	СписокТипыДокументов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	СписокТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТипыДокументов.Добавить(Тип("ДокументСсылка.СборкаТоваров"));
	
	ДокументСсылка = ОткрытьФормуМодально("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаНавигационнойСсылки",,ЭтаФорма);
	Если ДокументСсылка <> Неопределено Тогда
		ПроверкаТипа = СписокТипыДокументов.НайтиПоЗначению(ТипЗнч(ДокументСсылка));
		Если ПроверкаТипа = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ТабДокумент 			    = ПолучитьИнформациюОДокументе(ДокументСсылка);
		ТабДокумент.ТолькоПросмотр  = Истина;
		ТабДокумент.ОтображатьСетку = Ложь;
		ТабДокумент.Показать();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗадачуЗабратьСоСклада(Команда)
	СоздатьЗадачуНаМаршрутНаКлиенте(1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуЗабратьУПартнера(Команда)
	СоздатьЗадачуНаМаршрутНаКлиенте(2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратНаСервисЦентр(Команда)
	СоздатьЗадачуНаМаршрутНаКлиенте(3,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуИнформационаяЗадача(Команда)
	СоздатьЗадачуНаМаршрутНаКлиенте(4,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОкончаниеОбработкиТранзитногоМеста" Тогда
		ОбновитьСписокМестНаКлиенте();
	КонецЕсли;
	Если ИмяСобытия = "ОкончаниеОбработкиТранзитнойЗадачи" Тогда
		ЗагрузитьСписокЗадач();
	КонецЕсли;
	Если ИмяСобытия = "ОтгрузкаМест_ОбновитьПулНоменклатуры" Тогда
		ЗагрузитьПулНоменклатурыНаКлиенте();
	КонецЕсли;
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Маршруты

&НаСервереБезКонтекста
Функция СформироватьСписокДоступныхМаршрутов(Склад, ДатаОтгрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый СписокЗначений;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДоступныеМаршруты();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Результат.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("Маршрут"));
	
	Возврат Результат;
	
КонецФункции // СформироватьСписокДоступныхМаршрутов()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДоступныеМаршруты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Маршрут,
	|	Ссылка.КалендарьМаршрута КАК КалендарьМаршрута
	|ПОМЕСТИТЬ ДоступныеМаршруты
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
	|ГДЕ
	|	Не Ссылка.НеАктивен
	|	И Не Ссылка.ПометкаУдаления
	|	И Склад = &Склад
	|	И 
	|		ВЫБОР ДЕНЬНЕДЕЛИ(&ДатаОтгрузки)
	|			КОГДА 1
	|				ТОГДА ПН
	|			КОГДА 2
	|				ТОГДА ВТ
	|			КОГДА 3
	|				ТОГДА СР
	|			КОГДА 4
	|				ТОГДА ЧТ
	|			КОГДА 5
	|				ТОГДА ПТ
	|			КОГДА 6
	|				ТОГДА СБ
	|			КОГДА 7
	|				ТОГДА ВС
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка КАК Маршрут,
	|   Ссылка.КалендарьМаршрута КАК КалендарьМаршрута
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
	|ГДЕ
	|	СкладОтправитель = &Склад
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступныеМаршруты.Маршрут КАК Маршрут
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеМаршруты КАК ДоступныеМаршруты
	|		ПО КалендарныеГрафики.Календарь 		= ДоступныеМаршруты.КалендарьМаршрута
	|			И КалендарныеГрафики.Год    		= ГОД(&ДатаОтгрузки)
	|			И КалендарныеГрафики.ДатаГрафика	= НАЧАЛОПЕРИОДА(&ДатаОтгрузки, ДЕНЬ)
	|			И КалендарныеГрафики.ДеньВключенВГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоступныеМаршруты.Маршрут.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаДоступныеМаршруты()





// Пул отгрузки

&НаСервере
Процедура ЗагрузитьПулОтгрузки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПулОтгрузки();
	
	Запрос.УстановитьПараметр("Склад", 					Склад);
	Запрос.УстановитьПараметр("Маршрут", 				Маршрут);
	Запрос.УстановитьПараметр("ДатаОтгрузки", 			ДатаОтгрузки);
	Запрос.УстановитьПараметр("ТекущийПользователь", 	ПараметрыСеанса.ТекущийПользователь);
	
	ПулОтгрузки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Получатель", КешПолучатель);
	СтруктураПоиска.Вставить("АдресДоставки", КешАдресДоставки);
	СтруктураПоиска.Вставить("Назначение", КешНазначение);
	
	РезультатПоиска = ПулОтгрузки.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ПулОтгрузки.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьПулОтгрузки()

&НаСервере
Функция СформироватьТекстЗапросаПулОтгрузки()
	
	ТекстЗапроса = 
	
	// Адреса складов
	"ВЫБРАТЬ
	|	Ссылка 									КАК Склад,
	|	ВЫРАЗИТЬ(Представление КАК СТРОКА(150)) КАК АдресСклада
	|ПОМЕСТИТЬ СкладыКонтакнаяИнформация
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация
	|ГДЕ
	|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
	|;
	|
	// Документы отгрузки для складов которые работают по ордерной и неордерной схеме
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	РегистрНакопления.%ИмяРегистраОтгрузки%.Остатки(&ДатаОтгрузки, Склад = &Склад)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	// Все перемещения из документов отгрузки
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОтгрузки.ДокументОтгрузки 	КАК ПеремещениеТоваров,
	|	ПеремещениеТоваров.Назначение 		КАК Назначение
	|ПОМЕСТИТЬ ТаблицаНазначений
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО ПеремещениеТоваров.Ссылка = ДокументыОтгрузки.ДокументОтгрузки
	|;
	|
	// Формируем информацию о транзитных перемещениях
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров 	КАК ПеремещениеТоваров,
	|	ВЫБОР Назначение
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ 				КАК ТранзитноеПремещение,
	|	Назначение 			КАК Назначение
	|ПОМЕСТИТЬ ТаблицаТранзитныхПеремещений
	|ИЗ
	|	ТаблицаНазначений	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР Маршруты.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Маршруты.Получатель
	|		ИНАЧЕ Маршруты.Перевозчик
	|	КОНЕЦ 																						КАК Получатель,
	|	ВЫБОР Маршруты.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Маршруты.АдресДоставки
	|		ИНАЧЕ Маршруты.ОтделениеНовойПочты
	|	КОНЕЦ 																						КАК АдресПартнера,
	|	Маршруты.ПунктНазначения 																	КАК ПунктНазначения,
	|	ВЫБОР Маршруты.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		ИНАЧЕ Маршруты.Получатель
	|	КОНЕЦ 																						КАК ПолучательЧерезПеревозчика,
	|	ЕСТЬNULL(ТранзитныеПеремещения.ТранзитноеПремещение, 1) 									КАК ТранзитноеПремещение,
	|	ЕСТЬNULL(ТранзитныеПеремещения.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) 	КАК Назначение,
	|	Маршруты.ОтделениеНовойПочты																КАК ОтделениеНовойПочты,
	|	Маршруты.КонтактноеЛицо																		КАК КонтактноеЛицо,
	|	СУММА(Маршруты.ОбъявленнаяСтоимость) 														КАК ОбъявленнаяСтоимость,
	|	Маршруты.ПлатитПолучатель																	КАК ПлатитПолучатель,
	|	Маршруты.ВозвратнаяДоставка 																КАК ВозвратнаяДоставкаНП,
	|	Маршруты.АдресДоставки																		КАК АдресДоставки
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК Маршруты
	|		ПО ДокументыОтгрузки.ДокументОтгрузки = Маршруты.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТранзитныхПеремещений КАК ТранзитныеПеремещения
	|		ПО ДокументыОтгрузки.ДокументОтгрузки = ТранзитныеПеремещения.ПеремещениеТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР Маршруты.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Маршруты.Получатель
	|		ИНАЧЕ Маршруты.Перевозчик
	|	КОНЕЦ,
	|	ВЫБОР Маршруты.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА Маршруты.АдресДоставки
	|		ИНАЧЕ Маршруты.ОтделениеНовойПочты
	|	КОНЕЦ,
	|	Маршруты.ПунктНазначения,
	|	ВЫБОР Маршруты.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		ИНАЧЕ Маршруты.Получатель
	|	КОНЕЦ,
	|	ЕСТЬNULL(ТранзитныеПеремещения.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)),
	|	Маршруты.ОтделениеНовойПочты,
	|	Маршруты.КонтактноеЛицо,
	|	Маршруты.ПлатитПолучатель,
	|	Маршруты.ВозвратнаяДоставка,
	|	ЕСТЬNULL(ТранзитныеПеремещения.ТранзитноеПремещение, 1),
	|	Маршруты.АдресДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 	КАК Маршрут,
	|	Склад 	КАК ПунктОтправитель
	|ПОМЕСТИТЬ МаршрутыОтОтправителя
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
	|ГДЕ
	|	Склад = &Склад
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВозвратнаяДоставка.Ссылка,
	|	ВозвратнаяДоставка.СкладОтправитель
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВозвратнаяДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаОстатки.Получатель ССЫЛКА Справочник.Склады
	|					ТОГДА ВозвратнаяДоставка.СкладПолучатель = ТаблицаОстатки.Получатель
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВозвратнаяДоставка.СкладОтправитель = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокАдресов.Ссылка КАК Маршрут,
	|	СписокАдресов.ГородСклад КАК ПунктПолучатель
	|ПОМЕСТИТЬ МаршрутыКПолучателю
	|ИЗ
	|	Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО СписокАдресов.ГородСклад = ТаблицаОстатки.ПунктНазначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратнаяДоставка.Ссылка,
	|	ВозвратнаяДоставка.СкладПолучатель
	|ИЗ
	|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВозвратнаяДоставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаОстатки.Получатель ССЫЛКА Справочник.Склады
	|					ТОГДА ВозвратнаяДоставка.СкладПолучатель = ТаблицаОстатки.Получатель
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВозвратнаяДоставка.СкладОтправитель = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыОтОтправителя.ПунктОтправитель 				КАК ПунктОтправитель,
	|	МаршрутыКПолучателю.ПунктПолучатель 				КАК ПунктПолучатель,
	|	МаршрутыОтОтправителя.Маршрут 						КАК Маршрут,
	|	МаршрутыОтОтправителя.Маршрут.КалендарьМаршрута 	КАК КалендарьМаршрута
	|ПОМЕСТИТЬ МаршрутыПрямойДоставки
	|ИЗ
	|	МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыКПолучателю КАК МаршрутыКПолучателю
	|		ПО МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыКонтакнаяИнформация КАК АдресаСкладаОтправителя
	|		ПО МаршрутыОтОтправителя.ПунктОтправитель = АдресаСкладаОтправителя.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыКонтакнаяИнформация КАК АдресаСкладаПолучателя
	|		ПО (ВЫБОР
	|				КОГДА МаршрутыКПолучателю.ПунктПолучатель ССЫЛКА Справочник.Склады
	|					ТОГДА МаршрутыКПолучателю.ПунктПолучатель = АдресаСкладаПолучателя.Склад
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ЕСТЬNULL(АдресаСкладаОтправителя.АдресСклада, """") <> ЕСТЬNULL(АдресаСкладаПолучателя.АдресСклада, """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыПрямойДоставки.ПунктОтправитель,
	|	МаршрутыПрямойДоставки.ПунктПолучатель,
	|	МаршрутыПрямойДоставки.Маршрут,
	|	МаршрутыПрямойДоставки.КалендарьМаршрута,
	|	МИНИМУМ(КалендарныеГрафики.ДатаГрафика) КАК ДатаВыезда
	|ПОМЕСТИТЬ ДоступныеМаршруты
	|ИЗ
	|	МаршрутыПрямойДоставки КАК МаршрутыПрямойДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО (КалендарныеГрафики.Календарь = МаршрутыПрямойДоставки.КалендарьМаршрута)
	|			И (КалендарныеГрафики.ДатаГрафика >= &ДатаОтгрузки)
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутыПрямойДоставки.ПунктОтправитель,
	|	МаршрутыПрямойДоставки.ПунктПолучатель,
	|	МаршрутыПрямойДоставки.Маршрут,
	|	МаршрутыПрямойДоставки.КалендарьМаршрута
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокМест
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	НЕ Архивный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место.Владелец 						КАК Получатель,
	|	Место.Назначение    				КАК Назначение,
	|	Место.ПолучательЧерезПеревозчика    КАК ПолучательЧерезПеревозчика,
	|	Пользователь						КАК Пользователь
	|ПОМЕСТИТЬ СписокПолучателейПредварительный
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад = &Склад И Место В (ВЫБРАТЬ Ссылка ИЗ СписокМест))
	|ГДЕ
	|	СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации), ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена))
	|	И ВариантМаршрута = &Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Получатель 					КАК Получатель,
	|	Назначение 					КАК Назначение,
	|	ПолучательЧерезПеревозчика  КАК ПолучательЧерезПеревозчика,
	|	0							КАК ПартнерКомплектуется
	|ПОМЕСТИТЬ ПолучателиТекущегоПользователя
	|ИЗ
	|	СписокПолучателейПредварительный
	|ГДЕ
	|	Пользователь = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Получатель 					КАК Получатель,
	|	Назначение 					КАК Назначение,
	|	ПолучательЧерезПеревозчика  КАК ПолучательЧерезПеревозчика,
	|	1							КАК ПартнерКомплектуется
	|ПОМЕСТИТЬ ПолучателиДругихПользователей
	|ИЗ
	|	СписокПолучателейПредварительный
	|ГДЕ
	|	(Получатель, Назначение, ПолучательЧерезПеревозчика) НЕ В 
	|				(ВЫБРАТЬ 
	|					Получатель, 
	|					Назначение, 
	|					ПолучательЧерезПеревозчика 
	|				ИЗ
	|					ПолучателиТекущегоПользователя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Получатель 					КАК Получатель,
	|	Назначение 					КАК Назначение,
	|	ПолучательЧерезПеревозчика 	КАК ПолучательЧерезПеревозчика,
	|	ПартнерКомплектуется		КАК ПартнерКомплектуется
	|ПОМЕСТИТЬ СписокПользователей
	|ИЗ
	|	ПолучателиТекущегоПользователя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Получатель 					КАК Получатель,
	|	Назначение 					КАК Назначение,
	|	ПолучательЧерезПеревозчика 	КАК ПолучательЧерезПеревозчика,
	|	ПартнерКомплектуется		КАК ПартнерКомплектуется
	|ИЗ
	|	ПолучателиДругихПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатки.Получатель 								КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаОстатки.Получатель) 			КАК ПолучательПредставление,
	|	ТаблицаОстатки.ПолучательЧерезПеревозчика 				КАК ПолучательЧерезПеревозчика,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатки.ПолучательЧерезПеревозчика ССЫЛКА Справочник.Склады
	|			ТОГДА ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаОстатки.ПолучательЧерезПеревозчика)
	|		ИНАЧЕ ТаблицаОстатки.ПолучательЧерезПеревозчика
	|	КОНЕЦ 													КАК ПолучательЧерезПеревозчикаПредставление,
	|	ТаблицаОстатки.ТранзитноеПремещение 					КАК ТранзитноеПремещение,
	|	ТаблицаОстатки.Назначение 								КАК Назначение,
	|	ТаблицаОстатки.ОтделениеНовойПочты						КАК ОтделениеНовойПочты,
	|	ТаблицаОстатки.КонтактноеЛицо							КАК КонтактноеЛицо,
	|	ТаблицаОстатки.ОбъявленнаяСтоимость 					КАК ОбъявленнаяСтоимость,
	|	ТаблицаОстатки.ПлатитПолучатель							КАК ПлатитПолучатель,
	|	ТаблицаОстатки.АдресПартнера							КАК АдресПартнера,
	|	ТаблицаОстатки.ВозвратнаяДоставкаНП						КАК ВозвратнаяДоставкаНП,
	|	ТаблицаОстатки.АдресДоставки							КАК АдресДоставки,
	|	ЕСТЬNULL(СписокПользователей.ПартнерКомплектуется, 0)	КАК ПартнерКомплектуется
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаршрутыПрямойДоставки КАК МаршрутыПрямойДоставки
	|		ПО (МаршрутыПрямойДоставки.ПунктОтправитель = &Склад)
	|			И ТаблицаОстатки.ПунктНазначения = МаршрутыПрямойДоставки.ПунктПолучатель
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПользователей КАК СписокПользователей
	|		ПО ТаблицаОстатки.Получатель 					= СписокПользователей.Получатель
	|			И ТаблицаОстатки.ПолучательЧерезПеревозчика = СписокПользователей.ПолучательЧерезПеревозчика
	|			И ТаблицаОстатки.Назначение 				= СписокПользователей.Назначение
	|
	|ГДЕ
	|	ЕСТЬNULL(МаршрутыПрямойДоставки.Маршрут, ЗНАЧЕНИЕ(Справочник.ВариантыМаршрутов.ПустаяСсылка)) = &Маршрут";
	
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистраОтгрузки%", ?(КешОрдернаяСхемаСклада, "ТоварыКОтгрузке", "КТС_ОтгрузкаИзБезордерныхСкладов"));
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПулОтгрузки()



// Процедура-обработчик обновления таблиц ПулНоменклатуры и МестаОтгрузки вызывается 1 раз в 60 сек
//
&НаКлиенте
Процедура ВыполнитьОбновлениеТаблиц()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаОтгрузкаМест Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКешНаКлиенте();
	ВыполнитьОбновлениеТаблицНаСервере();
КонецПроцедуры // ВыполнитьОбновлениеТаблиц()

&НаСервере
Процедура ВыполнитьОбновлениеТаблицНаСервере()
	Если ОчередьОбновления = 0 Тогда
		ЗагрузитьПулОтгрузки();
		ОчередьОбновления = 1;
		Возврат;
	КонецЕсли;
	Если ОчередьОбновления = 1 Тогда 
		//ЗагрузитьСписокМест();
		ОчередьОбновления = 0;
		Возврат;
	КонецЕсли;
КонецПроцедуры // ВыполнитьОбновлениеТаблицНаСервере()




// Функциональные опции

// Процедура устанавливает видимость элементов формы в соответсвии с
// функциональными опциями
//
&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	ФО_ИспользованиеХарактеристик = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	
	Элементы.ПулНоменклатурыХарактеристика.Видимость 	= ФО_ИспользованиеХарактеристик;
	Элементы.ПодборНоменклатурыХарактеристика.Видимость = ФО_ИспользованиеХарактеристик;
	
КонецПроцедуры // УстановитьВидимостьЭлементовФормы()



&НаСервере
Процедура УстановитьЗагаловокОбработки()
	
	Если Маршрут.Пустая() Тогда
		Заголовок = НСтр("ru='Отгрузка мест'");
	КонецЕсли;
	
	ТекущаяДата  = ТекущаяДата();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаголовкаОбработки();
	
	Запрос.УстановитьПараметр("Календарь", Маршрут.КалендарьМаршрута);
	Запрос.УстановитьПараметр("Год", Год(ТекущаяДата));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("НомерДня", ДеньНедели(ТекущаяДата));
	Запрос.УстановитьПараметр("ТекущееВремя", Час(ТекущаяДата));
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	ВыборкаДата = РезультатПакета[0].Выбрать();
	ВыборкаЧас  = РезультатПакета[1].Выбрать();
	
	ТекстЗаголовок = НСтр("ru='Отгрузка мест. Выезд автомобиля %Дата% %ВремяНачала%'");
	ТекстЗаголовок = СтрЗаменить(ТекстЗаголовок, "%Дата%", ?(ВыборкаДата.Следующий(), Формат(ВыборкаДата.ДатаГрафика, "ДФ='дд.ММ.гггг'"), ""));
	ТекстЗаголовок = СтрЗаменить(ТекстЗаголовок, "%ВремяНачала%", ?(ВыборкаЧас.Следующий(), Формат(ВыборкаЧас.ВремяНачала, "ДФ='ЧЧ:мм:сс'"), ""));
	
	Заголовок = ТекстЗаголовок;
	
КонецПроцедуры // УстановитьЗагаловокОбработки()

&НаСервере
Функция ПолучитьТекстЗапросаЗаголовкаОбработки()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МИНИМУМ(ДатаГрафика) КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики
	|ГДЕ
	|	Календарь = &Календарь
	|	И Год = &Год
	|	И ДатаГрафика >= &ТекущаяДата
	|	И ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВремяОкончания) КАК ВремяНачала
	|ИЗ
	|	Справочник.Календари.РасписаниеРаботы
	|ГДЕ
	|	Ссылка = &Календарь
	|	И НомерДня = &НомерДня
	|	И ВремяНачала >= &ТекущееВремя";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаЗаголовкаОбработки()




// Пул отгрузки

// Процедура устанавливает необходимые отборы и параметры 
// динамического списка ПулОтгрузки
//
&НаСервере
Процедура УстановитьОтборы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПулНоменклатуры.Очистить();
	
	КешОрдернаяСхемаСклада = Склад.ИспользоватьОрдернуюСхемуПриОтгрузке;
	//Элементы.ГруппаСерийныеНомера.Видимость = КешОрдернаяСхемаСклада;
	
	ЗагрузитьПулОтгрузки();
	
	ЗагрузитьСписокМест();
	
	ЗагрузитьСписокЗадач();
	
	Если Места.Количество() = 0 Тогда
		ПодборНоменклатуры.Очистить();
		ТаблицаРасходСН.Очистить();
		ТаблицаВыбранныеСН.Очистить();
	КонецЕсли;
	
	Если ПодборНоменклатуры.Количество() = 0 Тогда
		ПодборНоменклатуры.Очистить();
		ТаблицаРасходСН.Очистить();
		ТаблицаВыбранныеСН.Очистить();
		ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	КонецЕсли;
	
	УстановитьЗагаловокОбработки();
	
	ВосстановитьТекущиеСтрокиНаСервере();
	
КонецПроцедуры // УстановитьОтборыИпараметрыПулОтгрузки()

// Загружаем список мест по отбору
//
&НаСервере
Процедура ЗагрузитьСписокМест()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокМест();	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ОтборМаршрут", Маршрут);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Места", Места.Выгрузить());
	
	Места.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Места.Количество() = 0 Тогда
		ПодборНоменклатуры.Очистить();
		ТаблицаРасходСН.Очистить();
		ТаблицаВыбранныеСН.Очистить();
		ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	КонецЕсли;
	
	СформироватьЗаголовокГруппыМест();
	
	СтруктураПоиска = Новый Структура("Место", КешМесто);
	РезультатПоиска = Места.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.Места.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокМест()

&НаСервере
Функция ПолучитьТекстЗапросаСписокМест()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Ссылка КАК Место
	|ПОМЕСТИТЬ МестаПоМаршруту
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	НЕ Архивный
	|	И НЕ ЭтоЗадача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место,
	|	Место.Владелец КАК Получатель,
	|	СтатусОтгрузки КАК СтатусОтгрузки
	|ПОМЕСТИТЬ КешМеста
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(
	|			,
	|			Склад = &Склад
	|				И Место В
	|					(ВЫБРАТЬ
	|						МестаПоМаршруту.Место
	|					ИЗ
	|						МестаПоМаршруту))
	|ГДЕ
	|	ВариантМаршрута = &ОтборМаршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешМеста.Место КАК Место,
	|	КешМеста.Получатель КАК Получатель,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КешМеста.Получатель) КАК ПолучательПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КешМеста.Место) КАК МестоПредставление,
	|	ВЫБОР КешМеста.СтатусОтгрузки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Укомплектовано,
	|	ВЫБОР
	|		КОГДА КешМеста.Место.Ответственный = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобственноеМесто,
	|	КешМеста.Место.ПолучательЧерезПеревозчика КАК ПолучательЧерезПеревозчика
	|ИЗ
	|	КешМеста КАК КешМеста
	|ГДЕ
	|	КешМеста.СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации), ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена))";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСписокМест()



&НаСервере
Процедура ЗагрузитьСписокЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаСписокЗадач();
	
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена);
	
	СписокЗадач.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СформироватьЗаголовокГруппыЗадач();
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстЗапросаСписокЗадач()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Место КАК Задача,
	|	ПРЕДСТАВЛЕНИЕ(Место) КАК ЗадачаПредставление,
	|	ВЫБОР
	|		КОГДА Место.Транзит
	|			ТОГДА Место.ТранзитныйСклад
	|		ИНАЧЕ Место.Владелец
	|	КОНЕЦ КАК Получатель,
	|	ВЫБОР
	|		КОГДА Место.Транзит
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Место.ТранзитныйСклад)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Место.Владелец)
	|	КОНЕЦ КАК ПолучательПредставление,
	|	Отправитель КАК Отправитель,
	|	Пользователь КАК АвторЗадачи,
	|	Место.Транзит КАК Транзит,
	|	Место.Операция КАК Операция
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, (Отправитель = &Склад %1))
	|ГДЕ
	|	СтатусОтгрузки 	  = &СтатусОтгрузки
	|	И ВариантМаршрута = &Маршрут
	|	И Период		  < &ДатаОтгрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период Убыв";
	
	Если Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%1", "ИЛИ Отправитель ССЫЛКА Справочник.Партнеры");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%1", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаСписокЗадач()


// Пул номенклатуры

&НаКлиенте
Процедура ВывестиСписокДокументовПоНоменклатуре()
	
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	ТДПулОтгрузки 	  = Элементы.ПулОтгрузки.ТекущиеДанные;
	Если ТДПулОтгрузки = Неопределено ИЛИ ТДПулНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Маршрут", Маршрут);
	ПараметрыФормы.Вставить("Номенклатура", ТДПулНоменклатуры.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТДПулНоменклатуры.Характеристика);
	ПараметрыФормы.Вставить("АдресДоставки", ТДПулОтгрузки.АдресДоставки);
	ПараметрыФормы.Вставить("АдресПартнера", ТДПулОтгрузки.АдресПартнера);
	ПараметрыФормы.Вставить("Получатель", ТДПулОтгрузки.Получатель);
	ПараметрыФормы.Вставить("ПолучательЧерезПеревозчика", ТДПулОтгрузки.ПолучательЧерезПеревозчика);
	ПараметрыФормы.Вставить("Назначение", ТДПулОтгрузки.Назначение);
	ПараметрыФормы.Вставить("ВозвратнаяДоставкаНП", ТДПулОтгрузки.ВозвратнаяДоставкаНП);
	ПараметрыФормы.Вставить("ПлатитПолучатель", ТДПулОтгрузки.ПлатитПолучатель);
	
	ПараметрыФормы.Вставить("ОрдернаяСхемаСклада", КешОрдернаяСхемаСклада);
	ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаПросмотраДокументов", ПараметрыФормы);	
	
КонецПроцедуры // ВывестиСписокДокументовПоНоменклатуре()


&НаКлиенте
Процедура ЗагрузитьПулНоменклатурыНаКлиенте()
	ЗаполнитьКешНаКлиенте();
	ТДПулОтгрузки 	  = Элементы.ПулОтгрузки.ТекущиеДанные;
	ТДПулНоменклатуры = Элементы.ПулНоменклатуры.ТекущиеДанные;
	Если ТДПулНоменклатуры <> Неопределено Тогда
		КешНоменклатураПодбор = ТДПулНоменклатуры.Номенклатура
	КонецЕсли;
	Если ТДПулОтгрузки <> Неопределено Тогда
		ТДСтруктура = ТекущиеДанныеПулОтгрузки(ТДПулОтгрузки);
		ЗагрузитьПулНоменклатуры(ТДСтруктура);
	Иначе
		ПулНоменклатуры.Очистить();
	КонецЕсли; 
	Если Элементы.ГруппаМестаИЗадачиСтраницы.ТекущаяСтраница = Элементы.ГруппаМеста Тогда
		ТекущийЭлемент = Элементы.ТСД_Номенклатура;
	КонецЕсли;
КонецПроцедуры // ЗагрузитьПулНоменклатурыНаКлиенте()

// Загрузка номенклатуры в таблицу ПулНоменклатуры в соответствии с выбранной строчкой
// в динамическом списке ПулОтгрузки
//
// Параметры:
// 	СправочникСсылка.Партнеры, СправочникСсылка.Склады - получатель груза, по которому нужно
//  сформировать пул номенклатуры
//
&НаСервере
Процедура ЗагрузитьПулНоменклатуры(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПулНоменклатуры(СтруктураПараметров.Получатель);	
	Запрос.УстановитьПараметр("Получатель", 		 		СтруктураПараметров.Получатель);
	Запрос.УстановитьПараметр("ДатаОтгрузки", 		 		ДатаОтгрузки);
	Запрос.УстановитьПараметр("Склад", 				 		Склад);
	Запрос.УстановитьПараметр("ОтборМаршрут", 		 		Маршрут);
	Запрос.УстановитьПараметр("АдресДоставки", 		 		СтруктураПараметров.АдресДоставки);
	Запрос.УстановитьПараметр("Назначение",  				СтруктураПараметров.Назначение);
	Запрос.УстановитьПараметр("ВозвратнаяДоставкаНП",		СтруктураПараметров.ВозвратнаяДоставкаНП);
	Запрос.УстановитьПараметр("ПлатитПолучатель", 	 		СтруктураПараметров.ПлатитПолучатель);
	Запрос.УстановитьПараметр("АдресПартнера",		 		СтруктураПараметров.АдресПартнера);
	Запрос.УстановитьПараметр("ПолучательЧерезПеревозчика",	СтруктураПараметров.ПолучательЧерезПеревозчика);
	
	ТабЗнч	= Новый ТаблицаЗначений; 
	ТабЗнч.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"),				"Номенклатура");
	ТабЗнч.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),	"Характеристика");
	ТабЗнч.Колонки.Добавить("КОтгрузке",		Новый ОписаниеТипов("Число"),		"КОтгрузке");
	ТабЗнч.Колонки.Добавить("ОсновнаяЯчейка",	Новый ОписаниеТипов("Строка"),		"ОсновнаяЯчейка");
	ТабЗнч.Колонки.Добавить("ДопЯчейка",		Новый ОписаниеТипов("Строка"),		"ДопЯчейка");
	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	Пока Выборка.Следующий() Цикл
		ВыборкаНменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНменклатура.Следующий() Цикл
			ВыборкаКоличество  = ВыборкаНменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКоличество.Следующий() Цикл
				ВыборкаХарактеристика = ВыборкаКоличество.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаХарактеристика.Следующий() Цикл
					
					ВыборкаЯчейка 	= 	ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Номенклатура 	= 	ВыборкаХарактеристика.Номенклатура;
					Характеристика	=	ВыборкаХарактеристика.Характеристика;
					НетШтрихкода	=	ВыборкаХарактеристика.НетШтрихкода;
					КОтгрузке 		=   ВыборкаХарактеристика.КОтгрузке;
					
					Строка						= ТабЗнч.Добавить();
					Строка.Номенклатура			= Номенклатура;
					Строка.Характеристика		= Характеристика;
					Строка.КОтгрузке			= КОтгрузке;
					
					Пока ВыборкаЯчейка.Следующий() Цикл
						ВыборкаДопЯчейка 			= ВыборкаЯчейка.Выбрать();
						ДопЯчейка 		=   "";
						Пока ВыборкаДопЯчейка.Следующий() Цикл
							
							ОсновнаяЯчейка				=   ВыборкаДопЯчейка.ОсновнаяЯчейка;
							ДопЯчейка					=   ДопЯчейка + ВыборкаДопЯчейка.ДополнительЯчейка + ", ";
							Строка.ОсновнаяЯчейка		= 	ОсновнаяЯчейка;
							Строка.ДопЯчейка			= 	ДопЯчейка;
							
						КонецЦикла; 
						
						
					КонецЦикла;	
				КонецЦикла;	 
			КонецЦикла;	 
		КонецЦикла;
		
		
	КонецЦикла;	 
	
	
	ПулНоменклатуры.Загрузить(ТабЗнч);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", КешНоменклатураПодбор);
	СтруктураПоиска.Вставить("Характеристика", КешХарактеристикаПодбор);
	
	РезультатПоиска = ПулНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ПулНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьПулНоменклатуры()



// Шапка запроса пула номенклатуры нужна для отбора необходимых товаров для отгрузки
// используется в нескольких местах
//
&НаСервере
Функция СформироватьШапкуЗапросаПулНоменклатуры()
	
	ТекстЗапроса = "
	////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ссылка 			КАК Склад,
	|	Представление 	КАК АдресДоставки	
	|ПОМЕСТИТЬ СкладыКонтакнаяИнформация
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация
	|ГДЕ
	|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
	|;
	|
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.%РесурсКоличество% КАК КОтгрузке
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	РегистрНакопления.%ИмяРегистраОтгрузки%.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК ТоварыКОтгрузке
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОтгрузки.ДокументОтгрузки КАК ПеремещениеТоваров,
	|	ДокументыОтгрузки.Номенклатура КАК Номенклатура,
	|	ДокументыОтгрузки.Характеристика КАК Характеристика,
	|	ПеремещениеТоваров.Назначение КАК Назначение
	|ПОМЕСТИТЬ ТаблицаТранзитныхПеремещений
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ПО ПеремещениеТоваров.Ссылка = ДокументыОтгрузки.ДокументОтгрузки
	|			И ПеремещениеТоваров.Номенклатура = ДокументыОтгрузки.Номенклатура
	|			И ПеремещениеТоваров.Характеристика = ДокументыОтгрузки.Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР ДокументыПоМаршрутам.Перевозчик
	|		КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ДокументыПоМаршрутам.Получатель
	|		ИНАЧЕ ДокументыПоМаршрутам.Перевозчик
	|	КОНЕЦ КАК Получатель,
	|	ДокументыОтгрузки.Номенклатура КАК Номенклатура,
	|	ДокументыОтгрузки.Характеристика КАК Характеристика,
	|	ДокументыОтгрузки.КОтгрузке КАК КОтгрузке
	|ПОМЕСТИТЬ КешНоменклатура
	| ИЗ
	| ДокументыОтгрузки КАК ДокументыОтгрузки
	| 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК ДокументыПоМаршрутам
	|	ПО ДокументыОтгрузки.ДокументОтгрузки = ДокументыПоМаршрутам.Регистратор
	|		И (ВЫБОР ДокументыПоМаршрутам.Перевозчик
	|			КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|				ТОГДА ДокументыПоМаршрутам.Получатель		 = &Получатель
	|						И ДокументыПоМаршрутам.АдресДоставки = &АдресДоставки
	|			ИНАЧЕ ДокументыПоМаршрутам.Перевозчик 						= &Получатель
	|					И ДокументыПоМаршрутам.ОтделениеНовойПочты 			= &АдресПартнера 
	|					И ДокументыПоМаршрутам.ВозвратнаяДоставка 			= &ВозвратнаяДоставкаНП 
	|					И ДокументыПоМаршрутам.ПлатитПолучатель 			= &ПлатитПолучатель 
	|					И ДокументыПоМаршрутам.Регистратор.Партнер = &ПолучательЧерезПеревозчика
	|			КОНЕЦ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТранзитныхПеремещений КАК ТаблицаТранзитныхПеремещений
	|	ПО ДокументыОтгрузки.ДокументОтгрузки = ТаблицаТранзитныхПеремещений.ПеремещениеТоваров
	|		И ДокументыОтгрузки.Номенклатура = ТаблицаТранзитныхПеремещений.Номенклатура
	|		И ДокументыОтгрузки.Характеристика = ТаблицаТранзитныхПеремещений.Характеристика
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТаблицаТранзитныхПеремещений.Назначение ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ТаблицаТранзитныхПеремещений.Назначение = &Назначение
	|	КОНЕЦ
	|;";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистраОтгрузки%", ?(КешОрдернаяСхемаСклада, "ТоварыКОтгрузке", "КТС_ОтгрузкаИзБезордерныхСкладов"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%РесурсКоличество%", ?(КешОрдернаяСхемаСклада, "КОтгрузкеОстаток", "КоличествоОстаток"));
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьШапкуЗапросаПулаНоменклатуры()

&НаСервере
Функция ПолучитьТекстЗапросаПулНоменклатуры(Получатель)
	
	ТекстЗапроса = СформироватьШапкуЗапросаПулНоменклатуры();
	ТекстЗапроса = ТекстЗапроса + "
	////////////////////////////////////////////////////////////////////////////////
	// Таблицу необходимо свернуть, так как если в отгрузку попадают
	// реализации с одинаковыми товарами - в пул попадают несколько позиций
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	СУММА(КОтгрузке) КАК КОтгрузке
	|ПОМЕСТИТЬ КешПулНоменклатуры
	|ИЗ
	|	КешНоменклатура
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	Ссылка КАК Место
	|ПОМЕСТИТЬ КешМеста
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	НЕ Архивный
	|	И Владелец = &Получатель
	|;
	|
	////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место,
	|	СтатусОтгрузки КАК СтатусОтгрузки
	|ПОМЕСТИТЬ МестаОтгрузки
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(,
	|					Склад = &Склад
	|						И Место В (ВЫБРАТЬ Место ИЗ КешМеста))
	|ГДЕ
	|	СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации))
	|;
	////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	СУММА(Количество) КАК Количество
	|ПОМЕСТИТЬ НоменклатураМестаОтгрузки
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место В (ВЫБРАТЬ Место ИЗ МестаОтгрузки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК НетШтрихкода
	|ПОМЕСТИТЬ ИспользованиеШтрихкода
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры
	|ГДЕ
	|	(Номенклатура, Характеристика) В
	|		(ВЫБРАТЬ
	|			Номенклатура,
	|			Характеристика
	|		 ИЗ
	|			КешПулНоменклатуры)
	|СГРУППИРОВАТЬ ПО	
	|	Номенклатура,
	|	Характеристика	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешПулНоменклатуры.Номенклатура КАК Номенклатура,
	|	КешПулНоменклатуры.Характеристика КАК Характеристика,
	|	КешПулНоменклатуры.КОтгрузке - ЕСТЬNULL(НоменклатураМестаОтгрузки.Количество, 0) КАК КОтгрузке,
	|	ЕСТЬNULL(ИспользованиеШтрихкода.НетШтрихкода, ИСТИНА) КАК НетШтрихкода,
	|	РазмещениеОсновнаяЯчейка.Ячейка КАК ОсновнаяЯчейка,
	|	РазмещениеОстальныеЯчейки.Ячейка КАК ДополнительЯчейка
	|ИЗ
	|	КешПулНоменклатуры КАК КешПулНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураМестаОтгрузки КАК НоменклатураМестаОтгрузки
	|		ПО КешПулНоменклатуры.Номенклатура = НоменклатураМестаОтгрузки.Номенклатура
	|			И КешПулНоменклатуры.Характеристика = НоменклатураМестаОтгрузки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеШтрихкода КАК ИспользованиеШтрихкода
	|		ПО КешПулНоменклатуры.Номенклатура = ИспользованиеШтрихкода.Номенклатура
	|			И КешПулНоменклатуры.Характеристика = ИспользованиеШтрихкода.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО КешПулНоменклатуры.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = &Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО КешПулНоменклатуры.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = &Склад)
	|ГДЕ
	|	КешПулНоменклатуры.КОтгрузке - ЕСТЬNULL(НоменклатураМестаОтгрузки.Количество, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КешПулНоменклатуры.Номенклатура.ВидНоменклатуры.Наименование,
	|	КешПулНоменклатуры.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	КОтгрузке,
	|	НетШтрихкода,
	|	ОсновнаяЯчейка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПулНоменклатуры()






// Штрихкодирование


// Добавляет номенклатуру по штрих коду в таблицу Подбор номенклатуры
//
&НаКлиенте
Процедура ДобавитьНоменклатуруПоСерийномуНомеруИлиШтрихКоду()
	
	Если ПустаяСтрока(ТСД_Номенклатура) Тогда
		ПараметрыФормы = Новый Структура("СообщениеОбОшибке", НСтр("ru='Вместо штрихкода введена пустая строка.'"));
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаОшибки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ТДМеста		    = Элементы.Места.ТекущиеДанные;
	ТДПулОтгрузки   = Элементы.ПулОтгрузки.ТекущиеДанные;
	ДанныеСтруктурыПулОтгрузки = ДанныеДляПроверкиНаДоставку(ТДМеста);
	
	
	Если ТДМеста = Неопределено ИЛИ ТДПулОтгрузки = Неопределено Тогда
		ПараметрыФормы = Новый Структура("СообщениеОбОшибке", НСтр("ru='Для выбора номенклатуры с помощью штрихкодов или серийного номера, необходимо выбрать место и партнера(склад)'"));
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаОшибки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
		ТСД_Номенклатура = "";
		Возврат;
	КонецЕсли;
	
	ОбновлятьПулНоменклатуры = ТДМеста.Получатель = ТДПулОтгрузки.Получатель;
	
	Если ТДМеста.Укомплектовано Тогда
		ПараметрыФормы = Новый Структура("СообщениеОбОшибке", НСтр("ru='Место уже укомплектовано, добавление номенклатуры запрещено'"));
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаОшибки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
		ТСД_Номенклатура = "";
		Возврат;
	КонецЕсли;
	
	ВводПоШтрихкоду 	= Ложь;
	СообщениеОбОшибке   = "";
	
	ДобавитьНоменклатуруПоСерийномуНомеру(ТДМеста.Место, ТСД_Номенклатура, ВводПоШтрихкоду, СообщениеОбОшибке, ДанныеСтруктурыПулОтгрузки);
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		ПараметрыФормы = Новый Структура("СообщениеОбОшибке", СообщениеОбОшибке);
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаОшибки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	Если ВводПоШтрихкоду Тогда	
		ВвестиКоличество = Ложь;
		
		СтруктураДанные = ДобавитьНоменклатуруПоШтрихКодуНаСервере(ТДМеста.Место, ТСД_Номенклатура, ТДПулОтгрузки.АдресДоставки, ОбновлятьПулНоменклатуры, ВвестиКоличество, СообщениеОбОшибке, ДанныеСтруктурыПулОтгрузки);
		
		Если ВвестиКоличество Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", СтруктураДанные.Номенклатура);
			ФормаНабивкиНоменклатуры	= ОткрытьФормуМодально("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаНабивкиНоменклатуры", ПараметрыФормы);
			Если ФормаНабивкиНоменклатуры = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			
			ДобавитьНоменклатуруПоСтруктуреДанных(ФормаНабивкиНоменклатуры, ТДМеста.Место, СтруктураДанные, ТДПулОтгрузки.АдресДоставки, ОбновлятьПулНоменклатуры,СообщениеОбОшибке, ДанныеСтруктурыПулОтгрузки);
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			//Сообщить(СообщениеОбОшибке);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
			ФормаОшибки	   = ОткрытьФормуМодально("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаОшибки", ПараметрыФормы);
			
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ТСД_Номенклатура = "";
	
КонецПроцедуры // ДобавитьНоменклатуруПоШтрихКоду()

&НаСервере

Процедура ДобавитьНоменклатуруПоСерийномуНомеру(Место, ТСД_Номенклатура, ВводПоШтрихкоду, СообщениеОбОшибке,ТДПулОтгрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьВладельцаМеста(Место) Тогда
		СообщениеОбОшибке = НСтр("ru='Запрещено комплектовать место другого пользователя.'");
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		СообщениеОбОшибке = НСтр("ru='Место уже укомплектовано.'");
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьНоменклатуруПоСерийномуНомеру(ТСД_Номенклатура, ВводПоШтрихкоду);
	
	Если ВводПоШтрихкоду Тогда
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементОтгрузкаМест = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементОтгрузкаМест.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементОтгрузкаМест.УстановитьЗначение("Склад", Склад);
	ЭлементОтгрузкаМест.УстановитьЗначение("Место", Место);
	
	ЭлементТоварыКОтгрузке 		 = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
	ЭлементТоварыКОтгрузке.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Номенклатура", 	СтруктураДанные.Номенклатура);
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Склад", 			Склад);
	
	ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
	ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	Блокировка.Заблокировать();
	
	КоличествоНаЗапись = ПолучитьКоличествоНаЗапись(Место, СтруктураДанные);
	ДобавитьНоменклатуру(Место, СтруктураДанные, КоличествоНаЗапись);
	
	Если ПроверитьПравильностьПостроенияМеста(Место, Ложь, ВводПоШтрихкоду, ТДПулОтгрузки) Тогда
		
		ВыполнитьЗаписьСерийныеНомераНоменклатуры(Место,Истина,Склад,СтруктураДанные.Номенклатура,,СтруктураДанные.СерийныйНомер);
		
		ЗафиксироватьТранзакцию();
		
		ЗагрузитьСвободныеСерийныеНомера(Место, СтруктураДанные.Номенклатура);
		ЗагрузитьВыбранныеСерийныеНомера(Место, СтруктураДанные.Номенклатура);
		
		ЗагрузитьНоменклатуруМеста(Место, СтруктураДанные.Номенклатура);
		
		РеквизитыМеста = ДанныеМестаВСтруктуру(Место, ТДПулОтгрузки);
		ЗагрузитьПулНоменклатуры(РеквизитыМеста);
		
		ВыполнитьОбновлениеТаблицНаСервере();
		ВосстановитьТекущиеСтрокиНаСервере();
		
	Иначе
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Место уже укомплектовано.'");
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьНоменклатуруПоСерийномуНомеру()

&НаСервере
Функция ПолучитьНоменклатуруПоСерийномуНомеру(СерийныйНомер, ВводПоШтрихкоду)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СерийныйНомер", ВРег(СерийныйНомер));
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВводПоШтрихкоду = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	
	ТаблицаНоменклатуры = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаНоменклатуры.Количество()>1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Найдено несколько номенклатур с данным серийным номером. Введите штрихкод.'"),,"ТСД_Номенклатура");
		ВводПоШтрихкоду = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаНоменклатуры[0];
	
КонецФункции // ПолучитьНоменклатуруПоСерийномуНомеру()

&НаСервере
Функция ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру()
	
	Если КешОрдернаяСхемаСклада Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Место КАК Место
		|ПОМЕСТИТЬ КешМеста
		|ИЗ
		|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад = &Склад)
		|ГДЕ
		|	СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации))
		|;
		|
		|ВЫБРАТЬ
		|	СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ КешСерийныеНомераМест
		|ИЗ
		|	РегистрСведений.МестаСерийныеНомераНоменклатуры
		|ГДЕ
		|	Склад = &Склад
		|И 	Место В (ВЫБРАТЬ Место ИЗ КешМеста)
		|;
		|
		|ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	Характеристика КАК Характеристика,
		|	1 КАК Коэффициент,
		|	СерийныеНомера КАК СерийныйНомер
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
		|			,
		|			Склад = &Склад
		|				И СерийныеНомера.Код = &СерийныйНомер
		|				И СерийныеНомера НЕ В (ВЫБРАТЬ СерийныйНомер ИЗ КешСерийныеНомераМест))";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДокументОтгрузки КАК ДокументОтгрузки,
		|	Склад КАК Склад,
		|	Номенклатура КАК Номенклатура,
		|	Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТаблицаОтгрузки
		|ИЗ
		|	РегистрНакопления.КТС_ОтгрузкаИзБезордерныхСкладов.Остатки(&ДатаОтгрузки, Склад=&Склад И Номенклатура.ИспользоватьСерийныеНомера)
		|;
		|
		|ВЫБРАТЬ
		|	РегистрСерийныеНомера.Номенклатура КАК Номенклатура,
		|	РегистрСерийныеНомера.Характеристика КАК Характеристика,
		|	1 КАК Коэффициент,
		|	РегистрСерийныеНомера.СерийныеНомера КАК СерийныйНомер
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(,,Регистратор,
		|							(Номенклатура, Характеристика, Склад) В 
		|								(ВЫБРАТЬ
		|									Номенклатура КАК Номенклатура,
		|									Характеристика КАК Характеристика,
		|									Склад КАК Склад
		|								ИЗ
		|									ТаблицаОтгрузки)
		|							И СерийныеНомера.Код = &СерийныйНомер) КАК РегистрСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтгрузки КАК ТаблицаОтгрузки
		|		ПО РегистрСерийныеНомера.Регистратор 	    = ТаблицаОтгрузки.ДокументОтгрузки
		|			И РегистрСерийныеНомера.Номенклатура    = ТаблицаОтгрузки.Номенклатура
		|			И РегистрСерийныеНомера.Характеристика  = ТаблицаОтгрузки.Характеристика
		|			И РегистрСерийныеНомера.Склад    	    = ТаблицаОтгрузки.Склад";
		
	КонецЕсли;				   
	
	Возврат ТекстЗапроса;
	
	
КонецФункции // ПолучитьТекстЗапросаДобавленияНоменклатурыПоСерийномуНомеру()



&НаСервере

Функция ДобавитьНоменклатуруПоШтрихКодуНаСервере(Место, ШтрихкодНоменклатуры, АдресДоставкиПолучателя, ОбновитьПулНоменклатуры, ВвестиКоличество, СообщениеОбОшибке, ТДПулОтгрузки)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		СообщениеОбОшибке = НСтр("ru='Место уже укомплектовано, добавление номенклатуры запрещено.'");
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодНоменклатуры);
	Если ПроверитьВыборШтрихкода(СтруктураДанные, СообщениеОбОшибке) Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанные.Номенклатура.ИспользоватьУпаковки Тогда
		ВвестиКоличество = Истина;
		ОтменитьТранзакцию();
		Возврат СтруктураДанные;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементОтгрузкаМест = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементОтгрузкаМест.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементОтгрузкаМест.УстановитьЗначение("Склад", Склад);
	
	ЭлементТоварыКОтгрузке = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
	ЭлементТоварыКОтгрузке.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
	ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	Блокировка.Заблокировать();
	
	КоличествоНаЗапись = ПолучитьКоличествоНаЗапись(Место, СтруктураДанные);
	ДобавитьНоменклатуру(Место, СтруктураДанные, КоличествоНаЗапись);
	
	
	Если ПроверитьПравильностьПостроенияМеста(Место, Истина, СообщениеОбОшибке, ТДПулОтгрузки) Тогда
		
		ЗафиксироватьТранзакцию();
		Если ОбновитьПулНоменклатуры И Место.АдресДоставки = АдресДоставкиПолучателя Тогда
			РеквизитыМеста = ДанныеМестаВСтруктуру(Место, ТДПулОтгрузки);
			
			ЗагрузитьПулНоменклатуры(РеквизитыМеста);
		КонецЕсли;
		ЗагрузитьНоменклатуруМеста(Место, СтруктураДанные.Номенклатура);
		ВыполнитьОбновлениеТаблицНаСервере();
		ВосстановитьТекущиеСтрокиНаСервере();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ДобавитьНоменклатурупоШтрихКодуНаСервере()

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодНоменклатуры)
	
	МассивШтрихкодов = Новый Массив;
	МассивШтрихкодов.Добавить(ШтрихкодНоменклатуры);
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(МассивШтрихкодов);
	СтруктураДанные    = ДанныеПоШтрихкодам[ШтрихкодНоменклатуры];
	
	Если ТипЗнч(СтруктураДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Номенклатура") Тогда
		КешНоменклатураПодбор = СтруктураДанные.Номенклатура;
	КонецЕсли;
	
	Если ФО_ИспользованиеХарактеристик И СтруктураДанные.Свойство("Характеристика") Тогда
		КешХарактеристикаПодбор = СтруктураДанные.Характеристика;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьНоменклатуруПоШтрихкоду()


&НаСервере

Процедура ДобавитьНоменклатуруПоСтруктуреДанных(ДанныеУпаковки, Место, СтруктураДанные, АдресДоставкиПолучателя, ОбновитьПулНоменклатуры,СообщениеОбОшибке, ТДПулОтгрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(ДанныеУпаковки.Ед) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		СтруктураДанные.Коэффициент = ДанныеУпаковки.Ед.Коэффициент;
	Иначе
		СтруктураДанные.Коэффициент = 1;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементОтгрузкаМест = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементОтгрузкаМест.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементОтгрузкаМест.УстановитьЗначение("Склад", Склад);
	
	ЭлементТоварыКОтгрузке = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
	ЭлементТоварыКОтгрузке.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
	ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	КоличествоНаЗапись = ПолучитьКоличествоНаЗаписьУпаковка(Место, СтруктураДанные);
	ДобавитьНоменклатуру(Место, СтруктураДанные, КоличествоНаЗапись);
	
	Если ПроверитьПравильностьПостроенияМеста(Место, Истина, СообщениеОбОшибке, ТДПулОтгрузки) Тогда
		ЗафиксироватьТранзакцию();
		Если ОбновитьПулНоменклатуры И Место.АдресДоставки = АдресДоставкиПолучателя Тогда
			РеквизитыМеста = ДанныеМестаВСтруктуру(Место, ТДПулОтгрузки);
			ЗагрузитьПулНоменклатуры(РеквизитыМеста);
		КонецЕсли;
		ЗагрузитьНоменклатуруМеста(Место, СтруктураДанные.Номенклатура);
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьНоменклатуруПоСтруктуреДанных()



// Процедура выполняет поиск по введенному шрихкоду и добавляет найденную номенклатуру
// в таблице ПодборНоменклатуры
//
&НаСервере
Процедура ДобавитьНоменклатуру(Место, СтруктураДанные, КоличествоНаЗапись)
	
	ВыполнитьЗаписьМестаНоменклатуры(Место, 
	СтруктураДанные.Номенклатура,
	СтруктураДанные.Характеристика, 
	КоличествоНаЗапись, 
	Истина);
	
КонецПроцедуры // ДобавитьНоменклатуруПоШтрихКоду()

&НаСервере
Функция ПроверитьВыборШтрихкода(СтруктураДанные, СообщениеОбОшибке)
	
	Если ТипЗнч(СтруктураДанные) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru='Номенклатура с данным штрихкодом или серийным номером не найдена.'");
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ СтруктураДанные.Свойство("Номенклатура") Тогда
		СообщениеОбОшибке = НСтр("ru='Номенклатура с данным штрихкодом или серийным номером не найдена.'");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьВыборШтрихкода()

&НаСервере
Функция ПолучитьКоличествоНаЗапись(Место, СтруктураДанные)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Количество КАК Количество
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Номенклатура = &Номенклатура
	|	И Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Место", Место);						  
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0) + СтруктураДанные.Коэффициент;
	
КонецФункции // ПолучитьКоличествоНаЗапись()

Функция ПолучитьКоличествоНаЗаписьУпаковка(Место, СтруктураДанные)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Количество КАК Количество
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Номенклатура = &Номенклатура
	|	И Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Место", Место);						  
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0) + СтруктураДанные.Коэффициент;
	
КонецФункции // ПолучитьКоличествоНаЗапись()

&НаСервере

Функция ПроверитьПравильностьПостроенияМеста(Место, ВыводитьСообщения, СообщениеОбОшибке, ТДПулОтгрузки)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПостроитьТаблицыНоменклатуры();
	
	Запрос.УстановитьПараметр("Склад", 						Склад);
	Запрос.УстановитьПараметр("Получатель", 				Место.Владелец);
	Запрос.УстановитьПараметр("Место", 						Место);
	Запрос.УстановитьПараметр("АдресДоставки", 				Место.АдресДоставки);
	Запрос.УстановитьПараметр("Назначение", 				Место.Назначение);
	Запрос.УстановитьПараметр("ОтборМаршрут", 				Маршрут);
	Запрос.УстановитьПараметр("ДатаОтгрузки", 				ДатаОтгрузки);
	Запрос.УстановитьПараметр("ПлатитПолучатель", 			ТДПулОтгрузки.ПлатитПолучатель);
	Запрос.УстановитьПараметр("ВозвратнаяДоставкаНП", 		ТДПулОтгрузки.ВозвратнаяДоставкаНП);
	Запрос.УстановитьПараметр("АдресПартнера", 				ТДПулОтгрузки.АдресПартнера);
	Запрос.УстановитьПараметр("АдресПартнера", 				?(ТДПулОтгрузки.АдресПартнера=Неопределено, "", ТДПулОтгрузки.АдресПартнера));
	Запрос.УстановитьПараметр("ПолучательЧерезПеревозчика",	ТДПулОтгрузки.ПолучательЧерезПеревозчика);
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОтгруженоБольше   			= Не РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Пустой();
	НоменклатураДругогоПартнера = Не РезультатЗапроса[РезультатЗапроса.ВГраница()].Пустой();
	
	Если ОтгруженоБольше Тогда
		Если ВыводитьСообщения Тогда
			СообщениеОбОшибке = НСтр("ru='Операцию выполнить невозможно поскольку все позиции номенклатуры по данному получателю уже отгруженные.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если НоменклатураДругогоПартнера Тогда
		Если ВыводитьСообщения Тогда
			СообщениеОбОшибке = НСтр("ru='Попытка комплектации номенклатурой другого партнера.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПостроитьТаблицыНоменклатуры()

&НаСервере
Функция ПолучитьТекстЗапросаПостроитьТаблицыНоменклатуры()
	
	ТекстЗапроса = СформироватьШапкуЗапросаПулНоменклатуры();
	ТекстЗапроса = ТекстЗапроса + "
	/////////////////////////////////////////////////////////////////////
	// Сворачиваем таблицу КешНоменклатура так как в разных реализациях
	// могут быть одинаковые получатели
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	СУММА(КОтгрузке) КАК Количество
	|ПОМЕСТИТЬ ТабНоменклатура
	|ИЗ
	|	КешНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	/////////////////////////////////////////////////////////////////////
	// Места которые уже собраны, но для них не были созданы ордера
	|ВЫБРАТЬ
	|	Ссылка КАК Место
	|ПОМЕСТИТЬ КешСвободныеМеста
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	НЕ Архивный
	|	И НЕ ПометкаУдаления
	|	И Владелец = &Получатель
	|;
	/////////////////////////////////////////////////////////////////////
	// Места которые уже собраны, но для них не были созданы ордера
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ КешМеста
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад = &Склад И Место В (ВЫБРАТЬ Место ИЗ КешСвободныеМеста))
	|ГДЕ
	|	СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации))
	|   И ВариантМаршрута = &ОтборМаршрут
	|;
	|
	/////////////////////////////////////////////////////////////////////
	// Получаем номенклатуру, которая уже есть в местах, нужно группировать
	// поскольку номенклатура может быть в разных местах
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	СУММА(Количество) КАК Количество
	|ПОМЕСТИТЬ КешНоменклатураМест
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место В (ВЫБРАТЬ Место ИЗ КешМеста)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	//////////////////////////////////////////////////////////////////////
	// Получаем количество номенклатуры к отгрузке из новой добавленной позицией
	|ВЫБРАТЬ
	|	ТабНоменклатура.Номенклатура КАК Номенклатура,
	|	ТабНоменклатура.Характеристика КАК Характеристика,
	|	ТабНоменклатура.Количество - ЕСТЬNULL(КешНоменклатураМест.Количество,0) КАК Количество
	|ПОМЕСТИТЬ КоличествоПредварительное
	|ИЗ
	|	ТабНоменклатура КАК ТабНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешНоменклатураМест КАК КешНоменклатураМест
	|		ПО ТабНоменклатура.Номенклатура = КешНоменклатураМест.Номенклатура
	|			И ТабНоменклатура.Характеристика = КешНоменклатураМест.Характеристика
	|;
	|
	//////////////////////////////////////////////////////////////////////
	// Если мы хотим получить больше чем нужно - это запрос возвратит результат
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество
	|ИЗ
	|	КоличествоПредварительное
	|ГДЕ
	|	Количество < 0
	|;
	|
	/////////////////////////////////////////////////////////////////////
	// Контроль левой номенклатуры (номенклатура должна быть только нашего получателя)
	// если в запросе будут записи - значит чтото не то.
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место 
	|	И (Номенклатура, Характеристика) НЕ В 
	|			(ВЫБРАТЬ
	|				Номенклатура КАК Номенклатура,
	|				Характеристика КАК Характеристика
	|			ИЗ
	|				КешНоменклатура)
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаШтрихкодНоменклатуры()



&НаСервере
Процедура ЗаписатьШтрихКодНаСервере(Штрихкод, Номенклатура, Характеристика)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеШтрихкода = Лев(Штрихкод, 200);
	
	НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Штрихкод.Установить(ЗначениеШтрихкода);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Штрихкод 		= ЗначениеШтрихкода;
	Запись.Номенклатура 	= Номенклатура;
	Запись.Характеристика   = Характеристика;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаписатьШтрихкодНаСервере()







// Места

&НаСервере
Функция ПолучитьТекстЗапросаОтгрузкиВсехМест()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Место
	|ПОМЕСТИТЬ КешМеста
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Не Архивный
	|;
	|
	|ВЫБРАТЬ
	|	Место КАК Место
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад=&Склад И Место В (ВЫБРАТЬ Место ИЗ КешМеста))
	|ГДЕ
	|	СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
	|	И ВариантМаршрута = &Маршрут";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОтгрузкиВсехМест()



&НаСервере
Функция ПолучитьИнформациюОМесте(Место)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Неопределено;
	
	Если Место.ЭтоЗадача Тогда
		ТабДокумент = ВывестиИнформациюОЗадаче(Место);
	Иначе
		ТабДокумент = ВывестиИнформациюОМесте(Место);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПолучитьИнформациюОМесте()

&НаСервере
Функция ВывестиИнформациюОМесте(Место)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет		= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ИнформацияОМесте");
	ОблДокумент = Макет.ПолучитьОбласть("Документ");
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокДокументов();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТабДокумент 			 = Новый ТабличныйДокумент;
	Макет					 = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ИнформацияОМесте");
	ОблДокумент 			 = Макет.ПолучитьОбласть("Документ");
	ОблМесто 				 = Макет.ПолучитьОбласть("Место");
	ОблОтправитель 			 = Макет.ПолучитьОбласть("Отправитель");
	ОблЗаказНаПеремещение 	 = Макет.ПолучитьОбласть("ЗаказНаПеремещение");
	ОблПробел 				 = Макет.ПолучитьОбласть("Пробел");
	ОблДокументыЗаголовок	 = Макет.ПолучитьОбласть("ДокументыЗаголовок");
	ОблНоменклатураЗаголовок = Макет.ПолучитьОбласть("НоменклатураЗаголовок");
	ОблНоменклатура 		 = Макет.ПолучитьОбласть("Номенклатура");
	
	
	ВыбокаМаршрут = РезультатЗапроса[РезультатЗапроса.ВГраница()-3].Выбрать();
	ВыбокаМаршрут.Следующий();
	
	ОблМесто.Параметры.Место 		 = Строка(Место);
	ОблМесто.Параметры.Ответственный = Место.Ответственный;
	ОблМесто.Параметры.Маршрут 		 = ВыбокаМаршрут.Маршрут;
	ТабДокумент.Вывести(ОблМесто);
	
	ВыборкаОтправитель = РезультатЗапроса[РезультатЗапроса.ВГраница()-2].Выбрать();
	Пока ВыборкаОтправитель.Следующий() Цикл
		ОблОтправитель.Параметры.Заполнить(ВыборкаОтправитель);
		ТабДокумент.Вывести(ОблОтправитель);
	КонецЦикла;
	
	Если Не Место.ЗаказНаПеремещение.Пустая() Тогда
		ОблЗаказНаПеремещение.Параметры.ЗаказНаПеремещение = Место.ЗаказНаПеремещение;
		ТабДокумент.Вывести(ОблЗаказНаПеремещение);
	КонецЕсли;
	
	ТабДокумент.Вывести(ОблПробел);
	
	ТабДокумент.Вывести(ОблДокументыЗаголовок);
	
	ВыборкаДокументы = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выбрать();
	Пока ВыборкаДокументы.Следующий() Цикл
		ОблДокумент.Параметры.Заполнить(ВыборкаДокументы);
		ОблДокумент.Параметры.ДокументРасшифровка = ВыборкаДокументы.Документ;
		ТабДокумент.Вывести(ОблДокумент);
	КонецЦикла;
	
	ТабДокумент.Вывести(ОблПробел);
	
	ТабДокумент.Вывести(ОблНоменклатураЗаголовок);	
	
	ВыборкаНоенклатура = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока ВыборкаНоенклатура.Следующий() Цикл
		ОблНоменклатура.Параметры.Заполнить(ВыборкаНоенклатура);
		ТабДокумент.Вывести(ОблНоменклатура);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ВывестиИнформациюОМесте()

&НаСервере
Функция ВывестиИнформациюОЗадаче(Место)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет				= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ИнформацияОЗадаче");
	ОблМесто 			= Макет.ПолучитьОбласть("Место");
	ОблПолучатель 		= Макет.ПолучитьОбласть("Получатель");
	ОблТекст 			= Макет.ПолучитьОбласть("ТекстЗадачи");
	ОблПробел 			= Макет.ПолучитьОбласть("Пробел");
	ОблОтправитель		= Макет.ПолучитьОбласть("Отправитель");
	ОблТранзитныйСклад	= Макет.ПолучитьОбласть("ТранзитныйСклад");
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИнформацияПоЗадаче();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОблМесто.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОблМесто);
		
		ТабДокумент.Вывести(ОблПробел);
		
		ОблПолучатель.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОблПолучатель);
		
		ТабДокумент.Вывести(ОблПробел);
		
		ОблТекст.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОблТекст);
		
		ТабДокумент.Вывести(ОблПробел);
		
		ОблПробел.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОблПробел);
		
		ТабДокумент.Вывести(ОблПробел);
		
		ОблОтправитель.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОблОтправитель);
		
		ТабДокумент.Вывести(ОблПробел);
		
		ОблТранзитныйСклад.Параметры.Заполнить(Выборка);
		ТабДокумент.Вывести(ОблТранзитныйСклад);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ВывестиИнформациюОЗадаче()






&НаСервере
Функция ПолучитьИнформациюОДокументе(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет						= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ИнформацияОДокументе");
	ОблДокумент					= Макет.ПолучитьОбласть("Документ");
	ОблМесто					= Макет.ПолучитьОбласть("Место");
	ОблНоменклатураЗаголовок	= Макет.ПолучитьОбласть("НоменклатураЗаголовок");
	ОблНоменклатура				= Макет.ПолучитьОбласть("Номенклатура");
	ОблПробел					= Макет.ПолучитьОбласть("Пробел");
	ОблИсторияМестаШапка		= Макет.ПолучитьОбласть("ИсторияМестаШапка");
	ОблИсторияМестаСтрока		= Макет.ПолучитьОбласть("ИсторияМестаСтрока");
	
	ТабДокумент.Вывести(ОблПробел);
	ОблДокумент.Параметры.Документ = ДокументСсылка;
	ТабДокумент.Вывести(ОблДокумент);
	ТабДокумент.Вывести(ОблПробел);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСписокМестПоДокументе();
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаМеста = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМеста.Следующий() Цикл 
		Первый = Истина;
		ОблМесто.Параметры.Заполнить(ВыборкаМеста);
		ТабДокумент.Вывести(ОблМесто);
		ТабДокумент.Вывести(ОблНоменклатураЗаголовок);
		Выборка = ВыборкаМеста.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Порядок = 0 Тогда 
				ОблНоменклатура.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОблНоменклатура);
			ИначеЕсли Выборка.Порядок = 1 Тогда
				Если Первый Тогда 
					ТабДокумент.Вывести(ОблПробел);
					ТабДокумент.Вывести(ОблИсторияМестаШапка);
					Первый = Ложь;
				КонецЕсли;
				ОблИсторияМестаСтрока.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОблИсторияМестаСтрока);
			КонецЕсли;
		КонецЦикла;	
		
		ТабДокумент.Вывести(ОблПробел);
		ТабДокумент.Вывести(ОблПробел);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПолучитьИнформациюОДокументе()

&НаСервере
Функция ПолучитьТекстЗапросаСписокМестПоДокументе()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестаПоДокументам.Место
	|ПОМЕСТИТЬ КешМест
	|ИЗ
	|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|ГДЕ
	|	МестаПоДокументам.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|	И МестаПоДокументам.Документ.Распоряжение = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаНоменклатуры.Номенклатура,
	|	МестаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МестаНоменклатуры.Количество,
	|	МестаНоменклатуры.Место
	|ПОМЕСТИТЬ КешНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	|ГДЕ
	|	МестаНоменклатуры.Место В
	|			(ВЫБРАТЬ
	|				КешМест.Место
	|			ИЗ
	|				КешМест КАК КешМест)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешМест.Место.Код КАК Номер,
	|	КешМест.Место КАК Место,
	|	КешМест.Место.Ответственный КАК Ответственный,
	|	КешНоменклатуры.Номенклатура,
	|	КешНоменклатуры.ЕдиницаИзмерения,
	|	КешНоменклатуры.Количество,
	|	NULL КАК Дата,
	|	NULL КАК СтатусОтгрузки,
	|	NULL КАК СкладИстории,
	|	0 КАК Порядок
	|ИЗ
	|	КешМест КАК КешМест
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешНоменклатуры КАК КешНоменклатуры
	|		ПО КешМест.Место = КешНоменклатуры.Место
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ОтгрузкаМест.Место,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОтгрузкаМест.Период,
	|	ОтгрузкаМест.СтатусОтгрузки,
	|	ОтгрузкаМест.Склад,
	|	1
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест КАК ОтгрузкаМест
	|ГДЕ
	|	ОтгрузкаМест.Место В
	|			(ВЫБРАТЬ
	|				КешМест.Место
	|			ИЗ
	|				КешМест КАК КешМест)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Место,
	|	Дата
	|ИТОГИ ПО
	|	Место";	
	Возврат  ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСписокДокументов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ПОМЕСТИТЬ ТаблицаЗаказовНаПеремещение
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Ссылка = &Место
	|;
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбеспечениеЗаказов.Регистратор КАК Документ.ПеремещениеТоваров).СкладОтправитель КАК Отправитель,
	|	ВЫРАЗИТЬ(ОбеспечениеЗаказов.Регистратор КАК Документ.ПеремещениеТоваров).Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ТаблицаОтправители
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаказовНаПеремещение КАК ЗаказыНаПеремещение
	|		ПО ОбеспечениеЗаказов.Назначение.Заказ = ЗаказыНаПеремещение.ЗаказНаПеремещение
	|			И ОбеспечениеЗаказов.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	|		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	|	КОНЕЦ КАК Документ
	|ПОМЕСТИТЬ ДокументыПоМесту
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВнутреннееПотреблениеТоваров).Склад
	|		КОГДА Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВозвратТоваровПоставщику).Склад
	|		КОГДА Документ ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПеремещениеТоваров).СкладОтправитель
	|		КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг).Склад
	|		КОГДА Документ ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.СборкаТоваров).Склад
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВнутреннееПотреблениеТоваров).Ответственный
	|		КОГДА Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВозвратТоваровПоставщику).Менеджер
	|		КОГДА Документ ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПеремещениеТоваров).Ответственный
	|		КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг).Менеджер
	|		КОГДА Документ ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.СборкаТоваров).Ответственный
	|	КОНЕЦ КАК Ответственный
	|ПОМЕСТИТЬ ОтветственныеПоМесту
	|ИЗ
	|	ДокументыПоМесту
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантМаршрута КАК Маршрут
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место = &Место)
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОтправители.Отправитель, 0) = 0
	|			ТОГДА ОтветственныеПоМесту.Отправитель
	|		ИНАЧЕ ТаблицаОтправители.Отправитель
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОтправители.Ответственный, 0) = 0
	|			ТОГДА ОтветственныеПоМесту.Ответственный
	|		ИНАЧЕ ТаблицаОтправители.Ответственный
	|	КОНЕЦ КАК Ответственный
	|ИЗ
	|	ОтветственныеПоМесту КАК ОтветственныеПоМесту
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтправители КАК ТаблицаОтправители
	|		ПО ИСТИНА
	|;
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ
	|ИЗ
	|	ДокументыПоМесту
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Количество КАК Количество
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСписокДокументовПоНомеру()

&НаСервере
Функция ПолучитьТекстЗапросаИнформацияПоЗадаче()
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантМаршрута КАК Маршрут,
	|	Отправитель 	КАК Отправитель
	|ПОМЕСТИТЬ МаршрутЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Место) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаДоставки.Код				КАК Место,
	|	МестаДоставки.ТранзитныйСклад	КАК ТранзитныйСклад,
	|	МестаДоставки.ТекстЗадачи,
	|	ВЫБОР
	|		КОГДА МестаДоставки.Владелец ССЫЛКА Справочник.Склады
	|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.Владелец КАК Справочник.Склады).Наименование
	|		КОГДА МестаДоставки.Владелец ССЫЛКА Справочник.Партнеры
	|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.Владелец КАК Справочник.Партнеры).Наименование
	|	КОНЕЦ КАК Получатель,
	|	МестаДоставки.Ответственный КАК Ответственный,
	|	МаршрутЗадачи.Маршрут 		КАК Маршрут,
	|	МаршрутЗадачи.Отправитель   КАК Отправитель
	|ИЗ
	|	Справочник.МестаДоставки КАК МестаДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаршрутЗадачи КАК МаршрутЗадачи
	|		ПО (ИСТИНА)
	|ГДЕ
	|	МестаДоставки.Ссылка = &Место";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПлучитьТекстЗапросаИнформацияПоЗадаче()



// Процедура загружает список номенклатуры по выбранному месту
// в таблицу ПодборНоменклатуры
//
// Параметры
//  Место  - СправочникСсылка.МестаДоставки - место список
//           номенклатуры которого нужного нужно загрузить
//
&НаСервере
Процедура ЗагрузитьНоменклатуруМеста(Место, ТекущаяНоменклатура = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРасходСН.Очистить();
	ТаблицаВыбранныеСН.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНоменклатураМест();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТекущаяНоменклатура", ТекущаяНоменклатура);
	Запрос.УстановитьПараметр("ОрдернаяСхемаСклада", КешОрдернаяСхемаСклада);
	ПодборНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	
КонецПроцедуры // ЗагрузитьНоменклатуруМеста()

&НаСервере
Функция ПолучитьТекстЗапросаНоменклатураМест()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Место КАК Место,	
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Номенклатура = &ТекущаяНоменклатура
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сортировка
	|ПОМЕСТИТЬ КешМестаНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ
	|	Место КАК Место,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	КОЛИЧЕСТВО(СерийныйНомер) КАК Количество
	|ПОМЕСТИТЬ КешКоличествоСН
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Склад = &Склад
	|	И (Место, Номенклатура, Характеристика) В
	|			(ВЫБРАТЬ
	|				Место КАК Место,
	|				Номенклатура КАК Номенклатура,
	|				Характеристика КАК Характеристика
	|			ИЗ
	|				КешМестаНоменклатуры)
	|СГРУППИРОВАТЬ ПО
	| 	Место,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	КешМестаНоменклатуры.Место КАК Место,
	|	КешМестаНоменклатуры.Номенклатура КАК Номенклатура,
	|	КешМестаНоменклатуры.Характеристика КАК Характеристика,
	|	КешМестаНоменклатуры.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ КешМестаНоменклатуры.Номенклатура.ИспользоватьСерийныеНомера
	|			ТОГДА 0
	|		КОГДА КешМестаНоменклатуры.Количество > ЕСТЬNULL(КешКоличествоСН.Количество, 0)
	|			ТОГДА 1
	|		КОГДА КешМестаНоменклатуры.Количество = ЕСТЬNULL(КешКоличествоСН.Количество, 0)
	|			ТОГДА 2
	|	КОНЕЦ КАК СтатусСерийногоНомера,
	|	КешМестаНоменклатуры.Сортировка КАК Сортировка
	|ИЗ
	|	КешМестаНоменклатуры КАК КешМестаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешКоличествоСН КАК КешКоличествоСН
	|		ПО КешМестаНоменклатуры.Место = КешКоличествоСН.Место
	|			И КешМестаНоменклатуры.Номенклатура = КешКоличествоСН.Номенклатура
	|			И КешМестаНоменклатуры.Характеристика = КешКоличествоСН.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	КешМестаНоменклатуры.Сортировка УБЫВ,
	|	КешМестаНоменклатуры.Номенклатура.Наименование ВОЗР";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНоменклатураМест() 

// Функция создает новое место для отгрузки, но только после 
// проверки на пустые места
//
&НаСервере
Процедура СоздатьМестоОтгрузки(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
	Блокировка.Заблокировать();
	
	Если ПроверитьПустыеМеста(СтруктураПараметров.Получатель) Тогда
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно создать новое место так у получателя уже есть пустые места.'"));
		Возврат;
	КонецЕсли;
	
	НовоеМесто = СоздатьНовоеМестоСправочник(СтруктураПараметров);
	ВыполнитьЗаписьОтгрузкаМест(Склад, НовоеМесто, Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации);
	
	ЗафиксироватьТранзакцию();
	
	Результат = Новый Структура;
	Результат.Вставить("Место", 					НовоеМесто);
	Результат.Вставить("Получатель", 				СтруктураПараметров.Получатель);
	Результат.Вставить("ПолучательПредставление", 	СтруктураПараметров.ПолучательПредставление);
	Результат.Вставить("АдресПартнера",				СтруктураПараметров.АдресПартнера);
	Результат.Вставить("ВозвратнаяДоставкаНП", 		СтруктураПараметров.ВозвратнаяДоставкаНП);
	Результат.Вставить("ПлатитПолучатель", 			СтруктураПараметров.ПлатитПолучатель);
	Результат.Вставить("ПолучательЧерезПеревозчика",СтруктураПараметров.ПолучательЧерезПеревозчика);
	Результат.Вставить("МестоПредставление", 		Строка(НовоеМесто));
	Результат.Вставить("СобственноеМесто", 			Истина);
	
	НоваяСтрока = Места.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	Элементы.Места.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры // СоздатьМестоОтгрузки()

// Проверка, есть ли еще пустые места, по даному складу
//
// Возвращаемое значение:
//   Истина - Пусты места есть
//
&НаСервере
Функция ПроверитьПустыеМеста(Получатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроверкиПустыхМест();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПустыеМеста()

&НаСервере
Функция ПолучитьТекстЗапросаПроверкиПустыхМест()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Ссылка КАК Место
	|ПОМЕСТИТЬ КешМеста
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	НЕ Архивный
	|	И Владелец 		= &Получатель
	|	И Ответственный = &Ответственный
	|	И НЕ ПометкаУдаления
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ МестаСНоменклатурой
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место В (ВЫБРАТЬ Место ИЗ КешМеста)
	|
	|СГРУППИРОВАТЬ ПО
	|	Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место КАК Место
	|ПОМЕСТИТЬ МестаВОтгрузке
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(,Склад = &Склад И Место В (ВЫБРАТЬ Место ИЗ КешМеста))
	|ГДЕ
	|	СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации), ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена))
	|	И ВариантМаршрута = &Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место
	|ИЗ
	|	МестаВОтгрузке
	|ГДЕ
	|	Место НЕ В (ВЫБРАТЬ Место ИЗ МестаСНоменклатурой)";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаМестоОтгрузки()

&НаСервере
Функция СоздатьНовоеМестоСправочник(СтруктураПараметров)
	
	НовоеМесто 					  		  = Справочники.МестаДоставки.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(НовоеМесто, СтруктураПараметров);
	
	НовоеМесто.Владелец					  = СтруктураПараметров.Получатель;
	НовоеМесто.Ответственный	  		  = ПараметрыСеанса.ТекущийПользователь;
	
	Если СтруктураПараметров.ТранзитноеПремещение = 0 Тогда
		Если СтруктураПараметров.Получатель = ?(ТипЗнч(СтруктураПараметров.Назначение.Заказ)=Тип("ДокументСсылка.ЗаказНаПеремещение"), СтруктураПараметров.Назначение.Заказ.СкладПолучатель, СтруктураПараметров.Назначение.Заказ.Склад) Тогда
			НовоеМесто.Транзит = Ложь;
		Иначе
			НовоеМесто.Транзит 			= Истина;
			НовоеМесто.ТранзитныйСклад 	= СтруктураПараметров.Получатель;
		КонецЕсли;
	КонецЕсли;
	
	НовоеМесто.УстановитьНовыйКод();
	НовоеМесто.Записать();
	
	Возврат НовоеМесто.Ссылка;
	
КонецФункции // СоздатьНовоеМестоСправочник()

// Процедура разкомплектовует место
//
// Параметры:
//  Место - СправочникСсылка.МестаДоставки - то место, которое нужно разукомплектовать
//  Получатель - СпрачоникСсылка.Партнер, СправочникСсылка.Склады, Неопределено - получатель, пул номенклатуры
// которого нужно обновить после завершения комплектации. Если равно Неопределено - обновлять ничего не требуется
//
&НаСервере
Процедура РазукомплектоватьМесто(Место, Получатель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	ВыполнитьЗаписьМестаНоменклатуры(Место);
	ВыполнитьЗаписьОтгрузкаМест(Склад, Место, Перечисления.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе);
	ВыполнитьЗаписьСерийныеНомераНоменклатуры(Место);
	
	Если Не ОтменитьДекументыПоМесту(Место) Тогда
		ОтменитьТранзакцию();
		УстановитьОтборы();
		Возврат;
	КонецЕсли;
	
	МестоОбъект = Место.ПолучитьОбъект();
	МестоОбъект.Архивный = Истина;
	МестоОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	УстановитьОтборы();
	
КонецПроцедуры // РазукомплектоватьМесто()



&НаСервере
Функция ЗавершитьКомплектацию(Место, Идентификатор, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПечатныхФорм 	= Новый Структура;
	ИсточникДанных 			= ModuleLibraryServer.GetRefLibrary("Обработка 'Внешние печатные формы'");
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если МестоПустое(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Запрещено отгружать пустые места, добавьте пожалуйста номенклатуру к месту.'"),
		,
		"Места["+Идентификатор+"].Место");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьВладельцаМеста(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Запрещено комплектовать место другого пользователя.'"));
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место уже укомплектовано.'"));
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьТранзитноеМесто(Место) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
	ЭлементБлокировки.УстановитьЗначение("Место", Место);
	Блокировка.Заблокировать();
	
	ВыполнитьЗаписьОтгрузкаМест(Склад, Место, Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена);
	
	Если КешОрдернаяСхемаСклада Тогда
		
		МассивОрдеров = Новый Массив;
		Если Не СоздатьОрдера(Место, МассивОрдеров) Тогда
			ОтменитьТранзакцию();
			ВосстановитьТекущиеСтрокиНаСервере();
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		МассивДокументов = ПроверитьМассивДокументовИнтернетМагазин(МассивОрдеров, Истина);
		
		Если МассивДокументов.Количество() > 0 Тогда
			
			ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "РасходныйОрдерНаТовары_ЧП", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
			КоллекцияПечатныхФорм = Неопределено;
			
			УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
			СтруктураПечатныхФорм.Вставить("ТоварныеЧеки", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
			
			ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ГарантийноеСоглашение", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
			КоллекцияПечатныхФорм = Неопределено;
			
			УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
			СтруктураПечатныхФорм.Вставить("ГарантийныеСоглашения", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
			
		КонецЕсли;
		
	Иначе
		
		МассивДокументовПродажы = Новый Массив;
		Если Не УстановитьСтатусыНеордерныйСклад(Место, МассивДокументовПродажы) Тогда
			ОтменитьТранзакцию();
			УстановитьОтборы();
			ВосстановитьТекущиеСтрокиНаСервере();
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;	
		
		МассивДокументов = ПроверитьМассивДокументовИнтернетМагазин(МассивДокументовПродажы, Ложь);
		
		Если МассивДокументов.Количество() > 0 Тогда
			
			ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ТоварныйЧек_ЧП", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
			КоллекцияПечатныхФорм = Неопределено;
			
			УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
			СтруктураПечатныхФорм.Вставить("ТоварныеЧеки", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
			
			ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ГарантийноеСоглашение", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
			КоллекцияПечатныхФорм = Неопределено;
			
			УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
			СтруктураПечатныхФорм.Вставить("ГарантийныеСоглашения", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();	
	УстановитьОтборы();	
	ЗагрузитьСписокМест();
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ЗавершитьКомлпектацию()

&НаСервере
Функция ПроверитьМассивДокументовИнтернетМагазин(МассивДокументов, ЭтоОрдера)
	
	Запрос = Новый Запрос;
	
	Если ЭтоОрдера Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка КАК Ордер,
		|	Распоряжение КАК ДокументРеализации
		|ПОМЕСТИТЬ КешРеализации
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары
		|ГДЕ
		|	Ссылка В (&МассивДокументов)
		|	И Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
		|;
		|
		|ВЫБРАТЬ
		|	КешРеализации.Ордер КАК Документ
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешРеализации
		|		ПО КешРеализации.ДокументРеализации.ЗаказКлиента = ЗаказКлиента.Ссылка
		|			И ЗаказКлиента.Подразделение = &Подразделение";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка КАК Документ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг
		|ГДЕ
		|	Ссылка В (&МассивДокументов)
		|	И ЗаказКлиента.Подразделение = &Подразделение";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85")));
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
КонецФункции // ПроверитьМассивДокументовИнтернетМагазин()


&НаСервере
Функция ПроверитьВозможностьКомплектацииМеста(Место)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементОтгрузкаМест = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементОтгрузкаМест.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементОтгрузкаМест.УстановитьЗначение("Склад", Склад);
	ЭлементОтгрузкаМест.УстановитьЗначение("Место", Место);
	
	Блокировка.Заблокировать();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации) И НЕ Место.Архивный
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозможностьКомплектации
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(
	|			,
	|			Склад = &Склад
	|				И Место = &Место)";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Место", Место);	
	Выборка = Запрос.Выполнить().Выбрать();	
	Возврат ?(Выборка.Следующий(), Выборка.ВозможностьКомплектации, Ложь);
	
КонецФункции // ПроверитьВозможностьКомлпектацииМеста()


&НаСервере
Функция ПроверитьВладельцаМеста(Место)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Ссылка = &Место
	|	И Ответственный = &ТекущийПользователь");
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции // ПроверитьВладельцаМеста()


&НаСервере
Функция ПроверитьТранзитноеМесто(Место)
	
	Если Не Место.Транзит Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТранзитноеМесто();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Истина;
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = "Для %1 %2 задано неверное количество серийных номеров.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		Выборка.НаименованиеНоменклатуры,
		Выборка.НаименованиеХарактеристики);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Результат = Ложь;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПроверитьТранзитноеМесто()

&НаСервере
Функция ПолучитьТекстЗапросаТранзитноеМесто()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	СУММА(Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Номенклатура.ИспользоватьСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	КОЛИЧЕСТВО(СерийныйНомер) КАК КоличествоНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Склад = &Склад
	|	И Место = &Место
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатура.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	(ТаблицаНоменклатура.Количество - ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоНомеров, 0)) * -1 КАК Количество
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныхНомеров КАК ТаблицаСерийныхНомеров
	|		ПО ТаблицаНоменклатура.Номенклатура = ТаблицаСерийныхНомеров.Номенклатура
	|			И ТаблицаНоменклатура.Характеристика = ТаблицаСерийныхНомеров.Характеристика
	|ГДЕ
	|	(ТаблицаНоменклатура.Количество - ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоНомеров, 0))<>0";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаТранзитноеМесто()



&НаСервере
Функция УстановитьСтатусыНеордерныйСклад(Место, МассивДокументовПродажы)
	
	ПодразделениеКЦ = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85"));
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОтгрузки(Ложь);	
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Получатель", Место.Владелец);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ОтгрузкаТоваров 				 = Документы.КТС_ОтгрузкаТоваров.СоздатьДокумент();
		ОтгрузкаТоваров.Распоряжение  	 = ВыборкаДокумент.ДокументОтгрузки;
		ОтгрузкаТоваров.Дата 		 	 = ВыборкаДокумент.ДокументОтгрузки.Дата+1;		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ОтгрузкаТоваров.Склад = ВыборкаДокумент.ДокументОтгрузки.Склад;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ОтгрузкаТоваров.Склад = ВыборкаДокумент.ДокументОтгрузки.СкладОтправитель;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ОтгрузкаТоваров.Склад = ВыборкаДокумент.ДокументОтгрузки.Склад;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
			ОтгрузкаТоваров.Склад = ВыборкаДокумент.ДокументОтгрузки.Склад;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаДокумент.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ОтгрузкаТоваров.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		Попытка
			ОтгрузкаТоваров.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		МассивДокументовПродажы.Добавить(ВыборкаДокумент.ДокументОтгрузки);
		ЗаписатьСтатусДокументаОтгрузки(Место, ОтгрузкаТоваров.Ссылка, Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УстановитьСтатусыНеордерныйСклад()



&НаСервере
Функция СоздатьОрдера(Место, МассивОрдеров)
	
	ТекущийПользователь   = ПараметрыСеанса.ТекущийПользователь;
	СерийныеНомера		  = ПолучитьСерийныеНомераНоменклатуры(Место);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОтгрузки();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		РасходныйОрдер 				 	 = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		РасходныйОрдер.Распоряжение  	 = ВыборкаДокумент.ДокументОтгрузки;
		РасходныйОрдер.Дата 		 	 = ТекущаяДата();	
		РасходныйОрдер.Приоритет 	 	 = Перечисления.Приоритеты.Средний;
		РасходныйОрдер.Ответственный 	 = ТекущийПользователь;
		РасходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
		
		РасходныйОрдер.ЗаполнитьПоРаспоряжению();
		
		РасходныйОрдер.Статус		 	 = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		РасходныйОрдер.Товары.Очистить();
		РасходныйОрдер.СерийныеНомера.Очистить();
		
		ВыборкаДетальныеЗаписи = ВыборкаДокумент.Выбрать();
		КлючСвязи			   = 1;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = РасходныйОрдер.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ЗаполнитьСерийныеНомераСтроки(НоваяСтрока, РасходныйОрдер.СерийныеНомера, СерийныеНомера, КлючСвязи);
		КонецЦикла;
		
		Попытка
			РасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		МассивОрдеров.Добавить(РасходныйОрдер.Ссылка);
		ЗаписатьСтатусДокументаОтгрузки(Место, РасходныйОрдер.Ссылка, Перечисления.СтатусыРасходныхОрдеров.Отгружен);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СоздатьОрдера()

&НаСервере
Процедура ЗаполнитьСерийныеНомераСтроки(СтрокаТовары, ТаблицаСерийныеНомера, СерийныеНомера, КлючСвязи)
	
	МассивНомеров = СерийныеНомера.Получить(СтрокаТовары.Номенклатура);
	Если МассивНомеров = Неопределено Тогда
		// Если номенклатура не использует серийные номера, ключ связи серийных номеров все равно нужно присаваивать.
		Перейти ~КлючиСвязи;
	КонецЕсли;
	
	Если МассивНомеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйИндекс = Мин(МассивНомеров.Количество()-1, СтрокаТовары.Количество-1);
	
	Для Индекс=0 ПО МаксимальныйИндекс Цикл
		НоваяСтрока = ТаблицаСерийныеНомера.Добавить();
		НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязи;
		НоваяСтрока.СерийныйНомер = МассивНомеров[0];
		МассивНомеров.Удалить(0);
	КонецЦикла;
	
~КлючиСвязи:
	СтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
	КлючСвязи = КлючСвязи + 1;
	
КонецПроцедуры // ЗаполнитьСерийныеНомераСтроки()


&НаСервере
Процедура ЗаписатьСтатусДокументаОтгрузки(Место, ДокументОтгрузки, Статус)
	
	НаборЗаписей = РегистрыСведений.МестаПоДокументам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Место.Установить(Место);
	НаборЗаписей.Отбор.Документ.Установить(ДокументОтгрузки);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Место 			= Место;
	Запись.Документ 		= ДокументОтгрузки;
	Запись.СтатусДокумента  = Статус;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗаписатьСтатусДокументаОтгрузки()


&НаСервере
Функция ПолучитьТекстЗапросаОтгрузки(ОрдерныйСклад=Истина)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество
	|ПОМЕСТИТЬ ПодборНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ
	|ПОМЕСТИТЬ КешДокументы
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|	И Не СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|;
	|";
	
	Если ОрдерныйСклад Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.СобраноОстаток КАК Количество,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВнутреннееПотреблениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВозвратТоваровПоставщику).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПеремещениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.СборкаТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.СборкаТоваров).Дата
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ОтгрузкаПоПолучателям
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			ДокументОтгрузки НЕ В (ВЫБРАТЬ Документ ИЗ КешДокументы)
		|			И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						Номенклатура КАК Номенклатура,
		|						Характеристика КАК Характеристика
		|					ИЗ
		|						ПодборНоменклатуры)
		|				И Склад = &Склад) КАК ТоварыКОтгрузке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК ДокументыПоМаршрутам
		|           ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыПоМаршрутам.Регистратор
		|				И 
		|					ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|							ТОГДА ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|						ИНАЧЕ ДокументыПоМаршрутам.Перевозчик = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|							И ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика
		|				    КОНЕЦ
		|ГДЕ
		|	КОтгрузкеОстаток <> СобраноОстаток 
		|;
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.КоличествоОстаток КАК Количество,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПеремещениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВнутреннееПотреблениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВозвратТоваровПоставщику).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Дата
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ОтгрузкаПоПолучателям
		|ИЗ
		|	РегистрНакопления.КТС_ОтгрузкаИзБезордерныхСкладов.Остатки(
		|			,
		|			ДокументОтгрузки НЕ В (ВЫБРАТЬ Документ ИЗ КешДокументы)
		|			И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						Номенклатура КАК Номенклатура,
		|						Характеристика КАК Характеристика
		|					ИЗ
		|						ПодборНоменклатуры)
		|				И Склад = &Склад) КАК ТоварыКОтгрузке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК ДокументыПоМаршрутам
		|           ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыПоМаршрутам.Регистратор
		|				И 
		|					ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|							ТОГДА ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|						ИНАЧЕ ДокументыПоМаршрутам.Перевозчик = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|							И ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика
		|				    КОНЕЦ
		|;
		|";			
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгрузкаПоПолучателям.Номенклатура КАК Номенклатура,
	|	ОтгрузкаПоПолучателям.Характеристика КАК Характеристика,
	|	СУММА(ОтгрузкаПоПолучателямКопия.Количество) КАК КоличествоПосле,
	|	СУММА(ОтгрузкаПоПолучателямКопия.Количество) - ОтгрузкаПоПолучателям.Количество КАК КоличествоДо,
	|	ОтгрузкаПоПолучателям.ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ КоличествоНаростающее
	|ИЗ
	|	ОтгрузкаПоПолучателям КАК ОтгрузкаПоПолучателям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтгрузкаПоПолучателям КАК ОтгрузкаПоПолучателямКопия
	|		ПО ОтгрузкаПоПолучателям.Номенклатура = ОтгрузкаПоПолучателямКопия.Номенклатура
	|			И ОтгрузкаПоПолучателям.Характеристика = ОтгрузкаПоПолучателямКопия.Характеристика
	|			И (ВЫБОР
	|				КОГДА ОтгрузкаПоПолучателям.Дата = ОтгрузкаПоПолучателямКопия.Дата
	|					ТОГДА ОтгрузкаПоПолучателям.ДокументОтгрузки >= ОтгрузкаПоПолучателямКопия.ДокументОтгрузки
	|				ИНАЧЕ ОтгрузкаПоПолучателям.Дата >= ОтгрузкаПоПолучателямКопия.Дата
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгрузкаПоПолучателям.Номенклатура,
	|	ОтгрузкаПоПолучателям.Характеристика,
	|	ОтгрузкаПоПолучателям.ДокументОтгрузки,
	|	ОтгрузкаПоПолучателям.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоНаростающее.ДокументОтгрузки КАК ДокументОтгрузки,
	|	КоличествоНаростающее.Номенклатура КАК Номенклатура,
	|	КоличествоНаростающее.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА КоличествоНаростающее.КоличествоПосле < ПодборНоменклатуры.Количество
	|			ТОГДА КоличествоНаростающее.КоличествоПосле - КоличествоНаростающее.КоличествоДо
	|		ИНАЧЕ ПодборНоменклатуры.Количество - КоличествоНаростающее.КоличествоДо
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА КоличествоНаростающее.КоличествоПосле < ПодборНоменклатуры.Количество
	|			ТОГДА КоличествоНаростающее.КоличествоПосле - КоличествоНаростающее.КоличествоДо
	|		ИНАЧЕ ПодборНоменклатуры.Количество - КоличествоНаростающее.КоличествоДо
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ПредварительныйРезультат
	|ИЗ
	|	КоличествоНаростающее КАК КоличествоНаростающее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодборНоменклатуры КАК ПодборНоменклатуры
	|		ПО КоличествоНаростающее.Номенклатура = ПодборНоменклатуры.Номенклатура
	|			И КоличествоНаростающее.Характеристика = ПодборНоменклатуры.Характеристика		
	|;
	|
	|ВЫБРАТЬ
	|	ДокументОтгрузки КАК ДокументОтгрузки,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество,
	|	КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ПредварительныйРезультат
	|ГДЕ
	|	Количество > 0
	|
	|ИТОГИ ПО
	|	ДокументОтгрузки";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСоздатьОрдера()


&НаСервере
Функция ОтменитьДекументыПоМесту(Место)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОрдераПоМесту();
	
	Запрос.УстановитьПараметр("Место", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы ИЗ ДокументОбъект.Товары Цикл
			СтрокаТаблицы.НеОтгружать = Истина;
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		ЗаписатьСтатусДокументаОтгрузки(Место, ДокументОбъект.Ссылка, Перечисления.СтатусыРасходныхОрдеров.Отгружен);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОтменитьОрдераПоМесту()

&НаСервере
Функция ПолучитьТекстЗапросаОрдераПоМесту()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Документ
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОрдераПоМесту()


&НаСервере
Функция ПолучитьСерийныеНомераНоменклатуры(Место)
	
	СответствиеНоменклатуры  = Новый Соответствие;
	Запрос 					 = Новый Запрос;
	Запрос.Текст 			 = ПолучитьТекстЗапросаСерийныеНомера();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		МассивНомеров = Новый Массив;
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивНомеров.Добавить(ВыборкаДетальныеЗаписи.СерийныйНомер);
		КонецЦикла;
		СответствиеНоменклатуры.Вставить(ВыборкаНоменклатура.Номенклатура, МассивНомеров);
	КонецЦикла;
	
	Возврат СответствиеНоменклатуры;
	
КонецФункции // ПолучитьСерийныеНомераНоменклатуры()

&НаСервере
Функция ПолучитьТекстЗапросаСерийныеНомера()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Склад = &Склад
	|ИТОГИ ПО
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСерийныеНомера()


&НаСервере
Функция МестоПустое(Место)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Место", Место);
	
	Блокировка.Заблокировать();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	Количество
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место";
	
	Запрос.УстановитьПараметр("Место", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Ложь, Истина);
	
КонецФункции // МестоПустое(Место)()



&НаКлиенте
Процедура ОбновитьСписокМестНаКлиенте()
	ЗаполнитьКешНаКлиенте();
	ЗагрузитьСписокМест();
КонецПроцедуры // ОбновитьСписокМестНаКлиенте()



&НаСервере
Процедура ВыполнитьПереукомлектациюМеста(ШтрихкодМеста)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Место = ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(ШтрихкодМеста);
	
	Если ПроверитьМестопоШтрихкоду(Место) Тогда
		Возврат;
	КонецЕсли;
	
	
	
КонецПроцедуры // ВыполнитьПереукомлектациюМеста()

&НаСервере
Функция ПроверитьМестопоШтрихкоду(Место)
	
	Если ТипЗнч(Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Неверно введеный штрихкод.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Место.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Неверно введеный штрихкод.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Место.Владелец) <> Тип("СправочникСсылка.Склады") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место неправильно укомплектовано (владелец должен быть складом), обратитесь в отдел техподдержки.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Не Место.Транзит ИЛИ Место.ЗаказНаПеремещение.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место не является транзитным, обратитесь в отдел техподдержки.'"));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьМестопоШтрихкоду()

&НаСервере
Функция ПолучитьСкладОтгрузкиМеста(Место)
	
	Результат = Новый Структура;
	Результат.Вставить("Склад");
	Результат.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Склад КАК Склад,
	|	Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ИспользоватьОрдернуюСхемуПриОтгрузке
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место = &Место)");
	
	Запрос.УстановитьПараметр("Место", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСкладОтгрузкиМеста()

&НаСервере
Процедура ЗаполнитьСерийныеНомераМеста(Место)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаЗаполненияСерийныхНомеров();
	
КонецПроцедуры // ЗаполнитьСерийныеНомераМеста()

&НаСервере
Функция СформироватьТекстЗапросаЗаполненияСерийныхНомеров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Место КАК Место,
	|	Документ.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ
	|	Место КАК Место,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество
	|ПОМЕСТИТЬ НоменклатураПоМесту
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОтгрузки КА ДокументыОтгрузки
	|		ПО 
	|;
	|
	|ВЫБРАТЬ
	|	ДокументОтгрузки КАК ДокументОтгрузки,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	КоличествоПриход КАК Количество
	|ИЗ
	|	РегистрНакопления.КТС_ОтгрузкаИзБезордерныхСкладов.Обороты(, ДокументОтгрузки В (ВЫБРАТЬ Распоряжение ИЗ ДокументыОтгрузки))
	|ГДЕ
	|	КоличествоПриход > 0
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаЗаполненияСерийныхНомеров()


&НаСервере
Процедура СформироватьЗаголовокГруппыМест()
	
	КоличествоМест = Места.Количество();
	ГруппаМеста	   = Элементы.ГруппаМеста;
	
	Если КоличествоМест = 0 Тогда
		ГруппаМеста.Заголовок = НСтр("ru='Места'");
	Иначе
		СтрокаЗаголовок		  = НСтр("ru='Места (%1)'");
		ГруппаМеста.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовок, КоличествоМест);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокГруппыЗадач()
	
	КоличествоЗадач = СписокЗадач.Количество();
	ГруппаЗадачи	= Элементы.ГруппаЗадачи;
	
	Если КоличествоЗадач = 0 Тогда
		ГруппаЗадачи.Заголовок = НСтр("ru='Задачи'");
	Иначе
		СтрокаЗаголовок		  = НСтр("ru='Задачи (%1)'");
		ГруппаЗадачи.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовок, КоличествоЗадач);
	КонецЕсли;
	
КонецПроцедуры // СформироватьЗаголовокГруппыЗадач()





// Задачи

&НаСервере
Функция ЗагрузитьРеквизитыЗадачи(ЗадачаСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Отправитель) 	 КАК РеквизитЗадачиОтправитель,
	|	Период 						 КАК РеквизитЗадачиНачалоВыполнения,
	|	Место.ТекстЗадачи 			 КАК РеквизитЗадачиТекстЗадачи
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Место)");
	
	Запрос.УстановитьПараметр("Место", ЗадачаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитЗадачиТекстЗадачи = Выборка.РеквизитЗадачиТекстЗадачи;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	Иначе
		РеквизитЗадачиНачалоВыполнения 			= Неопределено;
		РеквизитЗадачиОтправитель 				= Неопределено;
		РеквизитЗадачиОтправительПредставление  = Неопределено;
		РеквизитЗадачиТекстЗадачи 				= Неопределено;
	КонецЕсли;
	
	Возврат РеквизитЗадачиТекстЗадачи;
	
КонецФункции // ЗагрузитьРеквизитыЗадачи()

&НаСервере
Процедура УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстанавливатьБлокировку=Ложь)
	УстановитьПривилегированныйРежим(Истина);
	Справочники.МестаДоставки.УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстанавливатьБлокировку);
	ЗагрузитьСписокЗадач();
КонецПроцедуры // УдалитьЗадачуНаСервере()

&НаСервере
Процедура ЗакрытьВсеЗадачиНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Место КАК Задача
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(,)
	|ГДЕ
	|	СтатусОтгрузки = &СтатусОтгрузки
	|	И ВариантМаршрута = &Маршрут");
	
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена);
	
	ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Блокировка 		 				 = Новый БлокировкаДанных;
	ЭлементБлокировки 				 = Блокировка.Добавить("РегистрСведений.ЗадачиНаМаршрут");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЗадач;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Место", "Задача");
	Блокировка.Заблокировать();
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаЗадач Цикл
		УстановитьСтатусЗадачиНаСервере(СтрокаТаблицы.Задача, Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена, Ложь);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСписокЗадач();
	
КонецПроцедуры // ЗакрытьВсеЗадачиНаСервере()


// Подбор номенклатуры

&НаСервере
Процедура ПодключитьСерийныеНомера(Место, Номенклатура)
	УстановитьПривилегированныйРежим(Истина);
	Если Номенклатура.ИспользоватьСерийныеНомера Тогда
		ЗагрузитьСвободныеСерийныеНомера(Место, Номенклатура);
		ЗагрузитьВыбранныеСерийныеНомера(Место, Номенклатура);
	Иначе
		ТаблицаРасходСН.Очистить();
		ТаблицаВыбранныеСН.Очистить();
		ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	КонецЕсли;
КонецПроцедуры // ЗагрузитьСвободныеСерийныеНомера()

&НаСервере
Процедура ЗагрузитьСвободныеСерийныеНомера(Место, Номенклатура)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСвободныеСерийныеНомера();
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	
	ТЗ_СерийныеНомера = Запрос.Выполнить().Выгрузить();
	КоличествоНомеров = ТЗ_СерийныеНомера.Количество();
	
	ТаблицаРасходСН.Загрузить(ТЗ_СерийныеНомера);
	
	ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	
КонецПроцедуры // ЗагрузитьСвободныеСерийныеНомера()

&НаСервере
Функция ПолучитьТекстЗапросаСвободныеСерийныеНомера()
	
	Если КешОрдернаяСхемаСклада Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ СерийныеНомераМест
		|ИЗ
		|	РегистрСведений.МестаСерийныеНомераНоменклатуры
		|ГДЕ
		|	Склад = &Склад
		|	И Номенклатура = &Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	СерийныеНомера КАК СерийныйНомер
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|			И Склад = &Склад
		|			И СерийныеНомера НЕ В (ВЫБРАТЬ СерийныйНомер ИЗ СерийныеНомераМест))";
		
	Иначе
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПолучательЧерезПеревозчика = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|			ТОГДА Владелец
		|		ИНАЧЕ ПолучательЧерезПеревозчика
		|	КОНЕЦ КАК Получатель
		|ПОМЕСТИТЬ ТаблицаПолучателей
		|ИЗ
		|	Справочник.МестаДоставки
		|ГДЕ
		|	Ссылка = &Место
		|;
		|
		|ВЫБРАТЬ
		|	СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
		|ИЗ
		|	РегистрСведений.МестаСерийныеНомераНоменклатуры
		|ГДЕ
		|	Склад = &Склад
		|	И Место = &Место
		|	И Номенклатура = &Номенклатура
		|;
		|
		|ВЫБРАТЬ
		|	ДокументОтгрузки КАК ДокументОтгрузки,
		|	Склад КАК Склад,
		|	Номенклатура КАК Номенклатура,
		|	Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ТаблицаОтгрузки
		|ИЗ
		|	РегистрНакопления.КТС_ОтгрузкаИзБезордерныхСкладов.Остатки(&ДатаОтгрузки,
		|							Склад=&Склад 
		|							И Номенклатура.ИспользоватьСерийныеНомера
		|							И Номенклатура = &Номенклатура) КАК ДокументыОтгрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК ДокументыПоМаршрутам
		|		ПО ДокументыОтгрузки.ДокументОтгрузки = ДокументыПоМаршрутам.Регистратор
		|			И ДокументыПоМаршрутам.Получатель В (ВЫБРАТЬ Получатель ИЗ ТаблицаПолучателей)
		|;
		|
		|ВЫБРАТЬ
		|	РегистрСерийныеНомера.СерийныеНомера КАК СерийныйНомер
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(,,Регистратор,
		|							(Номенклатура, Склад) В 
		|								(ВЫБРАТЬ
		|									Номенклатура КАК Номенклатура,
		|									Склад КАК Склад
		|								ИЗ
		|									ТаблицаОтгрузки)
		|							И СерийныеНомера НЕ В (ВЫБРАТЬ СерийныйНомер ИЗ ТаблицаСерийныхНомеров)) КАК РегистрСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтгрузки КАК ТаблицаОтгрузки
		|		ПО РегистрСерийныеНомера.Регистратор 	    = ТаблицаОтгрузки.ДокументОтгрузки
		|			И РегистрСерийныеНомера.Номенклатура    = ТаблицаОтгрузки.Номенклатура
		|			И РегистрСерийныеНомера.Склад    	    = ТаблицаОтгрузки.Склад";
		
	КонецЕсли;				
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСвободныеСерийныеНомера()

&НаСервере
Процедура ЗагрузитьВыбранныеСерийныеНомера(Место, Номенклатура)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВыбранныеСерийныеНомера();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ТаблицаВыбранныеСН.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьИнформациюОКоличествеСерийныхНомеров();
	
КонецПроцедуры // ЗагрузитьВыбранныеСерийныеНомера()

&НаСервере
Функция ПолучитьТекстЗапросаВыбранныеСерийныеНомера()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СерийныйНомер
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Склад = &Склад
	|	И Номенклатура = &Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаВыбранныеСерийныеНомера()

&НаСервере
Процедура УдалитьНоменклатуруИзМеста(Место, Номенклатура, Получатель, АдресПолучателя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место уже укомплектовано.'"));
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьМестаНоменклатуры(Место, Номенклатура);
	
	НаборЗаписей = РегистрыСведений.МестаСерийныеНомераНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Место.Установить(Место);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьНоменклатуруМеста(Место);
	
	Если ПодборНоменклатуры.Количество() = 0 Тогда
		ТаблицаРасходСН.Очистить();
		ТаблицаВыбранныеСН.Очистить();
	КонецЕсли;
	
	//Если Место.Владелец = Получатель И Место.АдресДоставки = АдресПолучателя Тогда
	//	РеквизитыМеста = ДанныеМестаВСтруктуру(Место);
	//	ЗагрузитьПулНоменклатуры(РеквизитыМеста);
	//КонецЕсли;
	
	КешНоменклатураПодбор = Номенклатура;
	ВосстановитьТекущиеСтрокиНаСервере();
	
КонецПроцедуры // УдалитьНоменклатуруИзМеста()


&НаСервере
Процедура ДобавитьСерийныйНомерПодбор(ПараметрыДанных, СерийныйНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Не ПроверитьВозможностьКомплектацииМеста(ПараметрыДанных.Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место уже полностью укомплектовано, дальнейшая комплектация невозможна.'"),
		,
		"ТСД_СерийныйНомер");
		ОтменитьТранзакцию();								
		Возврат;
	КонецЕсли;
	
	Если ПроверитьКоличествоСерийныхНомеров(ПараметрыДанных.Место, ПараметрыДанных.Номенклатура) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Количество серийных номеров превышает количество номенклатуры.'"),
		,
		"ТСД_СерийныйНомер");
		ОтменитьТранзакцию();								
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьСерийныеНомераНоменклатуры(ПараметрыДанных.Место, 
	Истина,
	Склад, 
	ПараметрыДанных.Номенклатура, 
	, 
	Серийныйномер);
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСвободныеСерийныеНомера(ПараметрыДанных.Место, ПараметрыДанных.Номенклатура);
	ЗагрузитьВыбранныеСерийныеНомера(ПараметрыДанных.Место, ПараметрыДанных.Номенклатура);
	ЗагрузитьНоменклатуруМеста(ПараметрыДанных.Место, ПараметрыДанных.Номенклатура);
	ВосстановитьТекущиеСтрокиНаСервере();
	
КонецПроцедуры // ДобавитьСерийныйНомерПодбор()



&НаКлиенте
Процедура ДобавитьСерийныйНомер()
	ТекущиеДанные = Элементы.ПодборНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьКешНаКлиенте();
		ДобавитьСерийныйНомерНаСервере(ТекущиеДанные.Место, ТекущиеДанные.Номенклатура, ТекущиеДанные.Количество);
	КонецЕсли;
КонецПроцедуры // ДобавитьСерийныйНомер()

&НаСервере
Процедура ДобавитьСерийныйНомерНаСервере(Место, Номенклатура, Количество) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место уже полностью укомплектовано, дальнейшая комплектация невозможна.'"),
		,
		"ТСД_СерийныйНомер");
		ОтменитьТранзакцию();								
		Возврат;
	КонецЕсли;
	
	Если ПроверитьКоличествоСерийныхНомеров(Место, Номенклатура) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Количество серийных номеров превышает количество номенклатуры.'"),
		,
		"ТСД_СерийныйНомер");
		ОтменитьТранзакцию();								
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = ПолучитьСвободныйСерийныйНомер(Место, Номенклатура);
	
	Если СерийныйНомер = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Серийный номер не найден.'"),
		,
		"ТСД_СерийныйНомер");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьСерийныеНомераНоменклатуры(Место, 
	Истина,
	Склад, 
	Номенклатура, 
	, 
	Серийныйномер);
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСвободныеСерийныеНомера(Место, Номенклатура);
	ЗагрузитьВыбранныеСерийныеНомера(Место, Номенклатура);
	ЗагрузитьНоменклатуруМеста(Место, Номенклатура);
	ВосстановитьТекущиеСтрокиНаСервере();
	
КонецПроцедуры // ДобавитьСерийныйНомерНаСервере()

&НаСервере
Функция ПроверитьКоличествоСерийныхНомеров(Место, Номенклатура)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
	ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементМестаНоменклатуры.УстановитьЗначение("Место", Место);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", Номенклатура);
	
	ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаСерийныеНомераНоменклатуры");
	ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементМестаНоменклатуры.УстановитьЗначение("Склад", Склад);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Место", Место);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", Номенклатура);
	
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Количество КАК Количество
	|ПОМЕСТИТЬ КешКоличествоНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	КОЛИЧЕСТВО(СерийныйНомер) КАК Количество
	|ПОМЕСТИТЬ КешКоличествоСерийныеНомера
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Склад = &Склад
	|	И Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КешКоличествоНоменклатуры.Количество > ЕСТЬNULL(КешКоличествоСерийныеНомера.Количество, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КоличествоСН
	|ИЗ
	|	КешКоличествоНоменклатуры КАК КешКоличествоНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешКоличествоСерийныеНомера КАК КешКоличествоСерийныеНомера
	|		ПО КешКоличествоНоменклатуры.Номенклатура = КешКоличествоСерийныеНомера.Номенклатура");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСН;
	
КонецФункции // ПроверитьКоличествоСерийныхНомеров()


&НаСервере
Функция ПолучитьСвободныйСерийныйНомер(Место, Номенклатура)
	
	ЗагрузитьСвободныеСерийныеНомера(Место, Номенклатура);
	ТЗ_ТаблицаРасходСН  = ТаблицаРасходСН.Выгрузить();
	
	Для каждого СтрокаТаблицы ИЗ ТЗ_ТаблицаРасходСН Цикл
		Если ВРег(СокрЛП(Строка(СтрокаТаблицы.СерийныйНомер))) = ВРег(СокрЛП(ТСД_СерийныйНомер)) Тогда
			Возврат СтрокаТаблицы.СерийныйНомер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСвободныйСерийныйНомер()


&НаСервере
Процедура УдалитьСерийныйНомер(Место, Номенклатура, СерийныйНомер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место уже укомплектовано.'"));
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьСерийныеНомераНоменклатуры(Место, 
	Ложь,
	Склад, 
	Номенклатура, 
	, 
	Серийныйномер);	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСвободныеСерийныеНомера(Место, Номенклатура);
	ЗагрузитьВыбранныеСерийныеНомера(Место, Номенклатура);
	ЗагрузитьНоменклатуруМеста(Место);
	ВосстановитьТекущиеСтрокиНаСервере();
	
КонецПроцедуры // УдалитьСерийныйНомер()


&НаСервере
Процедура ЗаполнитьИнформациюОКоличествеСерийныхНомеров()
	
	ШаблонПодвалВыбранные = "Количество выбранных С/Н: %1";
	ШаблонПодвалДоступные = "Количество доступных С/Н: %1";
	
	Подвал_ВыбранныеСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодвалВыбранные, ТаблицаВыбранныеСН.Количество());
	Подвал_РасходСН    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодвалДоступные, ТаблицаРасходСН.Количество());
	
КонецПроцедуры // ЗаполнитьИнформациюОКоличествеСерийныхНомеров()

&НаСервере
Процедура ДобавитьНоменклатуруПоВыбору(Место, СтруктураДанные,СообщениеОбОшибке, ТДПулОтгрузки)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если Не ПроверитьВозможностьКомплектацииМеста(Место) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Место уже укомплектовано, добавление номенклатуры запрещено.'")
		, 
		, "Места");
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанные.Номенклатура.ИспользоватьУпаковки Тогда
		ВвестиКоличество = Истина;
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементОтгрузкаМест = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементОтгрузкаМест.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементОтгрузкаМест.УстановитьЗначение("Склад", Склад);
	
	ЭлементТоварыКОтгрузке = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
	ЭлементТоварыКОтгрузке.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементТоварыКОтгрузке.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
	ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", СтруктураДанные.Номенклатура);
	ЭлементМестаНоменклатуры.УстановитьЗначение("Характеристика", СтруктураДанные.Характеристика);
	
	Блокировка.Заблокировать();
	
	КоличествоНаЗапись = ПолучитьКоличествоНаЗапись(Место, СтруктураДанные);
	ДобавитьНоменклатуру(Место, СтруктураДанные, КоличествоНаЗапись);
	
	
	Если ПроверитьПравильностьПостроенияМеста(Место, Истина, СообщениеОбОшибке, ТДПулОтгрузки) Тогда
		ЗафиксироватьТранзакцию();
		
		РеквизитыМеста = ДанныеМестаВСтруктуру(Место, ТДПулОтгрузки);
		ЗагрузитьПулНоменклатуры(РеквизитыМеста);
		ЗагрузитьНоменклатуруМеста(Место, СтруктураДанные.Номенклатура);
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьНоменклатуруПоВыбору()






// Форма Вопрос

// Функция открывает общую форму конфигурации «Вопрос» и получает ответ пользователя,
// действительно ли он хочет закрыть отгрузку мест
//
// Параметры:
//   Отказ - Булево - признак отказа от закрытия формы.
//
&НаКлиенте
Процедура ПолучитьОтветПользователяПередЗакрытием(Отказ)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Завершить", "Завершить");
	СписокКнопок.Добавить("Отмена", "Отмена");
	
	КнопкиПоУмолчанию = Новый СписокЗначений;
	КнопкиПоУмолчанию.Добавить("Завершить", "Завершить");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Завершение работы'"));
	ПараметрыФормы.Вставить("ТекстСообщения", НСтр("ru='Завершить работу с программой'"));
	ПараметрыФормы.Вставить("Кнопки", СписокКнопок);
	ПараметрыФормы.Вставить("КнопкаПоУмолчанию", КнопкиПоУмолчанию);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.Вопрос", ПараметрыФормы);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Значение") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Отмена" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОтветПользователяПередЗакрытием()


// Работа из кешированием

// Процедура кеширует значения места, номенклатуры, характеристики для их востановления
// в таблицах Места и ПодборНоменклатуры после серверных вызовов
//
&НаКлиенте
Процедура ЗаполнитьКешНаКлиенте()
	
	ТДМеста = Элементы.Места.ТекущиеДанные;
	Если ТДМеста = Неопределено Тогда
		КешМесто = Неопределено;
	Иначе
		КешМесто = ТДМеста.Место;
	КонецЕсли;
	
	ТДПодборНоменклатуры = Элементы.ПодборНоменклатуры.ТекущиеДанные;
	Если ТДПодборНоменклатуры = Неопределено Тогда
		КешНоменклатураПодбор = Неопределено;
		КешХарактеристикаПодбор = Неопределено;
	Иначе
		КешНоменклатураПодбор = ТДПодборНоменклатуры.Номенклатура;
		КешХарактеристикаПодбор = ТДПодборНоменклатуры.Характеристика;
	КонецЕсли;
	
	ТДПулОтгрузки = Элементы.ПулОтгрузки.ТекущиеДанные;
	Если ТДПулОтгрузки = Неопределено Тогда
		КешАдресДоставки = Неопределено;
		КешПолучатель	 = Неопределено;
		КешНазначение	 = Неопределено;
	Иначе
		КешАдресДоставки = ТДПулОтгрузки.АдресДоставки;
		КешПолучатель	 = ТДПулОтгрузки.Получатель;
		КешНазначение	 = ТДПулОтгрузки.Назначение;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКешНаКлиенте()

// Процедура восстанавливает текущие строки таблиц Места, ПодборНоменклатуры
// и ПулНоменклатуры по сохраненном кеше
//
&НаСервере
Процедура ВосстановитьТекущиеСтрокиНаСервере()
	
	СтруктураПоиска = Новый Структура("Место", КешМесто);
	РезультатПоиска = Места.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.Места.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", КешНоменклатураПодбор);
	Если ФО_ИспользованиеХарактеристик Тогда
		СтруктураПоиска.Вставить("Характеристика", КешХарактеристикаПодбор);
	КонецЕсли;
	РезультатПоиска = ПодборНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ПодборНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	РезультатПоиска = ПулНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ПулНоменклатуры.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	
	// Пул отгрузки
	
	СтруктураПоиска = Новый Структура("Получатель, АдресДоставки, Назначение", КешПолучатель, КешАдресДоставки, КешНазначение);
	РезультатПоиска = ПулОтгрузки.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		Элементы.ПулОтгрузки.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьКешНаСервере()




// Регистры сведений

&НаСервере
Процедура ВыполнитьЗаписьМестаНоменклатуры(Место, Номенклатура=Неопределено, Характеристика=Неопределено, Количество=Неопределено, ДобавлятьЗапись=Ложь)
	
	ЗаборЗаписей = РегистрыСведений.МестаНоменклатуры.СоздатьНаборЗаписей();
	ЗаборЗаписей.Отбор.Место.Установить(Место);
	
	Если Номенклатура <> Неопределено Тогда
		ЗаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	КонецЕсли;
	
	Если Характеристика <> Неопределено Тогда
		ЗаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	КонецЕсли;
	
	Если ДобавлятьЗапись Тогда
		Запись = ЗаборЗаписей.Добавить();
		Запись.Место 		  = Место;
		Запись.Номенклатура   = Номенклатура;
		Запись.Характеристика = Характеристика;
		Запись.Количество 	  = Количество;
	КонецЕсли;
	
	ЗаборЗаписей.Записать();
	
КонецПроцедуры // ВыполнитьЗаписьМестаНоменклатуры()

&НаСервере
Процедура ВыполнитьЗаписьОтгрузкаМест(Склад, Место, СтатусОтгрузки)
	
	НаборЗаписей = РегистрыСведений.ОтгрузкаМест.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	НаборЗаписей.Отбор.Место.Установить(Место);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период         	= ТекущаяДата();
	Запись.Склад  		  	= Склад;
	Запись.Место  		  	= Место;
	Запись.СтатусОтгрузки 	= СтатусОтгрузки;
	Запись.ВариантМаршрута  = Маршрут;
	Запись.Пользователь		= ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры // ВыполнитьЗаписьОтгрузкаМест()

&НаСервере
Процедура ВыполнитьЗаписьСерийныеНомераНоменклатуры(Место, 
	ДобавлятьЗапись=Ложь,
	Склад=Неопределено, 
	Номенклатура=Неопределено, 
	Характеристика=Неопределено, 
	Серийныйномер=Неопределено)
	
	НаборЗаписей = РегистрыСведений.МестаСерийныеНомераНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Место.Установить(Место);
	
	Если Склад <> Неопределено Тогда
		НаборЗаписей.Отбор.Склад.Установить(Склад);
	КонецЕсли;
	
	Если Номенклатура <> Неопределено Тогда
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	КонецЕсли;	
	
	Если Характеристика <> Неопределено Тогда
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
	КонецЕсли;
	
	Если Серийныйномер <> Неопределено Тогда
		НаборЗаписей.Отбор.Серийныйномер.Установить(Серийныйномер);
	КонецЕсли;
	
	Если ДобавлятьЗапись Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Место 		 = Место;
		Запись.Склад 		 = Склад;
		Запись.Номенклатура  = Номенклатура;
		Запись.СерийныйНомер = СерийныйНомер;
		
	КонецЕсли;	
	
	НаборЗаписей.Записать();										
	
КонецПроцедуры // ВыполнитьЗаписьСерийныеНомераНоменклатуры()

&НаСервере
Процедура ВыполнитьЗаписьОтгрузкаМестПоДокументам(Место, СтатусДокумента, Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Документ КАК Документ
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место");
	Запрос.УстановитьПараметр("Место", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда	
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ДокументОбъект.Статус = СтатусДокумента;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.МестаПоДокументам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Место.Установить(Место);
	НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Место = Место;
	Запись.Документ = Выборка.Документ;
	Запись.СтатусДокумента = СтатусДокумента;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ВыполнитьЗаписьОтгрузкаМестПоДокументам()





&НаСервере
Процедура ПоместитьМестоВМашинуНаСервере(Место)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокровки 	   = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
	ЭлементБлокровки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокровки.УстановитьЗначение("Место", Место);
	
	ЭлементБлокровки 	   = Блокировка.Добавить("РегистрСведений.МестаПоДокументам");
	ЭлементБлокровки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокровки.УстановитьЗначение("Место", Место);
	
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СтатусОтгрузки КАК СтатусОтгрузки
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Место = &Место И Склад = &Склад)");
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.СтатусОтгрузки <> Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для отгрузки в машину необходимо завершить комплектацию места.'"));
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьОтгрузкаМест(Склад, Место, Перечисления.СтатусыОтгрузкиМест.ОтгруженоПартнеру);
	
	МестоОбъект = Место.ПолучитьОбъект();
	МестоОбъект.Архивный = Истина;
	МестоОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ЗагрузитьСписокМест();
	
КонецПроцедуры // ПоместитьМестоВмашинуНаСервере()






// Печатные формы

// QR-коды

&НаСервереБезКонтекста
Функция СформироватьКолекциюПечатныхФорм(ИмяИсточникаДанных, ПараметрыИсточника, ОбъектыПечати = Неопределено, ПараметрыВывода = Неопределено) 
	Перем КоллекцияПечатныхФорм;
	ИсточникДанных = ModuleLibraryServer.GetRefLibrary(ИмяИсточникаДанных);                
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);        
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");                                        
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовкаПечатиQRКода(Место, КоличествоКопий, ИмяЭтикетки)
	
	// Если доставка товара через перевозчика - печатаем 2 экземпляра этикеток
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Место.ПолучательЧерезПеревозчика) Тогда
		КоличествоКопий = 2;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;        
	ПараметрКоманды.Добавить(Место);        
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", ИмяЭтикетки, Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	Возврат СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
КонецФункции // НеобходимостьДополнительноПечататьQR()


&НаКлиенте
Процедура НапечататьQRКод()
	
	Если ПустаяСтрока(ПринтерQRКода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='QR-код не будет распечатан. Необходимо задать имя принтера QR-кода на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ТДМеста 		= Элементы.Места.ТекущиеДанные;
	КоличествоКопий = 1;
	
	Если ТДМеста=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабличныеДокументы = ПодготовкаПечатиQRКода(ТДМеста.Место, КоличествоКопий, "МестаДоставки_ПечатьQRЭтикетки");
	
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ПринтерQRКода;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		
		// Если доставка товара через перевозчика - нужно печатать 2 этикетки
		Если КоличествоКопий > 1 Тогда
			ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // НапечататьQRКод()




// Документы водителю (ТТН)

&НаКлиенте
Процедура НапечататьДокументыВодителю()
	
	Если ПустаяСтрока(ПринтерА4) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документы водителю не будут распечатаны. Необходимо задать имя принтера на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ТабДокумент = СформироватьПечатнуюФормуДокументовВодителю();
	ТабДокумент.ИмяПринтера = ПринтерА4;
	ТабДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
	ОткрытьФорму(ФормаФокус);
	ФормаФокус.Закрыть();
	Активизировать();
	
КонецПроцедуры // НапечататьДокументыВодителю()

&НаСервере
Функция СформироватьПечатнуюФормуДокументовВодителю()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет 				= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ВидатковаНакладна_Перемещение");
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик    = Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель   = Макет.Получитьобласть("Покупатель");
	ОбластьШапка   		= Макет.Получитьобласть("ШапкаТаблицыПеремещения");
	ОбластьСтрока		= Макет.Получитьобласть("СтрокаТаблицыПеремещения");
	ОбластьПодвал		= Макет.Получитьобласть("ПодвалТаблицыПеремещения");
	
	ТабДокумент 		= Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Ссылка КАК Место,
	|	Владелец КАК Получатель,
	|	АдресДоставки КАК АдресДоставки
	|ПОМЕСТИТЬ КешМеста
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Не Архивный
	|;
	|
	|ВЫБРАТЬ
	|	ОтгрузкаМест.Место КАК Место,
	|	КешМеста.АдресДоставки КАК АдресДоставки,
	|	КешМеста.Получатель КАК Получатель
	|ПОМЕСТИТЬ МестаДляПечати
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад = &Склад И Место В (ВЫБРАТЬ Место ИЗ КешМеста)) КАК ОтгрузкаМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешМеста КАК КешМеста
	|		ПО ОтгрузкаМест.Место = КешМеста.Место  
	|ГДЕ
	|	СтатусОтгрузки В (ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации), ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена))
	|	И ВариантМаршрута = &Маршрут
	|;
	|
	|ВЫБРАТЬ
	|	МестаДляПечати.Получатель КАК Получатель,
	|	МестаДляПечати.АдресДоставки КАК АдресДоставки,
	|	МестаНоменклатуры.Номенклатура.Код КАК Код,
	|	МестаНоменклатуры.Номенклатура КАК Товар,
	|	МестаНоменклатуры.Характеристика КАК Характеристика,
	|	МестаНоменклатуры.Количество КАК Количество,
	|	МестаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаЦены
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МестаДляПечати КАК МестаДляПечати
	|		ПО МестаНоменклатуры.Место = МестаДляПечати.Место
	|ИТОГИ
	|	СУММА(МестаНоменклатуры.Количество), 
	|	МАКСИМУМ(МестаНоменклатуры.Номенклатура.ЕдиницаИзмерения),
	|	МАКСИМУМ(МестаДляПечати.АдресДоставки)
	|ПО
	|	МестаДляПечати.Получатель");
	
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаПолучатель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПолучатель.Следующий() Цикл
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокументаВодителю(ВыборкаПолучатель);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПоставщик.Параметры.ПредставлениеПоставщика = БанковскийСчет.ТекстКорреспондента;
		ТабДокумент.Вывести(ОбластьПоставщик);
		
		ОбластьПокупатель.Параметры.Адрес = ВыборкаПолучатель.АдресДоставки;
		ОбластьПокупатель.Параметры.ПредставлениеПолучателя = Строка(ВыборкаПолучатель.Получатель);
		ТабДокумент.Вывести(ОбластьПокупатель);
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		ВыборкаДетальныеЗаписи = ВыборкаПолучатель.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ТабДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПолучатель);
		ТабДокумент.Вывести(ОбластьПодвал);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуДокументовВодителю()

&НаСервере
Функция СформироватьЗаголовокДокументаВодителю(Выборка)
	
	ТекстЗаголовка = "Транспортна накладна від %1";
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка,
	//ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Место.Код, Ложь, Истина),
	Формат(ТекущаяДата(), "ДФ='дд ММММ гггг'"));
	
КонецФункции // СформироватьЗаголовокДокументаВодителю()


// Подбор номенклатуры

&НаСервере
Функция СформироватьПечатнуюФормуПодборНоменклатуры(МассивИдентификаторовСтрок, Получатель, АдресДоставки)
	
	Макет 		= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_ПодборНоменклатуры");
	ТабДокумент = Новый ТабличныйДокумент;
	
	ЗаголовокОтступ		 		= Макет.ПолучитьОбласть("Заголовок|Отступ");
	ЗаголовокНомерСтроки 		= Макет.ПолучитьОбласть("Заголовок|НомерСтроки");
	ЗаголовокОсновнаяЯчейка		= Макет.ПолучитьОбласть("Заголовок|ОсновнаяЯчейка");
	ЗаголовокДопЯчейки	 		= Макет.ПолучитьОбласть("Заголовок|ДопЯчейки");
	ЗаголовокКод		 		= Макет.ПолучитьОбласть("Заголовок|Код");
	ЗаголовокАртикул	 		= Макет.ПолучитьОбласть("Заголовок|Артикул");
	ЗаголовокНоменклатура		= Макет.ПолучитьОбласть("Заголовок|Номенклатура");
	ЗаголовокХарактеристика		= Макет.ПолучитьОбласть("Заголовок|Характеристика");
	ЗаголовокКоличество			= Макет.ПолучитьОбласть("Заголовок|Количество");
	ЗаголовокЕдиницаИзмерения	= Макет.ПолучитьОбласть("Заголовок|ЕдиницаИзмерения");
	
	
	ШапкаОтступ		 			= Макет.ПолучитьОбласть("ШапкаТаблицы|Отступ");
	ШапкаНомерСтроки 			= Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ШапкаОсновнаяЯчейка			= Макет.ПолучитьОбласть("ШапкаТаблицы|ОсновнаяЯчейка");
	ШапкаДопЯчейки	 			= Макет.ПолучитьОбласть("ШапкаТаблицы|ДопЯчейки");
	ШапкаКод		 			= Макет.ПолучитьОбласть("ШапкаТаблицы|Код");
	ШапкаАртикул	 			= Макет.ПолучитьОбласть("ШапкаТаблицы|Артикул");
	ШапкаНоменклатура			= Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура");
	ШапкаХарактеристика			= Макет.ПолучитьОбласть("ШапкаТаблицы|Характеристика");
	ШапкаКоличество				= Макет.ПолучитьОбласть("ШапкаТаблицы|Количество");
	ШапкаЕдиницаИзмерения		= Макет.ПолучитьОбласть("ШапкаТаблицы|ЕдиницаИзмерения");
	
	СтрокаОтступ		 		= Макет.ПолучитьОбласть("СтрокаТаблицы|Отступ");
	СтрокаНомерСтроки 			= Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
	СтрокаОсновнаяЯчейка		= Макет.ПолучитьОбласть("СтрокаТаблицы|ОсновнаяЯчейка");
	СтрокаДопЯчейки				= Макет.ПолучитьОбласть("СтрокаТаблицы|ДопЯчейки");
	СтрокаКод		 			= Макет.ПолучитьОбласть("СтрокаТаблицы|Код");
	СтрокаАртикул	 			= Макет.ПолучитьОбласть("СтрокаТаблицы|Артикул");
	СтрокаНоменклатура			= Макет.ПолучитьОбласть("СтрокаТаблицы|Номенклатура");
	СтрокаХарактеристика		= Макет.ПолучитьОбласть("СтрокаТаблицы|Характеристика");
	СтрокаКоличество			= Макет.ПолучитьОбласть("СтрокаТаблицы|Количество");
	СтрокаЕдиницаИзмерения		= Макет.ПолучитьОбласть("СтрокаТаблицы|ЕдиницаИзмерения");
	
	
	ПробелОтступ		 		= Макет.ПолучитьОбласть("Пробел|Отступ");
	ПробелНомерСтроки 			= Макет.ПолучитьОбласть("Пробел|НомерСтроки");
	ПробелОсновнаяЯчейка		= Макет.ПолучитьОбласть("Пробел|ОсновнаяЯчейка");
	ПробелДопЯчейки				= Макет.ПолучитьОбласть("Пробел|ДопЯчейки");
	ПробелКод		 			= Макет.ПолучитьОбласть("Пробел|Код");
	ПробелАртикул	 			= Макет.ПолучитьОбласть("Пробел|Артикул");
	ПробелНоменклатура			= Макет.ПолучитьОбласть("Пробел|Номенклатура");
	ПробелХарактеристика		= Макет.ПолучитьОбласть("Пробел|Характеристика");
	ПробелКоличество			= Макет.ПолучитьОбласть("Пробел|Количество");
	ПробелЕдиницаИзмерения		= Макет.ПолучитьОбласть("Пробел|ЕдиницаИзмерения");
	
	ОбластьЗаголовок = Новый ТабличныйДокумент;
	ОбластьЗаголовок.Вывести(ЗаголовокОтступ);
	ОбластьЗаголовок.Присоединить(ЗаголовокНомерСтроки);
	ОбластьЗаголовок.Присоединить(ЗаголовокОсновнаяЯчейка);
	
	
	
	ЗаголовокДопЯчейки.Параметры.Получатель = Получатель;
	ЗаголовокДопЯчейки.Параметры.АдресДоставки = АдресДоставки;
	
	ОбластьЗаголовок.Присоединить(ЗаголовокДопЯчейки);
	ОбластьЗаголовок.Присоединить(ЗаголовокКод);
	ОбластьЗаголовок.Присоединить(ЗаголовокАртикул);
	ОбластьЗаголовок.Присоединить(ЗаголовокНоменклатура);
	
	Если ФО_ИспользованиеХарактеристик Тогда
		ОбластьЗаголовок.Присоединить(ЗаголовокХарактеристика);
	КонецЕсли;
	ОбластьЗаголовок.Присоединить(ЗаголовокКоличество);
	ОбластьЗаголовок.Присоединить(ЗаголовокЕдиницаИзмерения);
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	////////////////////////////////////////////////////
	ОбластьПробел = Новый ТабличныйДокумент;
	ОбластьПробел.Вывести(ПробелОтступ);
	ОбластьПробел.Присоединить(ПробелНомерСтроки);
	ОбластьПробел.Присоединить(ПробелОсновнаяЯчейка);
	ОбластьПробел.Присоединить(ПробелДопЯчейки);		
	ОбластьПробел.Присоединить(ПробелКод);
	ОбластьПробел.Присоединить(ПробелАртикул);
	ОбластьПробел.Присоединить(ПробелНоменклатура);
	
	Если ФО_ИспользованиеХарактеристик Тогда
		ОбластьПробел.Присоединить(ПробелХарактеристика);
	КонецЕсли;
	ОбластьПробел.Присоединить(ПробелКоличество);
	ОбластьПробел.Присоединить(ПробелЕдиницаИзмерения);
	
	ТабДокумент.Вывести(ОбластьПробел);
	//////////////////////////////////////////////////	
	
	ШапкаТаблицы = Новый ТабличныйДокумент;
	ШапкаТаблицы.Вывести(ШапкаОтступ);
	ШапкаТаблицы.Присоединить(ШапкаНомерСтроки);
	ШапкаТаблицы.Присоединить(ШапкаОсновнаяЯчейка);
	ШапкаТаблицы.Присоединить(ШапкаДопЯчейки);
	ШапкаТаблицы.Присоединить(ШапкаКод);
	ШапкаТаблицы.Присоединить(ШапкаАртикул);
	ШапкаТаблицы.Присоединить(ШапкаНоменклатура);
	Если ФО_ИспользованиеХарактеристик Тогда
		ШапкаТаблицы.Присоединить(ШапкаХарактеристика);
	КонецЕсли;
	ШапкаТаблицы.Присоединить(ШапкаКоличество);
	ШапкаТаблицы.Присоединить(ШапкаЕдиницаИзмерения);
	
	ТабДокумент.Вывести(ШапкаТаблицы);
	
	ТаблицаПулНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаПулНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПулНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПулНоменклатуры.Колонки.Добавить("КОтгрузке", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
		НоваяСтрока 	= ТаблицаПулНоменклатуры.Добавить();
		СтрокаТаблицы   = ПулНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаПулНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаПулНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаПулНоменклатуры.КОтгрузке КАК КОтгрузке
	|ПОМЕСТИТЬ КешНоменклатура
	|ИЗ
	|	&ТаблицаПулНоменклатуры КАК ТаблицаПулНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КешНоменклатура.Номенклатура КАК Справочник.Номенклатура).Код КАК Код,
	|	ВЫРАЗИТЬ(КешНоменклатура.Номенклатура КАК Справочник.Номенклатура).Артикул КАК Артикул,
	|	ВЫРАЗИТЬ(КешНоменклатура.Номенклатура КАК Справочник.Номенклатура).НаименованиеПолное КАК Номенклатура,
	|	ВЫРАЗИТЬ(КешНоменклатура.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).НаименованиеПолное КАК Характеристика,
	|	КешНоменклатура.КОтгрузке КАК Количество,
	|	ВЫРАЗИТЬ(КешНоменклатура.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, """") КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка, """") КАК ДопЯчейка
	|ИЗ
	|	КешНоменклатура КАК КешНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО КешНоменклатура.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = &Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО КешНоменклатура.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КешНоменклатура.Номенклатура.ВидНоменклатуры.Наименование,
	|	КешНоменклатура.Номенклатура.Наименование
	|
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	Код,
	|	Артикул,
	|	ОсновнаяЯчейка" );
	
	Запрос.УстановитьПараметр("ТаблицаПулНоменклатуры", ТаблицаПулНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	НомерСтроки = 1;
	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	Пока Выборка.Следующий() Цикл
		
		ВыборкаНоменклатура = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			Номенклатура =  ВыборкаНоменклатура.Номенклатура;
			
			ВыборкаХарактеристика = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристика.Следующий() Цикл
				ВыборкаЕденицаИзмерения = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЕденицаИзмерения.Следующий() Цикл
					ВыборкаЕденицаИзмерения = ВыборкаЕденицаИзмерения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаЕденицаИзмерения.Следующий() Цикл
						ВыборкаКод = ВыборкаЕденицаИзмерения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаКод.Следующий() Цикл
							ВыборкаАртикул = ВыборкаКод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаАртикул.Следующий() Цикл
								ТабСтрока = Новый ТабличныйДокумент;
								ТабСтрока.Вывести(СтрокаОтступ);
								
								
								СтрокаНомерСтроки.Параметры.НомерСтроки = НомерСтроки;
								ТабСтрока.Присоединить(СтрокаНомерСтроки);
								
								НомерСтроки = НомерСтроки + 1;
								
								
								
								ВыборкаОсновнаяЯчейка = ВыборкаАртикул.Выбрать();
								ДопЯчейки = "";	
								Пока ВыборкаОсновнаяЯчейка.Следующий() Цикл
									ДопЯчейки = ДопЯчейки + ВыборкаОсновнаяЯчейка.ДопЯчейка + Символы.ПС;
									ОсновнаяЯчейка= ВыборкаОсновнаяЯчейка.ОсновнаяЯчейка;                                 
								КонецЦикла;
								СтрокаОсновнаяЯчейка.Параметры.ОсновнаяЯчейка = ОсновнаяЯчейка;
								ТабСтрока.Присоединить(СтрокаОсновнаяЯчейка);
								
								СтрокаДопЯчейки.Параметры.ДопЯчейки = ДопЯчейки;
								ТабСтрока.Присоединить(СтрокаДопЯчейки);
								
								ИтоговаяСтрока = СтрЗаменить(Формат(Число(ВыборкаАртикул.Код), "ЧРГ='_'"), "_", "");
								СтрокаКод.Параметры.Код = ИтоговаяСтрока;
								ТабСтрока.Присоединить(СтрокаКод);
								
								СтрокаАртикул.Параметры.Артикул = ВыборкаАртикул.Артикул;
								ТабСтрока.Присоединить(СтрокаАртикул);
								
								СтрокаНоменклатура.Параметры.Номенклатура = ВыборкаАртикул.Номенклатура;
								ТабСтрока.Присоединить(СтрокаНоменклатура);
								
								Если ФО_ИспользованиеХарактеристик Тогда
									СтрокаХарактеристика.Параметры.Характеристика = ВыборкаАртикул.Характеристика;
									ТабСтрока.Присоединить(СтрокаХарактеристика);
									
								КонецЕсли;
								
								СтрокаКоличество.Параметры.Количество = ВыборкаАртикул.Количество;
								ТабСтрока.Присоединить(СтрокаКоличество);
								
								СтрокаЕдиницаИзмерения.Параметры.ЕдиницаИзмерения = ВыборкаАртикул.ЕдиницаИзмерения;
								ТабСтрока.Присоединить(СтрокаЕдиницаИзмерения);
								
								Если ТабДокумент.ПроверитьВывод(ТабСтрока) Тогда
									ТабДокумент.Вывести(ТабСтрока);
								Иначе
									ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
									ТабДокумент.Вывести(ТабСтрока);
								КонецЕсли;
								
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуПодборНоменклатуры()



// Маршрутный лист

&НаСервере
Функция СформироватьПечатнуюФормуМаршрутныйЛист(ПравоЗакрыватьЗадачи=Ложь, ПредварительныйПросмотр=Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент  =  Новый ТабличныйДокумент;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаМаршрутныйЛист();
	
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииМобильныйТелефон", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииДополнительныйМобильныйТелефон", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("a8ec65fe-c74a-11e1-9d4d-001e673c80fc"))); 
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаОтгрузки);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированогоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииПользователя", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("8dc2ec9e-55b5-11e1-8ee4-001e67162d38")));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СформироватьТабличныйДокументМаршрутныйЛист(ТабДокумент, РезультатЗапроса[РезультатЗапроса.ВГраница()-1]);
	
	ОткрытыеЗадачи.Загрузить(РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить());
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Если Не ПредварительныйПросмотр Тогда
		ВыполнитьРассылкуМаршрутногоЛиста(ТабДокумент);
	КонецЕсли;
	
	ПроверитьПравоЗакрыватьЗадачи(ПравоЗакрыватьЗадачи);
	
	Возврат ТабДокумент;
	
КонецФункции  


&НаСервере
Функция СформироватьТекстЗапросаМаршрутныйЛист()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МестаДоставки.Ссылка КАК Место,
	|	МестаДоставки.Владелец КАК Получатель,
	|	МестаДоставки.АдресДоставки КАК АдресПолучателя
	|ПОМЕСТИТЬ МестаПоМаршруту
	|ИЗ
	|	Справочник.МестаДоставки КАК МестаДоставки
	|ГДЕ
	|	НЕ МестаДоставки.Архивный
	|	И НЕ МестаДоставки.ЭтоЗадача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МестаДоставки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестаДоставки.Ссылка КАК Задача,
	|	МестаДоставки.Код КАК Код,
	|	МестаДоставки.Владелец КАК Получатель,
	|	МестаДоставки.АдресДоставки КАК АдресПолучателя,
	|	МестаДоставки.ТекстЗадачи КАК ТекстЗадачи,
	|	МестаДоставки.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ЗадачиПоМаршруту
	|ИЗ
	|	Справочник.МестаДоставки КАК МестаДоставки
	|ГДЕ
	|	НЕ МестаДоставки.Архивный
	|	И МестаДоставки.ЭтоЗадача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МестаДоставки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстатки.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЗаказыПоставщикамОстатки.Склад КАК Получатель,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КТС_НомерТТН КАК НомерТТН
	|ПОМЕСТИТЬ КешЗаказыПоставщику
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонецДня, ) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгрузкаМест.Место КАК Место,
	|	ОтгрузкаМест.Место.Код КАК КодМеста,
	|	ОтгрузкаМест.Склад КАК Отправитель,
	|	МестаПоМаршруту.Получатель КАК Получатель,
	|	МестаПоМаршруту.АдресПолучателя КАК АдресПолучателя,
	|	"""" КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Автор,
	|	ИСТИНА КАК ЭтоМесто
	|ПОМЕСТИТЬ ОбъектыДоставки
	|ИЗ
	|	РегистрСведений.ОтгрузкаМест.СрезПоследних(&КонецДня
	|			,
	|			Склад = &Склад
	|			И Место В
	|				(ВЫБРАТЬ
	|					МестаПоМаршруту.Место
	|				ИЗ
	|					МестаПоМаршруту)) КАК ОтгрузкаМест
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МестаПоМаршруту КАК МестаПоМаршруту
	|		ПО ОтгрузкаМест.Место = МестаПоМаршруту.Место
	|ГДЕ
	|	ОтгрузкаМест.СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
	|	И ВариантМаршрута = &Маршрут
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиРегистр.Место,
	|	ЗадачиПоМаршруту.Код,
	|	ЗадачиРегистр.Отправитель,
	|	ЗадачиПоМаршруту.Получатель,
	|	ЗадачиПоМаршруту.АдресПолучателя,
	|	ЗадачиПоМаршруту.ТекстЗадачи,
	|	ЗадачиПоМаршруту.Ответственный,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(
	|			,
	|			(Отправитель = &Склад " + ?(Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")), "ИЛИ Отправитель ССЫЛКА Справочник.Партнеры)", ")") + "
	|			И Место В
	|				(ВЫБРАТЬ
	|					ЗадачиПоМаршруту.Задача
	|				ИЗ
	|					ЗадачиПоМаршруту)) КАК ЗадачиРегистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачиПоМаршруту КАК ЗадачиПоМаршруту
	|		ПО ЗадачиРегистр.Место = ЗадачиПоМаршруту.Задача
	|ГДЕ
	|	ЗадачиРегистр.СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
	|    И ЗадачиРегистр.ВариантМаршрута = &Маршрут
	|	И ЗадачиРегистр.Период			< &ТекущаяДата				   
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДоставки.Получатель КАК Партнер
	|ПОМЕСТИТЬ ТаблицаПартнеров
	|ИЗ
	|	ОбъектыДоставки КАК ОбъектыДоставки
	|ГДЕ
	|	ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыСегмента.Партнер КАК Партнер
	|ПОМЕСТИТЬ ТаблицаДопустимыхПартнеров
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиСегментовУсловийОтгрузки КАК СегментыУсловийОтгрузки
	|		ПО ПартнерыСегмента.Сегмент = СегментыУсловийОтгрузки.СегментПартнеров
	|			И (ПартнерыСегмента.Партнер В
	|				(ВЫБРАТЬ
	|					ТаблицаПартнеров.Партнер
	|				ИЗ
	|					ТаблицаПартнеров))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность КАК Курс
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ Аналитика
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
	|		ПО АналитикаПоПартнерам.Партнер = ТаблицаПартнеров.Партнер
	|			И (АналитикаПоПартнерам.Организация = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Партнер КАК Партнер,
	|	СУММА(ВЫБОР ВалютаУправленческогоУчета.Значение
	|			КОГДА Долги.Валюта
	|				ТОГДА Долги.СуммаОстаток
	|			ИНАЧЕ Долги.СуммаОстаток / КурсыВалютУПР.Курс * КурсыВалют.Курс
	|		КОНЕЦ) КАК Долг
	|ПОМЕСТИТЬ Долги
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентами.Валюта КАК Валюта,
	|		РасчетыСКлиентами.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(
	|				&КонецДня,
	|				АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						Аналитика.КлючАналитики
	|					ИЗ
	|						Аналитика)) КАК РасчетыСКлиентами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщиками.Валюта,
	|		РасчетыСПоставщиками.СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				&КонецДня,
	|				АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						Аналитика.КлючАналитики
	|					ИЗ
	|						Аналитика)) КАК РасчетыСПоставщиками) КАК Долги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
	|		ПО (Аналитика.КлючАналитики = Долги.АналитикаУчетаПоПартнерам)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
	|		ПО (КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = Долги.Валюта)
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыОплаты.Ссылка КАК Ссылка,
	|	МИНИМУМ(ЭтапыОплаты.ДатаПлатежа) КАК ДатаПлатежа
	|ПОМЕСТИТЬ ГрафикОплат
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
	|		ПО ЭтапыОплаты.Ссылка.Партнер = ТаблицаПартнеров.Партнер
	|			И (ЭтапыОплаты.Ссылка.Организация = &Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыОплаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам КАК КлючАналитики,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстаткиИОбороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента) КАК Регистратор,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстаткиИОбороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).Валюта КАК Валюта
	|ПОМЕСТИТЬ ПервыйКеш_Возвраты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			,
	|			&КонецДня,
	|			Регистратор,
	|			,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					Аналитика.КлючАналитики
	|				ИЗ
	|					Аналитика)) КАК РасчетыСКлиентамиОстаткиИОбороты
	|ГДЕ
	|	РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	И РасчетыСКлиентамиОстаткиИОбороты.СуммаОборот <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Возвраты.КлючАналитики,
	|	Возвраты.Валюта,
	|	ВозвратыТовары.ДокументРеализации,
	|	СУММА(ВозвратыТовары.СуммаСНДС) КАК СуммаРасход
	|ПОМЕСТИТЬ ВторойКеш_Возвраты
	|ИЗ
	|	ПервыйКеш_Возвраты КАК Возвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратыТовары
	|		ПО (ВозвратыТовары.Ссылка = Возвраты.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	Возвраты.КлючАналитики,
	|	Возвраты.Валюта,
	|	ВозвратыТовары.ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам КАК КлючАналитики,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстаткиИОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг) КАК Регистратор,
	|	РасчетыСКлиентамиОстаткиИОбороты.Регистратор.МоментВремени КАК МоментВремени,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстаткиИОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстаткиИОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПлатежа КАК ДатаПлатежа,
	|	РасчетыСКлиентамиОстаткиИОбороты.Период,
	|	РасчетыСКлиентамиОстаткиИОбороты.Валюта,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаОборот
	|ПОМЕСТИТЬ Cache_Обороты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			,
	|			&КонецДня,
	|			Регистратор,
	|			,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					Аналитика.КлючАналитики
	|				ИЗ
	|					Аналитика)) КАК РасчетыСКлиентамиОстаткиИОбороты
	|ГДЕ
	|	РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И РасчетыСКлиентамиОстаткиИОбороты.СуммаОборот <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Партнер КАК Партнер,
	|	Обороты.Регистратор,
	|	Обороты.Период,
	|	ВЫБОР
	|		КОГДА Обороты.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|				ИЛИ Обороты.ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|				ИЛИ Обороты.ЗаказКлиента = NULL
	|			ТОГДА Обороты.ДатаПлатежа
	|		ИНАЧЕ ГрафикОплат.ДатаПлатежа
	|	КОНЕЦ КАК ДатаПлатежа,
	|	Обороты.МоментВремени,
	|	ВЫБОР
	|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
	|			ТОГДА Обороты.СуммаПриход
	|		ИНАЧЕ Обороты.СуммаПриход / КурсыВалютУПР.Курс * КурсыВалют.Курс
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ЕСТЬNULL(Возвраты.СуммаРасход, 0) = 0
	|			ТОГДА 0
	|		КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
	|			ТОГДА Возвраты.СуммаРасход
	|		ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВалютаУправленческогоУчета.Значение = Обороты.Валюта
	|			ТОГДА Обороты.СуммаОборот
	|		ИНАЧЕ Обороты.СуммаОборот / КурсыВалютУПР.Курс * КурсыВалют.Курс
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ЕСТЬNULL(Возвраты.СуммаРасход, 0) = 0
	|			ТОГДА 0
	|		КОГДА ВалютаУправленческогоУчета.Значение = Возвраты.Валюта
	|			ТОГДА Возвраты.СуммаРасход
	|		ИНАЧЕ Возвраты.СуммаРасход / КурсыВалютУПР.Курс * КурсыВозвраты.Курс
	|	КОНЕЦ КАК СуммаОборот
	|ПОМЕСТИТЬ ОборотыПоКлиенту
	|ИЗ
	|	Cache_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Аналитика КАК Аналитика
	|		ПО (Аналитика.КлючАналитики = Обороты.КлючАналитики)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВторойКеш_Возвраты КАК Возвраты
	|		ПО (Возвраты.КлючАналитики = Обороты.КлючАналитики)
	|			И (Возвраты.ДокументРеализации = Обороты.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВозвраты
	|		ПО (КурсыВозвраты.Валюта = Возвраты.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикОплат КАК ГрафикОплат
	|		ПО (ГрафикОплат.Ссылка = Обороты.ЗаказКлиента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУПР
	|		ПО (КурсыВалютУПР.Валюта = ВалютаУправленческогоУчета.Значение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = Обороты.Валюта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоКлиенту.Партнер КАК Партнер,
	|	НАЧАЛОПЕРИОДА(ОборотыПоКлиенту.ДатаПлатежа, МЕСЯЦ) КАК НачПериода,
	|	КОНЕЦПЕРИОДА(ОборотыПоКлиенту.ДатаПлатежа, МЕСЯЦ) КАК КонПериода,
	|	СУММА(ОборотыПоКлиенту.СуммаОборот) КАК Сумма
	|ПОМЕСТИТЬ ОборотыПоМесяцам
	|ИЗ
	|	ОборотыПоКлиенту КАК ОборотыПоКлиенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоКлиенту.Партнер,
	|	НАЧАЛОПЕРИОДА(ОборотыПоКлиенту.ДатаПлатежа, МЕСЯЦ),
	|	КОНЕЦПЕРИОДА(ОборотыПоКлиенту.ДатаПлатежа, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоМесяцам.Партнер КАК Партнер,
	|	ОборотыПоМесяцам.НачПериода КАК НачПериода,
	|	ОборотыПоМесяцам.КонПериода КАК КонПериода,
	|	ОборотыПоМесяцам.Сумма КАК Сумма,
	|	СУММА(ОборотыПоМесяцамКопия.Сумма) КАК СуммаПосле,
	|	СУММА(ОборотыПоМесяцамКопия.Сумма) - ОборотыПоМесяцам.Сумма КАК СуммаДо
	|ПОМЕСТИТЬ ОборотыПоМесяцамНарастающие
	|ИЗ
	|	ОборотыПоМесяцам КАК ОборотыПоМесяцам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцам КАК ОборотыПоМесяцамКопия
	|		ПО ОборотыПоМесяцам.Партнер = ОборотыПоМесяцамКопия.Партнер
	|			И ОборотыПоМесяцам.НачПериода <= ОборотыПоМесяцамКопия.НачПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоМесяцам.НачПериода,
	|	ОборотыПоМесяцам.КонПериода,
	|	ОборотыПоМесяцам.Партнер,
	|	ОборотыПоМесяцам.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Долги.Партнер КАК Партнер,
	|	Долги.Долг КАК Долг,
	|	ОборотыПоМесНарастающие.НачПериода КАК НачПериода,
	|	ОборотыПоМесНарастающие.КонПериода КАК КонПериода,
	|	Долги.Долг - ОборотыПоМесНарастающие.СуммаДо КАК ОстатокДолга
	|ПОМЕСТИТЬ ДолгиПоВыбраннымМесяцам
	|ИЗ
	|	Долги КАК Долги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПоМесяцамНарастающие КАК ОборотыПоМесНарастающие
	|		ПО Долги.Партнер = ОборотыПоМесНарастающие.Партнер
	|			И Долги.Долг > ОборотыПоМесНарастающие.СуммаДо
	|			И Долги.Долг <= ОборотыПоМесНарастающие.СуммаПосле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Партнер КАК Партнер,
	|	Обороты.МоментВремени КАК МоментВремени,
	|	Обороты.Регистратор КАК Регистратор,
	|	Обороты.Период КАК Период,
	|	ДолгиПоВыбМесяцам.Долг КАК Долг,
	|	ДолгиПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
	|	Обороты.Сумма КАК Сумма,
	|	Обороты.ДатаПлатежа КАК ДатаОтсрочки
	|ПОМЕСТИТЬ ДвиженияПоВыбраннымМесяцам
	|ИЗ
	|	ОборотыПоКлиенту КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоВыбраннымМесяцам КАК ДолгиПоВыбМесяцам
	|		ПО Обороты.Партнер = ДолгиПоВыбМесяцам.Партнер
	|			И Обороты.ДатаПлатежа >= ДолгиПоВыбМесяцам.НачПериода
	|			И Обороты.ДатаПлатежа <= ДолгиПоВыбМесяцам.КонПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПоВыбМесяцам.Партнер КАК Партнер,
	|	ДвиженияПоВыбМесяцам.Регистратор КАК Регистратор,
	|	ДвиженияПоВыбМесяцам.Период КАК Период,
	|	ДвиженияПоВыбМесяцам.МоментВремени КАК МоментВремени,
	|	ДвиженияПоВыбМесяцам.Сумма КАК Сумма,
	|	СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) КАК СуммаПосле,
	|	СУММА(ДвиженияПоВыбМесяцамКопия.Сумма) - ДвиженияПоВыбМесяцам.Сумма КАК СуммаДо,
	|	ДвиженияПоВыбМесяцам.ОстатокДолга КАК ОстатокДолга,
	|	ДвиженияПоВыбМесяцам.ДатаОтсрочки КАК ДатаОтсрочки
	|ПОМЕСТИТЬ ДвиженияПредварительные
	|ИЗ
	|	ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияПоВыбраннымМесяцам КАК ДвиженияПоВыбМесяцамКопия
	|		ПО ДвиженияПоВыбМесяцам.Партнер = ДвиженияПоВыбМесяцамКопия.Партнер
	|			И ДвиженияПоВыбМесяцам.ДатаОтсрочки <= ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
	|			И (ВЫБОР
	|				КОГДА ДвиженияПоВыбМесяцам.ДатаОтсрочки = ДвиженияПоВыбМесяцамКопия.ДатаОтсрочки
	|					ТОГДА ДвиженияПоВыбМесяцам.МоментВремени <= ДвиженияПоВыбМесяцамКопия.МоментВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПоВыбМесяцам.Партнер,
	|	ДвиженияПоВыбМесяцам.Регистратор,
	|	ДвиженияПоВыбМесяцам.Период,
	|	ДвиженияПоВыбМесяцам.МоментВремени,
	|	ДвиженияПоВыбМесяцам.Сумма,
	|	ДвиженияПоВыбМесяцам.ОстатокДолга,
	|	ДвиженияПоВыбМесяцам.ДатаОтсрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПредв.Партнер КАК Партнер,
	|	ДвиженияПредв.Регистратор КАК Регистратор,
	|	ДвиженияПредв.Период КАК Период,
	|	ДвиженияПредв.МоментВремени КАК МоментВремени,
	|	ДвиженияПредв.ОстатокДолга - ДвиженияПредв.СуммаДо КАК СуммаДолга,
	|	ДвиженияПредв.Сумма КАК Сумма,
	|	ДвиженияПредв.ДатаОтсрочки КАК ДатаОтсрочки
	|ПОМЕСТИТЬ ДвиженияОкончательные
	|ИЗ
	|	ДвиженияПредварительные КАК ДвиженияПредв
	|ГДЕ
	|	ДвиженияПредв.ОстатокДолга > ДвиженияПредв.СуммаДо
	|	И ДвиженияПредв.ОстатокДолга <= ДвиженияПредв.СуммаПосле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.Партнер КАК Партнер,
	|	Обороты.Регистратор КАК Документ,
	|	ВЫБОР
	|		КОГДА Обороты.Регистратор = ДвиженияОконч.Регистратор
	|			ТОГДА ДвиженияОконч.СуммаДолга
	|		ИНАЧЕ Обороты.Сумма
	|	КОНЕЦ КАК СуммаОстаток,
	|	ВЫБОР
	|		КОГДА Обороты.ДатаПлатежа < &ТекущаяДата
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Прострочено
	|ПОМЕСТИТЬ ОбщаяТаблицаЗадолженностейПоДокументам
	|ИЗ
	|	ОборотыПоКлиенту КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияОкончательные КАК ДвиженияОконч
	|		ПО (ДвиженияОконч.Партнер = Обороты.Партнер)
	|			И (ДвиженияОконч.ДатаОтсрочки <= Обороты.ДатаПлатежа)
	|			И (ВЫБОР
	|				КОГДА ДвиженияОконч.ДатаОтсрочки = Обороты.ДатаПлатежа
	|					ТОГДА ДвиженияОконч.МоментВремени <= Обороты.МоментВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщаяТаблицаЗадолженностейПоДокументам.Партнер КАК Партнер,
	|	СУММА(ОбщаяТаблицаЗадолженностейПоДокументам.СуммаОстаток) КАК СуммаПрострочки
	|ПОМЕСТИТЬ ТаблицаПрострочек
	|ИЗ
	|	ОбщаяТаблицаЗадолженностейПоДокументам КАК ОбщаяТаблицаЗадолженностейПоДокументам
	|ГДЕ
	|	ОбщаяТаблицаЗадолженностейПоДокументам.Прострочено = 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбщаяТаблицаЗадолженностейПоДокументам.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДоставки.Место КАК Место,
	|	ОбъектыДоставки.Место.Владелец КАК Партнер
	|ПОМЕСТИТЬ ТаблицаМестМаршрутногоЛиста
	|ИЗ
	|	ОбъектыДоставки КАК ОбъектыДоставки
	|ГДЕ
	|	ОбъектыДоставки.ЭтоМесто
	|	И ОбъектыДоставки.Место.Владелец ССЫЛКА Справочник.Партнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	|	КОНЕЦ КАК Документ,
	|	ТаблицаМест.Партнер КАК Партнер
	|ПОМЕСТИТЬ ТаблицаДокументовПоМестам
	|ИЗ
	|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМестМаршрутногоЛиста КАК ТаблицаМест
	|		ПО МестаПоДокументам.Место = ТаблицаМест.Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщаяТаблица.Партнер КАК Партнер,
	|	СУММА(ОбщаяТаблица.СуммаОстаток) КАК СуммаОстаток
	|ПОМЕСТИТЬ ДолгиПоДокументам
	|ИЗ
	|	ОбщаяТаблицаЗадолженностейПоДокументам КАК ОбщаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовПоМестам КАК ДокументыПоМестам
	|		ПО ОбщаяТаблица.Партнер = ДокументыПоМестам.Партнер
	|			И ОбщаяТаблица.Документ = ДокументыПоМестам.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбщаяТаблица.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.УсловиеОтгрузки КАК УсловиеОтгрузки,
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.КредитныйЛимит КАК КредитныйЛимит,
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.ДополнительныйПроцент КАК ДополнительныйПроцент
	|ПОМЕСТИТЬ УсловияОтгрузкиПоУмолчанию
	|ИЗ
	|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(&КонецДня, Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК КТС_НастройкиУсловийОтгрузкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.Партнер КАК Партнер,
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.УсловиеОтгрузки КАК УсловиеОтгрузки,
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.КредитныйЛимит КАК КредитныйЛимит,
	|	КТС_НастройкиУсловийОтгрузкиСрезПоследних.ДополнительныйПроцент КАК ДополнительныйПроцент
	|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерамПредварительные
	|ИЗ
	|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(
	|			&КонецДня,
	|			Партнер В
	|				(ВЫБРАТЬ
	|					ТаблицаДопустимыхПартнеров.Партнер
	|				ИЗ
	|					ТаблицаДопустимыхПартнеров)) КАК КТС_НастройкиУсловийОтгрузкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПартнеров.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки, 0) = 0
	|			ТОГДА УсловияОтгрузкиПоУмолчанию.УсловиеОтгрузки
	|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки
	|	КОНЕЦ КАК УсловиеОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит, 0) = 0
	|			ТОГДА УсловияОтгрузкиПоУмолчанию.КредитныйЛимит
	|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит
	|	КОНЕЦ КАК КредитныйЛимит,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент, 0) = 0
	|			ТОГДА УсловияОтгрузкиПоУмолчанию.ДополнительныйПроцент
	|		ИНАЧЕ УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент
	|	КОНЕЦ КАК ДополнительныйПроцент
	|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерам
	|ИЗ
	|	ТаблицаДопустимыхПартнеров КАК ТаблицаПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоУмолчанию КАК УсловияОтгрузкиПоУмолчанию
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоПартнерамПредварительные КАК УсловияОтгрузкиПоПартнерамПредварительные
	|		ПО ТаблицаПартнеров.Партнер = УсловияОтгрузкиПоПартнерамПредварительные.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияОтгрузки.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0) < ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
	|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаПрострочек.СуммаПрострочки, 0)
	|				КОНЕЦ
	|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.РеструктуризацияДолга)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток, 0) * (1 + УсловияОтгрузки.ДополнительныйПроцент * 0.01) < ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
	|						ТОГДА ЕСТЬNULL(Долги.Долг, 0) - УсловияОтгрузки.КредитныйЛимит
	|					ИНАЧЕ ЕСТЬNULL(ДолгиПоДокументам.СуммаОстаток, 0) * (1 + УсловияОтгрузки.ДополнительныйПроцент * 0.01)
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ТаблицаУсловийОтгрузки
	|ИЗ
	|	УсловияОтгрузкиПоПартнерам КАК УсловияОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Долги КАК Долги
	|		ПО УсловияОтгрузки.Партнер = Долги.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПрострочек КАК ТаблицаПрострочек
	|		ПО УсловияОтгрузки.Партнер = ТаблицаПрострочек.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоДокументам КАК ДолгиПоДокументам
	|		ПО УсловияОтгрузки.Партнер = ДолгиПоДокументам.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
	|	ПользователиКонтактнаяИнформация.Представление КАК НомерТелефона
	|ПОМЕСТИТЬ КешТелефоныПользователей
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ПользователиКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииПользователя
	|	И ПользователиКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Автор
	|			ИЗ
	|				ОбъектыДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Представление КАК НомерТелефона
	|ПОМЕСТИТЬ НомераТелефоновПартнеров
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Отправитель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ОбъектыДоставки.Получатель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Представление КАК НомерТелефона
	|ПОМЕСТИТЬ НомераМобильныхТелефоновПартнеров
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Отправитель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ОбъектыДоставки.Получатель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ПартнерыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииМобильныйТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Представление КАК НомерТелефона
	|ПОМЕСТИТЬ НомераДополнительныхМобильныхТелефоновПартнеров
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Отправитель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ОбъектыДоставки.Получатель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ПартнерыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииДополнительныйМобильныйТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Представление КАК Адрес
	|ПОМЕСТИТЬ АдресаПартнеров
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Отправитель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ОбъектыДоставки.Получатель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	|	СкладыКонтактнаяИнформация.Представление КАК НомерТелефона
	|ПОМЕСТИТЬ НомераТелефоновСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Отправитель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Склады
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ОбъектыДоставки.Получатель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Получатель ССЫЛКА Справочник.Склады)
	|	И СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСклада)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	|	СкладыКонтактнаяИнформация.Представление КАК Адрес
	|ПОМЕСТИТЬ АдресаСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыДоставки.Отправитель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Склады
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ОбъектыДоставки.Получатель
	|			ИЗ
	|				ОбъектыДоставки
	|			ГДЕ
	|				ОбъектыДоставки.Получатель ССЫЛКА Справочник.Склады)
	|	И СкладыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДоставки.Место КАК Место,
	|	ОбъектыДоставки.Отправитель КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры
	|			ТОГДА ЕСТЬNULL(АдресаПартнеровОтправителей.Адрес, """")
	|		ИНАЧЕ ЕСТЬNULL(АдресаСкладовОтправителей.Адрес, """")
	|	КОНЕЦ КАК АдресОтправителя,
	|	ВЫБОР
	|		КОГДА ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры
	|			ТОГДА ЕСТЬNULL(НомераТелефоновПартнеровОтправителей.НомерТелефона, """") + "" "" + ЕСТЬNULL(НомераМобильныхТелефоновПартнеровОтправителей.НомерТелефона, """") + "" "" + ЕСТЬNULL(НомераДополнительныхМобильныхТелефоновПартнеровОтправителей.НомерТелефона, """")
	|		ИНАЧЕ ЕСТЬNULL(НомераТелефоновСкладовОтправителей.НомерТелефона, """")
	|	КОНЕЦ КАК НомерТелефонаОтправителя,
	|	ОбъектыДоставки.Получатель КАК Получатель,
	|	ОбъектыДоставки.АдресПолучателя КАК АдресПолучатель,
	|	ВЫБОР
	|		КОГДА ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры
	|			ТОГДА ЕСТЬNULL(НомераТелефоновПартнеровПолучателей.НомерТелефона, """") + "" "" + ЕСТЬNULL(НомераМобильныхТелефоновПартнеровПолучателей.НомерТелефона, """") + "" "" + ЕСТЬNULL(НомераДополнительныхМобильныхТелефоновПартнеровПолучателей.НомерТелефона, """")
	|		ИНАЧЕ ЕСТЬNULL(НомераТелефоновСкладовПолучателей.НомерТелефона, """")
	|	КОНЕЦ КАК НомерТелефонаПолучателя,
	|	ОбъектыДоставки.Комментарий КАК Комментарий,
	|	ОбъектыДоставки.Автор КАК Автор,
	|	ОбъектыДоставки.КодМеста КАК КодМеста,
	|	ЕСТЬNULL(ТелефоныПользователей.НомерТелефона, """") КАК НомерТелефонаПользователя,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаУсловийОтгрузки.Сумма, 0) КАК ЧИСЛО(15, 2)) КАК ДолгПартнера,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаУсловийОтгрузки.Сумма, 0) * КурсВалютУпр.Курс / КурсВалютРег.Курс КАК ЧИСЛО(15, 2)) КАК ДолгПартнераРег,
	|	ОбъектыДоставки.ЭтоМесто КАК ЭтоМесто
	|ИЗ
	|	ОбъектыДоставки КАК ОбъектыДоставки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаПартнеров КАК АдресаПартнеровОтправителей
	|		ПО ОбъектыДоставки.Отправитель = АдресаПартнеровОтправителей.Партнер
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладовОтправителей
	|		ПО ОбъектыДоставки.Отправитель = АдресаСкладовОтправителей.Склад
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Склады)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновПартнеров КАК НомераТелефоновПартнеровОтправителей
	|		ПО ОбъектыДоставки.Отправитель = НомераТелефоновПартнеровОтправителей.Партнер
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераМобильныхТелефоновПартнеров КАК НомераМобильныхТелефоновПартнеровОтправителей
	|		ПО ОбъектыДоставки.Отправитель = НомераМобильныхТелефоновПартнеровОтправителей.Партнер
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераДополнительныхМобильныхТелефоновПартнеров КАК НомераДополнительныхМобильныхТелефоновПартнеровОтправителей
	|		ПО ОбъектыДоставки.Отправитель = НомераДополнительныхМобильныхТелефоновПартнеровОтправителей.Партнер
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновСкладов КАК НомераТелефоновСкладовОтправителей
	|		ПО ОбъектыДоставки.Отправитель = НомераТелефоновСкладовОтправителей.Склад
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Склады)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаПартнеров КАК АдресаПартнеровПолучателей
	|		ПО ОбъектыДоставки.Получатель = АдресаПартнеровПолучателей.Партнер
	|			И (ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладовПолучателей
	|		ПО ОбъектыДоставки.Получатель = АдресаСкладовПолучателей.Склад
	|			И (ОбъектыДоставки.Получатель ССЫЛКА Справочник.Склады)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновПартнеров КАК НомераТелефоновПартнеровПолучателей
	|		ПО ОбъектыДоставки.Получатель = НомераТелефоновПартнеровПолучателей.Партнер
	|			И (ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераМобильныхТелефоновПартнеров КАК НомераМобильныхТелефоновПартнеровПолучателей
	|		ПО ОбъектыДоставки.Получатель = НомераМобильныхТелефоновПартнеровПолучателей.Партнер
	|			И (ОбъектыДоставки.Получатель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераДополнительныхМобильныхТелефоновПартнеров КАК НомераДополнительныхМобильныхТелефоновПартнеровПолучателей
	|		ПО ОбъектыДоставки.Отправитель = НомераДополнительныхМобильныхТелефоновПартнеровПолучателей.Партнер
	|			И (ОбъектыДоставки.Отправитель ССЫЛКА Справочник.Партнеры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераТелефоновСкладов КАК НомераТелефоновСкладовПолучателей
	|		ПО ОбъектыДоставки.Получатель = НомераТелефоновСкладовПолучателей.Склад
	|			И (ОбъектыДоставки.Получатель ССЫЛКА Справочник.Склады)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешТелефоныПользователей КАК ТелефоныПользователей
	|		ПО ОбъектыДоставки.Автор = ТелефоныПользователей.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаУсловийОтгрузки КАК ТаблицаУсловийОтгрузки
	|		ПО ОбъектыДоставки.Получатель = ТаблицаУсловийОтгрузки.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютУпр
	|		ПО (КурсВалютУпр.Валюта = &ВалютаУправленческогоУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютРег
	|		ПО (КурсВалютРег.Валюта = &ВалютаРегламентированогоУчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыДоставки.ЭтоМесто УБЫВ,
	|	ОбъектыДоставки.Отправитель.Наименование,
	|	ОбъектыДоставки.Получатель.Наименование
	|ИТОГИ ПО
	|	Получатель,
	|	Отправитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Место,
	|	Место.ЭтоЗадача
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(,
	|	(Отправитель = &Склад " + ?(Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")), "ИЛИ Отправитель ССЫЛКА Справочник.Партнеры)", ")") + "
	|			И Место.ЭтоЗадача)
	|ГДЕ
	|	СтатусОтгрузки 		= ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
	|	И ВариантМаршрута 	= &Маршрут
	|	И Период 			< &ТекущаяДата" ;
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаДанныеДляПечати()

&НаСервере
Процедура СформироватьТабличныйДокументМаршрутныйЛист(ТабличныйДокумент, ДанныеДляПечати)
	
	МакетМаршрутныйЛист = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_МакетМаршрутныйЛист");	
	ОблЗаголок		    = МакетМаршрутныйЛист.ПолучитьОбласть("Заголовок");
	
	ОблПолучатель  = МакетМаршрутныйЛист.ПолучитьОбласть("Строка|Получатель");
	ОблОтправитель = МакетМаршрутныйЛист.ПолучитьОбласть("Строка|Отправитель");
	ОблМесто	   = МакетМаршрутныйЛист.ПолучитьОбласть("Место|Места");
	ОблКомментарий = МакетМаршрутныйЛист.ПолучитьОбласть("Место|Комментарий");
	ОблПодпись	   = МакетМаршрутныйЛист.ПолучитьОбласть("Подпись");
	ОблДата		   = МакетМаршрутныйЛист.ПолучитьОбласть("Дата");
	МакетСтроки    = "%1" + Символы.ПС + "%2" + Символы.ПС + "%3";
	
	ОблДата.Параметры.Дата 		= ТекущаяДата();
	ОблДата.Параметры.Маршрут 	= Маршрут;
	ТабличныйДокумент.Вывести(ОблДата);
	
	ВыборкаПолучатель   = ДанныеДляПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент.Вывести(ОблЗаголок);
	
	Пока ВыборкаПолучатель.Следующий() Цикл
		
		ВыборкаОтправитель = ВыборкаПолучатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОтправитель.Следующий() Цикл
			
			СтрокаМаршрутногоЛиста = Новый ТабличныйДокумент;
			ВыборкаДетальныеЗаписи = ВыборкаОтправитель.Выбрать();
			
			НомерМеста = 1;			
			ЭтоЗадача  = Ложь;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если НомерМеста = 1 Тогда
					ОблПолучатель.Параметры.Получатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МакетСтроки,
					ВыборкаПолучатель.Получатель,
					ВыборкаДетальныеЗаписи.АдресПолучатель,
					ВыборкаДетальныеЗаписи.НомерТелефонаПолучателя);
					ОблОтправитель.Параметры.Отправитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МакетСтроки,
					ВыборкаОтправитель.Отправитель,
					ВыборкаДетальныеЗаписи.АдресОтправителя,
					ВыборкаДетальныеЗаписи.НомерТелефонаОтправителя);
				Иначе
					ОблПолучатель.Параметры.Получатель   = "";
					ОблОтправитель.Параметры.Отправитель = "";
				КонецЕсли;
				
				ОблКомментарий.Параметры.Комментарий = "";
				
				СтрокаМаршрутногоЛиста.Вывести(ОблОтправитель);
				СтрокаМаршрутногоЛиста.Присоединить(ОблПолучатель);
				
				ОблМесто.Параметры.НомерМеста = НомерМеста;
				Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.КодМеста) Тогда
					ОблМесто.Параметры.КодМеста = Формат(Число(ВыборкаДетальныеЗаписи.КодМеста), "ЧРГ=' '; ЧГ=0");
				Иначе
					ОблМесто.Параметры.КодМеста = "";
				КонецЕсли;
				СтрокаМаршрутногоЛиста.Присоединить(ОблМесто);
				
				Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Комментарий) И Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Автор) Тогда
					Комментарий 				= "%1%2: %3";
					НомерТелефонаПользователя   = СтрЗаменить(ВыборкаДетальныеЗаписи.НомерТелефонаПользователя, " ", "");
					НомерТелефонаПользователя   = СтрЗаменить(НомерТелефонаПользователя, "(", "");
					НомерТелефонаПользователя   = СтрЗаменить(НомерТелефонаПользователя, ")", "");
					НомерТелефонаПользователя   = СтрЗаменить(НомерТелефонаПользователя, "+38", "");
					ОблКомментарий.Параметры.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий,
					ВыборкаДетальныеЗаписи.Автор,
					?(ПустаяСтрока(НомерТелефонаПользователя), "", "("+НомерТелефонаПользователя+")"),
					ВыборкаДетальныеЗаписи.Комментарий);																						
				КонецЕсли;
				
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Получатель) = Тип("СправочникСсылка.Партнеры") И ВыборкаДетальныеЗаписи.ДолгПартнера > 0 И ВыборкаДетальныеЗаписи.ЭтоМесто  Тогда
					Комментарий = "УВАГА! НЕ ВІДВАНТАЖУВАТИ ТОВАР БЕЗ %1 USD (%2 грн)";
					ОблКомментарий.Параметры.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий,
					ВыборкаДетальныеЗаписи.ДолгПартнера,
					ВыборкаДетальныеЗаписи.ДолгПартнераРег);
				КонецЕсли;
				
				Если Не ВыборкаДетальныеЗаписи.ЭтоМесто Тогда
					СтрокаМаршрутногоЛиста.Присоединить(ОблКомментарий);
					ЭтоЗадача = Истина;
				ИначеЕсли НомерМеста = 1 Тогда
					СтрокаМаршрутногоЛиста.Присоединить(ОблКомментарий);
				КонецЕсли;
				
				НомерМеста = НомерМеста + 1;
				
			КонецЦикла;
			
			ОбластьКОбъединению = СтрокаМаршрутногоЛиста.Область(1,1,НомерМеста-1,1);
			ОбластьКОбъединению.Объединить();
			ОбластьКОбъединению.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьКОбъединению.РазмещениеТекста	  = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьКОбъединению.ГраницаСнизу		  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьКОбъединению.ГраницаСправа		  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			ОбластьКОбъединению = СтрокаМаршрутногоЛиста.Область(1,2,НомерМеста-1,2);
			ОбластьКОбъединению.Объединить();
			ОбластьКОбъединению.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ОбластьКОбъединению.РазмещениеТекста	  = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьКОбъединению.ГраницаСнизу		  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьКОбъединению.ГраницаСправа		  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			
			Если Не ЭтоЗадача Тогда
				
				ОбластьКОбъединению = СтрокаМаршрутногоЛиста.Область(1,7,НомерМеста-1,7);
				ОбластьКОбъединению.Объединить();
				ОбластьКОбъединению.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ОбластьКОбъединению.РазмещениеТекста	  = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ОбластьКОбъединению.ГраницаСнизу		  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ОбластьКОбъединению.ГраницаСправа		  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				
				Если ТипЗнч(ВыборкаПолучатель.Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
					СтрокаМаршрутногоЛиста.Вывести(ОблПодпись);
				КонецЕсли;
				
			Иначе
				
				ОбластьКЗакраске 		  = СтрокаМаршрутногоЛиста.Область(1,1,НомерМеста-1,7);
				ОбластьКЗакраске.ЦветФона = Новый Цвет(220,220,220);
				
			КонецЕсли;
			
			
			Если ТабличныйДокумент.ПроверитьВывод(СтрокаМаршрутногоЛиста) Тогда
				ТабличныйДокумент.Вывести(СтрокаМаршрутногоЛиста);
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(СтрокаМаршрутногоЛиста);
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРассылкуМаршрутногоЛиста(ТабличныйДокумент)
	
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Текст 	= ПараметрыСеанса.ТекущийПользователь.Наименование + " " + ТекущаяДата();
	Кому	= Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	Для каждого СтрокаТаблицы Из НастройкиРассылкиМаршрутногоЛиста Цикл
		СтруктураЗаполнения = Новый Структура("Адрес, Представление");
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаТаблицы);
		Кому.Добавить(СтруктураЗаполнения);
	КонецЦикла;
	
	Если Кому.Количество() > 0 Тогда
		БиблиотекаОбработок = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
		ПараметрыПисьма 	= БиблиотекаОбработок.СформироватьПараметрыПисьма("Маршрутный лист", Текст, Кому,,,,Новый Структура("МаршрутныйЛист", ИмяВременногоФайла),, ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);	
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьРассылкуМаршрутногоЛиста()


&НаСервере
Процедура ПроверитьПравоЗакрыватьЗадачи(ПравоЗакрыватьЗадачи)
	
	МассивГруппДоступа = Новый Массив;
	МассивГруппДоступа.Добавить(Справочники.ГруппыДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("65a493f6-e477-11e1-9d4d-001e673c80fc")));
	МассивГруппДоступа.Добавить(Справочники.ГруппыДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("c8ef570b-4685-11e0-9f98-001517115d85")));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Пользователь КАК Пользователь,
	|	Ссылка КАК ГруппаПользователя
	|ПОМЕСТИТЬ ГруппыПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав
	|ГДЕ
	|	Пользователь = &Пользователь
	|;
	
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи
	|ГДЕ
	|	Ссылка В (&МассивГруппДоступа)
	|	И (Пользователь В (ВЫБРАТЬ ГруппаПользователя ИЗ ГруппыПользователей)
	|	ИЛИ Пользователь В (ВЫБРАТЬ Пользователь ИЗ ГруппыПользователей))");
	
	Запрос.УстановитьПараметр("МассивГруппДоступа", МассивГруппДоступа);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПравоЗакрыватьЗадачи = Не РезультатЗапроса.Пустой();
	
КонецПроцедуры // ПроверитьПравоЗакрыватьЗадачи()





&НаСервере
Процедура ЗакрытьЗадачиВодителю()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	ТаблицаОткрытыеЗадачи = ОткрытыеЗадачи.Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиНаМаршрут");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОткрытыеЗадачи;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Место", "Место");
	
	Блокировка.Заблокировать();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаЗакрытьЗадачи(); 
	
	Запрос.УстановитьПараметр("МассивМесто", ТаблицаОткрытыеЗадачи.ВыгрузитьКолонку("Место"));
	
	Выборка 			= Запрос.Выполнить().Выбрать();
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Пока Выборка.Следующий() Цикл
		
		Период = ТекущаяДата();
		НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Место.Установить(Выборка.Место);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период		 	= Период;
		Запись.СтатусОтгрузки 	= Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена;
		Запись.Пользователь	  	= ПараметрыСеанса.ТекущийПользователь;		
		НаборЗаписей.Записать();	
		
		ЗадачаОбъект 			= Выборка.Место.ПолучитьОбъект();
		ЗадачаОбъект.Архивный 	= Истина;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	ОткрытыеЗадачи.Очистить();
	
КонецПроцедуры // ЗакрытьЗадачиВодителю()

&НаСервере
Функция СформироватьТекстЗапросаЗакрытьЗадачи()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗадачиНаМаршрут.Период,
	|	ЗадачиНаМаршрут.Место,
	|
	|	ЗадачиНаМаршрут.СтатусОтгрузки,
	|
	|	ЗадачиНаМаршрут.ВариантМаршрута,
	|	ЗадачиНаМаршрут.Отправитель,
	|	ЗадачиНаМаршрут.АдресОтправителя,
	|	ЗадачиНаМаршрут.Пользователь
	|ИЗ
	|	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут
	|ГДЕ
	|	ЗадачиНаМаршрут.Место В(&МассивМесто)";
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаЗакрытьЗадачи()




// Товарный чек

&НаСервере
Функция СформироватьПечатнуюФормуТоварногоЧека(Место)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов 	  = Новый Массив;
	КоллекцияПечатныхФорм = Неопределено;
	ИсточникДанных 		  = ModuleLibraryServer.GetRefLibrary("Обработка 'Внешние печатные формы'");
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПечатнаяФормаТоварногоЧекаИГарантийногоСоглашения();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Документ);
	КонецЦикла;
	
	ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "РасходныйОрдерНаТовары_ЧП", Ложь, Новый Структура("МассивДокументов", МассивДокументов));		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
	//СтруктураПечатныхФорм.Вставить("ТоварныеЧеки", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
	
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");
	
КонецФункции // СформироватьПечатнуюФормуТоварногоЧека()

&НаСервере
Функция ПолучитьТекстЗапросаПечатнаяФормаТоварногоЧекаИГарантийногоСоглашения()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Документ КАК Документ
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|	И 
	|		ВЫБОР
	|			КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|			КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	|				ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|		КОНЕЦ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПечатнаяФормаТоварногоЧека()

&НаСервере
Функция формироватьПечатнуюФормуГарантийногоСоглашения(Место)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов 	  = Новый Массив;
	КоллекцияПечатныхФорм = Неопределено;
	ИсточникДанных 		  = ModuleLibraryServer.GetRefLibrary("Обработка 'Внешние печатные формы'");
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПечатнаяФормаТоварногоЧекаИГарантийногоСоглашения();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Документ);
	КонецЦикла;
	
	ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ГарантийноеСоглашение", Ложь, Новый Структура("МассивДокументов", МассивДокументов));		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
	//СтруктураПечатныхФорм.Вставить("ТоварныеЧеки", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
	
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");
	
КонецФункции 



// Печать пустых мест

&НаСервере
Функция СформироватьПустыеМеста(КоличетвоМест)
	
	Перем ВладелецПустыхМест;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Настройки.Свойство("КТСДоставка_ВладелецПустыхМест", ВладелецПустыхМест);
	Если ВладелецПустыхМест = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Индекс = 0 По КоличетвоМест-1 Цикл
		НовоеМесто = Справочники.МестаДоставки.СоздатьЭлемент();
		НовоеМесто.Владелец = ВладелецПустыхМест;
		НовоеМесто.Архивный = Истина;
		НовоеМесто.УстановитьНовыйКод();
		НовоеМесто.Записать();
		Результат.Добавить(НовоеМесто.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СформироватьПустыеМеста()

// Товарный чек если сума РТУ больше 10000
&НаКлиенте
Процедура ПечатьТоварногоЧека()
	
	
	Если ПустаяСтрока(ПринтерА4) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Товарный чек не будет распечатан. Необходимо задать имя принтера А4 на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан банковськой счет. Необходимо задать счет на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ТДМеста 		= Элементы.Места.ТекущиеДанные;
	
	Если ТДМеста=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если КешОрдернаяСхемаСклада Тогда
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды = ПроверитьМассивДокументовРТУ(ТДМеста.Место, Истина);
		
		
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды = ПроверитьМассивДокументовРТУ(ТДМеста.Место, Ложь);
		
	КонецЕсли;
	
	
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ТоварныйЧек", Ложь, Новый Структура("МассивДокументов, БанковскийСчет", ПараметрКоманды, БанковскийСчет));
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ПринтерА4;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	КонецЦикла;
КонецПроцедуры // ПечатьТоварногоЧека()

&НаСервере
Функция ПроверитьМассивДокументовРТУ (Место, ЭтоОрдера)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ЭтоОрдера Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаПоДокументам.Документ,
		|	МестаПоДокументам.СтатусДокумента
		|ПОМЕСТИТЬ КешРасходний
		|ИЗ
		|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
		|ГДЕ
		|	МестаПоДокументам.Место = &Место
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ордер,
		|	РасходныйОрдерНаТовары.Распоряжение КАК ДокументРеализации
		|ПОМЕСТИТЬ КешРеализации
		|ИЗ
		|	КешРасходний КАК КешРасходний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ПО КешРасходний.Документ = РасходныйОрдерНаТовары.Ссылка
		|ГДЕ
		|	РасходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешРеализации.ДокументРеализации КАК Документ
		|ИЗ
		|	КешРеализации КАК КешРеализации";
		
	Иначе
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаПоДокументам.Документ,
		|	МестаПоДокументам.СтатусДокумента
		|ПОМЕСТИТЬ КешРасходний
		|ИЗ
		|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
		|ГДЕ
		|	МестаПоДокументам.Место = &Место
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КТС_ОтгрузкаТоваров.Распоряжение КАК ДокументРеализации,
		|	КТС_ОтгрузкаТоваров.Ссылка КАК ордер
		|ПОМЕСТИТЬ КешРеализации
		|ИЗ
		|	КешРасходний КАК КешРасходний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КТС_ОтгрузкаТоваров КАК КТС_ОтгрузкаТоваров
		|		ПО КешРасходний.Документ = КТС_ОтгрузкаТоваров.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешРеализации.ДокументРеализации КАК Документ
		|ИЗ
		|	КешРеализации КАК КешРеализации";
		
		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Место", Место);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	
КонецФункции // ПроверитьМассивДокументовИнтернетМагазин()


// Работа с настройками

&НаСервере
Процедура ЗагрузитьНастройкиОтгрузкиМест()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОтгрузкиМест", , , "ДополнительныеНастройкиОтгрузкиМест");
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("НастройкиРассылкиМаршрутногоЛиста") Тогда
			НастройкиРассылкиМаршрутногоЛиста.Загрузить(Настройки.НастройкиРассылкиМаршрутногоЛиста.Получить());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиОтгрузкиМест()

&НаСервере
Процедура СохранитьНастройкиОтгрузкиМест()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиРассылкиМаршрутногоЛиста", Новый ХранилищеЗначения(НастройкиРассылкиМаршрутногоЛиста.Выгрузить(), Новый СжатиеДанных(9)));
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиОтгрузкиМест", , Настройки, "Настройки отгрузки мест", "ДополнительныеНастройкиОтгрузкиМест");
	
КонецПроцедуры // СохранитьНастройкиОтгрузкиМест()




// Текущие данные

&НаКлиенте
Функция ТекущиеДанныеПулОтгрузки(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Результат.Вставить("АдресДоставки"); 
	Результат.Вставить("Получатель");
	Результат.Вставить("ПолучательПредставление");
	Результат.Вставить("ПолучательЧерезПеревозчика");
	Результат.Вставить("ПолучательЧерезПеревозчикаПредставление");
	Результат.Вставить("ТранзитноеПремещение");
	Результат.Вставить("Назначение");
	Результат.Вставить("ВозвратнаяДоставкаНП");
	Результат.Вставить("ПлатитПолучатель");
	Результат.Вставить("АдресПартнера");
	Результат.Вставить("ПолучательЧерезПеревозчика");
	
	
	ЗаполнитьЗначенияСвойств(Результат, ТекущиеДанные);
	
	Возврат Результат;
	
КонецФункции // ТекущиеДанныеПулОтгрузки()

&НаКлиенте
Функция ТекущиеДанныеПулНоменклатуры(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("Количество");
	
	ЗаполнитьЗначенияСвойств(Результат, ТекущиеДанные);
	
	Результат.Вставить("Коэффициент", 1);
	
	Возврат Результат;
	
КонецФункции // ТекущиеДанныеПулНоменклатуры()

&НаКлиенте
Функция ТекущиеДанныеПодборНоменклатуры(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Количество");
	Результат.Вставить("Место");
	Результат.Вставить("СтатусСерийногоНомера");
	
	ЗаполнитьЗначенияСвойств(Результат, ТекущиеДанные);
	
	Возврат Результат;
	
КонецФункции // ТекущиеДанныеПодборНоменклатуры()

&НаСервере
Функция ДанныеМестаВСтруктуру(Место,ТДПулОтгрузки)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Получатель");
	Результат.Вставить("АдресДоставки");
	Результат.Вставить("Архивный");
	Результат.Вставить("Маршрут");
	Результат.Вставить("Ответственный");
	Результат.Вставить("ПолучательЧерезПеревозчика");
	Результат.Вставить("Транзит");
	Результат.Вставить("Назначение");
	Результат.Вставить("ВозвратнаяДоставкаНП",		ТДПулОтгрузки.ВозвратнаяДоставкаНП);
	Результат.Вставить("ПлатитПолучатель",			ТДПулОтгрузки.ПлатитПолучатель);
	Результат.Вставить("АдресПартнера",				ТДПулОтгрузки.АдресПартнера);
	Результат.Вставить("ПолучательЧерезПеревозчика",ТДПулОтгрузки.ПолучательЧерезПеревозчика);
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Владелец 					КАК Получатель,
	|	АдресДоставки 				КАК АдресДоставки,
	|	Архивный 					КАК Архивный,
	|	Ответственный 				КАК Ответственный,
	|	ПолучательЧерезПеревозчика 	КАК ПолучательЧерезПеревозчика,
	|	Транзит 					КАК Транзит,
	|	Назначение 					КАК Назначение
	|ИЗ
	|	Справочник.МестаДоставки
	|ГДЕ
	|	Ссылка = &Ссылка");
	
	
	Запрос.УстановитьПараметр("Ссылка", Место);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДанныеМестаВструктуру()

&НаКлиенте
Процедура СформироватьСписокПринтеров()
	
	ИмяКомпьютера=".";
	ServiceSet=GetCOMObject("winmgmts:{impersonationLevel=impersonate}!\\"+ИмяКомпьютера+"\root\cimv2");
	PrinterSet=ServiceSet.Get("Win32_Printer");
	
	Попытка
		mItems=ServiceSet.ExecQuery("Select * from Win32_Printer");
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ=Истина;
		Возврат;
	КонецПопытки;
	
	Для каждого Принтер Из mItems Цикл
		НоваяСтрока 				= СписокПринтеров.Добавить();
		НоваяСтрока.Значение 		= Принтер.Name;
		НоваяСтрока.Представление	= Принтер.Name;
	КонецЦикла; 
	
КонецПроцедуры 


&НаКлиенте
Процедура ПринтерА4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ВыбЭлемент = СписокПринтеров.ВыбратьЭлемент("Выберите принтер печати а4: ", ВыбЭлемент);
	Если ВыбЭлемент = Неопределено Тогда 
		Если ПустаяСтрока(ПринтерА4) Тогда 
			Сообщить("Не выбран принтер печати а4 ");
		КонецЕсли;
	Иначе
		ПринтерА4 = ВыбЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПринтерQRКодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ВыбЭлемент = СписокПринтеров.ВыбратьЭлемент("Выберите принтер печати QR кода: ", ВыбЭлемент);
	Если ВыбЭлемент = Неопределено Тогда
		Если ПустаяСтрока(ПринтерQRКода) Тогда 
			Сообщить("Не выбран принтер печати QR кода ");
		КонецЕсли;
	Иначе
		ПринтерQRКода = ВыбЭлемент.Значение;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПринтерТоварногоЧекаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ВыбЭлемент = СписокПринтеров.ВыбратьЭлемент("Выберите принтер печати товарного чека: ", ВыбЭлемент);
	Если ВыбЭлемент = Неопределено Тогда 
		Если ПустаяСтрока(ПринтерТоварногоЧека) Тогда 
			Сообщить("Не выбран принтер печати товарного чека ");
		КонецЕсли;
	Иначе
		ПринтерТоварногоЧека = ВыбЭлемент.Значение;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьQRКодПеревозчика()
	
	Если ПустаяСтрока(ПринтерQRКода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='QR-код не будет распечатан. Необходимо задать имя принтера QR-кода на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ТДМеста 		= Элементы.Места.ТекущиеДанные;
	КоличествоКопий = 1;
	
	Если ТДМеста=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабличныеДокументы = ПодготовкаПечатиQRКода(ТДМеста.Место, КоличествоКопий, "МестаДоставки_ПечатьЭтикетки");
	
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		
		ТабличныйДокумент.ИмяПринтера = ПринтерQRКода;
		ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		
		Если КоличествоКопий > 1 Тогда
			ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // НапечататьQRКодПеревозчика()

&НаСервере
Функция ПолучитьПеревозчика(Место)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаПоДокументам.Документ.Распоряжение КАК Распоряжение,
	|	МестаПоДокументам.Место
	|ПОМЕСТИТЬ КешРаспоряжений
	|ИЗ
	|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|ГДЕ
	|	МестаПоДокументам.Место = &Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КешРаспоряжений.Место,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.Перевозчик КАК Перевозчик,
	|	СУММА(Маршруты_ДокументыПоМаршрутамСрезПоследних.ОбъявленнаяСтоимость) КАК ОбъявленнаяСтоимость
	|ИЗ
	|	КешРаспоряжений КАК КешРаспоряжений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК Маршруты_ДокументыПоМаршрутамСрезПоследних
	|		ПО КешРаспоряжений.Распоряжение = Маршруты_ДокументыПоМаршрутамСрезПоследних.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	КешРаспоряжений.Место,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.Перевозчик";
	Запрос.УстановитьПараметр("Место",Место);
	ЗапросРезультат =Запрос.Выполнить();
	Выборка = ЗапросРезультат.Выбрать();	
	
	Пока Выборка.Следующий() Цикл 
		Перевозчик 	= Выборка.Перевозчик;
		ОбъявленнаяСтоимость  	= Выборка.ОбъявленнаяСтоимость;
	КонецЦикла;
	ПараметрыМеста = Новый Структура("Перевозчик, ОбъявленнаяСтоимость",Перевозчик,ОбъявленнаяСтоимость);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыМеста;
	
КонецФункции

&НаКлиенте
Функция ДанныеДляПроверкиНаДоставку(ТекущиеДанные)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПлатитПолучатель");
	Результат.Вставить("ВозвратнаяДоставкаНП");
	Результат.Вставить("АдресПартнера");
	Результат.Вставить("ПолучательЧерезПеревозчика");
	
	ЗаполнитьЗначенияСвойств(Результат, ТекущиеДанные);
	
	
	Возврат Результат;
	
КонецФункции // ДанныеДляПроверкиНаДоставку(ТекущиеДанные)

&НаКлиенте
Процедура МестаПриИзменении(Элемент)
	ЗаполнитьКешНаКлиенте();	
	ЗагрузитьПулНоменклатурыНаКлиенте();
	Если Элементы.ГруппаМестаИЗадачиСтраницы.ТекущаяСтраница = Элементы.ГруппаМеста Тогда
		ТекущийЭлемент = Элементы.ТСД_Номенклатура;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачиПриИзменении(Элемент)
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗагрузитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ВыполненыеЗадачи(Команда)
	//ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	//Если ТекущиеДанные <> Неопределено Тогда
	//	УстановитьСтатусЗадачиНаСервере(ТекущиеДанные.Задача, ПредопределенноеЗначение("Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения"), Истина);
	//КонецЕсли;
	
	//ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ПринтерQRКода) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='QR-код не будет распечатан. Необходимо задать имя принтера QR-кода на закладке «Настройки».'"));
	//	Возврат;
	//КонецЕсли;
	//
	//ПараметрКоманды = Новый Массив;        
	//ПараметрКоманды.Добавить(ТекущиеДанные.Задача);        
	//   ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	////   	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	////	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
	//	ТабличныйДокумент.ИмяПринтера = ПринтерQRКода;
	//	ТабличныйДокумент.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЕтикеткиПеревозчика(Команда)
	
	НапечататьQRКодПеревозчика();
	
	
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ФормаФокус = ПолучитьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаФокус");
	ОткрытьФорму(ФормаФокус);
	ФормаФокус.Закрыть();
	Активизировать();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрQRКодов(Команда)
	ТДМеста 		= Элементы.Места.ТекущиеДанные;
	КоличествоКопий = 1;
	
	Если ТДМеста=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабличныеДокументы = ПодготовкаПечатиQRКода(ТДМеста.Место, КоличествоКопий, "МестаДоставки_ПечатьQRЭтикетки");
	
	Для каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ТабДок = ТабличныйДокумент;
	КонецЦикла; 
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабДок", ТабДок);
	ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаТабДок", ПараметрыФормы);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрQRКодовЗадачи(Команда)
	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;        
	ПараметрКоманды.Добавить(ТекущиеДанные.Задача);        
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	
	Для каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ТабДок = ТабличныйДокумент;
	КонецЦикла; 
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабДок", ТабДок);
	ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаТабДок", ПараметрыФормы);	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрГарантийногоСоглашения(Команда)
	
	ТДМеста = Элементы.Места.ТекущиеДанные;
	Если Не ТДМеста.Укомплектовано Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для печати гарантийного соглашения неоходимо укомплектовать место.'"));
	КонецЕсли;
	Если ТДМеста <> Неопределено Тогда
		МассивДокументов = формироватьПечатнуюФормуГарантийногоСоглашения(ТДМеста.Место);
		Если МассивДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нету данных для печати.'"));					
		КонецЕсли; 
		Для каждого ТабличныйДокумент Из МассивДокументов Цикл
			ТабДок = ТабличныйДокумент;
		КонецЦикла; 
		// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТабДок", ТабДок);
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаТабДок", ПараметрыФормы);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрДокументовВодителю(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЕтикеткиПеревозчика(Команда)
	Если ПустаяСтрока(ПринтерQRКода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='QR-код не будет распечатан. Необходимо задать имя принтера QR-кода на закладке «Настройки».'"));
		Возврат;
	КонецЕсли;
	
	ТДМеста 		= Элементы.Места.ТекущиеДанные;
	КоличествоКопий = 1;
	
	Если ТДМеста=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабличныеДокументы = ПодготовкаПечатиQRКода(ТДМеста.Место, КоличествоКопий, "МестаДоставки_ПечатьЭтикетки");
	
	Для каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ТабДок = ТабличныйДокумент;
	КонецЦикла; 
	// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабДок", ТабДок);
	ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаТабДок", ПараметрыФормы);	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрТовароногоЧека(Команда)
	ТДМеста = Элементы.Места.ТекущиеДанные;
	Если Не ТДМеста.Укомплектовано Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для печати товарного чека неоходимо укомплектовать место.'"));
	КонецЕсли;
	Если ТДМеста <> Неопределено Тогда
		МассивДокументов = СформироватьПечатнуюФормуТоварногоЧека(ТДМеста.Место);
		Если МассивДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нету данных для печати.'"));					
		КонецЕсли; 
		Для каждого ТабличныйДокумент Из МассивДокументов Цикл
			ТабДок = ТабличныйДокумент;
		КонецЦикла; 
		// Нужно для того, щчтобы форма оставалась доступной после печати по умолчанию
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТабДок", ТабДок);
		ОткрытьФорму("ВнешняяОбработка.ОтгрузкаМест.Форма.ФормаТабДок", ПараметрыФормы);	
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоКодуМесту(Команда)
	
	Перем КодМеста;
	
	ЗаголовокСтроки = НСтр("ru='Введите номер места'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ВвестиСтроку(КодМеста, ЗаголовокСтроки) Тогда
		
		ТабДокумент = ИнформацияПоМестуПоКоду(КодМеста);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		ТабДокумент.ТолькоПросмотр = Истина;
		ТабДокумент.Показать();
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ИнформацияПоМестуПоКоду(КодМеста)
	
	НормальныйКод = Прав("000000000000000" + КодМеста, 15);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МестоСсылка = Справочники.МестаДоставки.НайтиПоКоду(НормальныйКод);
	Если МестоСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ИнформацияПоМесту(МестоСсылка);

КонецФункции // ИнформацияПоМестуПокоду()

&НаСервере
Функция ИнформацияПоМесту(Место)
	Возврат РеквизитФормыВЗначение("Объект").ИнформацияПоМесту(Место);
КонецФункции // ИнформацияПоМесту()


// Создать задачу на маршрут
//
// Параметры:
//  Операция  		- Строка - наименовании операции создания задачи
//
//  Копирование  	- Булево - Истина,если задачу копируют, Ложь - если новая задача
&НаКлиенте
Процедура СоздатьЗадачуНаМаршрутНаКлиенте(ОперацияЗадачи,НоваяЗадача)
	БиблиотекаФорм  			= ModuleLibraryServer.GetLibraryName("Задачи на маршрут");
	ОписанияПослеСозданияЗадачи = Новый ОписаниеОповещения("ВыполнитьПослеСозданияЗадачи",ЭтаФорма);
	
	ПараметрыФормы   = Новый Структура;

	Если НоваяЗадача Тогда
		Операция		=  ПолучитьОперациюЗадачи(ОперацияЗадачи);
	Иначе
		ТекущиеДанные 	 = Элементы.СписокЗадачи.ТекущиеДанные;
		Операция		 = ОперацияЗадачи;
		ПараметрыФормы.Вставить("Место" ,		ТекущиеДанные.Задача);
		ПараметрыФормы.Вставить("Отправитель",	ТекущиеДанные.Отправитель);
		ПараметрыФормы.Вставить("Получатель" ,	ТекущиеДанные.Получатель);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НоваяЗадача" ,НоваяЗадача);
	ПараметрыФормы.Вставить("Операция" ,	Операция);
	
	ОткрытьФорму("ВнешняяОбработка."+БиблиотекаФорм+".Форма.ФормаСозданияЗадачи",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				ОписанияПослеСозданияЗадачи,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
				);
   


КонецПроцедуры
		
//Получить значения операции задачи
//
// Параметры:
//  ОперацияЗадачи  - Число - номер операции
//
// Возвращаемое значение:
//  Перечисления.КТС_ОперацииМеста   - предопределенные значения задачи соотвествие номера операци задачи
//
&НаСервере
Функция ПолучитьОперациюЗадачи(ОперацияЗадачи)
	Если ОперацияЗадачи=1 Тогда
		Операция = Перечисления.КТС_ОперацииМеста.ЗабратьСоСклада;
	ИначеЕсли  ОперацияЗадачи=2 Тогда
		Операция = Перечисления.КТС_ОперацииМеста.ЗабратьОтПартнера;
	ИначеЕсли  ОперацияЗадачи=3 Тогда
		Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПартнера;
	ИначеЕсли  ОперацияЗадачи=4 Тогда
		Операция = Перечисления.КТС_ОперацииМеста.ИнформационаяЗадача;
	Иначе 
		 Операция = Неопределено;
	КонецЕсли;
	
	Возврат Операция;
КонецФункции //ПолучитьОперациюЗадачи()

// Выполнить действия после создания задачи
//
// Параметры:
//  Результат  - СправочникСсылка.МестаДоставки - текущая задача,выделена пользователем
Процедура ВыполнитьПослеСозданияЗадачи(Результат,Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекущаяЗадача = Результат.Задача;
		ЗагрузитьСписокЗадач();
	КонецЕсли;
КонецПроцедуры


