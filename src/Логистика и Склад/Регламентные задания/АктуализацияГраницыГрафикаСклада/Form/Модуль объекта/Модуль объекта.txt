Процедура УстановитьГраницуГрафика() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Склады.Ссылка КАК СкладСсылка,
	                      |	ВЫБОР Склады.Календарь
	                      |		КОГДА ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	                      |			ТОГДА Константы.ОсновнойКалендарьПредприятия
	                      |		ИНАЧЕ Склады.Календарь
	                      |	КОНЕЦ КАК Календарь
	                      |ПОМЕСТИТЬ КешСкладыИКалендари
	                      |ИЗ
	                      |	Справочник.Склады КАК Склады
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	                      |		ПО (ИСТИНА)
	                      |ГДЕ
						  |	НЕ Склады.ПометкаУдаления
	                      |	И Склады.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешСкладыИКалендари.СкладСсылка КАК СкладСсылка,
						  |	КешСкладыИКалендари.СкладСсылка.ВариантКонтроля КАК ВариантКонтроля,
	                      |	КешСкладыИКалендари.Календарь КАК Календарь,
	                      |	МИНИМУМ(КалендарныеГрафики.ДатаГрафика) КАК ДатаГрафика,
						  |	ЕСТЬNULL(НастройкаКонтроляОстатков.ГраницаГрафикаДоступности, ДАТАВРЕМЯ(1,1,1)) КАК ТекущаяДатаГрафика,
						  |	ЕСТЬNULL(НастройкаКонтроляОстатков.СрокПоставки,0) КАК СрокПоставки
	                      |ИЗ
	                      |	КешСкладыИКалендари КАК КешСкладыИКалендари
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	                      |		ПО КешСкладыИКалендари.Календарь = КалендарныеГрафики.Календарь
	                      |			И (КалендарныеГрафики.ДеньВключенВГрафик)
	                      |			И (КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаКонтроляОстатков
						  |		ПО НастройкаКонтроляОстатков.Склад = КешСкладыИКалендари.СкладСсылка
						  |			И НастройкаКонтроляОстатков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
						  |			И НастройкаКонтроляОстатков.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	КешСкладыИКалендари.СкладСсылка,
	                      |	КешСкладыИКалендари.Календарь,
						  |	НастройкаКонтроляОстатков.СрокПоставки,
						  |	НастройкаКонтроляОстатков.ГраницаГрафикаДоступности");
						  
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДатаГрафика = Выборка.ТекущаяДатаГрафика Тогда Продолжить; КонецЕсли;
		
		Если Выборка.ВариантКонтроля = Перечисления.ВариантыКонтроля.ОстаткиСУчетомГрафика Тогда
		
			НаборЗаписей = РегистрыСведений.НастройкаКонтроляОстатков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Склад.Установить(Выборка.СкладСсылка);
			НаборЗаписей.Отбор.Номенклатура.Установить(Справочники.Номенклатура.ПустаяСсылка());
			НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			
				Запись = НаборЗаписей.Добавить();
				Запись.Склад = Выборка.СкладСсылка;
				Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				Запись.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Запись.ВариантКонтроля = Выборка.ВариантКонтроля;
				Запись.ГраницаГрафикаДоступности = Выборка.ДатаГрафика;
				Запись.СрокПоставки = Выборка.СрокПоставки;
				
			НаборЗаписей.Записать();
				
		КонецЕсли;
		
		//ОбъектСклад = Выборка.СкладСсылка.ПолучитьОбъект();
		//ОбъектСклад.ГраницаГрафикаДоступности = Выборка.ДатаГрафика;
		//
		//НачатьТранзакцию();
		//Попытка
		//	ОбъектСклад.Записать();    				
		//Исключение
		//	ОтменитьТранзакцию();
		//	ОтослатьУведомлениеПоЭлектроннойПочте(Выборка.СкладСсылка, ОписаниеОшибки());
		//	Продолжить;
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтослатьУведомлениеПоЭлектроннойПочте(СкладСсылка, СообщениеОбОшибке)
	
	БиблиотекаОбработок = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru=""Не найдена структура настроек 'ДополнительныеНастройкиОбработокМодификацииКонфигурации' библиотеки внешних обработок.""");
		Возврат;	
	КонецЕсли;
	
	Если НЕ ГлобальныеНастройки.Свойство("АдресЭлектроннойПочты") Тогда
		ВызватьИсключение НСтр("ru=""Не удалось получить адерес электронной почты для получения писем об ошыбках.""");
		Возврат; 
	КонецЕсли;
	
	АдресЭлектроннойПочты = ГлобальныеНастройки.АдресЭлектроннойПочты;
	
	Если НЕ ГлобальныеНастройки.Свойство("СтандартнаяУчетнаяЗаписьЭлектроннойПочты") Тогда
		ВызватьИсключение НСтр("ru=""Не задана сандарная учетная запись в библиотеке внешних обработок для отправки электронной почты.""");
		Возврат; 
	КонецЕсли;
	
	УчетнаяЗаписьЭлектроннойПочты = ГлобальныеНастройки.СтандартнаяУчетнаяЗаписьЭлектроннойПочты;

	
	Кому = Новый Массив;
	Кому.Добавить(Новый Структура("Адрес, Представление", СокрЛП(АдресЭлектроннойПочты), "Відділ 1С"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма("Не удалось установить границу графика доступности для склада " + СкладСсылка.Наименование, СообщениеОбОшибке, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	
КонецПроцедуры




Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.005";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. актуализация границы графика склада [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. актуализация границы графика склада [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. актуализация границы графика склада [" + Версия + "]", "УстановитьГраницуГрафика();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры


