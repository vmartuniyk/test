
////////////////////////////////////////////////////////////////////////////////
// 
// Рассылка e-mail для складов. 
// 
// Рассылка осуществляется для уведомления складов о
// прибытии водителя. Данные о прибытии формируються на основании расписания
// которое можна найти в справочнике «Варианты маршрутов».
//
///////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ВыполнитьРассылкуНаСклады() Экспорт

	ЗаписьЖурналаРегистрации(НСтр("ru='КТС.Рассылка по складам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru='Начало выполнения регламентного задания рассылки оповещения приезда водителя по складам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ПолучитьТекстЗапросаРассылкиНаСклады();
	
	Запрос.УстановитьПараметр("ТекущаяДата", 			ТекущаяДата());
	//Запрос.УстановитьПараметр("ТекущаяДата", 			Дата("20140312094500"));
	Запрос.УстановитьПараметр("СтатусОтгрузкиМест", 	Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена);
	Запрос.УстановитьПараметр("СтатусОтгрузкиЗадач", 	Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена);
	Запрос.УстановитьПараметр("Тип", 					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", 					Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("fb147218-3d58-11e3-bb25-001e673c80fc")));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Если у нас нету список складов - значить писем не отправляем.
	Если РезультатыЗапроса[4].Пустой() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='КТС.Рассылка по складам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru='Завершение рассылки оповещения по приезду водителя. Нет данных для рассылки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	БиблиотекаОбработок = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	
	ВыборкаСклады 			= РезультатыЗапроса[4].Выбрать(); 	// список складов с электронной почтой
	СписокМест				= РезультатыЗапроса[5].Выгрузить(); // список мест с пользователями
	СписокНоменклатуры      = РезультатыЗапроса[6].Выгрузить(); // список номенклатуры с местами
	СписокЗадач				= РезультатыЗапроса[7].Выгрузить(); // список задач с тестом
	
	Пока ВыборкаСклады.Следующий() Цикл
		
		Кому = Новый Массив; 
		Если ВыборкаСклады.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")) Тогда
			Кому.Добавить(Новый Структура("Адрес, Представление", "kytik@ktc.rovno.ua", ""));
		Иначе
			Кому.Добавить(Новый Структура("Адрес, Представление", ВыборкаСклады.АдресЭлектроннойПочты, ""));
		КонецЕсли; 
		
		ТемаПисьма  = "Увага! На склад підїжджає машина.";
		ТекстПисьма = ПолучитьЗаголовокТекстаПисьма(ВыборкаСклады.Склад, ВыборкаСклады.Маршрут);
		
		СтрутураПоиска   = Новый Структура("Склад, Маршрут", ВыборкаСклады.Склад, ВыборкаСклады.Маршрут);
		РезультатыПоиска = СписокМест.НайтиСтроки(СтрутураПоиска);
		
		ТекстПисьма = ТекстПисьма + СформироватьТекстПоМестам(РезультатыПоиска, СписокНоменклатуры);
		
		СтрутураПоиска   = Новый Структура("Отправитель, Маршрут", ВыборкаСклады.Склад, ВыборкаСклады.Маршрут);
		РезультатыПоиска = СписокЗадач.НайтиСтроки(СтрутураПоиска);
		
		ТекстПисьма = ТекстПисьма + СформироватьТекстПоЗадачам(РезультатыПоиска);
		
		ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='КТС.Рассылка по складам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru='Регламентное задание успешно завершено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры
 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Работа с запросом

Функция ПолучитьТекстЗапросаРассылкиНаСклады()

	ТекстЗапроса = "ВЫБРАТЬ
					|	Ссылка 				КАК Склад,
					|	Представление 		КАК АдресЭлектроннойПочты
					|ПОМЕСТИТЬ АдресаСкладов
					|ИЗ
					|	Справочник.Склады.КонтактнаяИнформация
					|ГДЕ
					|	Тип = &Тип
					|	И Вид = &Вид
					|	И Представление <> """"
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Ссылка 		КАК Маршрут,
					|	Склад		КАК Склад,
					|	ВЫБОР
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 1 И ПН
					|			ТОГДА ВремяКОтгрузкеПН
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 2 И ВТ
					|			ТОГДА ВремяКОтгрузкеВТ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 3 И СР
					|			ТОГДА ВремяКОтгрузкеСР
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 4 И ЧТ
					|			ТОГДА ВремяКОтгрузкеЧТ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 5 И ПТ
					|			ТОГДА ВремяКОтгрузкеПТ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 6 И СБ
					|			ТОГДА ВремяКОтгрузкеСБ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 7 И ВС
					|			ТОГДА ВремяКОтгрузкеВС
					|	КОНЕЦ КАК Вр
					|ПОМЕСТИТЬ ВремяВыезда
					|ИЗ
					|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
					|ГДЕ
					|	ВЫБОР
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 1
					|			ТОГДА ПН
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 2
					|			ТОГДА ВТ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 3
					|			ТОГДА СР
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 4
					|			ТОГДА ЧТ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 5
					|			ТОГДА ПТ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 6
					|			ТОГДА СБ
					|		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) = 7
					|			ТОГДА ВС
					|	КОНЕЦ
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВремяВыезда.Маршрут					КАК Маршрут,
					|	ВремяВыезда.Склад					КАК Склад,
					|	АдресаСкладов.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
					|ПОМЕСТИТЬ СкладыДляРассылки
					|ИЗ
					|	ВремяВыезда КАК ВремяВыезда
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладов
					|		ПО ВремяВыезда.Склад = АдресаСкладов.Склад
					|ГДЕ
					|	РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЧАС, ЧАС(ВремяВыезда.Вр)), МИНУТА, МИНУТА(ВремяВыезда.Вр)), СЕКУНДА, СЕКУНДА(ВремяВыезда.Вр)), МИНУТА) <= 30
					|И	РАЗНОСТЬДАТ(&ТекущаяДата, ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЧАС, ЧАС(ВремяВыезда.Вр)), МИНУТА, МИНУТА(ВремяВыезда.Вр)), СЕКУНДА, СЕКУНДА(ВремяВыезда.Вр)), МИНУТА) >= 20
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОтгрузкаМестСрезПоследних.Место			КАК Место,
					|	ОтгрузкаМестСрезПоследних.Пользователь	КАК Пользователь,
					|	СкладыДляРассылки.Склад					КАК Склад,
					|	СкладыДляРассылки.Маршрут				КАК Маршрут
					|ПОМЕСТИТЬ УкоплектованныеМеста
					|ИЗ
					|	РегистрСведений.ОтгрузкаМест.СрезПоследних(
					|			,
					|			Склад В
					|				(ВЫБРАТЬ
					|					СкладыДляРассылки.Склад
					|				ИЗ
					|					СкладыДляРассылки КАК СкладыДляРассылки)) КАК ОтгрузкаМестСрезПоследних
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыДляРассылки КАК СкладыДляРассылки
					|		ПО ОтгрузкаМестСрезПоследних.Склад 				= СкладыДляРассылки.Склад
					|			И ОтгрузкаМестСрезПоследних.ВариантМаршрута = СкладыДляРассылки.Маршрут
					|ГДЕ
					|	ОтгрузкаМестСрезПоследних.СтатусОтгрузки = &СтатусОтгрузкиМест
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Маршрут					КАК Маршрут,
					|	Склад					КАК Склад,
					|	АдресЭлектроннойПочты 	КАК АдресЭлектроннойПочты
					|ИЗ
					|	СкладыДляРассылки
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Место			КАК Место,
					|	Пользователь   	КАК Пользователь,
					|	Склад			КАК Склад,
					|	Маршрут			КАК Маршрут
					|ИЗ
					|	УкоплектованныеМеста 
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МестаНоменклатуры.Место			КАК Место,
					|	МестаНоменклатуры.Номенклатура	КАК Номенклатура,
					|	МестаНоменклатуры.Количество	КАК Количество
					|ИЗ
					|	РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УкоплектованныеМеста КАК УкоплектованныеМеста
					|		ПО МестаНоменклатуры.Место = УкоплектованныеМеста.Место
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Отправитель			КАК Отправитель,
					|	ВариантМаршрута		КАК Маршрут,
					|	Место				КАК Задача,
					|	Пользователь		КАК Пользователь,
					|	Место.ТекстЗадачи   КАК ТекстЗадачи
					|ИЗ
					|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних
					|ГДЕ
					|	СтатусОтгрузки = &СтатусОтгрузкиЗадач
					|	И (ВариантМаршрута, Отправитель) В (ВЫБРАТЬ Маршрут, Склад ИЗ СкладыДляРассылки)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРассылкиНаСклады()


// Формирование HTML текста в письма
 
Функция ПолучитьЗаголовокТекстаПисьма(Склад, Маршрут)

	ЗаговловокТекста = "
	|<h3>Увага! Через 30-20 хвилин на склад %1 приїде машина по маршруту %2. <br />
	|Перевірте будь-ласка чи наклеєні QR-коди на всі скомплектовані місця та задачі. <br />
	|Нижче приводиться список список місць та задач, які необхідно перевірити.</h3>";
	
	ЗаговловокТекста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаговловокТекста, Склад, Маршрут);
	
	Возврат ЗаговловокТекста;

КонецФункции // ПолучитьЗаголовокТекстаПисьма()

Функция СформироватьТекстПоМестам(МассивМест, ТаблицаНоменклатуры)
	
	ТекстПисьма = "";
	
	Для каждого СтрокаМесто ИЗ МассивМест Цикл
		
		Шаблон = "
		|<table style='border-collapse: collapse; border:2px solid white; width:800px;'>
		|<tr>
		|<td style='border:2px solid white; background: #DCFFFF;'><b>Місце %1</b></td>
		|<td style='border:2px solid white; background: #DCFFFF;'>Укомплектував %2</td>
		|</tr>
		|%3
		|</table><br/>";
		
		ТекстПисьма = ТекстПисьма + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
												СтрокаМесто.Место,
												СтрокаМесто.Пользователь,
												СформироватьТекстПоНоменклатуре(СтрокаМесто.Место, ТаблицаНоменклатуры));
		
	КонецЦикла;
	
	Возврат ТекстПисьма;
	
КонецФункции

Функция СформироватьТекстПоНоменклатуре(Место, ТаблицаНоменклатуры)

	ТекстПисьма = "";
	
	СтруктураПоиска  = Новый Структура("Место", Место);
	РезультатыПоиска = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	ТекстПисьма = ТекстПисьма + "
		|<tr>
		|<td style='border:2px solid white; background: #FFFACD; width:500px;'><b>Номенклатура</b></td>
		|<td style='border:2px solid white; background: #FFFACD; width:300px;'><b>Кількість</b></td>
		|</tr>";
	
	Для каждого РезультатПоиска ИЗ РезультатыПоиска Цикл
		
		Шаблон = "
		|<tr>
		|<td style='border:2px solid white; background: #FFFACD; width:500px;'><b>%1</b></td>
		|<td style='border:2px solid white; background: #FFFACD; width:300px;'><b>%2</b></td>
		|</tr>";
		
		ТекстПисьма = ТекстПисьма + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, РезультатПоиска.Номенклатура, РезультатПоиска.Количество);
		
	КонецЦикла;
	
	Возврат ТекстПисьма;

КонецФункции // СформироватьТекстПоНоменклатуре()

Функция СформироватьТекстПоЗадачам(МассивЗадач)

	ТекстПисьма = "";
	
	Для каждого СтрокаЗадач Из МассивЗадач Цикл
	
		Шаблон = "
		|<table style='border-collapse: collapse; border:2px solid white; width:800px;'>
		|<tr>
		|<td style='border:2px solid white; background: #DCFFFF;'><b>Задача</b> %1</td>
		|</tr>
		|<tr>
		|<td style='border:2px solid white; background: #DCFFFF;'><b>Создал</b> %2</td>
		|</tr>
		|<tr>
		|<td style='border:2px solid white; background: #FFFACD;'><b>%3</b></td>
		|</tr>
		|</table><br/>";
		
		ТекстПисьма = ТекстПисьма + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаЗадач.Задача, СтрокаЗадач.Пользователь, СтрокаЗадач.ТекстЗадачи);
	
	КонецЦикла; 
	
	Возврат ТекстПисьма;

КонецФункции // СформироватьТекстПоЗадачам()
 
 

// СВЕДЕНИЯ О ВНЕШНЕЙ ОБРАБОТКЕ

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.003";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Блаблабла [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Блаблабла [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Блаблабла [" + Версия + "]", "ВыполнитьРассылкуНаСклады();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры
