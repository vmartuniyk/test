
#Область ПрограмныйИнтерфейс

Процедура СоздатьПКОПоОплатамВодителей(ПартнерДляЗачтения = Неопределено) Экспорт
					
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаОплатыВодителей();
	Если ПартнерДляЗачтения = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаМинус15Мин", ТекущаяДата() - 900); // Для гарантирования обработки нескольких платежей
	Иначе
		Запрос.УстановитьПараметр("ДатаМинус15Мин", ТекущаяДата());	// Для гарантирования обработки нескольких платежей
	КонецЕсли;
	Запрос.УстановитьПараметр("СвойствоДоговор", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("f586a250-4c41-11e3-9318-001e673c80fc"))); // Дополнительный реквизит (АСВР) Договор по умолчанию
	//Запрос.УстановитьПараметр("Партнер", Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор("6bdc6481-7ba9-11e2-8fd5-001e673c80fc")));
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	ВалютаУпр	  = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл	  = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВалютаУпр_841 = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")); // Конвертация гривны в доллар
	ДанныеУпр_841 = РегистрыСведений.КурсыВалют.СрезПоследних(ТекущаяДата(), Новый Структура("Валюта", ВалютаУпр_841));
	КурсУпр_841 = ДанныеУпр_841[0].Курс / ДанныеУпр_841[0].Кратность;
	
	ВалютаУпр_844 = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("0f57b44a-b077-11e4-80ea-001e676b0175")); // Конвертация доллара в гривну
	ДанныеУпр_844 = РегистрыСведений.КурсыВалют.СрезПоследних(ТекущаяДата(), Новый Структура("Валюта", ВалютаУпр_844));
	КурсУпр_844 = ДанныеУпр_844[0].Курс / ДанныеУпр_844[0].Кратность;
	
	ЗапросГрафика = Новый Запрос;
	ЗапросГрафика.Текст = ПолучитьТекстЗапросаГрафикаПлатежей();
	
	ТаблицаПартнеров = Выгрузка.Скопировать(, "Партнер");
	ТаблицаПартнеров.Свернуть("Партнер");
	Для каждого СтрокаТаблицыПартнеров Из ТаблицаПартнеров Цикл
		РезультаПоиска = Выгрузка.НайтиСтроки(Новый Структура("Партнер", СтрокаТаблицыПартнеров.Партнер));
		Если РезультаПоиска.Количество() > 0 Тогда
			
			ЗапросГрафика.УстановитьПараметр("Партнер", СтрокаТаблицыПартнеров.Партнер);
			ЗапросГрафика.УстановитьПараметр("НачалоЗавтра", КонецДня(ТекущаяДата()) + 1);
			РезультатЗапроса = ЗапросГрафика.Выполнить();
			
			Если РезультатЗапроса.Пустой() = Истина Тогда
				
				Для Каждого СтрокаПоиска Из РезультаПоиска Цикл
					
					НачатьТранзакцию();
					
						РезультатЗаписи = СоздатьДокументПКО(СтрокаПоиска);
						Если Не РезультатЗаписи Тогда
							ОтменитьТранзакцию();
						    Продолжить;					
						КонецЕсли; 
						
						РезультатЗаписи = ЗаписатьФактическиеОплатыВодителя(СтрокаПоиска);
						Если Не РезультатЗаписи Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
						
						РезультатЗаписи = ЗаписатьФактическиеОплатыДокументПоезки(СтрокаПоиска);
						Если Не РезультатЗаписи Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				КонецЦикла;
				
			Иначе
				
				Принято_USD = 0;
				Принято_UAH = 0;
				Для Каждого СтрокаПоиска Из РезультаПоиска Цикл
					Если 		СтрокаПоиска.Валюта = ВалютаУпр Тогда
						Принято_USD = Принято_USD + СтрокаПоиска.Сумма;
					ИначеЕсли 	СтрокаПоиска.Валюта = ВалютаРегл Тогда
						Принято_UAH = Принято_UAH + СтрокаПоиска.Сумма;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				СуммаUAHнаUAH = 0;
				СуммаUAHнаUSD = 0;
				Договор_UAH = Неопределено;
				
				СуммаUSDнаUSD = 0;
				СуммаUSDнаUAH = 0;
								
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаПлатежа");
				Пока Выборка.Следующий() Цикл
					
					ВыборкаДетальныеЗаписи = Выборка.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.Валюта = ВалютаРегл Тогда
							
							Договор_UAH = ВыборкаДетальныеЗаписи.Договор;
							
							СуммаРазнесения = ВыборкаДетальныеЗаписи.СуммаОстаток;
							
							Остаток_UAH = Принято_UAH - СуммаUAHнаUAH - СуммаUAHнаUSD;
							Если Остаток_UAH > 0 Тогда
								Если Остаток_UAH >= СуммаРазнесения Тогда
									СуммаUAHнаUAH = СуммаUAHнаUAH + СуммаРазнесения;
									Продолжить;
								Иначе
									СуммаUAHнаUAH = СуммаUAHнаUAH + Остаток_UAH;
									СуммаРазнесения = СуммаРазнесения - Остаток_UAH;
								КонецЕсли;
							КонецЕсли;
							
							Остаток_USD = Принято_USD - СуммаUSDнаUSD - СуммаUSDнаUAH;
							Если Остаток_USD > 0 Тогда
								Если Остаток_USD >= СуммаРазнесения / КурсУпр_844 Тогда
									СуммаUSDнаUAH = СуммаUSDнаUAH + СуммаРазнесения / КурсУпр_844;
								Иначе
									СуммаUSDнаUAH = СуммаUSDнаUAH + Остаток_USD;
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли ВыборкаДетальныеЗаписи.Валюта = ВалютаУпр Тогда
							
							СуммаРазнесения = ВыборкаДетальныеЗаписи.СуммаОстаток;
							
							Остаток_USD = Принято_USD - СуммаUSDнаUSD - СуммаUSDнаUAH;
							Если Остаток_USD > 0 Тогда
								Если Остаток_USD >= СуммаРазнесения Тогда
									СуммаUSDнаUSD = СуммаUSDнаUSD + СуммаРазнесения;
									Продолжить;
								Иначе
									СуммаUSDнаUSD = СуммаUSDнаUSD + Остаток_USD;
									СуммаРазнесения = СуммаРазнесения - Остаток_USD;
								КонецЕсли;
							КонецЕсли;
							
							Остаток_UAH = Принято_UAH - СуммаUAHнаUAH - СуммаUAHнаUSD;
							Если Остаток_UAH > 0 Тогда
								Если Остаток_UAH >= СуммаРазнесения * КурсУпр_841 Тогда
									СуммаUAHнаUSD = СуммаUAHнаUSD + СуммаРазнесения * КурсУпр_841;
								Иначе
									СуммаUAHнаUSD = СуммаUAHнаUSD + Остаток_UAH;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
				Для Каждого СтрокаПоиска Из РезультаПоиска Цикл
					
					НачатьТранзакцию();
						
						РезультатЗаписи = СоздатьДокументПКОПоДоговору(СтрокаПоиска, Договор_UAH, СуммаUAHнаUAH, СуммаUAHнаUSD, КурсУпр_841, СуммаUSDнаUSD, СуммаUSDнаUAH, КурсУпр_844);
						Если Не РезультатЗаписи Тогда
							ОтменитьТранзакцию();
						    Продолжить;					
						КонецЕсли; 
						
						РезультатЗаписи = ЗаписатьФактическиеОплатыВодителя(СтрокаПоиска);
						Если Не РезультатЗаписи Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
						
						РезультатЗаписи = ЗаписатьФактическиеОплатыДокументПоезки(СтрокаПоиска);
						Если Не РезультатЗаписи Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
						
					ЗафиксироватьТранзакцию();
					
				КонецЦикла;
				
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 
 
#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ПолучитьТекстЗапросаГрафикаПлатежей()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Документ.Договор 	КАК Договор,
		|	ДатаПлатежа 		КАК ДатаПлатежа,
		|	Валюта 				КАК Валюта,
		|	СУММА(СуммаОстаток) КАК СуммаОстаток		
		|ИЗ
		|	РегистрСведений.КТС_ГрафикПлатежейПартнеров.СрезПервых(&НачалоЗавтра, Партнер = &Партнер)
		|
		|СГРУППИРОВАТЬ ПО
		|	Документ.Договор,
		|	ДатаПлатежа,
		|	Валюта	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа Возр
		|
		|ИТОГИ
		|	ПО ДатаПлатежа	
		|";
	Возврат ТекстЗапроса
	
КонецФункции // ПолучитьТекстЗапросаГрафикаПлатежей()

Функция ПолучитьТекстЗапросаОплатыВодителей()

	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
	   	|ВЫБРАТЬ
       	|	ПринятыеОплаты.Период											КАК Период,
       	|	ПринятыеОплаты.ДокументПоездки									КАК ДокументПоездки,
	   	|	ПринятыеОплаты.ДокументПоездки.Водитель							КАК Кассир,
       	|	ПринятыеОплаты.Партнер											КАК Партнер,
       	|	ПринятыеОплаты.Валюта											КАК Валюта,
	   	|	ПринятыеОплаты.СуммаПринято										КАК СуммаПринято,
       	|	ПринятыеОплаты.СуммаПринято	- ПринятыеОплаты.СуммаОформлено		КАК Сумма,
       	|	СоответствиеКасс.Касса              							КАК Касса
	   	|ПОМЕСТИТЬ ТаблицаНеобходимыхОплат
       	|ИЗ
       	|	РегистрСведений.КТС_ОплатыПринятыеВодителями КАК ПринятыеОплаты
	   	|
       	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиСоответствийВодительКасса КАК СоответствиеКасс
       	|ПО ПринятыеОплаты.ДокументПоездки.Водитель = СоответствиеКасс.Пользователь
       	|И 	ПринятыеОплаты.Валюта 					= СоответствиеКасс.Валюта
	   	|
       	|ГДЕ
	   	|	ПринятыеОплаты.ДокументПоездки.СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
       	|И 	ПринятыеОплаты.СуммаПринято > ПринятыеОплаты.СуммаОформлено
		|И	ПринятыеОплаты.Период < &ДатаМинус15Мин
	   	|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
	   	|	ДопРеквизиты.Ссылка 	КАК Партнер,
	   	|	ДопРеквизиты.Значение   КАК СсылкаНаДоговор
	   	|ПОМЕСТИТЬ ТаблицаДоговоров
	   	|ИЗ
	   	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопРеквизиты
	   	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНеобходимыхОплат КАК ТаблицаНеобходимыхОплат
	   	|	    ПО ДопРеквизиты.Ссылка = ТаблицаНеобходимыхОплат.Партнер
	   	|ГДЕ
	   	|	ДопРеквизиты.Свойство = &СвойствоДоговор
	   	|;
	   	////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
	   	|	ТаблицаНеобходимыхОплат.Период						КАК Период,
       	|	ТаблицаНеобходимыхОплат.ДокументПоездки				КАК ДокументПоездки,
	   	|	ТаблицаНеобходимыхОплат.Кассир						КАК Кассир,
       	|	ТаблицаНеобходимыхОплат.Партнер						КАК Партнер,
       	|	ТаблицаНеобходимыхОплат.Валюта						КАК Валюта,
	   	|	ТаблицаНеобходимыхОплат.Касса              			КАК Касса,
	   	|	ЕСТЬNULL(ТаблицаДоговоров.СсылкаНаДоговор, """") 	КАК СсылкаНаДоговор,
	   	|	ТаблицаНеобходимыхОплат.СуммаПринято				КАК СуммаПринято,
       	|	ТаблицаНеобходимыхОплат.Сумма						КАК Сумма
		|ИЗ                                              	
	   	|	ТаблицаНеобходимыхОплат КАК ТаблицаНеобходимыхОплат
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоговоров КАК ТаблицаДоговоров
		|ПО ТаблицаНеобходимыхОплат.Партнер = ТаблицаДоговоров.Партнер
		|";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОплатыВодителей()

Функция ПолучитьТекстЗапросаОплатыДокументПоездки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Курс / Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	               |	Валюта КАК Валюта,
	               |	Период КАК Период
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КурсыВалют.Курс			КАК Курс,
	               |	КурсыВалют.Валюта		КАК Валюта,
	               |	КурсыВалют.Период 		КАК НачалоПериода,
	               |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	               |ПОМЕСТИТЬ ТаблицаКурсов
	               |ИЗ
	               |	КурсыВалют КАК КурсыВалют
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	               |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	               |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПринятыеОплаты.ДокументПоездки	КАК ДокументПоездки,
	               |	ПринятыеОплаты.Партнер			КАК Партнер,
	               |	СУММА(ВЫБОР ПринятыеОплаты.Валюта
	               |			КОГДА &ВалютаУпрУчета
	               |				ТОГДА ПринятыеОплаты.СуммаОформлено
	               |			ИНАЧЕ ПринятыеОплаты.СуммаОформлено * (ТаблицаКурсовДок.Курс / ТаблицаКурсовУпр.Курс)
	               |		КОНЕЦ) КАК Сумма
	               |ПОМЕСТИТЬ ОплатыВодителя
	               |ИЗ
	               |	РегистрСведений.КТС_ОплатыПринятыеВодителями КАК ПринятыеОплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовДок
	               |		ПО ПринятыеОплаты.Период 	>= ТаблицаКурсовДок.НачалоПериода
	               |			И ПринятыеОплаты.Период < ТаблицаКурсовДок.КонецПериода
	               |			И ПринятыеОплаты.Валюта = ТаблицаКурсовДок.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовУпр
	               |		ПО (ТаблицаКурсовУпр.Валюта = &ВалютаУпрУчета)
	               |			И ПринятыеОплаты.Период >= ТаблицаКурсовУпр.НачалоПериода
	               |			И ПринятыеОплаты.Период < ТаблицаКурсовУпр.КонецПериода
	               |
				   |ГДЕ
				   |	ПринятыеОплаты.ДокументПоездки = &ДокументПоездки
	               |	И ПринятыеОплаты.Партнер = &Партнер
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	ПринятыеОплаты.ДокументПоездки,
	               |	ПринятыеОплаты.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоездкаЗаМаршрутомФинансы.ДокументПоездки				КАК ДокументПоездки,
	               |	ПоездкаЗаМаршрутомФинансы.Партнер						КАК Партнер,
	               |	ПоездкаЗаМаршрутомФинансы.Порядок						КАК Порядок,
	               |	ПоездкаЗаМаршрутомФинансы.СуммаУчета					КАК СуммаУчета,
	               |	ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем		КАК СуммаПолученнаяВодителем,
	               |	ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером	КАК СуммаНазначеннаяМенеджером,
	               |	ОплатыВодителя.Сумма 									КАК СуммаПоФакту
	               |ИЗ
	               |	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОплатыВодителя КАК ОплатыВодителя
	               |		ПО ПоездкаЗаМаршрутомФинансы.ДокументПоездки = ОплатыВодителя.ДокументПоездки
	               |			И ПоездкаЗаМаршрутомФинансы.Партнер = ОплатыВодителя.Партнер";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОплатыДокументПоездки()

// Получаем данные для платежа розничного клиента
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаДляРасшифрокиПлатежаПартнера()
ТекстЗапроса = "ВЫБРАТЬ
               |	Аналитика.Партнер КАК Партнер,
               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК Заказ,
               |	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
               |	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
               |ИЗ
               |	РегистрНакопления.РасчетыСКлиентами.Остатки(, Валюта = &РеглВалюта) КАК РасчетыСКлиентамиОстатки
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
               |		ПО РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
               |ГДЕ
               |	Аналитика.Контрагент = &Контрагент
               |	И Аналитика.Организация = &Организация
               |	И РасчетыСКлиентамиОстатки.СуммаОстаток > 0";
Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДляРасшифрокиПлатежаПартнера()
 
#КонецОбласти  

#Область ПроцедурыИФункцииДляСозданияДокументаПКО

// Создает документ ПКО на основании данных по оплатам водителя.
//
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать ПКО.
//
// Возвращаемое значение:
// Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументПКО(ДанныеЗаполнения)
	
	ДоговорКонтрагента = ПолучитьДоговорПоНавигационнойСсылке(ДанныеЗаполнения.СсылкаНаДоговор);
	
	ТелоПисьма = "";
	Контрагент = ПолучитьКонтагентаПоПартнеру(ДанныеЗаполнения.Партнер, ТелоПисьма);
	Если Контрагент = Неопределено Тогда
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецЕсли;
	
	Если ДоговорКонтрагента = Неопределено Тогда 
		ПартнерОптовогоОтдела = ПроверитьПартнераНаСегментОптовгоОтдела(ДанныеЗаполнения.Партнер);
		Если ПартнерОптовогоОтдела Тогда
		    ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТелоПисьма = НСтр("ru='Для партнера %1 не указан договор оплаты.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		    Возврат Ложь;
		Иначе
			Результат = СоздатьДокументПКОДляРознычныхКлиентов(ДанныеЗаполнения);
			Возврат  Результат;
		КонецЕсли;
	КонецЕсли; 
	
	ДокументОрдер 									= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументОрдер.Дата  							= ТекущаяДата();
	ДокументОрдер.Организация 						= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")); // Организация Поставка
	ДокументОрдер.Касса								= ДанныеЗаполнения.Касса;
	ДокументОрдер.СуммаДокумента 					= ДанныеЗаполнения.Сумма;
	ДокументОрдер.ХозяйственнаяОперация 			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Контрагент						= Контрагент;
	ДокументОрдер.Валюта							= ДанныеЗаполнения.Валюта;
	ДокументОрдер.Кассир							= ДанныеЗаполнения.Кассир;
	ДокументОрдер.СтатьяДвиженияДенежныхСредств     = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Комментарий						= НСтр("ru='Автоматически созданный документ через Android.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	РасшифровкаПлатежа = ДокументОрдер.РасшифровкаПлатежа;
	НоваяСтрока 	   = РасшифровкаПлатежа.Добавить();
	
	НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
	НоваяСтрока.ОснованиеПлатежа        = ДоговорКонтрагента;
	НоваяСтрока.Заказ					= ДоговорКонтрагента;
	НоваяСтрока.Сумма					= ДанныеЗаполнения.Сумма;
	НоваяСтрока.ВалютаВзаиморасчетов	= ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ДанныеЗаполнения.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		НоваяСтрока.СуммаВзаиморасчетов = ДанныеЗаполнения.Сумма;
	Иначе
		НоваяСтрока.СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетов(ДанныеЗаполнения.Сумма, ДанныеЗаполнения.Валюта, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка проведения ПКО по партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Не удалось провести ПКО по партнеру %1.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Создает документ ПКО на основании данных по оплатам водителя.
//
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать ПКО.
//
// Возвращаемое значение:
// Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументПКОПоДоговору(ДанныеЗаполнения, Договор_UAH, СуммаUAHнаUAH, СуммаUAHнаUSD, КурсУпр_841, СуммаUSDнаUSD, СуммаUSDнаUAH, КурсУпр_844)
	
	Договор_USD = ПолучитьДоговорПоНавигационнойСсылке(ДанныеЗаполнения.СсылкаНаДоговор);
	
	ТелоПисьма = "";
	Контрагент = ПолучитьКонтагентаПоПартнеру(ДанныеЗаполнения.Партнер, ТелоПисьма);
	Если Контрагент = Неопределено Тогда
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецЕсли;
	
	Если Договор_USD = Неопределено Тогда 
		ПартнерОптовогоОтдела = ПроверитьПартнераНаСегментОптовгоОтдела(ДанныеЗаполнения.Партнер);
		Если ПартнерОптовогоОтдела Тогда
		    ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТелоПисьма = НСтр("ru='Для партнера %1 не указан договор оплаты.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
			ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
			ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		    Возврат Ложь;
		Иначе
			Результат = СоздатьДокументПКОДляРознычныхКлиентов(ДанныеЗаполнения);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли; 
	
	ДокументОрдер 									= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументОрдер.Дата  							= ТекущаяДата();
	ДокументОрдер.Организация 						= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")); // Организация Поставка
	ДокументОрдер.Касса								= ДанныеЗаполнения.Касса;
	ДокументОрдер.СуммаДокумента 					= ДанныеЗаполнения.Сумма;
	ДокументОрдер.ХозяйственнаяОперация 			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Контрагент						= Контрагент;
	ДокументОрдер.Валюта							= ДанныеЗаполнения.Валюта;
	ДокументОрдер.Кассир							= ДанныеЗаполнения.Кассир;
	ДокументОрдер.СтатьяДвиженияДенежныхСредств     = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Комментарий						= НСтр("ru='Автоматически созданный документ через Android.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	РасшифровкаПлатежа = ДокументОрдер.РасшифровкаПлатежа;
	Если ДанныеЗаполнения.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		УжеЗачтено = 0;
		Если СуммаUAHнаUAH > 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
			НоваяСтрока.ОснованиеПлатежа        = Договор_UAH;
			НоваяСтрока.Заказ					= Договор_UAH;
			Если СуммаUAHнаUAH >= ДанныеЗаполнения.Сумма Тогда 
				НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма;
				СуммаUAHнаUAH = СуммаUAHнаUAH - ДанныеЗаполнения.Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаUAHнаUAH;
				СуммаUAHнаUAH = 0;
			КонецЕсли;
			НоваяСтрока.ВалютаВзаиморасчетов= Договор_UAH.ВалютаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма;
			
			УжеЗачтено = УжеЗачтено + НоваяСтрока.Сумма;
			
		КонецЕсли;
		
		Если СуммаUAHнаUSD > 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
			НоваяСтрока.ОснованиеПлатежа        = Договор_USD;
			НоваяСтрока.Заказ					= Договор_USD;
			Если СуммаUAHнаUSD >= ДанныеЗаполнения.Сумма - УжеЗачтено Тогда 
				НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма - УжеЗачтено;
				СуммаUAHнаUSD = СуммаUAHнаUSD - ДанныеЗаполнения.Сумма - УжеЗачтено;
			Иначе
				НоваяСтрока.Сумма = СуммаUAHнаUSD;
				СуммаUAHнаUSD = 0;
			КонецЕсли;
			НоваяСтрока.ВалютаВзаиморасчетов= Договор_USD.ВалютаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма / КурсУпр_841;
			
			УжеЗачтено = УжеЗачтено + НоваяСтрока.Сумма;
			
		КонецЕсли;
		
		Если СуммаUAHнаUAH = 0 И СуммаUAHнаUSD = 0 И ДанныеЗаполнения.Сумма > УжеЗачтено Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
			НоваяСтрока.ОснованиеПлатежа        = Договор_USD;
			НоваяСтрока.Заказ					= Договор_USD;
			НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма - УжеЗачтено;
			НоваяСтрока.ВалютаВзаиморасчетов= Договор_USD.ВалютаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма / КурсУпр_841;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Валюта = Константы.ВалютаУправленческогоУчета.Получить() Тогда
		
		УжеЗачтено = 0;
		Если СуммаUSDнаUSD > 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
			НоваяСтрока.ОснованиеПлатежа        = Договор_USD;
			НоваяСтрока.Заказ					= Договор_USD;
			Если СуммаUSDнаUSD >= ДанныеЗаполнения.Сумма Тогда 
				НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма;
				СуммаUSDнаUSD = СуммаUSDнаUSD - ДанныеЗаполнения.Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаUSDнаUSD;
				СуммаUSDнаUSD = 0;
			КонецЕсли;
			НоваяСтрока.ВалютаВзаиморасчетов= Договор_USD.ВалютаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма;
			
			УжеЗачтено = УжеЗачтено + НоваяСтрока.Сумма;
			
		КонецЕсли;
		
		Если СуммаUSDнаUAH > 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
			НоваяСтрока.ОснованиеПлатежа        = Договор_UAH;
			НоваяСтрока.Заказ					= Договор_UAH;
			Если СуммаUSDнаUAH >= ДанныеЗаполнения.Сумма - УжеЗачтено Тогда 
				НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма - УжеЗачтено;
				СуммаUSDнаUAH = СуммаUSDнаUAH - ДанныеЗаполнения.Сумма - УжеЗачтено;
			Иначе
				НоваяСтрока.Сумма = СуммаUSDнаUAH;
				СуммаUSDнаUAH = 0;
			КонецЕсли;
			НоваяСтрока.ВалютаВзаиморасчетов= Договор_UAH.ВалютаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма * КурсУпр_844;
			
			УжеЗачтено = УжеЗачтено + НоваяСтрока.Сумма;
			
		КонецЕсли;
		
		Если СуммаUSDнаUSD = 0 И СуммаUSDнаUAH = 0 И ДанныеЗаполнения.Сумма > УжеЗачтено Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
			НоваяСтрока.ОснованиеПлатежа        = Договор_USD;
			НоваяСтрока.Заказ					= Договор_USD;
			НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма - УжеЗачтено;
			НоваяСтрока.ВалютаВзаиморасчетов= Договор_USD.ВалютаВзаиморасчетов;
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.Сумма;	
		КонецЕсли;
		
	КонецЕсли;
	

	
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка проведения ПКО по партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Не удалось провести ПКО по партнеру %1.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции


// Создает документ ПКО на основании данных по оплатам водителя, для клиентов в которых не указан договор.
//
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать ПКО.
//
// Возвращаемое значение:
// Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументПКОДляРознычныхКлиентов(ДанныеЗаполнения)
	ВалютаГРН	= Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТелоПисьма	= "";
	Контрагент 	= ПолучитьКонтагентаПоПартнеру(ДанныеЗаполнения.Партнер, ТелоПисьма);
	
	Если Контрагент = Неопределено Тогда
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецЕсли;

	
	Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("ffe06c14-475d-11e0-9f98-001517115d85")); // Организация "КТС РІВНЕ"
	Если ВалютаГРН<> ДанныеЗаполнения.Валюта Тогда
	    ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для розничного партнера %1 оплата была прийнята не в валюте регламентированного учета.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецЕсли; 
	
	ДокументОрдер 									= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументОрдер.Дата  							= ТекущаяДата();
	ДокументОрдер.Организация 						= Организация;
	ДокументОрдер.Касса								= Справочники.Кассы.ПолучитьСсылку(Новый УникальныйИдентификатор("471a9f36-c0a9-11e3-80c2-001e676b0174")); // Каса водіїв маршрутів, Магазин КТС Рівне, грн
	ДокументОрдер.СуммаДокумента 					= ДанныеЗаполнения.Сумма;
	ДокументОрдер.ХозяйственнаяОперация 			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Контрагент						= Контрагент;
	ДокументОрдер.Валюта							= ДанныеЗаполнения.Валюта;
	ДокументОрдер.Кассир							= ДанныеЗаполнения.Кассир;
	ДокументОрдер.СтатьяДвиженияДенежныхСредств     = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Комментарий						= НСтр("ru='Автоматически созданный документ через Android.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контрагент",	Контрагент);
	СтруктураДанных.Вставить("Организация",	Организация);
	СтруктураДанных.Вставить("РеглВалюта",	ВалютаГРН);
	ДанныеДляРасшифровкиПлатежа	= ПолучитьДанныеДляРасшифровкиПлатежа(СтруктураДанных);
	СуммаОстаток       			= ДанныеЗаполнения.Сумма;

	РасшифровкаПлатежа 			= ДокументОрдер.РасшифровкаПлатежа;
	
	Для каждого Строка Из ДанныеДляРасшифровкиПлатежа Цикл
		СуммаОплати							= Мин(Строка.Сумма,СуммаОстаток);
		Если СуммаОплати <=0  Тогда
			Продолжить;	
		КонецЕсли; 
		НоваяСтрока 	   					= РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Партнер 				= Строка.Партнер;
		НоваяСтрока.ОснованиеПлатежа        = Строка.Заказ;
		НоваяСтрока.Заказ					= Строка.Заказ;
		НоваяСтрока.Сумма					= СуммаОплати;
		НоваяСтрока.ВалютаВзаиморасчетов	= Строка.ВалютаВзаиморасчетов;
		НоваяСтрока.СуммаВзаиморасчетов 	= СуммаОплати;
		СуммаОстаток 						= СуммаОстаток -СуммаОплати; 
	КонецЦикла;  
	
	Если СуммаОстаток > 0 Тогда
		СуммаОплати							= СуммаОстаток;
		НоваяСтрока 	   					= РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
		НоваяСтрока.Сумма					= СуммаОплати;
		НоваяСтрока.ВалютаВзаиморасчетов	= ВалютаГРН;
		НоваяСтрока.СуммаВзаиморасчетов 	= СуммаОплати
	КонецЕсли; 
	
		
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка проведения ПКО по партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Не удалось провести ПКО по партнеру %1.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Получет ссылку на контрагента.
// 
// Параметры:
// Партнер - СправочникСсылка.Партнер - Ссылка на элемент справочника Партнеры, на основании которой необходимо
//										получить ссылку на элемент справочника Контрагенты.
//
// Возвращаемое значение:
// СправочникСсылка.Контрагенты - Если функция выполнена успешно, Неопределено - если контрагент не найден.
//
Функция ПолучитьКонтагентаПоПартнеру(Партнер, СообщениеОбОшибке)

	Запрос	 		= Новый Запрос;
	Запрос.Текст	= ТекстЗапросаПолучнияКонтрагента();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	// Свойство ЭтоОсновнойКонтрагент
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("d3231b97-58d9-11e3-9318-001e673c80fc")));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезЗапросаКонтрагент	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1];
	РезЗапросаОснКонтрагент = РезультатыЗапроса[РезультатыЗапроса.ВГраница()];
	
	ВыборкаКонтрагент		= РезЗапросаКонтрагент.Выбрать();
	ВыборкаОснКонрагент		= РезЗапросаОснКонтрагент.Выбрать();
	
	// У партнера нету контрагентов
	Если РезЗапросаКонтрагент.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='У партнера %1 не установлен контрагент'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Неопределено;
	КонецЕсли;
	
	// Если у партнера один контрагент создаем ПКО на него (А. Харечко)
	Если ВыборкаКонтрагент.Количество() = 1 Тогда
		ВыборкаКонтрагент.Следующий();
		Возврат ВыборкаКонтрагент.Контрагент;
	КонецЕсли;
	
	Если РезЗапросаОснКонтрагент.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='У партнера %1 нету основных контрагентов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВыборкаОснКонрагент.Количество() = 1 Тогда
		ВыборкаОснКонрагент.Следующий();
		Возврат ВыборкаОснКонрагент.Контрагент;
	Иначе
		СообщениеОбОшибке = НСтр("ru='У партнера %1 установлено несколько основных контрагентов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Возврат Неопределено;
	
КонецФункции // ПолучитьКонтагентаПоПартнеру()

Функция ТекстЗапросаПолучнияКонтрагента()

	ТекстЗапроса = "
				   // Выбор всех контрагентов партнера без пометки удаления
				   |ВЫБРАТЬ
	               |	Ссылка КАК Контрагент
	               |ПОМЕСТИТЬ ТаблицаКонтаргентов
	               |ИЗ
	               |	Справочник.Контрагенты
	               |ГДЕ
	               |	Партнер = &Партнер
	               |	И ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               ////////////////////////////////////////////////////////////////////////////////
				   // Выбор всех основных контрагентов партнера
	               |ВЫБРАТЬ
	               |	ТаблицаКонтаргентов.Контрагент КАК Контрагент
	               |ПОМЕСТИТЬ ОсновныеКонтрагенты
	               |ИЗ
	               |	ТаблицаКонтаргентов КАК ТаблицаКонтаргентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО (ТаблицаКонтаргентов.Контрагент = (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты)))
	               |			И (ДополнительныеСведения.Свойство = &Свойство)
	               |;
	               |
	               ////////////////////////////////////////////////////////////////////////////////
				   // Получаем контрагента (нужно только для того если он один).
	               |ВЫБРАТЬ
	               |	Контрагент КАК Контрагент
	               |ИЗ
	               |	ТаблицаКонтаргентов
	               |;
	               |
	               ////////////////////////////////////////////////////////////////////////////////
				   // Получаем контрагента (нужно если основной контрагент один).
	               |ВЫБРАТЬ
	               |	Контрагент КАК Контрагент
	               |ИЗ
	               |	ОсновныеКонтрагенты";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПолучнияКонтрагента()
 

//  Проверить Партнера входит он в сегмент Оптового Отдела
//
// Параметры:
// Партнер - СправочникСсылка.Партнер - Ссылка на элемент справочника Партнеры, на основании которой необходимо
//										получить проверку на сегмент опотового отдела.
//
// Возвращаемое значение:
//   Булево  - если является оптовым партнером, тогда Истина, иначе Ложь
//
Функция ПроверитьПартнераНаСегментОптовгоОтдела(Партнер)
	УстановитьПривилегированныйРежим(Истина);
	СегментПартнера = Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")); // сегмент гуртового отдела
	Запрос 			= Новый Запрос;
	Запрос.Текст    = "ВЫБРАТЬ
					|	Партнер
					|ИЗ
					|	РегистрСведений.ПартнерыСегмента
					|ГДЕ
					|	Сегмент = &СегментПартнера
					|	И Партнер = &Партнер";
					  
					
	Запрос.УстановитьПараметр("СегментПартнера",СегментПартнера);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();   	

КонецФункции // ПроверитьПартнераНаСегментОптовгоОтдела()
 


// Получает ссылку на договор из навигационной ссылки
//
// Параметры:
// НавигационнаяСсылка - Строка - Навигационная ссылка на основной договор партнера.
//
// Возвращаемое значение:
// СправочникСсылка.ДоговорыКонтрагентов - если ссылка успешно получена, Неопределено - если не удалось получить ссылку.
//
Функция ПолучитьДоговорПоНавигационнойСсылке(НавигационнаяСсылка)

	УИД 			= ПолучитьУИДпоНавигационнойСсылке(НавигационнаяСсылка);
	СсылкаНаДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(УИД);
	
	Если ПустаяСтрока(СсылкаНаДоговор.ВерсияДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаДоговор;

КонецФункции // ПолучитьДоговорПоНавигационнойСсылке()

// Получает сумму взаиморасчетов если валюта оплаты отличается от валюты взаиморасчетов в договре контрагента.
//
// Параметры:
// Сумма 				- Число 				  - Сумма которую принял водитель.
// ВалютаОплаты 		- СправочникСсылка.Валюты - Валюта в которой водитель принял оплату от партнера.
// ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером (из договора партнера).
//
// Возвращаемое значение:
// Число - Сумма оплаты в валюте взаиморасчетов.
//
Функция ПолучитьСуммуВзаиморасчетов(Сумма, ВалютаОплаты, ВалютаВзаиморасчетов)

	тмпВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	ВалютаUSD				= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("a56702e0-3ffc-11e0-9f98-001517115d85")); // USD 840
	ВалютаПартнеры			= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")); // USD 841
	
	Если тмпВалютаВзаиморасчетов = ВалютаUSD Тогда
		тмпВалютаВзаиморасчетов = ВалютаПартнеры;
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = "
					  |ВЫБРАТЬ
					  |	СУММА(ВложенныйЗапрос.КурсОплаты)/СУММА(ВложенныйЗапрос.КурсВзаиморасчетов) КАК Курс
					  |ИЗ
					  |	(ВЫБРАТЬ
	                  |		Курс/Кратность 	КАК КурсОплаты,
					  | 	0 				КАК КурсВзаиморасчетов
	                  |	ИЗ
	                  |		РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаОплаты)
	                  |
					  |ОБЪЕДИНИТЬ ВСЕ
					  |
	                  |	ВЫБРАТЬ
					  | 	0,
	                  |		Курс/Кратность
	                  |	ИЗ
	                  |		РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаВзаиморасчетов)) КАК ВложенныйЗапрос";
					  
	Запрос.УстановитьПараметр("ВалютаОплаты", ВалютаОплаты);				  
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", тмпВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Сумма * Выборка.Курс;
	
КонецФункции // ПолучитьСуммуВзаиморасчетов()

// Получает список не оплатченных документов клиента
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнер - Ссылка на элемент справочника Партнеры, на основании которой необходимо
//										получить ссылку на элемент справочника Контрагенты.
//
// Возвращаемое значение:
// ВыборкаРезультатаЗапроса - данные на основании которых нужно для расшифровки платежма.
//
Функция ПолучитьДанныеДляРасшифровкиПлатежа(СтруктураДанных)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляРасшифрокиПлатежаПартнера();
	Запрос.УстановитьПараметр("Контрагент",	СтруктураДанных.Контрагент);
	Запрос.УстановитьПараметр("Организация",СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("РеглВалюта", СтруктураДанных.РеглВалюта);


	РезультатЗапроса =  Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 
	
	Возврат РезультатЗапроса.Выгрузить();	
КонецФункции // ПолучитьДанныеДляРасшифровкиПлатежа()

#КонецОбласти 

#Область ПроцедурыИФункцииДляЗаписиВСлужебныеРегистрыРуля
// Записывает фактические оплаты водителя в регистр сведений КТС_ОплатыПринятыеВодителями
// 
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать запись в регистр.
//
// Возвращаемое значение:
// Булево - Истина, если набор записей успешно записан.
//
Функция ЗаписатьФактическиеОплатыВодителя(ДанныеЗаполнения)

	НаборЗаписей = РегистрыСведений.КТС_ОплатыПринятыеВодителями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеЗаполнения.Период);
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеЗаполнения.ДокументПоездки);
	НаборЗаписей.Отбор.Партнер.Установить(ДанныеЗаполнения.Партнер);
	НаборЗаписей.Отбор.Валюта.Установить(ДанныеЗаполнения.Валюта);
	
	Запись 						= НаборЗаписей.Добавить();
	Запись.Период   			= ДанныеЗаполнения.Период;
	Запись.ДокументПоездки   	= ДанныеЗаполнения.ДокументПоездки;
	Запись.Партнер   			= ДанныеЗаполнения.Партнер;
	Запись.Валюта   			= ДанныеЗаполнения.Валюта;
	Запись.СуммаПринято   		= ДанныеЗаполнения.СуммаПринято;
	Запись.СуммаОформлено   	= ДанныеЗаполнения.Сумма;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Не удалось выполнить запись в регистр КТС_ОплатыПринятыеВодителями'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось выполнить запись в регистр КТС_ОплатыПринятыеВодителями.
							  |Документ поездки: %2.
							  |Валюта %3.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ТелоПисьма, 
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер),
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.ДокументПоездки),
														ДанныеЗаполнения.Валюта);
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьФактическиеОплатыВодителя()

// Записывает фактические оплаты в документ поезки
// 
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать запись в регистр.
//
// Возвращаемое значение:
// Булево - Истина, если набор записей успешно записан.
//
Функция ЗаписатьФактическиеОплатыДокументПоезки(ДанныеЗаполнения)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаОплатыДокументПоездки();
	
	Запрос.УстановитьПараметр("ДокументПоездки", ДанныеЗаполнения.ДокументПоездки);
	Запрос.УстановитьПараметр("Партнер", ДанныеЗаполнения.Партнер);
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутомФинансы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеЗаполнения.ДокументПоездки);
	НаборЗаписей.Отбор.Партнер.Установить(ДанныеЗаполнения.Партнер);
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	Попытка
		НаборЗаписей.Записать();	    			
	Исключение
	    ТемаПисьма = НСтр("ru='[РУЛЬ] Не удалось выполнить запись в регистр ПоездкаЗаМаршрутомФинансы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось выполнить запись в регистр ПоездкаЗаМаршрутомФинансы.
							  |Документ поездки: %2.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ТелоПисьма, 
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер),
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.ДокументПоездки));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьФактическиеОплатыДокументПоезки()
 
	
#КонецОбласти 

#Область ОбщиеСлужебныеПроцедурыИФункции


// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое создание ПКО по оплатам водителя.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
		
КонецПроцедуры

// Получает GIUD объекта по навигационной ссылке
//
// Параметры:
// стрНавигационнаяССылка - Строка - Навигационная ссылка на объект информационной базы.
//
// Возвращаемое значение:
// УникальныйИдентификатор - если функция выполнена успешно, Неопределено - если преоб разование не удалось.
//
Функция ПолучитьУИДпоНавигационнойСсылке(стрНавигационнаяССылка)
	Результат=Неопределено;
	ПозицияНачалаНавССылки=Найти(стрНавигационнаяССылка,"?ref=");
	Если ПозицияНачалаНавССылки<>0 тогда       УидНавССылки=Сред(стрНавигационнаяССылка,ПозицияНачалаНавССылки+5,32);
		УидСтрока=Прав(УидНавССылки,8)+"-"+Сред(УидНавССылки,21,4)+"-"+Сред(УидНавССылки,17,4)+"-"+Лев(УидНавССылки,4)+"-"+Сред(УидНавССылки,5,12);
		УИД=Новый УникальныйИдентификатор(УидСтрока);
		Результат=УИД;
	КонецЕсли;
	Возврат(Результат);
КонецФункции

// Отправляет сообщение на 777 о проблеме
//
// Параметры:
// ТемаПисьма   	- Строка 		- Тема письма в техническую поддрежку.
// ТекстПисьма  	- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СведенияОВнешнейКомпоненте

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.24";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рег. обработка оплат водителей");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рег. обработка оплат водителей [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Рег. обработка оплат водителей [" + Версия + "]", "СоздатьПКОПоОплатамВодителей();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 
