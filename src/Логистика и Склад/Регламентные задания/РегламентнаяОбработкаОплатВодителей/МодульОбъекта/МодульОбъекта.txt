
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СоздатьПКОПоОплатамВодителей() Экспорт

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаОплатыВодителей();
	
	Запрос.УстановитьПараметр("СвойствоДоговор", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("f586a250-4c41-11e3-9318-001e673c80fc"))); // Дополнительный реквизит (АСВР) Договор по умолчанию
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		РезультатЗаписи = СоздатьДокументПКО(Выборка);
		Если Не РезультатЗаписи Тогда
			ОтменитьТранзакцию();
		    Продолжить;					
		КонецЕсли; 
		
		РезультатЗаписи = ЗаписатьФактическиеОплатыВодителя(Выборка);
		Если Не РезультатЗаписи Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Тексты запросо

Функция ПолучитьТекстЗапросаОплатыВодителей()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ДокументыПоездки
	               |ИЗ
	               |	Документ.ПоездкаЗаМаршрутом
	               |ГДЕ
	               |	Проведен
	               |	И СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПринятыеОплаты.Период											КАК Период,
	               |	ПринятыеОплаты.ДокументПоездки									КАК ДокументПоездки,
				   |	ПринятыеОплаты.ДокументПоездки.Водитель							КАК Кассир,
	               |	ПринятыеОплаты.Партнер											КАК Партнер,
	               |	ПринятыеОплаты.Валюта											КАК Валюта,
				   |	ПринятыеОплаты.СуммаПринято										КАК СуммаПринято,
	               |	ПринятыеОплаты.СуммаПринято	- ПринятыеОплаты.СуммаОформлено		КАК Сумма,
	               |	СоответствиеКасс.Касса              							КАК Касса
				   |ПОМЕСТИТЬ ТаблицаНеобходимыхОплат
	               |ИЗ
	               |	РегистрСведений.КТС_ОплатыПринятыеВодителями.СрезПоследних(
	               |			,
	               |			ДокументПоездки В
	               |				(ВЫБРАТЬ
	               |					ДокументыПоездки.Ссылка
	               |				ИЗ
	               |					ДокументыПоездки КАК ДокументыПоездки)) КАК ПринятыеОплаты
				   |
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_СоответствиеКассИВодителей КАК СоответствиеКасс
	               |		ПО ПринятыеОплаты.ДокументПоездки.Водитель 	= СоответствиеКасс.Водитель
	               |			И ПринятыеОплаты.Валюта 				= СоответствиеКасс.Валюта
				   |
	               |ГДЕ
	               |	ПринятыеОплаты.СуммаПринято > ПринятыеОплаты.СуммаОформлено
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ДопРеквизиты.Ссылка 	КАК Партнер,
				   |	ДопРеквизиты.Значение   КАК СсылкаНаДоговор
				   |ПОМЕСТИТЬ ТаблицаДоговоров
				   |ИЗ
				   |	Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопРеквизиты
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНеобходимыхОплат КАК ТаблицаНеобходимыхОплат
				   |	    ПО ДопРеквизиты.Ссылка = ТаблицаНеобходимыхОплат.Партнер
				   |ГДЕ
				   |	ДопРеквизиты.Свойство = &СвойствоДоговор
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТаблицаНеобходимыхОплат.Период						КАК Период,
	               |	ТаблицаНеобходимыхОплат.ДокументПоездки				КАК ДокументПоездки,
				   |	ТаблицаНеобходимыхОплат.Кассир						КАК Кассир,
	               |	ТаблицаНеобходимыхОплат.Партнер						КАК Партнер,
	               |	ТаблицаНеобходимыхОплат.Валюта						КАК Валюта,
				   |	ТаблицаНеобходимыхОплат.СуммаПринято				КАК СуммаПринято,
	               |	ТаблицаНеобходимыхОплатСумма						КАК Сумма,
	               |	ТаблицаНеобходимыхОплат.Касса              			КАК Касса,
				   |	ЕСТЬNULL(ТаблицаДоговоров.СсылкаНаДоговор, """") 	КАК СсылкаНаДоговор
				   |ИЗ
				   |	ТаблицаНеобходимыхОплат КАК ТаблицаНеобходимыхОплат
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоговоров КАК ТаблицаДоговоров
				   |		ПО ТаблицаНеобходимыхОплат.Партнер = ТаблицаДоговоров.Партнер
				   |";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОплатыВодителей()



// Процедуры и функции для создания докумета ПКО

// Создает документ ПКО на основании данных по оплатам водителя.
//
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать ПКО.
//
// Возвращаемое значение:
// Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументПКО(ДанныеЗаполнения)
	
	ДоговорКонтрагента = ПолучитьДоговорПоНавигационнойСсылке(ДанныеЗаполнения.СсылкаНаДоговор);	
	Если ДоговорКонтрагента = Неопределено Тогда                                             
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения договора контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось получить ссылку на договор.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Предупреждение);
	    Возврат Ложь;			
	КонецЕсли; 
	
	Контрагент = ПолучитьКонтагентаПоПартнеру(ДанныеЗаполнения.Партнер);
	Если Контрагент = Неопределено Тогда
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось получить ссылку контрагента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецЕсли;

	ДокументОрдер 									= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументОрдер.Дата  							= ТекущаяДата();
	ДокументОрдер.Организация 						= Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")); // Организация Поставка
	ДокументОрдер.СуммаДокумента 					= ДанныеЗаполнения.Сумма;
	ДокументОрдер.ХозяйственнаяОперация 			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Контрагент						= Контрагент;
	ДокументОрдер.Валюта							= ДанныеЗаполнения.Валюта;
	ДокументОрдер.Кассир							= ДанныеЗаполнения.Кассир;
	ДокументОрдер.СтатьяДвиженияДенежныхСредств     = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Комментарий						= НСтр("ru='Автоматически созданный документ через Android.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	РасшифровкаПлатежа = ДокументОрдер.РасшифровкаПлатежа;
	НоваяСтрока 	   = РасшифровкаПлатежа.Добавить();
	
	НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
	НоваяСтрока.ОснованиеПлатежа        = ДоговорКонтрагента;
	НоваяСтрока.Заказ					= ДоговорКонтрагента;
	НоваяСтрока.Сумма					= ДанныеЗаполнения.Сумма;
	НоваяСтрока.ВалютаВзаиморасчетов	= ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ДанныеЗаполнения.Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		НоваяСтрока.СуммаВзаиморасчетов = ДанныеЗаполнения.Сумма;
	Иначе
		НоваяСтрока.СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетов(ДанныеЗаполнения.Сумма, ДанныеЗаполнения.Валюта, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка проведения ПКО по партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Не удалось провести ПКО по партнеру %1.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Получет ссылку на контрагента.
// 
// Параметры:
// Партнер - СправочникСсылка.Партнер - Ссылка на элемент справочника Партнеры, на основании которой необходимо
//										получить ссылку на элемент справочника Контрагенты.
//
// Возвращаемое значение:
// СправочникСсылка.Контрагенты - Если функция выполнена успешно, Неопределено - если контрагент не найден.
//
Функция ПолучитьКонтагентаПоПартнеру(Партнер)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = "ВЫБРАТЬ ПЕРВЫЕ 1
	                  |	Ссылка КАК Контрагент
	                  |ИЗ
	                  |	Справочник.Контрагенты
	                  |ГДЕ
	                  |	Партнер = &Партнер";
					  
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Контрагент, Неопределено);
	
КонецФункции // ПолучитьКонтагентаПоПартнеру()

// Получает ссылку на договор из навигационной ссылки
//
// Параметры:
// НавигационнаяСсылка - Строка - Навигационная ссылка на основной договор партнера.
//
// Возвращаемое значение:
// СправочникСсылка.ДоговорыКонтрагентов - если ссылка успешно получена, Неопределено - если не удалось получить ссылку.
//
Функция ПолучитьДоговорПоНавигационнойСсылке(НавигационнаяСсылка)

	УИД 			= ПолучитьУИДпоНавигационнойСсылке(НавигационнаяСсылка);
	СсылкаНаДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(УИД);
	
	Если ПустаяСтрока(СсылкаНаДоговор.ВерсияДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СсылкаНаДоговор;

КонецФункции // ПолучитьДоговорПоНавигационнойСсылке()

// Получает сумму взаиморасчетов если валюта оплаты отличается от валюты взаиморасчетов в договре контрагента.
//
// Параметры:
// Сумма 				- Число 				  - Сумма которую принял водитель.
// ВалютаОплаты 		- СправочникСсылка.Валюты - Валюта в которой водитель принял оплату от партнера.
// ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером (из договора партнера).
//
// Возвращаемое значение:
// Число - Сумма оплаты в валюте взаиморасчетов.
//
Функция ПолучитьСуммуВзаиморасчетов(Сумма, ВалютаОплаты, ВалютаВзаиморасчетов)

	тмпВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	ВалютаUSD				= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("a56702e0-3ffc-11e0-9f98-001517115d85")); // USD 840
	ВалютаПартнеры			= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")); // USD 841
	
	Если тмпВалютаВзаиморасчетов = ВалютаUSD Тогда
		тмпВалютаВзаиморасчетов = ВалютаПартнеры;
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = "
					  |ВЫБРАТЬ
					  |	СУММА(ВложенныйЗапрос.КурсОплаты)/СУММА(ВложенныйЗапрос.КурсВзаиморасчетов) КАК Курс
					  |ИЗ
					  |	(ВЫБРАТЬ
	                  |		Курс/Кратность 	КАК КурсОплаты,
					  | 	0 				КАК КурсВзаиморасчетов
	                  |	ИЗ
	                  |		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаОплаты)
	                  |
					  |ОБЪЕДИНИТЬ ВСЕ
					  |
	                  |	ВЫБРАТЬ
					  | 	0
	                  |		Курс/Кратность
	                  |	ИЗ
	                  |		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаВзаиморасчетов)) КАК ВложенныйЗапрос";
					  
	Запрос.УстановитьПараметр("ВалютаОплаты", ВалютаОплаты);				  
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", тмпВалютаВзаиморасчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Сумма * Выборка.Курс;
	
КонецФункции // ПолучитьСуммуВзаиморасчетов()
 


// Процедуры и функции для записи в служебные регистры РУЛЯ

// Записывает фактические оплаты водителя в регистр сведений КТС_ОплатыПринятыеВодителями
// 
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать запись в регистр.
//
// Возвращаемое значение:
// Булево - Истина, если набор записей успешно записан.
//
Функция ЗаписатьФактическиеОплатыВодителя(ДанныеЗаполнения)

	НаборЗаписей = РегистрыСведений.КТС_ОплатыПринятыеВодителями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеЗаполнения.Период);
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеЗаполнения.ДокументПоездки);
	НаборЗаписей.Отбор.Партнер.Установить(ДанныеЗаполнения.Партнер);
	НаборЗаписей.Отбор.Валюта.Установить(ДанныеЗаполнения.Валюта);
	
	Запись 						= НаборЗаписей.Добавить();
	Запись.Период   			= ДанныеЗаполнения.Период;
	Запись.ДокументПоездки   	= ДанныеЗаполнения.ДокументПоездки;
	Запись.Партнер   			= ДанныеЗаполнения.Партнер;
	Запись.Валюта   			= ДанныеЗаполнения.Валюта;
	Запись.СуммаПринято   		= ДанныеЗаполнения.СуммаПринято;
	Запись.СуммаОформлено   	= ДанныеЗаполнения.Сумма;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Не удалось выполнить запись в регистр КТС_ОплатыПринятыеВодителями'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось выполнить запись в регистр КТС_ОплатыПринятыеВодителями.
							  |Документ поездки: %2.
							  |Валюта %3.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ТелоПисьма, 
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер),
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.ДокументПоездки),
														ДанныеЗаполнения.Валюта);
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьФактическиеОплатыВодителя()
 




// Общие служебные процедуры и функции


// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое создание ПКО по оплатам водителя.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
	ОповеститьОтделТехническойПоддержки(Ссылка, ОписаниеОшибки);
		
КонецПроцедуры

// Получает GIUD объекта по навигационной ссылке
//
// Параметры:
// стрНавигационнаяССылка - Строка - Навигационная ссылка на объект информационной базы.
//
// Возвращаемое значение:
// УникальныйИдентификатор - если функция выполнена успешно, Неопределено - если преоб разование не удалось.
//
Функция ПолучитьУИДпоНавигационнойСсылке(стрНавигационнаяССылка)
	Результат=Неопределено;
	ПозицияНачалаНавССылки=Найти(стрНавигационнаяССылка,"?ref=");
	Если ПозицияНачалаНавССылки<>0 тогда       УидНавССылки=Сред(стрНавигационнаяССылка,ПозицияНачалаНавССылки+5,32);
		УидСтрока=Прав(УидНавССылки,8)+"-"+Сред(УидНавССылки,21,4)+"-"+Сред(УидНавССылки,17,4)+"-"+Лев(УидНавССылки,4)+"-"+Сред(УидНавССылки,5,12);
		УИД=Новый УникальныйИдентификатор(УидСтрока);
		Результат=УИД;
	КонецЕсли;
	Возврат(Результат);
КонецФункции

// Отправляет сообщение на 777 о проблеме
//
// Параметры:
// ТемаПисьма   	- Строка 		- Тема письма в техническую поддрежку.
// ТекстПисьма  	- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры
 
 