
#Область ПрограмныйИнтерфейс

Процедура СоздатьПКОПоОплатамВодителей() Экспорт
					
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаОплатыВодителей();
	Запрос.УстановитьПараметр("ОрганизацияПоУмолчанию", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85"))); // Организация Поставка)
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаВыгрузки Из Выгрузка Цикл
		НачатьТранзакцию();
				
			РезультатЗаписи = СоздатьДокументПКО(СтрокаВыгрузки);
			Если Не РезультатЗаписи Тогда
				ОтменитьТранзакцию();
			    Продолжить;					
			КонецЕсли; 
			
			РезультатЗаписи = ЗаписатьФактическиеОплатыВодителя(СтрокаВыгрузки);
			Если Не РезультатЗаписи Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
		ЗафиксироватьТранзакцию();
				
	КонецЦикла;
				
КонецПроцедуры

#КонецОбласти 
 
#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросов

Функция ПолучитьТекстЗапросаОплатыВодителей()

	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
	   	|ВЫБРАТЬ
       	|	ПринятыеОплаты.Период											КАК Период,
       	|	ПринятыеОплаты.ДокументПоездки									КАК ДокументПоездки,
	   	|	ПринятыеОплаты.ДокументПоездки.Водитель							КАК Кассир,
       	|	ПринятыеОплаты.Партнер											КАК Партнер,
		|	ПринятыеОплаты.ЗаказКлиента                                     КАК ЗаказКлиента,
		|	ВЫБОР
		|		КОГДА ПринятыеОплаты.ЗаказКлиента = Неопределено
		|		ТОГДА &ОрганизацияПоУмолчанию
		|		ИНАЧЕ ПринятыеОплаты.ЗаказКлиента.Организация
		|	КОНЕЦ															КАК Организация,
       	|	ПринятыеОплаты.Валюта											КАК Валюта,
	   	|	ПринятыеОплаты.СуммаПринято										КАК СуммаПринято,
       	|	ПринятыеОплаты.СуммаПринято	- ПринятыеОплаты.СуммаОформлено		КАК Сумма,
		|	ПринятыеОплаты.BalanceCode      								КАК BalanceCode,
		|
		|	ПоездкаЗаМаршрутомФинансы.СуммаУчета					КАК СуммаУчета,
		|	ПоездкаЗаМаршрутомФинансы.Валюта						КАК ВалютаФинансы,
		|	ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем		КАК СуммаПолученнаяВодителем,
		|	ПоездкаЗаМаршрутомФинансы.СуммаПоФакту					КАК СуммаПоФакту,
		|	ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером	КАК СуммаНазначеннаяМенеджером,
       	|	СоответствиеКасс.Касса              							КАК Касса
	   	//|ПОМЕСТИТЬ ТаблицаНеобходимыхОплат
       	|ИЗ
       	|	РегистрСведений.КТС_ОплатыПринятыеВодителями КАК ПринятыеОплаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ПО	ПоездкаЗаМаршрутомФинансы.ДокументПоездки = ПринятыеОплаты.ДокументПоездки
		|И	ПоездкаЗаМаршрутомФинансы.Партнер         = ПринятыеОплаты.Партнер
		|И	ПоездкаЗаМаршрутомФинансы.ЗаказКлиента    = ПринятыеОплаты.ЗаказКлиента
	   	|
       	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиСоответствийВодительКасса КАК СоответствиеКасс
       	|ПО СоответствиеКасс.Пользователь 	= ПринятыеОплаты.ДокументПоездки.Водитель 
       	|И 	СоответствиеКасс.Валюта		  	= ПринятыеОплаты.Валюта 		 
		|И	СоответствиеКасс.Касса.Владелец = 	ВЫБОР
		|											КОГДА ПринятыеОплаты.ЗаказКлиента = Неопределено
		|											ТОГДА &ОрганизацияПоУмолчанию
		|											ИНАЧЕ ПринятыеОплаты.ЗаказКлиента.Организация
		|										КОНЕЦ	   	
		|
       	|ГДЕ
	   	|	ПринятыеОплаты.ДокументПоездки.СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
       	|И 	ПринятыеОплаты.СуммаПринято > ПринятыеОплаты.СуммаОформлено
		|
	   	|";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОплатыВодителей()

// Получаем данные для платежа розничного клиента
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаДляРасшифрокиПлатежаПартнера()
ТекстЗапроса = "ВЫБРАТЬ
               |	Аналитика.Партнер КАК Партнер,
               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК Заказ,
               |	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
               |	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
               |ИЗ
               |	РегистрНакопления.РасчетыСКлиентами.Остатки(, Валюта = &РеглВалюта) КАК РасчетыСКлиентамиОстатки
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
               |		ПО РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
               |ГДЕ
               |	Аналитика.Контрагент = &Контрагент
               |	И Аналитика.Организация = &Организация
               |	И РасчетыСКлиентамиОстатки.СуммаОстаток > 0";
Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДляРасшифрокиПлатежаПартнера()
 
#КонецОбласти  

#Область ПроцедурыИФункцииДляСозданияДокументаПКО

// Создает документ ПКО на основании данных по оплатам водителя.
//
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать ПКО.
//
// Возвращаемое значение:
// Булево - Истина, если документ успешно создан.
//
Функция СоздатьДокументПКО(ДанныеЗаполнения)
	
	ТелоПисьма = "";
	Контрагент = ПолучитьКонтагентаПоПартнеру(ДанныеЗаполнения.Партнер, ТелоПисьма);
	Если Контрагент = Неопределено Тогда
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка получения контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
	    Возврат Ложь;
	КонецЕсли;
	
	ДокументОрдер 									= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументОрдер.Дата  							= ТекущаяДата();
	ДокументОрдер.Организация 						= ДанныеЗаполнения.Организация;
	ДокументОрдер.Касса								= ДанныеЗаполнения.Касса;
	ДокументОрдер.СуммаДокумента 					= ДанныеЗаполнения.Сумма;
	ДокументОрдер.ХозяйственнаяОперация 			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Контрагент						= Контрагент;
	ДокументОрдер.Валюта							= ДанныеЗаполнения.Валюта;
	ДокументОрдер.Кассир							= ДанныеЗаполнения.Кассир;
	ДокументОрдер.СтатьяДвиженияДенежныхСредств     = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДокументОрдер.Комментарий						= НСтр("ru='Автоматически созданный документ через Android.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	РасшифровкаПлатежа = ДокументОрдер.РасшифровкаПлатежа;
	НоваяСтрока 	   = РасшифровкаПлатежа.Добавить();
	
	НоваяСтрока.Партнер 				= ДанныеЗаполнения.Партнер;
	НоваяСтрока.ОснованиеПлатежа        = ДанныеЗаполнения.ЗаказКлиента;
	НоваяСтрока.Заказ					= ДанныеЗаполнения.ЗаказКлиента;
	НоваяСтрока.Сумма					= ДанныеЗаполнения.Сумма;
	НоваяСтрока.ВалютаВзаиморасчетов	= ДанныеЗаполнения.ВалютаФинансы;
	
	Если ДанныеЗаполнения.Валюта = ДанныеЗаполнения.ВалютаФинансы Тогда
		НоваяСтрока.СуммаВзаиморасчетов = ДанныеЗаполнения.Сумма;
	Иначе
		НоваяСтрока.СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетов(ДанныеЗаполнения.Сумма, ДанныеЗаполнения.Валюта, ДанныеЗаполнения.ВалютаФинансы);
	КонецЕсли;
	
	РезультатЗаписи = ЗаписатьФактическиеОплатыДокументПоездки(ДанныеЗаполнения, НоваяСтрока.СуммаВзаиморасчетов);
	Если Не РезультатЗаписи Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Ошибка проведения ПКО по партнеру'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Не удалось провести ПКО по партнеру %1.", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТелоПисьма, ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Получет ссылку на контрагента.
// 
// Параметры:
// Партнер - СправочникСсылка.Партнер - Ссылка на элемент справочника Партнеры, на основании которой необходимо
//										получить ссылку на элемент справочника Контрагенты.
//
// Возвращаемое значение:
// СправочникСсылка.Контрагенты - Если функция выполнена успешно, Неопределено - если контрагент не найден.
//
Функция ПолучитьКонтагентаПоПартнеру(Партнер, СообщениеОбОшибке)

	Запрос	 		= Новый Запрос;
	Запрос.Текст	= ТекстЗапросаПолучнияКонтрагента();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	// Свойство ЭтоОсновнойКонтрагент
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("d3231b97-58d9-11e3-9318-001e673c80fc")));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезЗапросаКонтрагент	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1];
	РезЗапросаОснКонтрагент = РезультатыЗапроса[РезультатыЗапроса.ВГраница()];
	
	ВыборкаКонтрагент		= РезЗапросаКонтрагент.Выбрать();
	ВыборкаОснКонрагент		= РезЗапросаОснКонтрагент.Выбрать();
	
	// У партнера нету контрагентов
	Если РезЗапросаКонтрагент.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='У партнера %1 не установлен контрагент'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Неопределено;
	КонецЕсли;
	
	// Если у партнера один контрагент создаем ПКО на него (А. Харечко)
	Если ВыборкаКонтрагент.Количество() = 1 Тогда
		ВыборкаКонтрагент.Следующий();
		Возврат ВыборкаКонтрагент.Контрагент;
	КонецЕсли;
	
	Если РезЗапросаОснКонтрагент.Пустой() Тогда
		СообщениеОбОшибке = НСтр("ru='У партнера %1 нету основных контрагентов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВыборкаОснКонрагент.Количество() = 1 Тогда
		ВыборкаОснКонрагент.Следующий();
		Возврат ВыборкаОснКонрагент.Контрагент;
	Иначе
		СообщениеОбОшибке = НСтр("ru='У партнера %1 установлено несколько основных контрагентов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеОбОшибке = НСтр("ru='Произошла неизвестная ошибка.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Возврат Неопределено;
	
КонецФункции // ПолучитьКонтагентаПоПартнеру()

Функция ТекстЗапросаПолучнияКонтрагента()

	ТекстЗапроса = "
				   // Выбор всех контрагентов партнера без пометки удаления
				   |ВЫБРАТЬ
	               |	Ссылка КАК Контрагент
	               |ПОМЕСТИТЬ ТаблицаКонтаргентов
	               |ИЗ
	               |	Справочник.Контрагенты
	               |ГДЕ
	               |	Партнер = &Партнер
	               |	И ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               ////////////////////////////////////////////////////////////////////////////////
				   // Выбор всех основных контрагентов партнера
	               |ВЫБРАТЬ
	               |	ТаблицаКонтаргентов.Контрагент КАК Контрагент
	               |ПОМЕСТИТЬ ОсновныеКонтрагенты
	               |ИЗ
	               |	ТаблицаКонтаргентов КАК ТаблицаКонтаргентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО (ТаблицаКонтаргентов.Контрагент = (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Контрагенты)))
	               |			И (ДополнительныеСведения.Свойство = &Свойство)
	               |;
	               |
	               ////////////////////////////////////////////////////////////////////////////////
				   // Получаем контрагента (нужно только для того если он один).
	               |ВЫБРАТЬ
	               |	Контрагент КАК Контрагент
	               |ИЗ
	               |	ТаблицаКонтаргентов
	               |;
	               |
	               ////////////////////////////////////////////////////////////////////////////////
				   // Получаем контрагента (нужно если основной контрагент один).
	               |ВЫБРАТЬ
	               |	Контрагент КАК Контрагент
	               |ИЗ
	               |	ОсновныеКонтрагенты";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПолучнияКонтрагента()
 
// Получает сумму взаиморасчетов если валюта оплаты отличается от валюты взаиморасчетов в договре контрагента.
//
// Параметры:
// Сумма 				- Число 				  - Сумма которую принял водитель.
// ВалютаОплаты 		- СправочникСсылка.Валюты - Валюта в которой водитель принял оплату от партнера.
// ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером (из договора партнера).
//
// Возвращаемое значение:
// Число - Сумма оплаты в валюте взаиморасчетов.
//
Функция ПолучитьСуммуВзаиморасчетов(Сумма, ВалютаОплаты, ВалютаВзаиморасчетов)
	
	ВалютаUSD = Константы.ВалютаУправленческогоУчета.Получить(); 
	ВалютаUAH = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаUAHUSD = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")); // USD 841
	ВалютаUSDUAH = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("0f57b44a-b077-11e4-80ea-001e676b0175")); // USD 844
	
	Запрос = Новый Запрос;
	Если 		ВалютаОплаты = ВалютаUSD И ВалютаВзаиморасчетов = ВалютаUAH Тогда
		Запрос.УстановитьПараметр("ВалютаОплаты", ВалютаUSDUAH);				  
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	ИначеЕсли  	ВалютаОплаты = ВалютаUAH И ВалютаВзаиморасчетов = ВалютаUSD Тогда
		Запрос.УстановитьПараметр("ВалютаОплаты", ВалютаUAH);				  
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаUAHUSD);
	КонецЕсли;
	
	Запрос.Текст = "
					  |ВЫБРАТЬ
					  |	СУММА(ВложенныйЗапрос.КурсОплаты)/СУММА(ВложенныйЗапрос.КурсВзаиморасчетов) КАК Курс
					  |ИЗ
					  |	(ВЫБРАТЬ
	                  |		Курс/Кратность 	КАК КурсОплаты,
					  | 	0 				КАК КурсВзаиморасчетов
	                  |	ИЗ
	                  |		РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаОплаты)
	                  |
					  |ОБЪЕДИНИТЬ ВСЕ
					  |
	                  |	ВЫБРАТЬ
					  | 	0,
	                  |		Курс/Кратность
	                  |	ИЗ
	                  |		РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &ВалютаВзаиморасчетов)) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Сумма * Выборка.Курс;
	
КонецФункции // ПолучитьСуммуВзаиморасчетов()

// Получает список не оплатченных документов клиента
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнер - Ссылка на элемент справочника Партнеры, на основании которой необходимо
//										получить ссылку на элемент справочника Контрагенты.
//
// Возвращаемое значение:
// ВыборкаРезультатаЗапроса - данные на основании которых нужно для расшифровки платежма.
//
Функция ПолучитьДанныеДляРасшифровкиПлатежа(СтруктураДанных)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляРасшифрокиПлатежаПартнера();
	Запрос.УстановитьПараметр("Контрагент",	СтруктураДанных.Контрагент);
	Запрос.УстановитьПараметр("Организация",СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("РеглВалюта", СтруктураДанных.РеглВалюта);


	РезультатЗапроса =  Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 
	
	Возврат РезультатЗапроса.Выгрузить();	
КонецФункции // ПолучитьДанныеДляРасшифровкиПлатежа()

#КонецОбласти 

#Область ПроцедурыИФункцииДляЗаписиВСлужебныеРегистрыРуля
// Записывает фактические оплаты водителя в регистр сведений КТС_ОплатыПринятыеВодителями
// 
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать запись в регистр.
//
// Возвращаемое значение:
// Булево - Истина, если набор записей успешно записан.
//
Функция ЗаписатьФактическиеОплатыВодителя(ДанныеЗаполнения)

	НаборЗаписей = РегистрыСведений.КТС_ОплатыПринятыеВодителями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеЗаполнения.Период);
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеЗаполнения.ДокументПоездки);
	НаборЗаписей.Отбор.Партнер.Установить(ДанныеЗаполнения.Партнер);
	НаборЗаписей.Отбор.ЗаказКлиента.Установить(ДанныеЗаполнения.ЗаказКлиента);
	НаборЗаписей.Отбор.Валюта.Установить(ДанныеЗаполнения.Валюта);
	
	Запись 						= НаборЗаписей.Добавить();
	Запись.Период   			= ДанныеЗаполнения.Период;
	Запись.ДокументПоездки   	= ДанныеЗаполнения.ДокументПоездки;
	Запись.Партнер   			= ДанныеЗаполнения.Партнер;
	Запись.ЗаказКлиента   		= ДанныеЗаполнения.ЗаказКлиента;
	Запись.Валюта   			= ДанныеЗаполнения.Валюта;
	Запись.СуммаПринято   		= ДанныеЗаполнения.СуммаПринято;
	Запись.СуммаОформлено   	= ДанныеЗаполнения.Сумма;
	Запись.BalanceCode   		= ДанныеЗаполнения.BalanceCode;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТемаПисьма = НСтр("ru='[РУЛЬ] Не удалось выполнить запись в регистр КТС_ОплатыПринятыеВодителями'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось выполнить запись в регистр КТС_ОплатыПринятыеВодителями.
							  |Документ поездки: %2.
							  |Валюта %3.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ТелоПисьма, 
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер),
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.ДокументПоездки),
														ДанныеЗаполнения.Валюта);
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьФактическиеОплатыВодителя()

// Записывает фактические оплаты в документ поезки
// 
// Параметры:
// ДанныеЗаполнения - ВыборкаРезультатаЗапроса - данные на основании которых нужно создать запись в регистр.
//
// Возвращаемое значение:
// Булево - Истина, если набор записей успешно записан.
//
Функция ЗаписатьФактическиеОплатыДокументПоездки(ДанныеЗаполнения, СуммаПоФакту)
	
	НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутомФинансы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПоездки.Установить(ДанныеЗаполнения.ДокументПоездки);
	НаборЗаписей.Отбор.Партнер.Установить(ДанныеЗаполнения.Партнер);
	НаборЗаписей.Отбор.ЗаказКлиента.Установить(ДанныеЗаполнения.ЗаказКлиента);
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл 
		Запись.СуммаПоФакту = Запись.СуммаПоФакту + СуммаПоФакту;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();	    			
	Исключение
	    ТемаПисьма = НСтр("ru='[РУЛЬ] Не удалось выполнить запись в регистр ПоездкаЗаМаршрутомФинансы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = НСтр("ru='Для партнера %1 не удалось выполнить запись в регистр ПоездкаЗаМаршрутомФинансы.
							  |Документ поездки: %2.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТелоПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ТелоПисьма, 
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.Партнер),
														ПолучитьНавигационнуюСсылку(ДанныеЗаполнения.ДокументПоездки));
		ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТелоПисьма);
		ЗафиксироватьСобытиеВЖурналеРегистрации(ТелоПисьма, ДанныеЗаполнения.Партнер, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьФактическиеОплатыДокументПоезки()
 
	
#КонецОбласти 

#Область ОбщиеСлужебныеПроцедурыИФункции


// Запись сообщения в журнал регистрации
// 
// Параметры:
// ОписаниеОшибки 			 - Строка 						- Описание ошибки, которая возникла.
// Ссылка					 - Произвольный 				- Любая ссылка на объект информационной базы.
// УровеньЖурналаРегистрации - УровеньЖурналаРегистрации    - Уровень журнала регистрации.
//
Процедура ЗафиксироватьСобытиеВЖурналеРегистрации(ОписаниеОшибки, Ссылка, УровеньЖурналаРегистрации)

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое создание ПКО по оплатам водителя.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации, 
		,
		Ссылка,
		ОписаниеОшибки);	
		
КонецПроцедуры

// Получает GIUD объекта по навигационной ссылке
//
// Параметры:
// стрНавигационнаяССылка - Строка - Навигационная ссылка на объект информационной базы.
//
// Возвращаемое значение:
// УникальныйИдентификатор - если функция выполнена успешно, Неопределено - если преоб разование не удалось.
//
Функция ПолучитьУИДпоНавигационнойСсылке(стрНавигационнаяССылка)
	Результат=Неопределено;
	ПозицияНачалаНавССылки=Найти(стрНавигационнаяССылка,"?ref=");
	Если ПозицияНачалаНавССылки<>0 тогда       УидНавССылки=Сред(стрНавигационнаяССылка,ПозицияНачалаНавССылки+5,32);
		УидСтрока=Прав(УидНавССылки,8)+"-"+Сред(УидНавССылки,21,4)+"-"+Сред(УидНавССылки,17,4)+"-"+Лев(УидНавССылки,4)+"-"+Сред(УидНавССылки,5,12);
		УИД=Новый УникальныйИдентификатор(УидСтрока);
		Результат=УИД;
	КонецЕсли;
	Возврат(Результат);
КонецФункции

// Отправляет сообщение на 777 о проблеме
//
// Параметры:
// ТемаПисьма   	- Строка 		- Тема письма в техническую поддрежку.
// ТекстПисьма  	- Строка 		- Тело письма в техническую поддрежку.
//
Процедура ОповеститьОтделТехническойПоддержки(ТемаПисьма, ТекстПисьма)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СведенияОВнешнейКомпоненте

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "2.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рег. обработка оплат водителей");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рег. обработка оплат водителей [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Рег. обработка оплат водителей [" + Версия + "]", "СоздатьПКОПоОплатамВодителей();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти 
