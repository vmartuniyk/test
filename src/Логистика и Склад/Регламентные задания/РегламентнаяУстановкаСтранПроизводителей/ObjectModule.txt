
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ЗагрузитьНастройкиРегламетногоЗадания() Экспорт
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("НастройкиРегламетноеЧтениеШтрихКодов", 
												, 
												, 
												"НастройкиРегламетноеЧтениеШтрихКодов");
												
	Возврат Настройки;
	
КонецФункции



Процедура ВыполнитьУстановкуСтранПроизводителей() Экспорт

	ЗаписьЖурналаРегистрации(НСтр("ru='Запуск регламентного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Информация,
									,
									,
									НСтр("ru='Успешный запуск регламентного задания.'"));
									
	Настройки = ЗагрузитьНастройкиРегламетногоЗадания();
	Отказ 	  = ПроверитьЗаполнениеНастроек(Настройки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Свойство  		= Настройки.ДополнительныеСвойство;
	ТаблицаНастроек = Настройки.ТаблицаНастроек.Получить();
	
	Если ТаблицаНастроек.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Не заполнена настройка «ТаблицаНастроек» регламетного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Необходимо заполнить настройку в форме настроек.'"));
		Возврат;
	КонецЕсли;
	
	ТаблицаШтрихКодов = ПолучитьТаблицуШтрихКодовДляОбработки(Свойство);
	
	// Оставляем только штрих коды с правильными контрольными суммами
	ПроверитьКонтрольныеСуммыШтрихКодов(ТаблицаШтрихКодов);
	
	ЗаполнитьДополнительныеСведения(ТаблицаШтрихКодов, ТаблицаНастроек, Свойство);
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Завершение регламентного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Информация,
									,
									,
									НСтр("ru='Успешное завершение регламентного задания.'"));

КонецПроцедуры
 



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверитьЗаполнениеНастроек(Настройки)
	
	Если Не ТипЗнч(Настройки) = Тип("Структура") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Не найдено настроек регламетного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Необходимо задать настройки в форме настроек.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Не Настройки.Свойство("ДополнительныеСвойство") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Не найдена настройка «Свойство» регламетного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Необходимо задать настройку в форме настроек.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойство.Пустая() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Не установлена настройка «Свойство» регламетного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Необходимо задать настройку в форме настроек.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Не Настройки.Свойство("ТаблицаНастроек") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Не найдена настройка «ТаблицаНастроек» регламетного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Необходимо задать настройку в форме настроек.'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Не ТипЗнч(Настройки.ТаблицаНастроек) = Тип("ХранилищеЗначения") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Не найдена настройка «ТаблицаНастроек» регламетного задания установки стран производителей.'"),
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									НСтр("ru='Необходимо задать настройку в форме настроек.'"));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ПроверитьЗаполнениеНастроек()
 
 
Функция ПолучитьТаблицуШтрихКодовДляОбработки(Свойство)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТаблицыШтрихКодов();
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуШтрихКодовДляобработки()

Функция ПолучитьТекстЗапросаТаблицыШтрихКодов()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Объект КАК Справочник.Номенклатура) КАК Номенклатура
	               |ПОМЕСТИТЬ ТаблицаИсключений
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения 
	               |ГДЕ
	               |	Свойство = &Свойство
	               |	И Значение <> ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Штрихкод КАК Штрихкод,
	               |	Номенклатура КАК Номенклатура,
				   |	ЛОЖЬ КАК ОбновлятьСведения
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	Номенклатура НЕ В
	               |				(ВЫБРАТЬ
	               |					Номенклатура
	               |				ИЗ
	               |					ТаблицаИсключений)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаТаблицыШтрихКодов()


Процедура ПроверитьКонтрольныеСуммыШтрихКодов(ТаблицаШтрихКодов)

	Для каждого СтрокаТаблицы Из ТаблицаШтрихКодов Цикл
		МассивЧиселШтрихКода = РазобратьСтрокуВМассивЧисел(СтрокаТаблицы.Штрихкод);
		// Если количество чисел меньше 13 то пропускаем
		Если Не МассивЧиселШтрихКода.Количество() = 13 Тогда
			Продолжить;
		КонецЕсли;
		// Проверяем контрольную сумму
		Если ПроверитьКонтрольнуюСумму(МассивЧиселШтрихКода) Тогда
			СтрокаТаблицы.ОбновлятьСведения = Истина;
		КонецЕсли;
	КонецЦикла; 	

КонецПроцедуры
 
Функция РазобратьСтрокуВМассивЧисел(Строка)

	БиблиотекаОбработок = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
	МассивЧисел			= Новый Массив;
	
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Индекс, 1);
		Если БиблиотекаОбработок.ЭтоЦифра(Символ) Тогда
			МассивЧисел.Добавить(Число(Символ));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧисел;

КонецФункции // РазобратьСтрокуВМассивЧисел()
 
Функция ПроверитьКонтрольнуюСумму(МассивЧиселШтрихКода)

	КотрольноеЧисло = МассивЧиселШтрихКода[12];
	
	// Для вычисления штрихкода сначало нужно просуммировать цифры стоящие на парных местах
	// и не партных местах
	СуммаПарных 	= 0;
	СуммаНеПарных   = 0;
	
	Для Индекс = 1 По 12 Цикл
		Если (Индекс % 2) = 0 Тогда
			СуммаПарных = СуммаПарных + МассивЧиселШтрихКода[Индекс-1];
		Иначе
			СуммаНеПарных = СуммаНеПарных + МассивЧиселШтрихКода[Индекс-1];
		КонецЕсли;
	КонецЦикла;
	
	// Сумму парных чисел нужно умножыть на 3
	СуммаПарных = СуммаПарных * 3;
	
	// Сложим полученные сумммы
	ВсяСумма = СуммаПарных + СуммаНеПарных;
	
	// От полученной суммы нужно убрать десятки
	
	БезДесятков = (Окр(ВсяСумма/10, 1) - Цел(ВсяСумма/10))*Pow(10,1);
	
	// ИЗ 10 вычесть число без десятков
	
	Результат = 10 - БезДесятков;
	
	Если КотрольноеЧисло = Результат Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // ВычислитьКонтрольнуюСумму()
 

Процедура ЗаполнитьДополнительныеСведения(ТаблицаШтрихКодов, ТаблицаНастроек, Свойство)

	ТаблицаТриЧисла = Новый ТаблицаЗначений;
	ТаблицаТриЧисла.Колонки.Добавить("Страна", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	ТаблицаТриЧисла.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДваЧисла = Новый ТаблицаЗначений;
	ТаблицаДваЧисла.Колонки.Добавить("Страна", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	ТаблицаДваЧисла.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		Если СтрДлина(СтрокаТаблицы.Код) = 3 Тогда
			НоваяСтрока = ТаблицаТриЧисла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Код = НоваяСтрока.Код + "%";
		КонецЕсли;
		Если СтрДлина(СтрокаТаблицы.Код) = 2 Тогда
			НоваяСтрока = ТаблицаДваЧисла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Код = НоваяСтрока.Код + "%";
		КонецЕсли;
	КонецЦикла; 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРезультат();
	
	Запрос.УстановитьПараметр("ТаблицаШтрихКодов", ТаблицаШтрихКодов);
	Запрос.УстановитьПараметр("ТаблицаТриЧисла", ТаблицаТриЧисла);
	Запрос.УстановитьПараметр("ТаблицаДваЧисла", ТаблицаДваЧисла);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДваЧисла = РезультатЗапроса[4].Выбрать();
	ВыборкаТриЧисла = РезультатЗапроса[5].Выбрать();
	
	Пока ВыборкаДваЧисла.Следующий() Цикл
		ВыполнитьЗаписьВРегистр(ВыборкаДваЧисла, Свойство);
	КонецЦикла;
	
	Пока ВыборкаТриЧисла.Следующий() Цикл
		ВыполнитьЗаписьВРегистр(ВыборкаТриЧисла, Свойство);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстЗапросаРезультат()
	
	ТекстЗапроса = "
				   |ВЫБРАТЬ
	               |	ТаблицаШтрихКодов.Штрихкод КАК Штрихкод,
	               |	ТаблицаШтрихКодов.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ КешШтрихкоды
	               |ИЗ
	               |	&ТаблицаШтрихКодов КАК ТаблицаШтрихКодов
	               |ГДЕ
	               |	ТаблицаШтрихКодов.ОбновлятьСведения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТриЧисла.Страна КАК Страна,
	               |	ТаблицаТриЧисла.Код КАК Код
	               |ПОМЕСТИТЬ КешТаблицаТриЧисла
	               |ИЗ
	               |	&ТаблицаТриЧисла КАК ТаблицаТриЧисла
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДваЧисла.Страна КАК Страна,
	               |	ТаблицаДваЧисла.Код КАК Код
	               |ПОМЕСТИТЬ КешТаблицаДваЧисла
	               |ИЗ
	               |	&ТаблицаДваЧисла КАК ТаблицаДваЧисла
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешШтрихкоды.Номенклатура КАК Номенклатура,
	               |	КешСтраны.Страна КАК Страна
				   |ПОМЕСТИТЬ КешНоменклатура
	               |ИЗ
	               |	КешШтрихкоды КАК КешШтрихкоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТаблицаТриЧисла КАК КешСтраны
	               |		ПО (КешШтрихкоды.Штрихкод ПОДОБНО КешСтраны.Код)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешШтрихкоды.Номенклатура КАК Номенклатура,
	               |	КешСтраны.Страна КАК Страна
	               |ИЗ
	               |	КешШтрихкоды КАК КешШтрихкоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешТаблицаДваЧисла КАК КешСтраны
	               |		ПО (КешШтрихкоды.Штрихкод ПОДОБНО КешСтраны.Код)
				   |		И КешШтрихкоды.Номенклатура НЕ В (ВЫБРАТЬ Номенклатура ИЗ КешНоменклатура)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура КАК Номенклатура,
	               |	Страна КАК Страна
	               |ИЗ
	               |	КешНоменклатура
				   |;";
	
	Возврат ТекстЗапроса;
	
КонецФункции


Процедура ВыполнитьЗаписьВРегистр(Выборка, Свойство)

	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Выборка.Номенклатура);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект = Выборка.Номенклатура;
	Запись.Свойство = Свойство;
	Запись.Значение = Выборка.Страна;
	
    НаборЗаписей.Записать();
	
КонецПроцедуры
 



// Сваедения о внешней компоненте

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.001";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. установка стран производителей [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. установка стран производителей [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. установка стран производителей [" + Версия + "]", "ВыполнитьУстановкуСтранПроизводителей();", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Настройки регламетного задания установки стран производителей [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "НРЗУСП");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

