
#Область ПрограммныйИнтерфейс

// Хуйня без коментариев
// TODO: нормально оформить.

Процедура ЗаписатьКТС_ГеографическиеРасположенияПартнеров(Владелец, АдресДоставки, ПеренаправлениеОпределено = Ложь)  Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Если ТипЗнч(АдресДоставки) = Тип("СправочникСсылка.Склады") Тогда
			АдресДоставки = АдресДоставки.Наименование;	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Владелец,
			|	ГородСклад		
			|ИЗ
			|	Справочник.КТС_ГеографическиеРасположенияПартнеров
			|ГДЕ
			|	Владелец 	= &Владелец
			|И	ГородСклад	= &ГородСклад
			|";
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("ГородСклад", АдресДоставки);
	    Если Запрос.Выполнить().Пустой() Тогда		
			НовыйОбъект = Справочники.КТС_ГеографическиеРасположенияПартнеров.СоздатьЭлемент();
			НовыйОбъект.Владелец 	= Владелец;
			НовыйОбъект.ГородСклад 	= АдресДоставки;
			НовыйОбъект.УстановитьНовыйКод();
			Попытка
				НовыйОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Справочники.МестаДоставки.ЗаписатьКТС_ГеографическиеРасположенияПартнеров(Владелец, АдресДоставки, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			ВнешнийОбъект.ЗаписатьКТС_ГеографическиеРасположенияПартнеров(Владелец, АдресДоставки, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ИнформацияОМесте(Место, ТабДокумент, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Макет 		  = ПолучитьМакет("МестоИнформация");
		ОбластиМакета = РазбитьМакетНаОбласти(Макет, Ложь);
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросИнформацияПоМесту();
		
		Запрос.УстановитьПараметр("Место", Место);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаЗаголовок = РезультатыЗапроса[1].Выбрать();
		ВыборкаДокументы = РезультатыЗапроса[3].Выбрать();
		ВыборкаИстория	 = РезультатыЗапроса[5].Выбрать();
		ВыборкаТовар	 = РезультатыЗапроса[6].Выбрать();
		
		Пока ВыборкаЗаголовок.Следующий() Цикл
			ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИнформация"]);
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Место", ,         Формат(Число(ВыборкаЗаголовок.Код), "ЧРГ=''; ЧГ=0")));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Ответственный", , ВыборкаЗаголовок.Ответственный));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Отправитель", ,   ВыборкаЗаголовок.Отправитель));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Получатель", , 	  ВыборкаЗаголовок.Получатель));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Транзит", , 	  ВыборкаЗаголовок.Транзит));
		КонецЦикла; 
		
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);	
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокДокументы"]);
		
		Пока ВыборкаДокументы.Следующий() Цикл
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "ПредставлениеДокумента", "Документ", ВыборкаДокументы.ПредставлениеДокумента, ВыборкаДокументы.Документ));
		КонецЦикла;
		
		Если ВыборкаТовар.Количество()>0 Тогда
			ТабДокумент.Вывести(ОбластиМакета["ЗаголовокТаблицыТоворов"]);
			ТабДокумент.Вывести(ОбластиМакета["ШапкаТаблициТовары"]);
			
			Пока ВыборкаТовар.Следующий()  Цикл
				ОбластьМакетаТаблициТовары= ОбластиМакета.Получить("ТаблициТовары");
				ОбластьМакетаТаблициТовары.Параметры["Номенклатура"] = ВыборкаТовар.Номенклатура;
				ОбластьМакетаТаблициТовары.Параметры["Количество"] 	= ВыборкаТовар.Количество;
				ТабДокумент.Вывести(ОбластьМакетаТаблициТовары);
			КонецЦикла;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);	
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИстория"]);
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
		
		Пока ВыборкаИстория.Следующий() Цикл
			Комментарий	= ВыборкаИстория.Комментарий;
			Если ПустаяСтрока(Комментарий) = ЛОЖЬ Тогда
				СтатусМеста = НСтр("ru='%1 %3, %2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				СтатусМеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтатусМеста,
																				ВыборкаИстория.Статус,
																				Комментарий,
																				СтрЗаменить(СокрЛ(СтрЗаменить(ВыборкаИстория.НомерПоездки,"0"," "))," ","0"));
			Иначе
				СтатусМеста = ВыборкаИстория.Статус;
			КонецЕсли;

			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Период", , 			ВыборкаИстория.Период));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Склад", , 			ВыборкаИстория.Склад));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Статус", , 			СтатусМеста));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Маршрут", , 		ВыборкаИстория.Маршрут));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Пользователь", , 	ВыборкаИстория.Пользователь));
			ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
		КонецЦикла; 
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Справочники.МестаДоставки.ИнформацияОМесте(Место, ТабДокумент, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			ВнешнийОбъект.ИнформацияОМесте(Место, ТабДокумент, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнформацияОЗадаче(Задача, ТабДокумент, ПеренаправлениеОпределено = Ложь) Экспорт 
	
	Если ПеренаправлениеОпределено Тогда
	
		Макет 		  = ПолучитьМакет("ЗадачаИнформация");
		ОбластиМакета = РазбитьМакетНаОбласти(Макет, Истина);
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаИнформацияПоЗадаче();
		
		Запрос.УстановитьПараметр("Задача", Задача);
		Запрос.УстановитьПараметр("СтатусЗадачи", Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена);
		
		РезультатЗапроса  = Запрос.ВыполнитьПакет();
		ВыборкаИнформация = РезультатЗапроса[0].Выбрать();
		ВыборкаИстория	  = РезультатЗапроса[2].Выбрать();
		ВыборкаДокументы  = РезультатЗапроса[3].Выбрать();
		ВыборкаТовары	  = РезультатЗапроса[4].Выбрать();
		
		Пока ВыборкаИнформация.Следующий() Цикл
			ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИнформация"]);
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Задача", ,        Формат(Число(ВыборкаИнформация.Код), "ЧРГ=''; ЧГ=0")));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Ответственный", , ВыборкаИнформация.Ответственный));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Отправитель", ,   ВыборкаИнформация.Отправитель));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Получатель", , 	  ВыборкаИнформация.Получатель));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Транзит", , 	  ВыборкаИнформация.Транзит));
			ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
			ТабДокумент.Вывести(ОбластиМакета["ЗаголовокТекстЗадачи"]);
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "ТекстЗадачи", , 	  ВыборкаИнформация.ТекстЗадачи));			
		КонецЦикла; 
		
		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокДокументы"]);
		
		Пока ВыборкаДокументы.Следующий() Цикл
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "ПредставлениеДокумента", "Документ", ВыборкаДокументы.ПредставлениеДокумента, ВыборкаДокументы.Документ));
		КонецЦикла;
		
		Если ВыборкаТовары.Количество()>0 Тогда
			ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
			ТабДокумент.Вывести(ОбластиМакета["ЗаголовокТаблицыТоворов"]);
			ТабДокумент.Вывести(ОбластиМакета["ШапкаТаблициТовары"]);
			Пока ВыборкаТовары.Следующий()  Цикл
				ОбластьМакетаТаблициТовары	= ОбластиМакета.Получить("ТаблициТовары");
				ОбластьМакетаТаблициТовары.Параметры["Номенклатура"] 				= ВыборкаТовары.НоменклатураПредставление;
				ОбластьМакетаТаблициТовары.Параметры["НоменклатураРасшифровка"] 	= ВыборкаТовары.Номенклатура;
				ОбластьМакетаТаблициТовары.Параметры["Количество"] 					= ВыборкаТовары.Количество;
				ТабДокумент.Вывести(ОбластьМакетаТаблициТовары);
			КонецЦикла;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
		ТабДокумент.Вывести(ОбластиМакета["ЗаголовокИстория"]);
		
		Пока ВыборкаИстория.Следующий() Цикл
			
			ТабДокумент.Вывести(ОбластиМакета["Пробел"]);
			
			Комментарий	= ВыборкаИстория.Комментарий;
			Если ПустаяСтрока(Комментарий) = ЛОЖЬ Тогда
				СтатусМеста = НСтр("ru='%1 %3, %2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				СтатусМеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтатусМеста,
																				ВыборкаИстория.Статус,
																				Комментарий
																				,СтрЗаменить(СокрЛ(СтрЗаменить(ВыборкаИстория.НомерПоездки,"0"," "))," ","0"));
			Иначе
				СтатусМеста = ВыборкаИстория.Статус;
			КонецЕсли;

			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Период", , 	  		ВыборкаИстория.Период));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Маршрут", , 	 	ВыборкаИстория.Маршрут));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Статус", , 	  		СтатусМеста));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Пользователь", , 	ВыборкаИстория.Пользователь));
			ТабДокумент.Вывести(ОбработатьОбластьМакета(ОбластиМакета, "Отправитель", , 	ВыборкаИстория.Отправитель));
		КонецЦикла; 
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Справочники.МестаДоставки.ИнформацияОЗадаче(Задача, ТабДокумент, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			ВнешнийОбъект.ИнформацияОЗадаче(Задача, ТабДокумент, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




//Меняет статус задачи
//
// Параметры:
//  Задача  		- СправочникиСсылка.МестаДоставки - Задача, в котрой установливают статус
//  СтатусЗадачи  	- Перечисления.СтатусыОтгрузкиМест - статус задачи, который нудно установить
//  УстановитьБлокировку  	- Булево - Предназначен для явной блокировки данных от чтения или изменения другими сессиями.
//							* Истина - установить блоктровку, Ложь - не устанавливать блокировку
Процедура УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстановитьБлокировку = Ложь, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
	
	УстановитьПривилегированныйРежим(Истина);
	
		Если УстановитьБлокировку Тогда
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			Блокировка 		  		= Новый БлокировкаДанных;
			ЭлементБлокировки 		= Блокировка.Добавить("РегистрСведений.ЗадачиНаМаршрут");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Место", Задача);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаЗадачиСрезПоследних();					  
		Запрос.УстановитьПараметр("Задача", 				Задача);
		Запрос.УстановитьПараметр("СтатусЗадачи", 			СтатусЗадачи);
		Запрос.УстановитьПараметр("ТекущийПользователь", 	ПараметрыСеанса.ТекущийПользователь);
		Выборка = Запрос.Выполнить().Выбрать();
			
		Если Не Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить статус задачи'"));
			Возврат;
		КонецЕсли;
		
		ТекДата = ТекущаяДата();
		Если Выборка.ПериодЗадачи >= ТекДата Тогда
			Период = Выборка.ПериодЗадачи + 1;
		Иначе
			Период = ТекДата;
		КонецЕсли;
		
		
		Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена Тогда
			Если Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена
				ИЛИ Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаОтменена Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выполнять задачи разрешено только для задач из статусом «Поставлена» и «В процессе»'"));
					Если УстановитьБлокировку Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтатусЗадачи = Перечисления.СтатусыОтгрузкиМест.ЗадачаОтменена Тогда
			Если Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена
				ИЛИ Выборка.Статус = Перечисления.СтатусыОтгрузкиМест.ЗадачаОтменена Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отменять задачи разрешено только для задач из статусом «Поставлена» и «В процессе»'"));
					Если УстановитьБлокировку Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					Возврат;
			КонецЕсли;
		КонецЕсли;

		
		
		НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Место.Установить(Задача);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Период = Период;	
		
		НаборЗаписей.Записать();
		
		Если СтатусЗадачи 					= Перечисления.СтатусыОтгрузкиМест.ЗадачаОтменена 
		 ИЛИ СтатусЗадачи 					= Перечисления.СтатусыОтгрузкиМест.ЗадачаВыполнена Тогда
			МестоОбъект 		 			= Задача.ПолучитьОбъект();
			МестоОбъект.Архивный 			= Истина;
			МестоОбъект.Транзит  			= Ложь;
			МестоОбъект.ТранзитныйСклад  	= Справочники.Склады.ПустаяСсылка();
			МестоОбъект.Записать();
		КонецЕсли;
		
		Если УстановитьБлокировку Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Справочники.МестаДоставки.УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстановитьБлокировку, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			ВнешнийОбъект.УстановитьСтатусЗадачиНаСервере(Задача, СтатусЗадачи, УстановитьБлокировку, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСтатусЗадачиНаСервере()

//Печатает набор данных  места с QRКодом
//
// Параметры:
//  ТекущаяЗадача  		- СправочникиСсылка.МестаДоставки - Задачу  которую нужно напечатать
//
// Возвращаемое значение:
//	Массив	 - масив табличных документов для данные для печати
Функция ПечатьQRКода(ТекущаяЗадача, ПеренаправлениеОпределено = Ложь)  Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		ПараметрКоманды = Новый Массив;        
		ПараметрКоманды.Добавить(ТекущаяЗадача);        
	   	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	   
	   	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
	   
		Возврат ТабличныеДокументы;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПечатьQRКода(ТекущаяЗадача, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПечатьQRКода(ТекущаяЗадача, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции

//Выводит набор данных в табличный документ
//
// Параметры:
//  ТекущаяЗадача  		- СправочникиСсылка.МестаДоставки - Задачу, данные которые нужно расместить на предварительно просмотр
//
//  НазваничМакета  	- Строка - 							наименования макета для которого нужен просмотр 
//
// Возвращаемое значение:
//	ТабличныйДокумент - данные для предварительно просмотра
//
Функция ПредваритальнойПросмотр(ТекущаяЗадача, НазваничМакета, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
	
		ПараметрКоманды = Новый Массив;        
		ПараметрКоманды.Добавить(ТекущаяЗадача);        
		ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", НазваничМакета, Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
		
		ТабличныеДокументы = СформироватьКолекциюПечатныхФорм("Обработка 'Внешние печатные формы'", ПараметрыИсточника, Новый СписокЗначений);
		
		Для каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
			ТабДок = ТабличныйДокумент;
		КонецЦикла;
		Возврат ТабДок;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПредваритальнойПросмотр(ТекущаяЗадача, НазваничМакета, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПредваритальнойПросмотр(ТекущаяЗадача, НазваничМакета, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//Получаем адрес абонента без улици и  допольнительных данных
//
// Параметры:
//  Абонент  		- СправочникиСсылка.Партнер/СправочникиСсылка.Склад - партнер/склад, адрес котрого нужно получить
//
// Возвращаемое значение:
//	Строка - адрес партнера или склада//
Функция ПолучитьАдресАбонента(Абонент, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
	   	УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Абонент) = Тип("СправочникСсылка.Партнеры") Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Представление КАК Адрес
			               |ИЗ
			               |	Справочник.Партнеры.КонтактнаяИнформация
			               |ГДЕ
			               |	Ссылка = &Абонент
			               |	И Представление <> """"
			               |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Представление КАК Адрес
			               |ИЗ
			               |	Справочник.Склады.КонтактнаяИнформация
			               |ГДЕ
			               |	Ссылка = &Абонент
			               |	И Представление <> """"
			               |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";			   
		КонецЕсли;
					   
		Запрос.УстановитьПараметр("Абонент", Абонент);
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Адрес, "");
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПолучитьАдресАбонента(Абонент, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПолучитьАдресАбонента(Абонент, Истина);	
		КонецЕсли;
	КонецЕсли;
		
КонецФункции // ПолучитьАдресАбонента()

// Создать задачу на основания полученных данных ПараметрыМеста
// Параметры:
//  ПараметрыМеста  		- Структура - параметры данных, полученых для создания новой задачи
//
// Возвращаемое значение:
//	Структура - основные данные созданого места
Функция СоздатьЗадачу(ПараметрыМеста, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
	
		НачатьТранзакцию();
		
		НовоеМесто = Справочники.МестаДоставки.СоздатьЭлемент();
		Период	   = ПараметрыМеста.НачалоВыполненияЗадачи;
		
		ЗаполнитьЗначенияСвойств(НовоеМесто, ПараметрыМеста);
		НовоеМесто.Транзит		 					= ПараметрыМеста.Транзит;
		НовоеМесто.ЭтоЗадача	 					= Истина;
		НовоеМесто.Ответственный 					= ПараметрыСеанса.ТекущийПользователь;
		НовоеМесто.ТранзитныйСклад					= ПараметрыМеста.ТранзитныйСклад;
		
		Если ПараметрыМеста.КодУжеУпартнера Тогда
				НовоеМесто.ТипВозвратаТовара	 			= ПараметрыМеста.ТипВозвратаТовара;
				НовоеМесто.ПричинаВозврата 					= ПараметрыМеста.ПричинаВозврата;
				НовоеМесто.КонтактноеЛицо					= ПараметрыМеста.КонтактноеЛицо;
				НовоеМесто.НомерЗаявки						= ПараметрыМеста.НомерЗаявки;
				Товары		                                = НовоеМесто.Товары;
				Для каждого Строка Из ПараметрыМеста.Товары Цикл
					НоваяСтрока	   = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			        НоваяСтрока.КодСтроки = Новый УникальныйИдентификатор(); 
				КонецЦикла;
		КонецЕсли;
		НовоеМесто.УстановитьНовыйКод();
		Попытка
		    НовоеМесто.Записать();			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки; 
		
		НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Место.Установить(НовоеМесто.Ссылка);
		
		Запись 				  = НаборЗаписей.Добавить();
		Запись.Период		  = Период;
		Запись.Место		  = НовоеМесто.Ссылка;
		
		Запись.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена;
		
		Запись.ВариантМаршрута= ПараметрыМеста.ВариантМаршрута;
		Запись.Отправитель    = ПараметрыМеста.Отправитель;
		Запись.Пользователь	  = ПараметрыСеанса.ТекущийПользователь;
		Запись.АдресОтправителя = ПараметрыМеста.АдресОтправителя;
		
		Попытка
		    НаборЗаписей.Записать();			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки;
		ЗаписатьКТС_ГеографическиеРасположенияПартнеров(ПараметрыМеста.Отправитель, ПараметрыМеста.АдресОтправителя);
		
		ЗафиксироватьТранзакцию();
		
		
		Результат = Новый Структура;
		Результат.Вставить("Задача", НовоеМесто.Ссылка);
		Результат.Вставить("Получатель", ПараметрыМеста.Владелец);
		Результат.Вставить("ПолучательПредставление", Строка(ПараметрыМеста.Владелец));
		Результат.Вставить("ЗадачаПредставление", Строка(НовоеМесто.Ссылка));
		Результат.Вставить("Маршрут", ПараметрыМеста.ВариантМаршрута);
		
		Возврат Результат;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.СоздатьЗадачу(ПараметрыМеста, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.СоздатьЗадачу(ПараметрыМеста, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции // СоздатьЗадачи()

// Расчитиваем маршрут доставки
//
// Параметры:
//  ДанныеРасчета - Структура - структура данных для расчета доставки
//
// Возвращаемое значение:
//	Массив - массив данных расчета доставки
Функция ВыполнитьРасчетДоставки(ДанныеРасчета, ПеренаправлениеОпределено = Ложь)  Экспорт
	
	Если ПеренаправлениеОпределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = СформироватьТекстЗапросаРасчетДоставки(ДанныеРасчета.Отправитель,ДанныеРасчета.Получатель);
		
		Запрос.УстановитьПараметр("Получатель", НормализироватьПредставлениеАбонента(ДанныеРасчета.Получатель,ДанныеРасчета.АдресДоставки));    
		Запрос.УстановитьПараметр("Отправитель", НормализироватьПредставлениеАбонента(ДанныеРасчета.Отправитель, ДанныеРасчета.АдресОтправителя));
		Запрос.УстановитьПараметр("ДатаСеанса", ДанныеРасчета.НачалоВыполнения);

		РезультатПакета = Запрос.ВыполнитьПакет();
		Возврат РезультатПакета;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ВыполнитьРасчетДоставки(ДанныеРасчета, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ВыполнитьРасчетДоставки(ДанныеРасчета, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Создать запись в регистре сведения ЗадачиНаМаршрут
//
// Параметры:
//    ПараметрыМеста  		- Структура - параметры данных, полученых для создания новой
//
// Возвращаемое значение:
//	Булево - ИСТИНА - если записалось без ошибки, инече ЛОЖЬ
Функция СоздатьЗаписьВРегитре(ПараметрыМеста, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
	
		НаборЗаписей = РегистрыСведений.ЗадачиНаМаршрут.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПараметрыМеста.НачалоВыполненияЗадачи);
		НаборЗаписей.Отбор.Место.Установить(ПараметрыМеста.Ссылка);
		
		Запись 				  = НаборЗаписей.Добавить();
		Запись.Период		  = ПараметрыМеста.НачалоВыполненияЗадачи;
		Запись.Место		  = ПараметрыМеста.Ссылка;
		
		Запись.СтатусОтгрузки = Перечисления.СтатусыОтгрузкиМест.ЗадачаПоставлена;
		
		Запись.ВариантМаршрута= ПараметрыМеста.ВариантМаршрута;
		Запись.Отправитель    = ПараметрыМеста.Отправитель;
		Запись.Пользователь	  = ПараметрыСеанса.ТекущийПользователь;
		Запись.АдресОтправителя = ПараметрыМеста.АдресОтправителя;
		
		Попытка
		    НаборЗаписей.Записать();
			ЗаписатьКТС_ГеографическиеРасположенияПартнеров(ПараметрыМеста.Отправитель, ПараметрыМеста.АдресОтправителя);
			Возврат Ложь;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.СоздатьЗаписьВРегитре(ПараметрыМеста, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.СоздатьЗаписьВРегитре(ПараметрыМеста, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Процедура загружает в табличный документ «ИнформацияПоМесту» информацию о месте
// при выделении места курсором.
//
// Параметры:
//  Форма - УправляемаяФорма  				- форма обработки на которой размещается таблица «СписокНоменклатуры».
//  Место - СправочникСсылка.МестаДоставки  - место по которому нужно получить информацию.
//
Процедура ЗагрузитьИнформациюОМесте(Форма, Место, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		УстановитьПривилегированныйРежим(Истина);

		ИнформацияПоМесту = Форма.ИнформацияПоМесту;
		ИнформацияПоМесту.Очистить();
		
		Если Место.ЭтоЗадача Тогда
			ИнформацияОЗадаче(Место, ИнформацияПоМесту);
		Иначе
			ИнформацияОМесте(Место, ИнформацияПоМесту);
		КонецЕсли;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Справочники.МестаДоставки.ЗагрузитьИнформациюОМесте(Форма, Место, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			ВнешнийОбъект.ЗагрузитьИнформациюОМесте(Форма, Место, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет на заполненность места номенклатурой.
//
// Параметры:
//  Место - СправочникСсылка.МестаДоставки - место доставки по которому нужно выполнить проверку.
//
// Возвращаемое значение:
//  Истина - пользователь не добавлял номенклатуру в место, Ложь - пользователь добавил хотя бы
//           одну номенклатуру, Неопределено - возник сбой.
//
Функция МестоПустое(Место, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Если ТипЗнч(Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить место доставки на комплектацию.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Блокировка 				= Новый БлокировкаДанных;
		ЭлементБлокировки 		= Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Место", Место);
		
		Блокировка.Заблокировать();
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура,
		|	Характеристика,
		|	Количество
		|ИЗ
		|	РегистрСведений.МестаНоменклатуры
		|ГДЕ
		|	Место = &Место";
		
		Запрос.УстановитьПараметр("Место", Место);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат Не РезультатЗапроса.Пустой();
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.МестоПустое(Место, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.МестоПустое(Место, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция проверяет принадлежность места пользователю.
// 
// Параметры:
//  Место 			- СправочникСсылка.МестаДоставки - место доставки по которому нужно выполнить проверку.
//  Ответственный   - СправочникСсылка.Пользователи	 - пользователь для которого нужно проверить принадлежность места.
//
// Возвращаемое значение:
//	Истина - место скомплектовал Ответственный пользователь, Ложь - место скомплектовал другой пользователь,
//  Неопределено - возник сбой.
//
Функция ПроверитьВладельцаМеста(Место, Ответственный, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Если ТипЗнч(Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить владельца места доставки. Параметр <Место> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Ответственный) <> Тип("СправочникСсылка.Пользователи") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить владельца места доставки. Параметр <Ответственный> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МестаДоставки
		|ГДЕ
		|	Ссылка = &Место
		|	И Ответственный = &Ответственный");
		
		Запрос.УстановитьПараметр("Место", Место);
		Запрос.УстановитьПараметр("Ответственный", Ответственный);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат Не РезультатЗапроса.Пустой();
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПроверитьВладельцаМеста(Место, Ответственный, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПроверитьВладельцаМеста(Место, Ответственный, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПроверитьВладельцаМеста()

// Функция проверяет может ли место быть скомплектованным.
//
// Параметры:
//  Место - СправочникСсылка.МестаДоставки - место доставки для которого выполняется проверка.
//  Склад - СправочникСсылка.Склады		   - склад из которого комплектуется место.
//
// Возвращаемое значение:
//	Истина - комплектовать место разрешено, Ложь - комплектовать место запрещено,
//  Неопределено - возник сбой.
//
Функция ПроверитьВозможностьКомплектацииМеста(Место, Склад, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
		
		Если ТипЗнч(Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить возможность комплектации места доставки. Параметр <Место> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Склад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить возможность комплектации места доставки. Параметр <Склад> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Блокировка 					= Новый БлокировкаДанных;
		ЭлементОтгрузкаМест 		= Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
		ЭлементОтгрузкаМест.Режим 	= РежимБлокировкиДанных.Исключительный;
		ЭлементОтгрузкаМест.УстановитьЗначение("Склад", Склад);
		ЭлементОтгрузкаМест.УстановитьЗначение("Место", Место);
		
		Блокировка.Заблокировать();
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СтатусОтгрузки = ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации) И НЕ Место.Архивный
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВозможностьКомплектации
		|ИЗ
		|	РегистрСведений.ОтгрузкаМест.СрезПоследних(
		|			,
		|			Склад = &Склад
		|				И Место = &Место)";
		
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("Место", Место);
		
		Выборка = Запрос.Выполнить().Выбрать();	
		Возврат ?(Выборка.Следующий(), Выборка.ВозможностьКомплектации, Ложь);
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПроверитьВозможностьКомплектацииМеста(Место, Склад, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПроверитьВозможностьКомплектацииМеста(Место, Склад, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Для отгрузки транзитного места пользователь должен обязательно
// ввести все серийные номера, иначе складовщики не смогут правильно
// обработать транзитное место на цетральном складе. Эта функция
// проверяет ввел ли пользователь все серийные номера для места.
//
// Параметры:
//  Место - СправочникСсылка.МестаДоставки - место доставки для которого выполняется проверка.
//
// Возвращаемое значение:
//  Истина - проверка прошла успешно, Ложь - проверка не удалась.
//
Функция ПроверитьТранзитноеМесто(Место, Склад, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Если ТипЗнч(Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить транзитное метосто доставки. Параметр <Место> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(Склад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекстСообщения = НСтр("ru='Не удалось проверить транзитное метосто доставки. Параметр <Склад> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если Не Место.Транзит Тогда
			Возврат Истина;
		КонецЕсли;
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаТранзитноеМесто();
		
		Запрос.УстановитьПараметр("Место", Место);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Результат = Истина;
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru='Для %1 %2 задано неверное количество серийных номеров.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			Выборка.НаименованиеНоменклатуры,
			Выборка.НаименованиеХарактеристики);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Результат = Ложь;
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПроверитьТранзитноеМесто(Место, Склад, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПроверитьТранзитноеМесто(Место, Склад, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПроверитьТранзитноеМесто()

// Функция выполняет запись статуса места в регистр «ОтгрузкаМест».
//
// Параметры:
//  ПараметрыЗаписи - Структура - содержит следующие поля:
//   * Период			- Дата										- время комплектации места.
//   * Место 			- СправочникСсылка.МестаДоставки 			- место доставки для которого выполняется запись.
//   * Склад 			- СправочникСсылка.Склады		 			- склад для которого нужно выполнить запись.
//   * Маршрут  		- СправочникСсылка.Маршруты		 			- машрут по которому едет место.
//   * СтатусОтгрузки   - ПеречислениеСсылка.СтатусыОтгрузкиМест    - статус места в процессе доставки.
//   * Пользователь		- СправочникСсылка.Пользователи				- пользователь который выполняет действие с местом.
//
// Возвращаемое значение:
//  Истина - запись прошла успешно, Ложь - возникли проблемы.
//
Функция ВыполнитьЗаписьОтгрузкаМест(ПараметрыЗаписи, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Если ПроверитьПараметрыЗаписиОтгрузкиМест(ПараметрыЗаписи) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ОтгрузкаМест.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Склад.Установить(ПараметрыЗаписи.Склад);
		НаборЗаписей.Отбор.Место.Установить(ПараметрыЗаписи.Место);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписи);
		
		Попытка
			НаборЗаписей.Записать(Ложь);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать статус места в регистр <ОтгрузкаМест>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		Возврат Истина;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ВыполнитьЗаписьОтгрузкаМест(ПараметрыЗаписи, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ВыполнитьЗаписьОтгрузкаМест(ПараметрыЗаписи, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ВыполнитьЗаписьОтгрузкаМест()

// Функция выполняет запись количественного значения номенклатуры в месте
//
// Параметры:
//  ПараметрыЗаписи - Структура - содержит следующие поля:
//	 * Место 			- СправочникСсылка.МестаДоставки 	- место по которому нужно записать информацию.
//   * Номенклатура     - СправочникСсылка.Номенклатура		- номенклатура по которой пишут количественное значение.
//   * Количество		- Число								- сколько позиций номенклатуры комплектуем в месте доставки.
//
// Возвращаемое значение:
//  Истина - запись прошла успешно, Ложь - возникли проблемы.
//
Функция ВыполнитьЗаписьМестаНоменклатуры(ПараметрыЗаписи, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		Если ПроверитьПараметрыЗаписиМестаНоменклатуры(ПараметрыЗаписи) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МестаНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Место.Установить(ПараметрыЗаписи.Место);
		НаборЗаписей.Отбор.Номенклатура.Установить(ПараметрыЗаписи.Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписи);
		
		Попытка
			НаборЗаписей.Записать();    	
		Исключение
		    ТекстСообщения = НСтр("ru='Не удалось выпонить запись в регистр <МестаНоменклатуры>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		Возврат Истина;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ВыполнитьЗаписьМестаНоменклатуры(ПараметрыЗаписи, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ВыполнитьЗаписьМестаНоменклатуры(ПараметрыЗаписи, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции // ВыполнитьЗаписьМестаНоменклатуры()

// Функция выполняет запись серийных номеров номенклатуры, которые укомплектованы в место.
//
// Параметры:
//  ПараметрыЗаписи - Структура - содержит следующие поля:
//	 * Место 			- СправочникСсылка.МестаДоставки 				- место по которому нужно записать информацию.
//   * Номенклатура     - СправочникСсылка.Номенклатура					- номенклатура по которой нужно записать информацию.
//   * Склад			- СправочникСсылка.Склады						- склад на котором комплектовали место.
//   * СерийныйНомер	- СправочникСсылка.СерийныеНомераНоменклатуры	- серийный номер который скоплектовали в место.
//
// Возвращаемое значение:
//  Истина - запись прошла успешно, Ложь - возникли проблемы.
//
Функция ВыполнитьЗаписьСерийныеНомераНоменклатуры(ПараметрыЗаписи, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		Если ПроверитьПараметрыЗаписиСерийногоНомераНоменклатуры(ПараметрыЗаписи) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МестаСерийныеНомераНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Место.Установить(ПараметрыЗаписи.Место);
		НаборЗаписей.Отбор.Номенклатура.Установить(ПараметрыЗаписи.Номенклатура);
		НаборЗаписей.Отбор.Серийныйномер.Установить(ПараметрыЗаписи.Серийныйномер);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписи);
		
		Попытка
			НаборЗаписей.Записать();    					
		Исключение
		    ТекстСообщения = НСтр("ru='Не удалось выпонить запись в регистр <МестаСерийныеНомераНоменклатуры>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		Возврат Истина;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ВыполнитьЗаписьСерийныеНомераНоменклатуры(ПараметрыЗаписи, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ВыполнитьЗаписьСерийныеНомераНоменклатуры(ПараметрыЗаписи, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции // ВыполнитьЗаписьСерийныеМЕстаНоменклатуры()

// Функция формирует массив докуметов продажы из www.ktc-ua.com, который
// необходим для последующей печати товарных чеков.
//
// Параметры:
//  МассивДокументов - Массив - документы для которых необходимо провести проверку.
//  ЭтоОрдера 		 - Булево - флаг типа документа, устанавливается в Ложь 
//								если отгрузка товаров осуществляется из склад
//								где не используются ордера для отгрузки товаров.
// Возвращаемое значение:
//  Массив 			- массив ссылок документов для которых нужно печатать товарный чек.
//  Неопределено    - в случае сбоя.
//
Функция ПроверитьМассивДокументовИнтернетМагазин(МассивДокументов, ЭтоОрдера, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
	
		Если ТипЗнч(МассивДокументов) <> Тип("Массив") Тогда
			ТекстСообщения = НСтр("ru='Не удалось получить массив документов на продажи интернет магазина.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		// Если массив пустой - нечего делать запрос, возвращаем просто пустой массив.
		Если МассивДокументов.Количество() = 0 Тогда
			Возврат МассивДокументов;
		КонецЕсли;
		
		Если ТипЗнч(ЭтоОрдера) <> Тип("Булево") Тогда
			ТекстСообщения = НСтр("ru='Не удалось получить признак указания типа документа в проверке на продажи интернет магазина.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ?(ЭтоОрдера = Истина, 
							ТекстЗапросаОрдераПродажиИнтернетМагазина(),
							ТекстЗапросаПродажиИнтернетМагазинаБезОрдера());
							
		ПодразделениеКЦ = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85"));
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеКЦ);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ПроверитьМассивДокументовИнтернетМагазин(МассивДокументов, ЭтоОрдера, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ПроверитьМассивДокументовИнтернетМагазин(МассивДокументов, ЭтоОрдера, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПроверитьМассивДокументовИнтернетМагазин(МассивДокументов, ЭтоОрдера)

// Функция выполняет запись статус документа по месту в регистр «МестаПоДокументам».
//
// Параметры:
//  Место 				- СправочникСсылка.МестаДоставки 			 - место по документу для которого нужно записать статус.
//  ДокументОтгрузки    - ДокументСсылка.РасходныйОрдерНаТовары,
//						  ДокументСсылка.КТС_ОтгрузкаТоваров         - документ для которого нужно записать статус.
//  Статус				- ПеречислениеСсылка.СтатусыРасходныхОрдеров - статус документа который нужно записать в регистр.
//
// Возвращаемое значение:
//  Истина - запись прошла успешно, Ложь - возникли ошибки.
//
Функция ЗаписатьСтатусДокументаОтгрузки(Место, ДокументОтгрузки, Статус, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда
	
		Если ТипЗнч(Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать статус документа в регистр. Параметр <Место> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходныйОрдерНаТовары"));
		МассивТипов.Добавить(Тип("ДокументСсылка.КТС_ОтгрузкаТоваров"));
		Если МассивТипов.Найти(ТипЗнч(ДокументОтгрузки)) = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать статус документа в регистр. Параметр <ДокументОтгрузки> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(Статус) <> Тип("ПеречислениеСсылка.СтатусыРасходныхОрдеров") Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать статус документа в регистр. Параметр <Статус> имеет неверный тип данных.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МестаПоДокументам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Место.Установить(Место);
		НаборЗаписей.Отбор.Документ.Установить(ДокументОтгрузки);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Место 			= Место;
		Запись.Документ 		= ДокументОтгрузки;
		Запись.СтатусДокумента  = Статус;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
		    ТекстСообщения = НСтр("ru='Не удалось записать статус документа в регистр. Возник сбой при записи данных в регистр.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки; 
		
		Возврат Истина;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.ЗаписатьСтатусДокументаОтгрузки(Место, ДокументОтгрузки, Статус, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.ЗаписатьСтатусДокументаОтгрузки(Место, ДокументОтгрузки, Статус, Истина);	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ЗаписатьСтатусДокументаОтгрузки()

// Функция выполняет все действия после того как пользователь
// нажмет кнопку «Укомплектовать» в обработке «Отгрузка мест».
//
// Параметры:
//  ПараметрыКомплектации - Структура, которая содержит параметры:
//   * Место 				- СправочникСсылка.МестаДоставки 	- место которое необходимо укомплектовать.
//   * Склад 				- СправочникСсылка.Склады		  	- склад из которого осуществляетса комплектация.
//   * Маршрут  			- СправочникСсылка.Маршруты			- маршрут по которому комплектуется место.
//   * Пользователь 		- СправочникСсылка.Пользователи 	- пользователь который комплектует место.
//   * ОрдернаяСхемаСклада  - Булево							- склад комплектации использует ордерную схему при отгрузке товара.
//
//  СтруктураПечатныхФорм - Структура, в которую будут записываться необходимые печатные формы.
//
// Возвращаемое значение:
//  Истина - комплектация прошла успешно, Ложь - возникли проблемы.
//
Функция УкомплектоватьМесто(ПараметрыКомплектации, СтруктураПечатныхФорм, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
	
		Если ПроверитьПараметрыКомплектации(ПараметрыКомплектации) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИсточникДанных = git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект("Обработка 'Внешние печатные формы'");
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		ПроверкаПустоеМесто = МестоПустое(ПараметрыКомплектации.Место);
		Если ПроверкаПустоеМесто = Ложь ИЛИ ПроверкаПустоеМесто = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Место %1 пустое. Запрещено отгружать пустые места, добавьте пожалуйста номенклатуру к месту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПараметрыКомплектации.Место);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ПроверкаВладелецМеста = ПроверитьВладельцаМеста(ПараметрыКомплектации.Место, ПараметрыКомплектации.Пользователь);
		Если ПроверкаВладелецМеста = Ложь ИЛИ ПроверкаВладелецМеста = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Запрещено комплектовать место другого пользователя.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ПроверкаКомплектации = ПроверитьВозможностьКомплектацииМеста(ПараметрыКомплектации.Место, ПараметрыКомплектации.Склад);
		Если ПроверкаВладелецМеста = Ложь ИЛИ ПроверкаВладелецМеста = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Место уже укомплектовано.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ПроверкаТранзитногоМеста = ПроверитьТранзитноеМесто(ПараметрыКомплектации.Место, ПараметрыКомплектации.Склад);
		Если ПроверкаТранзитногоМеста = Ложь Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить все серийные номера в транзитном месте.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Склад", ПараметрыКомплектации.Склад);
		ЭлементБлокировки.УстановитьЗначение("Место", ПараметрыКомплектации.Место);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось заблокировать ресурсы регистра <ОтгрузкаМест> для комплектации места.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
		
		ПараметрыЗаписи	= СтруктураПараметровЗаписиОтгрузкиМест();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписи, ПараметрыКомплектации, "Место, Склад, Пользователь");
		ПараметрыЗаписи.СтатусОтгрузки 	= Перечисления.СтатусыОтгрузкиМест.КомплектацияЗавершена;
		ПараметрыЗаписи.Период		   	= ТекущаяДата();
		ПараметрыЗаписи.ВариантМаршрута = ПараметрыКомплектации.Маршрут;
		
		РезультатЗаписиОтгрузкаМест = ВыполнитьЗаписьОтгрузкаМест(ПараметрыЗаписи);
		Если РезультатЗаписиОтгрузкаМест = Ложь Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось записать статус комплектации места.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Если ПараметрыКомплектации.ОрдернаяСхемаСклада Тогда
			МассивОрдеров 	= Новый Массив;
			РезультатЗаписи = СоздатьРасходныеОрдера(ПараметрыКомплектации, МассивОрдеров);
			Если РезультатЗаписи = Ложь Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			МассивДокументов = ПроверитьМассивДокументовИнтернетМагазин(МассивОрдеров, Истина);
			Если МассивДокументов.Количество() > 0 Тогда
				ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "РасходныйОрдерНаТовары_ЧП", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
				КоллекцияПечатныхФорм = Неопределено;
				
				УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
				СтруктураПечатныхФорм.Вставить("ТоварныеЧеки", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
				
				ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ГарантийноеСоглашение", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
				КоллекцияПечатныхФорм = Неопределено;
				
				УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
				СтруктураПечатныхФорм.Вставить("ГарантийныеСоглашения", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
			КонецЕсли;
		Иначе
			МассивДокументовПродажи = Новый Массив;
			РезультатЗаписи			= СоздатьДокументыОтгрузки(ПараметрыКомплектации, МассивДокументовПродажи);
			Если РезультатЗаписи = Ложь Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			МассивДокументов = ПроверитьМассивДокументовИнтернетМагазин(МассивДокументовПродажи, Истина);
			Если МассивДокументов.Количество() > 0 Тогда
				
				ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ТоварныйЧек_ЧП", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
				КоллекцияПечатныхФорм = Неопределено;
				
				УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
				СтруктураПечатныхФорм.Вставить("ТоварныеЧеки", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
				
				ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ГарантийноеСоглашение", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
				КоллекцияПечатныхФорм = Неопределено;
				
				УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
				СтруктураПечатныхФорм.Вставить("ГарантийныеСоглашения", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
				
			КонецЕсли;
		КонецЕсли;
		
		ТоварныйЧекПоПеремещению = СформироватьПечатнуюФормуТоварногоЧекаДляПеремещения(ПараметрыКомплектации.Место);
		Если ТоварныйЧекПоПеремещению <> Неопределено Тогда
			СтруктураПечатныхФорм.Вставить("ТоварныйЧекПоПеремещению", ТоварныйЧекПоПеремещению);
		КонецЕсли;
		
		ПараметрКоманды = Новый Массив;        
		ПараметрКоманды.Добавить(ПараметрыКомплектации.Место);        
		ПараметрыИсточника 		= Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "МестаДоставки_ПечатьQRЭтикетки", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
		КоллекцияПечатныхФорм 	= Неопределено;
		УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
		СтруктураПечатныхФорм.Вставить("ЭтикеткаQRКода", КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент"));
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.УкомплектоватьМесто(ПараметрыКомплектации, СтруктураПечатныхФорм, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.УкомплектоватьМесто(ПараметрыКомплектации, СтруктураПечатныхФорм, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции // УкомплектоватьМесто()

// Функция автоматически собирает место по одной номенклатуре, которую перемещают между складами
// из автоматическим расчетом маршрута. Функция разрешено запускать только внутри транзакции.
//
// Параметры:
//  ПараметрыДанных - структура которая содержит параметры:
//   * Номенклатура		- СправочникСсылка.Номенклатура 	 - документ, на основании которого нужно создать место.
//   * Количество		- Число								 - количество номенклатуры в месте.
//	 * СкладОтправитель - СправочникСсылка.Склады			 - склад из которого мето будет отправлятся.
//   * СкладПолучатель  - СправочникСсылка.Склады			 - склад на который товар должен уехать, склад может быть транзитным.
//   * Назначение		- СправочникСсылка.Назначения        - назначение по котором едет место (указывается только для транзитных мест).
//   * Ответственный    - СправочникСсылка.Пользователи		 - пользователь ответсвенный за комплектацию места.
//   * СерийныеНомера - таблица значений которая содержит колонки:
//		** СерийныйНомер - СправочникСсылка.СерийныеНомераНоменклатуры - серийник для номенклатуры.
//  
// Возвращаемое значение:
//  Структура - содержит свойства:
//  	* СправочникСсылка.МестаДоставки - если место успешно создалось.
//		* СправочникСсылка.Маршруты      - маршрут по которому поедет место.
//  Неопределено - если возник сбой.
//
Функция СобратьМестоМеждуСкладами(ПараметрыДанных, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		Если ПроверитьПараметрыПроцедурыСборкиМеста(ПараметрыДанных) = Ложь Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОтгрузкаМест");
		ЭлементБлокировки.УстановитьЗначение("Склад", ПараметрыДанных.СкладОтправитель);
		
		ЭлементТоварыКОтгрузке 		 = Блокировка.Добавить("РегистрНакопления.ТоварыКОтгрузке");
		ЭлементТоварыКОтгрузке.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементТоварыКОтгрузке.УстановитьЗначение("Номенклатура", 	ПараметрыДанных.Номенклатура);
		ЭлементТоварыКОтгрузке.УстановитьЗначение("Склад", 			ПараметрыДанных.СкладОтправитель);
		
		ЭлементМестаНоменклатуры = Блокировка.Добавить("РегистрСведений.МестаНоменклатуры");
		ЭлементМестаНоменклатуры.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементМестаНоменклатуры.УстановитьЗначение("Номенклатура", ПараметрыДанных.Номенклатура);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось заблокировать ресурсы для комплектации места.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
		
		Маршрут = ПолучитьМаршрутМеждуДвумяСкладами(ПараметрыДанных);
		Если Маршрут = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Не удалось получить машрут между двома складами. Настройте маршруты.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыМеста = git_Templates.ПолучитьШаблонМестаДоставки();
		ПараметрыМеста.Владелец 		= ПараметрыДанных.СкладПолучатель;
		ПараметрыМеста.АдресДоставки    = git_МодульДоставкиСервер.ПолучитьАдресСклада(ПараметрыДанных.СкладПолучатель);
		ПараметрыМеста.Ответственный	= ПараметрыДанных.Ответственный;
		
		Если ПараметрыДанных.Свойство("Назначение") Тогда // Это транзит
			ПараметрыМеста.Назначение 		= ПараметрыДанных.Назначение;
			ПараметрыМеста.Транзит	  		= Истина;
			ПараметрыМеста.ТранзитныйСклад  = ПараметрыДанных.СкладПолучатель;
		КонецЕсли;
		
		ПараметрыМеста.Операция	= Перечисления.КТС_ОперацииМеста.Место;
		
		СтруктураОшибок     = Новый Структура;
		ОбъектМесто 		= git_Objcon.СоздатьСправочник("МестаДоставки", ПараметрыМеста, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Не удалось создать место доставки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);			
			КонецЦикла; 
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			ОбъектМесто.Записать();    					
		Исключение
		    ТекстСообщения = НСтр("ru='Не удалось записать место доставки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		ПараметрыЗаписиОтгрузкиМест = СтруктураПараметровЗаписиОтгрузкиМест();
		ПараметрыЗаписиОтгрузкиМест.Вставить("Склад", ПараметрыДанных.СкладОтправитель);
		ПараметрыЗаписиОтгрузкиМест.Вставить("Место", ОбъектМесто.Ссылка);
		ПараметрыЗаписиОтгрузкиМест.Вставить("ВариантМаршрута", Маршрут);
		ПараметрыЗаписиОтгрузкиМест.Вставить("СтатусОтгрузки", Перечисления.СтатусыОтгрузкиМест.НачалоКомплектации);
		ПараметрыЗаписиОтгрузкиМест.Вставить("Пользователь", ПараметрыДанных.Ответственный);
		ПараметрыЗаписиОтгрузкиМест.Вставить("Период", ТекущаяДата() - 1);
		
		РезультатЗаписи = ВыполнитьЗаписьОтгрузкаМест(ПараметрыЗаписиОтгрузкиМест);
		Если РезультатЗаписи = Ложь Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать статус места доставки в регистр.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыЗаписиНоменклатуры = СтруктураПараметровЗаписиНоменклатуры();
		ПараметрыЗаписиНоменклатуры.Вставить("Место", ОбъектМесто.Ссылка);
		ПараметрыЗаписиНоменклатуры.Вставить("Номенклатура", ПараметрыДанных.Номенклатура);
		ПараметрыЗаписиНоменклатуры.Вставить("Количество", ПараметрыДанных.Количество);
		
		РезультатЗаписи = ВыполнитьЗаписьМестаНоменклатуры(ПараметрыЗаписиНоменклатуры);
		Если РезультатЗаписи = Ложь Тогда
			ТекстСообщения = НСтр("ru='Не удалось записать количество номенклатуры в месте в регистр.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ПараметрыДанных.СерийныеНомера Цикл
			
			ПараметрыЗаписиСН = СтруктураПараметровЗаписиСерийныхНомеровНоменклатуры();
			ПараметрыЗаписиСН.Вставить("Место", ОбъектМесто.Ссылка);
			ПараметрыЗаписиСН.Вставить("Номенклатура", ПараметрыДанных.Номенклатура);
			ПараметрыЗаписиСН.Вставить("Склад", ПараметрыДанных.СкладОтправитель);
			ПараметрыЗаписиСН.Вставить("СерийныйНомер", СтрокаТаблицы.СерийныйНомер);
			
			РезультатЗаписи = ВыполнитьЗаписьСерийныеНомераНоменклатуры(ПараметрыЗаписиСН);
			Если РезультатЗаписи = Ложь Тогда
				ТекстСообщения = НСтр("ru='Не удалось записать серийный номер номенклатуры по месту в регистр.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Неопределено;
			КонецЕсли;

		КонецЦикла; 
		
		Возврат Новый Структура("Место, Маршрут", ОбъектМесто.Ссылка, Маршрут);
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Библиотека менеджера места доставки", "Справочники.МестаДоставки") Тогда	
			Возврат Справочники.МестаДоставки.СобратьМестоМеждуСкладами(ПараметрыДанных, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека менеджера места доставки");
			Возврат ВнешнийОбъект.СобратьМестоМеждуСкладами(ПараметрыДанных, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции // СобратьМестоПоДокументу()
 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить запрос задачи с последними изменениями
//
// Параметры:
//  Абонент		- СправочникиСсылка.Партнер/СправочникиСсылка.Склад - партнер/склад место от кого отгружено
//  АдресАбонента - Строка - Адрес абонента
//
// Возвращаемое значение:
//	Строка - обрезанный адрес доставки без улици абонента 
//
Функция НормализироватьПредставлениеАбонента(Абонент, АдресАбонента)
	Если ТипЗнч(Абонент) = Тип("СправочникСсылка.Склады") Тогда
		Возврат Абонент;
	КонецЕсли;
	
	ОбработкаКлассификатор = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Маршруты адресный классификатор");
	Возврат ОбработкаКлассификатор.ПолучитьГородПоАдресу(АдресАбонента);
	
КонецФункции // НормализироватьПредставлениеАбонента()

Функция СтруктураПараметровЗаписиОтгрузкиМест()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Место");
	СтруктураПараметров.Вставить("Склад");
	СтруктураПараметров.Вставить("ВариантМаршрута");
	СтруктураПараметров.Вставить("СтатусОтгрузки");
	СтруктураПараметров.Вставить("Пользователь");
	СтруктураПараметров.Вставить("Период");
	
	Возврат СтруктураПараметров;

КонецФункции // СтруктураПараметровЗаписиОтгрузкиМест()

Функция СтруктураПараметровЗаписиНоменклатуры()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Место");
	СтруктураПараметров.Вставить("Номенклатура");
	СтруктураПараметров.Вставить("Количество");
	
	Возврат СтруктураПараметров;

КонецФункции // СтруктураПараметровЗаписиНоменклатуры()

Функция СтруктураПараметровЗаписиСерийныхНомеровНоменклатуры()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Место");
	СтруктураПараметров.Вставить("Номенклатура");
	СтруктураПараметров.Вставить("Склад");
	СтруктураПараметров.Вставить("СерийныйНомер");
	
	Возврат СтруктураПараметров;

КонецФункции // СтруктураПараметровЗаписиСерийныхНомеровНоменклатуры()
 




Функция СоздатьРасходныеОрдера(ПараметрыКомплектации, МассивОрдеров)

	СерийныеНомера = ПолучитьСерийныеНомераНоменклатурыПоМесту(ПараметрыКомплектации.Место, ПараметрыКомплектации.Склад);
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОтгрузки();
	
	Запрос.УстановитьПараметр("Место", ПараметрыКомплектации.Место);
	Запрос.УстановитьПараметр("Склад", ПараметрыКомплектации.Склад);
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ПараметрыОбъекта = git_Templates.ПолучитьШаблонРасходногоОрдераНаТовары();
		
		ПараметрыОбъекта.Распоряжение  	 	= ВыборкаДокумент.ДокументОтгрузки;
		ПараметрыОбъекта.Дата 		 	 	= ТекущаяДата();
		ПараметрыОбъекта.ДатаОтгрузки 		= ТекущаяДата();
		ПараметрыОбъекта.Приоритет 	 	 	= Перечисления.Приоритеты.Средний;
		ПараметрыОбъекта.Ответственный 	 	= ПараметрыКомплектации.Пользователь;
		ПараметрыОбъекта.СкладскаяОперация 	= Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
		ПараметрыОбъекта.Статус		 	 	= Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		ВыборкаДетальныеЗаписи = ВыборкаДокумент.Выбрать();
		КлючСвязи			   = 1;
		Товары				   = ПараметрыОбъекта.Товары;
		СерийныеНомера		   = ПараметрыОбъекта.СерийныеНомера;

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ЗаполнитьСерийныеНомераСтроки(НоваяСтрока, СерийныеНомера, СерийныеНомера, КлючСвязи);
		КонецЦикла;
		
		СтруктураОшибок = Новый Структура;
		ДокументОбъект  = git_Objcon.СоздатьДокумент("РасходныйОрдерНаТовары", ПараметрыОбъекта, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Не удалось провести расходный ордер на товары по месту %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПараметрыКомплектации.Место);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
		    ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);					
		Исключение
		    ТекстСообщения = НСтр("ru='Не удалось провести расходный ордер на товары по месту %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПараметрыКомплектации.Место);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки; 
		
		МассивОрдеров.Добавить(ДокументОбъект.Ссылка);
		
		Если ЗаписатьСтатусДокументаОтгрузки(ПараметрыКомплектации.Место, ДокументОбъект.Ссылка, Перечисления.СтатусыРасходныхОрдеров.Отгружен) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // СоздатьРасходныеОрдера()
 
Функция ПолучитьСерийныеНомераНоменклатурыПоМесту(Место, Склад)
	
	СответствиеНоменклатуры  = Новый Соответствие;
	Запрос 					 = Новый Запрос;
	Запрос.Текст 			 = ТекстЗапросаСерийныеНомераПоМесту();
	
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		МассивНомеров = Новый Массив;
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивНомеров.Добавить(ВыборкаДетальныеЗаписи.СерийныйНомер);
		КонецЦикла;
		СответствиеНоменклатуры.Вставить(ВыборкаНоменклатура.Номенклатура, МассивНомеров);
	КонецЦикла;
	
	Возврат СответствиеНоменклатуры;
	
КонецФункции // ПолучитьСерийныеНомераНоменклатуры()

Процедура ЗаполнитьСерийныеНомераСтроки(СтрокаТовары, ТаблицаСерийныеНомера, СерийныеНомера, КлючСвязи)
	
	МассивНомеров = СерийныеНомера.Получить(СтрокаТовары.Номенклатура);
	Если МассивНомеров = Неопределено Тогда
		// Если номенклатура не использует серийные номера, ключ связи серийных номеров все равно нужно присаваивать.
		Перейти ~КлючиСвязи;
	КонецЕсли;
	
	Если МассивНомеров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйИндекс = Мин(МассивНомеров.Количество()-1, СтрокаТовары.Количество-1);
	
	Для Индекс=0 ПО МаксимальныйИндекс Цикл
		НоваяСтрока = ТаблицаСерийныеНомера.Добавить();
		НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязи;
		НоваяСтрока.СерийныйНомер = МассивНомеров[0];
		МассивНомеров.Удалить(0);
	КонецЦикла;
	
~КлючиСвязи:
	СтрокаТовары.КлючСвязиСерийныхНомеров = КлючСвязи;
	КлючСвязи = КлючСвязи + 1;
	
КонецПроцедуры // ЗаполнитьСерийныеНомераСтроки()


Функция СоздатьДокументыОтгрузки(ПараметрыКомплектации, МассивДокументовПродажы)

	ПодразделениеКЦ = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85"));
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОтгрузки(Ложь, ПараметрыКомплектации.Место.Назначение);
	
	Запрос.УстановитьПараметр("Место", ПараметрыКомплектации.Место);
	Запрос.УстановитьПараметр("Получатель", ПараметрыКомплектации.Место.Владелец);
	Запрос.УстановитьПараметр("Склад", ПараметрыКомплектации.Склад);
	Запрос.УстановитьПараметр("Назначение", ПараметрыКомплектации.Место.Назначение);
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		ПараметрыОбъекта = git_Templates.ПолучитьШаблонРасходногоОрдераНаТовары();
		
		ПараметрыОбъекта.Распоряжение = ВыборкаДокумент.ДокументОтгрузки;
		ПараметрыОбъекта.Дата 		  = ВыборкаДокумент.ДокументОтгрузки.Дата+1;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПараметрыОбъекта.Склад = ВыборкаДокумент.ДокументОтгрузки.Склад;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ПараметрыОбъекта.Склад = ВыборкаДокумент.ДокументОтгрузки.СкладОтправитель;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ПараметрыОбъекта.Склад = ВыборкаДокумент.ДокументОтгрузки.Склад;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокумент.ДокументОтгрузки) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
			ПараметрыОбъекта.Склад = ВыборкаДокумент.ДокументОтгрузки.Склад;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаДокумент.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ПараметрыОбъекта.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		СтруктураОшибок = Новый Структура;
		ДокументОбъект  = git_Objcon.СоздатьДокумент("КТС_ОтгрузкаТоваров", ПараметрыОбъекта, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru='Не удалось провести документ отгрузка товаров по месту %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПараметрыКомплектации.Место);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
		    ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);					
		Исключение
		    ТекстСообщения = НСтр("ru='Не удалось провести документ отгрузка товаров по месту %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПараметрыКомплектации.Место);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		МассивДокументовПродажы.Добавить(ВыборкаДокумент.ДокументОтгрузки);
		Если ЗаписатьСтатусДокументаОтгрузки(ПараметрыКомплектации.Место, ДокументОбъект.Ссылка, Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // СоздатьДокументыОтгрузки()
 

Функция СформироватьПечатнуюФормуТоварногоЧекаДляПеремещения(Место)

	Если Не ВыполнитьПроверкуПечатиЧекаДляПеремещения(Место) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Место);
	
	ИсточникДанных 		  = git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект("Обработка 'Внешние печатные формы'");	
	ПараметрыИсточника 	  = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ЧекПеремещенияИзОтгрузкиМест", Ложь, Новый Структура("МассивДокументов", МассивДокументов));
	КоллекцияПечатныхФорм = Неопределено;
	
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, Новый СписокЗначений, Неопределено);        
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");

КонецФункции // СформироватьПечатнуюФормуТоварногоЧекаДляПеремещения()

Функция ВыполнитьПроверкуПечатиЧекаДляПеремещения(Место)

	МестоДоступныеСклады  = Ложь;
	МестоТранзитныеСклады = Ложь;
	МестоОтправитель	  = Истина;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(Объект КАК Справочник.Склады) КАК Склад
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения
	                      |ГДЕ
	                      |	Свойство = &Свойство
	                      |	И Значение = ИСТИНА
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Склад КАК Склад
	                      |ИЗ
	                      |	РегистрСведений.Модуль_ДоступныеСклады
	                      |ГДЕ
	                      |	Транзитный
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	                      |			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	                      |		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	                      |			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	                      |	КОНЕЦ КАК ДокументОтгрузки
	                      |ПОМЕСТИТЬ ВсеДокументыОтгрузки
	                      |ИЗ
	                      |	РегистрСведений.МестаПоДокументам
	                      |ГДЕ
	                      |	Место = &Место
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ПеремещениеТоваров) КАК ДокументОтгрузки,
	                      |	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ПеремещениеТоваров).СкладОтправитель КАК СкладОтправитель,
	                      |	ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ПеремещениеТоваров).СкладПолучатель КАК СкладПолучатель
	                      |ИЗ
	                      |	ВсеДокументыОтгрузки
	                      |ГДЕ
	                      |	ДокументОтгрузки ССЫЛКА Документ.ПеремещениеТоваров");
						  
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("67f2e5c7-3de9-11e4-80df-001e676b0173")));
	Запрос.УстановитьПараметр("Место", Место);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	МассивДопустимыхСкладов = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Склад");
	МассивТранзитныхСкладов = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
	ТаблицаПеремещений		= РезультатыЗапроса[3].Выгрузить();
	
	Если МассивДопустимыхСкладов.Найти(Место.Владелец) <> Неопределено Тогда
		МестоДоступныеСклады = Истина;
	КонецЕсли;
	
	Если МассивТранзитныхСкладов.Найти(Место.Владелец) <> Неопределено Тогда
		МестоТранзитныеСклады = Истина;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПеремещений Цикл
		Если МестоДоступныеСклады И МассивТранзитныхСкладов.Найти(СтрокаТаблицы.СкладОтправитель) = Неопределено Тогда
			МестоОтправитель = Ложь;
		КонецЕсли;
		Если МестоТранзитныеСклады И МассивДопустимыхСкладов.Найти(СтрокаТаблицы.СкладОтправитель) = Неопределено Тогда
			МестоОтправитель = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ((МестоДоступныеСклады ИЛИ МестоТранзитныеСклады) И МестоОтправитель);

КонецФункции // ВыполнитьПроверкуПечатиЧекаДляПеремещения()



Функция ПолучитьМаршрутМеждуДвумяСкладами(ПараметрыДанных)

	СкладОтправитель = ПараметрыДанных.СкладОтправитель;
	СкладПолучатель  = ПараметрыДанных.СкладПолучатель;
	ТекДата			 = ТекущаяДата();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаМаршрутМеждуДвомаСкладами();
	
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Маршрут, Неопределено);

КонецФункции // ПолучитьМаршрутДляСозданияМеста()
 




// ПЕЧАТНЫЕ ФОРМЫ

Функция СформироватьКолекциюПечатныхФорм(ИмяИсточникаДанных, ПараметрыИсточника, ОбъектыПечати = Неопределено, ПараметрыВывода = Неопределено) 
	Перем КоллекцияПечатныхФорм;
    ИсточникДанных = git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект(ИмяИсточникаДанных);                
    УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ИсточникДанных, ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);        
    Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");                                        
КонецФункции

Функция ОбработатьОбластьМакета(ОбластиМакета, ИмяПараметра, ИмяПараметраРасшифровки=Неопределено, ЗначениеПараметра, ЗначениеПараметраРасшифровки=Неопределено)
	ОбластьМакета = ОбластиМакета.Получить(ИмяПараметра);
	ОбластьМакета.Параметры[ИмяПараметра] = ЗначениеПараметра;
	Если ИмяПараметраРасшифровки <> Неопределено Тогда
		ОбластьМакета.Параметры[ИмяПараметраРасшифровки] = ЗначениеПараметраРасшифровки;
	КонецЕсли;
	Возврат ОбластьМакета;
КонецФункции // ОбработатьОбластьМакета()

Функция РазбитьМакетНаОбласти(Макет, ЭтоЗадача)
	
	Результат = Новый Соответствие;
	
	Если ЭтоЗадача Тогда
		Результат.Вставить("ЗаголовокИнформация", Макет.ПолучитьОбласть("ЗаголовокИнформация"));
		Результат.Вставить("Пробел", Макет.ПолучитьОбласть("Пробел"));
		Результат.Вставить("Задача", Макет.ПолучитьОбласть("Задача"));
		Результат.Вставить("Ответственный", Макет.ПолучитьОбласть("Ответственный"));
		Результат.Вставить("Отправитель", Макет.ПолучитьОбласть("Отправитель"));
		Результат.Вставить("Получатель", Макет.ПолучитьОбласть("Получатель"));  
		Результат.Вставить("Транзит", Макет.ПолучитьОбласть("Транзит"));
		Результат.Вставить("ЗаголовокТекстЗадачи", Макет.ПолучитьОбласть("ЗаголовокТекстЗадачи"));
		Результат.Вставить("ТекстЗадачи", Макет.ПолучитьОбласть("ТекстЗадачи"));
		Результат.Вставить("ЗаголовокДокументы", Макет.ПолучитьОбласть("ЗаголовокДокументы"));
		Результат.Вставить("ПредставлениеДокумента", Макет.ПолучитьОбласть("ПредставлениеДокумента"));
		Результат.Вставить("ЗаголовокИстория", Макет.ПолучитьОбласть("ЗаголовокИстория"));
		Результат.Вставить("Период", Макет.ПолучитьОбласть("Период"));
		Результат.Вставить("Маршрут", Макет.ПолучитьОбласть("Маршрут"));
		Результат.Вставить("Статус", Макет.ПолучитьОбласть("Статус"));
		Результат.Вставить("Пользователь", Макет.ПолучитьОбласть("Пользователь"));
		Результат.Вставить("Отправитель", Макет.ПолучитьОбласть("Отправитель"));
		Результат.Вставить("ЗаголовокТаблицыТоворов", Макет.ПолучитьОбласть("ЗаголовокТаблицыТоворов"));
		Результат.Вставить("ШапкаТаблициТовары", Макет.ПолучитьОбласть("ШапкаТаблициТовары"));
		Результат.Вставить("ТаблициТовары", Макет.ПолучитьОбласть("ТаблициТовары"));
	Иначе
		Результат.Вставить("ЗаголовокИнформация", Макет.ПолучитьОбласть("ЗаголовокИнформация"));
		Результат.Вставить("Пробел", Макет.ПолучитьОбласть("Пробел"));
		Результат.Вставить("Место", Макет.ПолучитьОбласть("Место"));
		Результат.Вставить("Ответственный", Макет.ПолучитьОбласть("Ответственный"));
		Результат.Вставить("Отправитель", Макет.ПолучитьОбласть("Отправитель"));
		Результат.Вставить("Получатель", Макет.ПолучитьОбласть("Получатель"));
		Результат.Вставить("Транзит", Макет.ПолучитьОбласть("Транзит"));
		Результат.Вставить("ЗаголовокДокументы", Макет.ПолучитьОбласть("ЗаголовокДокументы"));
		Результат.Вставить("ПредставлениеДокумента", Макет.ПолучитьОбласть("ПредставлениеДокумента"));
		Результат.Вставить("ЗаголовокИстория", Макет.ПолучитьОбласть("ЗаголовокИстория"));
		Результат.Вставить("Период", Макет.ПолучитьОбласть("Период"));
		Результат.Вставить("Маршрут", Макет.ПолучитьОбласть("Маршрут"));
		Результат.Вставить("Статус", Макет.ПолучитьОбласть("Статус"));
		Результат.Вставить("Пользователь", Макет.ПолучитьОбласть("Пользователь"));
		Результат.Вставить("Склад", Макет.ПолучитьОбласть("Склад"));
		Результат.Вставить("ЗаголовокТаблицыТоворов", Макет.ПолучитьОбласть("ЗаголовокТаблицыТоворов"));
		Результат.Вставить("ШапкаТаблициТовары", Макет.ПолучитьОбласть("ШапкаТаблициТовары"));
		Результат.Вставить("ТаблициТовары", Макет.ПолучитьОбласть("ТаблициТовары"));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // РазбитьМакетНаОбласти()




// ТЕКСТЫ ЗАПРОСОВ

// Получить запрос задачи с последними изменениями
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//	Строка - текст запроса
Функция ПолучитьТекстЗапросаЗадачиСрезПоследних()
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период								КАК ПериодЗадачи,
		|	ЗадачиНаМаршрут.Место               КАК Место,
	    |	ЗадачиНаМаршрут.Отправитель 		КАК Отправитель,
		|	ЗадачиНаМаршрут.ВариантМаршрута     КАК ВариантМаршрута,
	    |	ЗадачиНаМаршрут.СтатусОтгрузки 		КАК Статус,
		|	&СтатусЗадачи                       КАК СтатусОтгрузки,
	    |	ЗадачиНаМаршрут.АдресОтправителя 	КАК АдресОтправителя,
		|	&ТекущийПользователь                КАК Пользователь
	    |ИЗ
	    |	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место = &Задача) КАК ЗадачиНаМаршрут
	    |";	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗадачиСрезПоследных()

// Получить запрос задачи с последними изменениями
//
// Параметры:
//  Отправитель - СправочникиСсылка.Партнер/СправочникиСсылка.Склад - партнер/склад место от кого отгружено
//  Получатель  - СправочникиСсылка.Партнер/СправочникиСсылка.Склад - партнер/склад место кому нужно отгрузить
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция СформироватьТекстЗапросаРасчетДоставки(Отправитель,Получатель)

	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры")  Тогда
		ТекстЗапроса = "ВЫБРАТЬ
           |	ВариантыМаршрутовСписокАдресов.Ссылка КАК Маршрут,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад
           |ПОМЕСТИТЬ МаршрутыОтправитель
           |ИЗ
           |	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
           |ГДЕ
           |	ВариантыМаршрутовСписокАдресов.ГородСклад = &Отправитель
           |
           |ОБЪЕДИНИТЬ ВСЕ
           |
           |ВЫБРАТЬ
           |	ВариантыМаршрутовСкладыОтгрузки.Ссылка,
           |	ВариантыМаршрутовСкладыОтгрузки.Склад
           |ИЗ
           |	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
           |ГДЕ
           |	ВариантыМаршрутовСкладыОтгрузки.Склад = &Отправитель
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ВариантыМаршрутовСписокАдресов.Ссылка КАК Маршрут,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад
           |ПОМЕСТИТЬ МаршрутКПолучателю
           |ИЗ
           |	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
           |ГДЕ
           |	ВариантыМаршрутовСписокАдресов.ГородСклад = &Получатель
           |
           |ОБЪЕДИНИТЬ ВСЕ
           |
           |ВЫБРАТЬ
           |	ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров.Ссылка,
           |	ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров.Склад
           |ИЗ
           |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставкаОтПартнеров КАК ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров
           |ГДЕ
           |	ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров.Склад = &Получатель
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ РАЗЛИЧНЫЕ
           |	МаршрутКПолучателю.Маршрут,
           |	МаршрутКПолучателю.ГородСклад КАК Получатель,
           |	МаршрутыОтправитель.ГородСклад КАК Отправитель
           |ПОМЕСТИТЬ КешПрямойМаршрут
           |ИЗ
           |	МаршрутыОтправитель КАК МаршрутыОтправитель
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутКПолучателю КАК МаршрутКПолучателю
           |		ПО МаршрутыОтправитель.Маршрут = МаршрутКПолучателю.Маршрут
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ РАЗЛИЧНЫЕ
           |	МаршрутПолучателя.Маршрут,
           |	МаршрутыОтправитель.ГородСклад КАК АдресОтправителя,
           |	МаршрутПолучателя.ГородСклад КАК АдресПолучателя,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.ПН, ОтгрузкаПолучателя.ПН)
           |			ТОГДА 1
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК ПН,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.ВТ, ОтгрузкаПолучателя.ВТ)
           |			ТОГДА 2
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК ВТ,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.СР, ОтгрузкаПолучателя.СР)
           |			ТОГДА 3
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК СР,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.ЧТ, ОтгрузкаПолучателя.ЧТ)
           |			ТОГДА 4
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК ЧТ,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.ПТ, ОтгрузкаПолучателя.ПТ)
           |			ТОГДА 5
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК ПТ,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.СБ, ОтгрузкаПолучателя.СБ)
           |			ТОГДА 6
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК СБ,
           |	ВЫБОР
           |		КОГДА ЕСТЬNULL(ОтгрузкаОтправителя.ВС, ОтгрузкаПолучателя.ВС)
           |			ТОГДА 7
           |		ИНАЧЕ 0
           |	КОНЕЦ КАК ВС,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаПН, ОтгрузкаПолучателя.ВремяВыездаПН) КАК ВремяВыездаПН,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаВТ, ОтгрузкаПолучателя.ВремяВыездаВТ) КАК ВремяВыездаВТ,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаСР, ОтгрузкаПолучателя.ВремяВыездаСР) КАК ВремяВыездаСР,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаЧТ, ОтгрузкаПолучателя.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаПТ, ОтгрузкаПолучателя.ВремяВыездаПТ) КАК ВремяВыездаПТ,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаСБ, ОтгрузкаПолучателя.ВремяВыездаСБ) КАК ВремяВыездаСБ,
           |	ЕСТЬNULL(ОтгрузкаОтправителя.ВремяВыездаВС, ОтгрузкаПолучателя.ВремяВыездаВС) КАК ВремяВыездаВС
           |ПОМЕСТИТЬ КешМаршрут
           |ИЗ
           |	МаршрутыОтправитель КАК МаршрутыОтправитель
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутКПолучателю КАК МаршрутПолучателя
           |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ОтгрузкаОтправителя
           |			ПО МаршрутПолучателя.Маршрут = ОтгрузкаОтправителя.Ссылка
           |				И МаршрутПолучателя.ГородСклад = ОтгрузкаОтправителя.Склад
           |		ПО МаршрутыОтправитель.Маршрут = МаршрутПолучателя.Маршрут
           |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ОтгрузкаПолучателя
           |		ПО МаршрутыОтправитель.Маршрут = ОтгрузкаПолучателя.Ссылка
           |			И МаршрутыОтправитель.ГородСклад = ОтгрузкаПолучателя.Склад
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	КешМаршрут.Маршрут,
           |	КешМаршрут.АдресОтправителя,
           |	КешМаршрут.АдресПолучателя,
           |	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
           |						КОГДА 1
           |							ТОГДА КешМаршрут.ВремяВыездаПН
           |						КОГДА 2
           |							ТОГДА КешМаршрут.ВремяВыездаВТ
           |						КОГДА 3
           |							ТОГДА КешМаршрут.ВремяВыездаСР
           |						КОГДА 4
           |							ТОГДА КешМаршрут.ВремяВыездаЧТ
           |						КОГДА 5
           |							ТОГДА КешМаршрут.ВремяВыездаПТ
           |						КОГДА 6
           |							ТОГДА КешМаршрут.ВремяВыездаСБ
           |						КОГДА 7
           |							ТОГДА КешМаршрут.ВремяВыездаВС
           |					КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
           |					КОГДА 1
           |						ТОГДА КешМаршрут.ВремяВыездаПН
           |					КОГДА 2
           |						ТОГДА КешМаршрут.ВремяВыездаВТ
           |					КОГДА 3
           |						ТОГДА КешМаршрут.ВремяВыездаСР
           |					КОГДА 4
           |						ТОГДА КешМаршрут.ВремяВыездаЧТ
           |					КОГДА 5
           |						ТОГДА КешМаршрут.ВремяВыездаПТ
           |					КОГДА 6
           |						ТОГДА КешМаршрут.ВремяВыездаСБ
           |					КОГДА 7
           |						ТОГДА КешМаршрут.ВремяВыездаВС
           |				КОНЕЦ))) КАК ДатаВыезда,
           |	ПРЕДСТАВЛЕНИЕ(КешМаршрут.Маршрут)
           |ИЗ
           |	КешМаршрут КАК КешМаршрут
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
           |		ПО КешМаршрут.Маршрут.КалендарьМаршрута = КалендарныеГрафики.Календарь
           |			И (КалендарныеГрафики.ДеньВключенВГрафик)
           |			И (КалендарныеГрафики.ДеньВключенВГрафик)
           |			И (КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, ДЕНЬ))
           |			И (ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
           |							КОГДА 1
           |								ТОГДА КешМаршрут.ВремяВыездаПН
           |							КОГДА 2
           |								ТОГДА КешМаршрут.ВремяВыездаВТ
           |							КОГДА 3
           |								ТОГДА КешМаршрут.ВремяВыездаСР
           |							КОГДА 4
           |								ТОГДА КешМаршрут.ВремяВыездаЧТ
           |							КОГДА 5
           |								ТОГДА КешМаршрут.ВремяВыездаПТ
           |							КОГДА 6
           |								ТОГДА КешМаршрут.ВремяВыездаСБ
           |							КОГДА 7
           |								ТОГДА КешМаршрут.ВремяВыездаВС
           |						КОНЕЦ)), МИНУТА, МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
           |						КОГДА 1
           |							ТОГДА КешМаршрут.ВремяВыездаПН
           |						КОГДА 2
           |							ТОГДА КешМаршрут.ВремяВыездаВТ
           |						КОГДА 3
           |							ТОГДА КешМаршрут.ВремяВыездаСР
           |						КОГДА 4
           |							ТОГДА КешМаршрут.ВремяВыездаЧТ
           |						КОГДА 5
           |							ТОГДА КешМаршрут.ВремяВыездаПТ
           |						КОГДА 6
           |							ТОГДА КешМаршрут.ВремяВыездаСБ
           |						КОГДА 7
           |							ТОГДА КешМаршрут.ВремяВыездаВС
           |					КОНЕЦ)) > &ДатаСеанса)
           |
           |СГРУППИРОВАТЬ ПО
           |	КешМаршрут.Маршрут,
           |	КешМаршрут.АдресОтправителя,
           |	КешМаршрут.АдресПолучателя
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ВариантыМаршрутовСписокАдресов.Ссылка КАК МаршрутТранзит,
           |	ВариантыМаршрутовСкладыОтгрузки.Склад КАК ТранзитнийСклад,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад КАК Отправитель
           |ПОМЕСТИТЬ КешОтправительТранзит
           |ИЗ
           |	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
           |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
           |			ПО (ДоступныеСклады.Транзитный = ИСТИНА)
           |				И ВариантыМаршрутовСкладыОтгрузки.Склад = ДоступныеСклады.Склад
           |		ПО ВариантыМаршрутовСписокАдресов.Ссылка = ВариантыМаршрутовСкладыОтгрузки.Ссылка
           |			И ((ВЫРАЗИТЬ(ВариантыМаршрутовСписокАдресов.ГородСклад КАК Справочник.Склады)) <> &Получатель)
           |			И (ВариантыМаршрутовСписокАдресов.ГородСклад = &Отправитель)
           |			И (ВариантыМаршрутовСписокАдресов.ГородСклад <> &Отправитель)
           |
           |СГРУППИРОВАТЬ ПО
           |	ВариантыМаршрутовСписокАдресов.Ссылка,
           |	ВариантыМаршрутовСкладыОтгрузки.Склад,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад
           |
           |ОБЪЕДИНИТЬ
           |
           |ВЫБРАТЬ
           |	ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров.Ссылка,
           |	ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров.Склад,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад
           |ИЗ
           |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставкаОтПартнеров КАК ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
           |		ПО ВариантыМаршрутовВозвратнаяДоставкаОтПартнеров.Ссылка = ВариантыМаршрутовСписокАдресов.Ссылка
           |			И (ВариантыМаршрутовСписокАдресов.ГородСклад = &Отправитель)
           |ГДЕ
           |	ВариантыМаршрутовСписокАдресов.ГородСклад = &Отправитель
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	ВариантыМаршрутовСписокАдресов.Ссылка КАК МаршрутКПолучателю,
           |	ВариантыМаршрутовСкладыОтгрузки.Склад КАК ТранзитнийСклад,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад КАК Получатель
           |ПОМЕСТИТЬ КешПолучательТранзит
           |ИЗ
           |	Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
           |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
           |			ПО (ДоступныеСклады.Транзитный = ИСТИНА)
           |				И ВариантыМаршрутовСкладыОтгрузки.Склад = ДоступныеСклады.Склад
           |		ПО ВариантыМаршрутовСписокАдресов.Ссылка = ВариантыМаршрутовСкладыОтгрузки.Ссылка
           |			И (ВариантыМаршрутовСписокАдресов.ГородСклад = &Получатель)
           |			И ((ВЫРАЗИТЬ(ВариантыМаршрутовСписокАдресов.ГородСклад КАК Справочник.Склады)) <> &Отправитель)
           |ГДЕ
           |	ЕСТЬNULL(ВариантыМаршрутовСписокАдресов.ГородСклад, 0) <> 0
           |
           |СГРУППИРОВАТЬ ПО
           |	ВариантыМаршрутовСписокАдресов.Ссылка,
           |	ВариантыМаршрутовСкладыОтгрузки.Склад,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад
           |
           |ОБЪЕДИНИТЬ
           |
           |ВЫБРАТЬ
           |	ВариантыМаршрутовВозвратнаяДоставка.Ссылка,
           |	ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель,
           |	ВариантыМаршрутовСписокАдресов.ГородСклад
           |ИЗ
           |	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
           |		ПО ВариантыМаршрутовВозвратнаяДоставка.Ссылка = ВариантыМаршрутовСписокАдресов.Ссылка
           |			И (ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель <> &Отправитель)
           |			И (ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &Получатель)
           |			И (ВариантыМаршрутовСписокАдресов.ГородСклад = &Получатель)
           |;
           |
           |////////////////////////////////////////////////////////////////////////////////
           |ВЫБРАТЬ
           |	КешОтправительТранзит.Отправитель,
           |	КешОтправительТранзит.МаршрутТранзит,
           |	КешОтправительТранзит.ТранзитнийСклад КАК ТранзитныйСклад,
           |	КешПолучательТранзит.Получатель,
           |	КешПолучательТранзит.МаршрутКПолучателю,
           |	ПРЕДСТАВЛЕНИЕ(КешОтправительТранзит.МаршрутТранзит),
           |	ПРЕДСТАВЛЕНИЕ(КешПолучательТранзит.МаршрутКПолучателю),
           |	ПРЕДСТАВЛЕНИЕ(КешОтправительТранзит.ТранзитнийСклад) КАК ТранзитныйСкладПредставление
           |ИЗ
           |	КешОтправительТранзит КАК КешОтправительТранзит
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешПолучательТранзит КАК КешПолучательТранзит
           |		ПО КешОтправительТранзит.ТранзитнийСклад = КешПолучательТранзит.ТранзитнийСклад";
		
	Иначе
	
		ТекстЗапроса = "
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	Ссылка			КАК Склад,
			|	Представление   КАК Представление
			|ПОМЕСТИТЬ АдресаСкладов
			|ИЗ
			|	Справочник.Склады.КонтактнаяИнформация
			|ГДЕ
			|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	Ссылка КАК Маршрут
			|ПОМЕСТИТЬ МаршрутыОтОтправителя	
			|ИЗ
			|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
			|ГДЕ
			|	Склад = &Отправитель
	        |
			|ОБЪЕДИНИТЬ
	        |
			|ВЫБРАТЬ
			|	Ссылка КАК Маршрут
			|ИЗ
			|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
			|ГДЕ
			|	СкладПолучатель  = &Получатель
			|И	СкладОтправитель = &Отправитель	
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	Ссылка КАК Маршрут
			|ПОМЕСТИТЬ МаршрутыКПолучателю
			|ИЗ
			|	Справочник.ВариантыМаршрутов.СписокАдресов
			|ГДЕ
			|	ГородСклад = &Получатель
	        |
			|ОБЪЕДИНИТЬ
	        |
			|ВЫБРАТЬ
			|	Ссылка КАК Маршрут
			|ИЗ
			|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
			|ГДЕ
			|	СкладПолучатель  = &Получатель
			|И	СкладОтправитель = &Отправитель
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	&Отправитель									КАК СкладОтправитель,
			|	&Получатель										КАК СкладПолучатель,
			|	МаршрутыКПолучателю.Маршрут 					КАК Маршрут,
			|	ПРЕДСТАВЛЕНИЕ(МаршрутыКПолучателю.Маршрут)      КАК МаршрутПредставление,
			|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута 	КАК КалендарьМаршрута,
			|	
			|	IsNull(СкладыОтгрузки.ПН, СкладыОтгрузкиРезерв.ПН) КАК ПН,
			|	IsNull(СкладыОтгрузки.ВТ, СкладыОтгрузкиРезерв.ВТ) КАК ВТ,
			|	IsNull(СкладыОтгрузки.СР, СкладыОтгрузкиРезерв.СР) КАК СР,
			|	IsNull(СкладыОтгрузки.ЧТ, СкладыОтгрузкиРезерв.ЧТ) КАК ЧТ,
			|	IsNull(СкладыОтгрузки.ПТ, СкладыОтгрузкиРезерв.ПТ) КАК ПТ,
			|	IsNull(СкладыОтгрузки.СБ, СкладыОтгрузкиРезерв.СБ) КАК СБ,
			|	IsNull(СкладыОтгрузки.ВС, СкладыОтгрузкиРезерв.ВС) КАК ВС,
			|	
			|	IsNull(СкладыОтгрузки.ВремяВыездаПН, СкладыОтгрузкиРезерв.ВремяВыездаПН) КАК ВремяВыездаПН,
			|	IsNull(СкладыОтгрузки.ВремяВыездаВТ, СкладыОтгрузкиРезерв.ВремяВыездаВТ) КАК ВремяВыездаВТ,
			|	IsNull(СкладыОтгрузки.ВремяВыездаСР, СкладыОтгрузкиРезерв.ВремяВыездаСР) КАК ВремяВыездаСР,
			|	IsNull(СкладыОтгрузки.ВремяВыездаЧТ, СкладыОтгрузкиРезерв.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
			|	IsNull(СкладыОтгрузки.ВремяВыездаПТ, СкладыОтгрузкиРезерв.ВремяВыездаПТ) КАК ВремяВыездаПТ,
			|	IsNull(СкладыОтгрузки.ВремяВыездаСБ, СкладыОтгрузкиРезерв.ВремяВыездаСБ) КАК ВремяВыездаСБ,
			|	IsNull(СкладыОтгрузки.ВремяВыездаВС, СкладыОтгрузкиРезерв.ВремяВыездаВС) КАК ВремяВыездаВС
			|	
			|ПОМЕСТИТЬ МаршрутПрямойДоставки
			|ИЗ
			|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
			|ПО МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
			|ПО	АдресаСкладаПолучателя.Склад = &Получатель 
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
			|ПО	АдресаСкладаОтправителя.Склад = &Отправитель
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки 
			|ПО	СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут	
			|И	СкладыОтгрузки.Склад  = &Отправитель
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузкиРезерв 
			|ПО	СкладыОтгрузкиРезерв.Ссылка = МаршрутыКПолучателю.Маршрут	
			|И	СкладыОтгрузкиРезерв.Склад  = &Получатель
	        |
			|ГДЕ
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(&Получатель) = ТИП(Строка)
			|			ТОГДА АдресаСкладаОтправителя.Представление <> &Получатель
			|		ИНАЧЕ АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление
			|	КОНЕЦ
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	МаршрутПрямойДоставки.СкладОтправитель,
			|	МаршрутПрямойДоставки.СкладПолучатель,
			|	МаршрутПрямойДоставки.Маршрут, 
			|	ПРЕДСТАВЛЕНИЕ(МаршрутПрямойДоставки.Маршрут) КАК МаршрутПредсталение,
			|	Минимум(ДОБАВИТЬКДАТЕ(
			|				ДОБАВИТЬКДАТЕ(
			|							КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(	
			|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
			|																		КОГДА 1
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
			|																		КОГДА 2
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
			|																		КОГДА 3
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
			|																		КОГДА 4
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
			|																		КОГДА 5
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
			|																		КОГДА 6
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
			|																		КОГДА 7
			|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
			|																	КОНЕЦ
			|																	)
			|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
			|												КОГДА 1
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
			|												КОГДА 2
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
			|												КОГДА 3
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
			|												КОГДА 4
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
			|												КОГДА 5
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
			|												КОГДА 6
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
			|												КОГДА 7
			|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
			|											КОНЕЦ
			|											)
			|				)
			|			)	КАК ДатаВремяВыезда
			|ИЗ
			|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
			|	
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
			|ПО	КалендарныеГрафики.Календарь 	= МаршрутПрямойДоставки.КалендарьМаршрута
			|И	КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
			|И	КалендарныеГрафики.ДеньВключенВГрафик
			|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
			|		КОГДА 1
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.ПН
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 2
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.ВТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 3
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.СР
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 4
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.ЧТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 5
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.ПТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 6
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.СБ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 7
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутПрямойДоставки.ВС
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|	КОНЕЦ)
	        |
			|ГДЕ
			|	&ДатаСеанса < КалендарныеГрафики.ДатаГрафика	
			|ИЛИ
			|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
			|									КОГДА 1
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
			|									КОГДА 2
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
			|									КОГДА 3
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
			|									КОГДА 4
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
			|									КОГДА 5
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
			|									КОГДА 6
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
			|									КОГДА 7
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
			|								КОНЕЦ
			|							 )
			|ИЛИ
			|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
			|									КОГДА 1
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
			|									КОГДА 2
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
			|									КОГДА 3
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
			|									КОГДА 4
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
			|									КОГДА 5
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
			|									КОГДА 6
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
			|									КОГДА 7
			|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
			|								КОНЕЦ
			|							 )
			|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
			|										КОГДА 1
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
			|										КОГДА 2
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
			|										КОГДА 3
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
			|										КОГДА 4
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
			|										КОГДА 5
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
			|										КОГДА 6
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
			|										КОГДА 7
			|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
			|									КОНЕЦ
			|								) 	
			|	)		
	        |
			|СГРУППИРОВАТЬ ПО
			|	МаршрутПрямойДоставки.СкладОтправитель,
			|	МаршрутПрямойДоставки.СкладПолучатель,
			|	МаршрутПрямойДоставки.Маршрут
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаВремяВыезда ВОЗР
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	СкладыОтгрузки.Ссылка 										КАК МаршрутТранзит,
			|	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) 	КАК СкладТранзит
			|ПОМЕСТИТЬ МаршрутыОтОтправителяТранзит	
			|ИЗ
			|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
			|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
			|И  ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &Получатель
			|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &Отправитель
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
			|ПО ДоступныеСклады.Склад = СкладыОтгрузки.Ссылка
			|И  ДоступныеСклады.Транзитный
	        |
			|ГДЕ
			|	СкладыОтгрузки.Склад = &Отправитель	
			|	
			|ОБЪЕДИНИТЬ
	        |
			|ВЫБРАТЬ
			|	Ссылка 			КАК МаршрутТранзит,
			|	СкладПолучатель КАК СкладТранзит
			|ИЗ
			|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
			|ГДЕ
			|	СкладОтправитель = &Отправитель	
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	&Отправитель										КАК СкладОтправитель,
			|	СкладыОтгрузки.Склад									КАК СкладТранзит,
			|	&Получатель										КАК СкладПолучатель,
			|	МаршрутОтОтправителя.МаршрутТранзит						КАК МаршрутОтОтправителя,
			|	МаршрутОтОтправителя.МаршрутТранзит.КалендарьМаршрута	КАК КалендарьМаршрутаОтОтправителя,
			|	СкладыОтгрузки.Ссылка 									КАК МаршрутКПолучателю,
			|	СкладыОтгрузки.Ссылка.КалендарьМаршрута 				КАК КалендарьМаршрутаКПолучателю,
			|	
			|	СкладыТранзита.ПН,
			|	СкладыТранзита.ВТ,
			|	СкладыТранзита.СР,
			|	СкладыТранзита.ЧТ,
			|	СкладыТранзита.ПТ,
			|	СкладыТранзита.СБ,
			|	СкладыТранзита.ВС,
			|	
			|	СкладыТранзита.ВремяВыездаПН,
			|	СкладыТранзита.ВремяВыездаВТ,
			|	СкладыТранзита.ВремяВыездаСР,
			|	СкладыТранзита.ВремяВыездаЧТ,
			|	СкладыТранзита.ВремяВыездаПТ,
			|	СкладыТранзита.ВремяВыездаСБ,
			|	СкладыТранзита.ВремяВыездаВС,
			|	
			|	СкладыОтгрузки.ПН 				КАК тПН,
			|	СкладыОтгрузки.ВТ 				КАК тВТ,
			|	СкладыОтгрузки.СР 				КАК тСР,
			|	СкладыОтгрузки.ЧТ 				КАК тЧТ,
			|	СкладыОтгрузки.ПТ 				КАК тПТ,
			|	СкладыОтгрузки.СБ 				КАК тСБ,
			|	СкладыОтгрузки.ВС 				КАК тВС,
			|	
			|	СкладыОтгрузки.ВремяВыездаПН 	КАК тВремяВыездаПН,
			|	СкладыОтгрузки.ВремяВыездаВТ 	КАК тВремяВыездаВТ,
			|	СкладыОтгрузки.ВремяВыездаСР 	КАК тВремяВыездаСР,
			|	СкладыОтгрузки.ВремяВыездаЧТ 	КАК тВремяВыездаЧТ,
			|	СкладыОтгрузки.ВремяВыездаПТ 	КАК тВремяВыездаПТ,
			|	СкладыОтгрузки.ВремяВыездаСБ 	КАК тВремяВыездаСБ,
			|	СкладыОтгрузки.ВремяВыездаВС 	КАК тВремяВыездаВС
			|	
			|ПОМЕСТИТЬ МаршрутыКПолучателюТранзит	
			|ИЗ
			|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителяТранзит КАК МаршрутОтОтправителя
			|ПО МаршрутОтОтправителя.СкладТранзит = СкладыОтгрузки.Склад
	        |
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
			|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
			|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) = &Получатель
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита 
			|ПО	СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит	
			|И	СкладыТранзита.Склад  = СкладыОтгрузки.Склад
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
			|ПО	АдресаСкладаПолучателя.Склад = &Получатель
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаТранзита 
			|ПО	АдресаСкладаТранзита.Склад = СкладыОтгрузки.Склад 
	        |
			|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
			|ПО	АдресаСкладаОтправителя.Склад = &Отправитель 
	        |
			|ГДЕ
			|	АдресаСкладаОтправителя.Представление <> АдресаСкладаПолучателя.Представление
			|И   АдресаСкладаОтправителя.Представление <> АдресаСкладаТранзита.Представление 	
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	МаршрутыКПолучателюТранзит.СкладОтправитель,
			|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
			|	МаршрутыКПолучателюТранзит.СкладТранзит, 
			|	Минимум(ДОБАВИТЬКДАТЕ(
			|				ДОБАВИТЬКДАТЕ(
			|							КалендарныеГрафикиОтправителя.ДатаГрафика, ЧАС, ЧАС(	
			|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
			|																		КОГДА 1
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
			|																		КОГДА 2
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
			|																		КОГДА 3
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
			|																		КОГДА 4
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
			|																		КОГДА 5
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
			|																		КОГДА 6
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
			|																		КОГДА 7
			|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
			|																	КОНЕЦ
			|																	)
			|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
			|												КОГДА 1
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
			|												КОГДА 2
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
			|												КОГДА 3
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
			|												КОГДА 4
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
			|												КОГДА 5
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
			|												КОГДА 6
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
			|												КОГДА 7
			|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
			|											КОНЕЦ
			|											)
			|				)
			|			)	КАК ДатаВремяВыездаОтОтправителя
			|ПОМЕСТИТЬ ТаблицаПрибытияНаТранзитныйСклад
			|ИЗ
			|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
			|	
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиОтправителя
			|ПО	КалендарныеГрафикиОтправителя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаОтОтправителя
			|И	КалендарныеГрафикиОтправителя.ДатаГрафика  >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
			|И	КалендарныеГрафикиОтправителя.ДеньВключенВГрафик
			|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
			|		КОГДА 1
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.ПН
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 2
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.ВТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 3
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.СР
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 4
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.ЧТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 5
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.ПТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 6
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.СБ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 7
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.ВС
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|	КОНЕЦ)
	        |
			|ГДЕ
			|	&ДатаСеанса < КалендарныеГрафикиОтправителя.ДатаГрафика	
			|ИЛИ
			|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
			|									КОГДА 1
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
			|									КОГДА 2
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
			|									КОГДА 3
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
			|									КОГДА 4
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
			|									КОГДА 5
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
			|									КОГДА 6
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
			|									КОГДА 7
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
			|								КОНЕЦ
			|							 )
			|ИЛИ
			|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
			|									КОГДА 1
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
			|									КОГДА 2
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
			|									КОГДА 3
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
			|									КОГДА 4
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
			|									КОГДА 5
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
			|									КОГДА 6
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
			|									КОГДА 7
			|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
			|								КОНЕЦ
			|							 )
			|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
			|										КОГДА 1
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
			|										КОГДА 2
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
			|										КОГДА 3
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
			|										КОГДА 4
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
			|										КОГДА 5
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
			|										КОГДА 6
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
			|										КОГДА 7
			|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
			|									КОНЕЦ
			|								) 	
			|	)		
	        |
			|СГРУППИРОВАТЬ ПО
			|	МаршрутыКПолучателюТранзит.СкладОтправитель,
			|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
			|	МаршрутыКПолучателюТранзит.СкладТранзит
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	МаршрутыКПолучателюТранзит.СкладОтправитель,
			|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
			|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
			|	
			|	МаршрутыКПолучателюТранзит.СкладТранзит,
			|	
			|	МаршрутыКПолучателюТранзит.СкладПолучатель,
			|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю,
			|	Минимум(ДОБАВИТЬКДАТЕ(
			|				ДОБАВИТЬКДАТЕ(
			|							КалендарныеГрафикиПолучателя.ДатаГрафика, ЧАС, ЧАС(	
			|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
			|																		КОГДА 1
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
			|																		КОГДА 2
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
			|																		КОГДА 3
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
			|																		КОГДА 4
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
			|																		КОГДА 5
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
			|																		КОГДА 6
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
			|																		КОГДА 7
			|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
			|																	КОНЕЦ
			|																	)
			|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
			|												КОГДА 1
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
			|												КОГДА 2
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
			|												КОГДА 3
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
			|												КОГДА 4
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
			|												КОГДА 5
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
			|												КОГДА 6
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
			|												КОГДА 7
			|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
			|											КОНЕЦ
			|											)
			|				)
			|			)	КАК ДатаВремяВыездаКПолучателю
			|ПОМЕСТИТЬ ВариантыТранзитов		
			|ИЗ
			|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрибытияНаТранзитныйСклад КАК ТаблицаПрибытияНаТранзитныйСклад
			|ПО	ТаблицаПрибытияНаТранзитныйСклад.МаршрутОтОтправителя 	= МаршрутыКПолучателюТранзит.МаршрутОтОтправителя
			|И	ТаблицаПрибытияНаТранзитныйСклад.СкладТранзит 			= МаршрутыКПолучателюТранзит.СкладТранзит
	        |
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиПолучателя
			|ПО	КалендарныеГрафикиПолучателя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаКПолучателю
			|И	КалендарныеГрафикиПолучателя.ДатаГрафика  >= НачалоПериода(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя, День)
			|И	КалендарныеГрафикиПолучателя.ДеньВключенВГрафик
			|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
			|		КОГДА 1
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тПН
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 2
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тВТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 3
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тСР
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 4
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тЧТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 5
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тПТ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 6
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тСБ
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|		КОГДА 7
			|		ТОГДА 	ВЫБОР
			|					КОГДА МаршрутыКПолучателюТранзит.тВС
			|					ТОГДА Истина
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|	КОНЕЦ)
	        |
			|ГДЕ
			|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя < КалендарныеГрафикиПолучателя.ДатаГрафика	
			|ИЛИ
			|	ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
			|																					КОГДА 1
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
			|																					КОГДА 2
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
			|																					КОГДА 3
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
			|																					КОГДА 4
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
			|																					КОГДА 5
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
			|																					КОГДА 6
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
			|																					КОГДА 7
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
			|																				КОНЕЦ
			|																			 )
			|ИЛИ
			|	(ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
			|																					КОГДА 1
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
			|																					КОГДА 2
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
			|																					КОГДА 3
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
			|																					КОГДА 4
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
			|																					КОГДА 5
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
			|																					КОГДА 6
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
			|																					КОГДА 7
			|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
			|																				КОНЕЦ
			|																			 )
			|	И МИНУТА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
			|																							КОГДА 1
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
			|																							КОГДА 2
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
			|																							КОГДА 3
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
			|																							КОГДА 4
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
			|																							КОГДА 5
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
			|																							КОГДА 6
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
			|																							КОГДА 7
			|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
			|																						КОНЕЦ
			|																					) 	
			|	)		
	        |
			|СГРУППИРОВАТЬ ПО
			|	МаршрутыКПолучателюТранзит.СкладОтправитель,
			|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
			|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
			|	
			|	МаршрутыКПолучателюТранзит.СкладТранзит,
			|	
			|	МаршрутыКПолучателюТранзит.СкладПолучатель,
			|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	МИНИМУМ(ДатаВремяВыездаКПолучателю) КАК ДатаВремяВыездаКПолучателю
			|ПОМЕСТИТЬ КраткаяДоставкаТранзита
			|ИЗ
			|	ВариантыТранзитов
			|;
			////////////////////////////////////////////////////////////////////////////////
			//
			|ВЫБРАТЬ
			|	ВариантыТранзитов.СкладОтправитель,
			|	ВариантыТранзитов.МаршрутОтОтправителя КАК МаршрутТранзит,
			|	ПРЕДСТАВЛЕНИЕ(ВариантыТранзитов.МаршрутОтОтправителя) КАК МаршрутТранзитПредставление,
			|	ВариантыТранзитов.ДатаВремяВыездаОтОтправителя,
			|	ВариантыТранзитов.СкладТранзит КАК ТранзитныйСклад,
			|	ПРЕДСТАВЛЕНИЕ(ВариантыТранзитов.СкладТранзит) КАК ТранзитныйСкладПредставление,
			|	ВариантыТранзитов.СкладПолучатель,
			|	ВариантыТранзитов.МаршрутКПолучателю,
			|	ВариантыТранзитов.ДатаВремяВыездаКПолучателю		
			|ИЗ
			|	ВариантыТранзитов КАК ВариантыТранзитов
			|	
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КраткаяДоставкаТранзита КАК КраткаяДоставкаТранзита
			|ПО КраткаяДоставкаТранзита.ДатаВремяВыездаКПолучателю = ВариантыТранзитов.ДатаВремяВыездаКПолучателю
			|;";
			
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаРасчетДоставки()

Функция ПолучитьТекстЗапросИнформацияПоМесту()
	
	ТекстЗапроса = "
				|/////////////////////////////////////////////////////////////////////////////
				|// 0.
				|ВЫБРАТЬ
				|	Место КАК Место,
				|	Склад КАК СкладОтправитель
				|ПОМЕСТИТЬ ТаблицаОтправителей
				|ИЗ
				|	РегистрСведений.ОтгрузкаМест
				|ГДЕ
				|	Место 	 		 = &Место
				|	И СтатусОтгрузки = &Статус
				|;
				|
				|/////////////////////////////////////////////////////////////////////////////
				|// 1.
				|ВЫБРАТЬ
				|	МестаДоставки.Код КАК Код,
				|	МестаДоставки.Ответственный.Представление КАК Ответственный,
				|	ТаблицаОтправителей.СкладОтправитель.Представление КАК Отправитель,
				|	ВЫБОР
				|		КОГДА МестаДоставки.Владелец ССЫЛКА Справочник.Склады
				|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.Владелец КАК Справочник.Склады).Представление
				|		КОГДА МестаДоставки.Владелец ССЫЛКА Справочник.Партнеры
				|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.Владелец КАК Справочник.Партнеры).Представление
				|	КОНЕЦ КАК Получатель,
				|   МестаДоставки.Транзит					КАК Транзит
				|ИЗ
				|	Справочник.МестаДоставки КАК МестаДоставки
				|		
				|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтправителей КАК ТаблицаОтправителей
				|ПО МестаДоставки.Ссылка = ТаблицаОтправителей.Место
				|
				|ГДЕ
				|	МестаДоставки.Ссылка = &Место
				|	И НЕ МестаДоставки.Транзит
				|
				|ОБЪЕДИНИТЬ 
				|
				|ВЫБРАТЬ
				|	МестаДоставки.Код,
				|	МестаДоставки.Ответственный.Представление,
				|	ТаблицаОтправителей.СкладОтправитель.Представление,
				|	ВЫБОР
				|		КОГДА Назначения.Заказ ССЫЛКА Документ.ЗаказНаПеремещение
				|			ТОГДА ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказНаПеремещение).СкладПолучатель.Представление
				|		КОГДА Назначения.Заказ ССЫЛКА Документ.ЗаказКлиента
				|			ТОГДА ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказКлиента).Склад.Представление
				|		КОГДА Назначения.Заказ ССЫЛКА Документ.ЗаказНаВнутреннееПотребление
				|			ТОГДА ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказНаВнутреннееПотребление).Склад.Представление
				|		КОГДА Назначения.Заказ ССЫЛКА Документ.ЗаказНаСборку
				|			ТОГДА ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказНаСборку).Склад.Представление
				|		КОГДА Назначения.Заказ ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
				|			ТОГДА ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.Представление
				|	КОНЕЦ,
				|   МестаДоставки.Транзит					КАК Транзит
				|ИЗ
				|	Справочник.МестаДоставки КАК МестаДоставки
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтправителей КАК ТаблицаОтправителей
				|		ПО МестаДоставки.Ссылка = ТаблицаОтправителей.Место
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
				|		ПО МестаДоставки.Назначение = Назначения.Ссылка
				|ГДЕ
				|	МестаДоставки.Ссылка = &Место
				|	И МестаДоставки.Транзит
				|;
				|/////////////////////////////////////////////////////////////////////////////
				|// 2.
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
				|		КОГДА Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
				|	КОНЕЦ КАК Документ
				|ПОМЕСТИТЬ ДокументыПредварительные
				|ИЗ
				|	РегистрСведений.МестаПоДокументам
				|ГДЕ
				|	Место = &Место
				|;
				|
				|/////////////////////////////////////////////////////////////////////////////
				|// 3.
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Документ ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВнутреннееПотреблениеТоваров)
				|		КОГДА Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВозвратТоваровПоставщику)
				|		КОГДА Документ ССЫЛКА Документ.ПеремещениеТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПеремещениеТоваров)
				|		КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг)
				|		КОГДА Документ ССЫЛКА Документ.СборкаТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.СборкаТоваров)
				|	КОНЕЦ КАК Документ,
				|	ВЫБОР
				|		КОГДА Документ ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВнутреннееПотреблениеТоваров).Представление
				|		КОГДА Документ ССЫЛКА Документ.ВозвратТоваровПоставщику
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ВозвратТоваровПоставщику).Представление
				|		КОГДА Документ ССЫЛКА Документ.ПеремещениеТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПеремещениеТоваров).Представление
				|		КОГДА Документ ССЫЛКА Документ.РеализацияТоваровУслуг
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг).Представление
				|		КОГДА Документ ССЫЛКА Документ.СборкаТоваров
				|			ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.СборкаТоваров).Представление
				|	КОНЕЦ КАК ПредставлениеДокумента
				|ИЗ
				|	ДокументыПредварительные
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗаказНаПеремещение,
				|	ЗаказНаПеремещение.Представление
				|ИЗ
				|	Справочник.МестаДоставки
				|ГДЕ
				|	Ссылка = &Место
				|;
				|
				|/////////////////////////////////////////////////////////////////////////////
				|// 4.
				|ВЫБРАТЬ
				|	Период 							КАК Период,
				|	ВариантМаршрута.Представление 	КАК Маршрут,
				|	Склад.Представление 			КАК Склад,
				|	Пользователь.Представление 		КАК Пользователь,
				|	СтатусОтгрузки 					КАК Статус,
				|	"""" 							КАК Комментарий,
				|	"""" 							КАК НомерПоездки
				|ПОМЕСТИТЬ СостоянияМеста
				|ИЗ
				|	РегистрСведений.ОтгрузкаМест
				|ГДЕ
				|	Место = &Место
				|    
				|ОБЪЕДИНИТЬ ВСЕ
				|               
				|ВЫБРАТЬ
				|	Период,
				|	ДокументПоездки.ВариантМаршрута,
				|	""Хюстон"",
				|	Ответственный.Представление,
				|	""Удалено из поездки"",
				|	Комментарий,
				|	ДокументПоездки.Номер
				|ИЗ
				|	РегистрСведений.КТС_ПричиныУдаленияМестаИзПоездки
				|ГДЕ
				|	МестоДоставки = &Место
				|;
				|/////////////////////////////////////////////////////////////////////////////
				|// 5. 
				|
				|ВЫБРАТЬ
				|	Период КАК Период,
				|	Маршрут,
				|	Склад,
				|	Пользователь,
				|	Статус,
				|	Комментарий,
				|   НомерПоездки
				|
				|ИЗ
				|	СостоянияМеста

				|УПОРЯДОЧИТЬ ПО
				|	Период
				|;  
				|
				|/////////////////////////////////////////////////////////////////////////////
				|// 6.
				|ВЫБРАТЬ
				|   Номенклатура				КАК Номенклатура,
				|	Номенклатура.Представление	КАК НоменклатураПредставление,
				|	Количество          		КАК	Количество
				|ИЗ
				|	РегистрСведений.МестаНоменклатуры
				|ГДЕ
				|	Место = &Место";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросИнформацияПоМесту()

Функция ПолучитьТекстЗапросаИнформацияПоЗадаче()
	
	ТекстЗапроса = "///////////////////////////////////////////////////////////////////////////////
					|//0.
					|ВЫБРАТЬ
					|	ЗадачиНаМаршрутСрезПервых.Место.Код КАК Код,
					|	ЗадачиНаМаршрутСрезПервых.Место.Ответственный.Представление КАК Ответственный,
					|	ВЫБОР
					|		КОГДА ЗадачиНаМаршрутСрезПервых.Отправитель ССЫЛКА Справочник.Склады
					|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПервых.Отправитель КАК Справочник.Склады).Представление
					|		КОГДА ЗадачиНаМаршрутСрезПервых.Отправитель ССЫЛКА Справочник.Партнеры
					|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПервых.Отправитель КАК Справочник.Партнеры).Представление
					|	КОНЕЦ КАК Отправитель,
					|	ВЫБОР
					|		КОГДА ЗадачиНаМаршрутСрезПервых.Место.Владелец ССЫЛКА Справочник.Склады
					|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПервых.Место.Владелец КАК Справочник.Склады).Представление
					|		КОГДА ЗадачиНаМаршрутСрезПервых.Место.Владелец ССЫЛКА Справочник.Партнеры
					|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрутСрезПервых.Место.Владелец КАК Справочник.Партнеры).Представление
					|	КОНЕЦ КАК Получатель,
					|	ЗадачиНаМаршрутСрезПервых.Место.ТекстЗадачи КАК ТекстЗадачи,
					|   ЗадачиНаМаршрутСрезПервых.Место.Транзит					КАК Транзит
					|ИЗ
					|	РегистрСведений.ЗадачиНаМаршрут.СрезПервых(, Место = &Задача) КАК ЗадачиНаМаршрутСрезПервых
					|;
					|					
					|////////////////////////////////////////////////////////////////////////////////
					|//1.
					|ВЫБРАТЬ
					|	ЗадачиНаМаршрут.Период КАК Период,
					|	ЗадачиНаМаршрут.ВариантМаршрута.Представление КАК Маршрут,
					|	ЗадачиНаМаршрут.СтатусОтгрузки КАК Статус,
					|	ЗадачиНаМаршрут.Пользователь.Представление КАК Пользователь,
					|	ВЫБОР
					|		КОГДА ЗадачиНаМаршрут.Отправитель ССЫЛКА Справочник.Склады
					|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрут.Отправитель КАК Справочник.Склады).Представление
					|		КОГДА ЗадачиНаМаршрут.Отправитель ССЫЛКА Справочник.Партнеры
					|			ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрут.Отправитель КАК Справочник.Партнеры).Представление
					|	КОНЕЦ КАК Отправитель,
					|   """" КАК Комментарий,
					|   """" КАК НомерПоездки
					|
					|ПОМЕСТИТЬ СостоянияМеста
					|            
					|ИЗ
					|	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут
					|ГДЕ
					|	ЗадачиНаМаршрут.Место = &Задача
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|      
					|ВЫБРАТЬ
					|	КТС_ПричиныУдаленияМестаИзПоездки.Период,
					|	КТС_ПричиныУдаленияМестаИзПоездки.ДокументПоездки.ВариантМаршрута,
					|	""Удалено из поездки"",
					|	КТС_ПричиныУдаленияМестаИзПоездки.Ответственный.Представление,
					|	""Хюстон"",
					|	КТС_ПричиныУдаленияМестаИзПоездки.Комментарий,
					|	КТС_ПричиныУдаленияМестаИзПоездки.ДокументПоездки.Номер
					|ИЗ
					|	РегистрСведений.КТС_ПричиныУдаленияМестаИзПоездки КАК КТС_ПричиныУдаленияМестаИзПоездки
					|ГДЕ
					|	КТС_ПричиныУдаленияМестаИзПоездки.МестоДоставки = &Задача
					|; 
					|
					|////////////////////////////////////////////////////////////////////////////////
					|//2.
					|ВЫБРАТЬ
					|	СостоянияМеста.Период КАК Период,
					|	СостоянияМеста.Маршрут,
					|	СостоянияМеста.Отправитель,
					|	СостоянияМеста.Пользователь,
					|	СостоянияМеста.Статус,
					|	СостоянияМеста.Комментарий,
					|   НомерПоездки
					|ИЗ
					|	СостоянияМеста КАК СостоянияМеста
					|             
					|УПОРЯДОЧИТЬ ПО
					|	Период
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|//3.
					|ВЫБРАТЬ
					|	МестаДоставкиТовары.ЗаявкаСЦ КАК Документ,
					|	МестаДоставкиТовары.ЗаявкаСЦ.Представление КАК ПредставлениеДокумента
					|ИЗ
					|	Справочник.МестаДоставки.Товары КАК МестаДоставкиТовары
					|ГДЕ
					|	МестаДоставкиТовары.Ссылка = &Задача
					|   И МестаДоставкиТовары.ЗаявкаСЦ = Значение(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)
					|
					|ОБЪЕДИНИТЬ
					|
					|ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА МестаДоставки.ДокументОснования ССЫЛКА Документ.ГНАТ_ЗаявкаСервисногоЦентра
					|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.ДокументОснования КАК Документ.ГНАТ_ЗаявкаСервисногоЦентра)
					|		КОГДА МестаДоставки.ДокументОснования ССЫЛКА Документ.ЗаказПоставщику
					|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.ДокументОснования КАК Документ.ЗаказПоставщику)
					|		КОГДА МестаДоставки.ДокументОснования ССЫЛКА Документ.РеализацияТоваровУслуг
					|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.ДокументОснования КАК Документ.РеализацияТоваровУслуг)
					|	КОНЕЦ,
					|	ВЫБОР
					|		КОГДА МестаДоставки.ДокументОснования ССЫЛКА Документ.ГНАТ_ЗаявкаСервисногоЦентра
					|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.ДокументОснования КАК Документ.ГНАТ_ЗаявкаСервисногоЦентра).Представление
					|		КОГДА МестаДоставки.ДокументОснования ССЫЛКА Документ.ЗаказПоставщику
					|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.ДокументОснования КАК Документ.ЗаказПоставщику).Представление
					|		КОГДА МестаДоставки.ДокументОснования ССЫЛКА Документ.РеализацияТоваровУслуг
					|			ТОГДА ВЫРАЗИТЬ(МестаДоставки.ДокументОснования КАК Документ.РеализацияТоваровУслуг).Представление
					|	КОНЕЦ
					|ИЗ
					|	Справочник.МестаДоставки КАК МестаДоставки
					|ГДЕ
					|	МестаДоставки.Ссылка = &Задача
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|//4.
					|ВЫБРАТЬ
					|	МестаДоставкиТовары.Номенклатура,
					|	Номенклатура.Представление	КАК НоменклатураПредставление,
					|	МестаДоставкиТовары.Количество
					|ИЗ
					|	Справочник.МестаДоставки.Товары КАК МестаДоставкиТовары
					|ГДЕ
					|	МестаДоставкиТовары.Ссылка = &Задача";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацияПоЗадаче()

Функция ПолучитьТекстЗапросаТранзитноеМесто()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	СУММА(Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Номенклатура.ИспользоватьСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика,
	|	КОЛИЧЕСТВО(СерийныйНомер) КАК КоличествоНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Склад = &Склад
	|	И Место = &Место
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатура.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	(ТаблицаНоменклатура.Количество - ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоНомеров, 0)) * -1 КАК Количество
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийныхНомеров КАК ТаблицаСерийныхНомеров
	|		ПО ТаблицаНоменклатура.Номенклатура = ТаблицаСерийныхНомеров.Номенклатура
	|			И ТаблицаНоменклатура.Характеристика = ТаблицаСерийныхНомеров.Характеристика
	|ГДЕ
	|	(ТаблицаНоменклатура.Количество - ЕСТЬNULL(ТаблицаСерийныхНомеров.КоличествоНомеров, 0))<>0";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаТранзитноеМесто()

Функция ТекстЗапросаОрдераПродажиИнтернетМагазина()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Ссылка КАК Ордер,
			|	Распоряжение КАК ДокументРеализации
			|ПОМЕСТИТЬ КешРеализации
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары
			|ГДЕ
			|	Ссылка В (&МассивДокументов)
			|	И Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
			|;
			|
			|ВЫБРАТЬ
			|	КешРеализации.Ордер КАК Документ
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешРеализации
			|		ПО КешРеализации.ДокументРеализации.ЗаказКлиента = ЗаказКлиента.Ссылка
			|			И ЗаказКлиента.Подразделение = &Подразделение";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаОрдераПродажиИнтернетМагазина()

Функция ТекстЗапросаПродажиИнтернетМагазинаБезОрдера()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка КАК Документ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг
		|ГДЕ
		|	Ссылка В (&МассивДокументов)
		|	И ЗаказКлиента.Подразделение = &Подразделение";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПродажиИнтернетМагазинаБезОрдера()

Функция ПолучитьТекстЗапросаОтгрузки(ОрдерныйСклад=Истина, Назначение=Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество
	|ПОМЕСТИТЬ ПодборНоменклатуры
	|ИЗ
	|	РегистрСведений.МестаНоменклатуры
	|ГДЕ
	|	Место = &Место
	|;
	|
	|ВЫБРАТЬ
	|	Документ КАК Документ
	|ПОМЕСТИТЬ КешДокументы
	|ИЗ
	|	РегистрСведений.МестаПоДокументам
	|ГДЕ
	|	Место = &Место
	|	И Не СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|;
	|";
	
	Если ОрдерныйСклад Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.СобраноОстаток КАК Количество,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВнутреннееПотреблениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВозвратТоваровПоставщику).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПеремещениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.СборкаТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.СборкаТоваров).Дата
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ОтгрузкаПоПолучателям
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			ДокументОтгрузки НЕ В (ВЫБРАТЬ Документ ИЗ КешДокументы)
		|			И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						Номенклатура КАК Номенклатура,
		|						Характеристика КАК Характеристика
		|					ИЗ
		|						ПодборНоменклатуры)
		|				И Склад = &Склад) КАК ТоварыКОтгрузке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК ДокументыПоМаршрутам
		|           ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыПоМаршрутам.Регистратор
		|				И 
		|					ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|							ТОГДА ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|						ИНАЧЕ ДокументыПоМаршрутам.Перевозчик = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|							И ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика
		|				    КОНЕЦ
		|ГДЕ
		|	КОтгрузкеОстаток <> СобраноОстаток 
		|;
		|";
	Иначе
		Если ЗначениеЗаполнено(Назначение) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Ссылка
			|ПОМЕСТИТЬ КешДопустимыеДокументы
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары
			|ГДЕ
			|	Ссылка.Проведен
			|	И Назначение = &Назначение
			|;";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.КоличествоОстаток КАК Количество,
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПеремещениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПеремещениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВнутреннееПотреблениеТоваров
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВнутреннееПотреблениеТоваров).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ВозвратТоваровПоставщику).Дата
		|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Дата
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ОтгрузкаПоПолучателям
		|ИЗ
		|	РегистрНакопления.КТС_ОтгрузкаИзБезордерныхСкладов.Остатки(
		|			,
		|			ДокументОтгрузки НЕ В (ВЫБРАТЬ Документ ИЗ КешДокументы)
		|			" + ?(ЗначениеЗаполнено(Назначение), "И ДокументОтгрузки В (ВЫБРАТЬ Ссылка ИЗ КешДопустимыеДокументы)", "") + "
		|			И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						Номенклатура КАК Номенклатура,
		|						Характеристика КАК Характеристика
		|					ИЗ
		|						ПодборНоменклатуры)
		|				И Склад = &Склад) КАК ТоварыКОтгрузке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК ДокументыПоМаршрутам
		|           ПО ТоварыКОтгрузке.ДокументОтгрузки = ДокументыПоМаршрутам.Регистратор
		|				И 
		|					ВЫБОР
		|						КОГДА ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|							ТОГДА ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|						ИНАЧЕ ДокументыПоМаршрутам.Перевозчик = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).Владелец
		|							И ДокументыПоМаршрутам.Получатель = ВЫРАЗИТЬ(&Место КАК Справочник.МестаДоставки).ПолучательЧерезПеревозчика
		|				    КОНЕЦ
		|;
		|";			
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгрузкаПоПолучателям.Номенклатура КАК Номенклатура,
	|	ОтгрузкаПоПолучателям.Характеристика КАК Характеристика,
	|	СУММА(ОтгрузкаПоПолучателямКопия.Количество) КАК КоличествоПосле,
	|	СУММА(ОтгрузкаПоПолучателямКопия.Количество) - ОтгрузкаПоПолучателям.Количество КАК КоличествоДо,
	|	ОтгрузкаПоПолучателям.ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ КоличествоНаростающее
	|ИЗ
	|	ОтгрузкаПоПолучателям КАК ОтгрузкаПоПолучателям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтгрузкаПоПолучателям КАК ОтгрузкаПоПолучателямКопия
	|		ПО ОтгрузкаПоПолучателям.Номенклатура = ОтгрузкаПоПолучателямКопия.Номенклатура
	|			И ОтгрузкаПоПолучателям.Характеристика = ОтгрузкаПоПолучателямКопия.Характеристика
	|			И (ВЫБОР
	|				КОГДА ОтгрузкаПоПолучателям.Дата = ОтгрузкаПоПолучателямКопия.Дата
	|					ТОГДА ОтгрузкаПоПолучателям.ДокументОтгрузки >= ОтгрузкаПоПолучателямКопия.ДокументОтгрузки
	|				ИНАЧЕ ОтгрузкаПоПолучателям.Дата >= ОтгрузкаПоПолучателямКопия.Дата
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгрузкаПоПолучателям.Номенклатура,
	|	ОтгрузкаПоПолучателям.Характеристика,
	|	ОтгрузкаПоПолучателям.ДокументОтгрузки,
	|	ОтгрузкаПоПолучателям.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоНаростающее.ДокументОтгрузки КАК ДокументОтгрузки,
	|	КоличествоНаростающее.Номенклатура КАК Номенклатура,
	|	КоличествоНаростающее.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА КоличествоНаростающее.КоличествоПосле < ПодборНоменклатуры.Количество
	|			ТОГДА КоличествоНаростающее.КоличествоПосле - КоличествоНаростающее.КоличествоДо
	|		ИНАЧЕ ПодборНоменклатуры.Количество - КоличествоНаростающее.КоличествоДо
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА КоличествоНаростающее.КоличествоПосле < ПодборНоменклатуры.Количество
	|			ТОГДА КоличествоНаростающее.КоличествоПосле - КоличествоНаростающее.КоличествоДо
	|		ИНАЧЕ ПодборНоменклатуры.Количество - КоличествоНаростающее.КоличествоДо
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ПредварительныйРезультат
	|ИЗ
	|	КоличествоНаростающее КАК КоличествоНаростающее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодборНоменклатуры КАК ПодборНоменклатуры
	|		ПО КоличествоНаростающее.Номенклатура = ПодборНоменклатуры.Номенклатура
	|			И КоличествоНаростающее.Характеристика = ПодборНоменклатуры.Характеристика		
	|;
	|
	|ВЫБРАТЬ
	|	ДокументОтгрузки КАК ДокументОтгрузки,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Количество КАК Количество,
	|	КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ПредварительныйРезультат
	|ГДЕ
	|	Количество > 0
	|
	|ИТОГИ ПО
	|	ДокументОтгрузки";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСоздатьОрдера()

Функция ТекстЗапросаСерийныеНомераПоМесту()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	РегистрСведений.МестаСерийныеНомераНоменклатуры
	|ГДЕ
	|	Место = &Место
	|	И Склад = &Склад
	|ИТОГИ ПО
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСерийныеНомера()

Функция ТекстЗапросаМаршрутМеждуДвомаСкладами()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Маршрут
	               |ПОМЕСТИТЬ АктивныеМаршруты
	               |ИЗ
	               |	Справочник.ВариантыМаршрутов
	               |ГДЕ
	               |	НеАктивен = ЛОЖЬ
	               |	И ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктивныеМаршруты.Маршрут КАК Маршрут
	               |ПОМЕСТИТЬ ДопустимыеМаршруты
	               |ИЗ
	               |	АктивныеМаршруты КАК АктивныеМаршруты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.ВозвратнаяДоставка КАК ВариантыМаршрутовВозвратнаяДоставка
	               |		ПО АктивныеМаршруты.Маршрут = ВариантыМаршрутовВозвратнаяДоставка.Ссылка
	               |ГДЕ
	               |	ВариантыМаршрутовВозвратнаяДоставка.СкладОтправитель = &СкладОтправитель
	               |	И ВариантыМаршрутовВозвратнаяДоставка.СкладПолучатель = &СкладПолучатель
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	АктивныеМаршруты.Маршрут
	               |ИЗ
	               |	АктивныеМаршруты КАК АктивныеМаршруты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК ВариантыМаршрутовСписокАдресов
	               |		ПО АктивныеМаршруты.Маршрут = ВариантыМаршрутовСписокАдресов.Ссылка
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(ВариантыМаршрутовСписокАдресов.ГородСклад КАК Справочник.Склады)) = &СкладПолучатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДопустимыеМаршруты.Маршрут,
	               |	ВариантыМаршрутовСкладыОтгрузки.ПН,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеПН,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВТ,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеВТ,
	               |	ВариантыМаршрутовСкладыОтгрузки.СР,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеСР,
	               |	ВариантыМаршрутовСкладыОтгрузки.ЧТ,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеЧТ,
	               |	ВариантыМаршрутовСкладыОтгрузки.ПТ,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеПТ,
	               |	ВариантыМаршрутовСкладыОтгрузки.СБ,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеСБ,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВС,
	               |	ВариантыМаршрутовСкладыОтгрузки.ВремяКОтгрузкеВС
	               |ПОМЕСТИТЬ ВремяОтгрузкиМаршрутов
	               |ИЗ
	               |	ДопустимыеМаршруты КАК ДопустимыеМаршруты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК ВариантыМаршрутовСкладыОтгрузки
	               |		ПО ДопустимыеМаршруты.Маршрут = ВариантыМаршрутовСкладыОтгрузки.Ссылка
	               |ГДЕ
	               |	ВариантыМаршрутовСкладыОтгрузки.Склад = &СкладОтправитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 1
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеПН, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 1)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 1
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеПН, ДЕНЬ, 1 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеПН
	               |	КОНЕЦ КАК ВремяОтгрузки
	               |ПОМЕСТИТЬ РасчетнаяОтгрузка
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.ПН = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 2
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеВТ, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 2)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 2
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеВТ, ДЕНЬ, 2 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеВТ
	               |	КОНЕЦ
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.ВТ = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 3
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеСР, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 3)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 3
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеСР, ДЕНЬ, 3 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеСР
	               |	КОНЕЦ
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.СР = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 4
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеЧТ, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 4)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 4
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеЧТ, ДЕНЬ, 4 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеЧТ
	               |	КОНЕЦ
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.ЧТ = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 5
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеПТ, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 5)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 5
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеПТ, ДЕНЬ, 5 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеПТ
	               |	КОНЕЦ
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.ПТ = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 6
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеСБ, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 6)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 6
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеСБ, ДЕНЬ, 6 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеСБ
	               |	КОНЕЦ
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.СБ = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВремяОтгрузкиМаршрутов.Маршрут,
	               |	ВЫБОР
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) > 7
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеВС, ДЕНЬ, ДЕНЬНЕДЕЛИ(&ТекущаяДата) + 7)
	               |		КОГДА ДЕНЬНЕДЕЛИ(&ТекущаяДата) < 7
	               |			ТОГДА ДОБАВИТЬКДАТЕ(ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеВС, ДЕНЬ, 7 - ДЕНЬНЕДЕЛИ(&ТекущаяДата))
	               |		ИНАЧЕ ВремяОтгрузкиМаршрутов.ВремяКОтгрузкеВС
	               |	КОНЕЦ
	               |ИЗ
	               |	ВремяОтгрузкиМаршрутов КАК ВремяОтгрузкиМаршрутов
	               |ГДЕ
	               |	ВремяОтгрузкиМаршрутов.ВС = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(РасчетнаяОтгрузка.ВремяОтгрузки) КАК ВремяОтгрузки
	               |ПОМЕСТИТЬ ПервыеОтгрузки
	               |ИЗ
	               |	РасчетнаяОтгрузка КАК РасчетнаяОтгрузка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетнаяОтгрузка.Маршрут
	               |ИЗ
	               |	ПервыеОтгрузки КАК ПервыеОтгрузки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасчетнаяОтгрузка КАК РасчетнаяОтгрузка
	               |		ПО ПервыеОтгрузки.ВремяОтгрузки = РасчетнаяОтгрузка.ВремяОтгрузки";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаМаршрутДляСозданияМеста()
 




// ФУНКЦИИ ПРОВЕРКИ ПАРАМЕТРОВ ПРОЦЕДУР И ФУНКЦИЙ

Функция ПроверитьПараметрыЗаписиОтгрузкиМест(ПараметрыЗаписи)

	Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места отгрузки. <ПараметрЗаписи> должен иметь тип структура.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Место") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Не задано свойство <Место>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Склад") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Не задано свойство <Склад>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ВариантМаршрута") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Не задано свойство <ВариантМаршрута>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("СтатусОтгрузки") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Не задано свойство <СтатусОтгрузки>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Пользователь") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Не задано свойство <Пользователь>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ТипЗнч(ПараметрыЗаписи.Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Свойство <Место> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.Склад) <> Тип("СправочникСсылка.Склады") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Свойство <Склад> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.ВариантМаршрута) <> Тип("СправочникСсылка.ВариантыМаршрутов") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Свойство <ВариантМаршрута> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.СтатусОтгрузки) <> Тип("ПеречислениеСсылка.СтатусыОтгрузкиМест") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Свойство <СтатусОтгрузки> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр записи места отгрузки. Свойство <Пользователь> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыЗаписиОтгрузкиМест()

Функция ПроверитьПараметрыКомплектации(ПараметрыКомплектации)

	Если ТипЗнч(ПараметрыКомплектации) <> Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры комплектации. <ПараметрыКомплектации> должен иметь тип структура.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыКомплектации.Свойство("Место") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Не задано свойство <Место>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыКомплектации.Свойство("Склад") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Не задано свойство <Склад>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыКомплектации.Свойство("Маршрут") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Не задано свойство <Маршрут>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыКомплектации.Свойство("Пользователь") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Не задано свойство <Пользователь>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ТипЗнч(ПараметрыКомплектации.Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Свойство <Место> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыКомплектации.Склад) <> Тип("СправочникСсылка.Склады") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Свойство <Склад> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыКомплектации.Маршрут) <> Тип("СправочникСсылка.ВариантыМаршрутов") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Свойство <Маршрут> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыКомплектации.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметр параметр комплектации. Свойство <Пользователь> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыКомплктации()

Функция ПроверитьПараметрыПроцедурыСборкиМеста(ПараметрыДанных)

	Если ТипЗнч(ПараметрыДанных) <> Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. <ПараметрыДанных> должен иметь тип структура.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	//Если Не ПараметрыДанных.Свойство("ДокументОтгрузки") Тогда
	//	ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <ДокументОтгрузки>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если Не ПараметрыДанных.Свойство("СкладОтправитель") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <СкладОтправитель>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыДанных.Свойство("СкладПолучатель") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <СкладПолучатель>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыДанных.Свойство("Номенклатура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <Номенклатура>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыДанных.Свойство("Количество") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <Количество>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыДанных.Свойство("Ответственный") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <Ответственный>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыДанных.Свойство("СерийныеНомера") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не удалось найти свойство <СерийныеНомера>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыДанных.Свойство("Назначение") И ТипЗнч(ПараметрыДанных.Назначение) <> Тип("СправочникСсылка.Назначения") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <Назначение>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров"));
	//МассивТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	//МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	//МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	//МассивТипов.Добавить(Тип("ДокументСсылка.СборкаТоваров"));
	//
	//Если МассивТипов.Найти(ТипЗнч(ПараметрыДанных.ДокументОтгрузки)) = Неопределено Тогда
	//	ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <ДокументОтгрузки>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ТипЗнч(ПараметрыДанных.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <Номенклатура>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДанных.Количество) <> Тип("Число") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <Количество>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДанных.Ответственный) <> Тип("СправочникСсылка.Пользователи") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <Ответственный>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДанных.СкладОтправитель) <> Тип("СправочникСсылка.Склады") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <СкладОтправитель>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДанных.СкладПолучатель) <> Тип("СправочникСсылка.Склады") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <СкладПолучатель>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДанных.СерийныеНомера) <> Тип("ТаблицаЗначений") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип свойства <ТаблицаЗначений>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	КолонкаТаблицы = ПараметрыДанных.СерийныеНомера.Колонки.Найти("СерийныйНомер");
	Если КолонкаТаблицы = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не найдена колонка таблицы <СерийныйНомер>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если КолонкаТаблицы.ТипЗначения.Типы().Найти(Тип("СправочникСсылка.СерийныеНомераНоменклатуры")) = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать место по документу. Не правильно задан тип колонки <СерийныйНомер>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыПроцедурыСборкиМеста()

Функция ПроверитьПараметрыЗаписиМестаНоменклатуры(ПараметрыЗаписи)

	Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. <ПараметрЗаписи> должен иметь тип структура.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Если Не ПараметрыЗаписи.Свойство("Место") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. Не задано свойство <Место>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Номенклатура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. Не задано свойство <Номенклатура>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Количество") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. Не задано свойство <Количество>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ТипЗнч(ПараметрыЗаписи.Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. Свойство <Место> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. Свойство <Номенклатура> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.Количество) <> Тип("Число") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи места номенклатуры. Свойство <Количество> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыПроцедуры()

Функция ПроверитьПараметрыЗаписиСерийногоНомераНоменклатуры(ПараметрыЗаписи)

	Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. <ПараметрЗаписи> должен иметь тип структура.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Если Не ПараметрыЗаписи.Свойство("Место") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Не задано свойство <Место>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Склад") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Не задано свойство <Склад>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Номенклатура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Не задано свойство <Номенклатура>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("СерийныйНомер") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Не задано свойство <СерийныйНомер>.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ТипЗнч(ПараметрыЗаписи.Место) <> Тип("СправочникСсылка.МестаДоставки") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Свойство <Место> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Свойство <Номенклатура> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.Склад) <> Тип("СправочникСсылка.Склады") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Свойство <Склад> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи.СерийныйНомер) <> Тип("СправочникСсылка.СерийныеНомераНоменклатуры") Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить параметры записи серийного номера номенклатуры места. Свойство <СерийныйНомер> имеет неверный тип.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ПроверитьПараметрыЗаписиСерийногоНомераНоменклатуры()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "0.0.12";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Библиотека менеджера места доставки");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

	
    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Библиотека менеджера места доставки [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Библиотека менеджера места доставки [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "БММД");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
