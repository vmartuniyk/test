
#Область ПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка) Экспорт
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПоездкаЗаМаршрутом") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументСсылка.Проведен
	 ИЛИ ДокументСсылка.СтатусПоездки = Перечисления.КТС_СтатусыПоездки.Завершена Тогда
		Возврат;
	КонецЕсли;
	
	

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоездки(ДокументСсылка);	
	Запрос.УстановитьПараметр("ДатаДокумента", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("НачалоДняДокумента", НачалоДня(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВариантМаршрута", ДокументСсылка.ВариантМаршрута);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформацииАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформацииАдресСклада", Справочники.ВидыКонтактнойИнформации.АдресСклада);
	РезультатПакета = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатПакета[ПолучитьИндексРезультатаПакетаПоездки(ДокументСсылка)];
	
	// Расчет мест
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Блокировка = Новый БлокировкаДанных;
		ПоездкаЗаМаршрутом 		 = Блокировка.Добавить("РегистрСведений.ПоездкаЗаМаршрутом");
		ПоездкаЗаМаршрутом.Режим = РежимБлокировкиДанных.Исключительный;
		ПоездкаЗаМаршрутом.ИсточникДанных = РезультатЗапроса;
		ПоездкаЗаМаршрутом.ИспользоватьИзИсточникаДанных("ДокументПоездки", "ДокументПоездки");		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;		
		КонецПопытки;
		
		ТаблицаДляЗаписи = РезультатЗапроса.Выгрузить();
		Для каждого Строка Из ТаблицаДляЗаписи Цикл
			Строка.OwnerGeoGUID 		= Строка(Строка.OwnerGeoLocation.УникальныйИдентификатор());	
		    Строка.IsPartner			= ТипЗнч(Строка.Owner) = Тип("СправочникСсылка.Партнеры");
			Строка.GUID					= Строка(Строка.МестоДоставки.УникальныйИдентификатор());
			Строка.ManualCode			= Число(Строка.Код);
			Строка.ОтправительGeoGUID   = Строка(Строка.ОтправительGeoLocation.УникальныйИдентификатор());		
		КонецЦикла; 
		
		НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПоездки.Установить(ДокументСсылка);
		НаборЗаписей.Загрузить(ТаблицаДляЗаписи);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ИнициализироватьОплатыДокумента(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПоездкаЗаМаршрутом") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументСсылка.Проведен ИЛИ ДокументСсылка.СтатусПоездки = Перечисления.КТС_СтатусыПоездки.Завершена Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВыезда 		= ПолучитьДатуВыезда(ДокументСсылка);
	КонецСегодня    = КонецДня(ДокументСсылка.Дата) + 1;
	
	Если ДатаВыезда >= КонецСегодня Тогда
		КонецСегодня = ДатаВыезда+1;
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ПолучитьТекстЗапросаСуммаОплат();
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументСсылка);
	Запрос.УстановитьПараметр("КонецСегодня", КонецСегодня);
	Запрос.УстановитьПараметр("ДатаВыезда", ДатаВыезда);	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Расчет суммы, которую нужно забрать в партнера
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ПоездкаЗаМаршрутом 		 = Блокировка.Добавить("РегистрСведений.ПоездкаЗаМаршрутомФинансы");
	ПоездкаЗаМаршрутом.Режим = РежимБлокировкиДанных.Исключительный;
	ПоездкаЗаМаршрутом.ИсточникДанных = РезультатЗапроса;
	ПоездкаЗаМаршрутом.ИспользоватьИзИсточникаДанных("ДокументПоездки", "ДокументПоездки");		
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат;		
	КонецПопытки;

		
	BalanceCode = ПолучитьBalanceCode(ДокументСсылка); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
			
		НаборЗаписей = РегистрыСведений.ПоездкаЗаМаршрутомФинансы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументПоездки.Установить(Выборка.ДокументПоездки);
		НаборЗаписей.Отбор.Партнер.Установить(Выборка.Партнер);
		НаборЗаписей.Отбор.ЗаказКлиента.Установить(Выборка.ЗаказКлиента);
		
		
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Если Выборка.BalanceCode = 0 Тогда
			BalanceCodeПартнер = ПолучитьBalanceCodeПоПартнеру(Выборка.ДокументПоездки, Выборка.Партнер, Выборка.Валюта);
			Если BalanceCodeПартнер <> 0 Тогда
				BalanceCode = BalanceCodeПартнер;		
			Иначе
				BalanceCode = BalanceCode + 1;	
			КонецЕсли;
			Запись.BalanceCode = BalanceCode;	
		КонецЕсли; 
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПодготовитьСправочникПартнерыКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Массив; 
	Реквизиты.Добавить(Новый РеквизитФормы("РасчетСуммОплатПартнеров", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);	
	ЭтаФорма.РасчетСуммОплатПартнеров = ИмяОбработки;

	Объект = ЭтаФорма.Объект;
	Элементы = ЭтаФорма.Элементы;
	
	ГруппаДополнительныеРеквизиты = Элементы.Найти("ГруппаДополнительныеРеквизиты");
	Если ГруппаДополнительныеРеквизиты <> Неопределено Тогда
		
		Параметры = Новый Структура;	
		Параметры.Вставить("Имя"						, "ОсновныеДоговораОптовыхПартнеров");
		Параметры.Вставить("Вид"						, ВидГруппыФормы.ОбычнаяГруппа);
		Параметры.Вставить("ТипЭлемента"				, Тип("ГруппаФормы"));
		Параметры.Вставить("Заголовок"					, НСтр("ru='Основные договора оптовых партнеров'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("Поведение"					, ПоведениеОбычнойГруппы.Свертываемая);
		Параметры.Вставить("Отображение"				, ОтображениеОбычнойГруппы.СильноеВыделение);
		Параметры.Вставить("ОтображениеУправления"		, ОтображениеУправленияОбычнойГруппы.Картинка);
		Параметры.Вставить("Группировка"				, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		Параметры.Вставить("ШиринаПодчиненныхЭлементов"	, ШиринаПодчиненныхЭлементовФормы.Одинаковая);
		Параметры.Вставить("ОтображатьЗаголовок"		, Истина);		
		НоваяГруппа = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаДополнительныеРеквизиты);
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя"					,"ДоговорUSD");
		Параметры.Вставить("Заголовок"				,"Основной договор (USD)");
		Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
		Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным"			,"Объект.ДоговорUSD");	
		Параметры.Вставить("Подсказка"				,НСтр("ru='Основной долларовый договор оптового клиента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("ОтображениеПодсказки"	,ОтображениеПодсказки.Кнопка);
		ЭлементДоговорUSD = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, НоваяГруппа);
		
	    МассивПараметров = Новый Массив;
	    МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", Объект.Ссылка));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Константы.ВалютаУправленческогоУчета.Получить()));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	    ЭлементДоговорUSD.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя"					,"ДоговорUAH");
		Параметры.Вставить("Заголовок"				,"Основной договор (ГРН)");
		Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
		Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным"			,"Объект.ДоговорГРН");	
		Параметры.Вставить("Подсказка"				,НСтр("ru='Основной гривневый договор оптового клиента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("ОтображениеПодсказки"	,ОтображениеПодсказки.Кнопка);
		ЭлементДоговорUAH = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, НоваяГруппа);
		
		МассивПараметров = Новый Массив;
	    МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", Объект.Ссылка));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Константы.ВалютаРегламентированногоУчета.Получить()));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	    ЭлементДоговорUAH.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДатуВыезда(ДокументСсылка)

	Запрос		  = Новый Запрос;
	Запрос.Текст  = ПолучитьТекстЗапросаДатаВыезда();
	
	ДатаДокумента = ДокументСсылка.Дата;
	
	Запрос.УстановитьПараметр("ВариантМарщрута",	ДокументСсылка.ВариантМаршрута);
	Запрос.УстановитьПараметр("Склад", 				Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ДеньНедели",   		ДеньНедели(ДатаДокумента));
	Запрос.УстановитьПараметр("ВремяДокумента",   	Дата(1,1,1) + (ДатаДокумента - НачалоДня(ДатаДокумента)));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДатаДокумента;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ВремяВыезда = NULL Тогда
			Возврат ДатаДокумента;
		Иначе
			Возврат НачалоДня(ДатаДокумента) + (Выборка.ВремяВыезда - Дата(1,1,1));
		КонецЕсли;
	КонецЕсли;
	
	Тема = НСтр("Внимание! В поездку не включен склад отгрузки Соборна");
	Тело = ПолучитьНавигационнуюСсылку(ДокументСсылка);
	Кому = Новый Массив;
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc.rovno.ua", "Отдел супер-поддержки"));
	ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(Тема, Тело, Кому);
	ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
	
	Возврат КонецДня(ТекущаяДатаСеанса());

КонецФункции // ПолучитьДатуВыезда()
 
Функция ПолучитьBalanceCode(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	IsNull(МАКСИМУМ(ПоездкаЗаМаршрутомФинансы.BalanceCode), 0) КАК BalanceCode
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ГДЕ
		|	ПоездкаЗаМаршрутомФинансы.ДокументПоездки = &ДокументПоездки";
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументСсылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.BalanceCode, 0);

КонецФункции // ПолучитьBalanceCode()

Функция ПолучитьBalanceCodeПоПартнеру(ДокументСсылка, Партнер, Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	BalanceCode
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаФинансы
		|ГДЕ
		|	ДокументПоездки = &ДокументПоездки
		|И	Партнер			= &Партнер
		|И	Валюта			= &Валюта
		|";
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ДокументПоездки", ДокументСсылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.BalanceCode, 0);
	
КонецФункции

Функция ПолучитьТекстЗапросаДатаВыезда()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	МИНИМУМ(ВЫБОР &ДеньНедели
	               |			КОГДА 1
	               |				ТОГДА ВремяВыездаПН
	               |			КОГДА 2
	               |				ТОГДА ВремяВыездаВТ
	               |			КОГДА 3
	               |				ТОГДА ВремяВыездаСР
	               |			КОГДА 4
	               |				ТОГДА ВремяВыездаЧТ
	               |			КОГДА 5
	               |				ТОГДА ВремяВыездаПТ
	               |			КОГДА 6
	               |				ТОГДА ВремяВыездаСБ
	               |			КОГДА 7
	               |				ТОГДА ВремяВыездаВС
	               |		КОНЕЦ) КАК ВремяВыезда
	               |ИЗ
	               |	Справочник.ВариантыМаршрутов.СкладыОтгрузки
	               |ГДЕ
				   |	Ссылка  = &ВариантМарщрута
				   |	И Склад = &Склад
	               |	И ВЫБОР &ДеньНедели
	               |			КОГДА 1
	               |				ТОГДА ПН
	               |			КОГДА 2
	               |				ТОГДА ВТ
	               |			КОГДА 3
	               |				ТОГДА СР
	               |			КОГДА 4
	               |				ТОГДА ЧТ
	               |			КОГДА 5
	               |				ТОГДА ПТ
	               |			КОГДА 6
	               |				ТОГДА СБ
	               |			КОГДА 7
	               |				ТОГДА ВС
	               |		КОНЕЦ
	               |	И ВЫБОР &ДеньНедели
	               |			КОГДА 1
	               |				ТОГДА ВремяВыездаПН >= &ВремяДокумента
	               |			КОГДА 2
	               |				ТОГДА ВремяВыездаВТ >= &ВремяДокумента
	               |			КОГДА 3
	               |				ТОГДА ВремяВыездаСР >= &ВремяДокумента
	               |			КОГДА 4
	               |				ТОГДА ВремяВыездаЧТ >= &ВремяДокумента
	               |			КОГДА 5
	               |				ТОГДА ВремяВыездаПТ >= &ВремяДокумента
	               |			КОГДА 6
	               |				ТОГДА ВремяВыездаСБ >= &ВремяДокумента
	               |			КОГДА 7
	               |				ТОГДА ВремяВыездаВС >= &ВремяДокумента
	               |		КОНЕЦ";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаВодительВыехал()
 
Функция ПолучитьТекстЗапросаПоездки(ДокументСсылка)
	
	Если ДокументСсылка.ВидПоездки = Перечисления.КТС_ВидыПоездки.ОсновнаяПоездка Тогда
		Возврат ПолучитьТекстЗапросаОсновнойПоездки();	
	Иначе
		Возврат ПолучитьТекстЗапросаДополнительнойПоездки();	
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьТекстЗапросаОсновнойПоездки()

	ТекстЗапроса = "
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//1. Получаем список складов с которых может производится отгрузка
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склад КАК Склад
			|ПОМЕСТИТЬ СкладыОтгрузки
			|ИЗ
			|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
			|ГДЕ
			|	Ссылка = &ВариантМаршрута
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//2. Получаем склады и время к отгрузке
			|ВЫБРАТЬ
			|	СкладыОтгрузки.Склад 				КАК Склад,	
			|   ПоездкаЗаМаршрутом.ВремяКОтгрузке   КАК ВремяКОтгрузке
			|ПОМЕСТИТЬ СкладыВремяКОтгрузке
			|ИЗ
			|	СкладыОтгрузки КАК СкладыОтгрузки	

			|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоездкаЗаМаршрутом.Склады КАК ПоездкаЗаМаршрутом
			|ПО ПоездкаЗаМаршрутом.Ссылка = &ДокументСсылка
			|И	ПоездкаЗаМаршрутом.Склад  = СкладыОтгрузки.Склад

			|ИНДЕКСИРОВАТЬ ПО
			|	СкладыОтгрузки.Склад
			|;
			//3. Получаем адреса складов
			|ВЫБРАТЬ
			|	СкладыКонтактнаяИнформация.Ссылка 			КАК Склад,
			|	СкладыКонтактнаяИнформация.Представление 	КАК Адрес
			|ПОМЕСТИТЬ АдресаСкладов
			|ИЗ
			|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
			|ГДЕ
			|	СкладыКонтактнаяИнформация.Ссылка В
			|			(ВЫБРАТЬ
			|				Склад
			|			ИЗ
			|				СкладыОтгрузки
			|			)
			|	И СкладыКонтактнаяИнформация.Тип = &ТипКонтактнойИнформацииАдрес
			|	И СкладыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииАдресСклада
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//4. Получаем документы доставки открытых по данному маршруту
			|ВЫБРАТЬ
			|	ПоездкаЗаМаршрутом.Ссылка
			|ПОМЕСТИТЬ АктивныеПоездкиПоВариантуМаршрута
			|ИЗ
			|	Документ.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
			|ГДЕ
			|	ПоездкаЗаМаршрутом.Проведен
			|	И ПоездкаЗаМаршрутом.Ссылка <> &ДокументСсылка
			|	И ПоездкаЗаМаршрутом.ВариантМаршрута = &ВариантМаршрута
			|	И ПоездкаЗаМаршрутом.СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	ПоездкаЗаМаршрутом.Ссылка
			|ИЗ
			|	Документ.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
			|ГДЕ
			|	ПоездкаЗаМаршрутом.Проведен
			|	И ПоездкаЗаМаршрутом.Ссылка = &ДокументСсылка
			|	И ПоездкаЗаМаршрутом.ВариантМаршрута = &ВариантМаршрута
			|	И ПоездкаЗаМаршрутом.СтатусПоездки = ЗНАЧЕНИЕ(Перечисление.КТС_СтатусыПоездки.ВПроцессе)
			|
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//5. Получаем места в других доставках
			|ВЫБРАТЬ
			|	МестоДоставки	
			|ПОМЕСТИТЬ АктивныеМестаПоВариантуМаршрута
			|ИЗ
			|	РегистрСведений.ПоездкаЗаМаршрутом 	
			|ГДЕ
			|	ДокументПоездки В (ВЫБРАТЬ Ссылка ИЗ АктивныеПоездкиПоВариантуМаршрута)		
			|И	НЕ ИсключеноИзДоставки

			|ИНДЕКСИРОВАТЬ ПО
			|	МестоДоставки	
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//6. Получаем места, которые нужно добавить к маршруту
			|ВЫБРАТЬ
			|   ОтгрузкаМест.Период				КАК Период,
			|	&ДокументСсылка					КАК ДокументПоездки,
			|	ОтгрузкаМест.Место 				КАК МестоДоставки,
			|	ОтгрузкаМест.Склад				КАК Отправитель,
			|	Ложь							КАК ЭтоЗадача,
			|	ОтгрузкаМест.Место.Владелец 	КАК Owner,
			|	ОтгрузкаМест.Место.АдресДоставки КАК OwnerAdress

			|ПОМЕСТИТЬ ВозможноНовыеМестаПоМаршруту
			|ИЗ
			|	РегистрСведений.ОтгрузкаМест.СрезПоследних(, Склад В (ВЫБРАТЬ Склад ИЗ СкладыВремяКОтгрузке)
			|												И Место НЕ В (ВЫБРАТЬ МестоДоставки ИЗ АктивныеМестаПоВариантуМаршрута)
			|											 И НЕ Место.Архивный) КАК ОтгрузкаМест

			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыВремяКОтгрузке КАК СкладыВремяКОтгрузке
			|ПО	СкладыВремяКОтгрузке.Склад = ОтгрузкаМест.Склад
			|И	ВЫБОР
			|		КОГДА НачалоПериода(ОтгрузкаМест.Период, День) < &НачалоДняДокумента
			|			ТОГДА ИСТИНА
			|		КОГДА НачалоПериода(ОтгрузкаМест.Период, День) = &НачалоДняДокумента
			|			ТОГДА 	ВЫБОР
			|						КОГДА ЧАС(СкладыВремяКОтгрузке.ВремяКОтгрузке) > ЧАС(ОтгрузкаМест.Период)
			|							ТОГДА ИСТИНА
			|						КОГДА ЧАС(СкладыВремяКОтгрузке.ВремяКОтгрузке) = ЧАС(ОтгрузкаМест.Период)
			|							И МИНУТА(СкладыВремяКОтгрузке.ВремяКОтгрузке) >= МИНУТА(ОтгрузкаМест.Период)
			|							ТОГДА ИСТИНА
			|						ИНАЧЕ ЛОЖЬ
			|					КОНЕЦ
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ

			|ГДЕ
			|	ОтгрузкаМест.ВариантМаршрута = &ВариантМаршрута
			|И	ОтгрузкаМест.СтатусОтгрузки НЕ В (	ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации),
			|										ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ПогруженоВМашину),
			|										ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ОтгруженоПартнеру),
			|										ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе),
			|										ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ВозвращеноНаСклад))
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//7. Получаем задачи, которые нужно добавить к маршруту
			|ВЫБРАТЬ
			|	ЗадачиНаМаршрут.Период      КАК Период,
			|	&ДокументСсылка				КАК ДокументПоездки,
			|	ЗадачиНаМаршрут.Место 		КАК МестоДоставки,
			|	ЗадачиНаМаршрут.Отправитель КАК Отправитель,
			|	Истина						КАК ЭтоЗадача,
			|	ВЫБОР
			|		КОГДА НЕ ЗадачиНаМаршрут.Место.Транзит
			|			ТОГДА ЗадачиНаМаршрут.Место.Владелец
			|		ИНАЧЕ ЗадачиНаМаршрут.Место.ТранзитныйСклад
			|	КОНЕЦ КАК Owner,
			|	ВЫБОР
			|		КОГДА НЕ ЗадачиНаМаршрут.Место.Транзит
			|			ТОГДА ЗадачиНаМаршрут.Место.АдресДоставки
			|		ИНАЧЕ ЕСТЬNULL(ТранзитныйСкладАдресаСкладов.Адрес, """")
			|	КОНЕЦ КАК OwnerAdress
			|ПОМЕСТИТЬ ВозможноНовыеЗадачиПоМаршруту
			|ИЗ
			|	РегистрСведений.ЗадачиНаМаршрут.СрезПоследних(, Место НЕ В (ВЫБРАТЬ МестоДоставки ИЗ АктивныеМестаПоВариантуМаршрута)
			|											   И НЕ Место.Архивный) КАК ЗадачиНаМаршрут

			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыВремяКОтгрузке КАК СкладыВремяКОтгрузке
			|ПО	СкладыВремяКОтгрузке.Склад = 	ВЫБОР
			|										КОГДА ЗадачиНаМаршрут.Отправитель Ссылка Справочник.Склады
			|											ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрут.Отправитель КАК Справочник.Склады)
			|										ИНАЧЕ ВЫБОР
	        |												КОГДА ЗадачиНаМаршрут.Место.Транзит
	        |												ТОГДА ВЫРАЗИТЬ(ЗадачиНаМаршрут.Место.ТранзитныйСклад КАК Справочник.Склады)
	        |												ИНАЧЕ ВЫРАЗИТЬ(ЗадачиНаМаршрут.Место.Владелец КАК Справочник.Склады)
	        |											 КОНЕЦ
			|								  	КОНЕЦ
			|И	ВЫБОР
			|		КОГДА НачалоПериода(ЗадачиНаМаршрут.Период, День) < &НачалоДняДокумента
			|			ТОГДА ИСТИНА
			|		КОГДА НачалоПериода(ЗадачиНаМаршрут.Период, День) = &НачалоДняДокумента
			|			ТОГДА 	ВЫБОР
			|						КОГДА ЧАС(СкладыВремяКОтгрузке.ВремяКОтгрузке) > ЧАС(ЗадачиНаМаршрут.Период)
			|							ТОГДА ИСТИНА
			|						КОГДА ЧАС(СкладыВремяКОтгрузке.ВремяКОтгрузке) 	   = ЧАС(ЗадачиНаМаршрут.Период)
			|							И МИНУТА(СкладыВремяКОтгрузке.ВремяКОтгрузке) >= МИНУТА(ЗадачиНаМаршрут.Период)
			|							ТОГДА ИСТИНА
			|						ИНАЧЕ ЛОЖЬ
			|					КОНЕЦ
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ
			|	ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК ТранзитныйСкладАдресаСкладов
			|		ПО ЗадачиНаМаршрут.Место.ТранзитныйСклад = ТранзитныйСкладАдресаСкладов.Склад
			|ГДЕ
			|	ЗадачиНаМаршрут.ВариантМаршрута = &ВариантМаршрута
			|И	ЗадачиНаМаршрут.СтатусОтгрузки НЕ В (	ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения),
			|											ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена),
			|											ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена))
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//8. 
			|ВЫБРАТЬ
			|   ВЫБОР
			|		КОГДА ПоездкаЗаМаршрутом.ЭтоЗадача
			|		ТОГДА ПоездкаЗаМаршрутом.ЗадачаПоставлена 
			|		ИНАЧЕ ПоездкаЗаМаршрутом.КомплектацияЗавершена
			|	КОНЕЦ КАК Период,

			|	ПоездкаЗаМаршрутом.ДокументПоездки 		КАК ДокументПоездки,	
			|   	ПоездкаЗаМаршрутом.МестоДоставки		КАК МестоДоставки,
			|   	ПоездкаЗаМаршрутом.Отправитель			КАК Отправитель,
			|	ПоездкаЗаМаршрутом.ЭтоЗадача        	КАК ЭтоЗадача,
			|	ПоездкаЗаМаршрутом.Owner 				КАК Owner,
			|	ПоездкаЗаМаршрутом.OwnerAdress          КАК OwnerAdress

			|ПОМЕСТИТЬ ПоездкаМестаДоставки
			|ИЗ
			|	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
			|ГДЕ
			|	ДокументПоездки	= &ДокументСсылка

			|ОБЪЕДИНИТЬ

			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВозможноНовыеМестаПоМаршруту

			|ОБЪЕДИНИТЬ

			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВозможноНовыеЗадачиПоМаршруту

			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументПоездки,	
			|   МестоДоставки
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//9. 
			|ВЫБРАТЬ
			|  	ПоездкаМестаДоставки.Период					КАК Период,
			|	ПоездкаМестаДоставки.ДокументПоездки 		КАК ДокументПоездки, 		
			|   	ПоездкаМестаДоставки.МестоДоставки			КАК МестоДоставки,
			|	ПоездкаМестаДоставки.ЭтоЗадача        		КАК ЭтоЗадача,
			|   	ПоездкаМестаДоставки.МестоДоставки.Архивный КАК Архивное,
			|	ПоездкаМестаДоставки.Отправитель			КАК Отправитель,
			|   	ПоездкаЗаМаршрутом.МестоНеВыдано          	КАК МестоНеВыдано,
			|   	ПоездкаЗаМаршрутом.ИсключеноИзДоставки   	КАК ИсключеноИзДоставки,
			|   	ПоездкаМестаДоставки.Owner					КАК Owner,
			|	ПоездкаМестаДоставки.OwnerAdress 			КАК OwnerAdress
			|   	
			|ПОМЕСТИТЬ ПоездкаАктуальныеМестаДоставки
			|ИЗ
			|	ПоездкаМестаДоставки КАК ПоездкаМестаДоставки

			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаЗаМаршрутом
			|ПО	ПоездкаЗаМаршрутом.ДокументПоездки 	= ПоездкаМестаДоставки.ДокументПоездки
			|И	ПоездкаЗаМаршрутом.МестоДоставки	= ПоездкаМестаДоставки.МестоДоставки
			|И 	ПоездкаЗаМаршрутом.Owner 			= ПоездкаМестаДоставки.Owner

			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СкладыВремяКОтгрузке;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ АктивныеПоездкиПоВариантуМаршрута;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ АктивныеМестаПоВариантуМаршрута;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВозможноНовыеМестаПоМаршруту;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВозможноНовыеЗадачиПоМаршруту;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПоездкаМестаДоставки;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//11. 
			|ВЫБРАТЬ
			|	ОтгрузкаМест.Период 		КАК Период, 		
			|   ОтгрузкаМест.Место			КАК МестоДоставки,
			|	ОтгрузкаМест.СтатусОтгрузки КАК СтатусОтгрузки,
			|	ОтгрузкаМест.Склад			КАК Отправитель,
			|	АдресаСкладов.Адрес			КАК АдресОтправителя
			|ПОМЕСТИТЬ КешОтгрузкаМест
			|ИЗ
			|	РегистрСведений.ОтгрузкаМест КАК ОтгрузкаМест

			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоездкаАктуальныеМестаДоставки КАК АктуальныеМеста
			|ПО	АктуальныеМеста.МестоДоставки = ОтгрузкаМест.Место
			|И	АктуальныеМеста.Отправитель	  = ОтгрузкаМест.Склад

			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладов
			|ПО	АдресаСкладов.Склад = ОтгрузкаМест.Склад

			|ГДЕ
			|	ОтгрузкаМест.ВариантМаршрута = &ВариантМаршрута

			|ИНДЕКСИРОВАТЬ ПО
			|	МестоДоставки,
			|	СтатусОтгрузки
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//12. 
			|ВЫБРАТЬ
			|	ЗадачиНаМаршрут.Период 				КАК Период, 		
			|   	ЗадачиНаМаршрут.Место				КАК МестоДоставки,
			|	ЗадачиНаМаршрут.СтатусОтгрузки 		КАК СтатусОтгрузки,
			|   	ЗадачиНаМаршрут.Отправитель     	КАК Отправитель,
			|   	ЗадачиНаМаршрут.АдресОтправителя	КАК АдресОтправителя,
			|	АктуальныеМеста.Owner				КАК Owner,
			|	АктуальныеМеста.OwnerAdress         КАК OwnerAdress

			|ПОМЕСТИТЬ КешЗадачиНаМаршрут
			|ИЗ
			|	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут

			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоездкаАктуальныеМестаДоставки КАК АктуальныеМеста
			|ПО	АктуальныеМеста.Период		 <= ЗадачиНаМаршрут.Период
			|И	АктуальныеМеста.МестоДоставки = ЗадачиНаМаршрут.Место
			|И	АктуальныеМеста.Отправитель	  = ЗадачиНаМаршрут.Отправитель
			|ГДЕ
			|	ЗадачиНаМаршрут.ВариантМаршрута = &ВариантМаршрута

			|ИНДЕКСИРОВАТЬ ПО
			|	МестоДоставки,
			|	СтатусОтгрузки
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//13. 
			|ВЫБРАТЬ
			|	АктуальныеМеста.ДокументПоездки, 		
			|   АктуальныеМеста.МестоДоставки,
			|	АктуальныеМеста.ЭтоЗадача,
			|   АктуальныеМеста.Архивное,
			|   АктуальныеМеста.МестоНеВыдано,
			|   АктуальныеМеста.ИсключеноИзДоставки,

			|  	НачалоКомплектации.Период 			КАК НачалоКомплектации,
			|   КомплектацияЗавершена.Период		КАК КомплектацияЗавершена,
			|   ПогруженоВМашину.Период				КАК ПогруженоВМашину,
			|   ОтгруженоПартнеру.Период			КАК ОтгруженоПартнеру,
			|	РазукомплектованиеНаСкладе.Период 	КАК РазукомплектованиеНаСкладе,
			|   ВозвращеноНаСклад.Период			КАК ВозвращеноНаСклад,

			|	ЗадачаПоставлена.Период				КАК ЗадачаПоставлена,
			|   ЗадачаВПроцессеВыполнения.Период	КАК ЗадачаВПроцессеВыполнения,
			|   ЗадачаВыполнена.Период				КАК ЗадачаВыполнена,
			|   ЗадачаОтменена.Период				КАК ЗадачаОтменена,
			|   ВЫБОР
			|		КОГДА АктуальныеМеста.ЭтоЗадача
			|			ТОГДА ВЫБОР
			|					КОГДА АктуальныеМеста.МестоДоставки.Транзит
			|						ТОГДА АктуальныеМеста.МестоДоставки.ТранзитныйСклад
			|					ИНАЧЕ АктуальныеМеста.Owner
			|				КОНЕЦ
			|		ИНАЧЕ АктуальныеМеста.МестоДоставки.Владелец
			|	КОНЕЦ КАК Owner,
			|	ВЫБОР
			|		КОГДА АктуальныеМеста.ЭтоЗадача
			|			ТОГДА ВЫБОР
			|					КОГДА АктуальныеМеста.МестоДоставки.Транзит
			|						ТОГДА ТранзитыАдресаСкладов.Адрес
			|					ИНАЧЕ АктуальныеМеста.OwnerAdress
			|				КОНЕЦ
			|		ИНАЧЕ АктуальныеМеста.МестоДоставки.АдресДоставки
			|	КОНЕЦ КАК OwnerAdress,
			|	""00000000-0000-0000-0000-000000000000""				КАК OwnerGeoGUID,
			| 	OwnerGeoLocation.Ссылка									КАК OwnerGeoLocation,
			|	Ложь													КАК IsPartner,
			|	""00000000-0000-0000-0000-000000000000""				КАК GUID,
			|   АктуальныеМеста.МестоДоставки.Код          				КАК Код,
			|	0														КАК ManualCode,
			|   АктуальныеМеста.МестоДоставки.УникальныйИдентификатор	КАК AssignedQRCode,
			|   АктуальныеМеста.МестоДоставки.ЗаполнятьУникальныйИдентификатор КАК IsQRCodeScanningNeeded,
			|   АктуальныеМеста.МестоДоставки.Ответственный             КАК Author,
			|   АктуальныеМеста.МестоДоставки.ТекстЗадачи               КАК Comment,
			|   ВЫБОР
			|		КОГДА АктуальныеМеста.ЭтоЗадача
			|		ТОГДА ЗадачаПоставлена.Отправитель
			|		ИНАЧЕ IsNull(НачалоКомплектации.Отправитель, КомплектацияЗавершена.Отправитель)
			|	КОНЕЦ   												КАК Отправитель,
			|   ВЫБОР
			|		КОГДА АктуальныеМеста.ЭтоЗадача
			|		ТОГДА ЗадачаПоставлена.АдресОтправителя
			|		ИНАЧЕ IsNull(НачалоКомплектации.АдресОтправителя, КомплектацияЗавершена.АдресОтправителя) 
			|	КОНЕЦ                                                   КАК АдресОтправителя,
			|	""00000000-0000-0000-0000-000000000000""				КАК ОтправительGeoGUID,
			|   ОтправительGeoLocation.Ссылка                           КАК ОтправительGeoLocation
			|ИЗ
			|	ПоездкаАктуальныеМестаДоставки КАК АктуальныеМеста

			|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК НачалоКомплектации
			|ПО	НачалоКомплектации.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	НачалоКомплектации.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК КомплектацияЗавершена
			|ПО	КомплектацияЗавершена.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	КомплектацияЗавершена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК ПогруженоВМашину
			|ПО	ПогруженоВМашину.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ПогруженоВМашину.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ПогруженоВМашину)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК ОтгруженоПартнеру
			|ПО	ОтгруженоПартнеру.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ОтгруженоПартнеру.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ОтгруженоПартнеру)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК РазукомплектованиеНаСкладе
			|ПО	РазукомплектованиеНаСкладе.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	РазукомплектованиеНаСкладе.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК ВозвращеноНаСклад
			|ПО	ВозвращеноНаСклад.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ВозвращеноНаСклад.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ВозвращеноНаСклад)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаПоставлена
			|ПО	ЗадачаПоставлена.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ЗадачаПоставлена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаВПроцессеВыполнения
			|ПО	ЗадачаВПроцессеВыполнения.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ЗадачаВПроцессеВыполнения.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаВыполнена
			|ПО	ЗадачаВыполнена.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ЗадачаВыполнена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена)

			|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаОтменена
			|ПО	ЗадачаОтменена.МестоДоставки = АктуальныеМеста.МестоДоставки
			|И	ЗадачаОтменена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена)

			|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК ТранзитыАдресаСкладов
			|ПО	ТранзитыАдресаСкладов.Склад = АктуальныеМеста.МестоДоставки.ТранзитныйСклад 
			|												
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_ГеографическиеРасположенияПартнеров КАК OwnerGeoLocation
			|ПО	OwnerGeoLocation.Владелец = ВЫБОР
			|									КОГДА АктуальныеМеста.ЭтоЗадача
			|									ТОГДА 	ВЫБОР
			|												КОГДА АктуальныеМеста.МестоДоставки.Транзит
			|												ТОГДА АктуальныеМеста.МестоДоставки.ТранзитныйСклад
			|												ИНАЧЕ АктуальныеМеста.Owner
			|											КОНЕЦ
			|									ИНАЧЕ АктуальныеМеста.МестоДоставки.Владелец
			|								КОНЕЦ
			|И	OwnerGeoLocation.ГородСклад = 	ВЫБОР
			|										КОГДА АктуальныеМеста.ЭтоЗадача
			|										ТОГДА 	ВЫБОР
			|													КОГДА АктуальныеМеста.МестоДоставки.Транзит
			|													ТОГДА ТранзитыАдресаСкладов.Адрес
			|													ИНАЧЕ АктуальныеМеста.OwnerAdress
			|												КОНЕЦ
			|										ИНАЧЕ АктуальныеМеста.МестоДоставки.АдресДоставки
			|									КОНЕЦ
			|И НЕ OwnerGeoLocation.ПометкаУдаления

			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_ГеографическиеРасположенияПартнеров КАК ОтправительGeoLocation
			|ПО	ОтправительGeoLocation.Владелец   = ВЫБОР
			|											КОГДА АктуальныеМеста.ЭтоЗадача
			|											ТОГДА ЗадачаПоставлена.Отправитель
			|											ИНАЧЕ IsNull(НачалоКомплектации.Отправитель, КомплектацияЗавершена.Отправитель)
			|										КОНЕЦ	
			|И	ОтправительGeoLocation.ГородСклад = ВЫБОР
			|											КОГДА АктуальныеМеста.ЭтоЗадача
			|											ТОГДА ЗадачаПоставлена.АдресОтправителя
			|											ИНАЧЕ IsNull(НачалоКомплектации.АдресОтправителя, КомплектацияЗавершена.АдресОтправителя) 
			|										КОНЕЦ
			|И НЕ ОтправительGeoLocation.ПометкаУдаления
			|;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СкладыОтгрузки;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ АдресаСкладов;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ КешОтгрузкаМест;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ КешЗадачиНаМаршрут;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПоездкаАктуальныеМестаДоставки;
			|";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДанныеДокумента()

Функция ПолучитьТекстЗапросаДополнительнойПоездки()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//1. Получаем список складов с которых может производится отгрузка
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склад КАК Склад
		|ПОМЕСТИТЬ СкладыОтгрузки
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
		|ГДЕ
		|	Ссылка = &ВариантМаршрута
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//2. 
		|ВЫБРАТЬ
		|	ПоездкаМестаДоставки.ДокументПоездки 		КАК ДокументПоездки, 		
		|   ПоездкаМестаДоставки.МестоДоставки			КАК МестоДоставки,
		|	ПоездкаМестаДоставки.ЭтоЗадача        		КАК ЭтоЗадача,
		|   ПоездкаМестаДоставки.МестоДоставки.Архивный КАК Архивное,
		|	ПоездкаМестаДоставки.Отправитель			КАК Отправитель,
		|   ПоездкаМестаДоставки.МестоНеВыдано          КАК МестоНеВыдано,
		|   ПоездкаМестаДоставки.ИсключеноИзДоставки   	КАК ИсключеноИзДоставки
		|ПОМЕСТИТЬ ПоездкаАктуальныеМестаДоставки
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутом КАК ПоездкаМестаДоставки
		|
		|ГДЕ
		|	ДокументПоездки	= &ДокументСсылка
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//3. Получаем адреса складов
		|ВЫБРАТЬ
		|	СкладыКонтактнаяИнформация.Ссылка 			КАК Склад,
		|	СкладыКонтактнаяИнформация.Представление 	КАК Адрес
		|ПОМЕСТИТЬ АдресаСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
		|ГДЕ
		|	СкладыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Склад
		|			ИЗ
		|				СкладыОтгрузки
		|			)
		|	И СкладыКонтактнаяИнформация.Тип = &ТипКонтактнойИнформацииАдрес
		|	И СкладыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформацииАдресСклада
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//4. 
		|ВЫБРАТЬ
		|	ОтгрузкаМест.Период 		КАК Период, 		
		|   ОтгрузкаМест.Место			КАК МестоДоставки,
		|	ОтгрузкаМест.СтатусОтгрузки КАК СтатусОтгрузки,
		|	ОтгрузкаМест.Склад			КАК Отправитель,
		|	АдресаСкладов.Адрес			КАК АдресОтправителя
		|ПОМЕСТИТЬ КешОтгрузкаМест
		|ИЗ
		|	РегистрСведений.ОтгрузкаМест КАК ОтгрузкаМест
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоездкаАктуальныеМестаДоставки КАК АктуальныеМеста
		|ПО	АктуальныеМеста.МестоДоставки = ОтгрузкаМест.Место
		|И	АктуальныеМеста.Отправитель	  = ОтгрузкаМест.Склад
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладов
		|ПО	АдресаСкладов.Склад = ОтгрузкаМест.Склад
		|
		|ГДЕ
		|	ОтгрузкаМест.ВариантМаршрута = &ВариантМаршрута
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МестоДоставки,
		|	СтатусОтгрузки
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//5. 
		|ВЫБРАТЬ
		|	ЗадачиНаМаршрут.Период 				КАК Период, 		
		|   ЗадачиНаМаршрут.Место				КАК МестоДоставки,
		|	ЗадачиНаМаршрут.СтатусОтгрузки 		КАК СтатусОтгрузки,
		|   ЗадачиНаМаршрут.Отправитель     	КАК Отправитель,
		|   ЗадачиНаМаршрут.АдресОтправителя	КАК АдресОтправителя
		|ПОМЕСТИТЬ КешЗадачиНаМаршрут
		|ИЗ
		|	РегистрСведений.ЗадачиНаМаршрут КАК ЗадачиНаМаршрут
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоездкаАктуальныеМестаДоставки КАК АктуальныеМеста
		|ПО	АктуальныеМеста.МестоДоставки = ЗадачиНаМаршрут.Место
		|И	АктуальныеМеста.Отправитель	  = ЗадачиНаМаршрут.Отправитель
		|
		|ГДЕ
		|	ЗадачиНаМаршрут.ВариантМаршрута = &ВариантМаршрута
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МестоДоставки,
		|	СтатусОтгрузки
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//6. 
		|ВЫБРАТЬ
		|	АктуальныеМеста.ДокументПоездки, 		
		|   АктуальныеМеста.МестоДоставки,
		|	АктуальныеМеста.ЭтоЗадача,
		|   АктуальныеМеста.Архивное,
		|   АктуальныеМеста.МестоНеВыдано,
		|   АктуальныеМеста.ИсключеноИзДоставки,
		|
		|  	НачалоКомплектации.Период 			КАК НачалоКомплектации,
		|   КомплектацияЗавершена.Период		КАК КомплектацияЗавершена,
		|   ПогруженоВМашину.Период				КАК ПогруженоВМашину,
		|   ОтгруженоПартнеру.Период			КАК ОтгруженоПартнеру,
		|	РазукомплектованиеНаСкладе.Период 	КАК РазукомплектованиеНаСкладе,
		|   ВозвращеноНаСклад.Период			КАК ВозвращеноНаСклад,
		|
		|	ЗадачаПоставлена.Период				КАК ЗадачаПоставлена,
		|   ЗадачаВПроцессеВыполнения.Период	КАК ЗадачаВПроцессеВыполнения,
		|   ЗадачаВыполнена.Период				КАК ЗадачаВыполнена,
		|   ЗадачаОтменена.Период				КАК ЗадачаОтменена,
		|
		|  	ВЫБОР
		|		КОГДА АктуальныеМеста.ЭтоЗадача
		|		ТОГДА 	ВЫБОР
		|					КОГДА АктуальныеМеста.МестоДоставки.Транзит
		|					ТОГДА АктуальныеМеста.МестоДоставки.ТранзитныйСклад
		|					ИНАЧЕ АктуальныеМеста.МестоДоставки.Владелец
		|				КОНЕЦ
		|		ИНАЧЕ АктуальныеМеста.МестоДоставки.Владелец
		|	КОНЕЦ   												КАК Owner,
		|  	ВЫБОР
		|		КОГДА АктуальныеМеста.ЭтоЗадача
		|		ТОГДА 	ВЫБОР
		|					КОГДА АктуальныеМеста.МестоДоставки.Транзит
		|					ТОГДА ТранзитыАдресаСкладов.Адрес
		|					ИНАЧЕ АктуальныеМеста.МестоДоставки.АдресДоставки
		|				КОНЕЦ
		|		ИНАЧЕ АктуальныеМеста.МестоДоставки.АдресДоставки
		|	КОНЕЦ													КАК OwnerAdress,
		|	""00000000-0000-0000-0000-000000000000""				КАК OwnerGeoGUID,
		| 	OwnerGeoLocation.Ссылка									КАК OwnerGeoLocation,
		|	Ложь													КАК IsPartner,
		|	""00000000-0000-0000-0000-000000000000""				КАК GUID,
		|   АктуальныеМеста.МестоДоставки.Код          				КАК Код,
		|	0														КАК ManualCode,
		|   АктуальныеМеста.МестоДоставки.УникальныйИдентификатор	КАК AssignedQRCode,
		|   АктуальныеМеста.МестоДоставки.ЗаполнятьУникальныйИдентификатор КАК IsQRCodeScanningNeeded,
		|   АктуальныеМеста.МестоДоставки.Ответственный             КАК Author,
		|   АктуальныеМеста.МестоДоставки.ТекстЗадачи               КАК Comment,
		|   ВЫБОР
		|		КОГДА АктуальныеМеста.ЭтоЗадача
		|		ТОГДА ЗадачаПоставлена.Отправитель
		|		ИНАЧЕ IsNull(НачалоКомплектации.Отправитель, КомплектацияЗавершена.Отправитель)
		|	КОНЕЦ   												КАК Отправитель,
		|   ВЫБОР
		|		КОГДА АктуальныеМеста.ЭтоЗадача
		|		ТОГДА ЗадачаПоставлена.АдресОтправителя
		|		ИНАЧЕ IsNull(НачалоКомплектации.АдресОтправителя, КомплектацияЗавершена.АдресОтправителя) 
		|	КОНЕЦ                                                   КАК АдресОтправителя,
		|	""00000000-0000-0000-0000-000000000000""				КАК ОтправительGeoGUID,
		|   ОтправительGeoLocation.Ссылка                           КАК ОтправительGeoLocation
		|ИЗ
		|	ПоездкаАктуальныеМестаДоставки КАК АктуальныеМеста
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК НачалоКомплектации
		|ПО	НачалоКомплектации.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	НачалоКомплектации.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.НачалоКомплектации)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК КомплектацияЗавершена
		|ПО	КомплектацияЗавершена.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	КомплектацияЗавершена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.КомплектацияЗавершена)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК ПогруженоВМашину
		|ПО	ПогруженоВМашину.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ПогруженоВМашину.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ПогруженоВМашину)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК ОтгруженоПартнеру
		|ПО	ОтгруженоПартнеру.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ОтгруженоПартнеру.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ОтгруженоПартнеру)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК РазукомплектованиеНаСкладе
		|ПО	РазукомплектованиеНаСкладе.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	РазукомплектованиеНаСкладе.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.РазукомплектованиеНаСкладе)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешОтгрузкаМест КАК ВозвращеноНаСклад
		|ПО	ВозвращеноНаСклад.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ВозвращеноНаСклад.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ВозвращеноНаСклад)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаПоставлена
		|ПО	ЗадачаПоставлена.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ЗадачаПоставлена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаПоставлена)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаВПроцессеВыполнения
		|ПО	ЗадачаВПроцессеВыполнения.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ЗадачаВПроцессеВыполнения.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаВПроцессеВыполнения)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаВыполнена
		|ПО	ЗадачаВыполнена.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ЗадачаВыполнена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаВыполнена)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешЗадачиНаМаршрут КАК ЗадачаОтменена
		|ПО	ЗадачаОтменена.МестоДоставки = АктуальныеМеста.МестоДоставки
		|И	ЗадачаОтменена.СтатусОтгрузки = Значение(Перечисление.СтатусыОтгрузкиМест.ЗадачаОтменена)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК ТранзитыАдресаСкладов
		|ПО	ТранзитыАдресаСкладов.Склад = АктуальныеМеста.МестоДоставки.ТранзитныйСклад 
		|													
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_ГеографическиеРасположенияПартнеров КАК OwnerGeoLocation
		|ПО	OwnerGeoLocation.Владелец = ВЫБОР
		|									КОГДА АктуальныеМеста.ЭтоЗадача
		|									ТОГДА 	ВЫБОР
		|												КОГДА АктуальныеМеста.МестоДоставки.Транзит
		|												ТОГДА АктуальныеМеста.МестоДоставки.ТранзитныйСклад
		|												ИНАЧЕ АктуальныеМеста.МестоДоставки.Владелец
		|											КОНЕЦ
		|									ИНАЧЕ АктуальныеМеста.МестоДоставки.Владелец
		|								КОНЕЦ
		|И	OwnerGeoLocation.ГородСклад = 	ВЫБОР
		|										КОГДА АктуальныеМеста.ЭтоЗадача
		|										ТОГДА 	ВЫБОР
		|													КОГДА АктуальныеМеста.МестоДоставки.Транзит
		|													ТОГДА ТранзитыАдресаСкладов.Адрес
		|													ИНАЧЕ АктуальныеМеста.МестоДоставки.АдресДоставки
		|												КОНЕЦ
		|										ИНАЧЕ АктуальныеМеста.МестоДоставки.АдресДоставки
		|									КОНЕЦ
		|И НЕ OwnerGeoLocation.ПометкаУдаления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_ГеографическиеРасположенияПартнеров КАК ОтправительGeoLocation
		|ПО	ОтправительGeoLocation.Владелец   = ВЫБОР
		|											КОГДА АктуальныеМеста.ЭтоЗадача
		|											ТОГДА ЗадачаПоставлена.Отправитель
		|											ИНАЧЕ IsNull(НачалоКомплектации.Отправитель, КомплектацияЗавершена.Отправитель)
		|										КОНЕЦ	
		|И	ОтправительGeoLocation.ГородСклад = ВЫБОР
		|											КОГДА АктуальныеМеста.ЭтоЗадача
		|											ТОГДА ЗадачаПоставлена.АдресОтправителя
		|											ИНАЧЕ IsNull(НачалоКомплектации.АдресОтправителя, КомплектацияЗавершена.АдресОтправителя) 
		|										КОНЕЦ
		|И НЕ ОтправительGeoLocation.ПометкаУдаления
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СкладыОтгрузки;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АдресаСкладов;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешОтгрузкаМест;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешЗадачиНаМаршрут;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПоездкаАктуальныеМестаДоставки;
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДанныеДокумента()

Функция ПолучитьТекстЗапросаСуммаОплат()

	ТекстЗапроса = "
		///////////////////////////////////////////////////////////////////////////////////////////
		// 0. Получаем все доступные места по маршруту, где получатель или отправитель - партнер (только для партнеров нужно рассчитывать сумму)
		|ВЫБРАТЬ
		|	ДокументПоездки							КАК ДокументПоездки,
		|	ВЫРАЗИТЬ(Owner КАК Справочник.Партнеры)	КАК Партнер,
		|	МестоДоставки 							КАК МестоДоставки
		|ПОМЕСТИТЬ СписокМестИПартнеров
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутом
		|ГДЕ
		|	ДокументПоездки = &ДокументПоездки
		|И 	Owner Ссылка Справочник.Партнеры
		|И 	ИсключеноИзДоставки = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументПоездки,
		|	ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры),
		|	МестоДоставки
		|ИЗ
		|	РегистрСведений.ПоездкаЗаМаршрутом
		|ГДЕ
		|	ДокументПоездки = &ДокументПоездки
		|И 	Отправитель Ссылка Справочник.Партнеры
		|И 	ИсключеноИзДоставки = ЛОЖЬ
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 1. Получаем всех партнеров для которых должны устанавливаться настройки условий отгрузки
		// список сегментов партнеров доступен в регистре КТС_НастройкиСегментовУсловийОтгрузки.
		|ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер КАК Партнер
		|ПОМЕСТИТЬ ТаблицаОптовыхПартнеровПредварительная
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_НастройкиСегментовУсловийОтгрузки КАК СегментыУсловийОтгрузки
		|ПО ПартнерыСегмента.Сегмент = СегментыУсловийОтгрузки.СегментПартнеров
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 2. Сделаем отбор тех партнеров, для которых были сформированы места.
		|ВЫБРАТЬ
		|	СписокМестИПартнеров.ДокументПоездки	КАК ДокументПоездки,
		|	СписокМестИПартнеров.Партнер			КАК Партнер,
		|	СписокМестИПартнеров.МестоДоставки 		КАК Место
		|ПОМЕСТИТЬ ТаблицаОптовыхПартнеровИМест
		|ИЗ
		|	СписокМестИПартнеров КАК СписокМестИПартнеров
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОптовыхПартнеровПредварительная КАК ОптовыеПартнеры
		|ПО СписокМестИПартнеров.Партнер = ОптовыеПартнеры.Партнер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Место	
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 3. Выбираем оптовых партнеров.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументПоездки 	КАК ДокументПоездки,
		|	Партнер				КАК Партнер
		|ПОМЕСТИТЬ ТаблицаОптовыхПартнеров
		|ИЗ
		|	ТаблицаОптовыхПартнеровИМест
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 4. Выбираем прочих партнеров.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокМестИПартнеров.ДокументПоездки КАК ДокументПоездки,
		|	СписокМестИПартнеров.Партнер		 КАК Партнер
		|ПОМЕСТИТЬ ТаблицаПрочихПартнеров
		|ИЗ
		|	СписокМестИПартнеров КАК СписокМестИПартнеров
		|ГДЕ
		|	СписокМестИПартнеров.Партнер НЕ В (ВЫБРАТЬ Партнер ИЗ ТаблицаОптовыхПартнеров)		
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 5.
		|УНИЧТОЖИТЬ СписокМестИПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 6.
		|ВЫБРАТЬ
		|	ТаблицаПрочихПартнеров.ДокументПоездки 						КАК ДокументПоездки,
		|	ТаблицаПрочихПартнеров.Партнер 								КАК Партнер,
		|	РасчетыСКлиентами.ЗаказКлиента  							КАК ЗаказКлиента,
		|	IsNull(РасчетыСКлиентами.Валюта, ВалютаРеглУчета.Значение) 	КАК Валюта,
		|	IsNull(РасчетыСКлиентами.СуммаОстаток, 0) 					КАК СуммаУчета
		|ПОМЕСТИТЬ ФинансыПрочихПартнеров
		|ИЗ
		|	ТаблицаПрочихПартнеров КАК ТаблицаПрочихПартнеров
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаВыезда, 
		|											АналитикаУчетаПоПартнерам.Партнер В (ВЫБРАТЬ 
		|																					Партнер 
		|																				ИЗ 
		|																					ТаблицаПрочихПартнеров
		|																				)
		|												) КАК РасчетыСКлиентами
		|ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПрочихПартнеров.Партнер
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета
		|ПО Истина
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 7.
		|УНИЧТОЖИТЬ ТаблицаПрочихПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 8.
		|УНИЧТОЖИТЬ ТаблицаОптовыхПартнеровПредварительная;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 9. Получаем суммы задолженности по документам.
		|ВЫБРАТЬ
		|	ГрафикПлатежей.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА ГрафикПлатежей.Документ.Договор = ГрафикПлатежей.Партнер.ДоговорUSD
		|			ТОГДА ГрафикПлатежей.Партнер.ДоговорUSD
		|		КОГДА ГрафикПлатежей.Документ.Договор = ГрафикПлатежей.Партнер.ДоговорГРН
		|			ТОГДА ГрафикПлатежей.Партнер.ДоговорГРН 
		|		ИНАЧЕ ГрафикПлатежей.Документ
		|	КОНЕЦ 						КАК ЗаказКлиента,
		|	ГрафикПлатежей.Документ		КАК Документ,
		|	ГрафикПлатежей.Валюта		КАК Валюта,
		|	ГрафикПлатежей.СуммаОстаток КАК СуммаОстаток,
		|   	ВЫБОР
		|		КОГДА ДатаПлатежа < &КонецСегодня
		|		ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Прострочено,
		|	ВЫРАЗИТЬ(Документ КАК Документ.РеализацияТоваровУслуг).Дата КАК ДатаДокумента
		|ПОМЕСТИТЬ ОбщаяТаблицаЗадолженностейПоДокументам
		|ИЗ
		|	РегистрСведений.КТС_ГрафикПлатежейПартнеров.СрезПервых(&КонецСегодня, Партнер В (ВЫБРАТЬ Партнер ИЗ ТаблицаОптовыхПартнеров)) КАК ГрафикПлатежей
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 10.
		|ВЫБРАТЬ
		|	ОТЗПД.Партнер 				КАК Партнер,
		|	ОТЗПД.ЗаказКлиента			КАК ЗаказКлиента,
		|	ОТЗПД.Валюта				КАК Валюта,
		|	СУММА(ОТЗПД.СуммаОстаток) 	КАК Долг,
		|	СУММА(ОТЗПД.СуммаОстаток * (КурсыВалютыДолга.Курс / КурсыВалютыДолга.Кратность) / (КурсыВалютыУпр.Курс / КурсыВалютыУпр.Кратность)) КАК ДолгУПР
		|ПОМЕСТИТЬ ДолгиОптовыхПартнеров
		|ИЗ
		|	ОбщаяТаблицаЗадолженностейПоДокументам КАК ОТЗПД
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецСегодня, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) КАК КурсыВалютыУпр
		|По Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецСегодня, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) КАК КурсыВалютыДолга
		|По КурсыВалютыДолга.Валюта = ОТЗПД.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОТЗПД.Партнер,
		|	ОТЗПД.ЗаказКлиента,
		|	ОТЗПД.Валюта
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 11.
		|ВЫБРАТЬ
		|	Партнер КАК Партнер,
		|	СУММА(Долг * (КурсыВалютыДолга.Курс / КурсыВалютыДолга.Кратность) / (КурсыВалютыУпр.Курс / КурсыВалютыУпр.Кратность)) КАК ОбщийДолг
		|ПОМЕСТИТЬ ОбщийДолгОптовыхПартнеров
		|ИЗ
		|	ДолгиОптовыхПартнеров КАК  ДолгиОптовыхПартнеров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецСегодня, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) КАК КурсыВалютыУпр
		|По Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецСегодня, Валюта В (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы)) КАК КурсыВалютыДолга
		|По КурсыВалютыДолга.Валюта = ДолгиОптовыхПартнеров.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнер
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 12.
		|ВЫБРАТЬ
		|	Партнер 			КАК Партнер,
		|	ЗаказКлиента		КАК ЗаказКлиента,
		|	Валюта				КАК Валюта,
		|	СУММА(СуммаОстаток) КАК Сумма
		|ПОМЕСТИТЬ СуммыПослеВыездаОптовыхПартнеров
		|ИЗ
		|	ОбщаяТаблицаЗадолженностейПоДокументам
		|
		|ГДЕ
		|	ДатаДокумента > &ДатаВыезда
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнер,
		|	ЗаказКлиента,
		|	Валюта
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 13.
		|ВЫБРАТЬ
		|	Партнер 			КАК Партнер,
		|	ЗаказКлиента		КАК ЗаказКлиента,
		|	Валюта				КАК Валюта,
		|	СУММА(СуммаОстаток) КАК СуммаПрострочки
		|ПОМЕСТИТЬ ТаблицаПрострочек
		|ИЗ
		|	ОбщаяТаблицаЗадолженностейПоДокументам
		|ГДЕ
		|	Прострочено = 1
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнер,
		|	ЗаказКлиента,
		|	Валюта
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 14.
		|ВЫБРАТЬ
		|	ТаблицаОптовыхПартнеровИМест.Партнер КАК Партнер,
		|	ВЫБОР
		|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
		|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
		|		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
		|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
		|	КОНЕЦ КАК Документ	
		|ПОМЕСТИТЬ ТаблицаДокументовПоМестам
		|ИЗ
		|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОптовыхПартнеровИМест КАК ТаблицаОптовыхПартнеровИМест
		|ПО ТаблицаОптовыхПартнеровИМест.Место = МестаПоДокументам.Место 
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 15.
		|УНИЧТОЖИТЬ ТаблицаОптовыхПартнеровИМест;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 16.
		|ВЫБРАТЬ
		|	ОбщаяТаблица.Партнер 		КАК Партнер,
		|	ОбщаяТаблица.ЗаказКлиента	КАК ЗаказКлиента,
		|	ОбщаяТаблица.Валюта			КАК Валюта,
		|	СУММА(ОбщаяТаблица.СуммаОстаток) КАК СуммаОстаток
		|ПОМЕСТИТЬ ДолгиПоДокументам
		|ИЗ
		|	ОбщаяТаблицаЗадолженностейПоДокументам КАК ОбщаяТаблица
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументовПоМестам КАК ДокументыПоМестам
		|ПО 	ОбщаяТаблица.Партнер  = ДокументыПоМестам.Партнер
		|И 	ОбщаяТаблица.Документ = ДокументыПоМестам.Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбщаяТаблица.Партнер,
		|	ОбщаяТаблица.ЗаказКлиента,
		|	ОбщаяТаблица.Валюта	
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 17.
		|УНИЧТОЖИТЬ ТаблицаДокументовПоМестам; 
		///////////////////////////////////////////////////////////////////////////////////////////
		// 18.
		|УНИЧТОЖИТЬ ОбщаяТаблицаЗадолженностейПоДокументам; 
		///////////////////////////////////////////////////////////////////////////////////////////
		// 19.
		|ВЫБРАТЬ
		|	УсловиеОтгрузки 		КАК УсловиеОтгрузки,
		|	КредитныйЛимит 			КАК КредитныйЛимит,
		|	ДополнительныйПроцент 	КАК ДополнительныйПроцент
		|ПОМЕСТИТЬ УсловияОтгрузкиПоУмолчанию
		|ИЗ
		|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(&КонецСегодня, Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 20.
		|ВЫБРАТЬ
		|	Партнер					КАК Партнер,
		|	УсловиеОтгрузки 		КАК УсловиеОтгрузки,
		|	КредитныйЛимит 			КАК КредитныйЛимит,
		|	ДополнительныйПроцент 	КАК ДополнительныйПроцент,
		|	ДействителенДо			КАК ДействителенДо
		|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерамПредварительные
		|ИЗ
		|	РегистрСведений.КТС_НастройкиУсловийОтгрузки.СрезПоследних(&КонецСегодня, Партнер В (ВЫБРАТЬ Партнер ИЗ ТаблицаОптовыхПартнеров))
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 21.
		|ВЫБРАТЬ
		|	ТаблицаПартнеров.Партнер КАК Партнер,
		|	ВЫБОР		
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоУмолчанию.УсловиеОтгрузки, ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит))
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки, ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит))
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДействителенДо <= НАЧАЛОПЕРИОДА(&КонецСегодня, ДЕНЬ)
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоУмолчанию.УсловиеОтгрузки, ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит))		
		|		ИНАЧЕ ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.УсловиеОтгрузки, ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит))
		|	КОНЕЦ КАК УсловиеОтгрузки,
		|	ВЫБОР		
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоУмолчанию.КредитныйЛимит, 0)
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит, 0)
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДействителенДо <= НАЧАЛОПЕРИОДА(&КонецСегодня, ДЕНЬ)
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоУмолчанию.КредитныйЛимит, 0)
		|		ИНАЧЕ ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.КредитныйЛимит, 0)
		|	КОНЕЦ КАК КредитныйЛимит,
		|	ВЫБОР
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоУмолчанию.ДополнительныйПроцент, 0)
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент, 0)
		|		КОГДА УсловияОтгрузкиПоПартнерамПредварительные.ДействителенДо <= НАЧАЛОПЕРИОДА(&КонецСегодня, ДЕНЬ)
		|			ТОГДА ЕСТЬNULL(УсловияОтгрузкиПоУмолчанию.ДополнительныйПроцент, 0)
		|		ИНАЧЕ ЕСТЬNULL(УсловияОтгрузкиПоПартнерамПредварительные.ДополнительныйПроцент, 0)
		|	КОНЕЦ КАК ДополнительныйПроцент
		|ПОМЕСТИТЬ УсловияОтгрузкиПоПартнерам
		|ИЗ
		|	ТаблицаОптовыхПартнеров КАК ТаблицаПартнеров
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоУмолчанию КАК УсловияОтгрузкиПоУмолчанию
		|ПО ИСТИНА
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоПартнерамПредварительные КАК УсловияОтгрузкиПоПартнерамПредварительные
		|ПО ТаблицаПартнеров.Партнер = УсловияОтгрузкиПоПартнерамПредварительные.Партнер
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 22.
		|УНИЧТОЖИТЬ УсловияОтгрузкиПоУмолчанию;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 23.
		|УНИЧТОЖИТЬ УсловияОтгрузкиПоПартнерамПредварительные;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 24.
		|ВЫБРАТЬ
		|	ТаблицаОптовыхПартнеров.ДокументПоездки 	КАК ДокументПоездки,
		|	ТаблицаОптовыхПартнеров.Партнер 			КАК Партнер,
		|	ДолгиОптовыхПартнеров.ЗаказКлиента  		КАК ЗаказКлиента,
		|	ДолгиОптовыхПартнеров.Валюта				КАК Валюта,
		|	ВЫБОР
		|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.ТоварныйКредит)
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА IsNull(ТаблицаПрострочек.СуммаПрострочки, 0) < IsNull(ОбщДолгОП.ОбщийДолг, 0) - УсловияОтгрузки.КредитныйЛимит
		|					ТОГДА	ВЫБОР
		|								КОГДА IsNull(ДолгиОптовыхПартнеров.ДолгУПР, 0) < IsNull(ОбщДолгОП.ОбщийДолг, 0) - УсловияОтгрузки.КредитныйЛимит
		|								ТОГДА IsNull(ДолгиОптовыхПартнеров.Долг, 0)
		|								ИНАЧЕ IsNull(ОбщДолгОП.ОбщийДолг, 0) - УсловияОтгрузки.КредитныйЛимит - IsNull(СуммыПослеВыезда.Сумма, 0)
		|							КОНЕЦ  
		|					ИНАЧЕ IsNull(ТаблицаПрострочек.СуммаПрострочки, 0)
		|				КОНЕЦ
		|		КОГДА УсловияОтгрузки.УсловиеОтгрузки = ЗНАЧЕНИЕ(Перечисление.КТС_УсловияОтгрузки.РеструктуризацияДолга)
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА (IsNull(ДолгиПоДокументам.СуммаОстаток,0) * (1+(УсловияОтгрузки.ДополнительныйПроцент*0.01))) < (IsNull(ОбщДолгОП.ОбщийДолг, 0) - УсловияОтгрузки.КредитныйЛимит)
		|					ТОГДА	ВЫБОР
		|								КОГДА IsNull(ДолгиОптовыхПартнеров.ДолгУПР, 0) < IsNull(ОбщДолгОП.ОбщийДолг, 0) - УсловияОтгрузки.КредитныйЛимит
		|								ТОГДА IsNull(ДолгиОптовыхПартнеров.Долг, 0)
		|								ИНАЧЕ IsNull(ОбщДолгОП.ОбщийДолг, 0) - УсловияОтгрузки.КредитныйЛимит - IsNull(СуммыПослеВыезда.Сумма, 0)
		|							КОНЕЦ
		|					ИНАЧЕ IsNull(ДолгиПоДокументам.СуммаОстаток,0) * (1+(УсловияОтгрузки.ДополнительныйПроцент*0.01))
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаУчета
		|ПОМЕСТИТЬ ФинансыОптовыхПартнеров	
		|ИЗ
		|	ТаблицаОптовыхПартнеров КАК ТаблицаОптовыхПартнеров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ОбщийДолгОптовыхПартнеров КАК ОбщДолгОП
		|ПО  ОбщДолгОП.Партнер = ТаблицаОптовыхПартнеров.Партнер	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ УсловияОтгрузкиПоПартнерам КАК УсловияОтгрузки
		|ПО  УсловияОтгрузки.Партнер = ТаблицаОптовыхПартнеров.Партнер
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДолгиОптовыхПартнеров КАК ДолгиОптовыхПартнеров
		|ПО 	ДолгиОптовыхПартнеров.Партнер = ТаблицаОптовыхПартнеров.Партнер
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ СуммыПослеВыездаОптовыхПартнеров КАК СуммыПослеВыезда
		|ПО 	СуммыПослеВыезда.Партнер 	  	= ДолгиОптовыхПартнеров.Партнер
		|И	СуммыПослеВыезда.ЗаказКлиента 	= ДолгиОптовыхПартнеров.ЗаказКлиента
		|И	СуммыПослеВыезда.Валюта 	  	= ДолгиОптовыхПартнеров.Валюта	
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПрострочек КАК ТаблицаПрострочек
		|ПО 	ТаблицаПрострочек.Партнер 	   	= ДолгиОптовыхПартнеров.Партнер
		|И	ТаблицаПрострочек.ЗаказКлиента 	= ДолгиОптовыхПартнеров.ЗаказКлиента
		|И	ТаблицаПрострочек.Валюта 	   	= ДолгиОптовыхПартнеров.Валюта
	    |
		|ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоДокументам КАК ДолгиПоДокументам
		|ПО 	ДолгиПоДокументам.Партнер 	   	= ДолгиОптовыхПартнеров.Партнер
		|И	ДолгиПоДокументам.ЗаказКлиента 	= ДолгиОптовыхПартнеров.ЗаказКлиента
		|И	ДолгиПоДокументам.Валюта 	   	= ДолгиОптовыхПартнеров.Валюта
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 25.
		|УНИЧТОЖИТЬ ДолгиОптовыхПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 26.
		|УНИЧТОЖИТЬ ОбщийДолгОптовыхПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 27.
		|УНИЧТОЖИТЬ УсловияОтгрузкиПоПартнерам;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 28.
		|УНИЧТОЖИТЬ ТаблицаПрострочек;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 29.
		|УНИЧТОЖИТЬ ДолгиПоДокументам;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 30.
		|УНИЧТОЖИТЬ СуммыПослеВыездаОптовыхПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 31.
		|ВЫБРАТЬ
		|	ФинансыОптовыхПартнеров.ДокументПоездки КАК ДокументПоездки,
		|	ФинансыОптовыхПартнеров.Партнер 		КАК Партнер,
		|	ФинансыОптовыхПартнеров.ЗаказКлиента  	КАК ЗаказКлиента,
		|	ФинансыОптовыхПартнеров.Валюта			КАК Валюта,
		|	ФинансыОптовыхПартнеров.СуммаУчета 		КАК СуммаУчета,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем, 0) 	КАК СуммаПолученнаяВодителем,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПоФакту, 0) 				КАК СуммаПоФакту,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0) КАК СуммаНазначеннаяМенеджером,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.BalanceCode, 0) 				КАК BalanceCode  	
		|ИЗ
		|	ФинансыОптовыхПартнеров КАК ФинансыОптовыхПартнеров	
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ПО  ПоездкаЗаМаршрутомФинансы.ДокументПоездки = ФинансыОптовыхПартнеров.ДокументПоездки
		|И	 ПоездкаЗаМаршрутомФинансы.Партнер 		   = ФинансыОптовыхПартнеров.Партнер
		|И	 ПоездкаЗаМаршрутомФинансы.ЗаказКлиента    = ФинансыОптовыхПартнеров.ЗаказКлиента
		|
		|ГДЕ
		|	ФинансыОптовыхПартнеров.ЗаказКлиента <> Неопределено
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаОптовыхПартнеров.ДокументПоездки,
		|	ТаблицаОптовыхПартнеров.Партнер,
		|	ТаблицаОптовыхПартнеров.Партнер.ДоговорUSD,
		|	Константа.ВалютаУправленческогоУчета,
		|	0,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПоФакту, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.BalanceCode, 0)		
		|ИЗ
		|	ТаблицаОптовыхПартнеров КАК ТаблицаОптовыхПартнеров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ВалютаУправленческогоУчета ИЗ Константы) КАК Константа
		|ПО Истина 
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ПО  ПоездкаЗаМаршрутомФинансы.ДокументПоездки = ТаблицаОптовыхПартнеров.ДокументПоездки
		|И	 ПоездкаЗаМаршрутомФинансы.Партнер 		   = ТаблицаОптовыхПартнеров.Партнер
		|И	 ПоездкаЗаМаршрутомФинансы.ЗаказКлиента    = ТаблицаОптовыхПартнеров.Партнер.ДоговорUSD
	  	|
		|ГДЕ
		|	(ТаблицаОптовыхПартнеров.Партнер, ТаблицаОптовыхПартнеров.Партнер.ДоговорUSD) НЕ В (ВЫБРАТЬ Партнер, ЗаказКлиента ИЗ ФинансыОптовыхПартнеров)
		|	
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаОптовыхПартнеров.ДокументПоездки,
		|	ТаблицаОптовыхПартнеров.Партнер,
		|	ТаблицаОптовыхПартнеров.Партнер.ДоговорГРН,
		|	Константа.ВалютаРегламентированногоУчета,
		|	0,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПоФакту, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.BalanceCode, 0)		
		|ИЗ
		|	ТаблицаОптовыхПартнеров КАК ТаблицаОптовыхПартнеров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ВалютаРегламентированногоУчета ИЗ Константы) КАК Константа
		|ПО Истина 
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ПО  ПоездкаЗаМаршрутомФинансы.ДокументПоездки = ТаблицаОптовыхПартнеров.ДокументПоездки
		|И	 ПоездкаЗаМаршрутомФинансы.Партнер 		   = ТаблицаОптовыхПартнеров.Партнер
		|И	 ПоездкаЗаМаршрутомФинансы.ЗаказКлиента    = ТаблицаОптовыхПартнеров.Партнер.ДоговорГРН
		|	
		|ГДЕ
		|	(ТаблицаОптовыхПартнеров.Партнер, ТаблицаОптовыхПартнеров.Партнер.ДоговорГРН) НЕ В (ВЫБРАТЬ Партнер, ЗаказКлиента ИЗ ФинансыОптовыхПартнеров)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФинансыПрочихПартнеров.ДокументПоездки,
		|	ФинансыПрочихПартнеров.Партнер,
		|	ФинансыПрочихПартнеров.ЗаказКлиента,
		|	ФинансыПрочихПартнеров.Валюта,
		|	ФинансыПрочихПартнеров.СуммаУчета,
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПолученнаяВодителем, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаПоФакту, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.СуммаНазначеннаяМенеджером, 0),
		|	IsNull(ПоездкаЗаМаршрутомФинансы.BalanceCode, 0)		
		|ИЗ
		|	ФинансыПрочихПартнеров КАК ФинансыПрочихПартнеров
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоездкаЗаМаршрутомФинансы КАК ПоездкаЗаМаршрутомФинансы
		|ПО ПоездкаЗаМаршрутомФинансы.ДокументПоездки   = ФинансыПрочихПартнеров.ДокументПоездки
		|И	 ПоездкаЗаМаршрутомФинансы.Партнер 		   = ФинансыПрочихПартнеров.Партнер
		|И	 ПоездкаЗаМаршрутомФинансы.ЗаказКлиента    = ФинансыПрочихПартнеров.ЗаказКлиента
		|
		|ГДЕ
		|	ФинансыПрочихПартнеров.СуммаУчета >= 0
		|;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 32.
		|УНИЧТОЖИТЬ ТаблицаОптовыхПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 33.
		|УНИЧТОЖИТЬ ФинансыПрочихПартнеров;
		///////////////////////////////////////////////////////////////////////////////////////////
		// 34.
		|УНИЧТОЖИТЬ ФинансыОптовыхПартнеров;
		|";
 
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОплат()



Функция ПолучитьИндексРезультатаПакетаПоездки(ДокументСсылка)
	
	Если ДокументСсылка.ВидПоездки = Перечисления.КТС_ВидыПоездки.ОсновнаяПоездка Тогда
		Возврат 17;	
	Иначе
		Возврат 5;	
	КонецЕсли;	
	
КонецФункции

#КонецОбласти 

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "2.0.6";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "РасчетСуммОплатПартнеров");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "РасчетСуммОплатПартнеров [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "РасчетСуммОплатПартнеров [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "РасчетСуммОплатПартнеров");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры //ПодменитьДействиеУправляемоеПриложение()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()

// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()


// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти
