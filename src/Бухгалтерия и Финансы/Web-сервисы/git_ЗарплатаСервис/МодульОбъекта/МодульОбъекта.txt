

#Область ПрограммныйИнтерфейс

Функция ПолучитьСписокКасс(ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		CashboxListMetaData	= СоздатьФабрикуXDTOПоИмени("CashboxListMetaData"); 
		CashboxList			= СоздатьФабрикуXDTOПоИмени("CashboxList");
		
		Запрос 			= Новый Запрос;
		Запрос.Текст    = ТекстЗапросаСписокКасс();
		
		Запрос.УстановитьПараметр("Свойство", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоКассаДляВыдачиЗП_B2B());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Cashbox 		= СоздатьФабрикуXDTOПоИмени("Cashbox");
			Cashbox.Name 	= Выборка.Наименование;
			Cashbox.UID 	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
			CashboxList.Cashbox.Добавить(Cashbox);
		КонецЦикла;
		
		ТекстСообщения			 	= ПодготовитьТекст("Список касс сформирован успешно.");
		CashboxListMetaData.Meta 	= СформироватьОбъектMeta(200, "OK", ТекстСообщения);
		CashboxListMetaData.Data	= CashboxList;		
		
		Возврат CashboxListMetaData;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Зарплата сервис", "git_ЗарплатаСервис") Тогда	
			Возврат git_ЗарплатаСервис.ПолучитьСписокКасс(Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Зарплата сервис");
			Возврат ВнешнийОбъект.ПолучитьСписокКасс(Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьСписокКасс()

Функция ПолучитьСписокЗаявокНаРасходованиеДенежныСредств(КодПартнера, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		OrderListMetaData	= СоздатьФабрикуXDTOПоИмени("OrderListMetaData");
		OrderList			= СоздатьФабрикуXDTOПоИмени("OrderList");
		
		Если ПустаяСтрока(КодПартнера) Тогда
			ТекстСообщения			 = ПодготовитьТекст("Код партнера не должен быть пустым.");
			OrderListMetaData.Meta 	 = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderListMetaData;
		КонецЕсли;
		
		Запрос 			= Новый Запрос;
		Запрос.Текст    = ТекстЗапросаСписокЗаявок();
		
		Запрос.УстановитьПараметр("КодПартнера", Прав("000000000" + КодПартнера, 9)); 
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
		Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Order = СоздатьФабрикуXDTOПоИмени("Order");
			Order.Date 			= Формат(Выборка.Дата, "ДФ=dd.MM.yy hh:mm:ss");
			Order.Sum 			= Выборка.Сумма;
			Order.Cashbox 		= Выборка.Касса;
			Order.PaymentDate 	= ?(ЗначениеЗаполнено(Выборка.ДатаПлатежа), Формат(Выборка.ДатаПлатежа, "ДФ=dd.MM.yy hh:mm:ss")," ");
			Order.OrderStatus 	= Выборка.СтатусНаименование;
			Order.UID 			= ?(Выборка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована, Строка(Выборка.Заявка.УникальныйИдентификатор()), " ");
			Order.IsPaid 		= ?(Выборка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена, Ложь, Выборка.ЗаявкаОплачена);
			OrderList.Order.Добавить(Order);
		КонецЦикла;
		
		ТекстСообщения			 	= ПодготовитьТекст("Список заявок успешно сформирован.");
		OrderListMetaData.Meta 		= СформироватьОбъектMeta(200, "OK", ТекстСообщения);
		OrderListMetaData.Data		= OrderList;
		
		Возврат OrderListMetaData;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Зарплата сервис", "git_ЗарплатаСервис") Тогда	
			Возврат git_ЗарплатаСервис.ПолучитьСписокЗаявокНаРасходованиеДенежныСредств(КодПартнера, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Зарплата сервис");
			Возврат ВнешнийОбъект.ПолучитьСписокЗаявокНаРасходованиеДенежныСредств(КодПартнера, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьСписокЗаявокНаРасходованиеДенежныСредств()

Функция ПолучитьСуммуКОплате(КодПартнера, ПеренаправлениеОпределено = Ложь) Экспорт 

	Если ПеренаправлениеОпределено Тогда
		
		SumToBePaidMetaData = СоздатьФабрикуXDTOПоИмени("SumToBePaidMetaData");
		
		Если ПустаяСтрока(КодПартнера) Тогда
			ТекстСообщения			 = ПодготовитьТекст("Код партнера не должен быть пустым.");
			SumToBePaidMetaData.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат SumToBePaidMetaData;
		КонецЕсли;
		
		ТекстСообщения			 	= ПодготовитьТекст("Сумма выплат успешно сформирована.");
		SumToBePaidMetaData.Meta 	= СформироватьОбъектMeta(200, "OK", ТекстСообщения);
		SumToBePaidMetaData.Data    = ПолучитьСуммуКВыплате(КодПартнера);
		
		Возврат SumToBePaidMetaData;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Зарплата сервис", "git_ЗарплатаСервис") Тогда	
			Возврат git_ЗарплатаСервис.ПолучитьСуммуКОплате(КодПартнера, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Зарплата сервис");
			Возврат ВнешнийОбъект.ПолучитьСуммуКОплате(КодПартнера, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьСуммуКОплате()

Функция СоздатьЗаявкуНаРасходованиеДенежныхСредств(КодПартнера, УИДКассы, СуммаЗаявки, ДатаОплаты, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		OrderPostedMeta = СоздатьФабрикуXDTOПоИмени("OrderPostedMeta");
		
		Если ПустаяСтрока(КодПартнера) Тогда
			ТекстСообщения		 = ПодготовитьТекст("Код партнера не должен быть пустым.");
			OrderPostedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		ПартнерСсылка = Справочники.Партнеры.НайтиПоКоду(Прав("000000000" + КодПартнера, 9));
		Если ПустаяСтрока(ПартнерСсылка.ВерсияДанных) Тогда
			ТекстСообщения		 = ПодготовитьТекст("Партнера с кодом %1 не найдено.");
			ТекстСообщения		 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодПартнера);
			OrderPostedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СокрЛП(УИДКассы)) Тогда
			ТекстСообщения		 = ПодготовитьТекст("Не задан уникальный идентификатор кассы.");
			OrderPostedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		ИдентификаторКассы = Новый УникальныйИдентификатор(СокрЛП(УИДКассы));
		КассаСсылка		   = Справочники.Кассы.ПолучитьСсылку(ИдентификаторКассы);
		Если ПустаяСтрока(КассаСсылка.ВерсияДанных) Тогда
			ТекстСообщения		 = ПодготовитьТекст("По идентификатору %1 не найдено ни одной кассы.");
			ТекстСообщения		 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УИДКассы);
			OrderPostedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		Если СуммаЗаявки <= 0 Тогда
			ТекстСообщения		 = ПодготовитьТекст("Сумма для выплаты должна быть больше 0.");
			OrderPostedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		ДоступнаяСумма = ПолучитьСуммуКВыплате(КодПартнера);
		
		Если ДоступнаяСумма < СуммаЗаявки Тогда
			ТекстСообщения		 = ПодготовитьТекст("Сумма для выплаты больше за доступную сумму.");
			OrderPostedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		СообщениеОбОшибке  = "";
		
		НачатьТранзакцию();
		
		РезультатПровдения = СоздатьЗаявкуНаВыдачуДенежныхСредств(ПартнерСсылка, КассаСсылка, СуммаЗаявки, ДатаОплаты,  СообщениеОбОшибке);
		
		Если Не РезультатПровдения Тогда
			ОтменитьТранзакцию();
			ТекстСообщения		 = ПодготовитьТекст("Для партнера %1 не удалось создать заявку на расходование денежных средств на сумму %2. %3");
			ТекстСообщения		 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПартнерСсылка, СуммаЗаявки, СообщениеОбОшибке);
			OrderPostedMeta.Meta = СформироватьОбъектMeta(500, "InternalServerError", ТекстСообщения);
			Возврат OrderPostedMeta;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ТекстСообщения		 = ПодготовитьТекст("Заявка на расходование денежных средств создана успешно.");
		ТекстСообщения		 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПартнерСсылка, СуммаЗаявки);
		OrderPostedMeta.Meta = СформироватьОбъектMeta(200, "OK", ТекстСообщения);
		
		Возврат OrderPostedMeta;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Зарплата сервис", "git_ЗарплатаСервис") Тогда	
			Возврат git_ЗарплатаСервис.СоздатьЗаявкуНаРасходованиеДенежныхСредств(КодПартнера, УИДКассы, СуммаЗаявки, ДатаОплаты, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Зарплата сервис");
			Возврат ВнешнийОбъект.СоздатьЗаявкуНаРасходованиеДенежныхСредств(КодПартнера, УИДКассы, СуммаЗаявки, ДатаОплаты, Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // СоздатьЗаявкуНаРасходованиеДенежныхСредств()

Функция УдалитьЗаявкуНаРасходованиеДенежныхСредств(УИДЗаявки, ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда
		
		OrderDeletedMeta = СоздатьФабрикуXDTOПоИмени("OrderDeletedMeta");

		Если ПустаяСтрока(УИДЗаявки) Тогда
			ТекстСообщения		  = ПодготовитьТекст("Уникальный идентификатор заявки на расходование денежных средств не должен быть пустым.");
			OrderDeletedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderDeletedMeta;
		КонецЕсли;
		
		Попытка
			УИЗаявки = Новый УникальныйИдентификатор(УИДЗаявки);
		Исключение
			ТекстСообщения		  = ПодготовитьТекст("Не удалось получить уникальный идентификатор заявки на расходование денежных срежств.");
			OrderDeletedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderDeletedMeta;
		КонецПопытки;
		
		ЗаявкаСсылка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьСсылку(УИЗаявки);
		Если ПустаяСтрока(ЗаявкаСсылка.ВерсияДанных) Тогда
			ТекстСообщения		  = ПодготовитьТекст("Не удалось найти заявку на расходование дененых средств.");
			OrderDeletedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderDeletedMeta;
		КонецЕсли;
		
		ЗаявкаОбъект = ЗаявкаСсылка.ПолучитьОбъект();
		
		Если ЗаявкаОбъект.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована Тогда
			ТекстСообщения		  = ПодготовитьТекст("Отменять разрешено только несогласованные заявки.");
			OrderDeletedMeta.Meta = СформироватьОбъектMeta(400, "BadRequest", ТекстСообщения);
			Возврат OrderDeletedMeta;
		КонецЕсли;
		
		ЗаявкаОбъект.УстановитьСтатус("Отклонена", Неопределено);
		
		Попытка
		    ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);					
		Исключение
		    ТекстСообщения		  = ПодготовитьТекст("Не удалось отменить заявку на расходование денежных средств.");
			ТекстСообщения		  = ТекстСообщения + ОписаниеОшибки();
			OrderDeletedMeta.Meta = СформироватьОбъектMeta(400, "InternalServerError", ТекстСообщения);
			Возврат OrderDeletedMeta;
		КонецПопытки;
		
		ТекстСообщения		  = ПодготовитьТекст("Заявка на расходование денежных срежств успешно отменена..");
		OrderDeletedMeta.Meta = СформироватьОбъектMeta(200, "OK", ТекстСообщения);
		Возврат OrderDeletedMeta;
		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Зарплата сервис", "git_ЗарплатаСервис") Тогда	
			Возврат git_ЗарплатаСервис.УдалитьЗаявкуНаРасходованиеДенежныхСредств(УИДЗаявки, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Зарплата сервис");
			Возврат ВнешнийОбъект.УдалитьЗаявкуНаРасходованиеДенежныхСредств(УИДЗаявки, Истина);	
		КонецЕсли;	
	КонецЕсли;

КонецФункции // УдалитьЗаявкуНаРасходованиеДенежныхСредств()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаИзXDTO

Функция СоздатьФабрикуXDTOПоИмени(Имя)
	ТипФабрики = ФабрикаXDTO.Тип("http://ktc-ua.com/salary", Имя);
	Возврат ФабрикаXDTO.Создать(ТипФабрики);
КонецФункции // СоздатьФабрикуXDTOПоИмени()

Функция СформироватьОбъектMeta(Code, ErrorType, ErrorMessage)
	
	MetaTag	= СоздатьФабрикуXDTOПоИмени("MetaTag");
	MetaTag.Code 		 = Code;
	MetaTag.ErrorType 	 = ErrorType;
	MetaTag.ErrorMessage = ErrorMessage;
	
	Возврат MetaTag;

КонецФункции // СформироватьОбъектMeta()

#КонецОбласти 

#Область РаботаИзЗапросами

Функция ТекстЗапросаСписокКасс()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Кассы.Ссылка		КАК Ссылка,
	               |	Кассы.Наименование  КАК Наименование
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО (Кассы.Ссылка = (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Кассы)))
	               |			И (ДополнительныеСведения.Свойство = &Свойство)
	               |			И (ДополнительныеСведения.Значение = ИСТИНА)
	               |ГДЕ
	               |	Кассы.ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСписокКасс()

Функция ТекстЗапросаСписокЗаявок()

	ТекстЗапроса = "
				   |ВЫБРАТЬ
				   |	ВЫРАЗИТЬ(Объект КАК Справочник.Пользователи)	КАК КтоЗаявил,
				   |	ВЫРАЗИТЬ(Значение КАК Справочник.Партнеры)   	КАК Партнер
				   |ПОМЕСТИТЬ ТаблицаПартнеры
				   |ИЗ
				   |	РегистрСведений.ДополнительныеСведения
				   |ГДЕ
				   |	Свойство = &СвойствоПартнерЗП
				   |	И ВЫРАЗИТЬ(Значение КАК Справочник.Партнеры).Код = &КодПартнера
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ДокументыЗаявки.Ссылка 					КАК ЗаявкаНаРасходованиеДенежныхСредств,
				   |	ДокументыЗаявки.Ссылка.СуммаДокумента 	КАК Сумма
				   |ПОМЕСТИТЬ ТаблицаЗаявок
				   |ИЗ
				   |	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДокументыЗаявки
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПартнеры КАК ТаблицаПартнеры
				   |		ПО ДокументыЗаявки.Партнер 				= ТаблицаПартнеры.Партнер
				   |			И ДокументыЗаявки.Ссылка.КтоЗаявил  = ТаблицаПартнеры.КтоЗаявил
				   |ГДЕ
				   |	ДокументыЗаявки.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВЫРАЗИТЬ(ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК ЗаявкаНаРасходованиеДенежныхСредств,
				   |	ВЫБОР 
				   |		КОГДА СуммаОстаток < 0 
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК ЗаявкаОплачена
				   |ПОМЕСТИТЬ НеоплаченныеЗаявки
				   |ИЗ
				   |	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств В (ВЫБРАТЬ ЗаявкаНаРасходованиеДенежныхСредств ИЗ ТаблицаЗаявок))
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Валюта 				КАК Валюта,
	               |	Курс / Кратность 	КАК Курс
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 10
				   |	ТаблицаЗаявок.ЗаявкаНаРасходованиеДенежныхСредств 	КАК Заявка,
	               |	Заявки.Дата											КАК Дата,
				   |	ВЫБОР
				   |		КОГДА ТаблицаЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = &ВалютаРегл
				   |			ТОГДА ТаблицаЗаявок.Сумма
	               |		ИНАЧЕ ТаблицаЗаявок.Сумма * (ВЫРАЗИТЬ(КурсыВалютЗаявки.Курс / КурсыВалютРегл.Курс КАК ЧИСЛО(15, 4)))
				   |	КОНЕЦ 												КАК Сумма,
	               |	Заявки.Касса.Наименование 							КАК Касса,
	               |	Заявки.ДатаПлатежа									КАК ДатаПлатежа,
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(Заявки.Статус) 					КАК СтатусНаименование,
				   |	Заявки.Статус										КАК Статус,
				   |	ЕСТЬNULL(НеоплаченныеЗаявки.ЗаявкаОплачена, ИСТИНА)	КАК ЗаявкаОплачена
	               |ИЗ
	               |	ТаблицаЗаявок КАК ТаблицаЗаявок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявки
	               |		ПО ТаблицаЗаявок.ЗаявкаНаРасходованиеДенежныхСредств = Заявки.Ссылка
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	               |		ПО (КурсыВалютРегл.Валюта = &ВалютаРегл),
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЗаявки
				   |		ПО ТаблицаЗаявок.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = КурсыВалютЗаявки.Валюта
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ НеоплаченныеЗаявки КАК НеоплаченныеЗаявки
				   |		ПО ТаблицаЗаявок.ЗаявкаНаРасходованиеДенежныхСредств = НеоплаченныеЗаявки.ЗаявкаНаРасходованиеДенежныхСредств
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Заявки.МоментВремени УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСписокЗаявок()

Функция ТекстЗапросаСуммаКОплате()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Партнер
	               |ПОМЕСТИТЬ ТаблицаПартнеры
	               |ИЗ
	               |	Справочник.Партнеры
	               |ГДЕ
	               |	Код = &КодПартнера
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Валюта 				КАК Валюта,
	               |	Курс / Кратность 	КАК Курс
	               |ПОМЕСТИТЬ КурсыВалют
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Валюта 			КАК Валюта,
	               |	-СуммаОстаток 	КАК Сумма
	               |ПОМЕСТИТЬ ТаблицаРасчеты
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ
	               |				(ВЫБРАТЬ
	               |					Партнер
	               |				ИЗ
	               |					ТаблицаПартнеры)
				   |			И Валюта = &ВалютаРегл)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Валюта,
	               |	-СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ
	               |				(ВЫБРАТЬ
	               |					Партнер
	               |				ИЗ
	               |					ТаблицаПартнеры)
				   |			И Валюта = &ВалютаРегл) 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(Заявки.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Валюта = &ВалютаРегл
	               |				ТОГДА Заявки.СуммаОстаток
	               |			ИНАЧЕ Заявки.СуммаОстаток * (ВЫРАЗИТЬ(КурсыВалютЗаявки.Курс / КурсыВалютРегл.Курс КАК ЧИСЛО(15, 4)))
	               |		КОНЕЦ) КАК Сумма
	               |ПОМЕСТИТЬ СуммыЗявок
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам.Партнер В
	               |				(ВЫБРАТЬ
	               |					ТаблицаПартнеры.Партнер
	               |				ИЗ
	               |					ТаблицаПартнеры КАК ТаблицаПартнеры)) КАК Заявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	               |		ПО (КурсыВалютРегл.Валюта = &ВалютаРегл),
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютЗаявки
				   |		ПО ВЫРАЗИТЬ(Заявки.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Валюта = КурсыВалютЗаявки.Валюта
	               |ГДЕ
	               |	Заявки.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаРасчеты.Валюта = &ВалютаРегл
	               |				ТОГДА ТаблицаРасчеты.Сумма
	               |			ИНАЧЕ ТаблицаРасчеты.Сумма * (ВЫРАЗИТЬ(КурсыВалютРасчетов.Курс / КурсыВалютРегл.Курс КАК ЧИСЛО(15, 4)))
	               |		КОНЕЦ) + ЕСТЬNULL(СуммыЗявок.Сумма, 0) КАК Сумма
	               |ИЗ
	               |	ТаблицаРасчеты КАК ТаблицаРасчеты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРасчетов
	               |		ПО ТаблицаРасчеты.Валюта = КурсыВалютРасчетов.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютРегл
	               |		ПО (КурсыВалютРегл.Валюта = &ВалютаРегл)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СуммыЗявок КАК СуммыЗявок
	               |		ПО (ИСТИНА)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СуммыЗявок.Сумма";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСуммаКОплате()

Функция ТекстЗапросаЗаполненияЗаявки()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Кассы.Владелец КАК Организация,
	               |	Кассы.ВалютаДенежныхСредств КАК Валюта,
	               |	Кассы.Ссылка КАК Касса
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.Ссылка = &КассаСсылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Пользователи).ТекущееПодразделение КАК Подразделение,
				   |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Пользователи) КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СвойствоПартнерЗП
	               |	И ДополнительныеСведения.Значение = &Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ПОМЕСТИТЬ ДоговорыКонтрагентов
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Партнер = &Партнер
				   |	И ДоговорыКонтрагентов.Организация = ВЫРАЗИТЬ(&КассаСсылка КАК Справочник.Кассы).Владелец
	               |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	               |	И ДоговорыКонтрагентов.ДатаОкончанияДействия < &ТекущаяДата
	               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
				   |	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Договор
	               |ИЗ
	               |	ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |		ПО ДоговорыКонтрагентов.Ссылка = ДопРеквизиты.Ссылка
	               |			И (ДопРеквизиты.Свойство = &ДопРеквизитДоговорЗП)
	               |			И (ДопРеквизиты.Значение = ИСТИНА)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗаполненияЗаявки()
 
	
#КонецОбласти 

Функция ПолучитьСуммуКВыплате(КодПартнера)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСуммаКОплате();
		
	Запрос.УстановитьПараметр("КодПартнера", Прав("000000000" + КодПартнера, 9));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
	СуммаКВыплате 	= 0;	
	Выборка 		= Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		Если Выборка.Сумма > 0 Тогда
			СуммаКВыплате = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаКВыплате;

КонецФункции // ПолучитьСуммуКВыплате()
 
Функция СоздатьЗаявкуНаВыдачуДенежныхСредств(Партнер, Касса, Сумма, ДатаОплаты, СообщениеОбОшибке)

	ПараметрыОбъекта 			= git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств();
	СтруктураЗаполненияЗаявки   = ПолучитьПараметрыЗаполненияЗаявки(Партнер, Касса);
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, СтруктураЗаполненияЗаявки);
	
	ДатаПлатежа = ТекущаяДата();
	ДатаО 		= СокрЛП(ДатаОплаты);
	Если Не ПустаяСтрока(ДатаО) Тогда
		ДатаПлатежа = Дата(Сред(ДатаО, 7) + Сред(ДатаО, 4, 2) + Сред(ДатаО, 1, 2));
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	ПараметрыОбъекта.Дата 								= ТекДата;
	ПараметрыОбъекта.ДатаПлатежа 						= ДатаПлатежа;
	ПараметрыОбъекта.ЖелательнаяДатаПлатежа 			= ТекДата;
	ПараметрыОбъекта.Статус 							= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	ПараметрыОбъекта.Заметки 							= ПодготовитьТекст("Заявка создана из сайта orderb2b");
	ПараметрыОбъекта.ХозяйственнаяОперация 				= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	ПараметрыОбъекта.КтоЗаявил 							= СтруктураЗаполненияЗаявки.Пользователь;
	ПараметрыОбъекта.Контрагент 						= ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	ПараметрыОбъекта.СуммаДокумента 					= Сумма;
	ПараметрыОбъекта.ФормаОплатыНаличная 				= Истина;
	ПараметрыОбъекта.Приоритет 							= Перечисления.Приоритеты.Средний;
	ПараметрыОбъекта.ФормаОплатыЗаявки 					= Перечисления.ФормыОплаты.Наличная;
	ПараметрыОбъекта.СтатьяДвиженияДенежныхСредств 		= Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("40623c7f-b3cd-11e2-b56c-001e673c80fc"));
	
	ЗаписьЖурналаРегистрации("Тест", УровеньЖурналаРегистрации.Ошибка,, , ОписаниеОшибки());
	
	Если Не ЗначениеЗаполнено(СтруктураЗаполненияЗаявки.Договор) Тогда
		Договор = СоздатьДоговорПартнера(СтруктураЗаполненияЗаявки, ктс_ПредопределенныеЗначенияПовтИсп.ДополнительныйРеквизитДоговорЗП(), Перечисления.ТипыДоговоров.СПоставщиком, СообщениеОбОшибке);
		Если Договор = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		СтруктураЗаполненияЗаявки.Договор = Договор;
	КонецЕсли;
	
	НоваяСтрока = ПараметрыОбъекта.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.Заказ					= СтруктураЗаполненияЗаявки.Договор;
	НоваяСтрока.Партнер 				= Партнер;
	НоваяСтрока.Сумма 					= Сумма;
	НоваяСтрока.ВалютаВзаиморасчетов 	= СтруктураЗаполненияЗаявки.Валюта;
	НоваяСтрока.СуммаВзаиморасчетов 	= Сумма;
	
	СтруктураОшибок = Новый Структура;
	
	ДокОбъект = git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств", ПараметрыОбъекта, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		СообщениеОбОшибке = ПодготовитьТекст("Не удалось создать документ «Заявка на расходование денежных средств».");
		Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
			СообщениеОбОшибке = СообщениеОбОшибке + ОшибкаИзСтруктуры.Значение;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);    	
	Исключение
	    СообщениеОбОшибке = ПодготовитьТекст("Не удалось создать документ «Заявка на расходование денежных средств».");
		СообщениеОбОшибке = СообщениеОбОшибке + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	СвойствоЗаявка = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоЗаявкаСозданаИзB2B();
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоЗаявка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Объект 		= ДокОбъект.Ссылка;
	Запись.Свойство 	= СвойствоЗаявка;
	Запись.Значение 	= Истина;
	
	Попытка
		НаборЗаписей.Записать();    	
	Исключение
	    СообщениеОбОшибке = ПодготовитьТекст("Не удалось установить дополнительное свойство для документа «Заявка на расходование денежных средств».");
		СообщениеОбОшибке = СообщениеОбОшибке + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	                              
КонецФункции // СоздатьЗаявкуНаВыдачуДенежныхСредств()

Функция ПолучитьПараметрыЗаполненияЗаявки(Партнер, Касса)

	СтруктураЗаполненияЗаявки = ПолучитьСтруктуруЗаполненияЗаявки();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаЗаполненияЗаявки();
	
	Запрос.УстановитьПараметр("КассаСсылка", Касса);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДопРеквизитДоговорЗП", ктс_ПредопределенныеЗначенияПовтИсп.ДополнительныйРеквизитДоговорЗП());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаКассы 			= РезультатыЗапроса[0].Выбрать();
	ВыборкаПодразделения    = РезультатыЗапроса[1].Выбрать();
	ВыборкаДоговор			= РезультатыЗапроса[3].Выбрать();
	
	Если ВыборкаКассы.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЗаполненияЗаявки, ВыборкаКассы);
	КонецЕсли;
	
	Если ВыборкаПодразделения.Следующий() Тогда
		СтруктураЗаполненияЗаявки.Вставить("Подразделение", ВыборкаПодразделения.Подразделение);
		СтруктураЗаполненияЗаявки.Вставить("Пользователь", ВыборкаПодразделения.Пользователь);
	КонецЕсли;
	
	Если ВыборкаДоговор.Следующий() Тогда
		СтруктураЗаполненияЗаявки.Вставить("Договор", ВыборкаДоговор.Договор);
	КонецЕсли;
	
	СтруктураЗаполненияЗаявки.Вставить("Партнер", Партнер);
	
	Возврат СтруктураЗаполненияЗаявки;

КонецФункции // ПолучитьПараметрыЗаполненияЗаявки()

Функция ПолучитьСтруктуруЗаполненияЗаявки()

	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Организация");
	СтруктураЗаполнения.Вставить("Валюта");
	СтруктураЗаполнения.Вставить("Касса");
	СтруктураЗаполнения.Вставить("Подразделение");
	СтруктураЗаполнения.Вставить("Договор");
	СтруктураЗаполнения.Вставить("Пользователь");

	
	Возврат СтруктураЗаполнения;

КонецФункции // ПолучитьСтруктуруЗаполненияЗаявки()

Функция СоздатьДоговорПартнера(СтруктураПараметров, ДопРеквизитДоговорЗП, ТипДоговора, ТекстОшибки)

	ПараметрыОбъекта = git_Templates.ПолучитьШаблонДоговорКонтрагента();
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, СтруктураПараметров);
	
	ПараметрыОбъекта.Вставить("Наименование", Строка(СтруктураПараметров.Партнер) + " (ЗП)");
	ПараметрыОбъекта.Вставить("ВалютаВзаиморасчетов", СтруктураПараметров.Валюта);
	ПараметрыОбъекта.Вставить("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыОбъекта.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
	ПараметрыОбъекта.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	ПараметрыОбъекта.Вставить("Согласован", Истина);
	ПараметрыОбъекта.Вставить("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	ПараметрыОбъекта.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ПараметрыОбъекта.Вставить("ТипДоговора", ТипДоговора);
	
	Контрагент = Неопределено;
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(СтруктураПараметров.Партнер, Контрагент);
	
	Если Контрагент = Неопределено Тогда
		ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось найти контрагента по умолачанию.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("Контрагент", Контрагент);
	
	СтруктураОшибок  = Новый Структура;
	СпрОбъект = git_Objcon.СоздатьСправочник("ДоговорыКонтрагентов", ПараметрыОбъекта, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось создать справочник «Договоры контрагентов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
			ТекстОшибки = ТекстОшибки + ОшибкаИзСтруктуры.Значение;
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СпрОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось записать справочник «Договоры контрагентов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		Возврат Неопределено;
	КонецПопытки;
	
	НоваяСтрока 		 = СпрОбъект.ДополнительныеРеквизиты.Добавить();
	НоваяСтрока.Свойство = ДопРеквизитДоговорЗП;
	НоваяСтрока.Значение = Истина;
	
	Попытка
		СпрОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось установить дополнительный рквизит для справочника «Договоры контрагентов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СпрОбъект.Ссылка;

КонецФункции // СоздатьДоговорПартнера()
 

Функция ПодготовитьТекст(знач ТекстДляПодготовки)
	Шаблон 		= "ru='%1'";
	Результат   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекстДляПодготовки);
	Возврат НСтр(Результат, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции // ПодготовитьТекст()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.0.23";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Зарплата сервис");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Зарплата сервис [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Зарплата сервис [" + Версия + "]", "КТСЗС", "ОткрытиеФормы", Ложь, "КТСЗС");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
