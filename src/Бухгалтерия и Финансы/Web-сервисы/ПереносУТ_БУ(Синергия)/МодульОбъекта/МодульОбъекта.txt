
Процедура СоздатьДокументы(ФормаОбработки, ДокументСсылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		Запрос = Новый Запрос("	
			|ВЫБРАТЬ
			|	РеализацияТоваровУслуг.ЗаказКлиента
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
			|И	ЗаказКлиента <> Значение(Документ.ЗаказКлиента.ПустаяСсылка)");
	Иначе 
		Запрос = Новый Запрос("	
			|ВЫБРАТЬ
			|	АктВыполненныхРабот.ЗаказКлиента
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
			|ГДЕ
			|	АктВыполненныхРабот.Ссылка = &ДокументСсылка
			|И	ЗаказКлиента <> Значение(Документ.ЗаказКлиента.ПустаяСсылка)");
	КонецЕсли;	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Реализация или акт без заказа, налоговую нельзя получить!"; 	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Первые 1
			|	СвязанныеДокументы.Ссылка КАК СчетНаОплату,
			|  	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.СчетНаОплатуКлиенту).БанковскийСчет КАК Счет,
			|  	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.СчетНаОплатуКлиенту).БанковскийСчет.ЕДРПОУОрганизации КАК КодПоЕДРПОУ
			|ИЗ
			|	КритерийОтбора.СвязанныеДокументы(&СсылкаНаЗаказ) КАК СвязанныеДокументы
			|ГДЕ
			|	СвязанныеДокументы.Ссылка Ссылка Документ.СчетНаОплатуКлиенту
			|И	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.СчетНаОплатуКлиенту).Аннулирован = Ложь	
			|	
			|УПОРЯДОЧИТЬ ПО
			|	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.СчетНаОплатуКлиенту).Дата Убыв";
		Запрос.УстановитьПараметр("СсылкаНаЗаказ", Выборка.ЗаказКлиента);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВызватьИсключение "На основании заказа нет счета на оплату!!!";			
		КонецЕсли;
	Иначе
		ВызватьИсключение "Реализация без заказа, налоговую нельзя получить!";	
	КонецЕсли;
	
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда

		Определения = Новый WSОпределения("http://localhost/sinergy/ws/YT11_BUH?wsdl", "UserKTC", "ktc16384");
		Прокси = Новый WSПрокси(Определения, "http://www.pogani-buhi.com", "YT11_BUH", "YT11_BUHSoap");	
		Прокси.Пользователь = "UserKTC";
		Прокси.Пароль = "ktc16384";
		
		Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда 
			ВызватьИсключение "В счете не заполнен БанковскийСчет организации!!!";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.КодПоЕДРПОУ) Тогда 
			ВызватьИсключение "В банковском счете не заполнен КодПоЕДРПОУ организации!!!";
		КонецЕсли;
		
		СчетНаОплатуXDTO = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.pogani-buhi.com", "СчетНаОплату"));
			
		СчетНаОплатуXDTO.Дата 				= Выборка.СчетНаОплату.Дата;
		СчетНаОплатуXDTO.Номер              = Выборка.СчетНаОплату.Номер;
		СчетНаОплатуXDTO.КодЄДРПОУ          = Выборка.КодПоЕДРПОУ;
		
		
		ЄдрпоуКонтрагента 					= КодЕДРПОУКонтрагента(ДокументСсылка.Контрагент);
		СчетНаОплатуXDTO.ЄдрпоуКонтрагента  = ЄдрпоуКонтрагента;
		СчетНаОплатуXDTO.Комментарий        = "КодЕДРПОУ: "+ЄдрпоуКонтрагента+" / Контрагент: "+ДокументСсылка.Контрагент.Наименование+" / Валюта: "+ДокументСсылка.Валюта.Наименование;
		
		Для каждого Товар Из ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), ДокументСсылка.Товары, ДокументСсылка.Услуги) Цикл
			ТоварыXDTO = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.pogani-buhi.com", "Товары"));	
			
			Номенклатура = Товар.Номенклатура;
			ТоварыXDTO.Код    				= Номенклатура.Код;
			ТоварыXDTO.Артикул              = Номенклатура.Артикул;
			ТоварыXDTO.Наименование         = Номенклатура.Наименование;
			ТоварыXDTO.НаименованиеПолное   = Номенклатура.НаименованиеПолное;
			ТоварыXDTO.УслугаТовар          = Строка(Номенклатура.ТипНоменклатуры);
			ТоварыXDTO.СуммаБезНДС          = Товар.Сумма;
			ТоварыXDTO.Количество           = ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"),Товар.КоличествоУпаковок,Товар.Количество);
			
			СчетНаОплатуXDTO.Товары.Добавить(ТоварыXDTO);
		КонецЦикла;
		ОтветПрокси = Прокси.ПереносСчетаУТ11вБухгалтерию(СчетНаОплатуXDTO);
		Если ОтветПрокси = "Счет успешно создан" Тогда 
			 ВыполнитьРассылку(Выборка.СчетНаОплату.Номер,Выборка.СчетНаОплату.Дата,Выборка.СчетНаОплату.БанковскийСчет.НазваниеОрганизации);
		КонецЕсли;
		Сообщить(ОтветПрокси);
	
	Иначе
		ВызватьИсключение "На основании заказа нет счета на оплату!!!";			
	КонецЕсли;
		
КонецПроцедуры

Функция КодЕДРПОУКонтрагента(Объект)
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
		               |ИЗ
		               |	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		               |ГДЕ
		               |	КонтрагентыДополнительныеРеквизиты.Ссылка = &Объект
		               |	И КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство";
		Запрос.УстановитьПараметр("Объект", Объект);
		УникальныйИдентификатор = Новый УникальныйИдентификатор("9f61b1c9-60d3-11e3-868b-001e673c80fc");
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УникальныйИдентификатор);
		Запрос.УстановитьПараметр("Свойство", Свойство);

		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Возврат РезультатЗапроса.Значение;
		Иначе 
			Возврат "";
		КонецЕсли;
КонецФункции



Процедура ВыполнитьРассылку(Номер,ДатаДокумента,Организация)
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "buh@ktc.rovno.ua", "Бухгалтерия"));
	//Кому.Добавить(Новый Структура("Адрес, Представление", "gplusuk@ktc.rovno.ua", "Отдел суперподдержки"));
	ТемаПисьма = "В 1С бухгалтерия (СИНЕРГИЯ) созданный счет на оплату покупателя №"+Номер+" от "+ДатаДокумента+" в организацию ' "+Организация+" '";
	ТелоПисьма = "";
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
КонецПроцедуры


// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.002";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ЗаполнениеОбъекта");


    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Перенести в БУ(Синергия)");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Перенести в БУ(Синергия)");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Перенести в БУ(Синергия) ["+Версия+"]","Перенести в БУ(Синергия) ["+Версия+"]", "ВызовКлиентскогоМетода", Истина);
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
