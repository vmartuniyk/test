#Область ПрограммныйИнтерфейс

Процедура АвтоматическоеСведенияОплат() Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Отказ = ЛОЖЬ;
	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	Если Отказ = Истина Тогда  Возврат; КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПартнеровПоАвтоСведению();
	Запрос.УстановитьПараметр("СвойствоПартнерЗП",ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	ВыборкаПартнерЗП = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПартнерЗП.Следующий() Цикл
		ПартнерЗП = ВыборкаПартнерЗП.ПартнерЗП;
		
		АвтоСведенияВРазрезеПоПартнеру(ПартнерЗП,Отказ);
		Если Отказ = Истина Тогда  Продолжить; КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаПартнеровПоПартнеруЗП();
		Запрос.УстановитьПараметр("ПартнерЗП",ПартнерЗП);
		ВыборкаПоИерархииПартнеров = Запрос.Выполнить().Выбрать(); 		
		
		Пока ВыборкаПоИерархииПартнеров.Следующий() Цикл
			
			Партнер = ВыборкаПоИерархииПартнеров.Партнер;
			
			Если Партнер = ПартнерЗП 
				ИЛИ ЗначениеЗаполнено(Партнер) = ЛОЖЬ Тогда
				Продолжить;			
			КонецЕсли;
			
			АвтоСведенияВРазрезеПоПартнеру(Партнер,Отказ);
			Если Отказ = Истина Тогда  Продолжить; КонецЕсли;

			СвестиКОдномуПартнеру(Партнер,ПартнерЗП);   			
		КонецЦикла
	КонецЦикла; 
	             
КонецПроцедуры

Процедура ОповеститьОбОшибкеВSlack(ИмяСобытия, ОписаниеОшибки)
	
	МассивПрикреплений = Новый Массив;
	СтруктураПрикреплений = git_Slack.ПолучитьСтруктуруПрикреплений();
	СтруктураПрикреплений.Вставить("fallback",  "Ошибка");
	СтруктураПрикреплений.Вставить("text",      ИмяСобытия);
	СтруктураПрикреплений.Вставить("pretext",   ОписаниеОшибки);
	СтруктураПрикреплений.Вставить("color",     "danger");
	МассивПрикреплений.Добавить(СтруктураПрикреплений);

	СтруктураДанных = git_Slack.ПолучитьПустуюСтруктуруДанных();
	СтруктураДанных.Вставить("username",    "Base (yt11)");
	СтруктураДанных.Вставить("icon_emoji",  ":shit:");
	СтруктураДанных.Вставить("channel",     "#general");
	СтруктураДанных.Вставить("attachments", МассивПрикреплений);
	git_Slack.ОтправитьДанные("ktchat.slack.com", "x2VEjiOJKl2UnSA5t2DinjEt", СтруктураДанных);
	
КонецПроцедуры // ОповеститьОбОшибкеВSlack()

#КонецОбласти          

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ)

	СтатьяДвиженияДенежныхСредствПоступлениеОплатыОтКлиента 		= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеОплатыОтКлиента();
	СтатьяДвиженияДенежныхСредствОплатаПоставщику 					= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСОплатаПоставщику();
	СтатьиДвиженияДенежныхСредствВозвратОплатыКлиенту				= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратОплатыКлиенту();
	СтатьяДвиженияДенежныхСредствВозвратДенежныхСредствОтПоставщика = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратДенежныхСредствОтПоставщика();
	СвойствоПартнерЗП 												= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП();
	СтатьяДвиженияДенежныхСредствПоступлениеДСИзДругойОрганизации 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеДСИзДругойОрганизации();
	   	

	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредствПоступлениеОплатыОтКлиента) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СтатьяДвиженияДенежныхСредствПоступлениеОплатыОтКлиента.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("Зведения взаиморасчетов по партнерам ЗП",СообщениеОбОшибке);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредствОплатаПоставщику) = ЛОЖЬ  Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СтатьяДвиженияДенежныхСредствОплатаПоставщику.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("Зведения взаиморасчетов по партнерам ЗП",СообщениеОбОшибке); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьиДвиженияДенежныхСредствВозвратОплатыКлиенту)  = ЛОЖЬ  Тогда		
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СтатьиДвиженияДенежныхСредствВозвратОплатыКлиенту.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("Зведения взаиморасчетов по партнерам ЗП",СообщениеОбОшибке);  	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредствВозвратДенежныхСредствОтПоставщика) = ЛОЖЬ  Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СтатьяДвиженияДенежныхСредствВозвратДенежныхСредствОтПоставщика.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("Зведения взаиморасчетов по партнерам ЗП",СообщениеОбОшибке); 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойствоПартнерЗП) = ЛОЖЬ  Тогда        		
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СвойствоПартнерЗП.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("Зведения взаиморасчетов по партнерам ЗП",СообщениеОбОшибке);    	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредствПоступлениеДСИзДругойОрганизации) = ЛОЖЬ  Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СтатьяДвиженияДенежныхСредствПоступлениеДСИзДругойОрганизации.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОповеститьОбОшибкеВSlack("Зведения взаиморасчетов по партнерам ЗП",СообщениеОбОшибке); 
	КонецЕсли;

КонецПроцедуры

Процедура АвтоСведенияВРазрезеПоПартнеру(Партнер,Отказ=ЛОЖЬ) Экспорт
	
	ПереплатыПоПартнеру(Партнер,Отказ);	
	Если Отказ Тогда   Возврат;	КонецЕсли;

	ПереплатыПоПоставщику(Партнер,Отказ);  
	Если Отказ Тогда   Возврат;	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаПартнераСВалютой();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Валюта = Выборка.Валюта;
		Если ЗначениеЗаполнено(Валюта) = ЛОЖЬ Тогда
			Продолжить;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаРасчетПартнера();
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("Валюта", Валюта);

		ТЗ_Расчеты = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_Расчеты.Количество()<=1 Тогда
			Продолжить;	
		КонецЕсли;   	
		
		СвестиПартнераКОдномуДолгу(Партнер,Валюта,Отказ);
		Если Отказ Тогда   Продолжить;	КонецЕсли;
		
		СвестиПоставщикаКОдномуДолгу(Партнер,Валюта,Отказ);
		Если Отказ Тогда   Продолжить;	КонецЕсли;
		
		МаксПоПартнеру = ПолучитьМаксимальнийДолгПоПартнеру(Партнер,Валюта);
		МаксПоПоставщику =  ПолучитьМаксимальнийДолгПоПоставщику(Партнер,Валюта);
		
		Если МаксПоПартнеру = 0 ИЛИ МаксПоПоставщику = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		Если МаксПоПартнеру >= МаксПоПоставщику Тогда
			СводитьПоставщикаКПартнеру(Партнер,Валюта);  
		Иначе
			СводитьКлиентаКПоставщику(Партнер,Валюта); 		
		КонецЕсли;  	
	КонецЦикла;
КонецПроцедуры

Процедура ПереплатыПоПартнеру(Партнер,Отказ=ЛОЖЬ)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаПереплатПоПартнеру();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка); 
		
		НачатьТранзакцию();   
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			Если Касса.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для переплаты по документам с клиентом.'");
				ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				Отказ = Истина;
				ОтменитьТранзакцию();
				Продолжить; 		
			КонецЕсли;
			
			
			Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка,Касса);
						
			Если Заявка = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			РКО = СоздатьРКОПоЗаявке(Заявка);
			Если РКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ПКО = СоздатьПриходныйКассовыйОрдерПредоплатСКлиента(РКО);
			Если ПКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;

		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
		    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			ОтменитьТранзакцию(); 
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; 	

КонецПроцедуры //ПереплатыПоПартнеру

Процедура ПереплатыПоПоставщику(Партнер,Отказ= ЛОЖЬ)

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаПереплатПоПоставщику();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка); 
		
		НачатьТранзакцию();   
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			Если Касса.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для переплаты по документам с клиентом.'");
				ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				Отказ = Истина;
				ОтменитьТранзакцию();
				Продолжить; 		
			КонецЕсли;
			
			ПКО = СоздатьПКОПереплатыРасчетыСПоставщиками(Выборка, Касса, Выборка.ЗаказПоставщику);
			Если ПКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;     
			
			Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиком(Выборка,ПКО);
						
			Если Заявка = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			РКО = СоздатьРКОПоЗаявке(Заявка);
			Если РКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с поставщиком.Общая разница по поставщику не совпадает."+ОписаниеОшибки()+"'");
		    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			ОтменитьТранзакцию(); 
			Продолжить;
		КонецЕсли;  		
	КонецЦикла;    	

КонецПроцедуры //ПереплатыПоПоставщику

Процедура СвестиПартнераКОдномуДолгу(Партнер,Валюта,Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВИдРасчетаДляСведенияБаланса();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Выгрузить().Количество() <=1 Тогда
		Возврат;	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СуммаОстаток = 0 Тогда
			Возврат;		
		КонецЕсли;
		
		ВидРасчета = Выборка.ВидРасчета;
		Если ВидРасчета = 0 Тогда
			СвестиКДоговоруИПКОРасчетыСКлиентами(Выборка,Отказ);
			СвестиМеждуОрганизациейПоКлиенту(Выборка,Отказ);
		ИначеЕсли ВидРасчета = 1 Тогда
			РазнестиПоДокументамПоДолгПредприятия(Выборка,Отказ);
			РазнестиПоДокументамПоДолгПредприятияПоДокументам(Выборка,Отказ);
			РазнестиДолгКОднойСуммеПоДолгуПартнера(Выборка,Отказ);
		ИначеЕсли ВидРасчета = 2 Тогда
			РазнестиПоДокументамПоДолгПартнера(Выборка,Отказ); 	
			РазнестиПоДокументамПоДолгПартнераСДокументами(Выборка,Отказ);
			РазнестиДолгКОднойСуммеПоДолгуПартнера(Выборка,Отказ);
		КонецЕсли;      	
	КонецЕсли;
	

КонецПроцедуры //СвестиПартнераКОдномуДолгу(Партнер,Валюта)

Процедура СвестиПоставщикаКОдномуДолгу(Партнер,Валюта,Отказ)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВИдРасчетаДляСведенияБалансаДляПоставщика();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Выгрузить().Количество() <=1 Тогда
		Возврат;	
	КонецЕсли;  	

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ВидРасчета = Выборка.ВидРасчета;
		Если ВидРасчета = 0 Тогда
			СвестиКДоговоруИПКОРасчетыСПоставщиком(Выборка,Отказ);
		ИначеЕсли ВидРасчета = 1 Тогда
			РазнестиПоДокументамПоДолгПоставщика(Выборка,Отказ);
			РазнестиПоДокументамПоДолгПоставщикаПоДокументам(Выборка,Отказ);
			РазнестиДолгКОднойСуммеПоДолгуПоставщика(Выборка,Отказ);    
		ИначеЕсли ВидРасчета = 2 Тогда
			РазнестиПоДокументамПоДолгамПредприятия(Выборка,Отказ); 	
			РазнестиПоДокументамПоДолгПредприятимПоставщикуСДокументами(Выборка,Отказ);
			РазнестиДолгКОднойСуммеПоДолгуПоставщика(Выборка,Отказ); 
		КонецЕсли;      	
	КонецЕсли;
	
КонецПроцедуры //СвестиПоставщикаКОдномуДолгу(Партнер,Валюта)

                     

Процедура СвестиКОдномуПартнеру(Партнер,ПартнерЗП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВалютПоПартнерам();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ПартнерЗП", ПартнерЗП);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Валюта = Выборка.Валюта;
		Если ЗначениеЗаполнено(Валюта) = ЛОЖЬ Тогда
			Продолжить;		
		КонецЕсли;      		
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаРасчетПартнера();
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("Валюта", Валюта);
		ВыборкаПартнер = Запрос.Выполнить().Выбрать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаРасчетПартнера();
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Партнер", ПартнерЗП);
		ВыборкаПартнерЗП = Запрос.Выполнить().Выбрать(); 
		                                                 		
		Если ВыборкаПартнер.Следующий() И ВыборкаПартнерЗП.Следующий() Тогда
			Если  ВыборкаПартнер.Порядок <>0 И ВыборкаПартнерЗП.Порядок<>0 Тогда
				СвестиРасчетиПартнеров(ВыборкаПартнер,ВыборкаПартнерЗП); 			
			КонецЕсли;  								
		КонецЕсли;      		
	КонецЦикла;    
КонецПроцедуры

Процедура СвестиРасчетиПартнеров(Выборка,ВыборкаОсновной)
	
	Если  Выборка.Клиент = Истина И ВыборкаОсновной.Клиент = ИСТИНА Тогда
		СвестиВзаиморасчетиКлиентаКлиент(Выборка,ВыборкаОсновной);   		
	ИначеЕсли Выборка.Клиент = Истина И ВыборкаОсновной.Клиент = ЛОЖЬ Тогда
		СвестиВзаиморасчетиКлиентаПоставщик(Выборка,ВыборкаОсновной);  
	ИначеЕсли Выборка.Клиент = ЛОЖЬ И ВыборкаОсновной.Клиент = ИСТИНА Тогда  
		СвестиВзаиморасчетиПоставщикКлиента(Выборка,ВыборкаОсновной);  		
	ИначеЕсли Выборка.Клиент = ЛОЖЬ И ВыборкаОсновной.Клиент = ЛОЖЬ Тогда 
		СвестиВзаиморасчетиПоставщикПоставщик(Выборка,ВыборкаОсновной);	
	КонецЕсли;

КонецПроцедуры //СвестиРасчетиПартнеров  

Процедура СвестиВзаиморасчетиКлиентаКлиент(Выборка,ВыборкаОсновной)
	НачатьТранзакцию(); 
	
		ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		ОбщаяРазницаОсновной = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
		Разница = ОбщаяРазница + ОбщаяРазницаОсновной;

			
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		Если Касса.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
			ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат; 		
		КонецЕсли;
		
		КассаОсновной = ПолучитьДоступнуюКассу(ВыборкаОсновной.Организация, ВыборкаОсновной.Валюта);
		Если КассаОсновной.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаОсновной.Партнер);
			ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			Отказ = Истина;
			ОтменитьТранзакцию();
			Возврат; 		
		КонецЕсли;
		
 		Если Выборка.СуммаОстаток >= 0 Тогда     			
			Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
			Если Заявка = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			РКО = СоздатьРКОПоЗаявке(Заявка);
			Если РКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток);
			Если ПКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;     			
			
			Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда  			
				СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаОсновной,Выборка.ЗаказКлиента, Выборка.СуммаОстаток,Отказ);
				Если Отказ = Истина Тогда
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли; 
			КонецЕсли;

		Иначе 	
			ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,Касса,Выборка.СуммаОстаток);
			Если ПКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 	
			
			Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток); 							
			Если Заявка = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;				
			РКО = СоздатьРКОПоЗаявке(Заявка);
			Если РКО = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;  	
			
			Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда  			
				СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаОсновной,Выборка,ВыборкаОсновной.ЗаказКлиента,Выборка.СуммаОстаток,Отказ);
				Если Отказ = Истина Тогда
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли; 
			КонецЕсли;
 
		КонецЕсли;    				
				
			
	ОбщаяРазницаПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновнойПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	РазницаПосле = ОбщаяРазницаПосле + ОбщаяРазницаОсновнойПосле;
	Если Разница = РазницаПосле Тогда
		ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
	    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОтменитьТранзакцию(); 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СвестиВзаиморасчетиКлиентаПоставщик(Выборка,ВыборкаОсновной)
	НачатьТранзакцию(); 
	ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновной = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	Разница = ОбщаяРазница + ОбщаяРазницаОсновной;
		
	Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
	Если Касса.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;
	
	КассаОсновной = ПолучитьДоступнуюКассу(ВыборкаОсновной.Организация, ВыборкаОсновной.Валюта);
	Если КассаОсновной.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаОсновной.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;

	Если Выборка.СуммаОстаток <= 0 Тогда   
		Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;   		
		
		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток);
		Если ПКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда			
			СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаОсновной,Выборка.ЗаказПоставщику, Выборка.СуммаОстаток,Отказ);
			Если Отказ = Истина Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;

	Иначе 				
		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,Касса,Выборка.СуммаОстаток);
		Если ПКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;                 
		
		Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;				
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;  
		
		Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда   			
			СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаОсновной,Выборка,ВыборкаОсновной.ЗаказКлиента,Выборка.СуммаОстаток,Отказ);
			Если Отказ = Истина Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ОбщаяРазницаПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновнойПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	РазницаПосле = ОбщаяРазницаПосле + ОбщаяРазницаОсновнойПосле;
	Если Разница = РазницаПосле Тогда
		ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
	    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОтменитьТранзакцию(); 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СвестиВзаиморасчетиПоставщикКлиента(Выборка,ВыборкаОсновной)
	НачатьТранзакцию(); 
	
	ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновной = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	Разница = ОбщаяРазница + ОбщаяРазницаОсновной;

		
	Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
	Если Касса.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;
	
	КассаОсновной = ПолучитьДоступнуюКассу(ВыборкаОсновной.Организация, ВыборкаОсновной.Валюта);
	Если КассаОсновной.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаОсновной.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;
	
	Если Выборка.СуммаОстаток >= 0 Тогда
		Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток);
		Если ПКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда 			
			СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаОсновной,Выборка.ЗаказПоставщику,Выборка.СуммаОстаток,Отказ);
			Если Отказ = Истина Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;

	Иначе 				
		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,Касса,Выборка.СуммаОстаток);
		Если ПКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;				
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда 			
			СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаОсновной,Выборка,ВыборкаОсновной.ЗаказКлиента, Выборка.СуммаОстаток,Отказ);
			Если Отказ = Истина Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;     
	КонецЕсли;
	
	ОбщаяРазницаПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновнойПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	РазницаПосле = ОбщаяРазницаПосле + ОбщаяРазницаОсновнойПосле;
	Если Разница = РазницаПосле Тогда 
		ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
	    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОтменитьТранзакцию(); 
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СвестиВзаиморасчетиПоставщикПоставщик(Выборка,ВыборкаОсновной)
	
	НачатьТранзакцию(); 

	ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновной = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	Разница = ОбщаяРазница + ОбщаяРазницаОсновной;

		
	Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
	Если Касса.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;
	
	КассаОсновной = ПолучитьДоступнуюКассу(ВыборкаОсновной.Организация, ВыборкаОсновной.Валюта);
	Если КассаОсновной.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаОсновной.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;
	
	Если Выборка.СуммаОстаток <= 0 Тогда
		Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток);
		Если ПКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда  			
			СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаОсновной,Выборка.ЗаказПоставщику, Выборка.СуммаОстаток,Отказ);
			Если Отказ = Истина Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;

	Иначе 				
		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,Касса,Выборка.СуммаОстаток);
		Если ПКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;   					
		
		Если ВыборкаОсновной.Организация <> Выборка.Организация Тогда   			
			СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаОсновной,Выборка,ВыборкаОсновной.ЗаказПоставщику,Выборка.СуммаОстаток,Отказ);
			Если Отказ = Истина Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ОбщаяРазницаПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновнойПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	РазницаПосле = ОбщаяРазницаПосле + ОбщаяРазницаОсновнойПосле;
	Если Разница = РазницаПосле Тогда  
		ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
	    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		ОтменитьТранзакцию(); 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#Область СозданиеДокументов

#Область СКлиентом

Функция СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка,Касса)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате(Выборка,Касса);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами()

Функция ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате(Выборка,Касса)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	ЗаказКлиента = Выборка.ЗаказКлиента;
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП. Автосписание ДС по документу: %Ссылка%. Было принято больше денег чем нужно или был документ РКО без основания'");

	СтруктураПараметров.Дата 					= ТДата;
 	СтруктураПараметров.ДатаПлатежа				= ТДата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ТДата;
	
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;   
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка);
	
	СтруктураПараметров.Заметки 				= Заметка;
	СтруктураПараметров.Организация				= Выборка.Организация;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.Контрагент				= Выборка.Контрагент;
	СтруктураПараметров.СуммаДокумента			= Выборка.СуммаОстаток;
	СтруктураПараметров.Валюта					= Выборка.Валюта;
	
		НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказКлиента;
		НоваяЗапись.Партнер 				= Выборка.Партнер;
		НоваяЗапись.Сумма					= Выборка.СуммаОстаток;
		НоваяЗапись.ВалютаВзаиморасчетов	= Выборка.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= Выборка.СуммаОстаток;

	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСОплатаПоставщику();
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;

	Возврат СтруктураПараметров;     	

КонецФункции // ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате()


Функция СоздатьРКОПоЗаявке(Заявка)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияРКООПредоплате(Заявка);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("РасходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ РКО предоплат по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  РКО предоплат по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами()

Функция ПолучитьСтруктуруПарметровЗаполненияРКООПредоплате(Заявка)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонРасходныйКассовыйОрдер();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Заявка,,"РасшифровкаПлатежа");
	СтруктураПараметров.Дата 			= Заявка.Дата;
	СтруктураПараметров.Комментарий		= Заявка.Заметки;
	СтруктураПараметров.Касса			= Заявка.Касса;
	СтруктураПараметров.ЗаявкаНаРасходованиеДенежныхСредств = Заявка;
	
	Возврат СтруктураПараметров;     	

КонецФункции // ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате()


Функция СоздатьПриходныйКассовыйОрдерПредоплатСКлиента(РКО)
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияПКООПредоплате(РКО);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО предоплат по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО предоплат по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;   

КонецФункции // СоздатьПриходныйКассовыйОрдерПредоплатСКлиента(РКО)()

Функция ПолучитьСтруктуруПарметровЗаполненияПКООПредоплате(Выборка,ЗаказКлиента=Неопределено)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,,"ДокументОснование,ХозяйственнаяОперация,СтатьяДвиженияДенежныхСредств,РасшифровкаПлатежа");
	СтруктураПараметров.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеОплатыОтКлиента();
	СтруктураПараметров.Подразделение					= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	
	РасшифровкаПлатежа 		= СтруктураПараметров.РасшифровкаПлатежа.Добавить();
	РасшифровкаПлатежа.Заказ 	= ЗаказКлиента;
	РасшифровкаПлатежа.Партнер 	= Выборка.Контрагент.Партнер;
	РасшифровкаПлатежа.Сумма	= Выборка.СуммаДокумента;  
	
	Возврат СтруктураПараметров;     	

КонецФункции // ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате()
#КонецОбласти

#Область СПоставщиком

Функция СоздатьПКОПереплатыРасчетыСПоставщиками(Выборка, Касса, ЗаказПоставщику)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияПКООПредоплатеСПоставщиком(Выборка, Касса, ЗаказПоставщику);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);

    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО предоплат по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО предоплат по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки; 	
КонецФункции // СоздатьПКОПереплатыРасчетыСПоставщиками()

Функция ПолучитьСтруктуруПарметровЗаполненияПКООПредоплатеСПоставщиком(Выборка, Касса, ЗаказПоставщику)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();    	
	ТДата = ТекущаяДата();
    Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП. Автосведения ДС по документу: %Ссылка%. Было принято больше денег чем нужно.'");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,"Контрагент,Валюта,Организация");
	СтруктураПараметров.Дата 					= ТДата;
	СтруктураПараметров.Комментарий				= Заметка;
	СтруктураПараметров.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	СтруктураПараметров.Касса					= Касса;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратДенежныхСредствОтПоставщика();
	СтруктураПараметров.СуммаДокумента			= Выборка.СуммаОстаток;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));

	РасшифровкаПлатежа 			= СтруктураПараметров.РасшифровкаПлатежа.Добавить();
	РасшифровкаПлатежа.Заказ 	= ЗаказПоставщику;
	РасшифровкаПлатежа.Партнер 	= Выборка.Контрагент.Партнер;
	РасшифровкаПлатежа.Сумма	= Выборка.СуммаОстаток;  
	
	Возврат СтруктураПараметров;     	

КонецФункции // ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате()

Функция СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиком(Выборка,ПКО)
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплатеСПоставщиком(Выборка,ПКО);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиком()

Функция ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплатеСПоставщиком(Выборка,ПКО)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);

	ЗаказПоставщику 							= Выборка.ЗаказПоставщику;
    СтруктураПараметров.Дата 					= ПКО.Дата;
	СтруктураПараметров.ДатаПлатежа				= ПКО.Дата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ПКО.Дата;

	 	
	Если ЗаказПоставщику<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказПоставщику);
		Заметка = СтрЗаменить(ПКО.Комментарий, "%Ссылка%", НавигационнаяСсылка);
		СтруктураПараметров.Заметки = Заметка;
	Иначе
		СтруктураПараметров.Заметки = ПКО.Комментарий;	
	КонецЕсли;                   
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ПКО,,"РасшифровкаПлатежа"); 
	
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	
		НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказПоставщику;
		НоваяЗапись.Партнер 				= ПКО.Контрагент.Партнер;
		НоваяЗапись.Сумма					= ПКО.СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ПКО.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= ПКО.СуммаДокумента;
		
	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= ПКО.Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСОплатаПоставщику();
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;

	Возврат СтруктураПараметров;  
	
КонецФункции // ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате()


#КонецОбласти
#КонецОбласти

#Область СвестиПартнераКОдномуДолгу

Процедура СвестиКДоговоруИПКОРасчетыСКлиентами(ВыборкаЗаказ,Отказ)
	
	КассаПолучателя = ПолучитьДоступнуюКассу(ВыборкаЗаказ.Организация, ВыборкаЗаказ.Валюта);
	Если КассаПолучателя.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат; 		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаБезЗаказаКлиентаРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("ЗаказКлиента",ВыборкаЗаказ.ЗаказКлиента); 
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта);  
	Запрос.УстановитьПараметр("Контрагент",ВыборкаЗаказ.Контрагент); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаЗаказ); 
			
		НачатьТранзакцию();   
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			Если Касса.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
				ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				Отказ = Истина;
				ОтменитьТранзакцию();
				Продолжить; 		
			КонецЕсли;   
		
			Если Выборка.СуммаОстаток <= 0 Тогда
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаЗаказ,КассаПолучателя,Выборка.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;     
				            				
				Если ВыборкаЗаказ.Организация <> Выборка.Организация Тогда 
					СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаЗаказ,Выборка.ЗаказКлиента,Выборка.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
				КонецЕсли;
			Иначе 				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,Касса,Выборка.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ВыборкаЗаказ,КассаПолучателя,Выборка.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;   
				
				Если ВыборкаЗаказ.Организация <> Выборка.Организация Тогда 
					СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаЗаказ,Выборка,ВыборкаЗаказ.ЗаказКлиента,Выборка.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
				КонецЕсли;   
			КонецЕсли;
			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаЗаказ) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;	
		КонецЦикла; 
	

КонецПроцедуры
	
Процедура СвестиМеждуОрганизациейПоКлиенту(ВыборкаЗаказ,Отказ)
	
	КассаПолучателя = ПолучитьДоступнуюКассу(ВыборкаЗаказ.Организация, ВыборкаЗаказ.Валюта);
	Если КассаПолучателя.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат; 		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаПоЗаказуКлиентаРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("ЗаказКлиента",ВыборкаЗаказ.ЗаказКлиента); 
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Запрос.УстановитьПараметр("Организация",ВыборкаЗаказ.Организация); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаЗаказ); 
			
		НачатьТранзакцию();   
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			Если Касса.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
				ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				Отказ = Истина;
				ОтменитьТранзакцию();
				Продолжить; 		
			КонецЕсли;   
			
			РазрешитьПлатежиБезУказанияЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "РазрешитьПлатежиБезУказанияЗаявок");
			
		
			Если Выборка.СуммаОстаток <= 0 Тогда
				Если РазрешитьПлатежиБезУказанияЗаявок = Истина Тогда 
					
				Иначе
					Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаЗаказ,КассаПолучателя,Выборка.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;     
				            				
				Если ВыборкаЗаказ.Организация <> Выборка.Организация Тогда 
					СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаЗаказ,Выборка.ЗаказКлиента,Выборка.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
				КонецЕсли;
			Иначе 				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,Касса,Выборка.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ВыборкаЗаказ,КассаПолучателя,Выборка.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;   
				
				Если ВыборкаЗаказ.Организация <> Выборка.Организация Тогда 
					СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаЗаказ,Выборка,ВыборкаЗаказ.ЗаказКлиента,Выборка.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
				КонецЕсли;   
			КонецЕсли;
			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаЗаказ) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;	
		КонецЦикла; 
	
КонецПроцедуры  //СвестиМеждуОрганизацией(Выборка,Отказ)
	

Функция СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,Касса,СуммаОстаток)

	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
КонецФункции

Функция ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();
	
	ТДата = ТекущаяДата();
	ЗаказКлиента = Выборка.ЗаказКлиента;
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП. ДС по документу: %Ссылка%. '");
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	СтруктураПараметров.Дата 	= ТДата;	
	СтруктураПараметров.Комментарий						= Заметка;
	СтруктураПараметров.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеОплатыОтКлиента();
	СтруктураПараметров.Подразделение					= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.Касса							= Касса;    
	СтруктураПараметров.СуммаДокумента					= СуммаДокумента;
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,"Контрагент,Валюта,Организация");
	
	РасшифровкаПлатежа 			= СтруктураПараметров.РасшифровкаПлатежа.Добавить();
	РасшифровкаПлатежа.Заказ 	= ЗаказКлиента;
	РасшифровкаПлатежа.Партнер 	= Выборка.Партнер;
	РасшифровкаПлатежа.Сумма	= СуммаДокумента;  
	
	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса)

Функция СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ВыборкаЗаказ,Касса,СуммаОстаток)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом(ВыборкаЗаказ,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ПКО)

Функция ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом(ВыборкаЗаказ,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");
	ЗаказКлиента = ВыборкаЗаказ.ЗаказКлиента;
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	СтруктураПараметров.ДатаПлатежа				= ТДата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ТДата;    	   
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	СтруктураПараметров.Заметки 				= Заметка;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	
	НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказКлиента;
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВыборкаЗаказ.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;

	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратОплатыКлиенту();
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;

	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом()


#КонецОбласти

#Область РазнестиПоДокументамПоДолгПартнера
Функция РазнестиПоДокументамПоДолгПартнера(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток >= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = -Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
			
			Если СтрокаРасчета.СуммаОстаток <= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаЗаказ,КассаПолучателя,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;  
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
		
				Если СтрокаРасчета.Организация <> ВыборкаЗаказ.Организация Тогда
					СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,ВыборкаЗаказ,СтрокаРасчета.ЗаказКлиента,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;   							
				КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	    	

КонецФункции // РазнестиПоДокументамПоДолгПартнера()

Функция РазнестиПоДокументамПоДолгПартнераСДокументами(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток >= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = -Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
			
			Если СтрокаРасчета.СуммаОстаток <= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаЗаказ,КассаПолучателя,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;  
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
		
			Если СтрокаРасчета.Организация <> ВыборкаЗаказ.Организация Тогда 				
				СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,ВыборкаЗаказ,СтрокаРасчета.ЗаказКлиента,СтрокаРасчета.СуммаОстаток,Отказ);
				Если Отказ = Истина Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;          		
			КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	    	

КонецФункции // РазнестиПоДокументамПоДолгПартнера()

Функция РазнестиПоДокументамПоДолгПредприятия(ВыборкаЗаказ,Отказ)
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
			
			Если СтрокаРасчета.СуммаОстаток >= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаРасчета.СуммаОстаток = - СтрокаРасчета.СуммаОстаток;
		
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;  
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 				
		
				Если СтрокаРасчета.Организация <> ВыборкаЗаказ.Организация Тогда 					
					СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,ВыборкаЗаказ,СтрокаРасчета.ЗаказКлиента,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 			
				КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	    	
КонецФункции // РазнестиПоДокументамПоДолгПредприятия()

Функция РазнестиПоДокументамПоДолгПредприятияПоДокументам(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
			
			Если СтрокаРасчета.СуммаОстаток >= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			СтрокаРасчета.СуммаОстаток = - СтрокаРасчета.СуммаОстаток;
		
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОстатокДС = ОстатокДСОтменаТранзакции;  
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 				
		
				Если СтрокаРасчета.Организация <> ВыборкаЗаказ.Организация Тогда
					Отказ = ЛОЖЬ;
					СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,ВыборкаЗаказ,СтрокаРасчета.ЗаказКлиента,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
				КонецЕсли;  
			КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	    	
КонецФункции // РазнестиПоДокументамПоДолгПредприятия()

Функция РазнестиДолгКОднойСуммеПоДолгуПартнера(ВыборкаЗаказ,Отказ)
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер",Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта",Выборка.Валюта); 
		СтрокаРасчета = Запрос.Выполнить().Выбрать();
		Пока СтрокаРасчета.Следующий() Цикл
			Если Выборка.ЗаказКлиента = СтрокаРасчета.ЗаказКлиента Тогда
				Продолжить;			
			КонецЕсли;
			
			Если СтрокаРасчета.СуммаОстаток <= 0  Тогда
			    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
				
				НачатьТранзакцию(); 
				
					КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
					Если КассаПолучателя.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли; 
				
					Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
					Если Касса.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли;     		
					
					Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(СтрокаРасчета,Касса,-СтрокаРасчета.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,КассаПолучателя,-СтрокаРасчета.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;  
			
				Если Выборка.Организация <> СтрокаРасчета.Организация Тогда 				
					СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,Выборка,СтрокаРасчета.ЗаказКлиента,-СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;          		
				КонецЕсли;
					
				Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
					ЗафиксироватьТранзакцию();	
				Иначе
					СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
				    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					ОтменитьТранзакцию(); 
					Продолжить;
				КонецЕсли;
			Иначе
		
			    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
			    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
				НачатьТранзакцию(); 
	
					КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
					Если Касса.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли; 
				
					Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
					Если Касса.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли;
					
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
					
					Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					Если Выборка.Организация <> СтрокаРасчета.Организация Тогда
						Отказ = ЛОЖЬ;
						СвестиВзаиморасчетыМеждуОрганизациями(Выборка,СтрокаРасчета,СтрокаРасчета.ЗаказКлиента,СтрокаРасчета.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;  
					КонецЕсли;
						
					Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
						ЗафиксироватьТранзакцию();	
					Иначе
						СообщениеОбОшибке = НСтр("ru='Неудалось свести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
					    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						ОтменитьТранзакцию(); 
						Продолжить;
					КонецЕсли;
				КонецЕсли;  		
		КонецЦикла;   		
	КонецЕсли;       

КонецФункции // РазнестиДолгКОднойСуммеПоДолгуПартнера()

#КонецОбласти

#Область СвестиПартнераКОдномуДолгуПоставщик

Процедура СвестиКДоговоруИПКОРасчетыСПоставщиком(ВыборкаЗаказ,Отказ)
	
	КассаПолучателя = ПолучитьДоступнуюКассу(ВыборкаЗаказ.Организация, ВыборкаЗаказ.Валюта);
	Если КассаПолучателя.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		Отказ = Истина;
		Возврат; 		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаБезЗаказаКлиентаРасчетыСПоставщиком();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("ЗаказПоставщику",ВыборкаЗаказ.ЗаказПоставщику); 
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта);   
	Запрос.УстановитьПараметр("Контрагент",ВыборкаЗаказ.Контрагент); 
	Запрос.УстановитьПараметр("Организация",ВыборкаЗаказ.Организация);   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка); 
			
		НачатьТранзакцию();   
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			Если Касса.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
				ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				Отказ = Истина;
				ОтменитьТранзакцию();
				Продолжить; 		
			КонецЕсли;   
		
			Если Выборка.СуммаОстаток <= 0 Тогда
				Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,Касса,Выборка.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(ВыборкаЗаказ,КассаПолучателя,Выборка.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 
				
				Если ВыборкаЗаказ.Организация <> Выборка.Организация Тогда
					СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаЗаказ,Выборка.ЗаказПоставщику,Выборка.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
				КонецЕсли;          				
			Иначе 				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,Касса,Выборка.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(ВыборкаЗаказ,КассаПолучателя,Выборка.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				Если ВыборкаЗаказ.Организация <> Выборка.Организация Тогда
					СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаЗаказ,Выборка,ВыборкаЗаказ.ЗаказПоставщику,Выборка.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
				КонецЕсли;

			КонецЕсли;
			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;	
			
		КонецЦикла; 
	

КонецПроцедуры

Функция СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,Касса,СуммаОстаток)

	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияПКОСПоставщиком(Выборка,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
КонецФункции

Функция ПолучитьСтруктуруПарметровЗаполненияПКОСПоставщиком(Выборка,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();
	
	ТДата = ТекущаяДата();
	ЗаказПоставщику = Выборка.ЗаказПоставщику;
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП. ДС по документу: %Ссылка%. '");
	Если ЗаказПоставщику<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказПоставщику);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	СтруктураПараметров.Дата 	= ТДата;	
	СтруктураПараметров.Комментарий						= Заметка;
	СтруктураПараметров.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратДенежныхСредствОтПоставщика();
	СтруктураПараметров.Подразделение					= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.Касса							= Касса;    
	СтруктураПараметров.СуммаДокумента					= СуммаДокумента;
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,"Контрагент,Валюта,Организация");
	
	РасшифровкаПлатежа 			= СтруктураПараметров.РасшифровкаПлатежа.Добавить();
	РасшифровкаПлатежа.Заказ 	= ЗаказПоставщику;
	РасшифровкаПлатежа.Партнер 	= Выборка.Партнер;
	РасшифровкаПлатежа.Сумма	= СуммаДокумента;  
	
	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса)

Функция СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(ВыборкаЗаказ,Касса,СуммаОстаток)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияЗаявкиРДСПоПКОСПоставщиком(ВыборкаЗаказ,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ПКО)

Функция ПолучитьСтруктуруЗаполненияЗаявкиРДСПоПКОСПоставщиком(ВыборкаЗаказ,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");
	ЗаказПоставщику = ВыборкаЗаказ.ЗаказПоставщику;
	Если ЗаказПоставщику<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказПоставщику);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	СтруктураПараметров.ДатаПлатежа				= ТДата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ТДата;    	   
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	СтруктураПараметров.Заметки 				= Заметка;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	
		НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказПоставщику;
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВыборкаЗаказ.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;

	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСОплатаПоставщику();
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;

	Возврат СтруктураПараметров;     	
КонецФункции // ПолучитьСтруктуруЗаполненияЗаявкиРДСПоПКОСПоставщиком()

#КонецОбласти

#Область РазнестиПоДокументамПоДолгПоставщика
Функция РазнестиПоДокументамПоДолгПоставщика(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток >= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = -Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиком();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
		
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 
		
				Если Выборка.Организация <> СтрокаРасчета.Организация Тогда  					
					СвестиВзаиморасчетыМеждуОрганизациями(Выборка,СтрокаРасчета,Выборка.ЗаказПоставщику,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	    	

КонецФункции // РазнестиПоДокументамПоДолгПартнера()

Функция РазнестиПоДокументамПоДолгПоставщикаПоДокументам(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток >= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = -Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
			
			Если СтрокаРасчета.СуммаОстаток <= 0 Тогда
				Продолжить;	
			КонецЕсли;
		
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 
		
				Если Выборка.Организация <> СтрокаРасчета.Организация Тогда  					
					СвестиВзаиморасчетыМеждуОрганизациями(Выборка,СтрокаРасчета,Выборка.ЗаказПоставщику,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	    	

КонецФункции // РазнестиПоДокументамПоДолгПоставщикаПоДокументам()

Функция РазнестиПоДокументамПоДолгамПредприятия(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщикомНП();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
		
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		                                         
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 
		
				Если Выборка.Организация <> СтрокаРасчета.Организация Тогда   					
					СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,Выборка,СтрокаРасчета.ЗаказПоставщику,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	    	

КонецФункции // РазнестиПоДокументамПоДолгПоставщика()   

Процедура РазнестиПоДокументамПоДолгПредприятимПоставщикуСДокументами(ВыборкаЗаказ,Отказ)
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
		
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
			Если СтрокаРасчета.СуммаОстаток >= 0 Тогда
				Продолжить;	
			КонецЕсли;  
		
			СтрокаРасчета.СуммаОстаток = - СтрокаРасчета.СуммаОстаток;
			
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
		    Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 

			
			НачатьТранзакцию(); 
			
				КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли; 
			
				Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;     		                                         
				
				ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток);
				Если ПКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;  
				
				Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток); 							
				Если Заявка = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				РКО = СоздатьРКОПоЗаявке(Заявка);
				Если РКО = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли; 
		
				Если Выборка.Организация <> СтрокаРасчета.Организация Тогда					
					СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,Выборка,СтрокаРасчета.ЗаказПоставщику,СтрокаРасчета.СуммаОстаток,Отказ);
					Если Отказ = Истина Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	     
КонецПроцедуры

Процедура РазнестиДолгКОднойСуммеПоДолгуПоставщика(ВыборкаЗаказ,Отказ)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
	Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
	Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком();
		Запрос.УстановитьПараметр("Партнер",ВыборкаЗаказ.Партнер);
		Запрос.УстановитьПараметр("Валюта",ВыборкаЗаказ.Валюта); 
		СтрокаРасчета = Запрос.Выполнить().Выбрать();
		Пока СтрокаРасчета.Следующий() Цикл
			Если Выборка.ЗаказПоставщику = СтрокаРасчета.ЗаказПоставщику Тогда
				Продолжить;			
			КонецЕсли;
			
			Если СтрокаРасчета.СуммаОстаток >= 0 Тогда     				
				
				ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
				
				НачатьТранзакцию(); 				
				
					КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
					Если КассаПолучателя.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли;    					
					Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
					Если Касса.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли;     		
					
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(СтрокаРасчета,Касса,СтрокаРасчета.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;  
					
					Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,КассаПолучателя,СтрокаРасчета.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
			
					Если Выборка.Организация <> СтрокаРасчета.Организация Тогда 						
						СвестиВзаиморасчетыМеждуОрганизациями(Выборка,СтрокаРасчета,СтрокаРасчета.ЗаказПоставщику,СтрокаРасчета.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
				Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
					ЗафиксироватьТранзакцию();	
				Иначе
					СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
				    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					ОтменитьТранзакцию(); 
					Продолжить;
				КонецЕсли;  			
			Иначе
				ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);				
				НачатьТранзакцию(); 						
					КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
					Если КассаПолучателя.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли; 
					
					Касса = ПолучитьДоступнуюКассу(СтрокаРасчета.Организация, СтрокаРасчета.Валюта);
					Если Касса.Пустая() Тогда
						СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
						СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаЗаказ.Партнер);
						ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
						Отказ = Истина;
						ОтменитьТранзакцию();
						Продолжить; 		
					КонецЕсли;     		
					
					Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(СтрокаРасчета,Касса,-СтрокаРасчета.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
			                  
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,КассаПолучателя,-СтрокаРасчета.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;  
					
					Если Выборка.Организация <> СтрокаРасчета.Организация Тогда 						
						СвестиВзаиморасчетыМеждуОрганизациями(СтрокаРасчета,Выборка,СтрокаРасчета.ЗаказПоставщику,-СтрокаРасчета.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
				Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
					ЗафиксироватьТранзакцию();	
				Иначе
					СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
				    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					ОтменитьТранзакцию(); 
					Продолжить;
				КонецЕсли;  			
			КонецЕсли;     		
		КонецЦикла; 	
	КонецЕсли; 

КонецПроцедуры


#КонецОбласти

#Область МеждуОрганизацией

Процедура СвестиВзаиморасчетыМеждуОрганизациями(ВыборОтправитель,ВыборПолучатель, Заказ,СуммаОстаток,Отказ)
	
	Если СуммаОстаток = 0 Тогда
		Отказ = Истина;
		Возврат;       	
	КонецЕсли;
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	//НачатьТранзакцию();   
		
		КассаОтправитель = ПолучитьДоступнуюКассу(ВыборПолучатель.Организация, ВыборПолучатель.Валюта);
		Если КассаОтправитель.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", КассаОтправитель.Партнер);
			ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			Отказ = Истина;
			//ОтменитьТранзакцию();
			Возврат; 		
		КонецЕсли;
		
		КассаПолучатель = ПолучитьДоступнуюКассу(ВыборОтправитель.Организация, ВыборОтправитель.Валюта);
		Если КассаПолучатель.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборПолучатель.Партнер);
			ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			Отказ = Истина;
			//ОтменитьТранзакцию();
			Возврат; 		
		КонецЕсли;     
		
		ОбщаяРазница = ПолучитьРазницуРасчетовМеждуКассами(ВыборОтправитель,КассаОтправитель,КассаПолучатель,ВыборПолучатель);
		
		Если ОбщаяРазница = 0 И СуммаОстаток = 0 Тогда
			Отказ = Истина;
			//ОтменитьТранзакцию();
			Возврат;  		
		КонецЕсли;
		
		//Вот тут пересчитаем сумму в USD и документы создадим в упр. валюте. 
		

		Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиМеждуОрганизациями(ВыборПолучатель,КассаОтправитель,КассаПолучатель,ВыборОтправитель.Организация,Заказ, СуммаОстаток, ВалютаУпрУчета); 							
		Если Заявка = Неопределено Тогда
			Отказ = Истина;  
			//ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		РКО = СоздатьРКОПоЗаявке(Заявка);
		Если РКО = Неопределено Тогда
			Отказ = Истина;       
			//ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиентаМеждуОрганизациями(ВыборОтправитель,КассаПолучатель,РКО,СуммаОстаток);
		Если ПКО = Неопределено Тогда
			//ОтменитьТранзакцию();
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
	Если ОбщаяРазница = ПолучитьРазницуРасчетовМеждуКассами(ВыборОтправитель,КассаОтправитель,КассаПолучатель,ВыборПолучатель) Тогда
		//ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети между организациями.Общая разница по кассам  не совпадает."+ОписаниеОшибки()+"'");
	    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
		//ОтменитьТранзакцию(); 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПриходныйКассовыйОрдерРасчетСКлиентаМеждуОрганизациями(Выборка,Касса, РКО, СуммаОстаток)

	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполнениМеждуОрганизациями(Выборка,Касса,РКО,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
КонецФункции

Функция ПолучитьСтруктуруПарметровЗаполнениМеждуОрганизациями(Выборка,Касса,РКО,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП.'");
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);

	СтруктураПараметров.Дата 	= ТДата;	
	СтруктураПараметров.Комментарий						= Заметка;
	СтруктураПараметров.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеДСИзДругойОрганизации();
	СтруктураПараметров.Подразделение					= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.Касса							= Касса;    
	СтруктураПараметров.СуммаДокумента					= СуммаДокумента;
	СтруктураПараметров.Вставить("РасходныйКассовыйОрдер",РКО);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,"Контрагент,Валюта,Организация");
	
	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса)

Функция СоздатьЗаявкуНаРДСРасчетыСКлиентамиМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель,Заказ, СуммаОстаток, ВалютаВзаиморасчетов)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияЗаявкиРКОМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель,Заказ, СуммаОстаток, ВалютаВзаиморасчетов);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибкуВЖР(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ПКО)

Функция ПолучитьСтруктуруЗаполненияЗаявкиРКОМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель, Заказ, СуммаОстаток, Знач ВалютаВзаиморасчетов = Неопределено)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");

	Если Заказ<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Заказ);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	СтруктураПараметров.ДатаПлатежа				= ТДата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ТДата;    	   
	
	Если ТипЗнч(ВыборкаЗаказ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ,"Расшифровка"); 	
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = Неопределено ИЛИ Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда 
		ВалютаВзаиморасчетов = ВыборкаЗаказ.Валюта;
	КонецЕсли;
	
	СтруктураПараметров.Заметки 				= Заметка;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	СтруктураПараметров.Вставить("КассаПолучатель",КассаПолучатель);   
	СтруктураПараметров.Вставить("ОрганизацияПолучатель",ОрганизацияПолучатель); 
	
		НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		//НоваяЗапись.Заказ                   = Заказ;
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВалютаВзаиморасчетов;
		Если ВалютаВзаиморасчетов = ВыборкаЗаказ.Валюта Тогда 
			НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;
		КонецЕсли;

	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию;
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;

	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом()

Функция ПолучитьРазницуРасчетовМеждуКассами(ВыборОтправитель,КассаОтправитель,КассаПолучатель,ВыборПолучатель)

	Запрос = Новый Запрос;
	Запрос.Текст =  ПолучитьТекстЗапросаСуммаОбщейРазницыМеждуОрганизацией();
	Запрос.УстановитьПараметр("КассаОтправитель", 	КассаОтправитель);
	Запрос.УстановитьПараметр("ОрганизацияОтпр",	ВыборПолучатель.Организация);
	Запрос.УстановитьПараметр("КассаПолучатель", 	КассаПолучатель);
	Запрос.УстановитьПараметр("ОрганизацияПол", 	ВыборОтправитель.Организация);  
	
	ВыборкаОбщейРазницы = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаОбщейРазницы.Следующий(), ВыборкаОбщейРазницы.ОбщаяРазница, 0);  
КонецФункции // ПолучитьРазницуРасчетовМеждуКассами()

Функция ПолучитьТекстЗапросаСуммаОбщейРазницыМеждуОрганизацией()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК ОбщаяРазница
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДенежныеСредстваНаличныеОстатки.СуммаОстаток КАК СуммаОстаток
	               |	ИЗ
	               |		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	               |				,
	               |				Организация = &ОрганизацияОтпр
	               |					И Касса = &КассаОтправитель) КАК ДенежныеСредстваНаличныеОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ДенежныеСредстваНаличныеОстатки.СуммаОстаток
	               |	ИЗ
	               |		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	               |				,
	               |				Организация = &ОрганизацияПол
	               |					И Касса = &КассаПолучатель) КАК ДенежныеСредстваНаличныеОстатки) КАК ВложенныйЗапрос";
	
	Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОбщейРазницыМеждуОрганизацией()

	
#КонецОбласти

#Область ОбработкаКонечногоПартнера

Процедура СводитьПоставщикаКПартнеру(Партнер,Валюта) 	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетыСКлиентамиПоМаксимумОстатку();				   
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта",	Валюта); 	
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока Выборка.Следующий()  Цикл    
		КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Валюта);
		Если КассаПолучателя.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
			ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			Отказ = Истина;
			Возврат; 		
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаОстаткиРасчетыПоставщика();				   
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта",	Выборка.Валюта); 	
		ВыборкаПоставщик = Запрос.Выполнить().Выбрать(); 
		Пока ВыборкаПоставщик.Следующий() Цикл
			
			НачатьТранзакцию(); 
				ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
				
				Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;   	
				
				Если ВыборкаПоставщик.СуммаОстаток <= 0 Тогда
					Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(ВыборкаПоставщик,Касса,ВыборкаПоставщик.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,КассаПолучателя,ВыборкаПоставщик.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 	
					
					Если Выборка.Организация <> ВыборкаПоставщик.Организация Тогда   					
						СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаПоставщик,Выборка,ВыборкаПоставщик.ЗаказПоставщику, ВыборкаПоставщик.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли; 					
					КонецЕсли; 
					
				Иначе 				
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(ВыборкаПоставщик,Касса,ВыборкаПоставщик.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 
					
					Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(Выборка,КассаПолучателя,ВыборкаПоставщик.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					Если Выборка.Организация <> ВыборкаПоставщик.Организация Тогда					
						СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаПоставщик,Выборка.ЗаказКлиента, ВыборкаПоставщик.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли; 					
					КонецЕсли;    
				КонецЕсли;  
					
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла; 				
	КонецЦикла;     
КонецПроцедуры

Процедура СводитьКлиентаКПоставщику(Партнер,Валюта) 	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстаткиПоПоставщикуМаксПоДолгу();				   
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта",	Валюта); 	
	Выборка = Запрос.Выполнить().Выбрать();  
	Пока  Выборка.Следующий() Цикл  
		КассаПолучателя = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		Если КассаПолучателя.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
			ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
			Отказ = Истина;
			Возврат; 		
		КонецЕсли; 
			
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаОстаткиРасчетыСКлиентов();				   
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Валюта",	Выборка.Валюта); 	
		ВыборкаКлиент = Запрос.Выполнить().Выбрать(); 
		Пока ВыборкаКлиент.Следующий() Цикл
				
			НачатьТранзакцию(); 
				ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
				
				Касса = ПолучитьДоступнуюКассу(ВыборкаКлиент.Организация, ВыборкаКлиент.Валюта);
				Если Касса.Пустая() Тогда
					СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаКлиент.Партнер);
					ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
					Отказ = Истина;
					ОтменитьТранзакцию();
					Продолжить; 		
				КонецЕсли;   	
				
				Если ВыборкаКлиент.СуммаОстаток <= 0 Тогда
					Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ВыборкаКлиент,Касса,ВыборкаКлиент.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСПоставщиком(Выборка,КассаПолучателя,ВыборкаКлиент.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;		
					
					Если Выборка.Организация <> ВыборкаКлиент.Организация Тогда 					
						Отказ = ложь;					
						СвестиВзаиморасчетыМеждуОрганизациями(ВыборкаКлиент,Выборка,ВыборкаКлиент.ЗаказКлиента,ВыборкаКлиент.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;				
					КонецЕсли;  
					
				Иначе 	
					ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаКлиент,Касса,ВыборкаКлиент.СуммаОстаток);
					Если ПКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли; 					
					
					Заявка = СоздатьЗаявкуНаРДСРасчетыСПоставщикомПоПКО(Выборка,КассаПолучателя,ВыборкаКлиент.СуммаОстаток); 							
					Если Заявка = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					РКО = СоздатьРКОПоЗаявке(Заявка);
					Если РКО = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					Если Выборка.Организация <> ВыборкаКлиент.Организация Тогда 					
						Отказ = ложь;					
						СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаКлиент,Выборка.ЗаказПоставщику,ВыборкаКлиент.СуммаОстаток,Отказ);
						Если Отказ = Истина Тогда
							ОтменитьТранзакцию();
							Продолжить;
						КонецЕсли;				
					КонецЕсли;

				КонецЕсли;  
				
									
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
			    ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);
				ОтменитьТранзакцию(); 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;      
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеФункции  

Функция ПолучитьСуммуОбщейРазницы(Выборка)

	Запрос = Новый Запрос;
	Запрос.Текст =  ПолучитьТекстЗапросаСуммаОбщейРазницы();
	Запрос.УстановитьПараметр("Партнер", 	Выборка.Партнер);
	Запрос.УстановитьПараметр("Организация",Выборка.Организация);
	Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
	Запрос.УстановитьПараметр("Валюта", 	Выборка.Валюта);
	
	ВыборкаОбщейРазницы = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаОбщейРазницы.Следующий(), ВыборкаОбщейРазницы.ОбщаяРазница, 0);
		
КонецФункции // ПолучитьОбщуюРазницу()

Функция ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка)

	Запрос = Новый Запрос;
	Запрос.Текст =  ПолучитьТекстЗапросаСуммаОбщейРазницыПоПартнеру();
	Запрос.УстановитьПараметр("Партнер", 	Выборка.Партнер);
	Запрос.УстановитьПараметр("Валюта", 	Выборка.Валюта);
	
	ВыборкаОбщейРазницы = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаОбщейРазницы.Следующий(), ВыборкаОбщейРазницы.ОбщаяРазница, 0);
		
КонецФункции // ПолучитьОбщуюРазницу()


Функция ПолучитьДоступнуюКассу(Организация, Валюта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
				   |	Касса КАК Касса
	               |ИЗ
	               |	РегистрСведений.КТС_КассыДляВзаиморасчетов
	               |ГДЕ
	               |	Организация = &Организация
	               |	И Валюта = &Валюта";
				   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта",	Валюта); 	
	
	Выборка = Запрос.Выполнить().Выбрать();  
	
	Возврат ?(Выборка.Следующий(),Выборка.Касса, Справочники.Кассы.ПустаяСсылка());		
КонецФункции

Функция ПолучитьМаксимальнийДолгПоПартнеру(Партнер,Валюта)
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетыСКлиентамиПоМаксимумОстатку();				   
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта",	Валюта); 	
	Выборка = Запрос.Выполнить().Выбрать();  
	
	Возврат ?(Выборка.Следующий(),Выборка.Порядок, 0);		

КонецФункции // ПолучитьМаксимальнийДолгПоПартнеру(Партнер)

Функция ПолучитьМаксимальнийДолгПоПоставщику(Партнер,Валюта)
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОстаткиПоПоставщикуМаксПоДолгу();			   
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта",	Валюта);	
	Выборка = Запрос.Выполнить().Выбрать();    	
	Возврат ?(Выборка.Следующий(),Выборка.Порядок, 0);
КонецФункции // ПолучитьМаксимальнийДолгПоПоставщику(Партнер)

Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'РеглАвтоСведенияВзаиморасчетовПоПартнерам'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()

#КонецОбласти

#Область ТектЗапроса

Функция ПолучитьТекстЗапросаПартнеровПоАвтоСведению()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК Справочник.Партнеры) КАК ПартнерЗП
	               |ПОМЕСТИТЬ ПартнерыЗП
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СвойствоПартнерЗП
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПартнерЗП
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПартнерыЗП.ПартнерЗП КАК ПартнерЗП
	               |ИЗ
	               |	ПартнерыЗП КАК ПартнерыЗП";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПартнеровПоАвтоСведению()

Функция ПолучитьТекстЗапросаПартнеровПоПартнеруЗП()

	ТекстЗапроса =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	Партнеры.Ссылка КАК Партнер
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	Партнеры.ПометкаУдаления = ЛОЖЬ
	                |	И Партнеры.Ссылка <> &ПартнерЗП
	                |	И Партнеры.Ссылка В ИЕРАРХИИ(&ПартнерЗП)";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПартнеровПоПартнеруЗП()

Функция ПолучитьТекстЗапросаРасчетаПереплатПоПартнеру()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент	КАК Контрагент,
		|	Валюта									КАК Валюта,
		|	ЗаказКлиента							КАК ЗаказКлиента,
		|	- СуммаОстаток    						КАК СуммаОстаток
 		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки
		|ГДЕ
		|	АналитикаУчетаПоПартнерам.Партнер = &Партнер
		|И	ЗаказКлиента <> Неопределено
		|И	ЗаказКлиента <> Значение(Документ.ЗаказКлиента.ПустаяСсылка)
		|И	(	ЗаказКлиента Ссылка Документ.ЗаказКлиента 
		|	ИЛИ ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|	ИЛИ	ЗаказКлиента Ссылка Документ.РеализацияУслугПрочихАктивов)
		|И	СуммаОстаток < 0";
	Возврат ТекстЗапроса;       

КонецФункции // ПолучитьТекстЗапросаРасчетаПереплатПоПартнеру()

Функция ПолучитьТекстЗапросаСуммаОбщейРазницы()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сумма(Вл.ОбщаяРазница) КАК ОбщаяРазница
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		IsNull(СуммаОстаток, 0) КАК ОбщаяРазница
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|				АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = 	&Партнер
		|											И	АналитикаПоПартнерам.Организация = &Организация	
		|											И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|											)
		|				И Валюта = &Валюта			
		|				)
		|				
		|	ОБЪЕДИНИТЬ
		|				
		|	ВЫБРАТЬ
		|		ISNULL(СуммаОстаток,0)
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|							АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = &Партнер
		|											И	АналитикаПоПартнерам.Организация = &Организация	
		|											И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|											)
		|							И Валюта = &Валюта			
		|										)
		|	) КАК Вл";

	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОбщейРазницыСКлиентами()

Функция ПолучитьТекстЗапросаСуммаОбщейРазницыПоПартнеру()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сумма(Вл.ОбщаяРазница) КАК ОбщаяРазница
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		IsNull(СуммаОстаток, 0) КАК ОбщаяРазница
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|				АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = 	&Партнер
		|											)
		|				И Валюта = &Валюта			
		|				)
		|				
		|	ОБЪЕДИНИТЬ
		|				
		|	ВЫБРАТЬ
		|		ISNULL(СуммаОстаток,0)
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|							АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = &Партнер
		|											)
		|							И Валюта = &Валюта			
		|										)
		|	) КАК Вл";

	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОбщейРазницыСКлиентами()


Функция ПолучитьТекстЗапросаРасчетаПереплатПоПоставщику()

	ТекстЗапроса = 		
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер			КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Организация		КАК Организация,
		|	АналитикаУчетаПоПартнерам.Контрагент 		КАК Контрагент,
		|	ЗаказПоставщику								КАК ЗаказПоставщику,
		|	Валюта										КАК Валюта,
		|	СуммаОстаток                               	КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки
		|Где 
		|	АналитикаУчетаПоПартнерам.Партнер = &Партнер
		|	И	ЗаказПоставщику <> Неопределено
		|	И	СуммаОстаток > 0
		|	И	ЗаказПоставщику <> Значение(Документ.ЗаказПоставщику.ПустаяСсылка)
		|	И	(	ЗаказПоставщику Ссылка Документ.ЗаказПоставщику 
		|		ИЛИ ЗаказПоставщику Ссылка Документ.ПоступлениеТоваровУслуг
		|		ИЛИ	ЗаказПоставщику Ссылка Документ.ПоступлениеУслугПрочихАктивов)"; 
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРасчетаПереплатПоПоставщику()

Функция ПолучитьТекстЗапросаРасчетаПартнераСВалютой()
	
	ТекстЗапроса = 		
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ВТ_Валют
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиОстатки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Валюта,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСПоставщикамиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Валют.Валюта
		|ИЗ
		|	ВТ_Валют КАК ВТ_Валют"; 
	
	Возврат ТекстЗапроса;  
КонецФункции // ПолучитьТекстЗапросаРасчетаПартнераСВалютой()

Функция ПолучитьТекстЗапросаБезЗаказаКлиентаРасчетыСКлиентами()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер)
		|				И ЗаказКлиента <> &ЗаказКлиента
		|				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
		|	РасчетыСКлиентамиОстатки.Валюта,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер
		|						И АналитикаПоПартнерам.Контрагент <> &Контрагент)
		|				И ЗаказКлиента = &ЗаказКлиента
		|				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаБезЗаказаКлиентаРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаПоЗаказуКлиентаРасчетыСКлиентами()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер
		|						И АналитикаПоПартнерам.Организация <> &Организация)
		|				И ЗаказКлиента = &ЗаказКлиента
		|				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПоЗаказуКлиентаРасчетыСКлиентами()


Функция ПолучитьТекстЗапросаРасчетыСКлиентамиПоМаксимумОстатку()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	ВЫБОР
	               |		КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |			ТОГДА РасчетыСКлиентамиОстатки.СуммаОстаток
	               |		ИНАЧЕ -РасчетыСКлиентамиОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Порядок,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.Валюта
	               |ПОМЕСТИТЬ ВТ_Расчеты
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам.Партнер = &Партнер
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВТ_Расчеты.Партнер,
	               |	ВТ_Расчеты.ЗаказКлиента,
	               |	ВТ_Расчеты.Порядок КАК Порядок,
	               |	ВТ_Расчеты.Организация,
	               |	ВТ_Расчеты.Контрагент,
	               |	ВТ_Расчеты.СуммаОстаток,
	               |	ВТ_Расчеты.Валюта
	               |ИЗ
	               |	ВТ_Расчеты КАК ВТ_Расчеты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок УБЫВ";
		Возврат ТекстЗапроса;

КонецФункции // ()

Функция ПолучитьТекстЗапросаОстаткиПоПоставщикуМаксПоДолгу()

	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
			|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
			|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
			|	РасчетыСПоставщикамиОстатки.Валюта,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	ВЫБОР
			|		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
			|			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
			|		ИНАЧЕ -РасчетыСПоставщикамиОстатки.СуммаОстаток
			|	КОНЕЦ КАК Порядок,
			|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
			|ПОМЕСТИТЬ ВТ_Расчеты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			АналитикаУчетаПоПартнерам.Партнер = &Партнер
			|				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВТ_Расчеты.Партнер,
			|	ВТ_Расчеты.Организация,
			|	ВТ_Расчеты.Контрагент,
			|	ВТ_Расчеты.Валюта,
			|	ВТ_Расчеты.СуммаОстаток,
			|	ВТ_Расчеты.Порядок КАК Порядок,
			|	ВТ_Расчеты.ЗаказПоставщику
			|ИЗ
			|	ВТ_Расчеты КАК ВТ_Расчеты
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок УБЫВ";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОстаткиПоПоставщикуМаксПоДолгу()

Функция ПолучитьТекстЗАпросаВИдРасчетаДляСведенияБаланса()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	0 КАК ВидРасчета
	               |ПОМЕСТИТЬ ВТ_Порядок
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	0
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	0
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	0
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	1
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	               |				И НЕ ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	2
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	               |				И НЕ ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Порядок.ЗаказКлиента,
	               |	ВТ_Порядок.Валюта,
	               |	ВТ_Порядок.СуммаОстаток КАК СуммаОстаток,
	               |	ВТ_Порядок.ВидРасчета,
	               |	ВТ_Порядок.Партнер,
	               |	ВТ_Порядок.Организация,
	               |	ВТ_Порядок.Контрагент
	               |ИЗ
	               |	ВТ_Порядок КАК ВТ_Порядок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СуммаОстаток УБЫВ";
				   
		Возврат ТекстЗапроса; 
КонецФункции // ПолучитьТекстЗАпросаВИдРасчетаДляСведенияБаланса()

Функция ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами()

	ТекстЗапроса = "ВЫБРАТЬ
				|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
				|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
				|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
				|	РасчетыСКлиентамиОстатки.ЗаказКлиента,
				|	РасчетыСКлиентамиОстатки.Валюта,
				|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки(
				|			,
				|			АналитикаУчетаПоПартнерам В
				|					(ВЫБРАТЬ
				|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
				|					ИЗ
				|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
				|					ГДЕ
				|						АналитикаПоПартнерам.Партнер = &Партнер)
				|				И ЗаказКлиента <> НЕОПРЕДЕЛЕНО
				|				И НЕ ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
				|				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
				|УПОРЯДОЧИТЬ ПО
				|	СуммаОстаток УБЫВ";
	
	Возврат   ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами()

	ТекстЗАпроса = "ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СуммаОстаток УБЫВ";
	
	Возврат ТекстЗАпроса;

КонецФункции // ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаВИдРасчетаДляСведенияБалансаДляПоставщика()
	ТекстЗапроса  = "ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	                |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	                |	0 КАК ВидРасчета
	                |ПОМЕСТИТЬ ВТ_Порядок
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	                |ГДЕ
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	                |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	-РасчетыСПоставщикамиОстатки.СуммаОстаток,
	                |	0
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	                |ГДЕ
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	                |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	                |	0
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	                |ГДЕ
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	                |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	-РасчетыСПоставщикамиОстатки.СуммаОстаток,
	                |	0
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	                |ГДЕ
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	                |	НЕОПРЕДЕЛЕНО,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	                |	1
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	                |				И НЕ ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	                |ГДЕ
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	                |
	                |ОБЪЕДИНИТЬ
	                |
	                |ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	                |	НЕОПРЕДЕЛЕНО,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	-РасчетыСПоставщикамиОстатки.СуммаОстаток,
	                |	2
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	                |				И НЕ ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	                |ГДЕ
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_Порядок.ЗаказПоставщику,
	                |	ВТ_Порядок.Валюта,
	                |	ВТ_Порядок.СуммаОстаток КАК СуммаОстаток,
	                |	ВТ_Порядок.ВидРасчета,
	                |	ВТ_Порядок.Партнер,
	                |	ВТ_Порядок.Организация,
	                |	ВТ_Порядок.Контрагент
	                |ИЗ
	                |	ВТ_Порядок КАК ВТ_Порядок
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	СуммаОстаток УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаВИдРасчетаДляСведенияБалансаДляПоставщика()

Функция ПолучитьТекстЗапросаБезЗаказаКлиентаРасчетыСПоставщиком()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСПоставщикамиОстатки.Валюта КАК Валюта,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер)
		|				И ЗаказПоставщику <> &ЗаказПоставщику
		|				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
		|	РасчетыСПоставщикамиОстатки.Валюта,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер
		|						И АналитикаПоПартнерам.Контрагент = &Контрагент)
		|				И ЗаказПоставщику = &ЗаказПоставщику
		|				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
		|	РасчетыСПоставщикамиОстатки.Валюта,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер
		|						И АналитикаПоПартнерам.Организация = &Организация)
		|				И ЗаказПоставщику = &ЗаказПоставщику
		|				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаБезЗаказаКлиентаРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	               |			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
	               |		ИНАЧЕ -РасчетыСПоставщикамиОстатки.СуммаОстаток
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	               |			ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
	               |		ИНАЧЕ -РасчетыСПоставщикамиОстатки.СуммаОстаток
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И НЕ ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиком()

Функция ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиком()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СуммаОстаток УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиком()

Функция ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщикомНП()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СуммаОстаток УБЫВ";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиком()


Функция ПолучитьТекстЗапросаОстаткиРасчетыПоставщика()

	ТекстЗапроса =  "ВЫБРАТЬ
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	                |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	                |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	                |	РасчетыСПоставщикамиОстатки.Валюта,
	                |	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОстаткиРасчетыПоставщика()

Функция ПолучитьТекстЗапросаОстаткиРасчетыСКлиентов()
	ТекстЗапроса =  "ВЫБРАТЬ
	                |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	                |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	                |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	                |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	                |	РасчетыСКлиентамиОстатки.Валюта,
	                |	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток
	                |ИЗ
	                |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	                |			,
	                |			АналитикаУчетаПоПартнерам В
	                |					(ВЫБРАТЬ
	                |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	                |					ИЗ
	                |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	                |					ГДЕ
	                |						АналитикаПоПартнерам.Партнер = &Партнер)
	                |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки";
	Возврат ТекстЗапроса;    
КонецФункции // ПолучитьТекстЗапросаОстаткиРасчетыСКлиентов()

Функция ПолучитьТекстЗапросаРасчетПартнера()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиент,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Порядок,
	               |	ИСТИНА КАК Клиент,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	НЕОПРЕДЕЛЕНО КАК ЗаказПоставщику
	               |ПОМЕСТИТЬ ВТ_Порядок
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	ИСТИНА,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	ИСТИНА,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	ИСТИНА,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	ИСТИНА,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	               |				И НЕ ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	-РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	ИСТИНА,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента,
	               |	НЕОПРЕДЕЛЕНО
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	               |				И НЕ ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ЛОЖЬ,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	-РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ЛОЖЬ,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ЛОЖЬ,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	-РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ЛОЖЬ,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ЛОЖЬ,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	               |				И НЕ ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация,
	               |	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	-РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	ЛОЖЬ,
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	               |	НЕОПРЕДЕЛЕНО,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	               |			,
	               |			АналитикаУчетаПоПартнерам В
	               |					(ВЫБРАТЬ
	               |						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	               |					ИЗ
	               |						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	               |					ГДЕ
	               |						АналитикаПоПартнерам.Партнер = &Партнер)
	               |				И ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	               |				И НЕ ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	               |				И Валюта = &Валюта) КАК РасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Порядок.Партнер,
	               |	ВТ_Порядок.Организация,
	               |	ВТ_Порядок.Контрагент,
	               |	ВТ_Порядок.Валюта,
	               |	ВТ_Порядок.Порядок КАК Порядок,
	               |	ВТ_Порядок.СуммаОстаток,
	               |	ВТ_Порядок.ЗаказКлиента,
	               |	ВТ_Порядок.ЗаказПоставщику,
	               |	ВТ_Порядок.Клиент
	               |ИЗ
	               |	ВТ_Порядок КАК ВТ_Порядок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок УБЫВ";
	Возврат ТекстЗапроса;  	

КонецФункции // ПолучитьТекстЗапросаРасчетПАртнера()

Функция ПолучитьТекстЗапросаВалютПоПартнерам()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказПоставщику
	               |ПОМЕСТИТЬ ВТ_Валют
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСПоставщикамиОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстатки.Валюта,
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &ПартнерЗП) КАК РасчетыСКлиентамиОстатки
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	РасчетыСПоставщикамиОстатки.Валюта,
	               |	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &ПартнерЗП) КАК РасчетыСПоставщикамиОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_Валют.Валюта
	               |ИЗ
	               |	ВТ_Валют КАК ВТ_Валют";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапро саВалютПоПартнерам()

#КонецОбласти

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.26";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. автоматическое сведение взаимных расчетов по партнерам ЗП");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. автоматическое сведение взаимных расчетов по партнерам ЗП[" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоматическое сведение взаимных расчетов [" + Версия + "]", "АвтоматическоеСведенияОплат();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти
