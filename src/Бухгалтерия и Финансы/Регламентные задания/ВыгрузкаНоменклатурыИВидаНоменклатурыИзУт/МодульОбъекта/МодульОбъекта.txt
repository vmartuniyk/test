
#Область ИнтерфейсВнешнегоОбъекта

#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьСписокНоменклатурыИзУТ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;
	
	ИмяПользователя 	= ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Пароль 				= ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	МестоположениеWSDL	= ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();	

	Прокси =  ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиНоменклатуры();	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Истина Тогда
		Возврат;	
	КонецЕсли;
	                                    
	Выборка = РезультатЗапроса.Выбрать();
	
	ProductList = СоздатьФабрикуXDTOПоИмени(Прокси,"ProductList");
	
	Пока Выборка.Следующий() Цикл   
		Product = СоздатьФабрикуXDTOПоИмени(Прокси,"Product");
		
		СпрНоменклатура = Выборка.Ссылка;
		
		Product.UID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Product.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор()); 
		Product.Group		= СпрНоменклатура.ЭтоГруппа;
		ЗаполнитьЗначенияСвойств(Product,Выборка,,"TypeProduct,");	
		
		Если СпрНоменклатура.ЭтоГруппа = ЛОЖЬ Тогда
		   	TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
			TypeProduct.UID 		= Строка(Выборка.TypeProduct.УникальныйИдентификатор()); 
			TypeProduct.Name 		= Выборка.TypeProductName;
			TypeProduct.Group 		= Выборка.TypeProduct.ЭтоГруппа;
			TypeProduct.Owner_UID 	= Строка(Выборка.TypeProductOwner.УникальныйИдентификатор());			
			Product.TypeProduct = TypeProduct;  
		Иначе
			TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
			УИДНул					= "00000000-0000-0000-0000-000000000000";
			TypeProduct.UID 		= УИДНул; 
			TypeProduct.Name 		= "";
			TypeProduct.Group 		= ЛОЖЬ;
			TypeProduct.Owner_UID 	= УИДНул;			
			Product.TypeProduct = TypeProduct;    			
		КонецЕсли; 
		
		ProductList.Products.Добавить(Product); 	
	КонецЦикла; 
	
	ОтветПрокси = Прокси.AddProduct(ProductList);
	
	Если ТипЗнч(ОтветПрокси)<> Тип("ОбъектXDTO") Тогда 
		СообщитьОбОшибке = НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ в базу Бухгалтерия для Украины.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОтправитьСообщениеПоПочте(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;    	
	
	Если ОтветПрокси.Code <> 200 Тогда  
		ErrorMessage 		= ОтветПрокси.ErrorMessage;
		СообщитьОбОшибке 	= НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());		
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ErrorMessage);
		ОтправитьСообщениеПоПочте(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
	ТЗ_Записей = РезультатЗапроса.Выгрузить();
	ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей);

КонецПроцедуры

Процедура ВыгрузитьСписокВидаНоменклатурыИзУТ() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;
	
	ИмяПользователя 	= ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Пароль 				= ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	МестоположениеWSDL	= ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();	

	Прокси =  ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиВидаНоменклатуры();	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Истина Тогда
		Возврат;	
	КонецЕсли;
	                                    
	Выборка = РезультатЗапроса.Выбрать();
	
	TypeProductList = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProductList");
	
	Пока Выборка.Следующий() Цикл   
		TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
		TypeProduct.UID  = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		TypeProduct.Name = Выборка.Name; 
		TypeProduct.Group 		= Выборка.ЭтоГруппа;
		TypeProduct.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор());			
		
		TypeProductList.TypeProduct.Добавить(TypeProduct); 	
	КонецЦикла; 
	
	ОтветПрокси = Прокси.AddTypeProduct(TypeProductList);
	
	Если ТипЗнч(ОтветПрокси)<> Тип("ОбъектXDTO") Тогда 
		СообщитьОбОшибке = НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ в базу Бухгалтерия для украины.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОтправитьСообщениеПоПочте(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;    	
	
	Если ОтветПрокси.Code <> 200 Тогда  
		ErrorMessage 		= ОтветПрокси.ErrorMessage;
		СообщитьОбОшибке 	= НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());		
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ErrorMessage);
		ОтправитьСообщениеПоПочте(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;	
	
	ТЗ_Записей = РезультатЗапроса.Выгрузить();
	ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей);
		
КонецПроцедуры


Процедура ВыгрузитьВесьСписокНоменклатурыИВидаИзУТ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда 
		СообщитьОбОшибке = НСтр("ru='Не заполненые константы для выгрузки номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
	ИмяПользователя 	= ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Пароль 				= ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	МестоположениеWSDL	= ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();	

	Прокси =  ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиВсейНоменклатуры();	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Истина Тогда
		Возврат;	
	КонецЕсли;
	                                    
	Выборка = РезультатЗапроса.Выбрать();
	
	ProductList = СоздатьФабрикуXDTOПоИмени(Прокси,"ProductList");
	
	Пока Выборка.Следующий() Цикл   
		Product = СоздатьФабрикуXDTOПоИмени(Прокси,"Product");
		
		СпрНоменклатура = Выборка.Ссылка;
		
		Product.UID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Product.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор()); 
		Product.Group		= СпрНоменклатура.ЭтоГруппа;
		ЗаполнитьЗначенияСвойств(Product,Выборка,,"TypeProduct,");	
		
		Если СпрНоменклатура.ЭтоГруппа = ЛОЖЬ Тогда
		   	TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
			TypeProduct.UID 		= Строка(Выборка.TypeProduct.УникальныйИдентификатор()); 
			TypeProduct.Name 		= Выборка.TypeProductName;
			TypeProduct.Group 		= Выборка.TypeProduct.ЭтоГруппа;
			TypeProduct.Owner_UID 	= Строка(Выборка.TypeProductOwner.УникальныйИдентификатор());			
			Product.TypeProduct = TypeProduct;  
		Иначе
			TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
			УИДНул					= "00000000-0000-0000-0000-000000000000";
			TypeProduct.UID 		= УИДНул; 
			TypeProduct.Name 		= "";
			TypeProduct.Group 		= ЛОЖЬ;
			TypeProduct.Owner_UID 	= УИДНул;			
			Product.TypeProduct = TypeProduct;    			
		КонецЕсли; 
		
		ProductList.Products.Добавить(Product); 	
	КонецЦикла; 
	
	ОтветПрокси = Прокси.AddProduct(ProductList);
	
	Если ТипЗнч(ОтветПрокси)<> Тип("ОбъектXDTO") Тогда 
		СообщитьОбОшибке = НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ в базу Бухгалтерия для Украины.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);     
		Возврат;
	КонецЕсли;    	
	
	Если ОтветПрокси.Code <> 200 Тогда  
		ErrorMessage 		= ОтветПрокси.ErrorMessage;
		СообщитьОбОшибке 	= НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());		
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ErrorMessage);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьВсегоСпискаВидаНоменклатурыИзУТ() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда 
		СообщитьОбОшибке = НСтр("ru='Не заполненые константы для выгрузки номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
	ИмяПользователя 	= ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Пароль 				= ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	МестоположениеWSDL	= ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();	

	Прокси =  ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиВсегоВидаНоменклатуры();	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Истина Тогда
		Возврат;	
	КонецЕсли;
	                                    
	Выборка = РезультатЗапроса.Выбрать();
	
	TypeProductList = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProductList");
	
	Пока Выборка.Следующий() Цикл   
		TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
		TypeProduct.UID  = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		TypeProduct.Name = Выборка.Name; 
		TypeProduct.Group 		= Выборка.ЭтоГруппа;
		TypeProduct.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор());			
		
		TypeProductList.TypeProduct.Добавить(TypeProduct); 	
	КонецЦикла; 
	
	ОтветПрокси = Прокси.AddTypeProduct(TypeProductList);
	
	Если ТипЗнч(ОтветПрокси)<> Тип("ОбъектXDTO") Тогда 
		СообщитьОбОшибке = НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ в базу Бухгалтерия для украины.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;    	
	
	Если ОтветПрокси.Code <> 200 Тогда  
		ErrorMessage 		= ОтветПрокси.ErrorMessage;
		СообщитьОбОшибке 	= НСтр("ru='Произошла ошибка выгрузки номенклатуры из УТ. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());		
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ErrorMessage);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;	
		
КонецПроцедуры



Функция ЗаписатьМетаданныеМониторингаВОчередь(Источник,ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда

		ДокСсылка       = Источник.Ссылка;
		Идентификатор   = Новый УникальныйИдентификатор();
		
		Блокировка 		  = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Бух_ОчередьМониторинга");
		ЭлементБлокировки.УстановитьЗначение("МетаданноеМониторинга", ДокСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.Бух_ОчередьМониторинга.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МетаданноеМониторинга.Установить(ДокСсылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.МетаданноеМониторинга = ДокСсылка;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Неопределено;
		КонецПопытки; 		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Бухгалтерия выгрузка из УT", "git_БухгалтерияВыгрузкаИзУT") Тогда	
			Возврат git_БухгалтерияВыгрузкаИзУT.ЗаписатьМетаданныеМониторингаВОчередь(Источник,Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Бухгалтерия выгрузка из УT");
			Возврат ВнешнийОбъект.ЗаписатьМетаданныеМониторингаВОчередь(Источник,Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции   

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСWS  

Функция ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль) Экспорт
	
	//Определения = Новый WSОпределения("http://localhost/goodfo/ws/yt11.1cws?wsdl", ИмяПользователя, Пароль);
	Определения = Новый WSОпределения(МестоположениеWSDL, ИмяПользователя, Пароль);
	Прокси =  Новый WSПрокси(Определения, "http://ktc-ua.com/ytproduct", "YT11_Product", "YT11_ProductSoap");	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
КонецФункции // ПолучитьСсылкуWS()

#КонецОбласти

#Область РаботаИзXDTO

Функция СоздатьФабрикуXDTOПоИмени(Прокси, Имя) 	
	ТипФабрики = Прокси.ФабрикаXDTO.Тип("http://ktc-ua.com/ytproduct", Имя);
	Возврат Прокси.ФабрикаXDTO.Создать(ТипФабрики);
КонецФункции // СоздатьФабрикуXDTOПоИмени()

#КонецОбласти 

#Область РаботаИзЗапросами

Функция ПолучитьТЗВыгрузкиНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Код КАК Code,
	               |	Номенклатура.Наименование КАК Name,
	               |	ЕСТЬNULL(Номенклатура.Артикул, """") КАК Article,
	               |	Номенклатура.ВидНоменклатуры КАК TypeProduct,
	               |	Номенклатура.ВидНоменклатуры.Наименование КАК TypeProductName,
	               |	Номенклатура.ВидНоменклатуры.Родитель КАК TypeProductOwner,
	               |	Номенклатура.Родитель КАК Owner
	               |ИЗ
	               |	РегистрСведений.Бух_ОчередьМониторинга КАК Бух_ОчередьМониторингаСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ((ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Справочник.Номенклатура)) = Номенклатура.Ссылка)
	               |ГДЕ
	               |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТЗВыгрузкиНоменклатуры()

Функция ПолучитьТЗВыгрузкиВидаНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка				КАК Ссылка,
				    |	ВидыНоменклатуры.Наименование 		КАК Name,
				   |	ВидыНоменклатуры.Родитель			КАК Owner,
	               |	ВидыНоменклатуры.ЭтоГруппа 			КАК ЭтоГруппа
				   |ИЗ
	               |	РегистрСведений.Бух_ОчередьМониторинга КАК Бух_ОчередьМониторингаСрезПоследних
	               |		
				   |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ПО ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Справочник.ВидыНоменклатуры) = ВидыНоменклатуры.Ссылка
	               |
				   |ГДЕ
	               |	ВидыНоменклатуры.ПометкаУдаления = ЛОЖЬ
				   |
				   |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;  

КонецФункции // ПолучитьТЗВыгрузкиВидаНоменклатуры()

Функция ПолучитьТЗВыгрузкиВсейНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Код КАК Code,
	               |	Номенклатура.Наименование КАК Name,
	               |	ЕСТЬNULL(Номенклатура.Артикул, """") КАК Article,
	               |	Номенклатура.ВидНоменклатуры КАК TypeProduct,
	               |	Номенклатура.ВидНоменклатуры.Наименование КАК TypeProductName,
	               |	Номенклатура.ВидНоменклатуры.Родитель КАК TypeProductOwner,
	               |	Номенклатура.Родитель КАК Owner,
	               |	Номенклатура.ЭтоГруппа
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТЗВыгрузкиВсейНоменклатуры()

Функция ПолучитьТЗВыгрузкиВсегоВидаНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка,
	               |	ВидыНоменклатуры.Наименование КАК Name,
	               |	ВидыНоменклатуры.Родитель КАК Owner,
	               |	ВидыНоменклатуры.ЭтоГруппа КАК ЭтоГруппа
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ГДЕ
	               |	ВидыНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;  

КонецФункции // ПолучитьТЗВыгрузкиВсегоВидаНоменклатуры()

#КонецОбласти 

#Область РаботаСРассылкою
Процедура ОтправитьСообщениеПоПочте(знач ТелоПисьма)
		
	УчетнаяЗапись 				= Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты; 
	АдресЭлектроннойПочты    	= ктс_ПредопределенныеЗначенияПовтИсп.АдресЭлектроннойПочтыОтделаПоддержки();
	ТекущийПользователь			= ПараметрыСеанса.ТекущийПользователь;
	ТемаПисьма = НСтр("ru='Ошибка выгрузки данных из УТ11. На дату %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма, ТекущаяДата());

	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	РезультатПроверки   = БиблиотекаОбработок.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭлектроннойПочты);

	Если РезультатПроверки Тогда
		ТекстСообщения = НСтр("ru='Адрес электронной почты задан в неверном формате. Задайте адрес КТС_Константы.Константы.АдресЭлектроннойПочтыОтделаПоддержки.'");
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = git_Templates.ПолучитьШаблонЭлектронноеПисьмоИсходящее();
	СтруктураПараметров.Вставить("Автор", ТекущийПользователь);
	СтруктураПараметров.Вставить("Важность", Перечисления.ВариантыВажностиВзаимодействия.Обычная);
	СтруктураПараметров.Вставить("Ответственный", ТекущийПользователь);
	СтруктураПараметров.Вставить("Тема", ТемаПисьма);
	СтруктураПараметров.Вставить("Текст", ТелоПисьма); 
	СтруктураПараметров.Вставить("ТекстHTML", ТелоПисьма);
	СтруктураПараметров.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	СтруктураПараметров.Вставить("СтатусПисьма", Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее); 
	СтруктураПараметров.Вставить("ОтправительПредставление", УчетнаяЗапись.Наименование);
	СтруктураПараметров.Вставить("СписокПолучателейПисьма", АдресЭлектроннойПочты);
	СтруктураПараметров.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	
	ПолучателиПисьма 			= СтруктураПараметров.ПолучателиПисьма;
	НоваяСтрока		 			= ПолучателиПисьма.Добавить();
	НоваяСтрока.Адрес   		= АдресЭлектроннойПочты;
	НоваяСтрока.Представление   = НСтр("ru='Тех. подержка.'");
	
	СтруктуруОшибок = Новый Структура;
	ДокументОбъект  = git_Objcon.СоздатьДокумент("ЭлектронноеПисьмоИсходящее", СтруктураПараметров, СтруктуруОшибок);
	
	Если СтруктуруОшибок.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru='Во время создания документа ЭлектронноеПисьмоИсходящее произошли ошибки заполнения.'");
		Для Каждого ОшибкаИзСтруктуры Из СтруктуруОшибок Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + ОшибкаИзСтруктуры.Значение;
		КонецЦикла;
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать документ ЭлектронноеПисьмоИсходящее.'");
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось провести документ ЭлектронноеПисьмоИсходящее.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ) 

	АдресЭлектроннойПочтыОтделаПоддержки = ктс_ПредопределенныеЗначенияПовтИсп.АдресЭлектроннойПочтыОтделаПоддержки();
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочтыОтделаПоддержки) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - АдресЭлектроннойПочтыОтделаПоддержки.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;  	
	
	ИмяПользователя = ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Если ЗначениеЗаполнено(ИмяПользователя) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - ИмяПользователяБух.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;
	              	
	ПарольПользователяБух = ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	Если ЗначениеЗаполнено(ПарольПользователяБух) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - ПарольПользователяБух.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;
	
	МестоположениеWSDL = ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();   	
	Если ЗначениеЗаполнено(МестоположениеWSDL) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - МестоположениеWSDLДляСинхронизации.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'БухгалтерияВыгрузкаИзУT'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()
									
#КонецОбласти

Процедура ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей)
	

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка 		  = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Бух_ОчередьМониторинга");
		ЭлементБлокировки.ИсточникДанных = ТЗ_Записей;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("МетаданноеМониторинга", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;		

		Попытка
			Блокировка.Заблокировать();
		Исключение
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;

		НаборЗаписей = РегистрыСведений.Бух_ОчередьМониторинга.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТЗ_Записей);
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить(); 

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Бухгалтерия выгрузка из УT");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Бухгалтерия выгрузка из УT [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Бухгалтерия выгрузка номенклатуры из УT [" + Версия + "]", "ВыгрузитьНоменклатуруИзУТ", "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Бухгалтерия выгрузка вида номенклатуры из УT [" + Версия + "]", "ВыгрузитьСписокВидаНоменклатурыИзУТ", "ВызовСерверногоМетода");
    ДобавитьКоманду(ТаблицаКоманд, "БухгалтерияПодписка [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "БухгалтерияПодписка");

    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
