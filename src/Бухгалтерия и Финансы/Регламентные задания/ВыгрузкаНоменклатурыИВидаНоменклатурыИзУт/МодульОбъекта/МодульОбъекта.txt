
#Область ИнтерфейсВнешнегоОбъекта

#Область ПрограммныйИнтерфейс

Процедура СинхронизацияБухгалтерииСУТ11() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ,Истина);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;

	Прокси = ПолучитьПроксиСервер(); 	

	РЗ_Номенклатура = ПолучитьРезультатЗапросаВыгрузитьНоменклатуруСОчереди();
	Если РЗ_Номенклатура.Пустой() = ЛОЖЬ Тогда			
		ProductList = ПолучитьМассивСпискаНоменклатуры(Прокси,РЗ_Номенклатура);
		ОтветПрокси = Прокси.AddProduct(ProductList);
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка номенклатуры с очереди");
		Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли; 
		ОчиститьРегистрБух_ОчередьМониторинга(РЗ_Номенклатура.Выгрузить());
	КонецЕсли;
		        
	
	РЗ_ВидНоменклатуры = ПолучитьРезультатЗапросаВыгрузитьВидНоменклатурыСОчереди();
	Если РЗ_ВидНоменклатуры.Пустой() = ЛОЖЬ Тогда			
		TypeProductList = ПолучитьМассивВидаНоменклатуры(Прокси,РЗ_ВидНоменклатуры);
		ОтветПрокси = Прокси.AddTypeProduct(TypeProductList);                                       
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка вида номенклатуры с очереди"); 		
		
		Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли; 
		ОчиститьРегистрБух_ОчередьМониторинга(РЗ_ВидНоменклатуры.Выгрузить()); 
	КонецЕсли;
	
	РЗ_Партнеры = ПолучитьРезультатЗапросаВыгрузитьПартнеровСОчереди();
	Если РЗ_Партнеры.Пустой() = ЛОЖЬ Тогда			
		PartnersList = ПолучитьМассивПартнеров(Прокси,РЗ_Партнеры);
		ОтветПрокси = Прокси.AddPartners(PartnersList);                                       
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка партнеров с очереди"); 		
		Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;
		ОчиститьРегистрБух_ОчередьМониторинга(РЗ_Партнеры.Выгрузить());  
	КонецЕсли;
	
	РЗ_ПТиУ = ПолучитьРезультатЗапросаВыгрузитьПТиУСОчереди();
	Если РЗ_ПТиУ.Пустой() = ЛОЖЬ Тогда			
		ReceiptOfGoodsList = ПолучитьМассивДокументовПТиУ(Прокси,РЗ_ПТиУ);
		ОтветПрокси = Прокси.AddReceiptOfGoods(ReceiptOfGoodsList);                                       
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка документа ПТиУ с очереди"); 
		Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли; 
		ОчиститьРегистрБух_ОчередьМониторинга(РЗ_ПТиУ.Выгрузить());  
	КонецЕсли; 
	
	ОчиститьВсеЗаписиРегистрБух_ОчередьМониторинга();
КонецПроцедуры


Процедура ВыгрузитьСписокНоменклатурыИзУТСОчереди() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;    	

	РЗ_Номенклатура = ПолучитьРезультатЗапросаВыгрузитьНоменклатуруСОчереди();
	Если РЗ_Номенклатура.Пустой() = ЛОЖЬ Тогда	
		
		Прокси = ПолучитьПроксиСервер(); 
		
		ProductList = ПолучитьМассивСпискаНоменклатуры(Прокси,РЗ_Номенклатура);
		ОтветПрокси = Прокси.AddProduct(ProductList);
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка номенклатуры с очереди"); 	
		
		ТЗ_Записей = РЗ_Номенклатура.Выгрузить();
		ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей);
	КонецЕсли;  	
КонецПроцедуры

Процедура ВыгрузитьСписокВидаНоменклатурыИзУТСОчереди() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;  	
	
	РЗ_ВидНоменклатуры = ПолучитьРезультатЗапросаВыгрузитьВидНоменклатурыСОчереди();
	Если РЗ_ВидНоменклатуры.Пустой() = ЛОЖЬ Тогда	
		Прокси 			= ПолучитьПроксиСервер(); 
		
		TypeProductList = ПолучитьМассивВидаНоменклатуры(Прокси,РЗ_ВидНоменклатуры);
		ОтветПрокси = Прокси.AddTypeProduct(TypeProductList);                                       
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка вида номенклатуры с очереди"); 
		
		ТЗ_Записей  = РЗ_ВидНоменклатуры.Выгрузить();
		ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей); 
	КонецЕсли;	
			
КонецПроцедуры

Процедура ВыгрузитьСписокПартнеровИзУТСОчереди() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;  	
	
	РЗ_Партнеры = ПолучитьРезультатЗапросаВыгрузитьПартнеровСОчереди();
	
	Если РЗ_Партнеры.Пустой() = ЛОЖЬ Тогда	
		
		Прокси = ПолучитьПроксиСервер();   		
		PartnersList 	= ПолучитьМассивПартнеров(Прокси,РЗ_Партнеры);
		ОтветПрокси 	= Прокси.AddPartners(PartnersList);                                       
		Отказ 			= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка партнеров с очереди"); 
		
		ТЗ_Записей 		= РЗ_Партнеры.Выгрузить();
		ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей);  
	КонецЕсли; 			
КонецПроцедуры

Процедура ВыгрузитьСписокЗаписейПоДокументуПоступлениИзУТСОчереди() Экспорт
	
	Отказ = ЛОЖЬ;
	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ,Истина);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;   	
	
	РЗ_ПТиУ = ПолучитьРезультатЗапросаВыгрузитьПТиУСОчереди();
	Если РЗ_ПТиУ.Пустой() = ЛОЖЬ Тогда
		
		Прокси = ПолучитьПроксиСервер();
		
		ReceiptOfGoodsList = ПолучитьМассивДокументовПТиУ(Прокси,РЗ_ПТиУ);
		ОтветПрокси = Прокси.AddReceiptOfGoods(ReceiptOfGoodsList);                                       
		Отказ 		= ПроанализироватьНаОшибки(ОтветПрокси,"Выгрузка документа ПТиУ с очереди"); 		
		
		ТЗ_Записей = РЗ_ПТиУ.Выгрузить();
		ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей); 
	КонецЕсли;	 		
КонецПроцедуры



Процедура ВыгрузитьВесьСписокНоменклатурыИВидаИзУТ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда 
		СообщитьОбОшибке = НСтр("ru='Не заполненые константы для выгрузки номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
	Прокси = ПолучитьПроксиСервер(); 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиВсейНоменклатуры();	
	РЗ_Номенклатура = Запрос.Выполнить();
	
	Если РЗ_Номенклатура.Пустой() = ЛОЖЬ Тогда			
		ProductList = ПолучитьМассивСпискаНоменклатуры(Прокси,РЗ_Номенклатура);
		ОтветПрокси = Прокси.AddProduct(ProductList);
		Отказ 		= ПроанализироватьНаОшибкиДляПользователя(ОтветПрокси,"Выгрузка номенклатуры"); 	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыгрузитьВсегоСпискаВидаНоменклатурыИзУТ() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда 
		СообщитьОбОшибке = НСтр("ru='Не заполненые константы для выгрузки номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиВсегоВидаНоменклатуры();	
	РЗ_ВидНоменклатуры = Запрос.Выполнить();
	
	Если РЗ_ВидНоменклатуры.Пустой() = ЛОЖЬ Тогда	
		Прокси = ПолучитьПроксиСервер(); 
		TypeProductList = ПолучитьМассивВидаНоменклатуры(Прокси,РЗ_ВидНоменклатуры);
		ОтветПрокси = Прокси.AddTypeProduct(TypeProductList);                                       
		Отказ 		= ПроанализироватьНаОшибкиДляПользователя(ОтветПрокси,"Выгрузка вида номенклатуры"); 		
	КонецЕсли;	

КонецПроцедуры

Процедура ВыгрузитьВсегоСпискаПартнеровИзУТ() Экспорт
	
	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ);
	
	Если Отказ = ИСТИНА Тогда 
		СообщитьОбОшибке = НСтр("ru='Не заполненые константы для выгрузки номенклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиВсехПартнеров();	
	РЗ_Партнеры = Запрос.Выполнить();
	
	Если РЗ_Партнеры.Пустой() = ЛОЖЬ Тогда	
		
		Прокси 			= ПолучитьПроксиСервер();   		
		PartnersList 	= ПолучитьМассивПартнеров(Прокси,РЗ_Партнеры);
		ОтветПрокси 	= Прокси.AddPartners(PartnersList);                                       
		Отказ 			= ПроанализироватьНаОшибкиДляПользователя(ОтветПрокси,"Выгрузка партнеров");   		
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ВыгрузитьСписокЗаписейПоДокументуПоступлениИзУТ() Экспорт

	Отказ = ЛОЖЬ;    	
	ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ,Истина);
	
	Если Отказ = ИСТИНА Тогда Возврат;	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗВыгрузкиДокПоступления();	
	Запрос.УстановитьПараметр("ДатаНачалаСинхронизации",ктс_ПредопределенныеЗначенияПовтИсп.ДатаНачалаСинхронизации());
	Запрос.УстановитьПараметр("ВалютаУпрУч",Константы.ВалютаУправленческогоУчета.Получить()); 
	Запрос.УстановитьПараметр("ВалютаРеглУч",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СвойствоРеквизитВыписатьНа",ктс_ПредопределенныеЗначенияПовтИсп.РеквизитЗаказаПоставщикаДокументыВыписаныНа());


	РЗ_ПТиУ = Запрос.Выполнить();
	
	Если РЗ_ПТиУ.Пустой() = ЛОЖЬ Тогда
		
		Прокси 			   = ПолучитьПроксиСервер();		
		ReceiptOfGoodsList = ПолучитьМассивДокументовПТиУ(Прокси,РЗ_ПТиУ);
		ОтветПрокси = Прокси.AddReceiptOfGoods(ReceiptOfGoodsList);                                       
		Отказ 		= ПроанализироватьНаОшибкиДляПользователя(ОтветПрокси,"Выгрузка документа ПТиУ"); 		
		
	КонецЕсли;
КонецПроцедуры



Функция ЗаписатьМетаданныеМониторингаВОчередь(Источник,ПеренаправлениеОпределено = Ложь) Экспорт

	Если ПеренаправлениеОпределено Тогда

		ДокСсылка       = Источник.Ссылка;
		Идентификатор   = Новый УникальныйИдентификатор();
		
		Блокировка 		  = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Бух_ОчередьМониторинга");
		ЭлементБлокировки.УстановитьЗначение("МетаданноеМониторинга", ДокСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.Бух_ОчередьМониторинга.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МетаданноеМониторинга.Установить(ДокСсылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.МетаданноеМониторинга = ДокСсылка;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			Возврат Неопределено;
		КонецПопытки; 		
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Бухгалтерия выгрузка из УT", "git_БухгалтерияВыгрузкаИзУT") Тогда	
			Возврат git_БухгалтерияВыгрузкаИзУT.ЗаписатьМетаданныеМониторингаВОчередь(Источник,Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Бухгалтерия выгрузка из УT");
			Возврат ВнешнийОбъект.ЗаписатьМетаданныеМониторингаВОчередь(Источник,Истина);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции   

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСWS  

Функция ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль) Экспорт
	
	//Определения = Новый WSОпределения("http://localhost/goodfo/ws/yt11.1cws?wsdl", ИмяПользователя, Пароль);
	Определения = Новый WSОпределения(МестоположениеWSDL, ИмяПользователя, Пароль);
	Прокси =  Новый WSПрокси(Определения, "http://ktc-ua.com/ytproduct", "YT11_Product", "YT11_ProductSoap");	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
КонецФункции // ПолучитьСсылкуWS()

Функция ПолучитьПроксиСервер()
	
	ИмяПользователя 	= ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Пароль 				= ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	МестоположениеWSDL	= ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();	

	Возврат ПолучитьСсылкуWS(МестоположениеWSDL,ИмяПользователя,Пароль); 
КонецФункции // ПолучитьПроксиСервер()

#КонецОбласти

#Область РаботаИзXDTO

Функция СоздатьФабрикуXDTOПоИмени(Прокси, Имя) 	
	ТипФабрики = Прокси.ФабрикаXDTO.Тип("http://ktc-ua.com/ytproduct", Имя);
	Возврат Прокси.ФабрикаXDTO.Создать(ТипФабрики);
КонецФункции // СоздатьФабрикуXDTOПоИмени()

#КонецОбласти 

#Область РаботаИзЗапросами

Функция ПолучитьТЗСписокНоменклатурыСОчереди()
	ТекстЗапроса = "ВЫБРАТЬ
				   |	Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК МетаданноеМониторинга,
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Код КАК Code,
	               |	Номенклатура.Наименование КАК Name,
	               |	ЕСТЬNULL(Номенклатура.Артикул, """") КАК Article,
	               |	Номенклатура.ВидНоменклатуры КАК TypeProduct,
	               |	Номенклатура.ВидНоменклатуры.Наименование КАК TypeProductName,
	               |	Номенклатура.ВидНоменклатуры.Родитель КАК TypeProductOwner,
	               |	Номенклатура.Родитель КАК Owner
	               |ИЗ
	               |	РегистрСведений.Бух_ОчередьМониторинга КАК Бух_ОчередьМониторингаСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ((ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Справочник.Номенклатура)) = Номенклатура.Ссылка)
	               |ГДЕ
	               |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТЗВыгрузкиНоменклатуры()

Функция ПолучитьТЗСписокВидаНоменклатурыСОчереди()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка				КАК Ссылка,
				    |	ВидыНоменклатуры.Наименование 		КАК Name,
				   |	ВидыНоменклатуры.Родитель			КАК Owner,
	               |	ВидыНоменклатуры.ЭтоГруппа 			КАК ЭтоГруппа
				   |ИЗ
	               |	РегистрСведений.Бух_ОчередьМониторинга КАК Бух_ОчередьМониторингаСрезПоследних
	               |		
				   |ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ПО ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Справочник.ВидыНоменклатуры) = ВидыНоменклатуры.Ссылка
	               |
				   |ГДЕ
	               |	ВидыНоменклатуры.ПометкаУдаления = ЛОЖЬ
				   |
				   |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;  

КонецФункции // ПолучитьТЗВыгрузкиВидаНоменклатуры()

Функция ПолучитьТЗСписоеПартнеровУТСОчереди()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Партнеры.Ссылка КАК Ссылка,
	               |	Партнеры.Код КАК Code,
	               |	Партнеры.Наименование КАК Name,
	               |	Партнеры.Родитель КАК Owner
	               |ИЗ
	               |	РегистрСведений.Бух_ОчередьМониторинга КАК Бух_ОчередьМониторингаСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	               |		ПО ((ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Справочник.Партнеры)) = Партнеры.Ссылка)
	               |ГДЕ
	               |	Партнеры.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТЗВыгрузкиСпрПартнеры()

Функция ПолучитьТЗСписокДокПоступленияПоОчереди()

	ТекстЗапроса =  "ВЫБРАТЬ
	                |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	                |	КурсыВалют.Валюта КАК Валюта,
	                |	КурсыВалют.Период КАК Период
	                |ПОМЕСТИТЬ КурсыВалют
	                |ИЗ
	                |	РегистрСведений.КурсыВалют КАК КурсыВалют
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КурсыВалют.Курс,
	                |	КурсыВалют.Валюта,
	                |	КурсыВалют.Период КАК НачалоПериода,
	                |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	                |ПОМЕСТИТЬ ТаблицаКурсов
	                |ИЗ
	                |	КурсыВалют КАК КурсыВалют
	                |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	                |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	                |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	КурсыВалют.Период,
	                |	КурсыВалют.Курс,
	                |	КурсыВалют.Валюта
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	КурсыВалют.Валюта
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ КурсыВалют
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступление.Ссылка,
	                |	ДокПоступление.Дата,
	                |	ДокПоступление.Партнер,
	                |	ДокПоступление.Представление,
	                |	ДокПоступление.Валюта,
	                |	ЕСТЬNULL(ДокЗП.КТС_НомерТТН, """") КАК TTN,
	                |	ЕСТЬNULL(ДопРеквизиты.Значение, ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)) КАК CheckTheDocument
	                |ПОМЕСТИТЬ ДокВОчереди
	                |ИЗ
	                |	РегистрСведений.Бух_ОчередьМониторинга КАК Бух_ОчередьМониторингаСрезПоследних
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ДополнительныеРеквизиты КАК ДопРеквизиты
	                |		ПО (ДопРеквизиты.Свойство = &СвойствоРеквизитВыписатьНа)
	                |			И (ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Документ.ПоступлениеТоваровУслуг).ЗаказПоставщику = ДопРеквизиты.Ссылка)
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ДокПоступление
	                |		ПО ((ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Документ.ПоступлениеТоваровУслуг)) = ДокПоступление.Ссылка)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДокЗП
	                |		ПО (ВЫРАЗИТЬ(Бух_ОчередьМониторингаСрезПоследних.МетаданноеМониторинга КАК Документ.ПоступлениеТоваровУслуг).ЗаказПоставщику = ДокЗП.Ссылка)
	                |ГДЕ
	                |	ДокПоступление.Проведен = ИСТИНА
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступление.Ссылка,
	                |	ДокПоступление.Дата,
	                |	ДокПоступление.Партнер,
	                |	ДокПоступление.Представление,
	                |	ДокПоступление.Валюта,
	                |	ТаблицаТовары.Номенклатура,
	                |	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	                |	ТаблицаТовары.Цена КАК Цена,
	                |	ТаблицаТовары.КодСтроки КАК LineCode,
	                |	ТаблицаТовары.ЗаказПоставщику
	                |ПОМЕСТИТЬ ДокПоступленияТовары
	                |ИЗ
	                |	ДокВОчереди КАК ДокПоступление
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	                |		ПО ДокПоступление.Ссылка = ТаблицаТовары.Ссылка
	                |ГДЕ
	                |	ДокПоступление.Дата >= &ДатаНачалаСинхронизации
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступленияТовары.Партнер,
	                |	ДокПоступленияТовары.Валюта,
	                |	ЕСТЬNULL(ДокЗП.КТС_НомерТТН, """") КАК TTN,
	                |	ЕСТЬNULL(ДопРеквизиты.Значение, ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)) КАК ВыписатьНа,
	                |	ДокПоступленияТовары.Ссылка,
	                |	ДокПоступленияТовары.Дата,
	                |	ДокПоступленияТовары.Представление,
	                |	ДокПоступленияТовары.Номенклатура,
	                |	ДокПоступленияТовары.КоличествоУпаковок,
	                |	ДокПоступленияТовары.Цена,
	                |	ДокПоступленияТовары.LineCode,
	                |	ДокПоступленияТовары.ЗаказПоставщику
	                |ПОМЕСТИТЬ ПоступленияТоваров
	                |ИЗ
	                |	ДокПоступленияТовары КАК ДокПоступленияТовары
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ДополнительныеРеквизиты КАК ДопРеквизиты
	                |		ПО ДокПоступленияТовары.ЗаказПоставщику = ДопРеквизиты.Ссылка
	                |			И (ДопРеквизиты.Свойство = &СвойствоРеквизитВыписатьНа)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДокЗП
	                |		ПО ДокПоступленияТовары.ЗаказПоставщику = ДокЗП.Ссылка
					|ГДЕ
					|	ДопРеквизиты.Значение  ЕСТЬ НЕ NULL 
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступления.Партнер,
	                |	ДокПоступления.Представление,
	                |	ДокПоступления.Ссылка,
	                |	ДокПоступления.Номенклатура КАК Product,
	                |	ДокПоступления.КоличествоУпаковок КАК Quantity,
	                |	ВЫРАЗИТЬ(ДокПоступления.Цена * ТаблицаКурсовДок.Курс / ТаблицаКурсовУпр.Курс КАК ЧИСЛО(15, 4)) КАК PriceUSD,
	                |	ВЫРАЗИТЬ(ДокПоступления.Цена * ТаблицаКурсовДок.Курс / ТаблицаКурсовРегл.Курс КАК ЧИСЛО(15, 4)) КАК PriceUA,
	                |	ДокПоступления.TTN,
	                |	ДокПоступления.ВыписатьНа,
	                |	ДокПоступления.LineCode
	                |ИЗ
	                |	ПоступленияТоваров КАК ДокПоступления
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовДок
	                |		ПО (ТаблицаКурсовДок.Валюта = ДокПоступления.Валюта)
	                |			И (ТаблицаКурсовДок.НачалоПериода <= ДокПоступления.Дата)
	                |			И (ТаблицаКурсовДок.КонецПериода > ДокПоступления.Дата)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовУпр
	                |		ПО (ТаблицаКурсовУпр.Валюта = &ВалютаУпрУч)
	                |			И (ТаблицаКурсовУпр.НачалоПериода <= ДокПоступления.Дата)
	                |			И (ТаблицаКурсовУпр.КонецПериода > ДокПоступления.Дата)
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовРегл
	                |		ПО (ТаблицаКурсовРегл.Валюта = &ВалютаРеглУч)
	                |			И (ТаблицаКурсовРегл.НачалоПериода <= ДокПоступления.Дата)
	                |			И (ТаблицаКурсовРегл.КонецПериода > ДокПоступления.Дата)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ТаблицаКурсов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ДокВОчереди
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ПоступленияТоваров";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТЗВыгрузкиДокПоступления()


Функция ПолучитьТЗВыгрузкиВсейНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка,
	               |	Номенклатура.Код КАК Code,
	               |	Номенклатура.Наименование КАК Name,
	               |	ЕСТЬNULL(Номенклатура.Артикул, """") КАК Article,
	               |	Номенклатура.ВидНоменклатуры КАК TypeProduct,
	               |	Номенклатура.ВидНоменклатуры.Наименование КАК TypeProductName,
	               |	Номенклатура.ВидНоменклатуры.Родитель КАК TypeProductOwner,
	               |	Номенклатура.Родитель КАК Owner,
	               |	Номенклатура.ЭтоГруппа
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТЗВыгрузкиВсейНоменклатуры()

Функция ПолучитьТЗВыгрузкиВсегоВидаНоменклатуры()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка,
	               |	ВидыНоменклатуры.Наименование КАК Name,
	               |	ВидыНоменклатуры.Родитель КАК Owner,
	               |	ВидыНоменклатуры.ЭтоГруппа КАК ЭтоГруппа
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ГДЕ
	               |	ВидыНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;  

КонецФункции // ПолучитьТЗВыгрузкиВсегоВидаНоменклатуры()

Функция ПолучитьТЗВыгрузкиВсехПартнеров()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Партнеры.Ссылка КАК Ссылка,
	               |	Партнеры.Код КАК Code,
	               |	Партнеры.Наименование КАК Name,
	               |	Партнеры.Родитель КАК Owner  
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТЗВыгрузкиВсехПартнеров()

Функция ПолучитьТЗВыгрузкиДокПоступления()

	ТекстЗапроса =  "ВЫБРАТЬ
	                |	ВЫРАЗИТЬ(КурсыВалют.Курс / КурсыВалют.Кратность КАК ЧИСЛО(15, 4)) КАК Курс,
	                |	КурсыВалют.Валюта КАК Валюта,
	                |	КурсыВалют.Период КАК Период
	                |ПОМЕСТИТЬ КурсыВалют
	                |ИЗ
	                |	РегистрСведений.КурсыВалют КАК КурсыВалют
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КурсыВалют.Курс,
	                |	КурсыВалют.Валюта,
	                |	КурсыВалют.Период КАК НачалоПериода,
	                |	МИНИМУМ(ЕСТЬNULL(КурсыВалютКопия.Период, ДАТАВРЕМЯ(3999, 1, 1))) КАК КонецПериода
	                |ПОМЕСТИТЬ ТаблицаКурсов
	                |ИЗ
	                |	КурсыВалют КАК КурсыВалют
	                |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютКопия
	                |		ПО (КурсыВалютКопия.Период > КурсыВалют.Период)
	                |			И (КурсыВалютКопия.Валюта = КурсыВалют.Валюта)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	КурсыВалют.Период,
	                |	КурсыВалют.Курс,
	                |	КурсыВалют.Валюта
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	КурсыВалют.Валюта
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ КурсыВалют
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступление.Ссылка,
	                |	ДокПоступление.Дата,
	                |	ДокПоступление.Партнер,
	                |	ДокПоступление.Представление,
	                |	ДокПоступление.Валюта,
	                |	ТаблицаТовары.Номенклатура,
	                |	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	                |	ТаблицаТовары.Цена КАК Цена,
	                |	ТаблицаТовары.ЗаказПоставщику,
	                |	ТаблицаТовары.КодСтроки
	                |ПОМЕСТИТЬ ДокПоступленияТовары
	                |ИЗ
	                |	Документ.ПоступлениеТоваровУслуг КАК ДокПоступление
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	                |		ПО ДокПоступление.Ссылка = ТаблицаТовары.Ссылка
	                |ГДЕ
	                |	ДокПоступление.Проведен = ИСТИНА
	                |	И ДокПоступление.Дата >= &ДатаНачалаСинхронизации
	                |	И ТаблицаТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступление.Ссылка,
	                |	ДокПоступление.Дата,
	                |	ДокПоступление.Партнер,
	                |	ДокПоступление.Представление,
	                |	ДокПоступление.Валюта,
	                |	ДокПоступление.Номенклатура,
	                |	ДокПоступление.КоличествоУпаковок КАК КоличествоУпаковок,
	                |	ДокПоступление.Цена КАК Цена,
	                |	ЕСТЬNULL(ДокЗП.КТС_НомерТТН, """") КАК TTN,
	                |	ЕСТЬNULL(ДопРеквизиты.Значение, ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)) КАК ВыписатьНа,
	                |	ДокПоступление.КодСтроки,
	                |	ДокПоступление.ЗаказПоставщику
	                |ПОМЕСТИТЬ ДокПоступления
	                |ИЗ
	                |	ДокПоступленияТовары КАК ДокПоступление
					|
	                |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДокЗП
	                |	ПО ДокПоступление.ЗаказПоставщику = ДокЗП.Ссылка
					|
	                |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ДополнительныеРеквизиты КАК ДопРеквизиты
	                |	ПО ДокПоступление.ЗаказПоставщику = ДопРеквизиты.Ссылка
	                |	И (ДопРеквизиты.Свойство = &СвойствоРеквизитВыписатьНа)
					|
					|ГДЕ
					|	ДопРеквизиты.Значение  ЕСТЬ НЕ NULL 
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДокПоступления.Партнер,
	                |	ДокПоступления.Представление,
	                |	ДокПоступления.Ссылка,
	                |	ДокПоступления.Номенклатура КАК Product,
	                |	ДокПоступления.КоличествоУпаковок КАК Quantity,
	                |	ВЫРАЗИТЬ(ДокПоступления.Цена * ТаблицаКурсовДок.Курс / ТаблицаКурсовУпр.Курс КАК ЧИСЛО(15, 4)) КАК PriceUSD,
	                |	ВЫРАЗИТЬ(ДокПоступления.Цена * ТаблицаКурсовДок.Курс / ТаблицаКурсовРегл.Курс КАК ЧИСЛО(15, 4)) КАК PriceUA,
	                |	ДокПоступления.TTN,
	                |	ДокПоступления.ВыписатьНа КАК ВыписатьНа,
	                |	ДокПоступления.КодСтроки КАК LineCode,
	                |	ДокПоступления.ЗаказПоставщику
	                |ИЗ
	                |	ДокПоступления КАК ДокПоступления
	                |		
					|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовДок
	                |ПО (ТаблицаКурсовДок.Валюта = ДокПоступления.Валюта)
	                |И (ТаблицаКурсовДок.НачалоПериода <= ДокПоступления.Дата)
	                |И (ТаблицаКурсовДок.КонецПериода > ДокПоступления.Дата)
	                |
					|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовУпр
	                |ПО (ТаблицаКурсовУпр.Валюта = &ВалютаУпрУч)
	                |И (ТаблицаКурсовУпр.НачалоПериода <= ДокПоступления.Дата)
	                |И (ТаблицаКурсовУпр.КонецПериода > ДокПоступления.Дата)
	                |		
					|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовРегл
	                |ПО (ТаблицаКурсовРегл.Валюта = &ВалютаРеглУч)
	                |И (ТаблицаКурсовРегл.НачалоПериода <= ДокПоступления.Дата)
	                |И (ТаблицаКурсовРегл.КонецПериода > ДокПоступления.Дата)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ТаблицаКурсов
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ДокПоступления";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТЗВыгрузкиДокПоступления()

#КонецОбласти 

#Область РаботаСРассылкою
Процедура ОтправитьСообщениеПоПочте(знач ТелоПисьма)
		
	УчетнаяЗапись 				= Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты; 
	АдресЭлектроннойПочты    	= ктс_ПредопределенныеЗначенияПовтИсп.АдресЭлектроннойПочтыОтделаПоддержки();
	ТекущийПользователь			= ПараметрыСеанса.ТекущийПользователь;
	ТемаПисьма = НСтр("ru='Ошибка выгрузки данных из УТ11. На дату %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма, ТекущаяДата());

	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	РезультатПроверки   = БиблиотекаОбработок.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭлектроннойПочты);

	Если РезультатПроверки Тогда
		ТекстСообщения = НСтр("ru='Адрес электронной почты задан в неверном формате. Задайте адрес КТС_Константы.Константы.АдресЭлектроннойПочтыОтделаПоддержки.'");
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = git_Templates.ПолучитьШаблонЭлектронноеПисьмоИсходящее();
	СтруктураПараметров.Вставить("Автор", ТекущийПользователь);
	СтруктураПараметров.Вставить("Важность", Перечисления.ВариантыВажностиВзаимодействия.Обычная);
	СтруктураПараметров.Вставить("Ответственный", ТекущийПользователь);
	СтруктураПараметров.Вставить("Тема", ТемаПисьма);
	СтруктураПараметров.Вставить("Текст", ТелоПисьма); 
	СтруктураПараметров.Вставить("ТекстHTML", ТелоПисьма);
	СтруктураПараметров.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	СтруктураПараметров.Вставить("СтатусПисьма", Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее); 
	СтруктураПараметров.Вставить("ОтправительПредставление", УчетнаяЗапись.Наименование);
	СтруктураПараметров.Вставить("СписокПолучателейПисьма", АдресЭлектроннойПочты);
	СтруктураПараметров.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	
	ПолучателиПисьма 			= СтруктураПараметров.ПолучателиПисьма;
	НоваяСтрока		 			= ПолучателиПисьма.Добавить();
	НоваяСтрока.Адрес   		= АдресЭлектроннойПочты;
	НоваяСтрока.Представление   = НСтр("ru='Тех. подержка.'");
	
	СтруктуруОшибок = Новый Структура;
	ДокументОбъект  = git_Objcon.СоздатьДокумент("ЭлектронноеПисьмоИсходящее", СтруктураПараметров, СтруктуруОшибок);
	
	Если СтруктуруОшибок.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru='Во время создания документа ЭлектронноеПисьмоИсходящее произошли ошибки заполнения.'");
		Для Каждого ОшибкаИзСтруктуры Из СтруктуруОшибок Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + ОшибкаИзСтруктуры.Значение;
		КонецЦикла;
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		ТекстСообщения = НСтр("ru='Не удалось создать документ ЭлектронноеПисьмоИсходящее.'");
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось провести документ ЭлектронноеПисьмоИсходящее.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ЗафиксироватьОшибкуВЖР(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЗаполненияПредопределенныхРеквизитов(Отказ,СинхронизацияПоступления = ЛОЖЬ) 

	АдресЭлектроннойПочтыОтделаПоддержки = ктс_ПредопределенныеЗначенияПовтИсп.АдресЭлектроннойПочтыОтделаПоддержки();
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочтыОтделаПоддержки) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - АдресЭлектроннойПочтыОтделаПоддержки.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;  	
	
	ИмяПользователя = ктс_ПредопределенныеЗначенияПовтИсп.ИмяПользователяБух();   	
	Если ЗначениеЗаполнено(ИмяПользователя) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - ИмяПользователяБух.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;
	              	
	ПарольПользователяБух = ктс_ПредопределенныеЗначенияПовтИсп.ПарольПользователяБух();   	
	Если ЗначениеЗаполнено(ПарольПользователяБух) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - ПарольПользователяБух.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;
	
	МестоположениеWSDL = ктс_ПредопределенныеЗначенияПовтИсп.МестоположениеWSDLДляСинхронизации();   	
	Если ЗначениеЗаполнено(МестоположениеWSDL) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - МестоположениеWSDLДляСинхронизации.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;
	
	Если СинхронизацияПоступления = ЛОЖЬ Тогда	
		Возврат;   
	КонецЕсли;
	
	ДатаНачалаСинхронизации = ктс_ПредопределенныеЗначенияПовтИсп.ДатаНачалаСинхронизации();
	Если ЗначениеЗаполнено(ДатаНачалаСинхронизации) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - ДатаНачалаСинхронизации.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;

	СвойствоРеквизитВыписатьНа = ктс_ПредопределенныеЗначенияПовтИсп.РеквизитЗаказаПоставщикаДокументыВыписаныНа();
	Если ЗначениеЗаполнено(СвойствоРеквизитВыписатьНа) = ЛОЖЬ Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Незаполнено значение предопределенного значения в справочнику константи - СвойствоРеквизитВыписатьНа.'");
		ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке);		
	КонецЕсли;

КонецПроцедуры

Функция ЗафиксироватьОшибкуВЖР(СообщениеОбОшибке)  
	ЗаписьЖурналаРегистрации("ru = 'БухгалтерияВыгрузкаИзУT'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);  

КонецФункции // ЗафиксироватьОшибкуВЖР()
									
#КонецОбласти

Функция	ПроанализироватьНаОшибки(ОтветПрокси,ИмяВыгрузки) 	
	
	Если ТипЗнч(ОтветПрокси)<> Тип("ОбъектXDTO") Тогда 
		СообщитьОбОшибке = НСтр("ru='Произошла ошибка %1 из УТ в базу Бухгалтерия для Украины.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ИмяВыгрузки);
		ОтправитьСообщениеПоПочте(СообщитьОбОшибке);
		Возврат Ложь;
	КонецЕсли;    	

	Если ОтветПрокси.Code <> 200 Тогда  
		ErrorMessage 		= ОтветПрокси.ErrorMessage;
		СообщитьОбОшибке 	= НСтр("ru='Произошла ошибка %2 из УТ. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());		
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ErrorMessage,ИмяВыгрузки);
		ОтправитьСообщениеПоПочте(СообщитьОбОшибке);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции//ПроанализироватьНаОшибки(ОтветПрокси,ИмяВыгрузки)

Функция	ПроанализироватьНаОшибкиДляПользователя(ОтветПрокси,ИмяВыгрузки) 	
	
	Если ТипЗнч(ОтветПрокси)<> Тип("ОбъектXDTO") Тогда 
		СообщитьОбОшибке = НСтр("ru='Произошла ошибка %1 из УТ в базу Бухгалтерия для Украины.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ИмяВыгрузки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);     
		Возврат Ложь;
	КонецЕсли;    	
	
	Если ОтветПрокси.Code <> 200 Тогда  
		ErrorMessage 		= ОтветПрокси.ErrorMessage;
		СообщитьОбОшибке 	= НСтр("ru='Произошла ошибка %2 из УТ. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());		
		СообщитьОбОшибке	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщитьОбОшибке, ErrorMessage,ИмяВыгрузки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщитьОбОшибке);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции//ПроанализироватьНаОшибкиДляПользователя(ОтветПрокси,ИмяВыгрузки)

#Область РаботаСProductList
Функция ПолучитьРезультатЗапросаВыгрузитьНоменклатуруСОчереди()
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗСписокНоменклатурыСОчереди();	
	Возврат Запрос.Выполнить(); 
КонецФункции // ПолучитьРезультатЗапросаВыгрузитьНоменклатуруСОчереди()

Функция ПолучитьМассивСпискаНоменклатуры(Прокси, РезультатЗапроса)

	Выборка 	= РезультатЗапроса.Выбрать();
	ProductList = СоздатьФабрикуXDTOПоИмени(Прокси,"ProductList");
	
	Пока Выборка.Следующий() Цикл 
		
		Product = СоздатьФабрикуXDTOПоИмени(Прокси,"Product");
		
		СпрНоменклатура = Выборка.Ссылка;
		
		Product.UID 		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Product.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор()); 
		Product.Group		= СпрНоменклатура.ЭтоГруппа;
		ЗаполнитьЗначенияСвойств(Product,Выборка,,"TypeProduct,");	
		
		Если СпрНоменклатура.ЭтоГруппа = ЛОЖЬ Тогда
		   	TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
			TypeProduct.UID 		= Строка(Выборка.TypeProduct.УникальныйИдентификатор()); 
			TypeProduct.Name 		= Выборка.TypeProductName;
			TypeProduct.Group 		= Выборка.TypeProduct.ЭтоГруппа;
			TypeProduct.Owner_UID 	= Строка(Выборка.TypeProductOwner.УникальныйИдентификатор());			
			Product.TypeProduct = TypeProduct;  
		Иначе
			TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
			УИДНул					= "00000000-0000-0000-0000-000000000000";
			TypeProduct.UID 		= УИДНул; 
			TypeProduct.Name 		= "";
			TypeProduct.Group 		= ЛОЖЬ;
			TypeProduct.Owner_UID 	= УИДНул;			
			Product.TypeProduct = TypeProduct;    			
		КонецЕсли; 
		
		ProductList.Products.Добавить(Product); 	
	КонецЦикла; 
	
	Возврат ProductList;
КонецФункции // ПолучитьМассивСпискаНоменклатуры()

#КонецОбласти

#Область РаботаСTypeProductList

Функция ПолучитьРезультатЗапросаВыгрузитьВидНоменклатурыСОчереди()
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗСписокВидаНоменклатурыСОчереди();	
	Возврат Запрос.Выполнить();   
КонецФункции // ПолучитьРезультатЗапросаВыгрузитьВидНоменклатурыСОчереди()

Функция ПолучитьМассивВидаНоменклатуры(Прокси, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	TypeProductList = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProductList");
	
	Пока Выборка.Следующий() Цикл 
		
		TypeProduct = СоздатьФабрикуXDTOПоИмени(Прокси,"TypeProduct");
		TypeProduct.UID  		= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		TypeProduct.Name 		= Выборка.Name; 
		TypeProduct.Group 		= Выборка.ЭтоГруппа;
		TypeProduct.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор());			
		
		TypeProductList.TypeProduct.Добавить(TypeProduct); 	
	КонецЦикла; 
	
	Возврат  TypeProductList;
КонецФункции // ПолучитьМассивВидаНоменклатуры()
	
#КонецОбласти

#Область РаботаСPartnersList

Функция ПолучитьРезультатЗапросаВыгрузитьПартнеровСОчереди()
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗСписоеПартнеровУТСОчереди();	
	Возврат Запрос.Выполнить(); 
КонецФункции // ПолучитьРезультатЗапросаВыгрузитьПартнеровСОчереди()

Функция ПолучитьМассивПартнеров(Прокси,РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();  	
	PartnersList = СоздатьФабрикуXDTOПоИмени(Прокси,"PartnersList");
	
	Пока Выборка.Следующий() Цикл   
		Partners = СоздатьФабрикуXDTOПоИмени(Прокси,"Partners");
		Partners.UID  = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Partners.Name 		= Выборка.Name; 
		Partners.Code 		= Выборка.Code;
		Partners.Owner_UID 	= Строка(Выборка.Owner.УникальныйИдентификатор());			
		
		PartnersList.Partners.Добавить(Partners); 	
	КонецЦикла; 
	
	Возврат PartnersList;
КонецФункции // ПолучитьМассивПартнеров(Прокси,РЗ_Партнеры)()
	
#КонецОбласти

#Область РаботаСReceiptOfGoodsList

Функция ПолучитьРезультатЗапросаВыгрузитьПТиУСОчереди()
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТЗСписокДокПоступленияПоОчереди();	
	Запрос.УстановитьПараметр("ВалютаУпрУч",Константы.ВалютаУправленческогоУчета.Получить()); 
	Запрос.УстановитьПараметр("ВалютаРеглУч",Константы.ВалютаРегламентированногоУчета.Получить()); 
	Запрос.УстановитьПараметр("ДатаНачалаСинхронизации",ктс_ПредопределенныеЗначенияПовтИсп.ДатаНачалаСинхронизации());
	Запрос.УстановитьПараметр("СвойствоРеквизитВыписатьНа",ктс_ПредопределенныеЗначенияПовтИсп.РеквизитЗаказаПоставщикаДокументыВыписаныНа());
	Возврат Запрос.Выполнить(); 
КонецФункции // ПолучитьРезультатЗапросаВыгрузитьПТиУСОчереди()

Функция ПолучитьМассивДокументовПТиУ(Прокси,РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	
	ReceiptOfGoodsList = СоздатьФабрикуXDTOПоИмени(Прокси,"ReceiptOfGoodsList");
	Пока Выборка.Следующий() Цикл   
		ReceiptOfGoods = СоздатьФабрикуXDTOПоИмени(Прокси,"ReceiptOfGoods");
		ЗаполнитьЗначенияСвойств(ReceiptOfGoods,Выборка);
		ReceiptOfGoods.GUID_Product  = Строка(Выборка.Product.УникальныйИдентификатор());
		ReceiptOfGoods.GUID_Parthers  = Строка(Выборка.Партнер.УникальныйИдентификатор());

		CheckTheDocument 			= СоздатьФабрикуXDTOПоИмени(Прокси,"CheckTheDocument");
		CheckTheDocument.GUID  	= Строка(Выборка.ВыписатьНа.УникальныйИдентификатор());
		CheckTheDocument.Name 	= Выборка.ВыписатьНа.Наименование; 
		ReceiptOfGoods.CheckTheDocument  = CheckTheDocument;

		
		DocumentReceiptOfGoods 			= СоздатьФабрикуXDTOПоИмени(Прокси,"DocumentReceiptOfGoods");
		DocumentReceiptOfGoods.GUID  	= Строка(Выборка.Ссылка.УникальныйИдентификатор());
		DocumentReceiptOfGoods.Name 	= Выборка.Представление; 
		ReceiptOfGoods.DocumentReceiptOfGoods  = DocumentReceiptOfGoods;

		ReceiptOfGoodsList.ReceiptOfGoods.Добавить(ReceiptOfGoods); 	
	КонецЦикла;       	
	
	Возврат  ReceiptOfGoodsList;
КонецФункции // ПолучитьМассивДокументовПТиУ()


#КонецОбласти



Процедура ОчиститьРегистрБух_ОчередьМониторинга(ТЗ_Записей)

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка 		  = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Бух_ОчередьМониторинга");
		ЭлементБлокировки.ИсточникДанных = ТЗ_Записей;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("МетаданноеМониторинга", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;		

		Попытка
			Блокировка.Заблокировать();
		Исключение
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		Для каждого Отбор Из ТЗ_Записей Цикл  
			НаборЗаписей = РегистрыСведений.Бух_ОчередьМониторинга.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.МетаданноеМониторинга.Установить(Отбор.Ссылка);
			
			Попытка
				НаборЗаписей.Записать();    					
			Исключение
				ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки; 		
		КонецЦикла;
		
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ОчиститьВсеЗаписиРегистрБух_ОчередьМониторинга()

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		НаборЗаписей = РегистрыСведений.Бух_ОчередьМониторинга.СоздатьНаборЗаписей(); 		
			
		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ЗафиксироватьОшибкуВЖР(ОписаниеОшибки()); 
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки; 		
		
	ЗафиксироватьТранзакцию();
КонецПроцедуры

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.12";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Бухгалтерия выгрузка из УT");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Бухгалтерия выгрузка из УT [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "СинхронизацияБухгалтерииСУТ11 [" + Версия + "]", "СинхронизацияБухгалтерииСУТ11()", "ВызовСерверногоМетода");
    ДобавитьКоманду(ТаблицаКоманд, "БухгалтерияПодписка [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "БухгалтерияПодписка");

    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
