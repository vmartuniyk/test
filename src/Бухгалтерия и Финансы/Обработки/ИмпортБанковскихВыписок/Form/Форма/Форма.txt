////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	Элементы.КодировкаDBF.СписокВыбора.Добавить("ANSI");
    Элементы.КодировкаDBF.СписокВыбора.Добавить("OEM");
    КодировкаDBF = "OEM";	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	УдалитьДокументНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр    			      = НСтр("ru='Файлы выгрузки (*.dbf)|*.dbf'");
	ДиалогВыбораФайла.Заголовок 			      = НСтр("ru='Выберите файл для загрузки данных в клиента банка'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла 		      = ФайлЗагрузки ;	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлЗагрузки 		 = ДиалогВыбораФайла.ПолноеИмяФайла;
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлЗагрузки));
	КонецЕсли;		
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ПлатежныеДокументы]

&НаКлиенте
Процедура ПлатежныеДокументыСчетНаОплатуКлиентуПриИзменении(Элемент)                              
	ТекущийЭлемент.ТекущиеДанные.Контрагент = ПолучитьКонтрагента(ТекущийЭлемент.ТекущиеДанные.СчетНаОплатуКлиенту);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ИсходящиеПлатежныеДокументы]

&НаКлиенте
Процедура ИсходящиеПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеПлатежныеДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ПлатежныеДокументыЭквайрингВх]

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
//	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВхПередУдалением(Элемент, Отказ)
//	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ПлатежныеДокументыЭквайрингВозвраты]

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВозвратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВозвратыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [Неопределенно]

&НаКлиенте
Процедура НеопределенноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеопределенноПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [Информация]

&НаКлиенте
Процедура ИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Загрузить(Команда)
	Информация.Очистить();
	Если ПустаяСтрока(ФайлЗагрузки) Тогда 
	  	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполненный файл загрузки'")
					,
					,
        			"ФайлЗагрузки");
		 Возврат;
	КонецЕсли;
	ЗагрузитьDBFФайл();
	ОбновитьЗаголовкиВкладок();	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьВыпискиСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭквайринг(Команда)
	
	ОновитьВыпискиЭквайрингу();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыОплаты(Команда)
	
	Информация.Очистить();
	ОбновитьВыпискиСчетов();
	СформироватьДокументыОплатыНаСервере();
	
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьДокументыЭквайрингу(Команда)
	
	Информация.Очистить();
	
	Если ПроверкаЗаполнения() Тогда
		СформироватьДокументыЭквайрингуНаСервере();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьЗаголовкиВкладок()
	
	Элементы.ГруппаВыписки.Заголовок  			= "Выписки"
												+" ("+СокрЛП(ПлатежныеДокументы.Количество()
												+ ИсходящиеПлатежныеДокументы.Количество())+")";
	
	Элементы.ГруппаВходящиеВыписки.Заголовок	= "Входящие" 
												+" ("+СокрЛП(ПлатежныеДокументы.Количество())+")";
												
	Элементы.ГруппаИсходящиеВыписки.Заголовок	= "Исходящие" 
												+" ("+СокрЛП(ИсходящиеПлатежныеДокументы.Количество())+")";
												
	Элементы.ГруппаЭквайринг.Заголовок  		= "ЭКВАЙРИНГ (COMPAS)" 
												+" ("+СокрЛП(ПлатежныеДокументыЭквайрингВх.Количество()
												+ ПлатежныеДокументыЭквайрингВозвраты.Количество())+")";
												
 	Элементы.ГруппаОплаты.Заголовок				= "Оплатчено" 
												+" ("+СокрЛП(ПлатежныеДокументыЭквайрингВх.Количество())+")";
												
	Элементы.ГруппаВозвраты.Заголовок			= "Оплата с возвратом" 
												+" ("+СокрЛП(ПлатежныеДокументыЭквайрингВозвраты.Количество())+")";
												
	Элементы.ГруппаНеопределено.Заголовок		= "Неопределенно"
												+" ("+СокрЛП(Неопределенно.Количество())+")";

КонецПроцедуры


&НаСервере
Процедура ЗагрузитьDBFФайл()	
	
	ИдентификаторПользователяИБ = Строка(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ);
	
	Каталог = КаталогВременныхФайлов();
	ПутьФайла = Каталог + "\"+Прав(ИдентификаторПользователяИБ,8)+".dbf";
	Если НЕ ФайлЗагрузки = ПутьФайла Тогда 
		ФайлЗагрузки = ПутьФайла;
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ДанныеХранилища.Записать(ФайлЗагрузки);
	КонецЕсли;
    

	БазаДанных.Очистить();
	ПлатежныеДокументы.Очистить();
	ПлатежныеДокументыЭквайрингВх.Очистить();
	ИсходящиеПлатежныеДокументы.Очистить();
	Неопределенно.Очистить();
	
	База = Новый XBase;
	База.Кодировка = ?(КодировкаDBF = "ANSI",КодировкаXBase.ANSI,КодировкаXBase.OEM);
	База.ОткрытьФайл(ФайлЗагрузки,,Истина);
	
	База.Первая();
	Пока НЕ База.ВКонце() Цикл
		СтрокаБазы = БазаДанных.Добавить();
		СтрокаБазы.ДатаВыписки 	= Дата(Лев(База.TIME,4), Сред(База.TIME,5,2),Сред(База.TIME,7,2),Сред(База.TIME,10,2),Сред(База.TIME,13,2),Сред(База.TIME,16,2));
		СтрокаБазы.Сумма            = База.SUMMA;
		СтрокаБазы.СчетПлательщика	= СокрЛП(База.COUNT_A);
		СтрокаБазы.СчетОплаты		= СокрЛП(База.COUNT_B);

		СтрокаБазы.Плательщик      = СокрЛП(База.NAME_A);
		СтрокаБазы.Получатель      = СокрЛП(База.NAME_B);

		СтрокаБазы.Назначение      = СокрЛП(База.N_P);
		База.Следующая();
	КонецЦикла;
	
	База.ЗакрытьФайл();	
	ОпределитьДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДокументы()
	
	RegExpObjectNo 		= СоздатьRegExpObject("[No][ ]*[0-9]*[ ]");
	RegExpObjectНомер 		= СоздатьRegExpObject("[№][ ]*[0-9]*[ ]");
	RegExpObjectData    = СоздатьRegExpObjectData();
	
	База = БазаДанных.Выгрузить();
	 
	Запрос = Новый Запрос(ПолучитьТекстЗапросаОпределитьДокументы());
		 
	Запрос.УстановитьПараметр("База",База);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	Для Каждого Элемент Из ТаблицаРезультат Цикл 
		 
		Если Элемент.ВидДокумента = "Экв" Тогда 
			
			НаличиеВозврата = ?(Найти(Элемент.Назначение, "Возвр./Ком.банка") = 0, Ложь, Истина);

			Если НаличиеВозврата Тогда
				НоваяСтрока = ПлатежныеДокументыЭквайрингВозвраты.Добавить();
			Иначе
				НоваяСтрока = ПлатежныеДокументыЭквайрингВх.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Организация			= Элемент.Организация;
			НоваяСтрока.СчетОрганизации		= Элемент.СчетОрганизации;
			
			НоваяСтрока.Контрагент			= Элемент.Контрагент;
			НоваяСтрока.СчетКонтрагента		= Элемент.СчетКонтрагента;
	 
		ИначеЕсли Элемент.ВидДокумента = "Вх" Тогда 
			
		 	НоваяСтрока 					= ПлатежныеДокументы.Добавить();
			НомерСчета 						= ПолучитьНомерСчетаИзСтроки(RegExpObjectНомер, Элемент.Назначение);

			НомерСчета						= СокрЛП(СтрЗаменить(НомерСчета, "№",""));
			НомерСчета						= СокрЛП(СтрЗаменить(НомерСчета, "o",""));
			
			Если НомерСчета = "" Тогда  
				НомерСчета					= ПолучитьНомерСчетаИзСтроки(RegExpObjectNo, Элемент.Назначение);
				НомерСчета					= СокрЛП(СтрЗаменить(НомерСчета, "№",""));
				НомерСчета					= СокрЛП(СтрЗаменить(НомерСчета, "o",""));
			КонецЕсли;
			
			Если НомерСчета = "" Тогда 
				НомерСчета = " ";
			КонецЕсли;
			ДатаСчета						= ПолучитьДатуСчетаИзСтроки(RegExpObjectData, Элемент.Назначение);
			
			НоваяСтрока.Организация			= Элемент.Организация;
			НоваяСтрока.СчетОрганизации 	= Элемент.СчетОрганизации;
			НоваяСтрока.НомерБСчетаОрганизации 	= СокрЛП(Элемент.СчетОрганизации.НомерСчета);
			
			ДанныеСчета						= ДанныеСчетНаОплатуКлиенту(НомерСчета, ДатаСчета, Элемент.Организация, СокрЛП(Элемент.СчетОрганизации.НомерСчета),  Элемент.Сумма);
			НоваяСтрока.НомерБСчетаДокумента 	= СокрЛП(ДанныеСчета.СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета);

			Если СокрЛП(ДанныеСчета.СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета)<>СокрЛП(Элемент.СчетОрганизации.НомерСчета) Тогда 
				НоваяСтрока.Отметка			= Ложь;
				НовоеСообщение			 	= Информация.Добавить();
				НовоеСообщение.Сообщение 	= "Номера банковских счетов не совпадают";
				НовоеСообщение.Документ	 	= Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка();
				НовоеСообщение.Счет			= ДанныеСчета.СчетНаОплатуКлиенту;
				НовоеСообщение.Контрагент	= ДанныеСчета.Контрагент;
				НовоеСообщение.Сумма		= Элемент.Сумма;
			КонецЕсли;
			
			НоваяСтрока.СчетНаОплатуКлиенту	= ДанныеСчета.СчетНаОплатуКлиенту;
			
			НоваяСтрока.Контрагент			= ДанныеСчета.Контрагент;
				
		ИначеЕсли Элемент.ВидДокумента = "Исх" Тогда
			
			НоваяСтрока 					= ИсходящиеПлатежныеДокументы.Добавить();
			
			НоваяСтрока.Организация			= Элемент.Организация;
			НоваяСтрока.СчетОрганизации		= Элемент.СчетОрганизации;
			НоваяСтрока.Контрагент			= Элемент.Контрагент;
			НоваяСтрока.СчетКонтрагента     = Элемент.СчетКонтрагента;
			
		Иначе 
			
			НоваяСтрока 					= Неопределенно.Добавить();
			НоваяСтрока.Контрагент			= Элемент.Контрагент;
			НоваяСтрока.СчетКонтрагента		= Элемент.СчетКонтрагента;

		КонецЕсли;
				
			НоваяСтрока.ДатаВыписки			= Элемент.ДатаВыписки;
			НоваяСтрока.Сумма				= Элемент.Сумма;
			НоваяСтрока.Назначение			= Элемент.Назначение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьВыпискуПоРасчетномуСчету(СсылкаНаОбьект, Документ);
	
		ДокументВыписка = Документы.ВыпискаПоРасчетномуСчету.СоздатьДокумент();
		ДокументВыписка.Заполнить(СсылкаНаОбьект);
		
		ДокументВыписка.Дата					= СсылкаНаОбьект.Дата;
		ДокументВыписка.Организация				= ?(ЗначениеЗаполнено(ДокументВыписка.Организация)		,ДокументВыписка.Организация	,ДоговорЭквайрингу.Организация);
		ДокументВыписка.БанковскийСчет			= ?(ЗначениеЗаполнено(ДокументВыписка.БанковскийСчет)	,ДокументВыписка.БанковскийСчет	,ДоговорЭквайрингу.БанковскийСчет);
		
		ДокументВыписка.СуммаПоступленияВсего 	= Документ.Сумма;
		ДокументВыписка.ВходящиеПлатежи.Очистить();
		
		НоваяСтрока = ДокументВыписка.ВходящиеПлатежи.Добавить(); 
		
		НоваяСтрока.ПлатежныйДокумент 	= СсылкаНаОбьект;
		НоваяСтрока.Сумма				= Документ.Сумма;

		Попытка
			
			ДокументВыписка.Записать(РежимЗаписиДокумента.Проведение);		
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Документ " + Строка(ДокументВыписка) + " успешно создан";
			НовоеСообщение.Документ	 	= ДокументВыписка.Ссылка;
			
		Исключение
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= ОписаниеОшибки();
			НовоеСообщение.Документ	 	= Документы.ВыпискаПоРасчетномуСчету.ПустаяСсылка();
			
		КонецПопытки;
		
		Если ТипЗнч(СсылкаНаОбьект) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда 
			
			НовоеСообщение.Контрагент	= Документ.Контрагент;		
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			
		КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыЭквайрингуНаСервере()
	
	Для Каждого Документ Из ПлатежныеДокументыЭквайрингВх Цикл 
		Если Документ.СчетОрганизации <>ДоговорЭквайрингу.БанковскийСчет Тогда 
			Продолжить;
		КонецЕсли;   
		Попытка
		КомБанк = ПолучитьЗначение("Ком.банка", Документ.Назначение);
		БонПок	= ПолучитьЗначение("Бон.пок.", Документ.Назначение);
		
		СуммаКомиссии			= КомБанк+БонПок;
		СуммаДокумента			= Документ.Сумма + СуммаКомиссии;
		НаличиеВозврата 		= ?(Найти(Документ.Назначение,"Возвр./Ком.банка")=0, Ложь, Истина);
		Документ.Выписка 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Ложь, Документ.Организация);
		Документ.Отметка		= ЗначениеЗаполнено(Документ.Выписка);
		
		Если Документ.Отметка Тогда 
			Документ.ДругиеВыписки = Ложь;
			Продолжить;
		КонецЕсли;

		ДругиеВыписки	 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Истина, Документ.Организация);
		Документ.ДругиеВыписки	= ЗначениеЗаполнено(ДругиеВыписки);
		
		Если Документ.ДругиеВыписки Тогда 
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Есть выписки с другими реквизитами";
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Счет			= Документ.СчетКонтрагента;
			Продолжить;
		КонецЕсли;
		
		Если НЕ НаличиеВозврата Тогда
		ДокументЭквайринга = Документы.ОтчетБанкаПоОперациямЭквайринга.СоздатьДокумент();
		ДокументЭквайринга.ДоговорЭквайринга	= ДоговорЭквайрингу;
		ДокументЭквайринга.Организация			= ДоговорЭквайрингу.Организация;
		ДокументЭквайринга.Подразделение		= Подразделение;
		ДокументЭквайринга.СтатьяРасходов		= СтатьяРасходов;
		ДокументЭквайринга.АналитикаРасходов	= АналитикаРасходов;
		ДокументЭквайринга.Валюта				= ДоговорЭквайрингу.БанковскийСчет.ВалютаДенежныхСредств;
        
		ДокументЭквайринга.СуммаДокумента		= Документ.Сумма;
		ДокументЭквайринга.СуммаПокупок			= Документ.Сумма + СуммаКомиссии;;
		ПодборВходящихПлатежей = Истина;
		
		 
		КоличествоТранзакций	= ПолучитьЗначение("Кол-во транз.", Документ.Назначение); 

		ТабПлатежиВх			= ПоискПлатежей(Документ.ДатаВыписки,КоличествоТранзакций, СуммаДокумента);

		Если ТабПлатежиВх.Количество()  = 0 Тогда 
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Нет платежных документов";
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Счет			= Документ.СчетКонтрагента;
			Продолжить;
		КонецЕсли;
		ДокументЭквайринга.Покупки.Загрузить(ТабПлатежиВх);
	
		ДокументЭквайринга.Дата					= Документ.ДатаВыписки;
        ДокументЭквайринга.СуммаКомиссии		= СуммаКомиссии;

		
		Попытка
			ДокументЭквайринга.Записать(РежимЗаписиДокумента.Проведение);
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Документ " + Строка(ДокументЭквайринга) + " успешно создан";
			НовоеСообщение.Документ	 	= ДокументЭквайринга.Ссылка;
			НовоеСообщение.Сумма		= ДокументЭквайринга.СуммаДокумента;
			
		Исключение
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= ОписаниеОшибки();
			НовоеСообщение.Сумма		= Документ.Сумма;
			Продолжить;
		КонецПопытки;
		
		СформироватьВыпискуПоРасчетномуСчету(ДокументЭквайринга.Ссылка, Документ);
		КонецЕсли;
	    Исключение КонецПопытки;
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Функция  ПроверкаЗаполнения() 
    Проверено = Истина;
	Если Не ЗначениеЗаполнено(ДоговорЭквайрингу) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполненый договор эквайрингу'"),,
        "ДоговорЭквайрингу");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполнена статья расходов'"),,
        "СтатьяРасходов");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаРасходов) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполнена аналитика расходов'"),,
        "АналитикаРасходов");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполнено подразделение'"),,
        "Подразделение");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Возврат Проверено;
	
КонецФункции

&НаСервере 
Процедура ОбновитьВыпискиСчетов()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(ПолучитьТекстЗапросаВыпискиСчетов());
	Запрос.УстановитьПараметр("ПлатежныеДокументы", ПлатежныеДокументы.Выгрузить());
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ПлатежныеДокументы.Очистить();
    ПлатежныеДокументы.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаСервере 
Процедура ОновитьВыпискиЭквайрингу()
	
	// По другому не получится только в цикле
	Для Каждого Документ Из ПлатежныеДокументыЭквайрингВх Цикл 
		КомБанк					= ПолучитьЗначение("Ком.банка", Документ.Назначение);
		БонПок					= ПолучитьЗначение("Бон.пок.", Документ.Назначение);
		
		СуммаКомиссии			= КомБанк+БонПок;
		СуммаДокумента			= Документ.Сумма + СуммаКомиссии;
		НаличиеВозврата 		= ?(Найти(Документ.Назначение,"Возвр./Ком.банка")=0, Ложь, Истина);
		Документ.Выписка 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Ложь, Документ.Организация);
		Документ.Отметка		= ЗначениеЗаполнено(Документ.Выписка);
		Если Документ.Отметка  Тогда 
			Документ.ДругиеВыписки = Ложь;
		Иначе 	
			ДругиеВыписки	 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Истина, Документ.Организация);
			Документ.ДругиеВыписки	= ЗначениеЗаполнено(ДругиеВыписки);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСчетНаОплатуКлиенту(НомерСчета, ДатаСчета,Организация, БанковскийСчет, СуммаДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	Условие =?(НомерСчета <> " "," ПОДСТРОКА(СчетНаОплатуКлиенту.Номер, &НачальнаяПозиция, &Длина) = &Номер "  ,  " СчетНаОплатуКлиенту.СуммаДокумента = &СуммаДокумента " );
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаСчетНаОплатуКлиенту();
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"%Условие%",Условие);
	
	Запрос.УстановитьПараметр("Дата"				,ДатаСчета);
	Запрос.УстановитьПараметр("Номер"				,СокрЛП(НомерСчета));
	Запрос.УстановитьПараметр("Организация"			,Организация);
	Запрос.УстановитьПараметр("НачальнаяПозиция"	,12-СтрДлина(НомерСчета));
	Запрос.УстановитьПараметр("Длина"				,СтрДлина(НомерСчета));
	Запрос.УстановитьПараметр("СуммаДокумента"      ,СуммаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	СтруктураДанных = Новый Структура;
	Если РезультатЗапроса.Следующий() Тогда 
		СтруктураДанных.Вставить("СчетНаОплатуКлиенту"	,РезультатЗапроса.СчетНаОплатуКлиенту);
		СтруктураДанных.Вставить("Контрагент"			,РезультатЗапроса.Контрагент);
		СтруктураДанных.Вставить("БанковскийСчет"		,РезультатЗапроса.БанковскийСчет);
	Иначе 
		СтруктураДанных.Вставить("СчетНаОплатуКлиенту"	,Документы.СчетНаОплатуКлиенту.ПустаяСсылка());
		СтруктураДанных.Вставить("Контрагент"			,Справочники.Контрагенты.ПустаяСсылка());
		СтруктураДанных.Вставить("БанковскийСчет"		,Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанных;
		
КонецФункции

&НаСервере
Функция ПолучитьНомерСчетаИзСтроки(RegExpObject, Назначение)

	Matches 		= RegExpObject.Execute(Назначение);
	ЧислоВхождений 	= Matches.Count();
	
	Если ЧислоВхождений > 0 Тогда
		Match = Matches.Item(0);
		Возврат Match.Value;
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьНомерСчетаИзСтроки()

&НаСервере
Функция ПолучитьДатуСчетаИзСтроки(RegExpObject, Назначение)

	Matches 		= RegExpObject.Execute(Назначение);
	ЧислоВхождений 	= Matches.Count();
	
	Если ЧислоВхождений > 0 Тогда
		Match = Matches.Item(0);
		Возврат ПолучитьДатуИзСтроки(СокрЛП(Match.Value));
	КонецЕсли;
	
	Возврат Дата("00010101");

КонецФункции // ПолучитьНомерСчетаИзСтроки()

&НаСервере
Функция ПолучитьДатуИзСтроки(СтрокаДата)
	
	ИндексДень 	= Найти(СтрокаДата, ".");
	День		= Лев(СтрокаДата, ИндексДень-1);
	СтрокаДата	= Прав(СтрокаДата, СтрДлина(СтрокаДата) - ИндексДень);
	
	ИндексМесяц = Найти(СтрокаДата, ".");
	Месяц		= Лев(СтрокаДата, ИндексМесяц-1);
	Год			= Прав(СтрокаДата, СтрДлина(СтрокаДата) - ИндексМесяц);
	
	Если ИндексДень = 0 И ИндексМесяц = 0 Тогда
		Возврат Дата("00010101");
	КонецЕсли;
	
	Возврат Дата(Год+Месяц+День);
	
КонецФункции


&НаСервере
Функция СоздатьRegExpObject(Параметры)
	
	RegExpObject 			= Новый COMОбъект("VBScript.RegExp");
	RegExpObject.IgnoreCase = Ложь;
	RegExpObject.Global		= Истина;
	RegExpObject.MultiLine	= Истина;
	RegExpObject.Pattern	= Параметры;	
	Возврат RegExpObject;

КонецФункции // СоздатьRegExpObject()


Функция СоздатьRegExpObjectData()
	
	RegExpObject 			= Новый COMОбъект("VBScript.RegExp");
	RegExpObject.IgnoreCase = Ложь;
	RegExpObject.Global		= Истина;
	RegExpObject.MultiLine	= Истина;
	RegExpObject.Pattern	= "[0-9][0-9][.][0-9][0-9][.][0-9][0-9][0-9][0-9]";
	
	Возврат RegExpObject;
	
КонецФункции

&НаСервере
Функция СформироватьДокументыОплатыНаСервере()
	
	ТаблицаДокументов = ПлатежныеДокументы.Выгрузить();
	Для Каждого Документ Из ТаблицаДокументов Цикл 
		
		Если СокрЛП(Документ.СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета)<>СокрЛП(Документ.СчетОрганизации.НомерСчета) Тогда 
			Документ.Отметка			= Ложь;
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Номера банковских счетов не совпадают";
			НовоеСообщение.Документ	 	= Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка();
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Сумма		= Документ.Сумма;
			Продолжить;
		КонецЕсли;
		
		Если Документ.Отметка = Истина  ИЛИ Документ.СчетНаОплатуКлиенту = Документы.СчетНаОплатуКлиенту.ПустаяСсылка()  Тогда
			Продолжить;
		КонецЕсли; 

		ДокументПоступление = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		ДокументПоступление.Заполнить(Документ.СчетНаОплатуКлиенту);
		
		ДокументПоступление.Дата                            = Документ.ДатаВыписки;
		ДокументПоступление.СуммаДокумента					= Документ.Сумма;
		ДокументПоступление.ДатаВходящегоДокумента			= Документ.ДатаВыписки;
		ДокументПоступление.НомерВходящегоДокумента			= 1;
		ДокументПоступление.Валюта                      	= Константы.ВалютаРегламентированногоУчета.Получить();
		ДокументПоступление.СтатьяДвиженияДенежныхСредств   = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("e66dc542-24c7-44e7-a936-cb69a292096a"));
		ДокументПоступление.Комментарий						= "Документ создан автоматически.";

		ДокументПоступление.РасшифровкаПлатежа.Очистить();
		НоваяСтрока = ДокументПоступление.РасшифровкаПлатежа.Добавить();
		
		НоваяСтрока.Партнер 				= Документ.Контрагент.Партнер;
		НоваяСтрока.ОснованиеПлатежа 		= Документ.СчетНаОплатуКлиенту;
		НоваяСтрока.Заказ					= Документ.СчетНаОплатуКлиенту.ДокументОснование;
		НоваяСтрока.Сумма					= Документ.Сумма;
		НоваяСтрока.ВалютаВзаиморасчетов	= Константы.ВалютаРегламентированногоУчета.Получить();
		НоваяСтрока.СуммаВзаиморасчетов		= Документ.Сумма;

		Попытка
		    ДокументПоступление.Записать(РежимЗаписиДокумента.Проведение);	
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Документ " + Строка(ДокументПоступление) + " успешно создан";
			НовоеСообщение.Документ	 	= ДокументПоступление.Ссылка;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			НовоеСообщение.Сумма		= Документ.Сумма;
			
		Исключение
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= ОписаниеОшибки();
			НовоеСообщение.Документ	 	= Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка();
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Сумма		= Документ.Сумма;
			
			Продолжить;
			
		КонецПопытки;
		
		СформироватьВыпискуПоРасчетномуСчету(ДокументПоступление.Ссылка, Документ);
		
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагента(СчетНаОплатуКлиенту)
	Возврат СчетНаОплатуКлиенту.Контрагент;
КонецФункции	

&НаСервере
Функция ПолучитьЗначение(НазваЭлемента, Назначение)
	
	Позиция = Найти(Назначение,НазваЭлемента);
	Если Позиция = 0 Тогда 
		Возврат 0;
	Иначе
		Длина = СтрДлина(НазваЭлемента);
		НачПозиция = Позиция+Длина; 
		ТекЭлемент = "";
		ЦелаяЧасть = "";
		Пока ТекЭлемент <>"." Цикл 
			ТекЭлемент = Сред(Назначение,НачПозиция,1);
			ЦелаяЧасть = ЦелаяЧасть+ ТекЭлемент;
			НачПозиция = НачПозиция+1;
		КонецЦикла;
		ТекстЧисла = СокрЛП(ЦелаяЧасть+Сред(Назначение,НачПозиция,2));
		Возврат Число(СтрЗаменить(ТекстЧисла, "шт.Во","")); 
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоискДокументаЭквайринга(СуммаДокумента, СуммаКомиссии,ДатаВыписки, НаличиеВозврата, ПроверкаВыписок,Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОтчетБанкаПоОперациямЭквайринга.Ссылка
		|ИЗ
		|	Документ.ОтчетБанкаПоОперациямЭквайринга КАК ОтчетБанкаПоОперациямЭквайринга
		|ГДЕ
		|	ОтчетБанкаПоОперациямЭквайринга.СуммаДокумента = &СуммаДокумента
		|	И ОтчетБанкаПоОперациямЭквайринга.ДоговорЭквайринга = &ДоговорЭквайринга
		|	И ОтчетБанкаПоОперациямЭквайринга.Организация = &Организация
		|	И ОтчетБанкаПоОперациямЭквайринга.Проведен";
		
	Если НЕ ПроверкаВыписок Тогда 
		ТекстЗапроса = ТекстЗапроса	
		+?(НаличиеВозврата, " ", " И ОтчетБанкаПоОперациямЭквайринга.СуммаКомиссии = &СуммаКомиссии")+
		"	
		|	И ОтчетБанкаПоОперациямЭквайринга.Дата <= &Дата
		|	И ОтчетБанкаПоОперациямЭквайринга.АналитикаРасходов = &АналитикаРасходов
		|	И ОтчетБанкаПоОперациямЭквайринга.СтатьяРасходов = &СтатьяРасходов
		|	И ОтчетБанкаПоОперациямЭквайринга.Подразделение = &Подразделение";	
	КонецЕсли;	
	Запрос.Текст	=	ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорЭквайринга"	,ДоговорЭквайрингу);	
	Запрос.УстановитьПараметр("СуммаДокумента"		,СуммаДокумента);
	Запрос.УстановитьПараметр("СуммаКомиссии"		,СуммаКомиссии);
	Запрос.УстановитьПараметр("Дата"				,ДатаВыписки);
	Запрос.УстановитьПараметр("АналитикаРасходов"	,АналитикаРасходов);
	Запрос.УстановитьПараметр("СтатьяРасходов"		,СтатьяРасходов);
	Запрос.УстановитьПараметр("Подразделение"		,Подразделение);
    Запрос.УстановитьПараметр("Организация"			,Организация);

	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ?(РезультатЗапроса.Следующий(), РезультатЗапроса.Ссылка, Документы.ОтчетБанкаПоОперациямЭквайринга.ПустаяСсылка());
	
КонецФункции


&НаСервере
Процедура УдалитьДокументНаСервере()
	
	Если ПустаяСтрока(ФайлЗагрузки) Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
	    УдалитьФайлы(ФайлЗагрузки);  
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция Рекурсия(М_Путь, К_Путь, Сумма, МассивОплат, Вложеность, КоличествоОплат) 
		
	Если М_Путь[Вложеность] = Неопределено Тогда
		М_Путь[Вложеность] = Вложеность;		
	КонецЕсли;
	
	Если Вложеность = К_Путь Тогда
		
		ПроверкаСуммы = 0;
		Для Каждого ЭлМассива Из М_Путь Цикл
			ПроверкаСуммы = ПроверкаСуммы + МассивОплат[ЭлМассива].Сумма;		
		КонецЦикла;
		
		Если ПроверкаСуммы > Сумма Тогда
			Возврат Истина;	
		КонецЕсли;
		
		Если ПроверкаСуммы < Сумма Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		Если ПроверкаСуммы = Сумма Тогда
			Возврат М_Путь;	
		КонецЕсли;

		
	КонецЕсли;
	
	Пока Вложеность <> К_Путь Цикл
		
		Результат = Рекурсия(М_Путь, К_Путь, Сумма, МассивОплат, Вложеность+1, КоличествоОплат);
		Если ТипЗнч(Результат) = Тип("Массив") Тогда Возврат М_Путь; КонецЕсли;
		
		Если Результат = Истина Тогда
			
			Если Вложеность = 0 Тогда
				
				ТИндекс = М_Путь[Вложеность];
				Если ТИндекс = КоличествоОплат Тогда
					Возврат ПустаяСтрока("");
				Иначе
					
					Если М_Путь[1]=КоличествоОплат-(К_Путь - 1) Тогда 
						
						М_Путь[0] = М_Путь[0] + 1; 
						
						Для Индекс = 1 По К_Путь Цикл 
							М_Путь[Индекс] = М_Путь[0] + Индекс;  
							Если М_Путь[0] + Индекс > КоличествоОплат Тогда
								Возврат ПустаяСтрока("");		
							КонецЕсли;
						КонецЦикла;	
					Иначе 
						ТИндекс = М_Путь[Вложеность+1];
						Если М_Путь[Вложеность+1] = КоличествоОплат Тогда
							Возврат Истина;
						КонецЕсли;
					
						М_Путь[Вложеность+1] = М_Путь[Вложеность+1]+1;
						Для Индекс = Вложеность+2 По К_Путь Цикл 
							М_Путь[Индекс] =  М_Путь[Индекс-1]+1;
						КонецЦикла;
						
				
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ТИндекс = М_Путь[Вложеность+1];
				Если ТИндекс = КоличествоОплат Тогда
					Возврат Истина;
				КонецЕсли;
				
				Если М_Путь[Вложеность+1]+1 <= КоличествоОплат-(К_Путь - Вложеность-1) Тогда
					М_Путь[Вложеность+1] = М_Путь[Вложеность+1]+1;
				Иначе 
					Возврат Истина;
				КонецЕсли;
					 

				Для Индекс = Вложеность+2 По К_Путь Цикл 
					М_Путь[Индекс] = М_Путь[Индекс-1]+1;
				КонецЦикла;
				
				
			КонецЕсли;	 
			
		КонецЕсли;
		
		Если Результат = Ложь Тогда
			Если Вложеность = 0 Тогда
				
				ТИндекс = М_Путь[Вложеность];
				Если ТИндекс = КоличествоОплат Тогда
					Возврат ПустаяСтрока("");
				Иначе
					М_Путь[Вложеность] = М_Путь[Вложеность] + 1;
					Для Индекс = 1 По К_Путь Цикл 
						М_Путь[Индекс] = М_Путь[Вложеность] + Индекс;
						Если М_Путь[Вложеность] + Индекс > КоличествоОплат Тогда
							Возврат ПустаяСтрока("");		
						КонецЕсли;
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;


КонецФункции

&НаСервере
Функция ПоискПлатежей(ДатаПлатежа, КоличествоТранзакций, СуммаДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаЭквайринговыхВыписок());
	Запрос.УстановитьПараметр("Организация"			, ДоговорЭквайрингу.Организация);
	Запрос.УстановитьПараметр("ДоговорЭквайринга"	, ДоговорЭквайрингу);
	Запрос.УстановитьПараметр("Валюта"				, ДоговорЭквайрингу.БанковскийСчет.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("ДатаПлатежа"			, ДатаПлатежа);
	Запрос.УстановитьПараметр("ДатаПлатежаМинимум"	, ДатаПлатежа - 24*60*60*3);
	Запрос.УстановитьПараметр("Сумма"				, СуммаДокумента);
	Результат = Запрос.Выполнить();
	
	МассивОплат = Результат.Выгрузить();

	Транзакции = Новый Массив(КоличествоТранзакций);
	Если МассивОплат.Количество()=0 Тогда 
		РезультатПриход = МассивОплат;
	Иначе  
		РезультатПриход = Рекурсия(Транзакции, КоличествоТранзакций-1, СуммаДокумента, МассивОплат, 0, МассивОплат.Количество()-1);
		Если РезультатПриход = ПустаяСтрока("") Или РезультатПриход =Ложь Тогда
			МассивОплат.Очистить();
			РезультатПриход = МассивОплат;
		КонецЕсли;
	КонецЕсли;
	
    Оплаты = МассивОплат.СкопироватьКолонки();
	
	Для Каждого Элемент Из РезультатПриход Цикл
		НоваяСтрока = Оплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивОплат[Элемент]);	
	КонецЦикла;		
	
	Возврат Оплаты;

	
КонецФункции


&НаСервере
Функция  ПолучитьТекстЗапросаОпределитьДокументы()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.НомерСчета,
		|	БанковскиеСчетаОрганизаций.Владелец КАК Плательщик,
		|	БанковскиеСчетаОрганизаций.Ссылка
		|ПОМЕСТИТЬ СчетаОрганизации
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	База.ДатаВыписки,
		|	База.Сумма,
		|	База.СчетОплаты,
		|	База.СчетПлательщика,
		|	База.Назначение,
		|	База.Плательщик,
		|	База.Получатель
		|ПОМЕСТИТЬ КещБаза
		|ИЗ
		|	&База КАК База
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КещБаза.ДатаВыписки,
		|	КещБаза.Сумма,
		|	СчетаОрганизации.Ссылка КАК СчетОрганизации,
		|	КещБаза.СчетПлательщика КАК СчетКонтрагента,
		|	КещБаза.Назначение,
		|	КещБаза.Плательщик КАК Контрагент,
		|	СчетаОрганизации.Плательщик КАК Организация,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СчетаОрганизации.Плательщик, 0) = 0
		|			ТОГДА """"""""
		|		ИНАЧЕ ""Экв""
		|	КОНЕЦ КАК ВидДокумента,
		|	КещБаза.Получатель
		|ИЗ
		|	КещБаза КАК КещБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаОрганизации КАК СчетаОрганизации
		|		ПО КещБаза.СчетОплаты = СчетаОрганизации.НомерСчета
		|ГДЕ
		|	ПОДСТРОКА(КещБаза.Назначение, 1, 4) = ""cmps""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КещБаза.ДатаВыписки,
		|	КещБаза.Сумма,
		|	СчетаОрганизации.Ссылка,
		|	КещБаза.СчетПлательщика,
		|	КещБаза.Назначение,
		|	КещБаза.Плательщик,
		|	СчетаОрганизации.Плательщик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СчетаОрганизации.Плательщик, 0) = 0
		|			ТОГДА """"
		|		КОГДА КещБаза.Сумма > 0
		|			ТОГДА ""Вх""
		|	КОНЕЦ,
		|	КещБаза.Получатель
		|ИЗ
		|	КещБаза КАК КещБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаОрганизации КАК СчетаОрганизации
		|		ПО КещБаза.СчетОплаты = СчетаОрганизации.НомерСчета
		|ГДЕ
		|	НЕ ПОДСТРОКА(КещБаза.Назначение, 1, 4) = ""cmps""
		|	И КещБаза.Сумма > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КещБаза.ДатаВыписки,
		|	КещБаза.Сумма,
		|	СчетаОрганизации.Ссылка,
		|	КещБаза.СчетОплаты,
		|	КещБаза.Назначение,
		|	КещБаза.Получатель,
		|	СчетаОрганизации.Плательщик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СчетаОрганизации.Плательщик, 0) = 0
		|			ТОГДА """"
		|		КОГДА КещБаза.Сумма < 0
		|			ТОГДА ""Исх""
		|	КОНЕЦ,
		|	КещБаза.Получатель
		|ИЗ
		|	КещБаза КАК КещБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаОрганизации КАК СчетаОрганизации
		|		ПО КещБаза.СчетПлательщика = СчетаОрганизации.НомерСчета
		|ГДЕ
		|	НЕ ПОДСТРОКА(КещБаза.Назначение, 1, 4) = ""cmps""
		|	И КещБаза.Сумма < 0";

	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаЭквайринговыхВыписок()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасчетыПоЭквайрингуОстатки.Валюта КАК Валюта,
		|	РасчетыПоЭквайрингуОстатки.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	РасчетыПоЭквайрингуОстатки.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|	РасчетыПоЭквайрингуОстатки.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	РасчетыПоЭквайрингуОстатки.ДатаПлатежа КАК ДатаПлатежа,
		|	РасчетыПоЭквайрингуОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоЭквайрингу.Остатки(
		|			&ДатаПлатежа,
		|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте)
		|				И Организация = &Организация
		|				И Валюта = &Валюта
		|				И ЭквайринговыйТерминал В
		|					(ВЫБРАТЬ
		|						ЭквайринговыеТерминалы.Ссылка
		|					ИЗ
		|						Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|					ГДЕ
		|						ЭквайринговыеТерминалы.Владелец = &ДоговорЭквайринга)) КАК РасчетыПоЭквайрингуОстатки
		|ГДЕ
		|	РасчетыПоЭквайрингуОстатки.СуммаОстаток <= &Сумма
		|	И РасчетыПоЭквайрингуОстатки.ДатаПлатежа >= &ДатаПлатежаМинимум
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сумма УБЫВ";
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСчетНаОплатуКлиенту()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетНаОплатуКлиенту.Ссылка КАК СчетНаОплатуКлиенту,
		|	СчетНаОплатуКлиенту.Контрагент КАК Контрагент,
		|	СчетНаОплатуКлиенту.БанковскийСчет КАК БанковскийСчет
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.Дата, ДЕНЬ) = &Дата
		|	И СчетНаОплатуКлиенту.Проведен
		|	И %Условие% 
		|	И СчетНаОплатуКлиенту.Организация = &Организация ";

	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаВыпискиСчетов()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПлатежныеДокументы.ДатаВыписки,
		|	ПлатежныеДокументы.Сумма,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Назначение,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.СчетНаОплатуКлиенту,
		|	ПлатежныеДокументы.СчетОрганизации,
		|	ПлатежныеДокументы.Отметка,
		|	ПлатежныеДокументы.НомерБСчетаОрганизации,
		|	ПлатежныеДокументы.НомерБСчетаДокумента
		|ПОМЕСТИТЬ ПлатежныеДокументы
		|ИЗ
		|	&ПлатежныеДокументы КАК ПлатежныеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлатежныеДокументы.СчетНаОплатуКлиенту
		|ПОМЕСТИТЬ ПоступлениеБДС
		|ИЗ
		|	ПлатежныеДокументы КАК ПлатежныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
		|		ПО (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа = ПлатежныеДокументы.СчетНаОплатуКлиенту)
		|			И (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата = ПлатежныеДокументы.ДатаВыписки)
		|			И (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма = ПлатежныеДокументы.Сумма)
		|ГДЕ
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлатежныеДокументы.ДатаВыписки,
		|	ПлатежныеДокументы.Сумма,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Назначение,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.СчетНаОплатуКлиенту,
		|	ПлатежныеДокументы.СчетОрганизации,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоступлениеБДС.СчетНаОплатуКлиенту, 0) = 0
		|				ИЛИ ПлатежныеДокументы.НомерБСчетаОрганизации <> ПлатежныеДокументы.НомерБСчетаДокумента
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отметка
		|ИЗ
		|	ПлатежныеДокументы КАК ПлатежныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступлениеБДС КАК ПоступлениеБДС
		|		ПО ПлатежныеДокументы.СчетНаОплатуКлиенту = ПоступлениеБДС.СчетНаОплатуКлиенту";
	Возврат ТекстЗапроса;	
КонецФункции





