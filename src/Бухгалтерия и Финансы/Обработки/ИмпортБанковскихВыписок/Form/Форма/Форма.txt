////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Перем юТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТест) Экспорт 

	юТест = ЮнитТест;
	
	Результат = юТест.Новый_НаборТестов();
	
	юТест.НаборТестов_Добавить(Результат,"Тест_ПроверкаОткрытияФормы");
	юТест.НаборТестов_Добавить(Результат,"Тест_ПроверкаКАвторизации");
	юТест.НаборТестов_Добавить(Результат,"Тест_ПроверкаЗагрузкиВыписокЗа1День");
	юТест.НаборТестов_Добавить(Результат,"Тест_ПроверкаЗагрузкиВыписокЗаПериод");
	
	Возврат Результат;	

КонецФункции // ПолучитьСисокТестов()


&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	Элементы.КодировкаDBF.СписокВыбора.Добавить("ANSI");
    Элементы.КодировкаDBF.СписокВыбора.Добавить("OEM");
    КодировкаDBF = "OEM";
	ИнтернетАдресДляСоединения = "cb.privatbank.ua";
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	    
	НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	КонецПериода = КонецДня(ТекущаяДатаСеанса());

КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()

	УдалитьДокументНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр    			      = НСтр("ru='Файлы выгрузки (*.dbf)|*.dbf'");
	ДиалогВыбораФайла.Заголовок 			      = НСтр("ru='Выберите файл для загрузки данных в клиента банка'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла 		      = ФайлЗагрузки ;	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлЗагрузки 		 = ДиалогВыбораФайла.ПолноеИмяФайла;
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлЗагрузки));
	КонецЕсли;		
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ПлатежныеДокументы]

&НаКлиенте
Процедура ПлатежныеДокументыСчетНаОплатуКлиентуПриИзменении(Элемент)                              
	ТекущийЭлемент.ТекущиеДанные.Контрагент = ПолучитьКонтрагента(ТекущийЭлемент.ТекущиеДанные.СчетНаОплатуКлиенту);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ИсходящиеПлатежныеДокументы]

&НаКлиенте
Процедура ИсходящиеПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеПлатежныеДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ПлатежныеДокументыЭквайрингВх]

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
//	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВхПередУдалением(Элемент, Отказ)
//	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [ПлатежныеДокументыЭквайрингВозвраты]

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВозвратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыЭквайрингВозвратыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [Неопределенно]

&НаКлиенте
Процедура НеопределенноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеопределенноПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ [Информация]

&НаКлиенте
Процедура ИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Загрузить(Команда)
	Информация.Очистить();
	Если ПустаяСтрока(ФайлЗагрузки) Тогда 
	  	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполненный файл загрузки'")
					,
					,
        			"ФайлЗагрузки");
		 Возврат;
	КонецЕсли;
	ЗагрузитьDBFФайл();
	ОбновитьЗаголовкиВкладок();	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьВыпискиСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭквайринг(Команда)
	
	ОновитьВыпискиЭквайрингу();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументыОплаты(Команда)
	
	Информация.Очистить();
	ОбновитьВыпискиСчетов();
	СформироватьДокументыОплатыНаСервере();
	
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьДокументыЭквайрингу(Команда)
	
	Информация.Очистить();
	
	Если ПроверкаЗаполнения() Тогда
		СформироватьДокументыЭквайрингуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)
	ВыполнитьПроверкуАвторизации();
КонецПроцедуры

&НаКлиенте
Процедура ИмпортВыписки(Команда)
	Информация.Очистить();
	ВсеЗаполненно = Истина;
	
	Если ПустаяСтрока(ИмяПользователя) Тогда 
	  	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен пользователь'")
					,
					,
        			"ИмяПользователя");
		 ВсеЗаполненно = Ложь;
	 КонецЕсли;
	 
	 Если ПустаяСтрока(ПарольПользователя) Тогда 
	  	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен пароль пользователя'")
					,
					,
        			"ПарольПользователя");
		 ВсеЗаполненно = Ложь;
	 КонецЕсли;
	 
	 ОтправитьЗапросПоHTTP(Истина);
	 
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьЗаголовкиВкладок()
	
	Элементы.ГруппаВыписки.Заголовок  			= "Выписки"
												+" ("+СокрЛП(ПлатежныеДокументы.Количество()
												+ ИсходящиеПлатежныеДокументы.Количество())+")";
	
	Элементы.ГруппаВходящиеВыписки.Заголовок	= "Входящие" 
												+" ("+СокрЛП(ПлатежныеДокументы.Количество())+")";
												
	Элементы.ГруппаИсходящиеВыписки.Заголовок	= "Исходящие" 
												+" ("+СокрЛП(ИсходящиеПлатежныеДокументы.Количество())+")";
												
	Элементы.ГруппаЭквайринг.Заголовок  		= "ЭКВАЙРИНГ (COMPAS)" 
												+" ("+СокрЛП(ПлатежныеДокументыЭквайрингВх.Количество()
												+ ПлатежныеДокументыЭквайрингВозвраты.Количество())+")";
												
 	Элементы.ГруппаОплаты.Заголовок				= "Оплачено" 
												+" ("+СокрЛП(ПлатежныеДокументыЭквайрингВх.Количество())+")";
												
	Элементы.ГруппаВозвраты.Заголовок			= "Оплата с возвратом" 
												+" ("+СокрЛП(ПлатежныеДокументыЭквайрингВозвраты.Количество())+")";
												
	Элементы.ГруппаНеопределено.Заголовок		= "Неопределенно"
												+" ("+СокрЛП(Неопределенно.Количество())+")";

КонецПроцедуры


&НаСервере
Процедура ЗагрузитьDBFФайл()	
	
	ИдентификаторПользователяИБ = Строка(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ);
	
	Каталог = КаталогВременныхФайлов();
	ПутьФайла = Каталог + "\"+Прав(ИдентификаторПользователяИБ,8)+".dbf";
	Если НЕ ФайлЗагрузки = ПутьФайла Тогда 
		ФайлЗагрузки = ПутьФайла;
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ДанныеХранилища.Записать(ФайлЗагрузки);
	КонецЕсли;
    

	БазаДанных.Очистить();
	ПлатежныеДокументы.Очистить();
	ПлатежныеДокументыЭквайрингВх.Очистить();
	ИсходящиеПлатежныеДокументы.Очистить();
	Неопределенно.Очистить();
	
	База = Новый XBase;
	База.Кодировка = ?(КодировкаDBF = "ANSI",КодировкаXBase.ANSI,КодировкаXBase.OEM);
	База.ОткрытьФайл(ФайлЗагрузки,,Истина);
	
	База.Первая();
	Пока НЕ База.ВКонце() Цикл
		СтрокаБазы = БазаДанных.Добавить();
		СтрокаБазы.ДатаВыписки 	= Дата(Лев(База.TIME,4), Сред(База.TIME,5,2),Сред(База.TIME,7,2),Сред(База.TIME,10,2),Сред(База.TIME,13,2),Сред(База.TIME,16,2));
		СтрокаБазы.Сумма            = База.SUMMA;
		СтрокаБазы.СчетПлательщика	= СокрЛП(База.COUNT_A);
		СтрокаБазы.СчетОплаты		= СокрЛП(База.COUNT_B);

		СтрокаБазы.Плательщик      = СокрЛП(База.NAME_A);
		СтрокаБазы.Получатель      = СокрЛП(База.NAME_B);

		СтрокаБазы.Назначение      = СокрЛП(База.N_P);
		СтрокаБазы.Номер 		   = СокрЛП(База.N_D);
		База.Следующая();
	КонецЦикла;
	
	База.ЗакрытьФайл();	
	ОпределитьДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыпискуOnLine(МассивДляЗагузки)	
	
	БазаДанных.Очистить();
	ПлатежныеДокументы.Очистить();
	ПлатежныеДокументыЭквайрингВх.Очистить();
	ИсходящиеПлатежныеДокументы.Очистить();
	Неопределенно.Очистить();
	
	Для каждого Элемент Из МассивДляЗагузки Цикл
	
		СтрокаБазы = БазаДанных.Добавить();
		СтрокаБазы.ДатаВыписки	  = Элемент.ДатаВыписки;
		СтрокаБазы.Сумма			= Элемент.Сумма;
		СтрокаБазы.СчетПлательщика  = Элемент.СчетПлательщика;
		СтрокаБазы.СчетОплаты	   = Элемент.СчетОплаты;

		СтрокаБазы.Плательщик      = Элемент.Плательщик;
		СтрокаБазы.Получатель      = Элемент.Получатель;

		СтрокаБазы.Назначение      = Элемент.Назначение;
	КонецЦикла; 
	
	ОпределитьДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДокументы()
	
	RegExpObjectNo 		= СоздатьRegExpObject("[No][ ]*[0-9]*[ ]");
	RegExpObjectНомер 	= СоздатьRegExpObject("[№][ ]*[0-9]*[ ]");
	//Более универсальный варинат.
	//ищем в группе любой символ N, №, No, потом "не числовой"(может быть или не вообще не быть), потом число, потом пробел(может или не может быть), и від.
	//парсит NСч-0001335 вiд, N444,  № 3430 вiд,  №3430вiд и т.д. 
	RegExpObjectN		= СоздатьRegExpObject("(N|№|No)\D*([0-9]{1,})[ ]*(в(i|і)д|)"); 
	
	RegExpObjectNumber = СоздатьRegExpObject("([0-9]{1,})");
	RegExpObjectData    = СоздатьRegExpObjectData();
	
	База = БазаДанных.Выгрузить();
	 
	Запрос = Новый Запрос(ПолучитьТекстЗапросаОпределитьДокументы());
		 
	Запрос.УстановитьПараметр("База",База);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	Для Каждого Элемент Из ТаблицаРезультат Цикл 
		 
		Если Элемент.ВидДокумента = "Экв" Тогда 
			
			НаличиеВозврата = ?(Найти(Элемент.Назначение, "Возвр./Ком.банка") = 0, Ложь, Истина);

			Если НаличиеВозврата Тогда
				НоваяСтрока = ПлатежныеДокументыЭквайрингВозвраты.Добавить();
			Иначе
				НоваяСтрока = ПлатежныеДокументыЭквайрингВх.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Организация			= Элемент.Организация;
			НоваяСтрока.СчетОрганизации		= Элемент.СчетОрганизации;
			
			НоваяСтрока.Контрагент			= Элемент.Контрагент;
			НоваяСтрока.СчетКонтрагента		= Элемент.СчетКонтрагента;
			НоваяСтрока.НомерВходящегоДокумента = Элемент.НомерВходящегоДокумента;
	 
		ИначеЕсли Элемент.ВидДокумента = "Вх" Тогда 
			
			Сообщить(Элемент.НомерВходящегоДокумента);
		 	НоваяСтрока 					= ПлатежныеДокументы.Добавить();
			
			НомерСчета 						= ПолучитьНомерСчетаИзСтроки(RegExpObjectНомер, Элемент.Назначение);
			НомерСчета						= ПолучитьНомерСчетаИзСтроки(RegExpObjectNumber, НомерСчета);
			
			Если ПустаяСтрока(НомерСчета) Тогда  
				НомерСчета					= ПолучитьНомерСчетаИзСтроки(RegExpObjectNo, Элемент.Назначение);
				НомерСчета					= ПолучитьНомерСчетаИзСтроки(RegExpObjectNumber, НомерСчета);
			КонецЕсли;
			
			Если ПустаяСтрока(НомерСчета) = "" Тогда
				
				НомерСчета = ПолучитьНомерСчетаИзСтроки(RegExpObjectN, Элемент.Назначение);
				НомерСчета = ПолучитьНомерСчетаИзСтроки(RegExpObjectNumber, НомерСчета);
				
			КонецЕсли;
			
			НомерСчета = ?(ПустаяСтрока(НомерСчета), " ", НомерСчета);
			
			ДатаСчета						= ПолучитьДатуСчетаИзСтроки(RegExpObjectData, Элемент.Назначение);
			
			НоваяСтрока.Организация			= Элемент.Организация;
			НоваяСтрока.СчетОрганизации 	= Элемент.СчетОрганизации;
			НоваяСтрока.НомерБСчетаОрганизации 	= СокрЛП(Элемент.СчетОрганизации.НомерСчета);
			
			ДанныеСчета						= ДанныеСчетНаОплатуКлиенту(НомерСчета, ДатаСчета, Элемент.Организация, СокрЛП(Элемент.СчетОрганизации.НомерСчета),  Элемент.Сумма);
			НоваяСтрока.НомерБСчетаДокумента 	= СокрЛП(ДанныеСчета.СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета);

			Если СокрЛП(ДанныеСчета.СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета)<>СокрЛП(Элемент.СчетОрганизации.НомерСчета) Тогда 
				НоваяСтрока.Отметка			= Ложь;
				НовоеСообщение			 	= Информация.Добавить();
				НовоеСообщение.Сообщение 	= "Номера банковских счетов не совпадают";
				НовоеСообщение.Документ	 	= Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка();
				НовоеСообщение.Счет			= ДанныеСчета.СчетНаОплатуКлиенту;
				НовоеСообщение.Контрагент	= ДанныеСчета.Контрагент;
				НовоеСообщение.Сумма		= Элемент.Сумма;
			КонецЕсли;
			
			НоваяСтрока.СчетНаОплатуКлиенту	= ДанныеСчета.СчетНаОплатуКлиенту;
			НоваяСтрока.Контрагент			= ДанныеСчета.Контрагент;
			НоваяСтрока.НомерВходящегоДокумента = Элемент.НомерВходящегоДокумента;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.Контрагент = Элемент.Контрагент;
			КонецЕсли;
			
			НоваяСтрока.Документ = ОпределитьДокументПоВходящемуНомеру(Элемент.ДатаВыписки, Элемент.НомерВходящегоДокумента, "ПоступлениеБезналичныхДенежныхСредств");
			Если ЗначениеЗаполнено(НоваяСтрока.Документ) Тогда 
				НоваяСтрока.Отметка = Истина;
			КонецЕсли;
			
			
				
		ИначеЕсли Элемент.ВидДокумента = "Исх" Тогда
			
			НоваяСтрока 					= ИсходящиеПлатежныеДокументы.Добавить();
			
			НоваяСтрока.Организация			= Элемент.Организация;
			НоваяСтрока.СчетОрганизации		= Элемент.СчетОрганизации;
			НоваяСтрока.Контрагент			= Элемент.Контрагент;
			НоваяСтрока.СчетКонтрагента     = Элемент.СчетКонтрагента;
			
		Иначе 
			
			НоваяСтрока 					= Неопределенно.Добавить();
			НоваяСтрока.Контрагент			= Элемент.Контрагент;
			НоваяСтрока.СчетКонтрагента		= Элемент.СчетКонтрагента;

		КонецЕсли;
				
			НоваяСтрока.ДатаВыписки			= Элемент.ДатаВыписки;
			НоваяСтрока.Сумма				= Элемент.Сумма;
			НоваяСтрока.Назначение			= Элемент.Назначение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьДокументПоВходящемуНомеру(Дата, Номер, ТипДокумента)
	Перем Результат; 
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(Дата) И 
		НЕ ПустаяСтрока(Номер) Тогда
		
		Сообщить("Запрос");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Номер);
		
		Если ТипДокумента <> "ОтчетБанкаПоОперациямЭквайринга" Тогда 
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Документ.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.%1 КАК Документ
			|ГДЕ
			|	НЕ Документ.ПометкаУдаления
			|	И Документ.ДатаВходящегоДокумента >= &НачалоПериода
			|	И Документ.ДатаВходящегоДокумента <= &КонецПериода
			|	И Документ.НомерВходящегоДокумента = &НомерВходящегоДокумента";
			
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТипДокумента);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
				Сообщить("Нашли номер документа "+Номер);
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьВыпискуПоРасчетномуСчету(СсылкаНаОбьект, Документ);
	
		ДокументВыписка = Документы.ВыпискаПоРасчетномуСчету.СоздатьДокумент();
		ДокументВыписка.Заполнить(СсылкаНаОбьект);
		
		ДокументВыписка.Дата					= СсылкаНаОбьект.Дата;
		ДокументВыписка.Организация				= ?(ЗначениеЗаполнено(ДокументВыписка.Организация)		,ДокументВыписка.Организация	,ДоговорЭквайрингу.Организация);
		ДокументВыписка.БанковскийСчет			= ?(ЗначениеЗаполнено(ДокументВыписка.БанковскийСчет)	,ДокументВыписка.БанковскийСчет	,ДоговорЭквайрингу.БанковскийСчет);
		
		ДокументВыписка.СуммаПоступленияВсего 	= Документ.Сумма;
		ДокументВыписка.ВходящиеПлатежи.Очистить();
		
		НоваяСтрока = ДокументВыписка.ВходящиеПлатежи.Добавить(); 
		
		НоваяСтрока.ПлатежныйДокумент 	= СсылкаНаОбьект;
		НоваяСтрока.Сумма				= Документ.Сумма;

		Попытка
			
			ДокументВыписка.Записать(РежимЗаписиДокумента.Проведение);		
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Документ " + Строка(ДокументВыписка) + " успешно создан";
			НовоеСообщение.Документ	 	= ДокументВыписка.Ссылка;
			
		Исключение
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= ОписаниеОшибки();
			НовоеСообщение.Документ	 	= Документы.ВыпискаПоРасчетномуСчету.ПустаяСсылка();
			
		КонецПопытки;
		
		Если ТипЗнч(СсылкаНаОбьект) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда 
			
			НовоеСообщение.Контрагент	= Документ.Контрагент;		
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			
		КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыЭквайрингуНаСервере()
	
	Для Каждого Документ Из ПлатежныеДокументыЭквайрингВх Цикл 
		Если Документ.СчетОрганизации <>ДоговорЭквайрингу.БанковскийСчет Тогда 
			Продолжить;
		КонецЕсли;
		
		КомБанк = ПолучитьЗначение("Ком.банка", Документ.Назначение);
		БонПок	= ПолучитьЗначение("Бон.пок.", Документ.Назначение);
		
		Попытка
		
		
		
		СуммаКомиссии			= КомБанк+БонПок;
		СуммаДокумента			= Документ.Сумма + СуммаКомиссии;
		НаличиеВозврата 		= ?(Найти(Документ.Назначение,"Возвр./Ком.банка")=0, Ложь, Истина);
		Документ.Выписка 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Ложь, Документ.Организация);
		Документ.Отметка		= ЗначениеЗаполнено(Документ.Выписка);
		
		Если Документ.Отметка Тогда 
			Документ.ДругиеВыписки = Ложь;
			Продолжить;
		КонецЕсли;

		ДругиеВыписки	 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Истина, Документ.Организация);
		Документ.ДругиеВыписки	= ЗначениеЗаполнено(ДругиеВыписки);
		
		Если Документ.ДругиеВыписки Тогда 
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Есть выписки с другими реквизитами";
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Счет			= Документ.СчетКонтрагента;
			Продолжить;
		КонецЕсли;
		
		Если НЕ НаличиеВозврата Тогда
		ДокументЭквайринга = Документы.ОтчетБанкаПоОперациямЭквайринга.СоздатьДокумент();
		ДокументЭквайринга.ДоговорЭквайринга	= ДоговорЭквайрингу;
		ДокументЭквайринга.Организация			= ДоговорЭквайрингу.Организация;
		ДокументЭквайринга.Подразделение		= Подразделение;
		ДокументЭквайринга.СтатьяРасходов		= СтатьяРасходов;
		ДокументЭквайринга.АналитикаРасходов	= АналитикаРасходов;
		ДокументЭквайринга.Валюта				= ДоговорЭквайрингу.БанковскийСчет.ВалютаДенежныхСредств;
        
		ДокументЭквайринга.СуммаДокумента		= Документ.Сумма;
		ДокументЭквайринга.СуммаПокупок			= Документ.Сумма + СуммаКомиссии;;
		ПодборВходящихПлатежей = Истина;
		
		 
		КоличествоТранзакций	= ПолучитьЗначение("Кол-во транз.", Документ.Назначение); 

		ТабПлатежиВх			= ПоискПлатежей(Документ.ДатаВыписки,КоличествоТранзакций, СуммаДокумента);

		Если ТабПлатежиВх.Количество()  = 0 Тогда 
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Нет платежных документов";
			НовоеСообщение.Сумма		= Документ.Сумма;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Счет			= Документ.СчетКонтрагента;
			Продолжить;
		КонецЕсли;
		ДокументЭквайринга.Покупки.Загрузить(ТабПлатежиВх);
	
		ДокументЭквайринга.Дата					= Документ.ДатаВыписки;
        ДокументЭквайринга.СуммаКомиссии		= СуммаКомиссии;

		
		Попытка
			ДокументЭквайринга.Записать(РежимЗаписиДокумента.Проведение);
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Документ " + Строка(ДокументЭквайринга) + " успешно создан";
			НовоеСообщение.Документ	 	= ДокументЭквайринга.Ссылка;
			НовоеСообщение.Сумма		= ДокументЭквайринга.СуммаДокумента;
			
		Исключение
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= ОписаниеОшибки();
			НовоеСообщение.Сумма		= Документ.Сумма;
			Продолжить;
		КонецПопытки;
		
		СформироватьВыпискуПоРасчетномуСчету(ДокументЭквайринга.Ссылка, Документ);
		КонецЕсли;
	    Исключение КонецПопытки;
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Функция  ПроверкаЗаполнения() 
    Проверено = Истина;
	Если Не ЗначениеЗаполнено(ДоговорЭквайрингу) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполненый договор эквайрингу'"),,
        "ДоговорЭквайрингу");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполнена статья расходов'"),,
        "СтатьяРасходов");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаРасходов) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполнена аналитика расходов'"),,
        "АналитикаРасходов");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Не заполнено подразделение'"),,
        "Подразделение");
		Проверено = Ложь;
	Иначе 
		Проверено = ?(Проверено = Истина, Истина, Ложь);
	КонецЕсли;
	
	Возврат Проверено;
	
КонецФункции

&НаСервере 
Процедура ОбновитьВыпискиСчетов()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(ПолучитьТекстЗапросаВыпискиСчетов());
	Запрос.УстановитьПараметр("ПлатежныеДокументы", ПлатежныеДокументы.Выгрузить());
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	ПлатежныеДокументы.Очистить();
    ПлатежныеДокументы.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаСервере 
Процедура ОновитьВыпискиЭквайрингу()
	
	// По другому не получится только в цикле
	Для Каждого Документ Из ПлатежныеДокументыЭквайрингВх Цикл 
		КомБанк					= ПолучитьЗначение("Ком.банка", Документ.Назначение);
		БонПок					= ПолучитьЗначение("Бон.пок.", Документ.Назначение);
		
		СуммаКомиссии			= КомБанк+БонПок;
		СуммаДокумента			= Документ.Сумма + СуммаКомиссии;
		НаличиеВозврата 		= ?(Найти(Документ.Назначение,"Возвр./Ком.банка")=0, Ложь, Истина);
		Документ.Выписка 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Ложь, Документ.Организация);
		Документ.Отметка		= ЗначениеЗаполнено(Документ.Выписка);
		Если Документ.Отметка  Тогда 
			Документ.ДругиеВыписки = Ложь;
		Иначе 	
			ДругиеВыписки	 		= ПоискДокументаЭквайринга(Документ.Сумма, СуммаКомиссии, Документ.ДатаВыписки,НаличиеВозврата, Истина, Документ.Организация);
			Документ.ДругиеВыписки	= ЗначениеЗаполнено(ДругиеВыписки);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСчетНаОплатуКлиенту(НомерСчета, ДатаСчета,Организация, БанковскийСчет, СуммаДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	Условие =?(ПустаяСтрока(НомерСчета) = ЛОЖЬ," ПОДСТРОКА(СчетНаОплатуКлиенту.Номер, &НачальнаяПозиция, &Длина) = &Номер "  ,  " СчетНаОплатуКлиенту.СуммаДокумента = &СуммаДокумента " );
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаСчетНаОплатуКлиенту();
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"%Условие%",Условие);
	
	Запрос.УстановитьПараметр("Дата"				,ДатаСчета);
	Запрос.УстановитьПараметр("Номер"				,СокрЛП(НомерСчета));
	Запрос.УстановитьПараметр("Организация"			,Организация);
	Запрос.УстановитьПараметр("НачальнаяПозиция"	,12-СтрДлина(НомерСчета));
	Запрос.УстановитьПараметр("Длина"				,СтрДлина(НомерСчета));
	Запрос.УстановитьПараметр("СуммаДокумента"      ,СуммаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	СтруктураДанных = Новый Структура;
	Если РезультатЗапроса.Следующий() Тогда 
		СтруктураДанных.Вставить("СчетНаОплатуКлиенту"	,РезультатЗапроса.СчетНаОплатуКлиенту);
		СтруктураДанных.Вставить("Контрагент"			,РезультатЗапроса.Контрагент);
		СтруктураДанных.Вставить("БанковскийСчет"		,РезультатЗапроса.БанковскийСчет);
	Иначе 
		СтруктураДанных.Вставить("СчетНаОплатуКлиенту"	,Документы.СчетНаОплатуКлиенту.ПустаяСсылка());
		СтруктураДанных.Вставить("Контрагент"			,Справочники.Контрагенты.ПустаяСсылка());
		СтруктураДанных.Вставить("БанковскийСчет"		,Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанных;
		
КонецФункции

&НаСервере
Функция ПолучитьНомерСчетаИзСтроки(RegExpObject, Назначение)

	Matches 		= RegExpObject.Execute(Назначение);
	ЧислоВхождений 	= Matches.Count();
	
	Если ЧислоВхождений > 0 Тогда
		Match = Matches.Item(0);
		Возврат Match.Value;
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьНомерСчетаИзСтроки()

&НаСервере
Функция ПолучитьДатуСчетаИзСтроки(RegExpObject, Назначение)

	Matches 		= RegExpObject.Execute(Назначение);
	ЧислоВхождений 	= Matches.Count();
	
	Если ЧислоВхождений > 0 Тогда
		Match = Matches.Item(0);
		Возврат ПолучитьДатуИзСтроки(СокрЛП(Match.Value));
	КонецЕсли;
	
	Возврат Дата("00010101");

КонецФункции // ПолучитьНомерСчетаИзСтроки()

&НаСервере
Функция ПолучитьДатуИзСтроки(СтрокаДата)
	
	ИндексДень 	= Найти(СтрокаДата, ".");
	День		= Лев(СтрокаДата, ИндексДень-1);
	СтрокаДата	= Прав(СтрокаДата, СтрДлина(СтрокаДата) - ИндексДень);
	
	ИндексМесяц = Найти(СтрокаДата, ".");
	Месяц		= Лев(СтрокаДата, ИндексМесяц-1);
	Год			= Прав(СтрокаДата, СтрДлина(СтрокаДата) - ИндексМесяц);
	
	Если ИндексДень = 0 И ИндексМесяц = 0 Тогда
		Возврат Дата("00010101");
	КонецЕсли;
	
	Возврат Дата(Год+Месяц+День);
	
КонецФункции


&НаСервере
Функция СоздатьRegExpObject(Параметры)
	
	RegExpObject 			= Новый COMОбъект("VBScript.RegExp");
	RegExpObject.IgnoreCase = Истина;
	RegExpObject.Global		= Истина;
	RegExpObject.MultiLine	= Истина;
	RegExpObject.Pattern	= Параметры;	
	Возврат RegExpObject;

КонецФункции // СоздатьRegExpObject()


Функция СоздатьRegExpObjectData()
	
	RegExpObject 			= Новый COMОбъект("VBScript.RegExp");
	RegExpObject.IgnoreCase = Ложь;
	RegExpObject.Global		= Истина;
	RegExpObject.MultiLine	= Истина;
	RegExpObject.Pattern	= "[0-9][0-9][.][0-9][0-9][.][0-9][0-9][0-9][0-9]";
	
	Возврат RegExpObject;
	
КонецФункции

&НаСервере
Функция СформироватьДокументыОплатыНаСервере()
	
	ТаблицаДокументов = ПлатежныеДокументы.Выгрузить();
	Для Каждого Документ Из ТаблицаДокументов Цикл
		
		Если Документ.Отметка = Истина  ИЛИ (Документ.СчетНаОплатуКлиенту = Документы.СчетНаОплатуКлиенту.ПустаяСсылка() И НЕ ЗначениеЗаполнено(Документ.Контрагент))  Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетОрганизации 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.СчетОрганизации, Новый Структура("НомерСчета", "СчетОрганизации.НомерСчета"))["НомерСчета"];
		СчетПоСчетаНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.СчетНаОплатуКлиенту, Новый Структура("НомерСчета", "БанковскийСчет.НомерСчета"))["НомерСчета"];
		Если СокрЛП(СчетПоСчетаНаОплату)<>СокрЛП(СчетОрганизации) Тогда 
			Документ.Отметка			= Ложь;
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Номера банковских счетов не совпадают";
			НовоеСообщение.Документ	 	= Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка();
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Сумма		= Документ.Сумма;
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(Документ.Документ) Тогда 
			ДокументПоступление = Документ.Документ.ПолучитьОбъект();
		Иначе 
			ДокументПоступление = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.СчетНаОплатуКлиенту) Тогда 
			ДокументПоступление.Заполнить(Документ.СчетНаОплатуКлиенту);
		Иначе
			ДокументПоступление.Контрагент = Документ.Контрагент;
			ДокументПоступление.БанковскийСчет = Документ.СчетОрганизации;
			ДокументПоступление.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.СчетОрганизации, "ВалютаДенежныхСредств");
			ДокументПоступление.Организация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.СчетОрганизации, "Владелец");
		КонецЕсли;
		
		ДокументПоступление.Дата                            = Документ.ДатаВыписки;
		ДокументПоступление.СуммаДокумента					= Документ.Сумма;
		ДокументПоступление.ДатаВходящегоДокумента			= Документ.ДатаВыписки;
		ДокументПоступление.НомерВходящегоДокумента			= Документ.НомерВходящегоДокумента;
		ДокументПоступление.Валюта                      	= Константы.ВалютаРегламентированногоУчета.Получить();
		ДокументПоступление.СтатьяДвиженияДенежныхСредств   = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("e66dc542-24c7-44e7-a936-cb69a292096a"));
		ДокументПоступление.Комментарий						= "Документ создан автоматически.";

		ДокументПоступление.РасшифровкаПлатежа.Очистить();
		НоваяСтрока = ДокументПоступление.РасшифровкаПлатежа.Добавить();
		
		НоваяСтрока.Партнер 				= Документ.Контрагент.Партнер;
		НоваяСтрока.ОснованиеПлатежа 		= Документ.СчетНаОплатуКлиенту;
		Если ЗначениеЗаполнено(Документ.СчетНаОплатуКлиенту) Тогда 
			НоваяСтрока.Заказ					= Документ.СчетНаОплатуКлиенту.ДокументОснование;
		КонецЕсли;
		
		НоваяСтрока.Сумма					= Документ.Сумма;
		НоваяСтрока.ВалютаВзаиморасчетов	= Константы.ВалютаРегламентированногоУчета.Получить();
		НоваяСтрока.СуммаВзаиморасчетов		= Документ.Сумма;

		Попытка
		    ДокументПоступление.Записать(РежимЗаписиДокумента.Проведение);	
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= "Документ " + Строка(ДокументПоступление) + " успешно создан";
			НовоеСообщение.Документ	 	= ДокументПоступление.Ссылка;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			НовоеСообщение.Сумма		= Документ.Сумма;
			
		Исключение
			
			НовоеСообщение			 	= Информация.Добавить();
			НовоеСообщение.Сообщение 	= ОписаниеОшибки();
			НовоеСообщение.Документ	 	= Документы.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка();
			НовоеСообщение.Счет			= Документ.СчетНаОплатуКлиенту;
			НовоеСообщение.Контрагент	= Документ.Контрагент;
			НовоеСообщение.Сумма		= Документ.Сумма;
			
			Продолжить;
			
		КонецПопытки;
		
		СформироватьВыпискуПоРасчетномуСчету(ДокументПоступление.Ссылка, Документ);
		
		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагента(СчетНаОплатуКлиенту)
	Возврат СчетНаОплатуКлиенту.Контрагент;
КонецФункции	

&НаСервереБезКонтекста
// Служебная функция, предназначенная для получения описания типов набора записей по объекту метаданных
// Параметры:
//	Значение - Null, Булево, Строка
//
// Возвращаемое значение:
// Число, полученное в результате преобразования
//
Функция ПреобразоватьВЧисло(Знач Значение)
	
	Если (Значение = Null) или (Значение = Неопределено) Тогда
		Возврат 0
	Иначе
		Попытка
			Возврат Число(Значение)
		Исключение
			Возврат 0
		КонецПопытки
	КонецЕсли;
	
КонецФункции // ПреобразоватьВЧисло()

&НаСервере
Функция ПолучитьЗначение(НазваЭлемента, Назначение)
	Перем RegExpObjectSearch, RegExpObjectNunmber;
	Перем Результат;
	
	Результат = 0;
	//
	RegExpObjectSearch 		= СоздатьRegExpObject(СтрЗаменить(НазваЭлемента, ".", ".\")+"[ ]{0,1}[0-9]{1,}\.[0-9]{2}грн");
	RegExpObjectNunmber 	= СоздатьRegExpObject("[0-9]{1,}\.[0-9]{2}");
	
	Позиция = Найти(Назначение,НазваЭлемента);
	Если Позиция <> 0 Тогда 
		RegExpПоискУспешен = Ложь;
		//Попытаем счастья с помощью
		СтрокаПоиска = ПолучитьНомерСчетаИзСтроки(RegExpObjectSearch, Назначение);
		Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
			ТекстЧисла = ПолучитьНомерСчетаИзСтроки(RegExpObjectNunmber, СтрокаПоиска);
			Если Не ПустаяСтрока(ТекстЧисла) Тогда
				RegExpПоискУспешен = Истина;
				Результат = ПреобразоватьВЧисло(ТекстЧисла);
			КонецЕсли;
		КонецЕсли;
		
		Если RegExpПоискУспешен = Ложь Тогда
			
			Длина = СтрДлина(НазваЭлемента);
			НачПозиция = Позиция+Длина; 
			ТекЭлемент = "";
			ЦелаяЧасть = "";
			Пока ТекЭлемент <>"." Цикл 
				ТекЭлемент = Сред(Назначение,НачПозиция,1);
				ЦелаяЧасть = ЦелаяЧасть+ ТекЭлемент;
				НачПозиция = НачПозиция+1;
			КонецЦикла;
			ТекстЧисла = СокрЛП(ЦелаяЧасть+Сред(Назначение,НачПозиция,2));
			Результат = ПреобразоватьВЧисло(СтрЗаменить(ТекстЧисла, "шт.Во",""));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоискДокументаЭквайринга(СуммаДокумента, СуммаКомиссии,ДатаВыписки, НаличиеВозврата, ПроверкаВыписок,Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОтчетБанкаПоОперациямЭквайринга.Ссылка
		|ИЗ
		|	Документ.ОтчетБанкаПоОперациямЭквайринга КАК ОтчетБанкаПоОперациямЭквайринга
		|ГДЕ
		|	ОтчетБанкаПоОперациямЭквайринга.СуммаДокумента = &СуммаДокумента
		|	И ОтчетБанкаПоОперациямЭквайринга.ДоговорЭквайринга = &ДоговорЭквайринга
		|	И ОтчетБанкаПоОперациямЭквайринга.Организация = &Организация
		|	И ОтчетБанкаПоОперациямЭквайринга.Проведен";
		
	Если НЕ ПроверкаВыписок Тогда 
		ТекстЗапроса = ТекстЗапроса	
		+?(НаличиеВозврата, " ", " И ОтчетБанкаПоОперациямЭквайринга.СуммаКомиссии = &СуммаКомиссии")+
		"	
		|	И ОтчетБанкаПоОперациямЭквайринга.Дата <= &Дата
		|	И ОтчетБанкаПоОперациямЭквайринга.АналитикаРасходов = &АналитикаРасходов
		|	И ОтчетБанкаПоОперациямЭквайринга.СтатьяРасходов = &СтатьяРасходов
		|	И ОтчетБанкаПоОперациямЭквайринга.Подразделение = &Подразделение";	
	КонецЕсли;	
	Запрос.Текст	=	ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорЭквайринга"	,ДоговорЭквайрингу);	
	Запрос.УстановитьПараметр("СуммаДокумента"		,СуммаДокумента);
	Запрос.УстановитьПараметр("СуммаКомиссии"		,СуммаКомиссии);
	Запрос.УстановитьПараметр("Дата"				,ДатаВыписки);
	Запрос.УстановитьПараметр("АналитикаРасходов"	,АналитикаРасходов);
	Запрос.УстановитьПараметр("СтатьяРасходов"		,СтатьяРасходов);
	Запрос.УстановитьПараметр("Подразделение"		,Подразделение);
    Запрос.УстановитьПараметр("Организация"			,Организация);

	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ?(РезультатЗапроса.Следующий(), РезультатЗапроса.Ссылка, Документы.ОтчетБанкаПоОперациямЭквайринга.ПустаяСсылка());
	
КонецФункции

&НаСервере
Процедура УдалитьДокументНаСервере()
	
	Если ПустаяСтрока(ФайлЗагрузки) Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
	    УдалитьФайлы(ФайлЗагрузки);  
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция Рекурсия(М_Путь, К_Путь, Сумма, МассивОплат, Вложеность, КоличествоОплат) 
		
	Если М_Путь[Вложеность] = Неопределено Тогда
		М_Путь[Вложеность] = Вложеность;		
	КонецЕсли;
	
	Если Вложеность = К_Путь Тогда
		
		ПроверкаСуммы = 0;
		Для Каждого ЭлМассива Из М_Путь Цикл
			ПроверкаСуммы = ПроверкаСуммы + МассивОплат[ЭлМассива].Сумма;		
		КонецЦикла;
		
		Если ПроверкаСуммы > Сумма Тогда
			Возврат Истина;	
		КонецЕсли;
		
		Если ПроверкаСуммы < Сумма Тогда
			Возврат Ложь;	
		КонецЕсли;
		
		Если ПроверкаСуммы = Сумма Тогда
			Возврат М_Путь;	
		КонецЕсли;

		
	КонецЕсли;
	
	Пока Вложеность <> К_Путь Цикл
		
		Результат = Рекурсия(М_Путь, К_Путь, Сумма, МассивОплат, Вложеность+1, КоличествоОплат);
		Если ТипЗнч(Результат) = Тип("Массив") Тогда Возврат М_Путь; КонецЕсли;
		
		Если Результат = Истина Тогда
			
			Если Вложеность = 0 Тогда
				
				ТИндекс = М_Путь[Вложеность];
				Если ТИндекс = КоличествоОплат Тогда
					Возврат ПустаяСтрока("");
				Иначе
					
					Если М_Путь[1]=КоличествоОплат-(К_Путь - 1) Тогда 
						
						М_Путь[0] = М_Путь[0] + 1; 
						
						Для Индекс = 1 По К_Путь Цикл 
							М_Путь[Индекс] = М_Путь[0] + Индекс;  
							Если М_Путь[0] + Индекс > КоличествоОплат Тогда
								Возврат ПустаяСтрока("");		
							КонецЕсли;
						КонецЦикла;	
					Иначе 
						ТИндекс = М_Путь[Вложеность+1];
						Если М_Путь[Вложеность+1] = КоличествоОплат Тогда
							Возврат Истина;
						КонецЕсли;
					
						М_Путь[Вложеность+1] = М_Путь[Вложеность+1]+1;
						Для Индекс = Вложеность+2 По К_Путь Цикл 
							М_Путь[Индекс] =  М_Путь[Индекс-1]+1;
						КонецЦикла;
						
				
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ТИндекс = М_Путь[Вложеность+1];
				Если ТИндекс = КоличествоОплат Тогда
					Возврат Истина;
				КонецЕсли;
				
				Если М_Путь[Вложеность+1]+1 <= КоличествоОплат-(К_Путь - Вложеность-1) Тогда
					М_Путь[Вложеность+1] = М_Путь[Вложеность+1]+1;
				Иначе 
					Возврат Истина;
				КонецЕсли;
					 

				Для Индекс = Вложеность+2 По К_Путь Цикл 
					М_Путь[Индекс] = М_Путь[Индекс-1]+1;
				КонецЦикла;
				
				
			КонецЕсли;	 
			
		КонецЕсли;
		
		Если Результат = Ложь Тогда
			Если Вложеность = 0 Тогда
				
				ТИндекс = М_Путь[Вложеность];
				Если ТИндекс = КоличествоОплат Тогда
					Возврат ПустаяСтрока("");
				Иначе
					М_Путь[Вложеность] = М_Путь[Вложеность] + 1;
					Для Индекс = 1 По К_Путь Цикл 
						М_Путь[Индекс] = М_Путь[Вложеность] + Индекс;
						Если М_Путь[Вложеность] + Индекс > КоличествоОплат Тогда
							Возврат ПустаяСтрока("");		
						КонецЕсли;
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;


КонецФункции

&НаСервере
Функция ПоискПлатежей(ДатаПлатежа, КоличествоТранзакций, СуммаДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаЭквайринговыхВыписок());
	Запрос.УстановитьПараметр("Организация"			, ДоговорЭквайрингу.Организация);
	Запрос.УстановитьПараметр("ДоговорЭквайринга"	, ДоговорЭквайрингу);
	Запрос.УстановитьПараметр("Валюта"				, ДоговорЭквайрингу.БанковскийСчет.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("ДатаПлатежа"			, ДатаПлатежа);
	Запрос.УстановитьПараметр("ДатаПлатежаМинимум"	, ДатаПлатежа - 24*60*60*3);
	Запрос.УстановитьПараметр("Сумма"				, СуммаДокумента);
	Результат = Запрос.Выполнить();
	
	МассивОплат = Результат.Выгрузить();

	Транзакции = Новый Массив(КоличествоТранзакций);
	Если МассивОплат.Количество()=0 Тогда 
		РезультатПриход = МассивОплат;
	Иначе  
		РезультатПриход = Рекурсия(Транзакции, КоличествоТранзакций-1, СуммаДокумента, МассивОплат, 0, МассивОплат.Количество()-1);
		Если РезультатПриход = ПустаяСтрока("") Или РезультатПриход =Ложь Тогда
			МассивОплат.Очистить();
			РезультатПриход = МассивОплат;
		КонецЕсли;
	КонецЕсли;
	
    Оплаты = МассивОплат.СкопироватьКолонки();
	
	Для Каждого Элемент Из РезультатПриход Цикл
		НоваяСтрока = Оплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивОплат[Элемент]);	
	КонецЦикла;		
	
	Возврат Оплаты;

	
КонецФункции

&НаСервере
Функция  ПолучитьТекстЗапросаОпределитьДокументы()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.НомерСчета,
		|	МАКСИМУМ(БанковскиеСчетаОрганизаций.Владелец) КАК Плательщик,
		|	МАКСИМУМ(БанковскиеСчетаОрганизаций.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ СчетаОрганизации
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	БанковскиеСчетаОрганизаций.НомерСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	База.ДатаВыписки,
		|	База.Сумма,
		|	База.СчетОплаты,
		|	База.СчетПлательщика,
		|	База.Назначение,
		|	База.Плательщик,
		|	База.Получатель,
		|	База.Номер
		|ПОМЕСТИТЬ КещБаза
		|ИЗ
		|	&База КАК База
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КещБаза.ДатаВыписки,
		|	КещБаза.Сумма,
		|	СчетаОрганизации.Ссылка КАК СчетОрганизации,
		|	КещБаза.СчетПлательщика КАК СчетКонтрагента,
		|	КещБаза.Назначение,
		|	КещБаза.Плательщик КАК Контрагент,
		|	СчетаОрганизации.Плательщик КАК Организация,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СчетаОрганизации.Плательщик, 0) = 0
		|			ТОГДА """"""""
		|		ИНАЧЕ ""Экв""
		|	КОНЕЦ КАК ВидДокумента,
		|	КещБаза.Получатель,
		|	КещБаза.Номер КАК НомерВходящегоДокумента
		|ИЗ
		|	КещБаза КАК КещБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаОрганизации КАК СчетаОрганизации
		|		ПО КещБаза.СчетОплаты = СчетаОрганизации.НомерСчета
		|ГДЕ
		|	ПОДСТРОКА(КещБаза.Назначение, 1, 4) = ""cmps""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КещБаза.ДатаВыписки,
		|	КещБаза.Сумма,
		|	СчетаОрганизации.Ссылка,
		|	КещБаза.СчетПлательщика,
		|	КещБаза.Назначение,
		|	КещБаза.Плательщик,
		|	СчетаОрганизации.Плательщик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СчетаОрганизации.Плательщик, 0) = 0
		|			ТОГДА """"
		|		КОГДА КещБаза.Сумма > 0
		|			ТОГДА ""Вх""
		|	КОНЕЦ,
		|	КещБаза.Получатель,
		|	КещБаза.Номер
		|ИЗ
		|	КещБаза КАК КещБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаОрганизации КАК СчетаОрганизации
		|		ПО КещБаза.СчетОплаты = СчетаОрганизации.НомерСчета
		|ГДЕ
		|	НЕ ПОДСТРОКА(КещБаза.Назначение, 1, 4) = ""cmps""
		|	И КещБаза.Сумма > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КещБаза.ДатаВыписки,
		|	КещБаза.Сумма,
		|	СчетаОрганизации.Ссылка,
		|	КещБаза.СчетОплаты,
		|	КещБаза.Назначение,
		|	КещБаза.Получатель,
		|	СчетаОрганизации.Плательщик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СчетаОрганизации.Плательщик, 0) = 0
		|			ТОГДА """"
		|		КОГДА КещБаза.Сумма < 0
		|			ТОГДА ""Исх""
		|	КОНЕЦ,
		|	КещБаза.Получатель,
		|	КещБаза.Номер
		|ИЗ
		|	КещБаза КАК КещБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаОрганизации КАК СчетаОрганизации
		|		ПО КещБаза.СчетПлательщика = СчетаОрганизации.НомерСчета
		|ГДЕ
		|	НЕ ПОДСТРОКА(КещБаза.Назначение, 1, 4) = ""cmps""
		|	И КещБаза.Сумма < 0";

	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаЭквайринговыхВыписок()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасчетыПоЭквайрингуОстатки.Валюта КАК Валюта,
		|	РасчетыПоЭквайрингуОстатки.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	РасчетыПоЭквайрингуОстатки.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|	РасчетыПоЭквайрингуОстатки.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	РасчетыПоЭквайрингуОстатки.ДатаПлатежа КАК ДатаПлатежа,
		|	РасчетыПоЭквайрингуОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыПоЭквайрингу.Остатки(
		|			&ДатаПлатежа,
		|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте)
		|				И Организация = &Организация
		|				И Валюта = &Валюта
		|				И ЭквайринговыйТерминал В
		|					(ВЫБРАТЬ
		|						ЭквайринговыеТерминалы.Ссылка
		|					ИЗ
		|						Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|					ГДЕ
		|						ЭквайринговыеТерминалы.Владелец = &ДоговорЭквайринга)) КАК РасчетыПоЭквайрингуОстатки
		|ГДЕ
		|	РасчетыПоЭквайрингуОстатки.СуммаОстаток <= &Сумма
		|	И РасчетыПоЭквайрингуОстатки.ДатаПлатежа >= &ДатаПлатежаМинимум
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сумма УБЫВ";
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСчетНаОплатуКлиенту()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СчетНаОплатуКлиенту.Ссылка КАК СчетНаОплатуКлиенту,
		|	СчетНаОплатуКлиенту.Контрагент КАК Контрагент,
		|	СчетНаОплатуКлиенту.БанковскийСчет КАК БанковскийСчет
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.Дата, ДЕНЬ) = &Дата
		|	И СчетНаОплатуКлиенту.Проведен
		|	И %Условие% 
		|	И СчетНаОплатуКлиенту.Организация = &Организация ";

	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаВыпискиСчетов()
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПлатежныеДокументы.ДатаВыписки,
		|	ПлатежныеДокументы.Сумма,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Назначение,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.СчетНаОплатуКлиенту,
		|	ПлатежныеДокументы.СчетОрганизации,
		|	ПлатежныеДокументы.Отметка,
		|	ПлатежныеДокументы.НомерБСчетаОрганизации,
		|	ПлатежныеДокументы.НомерБСчетаДокумента,
		|	ПлатежныеДокументы.НомерВходящегоДокумента,
		|	ПлатежныеДокументы.Документ
		|ПОМЕСТИТЬ ПлатежныеДокументы
		|ИЗ
		|	&ПлатежныеДокументы КАК ПлатежныеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлатежныеДокументы.СчетНаОплатуКлиенту
		|ПОМЕСТИТЬ ПоступлениеБДС
		|ИЗ
		|	ПлатежныеДокументы КАК ПлатежныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
		|		ПО (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа = ПлатежныеДокументы.СчетНаОплатуКлиенту)
		|			И (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата = ПлатежныеДокументы.ДатаВыписки)
		|			И (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма = ПлатежныеДокументы.Сумма)
		|			И ПлатежныеДокументы.НомерВходящегоДокумента = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.НомерВходящегоДокумента
		|ГДЕ
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлатежныеДокументы.ДатаВыписки,
		|	ПлатежныеДокументы.Сумма,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Назначение,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.СчетНаОплатуКлиенту,
		|	ПлатежныеДокументы.СчетОрганизации,
		|	ВЫБОР
		|		КОГДА ПлатежныеДокументы.Отметка = ИСТИНА
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(ПоступлениеБДС.СчетНаОплатуКлиенту, 0) = 0
		|				ИЛИ ПлатежныеДокументы.НомерБСчетаОрганизации <> ПлатежныеДокументы.НомерБСчетаДокумента
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отметка,
		|	ПлатежныеДокументы.НомерВходящегоДокумента,
		|	ПлатежныеДокументы.НомерВходящегоДокумента КАК НомерВходящегоДокумента1,
		|	ПлатежныеДокументы.Документ
		|ИЗ
		|	ПлатежныеДокументы КАК ПлатежныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоступлениеБДС КАК ПоступлениеБДС
		|		ПО ПлатежныеДокументы.СчетНаОплатуКлиенту = ПоступлениеБДС.СчетНаОплатуКлиенту";
	Возврат ТекстЗапроса;	
КонецФункции

&НаКлиенте
Процедура ПолеБанковскийСчетПриИзменении(Элемент)
	
	ИмяПользователя = "";
	ПарольПользователя = "";
	
КонецПроцедуры


#Область ПриватБанкАвторизация

&НаКлиенте
Функция ОбработатьРезультатСоединения(стРезультат)
	Перем Результат;
	Результат = Новый Структура("Сессия, АвторизацияУспешна, ssl, Статус, Location, ИмяФайлаРезультата, ОписаниеОшибки, НомерПопыткиАвторизации, РезультатАвторизацииОТП, НеобходимаАвторизацияОТП", 
							Неопределено, 
							Ложь, 
							Неопределено, 
							-1, 
							"", 
							"", 
							"", 
							0, 
							Ложь, 
							Ложь);
	
	
	
	 Если стРезультат = "ОшибкаСоединения" Тогда
		Результат.Сессия = Неопределено;
		Результат.АвторизацияУспешна = Ложь;
		
		Текст = НСтр("ru='Не удалось установить соединение с сервером:';uk='Не вдалося встановити з`єднання з сервером:'")
			+ Символы.ПС + ИнформацияОбОшибке().Описание;
		Результат.ОписаниеОшибки = Текст;
		Возврат Результат;
	ИначеЕсли стРезультат = "ОшибкаОтправки" Тогда
		ТекстСообщения = НСтр("ru='Невозможно установить соединение по причине: ';uk='Неможливо встановити з`єднання з причини'")
			+ ИнформацияОбОшибке().Описание + " "// + ИнформацияОбОшибке().Причина
			+ НСтр("ru='Проверьте доступность сети интернет.';uk='Перевірте доступність мережі інтернет.'");
		АвторизацияУспешна = Ложь;
		Соединение = Неопределено;
		ssl = Неопределено;
		Сессия = Неопределено;
		Статус = -1;
		
		Результат.ОписаниеОшибки = ТекстСообщения;
	Иначе
		Статус = стРезультат.Статус;
		Результат.Location = стРезультат.Location;
		Cookie = стРезультат.Cookie;
		Результат.ИмяФайлаРезультата = стРезультат.ИмяФайлаРезультата;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;

	Если Статус = 401 Тогда
		ТекстСообщения = НСтр("ru='Неправильные имя пользователя и / или пароль!';uk='Невірні ім`я користувача та / або пароль'");
		АвторизацияУспешна = Ложь;
		Сессия = Неопределено;
		Результат.ОписаниеОшибки = ТекстСообщения;
	ИначеЕсли Статус = 302 И Найти(Результат.Location, "/otp?") > 0 Тогда
		//Тут алгоритм таков:
		//Когда при авторизации получаем ответ в location = otp 
		//Тогда запрашиваем из ресурса /news с телом запроса ТелоЗапроса = "otpdevlst=Y" параметры телефонов и какой должен быть пароль
		//И парсим результат ответа, по которому должны получить список телефонов и маску пароля
		//Тогда запрашиваем номер телефона на который необходимо отправлять sms
		//Тогда отправляем запрос отправить sms с параметром индекса номера телефона по ресурсу /news с телом запроса ТелоЗапроса = "otpDevId=" + IDОТП 
		//Когда получаем статус ответа 200 или 302 
		//Тогда формируем форму для ввода пароля
		//Когда пользователь ввел пароль
		//Тогда отправляем на ресурс /news с телом запроса "&otp1=25&otp2=35" 
		//И получаем в ответ удачную cookie, с помощью которой в дальнейшом необходимо отправлять данные. 
		ТекстСообщения = НСтр("ru='Требуется otp авторизация, еще не реализовано';uk='Необхідна otp авторизація!'");
		Результат.АвторизацияУспешна = Ложь;
		Результат.РезультатАвторизацииОТП = Ложь;
		Результат.НеобходимаАвторизацияОТП = Истина;
		Результат.Статус = Статус;
		Результат.Сессия = Cookie;
		//Результат.ОписаниеОшибки = ТекстСообщения;
		
	ИначеЕсли Статус <> 200 Тогда
		ТекстСообщения = НСтр("ru='Ошибка ';uk='Помилка '") + Результат.Статус + ", Location " + Результат.Location + " !";
		Результат.АвторизацияУспешна = Ложь;
		Результат.Сессия = Неопределено;
		Результат.ОписаниеОшибки = ТекстСообщения;
	Иначе 
		Результат.Статус = Статус;
		Результат.Сессия = Cookie;
		Результат.НомерПопыткиАвторизации = 0
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуАвторизации()
	Перем UserAgent;
	
	АвторизацияУспешна = Истина;
	
	
	ИнтернетАдресДляСоединения = "cb.privatbank.ua/p24";
	ИнтернетАдресДляСоединения = "cb.privatbank.ua";
	//НоваяСтрокаСерверы.КолонкаАдресСервера = "p24.privatbank.ua/p24";
	
	ИнтернетАдресДляСкачивания = "client-bank.privatbank.ua/client_bank_jur/";
	РесурсНаСервереВерсия = "/Privat24to1Cversions.txt";
	РесурсНаСервереОбновление = "/Privat24to1C.exe";
	РесурсНаСервереГорячееСообщение = "/Privat24to1Chm.txt";

	UserAgent = ПолучитьUserAgent();
	АвторизацияУспешна = Истина;

	ПолноеИмяФайлаЗапроса = ПолучитьИмяВрФайла("txt").ПолноеИмя;
	ИмяФайлаРезультата = ПолучитьИмяВрФайла("txt").ПолноеИмя;
	
	РесурсНаСервере = "/p24/news";
	
	
	ТелоЗапроса = "UserName=" + ИмяПользователя// + Символы.ВК + Символы.ПС
		+ "&UserPass=" + ПарольПользователя	+ ПолучитьСуффиксЗапроса()//"&otpdevlst=Y&nomenu&nolist&XMLONLY"
		+ "&" + UserAgent; //+ EncodeURL(ЗаменитьСС(МаркерНеобходимостиАвтИмпортаЭкспорта()));//&PUREXML

	UserAgentHeaders = ОпределитьUserAgentHeaders(ИмяПользователя);
	стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Неопределено, РесурсНаСервере, UserAgentHeaders,
		ТелоЗапроса, ИмяФайлаРезультата, "");//, Прокси
		
	Результат = ОбработатьРезультатСоединения(стРезультат);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда 
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Статус = Результат.Статус;
	Location = Результат.Location;
	Сессия = Результат.Сессия;
	ИмяФайлаРезультата = Результат.ИмяФайлаРезультата;
	АвторизацияУспешна = Результат.АвторизацияУспешна;
	
	Если Результат.НеобходимаАвторизацияОТП = Истина Тогда
		Если АвторизацияОТППолучитьТелефоныИМаскуПароля(Результат) = Ложь Тогда
			
		КонецЕсли;
	КонецЕсли;
	 	
	Возврат АвторизацияУспешна;
	

КонецФункции // ВыполнитьПроверкуАвторизации()

&НаКлиенте
Функция ПрочитатьПараметрыОТП(ФайлРезультата, ФайлПротокола)

	Попытка
		ПараметрыОТП = ПарсингФайлаПараметровОТП(ФайлРезультата);//, ФайлПротокола);
		Возврат ПараметрыОТП
	Исключение
		Режим = "Авторизация ОТП";
		Сообщить(Режим + ". "// + ОписаниеОшибки() + ". "
			+ "Авторизация не выполнена на этапе чтения параметров.", СтатусСообщения.Важное);
		Возврат Ложь
	КонецПопытки;

КонецФункции	//	ПрочитатьПараметрыОТП(ФайлРезультата, ФайлПротокола)

&НаКлиенте
Функция ПарсингФайлаПараметровОТП(ФайлРезультата) Экспорт

    Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив,,,Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Любой));

	КС = Новый КвалификаторыСтроки(255);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив, , КС);

	row = Ложь;
	UPSTATE = Ложь;
	PTYPE = Ложь;
	PNAME = Ложь;
	RNUM = Ложь;
	тзТелОТП = Новый Массив;
	//тзТелОТП.Колонки.Добавить("PNAME", ОписаниеТиповСтрока, "PNAME",);
	//тзТелОТП.Колонки.Добавить("RNUM", ОписаниеТиповСтрока, "RNUM",);

	num = Ложь;
	length = Ложь;
	//РазмерностьОТП = 20;
	//мnum = Новый Массив(РазмерностьОТП, РазмерностьОТП);
	тзМаскаОТП = Новый Массив;
	//тзМаскаОТП.Колонки.Добавить("num", ОписаниеТиповЧисло, "num",);
	//тзМаскаОТП.Колонки.Добавить("length", ОписаниеТиповЧисло, "length",);

	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ФайлРезультата, , , "UTF-32 (UTF-32)");

	//НомерСтрокиXML = 1;
	Пока Чтение.Прочитать() Цикл
		ТекТег = Ложь;
		ИмяУзла = Чтение.Имя;
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ИмяУзла = "row" Тогда
				row = Истина
			КонецЕсли;
			Если row И ИмяУзла = "col" Тогда
				Пока Чтение.ПрочитатьАтрибут() Цикл
					//ТипУзла = Чтение.ТипУзла;
					Если Чтение.Имя = "name" Тогда
						Если Чтение.Значение = "UPSTATE" Тогда
							ТекТег = "UPSTATE";
							Прервать
						ИначеЕсли Чтение.Значение = "PTYPE" Тогда
							ТекТег = "PTYPE";
							Прервать
						ИначеЕсли Чтение.Значение = "PNAME" Тогда
							ТекТег = "PNAME";
							Прервать
						ИначеЕсли Чтение.Значение = "RNUM" Тогда
							ТекТег = "RNUM";
							Прервать
						КонецЕсли;
					КонецЕсли;
					//ОбработкаПрерыванияПользователя();
				КонецЦикла;
				Если Чтение.Прочитать() Тогда
					Если ТекТег = "UPSTATE" Тогда
						UPSTATE = Чтение.Значение
					ИначеЕсли ТекТег = "PTYPE" Тогда
						PTYPE = Чтение.Значение
					ИначеЕсли ТекТег = "PNAME" Тогда
						PNAME = Чтение.Значение
					ИначеЕсли ТекТег = "RNUM" Тогда
						RNUM = Чтение.Значение
					КонецЕсли
				КонецЕсли;
				Если UPSTATE <> Ложь Тогда
					Если UPSTATE <> "a" Тогда
						Продолжить
					КонецЕсли
				КонецЕсли;
				Если PTYPE <> Ложь Тогда
					Если PTYPE <> "P" Тогда
						Продолжить
					КонецЕсли
				КонецЕсли;
				Если UPSTATE <> Ложь И PTYPE <> Ложь Тогда
					Если PNAME <> Ложь И RNUM <> Ложь Тогда
						
						СтруктураТелоОТП = Новый Структура("PNAME, RNUM", PNAME, RNUM);
						тзТелОТП.Добавить(СтруктураТелоОТП);
						
						//НовСтртзТелОТП = тзТелОТП.Добавить();
						//НовСтртзТелОТП.PNAME = PNAME;
						//НовСтртзТелОТП.RNUM = RNUM;
						PNAME = Ложь;
						RNUM = Ложь
					КонецЕсли
				КонецЕсли
			ИначеЕсли Не row И ИмяУзла = "block" Тогда
				Пока Чтение.ПрочитатьАтрибут() Цикл
					//ТипУзла = Чтение.ТипУзла;
					Если Чтение.Имя = "num" Тогда
						num = Чтение.Значение
					ИначеЕсли Чтение.Имя = "length" Тогда
						length = Чтение.Значение
					КонецЕсли;
					//ОбработкаПрерыванияПользователя()
				КонецЦикла;
				Если num <> Ложь И length <> Ложь Тогда
					
					СтруктураМаскаОТП = Новый Структура("num, length", num, length);
					тзМаскаОТП.Добавить(СтруктураМаскаОТП);
					
					//НовСтртзМаскаОТП = тзМаскаОТП.Добавить();
					//НовСтртзМаскаОТП.num = num;
					//НовСтртзМаскаОТП.length = length;
					num = Ложь;
					length = Ложь
				КонецЕсли;
			КонецЕсли
		//ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяУзла = "row" Тогда
				row = Ложь;
				UPSTATE = Ложь;
				PTYPE = Ложь
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	мТелОТП = Новый Массив(Макс(1, тзТелОТП.Количество()), 2);
	i = 0;
	Для каждого ТелОТП Из тзТелОТП Цикл
		мТелОТП[i][0] = ТелОТП.PNAME;
		мТелОТП[i][1] = ТелОТП.RNUM;
		i = i + 1
	КонецЦикла;
	мМаскаОТП = Новый Массив(Макс(1, тзМаскаОТП.Количество()), 2);
	i = 0;
	Для каждого МаскаОТП Из тзМаскаОТП Цикл
		мМаскаОТП[i][0] = МаскаОТП.num;
		мМаскаОТП[i][1] = МаскаОТП.length;
		i = i + 1
	КонецЦикла;
	стРезультат = Новый Структура();
	стРезультат.Вставить("мТелОТП", мТелОТП);
	стРезультат.Вставить("мМаскаОТП", мМаскаОТП);

	Возврат стРезультат

КонецФункции	//ПарсингФайлаПараметровОТП(ФайлРезультата) Экспорт

&НаКлиенте
Функция АвторизацияОТППолучитьТелефоныИМаскуПароля(СтруктураПараметров)
	
	РесурсНаСервере = "/p24/otp";
	UserAgentHeaders = ОпределитьUserAgentHeaders(ИмяПользователя);
	UserAgent = ПолучитьUserAgent();
	ИмяФайлаРезультата = ПолучитьИмяВрФайла("txt").ПолноеИмя;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Cookie", СтруктураПараметров.Сессия);
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("User-Agent", UserAgentHeaders);
	
	ТелоЗапроса = "otpdevlst=Y" + ПолучитьСуффиксЗапроса()//&nomenu&nolist&XMLONLY"
		+ "&" + UserAgent; //+ EncodeURL(ЗаменитьСС(МаркерНеобходимостиАвтИмпортаЭкспорта()));//PUREXML
		
	стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Неопределено, РесурсНаСервере, UserAgentHeaders,
		ТелоЗапроса, ИмяФайлаРезультата, Сессия);//, Прокси
		
	Результат = ОбработатьРезультатСоединения(стРезультат);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Сессия = СтруктураПараметров.Сессия;
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Результат = ПрочитатьПараметрыОТП(ИмяФайлаРезультата, "");//ФайлПротокола);
	Если Результат = Ложь Тогда
		ТекстСообщения = НСтр("ru='Невозможно установить соединение по причине: ';uk='Неможливо встановити з`єднання з причини'")
			+ ИнформацияОбОшибке().Описание + " "// + ИнформацияОбОшибке().Причина
			+ НСтр("ru='Проверьте доступность сети интернет.';uk='Перевірте доступність мережі інтернет.'");
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат Ложь
	КонецЕсли;
	Сессия = Результат.Сессия;
	СтруктураПараметров.Вставить("мТелОТП", Результат.мТелОТП);
	СтруктураПараметров.Вставить("мМаскаОТП", Результат.мМаскаОТП);
	
	ПараметрыОТПАвторизации = СтруктураПараметров;
	НарисоватьВыборТелефонаОТПОднооконность(ПараметрыОТПАвторизации);
	
	Возврат Истина;
	
КонецФункции //АвторизацияОТППолучитьТелефоныИМаскуПароля(СтруктураПараметров)

&НаКлиенте
Функция АвторизацияОТПОтправитьВыборТелефона(СтруктураПараметров)
	
	IDОТП = СтруктураПараметров.IDОТП;
	
	UserAgentHeaders = ОпределитьUserAgentHeaders(ИмяПользователя);
	UserAgent = ПолучитьUserAgent();
	ИмяФайлаРезультата = ПолучитьИмяВрФайла("txt").ПолноеИмя;
	
	//запрос передачи ID телефона
	РесурсНаСервере = "/p24/news";
	ТелоЗапроса = "otpDevId=" + IDОТП + ПолучитьСуффиксЗапроса()//"&XMLONLY"
		+ "&" + UserAgent;//+ EncodeURL(ЗаменитьСС(МаркерНеобходимостиАвтИмпортаЭкспорта()));//PUREXML
		
	стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Неопределено, РесурсНаСервере, UserAgentHeaders,
		ТелоЗапроса, ИмяФайлаРезультата, Сессия);//, Прокси
		
	Результат = ОбработатьРезультатСоединения(стРезультат);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Сессия = Результат.Сессия;
		Сообщить(Результат.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Сессия = Результат.Сессия;
	Если Результат.Статус = 302 И Найти(Результат.Location, "p24/login") > 0 Тогда
		//Ошибка ОТП авторизации повторить необходимо позже. 
		Возврат Ложь;
	КонецЕсли;
	
	Сессия = Результат.Сессия;
	Возврат Истина;
	
КонецФункции //АвторизацияОТПОтправитьВыборТелефона(СтруктураПараметров)

&НаКлиенте
Функция АвторизацияОТПОтправитьПарольИзSMS(СтруктураПараметров)
	Перем стОТП;
	
	стОТП = СтруктураПараметров.стОТП;
	UserAgentHeaders = ОпределитьUserAgentHeaders(ИмяПользователя);
	UserAgent = ПолучитьUserAgent();
	ИмяФайлаРезультата = ПолучитьИмяВрФайла("txt").ПолноеИмя;
	
	РесурсНаСервере = "/p24/news";
	СтрокаЗапроса = "";//"?";
	Для каждого Элемент Из стОТП Цикл
		СтрокаЗапроса = СтрокаЗапроса + "&" + Элемент.Ключ + "=" + Элемент.Значение
	КонецЦикла;
	СтрокаЗапроса = СтрокаЗапроса + ПолучитьСуффиксЗапроса()//"&PUREXML"
		+ "&" + UserAgent; //+ EncodeURL(ЗаменитьСС(МаркерНеобходимостиАвтИмпортаЭкспорта()));
	ТелоЗапроса = СтрокаЗапроса;
	
	стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Неопределено, РесурсНаСервере, UserAgentHeaders,
		ТелоЗапроса, ИмяФайлаРезультата, Сессия);//, Прокси
		
	Результат = ОбработатьРезультатСоединения(стРезультат);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		Сессия = Результат.Сессия;
		Сообщить(Результат.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат.Статус = 302 И Найти(Результат.Location, "p24/login") > 0 Тогда
		//Ошибка ОТП авторизации повторить необходимо позже. 
		Возврат Ложь;
	КонецЕсли;
	
	Сессия = Результат.Сессия;
	
	Возврат Истина;
	
КонецФункции //АвторизацияОТПОтправитьПарольИзSMS(СтруктураПараметров)


&НаКлиенте
Функция ПолучитьUserAgent()
	Перем Результат;
	
	ТекВерсия = "2.0.1.3";
	ЯзыкПользователя = МетаданныеОсновнойЯзыкИмя();
	ЯзыкПользователяUa = МетаданныеОсновнойЯзыкКодЯзыка();
	
	СисИнфо = Новый СистемнаяИнформация;
	РежимИБ = "КлиентСерверный";
	РежимИБua = "CS";
	РежимЗапуска = "UP";

	
	Результат = "UserAgent=%26Privat24to1%D0%A1%262%2e0%2e1%2e3%26%D0%A3%D0%Bf%D1%80%D0%B0%D0%B2%D0%Bb%D0%B5%D0%Bd%D0%B8%D0%B5%20%D1%82%D0%Be%D1%80%D0%B3%D0%Be%D0%B2%D0%Bb%D0%B5%D0%B9%20%D0%B4%D0%Bb%D1%8f%20%D0%A3%D0%Ba%D1%80%D0%B0%D0%B8%D0%Bd%D1%8b%2e%20%D1%80%D0%B5%D0%B4%D0%B0%D0%Ba%D1%86%D0%B8%D1%8f%203%2e0%263%2e0%2e8%2e1%26%D0%A0%D1%83%D1%81%D1%81%D0%Ba%D0%B8%D0%B9%268%2e3%2e5%2e1383%26%D0%A4%D0%B0%D0%B9%D0%Bb%D0%Be%D0%B2%D1%8b%D0%B9%26version%206%2e2%20%20%28Build%209200%29%26Windows%20x86";
	
	//Результат = "UserAgent=" + EncodeURL(ЗаменитьСС("&Privat24to1С&" + ТекВерсия + "&" + МетаданныеКраткаяИнформация()
	//	+ "&" + МетаданныеВерсия() + "&" + ЯзыкПользователя + "&" + СисИнфо.ВерсияПриложения + "&" + РежимИБ + "&"
	//	+ СисИнфо.ВерсияОС + "&" + СисИнфо.ТипПлатформы));
		

	Возврат Результат;	

КонецФункции // ПолучитьUserAgent()

&НаКлиенте
Функция УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders,
		ТелоЗапроса, ИмяФайлаРезультата, Сессия) Экспорт

		
	Файл = Новый Файл(ИмяФайлаРезультата);
	Если Не Файл.Существует() Тогда 
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаРезультата);
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Закрыть();
	КонецЕсли;
		
	//Сообщить("ИнтернетАдресДляСоединения:"+ИнтернетАдресДляСоединения + " РесурсНаСервере:"+РесурсНаСервере + " ТелоЗапроса:"+ТелоЗапроса);
	//Сообщить("ИмяФайлаРезультата:"+ИмяФайлаРезультата);
	Заголовки = Новый Соответствие();
	Если ЗначениеЗаполнено(Сессия) Тогда
		Заголовки.Вставить("Cookie", Сессия)
	КонецЕсли;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("User-Agent", UserAgentHeaders);
	
	Попытка
		ssl = Новый ЗащищенноеСоединениеOpenSSL;
		Соединение = Новый HTTPСоединение(ИнтернетАдресДляСоединения, , , , Прокси, , ssl)
	Исключение
		Возврат "ОшибкаСоединения"
	КонецПопытки;

	Запрос = Новый HTTPЗапрос(РесурсНаСервере, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	СтрокаОшибки = "";
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультата);
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
		Сообщить(СтрокаОшибки);
		Возврат	"ОшибкаОтправки";
	КонецПопытки;

	Статус = HTTPОтвет.КодСостояния;
	Location = HTTPОтвет.Заголовки["Location"];
	Cookie = HTTPОтвет.Заголовки["Set-Cookie"];

	Если  ИмяФайлаРезультата = "" Тогда
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		//Сообщить("ТелоОтвета:"+ТелоОтвета);
	Иначе
		ТелоОтвета = "";
	КонецЕсли;	

	стРезультат = Новый Структура;
	стРезультат.Вставить("Статус", Статус);
	стРезультат.Вставить("Location", Location);

	//стРезультат.Вставить("Cookie", Cookie);
	Если ЗначениеЗаполнено(Cookie) Тогда
		стРезультат.Вставить("Cookie", Cookie);
	Иначе
		стРезультат.Вставить("Cookie", Сессия);
	КонецЕсли;

	стРезультат.Вставить("ИмяФайлаРезультата", ИмяФайлаРезультата);
	стРезультат.Вставить("ТелоОтвета", ТелоОтвета);
	Возврат	стРезультат

КонецФункции	//	УстановитьСоединение(ИнтернетАдресДляСоединения, Прокси, РесурсНаСервере, UserAgentHeaders, ТелоЗапроса, ФайлРезультата, Сессия)

&НаКлиенте
Функция ОтправитьЗапросПоHTTP(РежимИмпорт = Истина)

	ДатаНачалаПериода = Формат(НачалоПериода, "ДЛФ=Д;ДФ=дд.ММ.гггг");//Формат(ТекДат, "ДЛФ=Д");
	ДатаКонцаПериода = Формат(КонецПериода, "ДЛФ=Д;ДФ=дд.ММ.гггг");//Формат(ТекДат - (ГлубинаЗагрузкиДней - 1) * 3600 * 24, "ДЛФ=Д");

	UserAgentHeaders = ОпределитьUserAgentHeaders(ИмяПользователя);
	
	ФайлЗапроса = ПолучитьИмяВрФайла("txt");
	ФайлРезультата1 = ПолучитьИмяВрФайла("xml");
	ФайлРезультата2 = ПолучитьИмяВрФайла("xml");

	//ИнтернетАдресДляСоединения = "cb.privatbank.ua/p24";
	ИнтернетАдресДляСоединения = "cb.privatbank.ua";
	//НоваяСтрокаСерверы.КолонкаАдресСервера = "p24.privatbank.ua/p24";
	
	
	//	ограничение глубины "выгребания" выписок
	//НачДата =(ТекДат - (ГлубинаЗагрузкиДней - 1) * 3600 * 24);

	//Если ЗначениеЗаполнено(СокрЛП(Счет)) Тогда//Счет.НомерСчета
	ТекСчет = ПолучитьНомерСчета(БанковскийСчет);
	Если ПустаяСтрока(ТекСчет) Тогда 
		ТекСчет = "%25";
	КонецЕсли;
	
	СтрокаЗапроса = "?acc=" + ТекСчет + "&endate=" + ДатаКонцаПериода
		+ "&in_time=" + "d" + "&raccount=" + "%25" + "&stdate=" + ДатаНачалаПериода
		+ "&type_contractor=" + "ACC"
		+ ПолучитьСуффиксЗапроса()//"&nomenu&nolist&PUREXML"
		+ "&" + ПолучитьUserAgent() + EncodeURL(ЗаменитьСС(МаркерНеобходимостиАвтИмпортаЭкспорта()));

		
	ТелоЗапроса = Сред(СтрокаЗапроса, 2);
	стРезультат = Новый Структура;
	стРезультатrest = Новый Структура;

	Для НомерЗапроса = 1 По 1 Цикл
		Если НомерЗапроса = 1 Тогда
			ФайлРезультата = ФайлРезультата1
		Иначе
			ФайлРезультата = ФайлРезультата2
		КонецЕсли;

		Если НомерЗапроса = 1 Тогда
			//	таблица statements
			РесурсНаСервере = "/p24/c2bstatements";
		Иначе
			//	таблица rest
			РесурсНаСервере = "/p24/c2brest";
		КонецЕсли;

		//	ФайлЗапроса - пустой, ФайлРезультата - результат
		стРезультат = УстановитьСоединение(ИнтернетАдресДляСоединения, Неопределено, РесурсНаСервере,
			UserAgentHeaders, ТелоЗапроса, ФайлРезультата.ПолноеИмя, Сессия);	
			
		РезультатСоединения = ОбработатьРезультатСоединения(стРезультат);
		Если НЕ ПустаяСтрока(РезультатСоединения.ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru='Платежи не получены. ';uk='Платежі не отримані. '");
			Сообщить(ТекстСообщения);
			Сообщить(РезультатСоединения.ОписаниеОшибки);
			Возврат "";
		КонецЕсли;
		
		// обработка ответа *.xml и расшифровка
		//стРезультатОбработки = ОбработкаОтветаHTTP(ФайлРезультата.ПолноеИмя, НомерЗапроса, стРезультат, Надпись, ВыбИндикатор);
		Если НомерЗапроса = 1 Тогда
			ТекстСообщения = НСтр("ru='. Обработка XML платежей при импорте.';uk='. Обробка XML платежів при імпорті.'")	;
			Состояние(ТекстСообщения);
			стРезультатОбработкиstatements = ПрочитатьТекстXMLstatements(ФайлРезультата.ПолноеИмя, НомерЗапроса, стРезультат)
		Иначе
			ТекстСообщения = НСтр("ru='. Обработка XML счетов при импорте.';uk='. Обробка XML рахунків при імпорті.'")	;
			Состояние(ТекстСообщения);
			стРезультатОбработкиrest = ПрочитатьТекстXMLrest(ФайлРезультата.ПолноеИмя, НомерЗапроса, стРезультатrest);
			//***стРезультатОбработкиrest = Новый Структура;
		КонецЕсли
	
	КонецЦикла;

	Если РежимИмпорт Тогда
		МассивСтрок = ПодготовитьРезультатКЗагрузке(стРезультатОбработкиstatements);
		ЗагрузитьВыпискуOnLine(МассивСтрок);
	КонецЕсли

КонецФункции	//	ОтправитьЗапросПоHTTP(Надпись, ВыбИндикатор, Картинка)

&НаКлиенте
Функция ПроверитьВозможностьИмпортаСтроки(стРезультатОбработки, НомерСтрокиRow) 
	
	Результат = Истина;
	//
	Если Не стРезультатОбработки.flinfo[НомерСтрокиRow] = "r" Тогда ////статус платежа flinfo="r"- реальное "i"-информационное
		Результат = Ложь;
	КонецЕсли;
	
	//	не учитываем Банковские ордера
	Если стРезультатОбработки.doctype[НомерСтрокиRow] = "j" Тогда	//	тип платежа doctype="j" - Банковский ордер
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Функция ПодготовитьРезультатКЗагрузке(стРезультатОбработки)
	Перем Результат;
	
	Результат = Новый Массив;
	
	Для НомерСтрокиRow=0 По стРезультатОбработки.rown.ВГраница() Цикл
		
		Если Не ПроверитьВозможностьИмпортаСтроки(стРезультатОбработки, НомерСтрокиRow) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДатаСтр = СокрЛП(стРезультатОбработки.postdate[НомерСтрокиRow]);
		ДатаДок = Дата(Лев(ДатаСтр, 4), Сред(ДатаСтр, 5, 2), Сред(ДатаСтр, 7, 2),
			Сред(ДатаСтр, 10, 2), Сред(ДатаСтр, 13, 2), Сред(ДатаСтр, 16, 2));
			
		Если ДатаДок <= НачалоДня(НачалоПериода) Или ДатаДок >= КонецДня(КонецПериода) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаДок = 0;
		Попытка
			СуммаДок = Число(стРезультатОбработки.amt[НомерСтрокиRow])
		Исключение
			СуммаДок = стРезультатОбработки.amt[НомерСтрокиRow]
		КонецПопытки;

		СтруктураСтроки = Новый Структура("ДатаВыписки, Сумма, СчетПлательщика, СчетОплаты, Плательщик, Получатель, Назначение");
		СтруктураСтроки.ДатаВыписки = ДатаДок;
		СтруктураСтроки.Сумма = СуммаДок;
		СтруктураСтроки.СчетПлательщика = СокрЛП(стРезультатОбработки.danumber[НомерСтрокиRow]);
		СтруктураСтроки.СчетОплаты = СокрЛП(стРезультатОбработки.canumber[НомерСтрокиRow]); 
		СтруктураСтроки.Плательщик = СокрЛП(стРезультатОбработки.dname[НомерСтрокиRow]);
		СтруктураСтроки.Получатель = СокрЛП(стРезультатОбработки.cname[НомерСтрокиRow]);
		СтруктураСтроки.Назначение = СокрЛП(стРезультатОбработки.purpose[НомерСтрокиRow]);
		
		Результат.Добавить(СтруктураСтроки);
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПодготовитьРезультатКЗагрузке()
 
&НаКлиенте
Функция ОпределитьUserAgentHeaders(Пользователь)

	//UserAgentHeaders = "1C+Enterprise|" + ВерсияПриложенияКратко + "|" + ПолучитьКлиент() + "|"
	//	+ EncodeURL(ЗаменитьСС(СокрЛП(ИмяПользователя))) + "|" + ТекВерсия + "|"
	//	+ Лев(Транслитерация(ЗаменитьСС(ИДКонфигурации())), 20) + "|" + МетаданныеВерсия() + "|"
	//	+ СисИнфо.ВерсияПриложения + "|" + РежимИБua + "|" + РежимЗапуска + "|"
	//	+ ЯзыкПользователяUa + "|" + СокрЛП(СисИнфо.ВерсияОС) + "|" + СокрЛП(СисИнфо.ТипПлатформы) + "|"
	//	+ МаркерНеобходимостиАвтИмпортаЭкспорта();

	//Результат = "1C+Enterprise|" + "8.3";
	
	Результат = "1C+Enterprise|8.3|TnK|%1|2.0.1.3|ut3|3.0.8.1|8.3.5.1383|Fl|UP|ru|version 6.2  (Build 9200)|Windows x86|" ;
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, EncodeURL(ЗаменитьСС(СокрЛП(ИмяПользователя))));
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПолучитьИмяВрФайла(Расширение = "")

	Путь = ПолучитьИмяВременногоФайла(Расширение);
	Файл = Новый Файл(Путь);
	
	Возврат Файл;
	 
КонецФункции // ПолучитьИмяВрФайла()

&НаКлиенте
Функция ПрочитатьТекстXMLstatements(ПолноеИмяФайла, НомерЗапроса, стРезультат)//, ЗаданныйНомерСтрокиRow)

	//Попытка
		Возврат ПрочитатьТекстXMLstatementsПарсинг(ПолноеИмяФайла, НомерЗапроса, стРезультат)
	//Исключение
	//	Режим = "Импорт платежей. Этап 1";
	//	Сообщить(Режим + ". "// + ОписаниеОшибки() + ". "
	//		+ "Импорт платежей не выполнен.", СтатусСообщения.Важное);
	//	Возврат стРезультат
	//КонецПопытки;

КонецФункции

&НаКлиенте
Функция ПрочитатьТекстXMLstatementsПарсинг(ПолноеИмяФайла, НомерЗапроса, стРезультат)//, ЗаданныйНомерСтрокиRow)

	//	таблица statements
	Тегrow = Ложь;
	Тегinfo = Ложь;
	Тегamount = Ложь;
	Тегdebet = Ложь;
	Тегcredit = Ложь;
	Тегpurpose = Ложь;
	ТегrefВнутр = Ложь;
	ЗаданныйНомерСтрокиRow = -1;

	Для j = 1 По 2 Цикл
		//	определение размерности массива
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ПолноеИмяФайла, , , "UTF-32 (UTF-32)");
		Если j = 1 Тогда
			РазмерностьМассива = 0;
			Пока Чтение.Прочитать() Цикл
				Если Чтение.Имя = "row" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.ПрочитатьАтрибут() Тогда
						Если Чтение.Имя = "n" Тогда	//	номер строки row
							//РазмерностьМассива = Чтение.Значение
							РазмерностьМассива = РазмерностьМассива + 1
						КонецЕсли
					КонецЕсли
				КонецЕсли
			КонецЦикла;
			Попытка
				КолПлатежейstatements = Число(РазмерностьМассива) + 2
			Исключение
				КолПлатежейstatements = 5000
			КонецПопытки;
			сзСумЗагружДок = Новый СписокЗначений;
			rown = Новый Массив(КолПлатежейstatements);
			numberdoc = Новый Массив(КолПлатежейstatements);
			postdate = Новый Массив(КолПлатежейstatements);
			state = Новый Массив(КолПлатежейstatements);
			flinfo = Новый Массив(КолПлатежейstatements);
			amt = Новый Массив(КолПлатежейstatements);
			ccy = Новый Массив(КолПлатежейstatements);
			dname = Новый Массив(КолПлатежейstatements); //ИмяОрганизации
			danumber = Новый Массив(КолПлатежейstatements); //НомерБанкСчетаОрг
			dcrf = Новый Массив(КолПлатежейstatements); //КодОрганизации
			dcode = Новый Массив(КолПлатежейstatements);
			cname = Новый Массив(КолПлатежейstatements); //ИмяКонтрагента
			canumber = Новый Массив(КолПлатежейstatements); //НомерБанкСчетаКонтр
			ccrf = Новый Массив(КолПлатежейstatements); //КодКонтрагента
			ccode = Новый Массив(КолПлатежейstatements);
			dbank = Новый Массив(КолПлатежейstatements);
			dcity = Новый Массив(КолПлатежейstatements);
			cbank = Новый Массив(КолПлатежейstatements);
			ccity = Новый Массив(КолПлатежейstatements);
			ref = Новый Массив(КолПлатежейstatements);
			refВнутр = Новый Массив(КолПлатежейstatements);
			purpose = Новый Массив(КолПлатежейstatements);  //назначение платежа.
			doctype = Новый Массив(КолПлатежейstatements);
			//cusAccType = Новый Массив(КолПлатежейstatements);
			//account = Новый Массив(КолПлатежейstatements);
			СуммаДок = Новый Массив(КолПлатежейstatements);
			ДатаДок = Новый Массив(КолПлатежейstatements);
			Загружаем = Новый Массив(КолПлатежейstatements);
			НовыйДок = Новый Массив(КолПлатежейstatements);
			
			//ИмяОрганизации = СокрЛП(стРезультатОбработки.dname[НомерСтрокиRow]);
			//КодОрганизации = СокрЛП(стРезультатОбработки.dcrf[НомерСтрокиRow]);
			//НомерБанкСчетаОрг = СокрЛП(стРезультатОбработки.danumber[НомерСтрокиRow]);
			//КодБанкаОрганизации = СокрЛП(стРезультатОбработки.dcode[НомерСтрокиRow]);
			//ИмяБанкаОрганизации = СокрЛП(стРезультатОбработки.dbank[НомерСтрокиRow]);
			//ГородБанкаОрганизации = СокрЛП(стРезультатОбработки.dcity[НомерСтрокиRow]);

			//ИмяКонтрагента = СокрЛП(стРезультатОбработки.cname[НомерСтрокиRow]);
			//КодКонтрагента = СокрЛП(стРезультатОбработки.ccrf[НомерСтрокиRow]);
			//НомерБанкСчетаКонтр = СокрЛП(стРезультатОбработки.canumber[НомерСтрокиRow]);
			//КодБанкаКонтрагента = СокрЛП(стРезультатОбработки.ccode[НомерСтрокиRow]);
			//ИмяБанкаКонтрагента = СокрЛП(стРезультатОбработки.cbank[НомерСтрокиRow]);
			//ГородБанкаКонтрагента = СокрЛП(стРезультатОбработки.ccity[НомерСтрокиRow]);

	
		Иначе

	~М2:	Пока Чтение.Прочитать() Цикл
				Если Не Тегrow Тогда
					Если Чтение.Имя = "row" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Если Чтение.ПрочитатьАтрибут() Тогда
							Если Чтение.Имя = "n" Тогда	//	номер строки row
								ТегrefВнутр = Ложь;
								//Если Чтение.Значение <> "0" Тогда
								ЗаданныйНомерСтрокиRow = ЗаданныйНомерСтрокиRow + 1;
								//КонецЕсли;
								//Если Чтение.Значение = Строка(ЗаданныйНомерСтрокиRow) Тогда
									Тегrow = Истина;
									rown[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
									Продолжить
								//КонецЕсли
							ИначеЕсли Чтение.Имя = "key" Тогда
								Если Чтение.Значение = "BPL_DLR" И Лев(ref[ЗаданныйНомерСтрокиRow], 4) = "JBKL" Тогда
									ТегrefВнутр = Истина
								КонецЕсли
							КонецЕсли
						КонецЕсли
					КонецЕсли;
					Если ТегrefВнутр И Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
						refВнутр[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
						ТегrefВнутр = Ложь;
						//ЗаданныйНомерСтрокиRow = ЗаданныйНомерСтрокиRow + 1
					КонецЕсли;
					Продолжить
				КонецЕсли;
				Если Чтение.Имя = "row" И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Тегrow = Ложь;
					Продолжить
				КонецЕсли;
				Если Чтение.Имя = "info" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Тегinfo = Истина
				КонецЕсли;
				Если Чтение.Имя = "info" И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Тегinfo = Ложь
				КонецЕсли;
				Если Чтение.Имя = "amount" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Тегamount = Истина
				КонецЕсли;
				Если Чтение.Имя = "amount" И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Тегamount = Ложь
				КонецЕсли;
				Если Чтение.Имя = "debet" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Тегdebet = Истина
				КонецЕсли;
				Если Чтение.Имя = "debet" И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Тегdebet = Ложь
				КонецЕсли;
				Если Чтение.Имя = "credit" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Тегcredit = Истина
				КонецЕсли;
				Если Чтение.Имя = "credit" И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Тегcredit = Ложь
				КонецЕсли;
				Если Чтение.Имя = "purpose" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Тегpurpose = Истина
				КонецЕсли;
				Если Чтение.Имя = "purpose" И Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Тегpurpose = Ложь
				КонецЕсли;

				ИмяУзла = Чтение.Имя;
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Пока Чтение.ПрочитатьАтрибут() Цикл
						Если Тегrow Тогда
							Если Тегinfo Тогда
								Если Чтение.Имя = "number" Тогда	//	номер документа
									numberdoc[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "postdate" Тогда	//	дата
									postdate[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
									//postdate = Дата(Лев(ДатаСтр, 4), Сред(ДатаСтр, 5, 2), Сред(ДатаСтр, 7, 2),
									//	Сред(ДатаСтр, 10, 2), Сред(ДатаСтр, 13, 2), Сред(ДатаСтр, 16, 2))
								ИначеЕсли Чтение.Имя = "state" Тогда	//	статус платежа state= r - проведен, t - сторнирован
									state[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "flinfo" Тогда	//	флаг платежа state="r"- реальное "i"-информационное
									flinfo[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "ref" Тогда	//	референс
									ref[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "doctype" Тогда	//	тип документа
									doctype[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								КонецЕсли;
							ИначеЕсли Тегamount Тогда
								Если Чтение.Имя = "amt" Тогда	//	сумма
									amt[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "ccy" Тогда	//	валюта
									ccy[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								КонецЕсли;
							ИначеЕсли Тегdebet Тогда
								Если Чтение.Имя = "name" Тогда	//	р/с
									dname[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "number" Тогда	//	контрагент
									danumber[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "crf" Тогда	//	ОКПО
									dcrf[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "code" Тогда	//	МФО
									dcode[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								КонецЕсли
							ИначеЕсли Тегcredit Тогда
								Если Чтение.Имя = "name" Тогда	//	р/с
									cname[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "number" Тогда	//	контрагент
									canumber[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "crf" Тогда	//	ОКПО
									ccrf[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								ИначеЕсли Чтение.Имя = "code" Тогда	//	МФО
									ccode[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								КонецЕсли
							КонецЕсли;
						КонецЕсли;
					КонецЦикла

				ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда

					//	узлы, используемые до расшифровки
					Если Тегdebet Тогда
						//Если ИмяУзла = "debet" Тогда
						//	debet = Чтение.Значение
						//ИначеЕсли ИмяУзла = "account" Тогда
						//	account = Чтение.Значение
						//ИначеЕсли ИмяУзла = "customer" Тогда
						//	customer = Чтение.Значение
						//+	в связи с некорректностью чтения
						//Если ИмяУзла = "bank" Тогда
						//	dbank = Чтение.Значение
						//ИначеЕсли ИмяУзла = "city" Тогда
						//	dcity = Чтение.Значение
						//КонецЕсли
						//-	в связи с некорректностью чтения
						Если ИмяУзла = "#text" Тогда
							Если dcity[ЗаданныйНомерСтрокиRow] = Неопределено Тогда
								dcity[ЗаданныйНомерСтрокиRow] = Чтение.Значение
							Иначе
								dbank[ЗаданныйНомерСтрокиRow] = Чтение.Значение
							КонецЕсли
						КонецЕсли
					ИначеЕсли Тегcredit Тогда
						//+	в связи с некорректностью чтения
						//Если ИмяУзла = "bank" Тогда
						//	cbank = Чтение.Значение
						//ИначеЕсли ИмяУзла = "city" Тогда
						//	ccity = Чтение.Значение
						//КонецЕсли
						//- в связи с некорректностью чтения
						Если ИмяУзла = "#text" Тогда
							Если ccity[ЗаданныйНомерСтрокиRow] = Неопределено Тогда
								ccity[ЗаданныйНомерСтрокиRow] = Чтение.Значение
							Иначе
								cbank[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								//ЗаданныйНомерСтрокиRow = ЗаданныйНомерСтрокиRow + 1;
							КонецЕсли
						КонецЕсли
					ИначеЕсли Тегpurpose Тогда
						purpose[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
						////ЗаданныйНомерСтрокиRow = ЗаданныйНомерСтрокиRow + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если ЗначениеЗаполнено(rown[ЗаданныйНомерСтрокиRow]) Тогда
				ЗаданныйНомерСтрокиRow = ЗаданныйНомерСтрокиRow + 1;
				Перейти ~М2
			КонецЕсли;
			стРезультат.Вставить("rown", rown);
			стРезультат.Вставить("numberdoc", numberdoc);
			стРезультат.Вставить("postdate", postdate);
			стРезультат.Вставить("state", state);
			стРезультат.Вставить("flinfo", flinfo);
			стРезультат.Вставить("amt", amt);
			стРезультат.Вставить("ccy", ccy);

			стРезультат.Вставить("dname", dname);
			стРезультат.Вставить("danumber", danumber);
			стРезультат.Вставить("dcrf", dcrf);
			стРезультат.Вставить("dcode", dcode);
			стРезультат.Вставить("cname", cname);
			стРезультат.Вставить("canumber", canumber);
			стРезультат.Вставить("ccrf", ccrf);
			стРезультат.Вставить("ccode", ccode);
			стРезультат.Вставить("dbank", dbank);
			стРезультат.Вставить("dcity", dcity);
			стРезультат.Вставить("cbank", cbank);
			стРезультат.Вставить("ccity", ccity);
			стРезультат.Вставить("purpose", purpose);
			стРезультат.Вставить("ref", ref);
			стРезультат.Вставить("refВнутр", refВнутр);
			стРезультат.Вставить("doctype", doctype);
			стРезультат.Вставить("СуммаДок", СуммаДок);
			стРезультат.Вставить("ДатаДок", ДатаДок);
			стРезультат.Вставить("Загружаем", Загружаем);
			стРезультат.Вставить("НовыйДок", НовыйДок);

		КонецЕсли;
	КонецЦикла;

	Возврат стРезультат

КонецФункции //ПрочитатьТекстXMLstatementsПарсинг(ПолноеИмяФайла, НомерЗапроса, стРезультат)

&НаКлиенте
Функция ПрочитатьТекстXMLrest(ПолноеИмяФайла, НомерЗапроса, стРезультатrest)//, ЗаданныйНомерСтрокиRow)

	Попытка
		Возврат ПрочитатьТекстXMLrestПарсинг(ПолноеИмяФайла, НомерЗапроса, стРезультатrest)
	Исключение
		Режим = "Импорт платежей. Этап 2";
		Сообщить(Режим + ". "// + ОписаниеОшибки() + ". ""
			+ "Импорт платежей не выполнен.", СтатусСообщения.Важное);
		Возврат стРезультатrest;
	КонецПопытки;

КонецФункции

&НаКлиенте
Функция ПрочитатьТекстXMLrestПарсинг(ПолноеИмяФайла, НомерЗапроса, стРезультатrest)

	Для j = 1 По 2 Цикл
		//	определение размерности массива
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ПолноеИмяФайла, , , "UTF-32 (UTF-32)");
		Если j = 1 Тогда
			Пока Чтение.Прочитать() Цикл
				Если Чтение.Имя = "row" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.ПрочитатьАтрибут() Тогда
						Если Чтение.Имя = "n" Тогда	//	номер строки row
							РазмерностьМассива = Чтение.Значение
						КонецЕсли
					КонецЕсли
				КонецЕсли
			КонецЦикла;
			Попытка
				КолПлатежейrest = Число(РазмерностьМассива) + 2
			Исключение
				КолПлатежейrest = 5000;
			КонецПопытки;
			rown = Новый Массив(КолПлатежейrest);
			account = Новый Массив(КолПлатежейrest);
			cusAccType = Новый Массив(КолПлатежейrest);
            debet = Новый Массив(КолПлатежейrest);
			credit = Новый Массив(КолПлатежейrest);
			inrest = Новый Массив(КолПлатежейrest);
			outrest = Новый Массив(КолПлатежейrest);
			ccy = Новый Массив(КолПлатежейrest);
			НомерТега_n = Неопределено;
		Иначе

			//	таблица rest
			ЗаданныйНомерСтрокиRow = 0;
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(ПолноеИмяФайла, , , "UTF-32 (UTF-32)");
			Тегrow = Ложь;
			Тегdebet = Ложь;
			Тегcredit = Ложь;
			Тегinrest = Ложь;
			Тегoutrest = Ложь;
			ЗаданныйНомерСтрокиRow = 0;

	~М3:	Пока Чтение.Прочитать() Цикл
				Если Не Тегrow Тогда
					Если Чтение.Имя = "row" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Если Чтение.ПрочитатьАтрибут() Тогда
							Если Чтение.Имя = "n" Тогда	//	номер строки row
								//Если Чтение.Значение = Строка(ЗаданныйНомерСтрокиRow) Тогда
									Тегrow = Истина;
									rown[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
									НомерТега_n = ЗаданныйНомерСтрокиRow;//Чтение.Значение;
									Продолжить
								//КонецЕсли
							КонецЕсли
						КонецЕсли
					КонецЕсли;
					Продолжить
				КонецЕсли;
				Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Если Чтение.Имя = "row" Тогда
						Тегrow = Ложь;
						ЗаданныйНомерСтрокиRow = ЗаданныйНомерСтрокиRow + 1;
						Продолжить
					ИначеЕсли Чтение.Имя = "debet" Тогда
						Тегdebet = Ложь;
					ИначеЕсли Чтение.Имя = "credit" Тогда
						Тегcredit = Ложь;
					ИначеЕсли Чтение.Имя = "inrest" Тогда
						Тегinrest = Ложь;
					ИначеЕсли Чтение.Имя = "outrest" Тогда
						Тегoutrest = Ложь;
					КонецЕсли
				КонецЕсли;
				Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Чтение.Имя = "turn" Тогда
						Пока Чтение.ПрочитатьАтрибут() Цикл
							Если Чтение.Имя = "account" Тогда	//	номер счета
								account[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
							ИначеЕсли Чтение.Имя = "cusAccType" Тогда	//	номер документа
								cusAccType[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
								//Прервать
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Чтение.Имя = "ccy" Тогда
						Пока Чтение.ПрочитатьАтрибут() Цикл
							Если Чтение.Имя = "code" Тогда	//	валюта
								ccy[ЗаданныйНомерСтрокиRow] = Чтение.Значение;
							КонецЕсли
						КонецЦикла
					ИначеЕсли Чтение.Имя = "debet" Тогда
						Тегdebet = Истина
					ИначеЕсли Чтение.Имя = "credit" Тогда
						Тегcredit = Истина
					ИначеЕсли Чтение.Имя = "inrest" Тогда
						Тегinrest = Истина
					ИначеЕсли Чтение.Имя = "outrest" Тогда
						Тегoutrest = Истина
					КонецЕсли
				КонецЕсли;
				Если Чтение.ТипУзла = ТипУзлаXML.Текст И НомерТега_n = ЗаданныйНомерСтрокиRow Тогда
					Если Тегoutrest = Истина Тогда
						outrest[ЗаданныйНомерСтрокиRow] = Чтение.Значение
					ИначеЕсли Тегdebet = Истина Тогда
						debet[ЗаданныйНомерСтрокиRow] = Чтение.Значение
					ИначеЕсли Тегcredit = Истина Тогда
						credit[ЗаданныйНомерСтрокиRow] = Чтение.Значение
					ИначеЕсли Тегinrest = Истина Тогда
						inrest[ЗаданныйНомерСтрокиRow] = Чтение.Значение
					КонецЕсли
				КонецЕсли
			КонецЦикла;

			стРезультатrest.Вставить("rown", rown);
			стРезультатrest.Вставить("cusAccType", cusAccType);
			стРезультатrest.Вставить("account", account);
			стРезультатrest.Вставить("debet", debet);
			стРезультатrest.Вставить("credit", credit);
			стРезультатrest.Вставить("inrest", inrest);
			стРезультатrest.Вставить("outrest", outrest);
			стРезультатrest.Вставить("ccy", ccy);

			КонецЕсли
		КонецЦикла;

	Возврат стРезультатrest

КонецФункции //ПрочитатьТекстXMLrestПарсинг(ПолноеИмяФайла, НомерЗапроса, стРезультат)

&НаСервере
Функция МаркерНеобходимостиАвтИмпортаЭкспорта()

	//В теории если необходимо автоимпорт, то необходимо указывать 
	//МаркерНеобходимостиАвтИмпортаЭкспорта = "&" + "MakeAutoImportExport"//"НуженАвтоИмпЭксп"
	
	//Если просто за период загружаем, тогда пропускаем этот шаг. 
	МаркерНеобходимостиАвтИмпортаЭкспорта = "" ;
	
	Возврат МаркерНеобходимостиАвтИмпортаЭкспорта;

КонецФункции

&НаСервере
Функция МетаданныеКраткаяИнформация()

	Возврат Метаданные.КраткаяИнформация

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерСчета(БанковскийСчет)
	
	Если БанковскийСчет.Пустая() Тогда 
		Возврат "";		
	КонецЕсли;
	
	Счет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	Возврат СокрЛП(Строка(Счет));
	
КонецФункции // ПолучитьНомерСчета()
 
Функция ПолучитьСуффиксЗапроса() Экспорт

	Возврат "&XMLONLY=true&nomenu=true&nolist=true&PUREXML=true"

КонецФункции

Функция EncodeURL(value) Экспорт

	table = "%20,%21,%22,%23,%24,%25,%26,%27,%28,%29,%2a,%2b,%2c,%2d,%2e,%2f";//спецсимволы
	table1 = "%3a,%3b,%3c,%3d,%3e,%3f,%40";//спецсимволы
	table2 = "%5b,%5c,%5d,%5e,%5f,%60";//спецсимволы
	table3 = "%7b,%7c,%7d,%7e";//спецсимволы
	//а-п %D0%B0-%D0%BF
	table4 = "%D0%B0,%D0%B1,%D0%B2,%D0%B3,%D0%B4,%D0%B5,%D0%B6,%D0%B7,%D0%B8,%D0%B9,%D0%Ba,%D0%Bb,%D0%Bc,%D0%Bd,%D0%Be,%D0%Bf";
	//р-я %D1%80-%D1%8F
	table5 = "%D1%80,%D1%81,%D1%82,%D1%83,%D1%84,%D1%85,%D1%86,%D1%87,%D1%88,%D1%89,%D1%8a,%D1%8b,%D1%8c,%D1%8d,%D1%8e,%D1%8f";
	//А-П %D0%90-%D0%9F
	table6 = "%D0%90,%D0%91,%D0%92,%D0%93,%D0%94,%D0%95,%D0%96,%D0%97,%D0%98,%D0%99,%D0%9A,%D0%9B,%D0%9C,%D0%9D,%D0%9E,%D0%9F";
	//Р-Я %%D0%A0-
	table7 = "%D0%A0,%D0%A1,%D0%A2,%D0%A3,%D0%A4,%D0%A5,%D0%A6,%D0%A7,%D0%A8,%D0%A9,%D0%AA,%D0%AB,%D0%AC,%D0%AD,%D0%AE,%D0%AF";

	result = "";
	//32-47,58-64,91-96,123-126/спецсимволы
	//48-57 цифры, 65-90 б.лат., 97-122 мал.лат.
	//І	1030	і	1110	Ї	1031	ї	1111	Є	1028	є	1108	Ґ	1168	ґ	1169
	//,160-383,402,506-511,710,711,713,728- не реализовал
	Для i = 1 По СтрДлина(value) Цикл
		symbol = Сред(value, i, 1);
		code = КодСимвола(symbol);
		Если code >= 48 И code <= 57 Или code >= 65 И code <= 90 Или code >= 97 И code <= 122 Тогда//Цифры/Бол.Англ./мал.Англ.
			//передаем как есть
			result = result + symbol
		ИначеЕсли code >= 32 И code <= 47 Тогда//спецсимволы
			//здесь и дальше преобразовываем
			result = result + Сред(table, (code - 31) * 4 - 3, 3)
		ИначеЕсли code >= 58 И code <= 64 Тогда//спецсимволы
			result = result + Сред(table1, (code - 57) * 4 - 3, 3)
		ИначеЕсли code >= 91 И code <= 96 Тогда//спецсимволы
			result = result + Сред(table2, (code - 90) * 4 - 3, 3)
		ИначеЕсли code >= 123 И code <= 126 Тогда//спецсимволы
			result = result + Сред(table3, (code - 122) * 4 - 3, 3)
		ИначеЕсли code >= 1072 И code <= 1087 Тогда//рус.мал.
			result = result + Сред(table4, (code - 1071) * 7 - 6, 6)
		ИначеЕсли code >= 1088 И code <= 1103 Тогда//рус.мал.
			result = result + Сред(table5, (code - 1087) * 7 - 6, 6)
		ИначеЕсли code >= 1040 И code <= 1055 Тогда//рус.бол.
			result = result + Сред(table6, (code - 1039) * 7 - 6, 6)
		ИначеЕсли code >= 1056 И code <= 1071 Тогда//рус.бол.
			result = result + Сред(table7, (code - 1055) * 7 - 6, 6)
		ИначеЕсли code = 1030 Тогда//І	1030
			result = result + "%D0%86"
		ИначеЕсли code = 1110 Тогда//і	1110
			result = result + "%D1%96"
		ИначеЕсли code = 1031 Тогда//Ї	1031
			result = result + "%D0%87"//"%cf"
		ИначеЕсли code = 1111 Тогда//ї	1111
			result = result + "%D1%97"//"%ef"
		ИначеЕсли code = 1031 Тогда//Є	1028
			result = result + "%D0%84"
		ИначеЕсли code = 1031 Тогда//є	1108
			result = result + "%D1%94"
		ИначеЕсли code = 1031 Тогда//Ґ	1168
			result = result + "%D2%90"
		ИначеЕсли code = 1031 Тогда//ґ	1169
			result = result + "%D2%91"
		Иначе
			//не включаем
		КонецЕсли
	КонецЦикла;

	Возврат result

КонецФункции	//	EncodeURL(value)

Функция ЗаменитьСС(ВхТекст) Экспорт

	Текст = СокрЛП(ВхТекст);
	
	Текст = СтрЗаменить(Текст, Символ(34), Символ(34) + Символ(34));//	экранировать кавычку двойную
	Текст = СтрЗаменить(Текст, ",", ".");
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	Текст = СтрЗаменить(Текст, Символы.ВК, "");
	Текст = СтрЗаменить(Текст, "І", "I");
	Текст = СтрЗаменить(Текст, "і", "i");
	Текст = СтрЗаменить(Текст, "Ї", "I");
	Текст = СтрЗаменить(Текст, "ї", "i");
	Текст = СтрЗаменить(Текст, "№", "N");
	Текст = СтрЗаменить(Текст, "Є", "E");
	Текст = СтрЗаменить(Текст, "є", "e");
	Текст = СтрЗаменить(Текст, Символ(160), "");//	убрать разделитель триад чисел

	Возврат Текст;

КонецФункции

&НаСервере
Функция МетаданныеОсновнойЯзыкКодЯзыка()

	Возврат Метаданные.ОсновнойЯзык.КодЯзыка

КонецФункции

Функция МетаданныеОсновнойЯзыкИмя()

	Возврат Метаданные.ОсновнойЯзык.Имя;

КонецФункции

Функция МетаданныеВерсия()

	Возврат Метаданные.Версия;

КонецФункции

&НаКлиенте
Функция НарисоватьВыборТелефонаОТПОднооконность(ПараметрыОТПАвторизации)

	ДобавитьЭлементыТелефоныОТП(ПараметрыОТПАвторизации.мТелОТП);

	Элементы.ГруппаТелоФормы.ТекущаяСтраница = Элементы.СтраницаОТП;
    Элементы.СтраницаОТП.Заголовок = НСтр("ru='Выбор телефона';uk='Вибір телефону'");

	Элементы.ДекорацияНадпись.Заголовок = НСтр("ru='Выбор телефона';uk='Вибір телефону'");
	Элементы.ДекорацияНадпись.Подсказка = НСтр("ru='Выбор телефона';uk='Вибір телефону'");
	Элементы.ДекорацияНадпись.Видимость = Истина

КонецФункции	//	Функция НарисоватьВыборТелефонаОТПОднооконность(мТелОТП)

&НаСервере
Процедура ДобавитьЭлементыТелефоныОТП(мТелОТП)

	//	поля телефонов
	ШрифтТел = Новый Шрифт(, 12, , , , );

	ВыбЗначение = 1;
	Для каждого Телефон Из мТелОТП Цикл
		ИмяРеквизита = "Телефон" + Строка(ВыбЗначение);

		Попытка
			ДобавляемыеРеквизиты = Новый Массив;
			ТипРеквизита = Новый Массив;
			ТипРеквизита.Добавить(Тип("Строка"));
			ОписаниеТипаРеквизита = Новый ОписаниеТипов(ТипРеквизита);
			РеквизитТелефон = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаРеквизита);
			//РеквизитТелефон.Заголовок = НСтр("ru='Выберите телефон для входа:';uk='Виберіть телефон для входу:'");
			ДобавляемыеРеквизиты.Добавить(РеквизитТелефон);
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);//, ДобавляемыеРеквизиты
		Исключение
		КонецПопытки;

		Если ВыбЗначение = 1 Тогда
			Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаТелефоны);//СтраницаОТП
			Элемент.ПутьКДанным = ИмяРеквизита;
			Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
			//Элемент.КоличествоКолонок = 1;
		Иначе
		КонецЕсли;
		//Элемент.Заголовок = Телефон[0];
		Элемент.КоличествоКолонок = 1;
		Элемент.СписокВыбора.Добавить(Телефон[1], Телефон[0]);
		//Элемент.ПервыйВГруппе = Истина;
		
		Элемент.Шрифт = ШрифтТел;

		ВыбЗначение = ВыбЗначение + 1;
	КонецЦикла;

	КомандаВыбратьТелОТП = ЭтаФорма.Команды.Добавить("КомандаВыбратьТелОТП");
	КомандаВыбратьТелОТП.Действие = "ВыборТелефонаОТПОднооконность";
	КомандаВыбратьТелОТП.Заголовок = "Выбрать";

	КомандаОтменаВыбораТелОТП = ЭтаФорма.Команды.Добавить("КомандаОтменаВыбораТелОТП");
	КомандаОтменаВыбораТелОТП.Действие = "ОтменаВыбораТелОТП";
	КомандаОтменаВыбораТелОТП.Заголовок = "Отмена";

	//	поля кнопок
	ИмяКнопки = "КнопкаВыбрать";
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ГруппаКнопкиДействия);
	Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Элемент.ИмяКоманды = "КомандаВыбратьТелОТП";
	Элемент.Заголовок = "Выбрать";

	ИмяКнопки = "КнопкаОтмена";
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ГруппаКнопкиДействия);
	Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Элемент.ИмяКоманды = "КомандаОтменаВыбораТелОТП";
	Элемент.Заголовок = "Отмена";

КонецПроцедуры	//	ДобавитьЭлементыТелефоныОТП(мТелОТП)

&НаКлиенте
Функция ВыборТелефонаОТПОднооконность()

	IDОТП = 0;
	Для каждого Телефон Из ПараметрыОТПАвторизации.мТелОТП Цикл
		ИндексМассива = Телефон.Найти(ЭтаФорма.Телефон1);
		Если ИндексМассива <> Неопределено Тогда
			IDОТП = Телефон[ИндексМассива];
			Прервать
		КонецЕсли;
	КонецЦикла;

	УдалитьРеквизитыТелОТП();
	Элементы.ГруппаТелоФормы.ТекущаяСтраница = Элементы.Авторизация;

	ПараметрыОТПАвторизации.Вставить("IDОТП", IDОТП);
	Если АвторизацияОТПОтправитьВыборТелефона(ПараметрыОТПАвторизации) Тогда
		стОТП = НарисоватьВводПароляОТПОднооконность(ПараметрыОТПАвторизации);
	Иначе
		УдалитьРеквизитыТелОТП();
	КонецЕсли;
	
КонецФункции	//	ВыборТелефонаОТП()

&НаКлиенте
Процедура ОтменаВыбораТелОТП(Команда)

	УдалитьРеквизитыТелОТП();

	ТекстСообщения = НСтр("ru='Вы отказались от выбора телефона. Авторизация не выполнена.';uk='Ви відмовилися від вибору телефону. Авторизація не виконана.'");
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	
	Возврат

КонецПроцедуры	//	ОтменаВыбораТелОТП(Команда)

&НаСервере
Процедура УдалитьРеквизитыТелОТП()

	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если Лев(ИмяРеквизита, 7) <> "Телефон" Тогда
			Продолжить
		КонецЕсли;
		Попытка
			//ЭтаФорма.Элементы.Удалить(Элементы[ИмяРеквизита]);
			ЭтаФорма.Элементы.Удалить(Реквизит);
		Исключение
			//Сообщить("Описание ошибки"+ОписаниеОшибки());
		КонецПопытки;
		
		//
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЦикла;

	ЭтаФорма.Команды.Удалить(Команды["КомандаВыбратьТелОТП"]);
	ЭтаФорма.Команды.Удалить(Команды["КомандаОтменаВыбораТелОТП"]);

	//	поля кнопок
	ИмяКнопки = "КнопкаВыбрать";
	ЭтаФорма.Элементы.Удалить(Элементы[ИмяКнопки]);
	ИмяКнопки = "КнопкаОтмена";
	ЭтаФорма.Элементы.Удалить(Элементы[ИмяКнопки]);

	Элементы.ДекорацияНадпись.Видимость = Ложь;
	Элементы.ГруппаТелоФормы.ТекущаяСтраница = Элементы.Авторизация;

КонецПроцедуры	//	УдалитьРеквизитыТелОТП()

&НаКлиенте
Функция НарисоватьВводПароляОТПОднооконность(СтруктураПараметров)

	ДобавитьЭлементыПарольОТП(СтруктураПараметров.мМаскаОТП);

	Элементы.ГруппаТелоФормы.ТекущаяСтраница = Элементы.СтраницаОТП;
	Элементы.СтраницаОТП.Заголовок = НСтр("ru='Ввод пароля';uk='Введення пароля'");

	Элементы.ДекорацияНадпись.Заголовок = НСтр("ru='Ввод пароля';uk='Введення пароля'");
	Элементы.ДекорацияНадпись.Подсказка = НСтр("ru='Ввод пароля';uk='Введення пароля'");
	Элементы.ДекорацияНадпись.Видимость = Истина

КонецФункции	//	НарисоватьВводПароляОТПОднооконность(мМаскаОТП)

&НаСервере
Процедура ДобавитьЭлементыПарольОТП(мМаскаОТП)

	//	поля пароля
	ШрифтПар = Новый Шрифт(, 12, , , , );

	КС = Новый КвалификаторыСтроки(2);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив, , КС);
	
	ВыбЗначение = 1;
	Для каждого Элемент Из мМаскаОТП Цикл
		Попытка
			ИмяРеквизита = "Пароль" + Строка(ВыбЗначение);
			ДобавляемыеРеквизиты = Новый Массив;
			ТипРеквизита = Новый Массив;
			ТипРеквизита.Добавить(Тип("Число"));
			//ОписаниеТипаРеквизита = Новый ОписаниеТипов(ТипРеквизита);
			//РеквизитТелефон = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаРеквизита);
			РеквизитТелефон = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповСтрока);
			РеквизитТелефон.Заголовок = НСтр("ru='';uk=''");
			ДобавляемыеРеквизиты.Добавить(РеквизитТелефон);
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Исключение
		КонецПопытки;

		Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ЭтаФорма.Элементы.ГруппаПолеПарольОТП);
		Элемент.Заголовок = " ";//Телефон[0];
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.Шрифт = ШрифтПар;
		Элемент.Высота = 1;
		Элемент.Ширина = 3;
		ВыбЗначение = ВыбЗначение + 1;
	КонецЦикла;

	КомандаВыбратьПарольОТП = ЭтаФорма.Команды.Добавить("ВводПароляОТПОднооконность");
	КомандаВыбратьПарольОТП.Действие = "ВводПароляОТПОднооконность";
	КомандаВыбратьПарольОТП.Заголовок = "Выбрать";

	КомандаОтменаВыбораТелОТП = ЭтаФорма.Команды.Добавить("КомандаОтменаВыбораПароляОТП");
	КомандаОтменаВыбораТелОТП.Действие = "ОтменаВыбораПароляОТП";
	КомандаОтменаВыбораТелОТП.Заголовок = "Отмена";

	//	поля кнопок
	ИмяКнопки = "КнопкаВыбрать";
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ГруппаКнопкиДействия);
	Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Элемент.ИмяКоманды = "ВводПароляОТПОднооконность";
	Элемент.Заголовок = "Выбрать";

	ИмяКнопки = "КнопкаОтмена";
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ГруппаКнопкиДействия);
	Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Элемент.ИмяКоманды = "КомандаОтменаВыбораПароляОТП";
	Элемент.Заголовок = "Отмена";

КонецПроцедуры	//	ДобавитьЭлементыПарольОТП(мМаскаОТП)

&НаКлиенте
Процедура ОтменаВыбораПароляОТП(Команда)

	УдалитьРеквизитыПарольОТП();

	ТекстСообщения = НСтр("ru='Вы отказались от выбора пароля. Авторизация не выполнена.';uk='Ви відмовилися від вибору пароля. Авторизація не виконана.'");
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);

	Возврат

КонецПроцедуры	//	ОтменаВыбораПароляОТП(Команда)

&НаСервере
Процедура УдалитьРеквизитыПарольОТП()

	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если Лев(ИмяРеквизита, 6) <> "Пароль" Тогда
			Продолжить
		КонецЕсли;
		Попытка
			НомерПароля = Число(Сред(ИмяРеквизита, 7))
		Исключение
			НомерПароля = Неопределено
		КонецПопытки;
		Если НомерПароля = Неопределено Тогда
			Продолжить
		КонецЕсли;
		Попытка
			ЭтаФорма.Элементы.Удалить(Элементы[ИмяРеквизита]);
		Исключение
		КонецПопытки;
		
		//
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЦикла;

	ЭтаФорма.Команды.Удалить(Команды["ВводПароляОТПОднооконность"]);
	ЭтаФорма.Команды.Удалить(Команды["КомандаОтменаВыбораПароляОТП"]);

	//	поля кнопок
	ИмяКнопки = "КнопкаВыбрать";
	ЭтаФорма.Элементы.Удалить(Элементы[ИмяКнопки]);
	ИмяКнопки = "КнопкаОтмена";
	ЭтаФорма.Элементы.Удалить(Элементы[ИмяКнопки]);

	Элементы.ДекорацияНадпись.Видимость = Ложь;
	Элементы.ГруппаТелоФормы.ТекущаяСтраница = Элементы.Авторизация;

КонецПроцедуры	//	УдалитьРеквизитыПарольОТП()

&НаКлиенте
Функция ВводПароляОТПОднооконность()

	НомерБлокаПароля = 1;
	стОТП = Новый Структура;
	Для каждого Элемент Из Элементы Цикл
		Попытка
			НомерПароля = Число(Сред(Элемент.Имя, 7))
		Исключение
			НомерПароля = Неопределено
		КонецПопытки;
		Если Лев(Элемент.Имя, 6) = "Пароль" И НомерПароля <> Неопределено Тогда//И Найти(Элемент.Имя, "КонтекстноеМеню") = 0 Тогда
			Попытка
				ДлинаСтрокиПароля = СтрДлина(ЭтаФорма[Элемент.Имя])
			Исключение
				Продолжить
			КонецПопытки;
			Для i = 1 По ДлинаСтрокиПароля Цикл
				КодТекущегоСимвола = КодСимвола(ЭтаФорма[Элемент.Имя], i);
				Если КодТекущегоСимвола < 48 Или КодТекущегоСимвола > 57 Тогда
					ТекстСообщения = НСтр("ru='В пароле есть нецифровые символы. Исправьте пароль.';uk='В паролі є нецифрові символи. Виправте пароль.'");
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
					//Предупреждение(ТекстСообщения);
					Возврат "НекорректныйПароль"
				КонецЕсли;
			КонецЦикла;
			стОТП.Вставить("otp" + НомерБлокаПароля, ЭтаФорма[Элемент.Имя]);
			НомерБлокаПароля = НомерБлокаПароля + 1
		КонецЕсли
	КонецЦикла;

	УдалитьРеквизитыПарольОТП();
	
	Элементы.ГруппаТелоФормы.ТекущаяСтраница = Элементы.Авторизация;
	
	ПараметрыОТПАвторизации.Вставить("стОТП", стОТП);
	Если АвторизацияОТПОтправитьПарольИзSMS(ПараметрыОТПАвторизации) Тогда
		
	КонецЕсли;

КонецФункции //ВводПароляОТПОднооконность()




#КонецОбласти



