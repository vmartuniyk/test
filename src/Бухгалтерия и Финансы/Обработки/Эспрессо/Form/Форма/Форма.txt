

#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;

	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава)
	 И	 НЕ РольДоступна(Метаданные.Роли.ОтчетыФинансовогоАналитика) Тогда
		Отказ = Истина;		
	КонецЕсли; 
	
	// Инициализация переменных
	
	ВидПериода 						= Перечисления.ДоступныеПериодыОтчета.Месяц;
	ДатаНачала 						= НачалоМесяца(ТекущаяДата());
	ДатаОкончания   				= ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, ДатаНачала);
	Период							= ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеПериода(ВидПериода, ДатаНачала, ДатаОкончания);
	
	ЦветТекстаДекорацииАктивна		= Новый Цвет(220,220,220);
	ЦветТекстаДекорацииНеАктивна	= Новый Цвет(255,255,255);
	
	Элементы.ЗакладкаПроверитьПТиУ.ЦветФона = ЦветТекстаДекорацииАктивна; 
	ПредыдущаяКоманда 	= "ЗакладкаПроверитьПТиУ";
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДатаНачала = '00010101' тогда
		ДатаНачала = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	РезультатВыбора = ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, ДатаНачала);
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, РезультатВыбора.Значение);
	ДатаОкончания  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, РезультатВыбора.Значение);
	
	Период = РезультатВыбора.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		
		Элементы.ГруппаСтраницыПериода.ТекущаяСтраница = Элементы.ГруппаДаты;
		
	Иначе
		
		Элементы.ГруппаСтраницыПериода.ТекущаяСтраница = Элементы.ГруппаПериод;
		
		Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
			НачалоПериода = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		
		ДатаНачала = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ДатаНачала);
		ДатаОкончания = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, ДатаОкончания);
		
		Список = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(ДатаНачала, ВидПериода);
		ЭлементСписка = Список.НайтиПоЗначению(ДатаНачала);
		Если ЭлементСписка <> Неопределено Тогда
			Период = ЭлементСписка.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийТаблицыФормыТаблицаДокументыПоступления

&НаКлиенте
Процедура ТаблицаДокументыПоступленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыПоступленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыПоступленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицыФормыТаблицаКурсовДвиженийДокументов

&НаКлиенте
Процедура ТаблицаКурсовДвиженийДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКурсовДвиженийДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКурсовДвиженийДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаДокументыВнутреннегоПотребления
&НаКлиенте
Процедура ТаблицаДокументыВнутреннегоПотребленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыВнутреннегоПотребленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыВнутреннегоПотребленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаФинДокументы

&НаКлиенте
Процедура ТаблицаФинДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФинДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФинДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаДокументыДвиженияДенежныхСредств
&НаКлиенте
Процедура ТаблицаПериодыВозникновенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаДокументыДвиженияДенежныхСредств
&НаКлиенте
Процедура ТаблицаДокументыДвиженияДенежныхСредствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаДокументыПередачи
&НаКлиенте
Процедура ТаблицаДокументыПередачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыПередачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыПередачиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаАвтосведениеВзаиморасчетов
&НаКлиенте
Процедура ТаблицаАвтосведениеВзаиморасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Партнер);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАвтосведениеВзаиморасчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАвтосведениеВзаиморасчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиСобытийТаблицыФормыРезультатПроверкаДокументов

&НаКлиенте
Процедура РезультатПроверкаДокументовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатРасшифровки = ПолучитьДанныеРасшифровки(Расшифровка);
	ОткрытьЗначение(РезультатРасшифровки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаПоступленийУслугИПрочихАктивов

&НаКлиенте
Процедура ТаблицаПоступленийУслугИПрочихАктивовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаСебестоимостьПередач

&НаКлиенте
Процедура ТаблицаСебестоимостьПередачПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСебестоимостьПередачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСебестоимостьПередачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ТаблицаДвиженияРасчетыСПоставщикамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФормыТаблицаОтрицательныеОстатки
&НаКлиенте
Процедура ТаблицаОтрицательныеОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ОткрытьОтчетАнализСебестоимостиТоваровНаСервере(Элемент.ТекущиеДанные.Организация,
													Элемент.ТекущиеДанные.Склад,
													Элемент.ТекущиеДанные.Номенклатура
													);	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтрицательныеОстаткиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтрицательныеОстаткиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакладкаПроверитьПТиУ(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаДокументыПоступления;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьПТиУ.ЦветФона 	= ЦветТекстаДекорацииАктивна; 
	ПредыдущаяКоманда 	= "ЗакладкаПроверитьПТиУ";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьВПТ(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаДокументыВнутреннееПотребление;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьВПТ.ЦветФона 		= ЦветТекстаДекорацииАктивна;	
	ПредыдущаяКоманда 	= "ЗакладкаПроверитьВПТ";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьСиПДС(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаПроверкаСписаниеИПоступлениеДС;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьСиПДС.ЦветФона 	= ЦветТекстаДекорацииАктивна;	
	ПредыдущаяКоманда 	= "ЗакладкаПроверитьСиПДС";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьФинансовыеДокументы(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаФинДокументыМеждуОрганизациями;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьФинансовыеДокументы.ЦветФона = ЦветТекстаДекорацииАктивна;	
	ПредыдущаяКоманда 	= "ЗакладкаПроверитьФинансовыеДокументы";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьКурсы(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаКурсыДвиженийДокументов;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьКурсы.ЦветФона 	= ЦветТекстаДекорацииАктивна;	
	ПредыдущаяКоманда 	= "ЗакладкаПроверитьКурсы";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаСоздатьПМО(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаПередачаТоваровМеждуОрганизациями;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаСоздатьПМО.ЦветФона 		= ЦветТекстаДекорацииАктивна;	
	ПредыдущаяКоманда 	= "ЗакладкаСоздатьПМО";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаАвтосведениеВзаиморасчетов(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаАвтосведениеВзаиморасчетов;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаАвтосведениеВзаиморасчетов.ЦветФона 		= ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 							= "ЗакладкаАвтосведениеВзаиморасчетов";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьОО(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 	= Элементы.ГруппаОтрицательныеОстатки;
	Элементы[ПредыдущаяКоманда].ЦветФона 		= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьОО.ЦветФона 		= ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 							= "ЗакладкаПроверитьОО";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьРентабельность(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 			= Элементы.ГруппаПроверкаРентабельности;
	Элементы[ПредыдущаяКоманда].ЦветФона 				= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьРентабельность.ЦветФона 	= ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 									= "ЗакладкаПроверитьРентабельность";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьСебестоимость(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 			= Элементы.ГруппаПроверкаСебестоимости;
	Элементы[ПредыдущаяКоманда].ЦветФона 				= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьСебестоимость.ЦветФона 	= ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 									= "ЗакладкаПроверитьСебестоимость";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаДвиженияРасчетыСПоставщиками(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 			= Элементы.ГруппаДвиженияРасчетыСПоставщиками;
	Элементы[ПредыдущаяКоманда].ЦветФона 				= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаДвиженияРасчетыСПоставщиками.ЦветФона = ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 									= "ЗакладкаДвиженияРасчетыСПоставщиками";
КонецПроцедуры


&НаКлиенте
Процедура ЗакладкаПроверитьСуммыРКОиПКО(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 		= Элементы.ГруппаПроверкаСуммыРКОиПКО;
	Элементы[ПредыдущаяКоманда].ЦветФона 			= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьСуммыРКОиПКО.ЦветФона = ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 								= "ЗакладкаПроверитьСуммыРКОиПКО";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПериодВозникновения(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 		= Элементы.ГруппаПериодВозникновения;
	Элементы[ПредыдущаяКоманда].ЦветФона 			= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПериодВозникновения.ЦветФона 	= ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 								= "ЗакладкаПериодВозникновения";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПроверитьПУиПА(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 		= Элементы.ГруппаПоступлениеУслугИПрочихАктивов;
	Элементы[ПредыдущаяКоманда].ЦветФона 			= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверитьПУиПА.ЦветФона 		= ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 								= "ЗакладкаПроверитьПУиПА";
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаСебестоимостьПередачи(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 		= Элементы.ГруппаСебестоимостьПередачМеждуОрганизациями;
	Элементы[ПредыдущаяКоманда].ЦветФона 			= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаСебестоимостьПередачи.ЦветФона = ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 								= "ЗакладкаСебестоимостьПередачи";
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаличиеУслугВДокументахДляТоваров(Команда)
	Элементы.ГруппаРезультаты.ТекущаяСтраница 							= Элементы.ГруппаЗакладкаПроверкаНаличиеУслугВДокументахДляТоваров;
	Элементы[ПредыдущаяКоманда].ЦветФона 								= ЦветТекстаДекорацииНеАктивна;
	Элементы.ЗакладкаПроверкаНаличиеУслугВДокументахДляТоваров.ЦветФона = ЦветТекстаДекорацииАктивна;
	ПредыдущаяКоманда 													= "ЗакладкаПроверкаНаличиеУслугВДокументахДляТоваров";
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПоказатели(Команда)
	СформироватьПоказателиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПросрочку(Команда)
	СформироватьПросрочкуНаСервере();
КонецПроцедуры



&НаКлиенте
Процедура ДокументыПоступленияИсправить(Команда)
	ДокументыПоступленияИсправитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияСнятьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаДокументыПоступления", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоступленияУстановитьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаДокументыПоступления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннегоПотребленияИсправить(Команда)
	ДокументыВнутреннегоПотребленияИсправитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннегоПотребленияСнятьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаДокументыВнутреннегоПотребления", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннегоПотребленияУстановитьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаДокументыВнутреннегоПотребления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКурсИсправить(Команда)
	ДокументыКурсИсправитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКурсСнятьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаКурсовДвиженийДокументов", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКурсУстановитьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаКурсовДвиженийДокументов", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФинДокументыИсправить(Команда)
	ДокументыНеВернаяВалютаРасчетовНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ФинДокументыСнятьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаФинДокументы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФинДокументыУстановитьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаФинДокументы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПередачиТоваров(Команда)
	СоздатьДокументыПередачиТоваровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеПроведенныеДокументыПередачиТоваров(Команда)
	ПоказатьНеПроведенныеДокументыПередачиТоваровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСебестоимостьПередачУстановитьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаСебестоимостьПередач", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСебестоимостьПередачСнятьФлажки(Команда)
	УстановитьСнятьФлажкиНаСервере("ТаблицаСебестоимостьПередач", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСебестоимостьПередачИсправить(Команда)
	ТаблицаСебестоимостьПередачИсправитьНаСервере();	
КонецПроцедуры

#КонецОбласти



#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода, ЛистаниеВверх = Неопределено)
	
	СписокВыбора = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	
	Если ЛистаниеВверх = Истина Тогда
		НачальноеЗначение = 0;
	ИначеЕсли ЛистаниеВверх = Ложь Тогда
		НачальноеЗначение = СписокВыбора.Количество() - 1;
	Иначе
		НачальноеЗначение = СписокВыбора.НайтиПоЗначению(НачалоПериода);
	КонецЕсли;
	
	РезультатВыбора = ВыбратьИзСписка(СписокВыбора, Элемент, НачальноеЗначение);
	
	Если РезультатВыбора = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = СписокВыбора.Индекс(РезультатВыбора);
	Если Индекс = 0 Тогда
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, РезультатВыбора.Значение, Истина);
	ИначеЕсли Индекс = СписокВыбора.Количество() - 1 Тогда
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, РезультатВыбора.Значение, Ложь);
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции

// Универсальная процедура которая снимает или устанавливает
// все флажки в таблице формы.
//
// Парамеры:
//  ИмяКоллекции - Срока  - имя таблицы формы, для которой будем устанавливать / снимать флажки.
//  Флаг		 - Булево - Истина - устанавливаем флаг, Ложь - снимаем флаг.
//
&НаСервере
Процедура УстановитьСнятьФлажкиНаСервере(ИмяКоллекции, Флаг)
	КоллекцияФормы = ЭтаФорма[ИмяКоллекции];
	Для каждого ЭлементКоллекции Из КоллекцияФормы Цикл
		ЭлементКоллекции.Флаг = Флаг;
	КонецЦикла; 
КонецПроцедуры // УстановитьФлажкиНаСервере())
 

&НаСервере
Процедура СформироватьПоказателиНаСервере()
	АнализСебестоимостиТоваров.Очистить();
	ЭспрессоОбъект = РеквизитФормыВЗначение("Объект");
	ЭспрессоОбъект.СформироватьПоказатели(ЭтаФорма);
	ЭспрессоОбъект.СформироватьБаланс(ЭтаФорма);
КонецПроцедуры // СформироватьПоказателиНаСервере()

&НаСервере
Процедура СформироватьПросрочкуНаСервере()
	РеквизитФормыВЗначение("Объект").СформироватьПросрочку(ЭтаФорма);	
КонецПроцедуры  // СформироватьПросрочкуНаСервере()

&НаСервере
Процедура ДокументыПоступленияИсправитьНаСервере()
	РеквизитФормыВЗначение("Объект").ИсправитьДокументыПоступленияТоваров(ЭтаФорма);
КонецПроцедуры // ДокументыПоступленияИсправитьНаСервере()

&НаСервере
Процедура ДокументыВнутреннегоПотребленияИсправитьНаСервере()
	РеквизитФормыВЗначение("Объект").ИсправитьДокументыВнутреннегоПотребленияТоваров(ЭтаФорма);
КонецПроцедуры // ДокументыВнутреннегоПотребленияИсправитьНаСервере()

&НаСервере
Процедура ДокументыНеВернаяВалютаРасчетовНаСервере()
	РеквизитФормыВЗначение("Объект").ИсправитьНеВернуюВалютуВзаимоРасчетов(ЭтаФорма);
КонецПроцедуры // ДокументыНеВернаяВалютаРасчетовНаСервере()

&НаСервере
Процедура ДокументыКурсИсправитьНаСервере()
	РеквизитФормыВЗначение("Объект").ИсправитьКурсыДвиженийДокументов(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПередачиТоваровНаСервере()
	РеквизитФормыВЗначение("Объект").СоздатьДокументыПередачиТоваров(ЭтаФорма);
КонецПроцедуры // ДокументыПередачиТоваровНаСервере()

&НаСервере
Процедура ПоказатьНеПроведенныеДокументыПередачиТоваровНаСервере()
	РеквизитФормыВЗначение("Объект").ПоказатьНеПроведенныеДокументыПередачиТоваров(ЭтаФорма);
КонецПроцедуры // ПоказатьНеПроведенныеДокументыПередачиТоваровНаСервере()

&НаСервере
Процедура ТаблицаСебестоимостьПередачИсправитьНаСервере()
	РеквизитФормыВЗначение("Объект").ИсправитьСебестоимостьПередач(ЭтаФорма);
КонецПроцедуры //ТаблицаСебестоимостьПередачИсправитьНаСервере()

&НаСервере
Процедура ОткрытьОтчетАнализСебестоимостиТоваровНаСервере(Организация, Склад, Номенклатура)


	УстановитьПривилегированныйРежим(Истина);
	
	Отчет 				= Отчеты.АнализСебестоимостиТоваров.Создать();
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Настройки 			= КомпоновщикНастроек.Настройки;
	
	ПараметрыДанных							= Настройки.ПараметрыДанных;
	ПараметрыДанных.Элементы[2].Значение	= Новый СтандартныйПериод(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания));
	
	ОтборНастройки  						= Настройки.Отбор;
	//Организация
	ОтборОрганизация 						= ОтборНастройки.Элементы[1];
	ОтборОрганизация.Использование 			= Истина;
	ОтборОрганизация.ВидСравнения			= ВидСравненияКомпоновкиДанных.Равно;
	ОтборОрганизация.ПравоеЗначение			= Организация;
	
	//Склад
	ОтборСклад 								= ОтборНастройки.Элементы[2];
	ОтборСклад.Использование				= Истина;
	ОтборСклад.ВидСравнения					= ВидСравненияКомпоновкиДанных.Равно;
	ОтборСклад.ПравоеЗначение				= Склад;
	
	//Номенклатура
	ОтборНоменклатура 						= ОтборНастройки.Элементы[3];
	ОтборНоменклатура.Использование			= Истина;
	ОтборНоменклатура.ВидСравнения			= ВидСравненияКомпоновкиДанных.Равно;
	ОтборНоменклатура.ПравоеЗначение		= Номенклатура;
	
	//Регистратор
	Настройки.Структура[0].Структура[0].Структура[0].ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Настройки.Структура[0].Структура[0].Структура[0].Использование = Истина;
	Настройки.Структура[0].Структура[0].Структура[0].ПоляГруппировки.Элементы[0].Поле = Настройки.ДоступныеПоляГруппировок.Элементы[10].Поле;
	АнализСебестоимостиТоваров.Очистить();
	
	НовыеДанныеРасшифровки	= Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	Отчет.СкомпоноватьРезультат(АнализСебестоимостиТоваров, НовыеДанныеРасшифровки);
	ДанныеРасшифровкиАнализСебестоимости  = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ЭтаФорма.УникальныйИдентификатор);
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеРасшифровки(Расшифровка)
	ДанныеРасшифровкиИзХранилища 	= ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Расшифровки    					= ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка];
	ПоляРасшифровки					= Расшифровки.ПолучитьПоля();
	Возврат ПоляРасшифровки[0].Значение;
КонецФункции // ПолучитьДанныеРасшифровки()

&НаКлиенте
Процедура АнализСебестоимостиТоваровОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатРасшифровки = ПолучитьДанныеРасшифровкиАнализСебестоимостиТоваровНаСервере(Расшифровка);
	Если РезультатРасшифровки <> Неопределено Тогда 
	  ОткрытьЗначение(РезультатРасшифровки);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеРасшифровкиАнализСебестоимостиТоваровНаСервере(Расшифровка)
	ДанныеРасшифровкиИзХранилища 	= ПолучитьИзВременногоХранилища(ДанныеРасшифровкиАнализСебестоимости);
	Расшифровки    					= ДанныеРасшифровкиИзХранилища.Элементы[Расшифровка];
	ПоляРасшифровки					= Расшифровки.ПолучитьПоля();
	Если 	ПоляРасшифровки[0].Поле = "Номенклатура" 
		Или ПоляРасшифровки[0].Поле = "Регистратор"
		Или ПоляРасшифровки[0].Поле = "Организация" Тогда 
		Возврат ПоляРасшифровки[0].Значение;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции // ПолучитьДанныеРасшифровки()

#КонецОбласти





