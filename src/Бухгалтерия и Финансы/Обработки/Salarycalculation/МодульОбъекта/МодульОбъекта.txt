#Область ПрограммныйИнтерфейс

#Область ПолучениеБазовыхПоказателей
Функция ПолучитьТекстЗапросаБазовыйЗПРозница()
	
	ТекстЗапроса = "
	   	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказКлиента КАК ЗаказКлиента,
		|	СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ ДолгиПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки
		|ГДЕ
		|	СуммаОстаток > 0
		|;
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента 				КАК ЗаказКлиента,
		|	СуммаОстаток 				КАК Сумма
		|ПОМЕСТИТЬ ВТ_ДолгиПоЗаказамНаНачалоПериода
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаНачала, )
		|ГДЕ
		|	СуммаОстаток > 0 И ЗаказКлиента.Дата >= ДАТАВРЕМЯ(2015, 4, 1)
		|;
		|
		// Так как одна реализация может быть на основании нескольких заказов клиента
		// нужно проверить есть ли хотябы обин не оплаченный заказ клиента.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажиОбороты.Регистратор  КАК Документ.РеализацияТоваровУслуг) КАК Документ,
		|	ИСТИНА													  										КАК ЕстьДолгПоДокументу
		|ПОМЕСТИТЬ ДолгиПоРеализациям
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(,, Регистратор, ЗаказКлиента В (ВЫБРАТЬ ЗаказКлиента ИЗ ДолгиПоЗаказам)) КАК ВыручкаИСебестоимостьПродажиОбороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоЗаказам КАК ДолгиПоЗаказам
		|		ПО ВыручкаИСебестоимостьПродажиОбороты.ЗаказКлиента = ДолгиПоЗаказам.ЗаказКлиента
		|ГДЕ
		|	ВыручкаИСебестоимостьПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Документ
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг) КАК Документ,
		|	ИСТИНА													  КАК ЕстьДолгПоДокументу
		|ПОМЕСТИТЬ ДолгиПоРеализациямНаНачалоПериода
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(,, Регистратор, ЗаказКлиента В (ВЫБРАТЬ ЗаказКлиента ИЗ ВТ_ДолгиПоЗаказамНаНачалоПериода))
		|ГДЕ
		|	Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Документ
		|;
		|
		// Производим выбор номенкатуры из таблицы расширенной настройки процентов «КТС Помощь»
		|ВЫБРАТЬ
		|	Номенклатура 		КАК Номенклатура,
		|	ПроцентПродажы      КАК ПроцентПродажы,
		|	ПроцентИсполнения	КАК ПроцентИсполнения,
		|	ИСТИНА				КАК ЭтоКТСПомощь
		|ПОМЕСТИТЬ РасширенныеНастройкиКТСПомощь
		|ИЗ
		|	РегистрСведений.КТСПомощь
		|;
		|
		// Выбираем номенклатуру из видом «КТС Помощь»
		|ВЫБРАТЬ
		|	Ссылка КАК Номенклатура,
		|	ИСТИНА КАК ЭтоКТСПомощь
		|ПОМЕСТИТЬ ТаблицаНоменклатурыКТСПомощь
		|ИЗ
		|	Справочник.Номенклатура
		|ГДЕ
		|	ВидНоменклатуры		= &ВидНоменклатурыКТСПомощь
		|	И ПометкаУдаления 	= ЛОЖЬ
		|	И ЭтоГруппа			= ЛОЖЬ
		|;
		|
		// Произодим выбор сертификатов из раширенной настройки процентов сертификатов
		|ВЫБРАТЬ
		|	Сертификат 	КАК Сертификат,
		|	Процент		КАК Процент,
		|	ИСТИНА 		КАК ЭтоСертификат
		|ПОМЕСТИТЬ РасширенныеНастройкиСертификатов
		|ИЗ
		|	РегистрСведений.КТС_НастройкаПроцентовСертификатов
		|;
		|
		// Производим выбор номенклатуры из видо «Сертификаты ПДО».
		|ВЫБРАТЬ
		|	Ссылка КАК Номенклатура,
		|	ИСТИНА КАК ЭтоСертификат
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	Справочник.Номенклатура
		|ГДЕ
		|	ВидНоменклатуры		= &ВидНоменклатурыСертификат
		|	И ПометкаУдаления 	= ЛОЖЬ
		|	И ЭтоГруппа			= ЛОЖЬ
		|;
		|
		// Выборка данных для расчета заработка.
	   	|ВЫБРАТЬ
       	|	БонусыМенеджерам.Регистратор 										КАК Ссылка,
       	|	БонусыМенеджерам.Подразделение										КАК Подразделение,
       	|	БонусыМенеджерам.Менеджер											КАК Менеджер,
       	|	БонусыМенеджерам.Номенклатура										КАК Номенклатура,
       	|	БонусыМенеджерам.КоличествоОборот 									КАК Количество,
       	|	БонусыМенеджерам.СуммаРеглОборот 									КАК Сумма,
		|	БонусыМенеджерам.ЗаработокМенеджераРеглОборот
		|		* ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1) КАК ЗаработокМенеджера,
		|	ЕСТЬNULL(ДолгиПоРеализациям.ЕстьДолгПоДокументу, ЛОЖЬ)  			КАК ЕстьДолгПоДокументу,
		|	ВЫБОР
		|		КОГДА ЗаработокМенеджераВыполнениеПлана.Склад ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.КПП_Минус, 1)
		|		ИНАЧЕ ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.КПП_Плюс, 1)
		|	КОНЕЦ 																КАК КПП_Склад,
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1)		КАК Коэфф
		|ПОМЕСТИТЬ ТаблицаЗаработков
       	|ИЗ
       	|	РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Менеджер В (ВЫБРАТЬ Менеджер ИЗ ВТМенеджерыПартнеров)) КАК БонусыМенеджерам
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоРеализациям КАК ДолгиПоРеализациям
		|		ПО ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг) = ДолгиПоРеализациям.Документ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераВыполнениеПлана КАК ЗаработокМенеджераВыполнениеПлана
		|		ПО НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ЗаработокМенеджераВыполнениеПлана.НачалоПериода, ДЕНЬ)
		|			И БонусыМенеджерам.Период < КОНЕЦПЕРИОДА(ЗаработокМенеджераВыполнениеПлана.КонецПериода, ДЕНЬ)
		|			И БонусыМенеджерам.Склад = ЗаработокМенеджераВыполнениеПлана.Склад
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК ЗаработокМенеджераМножительПоМесяцам
		|		ПО НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ЗаработокМенеджераМножительПоМесяцам.НачалоПериода, ДЕНЬ)
		|			И БонусыМенеджерам.Период < КОНЕЦПЕРИОДА(ЗаработокМенеджераМножительПоМесяцам.КонецПериода, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
       	|	БонусыМенеджерам.Регистратор 										КАК Ссылка,
       	|	БонусыМенеджерам.Подразделение										КАК Подразделение,
       	|	БонусыМенеджерам.Менеджер											КАК Менеджер,
       	|	БонусыМенеджерам.Номенклатура										КАК Номенклатура,
       	|	БонусыМенеджерам.КоличествоОборот 									КАК Количество,
       	|	БонусыМенеджерам.СуммаРеглОборот 									КАК Сумма,
		|	БонусыМенеджерам.ЗаработокМенеджераРеглОборот
		|		* ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1) КАК ЗаработокМенеджера,
		|	ЕСТЬNULL(ДолгиПоРеализациям.ЕстьДолгПоДокументу, ЛОЖЬ)  			КАК ЕстьДолгПоДокументу,
		|	ВЫБОР
		|		КОГДА ЗаработокМенеджераВыполнениеПлана.Склад ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.КПП_Минус, 1)
		|		ИНАЧЕ ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.КПП_Плюс, 1)
		|	КОНЕЦ 																КАК КПП_Склад,
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1)		КАК Коэфф
       	|ИЗ 
		|	ДолгиПоРеализациямНаНачалоПериода КАК ДолгиПоРеализациямНаНачалоПериода
       	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(, , Регистратор, Менеджер В (ВЫБРАТЬ Менеджер ИЗ ВТМенеджерыПартнеров)) КАК БонусыМенеджерам
		|		ПО ДолгиПоРеализациямНаНачалоПериода.Документ = ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоРеализациям КАК ДолгиПоРеализациям
		|		ПО ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг) = ДолгиПоРеализациям.Документ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераВыполнениеПлана КАК ЗаработокМенеджераВыполнениеПлана
		|		ПО НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ЗаработокМенеджераВыполнениеПлана.НачалоПериода, ДЕНЬ)
		|			И БонусыМенеджерам.Период < КОНЕЦПЕРИОДА(ЗаработокМенеджераВыполнениеПлана.КонецПериода, ДЕНЬ)
		|			И БонусыМенеджерам.Склад = ЗаработокМенеджераВыполнениеПлана.Склад
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК ЗаработокМенеджераМножительПоМесяцам
		|		ПО НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ЗаработокМенеджераМножительПоМесяцам.НачалоПериода, ДЕНЬ)
		|			И БонусыМенеджерам.Период < КОНЕЦПЕРИОДА(ЗаработокМенеджераМножительПоМесяцам.КонецПериода, ДЕНЬ)
		|;
		|
		// Для расчета процента от выполнения услуги КТС Помощь необходимо отсеч номенклатуру
		// из соответсвующим видом.
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаЗаработков.Ссылка КАК Документ.РеализацияТоваровУслуг)	КАК Ссылка,
       	|	ТаблицаЗаработков.Подразделение											КАК Подразделение,
       	|	ТаблицаЗаработков.Номенклатура											КАК Номенклатура,
       	|	ТаблицаЗаработков.Количество 											КАК Количество,
       	|	ТаблицаЗаработков.Сумма 												КАК Сумма,
		|	ТаблицаЗаработков.КПП_Склад                                             КАК КПП_Склад,
		|	ТаблицаЗаработков.Коэфф                                             	КАК Коэфф,
		|	ТаблицаЗаработков.ЕстьДолгПоДокументу                                   КАК ЕстьДолгПоДокументу
		|ПОМЕСТИТЬ РеализацииКТСПомощь
		|ИЗ
		|	ТаблицаЗаработков КАК ТаблицаЗаработков
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыКТСПомощь КАК ТаблицаНоменклатурыКТСПомощь
		|		ПО ТаблицаЗаработков.Номенклатура = ТаблицаНоменклатурыКТСПомощь.Номенклатура
		|;
		|
		// Получим менеджеров которые выполнили услугу «КТС Помощь».
		|ВЫБРАТЬ
		|	РеализацииКТСПомощь.Ссылка											КАК Ссылка,
       	|	РеализацииКТСПомощь.Подразделение									КАК Подразделение,
		|	ВЫРАЗИТЬ(РегистрДопСведения.Значение КАК Справочник.Пользователи)   КАК Менеджер,
       	|	РеализацииКТСПомощь.Номенклатура									КАК Номенклатура,
       	|	РеализацииКТСПомощь.Количество 										КАК Количество,
       	|	РеализацииКТСПомощь.Сумма											КАК Сумма,
		|	РеализацииКТСПомощь.КПП_Склад                                       КАК КПП_Склад,
		|	РеализацииКТСПомощь.Коэфф                                           КАК Коэфф,
		|	РеализацииКТСПомощь.ЕстьДолгПоДокументу                             КАК ЕстьДолгПоДокументу
		|ПОМЕСТИТЬ РеализацииКТСПомощьПоМенеджерам
		|ИЗ
		|	РеализацииКТСПомощь КАК РеализацииКТСПомощь
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК РегистрДопСведения
		|		ПО РеализацииКТСПомощь.Ссылка 		= ВЫРАЗИТЬ(РегистрДопСведения.Объект КАК Документ.РеализацияТоваровУслуг)
		|			И РегистрДопСведения.Свойство   = &СвойствоПомощьКТС
		|ГДЕ
		|	ВЫРАЗИТЬ(РегистрДопСведения.Значение КАК Справочник.Пользователи) В (Выбрать различные ВТМенеджерыПартнеров.Менеджер из ВТМенеджерыПартнеров)
		|;
		|
		|ВЫБРАТЬ
       	|	ТаблицаЗаработков.Ссылка 			КАК Ссылка,
       	|	ТаблицаЗаработков.Подразделение		КАК Подразделение,
       	|	ТаблицаЗаработков.Менеджер			КАК Менеджер,
       	|	ТаблицаЗаработков.Номенклатура		КАК Номенклатура,
       	|	ТаблицаЗаработков.Количество 		КАК Количество,
       	|	ТаблицаЗаработков.Сумма 			КАК Сумма,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаработков.ЕстьДолгПоДокументу = ИСТИНА
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * РасширенныеНастройкиКТСПомощь.ПроцентПродажы * 0.01 * ТаблицаЗаработков.Коэфф
		|					КОГДА ЕСТЬNULL(ТаблицаНоменклатурыКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентПродажыУслуги * 0.01 * ТаблицаЗаработков.Коэфф
		|					КОГДА ЕСТЬNULL(РасширенныеНастройкиСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * РасширенныеНастройкиСертификатов.Процент * 0.01
		|					КОГДА ЕСТЬNULL(ТаблицаСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентОтПродажыСертификата * 0.01
		|					ИНАЧЕ ТаблицаЗаработков.ЗаработокМенеджера
		|				КОНЕЦ
		|				*  ТаблицаЗаработков.КПП_Склад
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК ВозможныйЗаработок,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаработков.ЕстьДолгПоДокументу = ЛОЖЬ
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентПродажы, 0) * 0.01 * ТаблицаЗаработков.Коэфф
		|					КОГДА ЕСТЬNULL(ТаблицаНоменклатурыКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентПродажыУслуги * 0.01 * ТаблицаЗаработков.Коэфф
		|					КОГДА ЕСТЬNULL(РасширенныеНастройкиСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * ЕСТЬNULL(РасширенныеНастройкиСертификатов.Процент, 0) * 0.01
		|					КОГДА ЕСТЬNULL(ТаблицаСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
		|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентОтПродажыСертификата * 0.01
		|					ИНАЧЕ ТаблицаЗаработков.ЗаработокМенеджера
		|				КОНЕЦ
		|				*  ТаблицаЗаработков.КПП_Склад
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК ЗаработокМенеджера
		|ПОМЕСТИТЬ ТаблицаОкончательныйЗаработок
		|ИЗ
		|	ТаблицаЗаработков КАК ТаблицаЗаработков
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиКТСПомощь КАК РасширенныеНастройкиКТСПомощь
		|		ПО ТаблицаЗаработков.Номенклатура = РасширенныеНастройкиКТСПомощь.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыКТСПомощь КАК ТаблицаНоменклатурыКТСПомощь
		|		ПО ТаблицаЗаработков.Номенклатура = ТаблицаНоменклатурыКТСПомощь.Номенклатура
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиСертификатов КАК РасширенныеНастройкиСертификатов
		|		ПО ТаблицаЗаработков.Номенклатура = РасширенныеНастройкиСертификатов.Сертификат
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|		ПО ТаблицаЗаработков.Номенклатура = ТаблицаСертификатов.Номенклатура
		|{ГДЕ
		|	ТаблицаЗаработков.Менеджер.* КАК МенеджерОтбор}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацииКТСПомощьПоМенеджерам.Ссылка 			КАК Ссылка,
		|	РеализацииКТСПомощьПоМенеджерам.Подразделение	КАК Подразделение,
		|	РеализацииКТСПомощьПоМенеджерам.Менеджер		КАК Менеджер,
		|	РеализацииКТСПомощьПоМенеджерам.Номенклатура	КАК Номенклатура,
		|	0 												КАК Количество,
		|	0 												КАК Сумма,
		|	ВЫБОР
		|		КОГДА РеализацииКТСПомощьПоМенеджерам.ЕстьДолгПоДокументу = ИСТИНА
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
		|						ТОГДА РеализацииКТСПомощьПоМенеджерам.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентИсполнения, 0) * 0.01
		|					ИНАЧЕ РеализацииКТСПомощьПоМенеджерам.Сумма * &ПроцентИсполненияУслуги * 0.01
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ * РеализацииКТСПомощьПоМенеджерам.КПП_Склад * РеализацииКТСПомощьПоМенеджерам.Коэфф	КАК ВозможныйЗаработок,
		|	ВЫБОР
		|		КОГДА РеализацииКТСПомощьПоМенеджерам.ЕстьДолгПоДокументу = ЛОЖЬ
		|			ТОГДА
		|				ВЫБОР
		|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
		|						ТОГДА РеализацииКТСПомощьПоМенеджерам.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентИсполнения, 0) * 0.01
		|					ИНАЧЕ РеализацииКТСПомощьПоМенеджерам.Сумма * &ПроцентИсполненияУслуги * 0.01
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ * РеализацииКТСПомощьПоМенеджерам.КПП_Склад * РеализацииКТСПомощьПоМенеджерам.Коэфф  КАК ЗаработокМенеджера
		|ИЗ
		|	РеализацииКТСПомощьПоМенеджерам КАК РеализацииКТСПомощьПоМенеджерам
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиКТСПомощь КАК РасширенныеНастройкиКТСПомощь
		|		ПО РеализацииКТСПомощьПоМенеджерам.Номенклатура = РасширенныеНастройкиКТСПомощь.Номенклатура
		|
		|;
		| ВЫБРАТЬ
		|		ТаблицаОкончательныйЗаработок.Подразделение КАК Подразделение,
		|		СУММА(ТаблицаОкончательныйЗаработок.Сумма) КАК Сумма,
		|		СУММА(ТаблицаОкончательныйЗаработок.ВозможныйЗаработок) КАК ВозможныйЗаработок,
		|		СУММА(ТаблицаОкончательныйЗаработок.ЗаработокМенеджера) КАК ЗаработокМенеджера,
		|		ВТМенеджерыПартнеров.Партнер
		|	ПОМЕСТИТЬ ВТЗаработокПартнеров
		|	ИЗ
		|		ТаблицаОкончательныйЗаработок КАК ТаблицаОкончательныйЗаработок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМенеджерыПартнеров КАК ВТМенеджерыПартнеров
		|			ПО ТаблицаОкончательныйЗаработок.Менеджер = ВТМенеджерыПартнеров.Менеджер
  		|
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаОкончательныйЗаработок.Подразделение,
		|		ВТМенеджерыПартнеров.Партнер
		|	;";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Предназначен для размещения вызовов процедур, выполняющих расчет переопределяемых показателей
// см. ПереопределяемыеПоказатели().
//
// Параметры:
//	РасчетПереопределяемыхПоказателей - таблица значений (см. ТаблицаРасчетаПереопределяемыхПоказателей).
//
Процедура РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДополнительныеПараметры, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(РасчетПереопределяемыхПоказателей, "Показатель", Истина);
	
	Для Каждого Показатель Из Показатели Цикл
		СтрокиТаблицыРасчета = РасчетПереопределяемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", Показатель));
		РассчитатьКоличествоРабочихДнейВМесяце(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьЗаработокМенеджера(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьОборотПоПодразеделению(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьОборотПоПользователюЗПРозница(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьЗаработокРаботникаСЦ(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьПроцентЗалета(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьКурсВалют(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьКоличествоКалендарныхДней(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьСреднеДневнуюЗПЗа12Месяцев(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьРадугуПроцентКрасныхЦелыхПоРаботнику(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
		РассчитатьПроизвольныеВидыРасчетов(Показатель, СтрокиТаблицыРасчета, ДополнительныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя ЗП_КоличествоРабочихДней.
//
Процедура РассчитатьКоличествоРабочихДнейВМесяце(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_КоличествоРабочихДней") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Начисления.Партнер,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала КАК НачалоПериода,
		|	Начисления.ДатаОкончания КАК ОкончаниеПериода,
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ 
		|	Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок)
		|";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	//Запрос.Выполнить();
	
	ГрафикПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенноеЗначение("Справочник.КТС_Константы.ОсновнойКалендарьЗП"), "Значение");
	
	КоличествоДней = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
								ГрафикПоУмолчанию,
								НачалоМесяца(ДополнительныеПараметры.МесяцНачисления), 
								КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления))
								);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = КоличествоДней;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗаработокМенеджера(Показатель, СтрокиРасчета, ДополнительныеПараметры) 
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ЗаработокМенеджера") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
				   |    Начисления.Подразделение КАК Подразделение,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПартнеров
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ДополнительныеСведения.Объект КАК Менеджер, 
				   |    ВТНачисленияПартнеров.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ ВТМенеджерыПартнеров
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТНачисленияПартнеров.Партнер = ДополнительныеСведения.Значение
	               |			И (ДополнительныеСведения.Свойство = &СвойствоПартнерЗП)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	Запрос.Выполнить();
	
	//Выборка = Запрос.Выбрать();
		
	ТекстЗапроса = "
			   	|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказКлиента КАК ЗаказКлиента,
				|	СуммаОстаток КАК Сумма
				|ПОМЕСТИТЬ ДолгиПоЗаказам
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОкончания, )
				|ГДЕ
				|	СуммаОстаток > 0
				|;
				|
				|ВЫБРАТЬ
				|	ЗаказКлиента 				КАК ЗаказКлиента,
				|	СуммаОстаток 				КАК Сумма
				|ПОМЕСТИТЬ ВТ_ДолгиПоЗаказамНаНачалоПериода
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаНачала, )
				|ГДЕ
				|	СуммаОстаток > 0 И ЗаказКлиента.Дата >= ДАТАВРЕМЯ(2015, 4, 1)
				|;
				// Так как одна реализация может быть на основании нескольких заказов клиента
				// нужно проверить есть ли хотябы обин не оплаченный заказ клиента.
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажиОбороты.Регистратор  КАК Документ.РеализацияТоваровУслуг) КАК Документ,
				|	ИСТИНА													  										КАК ЕстьДолгПоДокументу
				|ПОМЕСТИТЬ ДолгиПоРеализациям
				|ИЗ
				|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(,, Регистратор, ЗаказКлиента В (ВЫБРАТЬ ЗаказКлиента ИЗ ДолгиПоЗаказам)) КАК ВыручкаИСебестоимостьПродажиОбороты
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоЗаказам КАК ДолгиПоЗаказам
				|		ПО ВыручкаИСебестоимостьПродажиОбороты.ЗаказКлиента = ДолгиПоЗаказам.ЗаказКлиента
				|ГДЕ
				|	ВыручкаИСебестоимостьПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Документ
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВЫРАЗИТЬ(Регистратор КАК Документ.РеализацияТоваровУслуг) КАК Документ,
				|	ИСТИНА													  КАК ЕстьДолгПоДокументу
				|ПОМЕСТИТЬ ДолгиПоРеализациямНаНачалоПериода
				|ИЗ
				|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(,, Регистратор, ЗаказКлиента В (ВЫБРАТЬ ЗаказКлиента ИЗ ВТ_ДолгиПоЗаказамНаНачалоПериода))
				|ГДЕ
				|	Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Документ
				|;
				|
				// Производим выбор номенкатуры из таблицы расширенной настройки процентов «КТС Помощь»
				|ВЫБРАТЬ
				|	Номенклатура 		КАК Номенклатура,
				|	ПроцентПродажы      КАК ПроцентПродажы,
				|	ПроцентИсполнения	КАК ПроцентИсполнения,
				|	ИСТИНА				КАК ЭтоКТСПомощь
				|ПОМЕСТИТЬ РасширенныеНастройкиКТСПомощь
				|ИЗ
				|	РегистрСведений.КТСПомощь
				|;
				|
				// Выбираем номенклатуру из видом «КТС Помощь»
				|ВЫБРАТЬ
				|	Ссылка КАК Номенклатура,
				|	ИСТИНА КАК ЭтоКТСПомощь
				|ПОМЕСТИТЬ ТаблицаНоменклатурыКТСПомощь
				|ИЗ
				|	Справочник.Номенклатура
				|ГДЕ
				|	ВидНоменклатуры		= &ВидНоменклатурыКТСПомощь
				|	И ПометкаУдаления 	= ЛОЖЬ
				|	И ЭтоГруппа			= ЛОЖЬ
				|;
				|
				// Произодим выбор сертификатов из раширенной настройки процентов сертификатов
				|ВЫБРАТЬ
				|	Сертификат 	КАК Сертификат,
				|	Процент		КАК Процент,
				|	ИСТИНА 		КАК ЭтоСертификат
				|ПОМЕСТИТЬ РасширенныеНастройкиСертификатов
				|ИЗ
				|	РегистрСведений.КТС_НастройкаПроцентовСертификатов
				|;
				|
				// Производим выбор номенклатуры из видо «Сертификаты ПДО».
				|ВЫБРАТЬ
				|	Ссылка КАК Номенклатура,
				|	ИСТИНА КАК ЭтоСертификат
				|ПОМЕСТИТЬ ТаблицаСертификатов
				|ИЗ
				|	Справочник.Номенклатура
				|ГДЕ
				|	ВидНоменклатуры		= &ВидНоменклатурыСертификат
				|	И ПометкаУдаления 	= ЛОЖЬ
				|	И ЭтоГруппа			= ЛОЖЬ
				|;
				|
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	КТС_КоэффициентыСезонностиМагазинов.Период,
                |	КТС_КоэффициентыСезонностиМагазинов.Коэффициент
                |ПОМЕСТИТЬ КоэффициентСезонности
                |ИЗ
                | 	РегистрСведений.КТС_КоэффициентыСезонностиМагазинов КАК КТС_КоэффициентыСезонностиМагазинов
                |ГДЕ
                |	КТС_КоэффициентыСезонностиМагазинов.Период <= &ДатаОкончания
			    |
                |СГРУППИРОВАТЬ ПО
                |	КТС_КоэффициентыСезонностиМагазинов.Период,
                |	КТС_КоэффициентыСезонностиМагазинов.Коэффициент
                |;
				|
				// Выборка данных для расчета заработка.
			   	|////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	БонусыМенеджерам.Регистратор КАК Ссылка,
                |	БонусыМенеджерам.Подразделение КАК Подразделение,
                |	БонусыМенеджерам.Менеджер КАК Менеджер,
                |	БонусыМенеджерам.Номенклатура КАК Номенклатура,
                |	БонусыМенеджерам.КоличествоОборот КАК Количество,
                |	БонусыМенеджерам.СуммаРеглОборот КАК Сумма,
				|	БонусыМенеджерам.ПроцентНачисленияОборот КАК ПроцентНачисления,
                |	БонусыМенеджерам.ЗаработокМенеджераРеглОборот КАК ЗаработокМенеджера,
                |	ЕСТЬNULL(ДолгиПоРеализациям.ЕстьДолгПоДокументу, ЛОЖЬ) КАК ЕстьДолгПоДокументу,
                |	ЕСТЬNULL(КоэффициентСезонности.Коэффициент, 1) КАК КоэффициентСезонности,
                |	БонусыМенеджерам.Склад,
                |	НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, МЕСЯЦ) КАК Месяц,
				|	БонусыМенеджерам.Период КАК ДатаДокумента
                |ПОМЕСТИТЬ ТаблицаЗаработков
                |ИЗ
                |	РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, ) КАК БонусыМенеджерам
                |		ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоРеализациям КАК ДолгиПоРеализациям
                |		ПО ((ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг)) = ДолгиПоРеализациям.Документ)
                |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентСезонности КАК КоэффициентСезонности
                |		ПО (НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КоэффициентСезонности.Период, МЕСЯЦ))
                |
                |ОБЪЕДИНИТЬ ВСЕ
                |
                |ВЫБРАТЬ
                |	БонусыМенеджерам.Регистратор,
                |	БонусыМенеджерам.Подразделение,
                |	БонусыМенеджерам.Менеджер,
                |	БонусыМенеджерам.Номенклатура,
                |	БонусыМенеджерам.КоличествоОборот,
                |	БонусыМенеджерам.СуммаРеглОборот,
				|	БонусыМенеджерам.ПроцентНачисленияОборот,
                |	БонусыМенеджерам.ЗаработокМенеджераРеглОборот,
                |	ЕСТЬNULL(ДолгиПоРеализациям.ЕстьДолгПоДокументу, ЛОЖЬ),
                |	ЕСТЬNULL(КоэффициентСезонности.Коэффициент, 1),
                |	БонусыМенеджерам.Склад,
                |	НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, МЕСЯЦ),
				|	БонусыМенеджерам.Период
                |ИЗ
                |	ДолгиПоРеализациямНаНачалоПериода КАК ДолгиПоРеализациямНаНачалоПериода
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(, , Регистратор, ) КАК БонусыМенеджерам
                |		ПО (ДолгиПоРеализациямНаНачалоПериода.Документ = (ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг)))
                |		ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоРеализациям КАК ДолгиПоРеализациям
                |		ПО ((ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг)) = ДолгиПоРеализациям.Документ)
                |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентСезонности КАК КоэффициентСезонности
                |		ПО (НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КоэффициентСезонности.Период, МЕСЯЦ))
				|;
				|
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ РАЗЛИЧНЫЕ
                |	КТС_КоэффициентыВыполненияПланаМагазинами.Период,
                |	КТС_КоэффициентыВыполненияПланаМагазинами.Склад,
                |	КТС_КоэффициентыВыполненияПланаМагазинами.Коэффициент
                |ПОМЕСТИТЬ КоэффициентыВыполненияПланаМагазином
                |ИЗ
                |	РегистрСведений.КТС_КоэффициентыВыполненияПланаМагазинами КАК КТС_КоэффициентыВыполненияПланаМагазинами
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаработков КАК ТаблицаЗаработков
                |		ПО КТС_КоэффициентыВыполненияПланаМагазинами.Склад = ТаблицаЗаработков.Склад
                |			И КТС_КоэффициентыВыполненияПланаМагазинами.Период >= ТаблицаЗаработков.Месяц
                |			И КТС_КоэффициентыВыполненияПланаМагазинами.Период <= ТаблицаЗаработков.Месяц
                |ГДЕ
			    |		КТС_КоэффициентыВыполненияПланаМагазинами.Период <= &ДатаОкончания
                |;
				// Для расчета процента от выполнения услуги КТС Помощь необходимо отсеч номенклатуру
				// из соответсвующим видом.
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаЗаработков.Ссылка КАК Документ.РеализацияТоваровУслуг)	КАК Ссылка,
               	|	ТаблицаЗаработков.Подразделение											КАК Подразделение,
               	|	ТаблицаЗаработков.Номенклатура											КАК Номенклатура,
               	|	ТаблицаЗаработков.Количество 											КАК Количество,
               	|	ТаблицаЗаработков.Сумма 												КАК Сумма,
				|	ТаблицаЗаработков.ЕстьДолгПоДокументу                                   КАК ЕстьДолгПоДокументу,
	            |	ТаблицаЗаработков.Месяц,
	            |	ТаблицаЗаработков.Склад,
	            |	ТаблицаЗаработков.КоэффициентСезонности

				|ПОМЕСТИТЬ РеализацииКТСПомощь
				|ИЗ
				|	ТаблицаЗаработков КАК ТаблицаЗаработков
				|		
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыКТСПомощь КАК ТаблицаНоменклатурыКТСПомощь
				|		ПО ТаблицаЗаработков.Номенклатура = ТаблицаНоменклатурыКТСПомощь.Номенклатура
				|;
				|
				// Получим менеджеров которые выполнили услугу «КТС Помощь».
				|ВЫБРАТЬ
				|	РеализацииКТСПомощь.Ссылка											КАК Ссылка,
               	|	РеализацииКТСПомощь.Подразделение									КАК Подразделение,
				|	ВЫРАЗИТЬ(РегистрДопСведения.Значение КАК Справочник.Пользователи)   КАК Менеджер,
               	|	РеализацииКТСПомощь.Номенклатура									КАК Номенклатура,
               	|	РеализацииКТСПомощь.Количество 										КАК Количество,
               	|	РеализацииКТСПомощь.Сумма											КАК Сумма,
				|	РеализацииКТСПомощь.ЕстьДолгПоДокументу                             КАК ЕстьДолгПоДокументу,
	            |	РеализацииКТСПомощь.Месяц					,
	            |	РеализацииКТСПомощь.Склад,
	            |	РеализацииКТСПомощь.КоэффициентСезонности
				|ПОМЕСТИТЬ РеализацииКТСПомощьПоМенеджерам
				|ИЗ
				|	РеализацииКТСПомощь КАК РеализацииКТСПомощь
				|
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК РегистрДопСведения
				|		ПО РеализацииКТСПомощь.Ссылка 		= ВЫРАЗИТЬ(РегистрДопСведения.Объект КАК Документ.РеализацияТоваровУслуг)
				|			И РегистрДопСведения.Свойство   = &СвойствоПомощьКТС
				|;
				|
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ТаблицаЗаработков.Менеджер,
                |	ТаблицаЗаработков.Месяц,
                |	МАКСИМУМ(КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Период) КАК Период
                |ПОМЕСТИТЬ ПериодыЭффективностиМенеджеров
                |ИЗ
                |	ТаблицаЗаработков КАК ТаблицаЗаработков
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_КоэффициентыЭффективностиПродавца КАК КТС_КоэффициентыЭффективностиПродавцаСрезПоследних
                |		ПО ТаблицаЗаработков.Менеджер = КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Менеджер
                |			И ТаблицаЗаработков.Месяц >= КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Период
                |
                |СГРУППИРОВАТЬ ПО
                |	ТаблицаЗаработков.Месяц,
                |	ТаблицаЗаработков.Менеджер
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ПериодыЭффективностиМенеджеров.Менеджер,
                |	ПериодыЭффективностиМенеджеров.Месяц,
                |	ПериодыЭффективностиМенеджеров.Период,
                |	КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Значения,
                |	КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.КоэффициентЭффективности
                |ПОМЕСТИТЬ КоэффициентыЭффективностиМенеджеров
                |ИЗ
                |	ПериодыЭффективностиМенеджеров КАК ПериодыЭффективностиМенеджеров
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КТС_КоэффициентыЭффективностиПродавца КАК КТС_КоэффициентыЭффективностиПродавцаСрезПоследних
                |		ПО ПериодыЭффективностиМенеджеров.Менеджер = КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Менеджер
                |			И ПериодыЭффективностиМенеджеров.Период = КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Период
                |;
				|
				|ВЫБРАТЬ
               	|	ТаблицаЗаработков.Ссылка 			КАК Ссылка,
               	|	ТаблицаЗаработков.Подразделение		КАК Подразделение,
               	|	ТаблицаЗаработков.Менеджер			КАК Менеджер,
               	|	ТаблицаЗаработков.Номенклатура		КАК Номенклатура,
               	|	ТаблицаЗаработков.Количество 		КАК Количество,
               	|	ТаблицаЗаработков.Сумма 			КАК Сумма,
				|	ВЫБОР
				|		КОГДА ТаблицаЗаработков.ЕстьДолгПоДокументу = ИСТИНА
				|			ТОГДА
				|				ВЫБОР
				|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * РасширенныеНастройкиКТСПомощь.ПроцентПродажы * 0.01
				|					КОГДА ЕСТЬNULL(ТаблицаНоменклатурыКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентПродажыУслуги * 0.01 
				|					КОГДА ЕСТЬNULL(РасширенныеНастройкиСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * РасширенныеНастройкиСертификатов.Процент * 0.01
				|					КОГДА ЕСТЬNULL(ТаблицаСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентОтПродажыСертификата * 0.01
				|					ИНАЧЕ ТаблицаЗаработков.ЗаработокМенеджера
				|				КОНЕЦ
				|			ИНАЧЕ 0
				|	КОНЕЦ КАК ВозможныйЗаработок,
				|	ВЫБОР
				|		КОГДА ТаблицаЗаработков.ЕстьДолгПоДокументу = ЛОЖЬ
				|			ТОГДА
				|				ВЫБОР
				|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентПродажы, 0) * 0.01
				|					КОГДА ЕСТЬNULL(ТаблицаНоменклатурыКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентПродажыУслуги * 0.01
				|					КОГДА ЕСТЬNULL(РасширенныеНастройкиСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * ЕСТЬNULL(РасширенныеНастройкиСертификатов.Процент, 0) * 0.01
				|					КОГДА ЕСТЬNULL(ТаблицаСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
				|						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентОтПродажыСертификата * 0.01
				|					ИНАЧЕ ТаблицаЗаработков.ЗаработокМенеджера
				|				КОНЕЦ
				|			ИНАЧЕ 0
				|	КОНЕЦ КАК ЗаработокМенеджера,
	            |	ЕСТЬNULL(КоэффициентыВыполненияПланаМагазином.Коэффициент, 1) КАК КоэффициентВыполненияПлана,
	            |	ЕСТЬNULL(КоэффициентыЭффективностиМенеджеров.Значения, 1) КАК КоэффициентЭффективности,
	            |	ТаблицаЗаработков.КоэффициентСезонности
				|ПОМЕСТИТЬ ТаблицаОкончательныйЗаработок
				|ИЗ
				|	ТаблицаЗаработков КАК ТаблицаЗаработков
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиКТСПомощь КАК РасширенныеНастройкиКТСПомощь
				|		ПО ТаблицаЗаработков.Номенклатура = РасширенныеНастройкиКТСПомощь.Номенклатура
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыКТСПомощь КАК ТаблицаНоменклатурыКТСПомощь
				|		ПО ТаблицаЗаработков.Номенклатура = ТаблицаНоменклатурыКТСПомощь.Номенклатура
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиСертификатов КАК РасширенныеНастройкиСертификатов
				|		ПО ТаблицаЗаработков.Номенклатура = РасширенныеНастройкиСертификатов.Сертификат
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
				|		ПО ТаблицаЗаработков.Номенклатура = ТаблицаСертификатов.Номенклатура
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыЭффективностиМенеджеров КАК КоэффициентыЭффективностиМенеджеров
                |		ПО ТаблицаЗаработков.Менеджер = КоэффициентыЭффективностиМенеджеров.Менеджер
                |			И ТаблицаЗаработков.Месяц = КоэффициентыЭффективностиМенеджеров.Месяц
                |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыВыполненияПланаМагазином КАК КоэффициентыВыполненияПланаМагазином
                |		ПО ТаблицаЗаработков.Месяц = КоэффициентыВыполненияПланаМагазином.Период
                |			И ТаблицаЗаработков.Склад = КоэффициентыВыполненияПланаМагазином.Склад
				|{ГДЕ
				|	ТаблицаЗаработков.Менеджер.* КАК МенеджерОтбор}
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацииКТСПомощьПоМенеджерам.Ссылка 			КАК Ссылка,
				|	РеализацииКТСПомощьПоМенеджерам.Подразделение	КАК Подразделение,
				|	РеализацииКТСПомощьПоМенеджерам.Менеджер		КАК Менеджер,
				|	РеализацииКТСПомощьПоМенеджерам.Номенклатура	КАК Номенклатура,
				|	0 												КАК Количество,
				|	0 												КАК Сумма,
				|	ВЫБОР
				|		КОГДА РеализацииКТСПомощьПоМенеджерам.ЕстьДолгПоДокументу = ИСТИНА
				|			ТОГДА
				|				ВЫБОР
				|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
				|						ТОГДА РеализацииКТСПомощьПоМенеджерам.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентИсполнения, 0) * 0.01
				|					ИНАЧЕ РеализацииКТСПомощьПоМенеджерам.Сумма * &ПроцентИсполненияУслуги * 0.01
				|				КОНЕЦ
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ВозможныйЗаработок,
				|	ВЫБОР
				|		КОГДА РеализацииКТСПомощьПоМенеджерам.ЕстьДолгПоДокументу = ЛОЖЬ
				|			ТОГДА
				|				ВЫБОР
				|					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
				|						ТОГДА РеализацииКТСПомощьПоМенеджерам.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентИсполнения, 0) * 0.01
				|					ИНАЧЕ РеализацииКТСПомощьПоМенеджерам.Сумма * &ПроцентИсполненияУслуги * 0.01
				|				КОНЕЦ
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЗаработокМенеджера,
	            |	ЕСТЬNULL(КоэффициентыВыполненияПланаМагазином.Коэффициент, 1),
	            |	ЕСТЬNULL(КоэффициентыЭффективностиМенеджеров.Значения, 1),
	            |	РеализацииКТСПомощьПоМенеджерам.КоэффициентСезонности
				|
				|ИЗ
				|	РеализацииКТСПомощьПоМенеджерам КАК РеализацииКТСПомощьПоМенеджерам
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиКТСПомощь КАК РасширенныеНастройкиКТСПомощь
				|		ПО РеализацииКТСПомощьПоМенеджерам.Номенклатура = РасширенныеНастройкиКТСПомощь.Номенклатура
				|       
				|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыЭффективностиМенеджеров КАК КоэффициентыЭффективностиМенеджеров
	            |		ПО РеализацииКТСПомощьПоМенеджерам.Месяц = КоэффициентыЭффективностиМенеджеров.Месяц
	            |			И РеализацииКТСПомощьПоМенеджерам.Менеджер = КоэффициентыЭффективностиМенеджеров.Менеджер
	            |		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыВыполненияПланаМагазином КАК КоэффициентыВыполненияПланаМагазином
	            |		ПО РеализацииКТСПомощьПоМенеджерам.Месяц = КоэффициентыВыполненияПланаМагазином.Период
	            |			И РеализацииКТСПомощьПоМенеджерам.Склад = КоэффициентыВыполненияПланаМагазином.Склад
				|;
				| ВЫБРАТЬ
				|		ТаблицаОкончательныйЗаработок.Подразделение КАК Подразделение,
				|		СУММА(ТаблицаОкончательныйЗаработок.Сумма) КАК Сумма,
				|		СУММА(ТаблицаОкончательныйЗаработок.ВозможныйЗаработок * ТаблицаОкончательныйЗаработок.КоэффициентВыполненияПлана * ТаблицаОкончательныйЗаработок.КоэффициентСезонности * (ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОкончательныйЗаработок.КоэффициентЭффективности, 1) КАК ЧИСЛО(15, 3)))) КАК ВозможныйЗаработок,
				|		СУММА(ТаблицаОкончательныйЗаработок.ЗаработокМенеджера * ТаблицаОкончательныйЗаработок.КоэффициентВыполненияПлана * ТаблицаОкончательныйЗаработок.КоэффициентСезонности * (ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаОкончательныйЗаработок.КоэффициентЭффективности, 1) КАК ЧИСЛО(15, 3)))) КАК ЗаработокМенеджера,
				|		ВТМенеджерыПартнеров.Партнер
				|	ПОМЕСТИТЬ ВТЗаработокПартнеров
				|	ИЗ
				|		ТаблицаОкончательныйЗаработок КАК ТаблицаОкончательныйЗаработок
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМенеджерыПартнеров КАК ВТМенеджерыПартнеров
				|			ПО ТаблицаОкончательныйЗаработок.Менеджер = ВТМенеджерыПартнеров.Менеджер
  				|
				|	СГРУППИРОВАТЬ ПО
				|		ТаблицаОкончательныйЗаработок.Подразделение,
				|		ВТМенеджерыПартнеров.Партнер
				|	;
				|
				| ////////////////////////////////////////////////////////////////////////////////
				|	ВЫБРАТЬ
				|		ВТНачисленияПартнеров.Партнер,
				|		ВТНачисленияПартнеров.ВидРасчета,
				|		ВТНачисленияПартнеров.НачалоПериода,
				|		ВТНачисленияПартнеров.ОкончаниеПериода,
				|		ВТНачисленияПартнеров.ИдентификаторСтроки,
				|		СУММА(ВТЗаработокПартнеров.Сумма) КАК Сумма,
				|		СУММА(ВТЗаработокПартнеров.ВозможныйЗаработок) КАК ВозможныйЗаработок,
				|		СУММА(ВТЗаработокПартнеров.ЗаработокМенеджера) КАК ЗаработокМенеджера
				|	ИЗ
				|		ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаработокПартнеров КАК ВТЗаработокПартнеров
				|			ПО ВТНачисленияПартнеров.Партнер = ВТЗаработокПартнеров.Партнер
				|
				|	СГРУППИРОВАТЬ ПО
				|		ВТНачисленияПартнеров.Партнер,
				|		ВТНачисленияПартнеров.ВидРасчета,
				|		ВТНачисленияПартнеров.НачалоПериода,
				|		ВТНачисленияПартнеров.ОкончаниеПериода,
				|		ВТНачисленияПартнеров.ИдентификаторСтроки";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатурыКТСПомощь", ктс_ПредопределенныеЗначенияПовтИсп.ВидНоменклатурыКТСПомощь()); 
	Запрос.УстановитьПараметр("ВидНоменклатурыСертификат", ктс_ПредопределенныеЗначенияПовтИсп.ВидНоменклатурыСертификаты());
	Запрос.УстановитьПараметр("СвойствоПомощьКТС", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПомощьКТС());
	Запрос.УстановитьПараметр("ПроцентПродажыУслуги", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентПродажыУслуги());
	Запрос.УстановитьПараметр("ПроцентОтПродажыСертификата", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентОтПродажыСертификата());
	Запрос.УстановитьПараметр("ПроцентИсполненияУслуги", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентИсполненияУслуги());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДополнительныеПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	
	ДатаПереходаНаТройнойРассчет = ктс_ПредопределенныеЗначенияПовтИсп.ДатаПереходаНаТройнойРассчет();
	Если Не ЗначениеЗаполнено(ДатаПереходаНаТройнойРассчет) Тогда
		ДатаПереходаНаТройнойРассчет = Дата("39990101");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаПереходаНаТройнойРассчет", ДатаПереходаНаТройнойРассчет);
	

	Выборка = Запрос.Выполнить().Выбрать();
				
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.ЗаработокМенеджера;
	КонецЦикла;
	
	//Уничтожим лишние временные таблицы.
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТМенеджерыПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДолгиПоЗаказам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДолгиПоРеализациям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РасширенныеНастройкиКТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаНоменклатурыКТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РасширенныеНастройкиСертификатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаСертификатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаЗаработков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РеализацииКТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РеализацииКТСПомощьПоМенеджерам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОкончательныйЗаработок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТЗаработокПартнеров"; 

				  
	Запрос.Выполнить();
				  
	
КонецПроцедуры

Процедура РассчитатьОборотПоПодразеделению(Показатель, СтрокиРасчета, ДополнительныеПараметры) 
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ОборотПоПодразделению") Тогда
		Возврат;
	КонецЕсли;
	
	//Расчет аналогичный как и в РассчитатьЗаработокМенеджера, только группировка идет по подразделению
	//FIXME: подумать над оптимизацией записи запроса, сразу для всех показателй. 
		
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
				   |	Начисления.Подразделение КАК Подразделение,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПартнеров
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ДополнительныеСведения.Объект КАК Менеджер, 
				   |	ВТНачисленияПартнеров.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ ВТМенеджерыПартнеров
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТНачисленияПартнеров.Партнер = ДополнительныеСведения.Значение
	               |			И (ДополнительныеСведения.Свойство = &СвойствоПартнерЗП)
				   |;
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	Подразделение КАК Подразделение
				   |ПОМЕСТИТЬ ТаблицаПодразделений
				   |ИЗ
				   |	ВТМенеджерыПартнеров
				   |;";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	Запрос.Выполнить();
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента,
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
	               |ПОМЕСТИТЬ ДолгиПоЗаказам
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	               |ГДЕ
	               |	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажиОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг) КАК Документ,
	               |	ИСТИНА КАК ЕстьДолгПоДокументу
	               |ПОМЕСТИТЬ ДолгиПоРеализациям
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			ЗаказКлиента В
	               |				(ВЫБРАТЬ
	               |					ДолгиПоЗаказам.ЗаказКлиента
	               |				ИЗ
	               |					ДолгиПоЗаказам)) КАК ВыручкаИСебестоимостьПродажиОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолгиПоЗаказам КАК ДолгиПоЗаказам
	               |		ПО ВыручкаИСебестоимостьПродажиОбороты.ЗаказКлиента = ДолгиПоЗаказам.ЗаказКлиента
	               |ГДЕ
	               |	ВыручкаИСебестоимостьПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КТСПомощь.Номенклатура КАК Номенклатура,
	               |	КТСПомощь.ПроцентПродажы КАК ПроцентПродажы,
	               |	КТСПомощь.ПроцентИсполнения КАК ПроцентИсполнения,
	               |	ИСТИНА КАК ЭтоКТСПомощь
	               |ПОМЕСТИТЬ РасширенныеНастройкиКТСПомощь
	               |ИЗ
	               |	РегистрСведений.КТСПомощь КАК КТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	ИСТИНА КАК ЭтоКТСПомощь
	               |ПОМЕСТИТЬ ТаблицаНоменклатурыКТСПомощь
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатурыКТСПомощь
	               |	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КТС_НастройкаПроцентовСертификатов.Сертификат КАК Сертификат,
	               |	КТС_НастройкаПроцентовСертификатов.Процент КАК Процент,
	               |	ИСТИНА КАК ЭтоСертификат
	               |ПОМЕСТИТЬ РасширенныеНастройкиСертификатов
	               |ИЗ
	               |	РегистрСведений.КТС_НастройкаПроцентовСертификатов КАК КТС_НастройкаПроцентовСертификатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура,
	               |	ИСТИНА КАК ЭтоСертификат
	               |ПОМЕСТИТЬ ТаблицаСертификатов
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатурыСертификат
	               |	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БонусыМенеджерам.Регистратор КАК Ссылка,
	               |	БонусыМенеджерам.Подразделение КАК Подразделение,
	               |	БонусыМенеджерам.Менеджер КАК Менеджер,
	               |	БонусыМенеджерам.Номенклатура КАК Номенклатура,
	               |	БонусыМенеджерам.КоличествоОборот КАК Количество,
	               |	БонусыМенеджерам.СуммаРеглОборот КАК Сумма,
	               |	БонусыМенеджерам.ЗаработокМенеджераРеглОборот * ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1) КАК ЗаработокМенеджера,
	               |	ЕСТЬNULL(ДолгиПоРеализациям.ЕстьДолгПоДокументу, ЛОЖЬ) КАК ЕстьДолгПоДокументу,
	               |	ВЫБОР
	               |		КОГДА ЗаработокМенеджераВыполнениеПлана.Склад ЕСТЬ NULL 
	               |			ТОГДА ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.КПП_Минус, 1)
	               |		ИНАЧЕ ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.КПП_Плюс, 1)
	               |	КОНЕЦ КАК КПП_Склад,
	               |	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцам.Коэффициент, 1) КАК Коэфф
	               |ПОМЕСТИТЬ ТаблицаЗаработков
	               |ИЗ
	               |	РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, ) КАК БонусыМенеджерам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДолгиПоРеализациям КАК ДолгиПоРеализациям
	               |		ПО ((ВЫРАЗИТЬ(БонусыМенеджерам.Регистратор КАК Документ.РеализацияТоваровУслуг)) = ДолгиПоРеализациям.Документ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераВыполнениеПлана КАК ЗаработокМенеджераВыполнениеПлана
	               |		ПО (НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ЗаработокМенеджераВыполнениеПлана.НачалоПериода, ДЕНЬ))
	               |			И (БонусыМенеджерам.Период < КОНЕЦПЕРИОДА(ЗаработокМенеджераВыполнениеПлана.КонецПериода, ДЕНЬ))
	               |			И БонусыМенеджерам.Склад = ЗаработокМенеджераВыполнениеПлана.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК ЗаработокМенеджераМножительПоМесяцам
	               |		ПО (НАЧАЛОПЕРИОДА(БонусыМенеджерам.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ЗаработокМенеджераМножительПоМесяцам.НачалоПериода, ДЕНЬ))
	               |			И (БонусыМенеджерам.Период < КОНЕЦПЕРИОДА(ЗаработокМенеджераМножительПоМесяцам.КонецПериода, ДЕНЬ))
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделений
	               |		ПО БонусыМенеджерам.Подразделение = ТаблицаПодразделений.Подразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БонусыМенеджерам.Регистратор КАК Ссылка,
	               |	БонусыМенеджерам.Менеджер КАК Менеджер,
	               |	БонусыМенеджерам.Номенклатура КАК Номенклатура,
	               |	СУММА(БонусыМенеджерам.КоличествоОборот) КАК Количество,
	               |	СУММА(БонусыМенеджерам.СуммаРеглОборот) КАК Сумма,
	               |	БонусыМенеджерам.Менеджер.ТекущееПодразделение КАК Подразделение
	               |ПОМЕСТИТЬ ТаблицаЗаработковКонтактЦентр
	               |ИЗ
	               |	РегистрНакопления.КПП_БонусыМенеджерамНачисленые.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Подразделение = &ПодразделениеОтбор) КАК БонусыМенеджерам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделений
	               |		ПО БонусыМенеджерам.Менеджер.ТекущееПодразделение = ТаблицаПодразделений.Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БонусыМенеджерам.Регистратор,
	               |	БонусыМенеджерам.Менеджер,
	               |	БонусыМенеджерам.Номенклатура,
	               |	БонусыМенеджерам.Менеджер.ТекущееПодразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТаблицаЗаработков.Ссылка КАК Документ.РеализацияТоваровУслуг) КАК Ссылка,
	               |	ТаблицаЗаработков.Подразделение КАК Подразделение,
	               |	ТаблицаЗаработков.Номенклатура КАК Номенклатура,
	               |	ТаблицаЗаработков.Количество КАК Количество,
	               |	ТаблицаЗаработков.Сумма КАК Сумма,
	               |	ТаблицаЗаработков.КПП_Склад КАК КПП_Склад,
	               |	ТаблицаЗаработков.Коэфф КАК Коэфф,
	               |	ТаблицаЗаработков.ЕстьДолгПоДокументу КАК ЕстьДолгПоДокументу
	               |ПОМЕСТИТЬ РеализацииКТСПомощь
	               |ИЗ
	               |	ТаблицаЗаработков КАК ТаблицаЗаработков
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыКТСПомощь КАК ТаблицаНоменклатурыКТСПомощь
	               |		ПО ТаблицаЗаработков.Номенклатура = ТаблицаНоменклатурыКТСПомощь.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеализацииКТСПомощь.Ссылка КАК Ссылка,
	               |	РеализацииКТСПомощь.Подразделение КАК Подразделение,
	               |	ВЫРАЗИТЬ(РегистрДопСведения.Значение КАК Справочник.Пользователи) КАК Менеджер,
	               |	РеализацииКТСПомощь.Номенклатура КАК Номенклатура,
	               |	РеализацииКТСПомощь.Количество КАК Количество,
	               |	РеализацииКТСПомощь.Сумма КАК Сумма,
	               |	РеализацииКТСПомощь.КПП_Склад КАК КПП_Склад,
	               |	РеализацииКТСПомощь.Коэфф КАК Коэфф,
	               |	РеализацииКТСПомощь.ЕстьДолгПоДокументу КАК ЕстьДолгПоДокументу
	               |ПОМЕСТИТЬ РеализацииКТСПомощьПоМенеджерам
	               |ИЗ
	               |	РеализацииКТСПомощь КАК РеализацииКТСПомощь
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК РегистрДопСведения
	               |		ПО (РеализацииКТСПомощь.Ссылка = (ВЫРАЗИТЬ(РегистрДопСведения.Объект КАК Документ.РеализацияТоваровУслуг)))
	               |			И (РегистрДопСведения.Свойство = &СвойствоПомощьКТС)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаработков.Ссылка КАК Ссылка,
	               |	ТаблицаЗаработков.Подразделение КАК Подразделение,
	               |	ТаблицаЗаработков.Менеджер КАК Менеджер,
	               |	ТаблицаЗаработков.Номенклатура КАК Номенклатура,
	               |	ТаблицаЗаработков.Количество КАК Количество,
	               |	ТаблицаЗаработков.Сумма КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ТаблицаЗаработков.ЕстьДолгПоДокументу = ИСТИНА
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * РасширенныеНастройкиКТСПомощь.ПроцентПродажы * 0.01 * ТаблицаЗаработков.Коэфф
	               |					КОГДА ЕСТЬNULL(ТаблицаНоменклатурыКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентПродажыУслуги * 0.01 * ТаблицаЗаработков.Коэфф
	               |					КОГДА ЕСТЬNULL(РасширенныеНастройкиСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * РасширенныеНастройкиСертификатов.Процент * 0.01
	               |					КОГДА ЕСТЬNULL(ТаблицаСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентОтПродажыСертификата * 0.01
	               |					ИНАЧЕ ТаблицаЗаработков.ЗаработокМенеджера
	               |				КОНЕЦ * ТаблицаЗаработков.КПП_Склад
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ВозможныйЗаработок,
	               |	ВЫБОР
	               |		КОГДА ТаблицаЗаработков.ЕстьДолгПоДокументу = ЛОЖЬ
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентПродажы, 0) * 0.01 * ТаблицаЗаработков.Коэфф
	               |					КОГДА ЕСТЬNULL(ТаблицаНоменклатурыКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентПродажыУслуги * 0.01 * ТаблицаЗаработков.Коэфф
	               |					КОГДА ЕСТЬNULL(РасширенныеНастройкиСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * ЕСТЬNULL(РасширенныеНастройкиСертификатов.Процент, 0) * 0.01
	               |					КОГДА ЕСТЬNULL(ТаблицаСертификатов.ЭтоСертификат, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА ТаблицаЗаработков.Сумма * &ПроцентОтПродажыСертификата * 0.01
	               |					ИНАЧЕ ТаблицаЗаработков.ЗаработокМенеджера
	               |				КОНЕЦ * ТаблицаЗаработков.КПП_Склад
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗаработокМенеджера
	               |ПОМЕСТИТЬ ТаблицаОкончательныйЗаработок
	               |ИЗ
	               |	ТаблицаЗаработков КАК ТаблицаЗаработков
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиКТСПомощь КАК РасширенныеНастройкиКТСПомощь
	               |		ПО ТаблицаЗаработков.Номенклатура = РасширенныеНастройкиКТСПомощь.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыКТСПомощь КАК ТаблицаНоменклатурыКТСПомощь
	               |		ПО ТаблицаЗаработков.Номенклатура = ТаблицаНоменклатурыКТСПомощь.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиСертификатов КАК РасширенныеНастройкиСертификатов
	               |		ПО ТаблицаЗаработков.Номенклатура = РасширенныеНастройкиСертификатов.Сертификат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
	               |		ПО ТаблицаЗаработков.Номенклатура = ТаблицаСертификатов.Номенклатура
	               |{ГДЕ
	               |	ТаблицаЗаработков.Менеджер.* КАК МенеджерОтбор}
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацииКТСПомощьПоМенеджерам.Ссылка,
	               |	РеализацииКТСПомощьПоМенеджерам.Подразделение,
	               |	РеализацииКТСПомощьПоМенеджерам.Менеджер,
	               |	РеализацииКТСПомощьПоМенеджерам.Номенклатура,
	               |	0,
	               |	0,
	               |	ВЫБОР
	               |		КОГДА РеализацииКТСПомощьПоМенеджерам.ЕстьДолгПоДокументу = ИСТИНА
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА РеализацииКТСПомощьПоМенеджерам.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентИсполнения, 0) * 0.01
	               |					ИНАЧЕ РеализацииКТСПомощьПоМенеджерам.Сумма * &ПроцентИсполненияУслуги * 0.01
	               |				КОНЕЦ
	               |		ИНАЧЕ 0
	               |	КОНЕЦ * РеализацииКТСПомощьПоМенеджерам.КПП_Склад * РеализацииКТСПомощьПоМенеджерам.Коэфф,
	               |	ВЫБОР
	               |		КОГДА РеализацииКТСПомощьПоМенеджерам.ЕстьДолгПоДокументу = ЛОЖЬ
	               |			ТОГДА ВЫБОР
	               |					КОГДА ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ЭтоКТСПомощь, ЛОЖЬ) = ИСТИНА
	               |						ТОГДА РеализацииКТСПомощьПоМенеджерам.Сумма * ЕСТЬNULL(РасширенныеНастройкиКТСПомощь.ПроцентИсполнения, 0) * 0.01
	               |					ИНАЧЕ РеализацииКТСПомощьПоМенеджерам.Сумма * &ПроцентИсполненияУслуги * 0.01
	               |				КОНЕЦ
	               |		ИНАЧЕ 0
	               |	КОНЕЦ * РеализацииКТСПомощьПоМенеджерам.КПП_Склад * РеализацииКТСПомощьПоМенеджерам.Коэфф
	               |ИЗ
	               |	РеализацииКТСПомощьПоМенеджерам КАК РеализацииКТСПомощьПоМенеджерам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РасширенныеНастройкиКТСПомощь КАК РасширенныеНастройкиКТСПомощь
	               |		ПО РеализацииКТСПомощьПоМенеджерам.Номенклатура = РасширенныеНастройкиКТСПомощь.Номенклатура
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаЗаработковКонтактЦентр.Ссылка,
	               |	ТаблицаЗаработковКонтактЦентр.Подразделение,
	               |	ТаблицаЗаработковКонтактЦентр.Менеджер,
	               |	ТаблицаЗаработковКонтактЦентр.Номенклатура,
	               |	ТаблицаЗаработковКонтактЦентр.Количество,
	               |	ТаблицаЗаработковКонтактЦентр.Сумма,
	               |	0,
	               |	0
	               |ИЗ
	               |	ТаблицаЗаработковКонтактЦентр КАК ТаблицаЗаработковКонтактЦентр
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОкончательныйЗаработок.Подразделение КАК Подразделение,
	               |	СУММА(ТаблицаОкончательныйЗаработок.Сумма) КАК Сумма,
	               |	СУММА(ТаблицаОкончательныйЗаработок.ВозможныйЗаработок) КАК ВозможныйЗаработок,
	               |	СУММА(ТаблицаОкончательныйЗаработок.ЗаработокМенеджера) КАК ЗаработокМенеджера
	               |ПОМЕСТИТЬ ВТЗаработокПартнеров
	               |ИЗ
	               |	ТаблицаОкончательныйЗаработок КАК ТаблицаОкончательныйЗаработок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделений КАК ТаблицаПодразделений
	               |		ПО ТаблицаОкончательныйЗаработок.Подразделение = ТаблицаПодразделений.Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаОкончательныйЗаработок.Подразделение";

	
	//FIXME: необходимо добавить группировку по партнеру. 
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатурыКТСПомощь", ктс_ПредопределенныеЗначенияПовтИсп.ВидНоменклатурыКТСПомощь()); 
	Запрос.УстановитьПараметр("ВидНоменклатурыСертификат", ктс_ПредопределенныеЗначенияПовтИсп.ВидНоменклатурыСертификаты());
	Запрос.УстановитьПараметр("СвойствоПомощьКТС", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПомощьКТС());
	Запрос.УстановитьПараметр("ПроцентПродажыУслуги", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентПродажыУслуги());
	Запрос.УстановитьПараметр("ПроцентОтПродажыСертификата", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентОтПродажыСертификата());
	Запрос.УстановитьПараметр("ПроцентИсполненияУслуги", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентИсполненияУслуги());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДополнительныеПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	Запрос.УстановитьПараметр("ПодразделениеОтбор", ктс_ПредопределенныеЗначенияПовтИсп.ПодразделениеКонтактЦентр());
	
	Запрос.Выполнить();
	
	//Окончательная выборка. 
	Запрос.Текст = "
				|	ВЫБРАТЬ
				|		ВТНачисленияПартнеров.ВидРасчета,
				|		ВТНачисленияПартнеров.НачалоПериода,
				|		ВТНачисленияПартнеров.ОкончаниеПериода,
				|		ВТНачисленияПартнеров.ИдентификаторСтроки,
				|		ВТЗаработокПартнеров.Подразделение,
				|		СУММА(ВТЗаработокПартнеров.Сумма) КАК Сумма,
				|		СУММА(ВТЗаработокПартнеров.ВозможныйЗаработок) КАК ВозможныйЗаработок,
				|		СУММА(ВТЗаработокПартнеров.ЗаработокМенеджера) КАК ЗаработокМенеджера
				|	ИЗ
				|		ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаработокПартнеров КАК ВТЗаработокПартнеров
				|			ПО ВТНачисленияПартнеров.Подразделение = ВТЗаработокПартнеров.Подразделение
				|
				|	СГРУППИРОВАТЬ ПО
				|		ВТНачисленияПартнеров.ВидРасчета,
				|		ВТНачисленияПартнеров.НачалоПериода,
				|		ВТНачисленияПартнеров.ОкончаниеПериода,
				|		ВТНачисленияПартнеров.ИдентификаторСтроки,
				|		ВТЗаработокПартнеров.Подразделение";
				
	Выборка = Запрос.Выполнить().Выбрать();
				
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Сумма;
	КонецЦикла;
	
	//Уничтожим лишние временные таблицы.
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияПартнеров
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |УНИЧТОЖИТЬ ТаблицаПодразделений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТМенеджерыПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДолгиПоЗаказам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДолгиПоРеализациям
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РасширенныеНастройкиКТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаНоменклатурыКТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РасширенныеНастройкиСертификатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаСертификатов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаЗаработков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РеализацииКТСПомощь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РеализацииКТСПомощьПоМенеджерам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОкончательныйЗаработок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТЗаработокПартнеров"; 

	Запрос.Выполнить(); //Почистим за собой. 		  
	
КонецПроцедуры

Процедура РассчитатьРадугуПроцентКрасныхЦелыхПоРаботнику(Показатель, СтрокиРасчета, ДополнительныеПараметры) 
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_Радуга") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
				   |	Начисления.Подразделение КАК Подразделение,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПартнеров
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ДополнительныеСведения.Объект КАК Менеджер
	               |ПОМЕСТИТЬ ВТМенеджерыПартнеров
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТНачисленияПартнеров.Партнер = ДополнительныеСведения.Значение
	               |			И (ДополнительныеСведения.Свойство = &СвойствоПартнерЗП)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	Запрос.Выполнить();
		
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	               |ПОМЕСТИТЬ КешКалендарьПоДнях
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |ГДЕ
	               |	КалендарныеГрафики.Календарь = &Календарь
	               |	И КалендарныеГрафики.ДатаГрафика >= &ДатаНачало
	               |	И НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ) <= &ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ДатаГрафика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра
	               |ПОМЕСТИТЬ ЗакрытиеЗаявкиДоНачалоОтчета
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(&ДатаНачало, ) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
	               |ГДЕ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период КАК ДатаНачало,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.МесторасположениеФактическое,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ДатаИсполнения КАК ДатаДедлайн,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЭтапРаботы
	               |ПОМЕСТИТЬ КешМестоРасположение
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
	               |ГДЕ
	               |	НЕ ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.ЗаявкаСервисногоЦентра В
	               |				(ВЫБРАТЬ
	               |					ЗакрытиеЗаявкиДоНачалоОтчета.ЗаявкаСервисногоЦентра
	               |				ИЗ
	               |					ЗакрытиеЗаявкиДоНачалоОтчета КАК ЗакрытиеЗаявкиДоНачалоОтчета)
	               |	И НАЧАЛОПЕРИОДА(ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.Период, ДЕНЬ) <= &ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешМестоРасположение.ДатаНачало,
	               |	МИНИМУМ(ЕСТЬNULL(КешМестоРасположениеКопия.ДатаНачало, КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ))) КАК ДатаОкончания,
	               |	КешМестоРасположение.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	КешМестоРасположение.ЭтапРаботы,
	               |	КешМестоРасположение.МесторасположениеФактическое,
	               |	КешМестоРасположение.ДатаДедлайн
	               |ПОМЕСТИТЬ НаростающиеПоЗСЦ
	               |ИЗ
	               |	КешМестоРасположение КАК КешМестоРасположение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешМестоРасположение КАК КешМестоРасположениеКопия
	               |		ПО КешМестоРасположение.ЗаявкаСервисногоЦентра = КешМестоРасположениеКопия.ЗаявкаСервисногоЦентра
	               |			И КешМестоРасположение.ДатаНачало < КешМестоРасположениеКопия.ДатаНачало
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КешМестоРасположение.ДатаНачало,
	               |	КешМестоРасположение.ЗаявкаСервисногоЦентра,
	               |	КешМестоРасположение.МесторасположениеФактическое,
	               |	КешМестоРасположение.ДатаДедлайн,
	               |	КешМестоРасположение.ЭтапРаботы
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(НаростающиеПоЗСЦ.ДатаНачало) КАК ДатаНачало,
	               |	КОНЕЦПЕРИОДА(НаростающиеПоЗСЦ.ДатаНачало, ДЕНЬ) КАК КонецДня,
	               |	НаростающиеПоЗСЦ.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра
	               |ПОМЕСТИТЬ СрезПоследних
	               |ИЗ
	               |	НаростающиеПоЗСЦ КАК НаростающиеПоЗСЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КОНЕЦПЕРИОДА(НаростающиеПоЗСЦ.ДатаНачало, ДЕНЬ),
	               |	НаростающиеПоЗСЦ.ЗаявкаСервисногоЦентра
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СрезПоследних.ДатаНачало,
	               |	НаростающиеПоЗСЦ.ДатаОкончания,
	               |	НаростающиеПоЗСЦ.ДатаДедлайн,
	               |	СрезПоследних.КонецДня,
	               |	СрезПоследних.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	НаростающиеПоЗСЦ.ЭтапРаботы,
	               |	НаростающиеПоЗСЦ.МесторасположениеФактическое
	               |ПОМЕСТИТЬ ЗСЦСрезПоследних
	               |ИЗ
	               |	СрезПоследних КАК СрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаростающиеПоЗСЦ КАК НаростающиеПоЗСЦ
	               |		ПО СрезПоследних.ЗаявкаСервисногоЦентра = НаростающиеПоЗСЦ.ЗаявкаСервисногоЦентра
	               |			И СрезПоследних.ДатаНачало = НаростающиеПоЗСЦ.ДатаНачало
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешКалендарьПоДнях.ДатаГрафика,
	               |	ЗСЦСрезПоследних.ДатаНачало,
	               |	ЗСЦСрезПоследних.КонецДня,
	               |	ЗСЦСрезПоследних.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	ЗСЦСрезПоследних.ЭтапРаботы,
	               |	ЗСЦСрезПоследних.МесторасположениеФактическое,
	               |	ЗСЦСрезПоследних.ДатаОкончания,
	               |	ЗСЦСрезПоследних.ДатаДедлайн,
	               |	ВЫБОР
	               |		КОГДА ЗСЦСрезПоследних.ДатаОкончания < КОНЕЦПЕРИОДА(КешКалендарьПоДнях.ДатаГрафика, ДЕНЬ)
	               |			ТОГДА РАЗНОСТЬДАТ(ЗСЦСрезПоследних.ДатаДедлайн, КОНЕЦПЕРИОДА(КешКалендарьПоДнях.ДатаГрафика, ДЕНЬ), ЧАС)
	               |		ИНАЧЕ РАЗНОСТЬДАТ(ЗСЦСрезПоследних.ДатаДедлайн, КОНЕЦПЕРИОДА(КешКалендарьПоДнях.ДатаГрафика, ДЕНЬ), ЧАС)
	               |	КОНЕЦ КАК Разница
	               |ПОМЕСТИТЬ РасчетРазницыДат
	               |ИЗ
	               |	КешКалендарьПоДнях КАК КешКалендарьПоДнях
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЗСЦСрезПоследних КАК ЗСЦСрезПоследних
	               |		ПО (КешКалендарьПоДнях.ДатаГрафика >= НАЧАЛОПЕРИОДА(ЗСЦСрезПоследних.ДатаНачало, ДЕНЬ))
	               |			И (ВЫБОР
	               |				КОГДА ЗСЦСрезПоследних.ДатаОкончания = &ТекущаяДата
	               |					ТОГДА КешКалендарьПоДнях.ДатаГрафика <= НАЧАЛОПЕРИОДА(ЗСЦСрезПоследних.ДатаОкончания, ДЕНЬ)
	               |				ИНАЧЕ КешКалендарьПоДнях.ДатаГрафика < НАЧАЛОПЕРИОДА(ЗСЦСрезПоследних.ДатаОкончания, ДЕНЬ)
	               |			КОНЕЦ)
	               |ГДЕ
	               |	ЗСЦСрезПоследних.ЭтапРаботы <> ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетРазницыДат.ДатаГрафика,
	               |	РасчетРазницыДат.ЗаявкаСервисногоЦентра,
	               |	РасчетРазницыДат.МесторасположениеФактическое,
	               |	ВЫБОР
	               |		КОГДА РасчетРазницыДат.Разница <= -25
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Белые,
	               |	ВЫБОР
	               |		КОГДА РасчетРазницыДат.Разница >= -24
	               |				И РасчетРазницыДат.Разница < 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Желтые,
	               |	ВЫБОР
	               |		КОГДА РасчетРазницыДат.Разница >= 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Красные,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(РасчетРазницыДат.ДатаОкончания, ДЕНЬ) <> РасчетРазницыДат.ДатаГрафика
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоЗСЦ
	               |ПОМЕСТИТЬ КешСтатистика
	               |ИЗ
	               |	РасчетРазницыДат КАК РасчетРазницыДат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ГНАТ_МесторасположениеВСервисеОтветственные.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Инженер,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ГОД) КАК ПериодГод,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ДЕКАДА) КАК ПериодДекада,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ДЕНЬ) КАК ПериодДень,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, КВАРТАЛ) КАК ПериодКвартал,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, МЕСЯЦ) КАК ПериодМесяц,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, НЕДЕЛЯ) КАК ПериодНеделя,
	               |	НАЧАЛОПЕРИОДА(КешСтатистика.ДатаГрафика, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	               |	КешСтатистика.ЗаявкаСервисногоЦентра,
	               |	КешСтатистика.МесторасположениеФактическое,
	               |	КешСтатистика.Белые,
	               |	КешСтатистика.Желтые,
	               |	КешСтатистика.Красные,
	               |	КешСтатистика.КоличествоЗСЦ,
	               |	0 КАК ПроцентЖелтых,
	               |	0 КАК ПроцентКрасных
	               |ПОМЕСТИТЬ ВТРезультат
	               |ИЗ
	               |	КешСтатистика КАК КешСтатистика
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_МесторасположениеВСервисе.Ответственные КАК ГНАТ_МесторасположениеВСервисеОтветственные
	               |		ПО КешСтатистика.МесторасположениеФактическое = ГНАТ_МесторасположениеВСервисеОтветственные.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРезультат.Инженер,
	               |	ВТРезультат.ПериодГод,
	               |	ВТРезультат.ПериодДекада,
	               |	ВТРезультат.ПериодДень,
	               |	ВТРезультат.ПериодКвартал,
	               |	ВТРезультат.ПериодМесяц,
	               |	ВТРезультат.ПериодНеделя,
	               |	ВТРезультат.ПериодПолугодие,
	               |	ВТРезультат.ЗаявкаСервисногоЦентра,
	               |	ВТРезультат.МесторасположениеФактическое,
	               |	ВТРезультат.Белые,
	               |	ВТРезультат.Желтые,
	               |	ВТРезультат.Красные,
	               |	ВТРезультат.КоличествоЗСЦ,
	               |	ВТРезультат.ПроцентЖелтых,
	               |	ВТРезультат.ПроцентКрасных,
	               |	ВТМенеджерыПартнеров.Партнер
	               |ПОМЕСТИТЬ ВТРезультатИтоговый
	               |ИЗ
	               |	ВТРезультат КАК ВТРезультат
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМенеджерыПартнеров КАК ВТМенеджерыПартнеров
	               |		ПО ВТРезультат.Инженер = ВТМенеджерыПартнеров.Менеджер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ВТНачисленияПартнеров.ВидРасчета,
	               |	ВТНачисленияПартнеров.НачалоПериода,
	               |	ВТНачисленияПартнеров.ОкончаниеПериода,
	               |	ВТНачисленияПартнеров.ИдентификаторСтроки,
	               |	ВТНачисленияПартнеров.Подразделение,
	               |	СУММА(ЕСТЬNULL(ВТРезультат.КоличествоЗСЦ, 0)) КАК КоличествоЗСЦ,
	               |	СУММА(ЕСТЬNULL(ВТРезультат.Красные, 0)) КАК Красные
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатИтоговый КАК ВТРезультат
	               |		ПО ВТНачисленияПартнеров.Партнер = ВТРезультат.Партнер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ВТНачисленияПартнеров.ВидРасчета,
	               |	ВТНачисленияПартнеров.НачалоПериода,
	               |	ВТНачисленияПартнеров.ОкончаниеПериода,
	               |	ВТНачисленияПартнеров.ИдентификаторСтроки,
	               |	ВТНачисленияПартнеров.Подразделение";
	//FIXME: в отчете Райдуга используется поиск по уид Справочники.Календари.ПолучитьСсылку(Новый УникальныйИдентификатор("fbf9ec12-f8bc-11e1-9d4d-001e673c80fc")) 
	КалендарьПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенноеЗначение("Справочник.КТС_Константы.ОсновнойКалендарьЗП"), "Значение");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаНачало", НачалоМесяца(ДополнительныеПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	Запрос.УстановитьПараметр("Календарь", КалендарьПоУмолчанию);
	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = ?(Выборка.КоличествоЗСЦ = 0, 0, Окр((Выборка.Красные/Выборка.КоличествоЗСЦ*100), 0));
	КонецЦикла;
	
	//Уничтожим лишние временные таблицы.
	Запрос.Текст = "УНИЧТОЖИТЬ ВТРезультатИтоговый
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТНачисленияПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТМенеджерыПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТРезультат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешСтатистика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РасчетРазницыДат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ЗСЦСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НаростающиеПоЗСЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешКалендарьПоДнях
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ЗакрытиеЗаявкиДоНачалоОтчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешМестоРасположение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СрезПоследних"; 
				  
	Запрос.Выполнить();
				  
	
КонецПроцедуры

Процедура РассчитатьОборотПоПользователюЗПРозница(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ОборотРаботника") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПартнеров
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ДополнительныеСведения.Объект КАК Менеджер
	               |ПОМЕСТИТЬ ВТМенеджерыПартнеров
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТНачисленияПартнеров.Партнер = ДополнительныеСведения.Значение
	               |			И (ДополнительныеСведения.Свойство = &СвойствоПартнерЗП)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	Запрос.Выполнить();
		
	ТекстЗапроса = ПолучитьТекстЗапросаБазовыйЗПРозница();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатурыКТСПомощь", ктс_ПредопределенныеЗначенияПовтИсп.ВидНоменклатурыКТСПомощь()); 
	Запрос.УстановитьПараметр("ВидНоменклатурыСертификат", ктс_ПредопределенныеЗначенияПовтИсп.ВидНоменклатурыСертификаты());
	Запрос.УстановитьПараметр("СвойствоПомощьКТС", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПомощьКТС());
	Запрос.УстановитьПараметр("ПроцентПродажыУслуги", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентПродажыУслуги());
	Запрос.УстановитьПараметр("ПроцентОтПродажыСертификата", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентОтПродажыСертификата());
	Запрос.УстановитьПараметр("ПроцентИсполненияУслуги", ктс_ПредопределенныеЗначенияПовтИсп.ПроцентИсполненияУслуги());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДополнительныеПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	
	Запрос.Выполнить();
	
	//Окончательная выборка. 
	Запрос.Текст = "
				|	ВЫБРАТЬ
				|		ВТНачисленияПартнеров.Партнер,
				|		ВТНачисленияПартнеров.ВидРасчета,
				|		ВТНачисленияПартнеров.НачалоПериода,
				|		ВТНачисленияПартнеров.ОкончаниеПериода,
				|		ВТНачисленияПартнеров.ИдентификаторСтроки,
				|		СУММА(ВТЗаработокПартнеров.Сумма) КАК Сумма,
				|		СУММА(ВТЗаработокПартнеров.ВозможныйЗаработок) КАК ВозможныйЗаработок,
				|		СУММА(ВТЗаработокПартнеров.ЗаработокМенеджера) КАК ЗаработокМенеджера
				|	ИЗ
				|		ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаработокПартнеров КАК ВТЗаработокПартнеров
				|			ПО ВТНачисленияПартнеров.Партнер = ВТЗаработокПартнеров.Партнер
				|
				|	СГРУППИРОВАТЬ ПО
				|		ВТНачисленияПартнеров.Партнер,
				|		ВТНачисленияПартнеров.ВидРасчета,
				|		ВТНачисленияПартнеров.НачалоПериода,
				|		ВТНачисленияПартнеров.ОкончаниеПериода,
				|		ВТНачисленияПартнеров.ИдентификаторСтроки";
				
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Сумма;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТМенеджерыПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДолгиПоЗаказам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаЗаработков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОкончательныйЗаработок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТЗаработокПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РеализацииКТСПомощьПоМенеджерам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДолгиПоРеализациям";
	Запрос.Выполнить(); //Почистим за собой. 
	
КонецПроцедуры //РассчитатьОборотПоПользователюЗПРозница

Процедура РассчитатьЗаработокРаботникаСЦ(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ЗаработокРаботникаСЦ") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДополнительныеПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	Запрос.УстановитьПараметр("ГруппаВидНоменклатуры", ктс_ПредопределенныеЗначенияПовтИсп.ГруппаВидаНоменклатурыСЦ());

	
	#Область ТекстЗапроса
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПартнеров
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ДополнительныеСведения.Объект КАК Менеджер
	               |ПОМЕСТИТЬ ВТМенеджерыПартнеров
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ВТНачисленияПартнеров.Партнер = ДополнительныеСведения.Значение
	               |			И (ДополнительныеСведения.Свойство = &СвойствоПартнерЗП)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Партнеры.Партнер
	               |ПОМЕСТИТЬ КешОплатаСразу
	               |ИЗ
	               |	РегистрСведений.Модуль_ДоступныеСклады КАК Партнеры
	               |ГДЕ
	               |	Партнеры.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Партнеры.Партнер
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ВендорыСервисногоЦентра КАК Партнеры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнеры.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГНАТ_ЭтапыРаботы.Ссылка КАК ГНАТ_ЭтапРаботы
	               |ПОМЕСТИТЬ КешЭтаповРабот
	               |ИЗ
	               |	Справочник.ГНАТ_ЭтапыРаботы КАК ГНАТ_ЭтапыРаботы
	               |ГДЕ
	               |	ГНАТ_ЭтапыРаботы.ЭтоРемонт = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МАКСИМУМ(ЭтапыРаботЗСЦ.Период) КАК Период,
	               |	ЭтапыРаботЗСЦ.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра
	               |ПОМЕСТИТЬ КешЗСЦ
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ЭтапыРаботЗСЦ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешЭтаповРабот КАК ЭтапыРаботы
	               |		ПО (ЭтапыРаботы.ГНАТ_ЭтапРаботы = ЭтапыРаботЗСЦ.ЭтапРаботы)
	               |ГДЕ
	               |	ЭтапыРаботЗСЦ.ЗаявкаСервисногоЦентра.Рекламация = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЭтапыРаботЗСЦ.ЗаявкаСервисногоЦентра
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаявкаСервисногоЦентра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешЗСЦ.Период КАК Период,
	               |	КешЗСЦ.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
	               |	РТиУ.Ссылка КАК ОбъектРасчетов,
	               |	РТиУ.Менеджер КАК Менеджер
	               |ПОМЕСТИТЬ ОбъектыРасчетов
	               |ИЗ
	               |	КешЗСЦ КАК КешЗСЦ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РТиУ
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМенеджерыПартнеров КАК ВТМенеджерыПартнеров
	               |			ПО (ВТМенеджерыПартнеров.Менеджер = РТиУ.Менеджер)
	               |		ПО (РТиУ.ЗаявкаСервисногоЦентра = КешЗСЦ.ЗаявкаСервисногоЦентра)
	               |			И (РТиУ.ВидПодчиненногоДокументаГНАТ = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыПодчиненныхДокументов.РеализацияЗапчастейУслуг))
	               |			И (РТиУ.Проведен = ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента КАК ОбъектРасчетов,
	               |	РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента.Партнер КАК Партнер,
	               |	РасчетыСКлиентамиОстаткиИОбороты.КОплатеРасход КАК КОплатеРасход,
	               |	РасчетыСКлиентамиОстаткиИОбороты.КОплатеКонечныйОстаток КАК КОплате
	               |ПОМЕСТИТЬ СостояниеОплатыВПериоде
	               |ИЗ
	               |	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , ) КАК РасчетыСКлиентамиОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	               |		ПО РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента = ОбъектыРасчетов.ОбъектРасчетов
	               |ГДЕ
	               |	(НЕ РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам.Партнер В
	               |					(ВЫБРАТЬ
	               |						КешОплатаСразу.Партнер
	               |					ИЗ
	               |						КешОплатаСразу)
	               |			ИЛИ ВЫРАЗИТЬ(РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Дата > &НачалоПериода)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА ВИСП.АналитикаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель <> &ГруппаВидНоменклатуры
	               |				ТОГДА 0
	               |			КОГДА ПартнерыСегмента.Партнер ЕСТЬ NULL 
	               |				ТОГДА ВЫБОР
	               |						КОГДА СостояниеОплатыВПериоде.КОплате <> 0
	               |							ТОГДА ВИСП.СуммаВыручкиРегл
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ВозможныйЗаработок,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВИСП.АналитикаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель <> &ГруппаВидНоменклатуры
	               |				ТОГДА 0
	               |			КОГДА ЕСТЬNULL(ПартнерыСегмента.Партнер, ЛОЖЬ) <> ЛОЖЬ
	               |				ТОГДА ВИСП.СуммаВыручкиРегл
	               |			КОГДА СостояниеОплатыВПериоде.КОплате = 0
	               |				ТОГДА ВИСП.СуммаВыручкиРегл
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Заработок,
	               |	СУММА(СостояниеОплатыВПериоде.КОплатеРасход) КАК ОплаченоВДанномПериоде,
	               |	ВТМенеджерыПартнеров.Менеджер,
	               |	ВТМенеджерыПартнеров.Партнер КАК Партнер
	               |ПОМЕСТИТЬ РезультатИтоги
	               |ИЗ
	               |	СостояниеОплатыВПериоде КАК СостояниеОплатыВПериоде
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМенеджерыПартнеров КАК ВТМенеджерыПартнеров
	               |			ПО (ВТМенеджерыПартнеров.Менеджер = ОбъектыРасчетов.Менеджер)
	               |		ПО (ОбъектыРасчетов.ОбъектРасчетов = СостояниеОплатыВПериоде.ОбъектРасчетов)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК ЭтапыРаботЗСЦ
	               |		ПО (ЭтапыРаботЗСЦ.ЗаявкаСервисногоЦентра = ОбъектыРасчетов.ЗаявкаСервисногоЦентра)
	               |			И (ЭтапыРаботЗСЦ.Период = ОбъектыРасчетов.Период)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВИСП
	               |		ПО ((ВЫРАЗИТЬ(ВИСП.Регистратор КАК Документ.РеализацияТоваровУслуг)) = СостояниеОплатыВПериоде.ОбъектРасчетов)
	               |			И (ВИСП.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешОплатаСразу КАК ПартнерыСегмента
	               |		ПО (ПартнерыСегмента.Партнер = СостояниеОплатыВПериоде.Партнер)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТМенеджерыПартнеров.Менеджер,
	               |	ВТМенеджерыПартнеров.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ВТНачисленияПартнеров.ВидРасчета,
	               |	ВТНачисленияПартнеров.НачалоПериода,
	               |	ВТНачисленияПартнеров.ОкончаниеПериода,
	               |	ВТНачисленияПартнеров.ИдентификаторСтроки,
	               |	СУММА(РезультатИтоги.Заработок) КАК Заработок,
	               |	СУММА(РезультатИтоги.ВозможныйЗаработок) КАК ВозможныйЗаработок,
	               |	СУММА(РезультатИтоги.ОплаченоВДанномПериоде) КАК ОплаченоВДанномПериоде
	               |ИЗ
	               |	ВТНачисленияПартнеров КАК ВТНачисленияПартнеров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РезультатИтоги КАК РезультатИтоги
	               |		ПО ВТНачисленияПартнеров.Партнер = РезультатИтоги.Партнер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТНачисленияПартнеров.НачалоПериода,
	               |	ВТНачисленияПартнеров.Партнер,
	               |	ВТНачисленияПартнеров.ВидРасчета,
	               |	ВТНачисленияПартнеров.ИдентификаторСтроки,
	               |	ВТНачисленияПартнеров.ОкончаниеПериода";
	#КонецОбласти 
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Заработок;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТМенеджерыПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешОплатаСразу
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешЭтаповРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешЗСЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ОбъектыРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СостояниеОплатыВПериоде
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ РезультатИтоги"; 
				  
	Запрос.Выполнить();
	
КонецПроцедуры //РассчитатьЗаработокРаботникаСЦ

Процедура РассчитатьПроцентЗалета(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ПроцентЗалета") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ОбработкаЗаказовКлиентов.Номенклатура КАК Номенклатура,
	               |	ВЫРАЗИТЬ(ОбработкаЗаказовКлиентов.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ЗаказКлиента,
	               |	ОбработкаЗаказовКлиентов.КодСтроки,
	               |	ОбработкаЗаказовКлиентов.КоличествоВЗаказе,
	               |	ОбработкаЗаказовКлиентов.ДатаАктуальности
	               |ПОМЕСТИТЬ ОбособленыНоменклатура
	               |ИЗ
	               |	РегистрСведений.ОбработкаЗаказовКлиентов КАК ОбработкаЗаказовКлиентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ПО ОбработкаЗаказовКлиентов.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
	               |			И ОбработкаЗаказовКлиентов.Номенклатура = ЗаказКлиентаТовары.Номенклатура
	               |			И ОбработкаЗаказовКлиентов.КодСтроки = ЗаказКлиентаТовары.КодСтроки
	               |			И (ЗаказКлиентаТовары.ОтменитьЗаказПодЗаказ = ЛОЖЬ)
	               |			И (ЗаказКлиентаТовары.Отменено = ЛОЖЬ)
	               |ГДЕ
	               |	ВЫРАЗИТЬ(ОбработкаЗаказовКлиентов.ЗаказКлиента КАК Документ.ЗаказКлиента).Дата >= &НачалоПериода
	               |	И ВЫРАЗИТЬ(ОбработкаЗаказовКлиентов.ЗаказКлиента КАК Документ.ЗаказКлиента).Дата <= &КонецПериода
	               |	И НЕ ОбработкаЗаказовКлиентов.ДатаАктуальности = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	ЗаказКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыКПоступлениюОбороты.Период КАК ДатаПоступления,
	               |	ОбеспечениеЗаказовОбороты.Номенклатура,
	               |	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Назначение.Заказ КАК Документ.ЗаказКлиента) КАК Заказ,
	               |	ОбеспечениеЗаказовОбороты.НаличиеПодЗаказПриход,
	               |	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПеремещениеТоваров) КАК Регистратор,
	               |	ОбеспечениеЗаказовОбороты.Склад,
	               |	ТоварыКПоступлениюОбороты.КПоступлениюРасход КАК КПоступлению
	               |ПОМЕСТИТЬ ПоступленияПоОбеспечению
	               |ИЗ
	               |	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
	               |			&НачалоПериода,
	               |			,
	               |			Регистратор,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ОбособленыНоменклатура.Номенклатура
	               |					ИЗ
	               |						ОбособленыНоменклатура)
	               |				И ВЫРАЗИТЬ(Назначение.Заказ КАК Документ.ЗаказКлиента) В
	               |					(ВЫБРАТЬ
	               |						ОбособленыНоменклатура.ЗаказКлиента
	               |					ИЗ
	               |						ОбособленыНоменклатура)
	               |				И Склад = &ЛогистическийСклад) КАК ОбеспечениеЗаказовОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Обороты(
	               |				&НачалоПериода,
	               |				,
	               |				Регистратор,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ОбособленыНоменклатура.Номенклатура
	               |						ИЗ
	               |							ОбособленыНоменклатура)
	               |					И Склад = &ЛогистическийСклад) КАК ТоварыКПоступлениюОбороты
	               |		ПО ОбеспечениеЗаказовОбороты.Номенклатура = ТоварыКПоступлениюОбороты.Номенклатура
	               |			И ((ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПеремещениеТоваров)) = (ВЫРАЗИТЬ(ТоварыКПоступлениюОбороты.ДокументПоступления КАК Документ.ПеремещениеТоваров)))
	               |ГДЕ
	               |	ОбеспечениеЗаказовОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ОбеспечениеЗаказовОбороты.Период,
	               |	ОбеспечениеЗаказовОбороты.Номенклатура,
	               |	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Назначение.Заказ КАК Документ.ЗаказКлиента),
	               |	ОбеспечениеЗаказовОбороты.НаличиеПодЗаказПриход,
	               |	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг),
	               |	ОбеспечениеЗаказовОбороты.Склад,
	               |	ОбеспечениеЗаказовОбороты.НаличиеПодЗаказПриход
	               |ИЗ
	               |	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
	               |			&НачалоПериода,
	               |			,
	               |			Регистратор,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ОбособленыНоменклатура.Номенклатура
	               |					ИЗ
	               |						ОбособленыНоменклатура)
	               |				И ВЫРАЗИТЬ(Назначение.Заказ КАК Документ.ЗаказКлиента) В
	               |					(ВЫБРАТЬ
	               |						ОбособленыНоменклатура.ЗаказКлиента
	               |					ИЗ
	               |						ОбособленыНоменклатура)
	               |				И Склад = &ЛогистическийСклад) КАК ОбеспечениеЗаказовОбороты
	               |ГДЕ
	               |	ОбеспечениеЗаказовОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ОбеспечениеЗаказовОбороты.Период,
	               |	ОбеспечениеЗаказовОбороты.Номенклатура,
	               |	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Назначение.Заказ КАК Документ.ЗаказКлиента),
	               |	ОбеспечениеЗаказовОбороты.НаличиеСоСкладаРасход,
	               |	ВЫРАЗИТЬ(ОбеспечениеЗаказовОбороты.Регистратор КАК Документ.ПеремещениеТоваров),
	               |	ОбеспечениеЗаказовОбороты.Склад,
	               |	ОбеспечениеЗаказовОбороты.НаличиеСоСкладаРасход
	               |ИЗ
	               |	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
	               |			&НачалоПериода,
	               |			,
	               |			Регистратор,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ОбособленыНоменклатура.Номенклатура
	               |					ИЗ
	               |						ОбособленыНоменклатура)
	               |				И ВЫРАЗИТЬ(Назначение.Заказ КАК Документ.ЗаказКлиента) В
	               |					(ВЫБРАТЬ
	               |						ОбособленыНоменклатура.ЗаказКлиента
	               |					ИЗ
	               |						ОбособленыНоменклатура)
	               |				И Склад = &ЛогистическийСклад) КАК ОбеспечениеЗаказовОбороты
	               |ГДЕ
	               |	ОбеспечениеЗаказовОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбособленыНоменклатура.ЗаказКлиента,
	               |	ОбособленыНоменклатура.КодСтроки,
	               |	ОбособленыНоменклатура.Номенклатура,
	               |	ОбособленыНоменклатура.КоличествоВЗаказе,
	               |	ОбособленыНоменклатура.ДатаАктуальности,
	               |	СУММА(ОбособленыНоменклатураКопия.КоличествоВЗаказе) - ОбособленыНоменклатура.КоличествоВЗаказе КАК КоличествоВЗаказеДо,
	               |	СУММА(ОбособленыНоменклатураКопия.КоличествоВЗаказе) КАК КоличествоВЗаказеПосле
	               |ПОМЕСТИТЬ ОбособленаНоменклатураПоНаростающим
	               |ИЗ
	               |	ОбособленыНоменклатура КАК ОбособленыНоменклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленыНоменклатура КАК ОбособленыНоменклатураКопия
	               |		ПО ОбособленыНоменклатура.ЗаказКлиента = ОбособленыНоменклатураКопия.ЗаказКлиента
	               |			И ОбособленыНоменклатура.Номенклатура = ОбособленыНоменклатураКопия.Номенклатура
	               |			И ОбособленыНоменклатура.ДатаАктуальности >= ОбособленыНоменклатураКопия.ДатаАктуальности
	               |			И (ВЫБОР
	               |				КОГДА ОбособленыНоменклатура.ДатаАктуальности = ОбособленыНоменклатураКопия.ДатаАктуальности
	               |					ТОГДА ОбособленыНоменклатура.КодСтроки >= ОбособленыНоменклатураКопия.КодСтроки
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбособленыНоменклатура.ЗаказКлиента,
	               |	ОбособленыНоменклатура.КодСтроки,
	               |	ОбособленыНоменклатура.Номенклатура,
	               |	ОбособленыНоменклатура.КоличествоВЗаказе,
	               |	ОбособленыНоменклатура.ДатаАктуальности
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбособленыНоменклатура.ЗаказКлиента,
	               |	ОбособленыНоменклатура.Номенклатура,
	               |	ОбособленыНоменклатура.КоличествоВЗаказе
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступленияПоОбеспечению.Заказ,
	               |	ПоступленияПоОбеспечению.Регистратор,
	               |	ПоступленияПоОбеспечению.Номенклатура,
	               |	ПоступленияПоОбеспечению.ДатаПоступления КАК ДатаПоступления,
	               |	ПоступленияПоОбеспечению.КПоступлению,
	               |	СУММА(ПоступленияПоОбеспечениюКопия.КПоступлению) - ПоступленияПоОбеспечению.КПоступлению КАК КПоступлениюДо,
	               |	СУММА(ПоступленияПоОбеспечениюКопия.КПоступлению) КАК КПоступлениюПосле
	               |ПОМЕСТИТЬ ПоступленияПоОбеспечениюНаростающие
	               |ИЗ
	               |	ПоступленияПоОбеспечению КАК ПоступленияПоОбеспечению
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоступленияПоОбеспечению КАК ПоступленияПоОбеспечениюКопия
	               |		ПО ПоступленияПоОбеспечению.Заказ = ПоступленияПоОбеспечениюКопия.Заказ
	               |			И ПоступленияПоОбеспечению.Номенклатура = ПоступленияПоОбеспечениюКопия.Номенклатура
	               |			И ПоступленияПоОбеспечению.ДатаПоступления >= ПоступленияПоОбеспечениюКопия.ДатаПоступления
	               |			И (ВЫБОР
	               |				КОГДА ПоступленияПоОбеспечению.ДатаПоступления = ПоступленияПоОбеспечениюКопия.ДатаПоступления
	               |					ТОГДА ПоступленияПоОбеспечению.Регистратор >= ПоступленияПоОбеспечениюКопия.Регистратор
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступленияПоОбеспечению.Заказ,
	               |	ПоступленияПоОбеспечению.Регистратор,
	               |	ПоступленияПоОбеспечению.Номенклатура,
	               |	ПоступленияПоОбеспечению.КПоступлению,
	               |	ПоступленияПоОбеспечению.ДатаПоступления
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПоступленияПоОбеспечению.Заказ,
	               |	ПоступленияПоОбеспечению.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбособленаНоменклатураПоНаростающим.ЗаказКлиента КАК ЗаказКлиента,
	               |	ОбособленаНоменклатураПоНаростающим.Номенклатура КАК Номенклатура,
	               |	ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле КАК Точка
	               |ПОМЕСТИТЬ КешТочки
	               |ИЗ
	               |	ОбособленаНоменклатураПоНаростающим КАК ОбособленаНоменклатураПоНаростающим
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПоступленияПоОбеспечениюНаростающие.Заказ,
	               |	ПоступленияПоОбеспечениюНаростающие.Номенклатура,
	               |	ПоступленияПоОбеспечениюНаростающие.КПоступлениюПосле
	               |ИЗ
	               |	ПоступленияПоОбеспечениюНаростающие КАК ПоступленияПоОбеспечениюНаростающие
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказКлиента,
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КешТочки.ЗаказКлиента КАК ЗаказКлиента,
	               |	КешТочки.Номенклатура,
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КодСтроки, 0) КАК КодСтроки,
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказе, 0) КАК КоличествоВЗаказе,
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле, 0) КАК КоличествоВЗаказеПосле,
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаАктуальности,
	               |	МАКСИМУМ(ЕСТЬNULL(ПоступленияПоОбеспечениюНаростающие.ДатаПоступления, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПоступления,
	               |	МАКСИМУМ(ЕСТЬNULL(ПоступленияПоОбеспечениюНаростающие.КПоступлениюПосле, 0)) КАК КПоступлениюПосле
	               |ПОМЕСТИТЬ ОбъединенияПоНаростающим
	               |ИЗ
	               |	КешТочки КАК КешТочки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленаНоменклатураПоНаростающим КАК ОбособленаНоменклатураПоНаростающим
	               |		ПО КешТочки.ЗаказКлиента = ОбособленаНоменклатураПоНаростающим.ЗаказКлиента
	               |			И КешТочки.Номенклатура = ОбособленаНоменклатураПоНаростающим.Номенклатура
	               |			И КешТочки.Точка <= ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле
	               |			И КешТочки.Точка > ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеДо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоступленияПоОбеспечениюНаростающие КАК ПоступленияПоОбеспечениюНаростающие
	               |		ПО КешТочки.ЗаказКлиента = ПоступленияПоОбеспечениюНаростающие.Заказ
	               |			И КешТочки.Номенклатура = ПоступленияПоОбеспечениюНаростающие.Номенклатура
	               |			И КешТочки.Точка <= ПоступленияПоОбеспечениюНаростающие.КПоступлениюПосле
	               |			И КешТочки.Точка > ПоступленияПоОбеспечениюНаростающие.КПоступлениюДо
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КешТочки.ЗаказКлиента,
	               |	КешТочки.Номенклатура,
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КодСтроки, 0),
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказеПосле, 0),
	               |	ЕСТЬNULL(ОбособленаНоменклатураПоНаростающим.КоличествоВЗаказе, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъединенияПоНаростающим.ЗаказКлиента,
	               |	ОбъединенияПоНаростающим.Номенклатура,
	               |	ОбъединенияПоНаростающим.КодСтроки КАК КодСтроки,
	               |	ОбъединенияПоНаростающим.ДатаАктуальности КАК ДатаАктуальности,
	               |	ОбъединенияПоНаростающим.ДатаПоступления,
	               |	1 КАК КоличествоЗаказов,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(ОбъединенияПоНаростающим.ДатаПоступления, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |				И ОбъединенияПоНаростающим.ДатаАктуальности < &ТекущаяДата
	               |			ТОГДА 1
	               |		КОГДА ОбъединенияПоНаростающим.КПоступлениюПосле < ОбъединенияПоНаростающим.КоличествоВЗаказеПосле
	               |				И ОбъединенияПоНаростающим.ДатаАктуальности < &ТекущаяДата
	               |			ТОГДА 1
	               |		КОГДА ОбъединенияПоНаростающим.ДатаАктуальности < НАЧАЛОПЕРИОДА(ОбъединенияПоНаростающим.ДатаПоступления, ДЕНЬ)
	               |				И ОбъединенияПоНаростающим.ДатаАктуальности < &ТекущаяДата
	               |			ТОГДА 1
	               |	КОНЕЦ КАК Залет,
	               |	ГОД(ОбъединенияПоНаростающим.ЗаказКлиента.Дата) КАК Год,
	               |	МЕСЯЦ(ОбъединенияПоНаростающим.ЗаказКлиента.Дата) КАК Месяц,
	               |	ОбъединенияПоНаростающим.ЗаказКлиента.Дата КАК Период,
	               |	ОбъединенияПоНаростающим.Номенклатура.ВидНоменклатуры КАК ВидыНоменклатуры,
	               |	ОбъединенияПоНаростающим.КоличествоВЗаказе
	               |ПОМЕСТИТЬ ВТРезультат
	               |ИЗ
	               |	ОбособленыНоменклатура КАК ОбособленыНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъединенияПоНаростающим КАК ОбъединенияПоНаростающим
	               |		ПО ОбособленыНоменклатура.Номенклатура = ОбъединенияПоНаростающим.Номенклатура
	               |			И ОбособленыНоменклатура.ЗаказКлиента = ОбъединенияПоНаростающим.ЗаказКлиента
	               |			И ОбособленыНоменклатура.КодСтроки = ОбъединенияПоНаростающим.КодСтроки
	               |ГДЕ
	               |	ОбъединенияПоНаростающим.ДатаАктуальности <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВТРезультат.Залет), 0) КАК Залет,
	               |	ЕСТЬNULL(СУММА(ВТРезультат.КоличествоЗаказов), 0) КАК КоличествоЗаказов
	               |ИЗ
	               |	ВТРезультат КАК ВТРезультат";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДополнительныеПараметры.МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	Запрос.УстановитьПараметр("ТекущаяДата", 	КонецДня(ТекущаяДата()));//КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления))); //КонецДня(ТекущаяДата())
	Запрос.УстановитьПараметр("ЛогистическийСклад", ктс_ПредопределенныеЗначенияПовтИсп.ЛогистическийСкладЗП());	//СкладСоборна	
	
	ПроцентЗалета = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоЗаказов <> 0 Тогда
		ПроцентЗалета = Окр(100*Выборка.Залет/Выборка.КоличествоЗаказов, 0);
	КонецЕсли; 
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Начисления.Партнер,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала КАК НачалоПериода,
		|	Начисления.ДатаОкончания КАК ОкончаниеПериода,
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ 
		|	Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок)
		|";
		
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = ПроцентЗалета;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ОбъединенияПоНаростающим
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КешТочки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПоступленияПоОбеспечениюНаростающие
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПоступленияПоОбеспечению
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ОбособленыНоменклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ОбособленаНоменклатураПоНаростающим
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТРезультат";
				   
	Запрос.Выполнить();
	
КонецПроцедуры //РассчитатьПроцентЗалета

Процедура РассчитатьКурсВалют(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_КурсВалют") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПереопределяемыеПоказателяКурсВалют.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИзвестныеЗначения = Новый Структура;
	МассивВалют = Новый Массив;
	МассивНаименований = Новый Массив; //Используем для поиска по наименования
	СоотвествиеНаименованийИКлючей = Новый Соответствие;
	СоотвествиеИсходныхДанныхИНаименованийВалют = Новый Соответствие;
	
	ИдентификаторПоказателя = ИдентификаторПоказателя(Показатель);
	
	//Определим ссылку на справочник курс валют. 
	ПереопределяемыеПоказателяКурсВалют = Новый Структура;
	
	Для каждого КлючИЗначение Из ДополнительныеПараметры.ПереопределяемыеПоказателяКурсВалют Цикл
		НаименованиеВалюты = СтрЗаменить(КлючИЗначение.Ключ, ИдентификаторПоказателя, "");
		НаименованиеВалюты = СтрЗаменить(НаименованиеВалюты, "_", "");
		НаименованиеВалюты = СтрЗаменить(НаименованиеВалюты, "]", "");
		
		МассивНаименований.Добавить(НаименованиеВалюты);
		СоотвествиеИсходныхДанныхИНаименованийВалют.Вставить(НаименованиеВалюты, КлючИЗначение.Ключ); 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Валюты.Ссылка КАК Валюта,
	               |	Валюты.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |ГДЕ
	               |	Валюты.Наименование В (&МассивНаименований)";
				   
	Запрос.УстановитьПараметр("МассивНаименований", МассивНаименований);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПереопределяемыеПоказателяКурсВалют.Вставить(Выборка.Наименование, Выборка.Валюта);
		СоотвествиеНаименованийИКлючей.Вставить(Выборка.Валюта, СоотвествиеИсходныхДанныхИНаименованийВалют.Получить(Выборка.Наименование));
		МассивВалют.Добавить(Выборка.Валюта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КурсыВалютСрезПоследних.Валюта,
	               |	КурсыВалютСрезПоследних.Курс,
	               |	КурсыВалютСрезПоследних.Кратность
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОкончания, Валюта В (&МассивВалют)) КАК КурсыВалютСрезПоследних";
	Запрос.УстановитьПараметр("МассивВалют", МассивВалют);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецМесяца(ДополнительныеПараметры.МесяцНачисления)));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Ключ = СоотвествиеНаименованийИКлючей.Получить(Выборка.Валюта);
		Если Выборка.Кратность = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ИзвестныеЗначения.Вставить(Ключ, Выборка.Курс/Выборка.Кратность);
		
	КонецЦикла;
	
	ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки = ДополнительныеПараметры.ИзвестныеЗначенияПоИдентификаторуСтроки;
	Если ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки = Неопределено Тогда
		ДополнительныеПараметры.ИзвестныеЗначенияПоИдентификаторуСтроки = Новый Соответствие;
		ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки = ДополнительныеПараметры.ИзвестныеЗначенияПоИдентификаторуСтроки;
	КонецЕсли; 
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		
		Если ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки] = Неопределено Тогда
			ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки.Вставить(СтрокаРасчета.ИдентификаторСтроки, Новый Структура);
		КонецЕсли;
			
		ИзвестныеЗначенияСуществующие = ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
		Для Каждого КлючИЗначение Из ИзвестныеЗначения Цикл
			ИзвестныеЗначенияСуществующие.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры //РассчитатьКурсВалют

Процедура РассчитатьКоличествоКалендарныхДней(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ДнейВМесяце") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
	               |	Начисления.ИдентификаторСтроки,
	               |	РАЗНОСТЬДАТ(Начисления.ДатаНачала, Начисления.ДатаОкончания, ДЕНЬ)+1 КАК Количество
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Количество;
	КонецЦикла;
	
КонецПроцедуры //РассчитатьКоличествоКалендарныхДней

Процедура РассчитатьСреднеДневнуюЗПЗа12Месяцев(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	Если Показатель <> ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_СреднедневнаяЗаработнаяПлатаЗаПоследних12Месецов") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПоПартнерам
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗП_ВыполненныеНачисления.Партнер,
	               |	МИНИМУМ(НАЧАЛОПЕРИОДА(ЗП_ВыполненныеНачисления.Период, МЕСЯЦ)) КАК ПериодНачала,
	               |	СУММА(ЗП_ВыполненныеНачисления.СуммаНасчитано) КАК СуммаРасчитано
	               |ПОМЕСТИТЬ ВТНачисленияИтоговые
	               |ИЗ
	               |	РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоПартнерам КАК ВТНачисленияПоПартнерам
	               |		ПО ЗП_ВыполненныеНачисления.Партнер = ВТНачисленияПоПартнерам.Партнер
	               |ГДЕ
	               |	ЗП_ВыполненныеНачисления.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗП_ВыполненныеНачисления.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТНачисленияИтоговые.СуммаРасчитано, 0) КАК Сумма,
	               |	ЕСТЬNULL(РАЗНОСТЬДАТ(ВТНачисленияИтоговые.ПериодНачала, &КонецПериода, ДЕНЬ) + 1, 0) КАК КоличествоКалендарныхДней,
	               |	ВТНачисленияПоПартнерам.Партнер КАК Партнер,
	               |	ВТНачисленияПоПартнерам.ВидРасчета,
	               |	ВТНачисленияПоПартнерам.НачалоПериода,
	               |	ВТНачисленияПоПартнерам.ОкончаниеПериода,
	               |	ВТНачисленияПоПартнерам.ИдентификаторСтроки
	               |ИЗ
	               |	ВТНачисленияПоПартнерам КАК ВТНачисленияПоПартнерам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияИтоговые КАК ВТНачисленияИтоговые
	               |		ПО ВТНачисленияПоПартнерам.Партнер = ВТНачисленияИтоговые.Партнер";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(ДополнительныеПараметры.МесяцНачисления, -13)));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецМесяца(ДобавитьМесяц(ДополнительныеПараметры.МесяцНачисления, -1))));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоКалендарныхДней <> 0  Тогда 
			СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			СтрокаРасчета.Значение = Окр(Выборка.Сумма / Выборка.КоличествоКалендарныхДней, 2); 
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияИтоговые
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТНачисленияПоПартнерам
	               |;";
				   
	Запрос.Выполнить();
	
КонецПроцедуры //РассчитатьСреднеДневнуюЗПЗа12Месяцев

Процедура РассчитатьПроизвольныеВидыРасчетов(Показатель, СтрокиРасчета, ДополнительныеПараметры)
	
	ЭтоПредопределенныйПоказатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "Предопределенный");
	Если ЭтоПредопределенныйПоказатель = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Начисления.Партнер,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ДатаНачала КАК НачалоПериода,
	               |	Начисления.ДатаОкончания КАК ОкончаниеПериода,
	               |	Начисления.ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТНачисленияПоПартнерам
	               |ИЗ
	               |	ВТНачисления КАК Начисления
	               |ГДЕ
	               |	Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗП_ПроизвольныеКонстанты.Константа КАК Показатель,
	               |	ЗП_ПроизвольныеКонстанты.Значение
	               |ПОМЕСТИТЬ ВТНачисленияИтоговые
	               |ИЗ
	               |	РегистрСведений.ЗП_ПроизвольныеКонстанты КАК ЗП_ПроизвольныеКонстанты
	               |ГДЕ
	               |	ЗП_ПроизвольныеКонстанты.Константа = &Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТНачисленияПоПартнерам.Партнер КАК Партнер,
	               |	ВТНачисленияПоПартнерам.ВидРасчета,
	               |	ВТНачисленияПоПартнерам.НачалоПериода,
	               |	ВТНачисленияПоПартнерам.ОкончаниеПериода,
	               |	ВТНачисленияПоПартнерам.ИдентификаторСтроки,
	               |	ЕСТЬNULL(ВТНачисленияИтоговые.Значение, 0) КАК Значение,
	               |	ВТНачисленияИтоговые.Показатель
	               |ИЗ
	               |	ВТНачисленияПоПартнерам КАК ВТНачисленияПоПартнерам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияИтоговые КАК ВТНачисленияИтоговые
	               |		ПО (ИСТИНА)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение; 
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияИтоговые
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТНачисленияПоПартнерам
	               |;";
				   
	Запрос.Выполнить();
	
КонецПроцедуры //РассчитатьПроизвольныеВидыРасчетов

#КонецОбласти

#Область РасчетНачислений

// Выполняет непосредственный расчет результата для строки таблицы Начисления, 
// рассчитываемой по произвольной формуле.
// Строки, рассчитываемые предопределенным способом откладываются в таблицу значений РасчетПредопределеннымСпособом.
//
// Параметры:
//	СтрокаРасчета - строка таблицы значений Начисления, см. ПустаяТаблицаНачисления(),
//	ИсходныеДанные - структура, содержащая в себе значения показателей и поля результата расчета.
//	ФормулаДляВыполнения - строка.
//	ФормулаДляПредставления - строка.
//	ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                     исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьСтрокуНачисления(СтрокаРасчета, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, ВызыватьИсключение = Истина)
		
	Если Не ИсходныеДанные.Рассчитывается Тогда
		ИсходныеДанные.Результат = СтрокаРасчета.Результат;
		Возврат;
	КонецЕсли;
	
	Попытка 
		СтрокаРасчета.Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		Если Не ВызыватьИсключение Тогда
			СтрокаРасчета.Результат = 0;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При расчете начисления «%1» для сотрудника %2 возникла ошибка: %4
					  |Формула, используемая при расчете: %3'"),
				СтрокаРасчета.Начисление, СтрокаРасчета.Партнер, ФормулаДляПредставления, ИнформацияОбОшибке().Описание);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецПопытки;
	
	//Если СтрокаРасчета.Сторно Тогда
	//	СтрокаРасчета.Результат = - СтрокаРасчета.Результат;
	//КонецЕсли;
	
	ИсходныеДанные.Результат = СтрокаРасчета.Результат;
	
КонецПроцедуры

// Процедура заполняет текстовую расшфировку показателей для расчета формулы.
//
Процедура ЗаполнитьРасшифровкуСтрокиНачисления(СтрокаРасчета, ИсходныеДанные, Формула, ФормулаДляВыполнения, СлужебныеИденитикаторы)
	
	СтрокаРасшифровки = Новый ФорматированнаяСтрока(ФормулаДляВыполнения);
	
	СтруктураОтбора = Новый Структура("Идентификатор");
	ВременнаяСтрока = "Новый ФорматированнаяСтрока(""" + ФормулаДляВыполнения + """)";
	
	//Отсортируем от большего к меньшему по длине идентификатора
	// тогда для идентификаторов "ЗП_КурсВалют_грн" и "ЗП_КурсВалют_грн1" будет сначала заменен "ЗП_КурсВалют_грн1".
	ТаблицаДлиныПоказателей = Новый ТаблицаЗначений;
	ТаблицаДлиныПоказателей.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	ТаблицаДлиныПоказателей.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
	ТаблицаДлиныПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	Для каждого ЭлементСтруктуры Из ИсходныеДанные Цикл 
		НоваяСтрока = ТаблицаДлиныПоказателей.Добавить();
		НоваяСтрока.Ключ = СокрЛП(ЭлементСтруктуры.Ключ);
		НоваяСтрока.Длина = СтрДлина(СокрЛП(ЭлементСтруктуры.Ключ));
		НоваяСтрока.Значение = ЭлементСтруктуры.Значение;
	КонецЦикла;
	ТаблицаДлиныПоказателей.Сортировать("Длина УБЫВ");	
	
	
	Для каждого ЭлементСтруктуры Из ТаблицаДлиныПоказателей Цикл
		Ключ = СокрЛП(ЭлементСтруктуры.Ключ);
		КлючСлужебный = СокрЛП(ЭлементСтруктуры.Ключ);
		Значение = ЭлементСтруктуры.Значение;
		
		Если СлужебныеИденитикаторы <> Неопределено Тогда 
			СтруктураОтбора.Вставить("Идентификатор", Ключ);
			НайденныеСтроки = СлужебныеИденитикаторы.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				КлючСлужебный = НайденныеСтроки[0].ИдентификаторСлужебный;
			КонецЕсли;
		КонецЕсли;
		
		ВременнаяСтрока = СтрЗаменить(ВременнаяСтрока, 
					"ИсходныеДанные." + Ключ + "",
					""", Новый ФорматированнаяСтрока(""" + КлючСлужебный + """,, WebЦвета.Красный),  Новый ФорматированнаяСтрока(""[" + СокрЛП(Строка(Значение)) + "]"",, WebЦвета.Зеленый), """);
	КонецЦикла;
	
	Попытка 
		СтрокаРасшифровки = ВременнаяСтрока;
	Исключение
	КонецПопытки;
				
	СтрокаРасчета.Расшифровка = СтрокаРасшифровки;
	
КонецПроцедуры

Процедура РассчитатьНачисленияОчередности(ОчередностьРасчета, ДополнительныеПараметры)
	
	МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	СлужебныеИдентификаторыПоказателейФормулы = ДополнительныеПараметры.СлужебныеИдентификаторыПоказателейФормулы;
	
	//Необходимо найти уже расчитанныеСтроки, первой очереди, т.е. базу и вставить их в ИзвестныеЗначения. 
		
	//// Таблица для сбора записей, рассчитываемых предопределенным способом.
	//РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	// Для устранения искажения совокупного результата расчета, возникающей в результате округления:
	// - накапливаем по сотруднику и начислению строки, имеющие все параметры расчета (кроме показателей времени) одинаковыми,
	// - вычисляем сумму результата,
	// - вычисляем по формуле начисление по накопленной сумме значений показателей времени,
	// - сравниваем сумму результата и вычисленный по формуле результат,
	// - при наличии расхождения, вычисленный по формуле результат распределяем пропорционально вычисленным отдельно результатам.
	СтрокиПоМесяцам = Новый Соответствие;
	
	СтрокиДляРасчета = ДополнительныеПараметры.СтрокиРасчетаПоОчередности[ОчередностьРасчета];
	Для каждого Выборка из СтрокиДляРасчета Цикл
		СтрокаРасчета = ДополнительныеПараметры.СтрокиРасчетаПоИдентификатору[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ДополнительныеПараметры.ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
		
		ИсходныеДанные.Вставить("Рассчитывается", Выборка.Рассчитывается);
		
		// Если какие-то значения заранее известны потребителю, 
		// то нужно использовать именно их.
		ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки = ДополнительныеПараметры.ИзвестныеЗначенияПоИдентификаторуСтроки;
		Если ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки <> Неопределено 
			И ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки] <> Неопределено Тогда
			ИзвестныеЗначения = ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
			Для Каждого КлючИЗначение Из ИзвестныеЗначения Цикл
				ИсходныеДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ИзвестныеЗначенияПоказателейПоПартнеру = ДополнительныеПараметры.ИзвестныеЗначенияВидовРасчетаПоПартнеру;
		Если ИзвестныеЗначенияПоказателейПоПартнеру <> Неопределено 
			И ИзвестныеЗначенияПоказателейПоПартнеру[Выборка.Партнер] <> Неопределено Тогда 
			ИзвестныеЗначения = ИзвестныеЗначенияПоказателейПоПартнеру[Выборка.Партнер];
			Для каждого КлючИЗначение Из ИзвестныеЗначения Цикл
				ИсходныеДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла; 
		КонецЕсли;
		
		Если СтрокаРасчета.НеНачислять = Истина Тогда 
			СтрокаРасчета.Результат = 0;
			ИсходныеДанные.Результат = 0;
		Иначе
			РассчитатьСтрокуНачисления(СтрокаРасчета, ИсходныеДанные, СтрокаРасчета.ФормулаДляВыполнения, СтрокаРасчета.Формула, ДополнительныеПараметры.ВызыватьИсключение);
		КонецЕсли;
		
		Если СлужебныеИдентификаторыПоказателейФормулы[Выборка.ИдентификаторСтроки] <> Неопределено Тогда 
			СлужебныеИдентификаторы = СлужебныеИдентификаторыПоказателейФормулы[Выборка.ИдентификаторСтроки];
		Иначе
			СлужебныеИдентификаторы = Неопределено;
		КонецЕсли;
		
		ЗаполнитьРасшифровкуСтрокиНачисления(СтрокаРасчета, ИсходныеДанные, СтрокаРасчета.Формула, СтрокаРасчета.ФормулаДляВыполнения, СлужебныеИдентификаторы);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область РаботаСПоказателямиИФормулами

// Возвращает идентификатор показателя.  FIXME: перенести в повт. использование. 
//
// Параметры:
//	- Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//	
// Возвращаемое значение - строка с значением реквизита Идентификатор.
//
Функция ИдентификаторПоказателя(Показатель, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда 
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "Идентификатор");
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			Возврат git_РасчетЗарплаты.ИдентификаторПоказателя(Показатель, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			Возврат ВнешнийОбъект.ИдентификаторПоказателя(Показатель, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Находит элемент справочника «Показатели расчета зарплаты» по значению реквизита Идентификатор.
//
// Параметры:
//	- Идентификатор - строка с указанием идентификатора показателя.
//	- УчитыватьРегистр - булево, по умолчанию Ложь, если Истина, то соответствие будет регистрозависимым.
//
// Возвращаемое значение - ссылка на показатель или Неопределено, если показатель не найден.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь, ПеренаправлениеОпределено = Ложь) Экспорт
	Если ПеренаправлениеОпределено Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Ссылка
		|ИЗ
		|	Справочник.ЗП_ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|ГДЕ
		|	(ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный = &Идентификатор)
		|			//ИЛИ ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный = &ИдентификаторСлужебный)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Запрос.УстановитьПараметр("ИдентификаторСлужебный", ВРег(Идентификатор));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		Возврат Неопределено;
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			Возврат git_РасчетЗарплаты.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			Возврат ВнешнийОбъект.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр, Истина);
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции //ПоказательПоИдентификатору

// Находит элемент справочника «Показатели расчета зарплаты» по значению реквизита Идентификатор.
//
// Параметры:
//	- Идентификатор - строка с указанием идентификатора показателя.
//	- УчитыватьРегистр - булево, по умолчанию Ложь, если Истина, то соответствие будет регистрозависимым.
//
// Возвращаемое значение - ссылка на показатель или Неопределено, если показатель не найден.
//
Функция ВидРасчетаПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Ссылка
		|ИЗ
		|	Справочник.ЗП_ВидыРасчетов КАК ПоказателиРасчетаЗарплаты
		|ГДЕ
		|	(ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный = &Идентификатор)
		|			//ИЛИ ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный = &ИдентификаторСлужебный)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Запрос.УстановитьПараметр("ИдентификаторСлужебный", ВРег(Идентификатор));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		Возврат Неопределено;
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			Возврат git_РасчетЗарплаты.ВидРасчетаПоИдентификатору(Идентификатор, УчитыватьРегистр, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			Возврат ВнешнийОбъект.ВидРасчетаПоИдентификатору(Идентификатор, УчитыватьРегистр, Истина);
		КонецЕсли;
	КонецЕсли;

	
КонецФункции

// Процедура проверяет выполнимость формулы вида расчета.
// Формула должна быть заполнена.
// !!!Существование показателей проверяется функцией ПоказателиПоИдентификаторам.
// Если при выполнении формулы произошла ошибка, то Отказ = Истина.
Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ = Ложь)
	
	// Подготовим структуру для выполнения формулы.
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Показатель Из ИдентификаторыПоказателей Цикл
		ИсходныеДанные.Вставить(Показатель.Идентификатор, ГСЧ.СлучайноеЧисло(1,9));
	КонецЦикла;
	
	Попытка 
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При проверке вычисления по формуле возникла ошибка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

// Функция преобразует формулу введенную пользователем в формулу для выполнения при расчете зарплаты.
// К показателям прибавляется префикс.
Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			Разделитель = Сред(Формула, Позиция, 1);
			Если Разделитель = "[" Тогда
				ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
				Строка = Сред(Формула, Позиция);
				ОкончаниеФормулы = Найти(Строка, "]");
				Если ОкончаниеФормулы > 0 Тогда
					НачалоСлова = Позиция;
					Позиция = Позиция + ОкончаниеФормулы;
					ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
					Позиция = Позиция;
					НачалоСлова = Позиция;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
				
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			
			НачалоСлова = Позиция;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	Возврат ФормулаДляВыполнения
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)
 	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		НайденнаяСтрока = ИдентификаторыПоказателей.Найти(Слово, "ИдентификаторСлужебный");
		Если НайденнаяСтрока <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + НайденнаяСтрока.Идентификатор;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;               
КонецПроцедуры

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ИдентификаторыПоказателейФормулы(Формула)
    ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	ФлагНачалаПоказателя = Ложь;
	КлючевоеСлово = "";
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если Найти(Слово, "[") > 0 Тогда
			КлючевоеСлово = Слово;
			ФлагНачалаПоказателя = Истина;
			
			Если Найти(Слово, "]") > 0 Тогда 
				ФлагНачалаПоказателя = Ложь;
				ИдентификаторыПоказателей.Добавить(КлючевоеСлово);
				КлючевоеСлово = "";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагНачалаПоказателя = Истина Тогда
			Если Найти(Слово, "]") > 0 Тогда 
				ФлагНачалаПоказателя = Ложь;
			КонецЕсли;
			КлючевоеСлово = ?(КлючевоеСлово = Слово, Слово, КлючевоеСлово+" "+ Слово);
			
			Если ФлагНачалаПоказателя = Ложь Тогда
				ИдентификаторыПоказателей.Добавить(КлючевоеСлово);
				КлючевоеСлово = "";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагНачалаПоказателя = Истина Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(КлючевоеСлово);
		КлючевоеСлово = "";
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции 

// Функция проверяет существование показателя по идентификатору и возвращает массив Показателей.
// Если какой-то из показателей не существует, то возвращается Неопределено.
Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей, ИдентификаторыИсключений=Неопределено)
	
	Отказ = Ложь;
	Если ИдентификаторыИсключений = Неопределено Тогда
		ИдентификаторыИсключений = Новый Массив;
	КонецЕсли; 
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Показатель = ПоказательПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Показатель = ВидРасчетаПоИдентификатору(Идентификатор);
			Если Не ЗначениеЗаполнено(Показатель) Тогда
				ПропуститьИдентификатор = Ложь;
				Для каждого ИсключениеПодобно Из ИдентификаторыИсключений Цикл
					Если Найти(Врег(Идентификатор), Врег(ИсключениеПодобно)) > 0 Тогда
						 ПропуститьИдентификатор = Истина;
					КонецЕсли; 
				КонецЦикла; 
				
				Если ПропуститьИдентификатор = Истина Тогда
					Продолжить;
				КонецЕсли; 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти показатель по идентификатору %1'"), Идентификатор);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Показатели.Добавить(Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат Показатели
	КонецЕсли;
	
КонецФункции

// Функция получает таблицу служебных идетификаторов и идентификаторов З/П
Функция ПолучитьСлужебныеИдентификаторыПоказателей(МассивПоказателей)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Идентификатор КАК Идентификатор, 
						  |	ИдентификаторСлужебный КАК ИдентификаторСлужебный
	                      |ИЗ
	                      |	Справочник.ЗП_ПоказателиРасчетаЗарплаты
	                      |ГДЕ
	                      |	Ссылка В(&МассивПоказателей)");
						  
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСлужебныеИдентификаторыПоказателей()

// Функция получает массив служебных идентификаторов З/П
Функция ПолучитьСлужебныеИдентификаторыВидовРасчета(МассивПоказателей)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Идентификатор КАК Идентификатор, 
						  |	ИдентификаторСлужебный КАК ИдентификаторСлужебный
	                      |ИЗ
	                      |	Справочник.ЗП_ВидыРасчетов
	                      |ГДЕ
	                      |	Ссылка В(&МассивПоказателей)");
						  
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСлужебныеИдентификаторыВидовРасчета()

// Функция возвращает структуру в которой содержатся формула для выполнения и показатели использованные в формуле.
// При подготовке результата проверяется существование использованных показателей и возможность вычисления формулы.
// Если проверка не пройдена - возвращается Неопределено.
//
Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено, ПеренаправлениеОпределено = Ложь) Экспорт
	Перем ПоказателиВалют;
	
	Если ПеренаправлениеОпределено Тогда 
		Отказ = Ложь;	
		
		ПараметрыВыполнения = Неопределено;
		
		Если Не ЗначениеЗаполнено(Формула) Тогда
			Если Не ПроверятьФормулу Тогда
				Возврат ПараметрыВыполнения;
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Формула не заполнена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		
		ПоказателиВалют = Новый Массив;
		
		//Специальный расчет для показателя курс валют. 
		// т.к. количество валют конечное множество, можем их сразу все добавлять в предопределенные показатели. 
		ПоказательКурсВалют = ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_КурсВалют");
		ИдентификаторКурсВалютСлужебный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательКурсВалют, "ИдентификаторСлужебный");
		ИдентификаторКурсВалютСлужебный = Сред(ИдентификаторКурсВалютСлужебный, 0, СтрДлина(ИдентификаторКурсВалютСлужебный)-1);
		ИдентификаторКурсВалют = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательКурсВалют, "Идентификатор");
		ИдентификаторыИсключений = Новый Массив;
		ИдентификаторыИсключений.Добавить(ИдентификаторКурсВалютСлужебный); //Срежим последний символ, на всякий случай ]
		// Получим  из формулы идентификаторы используемых показателей.
		ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
		// Проверим существование показателей.
		ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы, ИдентификаторыИсключений);
		ИдентификаторыПоказателей = ПолучитьСлужебныеИдентификаторыПоказателей(ПоказателиФормулы);
		ИдентификаторыПоказателейРасчета = ПолучитьСлужебныеИдентификаторыВидовРасчета(ПоказателиФормулы);
		Если ИдентификаторыПоказателейРасчета <> Неопределено И ИдентификаторыПоказателей <> Неопределено Тогда 
			Для каждого ЭлементСтроки из ИдентификаторыПоказателейРасчета Цикл
				НоваяСтрока = ИдентификаторыПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСтроки);
			КонецЦикла;
		КонецЕсли;
		
		
		Для каждого ЭлементМассива Из ИдентификаторыПоказателейФормулы Цикл
			Если Найти(ВРЕГ(ЭлементМассива), Врег(ИдентификаторКурсВалютСлужебный)) > 0 Тогда
				ПоказательВалюты = СтрЗаменить(ЭлементМассива, "[", "");
				ПоказательВалюты = СтрЗаменить(ПоказательВалюты, "]", "");
				НоваяСтрока = ИдентификаторыПоказателей.Добавить();
				НоваяСтрока.Идентификатор = ПоказательВалюты;
				НоваяСтрока.ИдентификаторСлужебный = ЭлементМассива;
				ПоказателиВалют.Добавить(ПоказательВалюты);
			КонецЕсли; 	
		КонецЦикла; 
		
		Если ПоказателиВалют.Количество() > 0 Тогда
			ПоказателиФормулы.Добавить(ПоказательКурсВалют);		
		КонецЕсли; 
		
		Если ПоказателиФормулы = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		
		// Внесем изменения, связанные с базовыми показателями.
		// TODO: не будем добавлять базовые показатели, т.к. они у нас учавствуют в сложних запросах. 
		//ДополнитьФормулуБазовымиПоказателями(Формула, ПоказателиФормулы, ИдентификаторыПоказателейФормулы);
		
		ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей);
		
		// Проверим правильность составления формулы.
		Если ПроверятьФормулу Тогда
			ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);	
			ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		
		Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы, ПоказателиВалют, ИдентификаторыПоказателей", ФормулаДляВыполнения, ПоказателиФормулы, ПоказателиВалют, ИдентификаторыПоказателей);
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			Возврат git_РасчетЗарплаты.ПараметрыВыполненияФормулы(Формула, ПроверятьФормулу, НедопустимыеПоказатели, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			Возврат ВнешнийОбъект.ПараметрыВыполненияФормулы(Формула, ПроверятьФормулу, НедопустимыеПоказатели, Истина);
		КонецЕсли;
	КонецЕсли;

КонецФункции //ПараметрыВыполненияФормулы

Процедура ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ)
	
	Если НедопустимыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Если НедопустимыеПоказатели.Найти(ПоказательФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Использование показателя %1 в этой формуле расчета недопустимо.'"), 
				ИдентификаторПоказателя(ПоказательФормулы));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие колонке в строке коллекции, используемой при расчете.
//
// Параметры:
//	СтрокаКоллекции - строка таблицы расчетного документа.
//	ИмяПоля - имя поля, наличие которого необходимо выяснить.
//
// Возвращаемое значение - Истина, если поле есть, Ложь - в противном случае.
//
Функция ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, ИмяПоля)
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат СтрокаКоллекции.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено;
	Иначе
		Возврат СтрокаКоллекции.Свойство(ИмяПоля);
	КонецЕсли;
	
КонецФункции

// Метод преобразовывает значения показателей, указанные в строке, 
// в структуру, которую в свою очередь вставляет в соответствие по идентификатору строки.
// В строке данных показатели представлены в виде Показатель1, ..., ПоказательN.
// Кроме того, выполняется поиск значения показателя в коллекции известных значений.
// 
// Параметры:
//	- СтрокаДанных - строка коллекции с полями показателей и их значений.
//	- ИдентификаторСтроки - число, ключ, по которому структура со значениями показателей помещается в соответствие.
//	- ИсходныеДанныеПоИдентификаторуСтроки - соответствие, 
//	- КоличествоПоказателей - число, количество показателей в коллекции, 
//	- ИзвестныеЗначенияПоказателей - необязательный, таблица значений с известными показателями, 
//	- ИзвестныеЗначенияПоИдентификаторуСтроки - соответствие для упаковки известных показателей.
//
Процедура УпаковатьЗначенияПоказателей(СтрокаДанных, ИдентификаторСтроки, ИсходныеДанныеПоИдентификаторуСтроки, ПоказателиВидаРасчета, КоличествоПоказателей, ПереопределяемыеПоказатели, ИзвестныеЗначенияПоказателей = Неопределено, ИзвестныеЗначенияПоИдентификаторуСтроки = Неопределено)
	
	ИсходныеДанные = Новый Структура("Результат", 0);
	ИзвестныеЗначения = Новый Структура;
	
	НомерПоказателя = 0;
	Для Каждого Показатель Из ПоказателиВидаРасчета Цикл
		НомерПоказателя = НомерПоказателя + 1;
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Продолжить;
		КонецЕсли;
		// Пришлось убрать так как если в работника в форуле З/П указывали 1000 * ЗП_КурсыВалют_USD давало 0
		//Если Показатель = ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_КурсВалют") Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		ИдентификаторПоказателя = ИдентификаторПоказателя(Показатель);//ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
		Если ЕстьПолеВСтрокеКоллекции(СтрокаДанных,"Значение" + НомерПоказателя) Тогда 
			ИсходныеДанные.Вставить(ИдентификаторПоказателя, СтрокаДанных["Значение" + НомерПоказателя]);
		Иначе 
			ИсходныеДанные.Вставить(ИдентификаторПоказателя, 0);
		КонецЕсли;
		// Если расчет показателя переопределяется, вписываем его в отдельную коллекцию, 
		// но только, если его значение не определено по данным учета.
		Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ЗП_ПоказателиРасчетаЗарплаты") Тогда
			ПереопределяемыеПоказатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем все известные значения показателей сотрудника.
	Если ИзвестныеЗначенияПоказателей <> Неопределено Тогда
		ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателей.НайтиСтроки(Новый Структура("Партнер", СтрокаДанных.Сотрудник));
		Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
			ИдентификаторПоказателя = ИдентификаторПоказателя(Показатель); //ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
			ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ИсходныеДанныеПоИдентификаторуСтроки[ИдентификаторСтроки] = ИсходныеДанные;
	Если ИзвестныеЗначения.Количество() > 0 Тогда
		ИзвестныеЗначенияПоИдентификаторуСтроки[ИдентификаторСтроки] = ИзвестныеЗначения;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьЗначенияПоказателей(СтрокаДанных, КоличествоПоказателей, ИсходныеДанные)
	
	// Перенос результата
	Если Не СтрокаДанных.ФиксРасчет Тогда
		СтрокаДанных.Результат = ИсходныеДанные.Результат;
	КонецЕсли;
	
	// Перенос расчета базы, значений переопределяемых показателей и удаление "лишних" показателей, 
	// которые не отображаются в документах начисления.
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		Показатель = СтрокаДанных["Показатель" + НомерПоказателя];
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Продолжить;
		КонецЕсли;
		//ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
		//Если Не ПоказательИнфо.ОтображатьВДокументахНачисления Тогда
		//	СтрокаДанных["Показатель" + НомерПоказателя] = Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
		//	СтрокаДанных["Значение" + НомерПоказателя] = 0;
		//Иначе
		//	Если СтрокаДанных["Значение" + НомерПоказателя] <> ИсходныеДанные[ПоказательИнфо.Идентификатор] Тогда
		//		СтрокаДанных["Значение" + НомерПоказателя] = ИсходныеДанные[ПоказательИнфо.Идентификатор];
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаРасчетаПереопределяемыхПоказателей()
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПереопределяемыхПоказателей = Новый ТаблицаЗначений;
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Партнер");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Организация");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Подразеделение");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Показатель");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ВидРасчета");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ДатаНачала");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ДатаОкончания");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ИдентификаторСтроки");
	
	Возврат РасчетПереопределяемыхПоказателей;
	
КонецФункции

Процедура ДобавитьЗначениеВидаРасчетаВИзвестныеЗначения(СтрокаНачислений, ИзвестныеЗначенияВидовРасчетаПоПартнеру)
	
	ИзвестныеЗначения = ИзвестныеЗначенияВидовРасчетаПоПартнеру.Получить(СтрокаНачислений.Партнер);
	Если ИзвестныеЗначения = Неопределено Тогда
		ИзвестныеЗначения = Новый Структура;
	КонецЕсли;
	
	ИдентификаторПоказателя = ИдентификаторПоказателя(СтрокаНачислений.Начисление);
	ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, СтрокаНачислений.Сумма);
	
	ИзвестныеЗначенияВидовРасчетаПоПартнеру.Вставить(СтрокаНачислений.Партнер, ИзвестныеЗначения);
		
КонецПроцедуры

Функция ДополнительныеПараметрыРасчетаОчередиНачислений()
	
	ДополнительныеПараметры = Новый Структура(
		"МесяцНачисления,
		|МенеджерВременныхТаблиц,
		|ТаблицаЗаписей,
		|СтрокиРасчетаПоИдентификатору,
		|ИсходныеДанныеПоИдентификаторуСтроки,
		|ИзвестныеЗначенияПоИдентификаторуСтроки, 
		|ВызыватьИсключение,
		|СтрокиРасчетаПоОчередности,
		|ИзвестныеЗначенияВидовРасчетаПоПартнеру,
		|ПереопределяемыеПоказателяКурсВалют, 
		|СлужебныеИдентификаторыПоказателейФормулы");
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

#КонецОбласти
#КонецОбласти


#Область ИнтерфейсВнешнегоОбъекта

Функция ПустаяТаблицаНачисления(ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда 
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		Результат.Колонки.Добавить("Начисление", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
		Результат.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Результат.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
		Результат.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Строка"));
		Результат.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
		Результат.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		Результат.Колонки.Добавить("Формула", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
		Результат.Колонки.Добавить("ФормулаДляВыполнения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
		Результат.Колонки.Добавить("Рассчитывается", Новый ОписаниеТипов("Булево"));
		Результат.Колонки.Добавить("ОчередностьРасчета", Новый ОписаниеТипов("Число"));
		Результат.Колонки.Добавить("НеНачислять", Новый ОписаниеТипов("Булево"));
		
		Возврат Результат;
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			Возврат git_РасчетЗарплаты.ПустаяТаблицаНачисления(Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			Возврат ВнешнийОбъект.ПустаяТаблицаНачисления(Истина);	
		КонецЕсли;
	КонецЕсли;

	
КонецФункции //ПустаяТаблицаНачисления

// Преабразует полученную таблицу, в необходимую для расчета, заполняет различные соответствия строк 
// и формул, а так же их показателей. Все это возвращем в виде структуры. 
//	Параметры:
//		ПараметрыРасчета - Структура, с исходными данными для расчета 
//			+ ДатаНачала - Дата
//			+ ДатаОкончания - Дата
//			+ Начисления - таблица значений, см. ПустаяТаблицаНачисления()
//		РезультатПодготовки - Структура, с преобразованными данными для вомзможностей расчета. 
//			+ РасчетПереопределяемыхПоказателей - таблица значений
//			+ СтрокиРасчетаПоИдентификатору - Соответствие
//			+ СтрокиРасчетаПоОчередности - Соответствие
//			+ ИсходныеДанныеПоИдентификаторуСтроки - Соответствие
//			+ ИзвестныеЗначенияПоИдентификаторуСтроки - Соответствие
Процедура ПодготовкаПолученныхДанныхДляВыполненияРасчета(ПараметрыРасчета, РезультатПодготовки, ПеренаправлениеОпределено = Ложь) Экспорт 
	
	Если ПеренаправлениеОпределено Тогда 
		ДатаНачала 		= ПараметрыРасчета.ДатаНачала;
		ДатаОкончания 	= ПараметрыРасчета.ДатаОкончания;
		Начисления 		= ПараметрыРасчета.Начисления;
		
		// Специализированные показатели рассчитываются отдельно.
		РасчетПереопределяемыхПоказателей = ТаблицаРасчетаПереопределяемыхПоказателей();
		ПереопределяемыеПоказателяКурсВалют = Новый Структура; //Курс валют для всех партнеров один и тот же. 
		
		// Для расчета 
		// - раскладываем строки расчета в соответствии с очередностью в отдельные таблицы с одинаковой структурой
		// - всем строкам присваиваем идентификатор, идентификатор заполняем также в исходной строке
		// - составляем соответствия по идентификатору строк исходной и новых таблиц для быстрого поиска
		
		СтрокиРасчетаПоИдентификатору = Новый Соответствие;
		СтрокиТаблицыПоИдентификатору = Новый Соответствие;
		СлужебныеИдентификаторыПоказателейФормулы = Новый Соответствие;
		
		// Соответствие, где ключ очередность расчета, а значение - отдельная таблица начислений.
		СтрокиРасчетаПоОчередности = Новый Соответствие;
		МассивОчередности = Новый Массив;
		
		// Отдельно все строки расчета собираем в массив для регистрации набора записей.
		СтрокиРасчета = Новый Массив;
		
		ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
		ИзвестныеЗначенияПоИдентификаторуСтроки = Новый Соответствие;
		
		
		ИдентификаторСтроки = 1;
		Для каждого Строка из ПараметрыРасчета.ДанныеДляНачисления Цикл 
			Если Не ЗначениеЗаполнено(Строка.Начисление) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.Партнер) Тогда 
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Начисления.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки; //Может Андрею будет интерестней передавть мне сразу иденитфикатор строки? 
			
			//FIXME: переделать или на получение запроса при получении базовых данных 
			#Область ПолучениеДанныхОНачисленииИОчередность
			//СведенияОНачислении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Начисление, "ОчередностьРасчета");
			Очередность = Строка.ОчередностьРасчета;
			Начисление = СтрокиРасчетаПоОчередности[Очередность];
			
			
			Если Начисление = Неопределено Тогда
				// Определяем место в упорядоченном массиве очередностей, куда нужно вставить этот элемент.
				Индекс = 0;
				Пока Индекс < МассивОчередности.Количество() Цикл
					Если МассивОчередности[Индекс] > Очередность Тогда
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
				МассивОчередности.Вставить(Индекс, Очередность);
				
				Начисление = Новый Массив;
				СтрокиРасчетаПоОчередности.Вставить(Очередность, Начисление);
			КонецЕсли;
			
			Начисление.Добавить(НоваяСтрока);
			
			#КонецОбласти
			
			ПереопределяемыеПоказатели = Новый Массив;
			
			ПараметрыФормулы = ?(НоваяСтрока.НеНачислять = Истина, Неопределено, ПараметрыВыполненияФормулы(НоваяСтрока.Формула, Ложь));
			Если ПараметрыФормулы <> Неопределено Тогда
				ПоказателиФормулы = ПараметрыФормулы.ПоказателиФормулы;
				ПоказателиВалют = ПараметрыФормулы.ПоказателиВалют;
				НоваяСтрока.ФормулаДляВыполнения = ПараметрыФормулы.ФормулаДляВыполнения;
				СлужебныеИдентификаторыПоказателейФормулы.Вставить(ИдентификаторСтроки, ПараметрыФормулы.ИдентификаторыПоказателей);
			Иначе 
				ПоказателиФормулы = Новый Массив;
				ПоказателиВалют = Новый Массив;
			КонецЕсли; 
			
			УпаковатьЗначенияПоказателей(НоваяСтрока, 
					ИдентификаторСтроки, 
					ИсходныеДанныеПоИдентификаторуСтроки, 
					ПоказателиФормулы,
					ПоказателиФормулы.Количество(),
					ПереопределяемыеПоказатели, 
					Неопределено, 
					ИзвестныеЗначенияПоИдентификаторуСтроки);
					
			НоваяСтрока.Рассчитывается = ?(НЕ Строка.Рассчитывается = Ложь, Истина, Ложь);
			Если НоваяСтрока.Рассчитывается = Ложь Тогда 
				НоваяСтрока.Результат = НоваяСтрока.Сумма;
			КонецЕсли;
			// Если встречаются переопределяемые показатели, откладываем их в отдельную таблицу.
			Для Каждого ПереопределяемыйПоказатель Из ПереопределяемыеПоказатели Цикл
				СтрокаПоказателя = РасчетПереопределяемыхПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Строка);
				СтрокаПоказателя.ВидРасчета = НоваяСтрока.Начисление;
				СтрокаПоказателя.Организация = НоваяСтрока.Организация;
				СтрокаПоказателя.Показатель = ПереопределяемыйПоказатель;
				СтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла;
			
			Для каждого ПереопределяемыйПоказатель Из ПоказателиВалют Цикл
				Если ПереопределяемыеПоказателяКурсВалют.Свойство(ПереопределяемыйПоказатель) = Ложь Тогда
					ПереопределяемыеПоказателяКурсВалют.Вставить(ПереопределяемыйПоказатель);
				КонецЕсли;
			КонецЦикла; 
			
			                                                        
			// ..И составляем соответствия по идентификаторам для быстрого поиска.
			СтрокиРасчетаПоИдентификатору.Вставить(ИдентификаторСтроки, НоваяСтрока);
			
			
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЦикла;
		
		РезультатПодготовки.Вставить("СтрокиРасчетаПоИдентификатору", СтрокиРасчетаПоИдентификатору);
		РезультатПодготовки.Вставить("РасчетПереопределяемыхПоказателей", РасчетПереопределяемыхПоказателей);
		РезультатПодготовки.Вставить("СтрокиРасчетаПоОчередности", СтрокиРасчетаПоОчередности);
		РезультатПодготовки.Вставить("ИсходныеДанныеПоИдентификаторуСтроки", ИсходныеДанныеПоИдентификаторуСтроки);
		РезультатПодготовки.Вставить("ИзвестныеЗначенияПоИдентификаторуСтроки", ИзвестныеЗначенияПоИдентификаторуСтроки);
		РезультатПодготовки.Вставить("МассивОчередности", МассивОчередности);
		РезультатПодготовки.Вставить("ПереопределяемыеПоказателяКурсВалют", ПереопределяемыеПоказателяКурсВалют);
		РезультатПодготовки.Вставить("СлужебныеИдентификаторыПоказателейФормулы", СлужебныеИдентификаторыПоказателейФормулы);
		//РезультатПодготовки.Вставить("ИсходныеДанныеПоИдентификаторуСтроки", ИсходныеДанныеПоИдентификаторуСтроки);
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			git_РасчетЗарплаты.ПодготовкаПолученныхДанныхДляВыполненияРасчета(ПараметрыРасчета, РезультатПодготовки, Истина);
			Возврат;
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			ВнешнийОбъект.ПодготовкаПолученныхДанныхДляВыполненияРасчета(ПараметрыРасчета, РезультатПодготовки, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ПодготовкаПолученныхДанныхДляВыполненияРасчета

Процедура ПодготовитьПервоначальныйЗапросПоТЧ(МенеджерВременныхТаблиц, Начисления, ПеренаправлениеОпределено = Ложь) Экспорт
	
	Если ПеренаправлениеОпределено Тогда 
		//Таблицу показателей вставим во временную таблицу, в ЗУП для этого использоется регистр Начисления, у нас просто таблица значений
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(Начисления.Партнер КАК Справочник.Партнеры) КАК Партнер,
		               |	ВЫРАЗИТЬ(Начисления.Организация КАК Справочник.Организации) КАК Организация,
		               |	ВЫРАЗИТЬ(Начисления.Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		               |	ВЫРАЗИТЬ(Начисления.Начисление КАК Справочник.ЗП_ВидыРасчетов) КАК ВидРасчета,
		               |	ВЫРАЗИТЬ(Начисления.Сумма КАК ЧИСЛО(15, 2)) КАК Сумма,
		               |	ВЫРАЗИТЬ(Начисления.ИдентификаторСтроки КАК Число(5)) КАК ИдентификаторСтроки,
		               |	Начисления.ДатаНачала КАК ДатаНачала,
		               |	Начисления.ДатаОкончания  КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТНачисления
		               |ИЗ
		               |	&Начисления КАК Начисления"; 
		
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Начисления", Начисления);
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ * из ВТНачисления";
		ТаблицаОтладки = Запрос.Выполнить().Выгрузить();
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			git_РасчетЗарплаты.ПодготовитьПервоначальныйЗапросПоТЧ(МенеджерВременныхТаблиц, Начисления, Истина);
			Возврат;
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			ВнешнийОбъект.ПодготовитьПервоначальныйЗапросПоТЧ(МенеджерВременныхТаблиц, Начисления, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

// Основная функция по расчету показателей для заработной платы. 
//  Параметры:
//	ДанныеДляНачисления - ТаблицаЗначений
//		+ Партнер - СправочникСсылка.Партнеры 
//		+ Организация - СправочникСсылка.Организации
//		+ Подразделение - СправочникСсылка.Подаразделения
//		+ Начисление - СправочникСсылка.ЗП_ВидыНачислений
//		+ Формула - Строка - с представлением формулы для расчета. 
//		+ ФормулаДляВыполнения - Строка - с преобразованной формулой по идентификаторам показателей для Вычислить()	
//		+ Рассчитывается - Булево - Ложь - ручной расчета, Истина - автоматический. 
//		+ Сумма - Число - Сумма уже расчитанного показателя, применяется для константных и ручных начислений. 
//	МесяцНачисления - Дата - Любая дата в пределах одного месяца
//	ПараметрыРасчета - Структура - Дополнительные параметры для расчета начисления
//		+ КомментироватьРасчет - Булево - По умолчанию Ложь, при истине будет записана расшифровка формирования суммы. 
//
//  Возвращаемое значение:
//	ТаблицаЗначение - содержит уже рассчитаные виды начислений 
//		+ Партнер - СправочникСсылка.Партнеры 
//		+ Организация - СправочникСсылка.Организации
//		+ Подразделение - СправочникСсылка.Подаразделения
//		+ ВидНачисления
//		+ Сумма - Число, 15.2
//		+ Расшифровка - Произвольное. 
Функция РасчитатьНачисления(ДанныеДляНачисления, Знач МесяцНачисления, ПараметрыРасчета, ПеренаправлениеОпределено = Ложь) Экспорт 
	Перем Начисления, ДатаНачала, ДатаОкончания;
	
	Если ПеренаправлениеОпределено Тогда 
		Начисления = ПустаяТаблицаНачисления();
		Если ДанныеДляНачисления.Количество() = 0 Тогда 
			Возврат Начисления;
		КонецЕсли;

		ДатаНачала = НачалоМесяца(МесяцНачисления);
		ДатаОкончания = КонецМесяца(МесяцНачисления);
		
		ПолученныеПараметрыДляРасчета = Новый Структура;
		ПолученныеПараметрыДляРасчета.Вставить("ДанныеДляНачисления", ДанныеДляНачисления);
		ПолученныеПараметрыДляРасчета.Вставить("ДатаНачала", ДатаНачала);
		ПолученныеПараметрыДляРасчета.Вставить("ДатаОкончания", ДатаОкончания);
		ПолученныеПараметрыДляРасчета.Вставить("МесяцНачисления", МесяцНачисления);
		ПолученныеПараметрыДляРасчета.Вставить("Начисления", Начисления);
		
		РезультатПодготовки = Новый Структура;
		
		ПодготовкаПолученныхДанныхДляВыполненияРасчета(ПолученныеПараметрыДляРасчета, РезультатПодготовки);
		
		РасчетПереопределяемыхПоказателей = РезультатПодготовки.РасчетПереопределяемыхПоказателей;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПодготовитьПервоначальныйЗапросПоТЧ(МенеджерВременныхТаблиц, Начисления);
		
		ИзвестныеЗначенияВидовРасчетаПоПартнеру = Новый Соответствие;
		
		// Формируем параметры расчета очередности начислений.
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаОчередиНачислений();
		ДополнительныеПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДополнительныеПараметры.МесяцНачисления = МесяцНачисления;
		ДополнительныеПараметры.ТаблицаЗаписей = Начисления; 
		ДополнительныеПараметры.СтрокиРасчетаПоИдентификатору = РезультатПодготовки.СтрокиРасчетаПоИдентификатору;
		ДополнительныеПараметры.ИсходныеДанныеПоИдентификаторуСтроки = РезультатПодготовки.ИсходныеДанныеПоИдентификаторуСтроки;
		ДополнительныеПараметры.ИзвестныеЗначенияПоИдентификаторуСтроки = РезультатПодготовки.ИзвестныеЗначенияПоИдентификаторуСтроки; 
		ДополнительныеПараметры.ВызыватьИсключение = Ложь;
		ДополнительныеПараметры.СтрокиРасчетаПоОчередности = РезультатПодготовки.СтрокиРасчетаПоОчередности;
		ДополнительныеПараметры.ИзвестныеЗначенияВидовРасчетаПоПартнеру = ИзвестныеЗначенияВидовРасчетаПоПартнеру;
		ДополнительныеПараметры.ПереопределяемыеПоказателяКурсВалют = РезультатПодготовки.ПереопределяемыеПоказателяКурсВалют;
		ДополнительныеПараметры.СлужебныеИдентификаторыПоказателейФормулы = РезультатПодготовки.СлужебныеИдентификаторыПоказателейФормулы;
		
		// Рассчитываем значения отдельных показателей.
		РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДополнительныеПараметры);
		
		// Расставляем значения переопределяемых показателей в структурах исходных данных.
		Для Каждого СтрокаРасчета Из РасчетПереопределяемыхПоказателей Цикл   //Вот тут и расчитываем основные предопределенные показатели. 
			ИсходныеДанные =РезультатПодготовки.ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			ИсходныеДанные.Вставить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасчета.Показатель, "Идентификатор"), СтрокаРасчета.Значение);
		КонецЦикла;
		
		
		// Рассчитываем строки таблицы последовательными порциями в соответствии с очередностью расчета.
		Для Каждого ОчередностьРасчета Из РезультатПодготовки.МассивОчередности Цикл
			МассивНачислений = РезультатПодготовки.СтрокиРасчетаПоОчередности[ОчередностьРасчета];
			// Расчет
			РассчитатьНачисленияОчередности(ОчередностьРасчета, ДополнительныеПараметры);
			// Переносим результат 
			Для Каждого СтрокаРасчета Из МассивНачислений Цикл
				// Заполняем поле Сумма для учета начисленной зарплаты.
				СтрокаРасчета.Сумма = СтрокаРасчета.Результат;
				
				ДобавитьЗначениеВидаРасчетаВИзвестныеЗначения(СтрокаРасчета, ИзвестныеЗначенияВидовРасчетаПоПартнеру);
				
			КонецЦикла;
			
		КонецЦикла;

		Возврат Начисления;
	Иначе
		Если git_ПереопределениеОбработчиковСервер.НужноПеренаправлениеВызоваВОбщийМодуль("Salarycalculation", "git_РасчетЗарплаты") Тогда	
			Возврат git_РасчетЗарплаты.РасчитатьНачисления(ДанныеДляНачисления, МесяцНачисления, ПараметрыРасчета, Истина);	
		Иначе
			ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Salarycalculation");
			Возврат ВнешнийОбъект.РасчитатьНачисления(ДанныеДляНачисления, МесяцНачисления, ПараметрыРасчета, Истина);	
		КонецЕсли;
	КонецЕсли;

КонецФункции //РасчитатьНачисления

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Получить значение дополнительного сведения справочника Пользователи
// 
// Параметры:
//  МассивСсылок - СправочникСсылка.Партнеры - Массив ссылок на партнеров 
//	Свойство - ПланыВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - Ссылка на дополнительное сведение
//
// Возвращаемое значение:
//   Соответствие - Ключ, ссылка на объект, Значение - значение прочитаного типа
Функция ПолучитьЗначениеСведенияПоОбъектамИСвойству(МассивСсылок, Свойство) 
	Перем Результат;
	Результат = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение КАК Значение,
	               |	ДополнительныеСведения.Объект КАК Объект
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение В(&МассивЗначений)
	               |	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Пользователи";
	Запрос.УстановитьПараметр("МассивЗначений",   МассивСсылок);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Результат[Выборка.Значение] = Выборка.Объект;
	КонецЦикла
	
КонецФункции // ПолучитьЗначениеСведенияПоОбъектамИСвойству()

#КонецОбласти


#Область  СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "0.0.27";

	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;

	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;

	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);

	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Salarycalculation");

	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "Расчитать начисления по ЗП [" + Версия + "]");

	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Расчитать начисления по ЗП [" + Версия + "]", "РасчитатьНачисления();", "ВызовСерверногоМетода");
		
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;

	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  	// Добавляем команду в таблицу команд по переданному описанию.
  	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  	НоваяКоманда = ТаблицаКоманд.Добавить();
  	НоваяКоманда.Представление = Представление;
  	НоваяКоманда.Идентификатор = Идентификатор;
  	НоваяКоманда.Использование = Использование;
 	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти