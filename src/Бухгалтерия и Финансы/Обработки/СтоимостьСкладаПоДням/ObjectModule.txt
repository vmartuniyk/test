Процедура СформироватьОтчет(ДатаНачало, ДатаКонец, СписокОрганизаций, СписокСкладов, СписокНоменклатуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	СформироватьТекстЗапроса(Запрос, ДатаНачало, ДатаКонец, СписокОрганизаций, СписокСкладов, СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОбработкаРезультатовЗапроса(РезультатЗапроса, СписокНоменклатуры);
	
КонецПроцедуры

Процедура СформироватьТекстЗапроса(Запрос, ДатаНачало, ДатаКонец, СписокОрганизаций, СписокСкладов, СписокНоменклатуры)
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СебестоимостьТоваровОстаткиИОбороты.Период КАК Период,
	               |	СебестоимостьТоваровОстаткиИОбороты.Организация КАК Организация,
	               |	РегистрАналитикаУчетаНоменклатуры.Склад КАК Склад,
	               |	РегистрАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьНачальныйОстаток КАК СтоимостьНачальныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьПриход КАК СтоимостьПриход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьРасход КАК СтоимостьРасход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьКонечныйОстаток КАК СтоимостьКонечныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовНачальныйОстаток КАК СуммаДопРасходовНачальныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовПриход КАК СуммаДопРасходовПриход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовРасход КАК СуммаДопРасходовРасход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовКонечныйОстаток КАК СуммаДопРасходовКонечныйОстаток
	               |ИЗ
	               |	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&ДатаНачало, &ДатаКонец, День, , ";
				   
				   ИСклад = "";
				   ИНоменклатура = "";
				   
				   Если СписокОрганизаций.Количество() > 0 Тогда
					   
					   Запрос.Текст = Запрос.Текст + "
					   |	Организация В (&МассивОрганизаций)";
					   
					   Запрос.УстановитьПараметр("МассивОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
					   
					   ИСклад = " И ";
					   ИНоменклатура = " И ";
					   
				   КонецЕсли;
				   
				   Если СписокСкладов.Количество() > 0 Тогда
					   
					   Запрос.Текст = Запрос.Текст + "
					   |"+ ИСклад +"	АналитикаУчетаНоменклатуры.Склад В (&МассивСкладов)";
					   
					   Запрос.УстановитьПараметр("МассивСкладов", СписокСкладов.ВыгрузитьЗначения());
					   
					   ИНоменклатура = " И ";
					   
				   КонецЕсли;
				   
				   Если СписокНоменклатуры.Количество() > 0 Тогда
					   
					   Запрос.Текст = Запрос.Текст + "
					   |"+ ИНоменклатура +"	АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ(&МассивНоменклатуры)";
					   
					   Запрос.УстановитьПараметр("МассивНоменклатуры", СписокНоменклатуры.ВыгрузитьЗначения());
					   
				   КонецЕсли;
				   
				   Запрос.Текст = Запрос.Текст + "
				   |	) КАК СебестоимостьТоваровОстаткиИОбороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитикаУчетаНоменклатуры
	               |		ПО СебестоимостьТоваровОстаткиИОбороты.АналитикаУчетаНоменклатуры = РегистрАналитикаУчетаНоменклатуры.КлючАналитики
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	СебестоимостьТоваровОстаткиИОбороты.Организация.Наименование,
	               |	РегистрАналитикаУчетаНоменклатуры.Склад.Наименование,
	               |	РегистрАналитикаУчетаНоменклатуры.Номенклатура.Наименование
	               |ИТОГИ
	               |	СУММА(КоличествоНачальныйОстаток),
	               |	СУММА(КоличествоПриход),
	               |	СУММА(КоличествоРасход),
	               |	СУММА(КоличествоКонечныйОстаток),
	               |	СУММА(СтоимостьНачальныйОстаток),
	               |	СУММА(СтоимостьПриход),
	               |	СУММА(СтоимостьРасход),
	               |	СУММА(СтоимостьКонечныйОстаток),
	               |	СУММА(СуммаДопРасходовНачальныйОстаток),
	               |	СУММА(СуммаДопРасходовПриход),
	               |	СУММА(СуммаДопРасходовРасход),
	               |	СУММА(СуммаДопРасходовКонечныйОстаток)
	               |ПО
	               |	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачало, &ДатаКонец),
	               |	Организация,
	               |	Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СебестоимостьТоваровОстаткиИОбороты.Период КАК Период,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
	               |	СебестоимостьТоваровОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьНачальныйОстаток КАК СтоимостьНачальныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьПриход КАК СтоимостьПриход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьРасход КАК СтоимостьРасход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СтоимостьКонечныйОстаток КАК СтоимостьКонечныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовНачальныйОстаток КАК СуммаДопРасходовНачальныйОстаток,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовПриход КАК СуммаДопРасходовПриход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовРасход КАК СуммаДопРасходовРасход,
	               |	СебестоимостьТоваровОстаткиИОбороты.СуммаДопРасходовКонечныйОстаток КАК СуммаДопРасходовКонечныйОстаток
	               |ПОМЕСТИТЬ Таб
	               |ИЗ
	               |	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&ДатаНачало, &ДатаКонец, День, , ";
				   
				   Если СписокОрганизаций.Количество() > 0 Тогда
					   
					   Запрос.Текст = Запрос.Текст + "
					   |	Организация В (&МассивОрганизаций)";
					   
				   КонецЕсли;
				   
				   Если СписокСкладов.Количество() > 0 Тогда
					   
					   Запрос.Текст = Запрос.Текст + "
					   |"+ ИСклад +"	АналитикаУчетаНоменклатуры.Склад В (&МассивСкладов)";
					   
				   КонецЕсли;
				   
				   Если СписокНоменклатуры.Количество() > 0 Тогда
					   
					   Запрос.Текст = Запрос.Текст + "
					   |"+ ИНоменклатура +"	АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ(&МассивНоменклатуры)";
					   
				   КонецЕсли;
				   
				   Запрос.Текст = Запрос.Текст + "
				   |) КАК СебестоимостьТоваровОстаткиИОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ТабКеш.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
				   |	СУММА(ТабКеш.КоличествоНачальныйОстаток)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееКоличествоНачальныйОстаток,
	               |	СУММА(ТабКеш.КоличествоПриход) КАК КоличествоПриход,
				   |	СУММА(ТабКеш.КоличествоПриход)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееКоличествоПриход,
	               |	СУММА(ТабКеш.КоличествоРасход) КАК КоличествоРасход,
				   |	СУММА(ТабКеш.КоличествоРасход)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееКоличествоРасход,
	               |	СУММА(ТабКеш.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
				   |	СУММА(ТабКеш.КоличествоКонечныйОстаток)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееКоличествоКонечныйОстаток,
	               |	СУММА(ТабКеш.СтоимостьНачальныйОстаток) КАК СтоимостьНачальныйОстаток,
				   |	СУММА(ТабКеш.СтоимостьНачальныйОстаток)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСтоимостьНачальныйОстаток,
	               |	СУММА(ТабКеш.СтоимостьПриход)  КАК СтоимостьПриход,
				   |	СУММА(ТабКеш.СтоимостьПриход)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСтоимостьПриход,
	               |	СУММА(ТабКеш.СтоимостьРасход) КАК СтоимостьРасход,
				   |	СУММА(ТабКеш.СтоимостьРасход)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСтоимостьРасход,
	               |	СУММА(ТабКеш.СтоимостьКонечныйОстаток) КАК СтоимостьКонечныйОстаток,
				   |	СУММА(ТабКеш.СтоимостьКонечныйОстаток)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСтоимостьКонечныйОстаток,
	               |	СУММА(ТабКеш.СуммаДопРасходовНачальныйОстаток) КАК СуммаДопРасходовНачальныйОстаток,
				   |	СУММА(ТабКеш.СуммаДопРасходовНачальныйОстаток)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСуммаДопРасходовНачальныйОстаток,
	               |	СУММА(ТабКеш.СуммаДопРасходовПриход) КАК СуммаДопРасходовПриход,
				   |	СУММА(ТабКеш.СуммаДопРасходовПриход)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСуммаДопРасходовПриход,
	               |	СУММА(ТабКеш.СуммаДопРасходовРасход) КАК СуммаДопРасходовРасход,
				   |	СУММА(ТабКеш.СуммаДопРасходовРасход)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСуммаДопРасходовРасход,
	               |	СУММА(ТабКеш.СуммаДопРасходовКонечныйОстаток) КАК СуммаДопРасходовКонечныйОстаток,
				   |	СУММА(ТабКеш.СуммаДопРасходовКонечныйОстаток)/КОЛИЧЕСТВО(ТабКеш.Период) КАК СреднееСуммаДопРасходовКонечныйОстаток
	               |ИЗ
	               |	Таб КАК ТабКеш";
	
	Запрос.УстановитьПараметр("ДатаНачало", ДатаНачало);
	Запрос.УстановитьПараметр("ДатаКонец", ДатаКонец);
	
КонецПроцедуры

Процедура ОбработкаРезультатовЗапроса(РезультатЗапроса, СписокНоменклатуры)
	
	Результат.Очистить();
	
	Макет 				= ПолучитьМакет("Макет");
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПериод 		= Макет.ПолучитьОбласть("Период");
	ОбластьОрганизация	= Макет.ПолучитьОбласть("Организация");
	ОбластьСклад		= Макет.ПолучитьОбласть("Склад");
	ОбластьНоменклатура	= Макет.ПолучитьОбласть("Номенклатура");
	ОбластьИтоги		= Макет.ПолучитьОбласть("Итоги");
	ОбластьИтогиСредние = Макет.ПолучитьОбласть("ИтогиСредние");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	ВыборкаПериод = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		ОбластьПериод.Параметры.Заполнить(ВыборкаПериод);
		ТабличныйДокумент.Вывести(ОбластьПериод, ВыборкаПериод.Уровень());
		
		ВыборкаОрганизация = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			ОбластьОрганизация.Параметры.Заполнить(ВыборкаОрганизация);
			ТабличныйДокумент.Вывести(ОбластьОрганизация, ВыборкаОрганизация.Уровень());
			
			ВыборкаСклад = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСклад.Следующий() Цикл
				
				ОбластьСклад.Параметры.Заполнить(ВыборкаСклад);
				ТабличныйДокумент.Вывести(ОбластьСклад, ВыборкаСклад.Уровень());
				
				
				Если СписокНоменклатуры.Количество() > 0 Тогда
					ВыборкаНоменклатура = ВыборкаСклад.Выбрать();
					Пока ВыборкаНоменклатура.Следующий() Цикл
						
						ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
						ТабличныйДокумент.Вывести(ОбластьНоменклатура, ВыборкаСклад.Уровень());
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ВыборкаИтоги = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаИтоги.Следующий() Цикл
		
		ОбластьИтоги.Параметры.Заполнить(ВыборкаИтоги);
		ТабличныйДокумент.Вывести(ОбластьИтоги);
		
		ОбластьИтогиСредние.Параметры.Заполнить(ВыборкаИтоги);
		ТабличныйДокумент.Вывести(ОбластьИтогиСредние);
		
	КонецЦикла;
	
	Результат.Вывести(ТабличныйДокумент);
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
КонецПроцедуры






Функция СведенияОВнешнейОбработке() Экспорт
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Стоимость склада по дням");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", "1.0");    
    ПараметрыРегистрации.Вставить("Информация", "Стоимость склада по дням");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Стоимость склада по дням", "СКПД", "ОткрытиеФормы", Ложь, "СКПД");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Процедура СчитатьДокументыНазначений(МассивНазначений)
	
	Макет = ПолучитьМакет("МакетДокументыНазначений");
	
	Для Инд = 1 По Макет.ВысотаТаблицы Цикл
		МассивНазначений.Добавить(Макет.Область(Инд,1).Текст);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
