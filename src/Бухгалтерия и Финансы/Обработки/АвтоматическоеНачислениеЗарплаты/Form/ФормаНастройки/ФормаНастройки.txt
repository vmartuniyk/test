
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатьяДоходовПоУмолчанию	 = Константы.ЗП_СтатьяДоходовПоУмолчанию.Получить();
	СтатьяРасходовПоУмолчанию    = Константы.ЗП_СтатьяРасходовПоУмолчанию.Получить();
	
	ПроизвольныеКонстанты.Загрузить(РеквизитФормыВЗначение("Объект").ЗагрузитьТаблицуПроизвольныхКонстант());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ОписаниеОповещания = Новый ОписаниеОповещения("ОповещенияВопросаПередЗакрытием", ЭтаФорма);
		ТекстСообщения	   = НСтр("ru='Данные были изменены, сохранить изменения?'");
		ПоказатьВопрос(ОписаниеОповещания, ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещенияВопросаПередЗакрытием(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатЗаписи = ЗаписатьДанныеНаСервере();
		Если РезультатЗаписи Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
 	КонецЕсли;	

КонецПроцедуры // ОповещенияВопросаПередЗакрытием()
 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатьяДоходовПоУмолчаниюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПоУмолчаниюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроизвольныеКонстанты

&НаКлиенте
Процедура ПроизвольныеКонстантыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеКонстантыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ					= Истина;
	НоваяСтрока 			= ПроизвольныеКонстанты.Добавить();
	НоваяСтрока.Измененный 	= Истина;
	Модифицированность		= Истина;
КонецПроцедуры

&НаКлиенте
Процедура КонстантаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроизвольныеКонстанты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Измененный = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПроизвольныеКонстанты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Измененный = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеКонстантыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Загруженный Тогда
		Если Модифицированность Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Для удаление константы записанной в базе сначало необходимо сохранить значения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Если Не УдалитьКонстантуНаСервере(ТекущиеДанные.Константа) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	Если ЗаписатьДанныеНаСервере() Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаписатьДанныеНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьЗаполнение() Тогда
		ТекстСообщения = НСтр("ru='Для записи данных необходимо заполнить все поля.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ТЗ_ТаблицаКонстант = ПроизвольныеКонстанты.Выгрузить();
	
	Если Не ПроверитьЗаполнениеТаблицыКонстант(ТЗ_ТаблицаКонстант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ЗП_СтатьяДоходовПоУмолчанию.Установить(СтатьяДоходовПоУмолчанию);
	Константы.ЗП_СтатьяРасходовПоУмолчанию.Установить(СтатьяРасходовПоУмолчанию);
	
	Если Не РеквизитФормыВЗначение("Объект").ЗаписатьПроизвольныеКонстанты(ПроизвольныеКонстанты.Выгрузить()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции // ЗаписатьДанныеНаСервере()

&НаСервере
Функция ПроверитьЗаполнениеТаблицыКонстант(ТаблицаКонстант)
	
	РезультатПроверки = Истина;
	
	Для каждого СтрокаТаблицы Из ТаблицаКонстант Цикл
		Если ПустаяСтрока(СтрокаТаблицы.Константа) Тогда
			РезультатПроверки = Ложь;
			ТекстСообщения	  = НСтр("ru='Необходимо установить наименование константы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПроизвольныеКонстанты["+ТаблицаКонстант.Индекс(СтрокаТаблицы)+"].Константа");
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДоСворачивания 	= ТаблицаКонстант.Количество();
	ТаблицаКонстант.Свернуть("Константа");
	КоличествоПослеСворачивания = ТаблицаКонстант.Количество();
	
	Если КоличествоДоСворачивания <> КоличествоПослеСворачивания Тогда
		РезультатПроверки = Ложь;
		ТекстСообщения = НСтр("ru='В таблице констант обнаружены дубли.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции // ПроверитьЗаполнениеТаблицыКонстант()

&НаСервере
Функция УдалитьКонстантуНаСервере(Константа)
	УстановитьПривилегированныйРежим(Истина);
	Возврат РеквизитФормыВЗначение("Объект").УдалитьПроизвольнуюКонстанту(Константа);
КонецФункции // УдалитьКонстантуНаСервере()

#КонецОбласти