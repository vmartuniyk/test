
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	ОтборМесяц = НачалоМесяца(ТекущаяДата());
	ЗаполнитьЗначенияПоУмолчанию();
	ЗагрузитьОбщиеНастройкиЗПНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПриИзмененииОтбораНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ПустаяСтрока(ТекстСообщенияПользователю) Тогда
		Оповещение = Новый ОписаниеОповещения("Закрыть", ЭтаФорма);
		ПоказатьПредупреждение(Оповещение, ТекстСообщенияПользователю, , НСтр("ru='Не удалось прочитать настройки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ИмяПоляДереваПартнеров = "";
	Если ТипЗнч(ТекущееПодразделениеПартнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяПоляДереваПартнеров = "Партнер";
	ИначеЕсли ТипЗнч(ТекущееПодразделениеПартнер) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ИмяПоляДереваПартнеров = "Подразделение";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяПоляДереваПартнеров) Тогда
		
		ИдентификаторСтроки 					= ПолучитьИдентификаторСтрокиДереваПартнеров(ИмяПоляДереваПартнеров);
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоПартнеров.ТекущаяСтрока 	= ИдентификаторСтроки;
			Элементы.ДеревоПартнеров.Развернуть(ИдентификаторСтроки, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторСтрокиДереваПартнеров(ИмяПоляДереваПартнеров)

	ИдентификаторСтроки 		= Неопределено;
	КоллекцияЭлементовДерева 	= ДеревоПартнеров.ПолучитьЭлементы();
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоляДереваПартнеров, 
											ИдентификаторСтроки, 
											КоллекцияЭлементовДерева, 
											ТекущееПодразделениеПартнер, 
											Ложь);

	Возврат ИдентификаторСтроки;
											
КонецФункции // ПолучитьИдентификаторСтрокиДереваПАртнеров()
 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЗакрыватьФорму Тогда	
		ОповещаниеЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияФормы", ЭтаФорма);
		ТекстВопроса 	   = НСтр("ru='Вы действительно хотите закрыть форму начисления з/п'");
		ПоказатьВопрос(ОповещаниеЗакрытия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьОбщиеНастройкиЗПНаСервере();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеМесяцНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборМесяцаНаКлиенте(Элемент, ОтборМесяц);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевПриИзменении(Элемент)
	ПриИзмененииОтбораНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПартнеров

&НаКлиенте
Процедура ДеревоПартнеровПриАктивизацииСтроки(Элемент)
	
	Если ПеренаправлениеСтрокиПартнеров Тогда
		ПеренаправлениеСтрокиПартнеров = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса 		= НСтр("ru='Данные расчета были изменены. Вернуться к строчки по которой проводили начисление (иначе начисление будут утеряны)?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОповещаниеВопроса   = Новый ОписаниеОповещения("ОповещаниеАктивизацииСтрокиДереваПартнеров", ЭтаФорма);
		ПоказатьВопрос(ОповещаниеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьДеревоНачисленийНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещаниеАктивизацииСтрокиДереваПартнеров(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренаправлениеСтрокиПартнеров = Истина;
		Элементы.ДеревоПартнеров.ТекущаяСтрока = ТекущаяСтрокаДеревоПартнеров;
		Элементы.ДеревоПартнеров.Развернуть(ТекущаяСтрокаДеревоПартнеров);
	Иначе
		Модифицированность = Ложь;
		ЗагрузитьДеревоНачисленийНаКлиенте();
	КонецЕсли;
КонецПроцедуры // ОповещаниеАктивизацииСтрокиДереваПартнеров()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНачислений

&НаКлиенте
Процедура ДеревоНачисленийПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЗаписьМодифицированная = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНачислений(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Уровень = ТекущиеДанные.Уровень;
	Партнер = ТекущиеДанные.Партнер;
	
	Если Уровень = 1 Тогда
		КоллекцияЭлементов = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	Иначе
		КоллекцияЭлементов = ТекущиеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	НоваяСтрока = КоллекцияЭлементов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтаФорма);
	
	ДанныеПоУмолчанию = ПолучитьДанныеДляСтрокиНачислений(Партнер, СвойствоПартнерЗП, СвойствоОрганизацияПодразделения);
	
	НоваяСтрока.Уровень 					= 1;
	НоваяСтрока.Партнер 					= Партнер;
	НоваяСтрока.Организация 				= ДанныеПоУмолчанию.Организация;
	НоваяСтрока.Аналитика 					= ДанныеПоУмолчанию.Подразделение;
	НоваяСтрока.ЗаписьМодифицированная 		= Истина;
	НоваяСтрока.ДатаДобавления				= ТекущаяДата();
	НоваяСтрока.ПереноситьВСледующийПериод  = Истина;
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	Элементы.ДеревоНачислений.Развернуть(ИдентификаторСтроки);
	Элементы.ДеревоНачислений.ТекущаяСтрока = ИдентификаторСтроки;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СтруктураПараметровДеревоНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	СтруктураПараметров.Вставить("СвойствоПартнерЗП", СвойствоПартнерЗП);
	СтруктураПараметров.Вставить("СвойствоОрганизацияПодразделения", СвойствоОрганизацияПодразделения);
	СтруктураПараметров.Вставить("ОтборМесяц", ОтборМесяц);
	
	РезультатУдаления = УдалитьСтрокиНачисленийНаСервере(Элементы.ДеревоНачислений.ВыделенныеСтроки, СтруктураПараметров);
	
	Если РезультатУдаления Тогда
		Для каждого СтрокаДерева Из ДеревоНачислений.ПолучитьЭлементы() Цикл
		    Элементы.ДеревоНачислений.Развернуть(СтрокаДерева.ПолучитьИдентификатор());					
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ТекстСообщениния = НСтр("ru='Для ввода формулы необходимо сохранить изменения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщениния);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидРасчета", ТекущиеДанные.ВидРасчета);
	СтруктураПараметров.Вставить("Партнер", ТекущиеДанные.Партнер);
	СтруктураПараметров.Вставить("Период", ОтборМесяц);
	СтруктураПараметров.Вставить("Формула", ТекущиеДанные.Формула);
	
	ПараметрыОповещания = Новый Структура;
	ПараметрыОповещания.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОповещениеЗакрытия  = Новый ОписаниеОповещения("ЗакрытиеФормыКонструктораФормул", ЭтаФорма, ПараметрыОповещания);
	
	ОткрытьФорму("ВнешняяОбработка.АвтоматическоеНачислениеЗарплаты.Форма.ФормаКонструкторФормул", 
						СтруктураПараметров, 
						ЭтаФорма, 
						Новый УникальныйИдентификатор,
						,
						,
						ОповещениеЗакрытия,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийРассчитаноПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	ТекущиеДанные.РасчетУстановленВручную = Истина;
	ДеревоНачисленийРассчитаноПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийНеНачислятьПриИзменении(Элемент)
	ДеревоНачисленийРассчитаноПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыКонструктораФормул(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.ТекущиеДанные.Формула = Результат;

КонецПроцедуры // ЗакрытиеФормыКонструктораФормул()					

&НаКлиенте
Процедура ЗаписатьНачисления(Команда)
	
	Перем СтруктураПараметров, СтруктураКлючей;
	
	СформироватьСтруктуруПараметровИКлючей(СтруктураПараметров, СтруктураКлючей);
	ЗапомнитьТекущиеДанныеДереваНачислений();
	
	ИдентификаторСтроки = Неопределено;
	
	РезультатРассчета = ЗаписатьНачисленияНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки);
	
	Если РезультатРассчета Тогда
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоПартнеров.Развернуть(ИдентификаторСтроки);
			Элементы.ДеревоПартнеров.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПартнеров(Команда)
	
	Перем СтруктураПараметров, СтруктураКлючей;
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Для того чтобы расчитать партнера сначало необходимо записать данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СформироватьСтруктуруПараметровИКлючей(СтруктураПараметров, СтруктураКлючей);
	ЗапомнитьТекущиеДанныеДереваНачислений();

	ИдентификаторСтроки = Неопределено;
	
	РезультатРассчета = РассчитатьПартнеровНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки);
	
	Если РезультатРассчета Тогда
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоПартнеров.Развернуть(ИдентификаторСтроки);
			Элементы.ДеревоПартнеров.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачисления(Команда)
	
	Перем СтруктураПараметров, СтруктураКлючей;
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Для выполнения начисления необходимо сначало записать данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	СформироватьСтруктуруПараметровИКлючей(СтруктураПараметров, СтруктураКлючей);
	ЗапомнитьТекущиеДанныеДереваНачислений();

	ИдентификаторСтроки = Неопределено;
	
	РезультатРассчета = ВыполнитьНачисленияНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки);
	
	Если РезультатРассчета Тогда
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоПартнеров.Развернуть(ИдентификаторСтроки);
			Элементы.ДеревоПартнеров.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Для выполнения переноса необходимо сначало записать данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = СтруктураПараметровДеревоНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	СтруктураПараметров.Вставить("СвойствоПартнерЗП", СвойствоПартнерЗП);
	СтруктураПараметров.Вставить("ОтборМесяц", ОтборМесяц);
	
	РезультатПереноса = ПеренестиНачисленияНаСервере(СтруктураПараметров);
	
	Если РезультатПереноса Тогда
		Для каждого СтрокаДерева Из ДеревоНачислений.ПолучитьЭлементы() Цикл
		    Элементы.ДеревоНачислений.Развернуть(СтрокаДерева.ПолучитьИдентификатор());					
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНачисления(Команда)
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьЗначение(ТекущиеДанные.ДокументНачисления);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучнойРасчет(Команда)
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Для выполнения отмены необходимо сначало записать данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.РасчетУстановленВручную Тогда
		ТекстСообщения = НСтр("ru='Признак ручного расчета уже снят.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРасчета) Тогда
		ТекстСообщения = НСтр("ru='Не заполнени рид расчета для начисления.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РезультатОтмены = ОтменитьРучнойРасчетНаСервере(ТекущиеДанные.ВидРасчета, ТекущиеДанные.Партнер, ОтборМесяц);
	Если РезультатОтмены Тогда
		ТекущиеДанные.РасчетУстановленВручную = Ложь;
	КонецЕсли;
	                     
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийРасшифровкаФормулыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Для просмотра расшифровки необходимо сохранить данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Расшифровка", ТекущиеДанные.РасшифровкаФормулыФорматная);
	ПараметрыФормы.Вставить("Формула", ТекущиеДанные.Формула);
	
	ОткрытьФорму("ВнешняяОбработка.АвтоматическоеНачислениеЗарплаты.Форма.ФормаРасшифровки", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроку(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.ДеревоНачислений.ТекущаяСтрока) Тогда
		ЗапомнитьТекущиеДанныеДереваНачислений();
		ИДСтрокиДереваНачислений = Неопределено;
		КопироватьСтрокуНаСервере(ИДСтрокиДереваНачислений);
		Для каждого СтрокаДерева Из ДеревоНачислений.ПолучитьЭлементы() Цикл
		    Элементы.ДеревоНачислений.Развернуть(СтрокаДерева.ПолучитьИдентификатор());					
		КонецЦикла;
		Если ИДСтрокиДереваНачислений <> Неопределено Тогда
			Элементы.ДеревоНачислений.ТекущаяСтрока = ИДСтрокиДереваНачислений;
		КонецЕсли;
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ДеревоНачислений.ВыделенныеСтроки.Количество());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для вставки данных из буффера необходимо установить текущую строку.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Неопределено;
	Если ТекущиеДанные.Уровень = 1 Тогда
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	
	КоличествоВставленных 		= 0;
	ИДСтрокиДереваНачислений    = Неопределено;
	ВставитьСтрокуНаСервере(ИдентификаторСтроки, КоличествоВставленных, ИДСтрокиДереваНачислений);
	
	Для каждого СтрокаДерева Из ДеревоНачислений.ПолучитьЭлементы() Цикл
	    Элементы.ДеревоНачислений.Развернуть(СтрокаДерева.ПолучитьИдентификатор());					
	КонецЦикла;
	Если ИДСтрокиДереваНачислений <> Неопределено Тогда
		Элементы.ДеревоНачислений.ТекущаяСтрока = ИДСтрокиДереваНачислений;
	КонецЕсли;
	
	Если КоличествоВставленных > 0 Тогда
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНачисленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоНачисленийПартнер" Тогда
		ОткрытьПользователяПоПартнеру();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПользователя(Команда)
	ОткрытьПользователяПоПартнеру();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВзаиморасчетыНаВ2В(Команда)
	
	Перем СтруктураПараметров, СтруктураКлючей;
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru='Для того чтобы выгрузить взаморасчеты партнеров на сайт order-b2b.com сначала сохраните данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СформироватьСтруктуруПараметровИКлючей(СтруктураПараметров, СтруктураКлючей);
	ЗапомнитьТекущиеДанныеДереваНачислений();

	ИдентификаторСтроки = Неопределено;
	
	РезультатРассчета = ВыгрузитьВзаиморасчетыНаСайтНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки);
	
	Если РезультатРассчета Тогда
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоПартнеров.Развернуть(ИдентификаторСтроки);
			Элементы.ДеревоПартнеров.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДеревоПартнеров(Команда)
	ПриИзмененииОтбораНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ОткрытьФорму("ВнешняяОбработка.АвтоматическоеНачислениеЗарплаты.Форма.ФормаНастройки", , ЭтаФорма, Новый УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборМесяцаНаКлиенте(Элемент, знач НачалоПериода)
	
	ВидПериода	 		= ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	СписокВыбора 		= ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	НачальноеЗначение 	= СписокВыбора.НайтиПоЗначению(НачалоПериода);
	Обработчик 			= Новый ОписаниеОповещения("ВыборПериодаИзВыпадающегоСписка", ЭтаФорма, Новый Структура("Элемент", Элемент));
	ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальноеЗначение);
		
КонецПроцедуры // ВыборМесяцаНаКлиенте()

&НаКлиенте
Процедура ВыборПериодаИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") И ВыбранныйЭлемент.ПолучитьИдентификатор() = 0 Тогда
		ВыборМесяцаНаКлиенте(ДополнительныеПараметры.Элемент, ВыбранныйЭлемент.Значение);
	ИначеЕсли ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") И ВыбранныйЭлемент.ПолучитьИдентификатор() = 13 Тогда
		ВыборМесяцаНаКлиенте(ДополнительныеПараметры.Элемент, ВыбранныйЭлемент.Значение);
	Иначе
		ПредставлениеМесяц 	= ВыбранныйЭлемент.Представление;
		ОтборМесяц			= ВыбранныйЭлемент.Значение;
		ПриИзмененииОтбораНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьСтруктуруПараметровИКлючей(СтруктураПараметров, СтруктураКлючей)

	ТекущиеДанные = Элементы.ДеревоПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКлючей = Новый Структура("ИмяПоля, КлючСтроки");
	Если ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
		СтруктураКлючей.Вставить("ИмяПоля", "Партнер");
		СтруктураКлючей.Вставить("КлючСтроки", ТекущиеДанные.Партнер);
	Иначе 
		СтруктураКлючей.Вставить("ИмяПоля", "Подразделение");
		СтруктураКлючей.Вставить("КлючСтроки", ТекущиеДанные.Подразделение);
	КонецЕсли;
	
	СтруктураПараметров = СтруктураПараметровДеревоНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	СтруктураПараметров.Вставить("СвойствоПартнерЗП", СвойствоПартнерЗП);
	СтруктураПараметров.Вставить("ОтборМесяц", ОтборМесяц);

КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьТекущиеДанныеДереваНачислений()

	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДеревоНачисленийТекущийПартнер = ТекущиеДанные.Партнер;
		ДеревоНачисленийТекущийРасчет  = ТекущиеДанные.НаименованиеРасчета;
	КонецЕсли;

КонецПроцедуры // ЗапомнитьТекущиеДанныеВыполненныхНачислений()
 
&НаКлиенте
Процедура ОбработкаЗакрытияФормы(Результат, ПараметрыОповещания) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрыватьФорму = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры // ОбработкаЗакрытияФормы()



&НаКлиенте
Процедура ПриИзмененииОтбораНаКлиенте()

	Модифицированность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКлючей = Новый Структура("ИмяПоля, КлючСтроки");
	Если ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
		СтруктураКлючей.Вставить("ИмяПоля", "Партнер");
		СтруктураКлючей.Вставить("КлючСтроки", ТекущиеДанные.Партнер);
	Иначе 
		СтруктураКлючей.Вставить("ИмяПоля", "Подразделение");
		СтруктураКлючей.Вставить("КлючСтроки", ТекущиеДанные.Подразделение);
	КонецЕсли;
	
	ИдентификаторСтроки = ПриИзмененииОтбораНаСервере(СтруктураКлючей);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ДеревоПартнеров.Развернуть(ИдентификаторСтроки);
		Элементы.ДеревоПартнеров.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОтбораНаКлиенте()

&НаСервере
Функция ПриИзмененииОтбораНаСервере(знач СтруктураКлючей = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СформироватьИнтефейсПользователя();
	ЗагрузитьДеревоПартнеров();
	
	Если Не ПроверитьПараметрыОтбораНаСервере(СтруктураКлючей) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	КоллекцияЭлементовДерева 	= ДеревоПартнеров.ПолучитьЭлементы();
	ИдентификаторСтроки 		= 0;
	
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(СтруктураКлючей.ИмяПоля, 
										ИдентификаторСтроки, 
										КоллекцияЭлементовДерева, 
										СтруктураКлючей.КлючСтроки, 
										Ложь);
										
	Возврат ИдентификаторСтроки;
		
КонецФункции // ПриИзмененииОтбораНаКлиенте()

&НаСервере
Функция ПроверитьПараметрыОтбораНаСервере(СтруктураКлючей)

	Если ТипЗнч(СтруктураКлючей) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураКлючей.Свойство("ИмяПоля") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураКлючей.ИмяПоля) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураКлючей.ИмяПоля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураКлючей.Свойство("КлючСтроки") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураКлючей.КлючСтроки) И ТипЗнч(СтруктураКлючей.КлючСтроки) <> Тип("СправочникСсылка.СтруктураПредприятия")Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыОтбораНаСервере()


&НаКлиенте
Процедура ЗагрузитьДеревоНачисленийНаКлиенте()

	ТекущиеДанные = Элементы.ДеревоПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СтруктураПараметровДеревоНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
		
	СтруктураПараметров.Вставить("СвойствоПартнерЗП", СвойствоПартнерЗП);
	СтруктураПараметров.Вставить("ОтборМесяц", ОтборМесяц);
	СтруктураПараметров.Вставить("ДеревоНачислений", ДеревоНачислений);
	
	ИдентификаторСтрокиНачислений = Неопределено;
	
	ЗагрузитьДеревоНачислений(СтруктураПараметров, ИдентификаторСтрокиНачислений);
	ТекущаяСтрокаДеревоПартнеров = Элементы.ДеревоПартнеров.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
		ТекущееПодразделениеПартнер = ТекущиеДанные.Партнер;
	Иначе
		ТекущееПодразделениеПартнер = ТекущиеДанные.Подразделение;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ДеревоНачислений.ПолучитьЭлементы() Цикл
	    Элементы.ДеревоНачислений.Развернуть(СтрокаДерева.ПолучитьИдентификатор());					
	КонецЦикла;
	
	Если ИдентификаторСтрокиНачислений <> Неопределено Тогда
		Элементы.ДеревоНачислений.ТекущаяСтрока = ИдентификаторСтрокиНачислений;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьДеревоНачисленийНаКлиенте()
 

 



&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСтрокиНачислений(знач Партнер, знач СвойствоПартнерЗП, знач СвойствоОрганизацияПодразделения)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРезультат = Новый Структура("Подразделение, Организация");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСтрокаДляНачисления();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("СвойствоОрганизацияПодразделения", СвойствоОрганизацияПодразделения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	
	Возврат СтруктураРезультат;

КонецФункции // ПолучитьДанныеДляСтрокиНачислений()

&НаСервереБезКонтекста
Функция ТекстЗапросаСтрокаДляНачисления()

	ТекстЗапроса = "
				   |ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	Пользователи.ТекущееПодразделение КАК Подразделение,
	               |	ВЫРАЗИТЬ(&СвойствоПартнерЗП КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоПартнерЗП,
	               |	ВЫРАЗИТЬ(&СвойствоОрганизацияПодразделения КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоОрганизацияПодразделения
	               |ПОМЕСТИТЬ ТаблицаПользователей
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Недействителен = ЛОЖЬ
	               |	И Пользователи.ПометкаУдаления = ЛОЖЬ
	               |	И Пользователи.ТекущееПодразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПользователей.Подразделение КАК Подразделение,
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ДСОрганизации.Значение КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
				   |ИЗ
	               |	ТаблицаПользователей КАК ТаблицаПользователей
				   |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСПользователи
	               |		ПО (ТаблицаПользователей.Пользователь = (ВЫРАЗИТЬ(ДСПользователи.Объект КАК Справочник.Пользователи)))
	               |			И ТаблицаПользователей.СвойствоПартнерЗП = ДСПользователи.Свойство
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСОрганизации
				   |		ПО (ТаблицаПользователей.Подразделение 						= (ВЫРАЗИТЬ(ДСОрганизации.Объект КАК Справочник.СтруктураПредприятия)))
				   |			И ТаблицаПользователей.СвойствоОрганизацияПодразделения = ДСОрганизации.Свойство
				   |
				   |ГДЕ
				   |	ЕСТЬNULL(ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры), ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = &Партнер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСтрокаДляНачисления()
 
 


&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	РезультатЗаполнения = РеквизитФормыВЗначение("Объект").ПолучитьЗначениеПоУмолчанию();
	Если ТипЗнч(РезультатЗаполнения) <> Тип("Структура") Тогда
		ТекстСообщенияПользователю = РезультатЗаполнения;
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗаполнения);
КонецПроцедуры // ЗаполнитьЗначенияПоУмолчанию()


&НаСервере
Процедура СформироватьИнтефейсПользователя()
	УстановитьВидимостьКолонокДереваПартнеров();
КонецПроцедуры // СформироватьИнтефейсПользователя()

&НаСервере
Процедура УстановитьВидимостьКолонокДереваПартнеров()

	Для Индекс = 1 По 12 Цикл
		ИмяЭлемента = "СуммаНачислено" + Строка(Индекс);
		Если Индекс <= КоличествоМесяцев Тогда
			Элементы[ИмяЭлемента].Видимость = Истина;
			Элементы[ИмяЭлемента].Заголовок = ПолучитьЗаголовокКолонки(ОтборМесяц, Индекс);
		Иначе
			Элементы[ИмяЭлемента].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла; 	

КонецПроцедуры // УстановитьВидимостьКолонокДереваПартнеров()

&НаСервере
Функция ПолучитьЗаголовокКолонки(знач ДатаОтбора, знач Индекс)
	Возврат Формат(ДобавитьМесяц(ДатаОтбора, -Индекс + 1), "ДФ=MM.yyyy");
КонецФункции // ПолучитьЗаголовокКолонки()


&НаСервере
Процедура ЗагрузитьДеревоПартнеров()
	СтруктураПараметров = СтруктураПараметровДереваПартнеров();											
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтаФорма);
	
	РеквизитДеревоПартнеров = РеквизитФормыВЗначение("Объект").ЗагрузитьДеревоПартнеров(СтруктураПараметров);
	Если ТипЗнч(РеквизитДеревоПартнеров) = Тип("ДеревоЗначений") Тогда
		ЗначениеВРеквизитФормы(РеквизитДеревоПартнеров, "ДеревоПартнеров");
	КонецЕсли;
КонецПроцедуры // ЗагрузитьДеревоПартнеров()

&НаСервере
Функция СтруктураПараметровДереваПартнеров()
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СвойствоПартнерЗП");
	СтруктураПараметров.Вставить("СвойствоОрганизацияПодразделения");
	СтруктураПараметров.Вставить("КоличествоМесяцев");
	СтруктураПараметров.Вставить("ОтборМесяц");
	Возврат СтруктураПараметров;
КонецФункции // СтруктураПараметровДереваПартнеров()



&НаСервере
Процедура ЗагрузитьДеревоНачислений(СтруктураПараметров, ИДСтрокиДереваНачислений = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитДеревоНачислений = РеквизитФормыВЗначение("Объект").ЗагрузитьДеревоНачислений(СтруктураПараметров);
	Если ТипЗнч(РеквизитДеревоНачислений) = Тип("ДеревоЗначений") Тогда
		ЗначениеВРеквизитФормы(РеквизитДеревоНачислений, "ДеревоНачислений");
		РасчитатьИтогиДереваНачислений(ДеревоНачислений, НачисленияРасчитаноИтог, НачисленияНасчитаноИтог);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДеревоНачисленийТекущийПартнер) Тогда
		Возврат;
	КонецЕсли;
	
	НайтиИдентификаторСтрокиДереваНачислений(ДеревоНачислений, ИДСтрокиДереваНачислений);

КонецПроцедуры // ЗагрузитьДеревоНачислений()

&НаСервере
Процедура НайтиИдентификаторСтрокиДереваНачислений(РодительДерева, ИДСтрокиДереваНачислений)

	СтрокиДерева = РодительДерева.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Партнер = ДеревоНачисленийТекущийПартнер И СтрокаДерева.НаименованиеРасчета = ДеревоНачисленийТекущийРасчет Тогда
			ИДСтрокиДереваНачислений = СтрокаДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева.Уровень <> 1 Тогда // если не родитель
			НайтиИдентификаторСтрокиДереваНачислений(СтрокаДерева, ИДСтрокиДереваНачислений);
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры // НайтиИдентификаторСтрокиДереваНачислений()
 

&НаСервере
Процедура РасчитатьИтогиДереваНачислений(РеквизитДеревоНачислений, РассчитаноИтог, НасчитаноИтог)
	
	НИтог = 0;
	РИтог = 0;
	
	СтрокиДерева = РеквизитДеревоНачислений.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
	
		Если СтрокаДерева.Уровень = 1 Тогда
			Если Не СтрокаДерева.НеНачислять Тогда
				РИтог = РИтог + СтрокаДерева.Рассчитано;
			КонецЕсли;
			НИтог = НИтог + СтрокаДерева.Насчитано;
			Попытка СтрокаДерева.РасшифровкаФормулы = Строка(Вычислить(СтрЗаменить(СтрокаДерева.РасшифровкаФормулыФорматная, Символы.ПС, ""))); Исключение СтрокаДерева.РасшифровкаФормулы = "" КонецПопытки;
		Иначе
			РасчитатьИтогиДереваНачислений(СтрокаДерева, СтрокаДерева.Рассчитано, СтрокаДерева.Насчитано);
			РИтог = РИтог + СтрокаДерева.Рассчитано;
			НИтог = НИтог + СтрокаДерева.Насчитано;
		КонецЕсли;
	
	КонецЦикла;
	
	НасчитаноИтог = НИтог;
	РассчитаноИтог = РИтог;
	
КонецПроцедуры // РасчитатьИтогиДереваНачислений()
 

&НаКлиенте
Функция СтруктураПараметровДеревоНачислений()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Подразделение");
	СтруктураПараметров.Вставить("Партнер");
	СтруктураПараметров.Вставить("СвойствоПартнерЗП");
	СтруктураПараметров.Вставить("ОтборМесяц");
	СтруктураПараметров.Вставить("СвойствоОрганизацияПодразделения");
	
	Возврат СтруктураПараметров;

КонецФункции // СтруктураПараметровДеревоНачислений()




&НаСервере
Функция ЗаписатьНачисленияНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки)
	
	УстановитьПривилегированныйРежим(Истина);	
	СтруктураНачислений = ПолучитьСтруктуруНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураНачислений, ЭтаФорма);
	
	РезультатЗаписи = РеквизитФормыВЗначение("Объект").ЗаписатьНачисления(СтруктураНачислений);
	
	Если РезультатЗаписи Тогда
		Элементы.ГруппаЗаголовок.Доступность	= Истина;
		Элементы.ГруппаПартнеры.Доступность 	= Истина;
		Модифицированность 						= Ложь;
		ЗагрузитьДеревоНачислений(СтруктураПараметров);
		ИдентификаторСтроки = ПриИзмененииОтбораНаСервере(СтруктураКлючей);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЗаписатьНачисленияНаСервере()


&НаСервере
Функция РассчитатьПартнеровНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНачислений = ПолучитьСтруктуруНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураНачислений, ЭтаФорма);
	
	РезультатНачисления = РеквизитФормыВЗначение("Объект").РассчитатьПартнеров(СтруктураНачислений);
	
	Если РезультатНачисления Тогда
		ЗагрузитьДеревоНачислений(СтруктураПараметров);
		ИдентификаторСтроки = ПриИзмененииОтбораНаСервере(СтруктураКлючей);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // РасчитатьПартнераНаСервере()

Функция ВыгрузитьВзаиморасчетыНаСайтНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНачислений = ПолучитьСтруктуруНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураНачислений, ЭтаФорма);
	
	РезультатНачисления = РеквизитФормыВЗначение("Объект").ВыгрузитьВзаиморасчетыНаСайт(СтруктураНачислений);
	
	Если РезультатНачисления Тогда
		ЗагрузитьДеревоНачислений(СтруктураПараметров);
		ИдентификаторСтроки = ПриИзмененииОтбораНаСервере(СтруктураКлючей);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруНачислений()

	СтруктураНачислений	= Новый Структура;
	СтруктураНачислений.Вставить("ДеревоНачислений");
	СтруктураНачислений.Вставить("ОтборМесяц");
	СтруктураНачислений.Вставить("ДопРеквизитСоглашениеЗП");
	СтруктураНачислений.Вставить("ДопРеквизитДоговорЗП");
	СтруктураНачислений.Вставить("СвойствоОрганизацияПодразделения");
	СтруктураНачислений.Вставить("СвойствоПартнерЗП");
	
	Возврат СтруктураНачислений;

КонецФункции // ПолучитьСтруктуруНачислений()
 

&НаСервере
Функция ВыполнитьНачисленияНаСервере(СтруктураПараметров, СтруктураКлючей, ИдентификаторСтроки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНачислений = ПолучитьСтруктуруНачислений();
	ЗаполнитьЗначенияСвойств(СтруктураНачислений, ЭтаФорма);
	
	РезультатЗаписи = РеквизитФормыВЗначение("Объект").ВыполнитьНачисления(СтруктураНачислений);
	Если РезультатЗаписи Тогда
		ЗагрузитьДеревоНачислений(СтруктураПараметров);
		ИдентификаторСтроки = ПриИзмененииОтбораНаСервере(СтруктураКлючей);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВыполнитьНачисленияНаСервере()


&НаСервере
Процедура ДеревоНачисленийРассчитаноПриИзмененииНаСервере()
	РасчитатьИтогиДереваНачислений(ДеревоНачислений, НачисленияРасчитаноИтог, НачисленияНасчитаноИтог);
КонецПроцедуры


&НаСервере
Функция ПеренестиНачисленияНаСервере(СтруктураПараметров)
	УстановитьПривилегированныйРежим(Истина);
	РезультатПереноса = РеквизитФормыВЗначение("Объект").ПеренестиНачисления(СтруктураПараметров);
	Если РезультатПереноса Тогда
		РеквизитДеревоНачислений = РеквизитФормыВЗначение("Объект").ЗагрузитьДеревоНачислений(СтруктураПараметров);
		Если ТипЗнч(РеквизитДеревоНачислений) = Тип("ДеревоЗначений") Тогда
			ЗначениеВРеквизитФормы(РеквизитДеревоНачислений, "ДеревоНачислений");
			РасчитатьИтогиДереваНачислений(ДеревоНачислений, НачисленияРасчитаноИтог, НачисленияНасчитаноИтог);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПеренестиНачисленияНаСервере()


&НаСервере
Функция УдалитьСтрокиНачисленийНаСервере(знач МассивСтрок, знач СтруктураПараметров)

	УстановитьПривилегированныйРежим(Истина);
	
	МассивКУдалению = Новый Массив;
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаНачислений.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	
	Для каждого СтрокаИзМассива Из МассивСтрок Цикл
		СтрокаДерева = ДеревоНачислений.НайтиПоИдентификатору(СтрокаИзМассива);
		Если СтрокаДерева.Уровень <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.ДанныеЗаписаны Тогда
			НоваяСтрока = ТаблицаНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.Период = ОтборМесяц;
		Иначе
			МассивКУдалению.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДерева Из МассивКУдалению Цикл
		РодительСтроки = СтрокаДерева.ПолучитьРодителя();
		КоллекцияСтрок = РодительСтроки.ПолучитьЭлементы();
		КоллекцияСтрок.Удалить(СтрокаДерева);    			
	КонецЦикла; 
	
	МодифицированныеСтрокиОстались = Ложь;
	ПроверитьНаличиеМодифицированныхСтрок(ДеревоНачислений, МодифицированныеСтрокиОстались);
	Если Не МодифицированныеСтрокиОстались Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатУдаления = РеквизитФормыВЗначение("Объект").УдалитьСтрокиНачислений(ТаблицаНачислений);
	Если РезультатУдаления Тогда
		ЗагрузитьДеревоНачислений(СтруктураПараметров);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции // УдалитьСтрокиНачисленийНаСервере()

&НаСервере
Процедура ПроверитьНаличиеМодифицированныхСтрок(ДеревоДляПроверки, МодифицированныеСтрокиОстались)

	СтрокиДерева = ДеревоДляПроверки.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		Если СтрокаДерева.Уровень = 1 Тогда
			Если Не СтрокаДерева.ДанныеЗаписаны Тогда
				МодифицированныеСтрокиОстались = Истина;
			КонецЕсли;
		Иначе
			ПроверитьНаличиеМодифицированныхСтрок(СтрокаДерева, МодифицированныеСтрокиОстались);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьНаличиеМодифицированныхСтрок()
 

&НаСервере
Процедура СнятьПризнакМодифицированностиВДеревеНачислений(ДеревоДляОбработки)
	
	СтрокиДерева = ДеревоДляОбработки.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
	
		Если СтрокаДерева.Уровень = 1 Тогда
			СтрокаДерева.ЗаписьМодифицированная = Ложь;
			СтрокаДерева.ДанныеЗаписаны 		= Истина;
		Иначе
			СнятьПризнакМодифицированностиВДеревеНачислений(СтрокаДерева);
		КонецЕсли;	
	КонецЦикла; 

КонецПроцедуры // СнятьПризнакМидифицированностивДеревеНачислений()


&НаСервере
Функция ОтменитьРучнойРасчетНаСервере(ВидРасчета, Партнер, ДатаОтбора)
	УстановитьПривилегированныйРежим(Истина);
	Возврат РеквизитФормыВЗначение("Объект").ОтменитьРучнойРасчет(ВидРасчета, Партнер, ДатаОтбора);
КонецФункции // ОтменитьРучнойРасчетНаСервере()




&НаСервере
Процедура КопироватьСтрокуНаСервере(ИДСтрокиДереваНачислений)
	
	МассивСтрок 	= Новый Массив;
	МассивСтруктур  = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из Элементы.ДеревоНачислений.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(СтрокаДерева);
	КонецЦикла;
	
	Для каждого СтрокаДерева Из МассивСтрок Цикл
		СтруктураСтроки = ПолучитьСтруктуруСтрокиДереваНачислений();
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаДерева);
		МассивСтруктур.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	БуферОбмена = ЗначениеВСтрокуВнутр(МассивСтруктур);
	
	НайтиИдентификаторСтрокиДереваНачислений(ДеревоНачислений, ИДСтрокиДереваНачислений);
	
КонецПроцедуры // КопироватьСтрокуНаСервере()

&НаСервере
Функция ПолучитьСтруктуруСтрокиДереваНачислений()

	СтруктураСтроки = Новый Структура;
	
	мДеревоНачислений = РеквизитФормыВЗначение("ДеревоНачислений", Тип("ДеревоЗначений"));
	
	Для каждого КолонкаДерева Из мДеревоНачислений.Колонки Цикл
		СтруктураСтроки.Вставить(КолонкаДерева.Имя);
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(мДеревоНачислений, "ДеревоНачислений");
	
	Возврат СтруктураСтроки;

КонецФункции // ПолучитьСтруктуруСтрокиДереваНачислений()
 

&НаСервере
Процедура ВставитьСтрокуНаСервере(знач ИдентификаторСтроки, КоличествоВставленных, ИДСтрокиДереваНачислений)

	СтрокаДерева 	= ДеревоНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
	КоллекцияСтрок	= СтрокаДерева.ПолучитьЭлементы();
	
	МассивСтрок = ЗначениеИзСтрокиВнутр(БуферОбмена);
	
	Если ТипЗнч(МассивСтрок) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	
	Для каждого СтрокаТаблицы ИЗ МассивСтрок Цикл
		Если СтрокаТаблицы.Уровень <> 1 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КоллекцияСтрок.Добавить();
		Если СтрокаТаблицы.РасчетУстановленВручную Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Формула, РасшифровкаФормулы, Насчитано, ДокументНачисления, ДанныеЗаписаны, ДатаДобавления, ВидРасчета");
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "РасшифровкаФормулы, Насчитано, Рассчитано, ДокументНачисления, ДанныеЗаписаны, ДатаДобавления, ВидРасчета");
		КонецЕсли;
		НоваяСтрока.ЗаписьМодифицированная 	= Истина;
		НоваяСтрока.ДатаДобавления 			= ТекущаяДата() + Индекс;
		НоваяСтрока.Партнер					= СтрокаДерева.Партнер;
		Модифицированность 					= Истина;
		Индекс								= Индекс + 1;
		ИДСтрокиДереваНачислений			= НоваяСтрока.ПолучитьИдентификатор();
	КонецЦикла;
	
	КоличествоВставленных = Индекс;

КонецПроцедуры // ВставитьСтрокуНаСервере()




&НаКлиенте
Процедура ОткрытьПользователяПоПартнеру()

	ТекущиеДанные = Элементы.ДеревоНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пользователь = ПолучитьПользователяПоПартнеруНаСервере(ТекущиеДанные.Партнер);
	
	Если Пользователь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Пользователь);

КонецПроцедуры // ОткрытьПользователяПоПартнеру()

&НаСервереБезКонтекста
Функция ПолучитьПользователяПоПартнеруНаСервере(знач Партнер)

	УстановитьПривилегированныйРежим(Истина);
	
	Свойство = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(Объект КАК Справочник.Пользователи) КАК Пользователь
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения
	                      |ГДЕ
	                      |	Свойство = &Свойство
	                      |	И Значение = &Партнер");
						  
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Пользователь, Неопределено);

КонецФункции // ПолучитьПользователяПоПартнеруНаСервере()





&НаСервере
Процедура ЗагрузитьОбщиеНастройкиЗПНаСервере()
	НастройкиНачисления = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиАвтоматическоеНачислениеЗП", , , "ДополнительныеНастройкиАвтоматическоеНачислениеЗП");
	Если ТипЗнч(НастройкиНачисления) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если Не НастройкиНачисления.Свойство("ТекущееПодразделениеПартнер") Тогда
		Возврат;
	КонецЕсли;
	ТекущееПодразделениеПартнер = НастройкиНачисления.ТекущееПодразделениеПартнер;
КонецПроцедуры // ЗагрузитьНастройкиНаСервере()
 

&НаСервере
Процедура СохранитьОбщиеНастройкиЗПНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	НастройкиНачисления = Новый Структура;
	НастройкиНачисления.Вставить("ТекущееПодразделениеПартнер", ТекущееПодразделениеПартнер);
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиАвтоматическоеНачислениеЗП", , НастройкиНачисления, "Настройки автоматического рассчета ЗП", "ДополнительныеНастройкиАвтоматическоеНачислениеЗП");

КонецПроцедуры // СохранитьОбщиеНастройкиЗПНаСервере()


#КонецОбласти