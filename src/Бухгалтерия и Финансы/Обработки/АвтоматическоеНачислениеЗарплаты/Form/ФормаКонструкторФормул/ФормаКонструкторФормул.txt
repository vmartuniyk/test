
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Партнер = ?(Параметры.Партнер=Неопределено, Справочники.Партнер.ПустаяСсылка(), Параметры.Партнер);
	ВидРасчета			= Параметры.ВидРасчета;
	Формула				= Параметры.Формула;
	Период				= Параметры.Период;
	
	ОбъектОбработки 	= РеквизитФормыВЗначение("Объект");
	ДеревоОператоров 	= ОбъектОбработки.ПостроитьДеревоОператоров();
	ДеревоОперандов 	= ОбъектОбработки.ПостроитьДеревоОперандов(Параметры);
		
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект"); 
	ЗначениеВРеквизитФормы(ДеревоОператоров, "Операторы");
	ЗначениеВРеквизитФормы(ДеревоОперандов, "Операнды");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ОчиститьСообщения();
	ЗакрыватьФорму = Истина;
	Если Модифицированность Тогда
		Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, ПолучитьМассивОперандов(), "Формула") Тогда
			Отказ = Истина;
		Иначе
			Ответ = Вопрос("Формула была изменена, сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОбработкаФормулыПередЗакрытием(Неопределено, ЗакрыватьФорму);
				Если ЗакрыватьФорму = Ложь Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Модифицированность=Ложь;
				Закрыть(Формула);
			КонецЕсли;
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Модифицированность=Ложь;
				Закрыть();
			КонецЕсли;
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ=Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблициОперанды
&НаКлиенте
Процедура ОперандыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОперандыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОперандыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ВставитьОперандВФормулу();
КонецПроцедуры

&НаКлиенте
Процедура ОперандыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Выполнение = Ложь;
	Иначе
		ПараметрыПеретаскивания.Значение = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Элемент.ТекущиеДанные.Идентификатор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициОператоры
&НаКлиенте
Процедура ОператорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОператорыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВставитьОператорВФормулу();
КонецПроцедуры

&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Выполнение = Ложь;
	Иначе
		ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Идентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОператорыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные.Оператор = "Формат(,)" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		ОписаниеОповещенияФС = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыКонструктораФС", ЭтаФорма,ФорматСтроки);
		ФорматСтроки.Показать(ОписаниеОповещенияФС);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	ОчиститьСообщения();
	РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, ПолучитьМассивОперандов(), "Формула")
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ОчиститьСообщения();
	МассивОперандов = ПолучитьМассивОперандов();
	ЗакрыватьФорму  = Истина;
	Если РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула, МассивОперандов, "Формула") Тогда
		ОбработкаФормулыПередЗакрытием(МассивОперандов, ЗакрыватьФорму);
		Если ЗакрыватьФорму = Ложь Тогда
			Возврат;
		КонецЕсли;
		Модифицированность = Ложь; 
		Закрыть(СокрЛП(Формула));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ОбработкаФормулыПередЗакрытием(МассивОперандов, ЗакрыватьФорму)

	ФормулаИдентификаторы 		= Формула;
	СоответствиеОперанды 		= Новый Соответствие;
	ДеревоЗначений 				= РеквизитФормыВЗначение("Операнды");
	МассивЭлементов 			= ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		СоответствиеОперанды[Элемент.Идентификатор] = Элемент.Идентификатор;	
	КонецЦикла; 
	
	Для Каждого ЕлМасива из МассивОперандов Цикл 
		РезультатСоответствия = СоответствиеОперанды.Получить(ЕлМасива);
		Если РезультатСоответствия=Неопределено Тогда
			ТекстСообщения = НСтр("ru='Неверно указанной операнд [%1]'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЕлМасива);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗакрытьФорму = Ложь;
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	РеквизитФормыВЗначение("Объект").ЗаписатьФормулуВРегистр(ЭтаФорма, ЗакрыватьФорму);

КонецПроцедуры // ОбработкаФормулыПередЗакрытием()


&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг = 0)
	
	СтрокаНач = 0;
	СтрокаКон = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	
	Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстДляВставки)) > Элементы.Формула.Ширина / 8 Тогда
		Элементы.Формула.ВыделенныйТекст = "";
	КонецЕсли;
		
	Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
	
	Если Не Сдвиг = 0 Тогда
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Элементы.Формула.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач - Сдвиг, СтрокаКон, КолонкаКон - Сдвиг);
	КонецЕсли;
		
	ТекущийЭлемент = Элементы.Формула;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОперандВФормулу()
	Если Не Элементы.Операнды.ТекущиеДанные.ЭтоГруппа Тогда
		ВставитьТекстВФормулу(РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Элементы.Операнды.ТекущиеДанные.Идентификатор));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОператорВФормулу()
	Если Элементы.Операторы.ТекущиеДанные.Идентификатор = "Формат" Тогда
		ФорматСтроки = Новый КонструкторФорматнойСтроки;
		ОписаниеОповещенияФС = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыОператоКонструктораФС", ЭтаФорма,ФорматСтроки);
		ФорматСтроки.Показать(ОписаниеОповещенияФС);
	Иначе	
		ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивОперандов()
	
	МассивОперандов = Новый Массив();
			
	ТекстФормулы = СокрЛП(Формула);
	Если СтрЧислоВхождений(ТекстФормулы, "[") <> СтрЧислоВхождений(ТекстФормулы, "]") Тогда
		ЕстьОперанды = Ложь;
	Иначе
		ЕстьОперанды = Истина;
	КонецЕсли;
	
	Пока ЕстьОперанды = Истина Цикл
		НачалоОперанда = Найти(ТекстФормулы, "[");
		КонецОперанда = Найти(ТекстФормулы, "]");
		
		Если НачалоОперанда = 0
			Или КонецОперанда = 0
			Или НачалоОперанда > КонецОперанда Тогда
			ЕстьОперанды = Ложь;
			Прервать;
			
		КонецЕсли;
		
		ИмяОперанда = Сред(ТекстФормулы, НачалоОперанда + 1, КонецОперанда - НачалоОперанда - 1);
		МассивОперандов.Добавить(ИмяОперанда);
		ТекстФормулы = СтрЗаменить(ТекстФормулы, "[" + ИмяОперанда + "]", "");
		КонецПрошлогоОперанда = КонецОперанда;
		
	КонецЦикла;
		
	Возврат МассивОперандов;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыКонструктораФС(Результат,ДопПараметры)   Экспорт
	Если ТипЗнч(ДопПараметры) <> Тип("КонструкторФорматнойСтроки") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопПараметры.Текст) Тогда
		ТекстДляВставки = "Формат( , """ + ДопПараметры.Текст + """)";
		Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
	КонецЕсли; 
КонецПроцедуры // ВыполнитьПослеЗакрытияФормыКонструктораФС()   

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыОператоКонструктораФС(Результат,ДопПараметры)   Экспорт
	Если ТипЗнч(ДопПараметры) <> Тип("КонструкторФорматнойСтроки") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопПараметры.Текст) Тогда
		ТекстДляВставики = "Формат( , """ + ДопПараметры.Текст + """)";
		ВставитьТекстВФормулу(ТекстДляВставики, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	Иначе	
		ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	КонецЕсли;

КонецПроцедуры // ВыполнитьПослеЗакрытияФормыКонструктораФС()


#КонецОбласти










 