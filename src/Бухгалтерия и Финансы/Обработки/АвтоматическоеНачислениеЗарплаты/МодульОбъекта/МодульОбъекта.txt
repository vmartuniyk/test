

#Область ПрограмныйИнтерфейс

Функция ПостроитьДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Логические операторы и константы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "AND", " AND ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "OR", " OR ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "NOT", " NOT ");;
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Числовые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Max", "Max(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Min", "Min(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Round", "Round(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Int", "Int()", 1);
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Прочие функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Условие", "?(,,)", 3);
	
	Возврат Дерево;
	
КонецФункции // ПостроитьДеревоОператоров()

Функция ПостроитьДеревоОперандов(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Дерево = ПолучитьДеревоОперандов();
	
	НВПоказателиРасчетаЗарплаты = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Показатели расчета зарплаты", Неопределено, Истина));
	ЗагрузитьПоказателиРасчетаЗарплатыВДерево(НВПоказателиРасчетаЗарплаты);
	
	ПроизвольныеКонстанты = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Произвольные константы", Неопределено, Истина));
	ЗагрузитьПроизвольныеКонстантыВДерево(ПроизвольныеКонстанты);
	
	НВВидРасчета = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Виды расчета", Неопределено, Истина));
	ЗагрузитьНВВидРасчетаВДерево(НВВидРасчета,СтруктураПараметров);
	
	КурсыВалют = ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "Курсы валют", Неопределено, Истина));
	ЗагрузитьКурсыВалютВДерево(КурсыВалют);
	
	Возврат Дерево;
	
КонецФункции // ПостроитьДеревоОперандов()

Функция ЗагрузитьФормулу(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);  
	Запрос = Новый Запрос;
	Запрос.Текст =ПолучитьТекстЗапросаЗаписиРегистра();	
	Запрос.УстановитьПараметр("Партнер",СтруктураПараметров.Партнер);
	Запрос.УстановитьПараметр("Период",СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("ВидРасчета",СтруктураПараметров.ВидРасчета); 

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Формула;
	КонецЦикла;

	Возврат ""; 
КонецФункции // ЗагрузитьФормулу()

Процедура ЗаписатьФормулуВРегистр(ФормаОбработки, ЗакрыватьФорму = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Соответствие = ПолучитьХранилищеТиповШаблонов(ФормаОбработки);
	Период 			= ФормаОбработки["Период"];
	Формула  		= ФормаОбработки["Формула"];
	Партнер  		= ФормаОбработки["Партнер"];
	ВидРасчета  	= ФормаОбработки["ВидРасчета"];  	
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); 
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементПлановыеНачисления = Блокировка.Добавить("РегистрСведений.ЗП_ВыполненныеНачисления");
	ЭлементПлановыеНачисления.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементПлановыеНачисления.УстановитьЗначение("Период", Период);
	ЭлементПлановыеНачисления.УстановитьЗначение("Партнер", Партнер); 
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат;		
	КонецПопытки;

	
	// Проверка на "зацикливание" формулы расчета
	СоответствиеВидовРасчетов 	= СоответствиеВидовРасчетовПоПартнеру(Партнер, Период, ВидРасчета);
	МассивИспользуемыхРасчетов  = МассивИспользуемыхРасчетовВТекущейФормуле(СоответствиеВидовРасчетов, Формула);
	РезультатПроверки			= ПроверитьИспользованиеВидаРасчетаВДругихФормулах(Партнер, Период, МассивИспользуемыхРасчетов, ВидРасчета.Наименование);
	
	Если РезультатПроверки Тогда
		 ОтменитьТранзакцию();
		 ЗакрыватьФорму = Ложь;
		 Возврат;
	КонецЕсли;
		
	НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);  	
	НаборЗаписей.Отбор.Партнер.Установить(Партнер);
	НаборЗаписей.Отбор.ВидРасчета.Установить(ВидРасчета);
	
	НаборЗаписей.Прочитать();
	Для каждого Запись Из НаборЗаписей Цикл
		Запись.Формула 				= Формула;
		//Запись.РасшифровкаФормулы = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(9));  
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = ПодготовитьТекст("Не удалось записать формулу. Обратитесь в службу технической поддрежки.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗакрытьФорму = Ложь;
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;   
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ЗаписатьФормулувРегистр()


// Функция формирует дерево партнеров из начисленными проплатами
//
// Параметры:
//  Структура которая содержит свойства:
//   * СвойствоПартнерЗП - ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения 
//			- свойство которым осуществляется привязка пользователя к партнеру ЗП.
// 
// Возвращаемое значение:
// ДеревоЗначений - дерево из иерархией партнеров и подразделений.
//
Функция ЗагрузитьДеревоПартнеров(СтруктураПараметров) Экспорт

	Если ПроверитьПараметрыЗагрузкиДереваПартнеров(СтруктураПараметров) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоМесяцев  = СтруктураПараметров.КоличествоМесяцев;
	ОтборМесяц		   = СтруктураПараметров.ОтборМесяц;
	
	Запрос 		 = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаДеревоПартнеровВсеСотрудники();
	
	Запрос.УстановитьПараметр("ГруппаДоступаПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.ГруппаДоступаПартнерЗП());
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СтруктураПараметров.СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("СвойствоОрганизацияПодразделения", СтруктураПараметров.СвойствоОрганизацияПодразделения);
	
	Запрос.Выполнить();
	Запрос.Текст = "Выбрать * из Партнеры";
	
	Запрос.Текст = ТекстЗапросаДеревоПартнеров(КоличествоМесяцев);
	
	УстановитьЗначениеПериодовДеревоПартнеров(Запрос, КоличествоМесяцев, ОтборМесяц);
	
	РезультатЗапроса 			= Запрос.ВыполнитьПакет();
	ДеревоПартнеров	 			= РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ТаблицаОрганизаций			= РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	СоответствиеОрганизаций     = ПолучитьСоответвствиеПодразделениеОрганизация(ТаблицаОрганизаций);
	
	СтрокаДерева = Неопределено;
	Для каждого СтрокиДерева Из ДеревоПартнеров.Строки Цикл
		Если СтрокиДерева.ПорядокСортировки = 2 Тогда
			СтрокаДерева = СтрокиДерева;
		Иначе
			Если СтрокаДерева <> Неопределено Тогда
				ДеревоПартнеров.Строки.Сдвинуть(СтрокаДерева, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	УстановитьОрганизациюДляСтрокиДереваПартнеров(ДеревоПартнеров.Строки, СоответствиеОрганизаций);
	
	Возврат ДеревоПартнеров;

КонецФункции

// Функция возвращает дерево начислений для следующей загрузки на форме
//
// Параметры:
//  Структура которая содержит свойства:
//   * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение по котором формировать отбор.
//   * Партнер - СправочникСсылка.Партнеры - партне по котором формировать отбор.
//   * СвойствоПартнерЗП - ПланвидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство которым партнер связывается с пользователем
//   * ОтборМесяц - Дата - месяц по котором установлен отбор в обработке.
//
Функция ЗагрузитьДеревоНачислений(СтруктураПараметров) Экспорт

	Если ПроверитьПараметрыЗагрузкиДереваНачислений(СтруктураПараметров) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос 			= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст 	= ТекстЗапросаДеревоПартнеровВсеСотрудники(СтруктураПараметров.Партнер);
	
	Запрос.УстановитьПараметр("ГруппаДоступаПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.ГруппаДоступаПартнерЗП());
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СтруктураПараметров.СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("СвойствоОрганизацияПодразделения", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоОрганизацияПодразделения());
	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
	
	Запрос.Выполнить();
	Запрос.Текст = "Выбрать * из Партнеры";
	
	Запрос.Текст	= ТекстЗапросаДеревоНачислений(СтруктураПараметров.Партнер, СтруктураПараметров.Подразделение);
		
	Запрос.УстановитьПараметр("Подразделение", СтруктураПараметров.Подразделение);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СтруктураПараметров.СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("ОтборМесяц", СтруктураПараметров.ОтборМесяц);
	
	ДеревоНачислений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	НормализироватьДеревоНачислений(ДеревоНачислений);
	
	Возврат ДеревоНачислений;

КонецФункции // ЗагрузитьДеревоНачислений()

// Функция возвщает структуру значений для формы оброботки
//
// Возвращаемое значение:
//  Структура которая содержит свойства:
//   * СвойствоПартнерЗП 				- ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения 
//			- свойство которым осуществляется привязка пользователя к партнеру ЗП.
//   * СвойствоОрганизацияПодразделения - ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения 
//			- свойство которым осуществляется привязка подразделения к организации.
// Неопределено - если произошел сбой.
//
Функция ПолучитьЗначениеПоУмолчанию() Экспорт

	СтруктураЗначений = ПолучитьСтруктуруЗначенийПоУмолчанию();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаЗначениеПоУмолчанию();
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		ТекстСообщения = ПодготовитьТекст("Не удалось получить дополнительные свойства из справочника КТС_Константы. Обратитесь в службу поддержки.");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		Возврат ТекстСообщения;
	КонецПопытки;
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = ПодготовитьТекст("Справочник КТС_Константы не заполнен. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не ЗначениеЗаполнено(Выборка.СвойствоПартнерЗП) ИЛИ ТипЗнч(Выборка.СвойствоПартнерЗП) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Не установлено свойство справочника <СвойствоПартнерЗП>. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выборка.СвойствоОрганизацияПодразделения) ИЛИ ТипЗнч(Выборка.СвойствоОрганизацияПодразделения) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Не установлено свойство справочника <СвойствоОрганизацияПодразделения>. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выборка.СтатьяРасходов) ИЛИ ТипЗнч(Выборка.СтатьяРасходов) <> Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ТекстСообщения = ПодготовитьТекст("Не установлена статья расходов по умолчанию для начисления зарплаты. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выборка.СтатьяДоходов) ИЛИ ТипЗнч(Выборка.СтатьяДоходов) <> Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ТекстСообщения = ПодготовитьТекст("Не установлена статья доходов по умолчанию для начисления зарплаты. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Выборка.ДопРеквизитСоглашениеЗП) ИЛИ ТипЗнч(Выборка.ДопРеквизитСоглашениеЗП) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Не установлено свойство справочника <ДопРеквизитСоглашениеЗП>. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выборка.ДопРеквизитДоговорЗП) ИЛИ ТипЗнч(Выборка.ДопРеквизитДоговорЗП) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Не установлено свойство справочника <ДопРеквизитДоговорЗП>. Обратитесь в службу поддержки");
		Возврат ТекстСообщения;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗначений, Выборка);
	
	Возврат СтруктураЗначений;

КонецФункции // ПолучитьЗначениеПоУмолчанию()

Функция ПолучитьДанныеДляСтрокиНачислений(знач Партнер, знач СвойствоПартнерЗП, знач СвойствоОрганизацияПодразделения)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРезультат = Новый Структура("Подразделение, Организация");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСтрокаДляНачисления();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("СвойствоОрганизацияПодразделения", СвойствоОрганизацияПодразделения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	
	Возврат СтруктураРезультат;

КонецФункции // ПолучитьДанныеДляСтрокиНачислений()

Функция ТекстЗапросаСтрокаДляНачисления()

	ТекстЗапроса = "
				   |ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	Пользователи.ТекущееПодразделение КАК Подразделение,
	               |	ВЫРАЗИТЬ(&СвойствоПартнерЗП КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоПартнерЗП,
	               |	ВЫРАЗИТЬ(&СвойствоОрганизацияПодразделения КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоОрганизацияПодразделения
	               |ПОМЕСТИТЬ ТаблицаПользователей
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	//Пользователи.Недействителен = ЛОЖЬ
	               |	//И Пользователи.ПометкаУдаления = ЛОЖЬ
	               |	Пользователи.ТекущееПодразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПользователей.Подразделение КАК Подразделение,
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ДСОрганизации.Значение КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
				   |ИЗ
	               |	ТаблицаПользователей КАК ТаблицаПользователей
				   |
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСПользователи
	               |		ПО (ТаблицаПользователей.Пользователь = (ВЫРАЗИТЬ(ДСПользователи.Объект КАК Справочник.Пользователи)))
	               |			И ТаблицаПользователей.СвойствоПартнерЗП = ДСПользователи.Свойство
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСОрганизации
				   |		ПО (ТаблицаПользователей.Подразделение 						= (ВЫРАЗИТЬ(ДСОрганизации.Объект КАК Справочник.СтруктураПредприятия)))
				   |			И ТаблицаПользователей.СвойствоОрганизацияПодразделения = ДСОрганизации.Свойство
				   |
				   |ГДЕ
				   |	ЕСТЬNULL(ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры), ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = &Партнер";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСтрокаДляНачисления()

// Процедура заполняет значения по умолчанию, если организация или аналитика не заполненны.
//
// Параметры:
//  ТаблицаНачислений - Таблица - см. ТаблицаНачисленийДляЗаписи()
//  СвойствоПартнерЗП - СправочникСсылка.СвойстваОбъектов - свойство для партнеров ЗП.
//  СвойствоОрганизацияПодразделения - СправочникСсылка.СвойстваОбъектов - свойство организации подарзделения. .
//
Процедура ЗаполнитьАнилитикуИОрганизациюПоУмолчанию(ТаблицаНачислений, СвойствоПартнерЗП, СвойствоОрганизацияПодразделения)
	Перем КэшДанныхПоУмолчанию;
	
	КэшДанныхПоУмолчанию = Новый Соответствие;
	
	Для каждого СтрокаНачисления из ТаблицаНачислений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаНачисления.Организация) ИЛИ НЕ ЗначениеЗаполнено(СтрокаНачисления.Аналитика) Тогда
			//Используем кэш для партнера
			Если КэшДанныхПоУмолчанию.Получить(СтрокаНачисления.Партнер) = Неопределено Тогда
				ДанныеПоУмолчанию = ПолучитьДанныеДляСтрокиНачислений(СтрокаНачисления.Партнер, СвойствоПартнерЗП, СвойствоОрганизацияПодразделения);
				КэшДанныхПоУмолчанию.Вставить(СтрокаНачисления.Партнер, ДанныеПоУмолчанию);
			КонецЕсли;
			
			ДанныеПоУмолчанию = КэшДанныхПоУмолчанию.Получить(СтрокаНачисления.Партнер);
			
			СтрокаНачисления.Организация = ?(ЗначениеЗаполнено(СтрокаНачисления.Организация), СтрокаНачисления.Организация, ДанныеПоУмолчанию.Организация);
			СтрокаНачисления.Аналитика = ?(ЗначениеЗаполнено(СтрокаНачисления.Аналитика), СтрокаНачисления.Аналитика, ДанныеПоУмолчанию.Подразделение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

	

// Процедура выполняет проверку и запись в регистр дерева начислений.
//
// Параметры:
//  СтруктураНачислений - Структура которая содержит свойства:
//		* ДеревоНачислений - ДанныеФормыДерево - дерево партнеров для начисления.
// 		* ОтборМесяц - Дата - дата на которую будут проводить начисления.
//
// Возвращаемое значение:
//  Истина - запись прошла успешно, Ложь - произошел збой.
//
Функция ЗаписатьНачисления(СтруктураНачислений) Экспорт

	ДеревоНачислений   = СтруктураНачислений.ДеревоНачислений;
	ОтборМесяц		   = СтруктураНачислений.ОтборМесяц;
	
	ТаблицаНачислений  = ТаблицаНачисленийДляЗаписи();
	ОшибкиНайденны	   = Ложь;
	
	НачатьТранзакцию();
	
	СформироватьТаблицуНачисленийДляЗаписи(ДеревоНачислений, ТаблицаНачислений, ОшибкиНайденны);
	ЗаполнитьАнилитикуИОрганизациюПоУмолчанию(ТаблицаНачислений, СтруктураНачислений.СвойствоПартнерЗП, СтруктураНачислений.СвойствоОрганизацияПодразделения);
		
	Если ОшибкиНайденны Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗаписатьВыполненныеНачисления(ТаблицаНачислений, ОтборМесяц) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

// Выполняет расчет сумм партнеров для начисления по формулам.
//
// Параметры:
//	СтруктураПараметров 	- структура которая содержит свойства
//  	* ДеревоНачислений 	- ДанныеФормыДерево							  - основаная форма обработки.
//      * ОтборМесяц 		- Дата										  - дата на которую нужно проводить начисления.//
// Возвращаемое значение:
//  Истина - если расчет прошел испешно, Ложь - произошел сбой.
//
Функция РассчитатьПартнеров(СтруктураПараметров) Экспорт

	ДеревоНачислений   = СтруктураПараметров.ДеревоНачислений;
	ОтборМесяц		   = СтруктураПараметров.ОтборМесяц;
	ОшибкиНайденны	   = Ложь;
		
	НачатьТранзакцию();
	
	ТаблицаПартнеров = СформироватьТаблицуПартнеров(ДеревоНачислений);
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ВыполненныеНачисления");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Период", ОтборМесяц);
	ЭлементБлокировки.ИсточникДанных = ТаблицаПартнеров;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партнер", "Партнер");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы при выполнении расчета партнеров");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	ЗаписатьРасчетПартнеров(СтруктураПараметров, ТаблицаПартнеров, ОшибкиНайденны);
	
	Если ОшибкиНайденны Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

// Выполняет насчисление финансовых документов на по партнеру, при необходимости
// создает соглашения и договора для партнера.
//
// Параметры:
//  СтруктураНачислений - Структура которая содержит свойства:
//		* ДеревоНачислений - ДанныеФормыДерево - дерево партнеров для начисления.
// 		* ОтборМесяц - Дата - дата на которую будут проводить начисления.
//      * ДопРеквизитСоглашениеЗП - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - дополнительное свойство соглашения для расчета ЗП
//		* ДопРеквизитДоговорЗП - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - дополнительные свойство договора для расчета ЗП
//
// Возвращаемое значение:
//  Истина - запись прошла успешно, Ложь - произошел збой.
//
Функция ВыполнитьНачисления(СтруктураНачислений) Экспорт
	
	ДеревоНачислений  		= СтруктураНачислений.ДеревоНачислений;	
	ОтборМесяц		  		= СтруктураНачислений.ОтборМесяц;
	ДопРеквизитСоглашениеЗП = СтруктураНачислений.ДопРеквизитСоглашениеЗП;
	ДопРеквизитДоговорЗП	= СтруктураНачислений.ДопРеквизитДоговорЗП;
	
	ТаблицаПартнеров  = СформироватьТаблицуПартнеров(ДеревоНачислений);
	ТаблицаНачислений = ПолучитьТаблицуНачислений(ТаблицаПартнеров, ОтборМесяц);
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ВыполненныеНачисления");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Период", ОтборМесяц);
	ЭлементБлокировки.ИсточникДанных = ТаблицаПартнеров;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партнер", "Партнер");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы при выполнении расчета партнеров");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	Для каждого Начисление Из ТаблицаНачислений Цикл
		Если Не ПроверитьСтрокуСтрокуНачисления(Начисление) Тогда
			Продолжить;
		КонецЕсли;
		Если Начисление.СуммаРасчитано > 0 Тогда
			Если ЗначениеЗаполнено(Начисление.ДокументНачисления) Тогда
				Результат = ПерепровестиПоступлениеУслугИПрочихАктивов(Начисление);
				Если Результат = Ложь Тогда
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецЕсли;
				ЗаписатьНачислениеВРегистр(Начисление, Начисление.ДокументНачисления , ОтборМесяц);
			Иначе
				Результат = СоздатьПоступлениеУслугПрочихАктивов(Начисление, ДопРеквизитСоглашениеЗП, ДопРеквизитДоговорЗП, ОтборМесяц);
				Если Результат = Неопределено Тогда
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецЕсли;
				ЗаписатьНачислениеВРегистр(Начисление, Результат, ОтборМесяц);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Начисление.ДокументНачисления) Тогда
				Результат = ПерепровестиРеализациюУслугПрочихАктивов(Начисление);
				Если Результат = Ложь Тогда
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецЕсли;
				ЗаписатьНачислениеВРегистр(Начисление, Начисление.ДокументНачисления , ОтборМесяц);
			Иначе
				Результат = СоздатьРеализациюУслугПрочихАктивов(Начисление, ДопРеквизитСоглашениеЗП, ДопРеквизитДоговорЗП, ОтборМесяц);
				Если Результат = Неопределено Тогда
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецЕсли;
				ЗаписатьНачислениеВРегистр(Начисление, Результат, ОтборМесяц);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает дерево начислений для следующей загрузки на форме
//
// Параметры:
//  Структура которая содержит свойства:
//   * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение по котором формировать отбор.
//   * Партнер - СправочникСсылка.Партнеры - партне по котором формировать отбор.
//   * СвойствоПартнерЗП - ПланвидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство которым партнер связывается с пользователем
//   * ОтборМесяц - Дата - месяц по котором установлен отбор в обработке.
//
// Возвращаемое значение:
//  Истина в случае успеха, Ложь чтото пошло не так.
Функция ПеренестиНачисления(СтруктураПараметров) Экспорт

	Если ПроверитьПараметрыЗагрузкиДереваНачислений(СтруктураПараметров) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.Партнер.Пустая() Тогда
		СтруктураПараметров.Партнер 
			= ПолучитьМассивПартнеровПоПодразделению(СтруктураПараметров.Подразделение);
	КонецЕсли;

	Запрос 			= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст 	= ТекстЗапросаДеревоПартнеровВсеСотрудники(СтруктураПараметров.Партнер);
	
	Запрос.УстановитьПараметр("ГруппаДоступаПартнерЗП", ктс_ПредопределенныеЗначенияПовтИсп.ГруппаДоступаПартнерЗП());
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СтруктураПараметров.СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("СвойствоОрганизацияПодразделения", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоОрганизацияПодразделения());
	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
	
	Запрос.Выполнить();
	Запрос.Текст = "Выбрать * из Партнеры";
	
	Запрос.Текст    = ТексЗапросаПеренестиНачисления(СтруктураПараметров.Партнер);
	
	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
	Запрос.УстановитьПараметр("Подразделение", СтруктураПараметров.Подразделение);
	Запрос.УстановитьПараметр("СвойствоПартнерЗП", СтруктураПараметров.СвойствоПартнерЗП);
	Запрос.УстановитьПараметр("ОтборМесяц", СтруктураПараметров.ОтборМесяц);	
	Запрос.УстановитьПараметр("ОтборПрошлыйМесяц", ДобавитьМесяц(СтруктураПараметров.ОтборМесяц, -1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ВыполненныеНачисления");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Период", "Период");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партнер", "Партнер");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидРасчета", "ВидРасчета");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы для выполнения переноса расчетов партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Партнер.Установить(Выборка.Партнер);
		НаборЗаписей.Отбор.ВидРасчета.Установить(Выборка.ВидРасчета);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Если Выборка.РасчетУстановленВручную = Истина Тогда
			Запись.СуммаРасчитано = 0;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = ПодготовитьТекст("Не удалось выполнить запись начисления перенесеного из прошлого периода.");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

// Функция удаляет строки начислений.
//
// Параметры:
//  ТаблицаНачислений - ТаблицаЗначений - таблица которая сожержит следующие колонки:
//   * Период - Дата - период который нужно удалить.
//   * Партнер - СправочникСсылка.Партнеры - партнер для которого нужно удалить начисление.
//   * ВидРасчета - СправочникСсылка.ЗП_ВидыРасчетов - вид расчета который нужно удалить.
//
// Возвращаемое значение:
//  Истина - удаление пошло успешно, Ложь - поизошел сбой.
//
Функция УдалитьСтрокиНачислений(ТаблицаНачислений) Экспорт

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаУдалениеНачислений();
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	РезультатыЗапроса 			= Запрос.ВыполнитьПакет();
	РезультатыСрокиКУдалению	= РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1];
	ВсеСтрокиПоПартнеру			= РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	
	Если РезультатыСрокиКУдалению.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ВыполненныеНачисления");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатыСрокиКУдалению;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Период", "Период");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партнер", "Партнер");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидРасчета", "ВидРасчета");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы для удаления начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	Выборка = РезультатыСрокиКУдалению.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Партнер", Выборка.Партнер);
		НайденныеСтроки = ВсеСтрокиПоПартнеру.НайтиСтроки(СтруктураПоиска);
		
		НашлиРасчетВФормуле = Ложь;
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Найти(НайденнаяСтрока.Формула, Выборка.ИдентификаторСлужебный) > 0 Тогда
				ТекстСообщения = ПодготовитьТекст("Не удалось выполнить удаление начисления. Начисление %1 используется в формуле начислении %2 партнер %3.");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.ИдентификаторСлужебный, Выборка.ВидРасчета, Выборка.Партнер);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				НашлиРасчетВФормуле = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НашлиРасчетВФормуле Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Партнер.Установить(Выборка.Партнер);
		НаборЗаписей.Отбор.ВидРасчета.Установить(Выборка.ВидРасчета);
		Попытка
			НаборЗаписей.Записать();		
		Исключение
		    ОтменитьТранзакцию();
			ТекстСообщения = ПодготовитьТекст("Не удалось выполнить удаление начисления.");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции // УдалитьСтрокиНачислений()
 
Функция ОтменитьРучнойРасчет(ВидРасчета, Партнер, ДатаОтбора) Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ВыполненныеНачисления");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Период", ДатаОтбора);
	ЭлементБлокировки.УстановитьЗначение("Партнер", Партнер);
	ЭлементБлокировки.УстановитьЗначение("ВидРасчета", ВидРасчета);
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы для удаления начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаОтбора);
	НаборЗаписей.Отбор.Партнер.Установить(Партнер);
	НаборЗаписей.Отбор.ВидРасчета.Установить(ВидРасчета);
	
	НаборЗаписей.Прочитать();
		
	Если НаборЗаписей.Количество() <> 1 Тогда
		ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось прочитать данные для отмены ручного расчета.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Запись = НаборЗаписей[0];
	
	Запись.РасчетУстановленВручную = Ложь;
	
	Попытка
		НаборЗаписей.Записать();    		
	Исключение
	    ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать данные для отмены ручного расчета в регистр.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьПроизвольныеКонстанты(ТаблицаКонстант) Экспорт

	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаПроизвольныеКонстанты();
	
	Запрос.УстановитьПараметр("ТаблицаКонстант", ТаблицаКонстант);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ПроизвольныеКонстанты");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Константа", "КонстантаСсылка");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы для записи констант.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;

	Выборка 			= РезультатЗапроса.Выбрать();
	ТекПользователь     = ПараметрыСеанса.ТекущийПользователь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.КонстантаСсылка) Тогда
			
			НаборЗаписей = РегистрыСведений.ЗП_ПроизвольныеКонстанты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Константа.Установить(Выборка.КонстантаСсылка);
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Константа 		= Выборка.КонстантаСсылка;
			Запись.Значение  		= Выборка.Значение;
			Запись.Ответственный    = ТекПользователь;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстОшибки = ПодготовитьТекст("Не удалось записать значения произвольных констант.");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат Ложь;		
			КонецПопытки;

		Иначе
			Константа		 = СокрЛП(Выборка.Константа);
			ПараметрыОбъекта = Новый Структура("Наименование, ИдентификаторСлужебный, Идентификатор", 
															Константа, 
															"["+Константа+"]",
															НормализироватьИндентифкаторРасчета(СтрЗаменить(Константа, " ", "")));
			Если ПроверитьНаличиеСлужебногоИдентификатора(ПараметрыОбъекта.ИдентификаторСлужебный) Тогда
				ТекстОшибки = ПодготовитьТекст("Не удалось записать значения произвольных констант. Идентификатор константы уже найден в базе");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОтменитьТранзакцию();
				Возврат Ложь;	
			КонецЕсли;
			
			СпрОбъект = Справочники.ЗП_ПоказателиРасчетаЗарплаты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СпрОбъект, ПараметрыОбъекта);
			
			Попытка
				СпрОбъект.Записать();
			Исключение
			    ТекстОшибки = ПодготовитьТекст("Не удалось создать новый показатель расчета.");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.ЗП_ПроизвольныеКонстанты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Константа.Установить(СпрОбъект.Ссылка);
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Константа 		= СпрОбъект.Ссылка;
			Запись.Значение  		= Выборка.Значение;
			Запись.Ответственный    = ТекПользователь;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстОшибки = ПодготовитьТекст("Не удалось записать значение новой произвольной константы регистр.");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат Ложь;		
			КонецПопытки;
			
		КонецЕсли;
		
 	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции // ЗаписатьПроизвольныеКонстанты()

Функция ЗагрузитьТаблицуПроизвольныхКонстант() Экспорт 

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаЗагрузкиПроизвольныхКонстант();
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ЗагрузитьТаблицуПроизвольныхКонстант()
 
Функция УдалитьПроизвольнуюКонстанту(Константа) Экспорт

	КонстантаСсылка = Справочники.ЗП_ПоказателиРасчетаЗарплаты.НайтиПоНаименованию(Константа);
	
	Если ПустаяСтрока(КонстантаСсылка.ВерсияДанных) Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти константу в базе.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;  	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗП_ПроизвольныеКонстанты");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Константа", КонстантаСсылка);
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось заблокировать ресурсы для удаления константы.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.ЗП_ПроизвольныеКонстанты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Константа.Установить(КонстантаСсылка);

	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось удалить константу.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции // УдалитьПроизвольнуюКонстанту()

Функция ВыгрузитьВзаиморасчетыНаСайт(СтруктураПараметров) Экспорт
	
	ДеревоНачислений   = СтруктураПараметров.ДеревоНачислений;
	ОтборМесяц		   = СтруктураПараметров.ОтборМесяц;
	ОшибкиНайденны	   = Ложь;
	
	ТаблицаПартнеров = СформироватьТаблицуПартнеров(ДеревоНачислений);
	СвойствоГарантия = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія");
	
	Для Каждого СтрокаПартнер Из ТаблицаПартнеров Цикл
		
		Код = Формат(Число(СтрокаПартнер.Партнер.Код), "ЧГ = 0");
		ПутьККатологу = "C:\1C_LOGS\order-b2b.com\www\users\" + Код;
		
		КаталогПартнера = Новый Файл(ПутьККатологу);
		Если НЕ КаталогПартнера.Существует() Тогда
			СоздатьКаталог(ПутьККатологу);	
		КонецЕсли;
		
		МесячныеВЗМ = СформироватьМесячныеВзаиморасчеты(НачалоМесяца(ОтборМесяц), КонецМесяца(ОтборМесяц), СтрокаПартнер.Партнер, СвойствоГарантия);
		Записать_XLS_HTML4(МесячныеВЗМ, ПутьККатологу + "\" + МесяцПрописью(КонецМесяца(ОтборМесяц)) + "_new_" + Формат(Число(Год(КонецМесяца(ОтборМесяц))), "ЧГ = 0"));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область КонструкторФормул

#Область ДеревоОператоров
Функция ПолучитьПустоеДеревоОператоров()
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Идентификатор");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	
	Возврат Дерево;
	
КонецФункции

Функция ДобавитьГруппуОператоров(Дерево, Наименование)
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Идентификатор 	= Наименование;
	НоваяГруппа.ЭтоГруппа 		= Истина;
	
	Возврат НоваяГруппа;
	
КонецФункции

Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0)
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Идентификатор 	= Наименование;
	НоваяСтрока.Оператор 		= ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг 			= Сдвиг;
	НоваяСтрока.ЭтоГруппа 		= Ложь;
	
	Возврат НоваяСтрока;
	
КонецФункции
	
#КонецОбласти

#Область ДеревоОперандов
Функция ПолучитьДеревоОперандов()
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	Дерево.Колонки.Добавить("Ссылка", 		 Новый ОписаниеТипов("СправочникСсылка.ЗП_ПоказателиРасчетаЗарплаты"));
	Дерево.Колонки.Добавить("ЭтоГруппа", 	 Новый ОписаниеТипов("Булево"));
	Возврат Дерево;
КонецФункции // ПолучитьДеревоОперандов()

Функция ДобавитьЭлементВДерево(Дерево, Параметры)
	НоваяНода = Дерево.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяНода, Параметры);
	Возврат НоваяНода;
КонецФункции

Процедура ЗагрузитьПоказателиРасчетаЗарплатыВДерево(Дерево)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Наименование 	КАК Наименование,
	                      |	Ссылка  		КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ЗП_ПоказателиРасчетаЗарплаты
	                      |ГДЕ
	                      |	НеИспользуется = ЛОЖЬ
						  |	И ПометкаУдаления = ЛОЖЬ
						  | И Предопределенный = ИСТИНА
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ЗП_ПоказателиРасчетаЗарплаты.ЗП_КурсВалют Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.Ссылка, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(Дерево);
						  
КонецПроцедуры

Процедура ЗагрузитьПроизвольныеКонстантыВДерево(Дерево)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Константа 				КАК Ссылка,
	                      |	Константа.Наименование 	КАК Наименование
	                      |ИЗ
	                      |	РегистрСведений.ЗП_ПроизвольныеКонстанты");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ЗП_ПоказателиРасчетаЗарплаты.ЗП_КурсВалют Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", Выборка.Наименование, Выборка.Ссылка, Ложь));
	КонецЦикла;
	
	ПроверитьДеревоНаКлоны(Дерево);
						  
КонецПроцедуры


Процедура ПроверитьДеревоНаКлоны(Дерево)

	Для каждого СтрокаДерева Из Дерево.Строки Цикл
	    РезультатПоиска = Дерево.Строки.НайтиСтроки(Новый Структура("Идентификатор", СтрокаДерева.Идентификатор));
		Если РезультатПоиска.Количество() > 1 Тогда
			Для каждого СтрокаМассива Из РезультатПоиска Цикл
		    	СтрокаМассива.Идентификатор = СтрокаМассива.Идентификатор + " (" + СтрокаМассива.Ссылка.УникальныйИдентификатор() + ")";					
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Процедура ЗагрузитьНВВидРасчетаВДерево(Дерево,СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидРасчета 							КАК ВидРасчета,
						  | ВидРасчета.ИдентификаторСлужебный   КАК Идентификатор
	                      |ИЗ
	                      |	РегистрСведений.ЗП_ВыполненныеНачисления
	                      |ГДЕ
	                      |	Партнер = &Партнер
						  |	И ВидРасчета <> &ВидРасчета
	                      |	И Период >= &НачалоМесеца
	                      |	И Период <= &КонецМесеца
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВидРасчета");
	Запрос.УстановитьПараметр("Партнер",СтруктураПараметров.Партнер);
	Запрос.УстановитьПараметр("НачалоМесеца",НачалоМесяца(СтруктураПараметров.Период));
	Запрос.УстановитьПараметр("КонецМесеца",КонецМесяца(СтруктураПараметров.Период));
	Запрос.УстановитьПараметр("ВидРасчета",СтруктураПараметров.ВидРасчета);
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", СтрЗаменить(СтрЗаменить(Выборка.Идентификатор, "[", ""), "]", "") ,Выборка.ВидРасчета, Ложь));
	КонецЦикла;  					  
КонецПроцедуры

Процедура ЗагрузитьКурсыВалютВДерево(Дерево)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Наименование КАК Наименование,
						  |	Ссылка		 КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Валюты 
	                      |ГДЕ
	                      |	НЕ ПометкаУдаления");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		ДобавитьЭлементВДерево(Дерево, Новый Структура("Идентификатор, Ссылка, ЭтоГруппа", "ЗП_Курсы_Валют_" + Выборка.Наименование, Выборка.Ссылка, Ложь));
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

Функция ПолучитьТекстЗапросаЗаписиРегистра()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Формула 					КАК Формула,
				   |    РасшифровкаФормулы			КАК РасшифровкаФормулы
	               |ИЗ
	               |	РегистрСведений.ЗП_ВыполненныеНачисления.СрезПоследних(&Период
	               |														,
	               |														Партнер = &Партнер
	               |														И ВидРасчета = &ВидРасчета)
				   |";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаЗаписиРегистра()

Функция ТекстЗапросаВидыРасчетовПоПартнеру()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидРасчета.Наименование КАК НаименованиеВидаРасчета,
	               |	ВидРасчета 				КАК ВидРасчета
	               |ИЗ
	               |	РегистрСведений.ЗП_ВыполненныеНачисления
	               |ГДЕ
	               |	Период 			= &Период
	               |	И Партнер 		= &Партнер
				   |	И ВидРасчета	<> &ТекущийРасчет";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаВидыНачисленийПоПартнеру()

Функция ТекстЗапросаИспользованиеВидаРасчета()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВидРасчета.Наименование	КАК НаименованиеРасчета,
				   |	Партнер.Наименование	КАк НаименованиеПартнера,
	               |	Формула					КАК Формула
	               |ИЗ
	               |	РегистрСведений.ЗП_ВыполненныеНачисления
	               |ГДЕ
	               |	Период = &Период
	               |	И Партнер = &Партнер
	               |	И ВидРасчета В(&МассивРасчетов)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаИспользованиеВидаРасчета()

Функция ПолучитьХранилищеТиповШаблонов(ФормаОбработки)

	Соответствие = Новый Соответствие;
	
	Операнды = ФормаОбработки["Операнды"];
	Формула  = ФормаОбработки["Формула"];
	
	Для каждого ГруппаДерева Из Операнды.ПолучитьЭлементы() Цикл
		Для каждого ЭлементДерева Из ГруппаДерева.ПолучитьЭлементы() Цикл
			Если Найти(Формула, ЭлементДерева.Идентификатор) Тогда 
				Соответствие[ЭлементДерева.Идентификатор] = ЭлементДерева.Ссылка;
			КонецЕсли;
		КонецЦикла; 	
	КонецЦикла;
	
	Возврат Соответствие;

КонецФункции // ПолучитьХранилищеТиповШаблонов()

Функция СоответствиеВидовРасчетовПоПартнеру(Партнер, Период, ТекущийРасчет)

	СоответствиеВидовРасчетов = Новый Соответствие;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаВидыРасчетовПоПартнеру();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ТекущийРасчет", ТекущийРасчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеВидовРасчетов.Вставить(Выборка.НаименованиеВидаРасчета, Выборка.ВидРасчета);
	КонецЦикла;
	
	Возврат СоответствиеВидовРасчетов;

КонецФункции // СоответствиеВидовНачисленийПоПартнеру()
 
Функция МассивИспользуемыхРасчетовВТекущейФормуле(СоответствиеВидовРасчетов, Формула)

	МассивРасчетов = Новый Массив;
	
	Для каждого Расчет Из СоответствиеВидовРасчетов Цикл
		Если Найти(Формула, Расчет.Ключ) <> 0 Тогда
			МассивРасчетов.Добавить(Расчет.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРасчетов;

КонецФункции // МассивИспользуемыхНачисленийУТекущейФормуле()

Функция ПроверитьИспользованиеВидаРасчетаВДругихФормулах(Партнер, Период, МассивИспользуемыхРасчетов, НаименованиеТекущегоРасчета)

	РезультатПроверки = Ложь;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаИспользованиеВидаРасчета();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("МассивРасчетов", МассивИспользуемыхРасчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Найти(Выборка.Формула, НаименованиеТекущегоРасчета) <> 0 Тогда
			ТекстСообщения = ПодготовитьТекст("У виде расчета %1 для партнера %2 используется вид расчета %3.");
			ТекстСообщения = ТекстСообщения + ПодготовитьТекст("Вы не сможете выполнить сохранение формулы, так как это приведет зацикливанию работы программы.");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
																						Выборка.НаименованиеРасчета, 
																						Выборка.НаименованиеПартнера,
																						НаименованиеТекущегоРасчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			РезультатПроверки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверитьИспользованиеВидаРасчетаВДругихФормулах()
 

#КонецОбласти


#Область ОсновнаяФорма

#Область ТехическиеМелочи

Процедура УстановитьОрганизациюДляСтрокиДереваПартнеров(СтрокиДерева, СоответствиеОрганизаций)
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Организация = СоответствиеОрганизаций.Получить(СтрокаДерева.Подразделение);
		Если Организация <> Неопределено И Не ЗначениеЗаполнено(СтрокаДерева.Партнер) Тогда
			СтрокаДерева.Организация = Организация;
		КонецЕсли;
		УстановитьОрганизациюДляСтрокиДереваПартнеров(СтрокаДерева.Строки, СоответствиеОрганизаций);
	КонецЦикла; 
КонецПроцедуры

Функция ПолучитьСоответвствиеПодразделениеОрганизация(ТаблицаОрганизаций)
	Соответствие = Новый Соответствие;
	Для каждого СтрокаТаблицы Из ТаблицаОрганизаций Цикл Соответствие.Вставить(СтрокаТаблицы.Подразделение, СтрокаТаблицы.Организация); КонецЦикла;
	Возврат Соответствие;
КонецФункции // ПолучитьСоответвствиеПодразделениеОрганизация()

Процедура УстановитьЗначениеПериодовДеревоПартнеров(Запрос, знач КоличествоМесяцев, знач ОтборМесяц)
	ШаблонИмениПараметра = "Месяц%1";
	Для Индекс = 1 ПО КоличествоМесяцев Цикл
		ИмяПараметра 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПараметра, Индекс);
		ЗначениеПараметра   = НачалоМесяца(ДобавитьМесяц(ОтборМесяц, -Индекс + 1));
		Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
КонецПроцедуры

Процедура НормализироватьДеревоНачислений(ДеревоНачислений)

	СтрокиДерева = ДеревоНачислений.Строки;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Уровень = 1 И ПустаяСтрока(СтрокаДерева.НаименованиеРасчета) Тогда
			СтрокиДерева.Удалить(СтрокаДерева);
		Иначе
			НормализироватьДеревоНачислений(СтрокаДерева);
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСтруктуруЗначенийПоУмолчанию()

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("СвойствоПартнерЗП");
	СтруктураЗначений.Вставить("СвойствоОрганизацияПодразделения");
	СтруктураЗначений.Вставить("СтатьяРасходов");
	СтруктураЗначений.Вставить("СтатьяДоходов");
	СтруктураЗначений.Вставить("ДопРеквизитДоговорЗП");
	СтруктураЗначений.Вставить("ДопРеквизитСоглашениеЗП");
	
	Возврат СтруктураЗначений;

КонецФункции // ПолучитьСтруктуруЗначенийПоУмолчанию()

Функция ПодготовитьТекст(знач ТекстДляПодготовки)
	Шаблон 		= "ru='%1'";
	Результат   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекстДляПодготовки);
	Возврат НСтр(Результат, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции // ПодготовитьТекст()

Функция ТаблицаНачисленийДляЗаписи()

	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Партнер", 					Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Таблица.Колонки.Добавить("ПереноситьВСледующийПериод", 	Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("НаименованиеРасчета", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Организация", 				Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Формула", 					Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РасшифровкаФормулы", 			Новый ОписаниеТипов("ХранилищеЗначения"));
	Таблица.Колонки.Добавить("Рассчитано", 					Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("Насчитано", 					Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("НеНачислять", 				Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДокументНачисления", 			Новый ОписаниеТипов("ДокументСсылка.ПоступлениеУслугПрочихАктивов, ДокументСсылка.РеализацияУслугПрочихАктивов"));
	Таблица.Колонки.Добавить("ВидРасчета", 					Новый ОписаниеТипов("СправочникСсылка.ЗП_ВидыРасчетов"));
	Таблица.Колонки.Добавить("Статья", 						Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиДоходов"));
	Таблица.Колонки.Добавить("Аналитика", 					Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Таблица.Колонки.Добавить("РасчетУстановленВручную", 	Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДатаДобавления", 				Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Возврат Таблица;

КонецФункции // ТаблицаНачисленийДляЗаписи()

Функция ПроверитьНаличиеСлужебногоИдентификатора(ИдентификаторСлужебный)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаНаличиеСлужебногоИдентификатора();
	
	Запрос.УстановитьПараметр("ИдентификаторСлужебный", ИдентификаторСлужебный);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции // ПроверитьНаличиеСлужебногоИдентификатора()
 

#КонецОбласти  

#Область ТекстыЗапросов

Функция ТекстЗапросаДеревоПартнеровВсеСотрудники(Партнер = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	Пользователи.ТекущееПодразделение КАК Подразделение,
	               |	ВЫРАЗИТЬ(&СвойствоПартнерЗП КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоПартнерЗП,
	               |	ВЫРАЗИТЬ(&СвойствоОрганизацияПодразделения КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоОрганизацияПодразделения
	               |ПОМЕСТИТЬ ТаблицаПользователей
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Недействителен = ЛОЖЬ
	               |	И Пользователи.ПометкаУдаления = ЛОЖЬ
	               |	И Пользователи.ТекущееПодразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПользователей.Подразделение КАК Подразделение,
	               |	ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры) КАК Партнер
	               |ПОМЕСТИТЬ ВТПартнеры
	               |ИЗ
	               |	ТаблицаПользователей КАК ТаблицаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСПользователи
	               |		ПО (ТаблицаПользователей.Пользователь = (ВЫРАЗИТЬ(ДСПользователи.Объект КАК Справочник.Пользователи)))
	               |			И ТаблицаПользователей.СвойствоПартнерЗП = ДСПользователи.Свойство
	               |ГДЕ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры), ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				   |  %1 // Сюда подставляем отбор по партнеру (если он есть)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПользователей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	ЗНАЧЕНИЕ(Справочник.структурапредприятия.ПустаяСсылка) КАК Подразделение,
	               |	ВЫРАЗИТЬ(&СвойствоПартнерЗП КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоПартнерЗП,
	               |	ВЫРАЗИТЬ(&СвойствоОрганизацияПодразделения КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоОрганизацияПодразделения
	               |ПОМЕСТИТЬ ТаблицаПользователей
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	(Пользователи.Недействителен = ИСТИНА
	               |			ИЛИ Пользователи.ПометкаУдаления = ИСТИНА
	               |			ИЛИ Пользователи.ТекущееПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПользователей.Подразделение КАК Подразделение,
	               |	ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры) КАК Партнер
	               |ПОМЕСТИТЬ ВТПартнерыДоп
	               |ИЗ
	               |	ТаблицаПользователей КАК ТаблицаПользователей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСПользователи
	               |		ПО (ТаблицаПользователей.Пользователь = (ВЫРАЗИТЬ(ДСПользователи.Объект КАК Справочник.Пользователи)))
	               |			И ТаблицаПользователей.СвойствоПартнерЗП = ДСПользователи.Свойство
	               |ГДЕ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры), ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И НЕ ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры) В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВТПартнеры.Партнер
	               |				ИЗ
	               |					ВТПартнеры)
				   | %1 // Сюда подставляем отбор по партнеру (если он есть)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПользователей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Партнеры.Ссылка КАК Партнер,
	               |	ЗНАЧЕНИЕ(Справочник.структурапредприятия.ПустаяСсылка) КАК Подразделение
	               |ПОМЕСТИТЬ ВТПартнерыНеПользователи
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.ГруппаДоступа = &ГруппаДоступаПартнерЗП
	               |	И НЕ Партнеры.Ссылка В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВТПартнерыДоп.Партнер
	               |				ИЗ
	               |					ВТПартнерыДоп)
	               |	И НЕ Партнеры.Ссылка В
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВТПартнеры.Партнер
	               |				ИЗ
	               |					ВТПартнеры)
				   | %2 // Сюда подставляем отбор по партнеру (если он есть)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПартнеры.Подразделение,
	               |	ВТПартнеры.Партнер
	               |ПОМЕСТИТЬ Партнеры
	               |ИЗ
	               |	ВТПартнеры КАК ВТПартнеры
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТПартнерыДоп.Подразделение,
	               |	ВТПартнерыДоп.Партнер
	               |ИЗ
	               |	ВТПартнерыДоп КАК ВТПартнерыДоп
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТПартнерыНеПользователи.Подразделение,
	               |	ВТПартнерыНеПользователи.Партнер
	               |ИЗ
	               |	ВТПартнерыНеПользователи КАК ВТПартнерыНеПользователи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТПартнеры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТПартнерыДоп
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТПартнерыНеПользователи";
				   
				   
	ТекстОтбора = "";
	ТекстОтбораПрочие = "";
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ТекстОтбора  = " И ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры) В (&Партнер)";
		ТекстОтбораПрочие = "И Партнеры.Ссылка В (&Партнер)";
	КонецЕсли;
			
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстОтбора, ТекстОтбораПрочие);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДеревоПартнеров(знач КоличествоМесяцев)

	ТекстЗапроса = "
				   |
				   |%1 // Сюда пишем временные таблицы из начислениями партнеров
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   | 	ВТПартнеры.Подразделение КАК Подразделение,
	               |	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	               |	ВЫРАЗИТЬ(ВТПартнеры.Партнер КАК Справочник.Партнеры) КАК Партнер,
				   | 	Выбор когда ВТПартнеры.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяССылка) Тогда 2 Иначе 1 Конец КАК ПорядокСортировки, 
	               |	%2 // сюда - дополнительные поля для вывода на форму
	               |	"""" КАК Пустышка
	               |ИЗ
	               |	Партнеры КАК ВТПартнеры
	               |
				   |%3 // сюда пишем соединения по таблицам начисления
	               |ГДЕ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ВТПартнеры.Партнер КАК Справочник.Партнеры), ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ВТПартнеры.Подразделение.Наименование ВОЗР,
				   |	ВТПартнеры.Партнер.Наименование ВОЗР
	               |ИТОГИ %4 ПО
	               |	Подразделение ИЕРАРХИЯ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК Справочник.Организации) КАК Организация
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект ССЫЛКА Справочник.СтруктураПредприятия
	               |	И ДополнительныеСведения.Свойство = &СвойствоОрганизацияПодразделения";
				   
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
						ТекстЗапросаДеревоПартнеровТаблицыНачислений(КоличествоМесяцев),
						ТекстЗапросаДеревоПартнеровПоляНачислений(КоличествоМесяцев),
						ТекстЗапросаДеревоПартнеровДополнительныеСоединения(КоличествоМесяцев),
						ТекстЗпросаДеревоПартнеровИтогиНачисления(КоличествоМесяцев));
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДеревоПартнеров()

Функция ТекстЗапросаДеревоПартнеровТаблицыНачислений(знач КоличествоМесяцев)

	ТекстЗапроса = "";
	ТекстШаблон	 = "
				|
				|ВЫБРАТЬ
				|	Партнер     			КАК Партнер,
				|	СУММА(СуммаНасчитано)   КАК СуммаНачислено
				|ПОМЕСТИТЬ ТаблицаНачислений%1
				|ИЗ
				|	РегистрСведений.ЗП_ВыполненныеНачисления
				|ГДЕ
				|	Период = &Месяц%1
				|
				|СГРУППИРОВАТЬ ПО
				|	Партнер
				|;";
	
	Для Индекс = 1 ПО КоличествоМесяцев Цикл 
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблон, Индекс); 
	КонецЦикла;
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаНачислений()

Функция ТекстЗапросаДеревоПартнеровПоляНачислений(знач КоличествоМесяцев)

	ТекстЗапроса = "";
	ТекстШаблон  = "
					| ЕСТЬNULL(ТаблицаНачислений%1.СуммаНачислено, 0) КАК СуммаНачислено%1,";
	ПустойШаблон  = "
					| 0 КАК СуммаНачислено%1,";

					
	Для Индекс = 1 ПО КоличествоМесяцев Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблон, Индекс);				
	КонецЦикла;
	
	Для Индекс = КоличествоМесяцев + 1 ПО 12 Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПустойШаблон, Индекс);
	КонецЦикла;
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДеревоПартнеровПоляНачислений()
 
Функция ТекстЗапросаДеревоПартнеровДополнительныеСоединения(знач КоличествоМесяцев)

	ТекстЗапроса = "";
	ТекстШаблон	 = "
				|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНачислений%1 КАК ТаблицаНачислений%1
				|ПО ВЫРАЗИТЬ(ВТПартнеры.Партнер КАК Справочник.Партнеры) = ТаблицаНачислений%1.Партнер";
				
	Для Индекс = 1 ПО КоличествоМесяцев Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблон, Индекс);	
	КонецЦикла;				
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДеревоПартнеровДополнительныеСоединения()

Функция ТекстЗпросаДеревоПартнеровИтогиНачисления(знач КоличествоМесяцев)

	ТекстЗапроса = "";
	ТекстШаблон  = "СУММА(СуммаНачислено%1)";
	
	Для Индекс = 1 ПО КоличествоМесяцев Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблон, Индекс);
		Если Индекс <> КоличествоМесяцев Тогда
			ТекстЗапроса = ТекстЗапроса + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗпросаДеревоПартнеровИтогиНачисления()

Функция ТекстЗапросаЗначениеПоУмолчанию()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.КТС_Константы.СвойствоПартнерЗП) КАК Справочник.КТС_Константы).Значение 			     КАК СвойствоПартнерЗП,
	               |	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.КТС_Константы.СвойствоОрганизацияПодразделения) КАК Справочник.КТС_Константы).Значение  КАК СвойствоОрганизацияПодразделения,
				   |	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.КТС_Константы.ДопРеквизитСоглашениеЗП) КАК Справочник.КТС_Константы).Значение 			 КАК ДопРеквизитСоглашениеЗП,
				   |	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.КТС_Константы.ДопРеквизитДоговорЗП) КАК Справочник.КТС_Константы).Значение 			 КАК ДопРеквизитДоговорЗП,
				   |	СтатьяРасходовПоУмолчанию.Значение 			КАК СтатьяРасходов,
				   |	СтатьяДоходовПоУмолчанию.Значение 			КАК СтатьяДоходов
				   |ИЗ
				   |	Константа.ЗП_СтатьяРасходовПоУмолчанию КАК СтатьяРасходовПоУмолчанию,
				   |	Константа.ЗП_СтатьяДоходовПоУмолчанию КАК СтатьяДоходовПоУмолчанию";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗначениеПоУмолчанию()

Функция ТекстЗапросаДеревоНачислений(знач Партнер, Знач Подразделение)

	ТекстЗапроса = "
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ВТПартнеры.Партнер КАК Партнер
				   |ПОМЕСТИТЬ ТаблицаПартнеров
				   |ИЗ
				   |	Партнеры КАК ВТПартнеры
				   |	ГДЕ 
				   |	%1 //Сюда отбор по подразеделнию
				   |%2 // Сюда подставляем отбор по партнеру (если он есть)
				   |;
				   |
				   |ВЫБРАТЬ
				   |	ТаблицаПартнеров.Партнер 			КАК Партнер,
				   |	ЗП_ВыполненныеНачисления.ВидРасчета КАК ВидРасчета
				   |ПОМЕСТИТЬ ВыполненныеНачисления
				   |ИЗ
				   |	ТаблицаПартнеров КАК ТаблицаПартнеров
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
				   |		ПО ТаблицаПартнеров.Партнер = ЗП_ВыполненныеНачисления.Партнер
				   |			И ЗП_ВыполненныеНачисления.Период = &ОтборМесяц
				   |;
				   |
				   |ВЫБРАТЬ
				   |	ТаблицаПартнеров.Партнер 																							КАК Партнер,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ПереноситьВСледующийПериод, ЛОЖЬ) 												КАК ПереноситьВСледующийПериод,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.НаименованиеРасчета, """") 														КАК НаименованиеРасчета,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Статья, НЕОПРЕДЕЛЕНО)																КАК Статья,												 																												
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Аналитика, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))  				КАК Аналитика,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) 						КАК Организация,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Формула, """") 																	КАК Формула,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.РасшифровкаФормулы, """")												 			КАК РасшифровкаФормулы,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.РасшифровкаФормулы, """")												 			КАК РасшифровкаФормулыФорматная,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.СуммаРасчитано, 0)												 				КАК Рассчитано,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.СуммаНасчитано, 0)												 				КАК Насчитано,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.НеНачислять, ЛОЖЬ)											 					КАК НеНачислять,
				   |	1																													КАК Уровень,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ДокументНачисления, НЕОПРЕДЕЛЕНО)                                                 КАК ДокументНачисления,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ВидРасчета, ЗНАЧЕНИЕ(Справочник.ЗП_ВидыРасчетов.ПустаяСсылка))                    КАК ВидРасчета,
				   |	ЛОЖЬ																												КАК ЗаписьМодифицированная,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.РасчетУстановленВручную, ЛОЖЬ)                                                    КАК РасчетУстановленВручную,
				   |	ИСТИНА																												КАК ДанныеЗаписаны,
				   |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ДатаДобавления, ДАТАВРЕМЯ(1,1,1))                                                 КАК ДатаДобавления
				   |ИЗ
				   |	ТаблицаПартнеров КАК ТаблицаПартнеров
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
				   |		ПО ТаблицаПартнеров.Партнер = ЗП_ВыполненныеНачисления.Партнер
				   |			И ЗП_ВыполненныеНачисления.Период = &ОтборМесяц
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ТаблицаПартнеров.Партнер.Наименование ВОЗР,
				   |	НаименованиеРасчета ВОЗР,
				   |	ДатаДобавления ВОЗР
				   |
				   |ИТОГИ СУММА(Рассчитано), СУММА(Насчитано) ПО
				   |	ТаблицаПартнеров.Партнер ИЕРАРХИЯ";
				   
				   
	ТекстУсловия = "Истина ";
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		ТекстУсловия = "ВТПартнеры.Подразделение В ИЕРАРХИИ (&Подразделение)";
	ИначеЕсли Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда 
		ТекстУсловия = "ВТПартнеры.Подразделение = (&Подразделение)";
	КонецЕсли;
	
	ТекстОтбора = "";			   
	Если ЗначениеЗаполнено(Партнер) Тогда
		ТекстОтбора  = "
				|	И ВТПартнеры.Партнер = &Партнер";
	КонецЕсли;
			
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстУсловия, ТекстОтбора);			   
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДеревоНачислений()

Функция ТекстЗапросаТаблицаНачислений()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаПартнеров.Партнер
	               |ПОМЕСТИТЬ ТаблицаПартнеров
	               |ИЗ
	               |	&ТаблицаПартнеров КАК ТаблицаПартнеров
	               |;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПартнеров.Партнер КАК Партнер,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ВидРасчета, ЗНАЧЕНИЕ(Справочник.ЗП_ВидыРасчетов.ПустаяСсылка)) КАК ВидРасчета,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ДокументНачисления, НЕОПРЕДЕЛЕНО) КАК ДокументНачисления,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.НеНачислять, ЛОЖЬ) КАК НеНачислять,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.СуммаНасчитано, 0) КАК СуммаНасчитано,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.СуммаРасчитано, 0) КАК СуммаРасчитано,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Статья, НЕОПРЕДЕЛЕНО) КАК Статья,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Аналитика, НЕОПРЕДЕЛЕНО) КАК Аналитика,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.НаименованиеРасчета, """") КАК НаименованиеРасчета,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Организация, НЕОПРЕДЕЛЕНО) КАК Организация,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.ПереноситьВСледующийПериод, НЕОПРЕДЕЛЕНО) КАК ПереноситьВСледующийПериод,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.Формула, """") КАК Формула,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.РасшифровкаФормулы, """") КАК РасшифровкаФормулы,
	               |	ЕСТЬNULL(ЗП_ВыполненныеНачисления.РасчетУстановленВручную, ЛОЖЬ) КАК РасчетУстановленВручную
	               |ИЗ
	               |	ТаблицаПартнеров КАК ТаблицаПартнеров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
	               |		ПО ТаблицаПартнеров.Партнер = ЗП_ВыполненныеНачисления.Партнер
	               |			И (ЗП_ВыполненныеНачисления.Период = &ОтборМесяц)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаНачислений()

Функция ТекстЗапросаСоглашенияСПоставщиком()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Ссылка КАК СоглашениеСПоставщиком
			|ПОМЕСТИТЬ СоглашенияПартнера
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками
			|ГДЕ
			|	НЕ ПометкаУдаления
			|	И ДоступноДляЗакупки
			|	И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
			|	И ДатаОкончанияДействия < &ТекущаяДата
			|	И Партнер = &Партнер
			|	И Организация = &Организация
			|;
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоглашенияПартнера.СоглашениеСПоставщиком КАК СоглашениеСПоставщиком
			|ИЗ
			|	СоглашенияПартнера КАК СоглашенияПартнера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками.ДополнительныеРеквизиты КАК ДопРеквизиты
			|		ПО СоглашенияПартнера.СоглашениеСПоставщиком = ДопРеквизиты.Ссылка
			|			И ДопРеквизиты.Свойство = &ДопРеквизитЗП
			|			И ДопРеквизиты.Значение = ИСТИНА";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСоглашенияСПоставщиком()
 
Функция ТекстЗапросаДоговорПартнера()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Договор
	               |ПОМЕСТИТЬ ТаблицаДоговров
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов
	               |ГДЕ
	               |	ПометкаУдаления = ЛОЖЬ
	               |	И Организация = &Организация
	               |	И Партнер = &Партнер
				   |	И ТипДоговора = &ТипДоговора
				   |	И ДатаОкончанияДействия < &ТекущаяДата
	               |	И ПорядокОплаты = &ПорядокОплаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТаблицаДоговров.Договор КАК Договор
	               |ИЗ
	               |	ТаблицаДоговров КАК ТаблицаДоговров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |		ПО ТаблицаДоговров.Договор = ДопРеквизиты.Ссылка
	               |			И (ДопРеквизиты.Свойство = &ДопРеквизитДоговорЗП)
	               |			И (ДопРеквизиты.Значение = ИСТИНА)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДоговорПартнера()

Функция ТекстЗапросаСоглашениеСКлиентом()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Ссылка КАК СоглашениеСКлиентом
			|ПОМЕСТИТЬ СоглашенияПартнера
			|ИЗ
			|	Справочник.СоглашенияСКлиентами
			|ГДЕ
			|	НЕ ПометкаУдаления
			|	И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	И ДатаОкончанияДействия < &ТекущаяДата
			|	И Типовое = ИСТИНА
			|;
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	СоглашенияПартнера.СоглашениеСКлиентом КАК СоглашениеСКлиентом
			|ИЗ
			|	СоглашенияПартнера КАК СоглашенияПартнера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ДополнительныеРеквизиты КАК ДопРеквизиты
			|		ПО СоглашенияПартнера.СоглашениеСКлиентом = ДопРеквизиты.Ссылка
			|			И ДопРеквизиты.Свойство = &ДопРеквизитЗП
			|			И ДопРеквизиты.Значение = ИСТИНА";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСоглашениеСКлиентом()

Функция ТексЗапросаПеренестиНачисления(знач Партнер)

	ТекстЗапроса = "
		  	|
           	|////////////////////////////////////////////////////////////////////////////////
           	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		   	|	ВТПартнеры.Партнер КАК Партнер
		   	|ПОМЕСТИТЬ ТаблицаПартнеров
		   	|ИЗ
		   	|	Партнеры КАК ВТПартнеры
		   	|%1 // Сюда подставляем отбор по партнеру (если он есть)
		   	|;
			|
			|ВЫБРАТЬ
			|	ТаблицаПартнеров.Партнер							КАК Партнер,
			|	ВыполненныеНачисления.ВидРасчета        			КАК ВидРасчета,
			|	ВыполненныеНачисления.НеНачислять        			КАК НеНачислять,
			|	ВыполненныеНачисления.СуммаРасчитано        		КАК СуммаРасчитано,
			|	ВыполненныеНачисления.Статья        				КАК Статья,
			|	ВыполненныеНачисления.Аналитика        				КАК Аналитика,
			|	ВыполненныеНачисления.НаименованиеРасчета       	КАК НаименованиеРасчета,
			|	ВыполненныеНачисления.Организация       			КАК Организация,
			|	ВыполненныеНачисления.ПереноситьВСледующийПериод    КАК ПереноситьВСледующийПериод,
			|	ВыполненныеНачисления.Формула    					КАК Формула,
			|	ВыполненныеНачисления.РасшифровкаФормулы    		КАК РасшифровкаФормулы,
			|	ВыполненныеНачисления.РасчетУстановленВручную    	КАК РасчетУстановленВручную
			|ПОМЕСТИТЬ ТаблицаПрошлихНачислений
			|ИЗ
			|	ТаблицаПартнеров КАК ТаблицаПартнеров
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ВыполненныеНачисления
			|		ПО ТаблицаПартнеров.Партнер = ВыполненныеНачисления.Партнер
			|			И ВыполненныеНачисления.Период = &ОтборПрошлыйМесяц
			|			И ВыполненныеНачисления.ПереноситьВСледующийПериод = ИСТИНА
			|;
			|
			|ВЫБРАТЬ
			|	ТаблицаПартнеров.Партнер							КАК Партнер,
			|	ВыполненныеНачисления.ВидРасчета        			КАК ВидРасчета
			|ПОМЕСТИТЬ ТаблицаТекущихНачислений
			|ИЗ
			|	ТаблицаПартнеров КАК ТаблицаПартнеров
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ВыполненныеНачисления
			|		ПО ТаблицаПартнеров.Партнер = ВыполненныеНачисления.Партнер
			|			И ВыполненныеНачисления.Период = &ОтборМесяц
			|;
			|
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(&ОтборМесяц КАК ДАТА)	КАК Период,
			|	Партнер							КАК Партнер,
			|	ВидРасчета        				КАК ВидРасчета,
			|	НеНачислять        				КАК НеНачислять,
			|	СуммаРасчитано        			КАК СуммаРасчитано,
			|	0								КАК СуммаНасчитано,
			|	Статья        					КАК Статья,
			|	Аналитика        				КАК Аналитика,
			|	НаименованиеРасчета       		КАК НаименованиеРасчета,
			|	Организация       				КАК Организация,
			|	ПереноситьВСледующийПериод   	КАК ПереноситьВСледующийПериод,
			|	Формула    						КАК Формула,
			|	РасшифровкаФормулы    			КАК РасшифровкаФормулы,
			|	РасчетУстановленВручную    		КАК РасчетУстановленВручную
			|ИЗ
			|	ТаблицаПрошлихНачислений
			|ГДЕ
			|	(Партнер, ВидРасчета) НЕ В (ВЫБРАТЬ Партнер, ВидРасчета ИЗ ТаблицаТекущихНачислений)";
			
	ТекстОтбора = "";			   
	Если ЗначениеЗаполнено(Партнер) Тогда
		ТекстОтбора  = "
				|ГДЕ
				|	ВТПартнеры.Партнер В (&Партнер)";
	КонецЕсли;
			
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстОтбора);
	
	Возврат ТекстЗапроса;

КонецФункции // ТексЗапросаПеренестиНачисления()
 
Функция ТекстЗапросаУдалениеНачислений()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаНачислений.Период			КАК Период,
	               |	ТаблицаНачислений.Партнер			КАК Партнер,
	               |	ТаблицаНачислений.ВидРасчета     	КАК ВидРасчета
	               |ПОМЕСТИТЬ ТабНачисления
	               |ИЗ
	               |	&ТаблицаНачислений КАК ТаблицаНачислений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабНачисления.Период							КАК Период,
	               |	ТабНачисления.Партнер							КАК Партнер,
	               |	ТабНачисления.ВидРасчета						КАК ВидРасчета,
				   |	ТабНачисления.ВидРасчета.ИдентификаторСлужебный	КАК ИдентификаторСлужебный
	               |ИЗ
	               |	ТабНачисления КАК ТабНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
	               |		ПО ТабНачисления.Период 		= ЗП_ВыполненныеНачисления.Период
	               |			И ТабНачисления.Партнер 	= ЗП_ВыполненныеНачисления.Партнер
	               |			И ТабНачисления.ВидРасчета 	= ЗП_ВыполненныеНачисления.ВидРасчета
				   |ГДЕ
				   |	ЗП_ВыполненныеНачисления.ДокументНачисления = НЕОПРЕДЕЛЕНО
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЗП_ВыполненныеНачисления.Партнер							КАК Партнер,
	               |	ЗП_ВыполненныеНачисления.ВидРасчета.ИдентификаторСлужебный 	КАК ВидРасчета,
				   |	ЗП_ВыполненныеНачисления.Формула				 			КАК Формула
	               |ИЗ
	               |	ТабНачисления КАК ТабНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
	               |		ПО ТабНачисления.Период 		= ЗП_ВыполненныеНачисления.Период
	               |			И ТабНачисления.Партнер 	= ЗП_ВыполненныеНачисления.Партнер
				   |;";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаУдалениеНачслений()
 
Функция ТекстЗапросаРасчетПартнеров()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаПартнеров.Партнер
	               |ПОМЕСТИТЬ ТаблицаПартнеров
	               |ИЗ
	               |	&ТаблицаПартнеров КАК ТаблицаПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗП_ВыполненныеНачисления.Период КАК Период,
	               |	ТаблицаПартнеров.Партнер КАК Партнер,
	               |	ЗП_ВыполненныеНачисления.ВидРасчета КАК Начисление,
	               |	ЗП_ВыполненныеНачисления.ВидРасчета.ИдентификаторСлужебный КАК ИдентификаторСлужебный,
	               |	ЗП_ВыполненныеНачисления.Организация КАК Организация,
	               |	ЗП_ВыполненныеНачисления.Аналитика КАК Подразделение,
	               |	ЗП_ВыполненныеНачисления.Статья КАК Статья,
	               |	ЗП_ВыполненныеНачисления.СуммаРасчитано КАК Сумма,
	               |	ЗП_ВыполненныеНачисления.Формула КАК Формула,
	               |	ЗП_ВыполненныеНачисления.РасшифровкаФормулы КАК Расшифровка,
	               |	НЕ ЗП_ВыполненныеНачисления.РасчетУстановленВручную КАК Рассчитывается,
	               |	"""" КАК ФормулаДляВыполнения,
	               |	-1 КАК ОчередностьРасчета,
	               |	ЗП_ВыполненныеНачисления.НеНачислять КАК НеНачислять
	               |ИЗ
	               |	ТаблицаПартнеров КАК ТаблицаПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ВыполненныеНачисления КАК ЗП_ВыполненныеНачисления
	               |		ПО ТаблицаПартнеров.Партнер = ЗП_ВыполненныеНачисления.Партнер
	               |			И (ЗП_ВыполненныеНачисления.Период = &ОборМесяц)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРасчетПартнеров()
 
Функция ТекстЗапросаПроизвольныеКонстанты()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаКонстант.Константа	КАК Константа,
	               |	ТаблицаКонстант.Значение	КАК Значение,
	               |	ТаблицаКонстант.Измененный 	КАК Измененный
	               |ПОМЕСТИТЬ ТаблицаКонстант
	               |ИЗ
	               |	&ТаблицаКонстант КАК ТаблицаКонстант
	               |ГДЕ
	               |	ТаблицаКонстант.Измененный = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКонстант.Константа		КАК Константа,
	               |	ТаблицаКонстант.Значение		КАК Значение,
	               |	ЕСТЬNULL(ЗП_ПоказателиРасчетаЗарплаты.Ссылка, ЗНАЧЕНИЕ(Справочник.ЗП_ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК КонстантаСсылка
	               |ИЗ
	               |	ТаблицаКонстант КАК ТаблицаКонстант
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗП_ПоказателиРасчетаЗарплаты КАК ЗП_ПоказателиРасчетаЗарплаты
	               |		ПО ТаблицаКонстант.Константа = ЗП_ПоказателиРасчетаЗарплаты.Наименование";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПроизвольныеКонстанты()

Функция ТекстЗапросаНаличиеСлужебногоИдентификатора()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЗП_ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ИдентификаторСлужебный = &ИдентификаторСлужебный
				   |	И ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Ссылка
	               |ИЗ
	               |	Справочник.ЗП_ВидыРасчетов
	               |ГДЕ
	               |	ИдентификаторСлужебный = &ИдентификаторСлужебный
				   |	И ПометкаУдаления = ЛОЖЬ";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаНаличиеСлужебногоИдентификатора()
 
Функция ТекстЗапросаЗагрузкиПроизвольныхКонстант()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗП_ПроизвольныеКонстанты.Константа.Наименование КАК Константа,
	               |	ЗП_ПроизвольныеКонстанты.Значение,
	               |	ИСТИНА КАК Загруженный
	               |ИЗ
	               |	РегистрСведений.ЗП_ПроизвольныеКонстанты КАК ЗП_ПроизвольныеКонстанты";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаЗагрузкиПроизвольныхКонстант()
 
Функция ТекстЗапросаМассивПартнеровПоПодразделению()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Пользователи.Ссылка 				КАК Пользователь,
	|	Пользователи.ТекущееПодразделение 	КАК Подразделение,
	|	ВЫРАЗИТЬ(&СвойствоПартнерЗП 
	|		КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) 
	|										КАК СвойствоПартнерЗП,
	|	ВЫРАЗИТЬ(&СвойствоОрганизацияПодразделения 
	|		КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) 
	|										КАК СвойствоОрганизацияПодразделения
	|ПОМЕСТИТЬ ТаблицаПользователей
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Недействителен 	= ЛОЖЬ
	|	И Пользователи.ПометкаУдаления 	= ЛОЖЬ
	|	И Пользователи.ТекущееПодразделение <> &ПустоеПодразделение
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПользователей.Подразделение 						  КАК Подразделение,
	|	ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры) КАК Партнер
	|ИЗ
	|	ТаблицаПользователей КАК ТаблицаПользователей
	|	
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСПользователи
	|ПО (ТаблицаПользователей.Пользователь 
	|		= (ВЫРАЗИТЬ(ДСПользователи.Объект КАК Справочник.Пользователи)))
	|И ТаблицаПользователей.СвойствоПартнерЗП = ДСПользователи.Свойство
	|
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДСПользователи.Значение КАК Справочник.Партнеры), 
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) 
	|	<> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	
	|	И ТаблицаПользователей.Подразделение В ИЕРАРХИИ(&Подразделение)";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти 

#Область ПроверкаПараметровИСтрок

Функция ПроверитьПараметрыЗагрузкиДереваПартнеров(СтруктураПараметров)

	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось получить структуру параметров для загрузки для загрузки дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("СвойствоПартнерЗП") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <СвойствоПартнерЗП> в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.СвойствоПартнерЗП) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <СвойствоПартнерЗП> имеет неверный тип данных в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.СвойствоПартнерЗП) Тогда
		ТекстСообщения = ПодготовитьТекст("Не заполнено свойство <СвойствоПартнерЗП> в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("СвойствоОрганизацияПодразделения") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <СвойствоОрганизацияПодразделения> в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.СвойствоОрганизацияПодразделения) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <СвойствоОрганизацияПодразделения> имеет неверный тип данных в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.СвойствоОрганизацияПодразделения) Тогда
		ТекстСообщения = ПодготовитьТекст("Не заполнено свойство <СвойствоОрганизацияПодразделения> в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("КоличествоМесяцев") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <КоличествоМесяцев> в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.КоличествоМесяцев) <> Тип("Число") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <КоличествоМесяцев> имеет неверный тип данных в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.КоличествоМесяцев <= 0 Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <КоличествоМесяцев> должно быть больше 0 при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("ОтборМесяц") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <ОтборМесяц> в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.ОтборМесяц) <> Тип("Дата") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <ОтборМесяц> имеет неверный тип данных в структуре параметров при загрузке дерева партнеров.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыЗагрузкиДереваПартнеров()

Функция ПроверитьПараметрыЗагрузкиДереваНачислений(СтруктураПараметров)

	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось получить структуру параметров для загрузки для загрузки дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("Подразделение") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <Подразделение> в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Подразделение) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Если ТипЗнч(СтруктураПараметров.Подразделение) = Тип("Строка") Тогда 
			СтруктураПараметров.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		Иначе 
			ТекстСообщения = ПодготовитьТекст("Свойство <Подразделение> имеет неверный тип данных в структуре параметров при загрузке дерева начислений.");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("Партнер") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <Партнер> в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Партнер) <> Тип("СправочникСсылка.Партнеры") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <Партнер> имеет неверный тип данных в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураПараметров.Свойство("СвойствоПартнерЗП") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <СвойствоПартнерЗП> в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.СвойствоПартнерЗП) <> Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <СвойствоПартнерЗП> имеет неверный тип данных в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.СвойствоПартнерЗП) Тогда
		ТекстСообщения = ПодготовитьТекст("Не заполнено свойство <СвойствоПартнерЗП> в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Если Не СтруктураПараметров.Свойство("ОтборМесяц") Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти свойство <ОтборМесяц> в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.ОтборМесяц) <> Тип("Дата") Тогда
		ТекстСообщения = ПодготовитьТекст("Свойство <ОтборМесяц> имеет неверный тип данных в структуре параметров при загрузке дерева начислений.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПараметрыЗагрузкиДереваНачислений()

Функция ПроверитьСтрокуСтрокуНачисления(СтрокаНачисления)

	Если СтрокаНачисления.СуммаНасчитано = СтрокаНачисления.СуммаРасчитано Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаНачисления.НеНачислять Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаНачисления.Организация) <> Тип("СправочникСсылка.Организации") ИЛИ Не ЗначениеЗаполнено(СтрокаНачисления.Организация) Тогда
		ТекстОшибки = ПодготовитьТекст("У партнера %1 не заполнена организация.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	МассивТиповСтатьи = Новый Массив;
	МассивТиповСтатьи.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	МассивТиповСтатьи.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
	
	Если МассивТиповСтатьи.Найти(ТипЗнч(СтрокаНачисления.Статья)) = Неопределено ИЛИ Не ЗначениеЗаполнено(СтрокаНачисления.Статья) Тогда
		ТекстОшибки = ПодготовитьТекст("У партнера %1 не заполнена статья доходов / расходов.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаНачисления.Аналитика) <> Тип("СправочникСсылка.СтруктураПредприятия") ИЛИ Не ЗначениеЗаполнено(СтрокаНачисления.Аналитика) Тогда
		ТекстОшибки = ПодготовитьТекст("У партнера %1 не заполнена аналитика доходов / расходов.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаНачисления.СуммаРасчитано = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // ПроверитьСтрокуДереваНачислений()

Процедура ПроверитьСтатьиДоходовРасходов(СтрокаДерева, ОшибкиНайденны)

	Если СтрокаДерева.Рассчитано > 0 И ТипЗнч(СтрокаДерева.Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ТекстОшибки = ПодготовитьТекст("У партнера %1 неверно установлена статья доходов %2, нужно статью расходов.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер, СтрокаДерева.Статья);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
	КонецЕсли;
	
	Если СтрокаДерева.Рассчитано < 0 И ТипЗнч(СтрокаДерева.Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ТекстОшибки = ПодготовитьТекст("У партнера %1 неверно установлена статья расходов %2, нужно статью доходов.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер, СтрокаДерева.Статья);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаименованиеВидовРасчета(СтрокаДерева, ИмяРасчета, СоответствиеНачислений, ОшибкиНайденны)

	Если ПустаяСтрока(ИмяРасчета) Тогда
		ТекстОшибки    = НСтр("ru='У партнера %1 найдены пустые имена начислений.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстОшибки    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
	ИначеЕсли СоответствиеНачислений.Получить(ИмяРасчета) = Неопределено Тогда
		СоответствиеНачислений.Вставить(ИмяРасчета, 1);
	Иначе
		ТекстОшибки    = НСтр("ru='У партнера %1 используются одинаковые имена начислений.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстОшибки    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ФормированиеТаблиц

Функция СформироватьТаблицуПартнеров(ДеревоНачислений)

	ТаблицаПартнеров = Новый ТаблицаЗначений;
	ТаблицаПартнеров.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	
	СтрокиДерева = ДеревоНачислений.ПолучитьЭлементы();
	
	Для каждого СтрокаИзДерева Из СтрокиДерева Цикл
	    НоваяСтрока	= ТаблицаПартнеров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзДерева);
	КонецЦикла; 
	
	Возврат ТаблицаПартнеров;

КонецФункции // СформироватьТаблицуНчисленийИПартнеров()

Функция ПолучитьТаблицуНачислений(ТаблицаПартнеров, ОтборМесяц)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаТаблицаНачислений();
	
	Запрос.УстановитьПараметр("ТаблицаПартнеров", ТаблицаПартнеров);
	Запрос.УстановитьПараметр("ОтборМесяц", ОтборМесяц);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуНачислений()

Процедура СформироватьТаблицуНачисленийДляЗаписи(ДеревоНачислений, ТаблицаНачислений, ОшибкиНайденны)
	
	СтрокиДерева 			= ДеревоНачислений.ПолучитьЭлементы();
	СоответствиеНачислений  = Новый Соответствие;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Уровень = 1 Тогда
			
			ИмяРасчета = СокрЛП(СтрокаДерева.НаименованиеРасчета);
			
			ПроверитьНаименованиеВидовРасчета(СтрокаДерева, ИмяРасчета, СоответствиеНачислений, ОшибкиНайденны);
			ПроверитьСтатьиДоходовРасходов(СтрокаДерева, ОшибкиНайденны);
			
			Если ОшибкиНайденны Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДерева.ЗаписьМодифицированная Тогда
				
				НоваяСтрока = ТаблицаНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				
				Если НЕ ЗначениеЗаполнено(СтрокаДерева.ВидРасчета) Тогда
					ВидРасчетаСсылка = НайтиВидРасчетаПоИдентификаторуСлужебному(ИмяРасчета);
					Если ПустаяСтрока(ВидРасчетаСсылка.ВерсияДанных) ИЛИ ВидРасчетаСсылка.ПометкаУдаления Тогда
												
						ПараметрыОбъекта = Новый Структура("Наименование, ИдентификаторСлужебный, Идентификатор", 
															ИмяРасчета, 
															"["+ИмяРасчета+"]",
															НормализироватьИндентифкаторРасчета(СтрЗаменить(ИмяРасчета, " ", "")));
															
						Если ПроверитьНаличиеСлужебногоИдентификатора(ПараметрыОбъекта.ИдентификаторСлужебный) Тогда
							ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать значения вида расчета %2. Идентификатор константы уже найден в базе");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер, СтрокаДерева.НаименованиеРасчета);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
							ОшибкиНайденны = Истина;
							Возврат;	
						КонецЕсли;
						
						Если ЭтоЦифра(Сред(ПараметрыОбъекта.Идентификатор, 1, 1)) Тогда
							ТекстОшибки = ПодготовитьТекст("Для партнера %1 задано неверное навменования для вида расчета %2. Запрещено давать имена видам расчета которые начинаются из цифры.");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер, СтрокаДерева.НаименованиеРасчета);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
							Возврат;
						КонецЕсли;
						
						СтруктураОшибок  = Новый Структура;
						СпрОбъект		 = git_Objcon.СоздатьСправочник("ЗП_ВидыРасчетов", ПараметрыОбъекта, СтруктураОшибок);
						Если СтруктураОшибок.Количество() > 0 Тогда
							Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
							    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение,,,, ОшибкиНайденны);															
							КонецЦикла;
							ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось создать новый вид расчета.");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
							Продолжить;
						КонецЕсли;
						Попытка
							СпрОбъект.Записать();    					
						Исключение
						    ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось создать новый вид расчета.");
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДерева.Партнер);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, ОшибкиНайденны);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),,,, ОшибкиНайденны);
							Продолжить;
						КонецПопытки;
						ВидРасчетаСсылка = СпрОбъект.Ссылка;
					КонецЕсли;
					НоваяСтрока.ВидРасчета = ВидРасчетаСсылка;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СформироватьТаблицуНачисленийДляЗаписи(СтрокаДерева, ТаблицаНачислений, ОшибкиНайденны);
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // СформироватьТаблицуНачисленийДляЗаписи()

Функция НайтиВидРасчетаПоИдентификаторуСлужебному(ИмяРасчета)

	Запрос = Новый Запрос("	
	               |ВЫБРАТЬ
	               |	Ссылка
	               |ИЗ
	               |	Справочник.ЗП_ВидыРасчетов
	               |ГДЕ
	               |	ИдентификаторСлужебный = &ИмяРасчета
				   |	И ПометкаУдаления = ЛОЖЬ");
				   
	Запрос.УстановитьПараметр("ИмяРасчета", "[" + ИмяРасчета + "]");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.ЗП_ВидыРасчетов.ПустаяСсылка());

КонецФункции // НайтиВидРасчетаПоНаименованию()()
 
Функция НормализироватьИндентифкаторРасчета(Идентификатор)

	Индекс				= 1;
	Накопитель			= "";	
	Пока Индекс <= СтрДлина(Идентификатор) Цикл
		Символ = Сред(Идентификатор, Индекс, 1);
		Если ЭтоЦифра(Символ) Тогда
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		Если ЭтоБуква(Символ) Тогда
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
		
	Возврат Накопитель;

КонецФункции // НормализироватьИндентифкаторРасчета()

Функция ЭтоЦифра(Символ)
 	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ Код>=58, Ложь, Истина);	 
КонецФункции

Функция ЭтоБуква(Символ)
   	Код = КодСимвола(Символ);
	Возврат ?(Код<=64 ИЛИ (Код>=91 И Код<=96) ИЛИ (Код>=123 И Код<=126), Ложь, Истина);
КонецФункции

Функция ПолучитьМассивПартнеровПоПодразделению(знач Подразделение)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаМассивПартнеровПоПодразделению();
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", 
			Справочники.СтруктураПредприятия.ПустаяСсылка());
			
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
	
КонецФункции


#КонецОбласти 

#Область РасчетЗначенийПоФормулам

// TODO: подключить обработку Жени
Функция ПолучитьЗначениеРасчетаПоФормуле()
	ГенераторЧислел = Новый ГенераторСлучайныхЧисел;
	Возврат ГенераторЧислел.СлучайноеЧисло(0, 100) * ?(ГенераторЧислел.СлучайноеЧисло(0, 100) > 50, -1, 1);
КонецФункции // ПолучитьЗначениеРасчетаПоФормуле()

#КонецОбласти 

#Область ЗаписьДанныхВРегистры

Функция ЗаписатьВыполненныеНачисления(ТаблицаНачислений, ОтборМесяц)

	Для каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
	
		НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ОтборМесяц);
		НаборЗаписей.Отбор.Партнер.Установить(СтрокаТаблицы.Партнер);
		НаборЗаписей.Отбор.ВидРасчета.Установить(СтрокаТаблицы.ВидРасчета);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Период 			= ОтборМесяц;
		Запись.СуммаНасчитано 	= СтрокаТаблицы.Насчитано;
		Запись.СуммаРасчитано 	= СтрокаТаблицы.Рассчитано;
		
		Попытка
			НаборЗаписей.Записать();    					
		Исключение
		    ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать плановое насчисление.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Партнер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // Записать()

Процедура ЗаписатьРасчетПартнеров(СтруктураПараметров, ТаблицаПартнеров, ОшибкиНайденны)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаРасчетПартнеров();
	
	Запрос.УстановитьПараметр("ТаблицаПартнеров", ТаблицаПартнеров);
	Запрос.УстановитьПараметр("ОборМесяц", СтруктураПараметров.ОтборМесяц);
	
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьОчередностьРасчета(ТаблицаРасчетов);
	
	Для каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		Если Не СтрокаТаблицы.Рассчитывается Тогда
			Продолжить;
		КонецЕсли;
		ФормулаДляВыполнения = git_РасчетЗарплаты.ПараметрыВыполненияФормулы(СтрокаТаблицы.Формула);
		Если ФормулаДляВыполнения = Неопределено Тогда
			ТекстСообщения = ПодготовитьТекст("Для партнера %1 неверно задана формула %2.");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.Партнер, СтрокаТаблицы.Формула);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОшибкиНайденны = Истина;
		КонецЕсли;
		СтрокаТаблицы.ФормулаДляВыполнения = ФормулаДляВыполнения;
	КонецЦикла; 
	
	Если ОшибкиНайденны Тогда
		Возврат;
	КонецЕсли;
	
	ОтборМесяц			= СтруктураПараметров.ОтборМесяц;
	ПараметрыРасчета    = Новый Структура("КомментироватьРасчет", Истина);
	
	СтатьяРасходов = Константы.ЗП_СтатьяРасходовПоУмолчанию.Получить();
	СтатьяДоходов  = Константы.ЗП_СтатьяДоходовПоУмолчанию.Получить();
	
	ТаблицаРезультат = git_РасчетЗарплаты.РасчитатьНачисления(ТаблицаРасчетов, ОтборМесяц, ПараметрыРасчета);
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
				
		НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ОтборМесяц);
		НаборЗаписей.Отбор.Партнер.Установить(СтрокаТаблицы.Партнер);
		НаборЗаписей.Отбор.ВидРасчета.Установить(СтрокаТаблицы.Начисление);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 1 Тогда
			ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать результаты начисления в регистр.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Партнер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОшибкиНайденны = Истина;
			Возврат;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		Если СтрокаТаблицы.Рассчитывается Тогда
			Запись.СуммаРасчитано 		= СтрокаТаблицы.Сумма;
			Запись.РасшифровкаФормулы	= СтрокаТаблицы.Расшифровка;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Запись.Статья) Тогда
			Если Запись.СуммаРасчитано > 0 Тогда
				Запись.Статья = СтатьяРасходов;
			КонецЕсли;
			Если Запись.СуммаРасчитано < 0 Тогда
				Запись.Статья = СтатьяДоходов;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();    		
		Исключение
		    ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать результаты расчета в регистр.");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Партнер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОшибкиНайденны = Истина;
			Возврат;
		КонецПопытки; 
	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьОчередностьРасчета(ТаблицаРасчетов)

	// TODO Переделать ужас.
	
	СоответствиеПартнеров    = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		СтрокаПартнер = СоответствиеПартнеров.Получить(СтрокаТаблицы.Партнер);
		Если СтрокаПартнер = Неопределено Тогда
			СоответствиеПартнеров.Вставить(СтрокаТаблицы.Партнер, Новый Структура);
			СтрокаПартнер = СоответствиеПартнеров.Получить(СтрокаТаблицы.Партнер);
		КонецЕсли;
		Если Не СтрокаПартнер.Свойство("ВидыРасчетов") Тогда
			СтрокаПартнер.Вставить("ВидыРасчетов", Новый Массив);
		КонецЕсли;
		СтрокаПартнер.ВидыРасчетов.Добавить(СтрокаТаблицы.ИдентификаторСлужебный);
	КонецЦикла; 
	
	Для каждого ЭлементСоответствия Из СоответствиеПартнеров Цикл
	
		СтруктураПоиска = Новый Структура("Партнер", ЭлементСоответствия.Ключ);
		НайденныеСтроки = ТаблицаРасчетов.НайтиСтроки(СтруктураПоиска);		
		КоличествоСтрок = НайденныеСтроки.Количество();
		
		МассивРодителей 		= Новый Массив;
		ДопМассив				= Новый Массив;
		ИспользованныеРасчеты   = Новый Массив;
		
		Для каждого Расчет Из ЭлементСоответствия.Значение.ВидыРасчетов Цикл
			ИспользованныеРасчеты.Добавить(Расчет);
		КонецЦикла; 
		
		ОчередностьРасчета = 0;
		
		Пока КоличествоСтрок > 0 Цикл	
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ОчередностьРасчета <> -1 Тогда
					Продолжить;
				КонецЕсли;
				Если МассивРодителей.Количество() = 0 Тогда
					
					РасчетНайден = Ложь;
					Для каждого Расчет ИЗ ЭлементСоответствия.Значение.ВидыРасчетов Цикл
						Если Найти(НайденнаяСтрока.Формула, Расчет) > 0 Тогда
							РасчетНайден = Истина;
						КонецЕсли;
					КонецЦикла;
					Если Не РасчетНайден Тогда
						НайденнаяСтрока.ОчередностьРасчета = ОчередностьРасчета;
						КоличествоСтрок = КоличествоСтрок - 1;
						ДопМассив.Добавить(НайденнаяСтрока.ИдентификаторСлужебный);
					КонецЕсли;
					
				Иначе
					
					Для каждого Родитель ИЗ МассивРодителей Цикл
						Если Найти(НайденнаяСтрока.Формула, Родитель) > 0 Тогда
							РасчетНайден = Ложь;
							Для каждого Расчет Из ИспользованныеРасчеты Цикл
								Если Найти(НайденнаяСтрока.Формула, Расчет) > 0 Тогда
									РасчетНайден = Истина;
								КонецЕсли;
							КонецЦикла;
							Если Не РасчетНайден Тогда
								КоличествоСтрок = КоличествоСтрок - 1;
								НайденнаяСтрока.ОчередностьРасчета = ОчередностьРасчета;
								ДопМассив.Добавить(НайденнаяСтрока.ИдентификаторСлужебный);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
						
			МассивРодителей.Очистить();
			
			Для каждого ЭлементМассива Из ДопМассив Цикл
				МассивРодителей.Добавить(ЭлементМассива);
			КонецЦикла;

			ДопМассив.Очистить();
			
			Для каждого ЭлементМассива Из МассивРодителей Цикл
				ИндексЭлемента = ИспользованныеРасчеты.Найти(ЭлементМассива);
				Если ИндексЭлемента <> Неопределено Тогда
					ИспользованныеРасчеты.Удалить(ИндексЭлемента);
				КонецЕсли;
			КонецЦикла;
			
			ОчередностьРасчета = ОчередностьРасчета + 1;
			
		КонецЦикла;
	
	КонецЦикла;                             

КонецПроцедуры
 

Функция ЗаписатьНачислениеВРегистр(Начисление, ДокументНачисления, ОтборМесяц)

	НаборЗаписей = РегистрыСведений.ЗП_ВыполненныеНачисления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ОтборМесяц);
	НаборЗаписей.Отбор.Партнер.Установить(Начисление.Партнер);
	НаборЗаписей.Отбор.ВидРасчета.Установить(Начисление.ВидРасчета);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 1 Тогда
		ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать результаты начисления в регистр.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Начисление.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Запись = НаборЗаписей[0];
	Запись.ДокументНачисления = ДокументНачисления;
	Запись.СуммаНасчитано     = Начисление.СуммаРасчитано;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстОшибки = ПодготовитьТекст("Для партнера %1 не удалось записать результаты начисления в регистр.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Начисление.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ЗаписатьНачислениеВРегистр() 

#КонецОбласти 

#Область СозданиеДокументовИСправочиков

Функция СоздатьПоступлениеУслугПрочихАктивов(СтрокаНачисления, ДопРеквизитСоглашениеЗП, ДопРеквизитДоговорЗП, ОтборМесяц)

	ПараметрыОбъекта 	= git_Templates.ПолучитьПоступлениеУслугПрочихАктивов();
	СтруктураПараметров = ПолучитьСтруктуруДляДокумента();
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаНачисления, "Организация, Партнер");
	СтруктураПараметров.Вставить("Дата", КонецМесяца(ОтборМесяц));
	СтруктураПараметров.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Контрагент = ПолучитьКонтрагентаПартнера(СтрокаНачисления.Партнер);
	Если Контрагент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", Контрагент);
	
	СоглашениеПартнера = ПолучитьСоглашениеПоставщика(СтруктураПараметров, ДопРеквизитСоглашениеЗП);
	Если СоглашениеПартнера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоговорПартнера = ПолучитьДоговорПартнера(СтруктураПараметров, ДопРеквизитДоговорЗП, Перечисления.ТипыДоговоров.СПоставщиком);
	Если ДоговорПартнера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("Контрагент", Контрагент);
	ПараметрыОбъекта.Вставить("Партнер", СтрокаНачисления.Партнер);
	ПараметрыОбъекта.Вставить("Соглашение", СоглашениеПартнера);
	ПараметрыОбъекта.Вставить("Организация", СтрокаНачисления.Организация);
	ПараметрыОбъекта.Вставить("Договор", ДоговорПартнера);
	ПараметрыОбъекта.Вставить("Подразделение", ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	ПараметрыОбъекта.Вставить("Валюта", СтруктураПараметров.Валюта);
	ПараметрыОбъекта.Вставить("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыОбъекта.Вставить("ВалютаВзаиморасчетов", СтруктураПараметров.Валюта);
	ПараметрыОбъекта.Вставить("ДатаПлатежа", КонецМесяца(ОтборМесяц));
	ПараметрыОбъекта.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	ПараметрыОбъекта.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ПараметрыОбъекта.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	ПараметрыОбъекта.Вставить("ЗакупкаПодДеятельность", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	НоваяСтрока = ПараметрыОбъекта.Расходы.Добавить();
	НоваяСтрока.Содержание = СтрокаНачисления.НаименованиеРасчета;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Цена = СтрокаНачисления.СуммаРасчитано;
	НоваяСтрока.Сумма = СтрокаНачисления.СуммаРасчитано;
	НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаСНДС = СтрокаНачисления.СуммаРасчитано;
	НоваяСтрока.СтатьяРасходов = СтрокаНачисления.Статья; 
	НоваяСтрока.АналитикаРасходов = СтрокаНачисления.Аналитика;
	
	Отказ = Ложь;
	СтруктураОшибок  	= Новый Структура;
	ДокОбъект 			= git_Objcon.СоздатьДокумент("ПоступлениеУслугПрочихАктивов", ПараметрыОбъекта, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось создать документ «Поступление услуг и прочих активов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;

	
	ДатыЗапретаИзмененияСлужебный.ПроверитьДатыЗапретаИзмененияЗагрузкиДанных(ДокОбъект, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось провести документ «Поступление услуг и прочих активов» для партнера %1. Период превышает дату запрета изменения данных.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ДокОбъект.Дата = КонецМесяца(ОтборМесяц);
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);   			
	Исключение
	    ТекстОшибки = ПодготовитьТекст("Не удалось провести документ «Поступление услуг и прочих активов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДокОбъект.Ссылка;

КонецФункции // СоздатьПоступлениеТоваровУслуг()

Функция ПерепровестиПоступлениеУслугИПрочихАктивов(СтрокаНачисления)

	ДокОбъект  = СтрокаНачисления.ДокументНачисления.ПолучитьОбъект();
	
	Отказ = Ложь;
	ДатыЗапретаИзмененияСлужебный.ПроверитьДатыЗапретаИзмененияЗагрузкиДанных(ДокОбъект, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось перепровести документ «Поступление услуг и прочих активов» для партнера %1. Период превышает дату запрета изменения данных.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Расходы    = ДокОбъект.Расходы[0];
	
	Расходы.Цена  					= СтрокаНачисления.СуммаРасчитано;
	Расходы.Сумма 					= СтрокаНачисления.СуммаРасчитано;
	Расходы.СуммаСНДС 				= СтрокаНачисления.СуммаРасчитано;
	Расходы.СуммаВзаиморасчетов 	= СтрокаНачисления.СуммаРасчитано;

	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);    			
	Исключение
	    ТекстОшибки = ПодготовитьТекст("Не удалось перепровести докумен «Поступление услуг и прочих активов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ПерепровестиПоступлениеУслугИПрочихАктивов()

Функция СоздатьРеализациюУслугПрочихАктивов(СтрокаНачисления, ДопРеквизитСоглашениеЗП, ДопРеквизитДоговорЗП, ОтборМесяц)

	ПараметрыОбъекта 	= git_Templates.ПолучитьРеализацияУслугПрочихАктивов();
	СтруктураПараметров = ПолучитьСтруктуруДляДокумента();
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаНачисления, "Организация, Партнер");
	СтруктураПараметров.Вставить("Дата", КонецМесяца(ОтборМесяц));
	СтруктураПараметров.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Контрагент = ПолучитьКонтрагентаПартнера(СтрокаНачисления.Партнер);
	Если Контрагент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", Контрагент);
	
	СоглашениеПартнера = ПолучитьСоглашениеКлиента(СтруктураПараметров, ДопРеквизитСоглашениеЗП);
	Если СоглашениеПартнера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДоговорПартнера = ПолучитьДоговорПартнера(СтруктураПараметров, ДопРеквизитДоговорЗП, Перечисления.ТипыДоговоров.СПокупателем);
	Если ДоговорПартнера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("Контрагент", Контрагент);
	ПараметрыОбъекта.Вставить("Партнер", СтрокаНачисления.Партнер);
	ПараметрыОбъекта.Вставить("Соглашение", СоглашениеПартнера);
	ПараметрыОбъекта.Вставить("Организация", СтрокаНачисления.Организация);
	ПараметрыОбъекта.Вставить("Договор", ДоговорПартнера);
	ПараметрыОбъекта.Вставить("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыОбъекта.Вставить("Подразделение", ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	ПараметрыОбъекта.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ПараметрыОбъекта.Вставить("Валюта", СтруктураПараметров.Валюта);
	ПараметрыОбъекта.Вставить("ВалютаВзаиморасчетов", СтруктураПараметров.Валюта);
	ПараметрыОбъекта.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	ПараметрыОбъекта.Вставить("ДатаПлатежа", КонецМесяца(ОтборМесяц));
	ПараметрыОбъекта.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	НоваяСтрока = ПараметрыОбъекта.Доходы.Добавить();
	НоваяСтрока.Содержание = СтрокаНачисления.НаименованиеРасчета;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Цена = -СтрокаНачисления.СуммаРасчитано;
	НоваяСтрока.Сумма = -СтрокаНачисления.СуммаРасчитано;
	НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаСНДС = -СтрокаНачисления.СуммаРасчитано;
	НоваяСтрока.СтатьяДоходов = СтрокаНачисления.Статья; 
	НоваяСтрока.АналитикаДоходов = СтрокаНачисления.Аналитика;
	
	СтруктураОшибок  	= Новый Структура;
	ДокОбъект 			= git_Objcon.СоздатьДокумент("РеализацияУслугПрочихАктивов", ПараметрыОбъекта, СтруктураОшибок);
	
	Отказ = Ложь;
	ДатыЗапретаИзмененияСлужебный.ПроверитьДатыЗапретаИзмененияЗагрузкиДанных(ДокОбъект, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось провести документ «Реализация услуг и прочих активов» для партнера %1. Период превышает дату запрета изменения данных.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось создать документ «Поступление услуг и прочих активов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	ДокОбъект.Дата = КонецМесяца(ОтборМесяц);
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);    			
	Исключение
	    ТекстОшибки = ПодготовитьТекст("Не удалось провести документ «Реализация услуг и прочих активов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДокОбъект.Ссылка;

КонецФункции // СоздатьРеализациюТоваровУслуг()

Функция ПерепровестиРеализациюУслугПрочихАктивов(СтрокаНачисления)

	ДокОбъект  = СтрокаНачисления.ДокументНачисления.ПолучитьОбъект();
	
	Отказ = Ложь;
	ДатыЗапретаИзмененияСлужебный.ПроверитьДатыЗапретаИзмененияЗагрузкиДанных(ДокОбъект, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось перепровести документ «Реализация услуг и прочих активов» для партнера %1. Период превышает дату запрета изменения данных.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Доходы    = ДокОбъект.Доходы[0];
	
	Доходы.Цена  					= -СтрокаНачисления.СуммаРасчитано;
	Доходы.Сумма 					= -СтрокаНачисления.СуммаРасчитано;
	Доходы.СуммаСНДС 				= -СтрокаНачисления.СуммаРасчитано;
	Доходы.СуммаВзаиморасчетов 		= -СтрокаНачисления.СуммаРасчитано;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);    			
	Исключение
	    ТекстОшибки = ПодготовитьТекст("Не удалось перепровести докумен «Реализация услуг и прочих активов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаНачисления.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ПерепровестиРеализациюУслугПрочихАктивов()
 

Функция ПолучитьСтруктуруДляДокумента()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Партнер");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Валюта");
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруДляПоступления()
 


Функция ПолучитьКонтрагентаПартнера(Партнер)

	Перем Контрагент;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат СоздатьКонтаргентаПартнера(Партнер);
	КонецЕсли;
	
	Возврат Контрагент;

КонецФункции // ПолучитьКонтрагентаПартнера()

Функция СоздатьКонтаргентаПартнера(Партнер)

	ПараметрыОбъекта = git_Templates.ПолучитьШаблонСправочникКонтрагенты();
	
	ПараметрыОбъекта.Вставить("Партнер", Партнер);
	ПараметрыОбъекта.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	ПараметрыОбъекта.Вставить("НаименованиеПолное", Партнер.НаименованиеПолное);
	ПараметрыОбъекта.Вставить("Наименование", Партнер.Наименование);
	
	СтруктураОшибок  = Новый Структура;
	КонтрагентОбъект = git_Objcon.СоздатьСправочник("Контрагенты", ПараметрыОбъекта, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось создать справочник «Контрагенты» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		КонтрагентОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось записать справочник «Контрагенты» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат КонтрагентОбъект.Ссылка;

КонецФункции // СоздатьКонтаргентаПартнера()
 

Функция ПолучитьСоглашениеПоставщика(СтруктураПараметров, ДопРеквизитСоглашениеЗП)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСоглашенияСПоставщиком();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДопРеквизитЗП", ДопРеквизитСоглашениеЗП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СоздатьСоглашениеСПостащиком(СтруктураПараметров, ДопРеквизитСоглашениеЗП);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СоглашениеСПоставщиком;

КонецФункции // ПолучитьСоглашениеПартнера()

Функция СоздатьСоглашениеСПостащиком(СтруктураПараметров, ДопРеквизитСоглашениеЗП)

	ПараметрыОбъекта = git_Templates.ПолучитьШаблонСоглашенияСПостащиком();
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, СтруктураПараметров);
	
	ПараметрыОбъекта.Вставить("Наименование", Строка(СтруктураПараметров.Партнер) + " (ЗП)");
	ПараметрыОбъекта.Вставить("Дата", ТекущаяДата());
	ПараметрыОбъекта.Вставить("Статус", Перечисления.СтатусыСоглашенийСПоставщиками.Действует);
	ПараметрыОбъекта.Вставить("Согласован", Истина);
	ПараметрыОбъекта.Вставить("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыОбъекта.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	ПараметрыОбъекта.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ПараметрыОбъекта.Вставить("ВариантПриемкиТоваров", Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным);
	ПараметрыОбъекта.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
	ПараметрыОбъекта.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	ПараметрыОбъекта.Вставить("ИспользуютсяДоговорыКонтрагентов", Истина);
	ПараметрыОбъекта.Вставить("ДоступноДляЗакупки", Истина);
	
	СтруктураОшибок  = Новый Структура;
	СпрОбъект = git_Objcon.СоздатьСправочник("СоглашенияСПоставщиками", ПараметрыОбъекта, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось создать справочник «Соглашения с поставщиками» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СпрОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось создать справочник «Соглашения с поставщиками» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	НоваяСтрока 		 = СпрОбъект.ДополнительныеРеквизиты.Добавить();
	НоваяСтрока.Свойство = ДопРеквизитСоглашениеЗП;
	НоваяСтрока.Значение = Истина;
	
	Попытка
		СпрОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось установить дополнительный рквизит для справочника «Соглашения с поставщиками» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СпрОбъект.Ссылка;

КонецФункции // СоздатьСоглашениеМПостащиком()


Функция ПолучитьСоглашениеКлиента(СтруктураПараметров, ДопРеквизитСоглашениеЗП)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСоглашениеСКлиентом();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДопРеквизитЗП", ДопРеквизитСоглашениеЗП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = ПодготовитьТекст("Не удалось найти типовое соглашение для документа «Реализация услуг проих активов».");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СоглашениеСКлиентом;

КонецФункции // ПолучитьСолашениеКлиента() 


Функция ПолучитьДоговорПартнера(СтруктураПараметров, ДопРеквизитДоговорЗП, ТипДоговора)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаДоговорПартнера();
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
	Запрос.УстановитьПараметр("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
	Запрос.УстановитьПараметр("ДопРеквизитДоговорЗП", ДопРеквизитДоговорЗП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СоздатьДоговорПартнера(СтруктураПараметров, ДопРеквизитДоговорЗП, ТипДоговора);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Договор;

КонецФункции // ПолучитьДоговорПартнера()

Функция СоздатьДоговорПартнера(СтруктураПараметров, ДопРеквизитДоговорЗП, ТипДоговора)

	ПараметрыОбъекта = git_Templates.ПолучитьШаблонДоговорКонтрагента();
	
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, СтруктураПараметров);
	
	ПараметрыОбъекта.Вставить("Наименование", Строка(СтруктураПараметров.Партнер) + " (ЗП)");
	ПараметрыОбъекта.Вставить("ВалютаВзаиморасчетов", СтруктураПараметров.Валюта);
	ПараметрыОбъекта.Вставить("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыОбъекта.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
	ПараметрыОбъекта.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	ПараметрыОбъекта.Вставить("Согласован", Истина);
	ПараметрыОбъекта.Вставить("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	ПараметрыОбъекта.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ПараметрыОбъекта.Вставить("ТипДоговора", ТипДоговора);
	
	СтруктураОшибок  = Новый Структура;
	СпрОбъект = git_Objcon.СоздатьСправочник("ДоговорыКонтрагентов", ПараметрыОбъекта, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		ТекстОшибки = ПодготовитьТекст("Не удалось создать справочник «Договоры контрагентов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Для каждого ОшибкаИзСтруктуры ИЗ СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение);
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СпрОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось создать справочник «Договоры контрагентов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	НоваяСтрока 		 = СпрОбъект.ДополнительныеРеквизиты.Добавить();
	НоваяСтрока.Свойство = ДопРеквизитДоговорЗП;
	НоваяСтрока.Значение = Истина;
	
	Попытка
		СпрОбъект.Записать();    			
	Исключение
		ТекстОшибки = ПодготовитьТекст("Не удалось установить дополнительный рквизит для справочника «Договоры контрагентов» для партнера %1.");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтруктураПараметров.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СпрОбъект.Ссылка;

КонецФункции // СоздатьДоговорПартнера()
 

#КонецОбласти 

#КонецОбласти 


// TODO: быдлокод, всю область переделаем

#Область ВыгрузкаНаСайт

Функция СформироватьМесячныеВзаиморасчеты(ДатаНач, ДатаКон, Партнер, СвойствоГарантия)
	
	ТабДок = Новый ТабличныйДокумент;
	ПараметрыОтбораНоменклатура = Новый Структура("Номенклатура");
	
	ОбъектОтчет = ПолучитьВнешнийОтчет("Отчет по взаиморасчетам с партнерами (основной)");
	МакетОтчета = ОбъектОтчет.ПолучитьМакет("ВзаиморасчетыСокращенные");
 	
	ОбластьЗаголовок		= МакетОтчета.ПолучитьОбласть("Заголовок");
	
	ОбластьШапкаТаблицы 	= МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьДокументДвижения = МакетОтчета.ПолучитьОбласть("ДокументДвижения");
	ОбластьДетальныхЗаписей = МакетОтчета.ПолучитьОбласть("Детали");
	ОбластьОбщийИтог 		= МакетОтчета.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьПодвалТаблицы 	= МакетОтчета.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьПодвал 			= МакетОтчета.ПолучитьОбласть("Подвал");
	

	ДатаНачала 	  = ?(ДатаНач = Дата('00010101000000'), ДатаНач, НачалоМесяца(ДатаНач));
	ДатаОкончания = ?(ДатаКон = Дата('00010101000000'), ДатаКон, КонецМесяца(ДатаКон));
    ТекущаяДата		= ТекущаяДатаСеанса();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата);
	Запрос.УстановитьПараметр("Партнер", 		Партнер);
	
	ЗапросДоговор = Новый Запрос("ВЫБРАТЬ
	                                |	Ссылка
	                                |ИЗ
	                                |	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты
									|ГДЕ
									|	Ссылка.Партнер = &Партнер
									|И	Свойство = &Свойство
									|И	Значение = Истина ");
	ЗапросДоговор.УстановитьПараметр("Партнер", Партнер);
	ЗапросДоговор.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("9405b638-ab95-11e4-80ea-001e676b0175"))); // Это гривневый договор
	ВыборкаДоговор = ЗапросДоговор.Выполнить().Выбрать();	
	
	Запрос.УстановитьПараметр("ДоговорГривна", ?(ВыборкаДоговор.Следующий(), ВыборкаДоговор.Ссылка, "Неизвестно"));
	Запрос.УстановитьПараметр("Валюта_841",	Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("95916050-fdb7-11e2-883c-001e673c80fc")));
	Запрос.УстановитьПараметр("Валюта_844",	Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор("0f57b44a-b077-11e4-80ea-001e676b0175")));
	Запрос.УстановитьПараметр("ВалютаУпрУчета",	Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ГраницаДатаНачИскл", Новый Граница(ДатаНачала, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ГраницаДатаНач", Новый Граница(ДатаНачала, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаДатаКон", Новый Граница(ДатаОкончания, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Номенклатура", 	Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор("7833fff5-4336-11e0-9f98-001517115d85")));
 	Запрос.Текст = ОбъектОтчет.ПолучитьТекстЗапроса();
		
	РезультатПакета 	= Запрос.ВыполнитьПакет();
	
	Выборка 			= РезультатПакета[8].Выбрать();
	СуммаКонечныйДолг 	= ?(Выборка.Следующий(), Выборка.СуммаКонечныйДолг, 0);
	
	Выборка = РезультатПакета[13].Выбрать();
	СуммаКонечныйДолгГРН = ?(Выборка.Следующий(), Выборка.СуммаКонечныйДолгГРН, 0);
	
	
	Выборка 			= РезультатПакета[18].Выбрать();
	СуммаНачальныйДолг 	= ?(Выборка.Следующий(), Выборка.СуммаНачальныйДолг, 0);
	
	Выборка 			= РезультатПакета[23].Выбрать();
	СуммаНачальныйДолгГРН 	= ?(Выборка.Следующий(), Выборка.СуммаНачальныйДолгГРН, 0);

	
	Выборка 			= РезультатПакета[27].Выбрать();
	ОборотПоКонтрагенту = ?(Выборка.Следующий(), Выборка.ОборотПоКонтрагенту, 0);
	
	Выборка 			= РезультатПакета[30].Выбрать();
	ОборотПоКонтрагентуГРН = ?(Выборка.Следующий(), Выборка.ОборотПоКонтрагентуГРН, 0);
	
	ОбластьЗаголовок.Параметры.Контрагент 			= Партнер;
	ОбластьЗаголовок.Параметры.СтрПериод 			= "Период: "+ Формат(ДатаНачала,"ДФ=""дд.ММ.гг""")+" - "+Формат(ДатаОкончания, "ДФ=""дд.ММ.гг""");
	
	ОбластьЗаголовок.Параметры.ОборотПоКонтрагенту 	  = ОборотПоКонтрагенту;
	ОбластьЗаголовок.Параметры.ОборотПоКонтрагентуГРН = ОборотПоКонтрагентуГРН;
	
	ОбластьЗаголовок.Параметры.СуммаНачальныйДолг	= СуммаНачальныйДолг;
	ОбластьЗаголовок.Параметры.СуммаНачальныйДолгГРН= СуммаНачальныйДолгГРН;
	
	ОбластьЗаголовок.Параметры.СуммаКонечныйДолг	= СуммаКонечныйДолг;
	ОбластьЗаголовок.Параметры.СуммаКонечныйДолгГРН	= СуммаКонечныйДолгГРН;
	


	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

		
	ВыборкаДокДвижения 	= РезультатПакета[33].Выбрать();

	
	Пока ВыборкаДокДвижения.Следующий() Цикл
		
		Если Найти(ВыборкаДокДвижения.ДокументДвиженияКомментарий, "Автоматический перезачет бонусов из колонки Поставщик в колонку Клиент по документу") <> 0 Тогда Продолжить; КонецЕсли;
		Если Найти(ВыборкаДокДвижения.ДокументДвиженияКомментарий, "Автосписание ДС по документу:") <> 0 Тогда Продолжить; КонецЕсли;
		Если Найти(ВыборкаДокДвижения.ДокументДвиженияКомментарий, "Автосписание ДС по документу:") <> 0 Тогда Продолжить; КонецЕсли;
		Если Найти(ВыборкаДокДвижения.ДокументДвиженияКомментарий, "Автосведения расчетов по партнерам ЗП") <> 0 Тогда Продолжить; КонецЕсли;
		
		РасшифроватьПоНоменклатуре 	 		= Ложь;
		РасшифроватьПоНачислениюДоходы	 	= Ложь;
		РасшифроватьПоНачислениюРасходы		= Ложь;
		стрСумма					 		= "";
		
		Если ВыборкаДокДвижения.ДокументДвиженияКомментарий	= "" Тогда
			стрПримечание = "";
		Иначе
			стрПримечание = ", " + ВыборкаДокДвижения.ДокументДвиженияКомментарий;
		КонецЕсли;
		
		МетаданныеДокумента = ВыборкаДокДвижения.ДокументДвижения.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
			_В = Строка(ВыборкаДокДвижения.ВалютаДокумента);
			_С = ВыборкаДокДвижения.ДокументДвижения.СуммаДокумента;
			Если ВыборкаДокДвижения.ДокументДвиженияКомментарий	= "" Тогда
				стрПримечание = "" + Символы.ПС + "[Сумма всего документа: " + _С + " " + _В + "]";
			Иначе
				стрПримечание = "" + Символы.ПС + "[Сумма всего документа: " + _С + " " + _В + "], " + ВыборкаДокДвижения.ДокументДвиженияКомментарий;
			КонецЕсли;

			 Если ВыборкаДокДвижения.ВалютаДокумента <> ВыборкаДокДвижения.ВалютаВзаиморасчетов 
			 И	 ВыборкаДокДвижения.ВалютаДокумента <> Справочники.Валюты.ПустаяСсылка() Тогда
					
				Если ВыборкаДокДвижения.ГривневаяОперация = 0 Тогда
					стрСумма = "(" + Окр(ВыборкаДокДвижения.СуммаРасход * ВыборкаДокДвижения.КурсДокумента, 1) + " " + _В + " по курсу : " + Формат(ВыборкаДокДвижения.КурсДокумента, "ЧЦ=15; ЧДЦ=2") + ")";
				Иначе
					стрСумма = "(" + Окр(ВыборкаДокДвижения.СуммаРасходГ / ВыборкаДокДвижения.КурсДокумента, 1)  + " " + _В + " по курсу : " + Формат(ВыборкаДокДвижения.КурсДокумента, "ЧЦ=15; ЧДЦ=2") + ")";
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
			
			Если ВыборкаДокДвижения.ДокументДвижения.Товары.Количество() Тогда
				РасшифроватьПоНоменклатуре = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокДвижения.ДокументДвижения) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			Если ВыборкаДокДвижения.ДокументДвижения.Доходы.Количество() Тогда
				РасшифроватьПоНачислениюДоходы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ВыборкаДокДвижения.ДокументДвижения) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
			Если ВыборкаДокДвижения.ДокументДвижения.Расходы.Количество() Тогда
				РасшифроватьПоНачислениюРасходы = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьДокументДвижения.Параметры.Заполнить(ВыборкаДокДвижения);
		ОбластьДокументДвижения.Параметры.Примечание =""+СокрЛП(ВыборкаДокДвижения.ДокументДвиженияОтветственный)+ стрПримечание + стрСумма;
			
		Если ВыборкаДокДвижения.ГривневаяОперация = 0 Тогда
			СуммаНачальныйДолг = СуммаНачальныйДолг  + ВыборкаДокДвижения.СуммаПриход - ВыборкаДокДвижения.СуммаРасход;
			ОбластьДокументДвижения.Параметры.Приход = ВыборкаДокДвижения.СуммаРасход;
			ОбластьДокументДвижения.Параметры.Расход = ВыборкаДокДвижения.СуммаПриход;
			ОбластьДокументДвижения.Параметры.Сальдо = СуммаНачальныйДолг;
		Иначе
			СуммаНачальныйДолгГРН = СуммаНачальныйДолгГРН  + ВыборкаДокДвижения.СуммаПриходГ - ВыборкаДокДвижения.СуммаРасходГ;
			ОбластьДокументДвижения.Параметры.ПриходГ = ВыборкаДокДвижения.СуммаРасходГ;
			ОбластьДокументДвижения.Параметры.РасходГ = ВыборкаДокДвижения.СуммаПриходГ;
			ОбластьДокументДвижения.Параметры.СальдоГ = СуммаНачальныйДолгГРН;	
		КонецЕсли;
		
		//Вывели документ движения
		ТабДок.Вывести(ОбластьДокументДвижения, 1);
				
		Если РасшифроватьПоНоменклатуре Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = ПолучитьТекстЗапросаРасшифровкиНоменклатуры(ВыборкаДокДвижения.ВидДвижения, ВыборкаДокДвижения.ДокументДвижения.Метаданные().Имя);
			Запрос.УстановитьПараметр("Ссылка", ВыборкаДокДвижения.ДокументДвижения);
			Запрос.УстановитьПараметр("Свойство", СвойствоГарантия);
			Запрос.УстановитьПараметр("ВидДвижения", ВыборкаДокДвижения.ВидДвижения);
			Запрос.УстановитьПараметр("ГривневаяОперация", ВыборкаДокДвижения.ГривневаяОперация);
			РезультатПакета = Запрос.ВыполнитьПакет();
			
			ТаблицаСерийныеНомера = РезультатПакета[2].Выгрузить();
			ВыборкаТовары = РезультатПакета[3].Выбрать();
			
			Пока ВыборкаТовары.Следующий() Цикл
				
				ОбластьДетальныхЗаписей = МакетОтчета.ПолучитьОбласть("Детали");
				ЗаполнитьЗначенияСвойств(ОбластьДетальныхЗаписей.Параметры, ВыборкаТовары);
				ТабДок.Вывести(ОбластьДетальныхЗаписей, 2);
				
				ПараметрыОтбораНоменклатура.Вставить("Номенклатура", ВыборкаТовары.Номенклатура);
				РезультатПоиска = ТаблицаСерийныеНомера.НайтиСтроки(ПараметрыОтбораНоменклатура);
				Если РезультатПоиска.Количество() > 0 Тогда
					ОбластьСерийныеНомера	= МакетОтчета.ПолучитьОбласть("СерийныеНомера");
	               	Для каждого ЭлементМассива Из РезультатПоиска Цикл
				   		ОбластьСерийныеНомера.Параметры.СерийныйНомер = ЭлементМассива.СерийныеНомера;
						ТабДок.Вывести(ОбластьСерийныеНомера, 3);
				   КонецЦикла; 
				КонецЕсли;
		
			КонецЦикла;
			
		КонецЕсли;
		
		Если РасшифроватьПоНачислениюДоходы Тогда
			
			СтрокаТаблицы = ВыборкаДокДвижения.ДокументДвижения.Доходы[0];
			Содержание	  = СтрокаТаблицы.Содержание + ПолучитьРасшифрокуФормулыНачисления(ВыборкаДокДвижения.ДокументДвижения);
			
			ОбластьДетальныхЗаписей.Параметры.НоменклатураКод				= "";
			ОбластьДетальныхЗаписей.Параметры.НоменклатураАртикул			= "";			
			ОбластьДетальныхЗаписей.Параметры.НоменклатураПредставление		= Содержание;
			ОбластьДетальныхЗаписей.Параметры.Гарантия 						= "";
			ОбластьДетальныхЗаписей.Параметры.Кво							= СтрокаТаблицы.Количество;
			ОбластьДетальныхЗаписей.Параметры.Цена      					= СтрокаТаблицы.Цена;
			ОбластьДетальныхЗаписей.Параметры.Приход    					= "";
			ОбластьДетальныхЗаписей.Параметры.Расход    					= "";
			ОбластьДетальныхЗаписей.Параметры.ПриходГ   					= "";
			ОбластьДетальныхЗаписей.Параметры.РасходГ   					= СтрокаТаблицы.СуммаСНДС;
			
			ТабДок.Вывести(ОбластьДетальныхЗаписей, 2);
			
		КонецЕсли;
		
		Если РасшифроватьПоНачислениюРасходы Тогда
			
			СтрокаТаблицы = ВыборкаДокДвижения.ДокументДвижения.Расходы[0];
			Содержание	  = СтрокаТаблицы.Содержание + ПолучитьРасшифрокуФормулыНачисления(ВыборкаДокДвижения.ДокументДвижения);
			
			ОбластьДетальныхЗаписей.Параметры.НоменклатураКод				= "";
			ОбластьДетальныхЗаписей.Параметры.НоменклатураАртикул			= "";			
			ОбластьДетальныхЗаписей.Параметры.НоменклатураПредставление		= Содержание;
			ОбластьДетальныхЗаписей.Параметры.Гарантия 						= "";
			ОбластьДетальныхЗаписей.Параметры.Кво							= СтрокаТаблицы.Количество;
			ОбластьДетальныхЗаписей.Параметры.Цена      					= СтрокаТаблицы.Цена;
			ОбластьДетальныхЗаписей.Параметры.Приход    					= "";
			ОбластьДетальныхЗаписей.Параметры.Расход    					= "";
			ОбластьДетальныхЗаписей.Параметры.ПриходГ   					= СтрокаТаблицы.СуммаСНДС;
			ОбластьДетальныхЗаписей.Параметры.РасходГ   					= "";
			
			ТабДок.Вывести(ОбластьДетальныхЗаписей, 2);
			
		КонецЕсли;
		
		ОбластьДокументДвижения = МакетОтчета.ПолучитьОбласть("ДокументДвижения");
		
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	Возврат ТабДок;

КонецФункции

Функция ПолучитьРасшифрокуФормулыНачисления(ДокументНачисления)

	Запрос = Новый Запрос("ВЫБРАТЬ
			                   |	Формула				КАК Формула,
			                   |	РасшифровкаФормулы  КАК РасшифровкаФормулы
			                   |ИЗ
			                   |	РегистрСведений.ЗП_ВыполненныеНачисления
			                   |ГДЕ
			                   |	ДокументНачисления = &ДокументНачисления");
							   
	Запрос.УстановитьПараметр("ДокументНачисления", ДокументНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ПустаяСтрока(Выборка.Формула) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(Выборка.РасшифровкаФормулы) Тогда
		Возврат "";
	КонецЕсли;
	
	Расшифровка = "";
	Попытка Расшифровка = Строка(Вычислить(СтрЗаменить(Выборка.РасшифровкаФормулы, Символы.ПС, ""))); Исключение Расшифровка = ""; КонецПопытки;					
						
	Возврат ", " + Расшифровка;					

КонецФункции // ПолучитьФормулуИРасшифровкуНачисления()

Функция ЗаполнитьНаименованияПоИдентификаторам(ТаблицаИдентификаторов)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ТаблицаИдентификаторов.Идентификатор КАК Строка(96))	КАК Идентификатор,
	                      |	ВЫРАЗИТЬ(ТаблицаИдентификаторов.Значение КАК Строка(15))			КАК Значение
	                      |ПОМЕСТИТЬ ТаблицаИдентификаторов
	                      |ИЗ
	                      |	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ИдентификаторСлужебный	КАК ИдентификаторСлужебный,
	                      |	Идентификатор			КАК Идентификатор
	                      |ПОМЕСТИТЬ ТаблицаСлужебныхИдентификаторов
	                      |ИЗ
	                      |	Справочник.ЗП_ПоказателиРасчетаЗарплаты
	                      |ГДЕ
	                      |	ПометкаУдаления = ЛОЖЬ
	                      |	И Идентификатор В
	                      |			(ВЫБРАТЬ
	                      |				Идентификатор
	                      |			ИЗ
	                      |				ТаблицаИдентификаторов)
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ИдентификаторСлужебный,
	                      |	Идентификатор
	                      |ИЗ
	                      |	Справочник.ЗП_ВидыРасчетов
	                      |ГДЕ
	                      |	ПометкаУдаления = ЛОЖЬ
	                      |	И Идентификатор В
	                      |			(ВЫБРАТЬ
	                      |				Идентификатор
	                      |			ИЗ
	                      |				ТаблицаИдентификаторов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаИдентификаторов.Идентификатор									КАК Идентификатор,
	                      |	ТаблицаИдентификаторов.Значение											КАК Значение,
	                      |	ЕСТЬNULL(ТаблицаСлужебныхИдентификаторов.ИдентификаторСлужебный, """") 	КАК ИдентификаторСлужебный
	                      |ИЗ
	                      |	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСлужебныхИдентификаторов КАК ТаблицаСлужебныхИдентификаторов
	                      |		ПО ТаблицаИдентификаторов.Идентификатор = ТаблицаСлужебныхИдентификаторов.Идентификатор
						  |ГДЕ
						  |	ЕСТЬNULL(ТаблицаСлужебныхИдентификаторов.ИдентификаторСлужебный, """") <> """"");
						  
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьНаименованиеФормулыПоИндентификатору()

Процедура Записать_XLS_HTML4(МакетОтчета, ИмяФайла)
	МакетОтчета.Записать(ИмяФайла + ".html", ТипФайлаТабличногоДокумента.HTML4);	
	МакетОтчета.Записать(ИмяФайла + ".xls", ТипФайлаТабличногоДокумента.XLS97);	
КонецПроцедуры

Функция ПолучитьВнешнийОтчет(ИмяВнешнегоОтчета)
	Ссылка 		    = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяВнешнегоОтчета);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Внешний отчет с именем не найден: " + ИмяВнешнегоОтчета;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОтчета  	= ВнешниеОтчеты.Подключить(АдресХранилища, , Ложь);
	ВнешнийОтчетОбъект = ВнешниеОтчеты.Создать(ИмяВнОтчета);
	Возврат ВнешнийОтчетОбъект;
КонецФункции

Функция ПолучитьТекстЗапросаРасшифровкиНоменклатуры(ВидДвижения, ИмяДокумента)

	ТекстЗапроса = "
		// 0.
		|ВЫБРАТЬ
		|	Номенклатура	                КАК Номенклатура,
		|	ПОДСТРОКА(Номенклатура.Код, 6, 6)		КАК НоменклатураКод,
		|	Номенклатура.Артикул 			КАК НоменклатураАртикул,
		|	Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	Количество                      КАК Кво,
		|	Цена							КАК Цена,
		|	ВЫБОР
		|		КОГДА &ВидДвижения = 0
		|		ТОГДА 0
		|		КОГДА &ГривневаяОперация = 1
		|		ТОГДА 0
		|		ИНАЧЕ Сумма
		|	КОНЕЦ							КАК Приход,
		|	ВЫБОР
		|		КОГДА &ВидДвижения = 1
		|		ТОГДА 0
		|		КОГДА &ГривневаяОперация = 1
		|		ТОГДА 0
		|		ИНАЧЕ Сумма
		|	КОНЕЦ							КАК Расход,
		|	ВЫБОР
		|		КОГДА &ВидДвижения = 0
		|		ТОГДА 0
		|		КОГДА &ГривневаяОперация = 0
		|		ТОГДА 0
		|		ИНАЧЕ Сумма
		|	КОНЕЦ							КАК ПриходГ,
		|	ВЫБОР
		|		КОГДА &ВидДвижения = 1
		|		ТОГДА 0
		|		КОГДА &ГривневаяОперация = 0
		|		ТОГДА 0
		|		ИНАЧЕ Сумма
		|	КОНЕЦ							КАК РасходГ
		|ПОМЕСТИТЬ КешТоваров
		|ИЗ
		|	Документ." + ИмяДокумента + ".Товары
		|ГДЕ
		|	Ссылка = &Ссылка
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура	
		|;
		// 1.
		|ВЫБРАТЬ
		|	Ссылка		КАК Номенклатура,
		|	Значение 	КАК Гарантия
		|ПОМЕСТИТЬ КешГарантия
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты 	
		|ГДЕ
		|	Ссылка В (Выбрать Номенклатура ИЗ КешТоваров)
		|И 	Свойство = &Свойство
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка		
		|;
		// 2.
		|ВЫБРАТЬ
		|	Номенклатура,
		|	СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры
		|ГДЕ 
		|	ВЫРАЗИТЬ(Регистратор КАК Документ." + ИмяДокумента + ") = &Ссылка 
		|	
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Номенклатура,
		|	СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры
		|ГДЕ                                
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.ПриходныйОрдерНаТовары).Распоряжение = &Ссылка
		|
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Номенклатура,
		|	СерийныеНомера
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры
		|ГДЕ                                
		|	ВЫРАЗИТЬ(Регистратор КАК Документ.РасходныйОрдерНаТовары).Распоряжение = &Ссылка
		|;
		// 3.
		|ВЫБРАТЬ
		|	КешТоваров.Номенклатура,
		|	КешТоваров.НоменклатураКод,
		|	КешТоваров.НоменклатураАртикул,
		|	КешТоваров.НоменклатураПредставление,
		|	КешТоваров.Кво,
		|	КешТоваров.Цена,
		|	КешТоваров.Приход,
		|	КешТоваров.Расход,
		|	КешТоваров.ПриходГ,
		|	КешТоваров.РасходГ,
		|	КешГарантия.Гарантия			
		|ИЗ
		|	КешТоваров КАК КешТоваров
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ КешГарантия КАК КешГарантия
		|ПО	КешГарантия.Номенклатура = КешТоваров.Номенклатура
		// 4.
		|;
		|УНИЧТОЖИТЬ КешТоваров;
		|УНИЧТОЖИТЬ КешГарантия;
		|";
	Возврат ТекстЗапроса;

КонецФункции

Функция МесяцПрописью(Дата)
	
	Если Месяц(Дата) = 1 Тогда
		Возврат "January";
	ИначеЕсли Месяц(Дата) = 2 Тогда
		Возврат "February";
	ИначеЕсли Месяц(Дата) = 3 Тогда
		Возврат "March";
	ИначеЕсли Месяц(Дата) = 4 Тогда
		Возврат "April";
	ИначеЕсли Месяц(Дата) = 5 Тогда
		Возврат "May";
	ИначеЕсли Месяц(Дата) = 6 Тогда
		Возврат "June";
	ИначеЕсли Месяц(Дата) = 7 Тогда
		Возврат "July";
	ИначеЕсли Месяц(Дата) = 8 Тогда
		Возврат "August";
	ИначеЕсли Месяц(Дата) = 9 Тогда
		Возврат "September";
	ИначеЕсли Месяц(Дата) = 10 Тогда
		Возврат "October";
	ИначеЕсли Месяц(Дата) = 11 Тогда
		Возврат "November";
    ИначеЕсли Месяц(Дата) = 12 Тогда
		Возврат "December";
	Иначе  
		Возврат "Unknown";
	КонецЕсли;
	
КонецФункции


#КонецОбласти 

#КонецОбласти 

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.82";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Автоматическое начисление зарплаты");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Автоматическое начисление зарплаты [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Автоматическое начисление зарплаты [" + Версия + "]", "АНЗ", "ОткрытиеФормы", Ложь, "АНЗ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти
