#Область ПрограммныйИнтерфейс

// Процедура выполняет движения по регистру ОбработкаЗаказовКлиентов
// 
// Параметры:
//  Источник 		- ДокументОбъект.ЗаказКлиента 	- Документ объект заказ клиента
//  Отказ			- Булево                     	- Выявлены ошибки при проведении документа
//  РежимПроведения - РежимПроведенияДокумента		- Режим проведения документа
//
Процедура ВыполнитьДвижениеОбработкаЗаказов(Источник, Отказ, РежимПроведения) Экспорт 
	ТекущийСтатус = Источник.Статус;

	Если ТекущийСтатус =Перечисления.СтатусыЗаказовКлиентов.КОбеспечению 
		ИЛИ ТекущийСтатус   = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда
		ЗаписатьДвижениеОбработкаЗаказов(Источник); 	
	Иначе
		Если Источник.ЭтоНовый() Тогда
		    Возврат;			
		КонецЕсли;
		УдалитьДвижениеОбработкаЗаказов(Источник, Отказ);	
	КонецЕсли;

КонецПроцедуры

// Процедура удаления движения по регистру ОбработкаЗаказовКлиентов
// 
// Параметры:
//  Источник 		- ДокументОбъект.ЗаказКлиента 	- Документ объект заказ клиента
//  Отказ			- Булево                     	- Выявлены ошибки при удалении документа
//
Процедура УдалитьДвижениеОбработкаЗаказов(Источник, Отказ) Экспорт 
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаУдаленияЗаписиОбработкаЗаказов();
	Запрос.УстановитьПараметр("Заказ", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;			
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	    НаборЗаписей = РегистрыСведений.ОбработкаЗаказовКлиентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказКлиента.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.КодСтроки.Установить(Выборка.КодСтроки);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.СоглашениеСПоставщиком.Установить(Выборка.СоглашениеСПоставщиком);  
		НаборЗаписей.Записать();	
	КонецЦикла
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура записивает  движения в регистр ОбработкаЗаказовКлиентов
// 
// Параметры:
//  Источник 		- ДокументОбъект.ЗаказКлиента 	- Документ объект заказ клиента
//
Процедура ЗаписатьДвижениеОбработкаЗаказов(Источник)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбработкаЗаказов();
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	РезультатПакета  = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаНаУдаления = РезультатПакета[РезультатПакета.ВГраница()-1];
	РезультатЗапросаНаЗапись   = РезультатПакета[РезультатПакета.ВГраница()];
	
	Если НЕ РезультатЗапросаНаУдаления.Пустой() Тогда
		Выборка = РезультатЗапросаНаУдаления.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОбработкаЗаказовКлиентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказКлиента.Установить(Выборка.ЗаказКлиента);
			НаборЗаписей.Отбор.КодСтроки.Установить(Выборка.КодСтроки);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;

	
	Если НЕ РезультатЗапросаНаЗапись.Пустой() Тогда
		Выборка = РезультатЗапросаНаЗапись.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОбработкаЗаказовКлиентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказКлиента.Установить(Выборка.ЗаказКлиента);
			НаборЗаписей.Отбор.КодСтроки.Установить(Выборка.КодСтроки);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДвижениеОбработкаЗаказов(Источник)

#Область ТекстЗапроса

// Получить текст запроса всех записей по Источнику
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  Строка   - текст запроса
//
Функция ТекстЗапросаУдаленияЗаписиОбработкаЗаказов()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КодСтроки,
	               |	Номенклатура,
	               |	СоглашениеСПоставщиком
	               |ИЗ
	               |	РегистрСведений.ОбработкаЗаказовКлиентов
	               |ГДЕ
	               |	ЗаказКлиента = &Заказ";
	
	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаУдаленияЗаписиОбработкаЗаказов()

// Получить текст запроса записи в регистр ОбработкаЗаказов
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  Строка   - текст запроса
//
Функция ТекстЗапросаОбработкаЗаказов()
	ТекстЗапроса = "ВЫБРАТЬ
			|	Ссылка 				КАК ЗаказКлиента,
			|	КодСтроки 			КАК КодСтроки,
			|	Номенклатура 		КАК Номенклатура,
			|	КоличествоУпаковок 	КАК КоличествоВЗаказе,
			|	ДатаОтгрузки
			|ПОМЕСТИТЬ ДокЗаказКлиента
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|ГДЕ
			|	Ссылка = &Ссылка
			|	И ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
			|	И Отменено = ЛОЖЬ
			|	И ОтменитьЗаказПодЗаказ = ЛОЖЬ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КодСтроки,
			|	Номенклатура
			|;
			|
			////////////////////////////////////////////////////////////////////////////////
			// 1
			|ВЫБРАТЬ
			|	ДокЗаказКлиента.ЗаказКлиента,
			|	ДокЗаказКлиента.КодСтроки,
			|	ДокЗаказКлиента.Номенклатура,
			|	ДокЗаказКлиента.КоличествоВЗаказе,
			|	ДокЗаказКлиента.ДатаОтгрузки,
			|	ВЫБОР
			|		КОГДА ДокЗаказКлиента.КоличествоВЗаказе = ЕСТЬNULL(ОбработкаЗаказовКлиентов.КоличествоВЗаказе, 0)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НоваяЗапись
			|ПОМЕСТИТЬ СписокНоменклатуры
			|ИЗ
			|	ДокЗаказКлиента КАК ДокЗаказКлиента
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработкаЗаказовКлиентов КАК ОбработкаЗаказовКлиентов
			|ПО ДокЗаказКлиента.ЗаказКлиента = ОбработкаЗаказовКлиентов.ЗаказКлиента
			|И ДокЗаказКлиента.КодСтроки = ОбработкаЗаказовКлиентов.КодСтроки
			|И ДокЗаказКлиента.Номенклатура = ОбработкаЗаказовКлиентов.Номенклатура
			|;
			////////////////////////////////////////////////////////////////////////////////
			// 2
			|ВЫБРАТЬ
			|	ЗаказКлиента,
			|	КодСтроки,
			|	Номенклатура,
			|	СоглашениеСПоставщиком
			|ИЗ
			|	РегистрСведений.ОбработкаЗаказовКлиентов
			|ГДЕ
			|	ЗаказКлиента = &Ссылка
			|	И (КодСтроки, Номенклатура) НЕ В (ВЫБРАТЬ КодСтроки, Номенклатура  ИЗ ДокЗаказКлиента)
			|;
			////////////////////////////////////////////////////////////////////////////////
			// 3	
			|ВЫБРАТЬ
			|	СписокНоменклатуры.ЗаказКлиента,
			|	СписокНоменклатуры.КодСтроки,
			|	СписокНоменклатуры.Номенклатура,
			|	СписокНоменклатуры.КоличествоВЗаказе,
			|	ЕСТЬNULL(АктНоменклатуры.ДатаПоставки, ДАТАВРЕМЯ(0001,01,01,0,0,0)) 										КАК ДатаАктуальности,
			|	ЕСТЬNULL(АктНоменклатуры.СоглашениеСПоставщиком, ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)) КАК СоглашениеСПоставщиком,
			|	ЕСТЬNULL(АктНоменклатуры.Цена, 0) 																			КАК ЦенаВЗаказеПоставщика
			|ИЗ
			|	СписокНоменклатуры КАК СписокНоменклатуры
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(
			|		,
			|		Номенклатура В
			|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				СписокНоменклатуры.Номенклатура
			|			ИЗ
			|				СписокНоменклатуры)) КАК АктНоменклатуры
			|ПО (АктНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура)
			|И АктНоменклатуры.Актуально = ИСТИНА
			|И АктНоменклатуры.ГарантияДоставки=ИСТИНА
			|
			|ГДЕ
			|	СписокНоменклатуры.НоваяЗапись = ИСТИНА";
	
	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаУдаленияЗаписиОбработкаЗаказов()

#КонецОбласти

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.4";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Подписка на документ заказ клиента сервер");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Подписка на документ заказ клиента сервер [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Подписка на документ заказ клиента сервер [" + Версия + "]", "ПодпискаНаДокументЗаказКлиентаСервер", "ОткрытиеФормы", Ложь, "ПодпискаНаДокументЗаказКлиентаСервер");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти


