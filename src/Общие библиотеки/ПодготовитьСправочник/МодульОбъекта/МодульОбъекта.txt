
#Область ПрограммныйИнтерфейс

// Подготавливает управляемую форму справочника к работе 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьСправочникКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	ПодготовитьСправочникСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
КонецПроцедуры //ПодготовитьСправочникКРаботе()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Подготавливает форму справочника к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьСправочникСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Реквизиты = Новый Массив; 
	Реквизиты.Добавить(Новый РеквизитФормы("ПодготовитьСправочник", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);	
	ЭтаФорма.ПодготовитьСправочник = ИмяОбработки;

	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		ПодготовитьСправочникСоглашенияСПоставщиками(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры") Тогда
		ПодготовитьСправочникПартнеры(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ПодготовитьСправочникСсылка()

// Подготавливает форму справочника "Соглашения с поставщиками" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьСправочникСоглашенияСПоставщиками(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеФормыСтруктура = ЭтаФорма.Объект;
	Если ДанныеФормыСтруктура.ВерсияДанных="" Тогда 
		ДанныеФормыСтруктура.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	КонецЕсли;
	
КонецПроцедуры //ПодготовитьСправочникСоглашенияСПоставщиками()


// Подготавливает форму справочника "Партнеры" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьСправочникПартнеры(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	мЭлементы = ЭтаФорма.Элементы;
	Объект    = ЭтаФорма.Объект;

#Область ДопИнформацияНаQRКод
	ГруппаДополнительныеРеквизиты = мЭлементы.Найти("ГруппаДополнительныеРеквизиты");

	//http://r.ktc-ua.com/issues/4830
	Если ГруппаДополнительныеРеквизиты <> Неопределено Тогда
		
		Параметры = Новый Структура;	
		Параметры.Вставить("Имя"						,"ктс_ГруппаДопИнформацияНаQRКод");
		Параметры.Вставить("Вид"						,ВидГруппыФормы.ОбычнаяГруппа);
		Параметры.Вставить("ТипЭлемента"				,Тип("ГруппаФормы"));
		Параметры.Вставить("Заголовок"					,НСтр("ru='Дополнительная информация для отправки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("Поведение"					,ПоведениеОбычнойГруппы.Обычное);
		Параметры.Вставить("Отображение"				,ОтображениеОбычнойГруппы.ОбычноеВыделение);
		Параметры.Вставить("Группировка"				,ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		Параметры.Вставить("ШиринаПодчиненныхЭлементов"	,ШиринаПодчиненныхЭлементовФормы.Авто);
		Параметры.Вставить("ОтображатьЗаголовок"		,Истина);		
		ГруппаДопИнформацияНаQRКод = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(мЭлементы, Параметры, ГруппаДополнительныеРеквизиты);
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя"					,"ВыводитьДопИнформациюНаQRКод");
		Параметры.Вставить("Заголовок"				,"Выводить информацию на QR код");
		Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
		Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным"			,"Объект.ВыводитьДопИнформациюНаQRКод");
		Параметры.Вставить("ПоложениеЗаголовка"		,ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("ВидФлажка"				,ВидФлажка.Флажок);		
		Параметры.Вставить("Подсказка"				,НСтр("ru='При комплектации ЗСЦ НЕ через перевозчика на печатной форме с QR-кодом будет отображаться этот доп. текст.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("ОтображениеПодсказки"	,ОтображениеПодсказки.Кнопка);
		ЭлементВыводитьДопИнформациюНаQRКод = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(мЭлементы, Параметры, ГруппаДопИнформацияНаQRКод);
		ЭлементВыводитьДопИнформациюНаQRКод.УстановитьДействие("ПриИзменении", "ВыводитьДопИнформациюНаQRКодПриИзменении");
	
		Параметры = Новый Структура;
		Параметры.Вставить("Имя"					,"ДополнительнаяИнформацияНаQRКод");
		Параметры.Вставить("Заголовок"				,"Доп. текст");
		Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным"			,"Объект.ДополнительнаяИнформацияНаQRКод");
		Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));		
		Параметры.Вставить("ОтображениеПодсказки"	,ОтображениеПодсказки.Кнопка);
		Если Не Объект.ВыводитьДопИнформациюНаQRКод Тогда
			Параметры.Вставить("Доступность", Ложь);
		КонецЕсли;
		ЭлементДополнительнаяИнформацияНаQRКод = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(мЭлементы, Параметры, ГруппаДопИнформацияНаQRКод);
	КонецЕсли;
 	
 #КонецОбласти
 	
#Область ВзаимодействияОбОтказеОтОбзвона

	ГруппаОбщаяИнформация = мЭлементы.Найти("ГруппаОбщаяИнформация");
	Если ГруппаОбщаяИнформация <> Неопределено И (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("КТС_ПросмотрВзаимодействияОбОтказеОтОбзвона")) Тогда
		
		Параметры = Новый Структура;	
		Параметры.Вставить("Имя", "ктс_ГруппаРезультатыОбзвона");
		Параметры.Вставить("Вид", ВидГруппыФормы.ОбычнаяГруппа);
		Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
		Параметры.Вставить("Заголовок", НСтр("ru='Запрет обзвона партнера (клиент против обзвона)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("Поведение", ПоведениеОбычнойГруппы.Обычное);
		Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.ОбычноеВыделение);
		Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		Параметры.Вставить("ШиринаПодчиненныхЭлементов", ШиринаПодчиненныхЭлементовФормы.Авто);
		Параметры.Вставить("Подсказка", НСтр("ru='В группе работник сервисного центра указывает запрет обзвона клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Авто);
		Параметры.Вставить("ОтображатьЗаголовок", Истина);		
		ГруппаРезультатыОбзвона = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(мЭлементы, Параметры, ГруппаОбщаяИнформация);
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "КлиентПротивОбзвона");
		Параметры.Вставить("Заголовок",	"Клиент против обзвона");
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "Объект.КлиентПротивОбзвона");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("ВидФлажка", ВидФлажка.Флажок);		
		Параметры.Вставить("Подсказка", НСтр("ru='Флажок необходимо установить если партнер отказался от обзвона по результатам сервисных ремонтов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		ЭлементКлиентПротивОбзвона = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(мЭлементы, Параметры, ГруппаРезультатыОбзвона);
		ЭлементКлиентПротивОбзвона.УстановитьДействие("ПриИзменении", "КлиентПротивОбзвонаПриИзменении");
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ВзаимодействиеПоОбзвону");
		Параметры.Вставить("Заголовок",	"Взаимодействие по обзвону");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "Объект.ВзаимодействиеПоОбзвону");
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));		
		Параметры.Вставить("Подсказка", НСтр("ru='Необходимо указать взаимодействие по которому партнер отказался от обзвона по сервисным ремонтам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Если Не Объект.КлиентПротивОбзвона Тогда
			Параметры.Вставить("Доступность", Ложь);
		КонецЕсли;
		ЭлементВзаимодействиеПоОбзвону = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(мЭлементы, Параметры, ГруппаРезультатыОбзвона);
		ЭлементВзаимодействиеПоОбзвону.УстановитьДействие("НачалоВыбора", "ВзаимодействиеПоОбзвонуНачалоВыбора");
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры //ПодготовитьСправочникПартнеры()


#КонецОбласти 

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.1";
	Наименование = "ПодготовитьСправочник";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", Наименование);
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", Наименование+" [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Наименование+" [" + Версия + "]", "МАК", "ОткрытиеФормы", Ложь, "МАК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции //СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции //ПолучитьТаблицуКоманд()

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры //ДобавитьКоманду()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры //ПодменитьДействиеУправляемоеПриложение()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()

// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()


// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти

