
////////////////////////////////////////////////////////////////////////////////
//  ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ПриЗаписиСправочника(Источник, Отказ) Экспорт
	Если 		ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура")		Тогда ОптимизироватьНоменклатуруСправочник(Источник, Отказ) 
	ИначеЕсли	ТипЗнч(Источник) = Тип("СправочникОбъект.Производители")	Тогда СоздатьМаркуБрендСправочник(Источник, Отказ) 
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОптимизироватьНоменклатуруСправочник(Источник, Отказ)
	
	Если НЕ (Отказ ИЛИ Источник.ЭтоГруппа) Тогда
		
		НаборЗаписей = РегистрыСведений.Модуль_НоменклатураПоГруппам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Источник.Ссылка);
		НаборЗаписей.Записать();
		
		Родитель = Источник.Родитель;
		Пока НЕ Родитель.Пустая() Цикл
			
			НаборЗаписей = РегистрыСведений.Модуль_НоменклатураПоГруппам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Источник.Ссылка);
			НаборЗаписей.Отбор.Группа.Установить(Родитель);

		
			НоваяЗапись 				 = НаборЗаписей.Добавить();
			НоваяЗапись.Группа 			 = Родитель;
			НоваяЗапись.Номенклатура 	 = Источник.Ссылка;
			НоваяЗапись.ТипНоменклатуры  = Источник.ТипНоменклатуры;
			
			НаборЗаписей.Записать();
			
			Родитель = Родитель.Родитель;
			
		КонецЦикла;
		
		Сведение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("37b15946-1f8b-11e2-9d4d-001e673c80fc"));
		
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(Сведение);
		
		НоваяЗапись 			 = НаборЗаписей.Добавить();
		НоваяЗапись.Объект		 = Источник.Ссылка;
		НоваяЗапись.Свойство	 = Сведение;
		НоваяЗапись.Значение  	 = Формат(Число(Источник.Код), "ЧГ=0");
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМаркуБрендСправочник(Источник, Отказ)
	
	Если НЕ Отказ Тогда
		Марка = ПолучитьМаркуПроизводителя(Источник);
		Если НЕ Марка.Пустой() Тогда 
			Возврат;
		КонецЕсли;
		
		НовыйЭлементСправочника = Справочники.Марки.СоздатьЭлемент();
		НовыйЭлементСправочника.Наименование	= Источник.Наименование;
		НовыйЭлементСправочника.Производитель	= Источник.Ссылка;
		Попытка
			НовыйЭлементСправочника.Записать();
		Исключение
			Сообщение		= Новый СообщениеПользователю;
			Сообщение.Текст	= НСтр(ОписаниеОшибки(),"ru");
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМаркуПроизводителя(Производитель)
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Марки.Ссылка
	                      |ИЗ
	                      |	Справочник.Марки КАК Марки
	                      |ГДЕ
	                      |	НЕ Марки.ПометкаУдаления
	                      |	И Марки.Производитель = &Производитель");
	Запрос.УстановитьПараметр("Производитель",Производитель.Ссылка);
	Возврат Запрос.Выполнить();
КонецФункции
	

// НЕОБХОДИМО ДЛЯ ПОДКЛЮЧЕНИЯ ВНЕШНЕЙ ОБРАБОТКИ

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.0";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Оптимизация справочников при записи");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Оптимизация справочников при записи [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Оптимизация справочников при записи [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "ВПФ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


