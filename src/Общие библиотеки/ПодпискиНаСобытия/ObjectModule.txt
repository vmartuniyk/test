
////////////////////////////////////////////////////////////////////////////////
// Модуль используется  для реализации подписок на проведения документов
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


// Обработка подписки перед записью документов
// 
// Параметры:
//	Источник 	- ДокументОбъект 		- документ перед записью которого срабатывает подписка
//	Отказ	 	- Булево		  		- признак отмены транзакции
//	РежимЗаписи - РежимЗаписиДокумента  - режим записи документа перед записью которого срабатывает подписка
//
Процедура ПередЗаписьюДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	// Корректировка времени документа (если документ проводится будущей датой).
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") 			Тогда ПровестиКорректировкуВремени(Источник); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") 				Тогда ПровестиКорректировкуВремени(Источник); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента")						Тогда СкоректироватьВремяЗаказаКлиента(Источник, РежимЗаписи); КонецЕсли;
	
	// Проверка заказа на возможность перепроведения по обеспечению
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента")						Тогда ПроверитьЗаказПодОбеспечение(Источник, Отказ, РежимЗаписи, РежимПроведения); КонецЕсли;
	
	// Проведение заказа клиента по регистре «Обработка заказов»
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента")						Тогда ВыполнитьДвижениеОбработкаЗаказов(Источник, Отказ, РежимЗаписи, РежимПроведения); КонецЕсли;
	
	// Заполнение договора в документах «Возврат товаров от клмента» и «Возврат товаров поставщику»
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента")						Тогда ЗаполнитьДоговорВДокументах(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") 			Тогда ЗаполнитьДоговорВДокументах(Источник, Отказ, РежимЗаписи); КонецЕсли;
	
	// Проверка на отказ от проведения документа по причине не заполненого договора
	Если Отказ Тогда Возврат; КонецЕсли;
	
	// Установка желаемой даты поступления
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику")					Тогда УстановитьЖелаемуюДатуПоступления(Источник, Отказ, РежимЗаписи); КонецЕсли;
	
	// Выполнение передач между организациями
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику")			Тогда ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")  	Тогда ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") 				Тогда ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг")			Тогда ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеНедостачТоваров")			Тогда ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаНазначенияТоваров")	Тогда ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи); КонецЕсли;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда ПерезаполнитьВидыЗапасовПередачи(Источник, Отказ, РежимЗаписи); КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СборкаТоваров") Тогда 
		Если Источник.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
			ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи);
		Иначе
			СделатьПередачуПриРазборке(Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
// Процедура выполняет рассылку уведомлений про оплату по ел.почте  
Процедура ВыполнитьРассылкуПоРеквизитуИзБанковськогоСчета(Источник, Отказ, РежимПроведения) Экспорт
	Перем Тема;
	Перем Тело;
	Перем Кому;
	Перем ОтправлятьПисьмо;
	Перем УчетнаяЗаписьЭлектроннойПочты;

	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить(
					"ДополнительныеНастройкиОбработокМодификацииКонфигурации", 
					, 
					, 
					"ДополнительныеНастройкиОбработокМодификацииКонфигурации");
					
	Если НЕ ТипЗнч(Настройки)= Тип("Структура") Тогда 
		Возврат; 
	КонецЕсли;
		 
	Если НЕ Настройки.Свойство("СтандартнаяУчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаСДоплнительнимиСведениями();
	 
	Запрос.УстановитьПараметр("Объект", Источник.ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчетКонтрагента);
	УИД 		= Новый УникальныйИдентификатор("2e6d1adc-871b-11e2-8fd5-001e673c80fc");
	Свойство   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УИД);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	 
	Результат = Запрос.Выполнить();                                                                                                              
	                                                                                                                                             	        
	Если Результат.Пустой() Тогда 	 
		Возврат;  
	КонецЕсли; 
	 
	Выборка = Результат.Выбрать();
	Кому    = Новый Массив;
    БиблиотекаОбработок = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");

	ВыполнятьРассылку = Истина;
	
	Пока Выборка.Следующий() Цикл
		Адреса = Выборка.Значение;
		РазделительАдресов = РазобратьСтрокуВМассивПоРазделителю(Адреса, ",");
		Для каждого Адреса Из РазделительАдресов Цикл
			Кому.Добавить(Новый Структура("Адрес, Представление", Адреса,"")) ;
			Если БиблиотекаОбработок.ПроверитьЗаполнениеПочтовогоАдреса(Адреса) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Неверный адрес заполнения в банковском счете контрагента :%1'"),
										Адреса);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
				ВыполнятьРассылку = Ложь;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	Если Не ВыполнятьРассылку Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьЭлектроннойПочты =  Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("2fb392f3-df88-11e0-8b5f-001517115d85"));

	Текст = "Здійснена оплата:" + Источник.Контрагент + ";"+ "<br>";
	Текст = Текст + "На сумму:"+ Источник.СуммаДокумента + " "+ Источник.Валюта + "<br>";
	Текст = Текст + "Назва рахунку :" + "  " +  Источник.ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчетКонтрагента + "<br>";
    Если ЗначениеЗаполнено(Источник.ЗаявкаНаРасходованиеДенежныхСредств.НазначениеПлатежа) Тогда
    	Текст = Текст + "По призначенню :" + "  " +  Источник.ЗаявкаНаРасходованиеДенежныхСредств.НазначениеПлатежа + "<br>";
	КонецЕсли;
	Тескт	= Текст + "Дата оплати: "+ ТекущаяДата();
	Тема	= "Оплата від КТС";
	                                                               
	ПараметрыПисьма 	= БиблиотекаОбработок.СформироватьПараметрыПисьма(Тема,Текст, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
		                                   
КонецПроцедуры

// Процедура формирует движения по стоимости склада 
Процедура ВыполнитьПроведениеРасчетаСтоимостиСклада(Источник, Отказ, РежимПроведения) Экспорт

	Движения = Источник.Движения;
	
	НачалоМесяца  = НачалоМесяца(Источник.Дата);
	КонецМесяца	  = КонецМесяца(Источник.Дата);
	НачалоСегодня = НачалоДня(ТекущаяДата());
	
	ДеньВСекундах = 86400;
	РазницаВДнях = (КонецМесяца + 1 - НачалоМесяца) / ДеньВСекундах;
	
	Движения.СтоимостьСклада.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаОстатков();
	Пока НачалоМесяца < КонецМесяца Цикл
		
		Запрос.УстановитьПараметр("НачалоДня", НачалоМесяца);
		Запрос.УстановитьПараметр("КонецДня", НачалоМесяца + 86399);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Для Каждого Строка Из Выгрузка Цикл
			ЗаполнитьЗначенияСвойств(Движения.СтоимостьСклада.Добавить(), Строка);	
		КонецЦикла;

		НачалоМесяца = НачалоМесяца + ДеньВСекундах;
		
		Если НачалоСегодня < НачалоМесяца Тогда
					
			Запрос.Текст = ПолучитьТекстЗапросаЭкстраполяцииОстатков();
			Запрос.УстановитьПараметр("ТаблицаДвижений", Движения.СтоимостьСклада.Выгрузить());
			Запрос.УстановитьПараметр("ДеньМесяца", День(ТекущаяДата()));
			
			ТаблицаЭкстраполяции = Запрос.Выполнить().Выгрузить();
			Пока НачалоМесяца < КонецМесяца Цикл
				Для Каждого Строка Из ТаблицаЭкстраполяции Цикл
					НовоеДвижение = Движения.СтоимостьСклада.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеДвижение, Строка);
					НовоеДвижение.Период = НачалоМесяца;
				КонецЦикла;
				НачалоМесяца = НачалоМесяца + ДеньВСекундах;
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Движения.СтоимостьСклада.Записать();	

КонецПроцедуры // ()

 





////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Регистр «Обработка заказов»

Процедура ВыполнитьДвижениеОбработкаЗаказов(Источник, Отказ, РежимЗаписи, РежимПроведения)

	Если Источник.ЭтоНовый() Тогда
	    Возврат;			
	КонецЕсли; 
	
	ТекущийСтатус = Источник.Ссылка.Статус;
	НовыйСтатус   = Источник.Статус;
	
	РезультатПроверки = ПроверитьСтатусЗаказаКлиента(Источник);
	Запрос 		 	  = Новый Запрос;
	
	Если РезультатПроверки Тогда
		Запрос.Текст = ПолучитьТекстЗапросаОбработкаЗаказовСтатус();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаОбработкаЗаказов();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ", Источник.Ссылка);
	Запрос.УстановитьПараметр("Товары", Источник.Товары.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат;			
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	    НаборЗаписей = РегистрыСведений.ОбработкаЗаказовКлиентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказКлиента.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		НаборЗаписей.Записать();	
	КонецЦикла; 

КонецПроцедуры

Функция ПроверитьСтатусЗаказаКлиента(Источник)

	ТекущийСтатус = Источник.Ссылка.Статус;
	НовыйСтатус   = Источник.Статус;
	
	СостояниеТекущегоСтатуса = ТекущийСтатус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован ИЛИ ТекущийСтатус = Перечисления.СтатусыЗаказовКлиентов.Согласован;
	СостояниеНовогоСтатуса   = НовыйСтатус   = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению ИЛИ НовыйСтатус   = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	
	Возврат СостояниеТекущегоСтатуса И СостояниеНовогоСтатуса;

КонецФункции // ПроверитьСтатусЗаказаКлиента()
 
Функция ПолучитьТекстЗапросаОбработкаЗаказовСтатус()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Товары.Номенклатура		КАК Номенклатура,
	               |	Товары.ДатаОтгрузки     КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ ТаблицаТоварыПредварительная
	               |ИЗ
	               |	&Товары КАК Товары
	               |ГДЕ
	               |	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	               |	И НЕ Товары.Отменено
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура			КАК Номенклатура,
	               |	МАКСИМУМ(ДатаОтгрузки) 	КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ ТаблицаТовары
	               |ИЗ
	               |	ТаблицаТоварыПредварительная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ВЫРАЗИТЬ(&Заказ КАК Документ.ЗаказКлиента)									КАК ЗаказКлиента,
	               |	ТаблицаТовары.Номенклатура													КАК Номенклатура,
	               |	ЕСТЬNULL(АктуальностьНоменклатуры.ДатаПоставки, ТаблицаТовары.ДатаОтгрузки) КАК ДатаАктуальности,
	               |	АктуальностьНоменклатуры.СоглашениеСПоставщиком								КАК СоглашениеСПоставщиком,
	               |	АктуальностьНоменклатуры.Цена												КАК ЦенаВЗаказеПоставщика
	               |ИЗ
	               |	ТаблицаТовары КАК ТаблицаТовары,
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(
	               |								,
	               |								Номенклатура В
	               |								(ВЫБРАТЬ
	               |									Номенклатура
	               |								ИЗ
	               |									ТаблицаТовары)) КАК АктуальностьНоменклатуры
				   |		ПО ТаблицаТовары.Номенклатура = АктуальностьНоменклатуры.Номенклатура
				   |			И	АктуальностьНоменклатуры.Актуально
				   |			И	АктуальностьНоменклатуры.ГарантияДоставки";

	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОбработкаЗаказовСтатус()

Функция ПолучитьТекстЗапросаОбработкаЗаказов()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Товары.Номенклатура		КАК Номенклатура,
	               |	Товары.ДатаОтгрузки     КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ ТаблицаТоварыПредварительная
	               |ИЗ
	               |	&Товары КАК Товары
	               |ГДЕ
	               |	НЕ Товары.Отменено
	               |	И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура			КАК Номенклатура,
	               |	МАКСИМУМ(ДатаОтгрузки)	КАК ДатаОтгрузки,
	               |	1 						КАК Количество
	               |ПОМЕСТИТЬ ТаблицаТовары
	               |ИЗ
	               |	ТаблицаТоварыПредварительная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура			КАК Номенклатура,
	               |	МАКСИМУМ(ДатаОтгрузки) 	КАК ДатаОтгрузки,
	               |	1 						КАК Количество
	               |ПОМЕСТИТЬ ТоварыИзЗаказа
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары
	               |ГДЕ
	               |	Ссылка = &Заказ
	               |	И НЕ Отменено
	               |	И ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.Номенклатура,
	               |	ТаблицаТовары.ДатаОтгрузки
	               |ПОМЕСТИТЬ ТаблицаИзмененныхТоваров
	               |ИЗ
	               |	ТаблицаТовары КАК ТаблицаТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыИзЗаказа КАК ТоварыИзЗаказа
	               |		ПО ТаблицаТовары.Номенклатура = ТоварыИзЗаказа.Номенклатура
	               |ГДЕ
	               |	ТаблицаТовары.Количество - ЕСТЬNULL(ТоварыИзЗаказа.Количество, 0) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ВЫРАЗИТЬ(&Заказ КАК Документ.ЗаказКлиента)												КАК ЗаказКлиента,
	               |	ТаблицаИзмененныхТоваров.Номенклатура													КАК Номенклатура,
	               |	ЕСТЬNULL(АктуальностьНоменклатуры.ДатаПоставки, ТаблицаИзмененныхТоваров.ДатаОтгрузки) 	КАК ДатаАктуальности,
	               |	АктуальностьНоменклатуры.СоглашениеСПоставщиком											КАК СоглашениеСПоставщиком,
	               |	АктуальностьНоменклатуры.Цена 															КАК ЦенаВЗаказеПоставщика
	               |ИЗ
	               |	ТаблицаИзмененныхТоваров КАК ТаблицаИзмененныхТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних(
	               |				,
	               |				Номенклатура В
	               |					(ВЫБРАТЬ
	               |						Номенклатура
	               |					ИЗ
	               |						ТаблицаИзмененныхТоваров)) КАК АктуальностьНоменклатуры
	               |		ПО ТаблицаИзмененныхТоваров.Номенклатура = АктуальностьНоменклатуры.Номенклатура
				   |			И	АктуальностьНоменклатуры.Актуально
				   |			И	АктуальностьНоменклатуры.ГарантияДоставки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОбработкаЗаказов()



// Проверка заказов под обеспечение

Процедура ПроверитьЗаказПодОбеспечение(Источник, Отказ, РежимЗаписи, РежимПроведения)
	
	Если Источник.ЭтоНовый() Тогда
	    Возврат;			
	КонецЕсли; 
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
	    Возврат;			
	КонецЕсли; 

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказПоОбеспечение();
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Источник.Ссылка);
	Запрос.УстановитьПараметр("Товары", Источник.Товары.Выгрузить());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаОшибки 	 = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выбрать();
	ТаблицаДокументы = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2].Выгрузить();
	
	Пока ВыборкаОшибки.Следующий() Цикл
		
		СтруктураПоиска  = Новый Структура("Номенклатура, Характеристика", ВыборкаОшибки.Номенклатура, ВыборкаОшибки.Характеристика);
		РезультатыПоиска = ТаблицаДокументы.НайтиСтроки(СтруктураПоиска);
		
		ТекстСообщения = НСтр("ru='Невозможно провести заказ. Номенклатура %1 уже едет на склад. Обращайтесь на 777. Хорошего дня.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаОшибки.Номенклатура);
		
		Если РезультатыПоиска.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, РезультатыПоиска[0].Регистратор);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьТекстЗапросаЗаказПоОбеспечение()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Ссылка 		КАК Назначение,
	               |	Заказ 		КАК ЗаказКлиента
	               |ПОМЕСТИТЬ ТаблицаНазначений
	               |ИЗ
	               |	Справочник.Назначения
	               |ГДЕ
	               |	Заказ = &ЗаказКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура			   КАК Номенклатура,
	               |	Характеристика			   КАК Характеристика,
	               |	СУММА(КПоступлениюОстаток) КАК КПоступлению
	               |ПОМЕСТИТЬ НоменклатураПоНазначению
	               |ИЗ
	               |	РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(
	               |			,
	               |			Назначение В
	               |				(ВЫБРАТЬ
	               |					Назначение
	               |				ИЗ
	               |					ТаблицаНазначений))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура		КАК Номенклатура,
	               |	Характеристика		КАК Характеристика,
	               |	Количество			КАК Количество,
	               |	КодСтроки			КАК КодСтроки
	               |ПОМЕСТИТЬ НоменклатураИзЗаказаПредварительная
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары
	               |ГДЕ
	               |	Ссылка 					= &ЗаказКлиента
	               |	И ВариантОбеспечения 	= ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	               |	И НЕ Отменено
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура			КАК Номенклатура,
	               |	Товары.Характеристика		КАК Характеристика,
	               |	Товары.Количество			КАК Количество,
	               |	Товары.КодСтроки            КАК КодСтроки
	               |ПОМЕСТИТЬ НоменклатураИзТаблицыПредварительная
	               |ИЗ
	               |	&Товары КАК Товары
	               |ГДЕ
	               |	НЕ Товары.Отменено
	               |	И Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура			КАК Номенклатура,
	               |	Характеристика			КАК Характеристика,
	               |	ЗаказаноОстаток			КАК ЗаказаноОстаток,
	               |	КодСтроки 				КАК КодСтроки
	               |ПОМЕСТИТЬ НоменклатураИзРегистра
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказКлиента)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураИзЗаказа.Номенклатура				КАК Номенклатура,
	               |	НоменклатураИзЗаказа.Характеристика				КАК Характеристика,
	               |	СУММА(НоменклатураИзРегистра.ЗаказаноОстаток)	КАК ЗаказаноОстаток
	               |ПОМЕСТИТЬ НоменклатураИзЗаказа
	               |ИЗ
	               |	НоменклатураИзЗаказаПредварительная КАК НоменклатураИзЗаказа
				   |
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураИзРегистра КАК НоменклатураИзРегистра
	               |		ПО НоменклатураИзЗаказа.Номенклатура 		= НоменклатураИзРегистра.Номенклатура
	               |			И НоменклатураИзЗаказа.Характеристика 	= НоменклатураИзРегистра.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НоменклатураИзЗаказа.Номенклатура,
	               |	НоменклатураИзЗаказа.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НоменклатураИзЗаказаПредварительная;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураИзТаблицы.Номенклатура						КАК Номенклатура,
	               |	НоменклатураИзТаблицы.Характеристика					КАК Характеристика,
	               |	СУММА(НоменклатураИзТаблицы.Количество) 				КАК Количество
	               |ПОМЕСТИТЬ НоменклатураИзТаблицы
	               |ИЗ
	               |	НоменклатураИзТаблицыПредварительная КАК НоменклатураИзТаблицы
				   |
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураИзРегистра КАК НоменклатураИзРегистра
	               |		ПО НоменклатураИзТаблицы.Номенклатура	   = НоменклатураИзРегистра.Номенклатура
	               |			И НоменклатураИзТаблицы.Характеристика = НоменклатураИзРегистра.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НоменклатураИзТаблицы.Номенклатура,
	               |	НоменклатураИзТаблицы.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НоменклатураИзТаблицыПредварительная;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НоменклатураИзРегистра;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НоменклатураПоНазначению.Номенклатура					КАК Номенклатура,
	               |	НоменклатураПоНазначению.Характеристика					КАК Характеристика,
	               |	НоменклатураПоНазначению.КПоступлению					КАК КПоступлению,
	               |	ЕСТЬNULL(НоменклатураИзЗаказа.ЗаказаноОстаток, 0) 		КАК КоличествоИзЗаказа,
	               |	ЕСТЬNULL(НоменклатураИзТаблицы.Количество, 0) 			КАК КоличествоИзТаблицы
				   |ПОМЕСТИТЬ ТаблицаОшибок
	               |ИЗ
	               |	НоменклатураПоНазначению КАК НоменклатураПоНазначению
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИзЗаказа КАК НоменклатураИзЗаказа
	               |		ПО НоменклатураПоНазначению.Номенклатура 		= НоменклатураИзЗаказа.Номенклатура
	               |			И НоменклатураПоНазначению.Характеристика 	= НоменклатураИзЗаказа.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИзТаблицы КАК НоменклатураИзТаблицы
	               |		ПО НоменклатураПоНазначению.Номенклатура 		= НоменклатураИзТаблицы.Номенклатура
	               |			И НоменклатураПоНазначению.Характеристика 	= НоменклатураИзТаблицы.Характеристика
	               |ГДЕ
	               |	НоменклатураПоНазначению.КПоступлению > ЕСТЬNULL(НоменклатураИзТаблицы.Количество, 0)
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НоменклатураПоНазначению;
				   |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НоменклатураИзЗаказа;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ НоменклатураИзТаблицы;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура			   	КАК Номенклатура,
	               |	Характеристика			   	КАК Характеристика,
	        	   |	Регистратор 				КАК Регистратор
	               |ИЗ
	               |	РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Обороты(
	               |			,
				   |			,
				   |			Регистратор,
				   |			(Номенклатура, Характеристика) В
				   |				(ВЫБРАТЬ
				   |					Номенклатура,
				   |					Характеристика
				   |				ИЗ
				   |					ТаблицаОшибок)) КАК ТоварыПодОбеспечение
				   |		
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНазначений КАК ТаблицаНазначений
				   |		ПО ТоварыПодОбеспечение.Назначение = ТаблицаНазначений.Назначение
	               |
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура					КАК Номенклатура,
	               |	Характеристика					КАК Характеристика,
	               |	КПоступлению					КАК КПоступлению
				   |ИЗ
				   |	ТаблицаОшибок
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОшибок;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗаказПоОбеспечение()



// Коректировки времени документов

// Проводим корректировку времени документов РеализацияТоваровУслуг и ПеремещениеТоваров
// на 6 утра если документ проводится будущей датой.
//
// Параметры:
//	Источник - ДокументОбект.РеализацияТоваровУслуг, ДокументОбект.ПеремещениеТоваров
//
Процедура ПровестиКорректировкуВремени(Источник)
	
	ТекДата = ТекущаяДатаСеанса();
	
	Если ПроверитьВремя(Источник.Дата) И НачалоДня(Источник.Дата) = НачалоДня(ТекДата) Тогда
		Источник.Дата = НачалоДня(Источник.Дата) + Час(ТекДата)*3600 + Минута(ТекДата)*60 + Секунда(ТекДата);
	КонецЕсли;
	
	Если НачалоДня(ТекДата) < НачалоДня(Источник.Дата) Тогда
		Если Источник.Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85")) Тогда
			Источник.Дата = НачалоДня(Источник.Дата) + 6*3600;
		Иначе
			Источник.Дата = ТекДата;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкоректироватьВремяЗаказаКлиента(Источник, РежимЗаписи)

	Перем Состояние, СостояниеПросрочено, СуммаОплаты, СуммаОтгрузки, ПроцентОплаты, ПроцентОтгрузки, СуммаДолга, ПроцентДолга;
	
	Состояние = Новый Структура;
	Состояние.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
	Состояние.Вставить("СостояниеПросрочено", Ложь);
	Состояние.Вставить("СуммаОплаты", 0);
	Состояние.Вставить("СуммаОтгрузки", 0);
	Состояние.Вставить("ПроцентОплаты", 0);
	Состояние.Вставить("ПроцентОтгрузки", 0);
	Состояние.Вставить("СуммаПросроченнойОплаты", 0);
	Состояние.Вставить("СуммаДолга", 0);
	Состояние.Вставить("ПроцентДолга", 0);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Источник.ЭтоНовый() Тогда
			Источник.Дата = ТекущаяДата();
		Иначе
			МассивСтатусов = Новый Массив;
			МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
			МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
			Если МассивСтатусов.Найти(Источник.Ссылка.Статус) <> Неопределено Тогда
				Возврат;
			КонецЕсли;
			МассивСтатусов = Новый Массив;
			МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
			Если МассивСтатусов.Найти(Источник.Статус) <> Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Документы.ЗаказКлиента.РассчитатьСостояние(
				Источник.Ссылка,
				Источник.Договор,
				Состояние
			);
			
			Если Состояние.ПроцентОтгрузки = 0 Тогда
				ТекДата 						= ТекущаяДата();
				Источник.Дата 					= ТекДата;
				Источник.ЖелаемаяДатаОтгрузки 	= ТекДата;
				Источник.ДатаСогласования		= ТекДата;
				Источник.РассчитатьДатыОтгрузки();
				Источник.ЗаполнитьЭтапыГрафикаОплаты();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВремя(ДатаДокумента)

	Возврат (Час(ДатаДокумента) = 0) И (Минута(ДатаДокумента) = 0) И (Секунда(ДатаДокумента) = 0);

КонецФункции // ПроверитьВремя()



// Установка желаемой даты поступления в документе «Заказ поставщику»

Процедура УстановитьЖелаемуюДатуПоступления(Источник, Отказ, РежимЗаписи)

	Если Источник.Проведен ИЛИ Отказ ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда Возврат; КонецЕсли;
	
	ТЗ_Товары = Источник.Товары.Выгрузить();
	Если ТЗ_Товары.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ТЗ_Товары.Сортировать("ДатаПоступления УБЫВ");
	
	ДатаПоступления = ТЗ_Товары[0].ДатаПоступления;
	
	Источник.ЖелаемаяДатаПоступления = ДатаПоступления;
	Источник.ЗаполнитьЭтапыГрафикаОплаты();

КонецПроцедуры




// Заполнение договора в документах «Возврат товаров от клмента» и «Возврат товаров поставщику»

Процедура ЗаполнитьДоговорВДокументах(Источник, Отказ, РежимЗаписи)

	Если Источник.Проведен ИЛИ Отказ ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Если Не Источник.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
			Возврат;
		КонецЕсли;
		
		Если Источник.РасшифровкаПлатежа.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить договор на вкладке ""Взаиморасчеты""";
			Сообщение.Поле = "РасшифровкаПлатежа";
			Сообщение.УстановитьДанные(Источник);
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ДоговорНайден = Ложь;
		Для каждого СтрокаТЧ Из Источник.РасшифровкаПлатежа Цикл
			Если СтрокаТЧ.Заказ <> Неопределено Тогда
				ДоговорНайден=Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Если Не ДоговорНайден Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо заполнить договор на вкладке ""Взаиморасчеты""";
			Сообщение.Поле = "РасшифровкаПлатежа";
			Сообщение.УстановитьДанные(Источник);
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры




// Передачи перед документами

// Процедура выполняет перепродажу  между организациями перед записью документов
//
Процедура ВыполнитьПродажиМеждуОрганизациями(Источник, Отказ, РежимЗаписи)
	
	Если Отказ ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда Возврат; КонецЕсли;
	
	СтруктураСсылкаНаИсточник 	= ПолучитьНавигационнуюСсылкуИсточника(Источник);
	МассивДокументов 			= ПолучитьДокументыПередачи(Источник, СтруктураСсылкаНаИсточник.НавигационнаСсылка);
	
	Если МассивДокументов.Количество() = 0 Тогда
		ВыполнитьПерезаполнениеВидовЗапасов(Источник, Отказ);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьРазрешениеНаПроведениеПередачи() Тогда Возврат; КонецЕсли;
	
	Для Каждого Документ ИЗ МассивДокументов Цикл
		Попытка
			Документ.Значение.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			ВызватьИсключение ОписаниеОшибки();
			Документ.Значение.ОбменДанными.Загрузка = Истина;
			Документ.Значение.Записать(РежимЗаписиДокумента.Запись);
			ЗаписатьИнформациюОПередаче(СтруктураСсылкаНаИсточник.НавигационнаСсылка, 
						Документ.Значение.Ссылка,
						НСтр("ru='Ошибка при проведении передачи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		КонецПопытки;
	КонецЦикла;
	
	ПерезаполнитьВидыЗапасов(Источник, Отказ);
		
КонецПроцедуры


Процедура ВыполнитьПерезаполнениеВидовЗапасов(Источник, Отказ)

	МассивТипов 		= Новый Массив;
	ВычМассив			= Новый Массив;
	
	МассивТипов.Добавить(ТипЗнч(Источник));
	
	ВычМассив.Добавить(Тип("ДокументОбъект.ПеремещениеТоваров"));
	ВычМассив.Добавить(Тип("ДокументОбъект.КорректировкаНазначенияТоваров"));
	ВычМассив.Добавить(Тип("ДокументОбъект.ВозвратТоваровПоставщику"));
	ВычМассив.Добавить(Тип("ДокументОбъект.СписаниеНедостачТоваров"));
	
	Результат = Новый ОписаниеТипов(Новый ОписаниеТипов, МассивТипов, ВычМассив);
	
	Если НЕ Результат.Типы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
			
	ПерезаполнитьВидыЗапасов(Источник, Отказ); 

КонецПроцедуры

Процедура ПерезаполнитьВидыЗапасов(Источник, Отказ)
	
	Источник.ВидыЗапасов.Очистить();
	
	МенеджерВременныхТаблиц = Источник.ВременныеТаблицыДанныхДокумента();
	Источник.СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
	ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
	ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Источник.Ссылка, Источник.Организация, Источник.Дата, Источник.ДополнительныеСвойства, МенеджерВременныхТаблиц);	
	ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();

	ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(МенеджерВременныхТаблиц, Источник.ДополнительныеСвойства, Источник.ВидыЗапасов, ТаблицаОшибок, Отказ);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД, Склад, СтавкаНДС, ЗаказКлиента", "Количество, СуммаСНДС, СуммаНДС");
		Источник.ЗаполнитьДопКолонкиВидовЗапасов();
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.ВидыЗапасов);
		СообщитьОшибкиВидовЗапасовРеализацияТоваровИУслуг(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
	КонецЕсли;  
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД", "Количество");
		ЗаполнитьСтатьюРасходовВидовЗапасов(Источник);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.ВидыЗапасов);
		СообщитьОшибкиВидовЗапасовВнутреннееПотреблениеТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СборкаТоваров") Тогда
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД", "Количество");
		ЗаполнитьНоменклатуруОприходованиеВидовЗапасов(Источник);
		СообщитьОшибкиВидовЗапасовСборкаТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
		Если Источник.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
			Если Не ЗначениеЗаполнено(Источник.ВидЗапасов) Тогда 
				ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Неопределено, Источник.ВидЗапасов);
			КонецЕсли;
		Иначе	
			ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Источник.Товары);
		КонецЕсли;

	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Если Не Отказ Тогда
			ТаблицаОшибок.Очистить();
		КонецЕсли;
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, Сделка, ВидЗапасов, НомерГТД", "Количество");
		СообщитьОшибкиВидовЗапасовПеремещениеТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
		ЗаполнитьНазначениеВидовЗапасов(Источник);
		Источник.ЗаполнитьВидЗапасовПолучателя();
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД, СтавкаНДС", "Количество, СуммаСНДС, СуммаНДС");
		Источник.ЗаполнитьДопКолонкиВидовЗапасов();
		СообщитьОшибкиВидовЗапасовВозвратТоваровПоставщику(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.ВидыЗапасов);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеНедостачТоваров") Тогда
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД", "Количество");
		СообщитьОшибкиВидовЗапасовСписаниеНедостачТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД, Склад, Назначение", "Количество");
		СообщитьОбОшибкахЗаполненияВидовЗапасовКорректировкаНазначений(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник);
		ЗаполнитьНовоеНазначениеВидовЗапасовКорректировкаНазначений(Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьВидыЗапасовПередачи(Источник, Отказ, РежимЗаписи)

	Перем ПерезаполнятьВидыЗапасов;
	
	Если Отказ ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда Возврат; КонецЕсли;
	
	Источник.ДополнительныеСвойства.Свойство("ПерезаполнятьВидыЗапасовПередПередачей", ПерезаполнятьВидыЗапасов);
	
	Если ЗначениеЗаполнено(ПерезаполнятьВидыЗапасов) И ПерезаполнятьВидыЗапасов Тогда
		ТаблицаВидовЗапасов 		= Источник.ДополнительныеСвойства.ТаблицаВидовЗапасов;
		ВидыЗапасовУказаныВручную   		= Истина;		
		Источник.ВидыЗапасов.Загрузить(ТаблицаВидовЗапасов);		
	КонецЕсли;	
		
	МенеджерВременныхТаблиц = Источник.ВременныеТаблицыДанныхДокумента();
	Если Не Источник.ПоТоварамКОформлению Тогда
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Источник.Товары);
	КонецЕсли;
	
	Источник.СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
	
	Если Не Источник.ПоТоварамКОформлению Тогда
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(
			Источник.Ссылка,
			Источник.Организация,
			Источник.Дата,
			Источник.ДополнительныеСвойства,
			МенеджерВременныхТаблиц);
	Иначе
			
		ДатаОстатков =
			?(ЗначениеЗаполнено(Источник.КонецПериода), КонецДня(Источник.КонецПериода),
				Перечисления.ВидыКонтроляТоваровОрганизаций.ДатаКонтроля(Источник.Дата));
		ЗапасыСервер.ТаблицаОстатковТоваровКПередаче(
			Источник.Ссылка,
			Источник.Организация,
			Источник.Склад,
			ДатаОстатков,
			МенеджерВременныхТаблиц);
		Источник.ДополнительныеСвойства.Вставить("ЗаполнятьВидЗапасовПолучателя", Источник.ОрганизацияПолучатель);
	КонецЕсли;
	
	ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
		МенеджерВременныхТаблиц,
		Источник.ДополнительныеСвойства,
		Источник.ВидыЗапасов,
		ТаблицаОшибок,
		Отказ);
	Источник.ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС", "Количество, СуммаСНДС, СуммаНДС");
	Источник.ЗаполнитьДопКолонкиВидовЗапасов();
	ЗаполнитьВидЗапасовПолучателя(Источник);
	СообщитьОбОшибкахЗаполненияВидовЗапасовПередачи(Источник, ТаблицаОшибок);
	
	ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.Товары);
	ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Источник.ВидыЗапасов);
	Источник.ЗаполнитьКлючиАналитикиУчетаПартийДокумента();

КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Источник, Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыЗапасов.Ссылка КАК ВидЗапасов
	                      |ИЗ
	                      |	Справочник.ВидыЗапасов КАК ВидыЗапасов
	                      |ГДЕ
	                      |	ВидыЗапасов.Организация = &Организация
	                      |	И ВидыЗапасов.ТипЗапасов = &ТипЗапасов
	                      |	И ВидыЗапасов.ВидЗапасовВладельца = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)");
						  
	Запрос.УстановитьПараметр("ТипЗапасов", Перечисления.ТипыЗапасов.Товар);
	Запрос.УстановитьПараметр("Организация", Источник.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидЗапасов = Выборка.ВидЗапасов;
		Для Каждого СтрокаВидовЗапаса ИЗ Источник.ВидыЗапасов Цикл СтрокаВидовЗапаса.ВидЗапасов = ВидЗапасов; КонецЦикла;		
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВидовЗапасов(Источник)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	Для Каждого СтрокаТоваров Из Источник.Товары Цикл

		КоличествоТоваров = СтрокаТоваров.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из Источник.ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл

			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);

			НоваяСтрока = Источник.ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.СтатьяРасходов 		= СтрокаТоваров.СтатьяРасходов;
			НоваяСтрока.АналитикаРасходов 	= СтрокаТоваров.АналитикаРасходов;
			НоваяСтрока.СтатьяАктивов 		= СтрокаТоваров.СтатьяАктивов;
			НоваяСтрока.АналитикаАктивов 	= СтрокаТоваров.АналитикаАктивов;
			НоваяСтрока.ФизическоеЛицо 		= СтрокаТоваров.ФизическоеЛицо;
			НоваяСтрока.Количество 			= Количество;

			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;

			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Источник.ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		Источник.ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруОприходованиеВидовЗапасов(Источник)
	
	Если Источник.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		
		КоличествоКомплект = Источник.Количество;
		КоличествоСтрок = Источник.ВидыЗапасов.Количество();
	
		Для Каждого СтрокаЗапасов Из Источник.ВидыЗапасов Цикл

			СтрокаЗапасов.НоменклатураОприходование = Источник.Номенклатура;
			СтрокаЗапасов.ХарактеристикаОприходование = Источник.Характеристика;
			СтрокаЗапасов.КоличествоОприходование = Окр(КоличествоКомплект / КоличествоСтрок, 3, РежимОкругления.Окр15как20);
			СтрокаЗапасов.ВидЗапасовОприходование = Источник.ВидЗапасов;
			
			КоличествоКомплект = КоличествоКомплект - СтрокаЗапасов.КоличествоОприходование;
			КоличествоСтрок = КоличествоСтрок - 1;

		КонецЦикла;
		
	Иначе
		
		ТаблицаВидовЗапасов = Источник.ВидыЗапасов.Выгрузить(, "Номенклатура, Характеристика, ВидЗапасов, НомерГТД, Количество");
		КоличествоСтрокВидовЗапасов = Источник.ВидыЗапасов.Количество();
		
		Источник.ВидыЗапасов.Очистить();
		Для Каждого СтрокаЗапасов Из ТаблицаВидовЗапасов Цикл
			
			ИтогоДоляСтоимости = Источник.Товары.Итог("ДоляСтоимости");
			Для Каждого СтрокаТоваров Из Источник.Товары Цикл
				
				НоваяСтрока = Источник.ВидыЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
				НоваяСтрока.НоменклатураОприходование = СтрокаТоваров.Номенклатура;
				НоваяСтрока.ХарактеристикаОприходование = СтрокаТоваров.Характеристика;
				НоваяСтрока.ВидЗапасовОприходование = СтрокаТоваров.ВидЗапасов;
				НоваяСтрока.ДоляСтоимости = СтрокаТоваров.ДоляСтоимости;

				Если КоличествоСтрокВидовЗапасов = 1 Тогда
					НоваяСтрока.КоличествоОприходование = СтрокаТоваров.Количество;
				КонецЕсли;
				
				Если ИтогоДоляСтоимости <> 0 Тогда
					НоваяСтрока.Количество = Окр(СтрокаТоваров.ДоляСтоимости * СтрокаЗапасов.Количество / ИтогоДоляСтоимости, 3, РежимОкругления.Окр15как20);
				Иначе
					НоваяСтрока.Количество = СтрокаЗапасов.Количество;
				КонецЕсли;
				
				СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
				ИтогоДоляСтоимости = ИтогоДоляСтоимости - СтрокаТоваров.ДоляСтоимости;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если КоличествоСтрокВидовЗапасов > 1 Тогда
		
			Для Каждого СтрокаТоваров Из Источник.Товары Цикл
				
				КоличествоТовара = СтрокаТоваров.Количество;
				
				СтруктураПоиска = Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование, ВидЗапасовОприходование",
					СтрокаТоваров.Номенклатура,
					СтрокаТоваров.Характеристика,
					СтрокаТоваров.ВидЗапасов);
				МассивСтрок = Источник.ВидыЗапасов.НайтиСтроки(СтруктураПоиска);
				ИтогоКоличество = 0 ;
				Для Каждого СтрокаЗапасов Из МассивСтрок Цикл
					ИтогоКоличество = ИтогоКоличество + СтрокаЗапасов.Количество;
				КонецЦикла;
				Для Каждого СтрокаЗапасов Из МассивСтрок Цикл
					Если ИтогоКоличество <> 0 Тогда
						СтрокаЗапасов.КоличествоОприходование = Окр(СтрокаЗапасов.Количество * КоличествоТовара / ИтогоКоличество, 3, РежимОкругления.Окр15как20);
						КоличествоТовара = КоличествоТовара - СтрокаЗапасов.КоличествоОприходование;
						ИтогоКоличество = ИтогоКоличество - СтрокаЗапасов.Количество;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНазначениеВидовЗапасов(Источник)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	Для Каждого СтрокаТоваров Из Источник.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТоваров.Назначение) Тогда
			Продолжить;
		Конецесли;

		КоличествоТоваров = СтрокаТоваров.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из Источник.ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл

			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);

			НоваяСтрока = Источник.ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Назначение = СтрокаТоваров.Назначение;
			НоваяСтрока.Количество = Количество;

			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;

			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Источник.ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		Источник.ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидЗапасовПолучателя(Источник)
			
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Запасы.ВидЗапасов КАК Справочник.ВидыЗапасов) КАК ВидЗапасов
	|
	|ПОМЕСТИТЬ ЗапасыПредварительные
	|ИЗ
	|	&ВидыЗапасов КАК Запасы
	|;
	|ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтроки,
	|	ВидЗапасов  КАК ВидЗапасов,
	|	ВидЗапасов.Назначение КАК Назначение
	|
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	ЗапасыПредварительные
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВидыЗапасов.Комитент КАК Комитент,
	|	ВидыЗапасов.Контрагент КАК Контрагент,
	|	ВидыЗапасов.Договор КАК Договор,
	|	ВидыЗапасов.Соглашение КАК Соглашение,
	|	ВидыЗапасов.Валюта КАК Валюта,
	|	ВЫБОР КОГДА &ПеремещениеПодДеятельность <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	ТОГДА
	|		&ПеремещениеПодДеятельность
	|	ИНАЧЕ
	|		ВидыЗапасов.НалогообложениеНДС
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	ВидыЗапасов.Поставщик КАК Поставщик,
	|
	|	ВидыЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ВидыЗапасов.Подразделение КАК Подразделение,
	|	ВидыЗапасов.Менеджер КАК Менеджер,
	|	ВидыЗапасов.Сделка КАК Сделка,
	|	ВидыЗапасов.Подразделение.ВариантОбособленногоУчетаТоваров КАК ВариантОбособленногоУчетаТоваров,
	|	ЕСТЬNULL(ВидыЗапасов.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|
	|	Запасы.Назначение КАК Назначение,
	|
	|	ЛОЖЬ КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасовВладельца,
	|
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	КОНЕЦ КАК ХозоперацияВидаЗапаса
	|ИЗ
	|	Запасы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ВидыЗапасов.Ссылка = Запасы.ВидЗапасов
	|ГДЕ
	|	ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	ИЛИ &ЭтоВнутренняяПередачаТоваров
	|	ИЛИ (ВидыЗапасов.НалогообложениеНДС <> &ПеремещениеПодДеятельность
	|		И &ПеремещениеПодДеятельность <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|	ИЛИ Запасы.Назначение <> ВидыЗапасов.Назначение
	|");
	
	Запрос.УстановитьПараметр("ЭтоВнутренняяПередачаТоваров", Ложь);
	Запрос.УстановитьПараметр("ВидыЗапасов", Источник.ВидыЗапасов.Выгрузить(, "НомерСтроки, ВидЗапасов"));
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Источник.ОрганизацияПолучатель, Неопределено, Источник.Дата));
	Запрос.УстановитьПараметр("ПеремещениеПодДеятельность", Ложь);
	
	ВидыЗапасовПолучателя = Новый Соответствие;
	ПолучательЗапасов = ?(Перечисления.ХозяйственныеОперации.ПеремещениеТоваров = Источник.ХозяйственнаяОперация,
		Источник.Организация,
		Источник.ОрганизацияПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидЗапасовПолучателя = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			ПолучательЗапасов,
			Выборка.ХозоперацияВидаЗапаса,
			Выборка);
		ВидыЗапасовПолучателя.Вставить(Выборка.НомерСтроки, ВидЗапасовПолучателя);
	КонецЦикла;
	
	Для Каждого Запас Из Источник.ВидыЗапасов Цикл
		ВидЗапасовПолучателя = ВидыЗапасовПолучателя[Запас.НомерСтроки];
		Запас.ВидЗапасовПолучателя = ?(Неопределено = ВидЗапасовПолучателя, Запас.ВидЗапасов, ВидЗапасовПолучателя);
	КонецЦикла;
	
КонецПроцедуры


// Обработка ошибок виды запасов

Процедура СообщитьОшибкиВидовЗапасовРеализацияТоваровИУслуг(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Реализация превышает остаток товара организации %1 %2 %3'"),
			Источник.Организация,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		Если Источник.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
		 И Источник.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				|по налогообложению %1'"),
				Источник.НалогообложениеНДС);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, на складе %2 недостаточно %3 %4'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Склад,
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект);
			
		КонецЦикла;
		
		НалогообложениеНДСОрганизации = Справочники.Организации.НалогообложениеНДС(Источник.Организация, Неопределено, Источник.Дата);
		Если Источник.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
		 И Источник.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД
		 И НалогообложениеНДСОрганизации <> Источник.НалогообложениеНДС Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Налогообложение документа отличается от налогообложения организации %1'"),
				НалогообложениеНДСОрганизации);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Источник,
				"НалогообложениеНДС");
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура СообщитьОшибкиВидовЗапасовВнутреннееПотреблениеТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание превышает остаток товара организации %1 на складе %2 %3 %4'"),
			Источник.Организация,
			Источник.Склад,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Источник.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОшибкиВидовЗапасовСборкаТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сборка превышает остаток товара организации %1 на складе %2 %3 %4'"),
			Источник.Организация,
			Источник.Склад,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Источник.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОшибкиВидовЗапасовПеремещениеТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перемещение превышает остаток товара организации %1 на складе %2 %3 %4'"),
			Источник.Организация,
			Источник.СкладОтправитель,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Источник.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОшибкиВидовЗапасовВозвратТоваровПоставщику(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возврат превышает остаток товара комитента %1 по соглашению %2, на складе %3 %4 %5'"),
				Источник.Партнер,
				Источник.Соглашение,
				Источник.Склад,
				СтруктураАналитики.СтрокаАналитики,
				СтруктураАналитики.Аналитика
			);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возврат превышает остаток товара поставщика %1 в организации %2 на складе %3 %4 %5'"),
				Источник.Партнер,
				Источник.Организация,
				Источник.Склад,
				СтруктураАналитики.СтрокаАналитики,
				СтруктураАналитики.Аналитика
			);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник
		);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номенклатура: %1, недостаточно %2 %3'"),
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					СтрокаТаблицы.Количество,
					СтрокаТаблицы.ЕдиницаИзмерения
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Источник.Ссылка
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОшибкиВидовЗапасовСписаниеНедостачТоваров(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Номенклатура: %1 
			|Списание превышает остаток товара организации %2 на складе %3 на %4 %5'"),
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
			Источник.Организация,
			Источник.Склад,
			СтрокаТаблицы.Количество,
			СтрокаТаблицы.ЕдиницаИзмерения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасовПередачи(Источник, ТаблицаОшибок)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		Если Источник.ПоТоварамКОформлению Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номенклатура: %1 
					|Передача превышает количество товара к оформлению от организации %2 по складу %3 на %4 %5'"),
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					Источник.Организация,
					Источник.Склад,
					СтрокаТаблицы.Количество,
					СтрокаТаблицы.ЕдиницаИзмерения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Источник.Ссылка);
				
			КонецЦикла;
			
			
		Иначе
		
			НалогообложениеНДСОрганизации = Справочники.Организации.НалогообложениеНДС(Источник.Организация, Неопределено, Источник.Дата);
		
			Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номенклатура: %1 
					|Передача превышает остаток товара организации %2 на складе %3 на %4 %5'"),
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					Источник.Организация,
					Источник.Склад,
					СтрокаТаблицы.Количество,
					СтрокаТаблицы.ЕдиницаИзмерения);
				Если СтрокаТаблицы.НеУказанНомерГТД Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
				КонецЕсли;
				ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '
					|по налогообложению %1'"),
					Источник.НалогообложениеНДС);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Источник.Ссылка);
				
			КонецЦикла;
			
			Если НалогообложениеНДСОрганизации <> Источник.НалогообложениеНДС Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Налогообложение документа отличается от налогообложения организации %1'"),
					Источник.НалогообложениеНДСОрганизации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Источник,
					"НалогообложениеНДС");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры 

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасовКорректировкаНазначений(ТаблицаОшибок, МенеджерВременныхТаблиц, Источник)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
	 	СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Корректировка превышает остаток товара организации %1 %2 %3'"),
			Источник.Организация,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Источник.Ссылка);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, на складе %2 недостаточно %3 %4'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Склад,
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Источник.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаполнитьНовоеНазначениеВидовЗапасовКорректировкаНазначений(Источник)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение");
	Для Каждого СтрокаТоваров Из Источник.Товары Цикл

		КоличествоТоваров = СтрокаТоваров.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		СтруктураПоиска.Назначение = СтрокаТоваров.ИсходноеНазначение;
		
		Для Каждого СтрокаЗапасов Из Источник.ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл

			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);

			НоваяСтрока = Источник.ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.НовоеНазначение = СтрокаТоваров.НовоеНазначение;
			НоваяСтрока.Количество = Количество;

			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;

			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Источник.ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		Источник.ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
		
КонецПроцедуры


Функция ПолучитьРазрешениеНаПроведениеПередачи()
	
	Перем ПроводитьПродажиМеждуОрганизациямиПередЗаписью;
	
	НастройкаГлобальная = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если НЕ ТипЗнч(НастройкаГлобальная) = Тип("Структура") Тогда
		БиблиотекаОбъект = ModuleLibraryServer.GetLibrary("Библиотека внешних обработок");
		БиблиотекаОбъект.СообщитьПользователю("Сообщите на 777, что настойка не найдена при попытке продаж до реализации!");
		Возврат Ложь;	
	КонецЕсли;
	
	НастройкаГлобальная.Свойство("ПроводитьПродажиМеждуОрганизациямиПередЗаписью", ПроводитьПродажиМеждуОрганизациямиПередЗаписью);
	
	Если ПроводитьПродажиМеждуОрганизациямиПередЗаписью = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
 
	Возврат ПроводитьПродажиМеждуОрганизациямиПередЗаписью;
 
КонецФункции


Процедура ПроверитьТоварыОрганизаций(Источник, ТекстСообщенияПользователю, Отказ)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТабТовары.Номенклатура 		КАК Номенклатура,
	                      |	ТабТовары.Характеристика 	КАК Характеристика,
	                      |	ТабТовары.Склад 			КАК Склад,
						  |	ТабТовары.Количество		КАК Количество
	                      |ПОМЕСТИТЬ ТабКешТоварыПредварительные
	                      |ИЗ
	                      |	&ТабТовары КАК ТабТовары
	                      |;
	                      |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	Номенклатура 		КАК Номенклатура,
	                      |	Характеристика 		КАК Характеристика,
	                      |	Склад 				КАК Склад,
						  |	СУММА(Количество)	КАК Количество
						  |ПОМЕСТИТЬ ТабКешТовары
						  |ИЗ
						  |	ТабКешТоварыПредварительные
						  |СГРУППИРОВАТЬ ПО
						  |	Номенклатура,
	                      |	Характеристика,
	                      |	Склад
						  |;
						  |
						  |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
						  |	Номенклатура		КАК Номенклатура,
						  |	Характеристика		КАК Характеристика,
						  |	Склад				КАК Склад,
						  |	КоличествоОстаток	КАК Количество
						  |ПОМЕСТИТЬ ОстаткиТоваровОрганизаций
						  |ИЗ
						  |	РегистрНакопления.ТоварыОрганизаций.Остатки(
						  |							&Дата,
						  |							(Номенклатура, Характеристика, Склад) В
	                      |							(ВЫБРАТЬ
	                      |								Номенклатура,
	                      |								Характеристика,
	                      |								Склад
	                      |							ИЗ
	                      |								ТабКешТовары))
						  |;
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТабКешТовары.Номенклатура.Наименование 												КАК Номенклатура,
	                      |	ТабКешТовары.Характеристика.Наименование											КАК Характеристика,
						  |	ТабКешТовары.Склад.Наименование 													КАК Склад,
	                      |	ТабКешТовары.Количество - ЕСТЬNULL(ОстаткиТоваровОрганизаций.Количество, 0)			КАК Количество
	                      |ИЗ
	                      |	ТабКешТовары КАК ТабКешТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваровОрганизаций КАК ОстаткиТоваровОрганизаций
	                      |		ПО ТабКешТовары.Номенклатура = ОстаткиТоваровОрганизаций.Номенклатура
	                      |			И ТабКешТовары.Характеристика = ОстаткиТоваровОрганизаций.Характеристика
	                      |			И ТабКешТовары.Склад = ОстаткиТоваровОрганизаций.Склад
	                      |ГДЕ
	                      |	ТабКешТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	                      |	И ТабКешТовары.Количество > ЕСТЬNULL(ОстаткиТоваровОрганизаций.Количество, 0)");
						  
	Запрос.УстановитьПараметр("ТабТовары", ПолучитьТаблицуТовары(Источник));
	Запрос.УстановитьПараметр("Дата", Источник.МоментВремени());

						  
	РезультатЗапроса 	= Запрос.Выполнить();
	Отказ 				= НЕ РезультатЗапроса.Пустой();
	Выборка				= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения				= НСтр("ru='%1 не оприходовано на складе %2 в количестве %3'");
		ТекстСообщенияПользователю 	= ТекстСообщенияПользователю + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Номенклатура, Выборка.Склад, Выборка.Количество);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуТовары(Источник)

	ТаблицаТовары = Новый ТаблицаЗначений;
	
	ТаблицаТовары.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	
	Для каждого СтрокаТЧ Из Источник.Товары Цикл
	
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Организация = Источник.Организация;
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			НоваяСтрока.Склад = Источник.СкладОтправитель;
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			НоваяСтрока.Склад = СтрокаТЧ.Склад;
		Иначе
			НоваяСтрока.Склад = Источник.Склад;
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат ТаблицаТовары;

КонецФункции // ПолучитьТаблицуТовары()




// Создание документов передачи

Функция ПолучитьДокументыПередачи(Источник, НавигационнаСсылка)
	
	ВидЦены 					= ПолучитьВидЦеныПоИдентификатору();
	НаборДокументов     		= Новый Соответствие;
	НаборТаблицВидовЗапасов     = Новый Соответствие;
	Организация					= Источник.Организация;
	НазначениеПеремещения		= ПолучитьНазначениеЗаказНаПеремещение(Источник);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Склад = Источник.СкладОтправитель;
	ИначеЕсли ТипЗнч(Источник) <> Тип("ДокументОбъект.КорректировкаНазначенияТоваров") И ТипЗнч(Источник) <> Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Склад = Источник.Склад;
	КонецЕсли;
	
	Запрос 				= Новый Запрос;						  
	Запрос.Текст 		= ПолучитьТекстЗапросаПередачи(Источник);
	
	Запрос.УстановитьПараметр("ТабТовары", 		Источник.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("Дата", Источник.МоментВремени());
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидЦены", 		ВидЦены);
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[РезультатЗапроса.ВГраница()].Пустой() Тогда Возврат НаборДокументов; КонецЕсли;
	
	ТаблицаНоменклатуры = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить();
	ТаблицаОстатки 		= РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		
		КоличествоПеренести = СтрокаТаблицы.Количество;	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Источник", 				Источник);
		СтруктураПараметров.Вставить("ТаблицаОстатки", 			ТаблицаОстатки);
		СтруктураПараметров.Вставить("НаборДокументов", 		НаборДокументов);
		СтруктураПараметров.Вставить("НаборТаблицВидовЗапасов", НаборТаблицВидовЗапасов);
		СтруктураПараметров.Вставить("СтрокаТаблицы", 			СтрокаТаблицы);
		СтруктураПараметров.Вставить("НавигационнаяСсылка", 	НавигационнаСсылка);
		
		Если СтрокаТаблицы.Назначение.Пустая() Тогда
			Назначение = ?(НазначениеПеремещения=Неопределено, Справочники.Назначения.ПустаяСсылка(), НазначениеПеремещения);
		Иначе
			Назначение = СтрокаТаблицы.Назначение;
		КонецЕсли;
		ЗаполнитьСтрокуПередачи(СтруктураПараметров, Назначение, КоличествоПеренести);
		
		Если КоличествоПеренести > 0 Тогда
			ЗаполнитьСтрокуПередачи(СтруктураПараметров, Справочники.Назначения.ПустаяСсылка(), КоличествоПеренести);
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗаполнитьДополнительныеСвойстваПередачи(НаборДокументов, НаборТаблицВидовЗапасов);
	
	Возврат НаборДокументов;
	
КонецФункции

Процедура ЗаполнитьСтрокуПередачи(СтруктураПараметров, Назначение, КоличествоПеренести)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров.СтрокаТаблицы);
	СтруктураПоиска.Назначение = Назначение;
	
	РезультатыПоиска = СтруктураПараметров.ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатыПоиска.Количество() = 0 И Назначение = Справочники.Назначения.ПустаяСсылка() Тогда
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураПараметров.СтрокаТаблицы);
		РезультатыПоиска = СтруктураПараметров.ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
		Если РезультатыПоиска.Количество() = 0 Тогда
			КоличествоПеренести = 0 
		КонецЕсли;
	КонецЕсли;
	
	Для каждого РезультатПоиска Из РезультатыПоиска Цикл
		
		Если РезультатПоиска.КоличествоОстаток <= 0 ИЛИ КоличествоПеренести = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументПередача 		= СтруктураПараметров.НаборДокументов.Получить(РезультатПоиска.ОрганизацияОтправитель);
		Если ДокументПередача 	= Неопределено Тогда
			ДокументПередача 	= СоздатьДокументПередачи(СтруктураПараметров, РезультатПоиска, СтруктураПараметров.Источник);
			СтруктураПараметров.НаборДокументов.Вставить(РезультатПоиска.ОрганизацияОтправитель, ДокументПередача);
		КонецЕсли;
		
		ТаблицаВидовЗапасов 		= СтруктураПараметров.НаборТаблицВидовЗапасов.Получить(ДокументПередача);
		Если ТаблицаВидовЗапасов 	= Неопределено Тогда
			ТаблицаВидовЗапасов 	= СоздатьТаблицуВидовЗапасов();
			СтруктураПараметров.НаборТаблицВидовЗапасов.Вставить(ДокументПередача, ТаблицаВидовЗапасов);
		КонецЕсли;
		
		ЗаполнитьСтрокуТабличнойЧастиДокумента(ДокументПередача, ТаблицаВидовЗапасов, РезультатПоиска, КоличествоПеренести);
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьНазначениеЗаказНаПеремещение(Источник)

	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
	    Возврат Неопределено;			
	КонецЕсли;
	
	Если Источник.ЗаказНаперемещение.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Назначения ГДЕ Заказ = &Заказ");
	Запрос.УстановитьПараметр("Заказ", Источник.ЗаказНаперемещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);

КонецФункции // ПолучитьНазначениеЗаказНаПеремещение()

Функция ПолучитьТекстЗапросаПередачи(Источник)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ТекстЗапроса = "
				|ВЫБРАТЬ
				|	&Организация 				КАК Организация,
				|	ТабТовары.Номенклатура 		КАК Номенклатура,
				|	ТабТовары.Характеристика 	КАК Характеристика,
				|	ТабТовары.Количество 		КАК Количество,
				|	ТабТовары.Назначение 		КАК Назначение,
				|	&Склад 						КАК Склад
				|ПОМЕСТИТЬ ТабКешТоварыПредварительные
				|ИЗ
				|	&ТабТовары КАК ТабТовары
				|;";
				
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаНазначенияТоваров") Тогда
		
		ТекстЗапроса = "
		        |ВЫБРАТЬ
				|	&Организация 					КАК Организация,
				|	ТабТовары.Номенклатура 			КАК Номенклатура,
				|	ТабТовары.Характеристика 		КАК Характеристика,
				|	ТабТовары.Количество 			КАК Количество,
				|	ТабТовары.ИсходноеНазначение	КАК Назначение,
				|	ТабТовары.Склад					КАК Склад
				|ПОМЕСТИТЬ ТабКешТоварыПредварительные
				|ИЗ
				|	&ТабТовары КАК ТабТовары
				|;";
	Иначе
		
		ТекстЗапроса = "
				|ВЫБРАТЬ
				|	&Организация 									КАК Организация,
				|	ТабТовары.Номенклатура 							КАК Номенклатура,
				|	ТабТовары.Характеристика 						КАК Характеристика,
				|	ТабТовары.Количество 							КАК Количество,
				|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)	КАК Назначение,
				|	&Склад 											КАК Склад
				|ПОМЕСТИТЬ ТабКешТоварыПредварительные
				|ИЗ
				|	&ТабТовары КАК ТабТовары
				|;";
				
	КонецЕсли;
			
	ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Организация 		КАК Организация,
				|	Номенклатура 		КАК Номенклатура,
				|	Характеристика 		КАК Характеристика,
				|	Склад 				КАК Склад,
				|	Назначение			КАК Назначение,
				|	СУММА(Количество) 	КАК Количество
				|ПОМЕСТИТЬ ТабКешТовары
				|ИЗ
				|	ТабКешТоварыПредварительные
				|СГРУППИРОВАТЬ ПО
				|	Организация,
				|	Номенклатура,
				|	Характеристика,
				|	Склад,
				|	Назначение
				|;";
				
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Организация 			КАК Организация,
				|	Номенклатура 			КАК Номенклатура,
				|	Характеристика 			КАК Характеристика,
				|	Склад					КАК Склад,
				|	ВидЗапасов				КАК ВидЗапасов,
				|	КоличествоОстаток   	КАК Количество
				|ПОМЕСТИТЬ ОстаткиТоваровОрганизаций
				|ИЗ
				|	РегистрНакопления.ТоварыОрганизаций.Остатки(
				|  			&Дата,
				|  			(Номенклатура, Характеристика, Склад) В
				|  				(ВЫБРАТЬ
				|  					Номенклатура,
				|  					Характеристика,
				|  					Склад
				|  				ИЗ
				|  					ТабКешТовары))
				| ГДЕ
				| 	ВидЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
				| 	
				| ОБЪЕДИНИТЬ ВСЕ
				| 
				| ВЫБРАТЬ
				|	Организация 			КАК Организация,
				|	Номенклатура 			КАК Номенклатура,
				|	Характеристика 			КАК Характеристика,
				|	Склад					КАК Склад,
				|	ВидЗапасов				КАК ВидЗапасов,
				|	КоличествоОстаток   	КАК Количество
				|ИЗ
				|	РегистрНакопления.ТоварыОрганизаций.Остатки(
				|  			&Дата,
				|  			(Номенклатура, Характеристика, Склад) В
				|  				(ВЫБРАТЬ
				|  					Номенклатура,
				|  					Характеристика,
				|  					Склад
				|  				ИЗ
				|  					ТабКешТовары))
				|ГДЕ
				|	ВидЗапасов.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
				|;";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Организация 			КАК Организация,
				|	Номенклатура 			КАК Номенклатура,
				|	Характеристика 			КАК Характеристика,
				|	Склад					КАК Склад,
				|	ВидЗапасов				КАК ВидЗапасов,
				|	КоличествоОстаток   	КАК Количество
				|ПОМЕСТИТЬ ОстаткиТоваровОрганизаций
				|ИЗ
				|	РегистрНакопления.ТоварыОрганизаций.Остатки(
				|  			&Дата,
				|  			(Номенклатура, Характеристика, Склад) В
				|  				(ВЫБРАТЬ
				|  					Номенклатура,
				|  					Характеристика,
				|  					Склад
				|  				ИЗ
				|  					ТабКешТовары))
				|;";
	КонецЕсли;				
					
	ТекстЗапроса = ТекстЗапроса + "
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТоварыДокумента.Организация 											КАК ОрганизацияПолучатель,
				|  	ТоварыДокумента.Номенклатура 											КАК Номенклатура,
				|	ТоварыДокумента.Характеристика 											КАК Характеристика,
				|	ТоварыДокумента.Количество - ЕСТЬNULL(ТоварыОрганизаций.Количество, 0) 	КАК Количество,
				|	ТоварыДокумента.Склад 													КАК Склад,
				|	ТоварыДокумента.Назначение 												КАК Назначение,
				|	ТоварыОрганизаций.Организация                                           КАК Организация
				|ПОМЕСТИТЬ ТабКешТаблицаВидовЗапаса
				|ИЗ
				|	ТабКешТовары КАК ТоварыДокумента
				|	  	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваровОрганизаций КАК ТоварыОрганизаций
				|	  	ПО ТоварыОрганизаций.Номенклатура 			= ТоварыДокумента.Номенклатура
				|	  		И ТоварыОрганизаций.Характеристика 		= ТоварыДокумента.Характеристика
				|	  		И ТоварыОрганизаций.Склад 				= ТоварыДокумента.Склад
				|	  		И ТоварыОрганизаций.Организация 		= ТоварыДокумента.Организация
				|	  		И ТоварыОрганизаций.Количество  		>= ТоварыДокумента.Количество
				|			И ТоварыОрганизаций.ВидЗапасов.Назначение   = ТоварыДокумента.Назначение
				|ГДЕ
				|  ТоварыДокумента.Количество - ЕСТЬNULL(ТоварыОрганизаций.Количество, 0) > 0
				|;
                |
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|  	ТоварыОрганизаций.Номенклатура					КАК Номенклатура,
				|  	ТоварыОрганизаций.Характеристика				КАК Характеристика,
				|  	ТоварыОрганизаций.Организация 					КАК ОрганизацияОтправитель,
				|  	ТабКешТаблицаВидовЗапаса.ОрганизацияПолучатель	КАК ОрганизацияПолучатель,
				|  	ТоварыОрганизаций.Количество					КАК КоличествоОстаток,
				|  	ТабКешТаблицаВидовЗапаса.Количество				КАК Количество,
				|  	ТабКешТаблицаВидовЗапаса.Склад 					КАК Склад,
				|  	ТабКешТаблицаВидовЗапаса.Назначение 			КАК Назначение,
				|  	ТоварыОрганизаций.ВидЗапасов					КАК ВидЗапасов
				|ПОМЕСТИТЬ ТабТаблицаВидовЗапаса
				|ИЗ
				|  	ОстаткиТоваровОрганизаций КАК ТоварыОрганизаций
				|  	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКешТаблицаВидовЗапаса КАК ТабКешТаблицаВидовЗапаса
				|  	ПО ТоварыОрганизаций.Номенклатура = ТабКешТаблицаВидовЗапаса.Номенклатура
				|  		И ТоварыОрганизаций.Характеристика = ТабКешТаблицаВидовЗапаса.Характеристика
				|  		И ТоварыОрганизаций.Организация <> ТабКешТаблицаВидовЗапаса.ОрганизацияПолучатель
				|;
                |
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Номенклатура 		КАК Номенклатура,
				|	Характеристика      КАК Характеристика,
				|	ВидЦены				КАК ВидЦены,
				|	Упаковка			КАК Упаковка,
				|	Цена				КАК Цена
				|ПОМЕСТИТЬ ТаблицаЦенНоменклатуры
				|ИЗ
				|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|  			&Дата,
				|  			(Номенклатура, ВидЦены, Характеристика) В
				|  					(ВЫБРАТЬ
				|  						Номенклатура,
				|  						ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен),
				|  						Характеристика
				|  					ИЗ
				|  						ТабТаблицаВидовЗапаса))
				|;
                |
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|  	ТабТаблицаВидовЗапаса.ОрганизацияОтправитель	КАК ОрганизацияОтправитель,
				|  	ТабТаблицаВидовЗапаса.ОрганизацияПолучатель		КАК ОрганизацияПолучатель,
				|  	ТабТаблицаВидовЗапаса.Номенклатура				КАК Номенклатура,
				|  	ТабТаблицаВидовЗапаса.Характеристика			КАК Характеристика,
				|  	ТабТаблицаВидовЗапаса.Назначение				КАК Назначение,
				|  	ТабТаблицаВидовЗапаса.Количество				КАК Количество,
				|  	ТаблицаЦен.ВидЦены								КАК ВидЦены,
				|  	ТабТаблицаВидовЗапаса.КоличествоОстаток			КАК КоличествоОстаток,
				|  	ВЫБОР
				|  		КОГДА ТаблицаЦен.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
				|  			ТОГДА ТаблицаЦен.Цена
				|  		ИНАЧЕ ТаблицаЦен.Цена * ТаблицаЦен.Упаковка.Коэффициент
				|  	КОНЕЦ 											КАК Цена,
				|  	ТабТаблицаВидовЗапаса.Склад 						КАК Склад,
				|  	ТабТаблицаВидовЗапаса.ВидЗапасов					КАК ВидЗапасов
				|ПОМЕСТИТЬ ТабКешВидыЗапасовСЦенами
				|ИЗ
				|	ТабТаблицаВидовЗапаса КАК ТабТаблицаВидовЗапаса
				|  	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенНоменклатуры КАК ТаблицаЦен
				|  	ПО ТабТаблицаВидовЗапаса.Номенклатура 		= ТаблицаЦен.Номенклатура
				|  		И ТабТаблицаВидовЗапаса.Характеристика 	= ТаблицаЦен.Характеристика
				|;
                |
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТабТаблицаВидовЗапаса.ОрганизацияОтправитель		КАК ОрганизацияОтправитель,
				|	ТабТаблицаВидовЗапаса.ОрганизацияПолучатель			КАК ОрганизацияПолучатель,
				|	ТабТаблицаВидовЗапаса.Номенклатура					КАК Номенклатура,
				|	ТабТаблицаВидовЗапаса.Характеристика				КАК Характеристика,
				|  	ТабТаблицаВидовЗапаса.Назначение					КАК Назначение,
				|	ТабТаблицаВидовЗапаса.Количество					КАК Количество,
				|	ТабТаблицаВидовЗапаса.КоличествоОстаток				КАК КоличествоОстаток,
				|	ТабТаблицаВидовЗапаса.ВидЦены						КАК ВидЦены,
				|	ВЫБОР
				|	  КОГДА ЕСТЬNULL(ТабТаблицаВидовЗапаса.Цена, 0) = 0
				|	  	ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
				|	  ИНАЧЕ ТабТаблицаВидовЗапаса.Цена
				|	КОНЕЦ 												КАК Цена,
				|	ТабТаблицаВидовЗапаса.Склад							КАК Склад,
				|  	ТабТаблицаВидовЗапаса.ВидЗапасов					КАК ВидЗапасов
				|	ПОМЕСТИТЬ ТабВидыЗапасовСЦенами
				|ИЗ
				|	ТабКешВидыЗапасовСЦенами КАК ТабТаблицаВидовЗапаса
				|	  ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенНоменклатуры КАК ЦеныНоменклатуры
				|	  ПО ТабТаблицаВидовЗапаса.Номенклатура 	= ЦеныНоменклатуры.Номенклатура
				|	  	И ТабТаблицаВидовЗапаса.Характеристика 	= ЦеныНоменклатуры.Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТабВидыЗапасовСЦенами.ОрганизацияОтправитель 		КАК ОрганизацияОтправитель,
				|	ТабВидыЗапасовСЦенами.ОрганизацияПолучатель			КАК ОрганизацияПолучатель,
				|	ТабВидыЗапасовСЦенами.Номенклатура 					КАК Номенклатура,
				|	ТабВидыЗапасовСЦенами.Характеристика				КАК Характеристика,
				|  	ТабВидыЗапасовСЦенами.Назначение					КАК Назначение,
				|	ТабВидыЗапасовСЦенами.Количество 					КАК Количество,
				|	ТабВидыЗапасовСЦенами.КоличествоОстаток				КАК КоличествоОстаток,
				|	ТабВидыЗапасовСЦенами.ВидЦены						КАК ВидЦены,
				|	ТабВидыЗапасовСЦенами.Цена							КАК Цена,
				|	ТабВидыЗапасовСЦенами.Номенклатура.СтавкаНДС 		КАК СтавкаНДС,
				|	ТабВидыЗапасовСЦенами.Склад 						КАК Склад,
				|	ТабВидыЗапасовСЦенами.ВидЗапасов 					КАК ВидЗапасов
				|ПОМЕСТИТЬ ТаблицаНоменклатурыПредваритальная
				|ИЗ
				|	ТабВидыЗапасовСЦенами КАК ТабВидыЗапасовСЦенами
				|ГДЕ
				|	ТабВидыЗапасовСЦенами.Цена > 0
				|	И ТабВидыЗапасовСЦенами.ОрганизацияОтправитель <> ТабВидыЗапасовСЦенами.ОрганизацияПолучатель
				|;
                |
				|////////////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТабКешТоварыПредварительные;
				|УНИЧТОЖИТЬ ТабКешТовары;
				|УНИЧТОЖИТЬ ОстаткиТоваровОрганизаций;
				|УНИЧТОЖИТЬ ТабКешТаблицаВидовЗапаса;
				|УНИЧТОЖИТЬ ТабТаблицаВидовЗапаса; 
				|УНИЧТОЖИТЬ ТаблицаЦенНоменклатуры;
				|УНИЧТОЖИТЬ ТабКешВидыЗапасовСЦенами;
				|УНИЧТОЖИТЬ ТабВидыЗапасовСЦенами;
				|
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Номенклатура 				КАК Номенклатура,
				|	Характеристика				КАК Характеристика,
				|  	Назначение					КАК Назначение,
				|	Количество 					КАК Количество	
				|ИЗ
				|	ТаблицаНоменклатурыПредваритальная
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОрганизацияОтправитель 		КАК ОрганизацияОтправитель,
				|	ОрганизацияПолучатель		КАК ОрганизацияПолучатель,
				|	Номенклатура 				КАК Номенклатура,
				|	Характеристика				КАК Характеристика,
				|	Количество 					КАК Количество,
				|	КоличествоОстаток			КАК КоличествоОстаток,
				|	ВидЦены						КАК ВидЦены,
				|	Цена						КАК Цена,
				|	Номенклатура.СтавкаНДС 		КАК СтавкаНДС,
				|	Склад 						КАК Склад,
				|	ВидЗапасов 					КАК ВидЗапасов,
				|	ВидЗапасов.Назначение		КАК Назначение
				|ИЗ 
				|	ТаблицаНоменклатурыПредваритальная
				|ГДЕ
				|	Количество > 0
				|УПОРЯДОЧИТЬ ПО
				|	ОрганизацияОтправитель.Наименование
				|;";		
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПередачи()

Функция ПолучитьТекстЗапросаВидыЗапасовРеализацияТоваров()

	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ВидыЗапасовДокумента.НомерСтроки 										КАК НомерСтроки,
			|	ВидыЗапасовДокумента.Склад 												КАК Склад,
			|	ВидыЗапасовДокумента.Номенклатура 										КАК Номенклатура,
			|	ВидыЗапасовДокумента.Характеристика 									КАК Характеристика,
			|	ВЫРАЗИТЬ(ВидыЗапасовДокумента.ВидЗапасов КАК Справочник.ВидыЗапасов)	КАК ВидЗапасовПродавца,
			|	ВидыЗапасовДокумента.НомерГТД 											КАК НомерГТД,
			|	ВидыЗапасовДокумента.Количество 										КАК Количество
			|ПОМЕСТИТЬ ТаблицаВидыЗапасовПредварительная
			|ИЗ
			|	&ВидыЗапасов КАК ВидыЗапасовДокумента
   			|;
			|
			|ВЫБРАТЬ
			|	НомерСтроки 						КАК НомерСтроки,
			|	ВЫРАЗИТЬ(ВидЗапасовПродавца.ВидЗапасовВладельца КАК Справочник.ВидыЗапасов).Организация КАК ОрганизацияОтправитель,
			|	Склад 								КАК Склад,
			|	Номенклатура 						КАК Номенклатура,
			|	Характеристика 						КАК Характеристика,
			|	ВидЗапасовПродавца					КАК ВидЗапасовПродавца,
			|	НомерГТД 							КАК НомерГТД,
			|	Количество 							КАК Количество
			|ПОМЕСТИТЬ ТаблицаВидыЗапасов
			|ИЗ
			|	ТаблицаВидыЗапасовПредварительная
			|ГДЕ
			|	ВидЗапасовПродавца.РеализацияЗапасовДругойОрганизации
			|;";
			
	Возврат ТекстЗапроса;
			
КонецФункции // ПолучитьТекстЗапросаВидыЗапасовРеализацияТоваров()
		
Функция ПолучитьТекстЗапросаВидыЗапасовДокумента()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыЗапасовДокумента.НомерСтроки 										КАК НомерСтроки,
	|	&Склад																	КАК Склад,
	|	ВидыЗапасовДокумента.Номенклатура 										КАК Номенклатура,
	|	ВидыЗапасовДокумента.Характеристика 									КАК Характеристика,
	|	ВЫРАЗИТЬ(ВидыЗапасовДокумента.ВидЗапасов КАК Справочник.ВидыЗапасов)	КАК ВидЗапасовПродавца,
	|	ВидыЗапасовДокумента.НомерГТД 											КАК НомерГТД,
	|	ВидыЗапасовДокумента.Количество 										КАК Количество
	|ПОМЕСТИТЬ ТаблицаВидыЗапасовПредварительная
	|ИЗ
	|	&ВидыЗапасов КАК ВидыЗапасовДокумента
   	|;
	|
	|ВЫБРАТЬ
	|	НомерСтроки 						КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ВидЗапасовПродавца.ВидЗапасовВладельца КАК Справочник.ВидыЗапасов).Организация КАК ОрганизацияОтправитель,
	|	Склад 								КАК Склад,
	|	Номенклатура 						КАК Номенклатура,
	|	Характеристика 						КАК Характеристика,
	|	ВидЗапасовПродавца					КАК ВидЗапасовПродавца,
	|	НомерГТД 							КАК НомерГТД,
	|	Количество 							КАК Количество
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ТаблицаВидыЗапасовПредварительная
    |ГДЕ
	|	ВидЗапасовПродавца.РеализацияЗапасовДругойОрганизации
	|;";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаВидыЗапасоввнутреннееПотребление() 
 
 
 
 
Функция СоздатьДокументПередачи(СтруктураПараметров, РезультатПоиска, Источник)
	
	ОрганизацияОтправитель 	= РезультатПоиска.ОрганизацияОтправитель;
	ДатаОснования			= Источник.Дата;
	ТекДата					= ТекущаяДатаСеанса();
	ДатаПередачи 			= ?(ДатаОснования > ТекДата, ТекДата, ДатаОснования - 1);
	ТекущийПользователь 	= ПараметрыСеанса.ТекущийПользователь;
	ПользовательПоУмолчанию = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("854f9de6-3ffc-11e0-9f98-001517115d85"));
	ВалютаЦены				= РезультатПоиска.ВидЦены.ВалютаЦены;
	
	ДокументОбъект = Документы.ПередачаТоваровМеждуОрганизациями.СоздатьДокумент();
	//ДокументОбъект.Заполнить(СтруктураПараметров.ДокументСсылка);
	
	ДокументОбъект.Дата                        	= ДатаПередачи;
    ДокументОбъект.Организация                 	= РезультатПоиска.ОрганизацияОтправитель;
    ДокументОбъект.ОрганизацияПолучатель     	= РезультатПоиска.ОрганизацияПолучатель;
    ДокументОбъект.ХозяйственнаяОперация     	= Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
    ДокументОбъект.ВидЦены                     	= РезультатПоиска.ВидЦены;
    ДокументОбъект.Валюта                    	= ВалютаЦены;
    ДокументОбъект.ВалютаВзаиморасчетов        	= ВалютаЦены;
    ДокументОбъект.ДатаПлатежа               	= ДатаПередачи;
	ДокументОбъект.Менеджер						= ТекущийПользователь;
	ДокументОбъект.Подразделение				= ТекущийПользователь.ТекущееПодразделение;
    ДокументОбъект.НалогообложениеНДС        	= Справочники.Организации.НалогообложениеНДС(РезультатПоиска.ОрганизацияОтправитель, Неопределено, ДатаПередачи);
    ДокументОбъект.Склад                    	= РезультатПоиска.Склад;
	ДокументОбъект.ЦенаВключаетНДС              = Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(РезультатПоиска.ВидЦены).ЦенаВключаетНДС;
	ДокументОбъект.Комментарий					= СтруктураПараметров.НавигационнаяСсылка;
	ДокументОбъект.БанковскийСчетОрганизации 	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(РезультатПоиска.ОрганизацияОтправитель, , );
	
	Если ТекущийПользователь = ПользовательПоУмолчанию Тогда
		ДокументОбъект.Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	Иначе
    	ДокументОбъект.Подразделение = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция СоздатьТаблицуВидовЗапасов()

	ТаблицаВидовЗапасов  = Новый ТаблицаЗначений;
	ВидыЗапасовРеквизиты = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ТабличныеЧасти.ВидыЗапасов.Реквизиты;
	
	Для каждого Реквизит Из ВидыЗапасовРеквизиты Цикл
		ТаблицаВидовЗапасов.Колонки.Добавить(Реквизит.Имя, Новый ОписаниеТипов(Реквизит.Тип));
	КонецЦикла; 

	Возврат ТаблицаВидовЗапасов;

КонецФункции // СоздатьТаблицуВидовЗапасов()

Процедура ЗаполнитьДополнительныеСвойстваПередачи(НаборДокументов, НаборТаблицВидовЗапасов)
	Для каждого ДокументПередачи Из НаборДокументов Цикл
		ТаблицаВидовЗапасов = НаборТаблицВидовЗапасов.Получить(ДокументПередачи.Значение);
		Если ТаблицаВидовЗапасов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДополнительныеСвойства = ДокументПередачи.Значение.ДополнительныеСвойства;
		ДополнительныеСвойства.Вставить("ПерезаполнятьВидыЗапасовПередПередачей", Истина);
		ДополнительныеСвойства.Вставить("ТаблицаВидовЗапасов", ТаблицаВидовЗапасов);
	КонецЦикла; 
КонецПроцедуры
 
 
 

Процедура ЗаполнитьСтрокуТабличнойЧастиДокумента(ДокументОбъект, ТаблицаВидыЗапасов, СтрокаТаблицы, КоличествоПеренести)

	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	
	НоваяСтрока.Номенклатура 		= СтрокаТаблицы.Номенклатура;
	НоваяСтрока.Характеристика 		= СтрокаТаблицы.Характеристика;
	НоваяСтрока.Упаковка 			= Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	НоваяСтрока.КоличествоУпаковок 	= Мин(КоличествоПеренести, СтрокаТаблицы.КоличествоОстаток);
	НоваяСтрока.Количество 			= НоваяСтрока.КоличествоУпаковок;
	НоваяСтрока.ВидЦены 			= ДокументОбъект.ВидЦены;
	НоваяСтрока.Цена 				= СтрокаТаблицы.Цена;
	НоваяСтрока.Сумма				= НоваяСтрока.Количество * НоваяСтрока.Цена;
	НоваяСтрока.СтавкаНДС 			= ?(ДокументОбъект.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, СтрокаТаблицы.СтавкаНДС);
	НоваяСтрока.СуммаНДС			= НоваяСтрока.Сумма * ПолучитьКоэффСтавкиНДС(НоваяСтрока.СтавкаНДС);
	НоваяСтрока.СуммаСНДС			= ?(ДокументОбъект.ЦенаВключаетНДС, НоваяСтрока.Сумма, НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС);
	
	
	СтрокаВидыЗапасов = ТаблицаВидыЗапасов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаВидыЗапасов, НоваяСтрока);
	СтрокаВидыЗапасов.ВидЗапасов = СтрокаТаблицы.ВидЗапасов;
	
	КоличествоПеренести 		= КоличествоПеренести - НоваяСтрока.КоличествоУпаковок;
	СтрокаТаблицы.КоличествоОстаток	= СтрокаТаблицы.КоличествоОстаток - НоваяСтрока.КоличествоУпаковок;
	
КонецПроцедуры

Функция ПолучитьНавигационнуюСсылкуИсточника(Источник)
	
	Если НЕ Источник.ЭтоНовый() Тогда
		НоваяСсылка = Источник.Ссылка;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику")				Тогда 
		Ссылка = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")  		Тогда 
		Ссылка = Документы.ВнутреннееПотреблениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") 					Тогда 
		Ссылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор); 
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг")				Тогда 
		Ссылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор); 
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеНедостачТоваров")				Тогда 
		Ссылка = Документы.СписаниеНедостачТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор); 
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СборкаТоваров")						Тогда 
		Ссылка = Документы.СборкаТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор); 
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаНазначенияТоваров")		Тогда
		Ссылка = Документы.КорректировкаНазначенияТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор); 
		Источник.УстановитьСсылкуНового(Ссылка);
		НоваяСсылка = Источник.ПолучитьСсылкуНового();
	КонецЕсли;
	
	Возврат Новый Структура("Ссылка, НавигационнаСсылка", НоваяСсылка, ПолучитьНавигационнуюСсылку(НоваяСсылка));
	
КонецФункции // ПолучитьНавигационнуюСсылкуИсточника()
 

Функция ПолучитьВидЦеныПоИдентификатору()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидЦены КАК ВходнаяЦена
	                      |ИЗ
	                      |	РегистрСведений.ALPS_ВидыЦен
	                      |ГДЕ
	                      |	Входная = ИСТИНА");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ВходнаяЦена, Неопределено);
	
КонецФункции

Функция ПолучитьКоэффСтавкиНДС(СтавкаНДС)

	НДС_10 	= Перечисления.СтавкиНДС.НДС10;
	НДС_110 = Перечисления.СтавкиНДС.НДС10_110;
	НДС_18 	= Перечисления.СтавкиНДС.НДС18;
	НДС_118 = Перечисления.СтавкиНДС.НДС18_118;
	НДС_20 	= Перечисления.СтавкиНДС.НДС20;
	НДС_120 = Перечисления.СтавкиНДС.НДС20_120;
	
	Если СтавкаНДС = НДС_10 ИЛИ СтавкаНДС = НДС_110 Тогда
	
		Возврат 0.1;
	
	КонецЕсли; 
	
	Если СтавкаНДС = НДС_18 ИЛИ СтавкаНДС = НДС_118 Тогда
	
		Возврат 0.18;
	
	КонецЕсли;
	
	Если СтавкаНДС = НДС_20 ИЛИ СтавкаНДС = НДС_120 Тогда
	
		Возврат 0.2;
	
	КонецЕсли;
	
	Возврат 0;

КонецФункции
 


Процедура ПроверитьВидыЗапасовИсточника(Источник)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаВидовЗапасов.ВидЗапасов 	КАК ВидЗапасов,
						  |	ТаблицаВидовЗапасов.Ссылка		КАК Ссылка
	                      |ПОМЕСТИТЬ ВидыЗапасов
	                      |ИЗ
	                      |	&ТаблицаВидовЗапасов КАК ТаблицаВидовЗапасов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |	Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ВидыЗапасов 
	                      |ГДЕ
	                      |	ВидЗапасов.Организация <> &Организация");
						  
	Запрос.УстановитьПараметр("ТаблицаВидовЗапасов", Источник.ВидыЗапасов.Выгрузить());
	Запрос.УстановитьПараметр("Организация", Источник.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписатьИнформациюОПередаче(Выборка.Ссылка, 
					Документы.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка(), 
					НСтр("ru='Неправильное заполнение видов запасов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЦикла;

КонецПроцедуры
 

Процедура ЗаписатьИнформациюОПередаче(ДокументИсточник, ДокументПередача, Комментарий)
	
	//ТекДата		 = ТекущаяДатаСеанса();
	//НаборЗаписей = РегистрыСведений.ЛогПредач.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Период.Установить(ТекДата);
	//НаборЗаписей.Отбор.ДокументПередача.Установить(ДокументПередача);
	//
	//Запись 					= НаборЗаписей.Добавить();
	//Запись.Период 			= ТекДата;
	//Запись.ДокументПередача = ДокументПередача;
	//Запись.ДокументИсточник = ДокументИсточник;
	//Запись.Комментарий 		= Комментарий;
	//НаборЗаписей.Записать();
	
КонецПроцедуры






Функция ПолучитьТекстЗапросаОстатков()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Выручка.АналитикаУчетаНоменклатуры,
		|	Выручка.АналитикаУчетаПоПартнерам.Организация КАК Организация,	
		|	СУММА(ВЫБОР
		|			КОГДА Выручка.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|				ТОГДА IsNull(Выручка.СуммаВыручкиОборот, 0)
		|			ИНАЧЕ IsNull(Выручка.СебестоимостьОборот, 0)
		|		КОНЕЦ) КАК КОС
		|ПОМЕСТИТЬ Выручка		
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоДня, &КонецДня, , ) КАК Выручка		
		|ГДЕ
		|	Выручка.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)		
		|СГРУППИРОВАТЬ ПО
		|	Выручка.АналитикаУчетаНоменклатуры,
		|	Выручка.АналитикаУчетаПоПартнерам.Организация			
		|;		  
		| 
		|ВЫБРАТЬ
		|	&НачалоДня КАК Период,
		|	АУН.Номенклатура,
		|	АУН.Характеристика,
		|	АУН.Склад, 
		|	Склады.Организация, 
		|	СУММА(СебестоимостьТоваров.СтоимостьОстаток) КАК Стоимость,
		|	СУММА(Выручка.КОС) КАК КОС
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки(&НачалоДня, ) КАК СебестоимостьТоваров
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АУН
		|		ПО (АУН.КлючАналитики = СебестоимостьТоваров.АналитикаУчетаНоменклатуры)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК Склады
		|		ПО (Склады.Склад = АУН.Склад)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Выручка КАК Выручка
		|		ПО (Выручка.АналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры)
		|		И  (Выручка.Организация = Склады.Организация)
		|		
		|СГРУППИРОВАТЬ ПО
		|	АУН.Номенклатура,
		|	АУН.Характеристика,
		|	АУН.Склад,
		|	Склады.Организация
		|;
		|
		|УНИЧТОЖИТЬ Выручка;";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОстатков()

Функция ПолучитьТекстЗапросаЭкстраполяцииОстатков()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|   Организация,
		|	Стоимость,
		|	КОС
		|ПОМЕСТИТЬ КешДвижений
		|ИЗ
		|	&ТаблицаДвижений КАК ТаблицаДвижений
		|;
		|ВЫБРАТЬ
		|	КешДвижений.Номенклатура,
		|	КешДвижений.Характеристика,
		|	КешДвижений.Склад,
		|	КешДвижений.Организация,
		|	Сумма(КешДвижений.Стоимость) / &ДеньМесяца КАК Стоимость,
		|	Сумма(КешДвижений.КОС) 		 / &ДеньМесяца КАК КОС
		|ИЗ
		|	КешДвижений КАК КешДвижений
        |
		|СГРУППИРОВАТЬ ПО
		|	КешДвижений.Номенклатура,
		|	КешДвижений.Характеристика,
		|	КешДвижений.Склад,
		|	КешДвижений.Организация";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЭкстраполяцииОстатков()
 
Функция СформироватьТекстЗапросаСДоплнительнимиСведениями()
	ТекстЗапроса = "ВЫБРАТЬ
	 |	ДополнительныеСведения.Объект,
	 |	ДополнительныеСведения.Свойство,
	 |	ДополнительныеСведения.Значение КАК Значение
	 |ИЗ
	 |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	 |ГДЕ
	 |	ДополнительныеСведения.Свойство = &Свойство
	 |	И ДополнительныеСведения.Объект = &Объект
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ДополнительныеСведения.Значение,
	 |	ДополнительныеСведения.Объект,
	 |	ДополнительныеСведения.Свойство";
	
	Возврат ТекстЗапроса;
КонецФункции
 
 






// Перепродать сборку при разборке
Процедура СделатьПередачуПриРазборке(Источник)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТоварыОрганизаций.Номенклатура,
	                      |	ТоварыОрганизаций.Склад,
	                      |	ТоварыОрганизаций.Организация,
	                      |	ТоварыОрганизаций.КоличествоОстаток,
	                      |	0 КАК Сортировка
	                      |ПОМЕСТИТЬ КешНоменклатура
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.Остатки(
	                      |			,
	                      |			Номенклатура = &Номенклатура
	                      |				И Склад = &Склад
	                      |				И Организация = &Организация) КАК ТоварыОрганизаций
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ТоварыОрганизаций.Номенклатура,
	                      |	ТоварыОрганизаций.Склад,
	                      |	ТоварыОрганизаций.Организация,
	                      |	ТоварыОрганизаций.КоличествоОстаток,
	                      |	1
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.Остатки(
	                      |			,
	                      |			Номенклатура = &Номенклатура
	                      |				И Склад = &Склад
	                      |				И Организация <> &Организация) КАК ТоварыОрганизаций
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КешНоменклатура.Номенклатура,
	                      |	КешНоменклатура.Склад,
	                      |	КешНоменклатура.Организация,
	                      |	КешНоменклатура.КоличествоОстаток,
	                      |	КешНоменклатура.Сортировка КАК Сортировка,
	                      |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	                      |ИЗ
	                      |	КешНоменклатура КАК КешНоменклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |				&ДатаДокумента,
	                      |				Номенклатура = &Номенклатура
	                      |					И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	                      |		ПО КешНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Сортировка");
						  
	ВходнаяЦена = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85"));						  
						  
	Запрос.УстановитьПараметр("Номенклатура", Источник.Номенклатура);
	Запрос.УстановитьПараметр("Склад", Источник.Склад);
	Запрос.УстановитьПараметр("Организация", Источник.Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Источник.Дата);
	Запрос.УстановитьПараметр("ВидЦены", ВходнаяЦена);
	
	Выборка 	= Запрос.Выполнить().Выбрать();
	Количество  = Источник.Количество;
	
	Пока Выборка.Следующий() И Количество > 0 Цикл
		Если Выборка.Организация = Источник.Организация Тогда
			Количество = Количество - Выборка.КоличествоОстаток;
			Продолжить;
		Иначе
			
			ДокументОбъект = Документы.ПередачаТоваровМеждуОрганизациями.СоздатьДокумент();
			ДокументОбъект.Заполнить(Источник.Ссылка);
						
			ДокументОбъект.Дата                        	= Источник.Дата - 1;
		    ДокументОбъект.Организация                 	= Выборка.Организация;
		    ДокументОбъект.ОрганизацияПолучатель     	= Источник.Организация;
		    ДокументОбъект.ХозяйственнаяОперация     	= Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
		    ДокументОбъект.ВидЦены                     	= ВходнаяЦена;
		    ДокументОбъект.Валюта                    	= ВходнаяЦена.ВалютаЦены;
		    ДокументОбъект.Подразделение            	= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
		    ДокументОбъект.ВалютаВзаиморасчетов        	= ВходнаяЦена.ВалютаЦены;
		    ДокументОбъект.ДатаПлатежа               	= Источник.Дата - 1;
		    ДокументОбъект.НалогообложениеНДС        	= Справочники.Организации.НалогообложениеНДС(Выборка.Организация, Неопределено, Источник.Дата);
		    ДокументОбъект.Склад                    	= Выборка.Склад;
			ДокументОбъект.ЦенаВключаетНДС              = Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(ВходнаяЦена).ЦенаВключаетНДС;
			ДокументОбъект.Комментарий                	= "Автоматическая передача перед " + Строка(Источник.Ссылка);
			ДокументОбъект.БанковскийСчетОрганизации 	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Выборка.Организация, , );
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
	
			НоваяСтрока.Номенклатура 		= Выборка.Номенклатура;
			НоваяСтрока.Упаковка 			= Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.КоличествоУпаковок 	= Мин(Выборка.КоличествоОстаток, Количество);
			НоваяСтрока.Количество 			= НоваяСтрока.КоличествоУпаковок;
			НоваяСтрока.ВидЦены 			= ДокументОбъект.ВидЦены;
			НоваяСтрока.Цена 				= Выборка.Цена;
			НоваяСтрока.Сумма				= НоваяСтрока.Количество * Выборка.Цена;
			НоваяСтрока.СтавкаНДС 			= ?(ДокументОбъект.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, Выборка.Номенклатура.СтавкаНДС);
			НоваяСтрока.СуммаНДС			= НоваяСтрока.Сумма * ПолучитьКоэффСтавкиНДС(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаСНДС			= ?(ДокументОбъект.ЦенаВключаетНДС, НоваяСтрока.Сумма, НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС);

		    Количество = Количество - НоваяСтрока.Количество;
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры








// Функция для роботы со строками
//
Функция РазобратьСтрокуВМассивПоРазделителю(Строка, Разделитель = ",") 
    МассивСтрок  = Новый Массив;
    СтрокаЗамены = СтрЗаменить(Строка, Разделитель, Символы.ПС);
	Для Индекс=1 По СтрЧислоСтрок(СтрокаЗамены) Цикл 
		МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаЗамены, Индекс));
	КонецЦикла;
    Возврат МассивСтрок; 
КонецФункции






// НЕОБХОДИМО ДЛЯ ПОДКЛЮЧЕНИЯ ВНЕШНЕЙ ОБРАБОТКИ

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "3.8.14";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Подписки на события");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Подписки на события [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Подписки на события [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "ПНС");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры



