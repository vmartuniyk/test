
#Область ИнтерфейсАвтоматичекихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("Тест_ПолучитьАдресДоставкиПоУмолчания");
	ВсеТесты.Добавить("Тест_ПолучитьСписокПеревозчиков");
	ВсеТесты.Добавить("Тест_ПолучитьАдресПартнера");
	ВсеТесты.Добавить("Тест_ПолучитьАдресСклада");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура Тест_ПолучитьАдресДоставкиПоУмолчания() Экспорт
	 Партнер = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор("ce6972d7-4747-11e0-9f98-001517115d85")); // Тищук Дима 
	 АдресДоставки = ПолучитьАдресДоставкиПоУмолчания(Партнер);
	 ЮнитТест.ПроверитьТип(АдресДоставки, "Строка", );
КонецПроцедуры

Процедура Тест_ПолучитьСписокПеревозчиков() Экспорт

	МассивПеревозчиков = ПолучитьСписокПеревозчиков();
	
	ЮнитТест.ПроверитьТип(МассивПеревозчиков, "Массив", );
	ЮнитТест.ПроверитьНеРавенство(МассивПеревозчиков.Количество(), 0, );

КонецПроцедуры

Процедура Тест_ПолучитьАдресПартнера() Экспорт
	Партнер 	  = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор("ce6972d7-4747-11e0-9f98-001517115d85")); // Тищук Дима
	АдресДоставки = ПолучитьАдресДоставкиПоУмолчания(Партнер);
	ЮнитТест.ПроверитьТип(АдресДоставки, "Строка", );
КонецПроцедуры

Процедура Тест_ПолучитьАдресСклада() Экспорт
	Склад 		= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")); // Склад Соборна
	АдресСклада = ПолучитьАдресСклада(Склад);
	ЮнитТест.ПроверитьТип(АдресСклада, "Строка", );
	ЮнитТест.ПроверитьНеРавенство(ПустаяСтрока(АдресСклада), Истина, НСтр("ru='Установите адрес дл склада СОборная'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
КонецПроцедуры

#КонецОбласти  


#Область ПрограммныйИнтерфейс

// Подготавливает управляемую форму документа к работе с модулем доставки 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ПодготовитьМодульДоставки(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт

	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПодготовитьРеализацияТоваровУслуг(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПодготовитьЗаказКлиента(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ПодготовитьВозвратТоваровПоставщику(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	КонецЕсли;

КонецПроцедуры

// Возвратщает адрес доставки партнера из карточки партнера
//
// Параметры:
//  Партнер - СправочникСсылка.Партнеры - партнер адрес которого нужно получить.
//
// Возвращаемое значение:
//  Строка - адрес партнера (куда нужно севершить доставку).
//
Функция ПолучитьАдресДоставкиПоУмолчания(Партнер) Экспорт
		
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаСписокАдресовПартнера();
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	МассивВыбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Адрес");
	
	Если МассивВыбора.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СкладСсылка = Справочники.Склады.НайтиПоНаименованию(МассивВыбора[0]);
	Если Не ЗначениеЗаполнено(СкладСсылка) Тогда
		Возврат МассивВыбора[0];
	Иначе
		Возврат СкладСсылка;
	КонецЕсли;
	
КонецФункции

// Возвращает массив перевозчииков
//
// Возвращаемое значение:
//  Массив - содежит следующие элементы:
//   * СправочникСсылка.Партнеры - перевозчик.
//
Функция ПолучитьСписокПеревозчиков() Экспорт

	НастройкаГлобальная = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапросаСписокПеревозчиков();
	
	Запрос.УстановитьПараметр("Сегмент", НастройкаГлобальная.ДоставкаСегментПеревозчиков);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер")

КонецФункции // ПолучитьСписокПеревозчиков()

// Возвращает адрес партнера из карточки.
//
// Параметры:
//  Партнер - СправочникСсылка.Партнеры - партнер адрес которого нужно получить.
//
// Возвращаемое значение:
//  Строка - строковое представление адреса партнера.
//
Функция ПолучитьАдресПартнера(Партнер) Экспорт
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАдресПартнера();	
	Запрос.УстановитьПараметр("Тип", 	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Представление, "");
	
КонецФункции // ПолучитьАдресПартнера(Партнер)

// Возвращает адрес склада из карочки.
//
// Параметры:
//  Склад - СправочникСсылка.Склады - склад адрес которого нужно получить.
//
// Возвращаемое значение: 
//  Строка - адрес склада.
//
Функция ПолучитьАдресСклада(Склад) Экспорт
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаАдресСклада();
						  
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.АдресСклада, "");
	
КонецФункции

// Возвращает курс валюты на дату документа
// 
// Параметры:
//  Дата - Дата - дата на которую нужно получить курс валют.
//  Валюта - СправочникСсылка.Валюта - валюта для получения курса
//
// Возвращаемое значение:
// 	Число, Неопределено - значение курса валюты, неопределено если не удалось получить курс.
//
Функция ПолучитьКурсНаДату(Дата, Валюта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКурсНаДату();
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);     	
	Выборка = Запрос.Выполнить().Выбрать();	
	Возврат ?(Выборка.Следующий(), Выборка.Курс, Неопределено);
КонецФункции



// Выполняет движение по регистру КТС_АналитикаДоставки
Процедура ВыполнитьПроведениеПоДоставке(Источник, Отказ, РежимПроведения) Экспорт

	Период          = ТекущаяДатаСеанса();
	НаборЗаписей 	= РегистрыСведений.КТС_АналитикаДоставки.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Период 				= Период;
		Запись.Объект 				= Источник.Ссылка;
		Запись.Получатель   		= Источник.СкладПолучатель;
		Запись.КТС_АдресДоставки    = ПолучитьАдресСклада(Источник.СкладПолучатель);
		
	Иначе
		
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, Источник);
		
		Запись.Период 		= Период;
		Запись.Объект 		= Источник.Ссылка;
		Запись.Получатель   = Источник.Партнер;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ВыполнитьПроведениеПоДоставке()

// Удаляет движения из регистра КТС_АналитикаДоставки
Процедура ВыполнитьУдалениеПроведенияПоДоставке(Источник, Отказ) Экспорт
	НаборЗаписей = РегистрыСведений.КТС_АналитикаДоставки.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.Объект.Установить(Источник.Ссылка);
	НаборЗаписей.Записать();
КонецПроцедуры
 
	
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Подготавливает форму документа реализации товаров услуг к работе с модулем доставки. 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа реализации товаров и услуг.
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы.
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте.
//
Процедура ПодготовитьРеализацияТоваровУслуг(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	ВидимостьЭлементов = Новый Структура;
	
	ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Партнер", "КТС_ПД_ПартнерПриИзменении");
	
	СоздатьДополнительныеРеквизитыФормы(ЭтаФорма, ИмяОбработки);
	
	СоздатьЭлементыФормы(ЭтаФорма, ЭтаФорма.Элементы.ГруппаСчетФактура, ВидимостьЭлементов);
	
КонецПроцедуры

// Подготавливает форму документа заказ клиента к работе с модулем доставки. 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа реализации товаров и услуг.
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы.
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте.
//
Процедура ПодготовитьЗаказКлиента(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)

	ВидимостьЭлементов = Новый Структура;
	
	ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Партнер", "КТС_ПД_ПартнерПриИзменении");
	
	СоздатьДополнительныеРеквизитыФормы(ЭтаФорма, ИмяОбработки);
	
	СоздатьЭлементыФормы(ЭтаФорма, ЭтаФорма.Элементы.ГруппаПодвал, ВидимостьЭлементов);

КонецПроцедуры

// Подготавливает форму документа возврат товаров поставщику к работе с модулем доставки. 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа реализации товаров и услуг.
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы.
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте.
//
Процедура ПодготовитьВозвратТоваровПоставщику(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)

	ВидимостьЭлементов = Новый Структура("КТС_ПД_ВозвратнаяДоставка");
	
	ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Партнер", "КТС_ПД_ПартнерПриИзменении");
	
	СоздатьДополнительныеРеквизитыФормы(ЭтаФорма, ИмяОбработки);
	
	СоздатьЭлементыФормы(ЭтаФорма, ЭтаФорма.Элементы.ГруппаПодвал, ВидимостьЭлементов);

КонецПроцедуры
 



// Универсальная процедура создания дополнительных реквизитов на форме документа. 
//
// Параметры:
//  ЭтаФорма 			- УправляемаяФорма 				- Форма документа реализации товаров и услуг.
//  ИмяОбработки 		- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте.
// 
Процедура СоздатьДополнительныеРеквизитыФормы(ЭтаФорма, ИмяОбработки)

	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("МодульДоставкиИмяБибилиотеки", Новый ОписаниеТипов("Строка")));
	
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	ЭтаФорма.МодульДоставкиИмяБибилиотеки = ИмяОбработки;

КонецПроцедуры

// Процедура создает элементы формы для работы из модулем доставки.
//
// Параметры:
//  ЭтаФорма 			- УправляемаяФорма 	- Форма документа реализации товаров и услуг.
//  ГруппаРодитель		- ГуппаФормы		- Гуппа после которой будут рисовться элементы модуля доставки.
//  ВидимостьЭлементов  - Структура			- Сожержит имена элементов которые не будуть отображены на форме.
//
Процедура СоздатьЭлементыФормы(ЭтаФорма, ГруппаРодитель, ВидимостьЭлементов)

	Элементы = ЭтаФорма.Элементы;
	Команды  = ЭтаФорма.Команды;
	Объект   = ЭтаФорма.Объект;
	
	// ГРУППЫ ФОРМЫ
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя", 						"КТС_ПараметрыДоставки");
	ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Заголовок", 					"Параметры доставки");
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппы.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппы.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппы.Вставить("Отображение", 				ОтображениеОбычнойГруппы.СильноеВыделение);
	ГруппаДоставка = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппы,);
	Элементы.Переместить(ГруппаДоставка, ЭтаФорма, ГруппаРодитель);
	
	ПараметрыГруппыЛево = Новый Структура;
	ПараметрыГруппыЛево.Вставить("Имя", 						"КТС_ПД_ГруппаЛево");
	ПараметрыГруппыЛево.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппыЛево.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЛево.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЛево.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЛево.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЛево.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЛево.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЛево = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппыЛево, ГруппаДоставка);
	
	ПараметрыГруппыЦентр = Новый Структура;
	ПараметрыГруппыЦентр.Вставить("Имя", 						"КТС_ПД_ГруппаЦентр");
	ПараметрыГруппыЦентр.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппыЦентр.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыЦентр.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыЦентр.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыЦентр.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыЦентр.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыЦентр.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаЦентр = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппыЦентр, ГруппаДоставка);
	
	ПараметрыГруппыПраво = Новый Структура;
	ПараметрыГруппыПраво.Вставить("Имя", 						"КТС_ПД_ГруппаПраво");
	ПараметрыГруппыПраво.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппыПраво.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыПраво.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппыПраво.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыПраво.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыПраво.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыПраво.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаПраво = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппыПраво, ГруппаДоставка);
	
	ПараметрыГруппыАдресДоставки = Новый Структура;
	ПараметрыГруппыАдресДоставки.Вставить("Имя", 						"КТС_ПД_ГруппаАдресДоставки");
	ПараметрыГруппыАдресДоставки.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппыАдресДоставки.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыАдресДоставки.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыАдресДоставки.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыАдресДоставки.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыАдресДоставки.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);
	ГруппаАдресДоставки = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппыАдресДоставки, ГруппаЦентр);
	
	
	// ЭЛЕМЕНТЫ ФОРМЫ
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_Перевозчик") Тогда
	
		ПараметрыПеревозчик = Новый Структура;
		ПараметрыПеревозчик.Вставить("Имя", 						"КТС_ПД_Перевозчик");
		ПараметрыПеревозчик.Вставить("Заголовок", 					"Перевозчик");
		ПараметрыПеревозчик.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыПеревозчик.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыПеревозчик.Вставить("ПутьКДанным", 				"Объект.КТС_Перевозчик");
		ПараметрыПеревозчик.Вставить("РастягиватьПоГоризонтали", 	Ложь);
		ПараметрыПеревозчик.Вставить("Ширина", 						30);
		ПараметрыПеревозчик.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
		ПараметрыПеревозчик.Вставить("КнопкаВыбора", 				Ложь);
		ПараметрыПеревозчик.Вставить("КнопкаСпискаВыбора", 			Истина);
		ПараметрыПеревозчик.Вставить("КнопкаОчистки", 				Истина);
		ПараметрыПеревозчик.Вставить("РедактированиеТекста", 		Ложь);
		Перевозчик = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыПеревозчик, ГруппаЛево);
		Перевозчик.УстановитьДействие("ПриИзменении", 				"ПД_Перевозчик_ПриИзменении");
		Перевозчик.УстановитьДействие("НачалоВыбораИзСписка", 		"ПД_Перевозчик_НачалоВыбораИзСписка");
		
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_АдресДоставки") Тогда
	
		ПараметрыАдресДоставки = Новый Структура;
		ПараметрыАдресДоставки.Вставить("Имя", 						"КТС_ПД_АдресДоставки");
		ПараметрыАдресДоставки.Вставить("Заголовок", 				"Адрес доставки");
		ПараметрыАдресДоставки.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыАдресДоставки.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыАдресДоставки.Вставить("ПутьКДанным", 				"Объект.КТС_АдресДоставки");
		ПараметрыАдресДоставки.Вставить("РастягиватьПоГоризонтали", Ложь);
		ПараметрыАдресДоставки.Вставить("Ширина", 					30);
		ПараметрыАдресДоставки.Вставить("ЦветФона", 				Новый Цвет(135, 206, 250));
		ПараметрыАдресДоставки.Вставить("КнопкаВыбора", 			Истина);
		ПараметрыАдресДоставки.Вставить("КнопкаОчистки", 			Истина);
		ПараметрыАдресДоставки.Вставить("РедактированиеТекста", 	Ложь);
		АдресДоставки = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыАдресДоставки, ГруппаАдресДоставки);
		АдресДоставки.УстановитьДействие("ПриИзменении", "ПД_АдресДоставки_ПриИзменении");
		АдресДоставки.УстановитьДействие("НачалоВыбора", "ПД_АдресДоставки_НачалоВыбора");
		
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("ПД_КнопкаАдресПартнера") Тогда
		
		КомандаАдресПартнера = Команды.Добавить("ПД_КнопкаАдресПартнера");
	    КомандаАдресПартнера.Действие = "ПД_ЗаполнитьАдресПартнераПоУмолчанию";
		КомандаАдресПартнера.Заголовок = "Заполнить";
		
		ПараметрыКнопкаАдресПартнера = Новый Структура;
		ПараметрыКнопкаАдресПартнера.Вставить("Имя", 			"ПД_КнопкаАдресПартнера");
		ПараметрыКнопкаАдресПартнера.Вставить("ТипЭлемента", 	Тип("КнопкаФормы"));
		ПараметрыКнопкаАдресПартнера.Вставить("ИмяКоманды", 	"ПД_КнопкаАдресПартнера");
		КнопкаАдресПартнера = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКнопкаАдресПартнера, ГруппаАдресДоставки);
		
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_ОтделениеНовойПочты") Тогда
		
		ПараметрыОтделениеНовойПочты = Новый Структура;
		ПараметрыОтделениеНовойПочты.Вставить("Имя", 						"КТС_ПД_ОтделениеНовойПочты");
		ПараметрыОтделениеНовойПочты.Вставить("Заголовок", 					"Отделение нововй почты");
		ПараметрыОтделениеНовойПочты.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыОтделениеНовойПочты.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыОтделениеНовойПочты.Вставить("ПутьКДанным", 				"Объект.КТС_ОтделениеНовойПочты");
		ПараметрыОтделениеНовойПочты.Вставить("РастягиватьПоГоризонтали", 	Ложь);
		ПараметрыОтделениеНовойПочты.Вставить("Ширина", 					30);
		ПараметрыОтделениеНовойПочты.Вставить("ЦветФона", 					Новый Цвет(135, 206, 250));
		ПараметрыОтделениеНовойПочты.Вставить("КнопкаВыбора", 		 		Истина);
		Если Объект.КТС_Перевозчик.Пустая() Тогда
			ПараметрыОтделениеНовойПочты.Вставить("ТолькоПросмотр", 		Истина);
		КонецЕсли;
	    ПараметрыОтделениеНовойПочты.Вставить("КнопкаОчистки", 				Истина);
		ПараметрыОтделениеНовойПочты.Вставить("РедактированиеТекста", 		Ложь);
		ОтделениеНовойПочты = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыОтделениеНовойПочты, ГруппаПраво);
		ОтделениеНовойПочты.УстановитьДействие("НачалоВыбора", "ПД_ОтделениеНовойПочты_НачалоВыбора")
		
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_КонтактноеЛицо") Тогда
	
		ПараметрыКонтактноеЛицо = Новый Структура;
		ПараметрыКонтактноеЛицо.Вставить("Имя", 						"КТС_ПД_КонтактноеЛицо");
		ПараметрыКонтактноеЛицо.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыКонтактноеЛицо.Вставить("Заголовок", 					"Контактное лицо");
		ПараметрыКонтактноеЛицо.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыКонтактноеЛицо.Вставить("ПутьКДанным", 				"Объект.КТС_КонтактноеЛицо");
		ПараметрыКонтактноеЛицо.Вставить("РастягиватьПоГоризонтали", 	Ложь);
		ПараметрыКонтактноеЛицо.Вставить("Ширина", 						30);
		ПараметрыКонтактноеЛицо.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
		Если Объект.КТС_Перевозчик.Пустая() Тогда
			ПараметрыКонтактноеЛицо.Вставить("ТолькоПросмотр", 			Истина);
		КонецЕсли;
		ПараметрыКонтактноеЛицо.Вставить("КнопкаОчистки", 				Истина);
		ПараметрыКонтактноеЛицо.Вставить("РедактированиеТекста", 		Истина);
		КонтактноеЛицо = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыКонтактноеЛицо, ГруппаЛево);
		
	КонецЕсли;
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_ОбъявленнаяСтоимость") Тогда
		
		ПараметрыОбъявленнаяСтоимость = Новый Структура;
		ПараметрыОбъявленнаяСтоимость.Вставить("Имя", 						"КТС_ПД_ОбъявленнаяСтоимость");
		ПараметрыОбъявленнаяСтоимость.Вставить("Заголовок",					"Объявленная стоимость");
		ПараметрыОбъявленнаяСтоимость.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыОбъявленнаяСтоимость.Вставить("Вид", 						ВидПоляФормы.ПолеВвода);
		ПараметрыОбъявленнаяСтоимость.Вставить("ПутьКДанным", 				"Объект.КТС_ОбъявленнаяСтоимость");
		ПараметрыОбъявленнаяСтоимость.Вставить("РастягиватьПоГоризонтали", 	Ложь);
		ПараметрыОбъявленнаяСтоимость.Вставить("Ширина", 					30);
		ПараметрыОбъявленнаяСтоимость.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
		Если Объект.КТС_Перевозчик.Пустая() Тогда
			ПараметрыОбъявленнаяСтоимость.Вставить("ТолькоПросмотр", 		Истина);
		КонецЕсли;
		ПараметрыОбъявленнаяСтоимость.Вставить("КнопкаОчистки", 			Истина);
		ПараметрыОбъявленнаяСтоимость.Вставить("РедактированиеТекста", 		Истина);
		ОбъявленнаяСтоимость = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыОбъявленнаяСтоимость, ГруппаЦентр);
		
	КонецЕсли;
	
	
	// Дополнительные сведения
	
	ПараметрыГруппыДополнительно = Новый Структура;
	ПараметрыГруппыДополнительно.Вставить("Имя", 						"КТС_ПД_ГруппаДополнительно");
	ПараметрыГруппыДополнительно.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппыДополнительно.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппыДополнительно.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ПараметрыГруппыДополнительно.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	ПараметрыГруппыДополнительно.Вставить("РастягиватьПоГоризонтали", 	Истина);
	ПараметрыГруппыДополнительно.Вставить("ОтображатьЗаголовок", 		Ложь);
	ПараметрыГруппыДополнительно.Вставить("Отображение", 				ОтображениеОбычнойГруппы.Нет);  
	ГруппаДополнительно = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппыДополнительно, ГруппаПраво);
	
	
	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_ПлатитПолучатель") Тогда

		ПараметрыПлатитПолучатель = Новый Структура;
		ПараметрыПлатитПолучатель.Вставить("Имя", 						"КТС_ПД_ПлатитПолучатель");
		ПараметрыПлатитПолучатель.Вставить("Заголовок",					"Платит получатель");
		ПараметрыПлатитПолучатель.Вставить("Вид", 						ВидПоляФормы.ПолеФлажка);
		ПараметрыПлатитПолучатель.Вставить("ТипЭлемента", 				Тип("ПолеФормы"));
		ПараметрыПлатитПолучатель.Вставить("ПутьКДанным", 				"Объект.КТС_ПлатитПолучатель");
		ПараметрыПлатитПолучатель.Вставить("РастягиватьПоГоризонтали", 	Ложь);
		ПараметрыПлатитПолучатель.Вставить("Ширина", 					30);
		ПараметрыПлатитПолучатель.Вставить("ЦветФона", 					Новый Цвет(217, 211, 185));
		Если Объект.КТС_Перевозчик.Пустая() Тогда
			ПараметрыПлатитПолучатель.Вставить("ТолькоПросмотр", 	Истина);
		КонецЕсли;
		ПараметрыПлатитПолучатель.Вставить("КнопкаОчистки", 			Истина);
		ПараметрыПлатитПолучатель.Вставить("РедактированиеТекста", 		Ложь);           
		ПлатитПолучатель = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыПлатитПолучатель, ГруппаДополнительно);
		
	КонецЕсли;

	Если НЕ ВидимостьЭлементов.Свойство("КТС_ПД_ВозвратнаяДоставка") Тогда

		ПараметрыВозвратнаяДоставка = Новый Структура;
		ПараметрыВозвратнаяДоставка.Вставить("Имя", 					"КТС_ПД_ВозвратнаяДоставка");
		ПараметрыВозвратнаяДоставка.Вставить("Заголовок",				"Возвратная доставка");
		ПараметрыВозвратнаяДоставка.Вставить("Вид", 					ВидПоляФормы.ПолеФлажка);
		ПараметрыВозвратнаяДоставка.Вставить("ТипЭлемента", 			Тип("ПолеФормы"));
		ПараметрыВозвратнаяДоставка.Вставить("ПутьКДанным", 			"Объект.КТС_ВозвратнаяДоставка");
		ПараметрыВозвратнаяДоставка.Вставить("РастягиватьПоГоризонтали",Ложь);
		ПараметрыВозвратнаяДоставка.Вставить("Ширина", 					30);
		ПараметрыВозвратнаяДоставка.Вставить("ЦветФона", 				Новый Цвет(217, 211, 185));
		Если Объект.КТС_Перевозчик.Пустая() Тогда
			ПараметрыВозвратнаяДоставка.Вставить("ТолькоПросмотр", 		Истина);
		КонецЕсли;
		ПараметрыВозвратнаяДоставка.Вставить("КнопкаОчистки", 			Истина);
		ПараметрыВозвратнаяДоставка.Вставить("РедактированиеТекста", 	Ложь);
		ВозвратнаяДоставка = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыВозвратнаяДоставка, ГруппаДополнительно);
		
	КонецЕсли;

КонецПроцедуры
 


Функция ТекстЗапросаСписокАдресовПартнера()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Представление КАК Адрес
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация
		|ГДЕ
		|	Ссылка = &Партнер
		|	И Тип  = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСписокАдресовПартнера()

Функция ТекстЗапросаСписокПеревозчиков()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Партнер	
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента
		|ГДЕ
		| 	Сегмент = &Сегмент
		|";
		
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСписокПеревозчиков()

Функция ТекстЗапросаАдресПартнера()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка			КАК Ссылка,	
		|	Представление	КАК Представление
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация
		|ГДЕ
		|	Ссылка = &Ссылка И Тип = &Тип";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаАдресПартнера()

Функция ТекстЗапросаАдресСклада()

	ТекстЗапроса = "ВЫБРАТЬ
                  |	Представление КАК АдресСклада
                  |ИЗ
                  |	Справочник.Склады.КонтактнаяИнформация 
				  |ГДЕ
                  |	Ссылка = &Ссылка
                  |	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
                  |	И Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаАдресСклада()
 

Функция ТекстЗапросаКурсНаДату()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Курс / Кратность КАК Курс
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта)";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаКурсНаДату()
 

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "0.0.020";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "МодульДоставки");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Модуль доставки [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Модуль доставки [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "МодульДоставки");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
