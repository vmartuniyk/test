Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.2.204";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Библиотека внешних обработок");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

	
    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Настройки внешних обработок [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Настройки внешних обработок [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "НВО");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры





Функция ПолучитьСсылкуПоНавигационнойСсылке(Менеджер, НавигационнаяСсылка) Экспорт
	ПозицияНачалаСсылки = Найти(НавигационнаяСсылка,"?ref=");
	Если НЕ ПозицияНачалаСсылки = 0 Тогда      
		UIDСсылки = Сред(НавигационнаяСсылка, ПозицияНачалаСсылки + 5, 32);
		UIDСтрока = Прав(UIDСсылки,8) + "-" + Сред(UIDСсылки, 21, 4) + "-" + Сред(UIDСсылки, 17, 4) + "-" + Лев(UIDСсылки, 4) + "-" + Сред(UIDСсылки, 5, 12);
	КонецЕсли;
	Возврат Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(UIDСтрока));	
КонецФункции

Функция ПолучитьЗначениеСведенияПоОбъектуИСвойству(Объект, Свойство) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект   = &Объект
	               |И 	ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект",   Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Значение, Неопределено); 
КонецФункции

Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти = 0) Экспорт	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
КонецФункции

Функция ПолучитьОписаниеТиповСтроки(Разрядность = 20) Экспорт	
  	КС = Новый КвалификаторыСтроки(Разрядность);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Возврат Новый ОписаниеТипов(Массив, , КС);	
КонецФункции

Функция ЭтоСимвол(Символ) Экспорт
	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96) ИЛИ (Код>=123 И Код<=126), Ложь, Истина);	
КонецФункции

Функция ЭтоЦифра(Символ) Экспорт
 	Код = КодСимвола(Символ);
	Возврат ?(Код<=47 ИЛИ Код>=58, Ложь, Истина);	 
КонецФункции

Функция ЭтоБуква(Символ) Экспорт
   	Код = КодСимвола(Символ);
	Возврат ?(Код<=64 ИЛИ (Код>=91 И Код<=96) ИЛИ (Код>=123 И Код<=126), Ложь, Истина);
КонецФункции

//Нужно будет удалить
Функция РазобратьСтрокуПоСловам(ИсходнаяСтрока) Экспорт
	
	МассивСлов = Новый Массив;	
    НоваяСтрока = "";
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
    Для инд = 1 По ДлинаСтроки Цикл
        ТекСимвол = Сред(ИсходнаяСтрока, инд, 1);
		Если ЭтоСимвол(ТекСимвол) или СтрДлина(НоваяСтрока) = 1 Тогда
			НоваяСтрока = НоваяСтрока + ТекСимвол;
			Если ДлинаСтроки = инд Тогда
				МассивСлов.Добавить(НоваяСтрока);  	
			КонецЕсли;
		ИначеЕсли НоваяСтрока = "" Тогда
			Продолжить;
		Иначе
			МассивСлов.Добавить(НоваяСтрока); 
            НоваяСтрока = "";
        КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСлов;
	
КонецФункции

Функция РазобратьСтрокуВМассивПоРазделителю(Строка, Разделитель = ".") Экспорт
    МассивСтрок = Новый Массив;
    СтрокаЗамены = СтрЗаменить(Строка, Разделитель, Символы.ПС);
    Для i=1 По СтрЧислоСтрок(СтрокаЗамены) Цикл МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаЗамены, i)); КонецЦикла;
    Возврат МассивСтрок; 
КонецФункции

Функция РазобратьСтрокуВМассивПоПробелам(Строка) Экспорт
    МассивСтрок = Новый Массив;
    СтрокаЗамены = СтрЗаменить(СтрЗаменить(Строка, Символ(160), Символы.ПС), Символ(32), Символы.ПС);
    Для i=1 По СтрЧислоСтрок(СтрокаЗамены) Цикл МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаЗамены, i)); КонецЦикла;
    Возврат МассивСтрок; 
КонецФункции

//Нужно будет удалить
Функция СформироватьШаблонПоискаПривязки(ИсходнаяСтрока) Экспорт

    НоваяСтрока = "";
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
    Для инд = 1 По ДлинаСтроки Цикл
		
		ТекСимвол = Сред(ИсходнаяСтрока, инд, 1);
		
		Если ТекСимвол = "a" ИЛИ ТекСимвол = "A" ИЛИ ТекСимвол = "а" ИЛИ ТекСимвол = "А"  Тогда
			НоваяСтрока = НоваяСтрока + "[aAаА]";
			Продолжить;
		КонецЕсли;
		
		Если ТекСимвол = "b" ИЛИ ТекСимвол = "B" ИЛИ ТекСимвол = "в" ИЛИ ТекСимвол = "В"  Тогда
			НоваяСтрока = НоваяСтрока + "[bBвВ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "c" ИЛИ ТекСимвол = "C" ИЛИ ТекСимвол = "с" ИЛИ ТекСимвол = "С"  Тогда
			НоваяСтрока = НоваяСтрока + "[cCсС]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "e" ИЛИ ТекСимвол = "E" ИЛИ ТекСимвол = "е" ИЛИ ТекСимвол = "Е"  Тогда
			НоваяСтрока = НоваяСтрока + "[eEеЕ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "h" ИЛИ ТекСимвол = "H" ИЛИ ТекСимвол = "н" ИЛИ ТекСимвол = "Н"  Тогда
			НоваяСтрока = НоваяСтрока + "[hHнН]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "i" ИЛИ ТекСимвол = "I" ИЛИ ТекСимвол = "і" ИЛИ ТекСимвол = "І"  Тогда
			НоваяСтрока = НоваяСтрока + "[iIіІ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "k" ИЛИ ТекСимвол = "K" ИЛИ ТекСимвол = "к" ИЛИ ТекСимвол = "К"  Тогда
			НоваяСтрока = НоваяСтрока + "[kKкК]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "m" ИЛИ ТекСимвол = "M" ИЛИ ТекСимвол = "м" ИЛИ ТекСимвол = "М"  Тогда
			НоваяСтрока = НоваяСтрока + "[mMмМ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "o" ИЛИ ТекСимвол = "O" ИЛИ ТекСимвол = "о" ИЛИ ТекСимвол = "О"  Тогда
			НоваяСтрока = НоваяСтрока + "[oOоО]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "p" ИЛИ ТекСимвол = "P" ИЛИ ТекСимвол = "р" ИЛИ ТекСимвол = "Р"  Тогда
			НоваяСтрока = НоваяСтрока + "[pPрР]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "t" ИЛИ ТекСимвол = "T" ИЛИ ТекСимвол = "т" ИЛИ ТекСимвол = "Т"  Тогда
			НоваяСтрока = НоваяСтрока + "[tTтТ]";
			Продолжить;
		КонецЕсли; 
		
		Если ТекСимвол = "x" ИЛИ ТекСимвол = "X" ИЛИ ТекСимвол = "х" ИЛИ ТекСимвол = "Х"  Тогда
			НоваяСтрока = НоваяСтрока + "[xXхХ]";
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = НоваяСтрока + ТекСимвол;
		
	КонецЦикла;
	
	Возврат НоваяСтрока;
	//"[aAаА]" "[bBвВ]" "[cCсС]" "[eEеЕ]" "[hHнН]" "[iIіІ]" "[kKкК]" "[mMмМ]" "[oOоО]" "[pPрР]" "[tTтТ]" "[xXхХ]";
	
КонецФункции // СформироватьШаблонПоискаПривязки()



Процедура ДобавитьЭлементВFullCSVСтроку(Строка, Элемент) Экспорт
	Если НайтиСлужебныеСимволыFullCSV(Элемент) Тогда
		Строка = Строка + """" + СтрЗаменить(Элемент,"""","""""") + """;";	
	Иначе
		Строка = Строка + "" + СтрЗаменить(Элемент,"""","""""") + ";";
	КонецЕсли;		
КонецПроцедуры

Процедура ДобавитьПоследнийЭлементВFullCSVСтроку(Строка, Элемент) Экспорт
	Если НайтиСлужебныеСимволыFullCSV(Элемент) Тогда
		Строка = Строка + """" + СтрЗаменить(Элемент,"""","""""") + """";	
	Иначе
		Строка = Строка + "" + СтрЗаменить(Элемент,"""","""""") + "";	
	КонецЕсли;
КонецПроцедуры

Функция НайтиСлужебныеСимволыFullCSV(Элемент)
	Если СтрЧислоВхождений(Элемент, """") 					> 0 
	 ИЛИ СтрЧислоВхождений(Элемент, Символы.ПС) 			> 0
	 ИЛИ СтрЧислоВхождений(Элемент, Символы.ВК) 			> 0
	 ИЛИ СтрЧислоВхождений(Элемент, Символы.ВК + Символы.ПС)> 0
	 ИЛИ СтрЧислоВхождений(Элемент, ";") 					> 0	Тогда
	 	Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции


////Проверка формата файла
//		Для Инд = 1 по ТекстовыйДокумент.КоличествоСтрок() Цикл
//			СтрокаЗагрузки = РекурсивноПолучитьВсюСтроку(ТекстовыйДокумент, ТекстовыйДокумент.ПолучитьСтроку(Инд), Инд); 
//			ктсКоличествоКолонок = ктсКоличествоКолонок(ТаблицаЗначенийИзФайла, СтрокаЗагрузки, НоминальноеКоличество);
//			
//			Если ктсКоличествоКолонок <> НоминальноеКоличество Тогда
//				Предупреждение("Формат файла имеет ошибки, отмена операции");
//				//ктсИндикаторЗаписи.Видимость = Ложь;
//				Возврат;
//			КонецЕсли;
//			
//			//Если Инд >= тхтСледШаг Тогда
//			//	ИндикаторЗаписи  = ИндикаторЗаписи + 1;
//			//	тхтСледШаг = тхтСледШаг + тхтШагИндикатора; 
//			//КонецЕсли;
//			
//		КонецЦикла;

//									   
//Функция РекурсивноПолучитьВсюСтроку(ТекстовыйДокумент, Строка, Инд)
//	
//	Если СтрЧислоВхождений(Строка, """") % 2 = 0 Тогда
//		Возврат Строка;
//	Иначе
//		Инд = Инд + 1;
//		ктсОбновитьИндикатор();
//		Возврат РекурсивноПолучитьВсюСтроку(ТекстовыйДокумент, Строка + ТекстовыйДокумент.ПолучитьСтроку(Инд), Инд);
//	КонецЕсли;                                                                                         
//	
//КонецФункции

//Функция ктсКоличествоКолонок(ТаблицаЗначений, Строка, НоминальноеКоличество)
//	
//	НоваяСтрока = ТаблицаЗначений.Добавить();
//	Строка = Строка + ";";
//	Длина = СтрДлина(Строка);	
//	КолКолонок = 0;
//	
//	Пока (Длина <> 0) Цикл 
// 
//		Если Найти (Строка,"""") = 1 Тогда  
//			КусокСтроки = ктсПолучитьКолонкуИзПолногоCSV(Строка);
//			Если КолКолонок < НоминальноеКоличество Тогда 
//				НоваяСтрока[КолКолонок] = СтрЗаменить(КусокСтроки,"""""","""");
//				НоваяСтрока[КолКолонок] = Сред(НоваяСтрока[КолКолонок], 2, СтрДлина(НоваяСтрока[КолКолонок]) - 2);
//			КонецЕсли;
//			Строка = Прав(Строка,Длина - СтрДлина(КусокСтроки) - 1); 
//		Иначе
//			ИндРазделителя = Найти (Строка,";");
//			Если КолКолонок < НоминальноеКоличество Тогда
//				НоваяСтрока[КолКолонок] = Лев(Строка, ИндРазделителя - 1);
//			КонецЕсли;
//			Строка = Прав(Строка,Длина - ИндРазделителя);
//		КонецЕсли;
//		
//		КолКолонок = КолКолонок + 1;
//		Длина = СтрДлина(Строка);	
//		
//	КонецЦикла;  	             
//		
//	Возврат КолКолонок;
//		
//КонецФункции

//Функция получает текст из колонки в формате полного csv
//
//Функция ктсПолучитьКолонкуИзПолногоCSV(СтрокаДляРазбивки, КоличествоВхождений = 0) Экспорт
//	
//	Позиция = Найти(СтрокаДляРазбивки, """;"); 
//	КусокСтроки = Лев(СтрокаДляРазбивки, Позиция);
//	КоличествоСимволов = СтрЧислоВхождений(КусокСтроки, """");
//	Если (КоличествоСимволов + КоличествоВхождений) % 2 = 0 Тогда 			
//		Возврат КусокСтроки;                              			
//	Иначе 
//		Возврат КусокСтроки + ктсПолучитьКолонкуИзПолногоCSV(Прав(СтрокаДляРазбивки, СтрДлина(СтрокаДляРазбивки) - Позиция ), КоличествоСимволов + КоличествоВхождений);
//	КонецЕсли;
//		
//КонецФункции

// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону, ДевяткаВКонце) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ktcПорядкиОкругления.Окр0_01; 
	Иначе
		ПорядокОкругления = ПараметрПорядокОкругления;
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));
		
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Если ДевяткаВКонце Тогда
		
		СтрокаРезультат 	= Строка(Результат);
		Длина_РезультатСтр  = СтрДлина(СтрокаРезультат);
		
		ИндексРазделителя   = Найти(СтрокаРезультат, ",");
		Если ИндексРазделителя = 0 Тогда
			ИндексРазделителя   = Найти(СтрокаРезультат, ".");
		КонецЕсли;
		
		Если ИндексРазделителя <> 0 Тогда
			
			СимволовПослеРазделителя = Длина_РезультатСтр - ИндексРазделителя;
			
			ЧислоКПлюсу = Число(Прав(СтрокаРезультат, 1));
			
			Результат   = Результат	+ (9 - ЧислоКПлюсу) / ?(СимволовПослеРазделителя = 1, 10, 100);
				
		Иначе
			
			ЧислоКПлюсу = Число(Прав(СтрокаРезультат, 1));
			
			Результат   = Результат	+ (9 - ЧислоКПлюсу);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции





Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт	
	Если Метаданные.Константы.Найти(ИмяКонстанты) = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Константы[ИмяКонстанты].Получить();
	КонецЕсли;
КонецФункции

Функция СтруктураВРасписание(Знач СтруктураРасписания) Экспорт
	
	Если СтруктураРасписания = Неопределено Тогда
		Возврат Новый РасписаниеРегламентногоЗадания();
	КонецЕсли;
	СписокПолей = "ВремяЗавершения,ВремяКонца,ВремяНачала,ДатаКонца,ДатаНачала,ДеньВМесяце,ДеньНеделиВМесяце," + 
		"ДниНедели,ИнтервалЗавершения,Месяцы,ПаузаПовтора,ПериодНедель,ПериодПовтораВТечениеДня,ПериодПовтораДней";
	Результат = Новый РасписаниеРегламентногоЗадания;
	ЗаполнитьЗначенияСвойств(Результат, СтруктураРасписания, СписокПолей);
	ДетальныеРасписанияДня = Новый Массив;
	Для каждого Расписание Из СтруктураРасписания.ДетальныеРасписанияДня Цикл
		  ДетальныеРасписанияДня.Добавить(СтруктураВРасписание(Расписание));
	КонецЦикла;
	Результат.ДетальныеРасписанияДня = ДетальныеРасписанияДня;  
	Возврат Результат;
	
КонецФункции




//Нужно будет удалить
Процедура ПостроитьДеревоОператоров(АдресХранилищаДереваОператоров, УникальныйИдентификатор) Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Разделители");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " + ""/"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "\", " + ""\"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "|", " + ""|"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "_", " + ""_"" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ",", " + "", "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ".", " + "". "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Space", " + "" "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, """", " + """""""" + ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Логические операторы и константы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "AND", " AND ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "OR", " OR ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "NOT", " NOT ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TRUE", " TRUE ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "FALSE", " FALSE ");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Числовые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Max", "Max(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Min", "Min(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Round", "Round(,)", 2);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Int", "Int()", 1);
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Строковые функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Upper", "Upper()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Lower", "Lower()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Left", "Left()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Right", "Right()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimL", "TrimL()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimAll", "TrimAll()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "TrimR", "TrimR()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Title", "Title()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "StrReplace", "StrReplace(,,)");
	
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Прочие функции");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Условие", "?(,,)", 3);
	ДобавитьОператор(Дерево, ГруппаОператоров, "Предопределенное значение", "ПредопределенноеЗначение()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Значение заполнено", "ЗначениеЗаполнено()");
	ДобавитьОператор(Дерево, ГруппаОператоров, "Формат", "Формат(,)");
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры // ПостроитьДеревоОператоров()

//Нужно будет удалить
Функция ПолучитьПустоеДеревоОператоров()
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

//Нужно будет удалить
Функция ДобавитьГруппуОператоров(Дерево, Наименование)
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Наименование = Наименование;
	
	Возврат НоваяГруппа;
	
КонецФункции

//Нужно будет удалить
Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0)
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Оператор = ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг = Сдвиг;
	
	Возврат НоваяСтрока;
	
КонецФункции




//Нужно будет удалить
Функция СоздатьСхемуКомпоновкиДанных(ПараметрыИсточникаДанных, ПараметрыНабораДанных, ПоляИтогов, АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, УникальныйИдентификатор = "") Экспорт
	
	//1. Создаем схему компоновки данных
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	//1.1 определяем источник данных для схемы
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ЗаполнитьЗначенияСвойств(ИсточникДанных, ПараметрыИсточникаДанных);
		
	//1.2 определяем набор данных
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(ПараметрыНабораДанных.ТипНабораДанных);
	ЗаполнитьЗначенияСвойств(НаборДанных, ПараметрыНабораДанных);	
		
	//1.2.1 добавляем поля 
	Для Каждого ПолеДанных Из ПараметрыНабораДанных.Поля Цикл
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(Поле, ПолеДанных);
	КонецЦикла;
	
	//1.2.2 добавляем вложенные наборы данных
	Для Каждого ВложенныйНаборДанных Из ПараметрыНабораДанных.ВложенныеНаборыДанных Цикл
		НовыйВложенныйНаборДанных = НаборДанных.ВложенныеНаборыДанных.Добавить(Тип("ВложенныйНаборДанныхМакетаКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйВложенныйНаборДанных, ВложенныйНаборДанных);
		Для Каждого ПолеДанных Из ВложенныйНаборДанных.Поля Цикл
			Поле = НовыйВложенныйНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхМакетаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Поле, ПолеДанных);
		КонецЦикла;
	КонецЦикла;
		
	//1.3 определяем ресурсы
	Для Каждого ПолеИтога Из ПоляИтогов Цикл
		ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
		ЗаполнитьЗначенияСвойств(ПолеРесурса, ПолеИтога);
	КонецЦикла;
	
	//2. создаем настройки для схемы
	//НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));	
	
КонецФункции
	
Функция СоздатьПроизвольноеЧисло(min, max) Экспорт
		
	UID			= Новый УникальныйИдентификатор();
	UID 		= СтрЗаменить(UID,"-","");
	Значение 	= "";
	Для ind = 1 По СтрДлина(UID) Цикл
		Симв 		= Сред(UID, ind, 1);
		Значение 	= Значение + Прав(КодСимвола(Симв), 1);
	КонецЦикла;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Значение));
	Пин = Формат(ГСЧ.СлучайноеЧисло(min, max), "ЧГ=0");
	
	Возврат Пин;
	
КонецФункции	
	
	

////////////////////////////////////////////////////////////////////////////////
// Функция отправления - непосредственная реализация механики отправления
// электронного сообщения
//
// Функция, реализующая механику отправки сообщения электронной почты
//
// Параметры:
// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
//                 учетную запись электронной почты
// ПараметрыПисьма - структура - содержит всю необходимую информацию о письме:
//                   содержит следующие ключи:
//    Кому*      - Массив структур, строка - интернет адрес получателя письма
//                 Адрес         - строка - почтовый адрес
//                 Представление - строка - имя адресата
//    Копии      - массив структур, строка - интернет адреса получателей письма
//                 используется при формировании письма для поля копий
//                 в случае массива структур, формат каждой структуры:
//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
//                 Представление - строка - имя адресата
//    СлепыеКопии - массив структур, строка - интернет адреса получателей письма
//                 используется при формировании письма для поля скрытых копий
//                 в случае массива структур, формат каждой структуры:
//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
//                 Представление - строка - имя адресата
//
//    Тема*      - строка - тема почтового сообщения
//    Тело*      - тело почтового сообщения (простой текст в кодировке win-1251)
//    Вложения   - соответствие
//                 ключ     - наименованиеВложения - строка - наименование вложения
//                 значение - ДвоичныеДанные - данные вложения
//
// дополнительные ключи структуры, которые могут использоваться:
//    АдресОтвета - соответствие - см. такие же поля как и кому
//    Пароль      - строка - пароль для доступа учетной записи
//    ТипТекста   - Строка / Перечисление.ТипыТекстовЭлектронныхПисем/ТипТекстаПочтовогоСообщения  определяет тип переданного теста
//                  допустимые значения:
//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML
//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения. Отображается "как есть" (значение по умолчанию)
//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате Rich Text
//
//    прим.: параметры письма помеченные символом '*' являются обязательными
//           т.е. к началу работы функции считается что они уже заполнены
//
// Возвращаемое значение:
// Строка - идентификатор отправленного почтового сообщения на smtp сервере
//
// ПРИМЕЧАНИЕ: функция может вызвать исключение, которое требуется обработать
//
Функция ОтправитьСообщениеПоSMTP(знач УчетнаяЗапись, знач ПараметрыПисьма) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	Кому = ПараметрыПисьма.Кому;
	// формируем адрес получателя	
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// формируем адрес ответа, если необходимо
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// добавляем к письму имя отправителя
	Письмо.ИмяОтправителя              = УчетнаяЗапись.ИмяПользователя;
	Письмо.Отправитель.ОтображаемоеИмя = УчетнаяЗапись.ИмяПользователя;
	Письмо.Отправитель.Адрес           = УчетнаяЗапись.АдресЭлектроннойПочты;
	
	// добавляем вложения к письму
	Если Вложения <> Неопределено Тогда
		Для Каждого ЭлементВложение Из Вложения Цикл
			Письмо.Вложения.Добавить(ЭлементВложение.Значение, ЭлементВложение.Ключ);
		КонецЦикла;
	КонецЕсли;

	// Установим строку с идентификаторами оснований
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	// добавляем текст
	Текст = Письмо.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;

	Если ПараметрыПисьма.Свойство("Пароль") Тогда
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, ПараметрыПисьма.Пароль);
	Иначе
		Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись);
	КонецЕсли;
	
	Возврат ОтправитьПочту(Профиль, Письмо).ИдентификаторСообщения;
	
КонецФункции

Функция СформироватьИнтернетПрофиль(знач УчетнаяЗапись, знач Пароль = Неопределено, знач ФормироватьSMTPПрофиль = Истина, знач ФормироватьPOP3Профиль = Истина) Экспорт
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;	
	Профиль.Пользователь = УчетнаяЗапись.Пользователь;
	Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжидания;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		Профиль.Пароль = Пароль;
	Иначе
		Профиль.Пароль = УчетнаяЗапись.Пароль;
	КонецЕсли;
	
	Если ФормироватьSMTPПрофиль Тогда
		Профиль.АдресСервераSMTP = УчетнаяЗапись.СерверИсходящейПочтыSMTP;
		Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
		
		Если      УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3 Тогда
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			Профиль.ПользовательSMTP   = УчетнаяЗапись.Пользователь;
			Профиль.ПарольSMTP         = УчетнаяЗапись.Пароль;
		ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
			
			Если      УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.CramMD5 Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.CramMD5;
			ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.Login Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
			ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.Plain Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Plain;
			ИначеЕсли УчетнаяЗапись.СпособSMTPАутентификации = Перечисления.СпособыSMTPАутентификации.БезАутентификации Тогда
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			Иначе
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			КонецЕсли;
			
			Профиль.ПользовательSMTP = УчетнаяЗапись.ПользовательSMTP;
			Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
			
		ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.POP3ПередSMTP Тогда
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			Профиль.POP3ПередSMTP = Истина;
		Иначе
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормироватьPOP3Профиль Тогда
		Профиль.АдресСервераPOP3 = УчетнаяЗапись.СерверВходящейПочтыPOP3;
		Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
		
		Если      УчетнаяЗапись.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.APOP Тогда
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.APOP;
		ИначеЕсли УчетнаяЗапись.СпособPOP3Аутентификации = Перечисления.СпособыPOP3Аутентификации.CramMD5 Тогда
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.CramMD5;
		Иначе
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции

Функция СформироватьПараметрыПисьма(	Тема = "", 
										Тело = "", 
										Кому = Неопределено, 
										Копии = Неопределено, 
										СлепыеКопии = Неопределено,
										АдресОтвета = Неопределено,
										Вложения	= Неопределено,
										ИдентификаторыОснований = Неопределено,
										ТипТекста = Неопределено,
										Важность = Неопределено,
										Кодировка = Неопределено,
										Пароль = Неопределено
									)   Экспорт
										
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", Тема);	
	ПараметрыПисьма.Вставить("Тело", Тело);
	
	Если Кому <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	КонецЕсли;
	
	Если Копии <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Копии", Копии);
	КонецЕсли;
	
	Если СлепыеКопии <> Неопределено Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", СлепыеКопии);
	КонецЕсли;
	
	Если АдресОтвета <> Неопределено Тогда
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	КонецЕсли;
	
	Если Вложения <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	Если ИдентификаторыОснований <> Неопределено Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	Если ТипТекста <> Неопределено Тогда
		ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
	КонецЕсли;
	
	Если Важность <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Важность", Важность);
	КонецЕсли;
	
	Если Кодировка <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	Если Пароль <> Неопределено Тогда
		ПараметрыПисьма.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ОтправитьПочту(Профиль, Письмо)
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль);
	Соединение.Послать(Письмо);
	Соединение.Отключиться();
	Возврат Письмо;
КонецФункции

Функция ПроверитьЗаполнениеПочтовогоАдреса(ПроверяемыйАдрес) Экспорт	
	Отказ = Ложь;
	АдресДляПроверки = ПроверяемыйАдрес;	
	Попытка
		Результат = РазобратьСтрокуСПочтовымиАдресами(АдресДляПроверки);	 
	Исключение 		
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		Если Результат.Количество() = 0 Тогда
			Отказ =  Истина;
		Иначе	
			АдресДляПроверки = Результат[0].Адрес;
			Если СтрЧислоВхождений(АдресДляПроверки,"@") <> 1 Тогда 
				Отказ = Истина;
			Иначе
				ДоменныйАдрес = Прав(АдресДляПроверки, СтрДлина(АдресДляПроверки) - Найти(АдресДляПроверки,"@"));
				Если СтрДлина(ДоменныйАдрес) > 0 Тогда
					Если СтрЧислоВхождений(ДоменныйАдрес,".") < 1 ИЛИ Лев(ДоменныйАдрес,1) = "." ИЛИ Прав(ДоменныйАдрес,1) = "." Тогда
						Отказ = Истина;
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Отказ;
	
КонецФункции

Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаАдресов)
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	СимволыРазделители = ";,";
	
	Индекс = 1;               
	Накопитель = "";          
	                          
	ПолноеИмяАдресата = "";   
	ПочтовыйАдрес = "";      
	СтадияРазбора = 1; 
	
	СообщениеНедопустимыеСимволы = НСтр("ru = 'Недопустимые символы в почтовом адресе.'");
	СообщениеНеверныйФорматПочтовогоАдреса = НСтр("ru = 'Неверный формат почтового адреса.'");
	
	Пока Индекс <= СтрДлина(СтрокаАдресов) Цикл
		
		Символ = Сред(СтрокаАдресов, Индекс, 1);
		
		Если      Символ = " " Тогда
			Индекс = ? ((ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1) > Индекс,
			             ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1,
			             Индекс);
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
				СтадияРазбора = 3;
			КонецЕсли;
			Накопитель = "";
		ИначеЕсли Символ = "@" Тогда
			Если      СтадияРазбора = 1 Тогда
				СтадияРазбора = 2;
				
				Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
					Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
						ВызватьИсключение СообщениеНедопустимыеСимволы;
					КонецЕсли;
				КонецЦикла;
				
				Накопитель = Накопитель + Символ;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ВызватьИсключение СообщениеНеверныйФорматПочтовогоАдреса;
			ИначеЕсли СтадияРазбора = 3 Тогда
				ВызватьИсключение СообщениеНеверныйФорматПочтовогоАдреса;
			КонецЕсли;
		ИначеЕсли Найти(СимволыРазделители, Символ) > 0 Тогда
			
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
			КонецЕсли;
			
			СтадияРазбора = 1;
			
			Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
				Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
			КонецЕсли;
			
			ПочтовыйАдрес = "";
			ПолноеИмяАдресата = "";
			Накопитель = "";
		Иначе
			Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
				Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
					ВызватьИсключение СообщениеНедопустимыеСимволы;
				КонецЕсли;
			КонецЕсли;
			
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если      СтадияРазбора = 1 Тогда
		ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
	ИначеЕсли СтадияРазбора = 2 Тогда
		ПочтовыйАдрес = Накопитель;
	КонецЕсли;

	Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
		Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	НедопустимыйСимволВИмениАдресата = НСтр("ru = 'Недопустимый символ в имени адресата.'");
	НедопустимыйСимволВПочтовомАдресе = НСтр("ru = 'Недопустимый символ в почтовом адресе.'");
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

Функция ПропуститьПробелы(знач Строка, знач ТекущийИндекс, знач ПропускаемыйСимвол)	
	Результат = ТекущийИндекс;	
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	Возврат ТекущийИндекс;	
КонецФункции





Функция ПолучитьТаблицуПрайсов(Настройки) Экспорт
	
	ТаблицаПрайсов = Новый ТаблицаЗначений;
	ТаблицаПрайсов.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ТаблицаПрайсов.Колонки.Добавить("deadline", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаПрайсов.Колонки.Добавить("ФайлПрайсЛиста", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщикамиПрисоединенныеФайлы"));
	ТаблицаПрайсов.Колонки.Добавить("ДнейАктуальности", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПрайсов.Колонки.Добавить("ОтключитьИспользованиеПрайсЛиста", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаДереваПартнер ИЗ Настройки.ДеревоПрайсов.Строки Цикл
		Для каждого СтрокаНастройки Из СтрокаДереваПартнер.Строки Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПрайсов.Добавить(), СтрокаНастройки);
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаПрайсов;

КонецФункции




Функция ПолучитьТаблицуЗначенийПрайсЛиста() Экспорт 
	ТаблицаЗначений	= Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки", 	ПолучитьОписаниеТиповЧисла(7));
	ТаблицаЗначений.Колонки.Добавить("Код", 			ПолучитьОписаниеТиповСтроки(11));
	ТаблицаЗначений.Колонки.Добавить("Артикул", 		ПолучитьОписаниеТиповСтроки(25));
	ТаблицаЗначений.Колонки.Добавить("Наименование", 	ПолучитьОписаниеТиповСтроки(100));
	ТаблицаЗначений.Колонки.Добавить("Штрихкод", 		ПолучитьОписаниеТиповСтроки(200));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("НомПосСсылка", 	Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	ТаблицаЗначений.Колонки.Добавить("Цена", 			ПолучитьОписаниеТиповЧисла(15, 2));	
	Возврат ТаблицаЗначений;
КонецФункции



Функция ПолучитьТаблицуЗначенийРазвернутыеСтроки() Экспорт 	
	ТаблицаЗначений	= Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Партнер", 				Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаЗначений.Колонки.Добавить("Код", 					ПолучитьОписаниеТиповСтроки(11));
	ТаблицаЗначений.Колонки.Добавить("Артикул", 				ПолучитьОписаниеТиповСтроки(35));
	ТаблицаЗначений.Колонки.Добавить("Наименование", 			ПолучитьОписаниеТиповСтроки(100));
	ТаблицаЗначений.Колонки.Добавить("Штрихкод", 				ПолучитьОписаниеТиповСтроки(200));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", 			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("НоменклатураПоставщика", 	Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	ТаблицаЗначений.Колонки.Добавить("Цена", 					ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ХранилищеДанных", 		Новый ОписаниеТипов("ХранилищеЗначения"));
	Возврат ТаблицаЗначений;
КонецФункции

Процедура БыстрыйПоискСоответствийРазвернутыеСтроки(ТабЗнч, Привязка) Экспорт
	
	Если 		Привязка = 1 Тогда
		ПараметрСтрока = "И НоменклатураПоставщиков.Код = ТабЗнч.Код";
		ПараметрСоедин = "И	РазвернутыеСтроки.Код 		= Cache_Поиск.Код";
	ИначеЕсли   Привязка = 2 Тогда
		ПараметрСтрока = "И НоменклатураПоставщиков.Артикул = ТабЗнч.Артикул";
		ПараметрСоедин = "И	РазвернутыеСтроки.Артикул 		= Cache_Поиск.Артикул
						 |И	РазвернутыеСтроки.Наименование 	= Cache_Поиск.Наименование ";
	ИначеЕсли   Привязка = 3 Тогда
		ПараметрСтрока = "И НоменклатураПоставщиков.Артикул = ТабЗнч.Артикул И НоменклатураПоставщиков.Код = ТабЗнч.Код";
		ПараметрСоедин = "И	РазвернутыеСтроки.Код = Cache_Поиск.Код";
	ИначеЕсли   Привязка = 4 Тогда
		ПараметрСтрока = "И НоменклатураПоставщиков.Наименование = ВЫРАЗИТЬ(ТабЗнч.Наименование КАК Строка(100))";
		ПараметрСоедин = "И	РазвернутыеСтроки.Наименование = Cache_Поиск.Наименование";
	Иначе 
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.Партнер,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|   ТабЗнч.Цена
		|
		|ПОМЕСТИТЬ ТабКеш
		|ИЗ
		|	&ТабЗнч КАК ТабЗнч
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТабЗнч.Партнер	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабЗнч.Партнер,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|	ТабЗнч.Цена,
		|
		|   НоменклатураПоставщиков.Номенклатура, 
		|  	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
		|
		|ПОМЕСТИТЬ Cache_Поиск
		|Из
		| 	ТабКеш КАК ТабЗнч
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ПО  НоменклатураПоставщиков.Владелец = ТабЗнч.Партнер 
		| " + ПараметрСтрока + "
		|ГДЕ
		|	ТабЗнч.Цена <> 0 
		|И  ТабЗнч.Цена <> 999999.99
		|И (ТабЗнч.Код <> """" ИЛИ ТабЗнч.Артикул <> """" ИЛИ ТабЗнч.Наименование <> """")
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабЗнч.Партнер,
		|	ТабЗнч.Код,
		|   ТабЗнч.Артикул,
		|   ТабЗнч.Наименование,
		|	ТабЗнч.Штрихкод,
		|	ТабЗнч.Цена,
		|   НоменклатураПоставщиков.Номенклатура,
		|   НоменклатураПоставщиков.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТабЗнч.Партнер
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Cache_Поиск.Партнер,
		|	Cache_Поиск.Код,
		|   Cache_Поиск.Артикул,
		|   Cache_Поиск.Наименование,
		|	Cache_Поиск.Штрихкод,
		|	Cache_Поиск.Цена,
		|
		|   Cache_Поиск.Номенклатура, 
		|  	Cache_Поиск.НоменклатураПоставщика
		|
		|ИЗ
		|	Cache_Поиск КАК Cache_Поиск
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ALPS_РазвернутыеСтроки КАК РазвернутыеСтроки
		|ПО РазвернутыеСтроки.Партнер = Cache_Поиск.Партнер 
		| " + ПараметрСоедин + "
		|
		|ГДЕ
		|    Cache_Поиск.Код		 			<> IsNull(РазвернутыеСтроки.Код, 					Неопределено)
		|ИЛИ Cache_Поиск.Артикул 				<> IsNull(РазвернутыеСтроки.Артикул, 				Неопределено)
		|ИЛИ Cache_Поиск.Наименование 			<> IsNull(РазвернутыеСтроки.Наименование, 			Неопределено)
		|ИЛИ Cache_Поиск.Штрихкод 				<> IsNull(РазвернутыеСтроки.Штрихкод, 				Неопределено)
		|ИЛИ Cache_Поиск.Цена 					<> IsNull(РазвернутыеСтроки.Цена, 					Неопределено)
		|ИЛИ Cache_Поиск.Номенклатура 			<> IsNull(РазвернутыеСтроки.Номенклатура, 			Неопределено)
		|ИЛИ Cache_Поиск.НоменклатураПоставщика <> IsNull(РазвернутыеСтроки.НоменклатураПоставщика, Неопределено)
		|
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТабКеш;
		|УНИЧТОЖИТЬ Cache_Поиск;";
	Запрос.УстановитьПараметр("ТабЗнч", ТабЗнч);
	РезультатПакета  = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатПакета[РезультатПакета.ВГраница()-2].Выгрузить();
	РезультатЗапроса.Колонки.Добавить("ХранилищеДанных", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	СтруктураПоиска = Новый Структура("Код, Артикул, Наименование, Штрихкод");
	Для Каждого Элемент Из РезультатЗапроса Цикл ЗаполнитьЗначенияСвойств(СтруктураПоиска, Элемент); РезультатПоиска = ТабЗнч.НайтиСтроки(СтруктураПоиска); Если РезультатПоиска.Количество() > 0 Тогда Элемент.ХранилищеДанных = РезультатПоиска[0].ХранилищеДанных; ТабЗнч.Удалить(РезультатПоиска[0]); КонецЕсли; КонецЦикла;
	ТабЗнч = РезультатЗапроса;
		
КонецПроцедуры


//Возможно нужно будет удалить
Функция ПолучитьСтруктуруЗаполненияСправочника(ПрофильАнализа, ТабДок, НомерСтроки) Экспорт
	
	Операнды = Новый Соответствие;	
	Для i = 1 По ТабДок.ШиринаТаблицы Цикл Операнды.Вставить("[R$C" + i + "]", "ТабДок.Область(""R$C" + i + """).Текст"); КонецЦикла;
	
	ВычитаемыеТипы = Новый Массив;	
	ВычитаемыеТипы.Добавить(Тип("Дата"));
	ВычитаемыеТипы.Добавить(Тип("Число"));
	ВычитаемыеТипы.Добавить(Тип("Булево"));
	ВычитаемыеТипы.Добавить(Тип("Строка"));

	СтруткураЗаполнения = Новый Структура;
	фНомерСтроки = Формат(НомерСтроки, "ЧГ=0");
	Для Каждого Элемент Из ПрофильАнализа.Строки Цикл
		
		Если Элемент.Пометка Тогда
			Если Элемент.ПредставлениеРеквизита = "Код номенклатуры поставщика" Тогда Продолжить; КонецЕсли;
			ОбработатьНастройкуПрофиляАнализа(Элемент, фНомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы);
		КонецЕсли;
		
		Если Элемент.ПредставлениеРеквизита = "Дополнительные реквизиты" Тогда
			Для Каждого ЭлементДР ИЗ Элемент.Строки Цикл
				Если ЭлементДР.Пометка Тогда
					ОбработатьНастройкуПрофиляАнализа(ЭлементДР, фНомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы, Истина)			
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Элемент.ПредставлениеРеквизита = "Дополнительные сведения" Тогда
			Для Каждого ЭлементДС ИЗ Элемент.Строки Цикл
				Если ЭлементДС.Пометка Тогда
					ОбработатьНастройкуПрофиляАнализа(ЭлементДС, фНомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы, , Истина)			
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
	Возврат СтруткураЗаполнения;
	
КонецФункции

//Возможно нужно будет удалить
Процедура ОбработатьНастройкуПрофиляАнализа(Элемент, НомерСтроки, ТабДок, СтруткураЗаполнения, Операнды, ВычитаемыеТипы, ЭтоДополнительноеСвойство = Ложь, ЭтоДополнительноеСведение = Ложь)
	
	Перем ДополнительныеСвойства, ДополнительныеСведения;
	
	Если ЭтоДополнительноеСвойство Тогда
		Если НЕ СтруткураЗаполнения.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) Тогда
			ДополнительныеСвойства = Новый Массив;
			СтруткураЗаполнения.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДополнительноеСведение Тогда
		Если НЕ СтруткураЗаполнения.Свойство("ДополнительныеСведения", ДополнительныеСведения) Тогда
			ДополнительныеСведения = Новый Массив;
			СтруткураЗаполнения.Вставить("ДополнительныеСведения", ДополнительныеСведения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Элемент.Выражение) Тогда
		Выражение = Элемент.Выражение;
		Для Каждого Операнд Из Операнды Цикл Выражение = СтрЗаменить(Выражение, Операнд.Ключ, Операнд.Значение); КонецЦикла;
		Выражение = СтрЗаменить(Выражение, "R$", "R" + НомерСтроки);
		Результат = Вычислить(Выражение);	
	ИначеЕсли Элемент.НомерКолонки > 0 Тогда
		Результат = ТабДок.Область("R" + НомерСтроки + "C" + Элемент.НомерКолонки).Текст;	
	ИначеЕсли НЕ Элемент.ЗначениеПоУмолчанию = Неопределено Тогда
		Если 		ЭтоДополнительноеСвойство Тогда
			ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Элемент.ЗначениеПоУмолчанию));
		ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
			ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Элемент.ЗначениеПоУмолчанию));
		Иначе
			СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, Элемент.ЗначениеПоУмолчанию);
		КонецЕсли;
		Возврат;
	Иначе
		Сообщить("Реквизит: " + Элемент.ПредставлениеРеквизита + " не заполнен. Не указан номер колонки или формула или значение по умолчанию.");
		Возврат;
	КонецЕсли;
	
	РазницаТипов = Новый ОписаниеТипов(Элемент.ОписаниеТипов, , ВычитаемыеТипы);
	Если РазницаТипов.Типы().Количество() = 0 Тогда
		Если 		ЭтоДополнительноеСвойство Тогда
			ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Результат));
		ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
			ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), Результат));
		Иначе 
			СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, Результат);
		КонецЕсли;
	Иначе
		Для Каждого Тип Из РазницаТипов.Типы() Цикл
			РезультатПоискаПоТипу = Метаданные.НайтиПоТипу(Тип);
			Если РезультатПоискаПоТипу <> Неопределено Тогда
				РезультатПоискаПоКоду 		  = Неопределено;
				РезультатПоискаПоНаименованию = Неопределено;
				
				Менеджер = РезультатПоискаПоТипу.ПолноеИмя();
				Менеджер = СтрЗаменить(Менеджер, "Справочник", "Справочники");
				Выполнить("РезультатПоискаПоКоду = " 		 + Менеджер + ".НайтиПоКоду(Результат);");	
				Выполнить("РезультатПоискаПоНаименованию = " + Менеджер + ".НайтиПоНаименованию(Результат, Истина);"); 	
				
				Если РезультатПоискаПоКоду<>Неопределено Тогда
					Если НЕ РезультатПоискаПоКоду.Пустая() Тогда
						Если 		ЭтоДополнительноеСвойство Тогда
							ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоКоду));	
						ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
							ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоКоду));
						Иначе
							СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, РезультатПоискаПоКоду);
						КонецЕсли;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатПоискаПоНаименованию<>Неопределено Тогда
					Если НЕ РезультатПоискаПоНаименованию.Пустая() Тогда
						Если 		ЭтоДополнительноеСвойство Тогда
							ДополнительныеСвойства.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоНаименованию));	
						ИначеЕсли 	ЭтоДополнительноеСведение Тогда 
							ДополнительныеСведения.Добавить(Новый Структура("Свойство, Значение", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ИмяРеквизита)), РезультатПоискаПоНаименованию));
						Иначе
							СтруткураЗаполнения.Вставить(Элемент.ИмяРеквизита, РезультатПоискаПоНаименованию);
						КонецЕсли;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				//Выяснить когда такие ситуации возможны
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ОбработатьВычислениеФормулы(Операнды, ПраваЧасть, Выражение)
	ПраваЧасть = Выражение;
	Для Каждого Операнд Из Операнды Цикл ПраваЧасть = СтрЗаменить(ПраваЧасть, Операнд.Ключ, Операнд.Значение); КонецЦикла;	
КонецПроцедуры


//Нужно будет удалить
Функция ПолучитьПутьКФайлуСоглашения(ПрисоединенныйФайл, ALPS_ИспользоватьКешированиеПрайсЛистов) Экспорт
	
	Если ALPS_ИспользоватьКешированиеПрайсЛистов Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|	Ссылка 
			|Из 
			|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы 
			|ГДЕ
			|	ВладелецФайла 	= &Владелец
			|И	ДатаМодификацииУниверсальная >= &ДатаМодификацииУниверсальная	
			|И	Наименование 	= &Наименование");
		Запрос.УстановитьПараметр("Владелец", ПрисоединенныйФайл.ВладелецФайла);
		Запрос.УстановитьПараметр("Наименование", "ALPS_cache");
		Запрос.УстановитьПараметр("ДатаМодификацииУниверсальная", ПрисоединенныйФайл.ДатаМодификацииУниверсальная);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПрисоединенныйФайл = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	ХранимыйФайл 
		|Из 
		|	РегистрСведений.ПрисоединенныеФайлы 
		|ГДЕ 
		|	ПрисоединенныйФайл = &ПрисоединенныйФайл");
	Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл); 
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ПутьКФайлу = ПолучитьИмяВременногоФайла(ПрисоединенныйФайл.Расширение);
	ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	Возврат ПутьКФайлу;
	
КонецФункции

Функция ПолучитьСписокФайловИзСоглашения(Соглашение) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   	|	Ссылка
		|ИЗ
		|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы 
		|ГДЕ 
		|	ВладелецФайла = &Соглашение");
	Запрос.УстановитьПараметр("Соглашение", Соглашение); 
	Файлы = Запрос.Выполнить().Выгрузить();	
	Возврат Файлы.ВыгрузитьКолонку("Ссылка");	
	
КонецФункции





//Процедура ИзвелечьZIPАрхивБезВостановленияПутей(FullName, Path) Экспорт
//	ZipАрхив = Новый ЧтениеZipФайла(FullName);
//	ZipАрхив.ИзвлечьВсе(Path, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
//	ZipАрхив.Закрыть();
//КонецПроцедуры


//Возможно нужно будет удалить
Процедура ПрочитатьФайлXMLСервер(ПутьXML, ТабличныйДокумент) Экспорт
	
	МАР = Новый Соответствие;	
	file_xml = Новый ЧтениеXML;
	file_xml.ОткрытьФайл(ПутьXML);
	td_row = 2;
	td_col = 1;
	t_pos = 1;
	file_xml.Прочитать();
	Пока file_xml.Прочитать() Цикл
		Если file_xml.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			name = file_xml.Имя;
			Если МАР[file_xml.Имя] = Неопределено Тогда
				МАР.Вставить(name, td_col);
				td_col = td_col + 1;
			ИначеЕсли МАР[name] < t_pos Тогда
				td_row = td_row + 1;
			КонецЕсли;
			
			Пока file_xml.ПрочитатьАтрибут() Цикл
				Если МАР[file_xml.Имя] = Неопределено Тогда
					МАР.Вставить(file_xml.Имя, td_col);
					td_col = td_col + 1;
				КонецЕсли;
				ТабличныйДокумент.Область("R" + Формат(td_row, "ЧГ = 0") + "C" + МАР[file_xml.Имя]).Текст = СокрЛП(file_xml.Значение);
			КонецЦикла;
			t_pos = МАР[file_xml.Имя];
			
		КонецЕсли;
		
		Если file_xml.ТипУзла = ТипУзлаXML.Текст Тогда
			ТабличныйДокумент.Область("R" + Формат(td_row, "ЧГ = 0") + "C" + МАР[name]).Текст = СокрЛП(file_xml.Значение);		
		КонецЕсли;
			
	КонецЦикла;
	
	file_xml.Закрыть();
	
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ПрочитатьФайлXLSСервер(ПутьXLS, ТабличныйДокумент, Страницы = "") Экспорт
	
	Попытка
		ПрочитатьФайлСПомощьюADODB(ПутьXLS, ТабличныйДокумент, Страницы, "Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;"";");
		Возврат;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена библиотека ADODB. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Попытка
		ПрочитатьФайлXLSСПомощьюEcxel(ПутьXLS, ТабличныйДокумент, Страницы);
		Возврат;
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
						
	ВызватьИсключение СообщениеОбОшибке;
	
КонецПроцедуры 

//Возможно нужно будет удалить
Процедура ПрочитатьФайлXLSXСервер(ПутьXLSX, ТабличныйДокумент, Страницы = "") Экспорт
	
	Попытка
		ПрочитатьФайлСПомощьюADODB(ПутьXLSX, ТабличныйДокумент, Страницы, "Extended Properties=""Excel 12.0 Xml;HDR=NO;IMEX=1;"";");
		Возврат;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена библиотека ADODB. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Попытка
		ПрочитатьФайлXLSСПомощьюEcxel(ПутьXLSX, ТабличныйДокумент, Страницы);
		Возврат;
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности: '")
		                    + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
						
	ВызватьИсключение СообщениеОбОшибке;
	
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ПрочитатьФайлCSVСервер(ПутьCSV, ТабличныйДокумент) Экспорт
	
	//Попытка
	//	ПрочитатьФайлСПомощьюADODB(ПутьCSV, ТабличныйДокумент, Страницы, "Extended Properties=""Text;HDR=NO;FMT=Delimited(;)"";");
	//	Возврат;
	//Исключение
	//	СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить прайс-лист из файла Excel. Убедитесь, что на сервере установлена библиотека ADODB. Подробности: '")
	//						+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	//КонецПопытки;
		
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ПрочитатьФайлСПомощьюADODB(Destination, TD, Pages = "", ConnectionString) Экспорт
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + Destination + "; " + ConnectionString; //Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;"";";
	Connection.Open();
	
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = Connection;	
	PagesСоответствие = Новый Соответствие;
	Для iCount = 0 По Catalog.Tables.Count-1 Цикл
		Если Catalog.Tables.Item(iCount).Type <> "VIEW" Тогда
			PagesСоответствие.Вставить(iCount + 1, СтрЗаменить(Catalog.Tables.Item(iCount).Name, "''", "'"));
		КонецЕсли;
	КонецЦикла;
	Connection.Close();
	Connection = "";
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Recordset  = Новый COMОбъект("ADODB.Recordset");
	Connection.ConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" + Destination + "; " + ConnectionString; //Extended Properties=""Excel 8.0;HDR=NO;IMEX=1;""";
	Connection.Open();
	
	Страницы = ?(ПустаяСтрока(Pages), "1", Pages);
	МассивСтраниц = РазобратьСтрокуВМассивПоРазделителю(Страницы, ";");
	row_memory = 0;
	Для Каждого Страница Из МассивСтраниц Цикл
		Recordset.Open("Select * from [" + PagesСоответствие[Число(Страница)] + "]", Connection, 2, 3); //adOpenDynamic, adLockOptimistic
		Recordset.MoveFirst();                 
		
		МассивДанныхCOM = Recordset.GetRows( , , );
		str = МассивДанныхCOM.GetLength(0);
		col = МассивДанныхCOM.GetLength(1);
		МассивДанных = МассивДанныхCOM.Выгрузить();
		
		Для i=0 По str-1 Цикл Для j=0 По col-1 Цикл TD.Область("R" + Формат(i+row_memory+1, "ЧГ = 0") + "C" + (j+1)).Текст = СокрЛП(МассивДанных[i].Получить(j)); КонецЦикла; КонецЦикла;
		row_memory = row_memory + i;
		
	КонецЦикла; 
	
	Recordset.Close();
	Connection.Close();
	Connection = "";
	Recordset = "";
	
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ПрочитатьФайлXLSСПомощьюEcxel(ПутьXLS, ТабличныйДокумент, Pages = "") Экспорт
	
	COMОбъект = Новый COMОбъект("Excel.Application");
	COMОбъект.Displayalerts = false;
	
	Страницы = ?(ПустаяСтрока(Pages), "1", Pages);
	МассивСтраниц = РазобратьСтрокуВМассивПоРазделителю(Страницы, ";");
	row_memory=0;
	Для Каждого Страница Из МассивСтраниц Цикл
		Попытка
			Workbook = COMОбъект.Workbooks.Open(ПутьXLS);
			Sheet 	 = Workbook.Worksheets(Число(Страница));
		Исключение
			COMОбъект.Quit();
			COMОбъект = 0;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
			                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение СообщениеОбОшибке;
		КонецПопытки;
			
		Попытка
			i = Sheet.UsedRange.Row 	+ Sheet.UsedRange.Rows.Count 	- 1;
			j = Sheet.UsedRange.Column 	+ Sheet.UsedRange.Columns.Count - 1;
			Пока i <> 1 Цикл Если Sheet.Rows(i).Text <> "" Тогда Прервать; Иначе i=i-1; КонецЕсли; КонецЦикла;
			Пока j <> 1 Цикл Если Sheet.Columns(j).Text <> "" Тогда Прервать; Иначе j=j-1; КонецЕсли; КонецЦикла;
			Для td_row=1 По i Цикл Для td_col=1 По j Цикл ТабличныйДокумент.Область("R" + Формат(td_row+row_memory+1, "ЧГ = 0") + "C" + td_col).Текст = СокрЛП(Sheet.Cells(td_row, td_col).Value);	КонецЦикла; КонецЦикла;
			row_memory = row_memory + td_row;
		Исключение
			COMОбъект.Quit();
			COMОбъект = 0;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
			                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение СообщениеОбОшибке;
		КонецПопытки;
	КонецЦикла;
	
	Workbook.Close();
	COMОбъект.Quit();
	COMОбъект = 0;
	
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ПрочитатьФайлMXLСервер(ПутьMXL, ТабличныйДокумент) Экспорт
	ТабличныйДокумент.Прочитать(ПутьMXL);		
КонецПроцедуры

//Возможно нужно будет удалить
Процедура ЗаписатьФайлMXLСервер(ПрисоединенныйФайл, ТабличныйДокумент) Экспорт
	Соглашение = ПрисоединенныйФайл.ВладелецФайла;
	УниверсальноеВремя = УниверсальноеВремя(ТекущаяДата());
	ТабличныйДокумент.Записать(КаталогВременныхФайлов() + "ALPS_cache.mxl");
	Файл = Новый Файл(КаталогВременныхФайлов() + "ALPS_cache.mxl");
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы 
		|ГДЕ
		|	ВладелецФайла = &Соглашение
		|И	Наименование  = &Наименование
		|");
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Наименование", "ALPS_cache");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Выборка.Ссылка, Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ДатаМодификацииУниверсальная", АдресВременногоХранилища, Ложь, УниверсальноеВремя));
	Иначе	
		ПрисоединенныеФайлы.ДобавитьФайл(Соглашение, Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".", ""), Файл.ПолучитьВремяИзменения(), УниверсальноеВремя, АдресВременногоХранилища);
	КонецЕсли;
	УдалитьФайлы(Файл.ПолноеИмя);
КонецПроцедуры



 

//Возмоно нужено будет удалить
Процедура ОбновитьИсториюРаботыПользователей(Соглашение, ПривязаноПозиций, ИтогоПозиций, СозданиеПривязки = 0, УдалениеПривязки = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаймаутПопыток = 1;
	ПопытокСделано = 0;
	УИ_Пользователя = ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор();
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Ссылка 	
		|ИЗ	
		|	Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы
		|ГДЕ
		|	ВладелецФайла = &Соглашение	
		|И	Наименование  = &Наименование
		|");
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Наименование", "ALPS_statistic");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;	
		
~Попытка:
		
		Если ПрисоединенныйФайл.Редактирует.Пустая() Тогда
			
			Попытка 
				ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ФайлОбъект.Редактирует = ПараметрыСеанса.ТекущийПользователь;
				ФайлОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				ВызватьИсключение "Не удалось обновить статистику, данная привязка не будет учтена в статистике";	
			КонецПопытки;
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ 
				|	ХранимыйФайл 
				|Из 
				|	РегистрСведений.ПрисоединенныеФайлы 
				|ГДЕ 
				|	ПрисоединенныйФайл = &ПрисоединенныйФайл");
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ЧтениеXML = Новый ЧтениеFastInfoset;
			ЧтениеXML.УстановитьДвоичныеДанные(Выборка.ХранимыйФайл.Получить());
			ЧтениеXML.Прочитать();
			//ЧтениеXML.Прочитать();
			ЧтениеXML.Прочитать();
			
			Попытка
				ИсторияРаботы = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеXML.Значение).Получить();
			Исключение
			 	Сообщить(ОписаниеОшибки());
				ВызватьИсключение "Не удалось обновить файл статистики, данная привязка не будет учтена."; 
			КонецПопытки;
			
			ТаблицаИстории				= ИсторияРаботы["ТаблицаИстории"];
			НоваяСтрока 				= ТаблицаИстории.Добавить();
			НоваяСтрока.Дата			= ТекущаяДата();
			НоваяСтрока.Пользователь	= УИ_Пользователя;
			НоваяСтрока.СделаноПривязок	= СозданиеПривязки;
			НоваяСтрока.УдаленоПривязок	= УдалениеПривязки;
			
			ИсторияРаботы["Соглашение"]     = Новый Структура("Партнер, ПривязаноПозиций, ИтогоПозиций", Соглашение.УникальныйИдентификатор(), ПривязаноПозиций, ИтогоПозиций);
			ИсторияРаботы["ТаблицаИстории"] = ТаблицаИстории;
			
			ХранилищеИстории = Новый ХранилищеЗначения(ИсторияРаботы, Новый СжатиеДанных(9));
		
			ЗаписьXML = Новый ЗаписьFastInfoset;
			ЗаписьXML.УстановитьДвоичныеДанные();
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("root");
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеИстории));
			ЗаписьXML.ЗаписатьКонецЭлемента();

			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЗаписьXML.Закрыть());
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ДатаМодификацииУниверсальная", АдресВременногоХранилища, Ложь, УниверсальноеВремя(ТекущаяДата())));
						
~Освободить:

			Попытка
	            ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
				ФайлОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				ВызватьИсключение "Не удалось освободить файл статистики, но данная привязка будет учтена.";
			КонецПопытки;
			
		Иначе
			ОсвободитьФайлДляНачалаЗаписи(ПопытокСделано, ТаймаутПопыток, ПрисоединенныйФайл.ПолучитьОбъект());
			Перейти ~Попытка;
		КонецЕсли;
	Иначе
		
		ТаблицаИстории = СоздатьТаблицуИсторииРаботыПользователей();
		НоваяСтрока 				= ТаблицаИстории.Добавить();
		НоваяСтрока.Дата			= ТекущаяДата();
		НоваяСтрока.Пользователь	= УИ_Пользователя;
		НоваяСтрока.СделаноПривязок	= СозданиеПривязки;
		НоваяСтрока.УдаленоПривязок	= УдалениеПривязки;
		
		ИсторияРаботы = Новый Соответствие;
		ИсторияРаботы.Вставить("Соглашение", Новый Структура("Партнер, ПривязаноПозиций, ИтогоПозиций", Соглашение.УникальныйИдентификатор(), ПривязаноПозиций, ИтогоПозиций));
		ИсторияРаботы.Вставить("ТаблицаИстории", ТаблицаИстории);
	
		ХранилищеИстории = Новый ХранилищеЗначения(ИсторияРаботы, Новый СжатиеДанных(9));
		
		ЗаписьXML = Новый ЗаписьFastInfoset;
		ЗаписьXML.УстановитьДвоичныеДанные();
		ЗаписьXML.ЗаписатьОбъявлениеXML();	
		ЗаписьXML.ЗаписатьНачалоЭлемента("root");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеИстории));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ЗаписьXML.Закрыть());
		ПрисоединенныеФайлы.ДобавитьФайл(Соглашение, "ALPS_statistic", "xml", ТекущаяДата(), УниверсальноеВремя(ТекущаяДата()), АдресВременногоХранилища);
				
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
КонецПроцедуры

Процедура ОсвободитьФайлДляНачалаЗаписи(Попыток, Таймаут, ФайлОбъект)
	ВремяНачала = ТекущаяДата();	
	Пока ТекущаяДата() - ВремяНачала < Таймаут Цикл 
		Если Попыток = 10 Тогда
			ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
			ФайлОбъект.Записать();
			Сообщить("Блокировка файла статистики пользователем """ + ФайлОбъект.Редактирует + """ снята. Данные статистики обновлены успешно!");
			Попыток = 0;
		КонецЕсли;
	КонецЦикла;	
	Попыток	= Попыток + 1;	
КонецПроцедуры

Функция СоздатьТаблицуИсторииРаботыПользователей()
	ТаблицаИстории = Новый ТаблицаЗначений;
	ТаблицаИстории.Колонки.Добавить("Дата", 			Новый ОписаниеТипов("Дата"));
	ТаблицаИстории.Колонки.Добавить("Пользователь", 	ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИстории.Колонки.Добавить("СделаноПривязок", 	ПолучитьОписаниеТиповЧисла(10));
	ТаблицаИстории.Колонки.Добавить("УдаленоПривязок", 	ПолучитьОписаниеТиповЧисла(10));	
	Возврат ТаблицаИстории;
КонецФункции

Функция СформироватьОтчетИсторииРаботыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		ВызватьИсключение "Настройки библиотеки внешних обработок не найдены!" + Символы.ПС + "Задать настройки можно по адресу: ""Нормативно справочная информация""->""Дополнительные обработки""->""Настройки внешних обработок""";	
	КонецЕсли;
	ТаблицаПрайсов = ПолучитьТаблицуПрайсов(ГлобальныеНастройки);
	
	ЗапросПоПользователям = Новый Запрос;
	ЗапросПоПользователям.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросПоПользователям.Текст = "
		|ВЫБРАТЬ
		|	NULL			 	КАК Пользователь,
		|	ДатаВремя(1, 1, 1)  КАК Дата,
		|	0					КАК СделаноПривязок,
		|	0					КАК УдаленоПривязок
		|ПОМЕСТИТЬ ОбразТаблицы
		|";
	ЗапросПоПользователям.Выполнить();
	ЗапросПоПользователям.Текст = "
		|ВЫБРАТЬ
		|	Пользователь,
		|   Дата,
		|   СделаноПривязок,
		|   УдаленоПривязок
		|
		|ПОМЕСТИТЬ ПервыйКешИстории
		|ИЗ
		|	&ТаблицаИстории КАК ТаблицаИстории
		|;
		|ВЫБРАТЬ
		|	Пользователь,
		|   Дата,
		|   СделаноПривязок,
		|   УдаленоПривязок
		|
		|ПОМЕСТИТЬ ВторойКешИстории
		|ИЗ
		|	ОбразТаблицы	
		|
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ
		|	Пользователь,
		|   Дата,
		|   СделаноПривязок,
		|   УдаленоПривязок
		|
		|ИЗ
		|	ПервыйКешИстории
		|;
		|УНИЧТОЖИТЬ ОбразТаблицы;
		|УНИЧТОЖИТЬ ПервыйКешИстории;
		|ВЫБРАТЬ
		|	Пользователь,
		|   Дата,
		|   СделаноПривязок,
		|   УдаленоПривязок
		|
		|ПОМЕСТИТЬ ОбразТаблицы
		|ИЗ
		|	ВторойКешИстории
		|;
		|УНИЧТОЖИТЬ ВторойКешИстории;
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаПрайсов.Соглашение
		|ПОМЕСТИТЬ КешСоглашений
		|ИЗ
		|	&ТаблицаПрайсов КАК ТаблицаПрайсов
		|ГДЕ
		|	ТаблицаПрайсов.ОтключитьИспользованиеПрайсЛиста = Ложь	
		|;
		|ВЫБРАТЬ
		|	КешСоглашений.Соглашение,	
		|   ПрисоединенныеФайлы.ХранимыйФайл 
		|
		|ИЗ
		|	КешСоглашений КАК КешСоглашений
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщикамиПрисоединенныеФайлы КАК СпрПрисоединенныеФайлы
		|ПО СпрПрисоединенныеФайлы.ВладелецФайла = КешСоглашений.Соглашение
		|И	СпрПрисоединенныеФайлы.Наименование  = ""ALPS_statistic""
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ПО СпрПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
		|;";
	Запрос.УстановитьПараметр("ТаблицаПрайсов", ТаблицаПрайсов);
	РезультатПакета = Запрос.ВыполнитьПакет();
	ВыборкаИзПакета = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	
	
	
	Тело = "<h1>Статистика по поставщикам </h1>
		|<table border=""0"" cellspacing=""0"" width=""85%"">
		|<tr>	
		|	<td style=""border-bottom:1px solid black""><b>Поставщик</b></td>
		|	<td style=""border-bottom:1px solid black""><b>Привязано позиций</b></td>
		|	<td style=""border-bottom:1px solid black""><b>Итого позиций</b></td>
		|	<td width=""40%"" style=""border-bottom:1px solid black""><b>Процент выполнения</b></td>
		|</tr> ";	
	Пока ВыборкаИзПакета.Следующий() Цикл 
		
		ЧтениеXML = Новый ЧтениеFastInfoset;
		ЧтениеXML.УстановитьДвоичныеДанные(ВыборкаИзПакета.ХранимыйФайл.Получить());
		ЧтениеXML.Прочитать();
		//ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		
		Попытка
			ИсторияРаботы = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеXML.Значение).Получить();
		Исключение
		 	ЗаписьЖурналаРегистрации("ru = 'История работы пользователей ALPS'", УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru = 'История работы пользователей ALPS: " + ОписаниеОшибки() + "'"));
			Продолжить; 
		КонецПопытки;
		
		Соглашение		 = Справочники.СоглашенияСПоставщиками.ПолучитьСсылку(ИсторияРаботы["Соглашение"].Партнер);
		ИтогоПозиций 	 = ИсторияРаботы["Соглашение"].ИтогоПозиций;
		ПривязаноПозиций = ИсторияРаботы["Соглашение"].ПривязаноПозиций;
		
		Выполнено 	= ?(ИтогоПозиций = 0, 0, Окр(ПривязаноПозиций / ИтогоПозиций * 100));
		НеВыполнено = 100-Выполнено;
		
		Тело = Тело + "<tr>	
						|	<td style=""border-bottom:1px solid black"">" + Соглашение + "</td>
						|	<td style=""border-bottom:1px solid black""><b>" + ПривязаноПозиций + "</b></td>
						|	<td style=""border-bottom:1px solid black""><b>" + ИтогоПозиций + "</b></td>
						|	<td width=""40%"" style=""border-bottom:1px solid black"">
						|		<table border=""3"" bordercolor=""CCFF99"" cellspacing=""0"" width=""100%"" style=""font-family:ms shell dlg font-size:8"">
						|		<tr>
						|			<td width=""" + Выполнено   + "%"" align=""right"" bgcolor=""00FF66""><b>" + Выполнено + "%</b></td>  
						|			<td width=""" + НеВыполнено + "%"" bgcolor=""CCFFFF""></td> 
						|		</tr>
						|		</table>
						|	</td>
						|</tr> ";
						
		ЗапросПоПользователям.УстановитьПараметр("ТаблицаИстории", ИсторияРаботы["ТаблицаИстории"]);
		ЗапросПоПользователям.Выполнить();
				
	КонецЦикла;
	
	
	
	ЗапросПоПользователям.Текст = "
		|ВЫБРАТЬ
		|	Пользователь,
		|	Сумма(СделаноПривязок) КАК СделаноПривязок,
		|	Сумма(УдаленоПривязок) КАК УдаленоПривязок		
		|
		|ИЗ
		|	ОбразТаблицы	
		|
		|ГДЕ
		|	Дата > &НачалоДня
		|
		|СГРУППИРОВАТЬ ПО Пользователь 
		|
		|УПОРЯДОЧИТЬ ПО Сумма(СделаноПривязок) - Сумма(УдаленоПривязок) Убыв 
		|;
		|ВЫБРАТЬ
		|	Пользователь,
		|	Сумма(СделаноПривязок) КАК СделаноПривязок,
		|	Сумма(УдаленоПривязок) КАК УдаленоПривязок		
		|
		|ИЗ
		|	ОбразТаблицы	
		|
		|ГДЕ
		|	Дата > ДОБАВИТЬКДАТЕ(&НачалоДня, День, -7)
		|
		|СГРУППИРОВАТЬ ПО Пользователь 
		|
		|УПОРЯДОЧИТЬ ПО Сумма(СделаноПривязок) - Сумма(УдаленоПривязок) Убыв
		|;
		|ВЫБРАТЬ
		|	Пользователь,
		|	Сумма(СделаноПривязок) КАК СделаноПривязок,
		|	Сумма(УдаленоПривязок) КАК УдаленоПривязок		
		|
		|ИЗ
		|	ОбразТаблицы	
		|
		|ГДЕ
		|	Дата > ДОБАВИТЬКДАТЕ(&НачалоДня, День, -30)
		|
		|СГРУППИРОВАТЬ ПО Пользователь 
		|
		|УПОРЯДОЧИТЬ ПО Сумма(СделаноПривязок) - Сумма(УдаленоПривязок) Убыв
		|;
		|ВЫБРАТЬ
		|	Пользователь,
		|	Сумма(СделаноПривязок) КАК СделаноПривязок,
		|	Сумма(УдаленоПривязок) КАК УдаленоПривязок		
		|
		|ИЗ
		|	ОбразТаблицы	
		|
		|СГРУППИРОВАТЬ ПО Пользователь 
		|
		|УПОРЯДОЧИТЬ ПО Сумма(СделаноПривязок) - Сумма(УдаленоПривязок) Убыв
		|;
		|УНИЧТОЖИТЬ ОбразТаблицы;";
	ЗапросПоПользователям.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	РезультатПакета  = ЗапросПоПользователям.ВыполнитьПакет();
	ВыгрузкаДень 	 = РезультатПакета[0].Выгрузить();
	ВыгрузкаНеделя	 = РезультатПакета[1].Выгрузить();			
	ВыгрузкаМесяц    = РезультатПакета[2].Выгрузить();
	ВыгрузкаВсеВремя = РезультатПакета[3].Выгрузить();
	
	
	Тело = Тело + "</table><BR><BR><h1>Статистика по пользователям</h1>";
	Тело = Тело + "<table border=""3"" cellspacing=""0"" width=""85%"">
					|<tr>
					|	<td rowspan=""2"" width=""20%"" align=""center""><b><h2>Пользователь</b></td>
					|	<td colspan=""2""><b>За сегодня</b></td>
					|	<td colspan=""2""><b>За неделю</b></td>
					|	<td colspan=""2""><b>За месяц</b></td>
					|	<td colspan=""2""><b>За все время</b></td>
					|</tr>
					|<tr>
					|	<td><b>Сделано привязок</b></td>
					|	<td><b>Удалено привязок</b></td>
					|	<td><b>Сделано привязок</b></td>
					|	<td><b>Удалено привязок</b></td>
					|	<td><b>Сделано привязок</b></td>
					|	<td><b>Удалено привязок</b></td>
					|	<td><b>Сделано привязок</b></td>
					|	<td><b>Удалено привязок</b></td>
					|</tr> ";
	Для Каждого СтрокаВыгруки ИЗ ВыгрузкаВсеВремя Цикл
		Если СтрокаВыгруки.Пользователь = Null Тогда Продолжить; КонецЕсли;
		ПоискНеделя = ВыгрузкаНеделя.Найти(СтрокаВыгруки.Пользователь, "Пользователь");
		ПоискМесяц 	= ВыгрузкаМесяц.Найти(СтрокаВыгруки.Пользователь, "Пользователь");
		ПоискДень 	= ВыгрузкаДень.Найти(СтрокаВыгруки.Пользователь, "Пользователь");
		
		Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВыгруки.Пользователь));
		Тело = Тело + "		
					|<tr>
					|	<td>" + Пользователь + "</td>
					|	<td bgcolor=""00FF66"" align=""center""><b>" + ?(ПоискДень   = Неопределено, 0, ПоискДень.СделаноПривязок)   + "</b></td>
					|	<td bgcolor=""FF9999"" align=""center""><b>" + ?(ПоискДень 	 = Неопределено, 0, ПоискДень.УдаленоПривязок)   + "</b></td>
					|	<td bgcolor=""00FF66"" align=""center""><b>" + ?(ПоискНеделя = Неопределено, 0, ПоискНеделя.СделаноПривязок) + "</b></td>
					|	<td bgcolor=""FF9999"" align=""center""><b>" + ?(ПоискНеделя = Неопределено, 0, ПоискНеделя.УдаленоПривязок) + "</b></td>
					|	<td bgcolor=""00FF66"" align=""center""><b>" + ?(ПоискМесяц  = Неопределено, 0, ПоискМесяц.СделаноПривязок)  + "</b></td>
					|	<td bgcolor=""FF9999"" align=""center""><b>" + ?(ПоискМесяц  = Неопределено, 0, ПоискМесяц.УдаленоПривязок)  + "</b></td>
					|	<td bgcolor=""00FF66"" align=""center""><b>" + СтрокаВыгруки.СделаноПривязок + "</b></td>
					|	<td bgcolor=""FF9999"" align=""center""><b>" + СтрокаВыгруки.УдаленоПривязок + "</b></td>
					|</tr> ";		
	КонецЦикла;
	Тело = Тело + "</table>";
	
	СформироватьТаблицыЛидеров("Лидер дня", ВыгрузкаДень, Тело);
	СформироватьТаблицыЛидеров("Лидер недели", ВыгрузкаНеделя, Тело);
	СформироватьТаблицыЛидеров("Лидер месяца", ВыгрузкаМесяц, Тело);
	СформироватьТаблицыЛидеров("Лидер всего периода", ВыгрузкаВсеВремя, Тело);
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
	Возврат Тело;
	
КонецФункции

Процедура СформироватьТаблицыЛидеров(ИмяТаблицы, Таблица, Тело)
	Тело = Тело + "<BR><BR><h2>" + ИмяТаблицы + "</h2><hr>";
	Для i=0 По Таблица.Количество()-1 Цикл
		Если Таблица[i].Пользователь = Null Тогда Продолжить; КонецЕсли;
		Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Таблица[i].Пользователь));
		Тело = Тело + "<p><b>" + (i+1) + ". </b>" + Пользователь + " - <b>" + (Таблица[i].СделаноПривязок-Таблица[i].УдаленоПривязок) + "</b>";
		Если i=2 Тогда Прервать; КонецЕсли;
	КонецЦикла;
КонецПроцедуры






