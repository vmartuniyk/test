#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем temp;
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	ALPS_РегистрАктуальности = НЕ Метаданные.РегистрыСведений.Найти("ALPS_АктуальностьНоменклатуры") = Неопределено;
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Свойство("ЗапретитьОткрытиеНесколькихСеансов", ЗапретитьОткрытиеНесколькихСеансов);
		Настройки.Свойство("ПроводитьПродажиМеждуОрганизациямиПередЗаписью", ПроводитьПродажиМеждуОрганизациямиПередЗаписью);
		Настройки.Свойство("СтандартнаяУчетнаяЗаписьЭлектроннойПочты", СтандартнаяУчетнаяЗаписьЭлектроннойПочты);
		Настройки.Свойство("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
		
		
		
		Настройки.Свойство("СвойствоДнейНаСкладе", СвойствоДнейНаСкладе);
		Настройки.Свойство("СвойствоПартияНаСкладе", СвойствоПартияНаСкладе);
		Настройки.Свойство("СвойствоЛояльностьСписаниеЗадолжености", СвойствоЛояльностьСписаниеЗадолжености);
		Настройки.Свойство("СвойствоЛояльностьВозвратТоваровОтКлиента", СвойствоЛояльностьВозвратТоваровОтКлиента);
        Настройки.Свойство("СвойствоПродажиМеждуОрганизациями", СвойствоПродажиМеждуОрганизациями);
		Настройки.Свойство("СвойствоПеремещениеТоваров", СвойствоПеремещениеТоваров);
        //Андрій Комар
		Настройки.Свойство("СвойствоСкладДляАвтоматическихПеремещений", СвойствоСкладДляАвтоматическихПеремещений);
		Настройки.Свойство("СвойствоАвтоматическойОтменыНеотработанныхСтрок", СвойствоАвтоматическойОтменыНеотработанныхСтрок);
		
		
		Настройки.Свойство("ALPS_Календарь", 								ALPS_Календарь);
		Настройки.Свойство("ALPS_АдресЭлектроннойПочты", 					ALPS_АдресЭлектроннойПочты);
		Настройки.Свойство("ALPS_ПерезаписыватьРегистрациюЦенПоставщиков", 	ALPS_ПерезаписыватьРегистрациюЦенПоставщиков);
		Настройки.Свойство("ALPS_ПроцентОтклоненияЦен", 					ALPS_ПроцентОтклоненияЦен);
		Настройки.Свойство("ALPS_ВестиИсториюРаботыПользователей", 			ALPS_ВестиИсториюРаботыПользователей);
		Настройки.Свойство("ALPS_ИспользоватьКешированиеПрайсЛистов", 		ALPS_ИспользоватьКешированиеПрайсЛистов);
		Настройки.Свойство("ALPS_ДополнительныйРеквизитЛогин", 				ALPS_ДополнительныйРеквизитЛогин);
		Настройки.Свойство("ALPS_ДополнительныйРеквизитПароль", 			ALPS_ДополнительныйРеквизитПароль);
		
		Если Настройки.Свойство("ДеревоПрайсов", temp) Тогда
			ЗначениеВРеквизитФормы(temp, "ALPS_ДеревоПрайсов");
		КонецЕсли;
		
		Настройки.Свойство("order_b2b_сервер", order_b2b_сервер);
		Настройки.Свойство("order_b2b_порт", order_b2b_порт);
		Настройки.Свойство("order_b2b_имяпользователя", order_b2b_имяпользователя);
		Настройки.Свойство("order_b2b_парольпользователя", order_b2b_парольпользователя);
		Настройки.Свойство("order_b2b_пасивноесоединение", order_b2b_пасивноесоединение);
		Настройки.Свойство("order_b2b_таймаут", order_b2b_таймаут);
		Если Настройки.Свойство("order_b2b_com_расписание") Тогда
			order_b2b_com_расписание.Загрузить(Настройки.order_b2b_com_расписание);
		КонецЕсли;
		
		
		Если Настройки.Свойство("ktc_ua_com_расписание") Тогда
			ktc_ua_com_расписание.Загрузить(Настройки.ktc_ua_com_расписание);
		КонецЕсли;
		
		
		Настройки.Свойство("ДоставкаСегментПеревозчиков", ДоставкаСегментПеревозчиков);
		Настройки.Свойство("КТСДоставка_ВыполнятьРезервТовараСДефектом", КТСДоставка_ВыполнятьРезервТовараСДефектом);
		Настройки.Свойство("КТСДоставка_СоглашениеДляРезервирования", КТСДоставка_СоглашениеДляРезервирования);
		Если Настройки.Свойство("КТСДоставка_СпискиРассылки") И ТипЗнч(Настройки.КТСДоставка_СпискиРассылки) = Тип("ТаблицаЗначений") Тогда
			КТСДоставка_СпискиРассылки.Загрузить(Настройки.КТСДоставка_СпискиРассылки);
		КонецЕсли;
        Настройки.Свойство("КТСДоставка_ВладелецПустыхМест", КТСДоставка_ВладелецПустыхМест);

	КонецЕсли;
	
		
	//Настройка рассылки
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиРассылки", , , "ДополнительныеНастройкиРассылки");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Если Настройки.Свойство("НастройкаРассылки") И ТипЗнч(Настройки.НастройкаРассылки) = Тип("ТаблицаЗначений") Тогда
			НастройкаРассылки.Загрузить(Настройки.НастройкаРассылки);
		КонецЕсли;
		
		Если Настройки.Свойство("ИсключитьИзРассылки") И ТипЗнч(Настройки.ИсключитьИзРассылки) = Тип("ТаблицаЗначений") Тогда
			ИсключитьИзРассылки.Загрузить(Настройки.ИсключитьИзРассылки);
		КонецЕсли;
		
		Если Настройки.Свойство("ВключитьВРассылку") И ТипЗнч(Настройки.ВключитьВРассылку) = Тип("ТаблицаЗначений") Тогда
			ВключитьВРассылку.Загрузить(Настройки.ВключитьВРассылку);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		РезультатОтвета = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
			ЗаписатьНастройкиНаСервере();
		ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыНастройкаРассылки

&НаКлиенте
Процедура НастройкаРассылкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Элементы.ВключитьВРассылку.ОтборСтрок	=  Новый ФиксированнаяСтруктура("Идентификатор", ТекущиеДанные.Идентификатор);
		Элементы.ИсключитьИзРассылки.ОтборСтрок	=  Новый ФиксированнаяСтруктура("Идентификатор", ТекущиеДанные.Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРассылкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура НастройкаРассылкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//Если НоваяСтрока = Ложь Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Элемент.ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРассылкиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор);
	Отбор = ВключитьВРассылку.НайтиСтроки(ПараметрыОтбора);
	Если Отбор.Количество() Тогда 
		Для каждого СтрокаМассива Из Отбор Цикл 
			ВключитьВРассылку.Удалить(СтрокаМассива);	
		КонецЦикла;
	КонецЕсли;
	
	Отбор = ИсключитьИзРассылки.НайтиСтроки(ПараметрыОтбора);
	Если Отбор.Количество() Тогда 
		Для каждого СтрокаМассива Из Отбор Цикл 
			ИсключитьИзРассылки.Удалить(СтрокаМассива);	
		КонецЦикла;
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВключитьВРассылку


&НаКлиенте
Процедура ВключитьВРассылкуПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока = Ложь Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеНастройка = Элементы.НастройкаРассылки.ТекущиеДанные;
	Если ТекущиеНастройка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Идентификатор = ТекущиеНастройка.Идентификатор;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыИсключитьИзРассылки

&НаКлиенте
Процедура ИсключитьИзРассылкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока = Ложь Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеНастройка = Элементы.НастройкаРассылки.ТекущиеДанные;
	Если ТекущиеНастройка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Идентификатор = ТекущиеНастройка.Идентификатор;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	Отказ = ЗаписатьНастройкиНаСервере();
	Если НЕ Отказ Тогда Модифицированность = Ложь; КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Отказ = ЗаписатьНастройкиНаСервере();
	Если НЕ Отказ Тогда Модифицированность = Ложь; Закрыть(); КонецЕсли;
КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ЗаписатьНастройкиНаСервере(Отказ = Ложь)
	
	Отказ = ?(ПустаяСтрока(АдресЭлектроннойПочты), Ложь, РеквизитФормыВЗначение("Объект").ПроверитьЗаполнениеПочтовогоАдреса(АдресЭлектроннойПочты));
	Если Отказ Тогда
		РеквизитФормыВЗначение("Объект").СообщитьПользователю("Адрес электронной почты заполнен не верно!", , "АдресЭлектроннойПочты");
		Возврат Отказ;
	КонецЕсли;
	
	Отказ = ?(ПустаяСтрока(ALPS_АдресЭлектроннойПочты), Ложь, РеквизитФормыВЗначение("Объект").ПроверитьЗаполнениеПочтовогоАдреса(ALPS_АдресЭлектроннойПочты));
	Если Отказ Тогда
		РеквизитФормыВЗначение("Объект").СообщитьПользователю("Адрес электронной почты заполнен не верно!", , "ALPS_АдресЭлектроннойПочты");
		Возврат Отказ;
	КонецЕсли;
	
	Настройки = Новый Структура;	
	Настройки.Вставить("ЗапретитьОткрытиеНесколькихСеансов", ЗапретитьОткрытиеНесколькихСеансов);
	Настройки.Вставить("ПроводитьПродажиМеждуОрганизациямиПередЗаписью", ПроводитьПродажиМеждуОрганизациямиПередЗаписью);
	Настройки.Вставить("СтандартнаяУчетнаяЗаписьЭлектроннойПочты", СтандартнаяУчетнаяЗаписьЭлектроннойПочты);
	Настройки.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	
	
	
	
	Настройки.Вставить("СвойствоДнейНаСкладе", СвойствоДнейНаСкладе);
	Настройки.Вставить("СвойствоПартияНаСкладе", СвойствоПартияНаСкладе);
	Настройки.Вставить("СвойствоЛояльностьСписаниеЗадолжености", СвойствоЛояльностьСписаниеЗадолжености);
	Настройки.Вставить("СвойствоЛояльностьВозвратТоваровОтКлиента", СвойствоЛояльностьВозвратТоваровОтКлиента);
	Настройки.Вставить("СвойствоПродажиМеждуОрганизациями", СвойствоПродажиМеждуОрганизациями);
	Настройки.Вставить("СвойствоПеремещениеТоваров", СвойствоПеремещениеТоваров);
	//Андрій Комар
	Настройки.Вставить("СвойствоСкладДляАвтоматическихПеремещений", СвойствоСкладДляАвтоматическихПеремещений);
	Настройки.Вставить("СвойствоАвтоматическойОтменыНеотработанныхСтрок", СвойствоАвтоматическойОтменыНеотработанныхСтрок);

	
	
	Настройки.Вставить("ДеревоПрайсов", 								РеквизитФормыВЗначение("ALPS_ДеревоПрайсов"));	
	Настройки.Вставить("ALPS_Календарь", 								ALPS_Календарь);
	Настройки.Вставить("ALPS_АдресЭлектроннойПочты", 					ALPS_АдресЭлектроннойПочты);
	Настройки.Вставить("ALPS_ПерезаписыватьРегистрациюЦенПоставщиков", 	ALPS_ПерезаписыватьРегистрациюЦенПоставщиков);
	Настройки.Вставить("ALPS_ПроцентОтклоненияЦен", 					ALPS_ПроцентОтклоненияЦен);
	Настройки.Вставить("ALPS_ВестиИсториюРаботыПользователей", 			ALPS_ВестиИсториюРаботыПользователей);
	Настройки.Вставить("ALPS_ИспользоватьКешированиеПрайсЛистов", 		ALPS_ИспользоватьКешированиеПрайсЛистов);
	Настройки.Вставить("ALPS_ДополнительныйРеквизитЛогин", 				ALPS_ДополнительныйРеквизитЛогин);
	Настройки.Вставить("ALPS_ДополнительныйРеквизитПароль", 			ALPS_ДополнительныйРеквизитПароль);
		
	
	
	Настройки.Вставить("order_b2b_сервер", order_b2b_сервер);
	Настройки.Вставить("order_b2b_порт", order_b2b_порт);
	Настройки.Вставить("order_b2b_имяпользователя", order_b2b_имяпользователя);
	Настройки.Вставить("order_b2b_парольпользователя", order_b2b_парольпользователя);
	Настройки.Вставить("order_b2b_пасивноесоединение", order_b2b_пасивноесоединение);
	Настройки.Вставить("order_b2b_таймаут", order_b2b_таймаут);
	Настройки.Вставить("order_b2b_com_расписание", order_b2b_com_расписание.Выгрузить());
	
	
	Настройки.Вставить("ktc_ua_com_расписание", ktc_ua_com_расписание.Выгрузить());
	
		
	Настройки.Вставить("ДоставкаСегментПеревозчиков", ДоставкаСегментПеревозчиков);
	Настройки.Вставить("КТСДоставка_ВыполнятьРезервТовараСДефектом", КТСДоставка_ВыполнятьРезервТовараСДефектом);
	Настройки.Вставить("КТСДоставка_СоглашениеДляРезервирования", КТСДоставка_СоглашениеДляРезервирования);
	Настройки.Вставить("КТСДоставка_СпискиРассылки", КТСДоставка_СпискиРассылки.Выгрузить());
	Настройки.Вставить("КТСДоставка_ВладелецПустыхМест", КТСДоставка_ВладелецПустыхМест);
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , Настройки, "Настройки актуальности прайс-листов", "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	//Настройка рассылки
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкаРассылки", НастройкаРассылки.Выгрузить());
	Настройки.Вставить("ВключитьВРассылку", ВключитьВРассылку.Выгрузить());
	Настройки.Вставить("ИсключитьИзРассылки", ИсключитьИзРассылки.Выгрузить());
	
	ХранилищеНастроекДанныхФорм.Сохранить("ДополнительныеНастройкиРассылки", , Настройки, "Настройки рассылок", "ДополнительныеНастройкиРассылки");
	
	Возврат Отказ; 
	
КонецФункции




&НаКлиенте
Процедура ЗапретитьОткрытиеНесколькихСеансовПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроводитьПродажиМеждуОрганизациямиПередЗаписьюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяУчетнаяЗаписьЭлектроннойПочтыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры





&НаКлиенте
Процедура СвойствоДнейНаСкладеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоПартияНаСкладеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоЛояльностьСписаниеЗадолженостиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоЛояльностьВозвратТоваровОтКлиентаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоАвтоматическойОтменыНеотработанныхСтрокПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоСкладДляАвтоматическихПеремещенийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры



&НаКлиенте
Процедура Актуальность_РегистрАктуальностиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ВестиСтатистикуРаботыПользователейПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ИспользоватьКешированиеПрайсЛистовПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_УдалятьРегистрациюЦенПоставщиковПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ПроцентОтклоненияЦенПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_КалендарьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_АдресЭлектроннойПочтыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ДополнительныйРеквизитЛогинПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ДополнительныйРеквизитПарольПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры





&НаКлиенте
Процедура УстановитьРасписание(ТекущиеДанные)
	
	Расписание = ?( ТекущиеДанные.Расписание.Количество() = 0, Неопределено,  ТекущиеДанные.Расписание.Получить(0).Значение);
	Если Расписание = Неопределено Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Если Диалог.ОткрытьМодально() Тогда
		Расписание = Диалог.Расписание;
		Модифицированность = Истина;
	КонецЕсли;
	
	ТекущиеДанные.Расписание.Очистить();
	ТекущиеДанные.Расписание.Добавить(Расписание);
	
КонецПроцедуры



&НаСервере
Функция ПолучитьСписокФайловИзСоглашения(Соглашение)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьСписокФайловИзСоглашения(Соглашение);	
КонецФункции





&НаКлиенте
Процедура order_b2b_серверПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_портПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_имяпользователяПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_парольпользователяПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_пасивноесоединениеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_таймаутПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_com_расписаниеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура order_b2b_com_расписаниеРасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработкаНачалоВыбораРасписания(Элементы.order_b2b_com_расписание);
КонецПроцедуры



&НаКлиенте
Процедура ALPS_ДеревоПрайсовПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ДеревоПрайсовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ALPS_ДеревоПрайсов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если НЕ ТекущиеДанные.Соглашение.Пустая() Тогда
			Результат = ОткрытьФормуМодально("ВнешняяОбработка.БиблиотекаВнешнихОбработок.Форма.ФормаВыбора", Новый Структура("Ссылка, ТипЗначения", ТекущиеДанные.Соглашение, "СправочникСсылка.ВидыНоменклатуры"), ЭтаФорма);
			Если НЕ Результат = Неопределено Тогда
				ТекущиеДанные.ИндексКартинки = Результат;
				ЗаписатьНастройкиНаСервере();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ДеревоПрайсовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ДеревоПрайсовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_ФайлПрайсЛистаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ALPS_ДеревоПрайсов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокФайловИзСоглашения(ТекущиеДанные.Соглашение));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ALPS_РасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	УстановитьРасписание(Элементы.ALPS_ДеревоПрайсов.ТекущиеДанные);
КонецПроцедуры




&НаКлиенте
Процедура ДоставкаСегментПеревозчиковПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КТСДоставка_ВыполнятьРезервТовараСДефектомПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КТСДоставка_СоглашениеДляРезервированияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КТСДоставка_СпискиРассылкиПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КТСДоставка_ВладелецПустыхМестПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры





&НаКлиенте
Процедура ktc_ua_com_расписаниеРасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ОбработкаНачалоВыбораРасписания(Элементы.ktc_ua_com_расписание);	
КонецПроцедуры

&НаКлиенте
Процедура ktc_ua_com_расписаниеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры





&НаКлиенте
Процедура ОбработкаНачалоВыбораРасписания(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Расписание.Количество() > 0 Тогда
		Расписание = ТекущиеДанные.Расписание.Получить(0).Значение;
	Иначе
		Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОповещаниеВыбораРасписания", ЭтаФорма, ТекущиеДанные);
	Диалог 				= Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры // ОбработкаНачалоВыбораРасписания()
 
&НаКлиенте
Процедура ОповещаниеВыбораРасписания(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НовоеРасписание = Новый СписокЗначений();
	НовоеРасписание.Добавить(Результат);
	Параметр.Расписание = НовоеРасписание;
	
	Модифицированность = Истина;

КонецПроцедуры // ОповещаниеВыбораРасписания()



