#Область ИнтерфейсАвтоТеста
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	СпиокТестов.Добавить("Тест_ПроверитьТипСтруктураТипов");
	СпиокТестов.Добавить("Тест_ПроверитьТипТекстЗапросаДанныеАктНаЗаменутовара");
	СпиокТестов.Добавить("Тест_ПроверитьНаличияМакетАктНаЗаменуТовара");
	СпиокТестов.Добавить("Тест_ПроверитьКомандыПросмотрАктуНаЗаменуТовара");
	
#Область СписокТестов_ЗаказНаряд_КороткаФорма

	СпиокТестов.Добавить("Тест_ПроверитьНаличияМакетЗаказНаряд");
	СпиокТестов.Добавить("Тест_ПроверитьКомандыЗаказНаряд_КороткаФорма");
	СпиокТестов.Добавить("Тест_ПроверитьТипТекстЗапросаДанныеДляПечатиФормыЗаказНаряд");
	СпиокТестов.Добавить("Тест_ПроверитьПечатиЗаказНаряд_КороткаФорма");

#КонецОбласти	
	
	                     
	Возврат СпиокТестов;
	
КонецФункции

Процедура Тест_ПроверитьТипСтруктураТипов()  Экспорт
	МассивДокументов = Новый Массив;
	ВерсияКофигурации = Число(СтрЗаменить(Метаданные.Версия, ".", ""));	
	СтруктураТипов = РазложитьМассивПоТипамОбъектов(МассивДокументов, ВерсияКофигурации);
	ЮнитТест.ПроверитьТип(СтруктураТипов, Тип("Структура"));
КонецПроцедуры

Процедура Тест_ПроверитьТипТекстЗапросаДанныеАктНаЗаменутовара()  Экспорт
	ТекстЗапроса = ПолучитьТекстЗапросаДанныеАктНаЗаменутовара();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ПроверитьНаличияМакетАктНаЗаменуТовара()  Экспорт
	Макет = ПолучитьМакет("ПФ_MXL_АктНаЗаменуТовара");
	ЮнитТест.ПроверитьТип(Макет, Тип("ТабличныйДокумент"));	
КонецПроцедуры

Процедура Тест_ПроверитьКомандыПросмотрАктуНаЗаменуТовара()  Экспорт
	Команда = Метаданные.Обработки.ktcПечатьДополнительныхФорм.Команды.ПечатьАктНаЗаменуТовара;
	ЮнитТест.ПроверитьТип(Команда, Тип("ОбъектМетаданных"));	
КонецПроцедуры

Процедура Тест_ПроверитьТипТекстЗапросаЗаказНаряд_Квитанции()  Экспорт
	ТекстЗапроса = ПолучитьТекстЗапросаДанныеАктНаЗаменутовара();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
	ЮнитТест.ПроверитьВалидностьЗапроса(ТекстЗапроса);
КонецПроцедуры

Процедура Тест_ПроверитьНаличияМакетЗаказНаряд_Квитанции()  Экспорт
	Макет = ПолучитьМакет("ПФ_MXL_КвитанцияЗаказаНаряда");
	ЮнитТест.ПроверитьТип(Макет, Тип("ТабличныйДокумент"));	
КонецПроцедуры

Процедура Тест_ПроверитьКомандыПросмотрЗаказНаряд_Квитанции()  Экспорт
	Команда = Метаданные.Обработки.ktcПечатьДополнительныхФорм.Команды.ПечатьЗаказНаряд_Квитанции;
	ЮнитТест.ПроверитьТип(Команда, Тип("ОбъектМетаданных"));	
КонецПроцедуры


#Область Справочники

Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

Функция СоздатьНоменклатуру(УИНаименование)
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование(УИНаименование);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				"Тестовая "+УИНаименование);   
	ПараметрыЗаполнения.Вставить("ИспользоватьУпаковки",		Ложь);
	ПараметрыЗаполнения.Вставить("ИспользоватьСерийныеНомера",	Истина);
	
	Бибилиотека = ПолучитьБиблиотекуНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

Функция СоздатьСерийныйНомер(НоменклатураСсылка)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",	НоменклатураСсылка);   
	ПараметрыЗаполнения.Вставить("Код",			"Тестовой серийный номер");
	
	Бибилиотека = ПолучитьБиблиотекуСерийныеНомера();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСерийныйНомер()

Функция СоздатьОрганизацию()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Организация");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуОрганизации();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьОрганизацию()

Функция СоздатьПоставщика()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Поставщик");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Поставщик", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКлиента(УИНаименование)

	//Наименование = ПреобразоватьУникальныйИдентификаторВНаименование(УИНаименование);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Клиент", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", "Тестовый"+УИНаименование);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКонтрагента(Партнер)

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Контрагент");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуКонтаргенты();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьКонтрагента()

Функция СоздатьСоглашениеСКлиентами(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с клиентом");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашениеСКлиентами();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

Функция СоздатьСоглашенияСПоставщками(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с поставщиком");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашенияСПоставщками();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

#КонецОбласти


#Область Документы

Функция ИнициализироватьТаблицуТоваров()

	Товары = Новый ТаблицаЗначений;
	
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Товары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Товары;

КонецФункции // ИнициализироватьТаблицуТоваров()

Функция ИнициализироватьТаблицуСерийныхНомеров()

	СерийныеНомера = Новый ТаблицаЗначений;
	СерийныеНомера.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомераНоменклатуры"));
	СерийныеНомера.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат СерийныеНомера;

КонецФункции // ИнициализироватьТаблицуСерийныхНомеров()

Функция СоздатьПоступлениеТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
		
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер"			, Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент"		, Контрагент);
	ПараметрыЗаполнения.Вставить("Организация"		, Организация);
	ПараметрыЗаполнения.Вставить("Склад"			, Склад);
	ПараметрыЗаполнения.Вставить("Соглашение"		, Соглашение);
	ПараметрыЗаполнения.Вставить("Товары"			, Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера"	, СерийныеНомера);
	
	Бибилиотека = ПолучитьБиблиотекуПоступлениеТоваров();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьРеализациюТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
	
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;		
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	ПараметрыЗаполнения.Вставить("Товары", Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера", СерийныеНомера);
	ПараметрыЗаполнения.Вставить("Статус", Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	Бибилиотека = ПолучитьБиблиотекуРеализацияТоваровИУслуг();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьЗаявкуСервисногоЦентра(Партнер, Склад, Номенклатура, СерийныйНомер, РеализацияТоваров)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаЗначений.Колонки;
	Колонки.Добавить("Период"						, Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ЭтапРаботы"					, Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы"));
	Колонки.Добавить("ПартнерАСЦ"					, Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Комментарий"					, Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Ответственный"				, Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Колонки.Добавить("МесторасположениеФактическое"	, Новый ОписаниеТипов("СправочникСсылка.ГНАТ_МесторасположениеВСервисе"));
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата();
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято;
	НоваяСтрока.Комментарий 	= "Тестовый комментарий";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВидОперации"				, Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Авторизация);
	ПараметрыЗаполнения.Вставить("ЗаказчикРемонта"			, Партнер);
	ПараметрыЗаполнения.Вставить("Склад"					, Склад);
	ПараметрыЗаполнения.Вставить("Номенклатура"				, Номенклатура);
	ПараметрыЗаполнения.Вставить("СерийныйНомер"			, СерийныйНомер);
	ПараметрыЗаполнения.Вставить("РеализацияТоваровУслуг"	, РеализацияТоваров);
	ПараметрыЗаполнения.Вставить("ОбъектОснование"			, РеализацияТоваров);
	
	Бибилиотека = ПолучитьБиблиотекуЗаявкаСервисногоЦентра();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(ПараметрыЗаполнения);

КонецФункции // СоздатьЗаявкуСервисногоЦентра()

#КонецОбласти 


#Область Библиотеки

Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

Функция ПолучитьБиблиотекуСерийныеНомера()
	ПутьКБиблиотеке = "\tests\Справочники\СерийныеНомераНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСерийныеНомера()

Функция ПолучитьБиблиотекуОрганизации()
	ПутьКБиблиотеке = "\tests\Справочники\Организации\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуОрганизации()

Функция ПолучитьБиблиотекуПартнеры()
	ПутьКБиблиотеке = "\tests\Справочники\Партнеры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПартнеры()

Функция ПолучитьБиблиотекуКонтаргенты()
	ПутьКБиблиотеке = "\tests\Справочники\Контрагенты\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуКонтаргенты()

Функция ПолучитьБиблиотекуСоглашениеСКлиентами()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашениеСКлиентами\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашениеСКлиентами()

Функция ПолучитьБиблиотекуСоглашенияСПоставщками()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашенияСПоставщками\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашенияСПоставщками()

Функция ПолучитьБиблиотекуПоступлениеТоваров()
	ПутьКБиблиотеке = "\tests\Документы\ПоступлениеТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПоступлениеТоваров()

Функция ПолучитьБиблиотекуРеализацияТоваровИУслуг()
	ПутьКБиблиотеке = "\tests\Документы\РеализацияТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуРеализацияТоваровИУслуг()

Функция ПолучитьБиблиотекуЗаявкаСервисногоЦентра()
	ПутьКБиблиотеке = "\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуЗаявкаСервисногоЦентра()

#КонецОбласти 


#КонецОбласти 

#Область СведенияОВнешнейОбработке
	
Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.150";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Обработка 'Внешние печатные формы'");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Обработка 'Внешние печатные формы' [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Обработка 'Внешние печатные формы' [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "ВПФ");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция GetLibrary(LibraryName) Экспорт
	Ссылка 		    = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(LibraryName);
	Если Ссылка = Неопределено Тогда
		ВызватьИсключение "Библиотека с именем не найдена: " + LibraryName;	
	КонецЕсли;
	ДвоичныеДанные  = Ссылка.ХранилищеОбработки.Получить();
	АдресХранилища  = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки  = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;	
КонецФункции

// ПЕЧАТЬ
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ВерсияКофигурации = Число(СтрЗаменить(Метаданные.Версия, ".", ""));
	
	СтруктураТипов = РазложитьМассивПоТипамОбъектов(МассивОбъектов.МассивДокументов, ВерсияКофигурации);
	
	СписокОбъектовНаПечати = Новый СписокЗначений;
	
	// Для отправки по e-mail печатных форм
	ОбъектыПечати		   = Новый СписокЗначений;
	Для Каждого Тип ИЗ СтруктураТипов Цикл
		ОбъектыПечати.ЗагрузитьЗначения(Тип.Значение);
	КонецЦикла;
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДоступнаПечатьПоКомплектно", Ложь);
	ПараметрыПечати.Вставить("ПараметрыОтправки", Новый Структура("Получатель, Тема, Текст"));

	///////////////////////////////////////
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказКлиента") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказКлиента", "Заказ клиента", СформироватьПечатнуюФормуЗаказКлиента(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;	
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйКассовыйОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриходныйКассовыйОрдер", "Приходный кассовый ордер", СформироватьПечатныйФормуПриходныйКассовыйОрдер(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйОрдерНаТовары_ПечатьШтрихкода") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриходныйОрдерНаТовары_ПечатьШтрихкода", "Штрихкод", СформироватьПечатнуюФормуШтрихкодаПриходногоОрдера(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйОрдерНаТовары") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриходныйОрдерНаТовары", "Приходный ордер на товары", СформироватьПечатныйФормуПриходныйОрдерНаТовары(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйКассовыйОрдер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходныйКассовыйОрдер", "Расходный кассовый ордер", СформироватьПечатнуюФормуРасходныйКассовыйОрдер(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуКлиенту") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплатуКлиенту", "Счет на оплату клиенту", СформироватьПечатнуюФормуСчетНаОплатуКлиенту(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваров", "Задание на пересчет товаров", СформироватьПечатнуюФормуСчетНаОплатуКлиентуПересчетТоваров(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийноеСоглашение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийноеСоглашение", "Гарантийное соглашение", СформироватьПечатнуюФормуГарантийногоСоглашения(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", СформироватьПечатнуюФормуТоварныйЧек(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВидатковаНакладна") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ВидатковаНакладна", "Видаткова накладна", СформироватьПечатнуюФормуВидатковаНакладна(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладна_UA") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладна_UA", "Прихідна накладна", СформироватьПечатнуюФормуНакладна(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОприходованиеТоваров_UA") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОприходованиеТоваров_UA", "Оприходування товарів", СформироватьПечатнуюФормуОприходованиеТоваров(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов, ВерсияКофигурации));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписаниеТоваров_UA") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписаниеТоваров_UA", "Списання товарів", СформироватьПечатнуюФормуСписаниеТоваров(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов, ВерсияКофигурации));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийноеСоглашение_Ноутбукер") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийноеСоглашение_Ноутбукер", "Гарантийное соглашение", СформироватьПечатнуюФормуГарантийногоСоглашения(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек_ЧП") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек_ЧП", "Товарный чек", СформироватьПечатнуюФормуТоварныйЧек_ЧП(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетКлиентуРенесанс") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетКлиентуРенесанс", "Счет на оплату (Ренесанс)", СформироватьПечатнуюФормуСчетаНаОплатуРенесанс(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложение_UA") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КоммерческоеПредложение_UA", "Коммерческое предложение", СформироватьПечатнуюФормуКоммерческогоПредложения(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФормаЗаявкаНаСборку") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФормаЗаявкаНаСборку", "Заявка на сборку системного блока", СформироватьПечатнуюФормуЗаявкиНаСборку(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйОрдерНаТовары_UA") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходныйОрдерНаТовары_UA", "Расходный ордер на товары", СформироватьПечатнуюФормуРасходногоОрдераНаТовары(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйОрдерНаТовары_ПечатьЭтикетки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходныйОрдерНаТовары_ПечатьЭтикетки", "Этикетка", СформироватьПечатнуюФормуЭтикеткиРасходногоОрдера(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МестаДоставки_ПечатьQRЭтикетки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МестаДоставки_ПечатьQRЭтикетки", "QR-Этикетка", СформироватьПечатнуюФормуQRЭтикетки(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказВидатковаНакладна") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказВидатковаНакладна", "Заказ Видаткова накладна", СформироватьПечатнуюФормуЗаказВидатковаНакладна(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасходныйОрдерНаТовары_ЧП") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасходныйОрдерНаТовары_ЧП", "Расходный ордер на товары (чековый принтер)", СформироватьПечатнуюФормуРасходныйОрдерНаТовары_ЧП(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КТСПомощь_АктВыполненныхРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КТСПомощь_АктВыполненныхРабот", "Акт выполненных работ", СформироватьПечатныюФормуАктВыполненныхРаботКТСПомощь(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетовОбороты") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетовОбороты", "Акт сверки взаимных расчетов (обороты)", СформироватьПечатнуюФормуАктСверкиВзаимныхРасчетов(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВидатковаНакладнаУправлениеПоступлением") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ВидатковаНакладнаУправлениеПоступлением", "Видаткова накладна", СформироватьПечатнуюФормуВидатковаНакладнаУправлениеПоступлением(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
 	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МестаДоставки_ПечатьЭтикетки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МестаДоставки_ПечатьЭтикетки", "Этикетка", СформироватьПечатнуюФормуЭтикетки(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПоставщику") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПоставщику", "Заказ поставщику", СформироватьПечатнуюФормуЗаказПоставщику(СтруктураТипов, СписокОбъектовНаПечати,МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МестаДоставки_ПечатьQRЭтикеткиПредварительнойПросмотр") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МестаДоставки_ПечатьQRЭтикеткиПредварительнойПросмотр", "QR-Этикетка", СформироватьПечатнуюФормуQRЭтикеткиДляПросмотра(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд_КороткаФорма") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд_КороткаФорма", "Заказ-наряд", СформироватьПечатнуюФормуЗаказНаряд(СтруктураТипов, СписокОбъектовНаПечати,МассивОбъектов, Ложь));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд_ПовнаФорма") Тогда    
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд_ПовнаФорма", "Заказ-наряд", СформироватьПечатнуюФормуЗаказНаряд(СтруктураТипов, СписокОбъектовНаПечати,МассивОбъектов, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктНаЗаменуТовара") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"АктНаЗаменуТовара","Акт на замену товаров",СформироватьПечатнуюФормуАктНаЗаменуТовара(СтруктураТипов, СписокОбъектовНаПечати,МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КвитанцияЗаказаНаряда") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"КвитанцияЗаказаНаряда","Квитанция",СформироватьПечатнуюФормуЗаказНаряд_Квитанции(СтруктураТипов, СписокОбъектовНаПечати,МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЧекПеремещенияИзОтгрузкиМест") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЧекПеремещенияИзОтгрузкиМест", "Чек для перемещения из отгрузки мест", СформироватьПечатнуюФормуТоварныйЧекДляПеремещенияОтгрузкаМест(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИспользованныеДеталиИУслугиПоЗаказу") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИспользованныеДеталиИУслугиПоЗаказу", "Использованные детали и услуги по заказу", СформироватьПечатнуюФормуИспользованныеДеталиИУслугиПоЗаказу(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов));
	КонецЕсли;
	

КонецПроцедуры

Функция РазложитьМассивПоТипамОбъектов(МассивОбъектов, ВерсияКофигурации)
	
	СтруктураТипов 	= Новый Структура;	
	Для Каждого Объект Из МассивОбъектов Цикл
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если НЕ СтруктураТипов.Свойство("ЗаказКлиента") Тогда
				ЗаказКлиента = Новый Массив;
				СтруктураТипов.Вставить("ЗаказКлиента", ЗаказКлиента);
			КонецЕсли;
			СтруктураТипов.ЗаказКлиента.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			Если НЕ СтруктураТипов.Свойство("ПриходныйКассовыйОрдер") Тогда
				ПриходныйКассовыйОрдер = Новый Массив;
				СтруктураТипов.Вставить("ПриходныйКассовыйОрдер", ПриходныйКассовыйОрдер);
			КонецЕсли;
			СтруктураТипов.ПриходныйКассовыйОрдер.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если НЕ СтруктураТипов.Свойство("ПриходныйОрдерНаТовары") Тогда
				ПриходныйОрдерНаТовары = Новый Массив;
				СтруктураТипов.Вставить("ПриходныйОрдерНаТовары", ПриходныйОрдерНаТовары);
			КонецЕсли;
			СтруктураТипов.ПриходныйОрдерНаТовары.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Если НЕ СтруктураТипов.Свойство("РасходныйКассовыйОрдер") Тогда
				РасходныйКассовыйОрдер = Новый Массив;
				СтруктураТипов.Вставить("РасходныйКассовыйОрдер", РасходныйКассовыйОрдер);
			КонецЕсли;
			СтруктураТипов.РасходныйКассовыйОрдер.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			Если НЕ СтруктураТипов.Свойство("СчетНаОплатуКлиенту") Тогда
				СчетНаОплатуКлиенту = Новый Массив;
				СтруктураТипов.Вставить("СчетНаОплатуКлиенту", СчетНаОплатуКлиенту);
			КонецЕсли;
			СтруктураТипов.СчетНаОплатуКлиенту.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
			Если НЕ СтруктураТипов.Свойство("ПересчетТоваров") Тогда
				ПересчетТоваров = Новый Массив;
				СтруктураТипов.Вставить("ПересчетТоваров", ПересчетТоваров);
			КонецЕсли;
			СтруктураТипов.ПересчетТоваров.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			Если НЕ СтруктураТипов.Свойство("ОтчетОРозничныхПродажах") Тогда
				ОтчетОРозничныхПродажах 	= Новый Массив;
				СтруктураТипов.Вставить("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
			КонецЕсли;
			СтруктураТипов.ОтчетОРозничныхПродажах.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если НЕ СтруктураТипов.Свойство("ПоступлениеТоваровУслуг") Тогда
				ПоступлениеТоваровУслуг 	= Новый Массив;
				СтруктураТипов.Вставить("ПоступлениеТоваровУслуг", ПоступлениеТоваровУслуг);
			КонецЕсли;
			СтруктураТипов.ПоступлениеТоваровУслуг.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			Если НЕ СтруктураТипов.Свойство("РасходныйОрдерНаТовары") Тогда
				РасходныйОрдерНаТовары 	= Новый Массив;
				СтруктураТипов.Вставить("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
			КонецЕсли;
			СтруктураТипов.РасходныйОрдерНаТовары.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если НЕ СтруктураТипов.Свойство("РеализацияТоваровУслуг") Тогда
				РеализацияТоваровУслуг 	= Новый Массив;
				СтруктураТипов.Вставить("РеализацияТоваровУслуг", РеализацияТоваровУслуг);
			КонецЕсли;
			СтруктураТипов.РеализацияТоваровУслуг.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) 	= Тип("ДокументСсылка.ЧекККМ") Тогда
			Если НЕ СтруктураТипов.Свойство("ЧекККМ") Тогда
				ЧекККМ 	= Новый Массив;
				СтруктураТипов.Вставить("ЧекККМ", ЧекККМ);
			КонецЕсли;
			СтруктураТипов.ЧекККМ.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Если НЕ СтруктураТипов.Свойство("ПеремещениеТоваров") Тогда
				ПеремещениеТоваров 	= Новый Массив;
				СтруктураТипов.Вставить("ПеремещениеТоваров", ПеремещениеТоваров);
			КонецЕсли;
			СтруктураТипов.ПеремещениеТоваров.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СборкаТоваров") Тогда
			Если НЕ СтруктураТипов.Свойство("СборкаТоваров") Тогда
				СборкаТоваров 	= Новый Массив;
				СтруктураТипов.Вставить("СборкаТоваров", СборкаТоваров);
			КонецЕсли;
			СтруктураТипов.СборкаТоваров.Добавить(Объект);
		
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
			Если НЕ СтруктураТипов.Свойство("ОприходованиеИзлишковТоваров") Тогда
				ОприходованиеИзлишковТоваров = Новый Массив;
				СтруктураТипов.Вставить("ОприходованиеИзлишковТоваров", ОприходованиеИзлишковТоваров);
			КонецЕсли;
			СтруктураТипов.ОприходованиеИзлишковТоваров.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
			Если НЕ СтруктураТипов.Свойство("СписаниеНедостачТоваров") Тогда
				СписаниеНедостачТоваров	= Новый Массив;
				СтруктураТипов.Вставить("СписаниеНедостачТоваров", СписаниеНедостачТоваров);
			КонецЕсли;
			СтруктураТипов.СписаниеНедостачТоваров.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.МестаДоставки") Тогда	
			Если НЕ СтруктураТипов.Свойство("МестаДоставки") Тогда
				МестаДоставки = Новый Массив;
				СтруктураТипов.Вставить("МестаДоставки", МестаДоставки);
			КонецЕсли;
			СтруктураТипов.МестаДоставки.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда	
			Если НЕ СтруктураТипов.Свойство("СверкаВзаиморасчетов") Тогда
				СверкаВзаиморасчетов = Новый Массив;
				СтруктураТипов.Вставить("СверкаВзаиморасчетов", СверкаВзаиморасчетов);
			КонецЕсли;
			СтруктураТипов.СверкаВзаиморасчетов.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда	
			Если НЕ СтруктураТипов.Свойство("ЗаказПоставщику") Тогда
				ЗаказПоставщику = Новый Массив;
				СтруктураТипов.Вставить("ЗаказПоставщику", ЗаказПоставщику);
			КонецЕсли;
			СтруктураТипов.ЗаказПоставщику.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ГНАТ_ЗаявкаСервисногоЦентра") Тогда	
			Если НЕ СтруктураТипов.Свойство("ГНАТ_ЗаявкаСервисногоЦентра") Тогда
				ГНАТ_ЗаявкаСервисногоЦентра = Новый Массив;
				СтруктураТипов.Вставить("ГНАТ_ЗаявкаСервисногоЦентра", ГНАТ_ЗаявкаСервисногоЦентра);
			КонецЕсли;
			СтруктураТипов.ГНАТ_ЗаявкаСервисногоЦентра.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда	
			Если НЕ СтруктураТипов.Свойство("ВозвратТоваровОтКлиента") Тогда
				ВозвратТоваровОтКлиента = Новый Массив;
				СтруктураТипов.Вставить("ВозвратТоваровОтКлиента", ВозвратТоваровОтКлиента);
			КонецЕсли;
			СтруктураТипов.ВозвратТоваровОтКлиента.Добавить(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураТипов
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

Функция СформироватьПечатнуюФормуЗаказКлиента(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатиЗаказаКлиента(СтруктураТипов.ЗаказКлиента);
	СформироватьТабличныйДокументЗаказКлиента(ТабличныйДокумент, ДанныеДляПечати, "Заказ", ОбъектыПечати);
	
	ТабличныйДокумент.КлючПараметровПечати = "ЗаказКлиентаГрн";
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатныйФормуПриходныйКассовыйОрдер(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_ПриходныйКассовыйОрдер_UA");
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Наименование КАК НаименованиеОрганизации,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК НаименованиеОрганизацииСокращенное,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Представление КАК КонтрагентПредставление,
	|	ДанныеДокумента.ПринятоОт КАК ПринятоОт,
	|	ДанныеДокумента.Основание КАК Основание,
	|	ДанныеДокумента.Приложение КАК Приложение,
	|	ДанныеДокумента.ВТомЧислеНДС КАК ВТомЧисле,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта.Представление КАК ВалютаПредставление,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.Кассир.ФизическоеЛицо КАК Кассир,
	|	ЕСТЬNULL(ОтветственныеЛицаБухгалтер.ФизическоеЛицо.Наименование, """") КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаБухгалтер
	|		ПО ОтветственныеЛицаБухгалтер.Владелец = ДанныеДокумента.Организация
	|			И ОтветственныеЛицаБухгалтер.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			И ОтветственныеЛицаБухгалтер.ДатаНачала >= ДанныеДокумента.Дата
	|			И ОтветственныеЛицаБухгалтер.ДатаОкончания <= ДанныеДокумента.Дата
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|");
		
	Запрос.УстановитьПараметр("МассивДокументов", СтруктураТипов.ПриходныйКассовыйОрдер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		
		Если Не ПустаяСтрока(Выборка.НаименованиеОрганизацииСокращенное) Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации = Выборка.НаименованиеОрганизацииСокращенное;
		Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации = Выборка.НаименованиеОрганизации;
		КонецЕсли;
		
		Сумма = Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2");
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВалютаРегламентированногоУчета <> Выборка.Валюта Тогда
			Сумма = Сумма + " " + СокрЛП(Выборка.ВалютаПредставление);
		КонецЕсли;
		ОбластьМакета.Параметры.Сумма = Сумма;
		// ВыводитьСуммуБезКопеек
		ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(Выборка.Сумма, Выборка.Валюта, Ложь);
		ОбластьМакета.Параметры.НомерДокумента = ПолучитьНомерНаПечать(Выборка.Номер, Выборка.Префикс);
		Если ПустаяСтрока(Выборка.ВТомЧисле) Тогда
			ОбластьМакета.Параметры.ВТомЧисле = "Без податку (ПДВ)";
		КонецЕсли;
		
		ОбластьМакета.Параметры.ВТомЧисле = СтрЗаменить(ОбластьМакета.Параметры.ВТомЧисле, "налога", "податку");
		ОбластьМакета.Параметры.ВТомЧисле = СтрЗаменить(ОбластьМакета.Параметры.ВТомЧисле, "НДС", "ПДВ");
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ФамилияИнициалыФизЛица(Выборка.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОКассира = ФамилияИнициалыФизЛица(Выборка.Кассир);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, Выборка.Ссылка);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка
		);
		
	КонецЦикла;	
		
	Возврат ТабличныйДокумент;

	
КонецФункции

Функция СформироватьПечатныйФормуПриходныйОрдерНаТовары(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ПриходныйОрдерНаТовары";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение.Партнер) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	ПриходныйОрдерНаТовары.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ПриходныйОрдерНаТовары.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ПриходныйОрдерНаТовары.Распоряжение.Организация.Префикс КАК РаспоряжениеПрефикс,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение.Организация) КАК ПредставлениеОрганизации,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Код КАК Код,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул КАК Артикул,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок,
	|	ПриходныйОрдерНаТоварыТовары.Количество,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", СтруктураТипов.ПриходныйОрдерНаТовары);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru='Прихідний ордер на товари'");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуетсяАдресноеХранение = Ложь;
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение);
		
		ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;
		
		//Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе
		Макет = ПолучитьМакет("ПФ_MXL_ПриходныйОрдерНаТовары_UA");
		
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
		
		ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
		ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
		ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
		
		ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		
		ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
		
		ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");

		ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
		
		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ВыводитьУпаковки Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
			+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		КонецЕсли;
		
		ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
		ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
		ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
		ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
		ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
		ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
					
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru='Зона прийомки:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			//если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;
		
		ОбластьШапка.Параметры.ПредставлениеСклада			= ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,ВыборкаПоДокументам.ПредставлениеПомещения);
		ОбластьШапка.Параметры.ТекстЗоны 					= ТекстЗоны;
		ОбластьШапка.Параметры.ПредставлениеЗоныПриемки		= ЗонаПредставление;
		ОбластьШапка.Параметры.ПредставлениеОрганизации	    = ВыборкаПоДокументам.ПредставлениеОрганизации;
		
		РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
		РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
		РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
		РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
		
		ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= СформироватьЗаголовокДокумента(РеквизитыДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований = 0;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Артикул = ВыборкаПоСтрокамТЧ.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
			
		ТекстИтоговойСтроки = НСтр("ru = 'Всього найменувань: %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		УстановитьПривилегированныйРежим(Истина);
		ОбластьПодписей.Параметры.ПредставлениеОтветсвенного = ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуРасходныйКассовыйОрдер(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_РасходныйКассовыйОрдер_UA");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.Наименование КАК НаименованиеОрганизации,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК НаименованиеОрганизацииСокращенное,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Представление КАК КонтрагентПредставление,
	|	ДанныеДокумента.ПоДокументу КАК РеквизитыДокументаУдостоверяющегоЛичность,
	|	ДанныеДокумента.Основание КАК Основание,
	|	ДанныеДокумента.Приложение КАК Приложение,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта.Представление КАК ВалютаПредставление,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ЕСТЬNULL(ОтветственныеЛицаРуководитель.Должность, """") КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Кассир.ФизическоеЛицо КАК Кассир,
	|	ЕСТЬNULL(ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование, """") КАК Руководитель,
	|	ДанныеДокумента.Выдать КАК ФИОПолучателя,
	|	ЕСТЬNULL(ОтветственныеЛицаБухгалтер.ФизическоеЛицо.Наименование, """") КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаБухгалтер
	|		ПО ОтветственныеЛицаБухгалтер.Владелец = ДанныеДокумента.Организация
	|			И ОтветственныеЛицаБухгалтер.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			И ОтветственныеЛицаБухгалтер.ДатаНачала >= ДанныеДокумента.Дата
	|			И ОтветственныеЛицаБухгалтер.ДатаОкончания <= ДанныеДокумента.Дата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаРуководитель
	|		ПО ОтветственныеЛицаРуководитель.Владелец = ДанныеДокумента.Организация
	|			И ОтветственныеЛицаРуководитель.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			И ОтветственныеЛицаРуководитель.ДатаНачала >= ДанныеДокумента.Дата
	|			И ОтветственныеЛицаРуководитель.ДатаОкончания <= ДанныеДокумента.Дата
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|");
		
	Запрос.УстановитьПараметр("МассивДокументов", СтруктураТипов.РасходныйКассовыйОрдер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		
		Если Не ПустаяСтрока(Выборка.НаименованиеОрганизацииСокращенное) Тогда
			ОбластьМакета.Параметры.ПредставлениеОрганизации = Выборка.НаименованиеОрганизацииСокращенное;
		Иначе
			ОбластьМакета.Параметры.ПредставлениеОрганизации = Выборка.НаименованиеОрганизации;
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерДокумента = ПолучитьНомерНаПечать(Выборка.Номер, Выборка.Префикс);
		Сумма = Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2");
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если ВалютаРегламентированногоУчета <> Выборка.Валюта Тогда
			Сумма = Сумма + " " + СокрЛП(Выборка.ВалютаПредставление);
		КонецЕсли;
		ОбластьМакета.Параметры.Сумма = Сумма;
		// ВыводитьСуммуБезКопеек
		ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(Выборка.Сумма, Выборка.Валюта, Ложь);
				
		ОбластьМакета.Параметры.ФИОРуководителя = ФамилияИнициалыФизЛица(Выборка.Руководитель);
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = ФамилияИнициалыФизЛица(Выборка.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОКассира = ФамилияИнициалыФизЛица(Выборка.Кассир);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, Выборка.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка
		);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуСчетНаОплатуКлиенту(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", СтруктураТипов.СчетНаОплатуКлиенту);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуКлиенту.Ссылка                                           	  КАК Ссылка,
		|	СчетНаОплатуКлиенту.Номер                                                 КАК Номер,
		|	СчетНаОплатуКлиенту.Дата                                                  КАК Дата,
		|	СчетНаОплатуКлиенту.Организация                                      	  КАК Организация,
		|	ЕСТЬNULL(ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование, """")   КАК Руководитель,
		|	ЕСТЬNULL(ОтветственныеЛицаБухгалтер.ФизическоеЛицо.Наименование, """") 	  КАК ГлавныйБухгалтер,
		|	СчетНаОплатуКлиенту.Организация.Префикс                              	  КАК Префикс,
		|	СчетНаОплатуКлиенту.ДокументОснование.Контрагент                     	  КАК Контрагент,
		|	СчетНаОплатуКлиенту.БанковскийСчет                                   	  КАК БанковскийСчет,
		|	СчетНаОплатуКлиенту.БанковскийСчет.ТекстКорреспондента               	  КАК БанковскийСчетТекстКорреспондента,
		|	СчетНаОплатуКлиенту.ДокументОснование.ЦенаВключаетНДС               	  КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА
		|			СчетНаОплатуКлиенту.ДокументОснование.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                                    КАК УчитыватьНДС,
		|	СчетНаОплатуКлиенту.Валюта                               КАК Валюта,
		|	СчетНаОплатуКлиенту.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
		|	СчетНаОплатуКлиенту.ДополнительнаяИнформация             КАК ДополнительнаяИнформация,
		|	СчетНаОплатуКлиенту.ЧастичнаяОплата                      КАК ЧастичнаяОплата,
		|	СчетНаОплатуКлиенту.НазначениеПлатежа                    КАК НазначениеПлатежа,
		|	СчетНаОплатуКлиенту.ДокументОснование                    КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА
		|			СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента = 0
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			СчетНаОплатуКлиенту.СуммаДокумента * 100 / СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента
		|	КОНЕЦ  КАК ПроцентОплаты,
		|	СчетНаОплатуКлиенту.СуммаДокумента                       КАК СуммаДокумента,
		|	СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты.(
		|		НомерСтроки                                          КАК НомерСтроки,
		|		ДатаПлатежа                                          КАК ДатаПлатежа,
		|		ПроцентПлатежа                                       КАК ПроцентПлатежа,
		|		СуммаПлатежа                                         КАК СуммаПлатежа
		|	) КАК ЭтапыГрафикаОплаты
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаРуководитель
		|		ПО ОтветственныеЛицаРуководитель.Владелец = СчетНаОплатуКлиенту.Организация
		|			И ОтветственныеЛицаРуководитель.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|			И ОтветственныеЛицаРуководитель.ДатаНачала >= СчетНаОплатуКлиенту.Дата
		|			И ОтветственныеЛицаРуководитель.ДатаОкончания <= СчетНаОплатуКлиенту.Дата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаБухгалтер
		|		ПО ОтветственныеЛицаБухгалтер.Владелец = СчетНаОплатуКлиенту.Организация
		|			И ОтветственныеЛицаБухгалтер.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
		|			И ОтветственныеЛицаБухгалтер.ДатаНачала >= СчетНаОплатуКлиенту.Дата
		|			И ОтветственныеЛицаБухгалтер.ДатаОкончания <= СчетНаОплатуКлиенту.Дата
		|ГДЕ
		|	СчетНаОплатуКлиенту.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Если ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.КоличествоУпаковок				КАК КоличествоУпаковок,
					|	ДокументОснованиеТовары.Упаковка						КАК Упаковка,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма +
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ЗаказКлиента.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|	И НЕ ДокументОснованиеТовары.Отменено
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
					
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.КоличествоУпаковок				КАК КоличествоУпаковок,
					|	ДокументОснованиеТовары.Упаковка						КАК Упаковка,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма +
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|	И НЕ ДокументОснованиеТовары.Отменено
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
				
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.КоличествоУпаковок				КАК КоличествоУпаковок,
					|	ДокументОснованиеТовары.Упаковка						КАК Упаковка,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма +
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаБезСкидки
					|ИЗ
					|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
				
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	0                                                            КАК НомерСтроки,
					|	ДанныеДокумента.Услуга                                       КАК Номенклатура,
					|	ДанныеДокумента.Услуга.НаименованиеПолное                    КАК НаименованиеПолное,
					|	ДанныеДокумента.Услуга.ЕдиницаИзмерения.Наименование         КАК ЕдиницаИзмерения,
					|	1                                                            КАК Количество,
					|	1															 КАК КоличествоУпаковок,
					|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)		 КАК Упаковка,
					|	ДанныеДокумента.СуммаВознаграждения                          КАК Цена,
					|	ДанныеДокумента.СуммаВознаграждения                          КАК Сумма,
					|	ДанныеДокумента.СтавкаНДСВознаграждения                      КАК СтавкаНДС,
					|	ДанныеДокумента.СуммаНДСвознаграждения                       КАК СуммаНДС,
					|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
					|	0                                                            КАК СуммаСкидки,
					|	0                                                            КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ОтчетКомитенту КАК ДанныеДокумента
					|ГДЕ
					|	ДанныеДокумента.Ссылка = &ДокументОснование
					|
					|");
					
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.КоличествоУпаковок				КАК КоличествоУпаковок,
					|	ДокументОснованиеТовары.Упаковка						КАК Упаковка,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	0                                                       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма                           КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ОтчетКомиссионера.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
					
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.КоличествоУпаковок				КАК КоличествоУпаковок,
					|	ДокументОснованиеТовары.Упаковка						КАК Упаковка,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	0                                                       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма                           КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ОтчетКомиссионераОСписании.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
				
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ДокументОснование",ДанныеПечати.ДокументОснование);
		ТаблицаТовары = Запрос.Выполнить().Выгрузить();
		ТаблицаТовары.Сортировать("НомерСтроки");
		
		ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыГрафикаОплаты.Выгрузить();
		ТаблицаЭтапыОплаты.Сортировать("НомерСтроки");
		
		Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
			ДатаПлатежа = '00010101';
		ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		Иначе
			ТаблицаЭтапыОплаты.Сортировать("ДатаПлатежа Убыв");
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказКлиента_СчетЗаказ";
		
		Макет = ПолучитьМакет("ПФ_MXL_СчетЗаказ_UA");
		
		//РезультатСкидки    	= ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		//Если ТипЗнч(РезультатСкидки) = Тип("Структура") Тогда
		//	ЕстьСкидки = РезультатСкидки.ЕстьСкидки;
		//ИначеЕсли ТипЗнч(РезультатСкидки) = Тип("Булево") Тогда
		//	ЕстьСкидки = РезультатСкидки;
		//Иначе
			ЕстьСкидки = Ложь;
		//КонецЕсли;
		КолонкаКодов  		= ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
		ВыводитьКоды  		= ЗначениеЗаполнено(КолонкаКодов);
		
		Если Не ДанныеПечати.ЧастичнаяОплата Тогда
			
			Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
				ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
			ИначеЕсли ЕстьСкидки Или ДанныеПечати.УчитыватьНДС Тогда
				ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
			Иначе
				ОбластьКолонкаТовар = Макет.Область("Товар");
			КонецЕсли;
				
			Если Не ВыводитьКоды Тогда
				
				Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
				ИначеЕсли ЕстьСкидки Или ДанныеПечати.УчитыватьНДС Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
				Иначе
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		//Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		//	
			//НадписьСрокДействия = "Рахунок дійсний до %СрокДействия%. ";
			//НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%", Формат(ДатаПлатежа, "ДЛФ=D"));
			//ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
		//	
		//КонецЕсли;
		
//		ОбластьМакета.Параметры.ИНН             = СведенияОПоставщике.ИНН;
//		ОбластьМакета.Параметры.КПП             = СведенияОПоставщике.КПП;
		ПредставлениеПоставщикаДляПлатПоручения = "";
			
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Банк       = ДанныеПечати.БанковскийСчет.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ДанныеПечати.БанковскийСчет.НомерСчета;
			
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			//ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			//ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			//ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			//ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ПредставлениеПоставщикаДляПлатПоручения                  = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
			
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
			
		ОбластьМакета.Параметры.НазваниеОрганизации 					= ДанныеПечати.БанковскийСчет.НазваниеОрганизации;//ПредставлениеПоставщикаДляПлатПоручения;
		ОбластьМакета.Параметры.ЕДРПОУОрганизации 						= ДанныеПечати.БанковскийСчет.ЕДРПОУОрганизации;
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = "Рахунок на оплату № %НомерДокумента% від %ДатаДокумента% р.";
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ПолучитьНомерНаПечать(ДанныеПечати.Номер, ДанныеПечати.Префикс));
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ТекстПоставщик = "Постачальник:";
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщикаДляПлатПоручения;
		//ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ТекстПокупатель         = "Покупець";
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Если ДанныеПечати.ЧастичнаяОплата Тогда
			
			ОбластьШапкаТаблицы                 = Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата");
			ОбластьШапкаТаблицы.Параметры.Товар = "Товари (послуги)";
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицы);
			
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
			ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.НазначениеПлатежа;
			ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.СуммаДокумента;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицы);
			
			ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
			ОбластьИтого.Параметры.Всего = ДанныеПечати.СуммаДокумента;
			ТабличныйДокумент.Присоединить(ОбластьИтого);
			
			// Вывести ИтогоНДС
			СоответствиеСтавокНДС = ФормированиеПечатныхФорм.ПолучитьСоответствиеСтавокНДС();
				
			Если ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
				
				Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				
					ПараметрыОтбора = Новый Структура();
					ПараметрыОтбора.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
					НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						ТаблицаТоварыНДС = ТаблицаТовары.Скопировать(НайденныеСтроки, "СуммаНДС");
						ТаблицаТоварыНДС.Свернуть(,"СуммаНДС");
						СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.Ключ, ТаблицаТоварыНДС[0].СуммаНДС);
						
						ОбластьИтогоНДС.Параметры.НДС = ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС);
						ОбластьИтогоНДС.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(ТаблицаТоварыНДС[0].СуммаНДС /100 * ДанныеПечати.ПроцентОплаты);
						ТабличныйДокумент.Присоединить(ОбластьИтогоНДС);
						
					КонецЕсли;
					
				КонецЦикла;
					
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюЧастичныйСчет");
			СуммаПрописью = "Всього на суму %СуммаПрописью%";
			СуммаПрописью = СтрЗаменить(СуммаПрописью, "%СуммаПрописью%", СформироватьСуммуПрописью(ДанныеПечати.СуммаДокумента, ДанныеПечати.Валюта));
			ОбластьМакета.Параметры.СуммаПрописью = СуммаПрописью;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			
			Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
				
			ИначеЕсли ЕстьСкидки Тогда
			
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСНДСИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСНДСИлиСоСкидкой");
				
			ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
				
			Иначе
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = "Товари (послуги)";
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
				
			ИначеЕсли ЕстьСкидки Тогда
			
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСНДСИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСНДСИлиСоСкидкой");
				
			ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
				
			Иначе
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
				
			КонецЕсли;
			
			Сумма          = 0;
			СуммаНДС       = 0;
			ВсегоСкидок    = 0;
			ВсегоБезСкидок = 0;

			НомерСтроки = 0;
			
			Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);

				Если ВыводитьКоды Тогда
					
					ОбластьКодов.Параметры.Артикул = СтрокаТовары.Номенклатура[КолонкаКодов];
					ТабличныйДокумент.Присоединить(ОбластьКодов);
					
				КонецЕсли;

				ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(СтрокаТовары.НаименованиеПолное, СтрокаТовары.Характеристика);
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
				ОбластьДанных.Параметры.Цена = СтрокаТовары.Сумма / СтрокаТовары.Количество; 
				Если НЕ СтрокаТовары.Упаковка.Пустая() Тогда
					ОбластьДанных.Параметры.ЕдиницаИзмерения 	= СтрокаТовары.Упаковка.Наименование;
					ОбластьДанных.Параметры.Количество		    = СтрокаТовары.КоличествоУпаковок;
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьДанных);

				Сумма          = Сумма           + СтрокаТовары.Сумма;
				СуммаНДС       = СуммаНДС        + СтрокаТовары.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок    = ВсегоСкидок     + СтрокаТовары.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок  + СтрокаТовары.СуммаБезСкидки;
				КонецЕсли;
				
			КонецЦикла;

			Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
				
			ИначеЕсли ЕстьСкидки Тогда
			
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСНДСИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСНДСИлиСоСкидкой");
				
			ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
				
			Иначе
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			Если ЕстьСкидки Тогда
				
				ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				
				Если ДанныеПечати.УчитыватьНДС Тогда
					ОбластьДанных.Параметры.ВсегоСуммаНДС = СуммаНДС;
				КонецЕсли;
			
			КонецЕсли;
			
			ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			// Вывести ИтогоНДС
			СоответствиеСтавокНДС = ФормированиеПечатныхФорм.ПолучитьСоответствиеСтавокНДС();
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
				
				Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
					
					ПараметрыОтбора = Новый Структура();
					ПараметрыОтбора.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
					НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						ТаблицаТоварыНДС = ТаблицаТовары.Скопировать(НайденныеСтроки, "СуммаНДС");
						ТаблицаТоварыНДС.Свернуть(,"СуммаНДС");
						СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.Ключ, ТаблицаТоварыНДС[0].СуммаНДС);
						
						ТабличныйДокумент.Вывести(ОбластьНомера);
						
						Если ВыводитьКоды Тогда
							ТабличныйДокумент.Присоединить(ОбластьКодов);
						КонецЕсли;
						
						ТабличныйДокумент.Присоединить(ОбластьТовар);
						
						ОбластьДанных.Параметры.НДС = ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС);
						ОбластьДанных.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(ТаблицаТоварыНДС[0].СуммаНДС);
						ТабличныйДокумент.Присоединить(ОбластьДанных);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
			
			ИтоговаяСтрока = "Всього найменувань %Количество%, на суму %Сумма%";
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТовары.Количество());
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
			
			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			
			ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Вывести этапы графика оплаты
		Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
			
			ТаблицаЭтапыОплаты.Сортировать("НомерСтроки Возр");
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|НомерСтрокиТаблицаЭтапыОплаты");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|ДанныеТаблицаЭтапыОплаты");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|НДСТаблицаЭтапыОплаты");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			
			ОбластьНомерСтроки = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|НомерСтрокиТаблицаЭтапыОплаты");
			ОбластьДанные      = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|ДанныеТаблицаЭтапыОплаты");
			ОбластьНДС         = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|НДСТаблицаЭтапыОплаты");
			
			Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
				
				ОбластьНомерСтроки.Параметры.Заполнить(ТекЭтап);
				ТабличныйДокумент.Вывести(ОбластьНомерСтроки);
				ОбластьДанные.Параметры.Заполнить(ТекЭтап);
				ТабличныйДокумент.Присоединить(ОбластьДанные);
				
				ТекстНДС = ФормированиеПечатныхФорм.СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);

				ОбластьНДС.Параметры.ТекстНДС = ТекстНДС;
				ТабличныйДокумент.Присоединить(ОбластьНДС);
				
			КонецЦикла;
				
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|НомерСтрокиТаблицаЭтапыОплаты");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|ДанныеТаблицаЭтапыОплаты");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|НДСТаблицаЭтапыОплаты");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
			
			ОбластьМакета                                    = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета1");
		//ОбластьМакета.Параметры.ФИОРуководителя = ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
		//ОбластьМакета.Параметры.ФИОБухгалтера   = ФамилияИнициалыФизЛица(ДанныеПечати.ГлавныйБухгалтер);
		//ОбластьМакета.Параметры.ФИОМенеджер     = ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
		//	
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуСчетНаОплатуКлиентуПересчетТоваров(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	//Перем ВходнаяЦена;
	//
	//СтруктураНастроекВнешнихПечатныхФорм = ПолучитьГлобальныеНастройкиПечатныхФорм();
	//Если НЕ ТипЗнч(СтруктураНастроекВнешнихПечатныхФорм) = Тип("Структура") Тогда
	//	ВызватьИсключение "Необходимо задать настроки внешних печатных форм. Позвоните пожалуйста на 777.";
	//	Возврат Новый ТабличныйДокумент;
	//КонецЕсли;
	//
	//Если НЕ СтруктураНастроекВнешнихПечатныхФорм.Свойство("ВходнаяЦена", ВходнаяЦена) Тогда
	//	ВызватьИсключение "Необходимо задать настроки внешних печатных форм. Позвоните пожалуйста на 777.";
	//	Возврат Новый ТабличныйДокумент;
	//КонецЕсли;
	
	ВходнаяЦена		= Справочники.ВидыЦен.НайтиПоНаименованию("Роздріб");
	КолонкаКодов 	= ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды 	= ЗначениеЗаполнено(КолонкаКодов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ЗаданиеНаПересчетТоваров";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваров.Ссылка 									КАК Ссылка,
	|	ПересчетТоваров.Дата 									КАК Дата,
	|	ПересчетТоваров.Номер 									КАК Номер,
	|	ПересчетТоваров.Склад 									КАК Склад,
	|	ПересчетТоваров.Помещение 								КАК Помещение,
	|	ПересчетТоваров.ЯчейкаКонсолидацииИзлишковТоваров 		КАК ЯчейкаИзлишков,
	|	ПересчетТоваров.ЯчейкаКонсолидацииИспорченныхТоваров 	КАК ЯчейкаИспорченных,
	|	ПРЕДСТАВЛЕНИЕ(ПересчетТоваров.Склад) 					КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПересчетТоваров.Помещение) 				КАК ПомещениеПредставление,
	|	ПересчетТоваров.Исполнитель.ФизическоеЛицо 				КАК Исполнитель,
	|	ПересчетТоваров.ПечататьКоличествоПоУчету 				КАК ПечататьКоличествоПоУчету
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПересчетТоваров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересчетТоваровТовары.НомерСтроки 									КАК НомерСтроки,
	|	ПересчетТоваровТовары.Количество 									КАК Количество,
	|	ПересчетТоваровТовары.КоличествоУпаковок 							КАК КоличествоУпаковок,
	|	ПересчетТоваровТовары.КоличествоФакт 								КАК КоличествоФакт,
	|	ПересчетТоваровТовары.КоличествоУпаковокФакт 						КАК КоличествоУпаковокФакт,
	|	ПересчетТоваровТовары.Номенклатура.НаименованиеПолное 				КАК НоменклатураПредставление,
	|	ПересчетТоваровТовары.Характеристика.НаименованиеПолное 			КАК ХарактеристикаПредставление,
	|	ПересчетТоваровТовары.Номенклатура									КАК Номенклатура,
	|	ПересчетТоваровТовары.Характеристика								КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ПересчетТоваровТовары.Номенклатура.ЕдиницаИзмерения) 	КАК ЕдиницаИзмеренияПредставлениеНоменклатура,
	|	ПРЕДСТАВЛЕНИЕ(ПересчетТоваровТовары.Упаковка.ЕдиницаИзмерения) 		КАК ЕдиницаИзмеренияПредставлениеУпаковка,
	|	ПРЕДСТАВЛЕНИЕ(ПересчетТоваровТовары.Ячейка) 						КАК ЯчейкаПредставление,
	|	ПересчетТоваровТовары.Номенклатура.Код 								КАК Код,
	|	ПересчетТоваровТовары.Номенклатура.Артикул 							КАК Артикул,
	|	ПересчетТоваровТовары.Ссылка 										КАК Ссылка
	|ПОМЕСТИТЬ Таб
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка В(&МассивОбъектов)
	|;
	|
	|ВЫБРАТЬ
	|	ТабКеш.НомерСтроки 													КАК НомерСтроки,
	|	ТабКеш.Количество 													КАК Количество,
	|	ТабКеш.КоличествоУпаковок 											КАК КоличествоУпаковок,
	|	ТабКеш.КоличествоФакт 												КАК КоличествоФакт,
	|	ТабКеш.КоличествоУпаковокФакт 										КАК КоличествоУпаковокФакт,
	|	ТабКеш.Номенклатура.НаименованиеПолное 								КАК НоменклатураПредставление,
	|	ТабКеш.Характеристика.НаименованиеПолное 							КАК ХарактеристикаПредставление,
	|	ТабКеш.ЕдиницаИзмеренияПредставлениеНоменклатура 					КАК ЕдиницаИзмеренияПредставлениеНоменклатура,
	|	ТабКеш.ЕдиницаИзмеренияПредставлениеУпаковка 						КАК ЕдиницаИзмеренияПредставлениеУпаковка,
	|	ТабКеш.ЯчейкаПредставление 											КАК ЯчейкаПредставление,
	|	ТабКеш.Номенклатура.Код 											КАК Код,
	|	ТабКеш.Номенклатура.Артикул 										КАК Артикул,
	|	ТабКеш.Ссылка	                                    				КАК Ссылка,
	|	ЕСТЬNULL(РегистрЦеныНоменклатуры.Цена, 0)							КАК Цена
	|ИЗ
	|	Таб КАК ТабКеш
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	|													ВидЦены = &РозничнаяЦена И
	|													(Номенклатура, Характеристика) В
	|													(
	|														ВЫБРАТЬ
	|															Таб.Номенклатура,
	|															Таб.Характеристика
	|														ИЗ
	|															Таб)) КАК РегистрЦеныНоменклатуры
	|ПО
	|	РегистрЦеныНоменклатуры.Номенклатура = ТабКеш.Номенклатура
	|И	РегистрЦеныНоменклатуры.Характеристика = ТабКеш.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабКеш.Ссылка,
	|	ТабКеш.НомерСтроки
	|ИТОГИ ПО
	|	ТабКеш.Ссылка";
	Запрос.УстановитьПараметр("МассивОбъектов", СтруктураТипов.ПересчетТоваров);
	Запрос.УстановитьПараметр("РозничнаяЦена", ВходнаяЦена);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента = НСтр("ru='Завдання на перерахунок товарів'");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ВыводитьГрадацииКачества = МассивОбъектов.ВыводитьГрадацииКачества;
		ВыводитьПоУчету = ВыборкаПоДокументам.ПечататьКоличествоПоУчету;
		ПоАдресномуСкладу = Ложь;
		ПоАдресномуСкладу = СкладыСервер.ИспользоватьАдресноеХранение(ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение);
		Макет = ПолучитьМакет("ПФ_MXL_ЗаданиеПересчетТоваров_UA");
			
		ОбластьЗаголовок 			= Макет.ПолучитьОбласть("Заголовок");
		ОбластьСкладИсполнитель 	= Макет.ПолучитьОбласть("СкладИсполнитель");
		ОбластьЯчейкаИзлишков		= Макет.ПолучитьОбласть("ОбластьЯчейкаИзлишков");
		ОбластьЯчейкаИспорченных	= Макет.ПолучитьОбласть("ОбластьЯчейкаИспорченных");
		
		Если ПоАдресномуСкладу Тогда
			
			Если ВыводитьКоды Тогда
				ОбластьШапкаТаблицыНачало 			= Макет.ПолучитьОбласть("ШапкаТаблицыЯчейкаКодУчет|НачалоСтроки");
				ОбластьСтрокаТаблицыНачало 			= Макет.ПолучитьОбласть("СтрокаТаблицыЯчейкаКодУчет|НачалоСтроки");
				ОбластьПодвалТаблицыНачало 			= Макет.ПолучитьОбласть("ПодвалТаблицыЯчейкаКодУчет|НачалоСтроки");
				ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицыЯчейкаКодУчет|КолонкаКодов");
				ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицыЯчейкаКодУчет|КолонкаКодов");
				ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицыЯчейкаКодУчет|КолонкаКодов");
				ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицыЯчейкаКодУчет|КолонкаТоваровКодЯчейка");
				ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицыЯчейкаКодУчет|КолонкаТоваровКодЯчейка");
				ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицыЯчейкаКодУчет|КолонкаТоваровКодЯчейка");
			Иначе
				ОбластьШапкаТаблицыНачало 			= Макет.ПолучитьОбласть("ШапкаТаблицыЯчейка|НачалоСтроки");
				ОбластьСтрокаТаблицыНачало 			= Макет.ПолучитьОбласть("СтрокаТаблицыЯчейка|НачалоСтроки");
				ОбластьПодвалТаблицыНачало 			= Макет.ПолучитьОбласть("ПодвалТаблицыЯчейка|НачалоСтроки");
				ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицыЯчейка|КолонкаТоваровБезКодовЯчейки");
				ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицыЯчейка|КолонкаТоваровБезКодовЯчейки");
				ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицыЯчейка|КолонкаТоваровБезКодовЯчейки");
			КонецЕсли;
		Иначе 
			ОбластьШапкаТаблицыНачало 			= Макет.ПолучитьОбласть("ШапкаТаблицы|Номер");
			ОбластьСтрокаТаблицыНачало 			= Макет.ПолучитьОбласть("СтрокаТаблицы|Номер");
			ОбластьПодвалТаблицыНачало 			= Макет.ПолучитьОбласть("ПодвалТаблицы|Номер");
			
			Если ВыводитьКоды Тогда
				
				ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицыКодУчет|КолонкаЯчейкаКод");
				ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицыКодУчет|КолонкаЯчейкаКод");
				ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицыКодУчет|КолонкаЯчейкаКод");
				ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицыКодУчет|КолонкаТоваровБезКодовЯчейки");
				ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицыКодУчет|КолонкаТоваровБезКодовЯчейки");
				ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицыКодУчет|КолонкаТоваровБезКодовЯчейки");
			Иначе 
				ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
				ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
				ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
			КонецЕсли; 
		КонецЕсли;
		
				ОбластьШапкаТаблицыУпаковки 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
				ОбластьСтрокаТаблицыУпаковки 	= Макет.ПолучитьОбласть(?(ПоАдресномуСкладу, "СтрокаТаблицыЯчейка|КолонкаУпаковок", "СтрокаТаблицы|КолонкаУпаковок"));
				ОбластьПодвалТаблицыУпаковки 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
				
		Если ВыводитьКоды Тогда
			
			ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
			
		КонецЕсли;	
		
		Если НЕ ВыводитьПоУчету Тогда
			Если ВыводитьГрадацииКачества Тогда
				ОбластьШапкаТаблицыФакт 	= Макет.ПолучитьОбласть("ШапкаТаблицыГрадацииКачества|ГрадацииКачества");
				ОбластьСтрокаТаблицыФакт 	= Макет.ПолучитьОбласть("СтрокаТаблицыГрадацииКачества|ГрадацииКачества");
				ОбластьПодвалТаблицыФакт 	= Макет.ПолучитьОбласть("ПодвалТаблицыГрадацииКачества|ГрадацииКачества");
			Иначе 	
				ОбластьШапкаТаблицыФакт 	= Макет.ПолучитьОбласть("ШапкаТаблицы|ФактБезКоличестваПоУчету");
				ОбластьСтрокаТаблицыФакт 	= Макет.ПолучитьОбласть("СтрокаТаблицы|ФактБезКоличестваПоУчету");
				ОбластьПодвалТаблицыФакт 	= Макет.ПолучитьОбласть("ПодвалТаблицы|ФактБезКоличестваПоУчету");
			КонецЕсли;	
		Иначе
			
			ОбластьШапкаТаблицыПоУчету 		= Макет.ПолучитьОбласть("ШапкаТаблицыКодУчет|КолонкаПоУчету");
			ОбластьСтрокаТаблицыПоУчету 	= Макет.ПолучитьОбласть("СтрокаТаблицыКодУчет|КолонкаПоУчету");
			ОбластьПодвалТаблицыПоУчету 	= Макет.ПолучитьОбласть("ПодвалТаблицыКодУчет|КолонкаПоУчету");
			Если ВыводитьГрадацииКачества Тогда
				ОбластьШапкаТаблицыФакт 	= Макет.ПолучитьОбласть("ШапкаТаблицыГрадацииКачества|ГрадацииКачества");
				ОбластьСтрокаТаблицыФакт 	= Макет.ПолучитьОбласть("СтрокаТаблицыГрадацииКачества|ГрадацииКачества");
				ОбластьПодвалТаблицыФакт 	= Макет.ПолучитьОбласть("ПодвалТаблицыГрадацииКачества|ГрадацииКачества");
			Иначе 
				ОбластьШапкаТаблицыФакт 	= Макет.ПолучитьОбласть("ШапкаТаблицыКодУчет|КолонкаФакт");
				ОбластьСтрокаТаблицыФакт 	= Макет.ПолучитьОбласть("СтрокаТаблицыКодУчет|КолонкаФакт");
				ОбластьПодвалТаблицыФакт 	= Макет.ПолучитьОбласть("ПодвалТаблицыКодУчет|КолонкаФакт");
			КонецЕсли;	
		КонецЕсли;	
		
		
		ОбластьШапкаТаблицыЦена = Макет.ПолучитьОбласть("ШапкаТаблицы|Цена");
		ОбластьСтрокаТаблицы	= Макет.ПолучитьОбласть("СтрокаТаблицы|Цена");
		ОбластьПодвалТаблицы	= Макет.ПолучитьОбласть("ПодвалТаблицы|Цена");
		
			
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
			
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		Заголовок = СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = Заголовок;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьСкладИсполнитель.Параметры.ИсполнительПредставление	= ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель);
		ОбластьСкладИсполнитель.Параметры.СкладПредставление		= ПолучитьПредставлениеСклада(ВыборкаПоДокументам.СкладПредставление,ВыборкаПоДокументам.ПомещениеПредставление);
		
		ТабличныйДокумент.Вывести(ОбластьСкладИсполнитель);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ЯчейкаИзлишков) Тогда
			ЗаполнитьЗначенияСвойств(ОбластьЯчейкаИзлишков.Параметры, ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьЯчейкаИзлишков);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ЯчейкаИспорченных) Тогда
			ЗаполнитьЗначенияСвойств(ОбластьЯчейкаИспорченных.Параметры, ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьЯчейкаИспорченных);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыУпаковки);
		
		Если ВыводитьПоУчету Тогда
			ТабличныйДокумент.ПолеСправа = 5;
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыПоУчету);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыФакт);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыЦена);
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Код = ВыборкаПоСтрокамТЧ[КолонкаКодов];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Товар", НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление));
			СтруктураЗаполнения.Вставить("Артикул", ВыборкаПоСтрокамТЧ.Артикул);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(СтруктураЗаполнения);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыУпаковки.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыУпаковки);	
			
			Если ВыводитьПоУчету Тогда
				ОбластьСтрокаТаблицыПоУчету.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыПоУчету);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыФакт.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыФакт);
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицы);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыУпаковки);
		Если ВыводитьПоУчету Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыПоУчету);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыФакт);
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицы);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СформироватьПечатнуюФормуГарантийногоСоглашения(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если ПараметрыПечати = "notebooker" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГАРАНТИЙНОЕ_СОГЛАШЕНИЕ_НОУБУКЕР";
	Иначе
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГАРАНТИЙНОЕ_СОГЛАШЕНИЕ";
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Док = СтруктураОбъектов.Значение[0];
		ДокументИмя = СтруктураОбъектов.Значение[0].Метаданные().Имя;
		Если ктсДокументОрденаяСхема(Док) Тогда
			Если ДокументИмя = "ПоступлениеТоваровУслуг" Тогда
				Если ктсПоискОрдера(Док) = Неопределено Тогда
					Сообщить("Этот документ используется ордерную схему, а приходной ордер еще не сформирован!");
					Возврат ТабличныйДокумент;
				Иначе
					ТекстЗапроса = ктсТекстЗапросаПоступлениеРеализацияТоваров("Поступление");
				КонецЕсли;	
			ИначеЕсли ДокументИмя = "РеализацияТоваровУслуг" Тогда
				Если ктсПоискОрдера(Док) = Неопределено Тогда
					Сообщить("Этот документ используется ордерную схему, а расходной ордер еще не сформирован!");
					Возврат ТабличныйДокумент;
				Иначе
					ТекстЗапроса = ктсТекстЗапросаПоступлениеРеализацияТоваров("Реализация");
				КонецЕсли;	
			ИначеЕсли ДокументИмя = "ПриходныйОрдерНаТовары" Тогда 
				ТекстЗапроса = ктсТекстЗапросаОрдера("Приходный");
			ИначеЕсли ДокументИмя = "РасходныйОрдерНаТовары" Тогда 
				ТекстЗапроса = ктсТекстЗапросаОрдера("Расходный");
			КонецЕсли;
		Иначе
			ТекстЗапроса = ктсТекстЗапросаОсновной();
		КонецЕсли;
		
		ктсСформироватьТабличныйДокументГарантийногоСоглашения(ТабличныйДокумент, ТекстЗапроса, СтруктураОбъектов.Значение, ПараметрыПечати, ОбъектыПечати, Док.Ссылка);
		
		ТабличныйДокумент.КлючПараметровПечати = "ktcКлючПараметровПечатиГарантийноеСоглашение";
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	    
КонецФункции // СформироватьПечатнуюФорму(

Функция СформироватьПечатнуюФормуТоварныйЧек(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОВАРНЫЙ_ЧЕК";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыТоварныйЧек(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументТоварныйЧек(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати.БанковскийСчет);
	КонецЦикла;
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция СформироватьПечатнуюФормуВидатковаНакладна(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВИДАТКОВА_НАКЛАДНА";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыВидатковаНакладна(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументВидатковаНакладна(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати.БанковскийСчет);
	КонецЦикла;
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция СформироватьПечатнуюФормуНакладна(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НАКЛАДНА";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыНакладна(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументНакладна(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати.БанковскийСчет);
	КонецЦикла;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуНакладная()

Функция СформироватьПечатнуюФормуОприходованиеТоваров(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ВерсияКонфигурации)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОПРИХОДОВАНИЕ_ТОВАРОВ";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыОприходованиеТоваров(ПараметрыПечати, СтруктураОбъектов.Значение, ВерсияКонфигурации);
		ЗаполнитьТабличныйДокументОприходованиеТоваров(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуНакладная()

Функция СформироватьПечатнуюФормуСписаниеТоваров(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ВерсияКофигурации)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СПИСАНИЕ_ТОВАРОВ";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыСписаниеТоваров(ПараметрыПечати, СтруктураОбъектов.Значение, ВерсияКофигурации);
		ЗаполнитьТабличныйДокументСписаниеТоваров(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуНакладная()

Функция СформироватьПечатнуюФормуТоварныйЧек_ЧП(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОВАРНЫЙ_ЧЕК_ЧП";
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("ПринтерПоУмолчанию") Тогда
			ТабличныйДокумент.ИмяПринтера = ПараметрыПечати.ПринтерПоУмолчанию;	
		КонецЕсли;
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		РезультатЗапроса = ПолучитьДанныеДляПечатнойФормыТоварныйЧек_ЧП(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументТоварныйЧек_ЧП(ТабличныйДокумент, РезультатЗапроса, СтруктураТипов);
	
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция СформироватьПечатнуюФормуСчетаНаОплатуРенесанс(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРМЕТРЫ_ПЕЧАТИ_СЧЕТ_НА_ОПЛАТУ_РЕНЕСАНС";
	
	Если СтруктураТипов.Свойство("СчетНаОплатуКлиенту") И ТипЗнч(ПараметрыПечати.МассивСкидок) = Тип("Массив") Тогда
		СформироватьПечатнуюФормуРенесанс(СтруктураТипов.СчетНаОплатуКлиенту, ПараметрыПечати.МассивСкидок, ТабличныйДокумент, ОбъектыПечати);
	КонецЕсли;
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СформироватьПечатнуюФормуРенесанс(МассивДокументов, МассивСкидок, ТабличныйДокумент, ОбъектыПечати)
		
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуКлиенту.Ссылка                                           	КАК Ссылка,
		|	СчетНаОплатуКлиенту.Номер                                            	КАК Номер,
		|	СчетНаОплатуКлиенту.Дата                                             	КАК Дата,
		|	СчетНаОплатуКлиенту.Организация                                      	КАК Организация,
		|	ЕСТЬNULL(ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование, """") КАК Руководитель,
		|	ЕСТЬNULL(ОтветственныеЛицаБухгалтер.ФизическоеЛицо.Наименование, """") 	КАК ГлавныйБухгалтер,
		|	СчетНаОплатуКлиенту.Организация.Префикс                              	КАК Префикс,
		|	СчетНаОплатуКлиенту.ДокументОснование.Контрагент                     	КАК Контрагент,
		|	СчетНаОплатуКлиенту.БанковскийСчет                                   	КАК БанковскийСчет,
		|	СчетНаОплатуКлиенту.БанковскийСчет.ТекстКорреспондента               	КАК БанковскийСчетТекстКорреспондента,
		|	СчетНаОплатуКлиенту.ДокументОснование.ЦенаВключаетНДС                	КАК ЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА
		|			СчетНаОплатуКлиенту.ДокументОснование.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                                    КАК УчитыватьНДС,
		|	СчетНаОплатуКлиенту.Валюта                               КАК Валюта,
		|	СчетНаОплатуКлиенту.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
		|	СчетНаОплатуКлиенту.ДополнительнаяИнформация             КАК ДополнительнаяИнформация,
		|	СчетНаОплатуКлиенту.ЧастичнаяОплата                      КАК ЧастичнаяОплата,
		|	СчетНаОплатуКлиенту.НазначениеПлатежа                    КАК НазначениеПлатежа,
		|	СчетНаОплатуКлиенту.ДокументОснование                    КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА
		|			СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента = 0
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			СчетНаОплатуКлиенту.СуммаДокумента * 100 / СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента
		|	КОНЕЦ  КАК ПроцентОплаты,
		|	СчетНаОплатуКлиенту.СуммаДокумента                       КАК СуммаДокумента,
		|	СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты.(
		|		НомерСтроки                                          КАК НомерСтроки,
		|		ДатаПлатежа                                          КАК ДатаПлатежа,
		|		ПроцентПлатежа                                       КАК ПроцентПлатежа,
		|		СуммаПлатежа                                         КАК СуммаПлатежа
		|	) КАК ЭтапыГрафикаОплаты
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаРуководитель
		|		ПО ОтветственныеЛицаРуководитель.Владелец = СчетНаОплатуКлиенту.Организация
		|			И ОтветственныеЛицаРуководитель.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|			И ОтветственныеЛицаРуководитель.ДатаНачала >= СчетНаОплатуКлиенту.Дата
		|			И ОтветственныеЛицаРуководитель.ДатаОкончания <= СчетНаОплатуКлиенту.Дата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаБухгалтер
		|		ПО ОтветственныеЛицаБухгалтер.Владелец = СчетНаОплатуКлиенту.Организация
		|			И ОтветственныеЛицаБухгалтер.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
		|			И ОтветственныеЛицаБухгалтер.ДатаНачала >= СчетНаОплатуКлиенту.Дата
		|			И ОтветственныеЛицаБухгалтер.ДатаОкончания <= СчетНаОплатуКлиенту.Дата
		|ГДЕ
		|	СчетНаОплатуКлиенту.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент 	= Истина;
	ИндексСкидки 	= 0;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Если ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма +
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ЗаказКлиента.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|	И НЕ ДокументОснованиеТовары.Отменено
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
					
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма +
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|	И НЕ ДокументОснованиеТовары.Отменено
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
				
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма +
					|	ДокументОснованиеТовары.СуммаРучнойСкидки +
					|	ДокументОснованиеТовары.СуммаАвтоматическойСкидки       КАК СуммаБезСкидки
					|ИЗ
					|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
				
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	0                                                            КАК НомерСтроки,
					|	ДанныеДокумента.Услуга                                       КАК Номенклатура,
					|	ДанныеДокумента.Услуга.НаименованиеПолное                    КАК НаименованиеПолное,
					|	ДанныеДокумента.Услуга.ЕдиницаИзмерения.Наименование         КАК ЕдиницаИзмерения,
					|	1                                                            КАК Количество,
					|	ДанныеДокумента.СуммаВознаграждения                          КАК Цена,
					|	ДанныеДокумента.СуммаВознаграждения                          КАК Сумма,
					|	ДанныеДокумента.СтавкаНДСВознаграждения                      КАК СтавкаНДС,
					|	ДанныеДокумента.СуммаНДСвознаграждения                       КАК СуммаНДС,
					|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
					|	0                                                            КАК СуммаСкидки,
					|	0                                                            КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ОтчетКомитенту КАК ДанныеДокумента
					|ГДЕ
					|	ДанныеДокумента.Ссылка = &ДокументОснование
					|
					|");
					
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	0                                                       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма                           КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ОтчетКомиссионера.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
					
		ИначеЕсли ТипЗнч(ДанныеПечати.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ДокументОснованиеТовары.НомерСтроки                     КАК НомерСтроки,
					|	ДокументОснованиеТовары.Номенклатура                    КАК Номенклатура,
					|	ДокументОснованиеТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
					|		ВЫБОР
					|			КОГДА ДокументОснованиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					|				ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Номенклатура.ЕдиницаИзмерения)
					|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументОснованиеТовары.Упаковка.ЕдиницаИзмерения)
					|		КОНЕЦ                                               КАК ЕдиницаИзмерения,
					|	ДокументОснованиеТовары.Количество                      КАК Количество,
					|	ДокументОснованиеТовары.Цена                            КАК Цена,
					|	ДокументОснованиеТовары.Сумма                           КАК Сумма,
					|	ДокументОснованиеТовары.СтавкаНДС                       КАК СтавкаНДС,
					|	ДокументОснованиеТовары.СуммаНДС                        КАК СуммаНДС,
					|	ДокументОснованиеТовары.Характеристика                  КАК Характеристика,
					|	0                                                       КАК СуммаСкидки,
					|	ДокументОснованиеТовары.Сумма                           КАК СуммаБезСкидки
					|ИЗ
					|	Документ.ОтчетКомиссионераОСписании.Товары КАК ДокументОснованиеТовары
					|ГДЕ
					|	ДокументОснованиеТовары.Ссылка = &ДокументОснование
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|");
				
		КонецЕсли;
			
		Запрос.УстановитьПараметр("ДокументОснование",ДанныеПечати.ДокументОснование);
		ТаблицаТовары = Запрос.Выполнить().Выгрузить();
		ТаблицаТовары.Сортировать("НомерСтроки");
		
		ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыГрафикаОплаты.Выгрузить();
		ТаблицаЭтапыОплаты.Сортировать("НомерСтроки");
		
		Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
			ДатаПлатежа = '00010101';
		ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		Иначе
			ТаблицаЭтапыОплаты.Сортировать("ДатаПлатежа Убыв");
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = ПолучитьМакет("ПФ_MXL_СчетЗаказ_UA_Ренесанс");
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		//Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
		//	
			//НадписьСрокДействия = "Рахунок дійсний до %СрокДействия%. ";
			//НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%", Формат(ДатаПлатежа, "ДЛФ=D"));
			//ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
		//	
		//КонецЕсли;
		
//		ОбластьМакета.Параметры.ИНН             = СведенияОПоставщике.ИНН;
//		ОбластьМакета.Параметры.КПП             = СведенияОПоставщике.КПП;
		ПредставлениеПоставщикаДляПлатПоручения = "";
			
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Банк       = ДанныеПечати.БанковскийСчет.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ДанныеПечати.БанковскийСчет.НомерСчета;
			
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			//ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			//ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			//ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			//ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ПредставлениеПоставщикаДляПлатПоручения                  = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
			
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
			
		ОбластьМакета.Параметры.НазваниеОрганизации 					= ДанныеПечати.БанковскийСчет.НазваниеОрганизации;//ПредставлениеПоставщикаДляПлатПоручения;
		ОбластьМакета.Параметры.ЕДРПОУОрганизации 						= ДанныеПечати.БанковскийСчет.ЕДРПОУОрганизации;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = "Рахунок на оплату № %НомерДокумента% від %ДатаДокумента% р.";
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ПолучитьНомерНаПечать(ДанныеПечати.Номер, ДанныеПечати.Префикс));
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ТекстПоставщик = "Постачальник:";
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщикаДляПлатПоручения;
		//ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ТекстПокупатель         = "Покупець";
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьШапкаТаблицы.Параметры.Валюта = ДанныеПечати.Валюта.Наименование;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьСтрокаТаблицы.Параметры.НомерСтроки = "1";
		
		СтрокаНоменклатура = "";
		
		Для Каждого СтрокаТовары ИЗ ТаблицаТовары Цикл
			СтрокаНоменклатура = СтрокаНоменклатура + СтрокаТовары.Номенклатура.Наименование + " " + "(" + Строка(СтрокаТовары.Количество) + Строка(СтрокаТовары.ЕдиницаИзмерения) + ")" + ";";
			//СтрокаНоменклатура = СтрокаНоменклатура + СтрокаТовары.Номенклатура.Наименование + ";";
		КонецЦикла;
		
		ОбластьСтрокаТаблицы.Параметры.СписокНоменклатуры = СтрокаНоменклатура;
				
		СуммаТоваров = ТаблицаТовары.Итог("Сумма");
		ОбластьСтрокаТаблицы.Параметры.СуммаБезСкидки 	= СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос;
		ОбластьСтрокаТаблицы.Параметры.Скидка 			= (СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) * МассивСкидок[ИндексСкидки].ПроцентСкидки * 0.01;
		ОбластьСтрокаТаблицы.Параметры.СуммаСоСкидкой 	= (СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) - ((СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) * МассивСкидок[ИндексСкидки].ПроцентСкидки * 0.01);
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		
		ОбластьВсего = Макет.ПолучитьОбласть("Всего");
		ОбластьВсего.Параметры.СуммаБезСкидки 	= СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос;
		ОбластьВсего.Параметры.Скидка 			= (СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) * МассивСкидок[ИндексСкидки].ПроцентСкидки * 0.01;
		ОбластьВсего.Параметры.СуммаСоСкидкой 	= (СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) - ((СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) * МассивСкидок[ИндексСкидки].ПроцентСкидки * 0.01);
		ТабличныйДокумент.Вывести(ОбластьВсего);
		
		
		ОбластьВсегоНаименований = Макет.ПолучитьОбласть("ВсегоНаименований");
		ОбластьВсегоНаименований.Параметры.ВсегоНаименований = "Всього найменувань " + ТаблицаТовары.Количество() + ", на суму " + Формат((СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) - ((СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) * МассивСкидок[ИндексСкидки].ПроцентСкидки * 0.01), "ЧДЦ=2; ЧРД=.; ЧРГ=' '") + " " + ДанныеПечати.Валюта.Наименование;
		ТабличныйДокумент.Вывести(ОбластьВсегоНаименований);
		
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = СформироватьСуммуПрописью((СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) - ((СуммаТоваров - МассивСкидок[ИндексСкидки].ПервыйВзнос) * МассивСкидок[ИндексСкидки].ПроцентСкидки * 0.01), ДанныеПечати.Валюта);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
		ИндексСкидки = ИндексСкидки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКоммерческогоПредложения(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	РезультатЗапроса = ПолучитьДанныеДляПечатиКоммерческогоПредложения(МассивОбъектов.МассивДокументов);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьТабличныйДокументПоДаннымОбъектаКоммерческогоПредложения(ТабличныйДокумент, ПолучитьДанныеОбъектаПоВыборкеКоммерческогоПредложения(Выборка), ОбъектыПечати);
	КонецЦикла;
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЗаявкиНаСборку(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗАЯВКА_НА_СБОРКУ";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Для Каждого Документ ИЗ СтруктураОбъектов.Значение Цикл
			ЗаполнитьТабличныйДокументЗаявкиНаСборку(ТабличныйДокумент, Документ, ПараметрыПечати.Параметры, ОбъектыПечати);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуРасходногоОрдераНаТовары(СтруктураТипов, СписокОбъектовНаПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерНаТовары_РасходныйОрдерНаТовары";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.ЗонаОтгрузки) КАК ПредставлениеЗоныОтгрузки,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Распоряжение.Партнер) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Распоряжение.Организация.Префикс) КАК РаспоряжениеПрефикс,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	РасходныйОрдерНаТовары.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	РасходныйОрдерНаТовары.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТовары.Распоряжение.Организация) КАК ПредставлениеОрганизации,
	|	РасходныйОрдерНаТовары.Дата,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки,
	|	РасходныйОрдерНаТовары.Номер,
	|	РасходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	РасходныйОрдерНаТовары.Склад КАК Склад,
	|	РасходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РасходныйОрдерНаТовары.Распоряжение.СкладПолучатель) КАК РаспоряжениеСкладПолучатель
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки,
	|	РасходныйОрдерНаТоварыТовары.Номенклатура.Код КАК Код,
	|	РасходныйОрдерНаТоварыТовары.Номенклатура.Артикул КАК Артикул,
	|	РасходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	РасходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ВЫБОР
	|		КОГДА НЕ РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Наименование = ""упак""
	|			ТОГДА РасходныйОрдерНаТоварыТовары.КоличествоУпаковок
	|		ИНАЧЕ РасходныйОрдерНаТоварыТовары.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				И НЕ РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Наименование = ""упак""
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	ВЫБОР
	|		КОГДА НЕ РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Наименование = ""упак""
	|			ТОГДА РасходныйОрдерНаТоварыТовары.Количество
	|		ИНАЧЕ РасходныйОрдерНаТоварыТовары.КоличествоУпаковок
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				И РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Наименование = ""упак""
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеБазовойЕдиницыИзмерения
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|ГДЕ
	|	РасходныйОрдерНаТоварыТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов.МассивДокументов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru='Видатковий ордер на товари'");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение);
		
		ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;
		
		//Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе
		Макет = ПолучитьМакет("ПФ_MXL_РасходныйОрдерНаТовары_UA");
		
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
		ОбластьПокупатель	 	= Макет.ПолучитьОбласть("Покупатель");
		ОбластьШапкаРаспоряжениеСкладПолучатель	 	= Макет.ПолучитьОбласть("ШапкаРаспоряжениеСкладПолучатель");

			
		ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
		ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
		ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
		
		ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		
		ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
		
		ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");

		ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
		
		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ВыводитьУпаковки Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
			+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		КонецЕсли;
		
		ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
		ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
		ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
		ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
		ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
		ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru='Зона відвантаження:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныОтгрузки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьПоставщик, ВыборкаПоДокументам.Ссылка);
		
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			//если не перемещение или оприходование
			ОбластьПокупатель.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПокупатель);
		КонецЕсли;
		
		ОбластьШапка.Параметры.ПредставлениеСклада			= ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,ВыборкаПоДокументам.ПредставлениеПомещения);
        ОбластьШапка.Параметры.ТекстЗоны 					= ТекстЗоны;
		ОбластьШапка.Параметры.ПредставлениеЗоныОтгрузки	= ЗонаПредставление;
		
		//ОбластьШапка.Параметры.РаспоряжениеСкладПолучатель  =  ВыборкаПоДокументам.РаспоряжениеСкладПолучатель;
		
		
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеСкладПолучатель) Тогда
			//если не перемещение или оприходование
			ОбластьШапкаРаспоряжениеСкладПолучатель.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьШапкаРаспоряжениеСкладПолучатель);
		КонецЕсли;
			
			
		
		РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
		РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
		РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
		РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
		
		ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= СформироватьЗаголовокДокумента(РеквизитыДокумента);
		ОбластьШапка.Параметры.ДатаОтгрузки					= ВыборкаПоДокументам.ДатаОтгрузки;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);

		ВсегоНаименований = 0;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Код = ВыборкаПоСтрокамТЧ.Код;
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Артикул =  ВыборкаПоСтрокамТЧ.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всього найменувань %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		ОбластьПодписей.Параметры.ПредставлениеОтветсвенного = ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, СписокОбъектовНаПечати, ВыборкаПоДокументам.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
КонецФункции

Функция СформироватьПечатнуюФормуЗаказВидатковаНакладна(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗАКАЗ_ВИДАТКОВА_НАКЛАДНА";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыЗаказВидатковаНакладна(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументЗаказВидатковаНакладна(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати.БанковскийСчет);
	КонецЦикла;
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция СформироватьПечатнуюФормуШтрихкодаПриходногоОрдера(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
			
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПРИХОДНЫЙ_ОРДЕР_ПЕЧАТЬ_ШТРИХКОДА";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.МасштабПечати			  = 95;
		
	Макет = ПолучитьМакет("ПФ_MXL_ПриходныйОрдерНаТовары_МакетШтрихкода");
		
	НомерТипаДокумента = 0;	
	Для Каждого Документ Из СтруктураТипов.ПриходныйОрдерНаТовары Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ Штрихкод ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", ПараметрыПечати.Номенклатура);
		ВыборкаШтрихкод = Запрос.Выполнить().Выбрать();
		Если ВыборкаШтрихкод.Следующий() Тогда
			ЗначениеШтрихкода = ВыборкаШтрихкод.Штрихкод;
		Иначе
			Продолжить;
		КонецЕсли;
				
		ОбластьКодТовара 	 		   = Макет.ПолучитьОбласть("КодТовара");
		ОбластьКодТовара.Параметры.Код = Формат(Число(ПараметрыПечати.Номенклатура.Код), "ЧГ=0");
			
		ОбластьШтрихкода 	= Макет.ПолучитьОбласть("ОбластьШтрихкода");
		//ВнешняяКомпонента 	= Обработки.ПечатьЭтикетокИЦенников.ПодключитьВнешнююКомпонентуПечатиШтрихкода();	
		Эталон 				= Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
		КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

		Рисунок = ОбластьШтрихкода.Рисунки[0];
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",         4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    10);
		Рисунок.Картинка = МенеджерОборудованияСервер.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		//Рисунок.Картинка.Записать("D:\1.png");
			
		Для НомерШтрихкода = 1 ПО ПараметрыПечати.Количество Цикл
        	Если НомерШтрихкода > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКодТовара);
			ТабличныйДокумент.Вывести(ОбластьШтрихкода);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	//ТабличныйДокумент.ПолеСправа = 2;
	//ТабличныйДокумент.ПолеСлева = 2;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭтикеткиРасходногоОрдера(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
			
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РАСХОДНЫЙ_ОРДЕР_ПЕЧАТЬ_ЭТИКЕТКИ";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
		
	Макет = ПолучитьМакет("ПФ_MXL_РасходныйОрдерНаТовары_МакетЭтикетки");
	
	НомерТипаДокумента = 0;
	
	Для Каждого Документ Из СтруктураТипов.РасходныйОрдерНаТовары Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		Для НомерЭтикетки = 1 ПО ?(ПараметрыПечати.КоличествоЭтикеток=0, 1, ПараметрыПечати.КоличествоЭтикеток) Цикл
		
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ТелоЭтикетки");
				
			Если НомерЭтикетки > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьЭтикетки.Параметры.Дата 				= Документ.Дата;
			ОбластьЭтикетки.Параметры.НомерМеста		= НомерЭтикетки;
			ОбластьЭтикетки.Параметры.КоличествоМест	= ?(ПараметрыПечати.КоличествоЭтикеток=0, 1, ПараметрыПечати.КоличествоЭтикеток);
			ОбластьЭтикетки.Параметры.Номер 			= Формат(Число(СтрЗаменить(Документ.Номер, "-", "0")), "ЧГ=0");
			ОбластьЭтикетки.Параметры.Ответственный   	= Документ.Ответственный;
			Если ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")  Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СкладыКонтактнаяИнформация.Представление
						|ИЗ
						|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
						|ГДЕ
						|	СкладыКонтактнаяИнформация.Тип = &Тип
						|	И СкладыКонтактнаяИнформация.Ссылка = &Ссылка";

					Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			        Запрос.УстановитьПараметр("Ссылка", Документ.Распоряжение.СкладПолучатель);
			        Результат = Запрос.Выполнить();

					ВыборкаДетальныеЗаписи = Результат.Выбрать();
			        					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ОбластьЭтикетки.Параметры.АдресДостаки = ВыборкаДетальныеЗаписи.Представление;
						
					КонецЦикла;
            			
			Иначе
					ОбластьЭтикетки.Параметры.АдресДостаки		= Документ.Распоряжение.АдресДоставки;
			КонецЕсли;
			
			Если 		ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 	Тогда ОбластьЭтикетки.Параметры.Партнер = Документ.Распоряжение.Партнер;
			ИначеЕсли 	ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")		Тогда ОбластьЭтикетки.Параметры.Партнер	= Документ.Распоряжение.СкладПолучатель;
			ИначеЕсли 	ТипЗнч(Документ.Распоряжение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")	Тогда ОбластьЭтикетки.Параметры.Партнер	= Документ.Распоряжение.Партнер;
			Иначе		ОбластьЭтикетки.Параметры.Партнер	= "Не определен"; КонецЕсли;
			//Попытка
			//	ОбластьЭтикетки.Параметры.Партнер		= Документ.Распоряжение.Партнер;
			//Исключение
			//	Попытка
			//		ОбластьЭтикетки.Параметры.Партнер	= Документ.Распоряжение.СкладПолучатель;
			//	Исключение
			//		ОбластьЭтикетки.Параметры.Партнер	= "Не определен";
			//	КонецПопытки;
			//КонецПопытки;
			
			ТабличныйДокумент.Вывести(ОбластьЭтикетки);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуQRЭтикетки(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
			
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МЕСТА_ДОСТАВКИ_ПЕЧАТЬ_QR_ЭТИКЕТКИ";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
		
	
	
	НомерТипаДокумента = 0;
	Для Каждого МестоДоставки Из СтруктураТипов.МестаДоставки Цикл
		
        НомерТипаДокумента = НомерТипаДокумента + 1;
        Если НомерТипаДокумента > 1 Тогда
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;

        ИмяФайла = ПолучитьИмяВременногоФайла("png");
        Ком = Новый COMObject("wScript.Shell");
        Ком.Run("cmd /c start /wait C:\Progra~1\QRCodeGui\qrcodecon.exe -l H -s 5 -o " + ИмяФайла + " """ +  Строка(МестоДоставки.УникальныйИдентификатор()) + """", , Истина);

         Макет = ПолучитьМакет("ПФ_MXL_МестаДоставки_МакетQRЭтикетки");
        ОбластьЭтикетки = Макет.ПолучитьОбласть("ТелоЭтикетки");
        ОбластьЭтикетки.Рисунки.QRCode.Картинка = Новый Картинка(ИмяФайла);

        ОбластьЭтикетки.Параметры.Партнер	   	= МестоДоставки.Владелец;
        ОбластьЭтикетки.Параметры.Ответственный	= МестоДоставки.Ответственный;
        ОбластьЭтикетки.Параметры.АдресДоставки = МестоДоставки.АдресДоставки;
        ОбластьЭтикетки.Параметры.GUID		   	= Формат(Число(МестоДоставки.Код), "ЧГ=0");
		
		Если ЭтоСборка(МестоДоставки.Назначение) Тогда
			ОбластьКартинка	= Макет.ПолучитьОбласть("ОбластьСборка");
            ОбластьЭтикетки.Рисунки.КартинкаДляПечати.Картинка = ОбластьКартинка.Рисунки.Картинка_Сборка.Картинка;
     	ИначеЕсли МестоДоставки.ЭтоЗадача Тогда
            ОбластьКартинка	= Макет.ПолучитьОбласть("ОбластьЗадач");
            ОбластьЭтикетки.Рисунки.КартинкаДляПечати.Картинка = ОбластьКартинка.Рисунки.Картинка_Задача.Картинка;
        Иначе 
            ОбластьКартинка	= Макет.ПолучитьОбласть("ОбластьМесто");
            ОбластьЭтикетки.Рисунки.КартинкаДляПечати.Картинка = ОбластьКартинка.Рисунки.Картинка_Место.Картинка;
		КонецЕсли;
		         
        УдалитьФайлы(ИмяФайла);
        Штрихкод = МестоДоставки.Код;
        ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЭтикетки, Штрихкод);

        ТабличныйДокумент.Вывести(ОбластьЭтикетки);

        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, МестоДоставки);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЭтоСборка(Назначение)
	
	Если Назначение.Пустая() = Истина Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Заказ = Назначение.Заказ; 
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		Запрос 			= Новый Запрос;
		Запрос.Текст	= ПолучитьТекстЗапросаЭтоСборка();
		Запрос.УстановитьПараметр("Ссылка",Заказ);
		Возврат Не Запрос.Выполнить().Пустой();
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаЭтоСборка()
	
	ТекстЗапроса	=
		"ВЫБРАТЬ
		|	Ссылка	КАК ЗаявкаСЦ
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&Ссылка) 
		|ГДЕ
		|	Ссылка ССЫЛКА Документ.ГНАТ_ЗаявкаСервисногоЦентра";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьПечатнуюФормуQRЭтикеткиДляПросмотра(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
			
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МЕСТА_ДОСТАВКИ_ПЕЧАТЬ_QR_ЭТИКЕТКИ";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
		
	
	
	НомерТипаДокумента = 0;
	Для Каждого МестоДоставки Из СтруктураТипов.МестаДоставки Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("png");
		Ком = Новый COMObject("wScript.Shell");
		Ком.Run("cmd /c start /wait C:\Progra~1\QRCodeGui\qrcodecon.exe -l H -s 5 -o " + ИмяФайла + " """ +  Строка(МестоДоставки.УникальныйИдентификатор()) + """", , Истина);
		
 		Макет = ПолучитьМакет("ПФ_MXL_МакетQRЭтикеткиДляПредварительногоПросмотра");
		ОбластьЭтикетки = Макет.ПолучитьОбласть("ТелоЭтикетки");
		ОбластьЭтикетки.Рисунки.QRCode.Картинка = Новый Картинка(ИмяФайла);

		ОбластьЭтикетки.Параметры.Партнер	   	= МестоДоставки.Владелец;
		ОбластьЭтикетки.Параметры.Ответственный	= МестоДоставки.Ответственный;
		ОбластьЭтикетки.Параметры.АдресДоставки = МестоДоставки.АдресДоставки;
		ОбластьЭтикетки.Параметры.GUID		   	= Формат(Число(МестоДоставки.Код), "ЧГ=0");
		
		УдалитьФайлы(ИмяФайла);
		Штрихкод = МестоДоставки.Код;
		ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЭтикетки, Штрихкод);
		
		ТабличныйДокумент.Вывести(ОбластьЭтикетки);
		
		ОбластьПодвал		= Макет.ПолучитьОбласть("ОбластьПодвал");
		ОбластьПодвал.Параметры.НомерЗаявки	   		= МестоДоставки.НомерЗаявки;
		ДанныеОтправителя                           = ПолучитьОтправителяМестаДоставки(МестоДоставки);

		Если ЗначениеЗаполнено(МестоДоставки.КонтактноеЛицо) 
			или МестоДоставки.Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика Тогда
			КонтактноеЛицо 								= МестоДоставки.КонтактноеЛицо;
		Иначе
			КонтактноеЛицо 								= ДанныеОтправителя.Отправитель;
		КонецЕсли;
		
		Если МестоДоставки.Операция = Перечисления.КТС_ОперацииМеста.ВозвратНаСервисЦентрОтПеревозчика   Тогда
			ОбластьПодвал.Параметры.НаименованияОтправителя	= "Перевозчик";
			ОбластьПодвал.Параметры.АдресОтправки 			= ПолучитьАдресПартнера(КонтактноеЛицо);
		Иначе
			ОбластьПодвал.Параметры.НаименованияОтправителя	= "Назва компанії:";
			ОбластьПодвал.Параметры.АдресОтправки 			= ДанныеОтправителя.АдресОтправителя;

		КонецЕсли;
		
		ОбластьПодвал.Параметры.Компания 				= ДанныеОтправителя.Отправитель;
		
		КонтактноеЛицоДанные                        	= ПолучитьДанныеОбКонтактномЛице(КонтактноеЛицо);
		ОбластьПодвал.Параметры.ФИО						= КонтактноеЛицо.Наименование;
		ОбластьПодвал.Параметры.ТелефонКЛ	   			= КонтактноеЛицоДанные.Телефон;
		ОбластьПодвал.Параметры.СоцИнфКЛ				= КонтактноеЛицоДанные.ICQ;
		ОбластьПодвал.Параметры.СоцСкайпКЛ 				= КонтактноеЛицоДанные.Скайп;
		ОбластьПодвал.Параметры.АдресЭП	   				= КонтактноеЛицоДанные.АдресЭП;

		
		
		ОбластьПодвал.Параметры.ТипВозвратаТовара	= МестоДоставки.ТипВозвратаТовара;
		ОбластьПодвал.Параметры.ПричинаВозврата 	= МестоДоставки.ПричинаВозврата;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);	
		
		ОбластьШапкаТабличнаяЧасть					= Макет.ПолучитьОбласть("ОбластьШапкаТабличнаяЧасть");
		ТабличныйДокумент.Вывести(ОбластьШапкаТабличнаяЧасть);	
		
		ОбластьПодвалТабличнаяЧасть						= Макет.ПолучитьОбласть("ОбластьПодвалТабличнаяЧасть");
		Товары											= МестоДоставки.Товары;
		Для каждого Строка Из Товары Цикл
			ЗаполнитьЗначенияСвойств(ОбластьПодвалТабличнаяЧасть.Параметры,Строка);
			ОбластьПодвалТабличнаяЧасть.Параметры.КодНоменклатуры		= Строка.Номенклатура.Код;
			ОбластьПодвалТабличнаяЧасть.Параметры.МодельНоменклатура 	= Строка.Номенклатура.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьПодвалТабличнаяЧасть);
		КонецЦикла;

		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, МестоДоставки);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуРасходныйОрдерНаТовары_ЧП(СтруктураТипов, СписокОбъектовНаПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОВАРНЫЙ_РАСХОДНЫЙ_ОРДЕР_ЧЕК_ЧП";
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("ПринтерПоУмолчанию") Тогда
			ТабличныйДокумент.ИмяПринтера = ПараметрыПечати.ПринтерПоУмолчанию;	
		КонецЕсли;
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		Для Каждого ДокументОрдер ИЗ СтруктураОбъектов.Значение Цикл
		
			НомерТипаДокумента = НомерТипаДокумента + 1;
			Если НомерТипаДокумента > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
					
			Распоряжение = ДокументОрдер.Распоряжение;
			Если ТипЗнч(Распоряжение) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда Продолжить; КонецЕсли; 
			
			МассивРеализаций = Новый Массив;
			МассивРеализаций.Добавить(Распоряжение);
			
			СтрутураРеализации = Новый Структура("РеализацияТоваровУслуг", МассивРеализаций);
			
			РезультатЗапроса = ПолучитьДанныеДляПечатнойФормыТоварныйЧек_ЧП(ПараметрыПечати, МассивРеализаций);
			ЗаполнитьТабличныйДокументТоварныйЧек_ЧП(ТабличныйДокумент, РезультатЗапроса, СтрутураРеализации);
			
		КонецЦикла;
	
	КонецЦикла;	
	
	Возврат ТабличныйДокумент
	
КонецФункции

Функция СформироватьПечатныюФормуАктВыполненныхРаботКТСПомощь(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТ_ВЫПОЛНЕННЫХ_РАБОТ_КТС_ПОМОЩЬ";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеДляПечатиАктВыполненныхРаботКТСПомощь(ПараметрыПечати, СтруктураОбъектов.Значение);
		ЗаполнитьТабличныйДокументАктВыполненныхРаботКТСПомощь(ТабличныйДокумент, ДанныеДляПечати);
	КонецЦикла;
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПечатныюФормуАктВыполненныхРаботКТСПомощь()

Функция СформироватьПечатнуюФормуАктСверкиВзаимныхРасчетов(СтруктураТипов, ОбъектыПечати, МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТ_СВЕРКИ_ВЗАИМОРАСЧЕТОВ";	
	ДанныеДокумента = ПолучитьДанныеДляПечатиАктСверкиВзаимныхРасчетов(СтруктураТипов.СверкаВзаиморасчетов);
	ЗаполнитьТабличныйДокументАктСверкиВзаимныхРасчетов(ТабличныйДокумент, ОбъектыПечати, ДанныеДокумента);
    		
	Возврат ТабличныйДокумент;
 
КонецФункции

Функция СформироватьПечатнуюФормуВидатковаНакладнаУправлениеПоступлением(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВИДАТКОВА_НАКЛАДНА";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НовыйМассив = СтруктураОбъектов.Значение;
			Для Каждого ЭлементПечати из НовыйМассив Цикл 
				ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыВидатковаНакладна(ПараметрыПечати, ЭлементПечати);
				ЗаполнитьТабличныйДокументВидатковаНакладнаУправлениеПоступлением(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати.БанковскийСчет);
			КонецЦикла;
	
	КонецЦикла;
	Возврат ТабличныйДокумент;
		
КонецФункции

Функция СформироватьПечатнуюФормуЭтикетки(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
			
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МЕСТА_ДОСТАВКИ_ПЕЧАТЬ_ЭТИКЕТКИ";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
		
	
	Макет = ПолучитьМакет("ПФ_MXL_МестаДоставки_Этикетка");	
	ОбластьЭтикетки = Макет.ПолучитьОбласть("ТелоЭтикетки");
	
	НомерТипаДокумента = 0;
	
	Результат = ПолучитьДанныеДляПечатнойФормыЭтикеткиПеревозчика(СтруктураТипов.МестаДоставки);
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Телефон = " ";
	Пока Выборка.Следующий() Цикл 
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ОбластьЭтикетки.Параметры.АдресПочты	   		= Выборка.АдресПеревозчика;
		ОбластьЭтикетки.Параметры.ФИООтправителя		= Выборка.Организация;
		ОбластьЭтикетки.Параметры.ТелефонОтправителя	= Выборка.ТелефонОрганизации;
		ОбластьЭтикетки.Параметры.ОбъявленнаяСтоимость 	= Выборка.ОбъявленнаяСтоимость;
		ОбластьЭтикетки.Параметры.ПлатитПолучатель	   	= Выборка.ПлатитПолучатель;
		ОбластьЭтикетки.Параметры.ФИОПолучателя			= Выборка.ФИОПолучателя;
		ОбластьЭтикетки.Параметры.АдресПолучателя		= Выборка.АдресПолучателя;    
		ОбластьЭтикетки.Параметры.ТелефонПолучателя 	= Выборка.ТелефонПолучателя;
		ОбластьЭтикетки.Параметры.ВозвратнаяДоставка	= Выборка.ВозвратнаяДоставка;    
		ОбластьЭтикетки.Параметры.СуммаВД			 	= Выборка.СуммаВД;

 	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьЭтикетки);
		
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, Выборка);

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЗаказПоставщику(СтруктураТипов, МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", СтруктураТипов.ЗаказПоставщику);// МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьНДС,
	|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПоставщику.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	ЗаказПоставщику.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаказПоставщику.ЭтапыГрафикаОплаты.(
	|		ДатаПлатежа КАК ДатаПлатежа
	|	),
	|	ЗаказПоставщику.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		НоменклатураПоставщика.Наименование КАК НаименованиеНоменклатурыПоставщика,
	|		НоменклатураПоставщика.Код КАК КодПоставщика,
	|		НоменклатураПоставщика.Артикул КАК АртикулПоставщика,
	|		Номенклатура КАК Номенклатура,
	|		УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА ЗаказПоставщику.Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Товары.Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Товары.Упаковка)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		КоличествоУпаковок КАК Количество,
	|		Цена КАК Цена,
	|		СуммаРучнойСкидки КАК СуммаСкидки,
	|		ЗаказПоставщику.Товары.Сумма + ЗаказПоставщику.Товары.СуммаРучнойСкидки КАК СуммаБезСкидки,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		ДатаПоступления КАК ДатаПоступления,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаказПоставщику.Товары.Упаковка.Коэффициент, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ЗаказПоставщику.Товары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		Отменено КАК Отменено,
	|		ВЫБОР
	|			КОГДА ЗаказПоставщику.Товары.Ссылка.ВернутьМногооборотнуюТару
	|					И ЗаказПоставщику.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВозвратнаяТара
	|	)
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Макет = ПолучитьМакет("ПФ_MXL_ЗаказПоставщику");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
		
		ТаблицаТовары = ДанныеПечати.Товары.Выгрузить();
		ТаблицаТовары.Сортировать("НомерСтроки");
		
		ВыводитьУсловиеЦены = Ложь;
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.УсловиеЦеныПоставщика) Тогда
				ВыводитьУсловиеЦены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
		ЕстьСкидки 		= ЗаголовокСкидки.ЕстьСкидки;
		КолонкаКодов  	= ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
		ВыводитьКоды  	= ЗначениеЗаполнено(КолонкаКодов);
		
		Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемСоСкидкой");
		ИначеЕсли ЕстьСкидки Или ВыводитьУсловиеЦены Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
		Иначе
			ОбластьКолонкаТовар = Макет.Область("Товар");
		КонецЕсли;
			
		Если Не ВыводитьКоды Тогда
			
			Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
			ИначеЕсли ЕстьСкидки Или ВыводитьУсловиеЦены Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
			Иначе
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|ТоварСУсловиемСоСкидкой");
			ОбластьДанных	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|ДанныеСУсловиемСоСкидкой");
			
		ИначеЕсли ЕстьСкидки Тогда
		
			ОбластьНомера 	= Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
			
		ИначеЕсли ВыводитьУсловиеЦены Тогда
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|ДанныеСУсловиемИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
		КонецЕсли;
		
		// Заполнить реквизиты шапки
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Заказ поставщику'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.Скидка = ЗаголовокСкидки.Скидка;
			ОбластьДанных.Параметры.СуммаБезСкидки = ЗаголовокСкидки.СуммаСкидки;
		КонецЕсли; 
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;

		ТабличныйДокумент.Присоединить(ОбластьАртикула);
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|ТоварСУсловиемСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|ДанныеСУсловиемСоСкидкой");
			
		ИначеЕсли ЕстьСкидки Тогда
		
			ОбластьНомера 	= Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
			
		ИначеЕсли ВыводитьУсловиеЦены Тогда
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|ДанныеСУсловиемИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных 	= Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			Если СтрокаТовары.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				
				ИмяКолонки = КолонкаКодов;
				ОбластьКодов.Параметры.Артикул = СтрокаТовары[ИмяКолонки];
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьАртикула.Параметры.Артикул = СтрокаТовары["Артикул"];
			ТабличныйДокумент.Присоединить(ОбластьАртикула);
			
				ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.НаименованиеПолное,
					СтрокаТовары.Характеристика,
					,
					,
					,
					СтрокаТовары.ЭтоВозвратнаяТара);
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			Если ЗаголовокСкидки.ЕстьСкидки Тогда
				ОбластьДанных.Параметры.СуммаСкидки = ?(ЗаголовокСкидки.ТолькоНаценка,- СтрокаТовары.СуммаСкидки,СтрокаТовары.СуммаСкидки);
			КонецЕсли; 
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Сумма          = Сумма          + СтрокаТовары.Сумма;
			СуммаНДС       = СуммаНДС       + СтрокаТовары.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + СтрокаТовары.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
			КонецЕсли;

		КонецЦикла;

		Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|ТоварСУсловиемСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|ДанныеСУсловиемСоСкидкой");
			
		ИначеЕсли ЕстьСкидки Тогда
		
			ОбластьНомера 	= Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
			
		ИначеЕсли ВыводитьУсловиеЦены Тогда
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|ТоварСУсловиемИлиСоСкидкой");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|ДанныеСУсловиемИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаАртикул");
			ОбластьТовар  	= Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных 	= Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьАртикула);
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ЕстьСкидки Тогда
			
			ОбластьДанных.Параметры.ВсегоСкидок    = ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			
		КонецЕсли;
		
		ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов    = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьАртикула	= Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаАртикул");
			ОбластьТовар    = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьАртикула);
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.НДС = ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
			ОбластьДанных.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЕсли;

		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
			
			ОбластьМакета                                    = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		ОбластьМакета.Параметры.ФИОМенеджер = ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуЗаказНаряд(СтруктураТипов, МассивОбъектов, ОбъектыПечати, ПовнаФорма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ПервыйДокумент 		= Истина;
	
	Макет 				= ПолучитьМакет("ПФ_MXL_ЗаказНаряд");
	ДанныеПечати 		= ПолучитьДанныеДляПечатиФормыЗаказНаряд(СтруктураТипов,ПовнаФорма);
	
	Пока ДанныеПечати.Следующий() Цикл
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаряд_Форма";
		
		//Заголовок
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
        
        Если ПолучитьТипОрганизацииДляПечатиДокументовПоФ5(ДанныеПечати.Склад) Тогда
            ОбластьМакета.Параметры.НаименованиеСервиса = "Сервісний центр";
        Иначе
            ОбластьМакета.Параметры.НаименованиеСервиса = "«КТС» сервісний центр";
        КонецЕсли;
		
		Если ДанныеПечати.ТипРаботы = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Авторизация Тогда
			ОбластьМакета.Параметры.ТипРаботы = "Авторизований ремонт";
		ИначеЕсли ДанныеПечати.ТипРаботы = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ГНАТ Тогда
			ОбластьМакета.Параметры.ТипРаботы = "Гарантійний ремонт";
		ИначеЕсли ДанныеПечати.ТипРаботы = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйБезналичный Тогда
			ОбластьМакета.Параметры.ТипРаботы = "Платний ремонт (безготівковий розрахунок)";
		ИначеЕсли ДанныеПечати.ТипРаботы = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный Тогда
			ОбластьМакета.Параметры.ТипРаботы = "Платний ремонт";
		Иначе 
			ОбластьМакета.Параметры.ТипРаботы = "Прийнято до з'ясування. Ремонт здійснюватись не буде.";
   		КонецЕсли;
		
		
		Попытка
        	НомерДляПечати = Формат(Число(ДанныеПечати.Номер),"ЧВН="); 
		Исключение
			НомерДляПечати = ДанныеПечати.Номер; 
		КонецПопытки;
		ОбластьМакета.Параметры.Номер = НомерДляПечати;
		ПредставлениеЗН = "№"+НомерДляПечати+" від "+Формат(ДанныеПечати.Дата,"Л=uk_UA; ДЛФ=DD");
		ОбластьМакета.Параметры.ПредставлениеЗН = ПредставлениеЗН;
				
		ОписаниеВыполненныхРабот = "";
		Для каждого Элемент Из ДанныеПечати.Ссылка.ХодРабот Цикл
			Если Элемент.ЭтапРаботы.ЭтоРемонт Тогда
            	ОписаниеВыполненныхРабот = ОписаниеВыполненныхРабот+Элемент.Комментарий+?(ПустаяСтрока(Элемент.Комментарий),"",". ");
				ИсполнительРабот		 = Элемент.Ответственный;
   			КонецЕсли;
		КонецЦикла;
		ОбластьМакета.Параметры.ОписаниеВыполненныхРабот = ОписаниеВыполненныхРабот;
		
	    ТабличныйДокумент.Вывести(ОбластьМакета);

		Если ПовнаФорма Тогда 
			//Тело
			ОбластьМакета = Макет.ПолучитьОбласть("ШабкаТаблицыЗапчастей");		
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаТоваров = ПолучитьТаблицуЗапчастей(ДанныеПечати.РТиУ);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыЗапчастей");	
			НомерСтроки = 1;
			СуммаУслуги = 0;
			СуммаТовары = 0;      
			Пока ВыборкаТоваров.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаТоваров);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ОбластьМакета.Параметры.СерияНоменклатуры = СокрЛП(ВыборкаТоваров.СерияНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Если ВыборкаТоваров.Услуга Тогда
					СуммаУслуги = СуммаУслуги + ВыборкаТоваров.Сумма;
				Иначе 
					СуммаТовары = СуммаТовары + ВыборкаТоваров.Сумма;
				КонецЕсли;

				НомерСтроки = НомерСтроки+1;
			КонецЦикла;
			
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");	
			ОбластьМакета.Параметры.СуммаУслуги 	=	СуммаУслуги;
			ОбластьМакета.Параметры.СуммаТовары 	=	СуммаТовары;
			ОбластьМакета.Параметры.ВсегоКОплате 	=	СуммаУслуги + СуммаТовары;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
				
		//Подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.ПредставлениеЗН  = ПредставлениеЗН;
		ОбластьМакета.Параметры.ИсполнительРабот = ИсполнительРабот;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	//ТабличныйДокумент.Защита = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьТаблицуЗапчастей(РТиУ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст	=
		"ВЫБРАТЬ
		|	РТиУ.Номенклатура,
		|	РТиУ.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Количество,
		|	СН.СерийныеНомера КАК СерияНоменклатуры,
		|	РТиУ.Цена,
		|	РТиУ.Сумма,
		|	ВЫБОР
		|		КОГДА РТиУ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Услуга
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РТиУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры КАК СН
		|		ПО РТиУ.Номенклатура = СН.Номенклатура
		|			И РТиУ.Склад = СН.Склад
		|			И РТиУ.Ссылка = СН.Регистратор
		|			И (РТиУ.Ссылка = &Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РТиУ.Номенклатура,
		|	РТиУ.Номенклатура.ЕдиницаИзмерения,
		|	1,
		|	СН.СерийныеНомера,
		|	РТиУ.Цена,
		|	РТиУ.Сумма,
		|	ВЫБОР
		|		КОГДА РТиУ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РТиУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры КАК СН
		|		ПО РТиУ.Номенклатура = СН.Номенклатура
		|			И РТиУ.Склад = СН.Склад
		|			И РТиУ.Ссылка = СН.Регистратор.Распоряжение
		|			И (РТиУ.Ссылка = &Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РТиУ.Номенклатура,
		|	РТиУ.Номенклатура.ЕдиницаИзмерения,
		|	РТиУ.КоличествоУпаковок,
		|	ЗНАЧЕНИЕ(Справочник.СерийныеНомераНоменклатуры.ПустаяСсылка),
		|	РТиУ.Цена,
		|	РТиУ.Сумма,
		|	ВЫБОР
		|		КОГДА РТиУ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РТиУ
		|ГДЕ
		|	РТиУ.Ссылка = &Ссылка
		|	И НЕ РТиУ.Номенклатура.ИспользоватьСерийныеНомера";
	Запрос.УстановитьПараметр("Ссылка",РТиУ.Ссылка);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ПолучитьТаблицуЗапчастей()

Функция СформироватьПечатнуюФормуАктНаЗаменуТовара(СтруктураТипов, МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктНаЗаменуТовара_Форма";  
	
	НомерТипаДокумента = 0;
	
	Для Каждого ДокументОбъект Из СтруктураТипов.ВозвратТоваровОтКлиента Цикл
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ДанныеДляПечати = ПолучитьДанныеАктНаЗаменуТовара(ДокументОбъект);
		ЗаполнитьТабличныйДокументАктНаЗаменутовара(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла; 
	
	//ТабличныйДокумент.Защита = Истина;
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПечатнуюФормуАктНаЗаменуТовара()

Функция СформироватьПечатнуюФормуЗаказНаряд_Квитанции(СтруктураТипов, МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Квитанция_Заказа_Наряда";  
	
	НомерТипаДокумента = 0;
	
	Для Каждого ДокументОбъект Из СтруктураТипов.ГНАТ_ЗаявкаСервисногоЦентра Цикл
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ДанныеДляПечати = ПолучитьДанныеДляПечатиЗаказНаряд_Квитанции(ДокументОбъект);
		ЗаполнитьТабличныйДокументЗаказНаряд_Квитанции(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
	КонецЦикла; 
	//ТабличныйДокумент.Защита = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуЗаказНаряд_Квитанции()

Функция СформироватьПечатнуюФормуТоварныйЧекДляПеремещенияОтгрузкаМест(СтруктураТипов, МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОВАРНЫЙ_ЧЕК_ДЛЯ_ПЕРЕМЕЩЕНИЯ_ОТГРУЗКА_МЕСТ";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	
	Макет 					= ПолучитьМакет("ПФ_MXL_ТоварныйЧек_ЧП");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьВерхнийРазделитель = Макет.ПолучитьОбласть("ВерхнийРазделитель");
	ОбластьНоменклатура		  = Макет.ПолучитьОбласть("Номенклатура");
	ОбластьСерийныйНомер	  = Макет.ПолучитьОбласть("СерийныйНомер");
	
	ОбластьВсего			  = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвал			  = Макет.ПолучитьОбласть("Подвал");
	
	Результат = ПолучитьДанныеДляПечатиТоварныйЧекДляПеремещенияОтгрузкаМест(СтруктураТипов.МестаДоставки[0]);
	
	ВыборкаЗаголовокОрганизация = Результат[4].Выбрать();
	ВыборкаЗаголовокПокупатель  = Результат[6].Выбрать();
	ТаблицаСерийныхНомеров		= Результат[8].Выгрузить();
	ВыборкаНоменклатура			= Результат[11].Выбрать();
	ВыборкаДатаРеализации		= Результат[15].Выбрать();
	ВыборкаНомераДокументов     = Результат[16].Выбрать();
	
#Область ВыводЗаголовкаЧекаДляПеремещения	
	
	Если ВыборкаЗаголовокОрганизация.Следующий() Тогда
		ПолныйАдресСклада = ВыборкаЗаголовокОрганизация.АдресСклада;
		СтрокаМассивАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйАдресСклада, ",");
		Если СтрокаМассивАдрес.Количество() > 0 Тогда
			АдресСклада = СтрокаМассивАдрес[0];
		Иначе
			АдресСклада = ПолныйАдресСклада;
		КонецЕсли;
		ОбластьЗаголовок.Параметры.Организация = "Магазин КТС" + Символы.ПС + АдресСклада;
	КонецЕсли;
	
	Если ВыборкаЗаголовокПокупатель.Следующий() Тогда
		ОбластьЗаголовок.Параметры.Партнер = ВыборкаЗаголовокПокупатель.Покупатель;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
#КонецОбласти

#Область ВыводСпискаНоменклатурыЧекаДляПеремещения

	ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);
	НомерСтроки = 1;
	СуммаВсего	= 0;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		ОбластьНоменклатура.Параметры.Номер = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНоменклатура);
		
		СтруктураПоиска  = Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура);
		РезультатыПоиска = ТаблицаСерийныхНомеров.НайтиСтроки(СтруктураПоиска);
		Для Каждого РезультатПоиска ИЗ РезультатыПоиска Цикл
			ОбластьСерийныйНомер.Параметры.Заполнить(РезультатПоиска);
			ТабличныйДокумент.Вывести(ОбластьСерийныйНомер);
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		СуммаВсего  = СуммаВсего  + ВыборкаНоменклатура.Сумма;
		
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);

#КонецОбласти 

#Область ВыводОбластиВсегоЧекаДляПеремещения

	ОбластьВсего.Параметры.СуммаВсего = СуммаВсего;
	ТабличныйДокумент.Вывести(ОбластьВсего);
	ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);

#КонецОбласти

#Область ВыводОбластиПодвалЧекаДляПеремещения

	Пока ВыборкаДатаРеализации.Следующий() Цикл
		ОбластьПодвал.Параметры.ДатаРеализации = ВыборкаДатаРеализации.ДатаРеализации;	
	КонецЦикла; 
	
	СтрокаНомер = "";
	
	Пока ВыборкаНомераДокументов.Следующий() Цикл
	
		Если ПустаяСтрока(СтрокаНомер) Тогда
			СтрокаНомер = СтрокаНомер + ВыборкаНомераДокументов.Номер;
		Иначе
			СтрокаНомер = СтрокаНомер + Символы.ПС + ВыборкаНомераДокументов.Номер;
		КонецЕсли;
	
	КонецЦикла;
	
	ОбластьПодвал.Параметры.НомерДокумента = СтрокаНомер;
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
#КонецОбласти

	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПечатнуюФормуТоварныйЧекДляПеремещенияОтгрузкаМест()

Функция СформироватьПечатнуюФормуИспользованныеДеталиИУслугиПоЗаказу(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИСПОЛЬЗОВАННЫЕ_ДЕТАЛИ_И_УСЛУГ_ПО_ЗАКАЗУ";
	
	НомерТипаДокумента = 0;
	
	Для Каждого ДокументСсылка Из СтруктураТипов.ЗаказКлиента Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ДанныеДляПечати = ПолучитьПолучитьДанныеДляПечатнойФормыИспользованныеДеталиИУслугиПоЗаказу(ДокументСсылка);
		Если ТипЗнч(ДанныеДляПечати) = Тип("Массив") Тогда   
			ЗаполнитьТабличныйДокументИспользованныеДеталиИУслугиПоЗаказу(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати.БанковскийСчет);
		КонецЕсли;
	КонецЦикла;
	Возврат ТабличныйДокумент;
		
КонецФункции



// ПОЛУЧЕНИЕ ДАННЫХ ДЛЯ ФОРМЫ

Функция ПолучитьДанныеДляПечатиФормыЗаказНаряд(СтруктураТипов, ПовнаФорма)
	
	УстановитьПривилегированныйРежим(Истина);

	УИ = Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85");
	МобильныйТелефон  = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(УИ);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечатиФормыЗаказНаряд();
	
	Если СтруктураТипов.Свойство("РеализацияТоваровУслуг") Тогда
		МассивДокументов = СтруктураТипов.РеализацияТоваровУслуг;
	ИначеЕсли СтруктураТипов.Свойство("ГНАТ_ЗаявкаСервисногоЦентра") Тогда  
		МассивДокументов = СтруктураТипов.ГНАТ_ЗаявкаСервисногоЦентра;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбъектов",  	МассивДокументов);
	Запрос.УстановитьПараметр("МобильныйТелефон",	МобильныйТелефон);
	
	Запрос.УстановитьПараметр("ТипКонтакнойИнформацииАдрес",  	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ТипКонтакнойИнформацииТелефон",	Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запрос.УстановитьПараметр("ВидКонтакнойИнформацииАдресСклада", 	Справочники.ВидыКонтактнойИнформации.АдресСклада);
	Запрос.УстановитьПараметр("ВидКонтакнойИнформацииТелефонСклад",	Справочники.ВидыКонтактнойИнформации.ТелефонСклада);

	СписокОпераций = Новый СписокЗначений;
	
	Если ПовнаФорма Тогда
		СписокОпераций.Добавить(Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный);
		СписокОпераций.Добавить(Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйБезналичный);
 	Иначе
		СписокОпераций.Добавить(Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный);
		СписокОпераций.Добавить(Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйБезналичный);
		СписокОпераций.Добавить(Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ГНАТ);
		СписокОпераций.Добавить(Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Авторизация);		
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокОпераций",		СписокОпераций);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ПолучитьДанныеДляПечатиФормыЗаказНаряд()


Функция ПолучитьДанныеДляПечатнойФормыВидатковаНакладна(ПараметрыПечати, МассивОбъектов)
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПеремещениеТоваров.Ссылка КАК Ссылка,
	                      |	ПеремещениеТоваров.Номер КАК Номер,
	                      |	ПеремещениеТоваров.Дата КАК Дата,
	                      |	ПеремещениеТоваров.СкладПолучатель КАК Партнер,
	                      |	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	                      |	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	                      |	ПеремещениеТоваров.Организация КАК Организация,
	                      |	ПеремещениеТоваров.Организация.Префикс КАК Префикс,
	                      |	ВЫРАЗИТЬ(&ВалютаДоллар КАК Справочник.Валюты) КАК Валюта,
	                      |	ЛОЖЬ КАК ЦенаВключаетНДС,
	                      |	ЛОЖЬ КАК УчитыватьНДС,
	                      |	ПеремещениеТоваров.СкладОтправитель.ТекущийОтветственный.Наименование КАК ОтпускПроизвел,
	                      |	ИСТИНА КАК ДокументПеремещение
	                      |ПОМЕСТИТЬ ТабДокументыПеремещения
	                      |ИЗ
	                      |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                      |ГДЕ
	                      |	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	                      |	СкладыКонтактнаяИнформация.Представление КАК Адрес
	                      |ПОМЕСТИТЬ ТабАдресаСкладов
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	                      |ГДЕ
	                      |	СкладыКонтактнаяИнформация.Тип = &ТипАдресаСклада
	                      |	И СкладыКонтактнаяИнформация.Вид = &ВидАдресаСклада
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТДокументыПеремещения.Ссылка КАК Ссылка,
	                      |	ТДокументыПеремещения.Номер КАК Номер,
	                      |	ТДокументыПеремещения.Дата КАК Дата,
	                      |	ТДокументыПеремещения.Партнер КАК Партнер,
	                      |	ТДокументыПеремещения.Получатель КАК Получатель,
	                      |	ТДокументыПеремещения.Организация КАК Организация,
	                      |	ТДокументыПеремещения.Префикс КАК Префикс,
	                      |	ТДокументыПеремещения.Валюта КАК Валюта,
	                      |	ТДокументыПеремещения.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	                      |	ТДокументыПеремещения.УчитыватьНДС КАК УчитыватьНДС,
	                      |	ТДокументыПеремещения.ОтпускПроизвел КАК ОтпускПроизвел,
	                      |	ТДокументыПеремещения.ДокументПеремещение КАК ДокументПеремещение,
	                      |	ЕСТЬNULL(АдресаСкладов.Адрес, """") КАК Адрес,
	                      |	ЕСТЬNULL(АдресаСкладовОтправителей.Адрес, """") КАК АдресОтправителя,
	                      |	ТДокументыПеремещения.Получатель.Наименование КАК СкладПолучатель,
	                      |	ТДокументыПеремещения.Отправитель.Наименование КАК СкладОтправитель
	                      |ИЗ
	                      |	ТабДокументыПеремещения КАК ТДокументыПеремещения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладов
	                      |		ПО (АдресаСкладов.Склад = ТДокументыПеремещения.Получатель)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладовОтправителей
	                      |		ПО ТДокументыПеремещения.Отправитель = АдресаСкладовОтправителей.Склад
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка");

	Запрос.УстановитьПараметр("МассивДокументов", 	МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаДоллар", 		Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидАдресаПартнера", 	Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	Запрос.УстановитьПараметр("ТипАдресаПартнера",	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдресаСклада", 	Справочники.ВидыКонтактнойИнформации.АдресСклада);
	Запрос.УстановитьПараметр("ТипАдресаСклада", 	Перечисления.ТипыКонтактнойИнформации.Адрес);
	МассивРезультатов = Запрос.Выполнить();//.ВыполнитьПакет();
	
	Возврат МассивРезультатов.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьДанныеДляПечатиЗаказаКлиента(МассивОбъектов)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст = 
		"
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиента.Ссылка.Валюта КАК ВалютаДокумента,
		|	МАКСИМУМ(КурсДокумента.Период) КАК ПериодКурсаДокумента,
		|	МАКСИМУМ(КурсРегУчета.Период) КАК ПериодКурсаРегУчета
		|ПОМЕСТИТЬ ТабПериоды
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсДокумента
		|		ПО
		|			КурсДокумента.Валюта = ЗаказКлиента.Ссылка.Валюта
		|			И КурсДокумента.Период <= ЗаказКлиента.Ссылка.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсРегУчета
		|		ПО
		|			КурсРегУчета.Валюта = &Валюта
		|			И КурсРегУчета.Период <= ЗаказКлиента.Ссылка.Дата
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивОбъектов)
		|СГРУППИРОВАТЬ ПО 	
		|	ЗаказКлиента.Ссылка
		|;
		|
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	КурсДокумента.Курс / КурсДокумента.Кратность КАК КурсДок,
		|	КурсРегУчета.Курс / КурсРегУчета.Кратность КАК КурсРегУч
		|ПОМЕСТИТЬ ТабКурсы
		|ИЗ
		|	ТабПериоды КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсДокумента
		|		ПО
		|			КурсДокумента.Валюта = ЗаказКлиента.ВалютаДокумента
		|			И КурсДокумента.Период = ЗаказКлиента.ПериодКурсаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсРегУчета
		|		ПО
		|			КурсРегУчета.Валюта = &Валюта
		|			И КурсРегУчета.Период = ЗаказКлиента.ПериодКурсаРегУчета
		|;
		|
		|ВЫБРАТЬ 
		|	ЗаказКлиента.Ссылка                                            КАК Ссылка,
		|	ЗаказКлиента.Номер                                             КАК Номер,
		|	ЗаказКлиента.Дата                                              КАК Дата,
		|	ЗаказКлиента.Организация                                       КАК Организация,
		|	ЕСТЬNULL(ОтветственныеЛицаРуководитель.ФизическоеЛицо.Наименование, """")   КАК Руководитель,
		|	ЕСТЬNULL(ОтветственныеЛицаБухгалтер.ФизическоеЛицо.Наименование, """") 	  КАК ГлавныйБухгалтер,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ                                                     КАК УчитыватьНДС,
		|	ЗаказКлиента.Организация.Префикс                          КАК Префикс,
		|	ЗаказКлиента.Контрагент                                   КАК Контрагент,
		|	ЗаказКлиента.БанковскийСчет                               КАК БанковскийСчет,
		|	ЗаказКлиента.БанковскийСчет.ТекстКорреспондента           КАК БанковскийСчетТекстКорреспондента,
		|	ЗаказКлиента.ЦенаВключаетНДС                              КАК ЦенаВключаетНДС,
		|	ВЫРАЗИТЬ(&Валюта КАК Справочник.Валюты)                   КАК Валюта,
		|	ЗаказКлиента.Менеджер.ФизическоеЛицо.Наименование         КАК Менеджер,
		|	ЗаказКлиента.ДополнительнаяИнформация                     КАК ДополнительнаяИнформация,
		|	ЗаказКлиента.ЭтапыГрафикаОплаты.(
		|		НомерСтроки                                           КАК НомерСтроки,
		|		ВариантОплаты                                         КАК ВариантОплаты,
		|		ДатаПлатежа                                           КАК ДатаПлатежа,
		|		ПроцентПлатежа                                        КАК ПроцентПлатежа,
		|		СуммаПлатежа                                          КАК СуммаПлатежа
		|	) КАК ЭтапыГрафикаОплаты,
		|	ЗаказКлиента.Товары.(
		|		НомерСтроки                                           КАК НомерСтроки,
		|		Номенклатура                                          КАК Номенклатура,
		|		Номенклатура.Код                                      КАК Код,
		|		Номенклатура.Артикул                                  КАК Артикул,
		|		Номенклатура.НаименованиеПолное                       КАК НаименованиеПолное,
		|		ВЫБОР
		|			КОГДА ЗаказКлиента.Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Номенклатура.ЕдиницаИзмерения)
		|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Упаковка.ЕдиницаИзмерения)
		|		КОНЕЦ                                                 КАК ЕдиницаИзмерения,
		|		КоличествоУпаковок                                    КАК Количество,
		|		Цена * ТабКурсы.КурсДок / ТабКурсы.КурсРегУч          КАК Цена,
		|		(СуммаРучнойСкидки + СуммаАвтоматическойСкидки) * ТабКурсы.КурсДок / ТабКурсы.КурсРегУч        КАК СуммаСкидки,
		|		(Сумма + СуммаРучнойСкидки + СуммаАвтоматическойСкидки) * ТабКурсы.КурсДок / ТабКурсы.КурсРегУч КАК СуммаБезСкидки,
		|		Сумма * ТабКурсы.КурсДок / ТабКурсы.КурсРегУч КАК Сумма,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС * ТабКурсы.КурсДок / ТабКурсы.КурсРегУч                                             КАК СуммаНДС,
		|		ДатаОтгрузки                                          КАК ДатаОтгрузки,
		|		Характеристика.НаименованиеПолное                     КАК Характеристика,
		|		Отменено                                              КАК Отменено
		|	)
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабКурсы КАК ТабКурсы
		|			ПО ТабКурсы.Ссылка = ЗаказКлиента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаРуководитель
		|		ПО ОтветственныеЛицаРуководитель.Владелец = ЗаказКлиента.Организация
		|			И ОтветственныеЛицаРуководитель.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|			И ОтветственныеЛицаРуководитель.ДатаНачала >= ЗаказКлиента.Дата
		|			И ОтветственныеЛицаРуководитель.ДатаОкончания <= ЗаказКлиента.Дата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаБухгалтер
		|		ПО ОтветственныеЛицаБухгалтер.Владелец = ЗаказКлиента.Организация
		|			И ОтветственныеЛицаБухгалтер.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
		|			И ОтветственныеЛицаБухгалтер.ДатаНачала >= ЗаказКлиента.Дата
		|			И ОтветственныеЛицаБухгалтер.ДатаОкончания <= ЗаказКлиента.Дата
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка, Товары.НомерСтроки, ЭтапыГрафикаОплаты.НомерСтроки";
		
		Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции
	
Функция ПолучитьПолучитьДанныеДляПечатнойФормыТоварныйЧек(ПараметрыПечати, МассивОбъектов)
	
	ИмяДокумента = МассивОбъектов[0].Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("Организация", ПараметрыПечати.БанковскийСчет.Владелец);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокЧек.Номер                     КАК Номер,
	|	ДокЧек.Дата                      КАК Дата,
	|	ДокЧек.Ссылка                    КАК Ссылка, "
	//Изменено
	//|	ДокЧек.КассаККМ                  КАК КассаККМ,
	+?(ИмяДокумента = "ЧекККМ", "ДокЧек.КассаККМ                  КАК КассаККМ,   ", "NULL    КАК КассаККМ, ") +
	"                                  	
	|	&ВалютаРегл                    	 КАК Валюта,
	|	ДокЧек.ЦенаВключаетНДС           КАК ЦенаВключаетНДС, "
	//Изменено
	+?(ИмяДокумента = "ЧекККМ", "ДокЧек.КассаККМ.Представление    КАК Покупатель, ", "ДокЧек.Партнер.Представление    КАК Покупатель, ") +
	"
	//|	ДокЧек.КассаККМ.Представление    КАК Покупатель,
	//|	ДокЧек.Организация               КАК Организация,
	|	&Организация					 КАК Организация,
	|	ДокЧек.Организация.Префикс       КАК Префикс,
	|	ДокЧек.Организация.Представление КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &ВалютаРегл <> ДокЧек.Валюта
	|		ТОГДА ДокЧек.СуммаДокумента / ((КурсРегл.Курс / КурсРегл.Кратность) / (КурсДок.Курс / КурсДок.Кратность))
	|		ИНАЧЕ ДокЧек.СуммаДокумента
	|	КОНЕЦ КАК СуммаДокумента,
	|	ДокЧек.Товары.(
	|		НомерСтроки                     КАК НомерСтроки,
	|		Номенклатура                    КАК Номенклатура,
	|		Номенклатура.Представление      КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код                КАК Код,";
	
	//Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
	//	
	//	Запрос.Текст = Запрос.Текст + "
	//	|	КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,"; 
	//	
	//КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|		Номенклатура.Артикул            КАК Артикул,
	|		Характеристика                  КАК Характеристика,
	|		КоличествоУпаковок              КАК Количество,
	|		ВЫБОР
	|			КОГДА Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Упаковка.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		ВЫБОР КОГДА &ВалютаРегл <> ДокЧек.Валюта ТОГДА Цена / ((КурсРегл.Курс / КурсРегл.Кратность) / (КурсДок.Курс / КурсДок.Кратность)) ИНАЧЕ Цена КОНЕЦ КАК Цена,
	|		ДокЧек.Товары.КоличествоУпаковок 	* 
	|											ВЫБОР 
	|												КОГДА &ВалютаРегл <> ДокЧек.Валюта 
	|												ТОГДА ДокЧек.Товары.Цена / ((КурсРегл.Курс / КурсРегл.Кратность) / (КурсДок.Курс / КурсДок.Кратность)) 
	|												ИНАЧЕ ДокЧек.Товары.Цена 
	|											КОНЕЦ 
	|											- 
	|											ВЫБОР
	|												КОГДА &ВалютаРегл <> ДокЧек.Валюта
	|												ТОГДА ДокЧек.Товары.Сумма / ((КурсРегл.Курс / КурсРегл.Кратность) / (КурсДок.Курс / КурсДок.Кратность))
	|												ИНАЧЕ ДокЧек.Товары.Сумма
	|											КОНЕЦ КАК Скидка,
	|		ВЫБОР
	|			КОГДА &ВалютаРегл <> ДокЧек.Валюта
	|			ТОГДА Сумма / ((КурсРегл.Курс / КурсРегл.Кратность) / (КурсДок.Курс / КурсДок.Кратность))
	|			ИНАЧЕ Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА &ВалютаРегл <> ДокЧек.Валюта
	|			ТОГДА СуммаНДС / ((КурсРегл.Курс / КурсРегл.Кратность) / (КурсДок.Курс / КурсДок.Кратность))
	|			ИНАЧЕ СуммаНДС
	|		КОНЕЦ КАК СуммаНДС
	|	)";
	
	//Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
	//	
	//	Запрос.Текст = Запрос.Текст + ",
	//	|ДокЧек.СерийныеНомера";
	//	
	//КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ДокЧек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаРегл) КАК КурсРегл 
	|ПО ИСТИНА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсДок 
	|ПО КурсДок.Валюта = ДокЧек.Валюта 
	|
	|ГДЕ
	|	ДокЧек.Ссылка В (&МассивДокументов)
	|";
	
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции

Функция ПолучитьПолучитьДанныеДляПечатнойФормыВидатковаНакладна(ПараметрыПечати, МассивОбъектов)
	
	УникальныйИдентификатор= Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85");
	Склад = Справочники.Склады.ПолучитьСсылку(УникальныйИдентификатор); //Склад Соборна

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	                      |	РеализацияТоваровУслуг.Номер КАК Номер,
	                      |	РеализацияТоваровУслуг.Дата КАК Дата,
	                      |	РеализацияТоваровУслуг.Партнер КАК Партнер,
	                      |	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	                      |	РеализацияТоваровУслуг.Организация КАК Организация,
	                      |	РеализацияТоваровУслуг.Организация.Префикс КАК Префикс,
	                      |	РеализацияТоваровУслуг.Валюта КАК Валюта,
	                      |	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	                      |	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	                      |	ВЫБОР
	                      |		КОГДА РеализацияТоваровУслуг.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК УчитыватьНДС,
	                      |	РеализацияТоваровУслуг.Склад.ТекущийОтветственный.Наименование КАК ОтпускПроизвел,
	                      |	ЛОЖЬ КАК ДокументПеремещение
	                      |ПОМЕСТИТЬ ТабДокументыРеализации
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПеремещениеТоваров.Ссылка КАК Ссылка,
	                      |	ПеремещениеТоваров.Номер КАК Номер,
	                      |	ПеремещениеТоваров.Дата КАК Дата,
	                      |	ПеремещениеТоваров.СкладПолучатель КАК Партнер,
	                      |	ПеремещениеТоваров.СкладПолучатель КАК Получатель,
	                      |	ПеремещениеТоваров.СкладОтправитель КАК Отправитель,
	                      |	ПеремещениеТоваров.Организация КАК Организация,
	                      |	ПеремещениеТоваров.Организация.Префикс КАК Префикс,
	                      |	ВЫРАЗИТЬ(&ВалютаДоллар КАК Справочник.Валюты) КАК Валюта,
	                      |	ЛОЖЬ КАК ЦенаВключаетНДС,
	                      |	ЛОЖЬ КАК УчитыватьНДС,
	                      |	ПеремещениеТоваров.СкладОтправитель.ТекущийОтветственный.Наименование КАК ОтпускПроизвел,
	                      |	ИСТИНА КАК ДокументПеремещение
	                      |ПОМЕСТИТЬ ТабДокументыПеремещения
	                      |ИЗ
	                      |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                      |ГДЕ
	                      |	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	                      |	СкладыКонтактнаяИнформация.Представление КАК Адрес
	                      |ПОМЕСТИТЬ ТабАдресаСкладов
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	                      |ГДЕ
	                      |	СкладыКонтактнаяИнформация.Тип = &ТипАдресаСклада
	                      |	И СкладыКонтактнаяИнформация.Вид = &ВидАдресаСклада
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТДокументыРеализации.Ссылка КАК Ссылка,
	                      |	ТДокументыРеализации.Номер КАК Номер,
	                      |	ТДокументыРеализации.Дата КАК Дата,
	                      |	ТДокументыРеализации.Партнер КАК Партнер,
	                      |	ТДокументыРеализации.Получатель КАК Получатель,
	                      |	ТДокументыРеализации.Организация КАК Организация,
	                      |	ТДокументыРеализации.Префикс КАК Префикс,
	                      |	ТДокументыРеализации.Валюта КАК Валюта,
	                      |	ТДокументыРеализации.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	                      |	ТДокументыРеализации.УчитыватьНДС КАК УчитыватьНДС,
	                      |	ТДокументыРеализации.ОтпускПроизвел КАК ОтпускПроизвел,
	                      |	ТДокументыРеализации.ДокументПеремещение КАК ДокументПеремещение,
	                      |	ЕСТЬNULL(АдресаСкладов.Адрес, ТДокументыРеализации.АдресДоставки) КАК Адрес,
	                      |	"""" КАК АдресОтправителя,
	                      |	"""" КАК СкладПолучатель,
	                      |	"""" КАК СкладОтправитель	                     
						  |ИЗ
	                      |	ТабДокументыРеализации КАК ТДокументыРеализации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладов
	                      |		ПО ((ВЫРАЗИТЬ(АдресаСкладов.Склад.Наименование КАК СТРОКА(100))) = (ВЫРАЗИТЬ(ТДокументыРеализации.АдресДоставки КАК СТРОКА(100))))
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ТДокументыПеремещения.Ссылка,
	                      |	ТДокументыПеремещения.Номер,
	                      |	ТДокументыПеремещения.Дата,
	                      |	ТДокументыПеремещения.Партнер,
	                      |	ТДокументыПеремещения.Получатель,
	                      |	ТДокументыПеремещения.Организация,
	                      |	ТДокументыПеремещения.Префикс,
	                      |	ТДокументыПеремещения.Валюта,
	                      |	ТДокументыПеремещения.ЦенаВключаетНДС,
	                      |	ТДокументыПеремещения.УчитыватьНДС,
	                      |	ТДокументыПеремещения.ОтпускПроизвел,
	                      |	ТДокументыПеремещения.ДокументПеремещение,
	                      |	ЕСТЬNULL(АдресаСкладов.Адрес, """"),
	                      |	ЕСТЬNULL(АдресаСкладовОтправителей.Адрес, """"),
	                      |	ТДокументыПеремещения.Получатель.Наименование,
	                      |	ТДокументыПеремещения.Отправитель.Наименование
	                      |ИЗ
	                      |	ТабДокументыПеремещения КАК ТДокументыПеремещения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладов
	                      |		ПО (АдресаСкладов.Склад = ТДокументыПеремещения.Получатель)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладовОтправителей
	                      |		ПО ТДокументыПеремещения.Отправитель = АдресаСкладовОтправителей.Склад
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТабДокументыРеализации
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТабДокументыПеремещения
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТабАдресаСкладов
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВложенныйЗапрос.Ссылка 								КАК Ссылка,
	                      |	ВложенныйЗапрос.Номенклатура 						КАК Номенклатура,
	                      |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное 	КАК ТоварНаименованиеПолное,
	                      |	ВложенныйЗапрос.Номенклатура.Код 					КАК Код,
	                      |	ВложенныйЗапрос.Номенклатура.Артикул 				КАК Артикул,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование 		КАК ЕдиницаЦены,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения 					КАК ЕдиницаИзмерения,
	                      |	ВложенныйЗапрос.Характеристика.НаименованиеПолное 	КАК Характеристика,
	                      |	ВложенныйЗапрос.СтавкаНДС 							КАК СтавкаНДС,
	                      |	ВложенныйЗапрос.Цена 								КАК Цена,
	                      |	ВложенныйЗапрос.Количество 							КАК Количество,
	                      |	ВложенныйЗапрос.Сумма 								КАК Сумма,
	                      |	ВложенныйЗапрос.СуммаСкидки 						КАК СуммаСкидки,
	                      |	ВложенныйЗапрос.СуммаБезСкидки 						КАК СуммаБезСкидки,
	                      |	ВложенныйЗапрос.СуммаНДС 							КАК СуммаНДС,
                          |	ВложенныйЗапрос.НомерСтроки 						КАК НомерСтроки,
                          |	ЛОЖЬ 												КАК ЭтоВозвратнаяТара
	                     // |	ВложенныйЗапрос.НомерСтроки
                          |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		РеализацияТоваровУслуг.Ссылка 					КАК Ссылка,
	                      |		РеализацияТоваровУслуг.Номенклатура 			КАК Номенклатура,
	                      |		ВЫБОР
	                      |			КОГДА РеализацияТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА 1
	                      |			ИНАЧЕ РеализацияТоваровУслуг.Упаковка.Коэффициент
	                      |		КОНЕЦ 											КАК Коэффициент,
	                      |		ВЫБОР
	                      |			КОГДА РеализацияТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения
	                      |			ИНАЧЕ РеализацияТоваровУслуг.Упаковка.ЕдиницаИзмерения
	                      |		КОНЕЦ 											КАК ЕдиницаИзмерения,
	                      |		РеализацияТоваровУслуг.ПроцентРучнойСкидки + РеализацияТоваровУслуг.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	                      |		РеализацияТоваровУслуг.Характеристика 			КАК Характеристика,
	                      |		РеализацияТоваровУслуг.СтавкаНДС 				КАК СтавкаНДС,
	                      |		РеализацияТоваровУслуг.Цена 					КАК Цена,
	                      |		РеализацияТоваровУслуг.КоличествоУпаковок 		КАК Количество,
	                      |		РеализацияТоваровУслуг.Сумма 					КАК Сумма,
	                      |		РеализацияТоваровУслуг.СуммаРучнойСкидки + РеализацияТоваровУслуг.СуммаАвтоматическойСкидки 								КАК СуммаСкидки,
	                      |		РеализацияТоваровУслуг.Сумма + РеализацияТоваровУслуг.СуммаРучнойСкидки + РеализацияТоваровУслуг.СуммаАвтоматическойСкидки 	КАК СуммаБезСкидки,
	                      |		РеализацияТоваровУслуг.СуммаНДС 																							КАК СуммаНДС,
	                      |		РеализацияТоваровУслуг.НомерСтроки 																							КАК НомерСтроки
	                      |	ИЗ
	                      |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	                      |	ГДЕ
	                      |		РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	                      |		И РеализацияТоваровУслуг.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
						  |	) КАК ВложенныйЗапрос
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
						  | " +
						  ?(ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ПеремещениеТоваров") И МассивОбъектов[0].СкладОтправитель=Склад, "					  
                          |
	                      |ВЫБРАТЬ
	                      |	ВложенныйЗапрос.Ссылка,
	                      |	ВложенныйЗапрос.Номенклатура,
	                      |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное,
	                      |	ВложенныйЗапрос.Номенклатура.Код,
	                      |	ВложенныйЗапрос.Номенклатура.Артикул,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения,
	                      |	ВложенныйЗапрос.Характеристика.НаименованиеПолное,
	                      |	ВложенныйЗапрос.СтавкаНДС,
	                      |	ВложенныйЗапрос.Цена,
	                      |	ВложенныйЗапрос.Количество,
	                      |	ВложенныйЗапрос.Сумма,
	                      |	ВложенныйЗапрос.СуммаСкидки,
	                      |	ВложенныйЗапрос.СуммаБезСкидки,
	                      |	ВложенныйЗапрос.СуммаНДС,
	                      |	NULL,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		РасходныйОрдерНаТоварыТовары.Ссылка.Распоряжение КАК Ссылка,
	                      |		РасходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	                      |		ВЫБОР
	                      |			КОГДА РасходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА 1
	                      |			ИНАЧЕ РасходныйОрдерНаТоварыТовары.Упаковка.Коэффициент
	                      |		КОНЕЦ КАК Коэффициент,
	                      |		ВЫБОР
	                      |			КОГДА РасходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения
	                      |			ИНАЧЕ РасходныйОрдерНаТоварыТовары.Упаковка.ЕдиницаИзмерения
	                      |		КОНЕЦ КАК ЕдиницаИзмерения,
	                      |		0 КАК ПроцентСкидки,
	                      |		РасходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	                      |		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	                      |		0 КАК Цена,
	                      |		СУММА(РасходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК Количество,
	                      |		0 КАК Сумма,
	                      |		0 КАК СуммаСкидки,
	                      |		0 КАК СуммаБезСкидки,
	                      |		0 КАК СуммаНДС
	                      |	ИЗ
	                      |		Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	                      |	ГДЕ
	                      |		РасходныйОрдерНаТоварыТовары.Ссылка.Распоряжение В(&МассивДокументов)
	                      |		И РасходныйОрдерНаТоварыТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	                      |		И РасходныйОрдерНаТоварыТовары.НеОтгружать = 0
	                      |		И ВЫБОР
	                      |				КОГДА РасходныйОрдерНаТоварыТовары.Ссылка.Склад.ИспользоватьСтатусыРасходныхОрдеров = ИСТИНА
	                      |					ТОГДА РасходныйОрдерНаТоварыТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	                      |				ИНАЧЕ ИСТИНА
	                      |			КОНЕЦ
	                      |	
	                      |	СГРУППИРОВАТЬ ПО
	                      |		РасходныйОрдерНаТоварыТовары.Номенклатура,
	                      |		РасходныйОрдерНаТоварыТовары.Ссылка.Распоряжение,
	                      |		РасходныйОрдерНаТоварыТовары.Характеристика,
	                      |		ВЫБОР
	                      |			КОГДА РасходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА 1
	                      |			ИНАЧЕ РасходныйОрдерНаТоварыТовары.Упаковка.Коэффициент
	                      |		КОНЕЦ,
	                      |		ВЫБОР
	                      |			КОГДА РасходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА РасходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения
	                      |			ИНАЧЕ РасходныйОрдерНаТоварыТовары.Упаковка.ЕдиницаИзмерения
	                      |		КОНЕЦ) КАК ВложенныйЗапрос
	                      |  ",
						  "ВЫБРАТЬ
	                      |	ВложенныйЗапрос.Ссылка,
	                      |	ВложенныйЗапрос.Номенклатура,
	                      |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное,
	                      |	ВложенныйЗапрос.Номенклатура.Код,
	                      |	ВложенныйЗапрос.Номенклатура.Артикул,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование,
	                      |	ВложенныйЗапрос.ЕдиницаИзмерения,
	                      |	ВложенныйЗапрос.Характеристика.НаименованиеПолное,
	                      |	ВложенныйЗапрос.СтавкаНДС,
	                      |	ВложенныйЗапрос.Цена,
	                      |	ВложенныйЗапрос.Количество,
	                      |	ВложенныйЗапрос.Сумма,
	                      |	ВложенныйЗапрос.СуммаСкидки,
	                      |	ВложенныйЗапрос.СуммаБезСкидки,
	                      |	ВложенныйЗапрос.СуммаНДС,
                          |	ВложенныйЗапрос.НомерСтроки,
	                      |	ЛОЖЬ
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ПеремещениеТоваров.Ссылка КАК Ссылка,
	                      |		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	                      |		ВЫБОР
	                      |			КОГДА ПеремещениеТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА 1
	                      |			ИНАЧЕ ПеремещениеТоваров.Упаковка.Коэффициент
	                      |		КОНЕЦ КАК Коэффициент,
	                      |		ВЫБОР
	                      |			КОГДА ПеремещениеТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	                      |				ТОГДА ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения
	                      |			ИНАЧЕ ПеремещениеТоваров.Упаковка.ЕдиницаИзмерения
	                      |		КОНЕЦ КАК ЕдиницаИзмерения,
	                      |		0 КАК ПроцентСкидки,
	                      |		ПеремещениеТоваров.Характеристика КАК Характеристика,
	                      |		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	                      |		0 КАК Цена,
	                      |		ПеремещениеТоваров.КоличествоУпаковок КАК Количество,
	                      |		0 КАК Сумма,
	                      |		0 КАК СуммаСкидки,
	                      |		0 КАК СуммаБезСкидки,
	                      |		0 КАК СуммаНДС,
	                      |		ПеремещениеТоваров.НомерСтроки КАК НомерСтроки
	                      |	ИЗ
	                      |		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	                      |	ГДЕ
	                      |		ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	                      |		И ПеремещениеТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос")+
	                      "  
						  |  УПОРЯДОЧИТЬ ПО
	                      |	ВложенныйЗапрос.Ссылка
	                      |ИТОГИ
	                      |	СУММА(СуммаСкидки)
	                      |ПО
	                      |	Ссылка");

	Запрос.УстановитьПараметр("МассивДокументов", 	МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаДоллар", 		Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидАдресаПартнера", 	Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	Запрос.УстановитьПараметр("ТипАдресаПартнера",	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдресаСклада", 	Справочники.ВидыКонтактнойИнформации.АдресСклада);
	Запрос.УстановитьПараметр("ТипАдресаСклада", 	Перечисления.ТипыКонтактнойИнформации.Адрес);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьПолучитьДанныеДляПечатнойФормыНакладна(ПараметрыПечати, МассивОбъектов)
	
	Запрос = Новый Запрос("
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка                                   КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Номер                                    КАК Номер,
	|	ПоступлениеТоваровУслуг.Дата                                     КАК Дата,
	|	ПоступлениеТоваровУслуг.Партнер                                  КАК Партнер,
	|	ПоступлениеТоваровУслуг.Контрагент                               КАК Поставщик,
	|	ПоступлениеТоваровУслуг.Организация                              КАК Организация,
	|	ПоступлениеТоваровУслуг.Организация.Префикс                      КАК Префикс,
	|	ПоступлениеТоваровУслуг.Валюта                                   КАК Валюта,
	|	ПоступлениеТоваровУслуг.ЦенаВключаетНДС                          КАК ЦенаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Принял.Наименование                      КАК ПолучениеПроизвел,
	|	ВЫБОР
	|		КОГДА
	|			ПоступлениеТоваровУслуг.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                       КАК УчитыватьНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                                           КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул                                       КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование                              КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное                          КАК Характеристика,
	|	ВложенныйЗапрос.СтавкаНДС                                                  КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена													   КАК Цена,
	|	ВложенныйЗапрос.Количество                                                 КАК Количество,
	|	ВложенныйЗапрос.Сумма													   КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС												   КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаСкидки                                                КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки                                             КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки,
	|	Ложь                                                                       КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|
	|		ВЫБОР КОГДА ПоступлениеТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			ПоступлениеТоваровУслуг.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|
	|		ВЫБОР КОГДА ПоступлениеТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			ПоступлениеТоваровУслуг.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ПоступлениеТоваровУслуг.ПроцентРучнойСкидки         КАК ПроцентСкидки,
	|		ПоступлениеТоваровУслуг.Характеристика              КАК Характеристика,
	|		ПоступлениеТоваровУслуг.СтавкаНДС                   КАК СтавкаНДС,
	|		ПоступлениеТоваровУслуг.Цена                        КАК Цена,
	|		ПоступлениеТоваровУслуг.КоличествоУпаковок          КАК Количество,
	|		ПоступлениеТоваровУслуг.Сумма                       КАК Сумма,
	|		ПоступлениеТоваровУслуг.СуммаРучнойСкидки           КАК СуммаСкидки,
	|		ПоступлениеТоваровУслуг.Сумма +
	|		ПоступлениеТоваровУслуг.СуммаРучнойСкидки           КАК СуммаБезСкидки,
	|		ПоступлениеТоваровУслуг.СуммаНДС                    КАК СуммаНДС,
	|		ПоступлениеТоваровУслуг.НомерСтроки                 КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В (&МассивДокументов)
	|		И ПоступлениеТоваровУслуг.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка
	|");

	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьПолучитьДанныеДляПечатнойФормыОприходованиеТоваров(ПараметрыПечати, МассивОбъектов, ВерсияКонфигурации)
		
	ДопКолонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Склад КАК Склад,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Подразделение) КАК ПодразделениеПредставление,
	|	Документ.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.Склад.ТекущийОтветственный КАК Кладовщик,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	Документ.ДокументОснование КАК ДокументОснование,
	|	ПРЕДСТАВЛЕНИЕ(Документ.ДокументОснование) КАК ОснованиеПредставление,
	|	Документ.ДокументОснование.Номер КАК НомерОснования,
	|	Документ.ДокументОснование.Дата КАК ДатаОснования
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|   Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	" + ?(ВыводитьДопКолонку, "ТаблицаТовары.Номенклатура." + ДопКолонка +" КАК ДопКолонка,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьПолучитьДанныеДляПечатнойФормыСписаниеТоваров(ПараметрыПечати, МассивОбъектов, ВерсияКофигурации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДопКолонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Склад КАК Склад,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Подразделение) КАК ПодразделениеПредставление,
	|	Документ.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	Документ.Организация.Префикс КАК Префикс,
	|	 Документ.Склад.ТекущийОтветственный  КАК Кладовщик,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	Документ.ДокументОснование КАК ДокументОснование,
	|	Документ.ДокументОснование КАК Основание,
	|	Документ.ДокументОснование.Номер КАК НомерОснования,
	|	Документ.ДокументОснование.Дата КАК ДатаОснования
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТоваровТовары.Ссылка КАК Ссылка,
	|	СписаниеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеТоваровТовары.Характеристика КАК Характеристика,
	|	СписаниеТоваровТовары.Количество КАК Количество,
	|	" + ?(ВыводитьДопКолонку, "СписаниеТоваровТовары.Номенклатура." + ДопКолонка +" КАК ДопКолонка,", "") + "
	|	СписаниеТоваровТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	СписаниеТоваровТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаПредставление,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВходнаяЦена.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(СписаниеТоваровТовары.Номенклатура.ЕдиницаИзмерения) 
	|		ИНАЧЕ ВходнаяЦена.Упаковка
	|	КОНЕЦ КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ВходнаяЦена.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВходнаяЦена.Цена, 0) * СписаниеТоваровТовары.Количество КАК Сумма 
	|ИЗ
	|	Документ.СписаниеНедостачТоваров.Товары КАК СписаниеТоваровТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ВходнаяЦена
	|ПО
	|	ВходнаяЦена.Номенклатура = СписаниеТоваровТовары.Номенклатура
	|И	ВходнаяЦена.Характеристика = СписаниеТоваровТовары.Характеристика
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Вхідна"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыТоварныйЧек_ЧП(ПараметрыПечати, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НужнаяДатаСеанса", ТекущаяДатаСеанса() - 86400 * 21);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія"));
	Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПерсональныеКомпьютеры", Справочники.Номенклатура.НайтиПоКоду("00000006406"));
	Запрос.УстановитьПараметр("СвойствоОрганзацияФ5", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("83cb2377-5b57-11e4-80e2-001e676b0175"))); // Свойство «Организация Ф5»;
	Запрос.УстановитьПараметр("ТипКонтакнойИнформацииСклад", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидКонтакнойИнформацииСклад", Справочники.ВидыКонтактнойИнформации.АдресСклада);

	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партнер			КАК Партнер,
	|	Дата			КАК Дата,
	|	Организация     КАК Организация
	|ПОМЕСТИТЬ ТабПартнерыИОрганизации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг
	|ГДЕ
	|	Ссылка В(&МассивДокументов)
	|;
	////////////////////////////////////////////////////////////////////////////////
	//
	|ВЫБРАТЬ
	|	ЛояльностьБонусы.Партнер,
	|	СУММА(ЛояльностьБонусы.БонусПриход) - СУММА(ЛояльностьБонусы.БонусРасход) КАК БонусОстаток
	|ПОМЕСТИТЬ ТабБонусыПартнеров
	|ИЗ
	|	РегистрНакопления.Лояльность_Бонусы.ОстаткиИОбороты(, &НужнаяДатаСеанса, Регистратор, , Партнер В (ВЫБРАТЬ Партнер ИЗ ТабПартнерыИОрганизации)) КАК ЛояльностьБонусы
	|		
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
	|					,
	|					АналитикаУчетаПоПартнерам В
	|						(ВЫБРАТЬ
	|							КлючАналитики КАК КлючАналитики
	|						ИЗ
	|							РегистрСведений.АналитикаУчетаПоПартнерам
	|						ГДЕ
	|							Партнер В (ВЫБРАТЬ Партнер ИЗ ТабПартнерыИОрганизации))) КАК РасчетыСКлиентами
	|ПО 	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ЛояльностьБонусы.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫРАЗИТЬ(ЛояльностьБонусы.Регистратор КАК Документ.РеализацияТоваровУслуг)
	|		КОГДА ВЫРАЗИТЬ(ЛояльностьБонусы.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ЛояльностьБонусы.Регистратор КАК Документ.РеализацияТоваровУслуг)
	|		ИНАЧЕ ВЫРАЗИТЬ(ЛояльностьБонусы.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
	|	КОНЕЦ = РасчетыСКлиентами.ЗаказКлиента
	|
	|ГДЕ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) <= 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	ЛояльностьБонусы.Партнер
	|;
	////////////////////////////////////////////////////////////////////////////////
	//
	|ВЫБРАТЬ
	|	Ссылка 			КАК Склад,
	|	Представление 	КАК Адрес
	|ПОМЕСТИТЬ ТаблицаАдресовСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация
	|ГДЕ
	|	Тип = &ТипКонтакнойИнформацииСклад
	|	И Вид = &ВидКонтакнойИнформацииСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОрганизации.Организация 				КАК Организация,
	|	ЕСТЬNULL(ДопСведения.Значение, ЛОЖЬ) 	КАК ЭтоОрганизацияФ5
	|ПОМЕСТИТЬ ТаблицаАтрибутовОрганизацийФ5
	|ИЗ
	|	ТабПартнерыИОрганизации КАК ТабОрганизации
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения
	|		ПО ВЫРАЗИТЬ(ДопСведения.Объект КАК Справочник.Организации) = ТабОрганизации.Организация
	|			И ДопСведения.Свойство = &СвойствоОрганзацияФ5
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК ДокументСсылка,
	|	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
	|	РеализацияТоваровУслугТовары.Ссылка.Менеджер,
	|	РеализацияТоваровУслугТовары.Ссылка.Партнер,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.Валюта = &ВалютаРег
	|			ТОГДА РеализацияТоваровУслугТовары.Сумма
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма * (КурсДокумента.Курс / КурсДокумента.Кратность / (КурсРегламентированогоУчета.Курс / КурсРегламентированогоУчета.Кратность))
	|	КОНЕЦ КАК Сумма,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ИспользоватьОрдернуюСхемуПриОтгрузке,
	|	РеализацияТоваровУслугТовары.Ссылка.Склад,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.Валюта = &ВалютаРег
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Цена * (КурсДокумента.Курс / КурсДокумента.Кратность / (КурсРегламентированогоУчета.Курс / КурсРегламентированогоУчета.Кратность))
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслугТовары.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.Валюта = &ВалютаРег
	|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента * (КурсДокумента.Курс / КурсДокумента.Кратность / (КурсРегламентированогоУчета.Курс / КурсРегламентированогоУчета.Кратность))
	|	КОНЕЦ КАК СуммаВсего
	|ПОМЕСТИТЬ ТабНоменклатура
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсРегламентированогоУчета
	|		ПО (КурсРегламентированогоУчета.Валюта = &ВалютаРег)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсДокумента
	|		ПО РеализацияТоваровУслугТовары.Ссылка.Валюта = КурсДокумента.Валюта
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Гарантия
	|ПОМЕСТИТЬ ТабГарантия
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ТабНоменклатура.Номенклатура
	|			ИЗ
	|				ТабНоменклатура КАК ТабНоменклатура)
	|	И НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаТоваров.Ссылка,
	|	СборкаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТабСборки
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Номенклатура В
	|			(ВЫБРАТЬ
	|				ТабНоменклатура.Номенклатура
	|			ИЗ
	|				ТабНоменклатура КАК ТабНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНоменклатура.ДокументСсылка.Номер КАК НомерДокумента,
	|	ТабНоменклатура.ДокументСсылка.Дата КАК ДатаДокумента,
	|	ТабНоменклатура.ДокументСсылка КАК ДокументСсылка,
	|	ТабНоменклатура.Организация.НаименованиеПолное КАК Организация,
	|	ТабНоменклатура.Менеджер КАК Менеджер,
	|	ТабНоменклатура.Партнер КАК Партнер,
	|	ТабНоменклатура.Номенклатура КАК Номенклатура,
	|	ТабНоменклатура.Цена,
	|	ТабНоменклатура.Сумма,
	|	ТабНоменклатура.Код,
	|	ТабНоменклатура.Количество,
	|	ТабНоменклатура.ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТабГарантия.Гарантия, """") КАК Гарантия,
	|	ЕСТЬNULL(СерийныеНомераНоменклатурыОбороты.СерийныеНомера, """") КАК СерийныйНомер,
	|	ТабНоменклатура.Дата КАК ДатаРеализации,
	|	ТабНоменклатура.СуммаВсего,
	|	ЕСТЬNULL(Лояльность_БонусыОбороты.БонусПриход, 0) КАК НачисленоБонусов,
	|	ТабНоменклатура.СуммаВсего - ЕСТЬNULL(ВЫБОР
	|			КОГДА РасчетыСКлиентамиБонусы.Валюта = &ВалютаРег
	|				ТОГДА РасчетыСКлиентамиБонусы.Сумма
	|			ИНАЧЕ РасчетыСКлиентамиБонусы.Сумма * (Курсы.Курс / Курсы.Кратность / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность))
	|		КОНЕЦ, 0) КАК СуммаОплачено,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РасчетыСКлиентамиБонусы.Валюта = &ВалютаРег
	|				ТОГДА РасчетыСКлиентамиБонусы.Сумма
	|			ИНАЧЕ РасчетыСКлиентамиБонусы.Сумма * (Курсы.Курс / Курсы.Кратность / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность))
	|		КОНЕЦ, 0) КАК БонуснаяСкидка,
	|	ВЫБОР
	|		КОГДА ТабНоменклатура.Номенклатура.Родитель = &ПерсональныеКомпьютеры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСборка,
	|	ЕСТЬNULL(ТабБонусыПартнеров.БонусОстаток, 0) - 
	|		IsNULL(	ВЫБОР
	|					КОГДА РасчетыСКлиентамиБонусы.Валюта = &ВалютаРег
	|					ТОГДА РасчетыСКлиентамиБонусы.Сумма
	|					ИНАЧЕ РасчетыСКлиентамиБонусы.Сумма * (Курсы.Курс / Курсы.Кратность / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность))
	|				КОНЕЦ, 0) КАК БонусОстаток,
	|	&ТекущаяДата КАК ДатаОстаткаБонусов,
	|	ЕСТЬNULL(ТаблицаАтрибутовОрганизацийФ5.ЭтоОрганизацияФ5, ЛОЖЬ) КАК ЭтоОрганизацияФ5,
	|	ЕСТЬNULL(ТаблицаАдресовСкладов.Адрес, """") КАК АдресСклада
	|ИЗ
	|	ТабНоменклатура КАК ТабНоменклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабГарантия КАК ТабГарантия
	|		ПО ТабНоменклатура.Номенклатура = ТабГарантия.Номенклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				(Номенклатура, Склад) В
	|					(ВЫБРАТЬ
	|						ТабНоменклатура.Номенклатура,
	|						ТабНоменклатура.Склад
	|					ИЗ
	|						ТабНоменклатура КАК ТабНоменклатура)) КАК СерийныеНомераНоменклатурыОбороты
	|		ПО ТабНоменклатура.Номенклатура = СерийныеНомераНоменклатурыОбороты.Номенклатура
	|			И ТабНоменклатура.Склад = СерийныеНомераНоменклатурыОбороты.Склад
	|			И (ВЫБОР
	|				КОГДА ТабНоменклатура.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ТОГДА СерийныеНомераНоменклатурыОбороты.Регистратор.Распоряжение = ТабНоменклатура.ДокументСсылка
	|				ИНАЧЕ СерийныеНомераНоменклатурыОбороты.Регистратор = ТабНоменклатура.ДокументСсылка
	|			КОНЕЦ)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Лояльность_Бонусы.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				Партнер В
	|					(ВЫБРАТЬ
	|						ТабНоменклатура.Партнер
	|					ИЗ
	|						ТабНоменклатура КАК ТабНоменклатура)) КАК Лояльность_БонусыОбороты
	|		ПО ТабНоменклатура.Партнер = Лояльность_БонусыОбороты.Партнер
	|
	|			И ТабНоменклатура.ДокументСсылка = Лояльность_БонусыОбороты.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентамиБонусы
	|		ПО (ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиБонусы.Регистратор) = ТИП(Документ.СписаниеЗадолженности))
	|			И (ВЫБОР
	|				КОГДА ТабНоменклатура.ДокументСсылка.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|						ИЛИ ТабНоменклатура.ДокументСсылка.ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|					ТОГДА РасчетыСКлиентамиБонусы.ЗаказКлиента = ТабНоменклатура.ДокументСсылка
	|				ИНАЧЕ РасчетыСКлиентамиБонусы.ЗаказКлиента = ТабНоменклатура.ДокументСсылка.ЗаказКлиента
	|			КОНЕЦ)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ЗапросВалютРегламент
	|		ПО (ЗапросВалютРегламент.Валюта = &ВалютаРег)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Курсы
	|		ПО (РасчетыСКлиентамиБонусы.Валюта = Курсы.Валюта)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабБонусыПартнеров КАК ТабБонусыПартнеров
	|		ПО ТабНоменклатура.Партнер = ТабБонусыПартнеров.Партнер
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАтрибутовОрганизацийФ5 КАК ТаблицаАтрибутовОрганизацийФ5
	|		ПО ТаблицаАтрибутовОрганизацийФ5.Организация = ТабНоменклатура.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАдресовСкладов КАК ТаблицаАдресовСкладов
	|		ПО ТабНоменклатура.Склад = ТаблицаАдресовСкладов.Склад
	|
	|ИТОГИ ПО
	|	ДокументСсылка,
	|	Номенклатура";
	
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция ПолучитьДанныеДляПечатиКоммерческогоПредложения(МассивОбъектов)
Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК Ссылка,
	|	КоммерческоеПредложениеКлиенту.Номер КАК Номер,
	|	КоммерческоеПредложениеКлиенту.Дата КАК Дата,
	|	КоммерческоеПредложениеКлиенту.Организация,
	|	КоммерческоеПредложениеКлиенту.Организация.НаименованиеСокращенное КАК ОрганизацияСокращенноеНаименование,
	|	КоммерческоеПредложениеКлиенту.Организация.Наименование КАК ОрганизацияНаименование,
	|	КоммерческоеПредложениеКлиенту.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	КоммерческоеПредложениеКлиенту.Организация.Префикс КАК Префикс,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	ЕСТЬNULL(КоммерческоеПредложениеКлиенту.Менеджер.ФизическоеЛицо.Наименование, КоммерческоеПредложениеКлиенту.Менеджер.Наименование) КАК Менеджер,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ТелефонОрганизации.Представление КАК ТелефонОрганизации,
	|	АдресОрганизации.Представление КАК АдресОрганизации,
	|	ПочтаМенеджера.Представление КАК АдресЭлектроннойПочтыМенеджера,
	|	КоммерческоеПредложениеКлиенту.ГрафикОплаты,
	|	КоммерческоеПредложениеКлиенту.ФормаОплаты,
	|	КоммерческоеПредложениеКлиенту.Склад
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ПочтаМенеджера
	|		ПО (ПочтаМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица))
	|			И КоммерческоеПредложениеКлиенту.Менеджер.ФизическоеЛицо = ПочтаМенеджера.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ТелефонОрганизации
	|		ПО КоммерческоеПредложениеКлиенту.Организация = ТелефонОрганизации.Ссылка
	|			И (ТелефонОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК АдресОрганизации
	|		ПО КоммерческоеПредложениеКлиенту.Организация = АдресОрганизации.Ссылка
	|			И (АдресОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПолучитьДанныеОбъектаПоВыборкеКоммерческогоПредложения(Выборка)
	
	РегламентнаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КурсыВалют.Курс/КурсыВалют.Кратность Как КурсПоДокументу
	                      |ИЗ
	                      |	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта=&Валюта) КАК КурсыВалют");
	Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
	Запрос.УстановитьПараметр("Дата",   Выборка.Ссылка.Дата);
	ВыборкаКурса = Запрос.Выполнить().Выбрать();
	Если ВыборкаКурса.Следующий() Тогда
		Курс = ВыборкаКурса.КурсПоДокументу;		
	Иначе
		ВызватьИсключение "Курс в регистре сведений не определен на дату: " + Выборка.Ссылка.Дата;
	КонецЕсли;
    
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("ПредставлениеОрганизации",          СтрЗаменить(Выборка.НаименованиеПолное, Символы.ПС, ", "));
	ДанныеОбъекта.Вставить("Организация",          				Выборка.Организация);
	ДанныеОбъекта.Вставить("Партнер",                           Выборка.Партнер);
	ДанныеОбъекта.Вставить("Ссылка",                            Выборка.Ссылка);
	ДанныеОбъекта.Вставить("КонтактноеЛицо",                    Выборка.КонтактноеЛицо);
	ДанныеОбъекта.Вставить("Менеджер",                          Выборка.Менеджер);
	ДанныеОбъекта.Вставить("Номер",                             ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Ложь, Истина));
	ДанныеОбъекта.Вставить("Дата",                              Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("СрокДействия",                      Формат(Выборка.СрокДействия,"ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ДополнительнаяИнформация",          Выборка.ДополнительнаяИнформация);
	ДанныеОбъекта.Вставить("ТелефонОрганизации",                Выборка.ТелефонОрганизации);
	ДанныеОбъекта.Вставить("АдресОрганизации",                  Выборка.АдресОрганизации);
	ДанныеОбъекта.Вставить("АдресЭлектроннойПочтыМенеджера",    Выборка.АдресЭлектроннойПочтыМенеджера);
	ДанныеОбъекта.Вставить("ГрафикОплаты",                      Выборка.ГрафикОплаты);
	ДанныеОбъекта.Вставить("ФормаОплаты",                       Выборка.ФормаОплаты);
	ДанныеОбъекта.Вставить("Склад",                             Выборка.Склад);
	ДанныеОбъекта.Вставить("ЕстьСкидки",                        Ложь);

	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	СуммаВсего    = 0;
	СуммаВсегоНДС = 0;
	КоличествоТоваров = 0;
	
	НомерСтроки = 0;
	Товары = ПолучитьТаблицуТоварыКоммерческоеПредложение(Выборка.Ссылка);
	Для Каждого ВыборкаТовары из Товары Цикл
		
		Если НЕ ВыборкаТовары.Активность Тогда
		Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицыТовары = Новый Структура;
		СтрокаТаблицыТовары.Вставить("НомерСтроки",          НомерСтроки);
		
		НаименованиеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаТовары.НаименованиеПолное, ВыборкаТовары.Характеристика);
		
		СтрокаТаблицыТовары.Вставить("Номенклатура",         НаименованиеТовара);
		СтрокаТаблицыТовары.Вставить("Количество",           ВыборкаТовары.Количество);
		СтрокаТаблицыТовары.Вставить("ЕдиницаИзмерения",     ВыборкаТовары.ЕдиницаИзмерения);
		СтрокаТаблицыТовары.Вставить("Цена",                 Формат(ВыборкаТовары.Цена* Курс,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыТовары.Вставить("СуммаСкидки",          Формат(ВыборкаТовары.СуммаСкидки* Курс,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыТовары.Вставить("Сумма",                Формат(ВыборкаТовары.Сумма* Курс,"ЧДЦ=2; ЧРД=,")); 
		СтрокаТаблицыТовары.Вставить("ГарантийныйСрок",      ВыборкаТовары.ГарантийныйСрок);
		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
		
		 		
		
		СуммаВсего        = СуммаВсего + ВыборкаТовары.Сумма* Курс;
		СуммаВсегоНДС     = СуммаВсегоНДС + ВыборкаТовары.СуммаНДС* Курс;
		КоличествоТоваров = КоличествоТоваров + 1;
		
		Если ВыборкаТовары.СуммаСкидки <> 0 И НЕ ДанныеОбъекта.ЕстьСкидки Тогда
			ДанныеОбъекта.ЕстьСкидки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	
		//|ВЫБРАТЬ 
		//|   ТабКорзина.Номенклатура,
		//|   ТабКорзина.Характеристика,
		//|
		//|
		//|   ТабКорзина.КоличествоУпаковок,
		//|	
		//|	ТабКорзина.Упаковка,
		//|
		//|   ТабКорзина.ВидЦены,
		//|   ТабКорзина.Цена,
		//|	ТабКорзина.ПроцентРучнойСкидки,
		//|	ТабКорзина.СтавкаНДС,
		//|	ВЫБОР
		//|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		//|				ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		//|			ТОГДА 0.1
		//|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		//|				ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		//|			ТОГДА 0.18
		//|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		//|				ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		//|			ТОГДА 0.2
		//|		ИНАЧЕ 0
		//|	КОНЕЦ КАК СтавкаНДСЧислом, Ссылка.Валюта
		//|
		//|ПОМЕСТИТЬ КешПредвРезультат
		//|ИЗ Документ.КоммерческоеПредложениеКлиенту.Товары КАК ТабКорзина
		//|ГДЕ &Ссылка = ТабКорзина.Ссылка
		//|
		//|;
		////1. Расчитываем цены и прочие значения
		//|;
		////2. 
		//|ВЫБРАТЬ
		//|	Сумма(Цена * КоличествоУпаковок) КАК Оборот
		//|
		//|ПОМЕСТИТЬ КешБудущийОборот
		//|ИЗ
		//|	КешПредвРезультат	
		//|
		//|;
		////3.
		//|ВЫБРАТЬ
		//|	КешПредвРезультат.Номенклатура,	
		//|	КешПредвРезультат.Характеристика,
		//|
		//|   Ставки.Значение КАК ОборотПроцент,
		//|   ЕСТЬNULL(ТаблицаДинПроцент.Значение, 0) КАК ДинПроцент,
		//|
		//|	ВЫБОР
		//|  		КОГДА КешПредвРезультат.ВидЦены = Значение(Справочник.ВидыЦен.ПустаяСсылка)
		//|       ТОГДА 0
		//|
		//|		КОГДА Ставки.Значение = 0
		//|       ТОГДА 0
		//|
		//|   	КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
		//|		ТОГДА 	ВЫБОР
		//|					КОГДА УчПолБонусы.ЕстьСкидкиДляАкций = Истина
		//|					ТОГДА 	
		//|							ВЫБОР
		//|								КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧастьИДинамичнаяЧасть)
		//|								ТОГДА 	
		//|										ВЫБОР 
		//|											КОГДА КешПредвРезультат.ПроцентРучнойСкидки = 0
		//|											ТОГДА (Ставки.Значение + ЕСТЬNULL(ТаблицаДинПроцент.Значение,0)) * 0.01
		//|											ИНАЧЕ 0
		//|										КОНЕЦ
		//|							
		//|								КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧасть)
		//|								ТОГДА 
		//|                                       ВЫБОР
		//|											КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= ЕСТЬNULL(ТаблицаДинПроцент.Значение,0)
		//|                                           ТОГДА Ставки.Значение * (0.01 - ЕСТЬNULL(ТаблицаДинПроцент.Значение,0) * 0.0001)
		//|                                           ИНАЧЕ 0
		//|										КОНЕЦ 
		//| 		
		//|								КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.ДинамичнаяЧасть)
		//|								ТОГДА
		//|                                       ВЫБОР
		//|											КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= Ставки.Значение
		//|                                           ТОГДА ЕСТЬNULL(ТаблицаДинПроцент.Значение,0) * (0.01 - Ставки.Значение * 0.0001)
		//|                                           ИНАЧЕ 0
		//|										КОНЕЦ
		//|
		//|								ИНАЧЕ 0
		//|							КОНЕЦ
		//|
		//|					ИНАЧЕ 0
		//|				КОНЕЦ
		//|		ИНАЧЕ   
		//|				ВЫБОР
		//|					КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧастьИДинамичнаяЧасть)
		//|					ТОГДА 	
		//|							ВЫБОР 
		//|								КОГДА КешПредвРезультат.ПроцентРучнойСкидки = 0
		//|								ТОГДА (Ставки.Значение + ЕСТЬNULL(ТаблицаДинПроцент.Значение,0)) * 0.01
		//|								ИНАЧЕ 0
		//|							КОНЕЦ
		//|							
		//|					КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧасть)
		//|					ТОГДА 
		//|                           ВЫБОР
		//|								КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= ЕСТЬNULL(ТаблицаДинПроцент.Значение,0)
		//|                               ТОГДА Ставки.Значение * (0.01 - ЕСТЬNULL(ТаблицаДинПроцент.Значение,0) * 0.0001)
		//|                               ИНАЧЕ 0
		//|							КОНЕЦ 
		//| 		
		//|					КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.ДинамичнаяЧасть)
		//|					ТОГДА
		//|                           ВЫБОР
		//|								КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= Ставки.Значение
		//|                               ТОГДА ЕСТЬNULL(ТаблицаДинПроцент.Значение,0) * (0.01 - Ставки.Значение * 0.0001)
		//|                               ИНАЧЕ 0
		//|							КОНЕЦ
		//|
		//|					ИНАЧЕ 0
		//|				КОНЕЦ
		//|	КОНЕЦ КАК БонусПроцент,
		//|
		//|	ВЫБОР
		//|   	КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
		//|		ТОГДА 	ВЫБОР
		//|					КОГДА УчПолБонусы.ЕстьСкидкиДляАкций = Истина
		//|					ТОГДА 	
		//|							ВЫБОР
		//|								КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧастьИДинамичнаяЧасть)
		//|								ТОГДА КешПредвРезультат.ПроцентРучнойСкидки	
		//|							
		//|								КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧасть)
		//|								ТОГДА 
		//|                                       ВЫБОР
		//|											КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= ЕСТЬNULL(ТаблицаДинПроцент.Значение,0) И ЕСТЬNULL(Ставки.Значение,0) > 0
		//|                                           ТОГДА ЕСТЬNULL(ТаблицаДинПроцент.Значение,0)
		//|                                           ИНАЧЕ КешПредвРезультат.ПроцентРучнойСкидки
		//|										КОНЕЦ 
		//| 		
		//|								КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.ДинамичнаяЧасть)
		//|								ТОГДА
		//|                                       ВЫБОР
		//|											КОГДА КешПредвРезультат.ПроцентРучнойСкидки <=  ЕСТЬNULL(Ставки.Значение,0)
		//|                                           ТОГДА ЕСТЬNULL(Ставки.Значение,0)
		//|                                           ИНАЧЕ КешПредвРезультат.ПроцентРучнойСкидки
		//|										КОНЕЦ
		//|
		//|								ИНАЧЕ 0
		//|							КОНЕЦ
		//|
		//|					ИНАЧЕ 0
		//|				КОНЕЦ
		//|		ИНАЧЕ   
		//|				ВЫБОР
		//|					КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧастьИДинамичнаяЧасть)
		//|					ТОГДА КешПредвРезультат.ПроцентРучнойСкидки	
		//|							
		//|					КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.СкидочнаяЧасть)
		//|					ТОГДА 
		//|                           ВЫБОР
		//|								КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= ЕСТЬNULL(ТаблицаДинПроцент.Значение,0) И ЕСТЬNULL(Ставки.Значение,0) > 0
		//|                               ТОГДА ЕСТЬNULL(ТаблицаДинПроцент.Значение,0)
		//|                               ИНАЧЕ КешПредвРезультат.ПроцентРучнойСкидки
		//|							КОНЕЦ 
		//| 		
		//|					КОГДА УчПолБонусы.ТипНачисления = Значение(Перечисление.ТипыНачисленияБонусы.ДинамичнаяЧасть)
		//|					ТОГДА
		//|                           ВЫБОР
		//|								КОГДА КешПредвРезультат.ПроцентРучнойСкидки <= ЕСТЬNULL(Ставки.Значение,0)
		//|                               ТОГДА ЕСТЬNULL(Ставки.Значение,0)
		//|                               ИНАЧЕ КешПредвРезультат.ПроцентРучнойСкидки
		//|							КОНЕЦ
		//|
		//|					ИНАЧЕ 0
		//|				КОНЕЦ
		//|	КОНЕЦ КАК ПроцентРучнойСкидки
		//|
		//|ПОМЕСТИТЬ КешПроценты
		//|ИЗ
		//|	КешПредвРезультат КАК КешПредвРезультат
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешКорзина) И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних)) КАК ВходнаяЦена
		//|ПО ВходнаяЦена.Номенклатура 	= КешПредвРезультат.Номенклатура
		//|И  ВходнаяЦена.Характеристика 	= КешПредвРезультат.Характеристика
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦена
		//|ПО КурсЦена.Валюта = ВходнаяЦена.Валюта
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ КешБудущийОборот КАК КешБудущийОборот
		//|ПО Истина
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК Ставки
		//|ПО 	Ставки.НижняяГраница  / КешПредвРезультат.КурсПоСоглашению <= 	&Оборот + КешБудущийОборот.Оборот
		//|И	(	Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению > 	&Оборот + КешБудущийОборот.Оборот 
		//|	ИЛИ Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению = 	0)
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДинамическаяСкидкаБонусы КАК ТаблицаДинПроцент
		//|ПО ТаблицаДинПроцент.НижняяГраница <= ВЫБОР 
		//|											КОГДА 	ЕСТЬNULL(ВходнаяЦена.Цена, 0) 		= 0 
		//|											  ИЛИ 	ЕСТЬNULL(КоличествоУпаковок, 0) 	= 0 
		//|											ТОГДА 0
		//|											ИНАЧЕ (КешПредвРезультат.Цена * КешПредвРезультат.КурсПоСоглашению / (КурсЦена.Курс / КурсЦена.Кратность) / (ВходнаяЦена.Цена * КешПредвРезультат.Коэффициент) - 1) * 100
		//|										КОНЕЦ 
		//|И (ТаблицаДинПроцент.ВерхняяГраница >  ВЫБОР 
		//|											КОГДА 	ЕСТЬNULL(ВходнаяЦена.Цена, 0) 		= 0 
		//|											  ИЛИ 	ЕСТЬNULL(КоличествоУпаковок, 0) 	= 0 
		//|											ТОГДА 0
		//|											ИНАЧЕ (КешПредвРезультат.Цена * КешПредвРезультат.КурсПоСоглашению / (КурсЦена.Курс / КурсЦена.Кратность) / (ВходнаяЦена.Цена * КешПредвРезультат.Коэффициент) - 1) * 100
		//|										КОНЕЦ
		//|ИЛИ ТаблицаДинПроцент.ВерхняяГраница = 0)
		//|
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних КАК УчПолБонусы
		//|ПО Истина
		//|;
		////4. Результат пересчета
		//|ВЫБРАТЬ 
		//|	КешПредвРезультат.Номенклатура, 
		//|	КешПредвРезультат.Характеристика,
		//|
		//|   Склад,
		//|	Коэффициент * КоличествоУпаковок КАК Количество,
		//|   КоличествоУпаковок,
		//|   ЕдиницаИзмерения,
		//|   Упаковка,
		//|
		//|   КешПредвРезультат.ВидЦены,
		//|	Цена,
		//|   КоличествоУпаковок * Цена * (1 - КешПроценты.ПроцентРучнойСкидки * 0.01) КАК Сумма,
		//|   КешПроценты.ПроцентРучнойСкидки,
		//|   Цена * КоличествоУпаковок * 0.01 * КешПроценты.ПроцентРучнойСкидки КАК СуммаРучнойСкидки,
		//|   СтавкаНДС,
		//|   ВЫБОР
		//|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		//|       	ТОГДА ВЫБОР 
		//|					КОГДА &ЦенаВключаетНДС
		//|						ТОГДА КоличествоУпаковок * Цена / (1 + СтавкаНДСЧислом ) * СтавкаНДСЧислом
		//|					ИНАЧЕ КоличествоУпаковок * Цена * СтавкаНДСЧислом
		//|				  КОНЕЦ
		//|		ИНАЧЕ 0
		//|	КОНЕЦ * (1 - КешПроценты.ПроцентРучнойСкидки * 0.01) КАК СуммаНДС,
		//|   ВЫБОР
		//|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		//|       	ТОГДА ВЫБОР 
		//|					КОГДА &ЦенаВключаетНДС
		//|						ТОГДА КоличествоУпаковок * Цена 
		//|					ИНАЧЕ КоличествоУпаковок * Цена * (1 + СтавкаНДСЧислом)
		//|				  КОНЕЦ 
		//|		ИНАЧЕ КоличествоУпаковок * Цена  
		//|	КОНЕЦ * (1 - КешПроценты.ПроцентРучнойСкидки * 0.01) КАК СуммаВсего,
		//|
		//|   Цена * КоличествоУпаковок * 0.01 * КешПроценты.ДинПроцент КАК КолонкаПроцентМенеджера,
		//|	Истина КАК КартинкаПроцентМенеджера,
		//|
		//|	Цена * КоличествоУпаковок * БонусПроцент КАК КолонкаБонусы,
		//|   Истина КАК КартинкаБонусы,
		//|
		//|	Доступно
		//|
		//|	, КешПроценты.ОборотПроцент
		//|   , КешПроценты.ДинПроцент
		//|
		//|ИЗ
		//| 	КешПредвРезультат КАК КешПредвРезультат
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
		//|ПО КешПредвРезультат.Номенклатура 	 = КешПроценты.Номенклатура 
		//|И  КешПредвРезультат.Характеристика = КешПроценты.Характеристика
		
		
		
		
		
		
		
	ПредставлениеВалюты = СокрЛП(РегламентнаяВалюта);
		
	СуммаКПрописи = СуммаВсего + ?(Выборка.ЦенаВключаетНДС, 0, СуммаВсегоНДС);
	СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, РегламентнаяВалюта);
	
	Всего = "";
	Если Выборка.УчитыватьНДС И НЕ Выборка.ЦенаВключаетНДС Тогда
		Всего = НСтр("ru='Всього: %СуммаВсего% %ПредставлениеВалюты%, сума ПДВ: %СуммаНДС% %ПредставлениеВалюты%'") + Символы.ПС;
		Всего = СтрЗаменить(Всего, "%СуммаВсего%", Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"));
		Всего = СтрЗаменить(Всего, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		Всего = СтрЗаменить(Всего, "%ПредставлениеВалюты%", ПредставлениеВалюты);
	КонецЕсли;
	

	ИтоговаяСтрока = "";
	Если Выборка.УчитыватьНДС И НЕ Выборка.ЦенаВключаетНДС Тогда
		ИтоговаяСтрока = НСтр("ru='Всього: %СуммаВсего% %ПредставлениеВалюты%, сума ПДВ: %СуммаНДС% %ПредставлениеВалюты%'") + Символы.ПС;
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаВсего%", Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%ПредставлениеВалюты%", ПредставлениеВалюты);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + НСтр("ru='Всього найменувань %Количество%, на суму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", КоличествоТоваров);
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, РегламентнаяВалюта));
	
	Если Выборка.УчитыватьНДС И Выборка.ЦенаВключаетНДС Тогда
		СтрокаНДС = НСтр("ru='в тому числі ПДВ %СуммаНДС% %ПредставлениеВалюты%'");
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%ПредставлениеВалюты%", ПредставлениеВалюты);
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + СтрокаНДС;	
	КонецЕсли;
	
	
	ДанныеОбъекта.Вставить("СуммаВсего", СуммаВсего);

	ДанныеОбъекта.Вставить("ИтоговаяСтрока",    ИтоговаяСтрока);
	ДанныеОбъекта.Вставить("СтоимостьПрописью", СуммаПрописью);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьПолучитьДанныеДляПечатнойФормыЗаказВидатковаНакладна(ПараметрыПечати, МассивОбъектов)
	
	Запрос = Новый Запрос("
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка              КАК Ссылка,
	|	ЗаказКлиента.Номер               КАК Номер,
	|	ЗаказКлиента.Дата                КАК Дата,
	|	ЗаказКлиента.Партнер             КАК Партнер,
	|	ЗаказКлиента.Контрагент          КАК Получатель,
	|	ЗаказКлиента.Организация         КАК Организация,
	|	ЗаказКлиента.Организация.Префикс КАК Префикс,
	|	ЗаказКлиента.Валюта              КАК Валюта,
	|	ЗаказКлиента.ЦенаВключаетНДС     КАК ЦенаВключаетНДС,
	|	ЗаказКлиента.АдресДоставки	   КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказКлиента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ                                                            КАК УчитыватьНДС,
	|	ЗаказКлиента.Склад.ТекущийОтветственный.Наименование   КАК ОтпускПроизвел,
	|	ЛОЖЬ 										КАК ДокументПеремещение
	|ПОМЕСТИТЬ ТабДокументыРеализации
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|
	|ГДЕ
	|	ЗаказКлиента.Ссылка В (&МассивДокументов)
	|;
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка 												КАК Ссылка,
	|	ПеремещениеТоваров.Номер												КАК Номер,
	|	ПеремещениеТоваров.Дата													КАК Дата,
	|	ПеремещениеТоваров.СкладПолучатель										КАК Партнер,
	|	ПеремещениеТоваров.СкладПолучатель										КАК Получатель,
	|	ПеремещениеТоваров.Организация											КАК Организация,
	|	ПеремещениеТоваров.Организация.Префикс									КАК Префикс,
	|	ВЫРАЗИТЬ(&ВалютаДоллар КАК Справочник.Валюты)							КАК Валюта,
	|	ЛОЖЬ																	КАК ЦенаВключаетНДС,
	|	ЛОЖЬ																	КАК УчитыватьНДС,
	|	ПеремещениеТоваров.СкладОтправитель.ТекущийОтветственный.Наименование 	КАК ОтпускПроизвел,
	|	ИСТИНА                                          						КАК ДокументПеремещение
	|ПОМЕСТИТЬ ТабДокументыПеремещения 
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В (&МассивДокументов)
	|;
	|
	|ВЫБРАТЬ
	|	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	|	СкладыКонтактнаяИнформация.Представление КАК Адрес
	|ПОМЕСТИТЬ ТабАдресаСкладов
	|ИЗ
	|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	|ГДЕ
	|	СкладыКонтактнаяИнформация.Тип = &ТипАдресаСклада
	|	И СкладыКонтактнаяИнформация.Вид = &ВидАдресаСклада
	|;
	|
	|ВЫБРАТЬ
	|	ТДокументыРеализации.Ссылка              							КАК Ссылка,
	|	ТДокументыРеализации.Номер              							КАК Номер,
	|	ТДокументыРеализации.Дата               							КАК Дата,
	|	ТДокументыРеализации.Партнер             							КАК Партнер,
	|	ТДокументыРеализации.Получатель         							КАК Получатель,
	|	ТДокументыРеализации.Организация         							КАК Организация,
	|	ТДокументыРеализации.Префикс 			 							КАК Префикс,
	|	ТДокументыРеализации.Валюта              							КАК Валюта,
	|	ТДокументыРеализации.ЦенаВключаетНДС    							КАК ЦенаВключаетНДС,
	|	ТДокументыРеализации.УчитыватьНДС		 							КАК УчитыватьНДС,
	|	ТДокументыРеализации.ОтпускПроизвел   	 							КАК ОтпускПроизвел,
	|	ТДокументыРеализации.ДокументПеремещение 							КАК ДокументПеремещение,
	|	ЕСТЬNULL(АдресаСкладов.Адрес, ТДокументыРеализации.АдресДоставки)   КАК Адрес
	|ИЗ
	|	ТабДокументыРеализации КАК ТДокументыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладов
	|		ПО ВЫРАЗИТЬ(АдресаСкладов.Склад.Наименование КАК СТРОКА(100)) = ВЫРАЗИТЬ(ТДокументыРеализации.АдресДоставки КАК СТРОКА(100))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТДокументыПеремещения.Ссылка              		КАК Ссылка,
	|	ТДокументыПеремещения.Номер               		КАК Номер,
	|	ТДокументыПеремещения.Дата						КАК Дата,
	|	ТДокументыПеремещения.Партнер             		КАК Партнер,
	|	ТДокументыПеремещения.Получатель          		КАК Получатель,
	|	ТДокументыПеремещения.Организация         		КАК Организация,
	|	ТДокументыПеремещения.Префикс 			   		КАК Префикс,
	|	ТДокументыПеремещения.Валюта              		КАК Валюта,
	|	ТДокументыПеремещения.ЦенаВключаетНДС     		КАК ЦенаВключаетНДС,
	|	ТДокументыПеремещения.УчитыватьНДС		 		КАК УчитыватьНДС,
	|	ТДокументыПеремещения.ОтпускПроизвел   	 		КАК ОтпускПроизвел,
	|	ТДокументыПеремещения.ДокументПеремещение 		КАК ДокументПеремещение,
	|	ЕСТЬNULL(АдресаСкладов.Адрес, """")    	КАК Адрес
	|ИЗ
	|	ТабДокументыПеремещения КАК ТДокументыПеремещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАдресаСкладов КАК АдресаСкладов
	|		ПО АдресаСкладов.Склад = ТДокументыПеремещения.Получатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                              КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                        КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное     КАК ТоварНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                    КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование       КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                    КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное   КАК Характеристика,
	|	ВложенныйЗапрос.СтавкаНДС                           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена								КАК Цена,
	|	ВложенныйЗапрос.Количество                          КАК Количество,
	|	ВложенныйЗапрос.Сумма								КАК Сумма,
	|	ВложенныйЗапрос.СуммаСкидки                         КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки                      КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.СуммаНДС							КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                         КАК НомерСтроки,
	|	Ложь                                                КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗаказКлиента.Ссылка КАК Ссылка,
	|		ЗаказКлиента.Номенклатура КАК Номенклатура,
	|
	|		ВЫБОР КОГДА ЗаказКлиента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			ЗаказКлиента.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|
	|		ВЫБОР КОГДА ЗаказКлиента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			ЗаказКлиента.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			ЗаказКлиента.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ЗаказКлиента.ПроцентРучнойСкидки + ЗаказКлиента.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|		ЗаказКлиента.Характеристика              КАК Характеристика,
	|		ЗаказКлиента.СтавкаНДС                   КАК СтавкаНДС,
	|		ЗаказКлиента.Цена                        КАК Цена,
	|		ЗаказКлиента.КоличествоУпаковок          КАК Количество,
	|		ЗаказКлиента.Сумма                       КАК Сумма,
	|		ЗаказКлиента.СуммаРучнойСкидки +
	|		ЗаказКлиента.СуммаАвтоматическойСкидки   КАК СуммаСкидки,
	|		ЗаказКлиента.Сумма +
	|		ЗаказКлиента.СуммаРучнойСкидки +
	|		ЗаказКлиента.СуммаАвтоматическойСкидки   КАК СуммаБезСкидки,
	|		ЗаказКлиента.СуммаНДС                    КАК СуммаНДС,
	|		ЗаказКлиента.НомерСтроки                 КАК НомерСтроки
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В (&МассивДокументов)
	|		И ЗаказКлиента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	
	|	) КАК ВложенныйЗапрос
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                              КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                        КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное     КАК ТоварНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                    КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование       КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                    КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное   КАК Характеристика,
	|	ВложенныйЗапрос.СтавкаНДС                           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена								КАК Цена,
	|	ВложенныйЗапрос.Количество                          КАК Количество,
	|	ВложенныйЗапрос.Сумма								КАК Сумма,
	|	ВложенныйЗапрос.СуммаСкидки                         КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки                      КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.СуммаНДС							КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                         КАК НомерСтроки,
	|	Ложь                                                КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		ПеремещениеТоваров.Ссылка КАК Ссылка,
	|		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|
	|		ВЫБОР КОГДА ПеремещениеТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			ПеремещениеТоваров.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|
	|		ВЫБОР КОГДА ПеремещениеТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			ПеремещениеТоваров.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		0 												КАК ПроцентСкидки,
	|		ПеремещениеТоваров.Характеристика             	КАК Характеристика,
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)        	КАК СтавкаНДС,
	|		0                        						КАК Цена,
	|		ПеремещениеТоваров.КоличествоУпаковок          	КАК Количество,
	|		0                      							КАК Сумма,
	|		0   											КАК СуммаСкидки,
	|		0   											КАК СуммаБезСкидки,
	|		0                   							КАК СуммаНДС,
	|		ПеремещениеТоваров.НомерСтроки                 	КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка В (&МассивДокументов)
	|		И ПеремещениеТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	
	|	) КАК ВложенныйЗапрос
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка
	|");

	Запрос.УстановитьПараметр("МассивДокументов", 	МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаДоллар", Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидАдресаПартнера", Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	Запрос.УстановитьПараметр("ТипАдресаПартнера", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдресаСклада", Справочники.ВидыКонтактнойИнформации.АдресСклада);
	Запрос.УстановитьПараметр("ТипАдресаСклада", Перечисления.ТипыКонтактнойИнформации.Адрес);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиАктВыполненныхРаботКТСПомощь(ПараметрыПечати, МассивОбъектов)
                          
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	                      |	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
	                      |	РеализацияТоваровУслуг.Партнер КАК Заказчик,
	                      |	ЕСТЬNULL(Лояльность_НомераТелефонов.НомерТелефона, """") КАК НомерТелефона
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Лояльность_НомераТелефонов КАК Лояльность_НомераТелефонов
	                      |		ПО РеализацияТоваровУслуг.Партнер = Лояльность_НомераТелефонов.Партнер
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Ссылка В(&ДокументСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура,
	                      |	РеализацияТоваровУслугТовары.Количество,
	                      |	РеализацияТоваровУслугТовары.Цена,
	                      |	РеализацияТоваровУслугТовары.Сумма
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка В(&ДокументСсылка)
	                      |	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
						  |	БанковскиеСчетаОрганизаций.НазваниеОрганизации КАК Подрядчик,
	                      |	ЕСТЬNULL(Организации.НаименованиеПолное, """") КАК АдресОрганизации
	                      |ИЗ
	                      |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	                      |		ПО БанковскиеСчетаОрганизаций.Владелец = Организации.Ссылка
	                      |ГДЕ
	                      |	БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет");
						  
	Запрос.УстановитьПараметр("ДокументСсылка", МассивОбъектов);
	//Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	//Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("91f45981-0c03-11e2-9d4d-001e673c80fc")));
	Запрос.УстановитьПараметр("БанковскийСчет", ПараметрыПечати.БанковскийСчет);
	Запрос.УстановитьПараметр("ТипАдресОрганизации", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	
	РезультатЗапроса  	= Запрос.ВыполнитьПакет();
	
	ВыборкаРеализация 	= РезультатЗапроса[0].Выбрать();
	ТЗТовары          	= РезультатЗапроса[1].Выгрузить();
	ВыборкаОрганизация  = РезультатЗапроса[2].Выбрать();
	ДанныеДляПечати   	= Новый Структура("ДатаДокумента, НомерДокумента, ТекущаяДата, Заказчик, НомерТелефона, Товары, НомерСчета, Подрядчик, АдресОрганизации");
		
	Если ВыборкаРеализация.Следующий() Тогда  
		ЗаполнитьЗначенияСвойств(ДанныеДляПечати, ВыборкаРеализация); 		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Товары", ТЗТовары);
	ДанныеДляПечати.Вставить("ТекущаяДата", ТекущаяДата());
	
	Если ВыборкаОрганизация.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеДляПечати, ВыборкаОрганизация);
	КонецЕсли;
	
	ДанныеДляПечати.АдресОрганизации = СтрЗаменить(ДанныеДляПечати.АдресОрганизации, Символы.ПС, " ");
	
	Возврат ДанныеДляПечати;
	
КонецФункции // ПолучитьДанныеДляПечатиАктВыполненныхРаботКТСПомощь()	

Функция ПолучитьДанныеДляПечатиАктСверкиВзаимныхРасчетов(МассивОбъектов)
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(Документы.СверкаВзаиморасчетов.ПустаяСсылка(), МенеджерВременныхТаблиц);	
	КонецЕсли;
	
	ЗапросДанныеДокумента = Новый Запрос;
	ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанныеДокумента.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументСсылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Партнер.НаименованиеПолное КАК ПредставлениеПартнера,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.НаименованиеДляПечати КАК ПредставлениеДоговора,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.КонецПериода КАК КонецПериода,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ДанныеДокумента.ФИОРуководителяКонтрагента КАК ФИОРуководителяКонтрагента,
	|	ДанныеДокумента.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	ДанныеДокумента.РасшифровкаПоЗаказам КАК РасшифровкаПоЗаказам,
	|	ДанныеДокумента.РасшифровкаПоПартнерам КАК РасшифровкаПоПартнерам,
	|	ДанныеДокумента.РасшифровкаПоДоговорам КАК РасшифровкаПоДоговорам
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер";
								   
	ЗапросДанныеДокумента.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выборка = ЗапросДанныеДокумента.Выполнить().Выбрать();
	МенеджерВременныхТаблиц.Закрыть();
	Возврат Выборка;
                          
	
КонецФункции // ПолучитьДанныеДляПечатиАктВыполненныхРаботКТСПомощь()	

Функция ПолучитьДанныеДляПечатнойФормыЭтикеткиПеревозчика(МестаДоставки)
	
	
	ВидТелефонаПользователя = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
    ВидТелефонаОрганизации 	= Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ОрганизацияПоставки		= Справочники.Организации.ПолучитьСсылку(новый УникальныйИдентификатор("0fba8a92-4010-11e0-9f98-001517115d85"));
	                 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МестаПоДокументам.Документ.Распоряжение КАК Распоряжение,
	|	МестаПоДокументам.Место,
	|	ВЫБОР
	|		КОГДА МестаПоДокументам.Документ.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ.Распоряжение КАК Документ.РеализацияТоваровУслуг).Партнер
	|		КОГДА МестаПоДокументам.Документ.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ.Распоряжение КАК Документ.ВозвратТоваровПоставщику).Партнер
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА МестаПоДокументам.Документ.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ.Распоряжение КАК Документ.РеализацияТоваровУслуг).КТС_АдресДоставки
	|		КОГДА МестаПоДокументам.Документ.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ.Распоряжение КАК Документ.ВозвратТоваровПоставщику).КТС_АдресДоставки
	|	КОНЕЦ КАК АдресПеревозчика,
	|	МестаПоДокументам.СтатусДокумента
	|ПОМЕСТИТЬ КешРаспоряжений
	|ИЗ
	|	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	|ГДЕ
	|	МестаПоДокументам.Место В(&МестаДоставки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешРаспоряжений.Место,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.Регистратор,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.ОтделениеНовойПочты КАК АдресПолучателя,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.АдресДоставки КАК АдресПеревозчика,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.КонтактноеЛицо КАК ФИОПолучателя,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.ОбъявленнаяСтоимость КАК ОбъявленнаяСтоимость,
	|	ВЫБОР
	|		КОГДА Маршруты_ДокументыПоМаршрутамСрезПоследних.ПлатитПолучатель
	|			ТОГДА ""Получатель""
	|		ИНАЧЕ ""Отправитель""
	|	КОНЕЦ КАК ПлатитПолучатель,
	|	КешРаспоряжений.Партнер,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.ВозвратнаяДоставка
	|ПОМЕСТИТЬ КешПолучателя
	|ИЗ
	|	КешРаспоряжений КАК КешРаспоряжений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК Маршруты_ДокументыПоМаршрутамСрезПоследних
	|		ПО ((ВЫРАЗИТЬ(КешРаспоряжений.Распоряжение КАК Документ.ВозвратТоваровПоставщику)) = (ВЫРАЗИТЬ(Маршруты_ДокументыПоМаршрутамСрезПоследних.Регистратор КАК Документ.ВозвратТоваровПоставщику)))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КешРаспоряжений.Место,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.Регистратор,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.ОтделениеНовойПочты,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.АдресДоставки,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.КонтактноеЛицо,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.ОбъявленнаяСтоимость,
	|	ВЫБОР
	|		КОГДА Маршруты_ДокументыПоМаршрутамСрезПоследних.ПлатитПолучатель
	|			ТОГДА ""Получатель""
	|		ИНАЧЕ ""Отправитель""
	|	КОНЕЦ,
	|	КешРаспоряжений.Партнер,
	|	Маршруты_ДокументыПоМаршрутамСрезПоследних.ВозвратнаяДоставка
	|ИЗ
	|	КешРаспоряжений КАК КешРаспоряжений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Маршруты_ДокументыПоМаршрутам КАК Маршруты_ДокументыПоМаршрутамСрезПоследних
	|		ПО ((ВЫРАЗИТЬ(КешРаспоряжений.Распоряжение КАК Документ.РеализацияТоваровУслуг)) = (ВЫРАЗИТЬ(Маршруты_ДокументыПоМаршрутамСрезПоследних.Регистратор КАК Документ.РеализацияТоваровУслуг)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешРаспоряжений.Распоряжение,
	|	КешРаспоряжений.Место,
	|	ВЫБОР
	|		КОГДА КешРаспоряжений.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.Менеджер
	|		КОГДА КешРаспоряжений.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВозвратТоваровПоставщику.Подразделение.ТекущийРуководитель
	|	КОНЕЦ КАК ФИООтправитель,
	|	ВЫБОР
	|		КОГДА КешРаспоряжений.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		КОГДА КешРаспоряжений.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВозвратТоваровПоставщику.Организация
	|	КОНЕЦ КАК Ссылка,
	|	ВЫРАЗИТЬ(&ОрганизацияПоставки КАК Справочник.Организации).НаименованиеПолное КАК Организация,
	|	ВЫРАЗИТЬ(&ОрганизацияПоставки КАК Справочник.Организации) КАК ОрганизацияСсылка
	|ПОМЕСТИТЬ КешОтправитель
	|ИЗ
	|	КешРаспоряжений КАК КешРаспоряжений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО КешРаспоряжений.Распоряжение = ВозвратТоваровПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО КешРаспоряжений.Распоряжение = РеализацияТоваровУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК ТелефонОрганизации,
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Организации
	|ПОМЕСТИТЬ КешТелефонОтправителя
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &ОрганизацияПоставки
	|	И ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартнерыКонтактнаяИнформация.Представление КАК ТелефонПолучателя,
	|	ПартнерыКонтактнаяИнформация.Тип,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер
	|ПОМЕСТИТЬ КешТелефонПолучателя
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				КешРаспоряжений.Партнер
	|			ИЗ
	|				КешРаспоряжений КАК КешРаспоряжений)
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешРаспоряжений.Распоряжение,
	|	КешРаспоряжений.Место,
	|	КешРаспоряжений.Партнер,
	|	КешРаспоряжений.АдресПеревозчика,
	|	МестаНоменклатуры.Номенклатура,
	|	МестаНоменклатуры.Количество
	|ПОМЕСТИТЬ КешНоменклатура
	|ИЗ
	|	КешРаспоряжений КАК КешРаспоряжений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	|		ПО КешРаспоряжений.Место = МестаНоменклатуры.Место
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.ПроцентРучнойСкидки + РеализацияТоваровУслугТовары.ПроцентАвтоматическойСкидки КАК Скидка,
	|	РеализацияТоваровУслугТовары.Ссылка КАК РТУСсылка,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Ссылка) КАК СсылкаПредставление
	|ПОМЕСТИТЬ СкидкиРТУ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				КешРаспоряжений.Распоряжение
	|			ИЗ
	|				КешРаспоряжений КАК КешРаспоряжений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешНоменклатура.Распоряжение,
	|	КешНоменклатура.Место,
	|	КешНоменклатура.Партнер,
	|	КешНоменклатура.АдресПеревозчика,
	|	КешНоменклатура.Номенклатура,
	|	КешНоменклатура.Количество,
	|	ВЫБОР
	|		КОГДА КешНоменклатура.Распоряжение ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		КОГДА КешНоменклатура.Распоряжение ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВозвратТоваровПоставщикуТовары.Цена
	|	КОНЕЦ КАК ЦенаДок,
	|	СкидкиРТУ.Скидка КАК Скидка
	|ПОМЕСТИТЬ КешНоменлкатураИзСкидками
	|ИЗ
	|	КешНоменклатура КАК КешНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО КешНоменклатура.Номенклатура = ВозвратТоваровПоставщикуТовары.Номенклатура
	|			И ((ВЫРАЗИТЬ(КешНоменклатура.Распоряжение КАК Документ.ВозвратТоваровПоставщику)) = (ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Ссылка КАК Документ.ВозвратТоваровПоставщику)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО КешНоменклатура.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|			И ((ВЫРАЗИТЬ(КешНоменклатура.Распоряжение КАК Документ.РеализацияТоваровУслуг)) = (ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка КАК Документ.РеализацияТоваровУслуг)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкидкиРТУ КАК СкидкиРТУ
	|		ПО КешНоменклатура.Номенклатура = СкидкиРТУ.Номенклатура
	|			И ((ВЫРАЗИТЬ(КешНоменклатура.Распоряжение КАК Документ.РеализацияТоваровУслуг)) = (ВЫРАЗИТЬ(СкидкиРТУ.РТУСсылка КАК Документ.РеализацияТоваровУслуг)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешНоменлкатураИзСкидками.Место,
	|	КешНоменлкатураИзСкидками.Партнер,
	|	КешНоменлкатураИзСкидками.АдресПеревозчика,
	|	КешНоменлкатураИзСкидками.Номенклатура,
	|	КешНоменлкатураИзСкидками.Количество,
	|	КешНоменлкатураИзСкидками.ЦенаДок,
	|	КешНоменлкатураИзСкидками.Скидка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КешНоменлкатураИзСкидками.Скидка, 0) <> 0
	|			ТОГДА КешНоменлкатураИзСкидками.Количество * КешНоменлкатураИзСкидками.ЦенаДок * (1 - КешНоменлкатураИзСкидками.Скидка / 100)
	|		ИНАЧЕ КешНоменлкатураИзСкидками.Количество * КешНоменлкатураИзСкидками.ЦенаДок
	|	КОНЕЦ КАК СуммаНоменклатуры
	|ПОМЕСТИТЬ КешНоменклатураССуммой
	|ИЗ
	|	КешНоменлкатураИзСкидками КАК КешНоменлкатураИзСкидками
	|ГДЕ
	|	ЕСТЬNULL(КешНоменлкатураИзСкидками.ЦенаДок, 0) <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КешНоменлкатураИзСкидками.Место,
	|	КешНоменлкатураИзСкидками.Партнер,
	|	КешНоменлкатураИзСкидками.АдресПеревозчика,
	|	КешНоменлкатураИзСкидками.Номенклатура,
	|	КешНоменлкатураИзСкидками.Количество,
	|	КешНоменлкатураИзСкидками.ЦенаДок,
	|	КешНоменлкатураИзСкидками.Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КешПолучателя.АдресПолучателя,
	|	КешПолучателя.АдресПеревозчика,
	|	КешПолучателя.ФИОПолучателя,
	|	КешПолучателя.ОбъявленнаяСтоимость КАК ОбъявленнаяСтоимость,
	|	КешПолучателя.ПлатитПолучатель,
	|	КешТелефонПолучателя.ТелефонПолучателя,
	|	КешПолучателя.Место,
	|	КешТелефонОтправителя.ТелефонОрганизации,
	|	ВЫБОР
	|		КОГДА КешПолучателя.ВозвратнаяДоставка
	|			ТОГДА ""X""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВозвратнаяДоставка,
	|	КешНоменклатураССуммой.Номенклатура,
	|	ВЫБОР
	|		КОГДА КешПолучателя.ВозвратнаяДоставка
	|			ТОГДА КешНоменклатураССуммой.СуммаНоменклатуры
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВД,
	|	КешТелефонОтправителя.Организации КАК Организация
	|ПОМЕСТИТЬ КешЕтикетки
	|ИЗ
	|	КешПолучателя КАК КешПолучателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешТелефонПолучателя КАК КешТелефонПолучателя
	|		ПО КешПолучателя.Партнер = КешТелефонПолучателя.Партнер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешНоменклатураССуммой КАК КешНоменклатураССуммой
	|		ПО КешПолучателя.Место = КешНоменклатураССуммой.Место
	|		ЛЕВОЕ СОЕДИНЕНИЕ КешТелефонОтправителя КАК КешТелефонОтправителя
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешЕтикетки.АдресПолучателя,
	|	КешЕтикетки.АдресПеревозчика,
	|	КешЕтикетки.ФИОПолучателя,
	|	КешЕтикетки.ПлатитПолучатель,
	|	КешЕтикетки.ТелефонПолучателя,
	|	КешЕтикетки.Место,
	|	КешЕтикетки.ТелефонОрганизации,
	|	КешЕтикетки.ВозвратнаяДоставка,
	|	КешЕтикетки.ОбъявленнаяСтоимость КАК ОбъявленнаяСтоимость,
	|	СУММА(КешЕтикетки.СуммаВД) КАК СуммаВД,
	|	КешЕтикетки.Организация.НаименованиеПолное КАК Организация
	|ПОМЕСТИТЬ КешОбъявленная
	|ИЗ
	|	КешЕтикетки КАК КешЕтикетки
	|
	|СГРУППИРОВАТЬ ПО
	|	КешЕтикетки.АдресПолучателя,
	|	КешЕтикетки.АдресПеревозчика,
	|	КешЕтикетки.ФИОПолучателя,
	|	КешЕтикетки.ПлатитПолучатель,
	|	КешЕтикетки.ТелефонПолучателя,
	|	КешЕтикетки.Место,
	|	КешЕтикетки.ТелефонОрганизации,
	|	КешЕтикетки.ВозвратнаяДоставка,
	|	КешЕтикетки.Организация.НаименованиеПолное,
	|	КешЕтикетки.ОбъявленнаяСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КешОбъявленная.АдресПолучателя,
	|	КешОбъявленная.АдресПеревозчика,
	|	КешОбъявленная.ФИОПолучателя,
	|	КешОбъявленная.ПлатитПолучатель,
	|	КешОбъявленная.ТелефонПолучателя,
	|	КешОбъявленная.Место,
	|	КешОбъявленная.ТелефонОрганизации,
	|	КешОбъявленная.ВозвратнаяДоставка,
	|	СУММА(КешОбъявленная.ОбъявленнаяСтоимость) КАК ОбъявленнаяСтоимость,
	|	КешОбъявленная.СуммаВД,
	|	КешОбъявленная.Организация
	|ИЗ
	|	КешОбъявленная КАК КешОбъявленная
	|
	|СГРУППИРОВАТЬ ПО
	|	КешОбъявленная.Организация,
	|	КешОбъявленная.ВозвратнаяДоставка,
	|	КешОбъявленная.ПлатитПолучатель,
	|	КешОбъявленная.Место,
	|	КешОбъявленная.ТелефонОрганизации,
	|	КешОбъявленная.ТелефонПолучателя,
	|	КешОбъявленная.ФИОПолучателя,
	|	КешОбъявленная.АдресПеревозчика,
	|	КешОбъявленная.АдресПолучателя,
	|	КешОбъявленная.СуммаВД");
	
	Запрос.УстановитьПараметр("МестаДоставки", МестаДоставки);
	Запрос.УстановитьПараметр("ВидТелефонаПользователя",ВидТелефонаПользователя);
	Запрос.УстановитьПараметр("ВидТелефонаОрганизации",ВидТелефонаОрганизации);
	Запрос.УстановитьПараметр("ОрганизацияПоставки", ОрганизацияПоставки);

	ЗапросРезультат =Запрос.Выполнить();

	Возврат ЗапросРезультат;

	
КонецФункции

Функция ПолучитьПолучитьДанныеДляПечатнойФормыИспользованныеДеталиИУслугиПоЗаказу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст =  ПолучитьТекстЗапросаИспользованныеДеталиИУслугиПоЗаказу();
	Запрос.УстановитьПараметр("Ссылка", 	ДокументСсылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат МассивРезультатов;	
КонецФункции //ПолучитьПолучитьДанныеДляПечатнойФормыИспользованныеДеталиИУслугиПоЗаказу

Функция ПолучитьДанныеАктНаЗаменуТовара(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 				= Новый Запрос;
	Запрос.Текст		= ПолучитьТекстЗапросаДанныеАктНаЗаменуТовара(); 
	Запрос.УстановитьПараметр("Ссылка", Объект);
	РезультатЗапроса	= Запрос.ВыполнитьПакет();
	Возврат РезультатЗапроса;
	
КонецФункции // ()

Функция ПолучитьТекстЗапросаДанныеАктНаЗаменуТовара()
	ТекстЗапроса = 	"ВЫБРАТЬ
	               	|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
	               	|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
	               	|	ВозвратТоваровОтКлиентаТовары.Упаковка,
	               	|	ВозвратТоваровОтКлиентаТовары.Количество,
	               	|	ВЫРАЗИТЬ(ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК Документ.РеализацияТоваровУслуг) КАК РеализацияТоваровУслуг,
	               	|	ВЫРАЗИТЬ(ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентру,
	               	|	ВозвратТоваровОтКлиентаТовары.Ссылка
	               	|ПОМЕСТИТЬ Товары
	               	|ИЗ
	               	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	               	|ГДЕ
	               	|	ВозвратТоваровОтКлиентаТовары.Ссылка = &Ссылка
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ВозвратТоваровОтКлиента.Партнер КАК Партнер,
	               	|	ВозвратТоваровОтКлиента.Номер КАК Номер,
	               	|	ВозвратТоваровОтКлиента.Дата КАК Дата,
	               	|	ВЫРАЗИТЬ(ВозвратТоваровОтКлиента.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентру,
	               	|	ВЫРАЗИТЬ(ВозвратТоваровОтКлиента.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаявкаСервисногоЦентра.Номер КАК НомерЗСЦ,
	               	|	ВЫРАЗИТЬ(ВозвратТоваровОтКлиента.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ЗаявкаСервисногоЦентра.Дата КАК ДатаЗСЦ,
	               	|	ВозвратТоваровОтКлиента.Ссылка КАК Документ,
	               	|	ВозвратТоваровОтКлиента.Партнер.Представление КАК ПартнерПредставление
	               	|ИЗ
	               	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               	|ГДЕ
	               	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	Товары.Номенклатура.Код КАК Код,
	               	|	Товары.Номенклатура КАК Номенклатура,
	               	|	Товары.КоличествоУпаковок КАК Количество,
	               	|	ВЫБОР
	               	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	               	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	               	|	КОНЕЦ КАК ЕдиницаИзмерения,
	               	|	ГНАТ_ЗаявкиСервисногоЦентра.СерийныйНомер КАК СерийныйНомер
	               	|ПОМЕСТИТЬ ТоварыССерийнымНаОснованииРТУ
	               	|ИЗ
	               	|	Товары КАК Товары
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЗаявкиСервисногоЦентра КАК ГНАТ_ЗаявкиСервисногоЦентра
	               	|		ПО Товары.ЗаявкаСервисногоЦентру = ГНАТ_ЗаявкиСервисногоЦентра.Регистратор
	               	|			И Товары.Номенклатура = ГНАТ_ЗаявкиСервисногоЦентра.Номенклатура
	               	|ГДЕ
	               	|	НЕ Товары.ЗаявкаСервисногоЦентру = ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	СерийныеНомераНоменклатурыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               	|	СУММА(СерийныеНомераНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоОстаток,
	               	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СерийныеНомераНоменклатурыОстаткиИОбороты.СерийныеНомера) КАК КоличествоСН
	               	|ПОМЕСТИТЬ КоличествоСерийныхНомеров
	               	|ИЗ
	               	|	Товары КАК Товары
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.ОстаткиИОбороты(
	               	|				,
	               	|				,
	               	|				Регистратор,
	               	|				,
	               	|				Номенклатура В
	               	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|						Товары.Номенклатура
	               	|					ИЗ
	               	|						Товары КАК Товары)) КАК СерийныеНомераНоменклатурыОстаткиИОбороты
	               	|		ПО Товары.Номенклатура = СерийныеНомераНоменклатурыОстаткиИОбороты.Номенклатура
	               	|			И Товары.Ссылка = СерийныеНомераНоменклатурыОстаткиИОбороты.Регистратор.Распоряжение
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	СерийныеНомераНоменклатурыОстаткиИОбороты.Номенклатура
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	Товары.Номенклатура.Код КАК Код,
	               	|	Товары.Номенклатура КАК Номенклатура,
	               	|	ВЫБОР
	               	|		КОГДА ЕСТЬNULL(СерийныеНомераНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток, 0) = 0
	               	|			ТОГДА Товары.КоличествоУпаковок
	               	|		ИНАЧЕ СерийныеНомераНоменклатурыОстаткиИОбороты.КоличествоКонечныйОстаток
	               	|	КОНЕЦ КАК Количество,
	               	|	ВЫБОР
	               	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	               	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	               	|	КОНЕЦ КАК ЕдиницаИзмерения,
	               	|	СерийныеНомераНоменклатурыОстаткиИОбороты.СерийныеНомера КАК СерийныйНомер
	               	|ПОМЕСТИТЬ ТоварыССерийнымБезОснованииДокумента
	               	|ИЗ
	               	|	Товары КАК Товары
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.ОстаткиИОбороты(
	               	|				,
	               	|				,
	               	|				Регистратор,
	               	|				,
	               	|				Номенклатура В
	               	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|						Товары.Номенклатура
	               	|					ИЗ
	               	|						Товары КАК Товары)) КАК СерийныеНомераНоменклатурыОстаткиИОбороты
	               	|		ПО Товары.Номенклатура = СерийныеНомераНоменклатурыОстаткиИОбороты.Номенклатура
	               	|			И Товары.Ссылка = СерийныеНомераНоменклатурыОстаткиИОбороты.Регистратор.Распоряжение
	               	|ГДЕ
	               	|	ЕСТЬNULL(Товары.ЗаявкаСервисногоЦентру, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ
	               	|	Товары.Номенклатура.Код,
	               	|	Товары.Номенклатура,
	               	|	Товары.КоличествоУпаковок - ЕСТЬNULL(ТоварыОприходование.КоличествоОстаток, 0),
	               	|	ВЫБОР
	               	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	               	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	               	|	КОНЕЦ,
	               	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомераНоменклатуры.ПустаяСсылка)
	               	|ИЗ
	               	|	Товары КАК Товары
	               	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоСерийныхНомеров КАК ТоварыОприходование
	               	|		ПО Товары.Номенклатура = ТоварыОприходование.Номенклатура
	               	|			И (Товары.КоличествоУпаковок - ЕСТЬNULL(ТоварыОприходование.КоличествоОстаток, 0) > 0)
	               	|ГДЕ
	               	|	ЕСТЬNULL(Товары.ЗаявкаСервисногоЦентру, ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ТоварыССерийнымНаОснованииРТУ.Код КАК Код,
	               	|	ТоварыССерийнымНаОснованииРТУ.Номенклатура КАК Номенклатура,
	               	|	ТоварыССерийнымНаОснованииРТУ.Количество КАК Количество,
	               	|	ТоварыССерийнымНаОснованииРТУ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               	|	ТоварыССерийнымНаОснованииРТУ.СерийныйНомер КАК СерийныйНомер
	               	|ПОМЕСТИТЬ ДокументыБезОснованияРТУ
	               	|ИЗ
	               	|	ТоварыССерийнымНаОснованииРТУ КАК ТоварыССерийнымНаОснованииРТУ
	               	|
	               	|ОБЪЕДИНИТЬ ВСЕ
	               	|
	               	|ВЫБРАТЬ
	               	|	ТоварыССерийнымБезОснованииДокумента.Код,
	               	|	ТоварыССерийнымБезОснованииДокумента.Номенклатура,
	               	|	ТоварыССерийнымБезОснованииДокумента.Количество,
	               	|	ТоварыССерийнымБезОснованииДокумента.ЕдиницаИзмерения,
	               	|	ТоварыССерийнымБезОснованииДокумента.СерийныйНомер
	               	|ИЗ
	               	|	ТоварыССерийнымБезОснованииДокумента КАК ТоварыССерийнымБезОснованииДокумента
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ДокументыБезОснованияРТУ.Код,
	               	|	ДокументыБезОснованияРТУ.Номенклатура,
	               	|	СУММА(ДокументыБезОснованияРТУ.Количество) КАК Количество,
	               	|	ДокументыБезОснованияРТУ.ЕдиницаИзмерения,
	               	|	ДокументыБезОснованияРТУ.СерийныйНомер
	               	|ИЗ
	               	|	ДокументыБезОснованияРТУ КАК ДокументыБезОснованияРТУ
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	ДокументыБезОснованияРТУ.Код,
	               	|	ДокументыБезОснованияРТУ.Номенклатура,
	               	|	ДокументыБезОснованияРТУ.ЕдиницаИзмерения,
	               	|	ДокументыБезОснованияРТУ.СерийныйНомер";
	Возврат ТекстЗапроса;
КонецФункции // ()

Функция ПолучитьДанныеДляПечатиЗаказНаряд_Квитанции(Объект)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 				= Новый Запрос;
	Запрос.Текст		= ПолучитьТекстЗапросаДанныеЗаказНаряд_Квитанции(); 
	Запрос.УстановитьПараметр("Ссылка", Объект);
	РезультатЗапроса	= Запрос.ВыполнитьПакет();
	Возврат РезультатЗапроса;
КонецФункции // ПолучитьДанныеДляПечатиЗаказНаряд_Квитанции()

Функция ПолучитьТекстЗапросаДанныеЗаказНаряд_Квитанции()
	
	ТекстЗапроса	="ВЫБРАТЬ
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Склад,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Номер,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Дата,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Номенклатура,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.СерийныйНомер,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.ВидОперации,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.РеализацияТоваровУслуг.Дата КАК ДатаПокупки,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.ЗаявленыйДефект,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Комплектность,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.ВнешнийВид,
	            	 |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Комментарий,
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Номенклатура.Производитель КАК Бренд
	            	 |ПОМЕСТИТЬ ЗаявкаСЦ
	            	 |ИЗ
	            	 |	Документ.ГНАТ_ЗаявкаСервисногоЦентра КАК ГНАТ_ЗаявкаСервисногоЦентра
	            	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
	            	 |		ПО ГНАТ_ЗаявкаСервисногоЦентра.Ссылка = ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра
	            	 |ГДЕ
	            	 |	ГНАТ_ЗаявкаСервисногоЦентра.Ссылка = &Ссылка
	            	 |;
	            	 |
	            	 |////////////////////////////////////////////////////////////////////////////////
	            	 |ВЫБРАТЬ
	            	 |	СкладыТелефон.Представление КАК ТелефонСклада,
	            	 |	ЕСТЬNULL(СкладыАдрес.Представление, """") КАК АдресСклада,
	            	 |	ЕСТЬNULL(ЗаявкаСЦ.Склад, """") КАК Склад
	            	 |ПОМЕСТИТЬ ИнформацияОСкладе
	            	 |ИЗ
	            	 |	ЗаявкаСЦ КАК ЗаявкаСЦ
	            	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыТелефон
	            	 |		ПО ЗаявкаСЦ.Склад = СкладыТелефон.Ссылка
	            	 |			И (СкладыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСклада))
	            	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыАдрес
	            	 |		ПО ЗаявкаСЦ.Склад = СкладыАдрес.Ссылка
	            	 |			И (СкладыАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	            	 |;
	            	 |
	            	 |////////////////////////////////////////////////////////////////////////////////
	            	 |ВЫБРАТЬ
	            	 |	ЗаявкаСЦ.ЗаказчикРемонта,
	            	 |	ЕСТЬNULL(АдресПартнера.Представление, """") КАК АдресКонтрагента,
	            	 |	ЕСТЬNULL(ПочтаПартнера.Представление, """") КАК АдресЭлектроннойПочты
	            	 |ПОМЕСТИТЬ ИнформацияОПартнере
	            	 |ИЗ
	            	 |	ЗаявкаСЦ КАК ЗаявкаСЦ
	            	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК АдресПартнера
	            	 |		ПО ЗаявкаСЦ.ЗаказчикРемонта = АдресПартнера.Ссылка
	            	 |			И (АдресПартнера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера))
	            	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПочтаПартнера
	            	 |		ПО ЗаявкаСЦ.ЗаказчикРемонта = ПочтаПартнера.Ссылка
	            	 |			И (ПочтаПартнера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера))
	            	 |;
	            	 |
	            	 |////////////////////////////////////////////////////////////////////////////////
	            	 |ВЫБРАТЬ ПЕРВЫЕ 1
	            	 |	ЗаявкаСЦ.Склад,
	            	 |	ЗаявкаСЦ.Номер,
	            	 |	ЗаявкаСЦ.Дата,
	            	 |	ЗаявкаСЦ.ЗаказчикРемонта,
	            	 |	ЗаявкаСЦ.Номенклатура,
	            	 |	ЗаявкаСЦ.СерийныйНомер,
	            	 |	ЗаявкаСЦ.ВидОперации,
	            	 |	ВЫБОР
	            	 |		КОГДА ЗаявкаСЦ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ГНАТ)
	            	 |			ТОГДА ""Гарантійний ремонт""
	            	 |		КОГДА ЗаявкаСЦ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Авторизация)
	            	 |			ТОГДА ""Авторизований ремонт""
	            	 |		КОГДА ЗаявкаСЦ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйБезналичный)
	            	 |			ТОГДА ""Платний ремонт (безготівковий розрахунок)""
	            	 |		КОГДА ЗаявкаСЦ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный)
	            	 |			ТОГДА ""Платний ремонт""
	            	 |		КОГДА ЗаявкаСЦ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.КВыяснению)
	            	 |			ТОГДА ""Прийнято до з'ясування. Ремонт здійснюватись не буде.""
	            	 |		ИНАЧЕ ""Прийнято до з'ясування. Ремонт здійснюватись не буде.""
	            	 |	КОНЕЦ КАК ВидОперацииДляПечати,
	            	 |	ЗаявкаСЦ.ДатаПокупки,
	            	 |	ЗаявкаСЦ.ЗаявленыйДефект,
	            	 |	ЗаявкаСЦ.Комплектность,
	            	 |	ЗаявкаСЦ.ВнешнийВид,
	            	 |	ЗаявкаСЦ.Комментарий,
	            	 |	ЗаявкаСЦ.Бренд,
	            	 |	ИнформацияОПартнере.АдресКонтрагента,
	            	 |	ИнформацияОПартнере.АдресЭлектроннойПочты,
	            	 |	ИнформацияОСкладе.АдресСклада,
	            	 |	ИнформацияОСкладе.ТелефонСклада
	            	 |ИЗ
	            	 |	ЗаявкаСЦ КАК ЗаявкаСЦ
	            	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнформацияОПартнере КАК ИнформацияОПартнере
	            	 |		ПО ЗаявкаСЦ.ЗаказчикРемонта = ИнформацияОПартнере.ЗаказчикРемонта
	            	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнформацияОСкладе КАК ИнформацияОСкладе
	            	 |		ПО ЗаявкаСЦ.Склад = ИнформацияОСкладе.Склад";	
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаДанныеЗаказНаряд_Квитанции()

Функция ПолучитьДанныеДляПечатиТоварныйЧекДляПеремещенияОтгрузкаМест(МестоДоставки)

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТоварныйЧекДляПеремещенияОтгрузкаМест();
	
	Запрос.УстановитьПараметр("Место", МестоДоставки);  
	Запрос.УстановитьПараметр("РозничнаяЦена", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ДополнительныйРеквизитГарантия", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("a3e0fd0e-4712-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТипКонтакнойИнформацииАдресСклада", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидКонтакнойИнформацииАдресСклада", Справочники.ВидыКонтактнойИнформации.АдресСклада);
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции // ПолучитьДанныеДляПечатиТоварныйЧекДляПеремещенияОтгрузкаМест()

Функция ПолучитьТекстЗапросаТоварныйЧекДляПеремещенияОтгрузкаМест()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.РасходныйОрдерНаТовары
	               |			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.РасходныйОрдерНаТовары).Распоряжение
	               |		КОГДА МестаПоДокументам.Документ ССЫЛКА Документ.КТС_ОтгрузкаТоваров
	               |			ТОГДА ВЫРАЗИТЬ(МестаПоДокументам.Документ КАК Документ.КТС_ОтгрузкаТоваров).Распоряжение
	               |	КОНЕЦ КАК ДокументОтгрузки
	               |ПОМЕСТИТЬ ВсеДокументыОтгрузки
	               |ИЗ
	               |	РегистрСведений.МестаПоДокументам КАК МестаПоДокументам
	               |ГДЕ
	               |	МестаПоДокументам.Место = &Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ВсеДокументыОтгрузки.ДокументОтгрузки КАК Документ.ПеремещениеТоваров) КАК ДокументОтгрузки
	               |ПОМЕСТИТЬ ДокументыОтгрузки
	               |ИЗ
	               |	ВсеДокументыОтгрузки КАК ВсеДокументыОтгрузки
	               |ГДЕ
	               |	ВсеДокументыОтгрузки.ДокументОтгрузки ССЫЛКА Документ.ПеремещениеТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВсеДокументыОтгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДокументыОтгрузки.ДокументОтгрузки.СкладОтправитель
	               |ПОМЕСТИТЬ СкладыОтправители
	               |ИЗ
	               |	ДокументыОтгрузки КАК ДокументыОтгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СкладыКонтактнаяИнформация.Ссылка КАК Склад,
	               |	СкладыКонтактнаяИнформация.Представление КАК АдресСклада
	               |ИЗ
	               |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыОтправители КАК СкладыОтправители
	               |		ПО СкладыКонтактнаяИнформация.Ссылка = СкладыОтправители.ДокументОтгрузкиСкладОтправитель
	               |			И (СкладыКонтактнаяИнформация.Тип = &ТипКонтакнойИнформацииАдресСклада)
	               |			И (СкладыКонтактнаяИнформация.Вид = &ВидКонтакнойИнформацииАдресСклада)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СкладыОтправители
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыОтгрузки.ДокументОтгрузки.СкладОтправитель.ТекущийОтветственный.Представление КАК Покупатель
	               |ИЗ
	               |	ДокументыОтгрузки КАК ДокументыОтгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МестаНоменклатуры.Номенклатура,
	               |	СУММА(МестаНоменклатуры.Количество) КАК Количество
	               |ПОМЕСТИТЬ ТалицаНоменклатуры
	               |ИЗ
	               |	РегистрСведений.МестаНоменклатуры КАК МестаНоменклатуры
	               |ГДЕ
	               |	МестаНоменклатуры.Место = &Место
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МестаНоменклатуры.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МестаСерийныеНомераНоменклатуры.Номенклатура,
	               |	МестаСерийныеНомераНоменклатуры.СерийныйНомер
	               |ИЗ
	               |	РегистрСведений.МестаСерийныеНомераНоменклатуры КАК МестаСерийныеНомераНоменклатуры
	               |ГДЕ
	               |	МестаСерийныеНомераНоменклатуры.Место = &Место
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТалицаНоменклатуры.Номенклатура,
	               |	НоменклатураДополнительныеРеквизиты.Значение КАК Гарантия
	               |ПОМЕСТИТЬ ТаблицаГарантий
	               |ИЗ
	               |	ТалицаНоменклатуры КАК ТалицаНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |		ПО ТалицаНоменклатуры.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	               |			И (НоменклатураДополнительныеРеквизиты.Свойство = &ДополнительныйРеквизитГарантия)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена
	               |ПОМЕСТИТЬ ТаблицаЦенНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&ТекущаяДата,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ТалицаНоменклатуры.Номенклатура
	               |					ИЗ
	               |						ТалицаНоменклатуры КАК ТалицаНоменклатуры)
	               |				И ВидЦены = &РозничнаяЦена) КАК ЦеныНоменклатурыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТалицаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ТалицаНоменклатуры.Количество КАК Количество,
	               |	ЕСТЬNULL(ТаблицаЦенНоменклатуры.Цена, 0) КАК Цена,
	               |	ТалицаНоменклатуры.Количество * ЕСТЬNULL(ТаблицаЦенНоменклатуры.Цена, 0) КАК Сумма,
	               |	ЕСТЬNULL(ТаблицаГарантий.Гарантия, """") КАК Гарантия,
	               |	ТалицаНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения
	               |ИЗ
	               |	ТалицаНоменклатуры КАК ТалицаНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенНоменклатуры КАК ТаблицаЦенНоменклатуры
	               |		ПО ТалицаНоменклатуры.Номенклатура = ТаблицаЦенНоменклатуры.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГарантий КАК ТаблицаГарантий
	               |		ПО ТалицаНоменклатуры.Номенклатура = ТаблицаГарантий.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТалицаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаГарантий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаЦенНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ДокументыОтгрузки.ДокументОтгрузки.Дата) КАК ДатаРеализации
	               |ИЗ
	               |	ДокументыОтгрузки КАК ДокументыОтгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыОтгрузки.ДокументОтгрузки.Номер КАК Номер
	               |ИЗ
	               |	ДокументыОтгрузки КАК ДокументыОтгрузки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаТоварныйЧекДляПеремещенияОтгрузкаМест()

Функция ПолучитьТекстЗапросаИспользованныеДеталиИУслугиПоЗаказу()
    ТекстЗапроса = "ВЫБРАТЬ
                   |    ЗаказКлиентаЗаявкиСервисногоЦентра.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра
                   |ПОМЕСТИТЬ СписокЗСЦ
                   |ИЗ
                   |    Документ.ЗаказКлиента.ЗаявкиСервисногоЦентра КАК ЗаказКлиентаЗаявкиСервисногоЦентра
                   |ГДЕ
                   |    ЗаказКлиентаЗаявкиСервисногоЦентра.Ссылка = &Ссылка
                   |
				   |
				   | ОБЪЕДИНИТЬ ВСЕ
				   |           
				   | ВЫБРАТЬ
				   | 	ЗаказКлиента.ЗаявкаСервисногоЦентра
				   | ИЗ
				   | 	Документ.ЗаказКлиента КАК ЗаказКлиента
				   | ГДЕ
				   | 	ЗаказКлиента.ЗаявкаСервисногоЦентра = &Ссылка
				   |                      
				   | ИНДЕКСИРОВАТЬ ПО
				   | 	ЗаявкаСервисногоЦентра
                   |;
                   |
                   ////////////////////////////////////////////////////////////////////////////////
                   //1
                   |ВЫБРАТЬ
                   |    РеализацияТоваровУслуг.Ссылка КАК РТУ,
                   |    РеализацияТоваровУслуг.ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра
                   |ПОМЕСТИТЬ СписокРТУ
                   |ИЗ
                   |    Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
                   |ГДЕ
                   |    РеализацияТоваровУслуг.ВидПодчиненногоДокументаГНАТ = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыПодчиненныхДокументов.РеализацияЗапчастейУслуг)
                   |    И РеализацияТоваровУслуг.ЗаявкаСервисногоЦентра <> ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка)
                   |    И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
                   |    И РеализацияТоваровУслуг.Проведен = ИСТИНА
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |    РТУ,
                   |    ЗаявкаСервисногоЦентра
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   //2
                   |ВЫБРАТЬ
                   |    СписокРТУ.РТУ КАК РТУ
                   |ПОМЕСТИТЬ СписокРТУПоЗСЦ
                   |ИЗ
                   |    СписокРТУ КАК СписокРТУ
                   |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокЗСЦ КАК СписокЗСЦ
                   |        ПО СписокРТУ.ЗаявкаСервисногоЦентра = СписокЗСЦ.ЗаявкаСервисногоЦентра
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |    РТУ
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   //3
                   |ВЫБРАТЬ
                   |    РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
                   |    ПОДСТРОКА(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное, 0, 512) КАК ТоварНаименованиеПолное,
                   |    РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
                   |    ВЫБОР
                   |        КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
                   |            ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
                   |        ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.ЕдиницаИзмерения
                   |    КОНЕЦ КАК ЕдиницаИзмерения,
                   |    ВЫБОР
                   |        КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
                   |            ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
                   |        ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.ЕдиницаИзмерения.Наименование
                   |    КОНЕЦ КАК ЕдиницаЦены,
                   |    РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
                   |    РеализацияТоваровУслугТовары.Цена КАК Цена,
                   |    РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество
                   |ПОМЕСТИТЬ СписокТоваров
                   |ИЗ
                   |    Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                   |ГДЕ
                   |    РеализацияТоваровУслугТовары.Ссылка В
                   |            (ВЫБРАТЬ
                   |                СписокРТУПоЗСЦ.РТУ
                   |            ИЗ
                   |                СписокРТУПоЗСЦ)
                   |;
                   |
                   |//////////////////////////////////////////////////////////////////////////////
                   // 4
                   |ВЫБРАТЬ
                   |    ЗаказКлиента.Ссылка КАК Ссылка,
                   |    ЗаказКлиента.Партнер КАК Получатель,
                   |    ЗаказКлиента.Партнер.НаименованиеПолное КАК ПредставлениеПолучателя,
                   |    ЗаказКлиента.Дата КАК Дата,
                   |    ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Склад.ТекущийОтветственный) КАК ОтпускПроизвел,
                   |    ЗаказКлиента.Валюта КАК Валюта
                   |ИЗ
                   |    Документ.ЗаказКлиента КАК ЗаказКлиента
                   |ГДЕ
                   |    ЗаказКлиента.Ссылка = &Ссылка
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   // 5
                   |ВЫБРАТЬ
                   |	СписокТоваров.Товар КАК Товар,
                   |	СписокТоваров.ТоварНаименованиеПолное КАК ТоварНаименованиеПолное,
                   |	СписокТоваров.Код КАК Код,
                   |	СписокТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
                   |	СписокТоваров.ЕдиницаЦены КАК ЕдиницаЦены,
                   |	СписокТоваров.Характеристика КАК Характеристика,
                   |	СписокТоваров.Цена КАК Цена,
                   |	СУММА(СписокТоваров.Количество) КАК Количество
                   |ИЗ
                   |	СписокТоваров КАК СписокТоваров
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	СписокТоваров.Товар,
                   |	СписокТоваров.Код,
                   |	СписокТоваров.ТоварНаименованиеПолное,
                   |	СписокТоваров.ЕдиницаИзмерения,
                   |	СписокТоваров.ЕдиницаЦены,
                   |	СписокТоваров.Характеристика,
                   |	СписокТоваров.Цена";
                   
Возврат ТекстЗапроса;
КонецФункции //ПолучитьТекстЗапросаИспользованныеДеталиИУслугиПоЗаказу
 

// ФОРМИРОВАНИЕ ТАБЛИЧНЫХ ДОКУМЕНТОВ

Процедура СформироватьТабличныйДокументЗаказКлиента(ТабличныйДокумент, ДанныеПечати, Тип, ОбъектыПечати)
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ПервыйДокумент = Истина;
	КолонкаКодов   = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Макет = ПолучитьМакет("ПФ_MXL_СчетЗаказ");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказКлиента_СчетЗаказ";
		
		ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыГрафикаОплаты.Выгрузить();
		ТаблицаТовары      = ДанныеПечати.Товары.Выгрузить();
		
		РезультатЕстьСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ВыводитьКоды        = ЗначениеЗаполнено(КолонкаКодов);
		
		Если ТипЗнч(РезультатЕстьСкидки) = Тип("Булево") Тогда
			ЕстьСкидки = РезультатЕстьСкидки;
		ИначеЕсли ТипЗнч(РезультатЕстьСкидки) = Тип("Структура") Тогда
			ЕстьСкидки = РезультатЕстьСкидки.ЕстьСкидки;
		Иначе
			ЕстьСкидки = Ложь;
		КонецЕсли;
			
			
		Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
		ИначеЕсли ЕстьСкидки Или ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
		Иначе
			ОбластьКолонкаТовар = Макет.Область("Товар");
		КонецЕсли;
			
		Если Не ВыводитьКоды Тогда
			
			Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
			ИначеЕсли ЕстьСкидки Или ДанныеПечати.УчитыватьНДС Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
			Иначе
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
		ИначеЕсли ЕстьСкидки Тогда
		
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСНДСИлиСоСкидкой");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
		КонецЕсли;
			
		ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип, ТаблицаЭтапыОплаты);
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товари (послуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
		ИначеЕсли ЕстьСкидки Тогда
		
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСНДСИлиСоСкидкой");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма             = 0;
		СуммаНДС          = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			Если СтрокаТовары.Отменено Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары[КолонкаКодов];
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(СтрокаТовары.НаименованиеПолное, СтрокаТовары.Характеристика);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Сумма          = Сумма          + СтрокаТовары.Сумма;
			СуммаНДС       = СуммаНДС       + СтрокаТовары.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + СтрокаТовары.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЕстьСкидки И ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
		ИначеЕсли ЕстьСкидки Тогда
		
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСНДСИлиСоСкидкой");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ЕстьСкидки Тогда
			
			ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				ОбластьДанных.Параметры.ВсегоСуммаНДС = СуммаНДС;
			КонецЕсли;
		
		КонецЕсли;
		
		ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		
		СоответствиеСтавокНДС = ФормированиеПечатныхФорм.ПолучитьСоответствиеСтавокНДС();
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("СтавкаНДС", ТекСтавкаНДС.Ключ);
				ПараметрыОтбора.Вставить("Отменено",  Ложь);
				НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ТаблицаТоварыНДС = ТаблицаТовары.Скопировать(НайденныеСтроки, "СуммаНДС");
					ТаблицаТоварыНДС.Свернуть(,"СуммаНДС");
					СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.Ключ, ТаблицаТоварыНДС[0].СуммаНДС);
					
					ТабличныйДокумент.Вывести(ОбластьНомера);
					
					Если ВыводитьКоды Тогда
						ТабличныйДокумент.Присоединить(ОбластьКодов);
					КонецЕсли;
					
					ТабличныйДокумент.Присоединить(ОбластьТовар);
					
					ОбластьДанных.Параметры.НДС = ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС);
					ОбластьДанных.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(ТаблицаТоварыНДС[0].СуммаНДС, ,"-");
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ТабличныйДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ОбластьДанных.Параметры.НДС = НСтр("ru='Без податку (ПДВ)'");
			ОбластьДанных.Параметры.ВсегоНДС = "-";
			ТабличныйДокумент.Присоединить(ОбластьДанных);
		КонецЕсли;
		
		// Вывести Сумму прописью
		
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		
		ИтоговаяСтрока = НСтр("ru='Всього найменувань %Количество%, на суму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		
		Если Тип = "СчетКВозврату" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюКВозврату");
			СуммаКВозврату = ДанныеПечати.СуммаКВозврату;
			СуммаИтого = СуммаКПрописи-СуммаКВозврату;
			Если СуммаИтого < 0 Тогда
				СуммаИтого = 0;
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаВозврата = ФормированиеПечатныхФорм.ФорматСумм(СуммаКВозврату, ДанныеПечати.Валюта);
			ОбластьМакета.Параметры.СуммаИтогоКОплате = ФормированиеПечатныхФорм.ФорматСумм(СуммаИтого, ДанныеПечати.Валюта, "0");
			ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаИтого, ДанныеПечати.Валюта);
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

// Функция формирует печатную форму документа гарантийного соглашения.
//
// Параметры:
// МассивОбъектов - Массив - массив документов для печати
// ОбъектыПечати - СписокЗначений
//
// Возвращаемое значение:
// ТабличныйДокумент
//
Процедура ктсСформироватьТабличныйДокументГарантийногоСоглашения(ТабДокумент, ТекстЗапроса, МассивОбъектов, ПараметрыПечати, ОбъектыПечати, СсылкаНаДокумент)
	//ТабДокумент = Новый ТабличныйДокумент;
	Если ПараметрыПечати = "notebooker" Тогда
		Макет = ПолучитьМакет("ПФ_MXL_Гарантия_Ноутбукер");	
	Иначе
		Макет = ПолучитьМакет("ПФ_MXL_Гарантия");
	КонецЕсли;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	//++++++++++ Шапка документа ++++++++++++++++++++++
	СтруктураДок = ктсДанныеОДокументе(МассивОбъектов[0]);
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.Параметры.ТекстЗаголовок =  СформироватьЗаголовокДокумента(СтруктураДок,"ГАРАНТІЙНА УГОДА");
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовка, СсылкаНаДокумент.Ссылка);

	ТабДокумент.Вывести(ОбластьЗаголовка);
	
	ОбластьПредставлениеОрганизации = Макет.ПолучитьОбласть("ПредставлениеОрганизации");
	
	Если ПараметрыПечати = "notebooker" Тогда
		
	Иначе
		ОбластьПредставлениеОрганизации.Параметры.ПредставлениеОрганизации = 
			ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
					СтруктураДок.Организация, СтруктураДок.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
	КонецЕсли;
				
	ТабДокумент.Вывести(ОбластьПредставлениеОрганизации);

	Область = Макет.ПолучитьОбласть("ТабШапка");
	ТабДокумент.Вывести(Область); 
	
	ЗапросСерНомеров = Новый Запрос();
	ЗапросСерНомеров.Текст = ТекстЗапроса;
	ЗапросСерНомеров.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросСерНомеров.УстановитьПараметр("Гарантия",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія")); 
	
	РезультатЗапросаСер = ЗапросСерНомеров.Выполнить();
	Выборка = РезультатЗапросаСер.Выбрать();	
	
	ОбластьНоменклатура   = Макет.ПолучитьОбласть("ТабНоменклатура");
	ОбластьСерийныйНомер  = Макет.ПолучитьОбласть("ТабСерийныйНомер");
	
	Индекс = 1;
	ТекНоменклатура = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		ФлажокВывести = Истина;
		
		Если Выборка.Количество() = 0 Тогда 
			Продолжить;
		Иначе		
		    НоменклатураИХарактеристика = Строка(Выборка.Номенклатура) + ?(Выборка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "","/" + Строка(Выборка.Характеристика));
			Если ТекНоменклатура <> НоменклатураИХарактеристика Тогда	 
				
				ОбластьНоменклатура.Параметры.НомСтр          = Индекс;
				ОбластьНоменклатура.Параметры.ПечНоменклатура = НоменклатураИХарактеристика;
				ОбластьНоменклатура.Параметры.ЕдИзм			  = Выборка.НоменклатураЕдиницаИзмерения;
				ОбластьНоменклатура.Параметры.ПечЕдИзм        = Выборка.НоменклатураЕдиницаИзмерения;
				ОбластьНоменклатура.Параметры.Количество      = Выборка.Количество;
				//ОбластьНоменклатура.Параметры.Номенклатура    = ВыборкаНоменклатуры.Номенклатура;
				
				ТабДокумент.Вывести(ОбластьНоменклатура);
				Индекс = Индекс + 1;
			КонецЕсли;
			
				ТекНоменклатура = НоменклатураИХарактеристика;
				
				Если ФлажокВывести = Истина Тогда
					ОбластьСерийныйНомер.Параметры.ПечСерийныйНомер = Выборка.СерийныеНомера;
					ОбластьСерийныйНомер.Параметры.ГарантийныйСрок  = Выборка.Гарантия;
					//Сообщить(Выборка.Гарантия);
					ТабДокумент.Вывести(ОбластьСерийныйНомер);
					
					ФлажокВывести = ?(Выборка.СерийныеНомера = Неопределено, Ложь, Истина);
					
				КонецЕсли;  			
		КонецЕсли;	
	КонецЦикла; 	
	
	//+++++++++++++++++ Подвал ++++++++++++++++++++++++++++++++++++++++++
	ОбластьТабПодвал = Макет.ПолучитьОбласть("ТабПодвал");
	ОбластьТабПодвал.Параметры.Ответственный = ?(СтруктураДок.Ответственный = Неопределено,"______________________",СтруктураДок.Ответственный);
	ТабДокумент.Вывести(ОбластьТабПодвал);
	//ТабДок = ТабДокумент;
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаДокумент);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументТоварныйЧек(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации)
		
	Макет 			=  ПолучитьМакет("ПФ_MXL_ТоварныйЧек");
	ПервыйДокумент 	= Истина;
	
	Пока ДанныеДляПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной.
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		//ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеДляПечати, "Товарний чек");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Товарний чек" + Символы.ПС + " від " + Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг ЧЧ:ММ:с'");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДляПечати.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		//ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата), "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ШапкаОрганизации.ТекстКорреспондента;
		ОбластьМакета.Параметры.Поставщик = ШапкаОрганизации.НазваниеОрганизации;// ДанныеДляПечати.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ДанныеДляПечати.Покупатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Ложь;
		ЕстьНДС = Ложь;
		ВыборкаСтрокТовары = ДанныеДляПечати.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			Если ВыборкаСтрокТовары.Скидка <> 0 Тогда
				ЕстьСкидки = Истина;
			КонецЕсли;
			Если ВыборкаСтрокТовары.СуммаНДС <> 0 Тогда
				ЕстьНДС = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		
		ОбластьНомера   = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов    = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных   = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок   = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммыНДС = Макет.ПолучитьОбласть("ШапкаТаблицы|СуммаНДС");
		ОбластьСуммы    = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		Если ЕстьНДС Тогда
			ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		Если Не ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			                                  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
			                                  + Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера   	= Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов    	= Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных   	= Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок   	= Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммыНДС 	= Макет.ПолучитьОбласть("Строка|СуммаНДС");
		ОбластьСуммы    	= Макет.ПолучитьОбласть("Строка|Сумма");
		КодовРасшифровки  	= Макет.ПолучитьОбласть("СтрокаРасшифровки|КолонкаКодов");
		ДанныхРасшифровки   = Макет.ПолучитьОбласть("СтрокаРасшифровки|Данные");
		СНРасшифровки   	= Макет.ПолучитьОбласть("СНРасшифровки|Данные");
		
		Сумма          = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		
		ВыборкаСтрокТовары = ДанныеДляПечати.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
			                                ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)
			                              + ПредставлениеХарактеристик(ВыборкаСтрокТовары);
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка         = ВыборкаСтрокТовары.Скидка;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + ВыборкаСтрокТовары.Скидка;
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			                                                                              
			Если ЕстьНДС Тогда
				ОбластьСуммыНДС.Параметры.СуммаНДС = ВыборкаСтрокТовары.СуммаНДС;
				ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
			КонецЕсли;
			
			Если Не ДанныеДляПечати.ЦенаВключаетНДС Тогда
				СуммаСНДС = ВыборкаСтрокТовары.Сумма + ВыборкаСтрокТовары.СуммаНДС;
			Иначе
				СуммаСНДС = ВыборкаСтрокТовары.Сумма;
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Сумма = СуммаСНДС;
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			ВсегоСкидок    = ВсегоСкидок    + ВыборкаСтрокТовары.Скидка;
			ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаСтрокТовары.Сумма + ВыборкаСтрокТовары.Скидка;
			
			Запрос = Новый Запрос("");
						
		КонецЦикла;
		
		Товары = ДанныеДляПечати.Товары.Выгрузить();
		
		// Вывести Итого.
		ОбластьНомера   = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов    = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных   = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок   = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы    = Макет.ПолучитьОбласть("Итого|Сумма");
		ОбластьСуммыНДС = Макет.ПолучитьОбласть("Итого|СуммаНДС");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		СуммаНДС = Товары.Итог("СуммаНДС");
		Сумма    = Товары.Итог("Сумма");
		
		Если ЕстьНДС Тогда
			ОбластьСуммыНДС.Параметры.СуммаНДС = СуммаНДС;
			ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
		КонецЕсли;
		
		Если Не ДанныеДляПечати.ЦенаВключаетНДС Тогда
			СуммаДокумента = Сумма + СуммаНДС;
		Иначе
			СуммаДокумента = Сумма;
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Сумма = СуммаДокумента;
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести Сумму прописью.
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего найменувань " + ВыборкаСтрокТовары.Количество()
		                                       + ", на суму " + ФормированиеПечатныхФорм.ФорматСумм(ДанныеДляПечати.СуммаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(ДанныеДляПечати.СуммаДокумента, ДанныеДляПечати.Валюта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		// Вывести подписи.
		//ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		//ОбластьМакета.Параметры.Заполнить(Выборка);
		//ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	
	ТабличныйДокумент.КлючПараметровПечати = "ktcКлючПараметровПечатиТоварыйЧек";
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументВидатковаНакладна(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	ДанныеПечати			= ДанныеДляПечати[3].Выбрать();
	ВыборкаПоДокументам 	= ДанныеДляПечати[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
	
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		
		// Если в накладной только услуги - перейдем к следующему документу
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам 	= ВыборкаПоДокументам.Выбрать();
			РезультатСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоТоварам, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
			Если ТипЗнч(РезультатСкидки) = Тип("Структура") Тогда
				ЕстьСкидки = РезультатСкидки.ЕстьСкидки;
			ИначеЕсли ТипЗнч(РезультатСкидки) = Тип("Булево") Тогда
				ЕстьСкидки = РезультатСкидки;
			Иначе
				ЕстьСкидки = Ложь;
			КонецЕсли;
			ЕстьНДС = ?(ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.БезНДС 
					ИЛИ ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС0, Ложь, Истина );
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать накладной не требуется'"),
				ДанныеПечати.Ссылка
				);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет 				= ПолучитьМакет("ПФ_MXL_ВидатковаНакладна");
		МакетПеремещения    = ПолучитьМакет("ПФ_MXL_ВидатковаНакладна_Перемещение");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Видаткова накладна'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика                         = ШапкаОрганизации.ТекстКорреспондента;//ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = ШапкаОрганизации.НазваниеОрганизации;//ДанныеПечати.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ДанныеПечати.ДокументПеремещение Тогда
			ОбластьМакета                                   = Макет.ПолучитьОбласть("ПокупательПеремещение");
			ОбластьМакета.Параметры.Адрес 					= ?(ПустаяСтрока(ДанныеПечати.СкладПолучатель),"", ДанныеПечати.СкладПолучатель + ", ") + ДанныеПечати.Адрес;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета                                   = Макет.ПолучитьОбласть("ОтправительПеремещение");
			ОбластьМакета.Параметры.Адрес					= ?(ПустаяСтрока(ДанныеПечати.СкладОтправитель),"", ДанныеПечати.СкладОтправитель + ", ") + ДанныеПечати.АдресОтправителя;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		Иначе
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
			ПредставлениеПолучателя                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Получатель, ДанныеПечати.Дата), "ПолноеНаименование");
			ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
			ОбластьМакета.Параметры.Получатель              = ДанныеПечати.Получатель;
			ОбластьМакета.Параметры.Адрес              		= ДанныеПечати.Адрес;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим заголовок таблицы Товары
		
		Если ДанныеПечати.ДокументПеремещение Тогда
			
			ОбластьПеремещения = Новый ТабличныйДокумент;
			
			ОбластьШапкаПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|НомерСтроки");
			ОбластьШапкаПеремещенияКоды 		= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Коды");
			ОбластьШапкаПеремещенияТовар 		= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Товар");
			ОбластьШапкаПеремещенияКоличество 	= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Количество");
			 
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияНомерСтроки);
			Если ВыводитьКоды Тогда
				ОбластьШапкаПеремещенияКоды.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияКоды);
			КонецЕсли;
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияТовар);
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияКоличество);
            ТабличныйДокумент.Вывести(ОбластьПеремещения);
			
		Иначе
			
			СуффиксОбластиСтроки = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
			СуффиксОбластиКолонки = ?(ЕстьСкидки И ЕстьНДС, "СоСкидкойСНДС", ?(ЕстьСкидки Или ЕстьНДС, "СоСкидкойИлиСНДС", ""));
			
			ОбластьКолонкаТовар = Макет.Область("ПерваяКолонкаТовара");
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
				+ ?(ВыводитьКоды, 0, Макет.Область("КолонкаКодов").ШиринаКолонки)
			;
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|Товар" + СуффиксОбластиКолонки);
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|Данные" + СуффиксОбластиКолонки);
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
				
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
				
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЕсли;
		
		ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|Товар" + СуффиксОбластиКолонки);
		ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|Данные" + СуффиксОбластиКолонки);
		
		
		СтрокаТаблицыПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|НомерСтроки");
		СтрокаТаблицыПеремещенияКоды 			= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Коды");
		СтрокаТаблицыПеремещенияТовар 			= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Товар");		
		СтрокаТаблицыПеремещенияКоличество		= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Количество");
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок    = 0;
		НомерСтроки    = 0;
		ВсегоБезСкидок = 0;
		
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если ДанныеПечати.ДокументПеремещение Тогда
				
				ОбластьПеремещения = Новый ТабличныйДокумент;
				
				СтрокаТаблицыПеремещенияНомерСтроки.Параметры.НомерСтроки = НомерСтроки;
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияНомерСтроки);
				Если ВыводитьКоды Тогда
					СтрокаТаблицыПеремещенияКоды.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
					ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияКоды);					
				КонецЕсли;
				
				СтрокаТаблицыПеремещенияТовар.Параметры.Товар = ВыборкаПоТоварам["Номенклатура"];
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияТовар);
				
				СтрокаТаблицыПеремещенияКоличество.Параметры.Количество 	= ВыборкаПоТоварам["Количество"];
				СтрокаТаблицыПеремещенияКоличество.Параметры.ЕдиницаЦены    = ВыборкаПоТоварам["ЕдиницаЦены"];
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияКоличество);
				
				ТабличныйДокумент.Вывести(ОбластьПеремещения);
				
			Иначе
						
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					
					ОбластьКодов.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
					ТабличныйДокумент.Присоединить(ОбластьКодов);
					
				КонецЕсли;
				
				ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
				ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоТоварам.ТоварНаименованиеПолное, ВыборкаПоТоварам.Характеристика)
					+ ?(ВыборкаПоТоварам.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
					
				ТабличныйДокумент.Присоединить(ОбластьТовар);

				
				ВалютаДокумента = ДанныеПечати.Валюта;
				ВалютаРегламент = Константы.ВалютаРегламентированногоУчета.Получить();
				МножительРеглам = 1;
				
				Если ВалютаДокумента <> ВалютаРегламент Тогда
					ДанныеКурсаДок  = ЗаполнитьДанныеКурсаДляВалюты(ВалютаДокумента);
					ДанныеКурсаРег	= ЗаполнитьДанныеКурсаДляВалюты(ВалютаРегламент);
					МножительРеглам = (ДанныеКурсаДок.Курс / ДанныеКурсаДок.Кратность) / (ДанныеКурсаРег.Курс / ДанныеКурсаРег.Кратность);
				КонецЕсли;
				
				ПроцентНДС = 0;
				Если 		ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС10 Тогда
					ПроцентНДС = 0.1;
				ИначеЕсли 	ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС18 Тогда
					ПроцентНДС = 0.18;
				ИначеЕсли 	ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС20 Тогда
					ПроцентНДС = 0.2;
				КонецЕсли;
				
				ПроцентСкидки = 0;
				Если ВыборкаПоТоварам.СуммаСкидки > 0 Тогда	
					ПроцентСкидки = ВыборкаПоТоварам.СуммаСкидки / ВыборкаПоТоварам.СуммаБезСкидки;	
				КонецЕсли;
					
				СтруктураПоТоварам = Новый Структура("ЕдиницаЦены, Количество, СтавкаНДС, СуммаНДС, СуммаБезСкидки, СуммаСкидки, Сумма, Цена", 
													ВыборкаПоТоварам.ЕдиницаЦены,
													ВыборкаПоТоварам.Количество,
													ШапкаОрганизации.СтавкаПДВ, 
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * ПроцентНДС / (?(ШапкаОрганизации.ЦенаВключаетПДВ, ПроцентНДС, 0) + 1)) * (1 - ПроцентСкидки) * МножительРеглам, 
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * (?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, ПроцентНДС) + 1)) * МножительРеглам,
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * (?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, ПроцентНДС) + 1)) * ПроцентСкидки * МножительРеглам,
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * (?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, ПроцентНДС) + 1)) * (1 - ПроцентСкидки) * МножительРеглам,
													ВыборкаПоТоварам.Цена * МножительРеглам);
				
				//ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
				ОбластьДанных.Параметры.Заполнить(СтруктураПоТоварам);

				ТабличныйДокумент.Присоединить(ОбластьДанных);
				
				Сумма          = Сумма 	 			+ СтруктураПоТоварам.Сумма;
				СуммаНДС       = СуммаНДС      		+ СтруктураПоТоварам.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок    = ВсегоСкидок    + СтруктураПоТоварам.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтруктураПоТоварам.СуммаБезСкидки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал
		
		Если ДанныеПечати.ДокументПеремещение Тогда
			
			ОбластьПеремещения = Новый ТабличныйДокумент;
			
			ПодвалТаблицыПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|НомерСтроки");
			ПодвалТаблицыПеремещенияКоды 			= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Коды");
			ПодвалТаблицыПеремещенияТовар 			= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Товар");		
			ПодвалТаблицыПеремещенияКоличество		= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Количество");		
			
			ОбластьПеремещения.Вывести(ПодвалТаблицыПеремещенияНомерСтроки);
			Если ВыводитьКоды Тогда
				ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияКоды);
			КонецЕсли;
			ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияТовар); 
			ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияКоличество);
			ТабличныйДокумент.Вывести(ОбластьПеремещения);
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|Товар" + СуффиксОбластиКолонки);
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|Данные" + СуффиксОбластиКолонки);
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			Если ЕстьСкидки Тогда
				
				ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				
			КонецЕсли;
			
			ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			// Выводим ИтогоНДС
			
			Область = Макет.ПолучитьОбласть("ПодвалНДС");
			
			Область.Параметры.ВсегоНДС = СуммаНДС;
			Если ЕстьНДС Тогда
				Область.Параметры.НДС = ?(ШапкаОрганизации.ЦенаВключаетПДВ, НСтр("ru='В тому числі ПДВ:'"), НСтр("ru='Сума ПДВ:'"));
			Иначе
				Область.Параметры.НДС = НСтр("ru='Без податку (ПДВ)'");
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);
			
			// Выводим Сумму прописью
			
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма + ?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, СуммаНДС);
			
			ИтоговаяСтрока = НСтр("ru='Всього найменувань %КоличествоНаименований%, на суму %СуммаДокумента% '");
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", ВыборкаПоТоварам.Количество());
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ВалютаРегламент));

			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, ВалютаРегламент);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подписи
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			
			Если ЗначениеЗаполнено(ДанныеПечати.ОтпускПроизвел) Тогда
				ОбластьМакета.Параметры.ОтпускПроизвел = ФамилияИнициалыФизЛица(ДанныеПечати.ОтпускПроизвел);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;	
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументНакладна(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	ДанныеПечати			= ДанныеДляПечати[0].Выбрать();
	ВыборкаПоДокументам 	= ДанныеДляПечати[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в накладной только услуги - перейдем к следующему документу
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам 		= ВыборкаПоДокументам.Выбрать();
			РезультатСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоТоварам, ИспользоватьРучныеСкидки);
			Если ТипЗнч(РезультатСкидки) = Тип("Структура") Тогда
				ЕстьСкидки = РезультатСкидки.ЕстьСкидки;
			ИначеЕсли ТипЗнч(РезультатСкидки) = Тип("Булево") Тогда
				ЕстьСкидки = РезультатСкидки;
			Иначе
				ЕстьСкидки = Ложь;
			КонецЕсли;
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = ПолучитьМакет("ПФ_MXL_Накладна");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Прихід товарів'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
        		
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.Дата), "ПолноеНаименование");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = ДанныеПечати.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя                         = ШапкаОрганизации.ТекстКорреспондента;//ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель              = ШапкаОрганизации.НазваниеОрганизации;//ДанныеПечати.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы Товары
		
		Если ЕстьСкидки Тогда
			ОбластьКолонкаТовар = Макет.Область("ТоварСоСкидкой");
		Иначе
			ОбластьКолонкаТовар = Макет.Область("Товар");
		КонецЕсли;
			
		Если Не ВыводитьКоды Тогда
			
			Если ЕстьСкидки Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
			Иначе
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
			
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьНомера);
			
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
			
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
			
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок    = 0;
		НомерСтроки    = 0;
		ВсегоБезСкидок = 0;
		
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
			ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоТоварам.ТоварНаименованиеПолное, ВыборкаПоТоварам.Характеристика)
				+ ?(ВыборкаПоТоварам.ЭтоВозвратнаяТара, НСтр("ru=' (тара для повернення)'"), "");
				
			ТабличныйДокумент.Присоединить(ОбластьТовар);

			ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);

			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Сумма          = Сумма          + ВыборкаПоТоварам.Сумма;
			СуммаНДС       = СуммаНДС       + ВыборкаПоТоварам.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок    = ВсегоСкидок    + ВыборкаПоТоварам.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаПоТоварам.СуммаБезСкидки;
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСоСкидкой");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСоСкидкой");
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ЕстьСкидки Тогда
			
			ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			
		КонецЕсли;
		
		ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Выводим ИтогоНДС
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Если ЕстьСкидки Тогда
				
				ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|НомерСтроки");
				ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|КолонкаКодов");
				ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|ТоварСоСкидкой");
				ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыНДССоСкидкой|ДанныеСоСкидкой");
				
			Иначе
				
				ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
				ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
				ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
				ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС = ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru='В тому числі ПДВ:'"), НСтр("ru='Сума ПДВ:'"));
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЕсли;
		
		// Выводим Сумму прописью
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		
		ИтоговаяСтрока = НСтр("ru='Всього найменувань %КоличествоНаименований%, на суму %СуммаДокумента% '");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", ВыборкаПоТоварам.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));

		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(ДанныеПечати.ПолучениеПроизвел) Тогда
			ОбластьМакета.Параметры.ПолучениеПроизвел = ФамилияИнициалыФизЛица(ДанныеПечати.ПолучениеПроизвел);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументСписаниеТоваров(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации = Неопределено)
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ДопКолонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);
	
	ВыборкаПоДокументам = ДанныеДляПечати[0].Выбрать();
	ВыборкаПоТоварам 	= ДанныеДляПечати[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РеквизитыДокумента 	= Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента 	= НСтр("ru='Акт про списання товарів'");
	
	Макет = ПолучитьМакет("ПФ_MXL_АктОСписанииТоваров");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьОснование  = Макет.ПолучитьОбласть("Основание");
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТоварШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьДанныеШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьЦенаШапка   = Макет.ПолучитьОбласть("ШапкаТаблицы|Цена");
	ОбластьСуммаШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	Если Не ВыводитьДопКолонку Тогда
		Макет.Область("Товар").ШиринаКолонки = Макет.Область("Товар").ШиринаКолонки
												+ Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТоварСтрока  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьЦенаСтрока   = Макет.ПолучитьОбласть("Строка|Цена");
	ОбластьСуммаСтрока  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьНомераПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
	ОбластьКодовПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	ОбластьТоварПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
	ОбластьДанныхПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	ОбластьЦенаПодвалТаблицы   = Макет.ПолучитьОбласть("ПодвалТаблицы|Цена");
	ОбластьСуммаПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Сумма");
	
	ОбластьПодписи       	= Макет.ПолучитьОбласть("Подписи");
	ОбластьКоличествоВсего 	= Макет.ПолучитьОбласть("КоличествоВсего");
	
	ПервыйДокумент = Истина;
	СуммаВсего = 0;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ОбластьЗаголовок.Параметры.СкладПредставление = ПолучитьПредставлениеСклада(ВыборкаПоДокументам.СкладПредставление, "");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ДокументОснование) Тогда
			РеквизитыОснования = Новый Структура("Номер, Дата, Префикс", ВыборкаПоДокументам.НомерОснования, ВыборкаПоДокументам.ДатаОснования);
			ПредставлениеОснования 	= ВыборкаПоДокументам.Основание.ПолучитьОбъект().Метаданные().Синоним;				
			ОбластьОснование.Параметры.ОснованиеПредставление = СформироватьЗаголовокДокумента(РеквизитыОснования, ПредставлениеОснования);
			ТабличныйДокумент.Вывести(ОбластьОснование);
		КонецЕсли;
		// Вывод строк.
		Если НЕ ВыборкаПоТоварам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Вывод шапки.
		ТабличныйДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьДопКолонку Тогда
			ОбластьКодовШапка.Параметры.ДопКолонка = ДопКолонка;
			ТабличныйДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТоварШапка);
		ТабличныйДокумент.Присоединить(ОбластьДанныеШапка);
		ОбластьЦенаШапка.Параметры.Валюта = Строка(ВалютаУпр);
		ТабличныйДокумент.Присоединить(ОбластьЦенаШапка);
		ОбластьСуммаШапка.Параметры.Валюта = Строка(ВалютаУпр);
		ТабличныйДокумент.Присоединить(ОбластьСуммаШапка);
		
		ВсегоНаименований = 0;
		
		ВыборкаПоСтрокам = ВыборкаПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабличныйДокумент.Вывести(ОбластьНомераСтрока);
			Если ВыводитьДопКолонку Тогда
				ОбластьКодовСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
			КонецЕсли;
			
			// Номенклатура.
			ОбластьТоварСтрока.Параметры.Номенклатура = ВыборкаПоСтрокам.Номенклатура;
			ОбластьТоварСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
																				ВыборкаПоСтрокам.НоменклатураПредставление,
																				ВыборкаПоСтрокам.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьТоварСтрока);
			// Данные количестве.
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);
			
			// Данные о входной цене
			ОбластьЦенаСтрока.Параметры.ВходнаяЦена = ВыборкаПоСтрокам.Цена;
			ТабличныйДокумент.Присоединить(ОбластьЦенаСтрока);
			
			ОбластьСуммаСтрока.Параметры.Сумма = ВыборкаПоСтрокам.Сумма;
			ТабличныйДокумент.Присоединить(ОбластьСуммаСтрока);
			
			СуммаВсего 			= СуммаВсего + ВыборкаПоСтрокам.Сумма;		
			ВсегоНаименований 	= ВсегоНаименований + 1;
		КонецЦикла;
		
		// Вывод итогов.
		ТабличныйДокумент.Вывести(ОбластьНомераПодвалТаблицы);
		Если ВыводитьДопКолонку Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовПодвалТаблицы);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТоварПодвалТаблицы);
		ТабличныйДокумент.Присоединить(ОбластьДанныхПодвалТаблицы);
		ТабличныйДокумент.Присоединить(ОбластьЦенаПодвалТаблицы);
		ТабличныйДокумент.Присоединить(ОбластьСуммаПодвалТаблицы);
		
		ТекстИтоговойСтроки ="Всього найменувань %ВсегоНаименований%, на суму %Сумма% %ВалютаУпр%";
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Сумма%", СуммаВсего);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВалютаУпр%", ВалютаУпр);
		ОбластьКоличествоВсего.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьКоличествоВсего.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаВсего, ВалютаУпр, Истина);
		ТабличныйДокумент.Вывести(ОбластьКоличествоВсего);
		
		// Вывод подписей.
		ОбластьПодписи.Параметры.Ответственный = ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ОбластьПодписи.Параметры.Кладовщик = ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Кладовщик);		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументТоварныйЧек_ЧП(ТабличныйДокумент, РезультатЗапроса, СтруктураТипов)
	
	
	// Макет обычного чека
	Макет = ПолучитьМакет("ПФ_MXL_ТоварныйЧек_ЧП");	
	ВалютаРег 		= Константы.ВалютаРегламентированногоУчета.Получить();
	ПолнаяОплата    = ПроверитьНаличиеОплаты(СтруктураТипов.РеализацияТоваровУслуг);
	
	ОбластьЗаголовок 			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьВерхнийРазделитель   = Макет.ПолучитьОбласть("ВерхнийРазделитель");
	ОбластьНоменклатураТело		= Макет.ПолучитьОбласть("Номенклатура|НоменклатураТело");
	ОбластьЦены					= Макет.ПолучитьОбласть("Номенклатура|Цены");
	ОбластьПустыеЦены			= Макет.ПолучитьОбласть("Пустая|Цены");
	ОбластьСерийныйНомер		= Макет.ПолучитьОбласть("СерийныйНомер");
	ОбластьНижнийРазделитель	= Макет.ПолучитьОбласть("НижнийРазделитель");
	ОбластьВсего				= Макет.ПолучитьОбласть("Всего");
	ОбластьБонусы				= Макет.ПолучитьОбласть("Бонусы");
	ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
	ОбластьФискальныйЧек		= Макет.ПолучитьОбласть("ФискальныйЧек");
	ОбластьГарантийныйТалон		= Макет.ПолучитьОбласть("ГарантийныйТалон");
	ОбластьОплачено				= Макет.ПолучитьОбласть("Оплачено");
	ОбластьСообщение			= Макет.ПолучитьОбласть("Сообщение");
	
	ОбластьНижнийПунктир		= Макет.ПолучитьОбласть("НижнийПунктир");
	ОбластьСовет	            = Макет.ПолучитьОбласть("Совет");
	СписокВидыНоменклатуры  	= Новый СписокЗначений;
	ОбластьQR_Code              = Макет.ПолучитьОбласть("QR");
	СоответсвиеQR_Code			= Новый Соответствие;
	
	
	// Макет чека Ф5
	МакетФ5 = ПолучитьМакет("ПФ_XML_ТоварныйЧек_ЧП_Ф5");
	
	ОбластьЗаголовокФ5 			= МакетФ5.ПолучитьОбласть("Заголовок");
	ОбластьНоменклатураТелоФ5   = МакетФ5.ПолучитьОбласть("Номенклатура|НоменклатураТело");
	ОбластьЦеныФ5				= МакетФ5.ПолучитьОбласть("Номенклатура|Цена");
	ОбластьПустыеЦеныФ5			= МакетФ5.ПолучитьОбласть("Пустая|Цена");
	СерийныйНомерФ5   			= МакетФ5.ПолучитьОбласть("СерийныйНомер");
	ПробелФ5   					= МакетФ5.ПолучитьОбласть("Пробел");
	ПодвалФ5					= МакетФ5.ПолучитьОбласть("Подвал");
	
	ВыборкаДокументСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументСсылка.Следующий() Цикл
		
		ЗаполненыЗаголовокИШапка 	= Ложь;
		ТабличныйДокументТело		= Новый ТабличныйДокумент;
		НомерПозиции 				= 1;
		ЭтоОрганизацияФ5			= Ложь;
		
		ВыборкаНоменклатура = ВыборкаДокументСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			СоответсвиеQR_Code.Вставить(ВыборкаНоменклатура.Номенклатура);
			СписокВидыНоменклатуры.Добавить(ВыборкаНоменклатура.Номенклатура.ВидНоменклатуры);
			
			НоменклатураЗаполнена = Ложь;
						
			ВыборкаСерийныеНомера = ВыборкаНоменклатура.Выбрать();
			Пока ВыборкаСерийныеНомера.Следующий() Цикл
				
				Если Не ЗаполненыЗаголовокИШапка Тогда
					
					ЭтоОрганизацияФ5 = ВыборкаСерийныеНомера.ЭтоОрганизацияФ5;
					
					Если ЭтоОрганизацияФ5 Тогда
						ОбластьЗаголовокФ5.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ПодвалФ5.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ПодвалФ5.Параметры.ДатаДокумента = Формат(ВыборкаСерийныеНомера.ДатаДокумента, "ДФ=dd.MM.yyyy");
					Иначе
						ОбластьЗаголовок.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ОбластьПодвал.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ОбластьПодвал.Параметры.НомерДокумента = ВыборкаДокументСсылка.ДокументСсылка.Номер;
						ОбластьВсего.Параметры.Заполнить(ВыборкаСерийныеНомера);
						//ОбластьВсего.Параметры.ВсегоСтрока = СформироватьСуммуПрописью(ВыборкаСерийныеНомера.СуммаВсего, ВалютаРег);
						ОбластьБонусы.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ОбластьОплачено.Параметры.Заполнить(ВыборкаСерийныеНомера);
					КонецЕсли;
					
					ЗаполненыЗаголовокИШапка = Истина;
					
				КонецЕсли;
				
				Если Не НоменклатураЗаполнена ИЛИ ВыборкаСерийныеНомера.ЭтоСборка Тогда
					
					Если ЭтоОрганизацияФ5 Тогда
						
						ОбластьНоменклатураТелоФ5.Параметры.Заполнить(ВыборкаСерийныеНомера);
						
						Если ВыборкаСерийныеНомера.ЭтоСборка Тогда
							ОбластьНоменклатураТелоФ5.Параметры.Количество = 1;
							Если НЕ НоменклатураЗаполнена Тогда
								НомерПозиции = НомерПозиции + 1;
							КонецЕсли;
						КонецЕсли;
						
						ОбластьНоменклатураТелоФ5.Параметры.Номер 	= Строка(НомерПозиции) + ".";
						ОбластьНоменклатураТелоФ5.Параметры.Код 	= Формат(Число(ВыборкаСерийныеНомера.Код), "ЧГ=0");
						
						ТабличныйДокументТело.Вывести(ОбластьНоменклатураТелоФ5);
						
						ОбластьЦеныФ5.Параметры.Заполнить(ВыборкаСерийныеНомера);
						
						Если ВыборкаСерийныеНомера.ЭтоСборка Тогда				
							ОбластьЦеныФ5.Параметры.Сумма = ВыборкаСерийныеНомера.Сумма / ВыборкаСерийныеНомера.Количество;
						КонецЕсли;
						
						ТабличныйДокументТело.Присоединить(ОбластьЦеныФ5);
						
					Иначе
						
						ОбластьНоменклатураТело.Параметры.Заполнить(ВыборкаСерийныеНомера);
						Если ВыборкаСерийныеНомера.ЭтоСборка Тогда
							ОбластьНоменклатураТело.Параметры.Количество = 1;
							Если НЕ НоменклатураЗаполнена Тогда
								НомерПозиции = НомерПозиции + 1;
							КонецЕсли;
						КонецЕсли;
						ОбластьНоменклатураТело.Параметры.Номер 	= Строка(НомерПозиции) + ".";
						ОбластьНоменклатураТело.Параметры.Код 		= Формат(Число(ВыборкаСерийныеНомера.Код), "ЧГ=0");
						ОбластьНоменклатураТело.Параметры.Гарантия  = ?(ПустаяСтрока(ВыборкаСерийныеНомера.Гарантия), "", "Гар.: " + ВыборкаСерийныеНомера.Гарантия);
						ТабличныйДокументТело.Вывести(ОбластьНоменклатураТело);
						ОбластьЦены.Параметры.Заполнить(ВыборкаСерийныеНомера);
						Если ВыборкаСерийныеНомера.ЭтоСборка Тогда				
							ОбластьЦены.Параметры.Сумма = ВыборкаСерийныеНомера.Сумма / ВыборкаСерийныеНомера.Количество;
						КонецЕсли;

						ТабличныйДокументТело.Присоединить(ОбластьЦены);
						
					КонецЕсли;
					
					НоменклатураЗаполнена = Истина;

				КонецЕсли;
				
				Если Не ПустаяСтрока(ВыборкаСерийныеНомера.СерийныйНомер) Тогда
					Если ЭтоОрганизацияФ5 Тогда
						СерийныйНомерФ5.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ТабличныйДокументТело.Вывести(СерийныйНомерФ5);
					Иначе
						ОбластьСерийныйНомер.Параметры.Заполнить(ВыборкаСерийныеНомера);
						ТабличныйДокументТело.Вывести(ОбластьСерийныйНомер);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыборкаСерийныеНомера.ЭтоСборка Тогда
					
					РезультатЗапросаСборка = ПолучитьДанныеДляПечатнойФормыТоварныйЧекСборка(ВыборкаСерийныеНомера.Номенклатура, ВыборкаСерийныеНомера.СерийныйНомер);
					
					Если ЭтоОрганизацияФ5 Тогда
						ТабличныйДокументТело.Вывести(ЗаполнитьТабличныйДокументСборкиТоварныйЧек_ЧП(РезультатЗапросаСборка, ОбластьНоменклатураТелоФ5, ОбластьПустыеЦеныФ5, СерийныйНомерФ5, НомерПозиции, ЭтоОрганизацияФ5));
					Иначе
						ТабличныйДокументТело.Вывести(ЗаполнитьТабличныйДокументСборкиТоварныйЧек_ЧП(РезультатЗапросаСборка, ОбластьНоменклатураТело, ОбластьПустыеЦены, ОбластьСерийныйНомер, НомерПозиции, ЭтоОрганизацияФ5));
					КонецЕсли;
										
				КонецЕсли;
				
			КонецЦикла;
								
			НомерПозиции = НомерПозиции + 1;
						
		КонецЦикла;
		
		Если ЭтоОрганизацияФ5 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокФ5);
			ТабличныйДокумент.Вывести(ПробелФ5);
			ТабличныйДокумент.Вывести(ТабличныйДокументТело);
			ТабличныйДокумент.Вывести(ПробелФ5);
			ТабличныйДокумент.Вывести(ПодвалФ5);
			
		Иначе
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаДокументСсылка.ДокументСсылка);
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);
			ТабличныйДокумент.Вывести(ТабличныйДокументТело);
			
			
			ПодключеннаяВерсия = git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных("LoyaltyLibrary");
			ПараметрыРегистрации = git_СистемаЛояльностиСервер.СведенияОВнешнейОбработке();
			Если ПодключеннаяВерсия = ПараметрыРегистрации.Версия ИЛИ ПодключеннаяВерсия = "0.0.0" Тогда
				ЛояльностьИспользуеться = git_СистемаЛояльностиСервер.ЛояльностьИспользуеться(ВыборкаДокументСсылка.ДокументСсылка.Организация);
			Иначе
				ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("LoyaltyLibrary");
				ЛояльностьИспользуеться = ВнешнийОбъект.ЛояльностьИспользуеться(ВыборкаДокументСсылка.ДокументСсылка.Организация);
			КонецЕсли;
			
			Если ЛояльностьИспользуеться Тогда
				ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);
				ОбластьQR_Code.Параметры.Совет = "Порада:" + Символы.ПС + ЗаполнитьСоветЧек_ЧП(СписокВидыНоменклатуры);
				ТабличныйДокумент.Вывести(ОбластьQR_Code);
				//filename = ktcОбщийМодульПротоколов.СоздатьQR_Code_Чек(СоответсвиеQR_Code);
				//Если НЕ filename = Неопределено Тогда
				//	ОбластьQR_Code.Рисунки.D1.Картинка = Новый Картинка(filename);
				//	ТабличныйДокумент.Вывести(ОбластьQR_Code);
				//	УдалитьФайлы(filename);
				//КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНижнийПунктир);
			ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);
			ТабличныйДокумент.Вывести(ОбластьВсего);
			ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);
			Если ПолнаяОплата Тогда
				ТабличныйДокумент.Вывести(ОбластьОплачено);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьБонусы);
			ТабличныйДокумент.Вывести(ОбластьСообщение);
			ТабличныйДокумент.Вывести(ОбластьВерхнийРазделитель);
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			ТабличныйДокумент.Вывести(?(ПолнаяОплата, ОбластьФискальныйЧек, ОбластьГарантийныйТалон));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПоДаннымОбъектаКоммерческогоПредложения(ТабличныйДокумент, ДанныеОбъекта, ОбъектыПечати)
	Макет = ПолучитьМакет("ПФ_MXL_КоммерческоеПредложение_UA");
	
	НомерСтрокиНачало = 1;
	
	// Вывод заголовка
	ОбластьЗаголовок = ?(GetLibrary("LoyaltyLibrary").ЛояльностьИспользуеться(ДанныеОбъекта.Организация), Макет.ПолучитьОбласть("ЗаголовокЛояльность"), Макет.ПолучитьОбласть("Заголовок"));	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеОбъекта);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ДанныеОбъекта.Ссылка);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Вывод области предложения
	ОбластьПредложение = Макет.ПолучитьОбласть("Предложение");
	ОбластьПредложение.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПредложение);
	
	// Вывод шапки таблицы товаров
	ИмяОбластиШапки = ?(ДанныеОбъекта.ЕстьСкидки, "ШапкаТаблицыТовары", "ШапкаТаблицыТоварыБезСкидки");
	ОбластьШапкаТаблицыТовары = Макет.ПолучитьОбласть(ИмяОбластиШапки);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыТовары);
	
	// Вывод строк таблицы товаров
	ИмяОбластиСтроки = ?(ДанныеОбъекта.ЕстьСкидки, "СтрокаТаблицыТовары", "СтрокаТаблицыТоварыБезСкидки");
	ОбластьСтрокаТаблицыТовары = Макет.ПолучитьОбласть(ИмяОбластиСтроки);
	Для Каждого Товар Из ДанныеОбъекта.Товары Цикл
		ОбластьСтрокаТаблицыТовары.Параметры.Заполнить(Товар);
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыТовары);
	КонецЦикла;
	
	// Вывод подвала строки таблицы товаров
	ИмяОбластиПодвалаСтроки = ?(ДанныеОбъекта.ЕстьСкидки, "ПодвалСтрокаТаблици2", "ПодвалСтрокаТаблици2БезСкыдки");
	ОбластьПодвалСтрокаТаблици2 = Макет.ПолучитьОбласть(ИмяОбластиПодвалаСтроки);
	ОбластьПодвалСтрокаТаблици2.Параметры.Всего = ДанныеОбъекта.СуммаВсего;
    ТабличныйДокумент.Вывести(ОбластьПодвалСтрокаТаблици2);
	
	
	 //  Вывод бонусов
	 ЕСЛИ  GetLibrary("LoyaltyLibrary").ЛояльностьИспользуеться(ДанныеОбъекта.Организация)  Тогда	
		ОбластьБонуси = Макет.ПолучитьОбласть("Бонуси");
		ОбластьБонуси.Параметры.Бонуси=0;
		ТабличныйДокумент.Вывести(ОбластьБонуси);
	 КонецЕсли;
	
	 // Вывод подвала таблицы товров
	ОбластьПодвалТаблицыТовары = Макет.ПолучитьОбласть("ПодвалТаблицыТовары");
	ОбластьПодвалТаблицыТовары.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыТовары);
	
	

	
	// Вывод срока действия коммерческого предложения
	Если ЗначениеЗаполнено(ДанныеОбъекта.СрокДействия) Тогда
		
		ОбластьСрокДействия = Макет.ПолучитьОбласть("СрокДействия");
		ОбластьСрокДействия.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьСрокДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ГрафикОплаты)
		ИЛИ ЗначениеЗаполнено(ДанныеОбъекта.ФормаОплаты)
		ИЛИ ЗначениеЗаполнено(ДанныеОбъекта.Склад)
		ИЛИ ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		
		ОбластьДопИнформацияЗаголовок = Макет.ПолучитьОбласть("ДопИнформацияЗаголовок");
		ТабличныйДокумент.Вывести(ОбластьДопИнформацияЗаголовок);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ГрафикОплаты) Тогда
		ОбластьГрафикОплаты = Макет.ПолучитьОбласть("ГрафикОплаты");
		ОбластьГрафикОплаты.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьГрафикОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ФормаОплаты) Тогда
		ОбластьФормаОплаты = Макет.ПолучитьОбласть("ФормаОплаты");
		ОбластьФормаОплаты.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьФормаОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Склад) Тогда
		ОбластьСклад = Макет.ПолучитьОбласть("Склад");
		ОбластьСклад.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьСклад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		ОбластьДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьДополнительнаяИнформация.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
	КонецЕсли;
	
	ОбластьПодвал = ?(GetLibrary("LoyaltyLibrary").ЛояльностьИспользуеться(ДанныеОбъекта.Организация), Макет.ПолучитьОбласть("ПодвалЛояльность"), Макет.ПолучитьОбласть("Подвал"));
	ОбластьПодвал.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТелефонОрганизации) Тогда
		ОбластьТелефонОрганизации = Макет.ПолучитьОбласть("ТелефонОрганизации");
		ОбластьТелефонОрганизации.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьТелефонОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера) Тогда
		ОбластьАдресЭлектроннойПочтыМенеджера = Макет.ПолучитьОбласть("АдресЭлектроннойПочтыМенеджера");
		ОбластьАдресЭлектроннойПочтыМенеджера.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьАдресЭлектроннойПочтыМенеджера);
	КонецЕсли;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеОбъекта.Ссылка);

КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗаявкиНаСборку(ТабличныйДокумент, ДокументОснование, ПараметрыПечати, ОбъектыПечати)
	
	Макет = ПолучитьМакет("ПФ_MXL_ФормаЗаявкаНаСборку");
	
	Заголовок 					= Макет.ПолучитьОбласть("Заголовок");
	ШапкаТаблицы 				= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ДанныеТаблицы 				= Макет.ПолучитьОбласть("ДанныеТаблицы");
	ДанныеСерийныеНомера 		= Макет.ПолучитьОбласть("ДанныеСерийныеНомера");
	Заказчик 					= Макет.ПолучитьОбласть("Заказчик");
	НомерНакладнойСборки		= Макет.ПолучитьОбласть("НомерНакладнойСборки");
	НомерНакладнойРеализации	= Макет.ПолучитьОбласть("НомерНакладнойРеализации");
	ДатаИсполнения				= Макет.ПолучитьОбласть("ДатаИсполнения");
	ВремяИсполнения				= Макет.ПолучитьОбласть("ВремяИсполнения");
	ПрограмныеСредства			= Макет.ПолучитьОбласть("ПрограмныеСредства");
	ПустаяОбласть				= Макет.ПолучитьОбласть("ПустаяОбласть");
	ИмяСборки					= Макет.ПолучитьОбласть("ИмяСборки");
	СерийныйНомерСборки			= Макет.ПолучитьОбласть("СерийныеНомераСборки");
	Приметки					= Макет.ПолучитьОбласть("Сноска1");
	Менеджер					= Макет.ПолучитьОбласть("Менеджер");
	
	
	НомерСтрокиНачало = 1;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
							  |	СборкаТоваров.НомерСтроки,
		                      |	СборкаТоваров.Номенклатура,
		                      |	СборкаТоваров.КоличествоУпаковок / СборкаТоваров.Ссылка.КоличествоУпаковок КАК Количество,
		                      |	СборкаТоваров.Ссылка,
		                      |	ВЫБОР
		                      |		КОГДА СборкаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		                      |			ТОГДА СборкаТоваров.Номенклатура.ЕдиницаИзмерения
		                      |		ИНАЧЕ СборкаТоваров.Упаковка
		                      |	КОНЕЦ КАК ЕдиницаИзмерения,
		                      |	СборкаТоваров.Номенклатура.Код,
		                      |	СборкаТоваров.Номенклатура.Артикул,
		                      |	СборкаТоваров.Ссылка.КоличествоУпаковок КАК КоличествоСборок
		                      |ПОМЕСТИТЬ КешНоменклатураСборки
		                      |ИЗ
		                      |	Документ.СборкаТоваров.Товары КАК СборкаТоваров
		                      |ГДЕ
		                      |	СборкаТоваров.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
							  |	КешНоменклатураСборки.НомерСтроки,
		                      |	КешНоменклатураСборки.Номенклатура КАК Номенклатура,
		                      |	КешНоменклатураСборки.Количество,
		                      |	ЕСТЬNULL(СНОбороты.СерийныеНомера, ЗНАЧЕНИЕ(Справочник.СерийныеНомераНоменклатуры.ПустаяСсылка)) КАК СерийныйНомер,
		                      |	КешНоменклатураСборки.ЕдиницаИзмерения КАК Упаковка,
		                      |	КешНоменклатураСборки.НоменклатураКод КАК Код,
		                      |	КешНоменклатураСборки.НоменклатураАртикул КАК Артикул,
		                      |	КешНоменклатураСборки.КоличествоСборок
		                      |ИЗ
		                      |	КешНоменклатураСборки КАК КешНоменклатураСборки
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		                      |				,
		                      |				,
		                      |				Регистратор,
		                      |				Номенклатура В
		                      |					(ВЫБРАТЬ
		                      |						КешНоменклатураСборки.Номенклатура
		                      |					ИЗ
		                      |						КешНоменклатураСборки КАК КешНоменклатураСборки)) КАК СНОбороты
		                      |		ПО КешНоменклатураСборки.Ссылка = СНОбороты.Регистратор
		                      |			И КешНоменклатураСборки.Номенклатура = СНОбороты.Номенклатура
		                      |			И СНОбороты.КоличествоРасход > 0
		                      |ИТОГИ ПО
		                      |	Номенклатура");
							  
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		ВыборкаНоменклатура			= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивНоменклатуры    		= Новый Массив;
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			МассивТабДокументов = Новый Массив;
			ВыборкаДетЗаписи	= ВыборкаНоменклатура.Выбрать();
			Пока ВыборкаДетЗаписи.Следующий() Цикл
				ТабДокумент = Новый ТабличныйДокумент;
				ЗаполнитьЗначенияСвойств(ДанныеТаблицы.Параметры, ВыборкаДетЗаписи);
				ТабДокумент.Вывести(ДанныеТаблицы);
				Если Не ЗначениеЗаполнено(ВыборкаДетЗаписи.СерийныйНомер) Тогда          
					МассивТабДокументов.Добавить(ТабДокумент);
					Для Индекс = 1 По ВыборкаДетЗаписи.КоличествоСборок-1 Цикл
						МассивТабДокументов.Добавить(ТабДокумент);
					КонецЦикла;
				Иначе
					ЗаполнитьЗначенияСвойств(ДанныеСерийныеНомера.Параметры, ВыборкаДетЗаписи);
					ТабДокумент.Вывести(ДанныеСерийныеНомера);
					МассивТабДокументов.Добавить(ТабДокумент);
				КонецЕсли;
			КонецЦикла;
			МассивНоменклатуры.Добавить(МассивТабДокументов);
		КонецЦикла;
		
		Для Индекс=0 по ДокументОснование.КоличествоУпаковок-1 Цикл
			ТабличныйДокумент.Вывести(ПустаяОбласть);
			Заголовок.Параметры.Заголовок = "Форма-заявка на зборку системного блоку.";
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Заголовок, ДокументОснование);
			ТабличныйДокумент.Вывести(Заголовок);
			Заказчик.Параметры.Заказчик = ДокументОснование.Организация;
			ТабличныйДокумент.Вывести(Заказчик);
			НомерНакладнойСборки.Параметры.НомерСборки = Индекс+1;
			ТабличныйДокумент.Вывести(НомерНакладнойСборки);
			
			Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
				Если ПараметрыПечати.Свойство("ПрограмныеСредства") Тогда
					Если НЕ ПустаяСтрока(ПараметрыПечати.ПрограмныеСредства) Тогда
						ПрограмныеСредства.Параметры.ПрограмныеСредства	= ПараметрыПечати.ПрограмныеСредства;
						ТабличныйДокумент.Вывести(ПрограмныеСредства);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Менеджер.Параметры.Менеджер = ДокументОснование.Ответственный;
			ТабличныйДокумент.Вывести(Менеджер);
			
			Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
				Если ПараметрыПечати.Свойство("Приметки") Тогда
					Если НЕ ПустаяСтрока(ПараметрыПечати.Приметки) Тогда
						Приметки.Параметры.Приметки = ПараметрыПечати.Приметки;
						ТабличныйДокумент.Вывести(Приметки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			ТабличныйДокумент.Вывести(ПустаяОбласть);
			ТабличныйДокумент.Вывести(ШапкаТаблицы);
			
			Для каждого ЕлНоменклатура Из МассивНоменклатуры Цикл
				ТабличныйДокумент.Вывести(ЕлНоменклатура[Индекс]);
			КонецЦикла; 
			
		КонецЦикла;
		
		//	
		//	ТабДокумент = Новый ТабличныйДокумент;
		//	ЗаполнитьШапкуФормыЗаявкиНаСборку(ТабДокумент, ВыборкаЗаголовкиДокументов, ПараметрыПечати, Макет);
		//	МассивТабличныхДокументов.Добавить(ТабДокумент);
		//	
		//КонецЦикла;
		//
		//// Если нету серийных номеров заполняем по количеству упаковок
		//Если ЗаполнитьПоКоличествуУпаковок И МассивТабличныхДокументов.Количество() > 0 Тогда
		//	Для Индекс = 2 По КоличествоУпаковок Цикл
		//		МассивТабличныхДокументов.Добавить(МассивТабличныхДокументов[0]);
		//	КонецЦикла; 
		//КонецЕсли; 
		//
		//НомерСтроки = 1;
		//
		//Пока ВыборкаТовары.Следующий() Цикл
		//	
		//	ВыборкаДетальныеЗаписи = ВыборкаТовары.Выбрать();
		//	
		//	ПервыйЦикл = Истина;
		//	
		//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//		
		//		Если ПервыйЦикл Тогда
		//		
		//			ЗаполнитьЗначенияСвойств(ДанныеТаблицы.Параметры, ВыборкаДетальныеЗаписи);
		//			ДанныеТаблицы.Параметры.Количество = ВыборкаДетальныеЗаписи.Количество / КоличествоУпаковок;
		//			ДанныеТаблицы.Параметры.НомерСтроки = НомерСтроки;
		//			МассивТабличныхДокументов[0].Вывести(ДанныеТаблицы);
		//		
		//		КонецЕсли;  
		//		
		//		Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.СерийныйНомер) Тогда
		//		
		//			ЗаполнитьЗначенияСвойств(ДанныеСерийныеНомера.Параметры, ВыборкаДетальныеЗаписи);
		//			МассивТабличныхДокументов[0].Вывести(ДанныеСерийныеНомера);
		//		
		//		КонецЕсли; 
		//		
		//		Для Индекс = 1 По МассивТабличныхДокументов.ВГраница() Цикл
		//			Если ПервыйЦикл Тогда
		//				МассивТабличныхДокументов[Индекс].Вывести(ДанныеТаблицы);
		//			КонецЕсли;
		//			Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.СерийныйНомер) Тогда
		//				ВыборкаДетальныеЗаписи.Следующий();
		//				ЗаполнитьЗначенияСвойств(ДанныеСерийныеНомера.Параметры, ВыборкаДетальныеЗаписи);
		//				МассивТабличныхДокументов[Индекс].Вывести(ДанныеСерийныеНомера);
		//			КонецЕсли;
		//		КонецЦикла;
		//		
		//		ПервыйЦикл 	= Ложь;
		//		НомерСтроки = НомерСтроки + 1;
		//		
		//	КонецЦикла;
		//
		//КонецЦикла; 
		//
		//Для каждого ТабДокумент Из МассивТабличныхДокументов Цикл
		//
		//	ТабличныйДокумент.Вывести(ТабДокумент);
		//
		//КонецЦикла; 
				
	Иначе
		
		Заголовок.Параметры.Заголовок = "Форма-заявка на зборку системного блоку.";
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Заголовок, ДокументОснование.Ссылка);
		ТабличныйДокумент.Вывести(Заголовок);
		
		//Заказчик.Параметры.Заказчик = ДокументОснование.Партнер.Наименование;
		Телефоны = ПолучитьНомерТелефонаПартнера(ДокументОснование.Партнер);
		Заказчик.Параметры.Заказчик = ДокументОснование.Партнер.Наименование + Телефоны;
		ТабличныйДокумент.Вывести(Заказчик);

		НомерНакладнойРеализации.Параметры.НомерРеализации = ДокументОснование.Номер;
		ТабличныйДокумент.Вывести(НомерНакладнойРеализации);
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
			
			Если ПараметрыПечати.Свойство("ДатаИсполнения") Тогда
				Если НЕ ПараметрыПечати.ДатаИсполнения = Дата("00010101") Тогда
					ДатаИсполнения.Параметры.ДатаИсполнения	= ПараметрыПечати.ДатаИсполнения;
					ТабличныйДокумент.Вывести(ДатаИсполнения);
					ВремяИсполнения.Параметры.ВремяИсполнения = ПараметрыПечати.ВремяИсполнения;
					ТабличныйДокумент.Вывести(ВремяИсполнения);
				КонецЕсли;
			КонецЕсли;
						
			Если ПараметрыПечати.Свойство("ПрограмныеСредства") Тогда
				Если НЕ ПустаяСтрока(ПараметрыПечати.ПрограмныеСредства) Тогда
					ПрограмныеСредства.Параметры.ПрограмныеСредства	= ПараметрыПечати.ПрограмныеСредства;
					ТабличныйДокумент.Вывести(ПрограмныеСредства);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Менеджер.Параметры.Менеджер = ДокументОснование.Менеджер.Наименование;
		ТабличныйДокумент.Вывести(Менеджер);
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
			Если ПараметрыПечати.Свойство("Приметки") Тогда
				Если НЕ ПустаяСтрока(ПараметрыПечати.Приметки) Тогда
					Приметки.Параметры.Приметки = ПараметрыПечати.Приметки;
					ТабличныйДокумент.Вывести(Приметки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
			|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
			|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
			|	РеализацияТоваровУслугТовары.Склад КАК Склад,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка
			|	КОНЕЦ КАК Упаковка,
			|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество,
			|	ЕСТЬNULL(ДокОрдер.Ссылка, РеализацияТоваровУслугТовары.Ссылка) КАК ДокументСсылка
			|ПОМЕСТИТЬ КешРеализации
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК ДокОрдер
			|		ПО ДокОрдер.Распоряжение = РеализацияТоваровУслугТовары.Ссылка
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|	И (РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатурыКомплектующие)
			|	ИЛИ РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатурыСофт))
			|;
			|
			|ВЫБРАТЬ
			|	ТабРеализации.Код КАК Код,
			|	ТабРеализации.Артикул КАК Артикул,
			|	ТабРеализации.Номенклатура КАК Номенклатура,
			|	ТабРеализации.Характеристика КАК Характеристика,
			|	ТабРеализации.Упаковка КАК Упаковка,
			|	ТабРеализации.Количество КАК Количество,
			|	ЕСТЬNULL(РегистрСН.СерийныеНомера, 0) КАК СерийныйНомер
			|ИЗ
			|	КешРеализации КАК ТабРеализации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(,, Регистратор,
			|										(Номенклатура, Характеристика, Склад) В
			|										(
			|											ВЫБРАТЬ
			|												КешРеализации.Номенклатура,
			|												КешРеализации.Характеристика,
			|												КешРеализации.Склад
			|											ИЗ
			|												КешРеализации)) КАК РегистрСН
			|		ПО
			|			РегистрСН.Номенклатура = ТабРеализации.Номенклатура
			|			И РегистрСН.Характеристика = ТабРеализации.Характеристика
			|			И РегистрСН.Склад = ТабРеализации.Склад
			|			И РегистрСН.Регистратор = ТабРеализации.ДокументСсылка";

		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		//Запрос.УстановитьПараметр("ГруппаНоменклатуры", Справочники.Номенклатура.НайтиПоКоду("00000000002"));
        Запрос.УстановитьПараметр("ВидНоменклатурыКомплектующие", 	Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Комплектуючі"));
		Запрос.УстановитьПараметр("ВидНоменклатурыСофт", 			Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Програми"));
		
		Результат = Запрос.Выполнить();

		Номенклатура 	= Неопределено;
		НомерСтроки = 1;
		
		ВыборкаНоменклатура = Результат.Выбрать();

		ТабличныйДокумент.Вывести(ПустаяОбласть);
		ТабличныйДокумент.Вывести(ШапкаТаблицы);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			Если Номенклатура <> ВыборкаНоменклатура.Номенклатура Тогда
			
				ЗаполнитьЗначенияСвойств(ДанныеТаблицы.Параметры, ВыборкаНоменклатура);
				ДанныеТаблицы.Параметры.НомерСтроки = Строка(НомерСтроки) + ".";
				ТабличныйДокумент.Вывести(ДанныеТаблицы);
				
				Номенклатура = ВыборкаНоменклатура.Номенклатура;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
				
			Если ВыборкаНоменклатура.СерийныйНомер <> 0 Тогда
			
				ЗаполнитьЗначенияСвойств(ДанныеСерийныеНомера.Параметры, ВыборкаНоменклатура);
				ТабличныйДокумент.Вывести(ДанныеСерийныеНомера);
				
			КонецЕсли;			
			
		КонецЦикла;

		
	КонецЕсли;	
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДокументОснование);
					
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗаказВидатковаНакладна(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Заказ_Накладная";
	
	ДанныеПечати			= ДанныеДляПечати[3].Выбрать();
	ВыборкаПоДокументам 	= ДанныеДляПечати[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
	
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		
		// Если в накладной только услуги - перейдем к следующему документу
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			РезультатСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоТоварам, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
			Если ТипЗнч(РезультатСкидки) = Тип("Структура") Тогда
				ЕстьСкидки = РезультатСкидки.ЕстьСкидки;
			ИначеЕсли ТипЗнч(РезультатСкидки) = Тип("Булево") Тогда
				ЕстьСкидки = РезультатСкидки;
			Иначе
				ЕстьСкидки = Ложь;
			КонецЕсли;
			ЕстьНДС = ?(ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.БезНДС 
					ИЛИ ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС0, Ложь, Истина );
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать накладной не требуется'"),
				ДанныеПечати.Ссылка
				);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет 				= ПолучитьМакет("ПФ_MXL_ВидатковаНакладна");
		МакетПеремещения    = ПолучитьМакет("ПФ_MXL_ВидатковаНакладна_Перемещение");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = СформироватьЗаголовокДокументаВидатковойНакладной(ДанныеПечати, НСтр("ru='Видаткова накладна'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика                         = ШапкаОрганизации.ТекстКорреспондента;//ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = ШапкаОрганизации.НазваниеОрганизации;//ДанныеПечати.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ДанныеПечати.ДокументПеремещение Тогда
			ОбластьМакета                                   = Макет.ПолучитьОбласть("ПокупательПеремещение");
			ОбластьМакета.Параметры.Адрес 					= ДанныеПечати.Адрес;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		Иначе
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
			ПредставлениеПолучателя                         = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Получатель, ДанныеПечати.Дата), "ПолноеНаименование");
			ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
			ОбластьМакета.Параметры.Получатель              = ДанныеПечати.Получатель;
			ОбластьМакета.Параметры.Адрес              		= ДанныеПечати.Адрес;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим заголовок таблицы Товары
		
		Если ДанныеПечати.ДокументПеремещение Тогда
			
			ОбластьПеремещения = Новый ТабличныйДокумент;
			
			ОбластьШапкаПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|НомерСтроки");
			ОбластьШапкаПеремещенияКоды 		= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Коды");
			ОбластьШапкаПеремещенияТовар 		= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Товар");
			ОбластьШапкаПеремещенияКоличество 	= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Количество");
			 
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияНомерСтроки);
			Если ВыводитьКоды Тогда
				ОбластьШапкаПеремещенияКоды.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияКоды);
			КонецЕсли;
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияТовар);
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияКоличество);
			
			ТабличныйДокумент.Вывести(ОбластьПеремещения);
			
		Иначе
			
			СуффиксОбластиСтроки = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
			СуффиксОбластиКолонки = ?(ЕстьСкидки И ЕстьНДС, "СоСкидкойСНДС", ?(ЕстьСкидки Или ЕстьНДС, "СоСкидкойИлиСНДС", ""));
			
			ОбластьКолонкаТовар = Макет.Область("ПерваяКолонкаТовара");
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
				+ ?(ВыводитьКоды, 0, Макет.Область("КолонкаКодов").ШиринаКолонки)
			;
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|Товар" + СуффиксОбластиКолонки);
			ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбластиСтроки + "|Данные" + СуффиксОбластиКолонки);
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
				
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
				
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЕсли;
		
		ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|Товар" + СуффиксОбластиКолонки);
		ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбластиСтроки + "|Данные" + СуффиксОбластиКолонки);
		
		
		СтрокаТаблицыПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|НомерСтроки");
		СтрокаТаблицыПеремещенияКоды 			= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Коды");
		СтрокаТаблицыПеремещенияТовар 			= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Товар");		
		СтрокаТаблицыПеремещенияКоличество		= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Количество");
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок    = 0;
		НомерСтроки    = 0;
		ВсегоБезСкидок = 0;
		
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если ДанныеПечати.ДокументПеремещение Тогда
				
				ОбластьПеремещения = Новый ТабличныйДокумент;
				
				СтрокаТаблицыПеремещенияНомерСтроки.Параметры.НомерСтроки = НомерСтроки;
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияНомерСтроки);
				Если ВыводитьКоды Тогда
					СтрокаТаблицыПеремещенияКоды.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
					ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияКоды);					
				КонецЕсли;
				
				СтрокаТаблицыПеремещенияТовар.Параметры.Товар = ВыборкаПоТоварам["Номенклатура"];
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияТовар);
				
				СтрокаТаблицыПеремещенияКоличество.Параметры.Количество 	= ВыборкаПоТоварам["Количество"];
				СтрокаТаблицыПеремещенияКоличество.Параметры.ЕдиницаЦены    = ВыборкаПоТоварам["ЕдиницаЦены"];
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияКоличество);
				
				ТабличныйДокумент.Вывести(ОбластьПеремещения);
				
			Иначе
						
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					
					ОбластьКодов.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
					ТабличныйДокумент.Присоединить(ОбластьКодов);
					
				КонецЕсли;
				
				ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
				ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоТоварам.ТоварНаименованиеПолное, ВыборкаПоТоварам.Характеристика)
					+ ?(ВыборкаПоТоварам.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
					
				ТабличныйДокумент.Присоединить(ОбластьТовар);

				
				ВалютаДокумента = ДанныеПечати.Валюта;
				ВалютаРегламент = Константы.ВалютаРегламентированногоУчета.Получить();
				МножительРеглам = 1;
				
				Если ВалютаДокумента <> ВалютаРегламент Тогда
					ДанныеКурсаДок  = ЗаполнитьДанныеКурсаДляВалюты(ВалютаДокумента);
					ДанныеКурсаРег	= ЗаполнитьДанныеКурсаДляВалюты(ВалютаРегламент);
					МножительРеглам = (ДанныеКурсаДок.Курс / ДанныеКурсаДок.Кратность) / (ДанныеКурсаРег.Курс / ДанныеКурсаРег.Кратность);
				КонецЕсли;
				
				ПроцентНДС = 0;
				Если 		ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС10 Тогда
					ПроцентНДС = 0.1;
				ИначеЕсли 	ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС18 Тогда
					ПроцентНДС = 0.18;
				ИначеЕсли 	ШапкаОрганизации.СтавкаПДВ = Перечисления.СтавкиНДС.НДС20 Тогда
					ПроцентНДС = 0.2;
				КонецЕсли;
				
				ПроцентСкидки = 0;
				Если ВыборкаПоТоварам.СуммаСкидки > 0 Тогда	
					ПроцентСкидки = ВыборкаПоТоварам.СуммаСкидки / ВыборкаПоТоварам.СуммаБезСкидки;	
				КонецЕсли;
					
				СтруктураПоТоварам = Новый Структура("ЕдиницаЦены, Количество, СтавкаНДС, СуммаНДС, СуммаБезСкидки, СуммаСкидки, Сумма, Цена", 
													ВыборкаПоТоварам.ЕдиницаЦены,
													ВыборкаПоТоварам.Количество,
													ШапкаОрганизации.СтавкаПДВ, 
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * ПроцентНДС / (?(ШапкаОрганизации.ЦенаВключаетПДВ, ПроцентНДС, 0) + 1)) * (1 - ПроцентСкидки) * МножительРеглам, 
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * (?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, ПроцентНДС) + 1)) * МножительРеглам,
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * (?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, ПроцентНДС) + 1)) * ПроцентСкидки * МножительРеглам,
													(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * (?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, ПроцентНДС) + 1)) * (1 - ПроцентСкидки) * МножительРеглам,
													ВыборкаПоТоварам.Цена * МножительРеглам);
				
				//ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
				ОбластьДанных.Параметры.Заполнить(СтруктураПоТоварам);

				ТабличныйДокумент.Присоединить(ОбластьДанных);
				
				Сумма          = Сумма 	 			+ СтруктураПоТоварам.Сумма;
				СуммаНДС       = СуммаНДС      		+ СтруктураПоТоварам.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок    = ВсегоСкидок    + СтруктураПоТоварам.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтруктураПоТоварам.СуммаБезСкидки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал
		
		Если ДанныеПечати.ДокументПеремещение Тогда
			
			ОбластьПеремещения = Новый ТабличныйДокумент;
			
			ПодвалТаблицыПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|НомерСтроки");
			ПодвалТаблицыПеремещенияКоды 			= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Коды");
			ПодвалТаблицыПеремещенияТовар 			= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Товар");		
			ПодвалТаблицыПеремещенияКоличество		= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Количество");		
			
			ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияНомерСтроки);
			Если ВыводитьКоды Тогда
				ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияКоды);
			КонецЕсли;
			ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияТовар);
			ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияКоличество);
			
			ТабличныйДокумент.Вывести(ОбластьПеремещения);
			
		Иначе
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|Товар" + СуффиксОбластиКолонки);
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбластиСтроки + "|Данные" + СуффиксОбластиКолонки);
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			Если ЕстьСкидки Тогда
				
				ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				
			КонецЕсли;
			
			ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			// Выводим ИтогоНДС
			
			Область = Макет.ПолучитьОбласть("ПодвалНДС");
			
			Область.Параметры.ВсегоНДС = СуммаНДС;
			Если ЕстьНДС Тогда
				Область.Параметры.НДС = ?(ШапкаОрганизации.ЦенаВключаетПДВ, НСтр("ru='В тому числі ПДВ:'"), НСтр("ru='Сума ПДВ:'"));
			Иначе
				Область.Параметры.НДС = НСтр("ru='Без податку (ПДВ)'");
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);
			
			// Выводим Сумму прописью
			
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма + ?(ШапкаОрганизации.ЦенаВключаетПДВ, 0, СуммаНДС);
			
			ИтоговаяСтрока = НСтр("ru='Всього найменувань %КоличествоНаименований%, на суму %СуммаДокумента% '");
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", ВыборкаПоТоварам.Количество());
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ВалютаРегламент));

			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, ВалютаРегламент);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;	
			
		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЗначениеЗаполнено(ДанныеПечати.ОтпускПроизвел) Тогда
			ОбластьМакета.Параметры.ОтпускПроизвел = ФамилияИнициалыФизЛица(ДанныеПечати.ОтпускПроизвел);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументОприходованиеТоваров(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации = Неопределено)
	
	ДопКолонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);

	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента = НСтр("ru='Акт про оприбуткування товарів'");
	
	Макет = ПолучитьМакет("ПФ_MXL_АктОбОприходованиеТоваров");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьОснование  = Макет.ПолучитьОбласть("Основание");

	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТоварШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьДанныеШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	Если Не ВыводитьДопКолонку Тогда

		Макет.Область("Товар").ШиринаКолонки = Макет.Область("Товар").ШиринаКолонки
				+ Макет.Область("КолонкаКодов").ШиринаКолонки;

	КонецЕсли;

	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТоварСтрока  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Данные");

	ОбластьНомераПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
	ОбластьКодовПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	ОбластьТоварПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
	ОбластьДанныхПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");

	ОбластьПодписи       = Макет.ПолучитьОбласть("Подписи");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
		
	ВыборкаДокументы = ДанныеДляПечати[0].Выбрать();
	ВыборкаПоТабличнымЧастям = ДанныеДляПечати[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной.
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаДокументы);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокументы);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ОбластьЗаголовок.Параметры.СкладПредставление = ПолучитьПредставлениеСклада(ВыборкаДокументы.СкладПредставление, "");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаДокументы.Ссылка);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Если ЗначениеЗаполнено(ВыборкаДокументы.ДокументОснование) Тогда
			РеквизитыОснования = Новый Структура("Номер, Дата, Префикс", ВыборкаДокументы.НомерОснования, ВыборкаДокументы.ДатаОснования);
			ПредставлениеОснования 	= ВыборкаДокументы.ДокументОснование.ПолучитьОбъект().Метаданные().Синоним;				
			ОбластьОснование.Параметры.ОснованиеПредставление = СформироватьЗаголовокДокумента(РеквизитыОснования, ПредставлениеОснования);
			ТабличныйДокумент.Вывести(ОбластьОснование);
		КонецЕсли;
		// Вывод шапки.
		ТабличныйДокумент.Вывести(ОбластьНомераШапка);

		Если ВыводитьДопКолонку Тогда

			ОбластьКодовШапка.Параметры.ДопКолонка = ДопКолонка;
			ТабличныйДокумент.Присоединить(ОбластьКодовШапка);

		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТоварШапка);

		ТабличныйДокумент.Присоединить(ОбластьДанныеШапка);

		СуммаВсего = 0;
		ВсегоНаименований = 0;

		// Вывод строк.
		ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаДокументы.Ссылка));
		
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();
		
		Пока ВыборкаПоСтрокам.Следующий() Цикл

			ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабличныйДокумент.Вывести(ОбластьНомераСтрока);

			Если ВыводитьДопКолонку Тогда

				ОбластьКодовСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);

			КонецЕсли;

			// Номенклатура.
			ОбластьТоварСтрока.Параметры.Номенклатура = ВыборкаПоСтрокам.Номенклатура;
			ОбластьТоварСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокам.НоменклатураПредставление,
					ВыборкаПоСтрокам.ХарактеристикаПредставление);
					
					
			ТабличныйДокумент.Присоединить(ОбластьТоварСтрока);

			// Данные о ценах, количестве.
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);

			СуммаВсего = СуммаВсего + ВыборкаПоСтрокам.Сумма;
			ВсегоНаименований = ВсегоНаименований + 1;

		КонецЦикла;

		// Вывод подвала.
		ТабличныйДокумент.Вывести(ОбластьНомераПодвалТаблицы);
		Если ВыводитьДопКолонку Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовПодвалТаблицы);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТоварПодвалТаблицы);
		ТабличныйДокумент.Присоединить(ОбластьДанныхПодвалТаблицы);

		// Вывод Суммы прописью.
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаВсего, ВалютаУпр, Истина);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всього найменувань %ВсегоНаименований%, на суму %СуммаВсего% %ВалютаУпр%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%СуммаВсего%", Формат(СуммаВсего, "ЧЦ=15; ЧДЦ=2"));
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВалютаУпр%", Строка(ВалютаУпр));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;

		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);

		// Вывод подписей.
		ОбластьПодписи.Параметры.Ответственный = ФамилияИнициалыФизЛица(ВыборкаДокументы.Ответственный);
		ОбластьПодписи.Параметры.Кладовщик = ФамилияИнициалыФизЛица(ВыборкаДокументы.Кладовщик);		
		ТабличныйДокумент.Вывести(ОбластьПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументАктВыполненныхРаботКТСПомощь(ТабличныйДокумент, ДанныеДляПечати)

	Макет = ПолучитьМакет("ПФ_MXL_АктВыполненныхРабот");
	
	ОбластьНомерДокумента     = Макет.ПолучитьОбласть("НомерДокумента");
	ОбластьПробел		      = Макет.ПолучитьОбласть("Пробел");
	ОбластьЗаказчик           = Макет.ПолучитьОбласть("Заказчик");
	ОбластьШапкаТаблицы	      = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьТелоТаблицы	      = Макет.ПолучитьОбласть("ТелоТаблицы");
	ОбластьПодвалТаблицы      = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьСумма  		      = Макет.ПолучитьОбласть("Сумма");
	ОбластьСуммаПрописью  	  = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодрядчикЗаказчик  = Макет.ПолучитьОбласть("ПодрядчикЗаказчик");
	ОбластьТекст              = Макет.ПолучитьОбласть("Текст");
	
	ЗаполнитьЗначенияСвойств(ОбластьНомерДокумента.Параметры, ДанныеДляПечати);
	ЗаполнитьЗначенияСвойств(ОбластьЗаказчик.Параметры, ДанныеДляПечати);
	ЗаполнитьЗначенияСвойств(ОбластьПодрядчикЗаказчик.Параметры, ДанныеДляПечати);
	ЗаполнитьЗначенияСвойств(ОбластьТекст.Параметры, ДанныеДляПечати);
	
	ТабДокументТовары = Новый ТабличныйДокумент;
	Сумма			  = 0;
	НомерСтроки       = 1;
	Для каждого СтрокаТЧ Из ДанныеДляПечати.Товары Цикл
		ЗаполнитьЗначенияСвойств(ОбластьТелоТаблицы.Параметры, СтрокаТЧ);
		ОбластьТелоТаблицы.Параметры.НомерСтроки = НомерСтроки;
		ТабДокументТовары.Вывести(ОбластьТелоТаблицы);   			
		Сумма 		= Сумма + СтрокаТЧ.Сумма;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(ОбластьСумма.Параметры, ДанныеДляПечати);
	ОбластьСумма.Параметры.Сумма = Сумма;
	
	ОбластьСуммаПрописью.Параметры.СуммаПрописью = СформироватьСуммуПрописью(Сумма, Константы.ВалютаРегламентированногоУчета.Получить());
	
	ТабличныйДокумент.Вывести(ОбластьНомерДокумента);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьЗаказчик);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	ТабличныйДокумент.Вывести(ТабДокументТовары);
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьСумма);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПодрядчикЗаказчик);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьТекст);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПробел);
	ТабличныйДокумент.Вывести(ОбластьПодрядчикЗаказчик);

КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументАктСверкиВзаимныхРасчетов(ТабличныйДокумент, ОбъектыПечати, ДанныеДокумента)
	
	ПервыйДокумент = Истина;
	Пока ДанныеДокумента.Следующий() Цикл
		
		ДетальныеРасчеты = ДетальныеРасчетыАктСверкиВзаиморасчетов(ДанныеДокумента);
			
		Если ДетальныеРасчеты = Неопределено Тогда 
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу %1 нет расчетов с партнерами. Печать акта сверки взаимных расчетов не требуется.'"),
				ДанныеДокумента.ДокументСсылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеДокумента.ДокументСсылка);
		КонецЕсли;
		
		Макет = ПолучитьМакет("ПФ_MXL_АктСверкиВзаимныхРасчетов");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// ШАПКА ДОКУМЕНТА
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru='Акт сверки взаимных расчетов'"));
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по состоянию на %1 г.'"),
				Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'"),);
			
			ПредставлениеПериодаРасчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По состоянию на %1 г.'"),
				Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				
				ПредставлениеПериода = НСтр("ru='за период: '") + ПредставлениеПериода;
				
			Иначе
				
				ПредставлениеПериода = НСтр("ru='за '") + ПредставлениеПериода;
				
			КонецЕсли;
			
			ПредставлениеПериодаРасчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В период с %1 г. по %2 г.'"),
				Формат(ДанныеДокумента.НачалоПериода, "ДФ='дд ММММ гггг'"),
				Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'"),);
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовка 			 = ТекстЗаголовка;       
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода 	 = ПредставлениеПериода;
		ОбластьМакета.Параметры.ПредставлениеПериодаРасчетов = ПредставлениеПериодаРасчетов;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// 1. ДЕТАЛЬНЫЕ РАСЧЕТЫ
		
		ТаблицаЗадолженности = Новый ТаблицаЗначений;
		ТаблицаЗадолженности.Колонки.Добавить("Валюта");
		ТаблицаЗадолженности.Колонки.Добавить("Сумма");
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			ТаблицаЗадолженности.Колонки.Добавить("Партнер");
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			ТаблицаЗадолженности.Колонки.Добавить("Договор");
		КонецЕсли; 
		
		Пока ДетальныеРасчеты.Следующий() Цикл
			
			Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
				ВыборкаПоДетальнымРасчетам = ДетальныеРасчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
					ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписиАктСверкиВзаиморасчетов(ВыборкаПоДетальнымРасчетам, ДанныеДокумента, ДетальныеРасчеты.Партнер, , СтруктураПредставленийУчастников, Макет, ТаблицаЗадолженности));
				КонецЦикла; 
			ИначеЕсли ДанныеДокумента.РасшифровкаПоДоговорам Тогда
				ВыборкаПоДетальнымРасчетам = ДетальныеРасчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
					ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписиАктСверкиВзаиморасчетов(ВыборкаПоДетальнымРасчетам, ДанныеДокумента, , ДетальныеРасчеты.Договор, СтруктураПредставленийУчастников, Макет, ТаблицаЗадолженности));
				КонецЦикла; 
			Иначе
				ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписиАктСверкиВзаиморасчетов(ДетальныеРасчеты, ДанныеДокумента, , , СтруктураПредставленийУчастников, Макет, ТаблицаЗадолженности));
			КонецЕсли;
		
		КонецЦикла; 
		
		// 2. ЗАДОЛЖЕННОСТЬ
		
		Если ТаблицаЗадолженности.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок		 = Макет.ПолучитьОбласть("ЗаголовокЗадолженность");
			ОбластьМакетаСтрока			 = Макет.ПолучитьОбласть("СтрокаЗадолженность");
			ОбластьМакетаСтрокаПодробно1 = Макет.ПолучитьОбласть("СтрокаЗадолженностьПодробноВтч");
			ОбластьМакетаСтрокаПодробно2 = Макет.ПолучитьОбласть("СтрокаЗадолженностьПодробно");
			
			ОбластьМакетаЗаголовок.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'");
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ТаблицаЗадолженностиПоВалютам = ТаблицаЗадолженности.Скопировать();
			ТаблицаЗадолженностиПоВалютам.Свернуть("Валюта", "Сумма");
			Для Каждого СтрокаЗадолженностиПоВалютам Из ТаблицаЗадолженностиПоВалютам Цикл
				
				ОбластьМакетаСтрока.Параметры.Валюта = СтрокаЗадолженностиПоВалютам.Валюта;
				Если СтрокаЗадолженностиПоВалютам.Сумма > 0 Тогда
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(СтрокаЗадолженностиПоВалютам.Сумма, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");
					Если ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
						ОбластьМакетаСтрока.Параметры.Дебитор = ДанныеДокумента.ПредставлениеПартнера;
					Иначе
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
					КонецЕсли;
				Иначе
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(-СтрокаЗадолженностиПоВалютам.Сумма, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");
					Если ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации
							+ НСтр("ru=' перед '")
							+ ДанныеДокумента.ПредставлениеПартнера;
					Иначе
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
					КонецЕсли;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокаЗадолженностиПоВалютам.Сумма,СтрокаЗадолженностиПоВалютам.Валюта);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					
					ПервыйПроходПоПартнерам = Истина;
					МассивСтрокЗадолженности = ТаблицаЗадолженности.НайтиСтроки(Новый Структура("Валюта", СтрокаЗадолженностиПоВалютам.Валюта));
					Для Каждого СтрокаЗадолженности Из МассивСтрокЗадолженности Цикл
						Если ПервыйПроходПоПартнерам Тогда
							ОбластьМакета = ОбластьМакетаСтрокаПодробно1;
						Иначе
							ОбластьМакета = ОбластьМакетаСтрокаПодробно2;
						КонецЕсли;
						
						ОбластьМакета.Параметры.Валюта = СтрокаЗадолженности.Валюта;
						Если СтрокаЗадолженности.Сумма > 0 Тогда
							ОбластьМакета.Параметры.Сумма = Формат(СтрокаЗадолженности.Сумма, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");
							ОбластьМакета.Параметры.Дебитор = СтрокаЗадолженности.Партнер;
						Иначе
							ОбластьМакета.Параметры.Сумма = Формат(-СтрокаЗадолженности.Сумма, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации
								+ НСтр("ru=' перед '")
								+ СтрокаЗадолженности.Партнер;
						КонецЕсли;	
						ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокаЗадолженности.Сумма, СтрокаЗадолженности.Валюта);
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						ПервыйПроходПоПартнерам = Ложь;
					КонецЦикла; 
				
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗадолженностьОтсутствует");
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли; 
		
		// 3. РАСХОЖДЕНИЙ НЕ ВЫЯВЛЕНО
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ПОДПИСИ
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ПРИЛОЖЕНИЕ
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			
			ТаблицаОстатков = ОстаткиРасчетовАктСверкиВзаиморасчетов(ДанныеДокумента);
			
			Если ТаблицаОстатков <> Неопределено Тогда
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТекстЗаголовкаПриложения = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента,
					НСтр("ru='к акту сверки взаимных расчетов'"));
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПриложение");
				ОбластьМакета.Параметры.ТекстЗаголовкаПриложения = ТекстЗаголовкаПриложения;
				ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				МассивВалют = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаОстатков.ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					МассивПартнеров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаОстатков.ВыгрузитьКолонку("Партнер"));
				КонецЕсли; 
				
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					Для Каждого Партнер Из МассивПартнеров Цикл
						ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженностиАктСверкиВзаиморасчетов(ДанныеДокумента, ТаблицаОстатков, МассивВалют, Партнер, СтруктураПредставленийУчастников, Макет));
					КонецЦикла; 
				Иначе
					ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженностиАктСверкиВзаиморасчетов(ДанныеДокумента, ТаблицаОстатков, МассивВалют, , СтруктураПредставленийУчастников, Макет));
				КонецЕсли;	
				
				ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
				ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
				ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
														  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
				
				ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
														  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументВидатковаНакладнаУправлениеПоступлением(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеДляПечати.Следующий() Цикл
		
		Идентификатор = Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85");
		СкладСоборна  = Справочники.Склады.ПолучитьСсылку(Идентификатор);
		
		Если ДанныеДляПечати.Ссылка.СкладОтправитель = СкладСоборна Тогда 
			ТаблицаТоваров = ПолучитьДанныеРасходныеОрдера_ВидатковаНакладнаУправлениеПоступлением(ДанныеДляПечати.Ссылка);
		Иначе 
			ТаблицаТоваров	= ДанныеДляПечати.Ссылка.Товары.Выгрузить();
		КонецЕсли;
		
		
		Макет 				= ПолучитьМакет("ПФ_MXL_ВидатковаНакладна");
		МакетПеремещения    = ПолучитьМакет("ПФ_MXL_ВидатковаНакладна_Перемещение");
		
		Если ТаблицаТоваров.Количество()=0 Тогда 
			ОбластьПеремещения = Новый ТабличныйДокумент;
			ПодвалПробел = МакетПеремещения.ПолучитьОбласть("ПодвалПробел");	
			ОбластьПеремещения.Присоединить(ПодвалПробел);
			ТабличныйДокумент.Вывести(ОбластьПеремещения);
			Продолжить;
			
		КонецЕсли;

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеДляПечати, НСтр("ru='Видаткова накладна'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДляПечати.Ссылка);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика                         = ШапкаОрганизации.ТекстКорреспондента;
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = ШапкаОрганизации.НазваниеОрганизации;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета                                   = Макет.ПолучитьОбласть("ПокупательПеремещение");
		ОбластьМакета.Параметры.Адрес 					= ?(ПустаяСтрока(ДанныеДляПечати.СкладПолучатель),"", ДанныеДляПечати.СкладПолучатель + ", ") + ДанныеДляПечати.Адрес;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета                                   = Макет.ПолучитьОбласть("ОтправительПеремещение");
		ОбластьМакета.Параметры.Адрес					= ?(ПустаяСтрока(ДанныеДляПечати.СкладОтправитель),"", ДанныеДляПечати.СкладОтправитель + ", ") + ДанныеДляПечати.АдресОтправителя;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы Товары
		ОбластьПеремещения = Новый ТабличныйДокумент;
		ОбластьШапкаПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|НомерСтроки");
		ОбластьШапкаПеремещенияКоды 		= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Коды");
		ОбластьШапкаПеремещенияТовар 		= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Товар");
		ОбластьШапкаПеремещенияКоличество 	= МакетПеремещения.ПолучитьОбласть("ШапкаТаблицыПеремещения|Количество");
			 
		ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияНомерСтроки);
		Если ВыводитьКоды Тогда
			ОбластьШапкаПеремещенияКоды.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияКоды);
		КонецЕсли;
		ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияТовар);
		ОбластьПеремещения.Присоединить(ОбластьШапкаПеремещенияКоличество);
        ТабличныйДокумент.Вывести(ОбластьПеремещения);
		
		СтрокаТаблицыПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|НомерСтроки");
		СтрокаТаблицыПеремещенияКоды 			= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Коды");
		СтрокаТаблицыПеремещенияТовар 			= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Товар");		
		СтрокаТаблицыПеремещенияКоличество		= МакетПеремещения.ПолучитьОбласть("СтрокаТаблицыПеремещения|Количество");
		
		// Выводим строки таблицы Товары
		НомерСтроки = 0;
		Для Каждого Элемент Из ТаблицаТоваров Цикл  	
			НомерСтроки = НомерСтроки + 1;
				ОбластьПеремещения = Новый ТабличныйДокумент;
				СтрокаТаблицыПеремещенияНомерСтроки.Параметры.НомерСтроки = НомерСтроки;
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияНомерСтроки);
				Если ВыводитьКоды Тогда
					СтрокаТаблицыПеремещенияКоды.Параметры.Артикул = ?(КолонкаКодов="Код",Элемент.Номенклатура.Код,Элемент.Номенклатура.Артикул);
					ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияКоды);					
				КонецЕсли;
				СтрокаТаблицыПеремещенияТовар.Параметры.Товар = Элемент.Номенклатура;
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияТовар);
				СтрокаТаблицыПеремещенияКоличество.Параметры.Количество 	= Элемент.Количество;
				СтрокаТаблицыПеремещенияКоличество.Параметры.ЕдиницаЦены    = Элемент.Номенклатура.ЕдиницаИзмерения;
				ОбластьПеремещения.Присоединить(СтрокаТаблицыПеремещенияКоличество);
				ТабличныйДокумент.Вывести(ОбластьПеремещения);
		КонецЦикла;
		
		// Выводим подвал
		
		ОбластьПеремещения = Новый ТабличныйДокумент;
		
		ПодвалТаблицыПеремещенияНомерСтроки 	= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|НомерСтроки");
		ПодвалТаблицыПеремещенияКоды 			= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Коды");
		ПодвалТаблицыПеремещенияТовар 			= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Товар");		
		ПодвалТаблицыПеремещенияКоличество		= МакетПеремещения.ПолучитьОбласть("ПодвалТаблицыПеремещения|Количество");		
			
		ОбластьПеремещения.Вывести(ПодвалТаблицыПеремещенияНомерСтроки);
		Если ВыводитьКоды Тогда
			ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияКоды);
		КонецЕсли;
		ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияТовар); 
		ОбластьПеремещения.Присоединить(ПодвалТаблицыПеремещенияКоличество);
		ТабличныйДокумент.Вывести(ОбластьПеремещения);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДляПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументАктНаЗаменуТовара(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	Макет					= ПолучитьМакет("ПФ_MXL_АктНаЗаменуТовара");
	
	ДанныеПечати		 	= ДанныеДляПечати[6].Выбрать();
	ДанныеЗаголовка			= ДанныеДляПечати[1].Выгрузить()[0];
	
	НомерСтрокиНачало 		= ТабличныйДокумент.ВысотаТаблицы + 1;
	
	//Заголовок
	ОбластьМакетаЗаголовок	= Макет.ПолучитьОбласть("Заголовок");
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакетаЗаголовок, ДанныеЗаголовка.Документ);

	
	Попытка
		НомерДляПечати = Формат(Число(ДанныеЗаголовка.Номер),"ЧВН="); 
	Исключение
		НомерДляПечати = ДанныеЗаголовка.Номер; 
	КонецПопытки;
	
	ТекстЗаголовка	= "Акт на заміну товару №";
	ДатаДокумента	= ДанныеЗаголовка.Дата;
	ТекстЗаголовка	= ПолучитьНазвуДокументаДляЗаголовкаАктуНаЗаменуТоварра(ТекстЗаголовка,НомерДляПечати, ДатаДокумента);
	ОбластьМакетаЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	Если ЗначениеЗаполнено(ДанныеЗаголовка.ЗаявкаСервисногоЦентру) Тогда
		Попытка
			НомерДляПечатиЗСЦ = Формат(Число(ДанныеЗаголовка.НомерЗСЦ),"ЧВН="); 
		Исключение
			НомерДляПечатиЗСЦ = ДанныеЗаголовка.НомерЗСЦ; 
		КонецПопытки;
		
		ПредставлениеДокументЗСЦ									= "по замовленню-наряду №";
		ПредставлениеДокументЗСЦ 									= ПолучитьНазвуДокументаДляЗаголовкаАктуНаЗаменуТоварра(ПредставлениеДокументЗСЦ, НомерДляПечатиЗСЦ, ДанныеЗаголовка.ДатаЗСЦ);
		ОбластьМакетаЗаголовок.Параметры.ПредставлениеДокументЗСЦ 	= ПредставлениеДокументЗСЦ;
		
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.ПредставлениеПолучателя 	= ДанныеЗаголовка.ПартнерПредставление;
	ОбластьМакетаЗаголовок.Параметры.Телефон				 	= Сред(ПолучитьНомерТелефонаПартнера(ДанныеЗаголовка.Партнер),2);
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);

	
	ОбластьМакетаШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);

	ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");	
		
	НомерСтроки = 1;

	Пока ДанныеПечати.Следующий() Цикл
		ОбластьМакетаСтрокаТаблицы.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакетаСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
		ОбластьМакетаСтрокаТаблицы.Параметры.СерийныйНомер = СокрЛП(Строка(ДанныеПечати.СерийныйНомер));
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
	//Подписи
	ОбластьМакетаПодписи = Макет.ПолучитьОбласть("Подписи");
	ТабличныйДокумент.Вывести(ОбластьМакетаПодписи);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗаказНаряд_Квитанции(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	Макет					= ПолучитьМакет("ПФ_MXL_КвитанцияЗаказаНаряда");
	
	// Область
	Для i=1 по 2 Цикл

	
		ДанныеПечати		 	= ДанныеДляПечати[3].Выбрать();
		НомерСтрокиНачало 		= ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//Заголовок
		ОбластьМакетаОбластьКвитанция	= Макет.ПолучитьОбласть("ОбластьКвитанция");
        Пока ДанныеПечати.Следующий() Цикл
            Если ПолучитьТипОрганизацииДляПечатиДокументовПоФ5(ДанныеПечати.Склад) Тогда
                ОбластьМакетаОбластьКвитанция.Параметры.НаименованиеСервиса = "Сервісний центр";
				ОбластьМакетаОбластьКвитанция.Параметры.СайтКомпании = "";
            Иначе
                ОбластьМакетаОбластьКвитанция.Параметры.НаименованиеСервиса = "«КТС» сервісний центр";
				ОбластьМакетаОбластьКвитанция.Параметры.СайтКомпании = "http://www.ktc-ua.com/";
            КонецЕсли;
            ОбластьМакетаОбластьКвитанция.Параметры.ТелефоныКонтрагента = Сред(ПолучитьНомерТелефонаПартнера(ДанныеПечати.ЗаказчикРемонта),2);
			ОбластьМакетаОбластьКвитанция.Параметры.Заполнить(ДанныеПечати);		
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаОбластьКвитанция);
		
		Область = Макет.ПолучитьОбласть("Разделитель");
	    Если i=1 Тогда 
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб 				= Истина;
	ТабличныйДокумент.ЭкземпляровНаСтранице 	= 1;
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументИспользованныеДеталиИУслугиПоЗаказу(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ШапкаОрганизации)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИСПОЛЬЗОВАННЫЕ_ДЕТАЛИ_И_УСЛУГ_ПО_ЗАКАЗУ";
	
	ДанныеПечати		= ДанныеДляПечати[4].Выбрать();
	ВыборкаПоТоварам 	= ДанныеДляПечати[5].Выбрать();

	Пока ДанныеПечати.Следующий() Цикл

		// Макет необходимо получать для каждого документа
		Макет 			  = ПолучитьМакет("ПФ_MXL_ИспользованныеДеталиИУслугиПоЗаказу");
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку ИспользованныеДеталиИУслугиПоЗаказу
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Використані деталі та послуги на замовлення'");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета                                   = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика                         = ШапкаОрганизации.ТекстКорреспондента;
        ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = ШапкаОрганизации.НазваниеОрганизации;
        ТабличныйДокумент.Вывести(ОбластьМакета);
				
		ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ДанныеПечати.ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель              = ДанныеПечати.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Выводим заголовок таблицы Товары
		
		ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		ТабличныйДокумент.Присоединить(ОбластьКодов);
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		ОбластьНомера  = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанных  = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
		
		Сумма          = 0;
		НомерСтроки    = 0;
		ВалютаДокумента = ДанныеПечати.Валюта;
		ВалютаРегламент = Константы.ВалютаРегламентированногоУчета.Получить();
		МножительРеглам = 1;
		Если ВалютаДокумента <> ВалютаРегламент Тогда
			ДанныеКурсаДок  = ЗаполнитьДанныеКурсаДляВалюты(ВалютаДокумента);
			ДанныеКурсаРег	= ЗаполнитьДанныеКурсаДляВалюты(ВалютаРегламент);
			МножительРеглам = (ДанныеКурсаДок.Курс / ДанныеКурсаДок.Кратность) / (ДанныеКурсаРег.Курс / ДанныеКурсаРег.Кратность);
		КонецЕсли;
			
		// Выводим строки таблицы Товары
			
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			ОбластьКодов.Параметры.Заполнить(ВыборкаПоТоварам);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
			ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
			ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаПоТоварам.ТоварНаименованиеПолное, ВыборкаПоТоварам.Характеристика);
				
			ТабличныйДокумент.Присоединить(ОбластьТовар);
		
			СтруктураПоТоварам = Новый Структура("ЕдиницаЦены, Количество, Сумма, Цена", 
												ВыборкаПоТоварам.ЕдиницаЦены,
												ВыборкаПоТоварам.Количество,
												(ВыборкаПоТоварам.Цена * ВыборкаПоТоварам.Количество * МножительРеглам),
												ВыборкаПоТоварам.Цена * МножительРеглам);
			ОбластьДанных.Параметры.Заполнить(СтруктураПоТоварам);

			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Сумма          = Сумма 	 			+ СтруктураПоТоварам.Сумма;
		
		КонецЦикла;
		
			// Выводим подвал
			
			ОбластьНомера  = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов   = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных  = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			// Выводим Сумму прописью
			
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма;
			
			ИтоговаяСтрока = НСтр("ru='Всього найменувань %КоличествоНаименований%, на суму %СуммаДокумента% '");
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", ВыборкаПоТоварам.Количество());
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ВалютаРегламент));

			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, ВалютаРегламент);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
				
			// Выводим подписи
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			
			Если ЗначениеЗаполнено(ДанныеПечати.ОтпускПроизвел) Тогда
				ОбластьМакета.Параметры.ОтпускПроизвел = ФамилияИнициалыФизЛица(ДанныеПечати.ОтпускПроизвел);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
	КонецЦикла;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры //ЗаполнитьТабличныйДокументИспользованныеДеталиИУслугиПоЗаказу


// ДОПОЛНИТЕЛЬНЫЕ ПРОЦЕДУРЫ


Процедура ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, Знач ОбластьМакета, Штрихкод)
	
	ВыводитьШтрихкодВОтдельнуюОбласть = Ложь;
	Если Не ЕстьКартинкаШтрихкодаВОбластиМакета(ОбластьМакета) Тогда
		// Картинки штрихкода в этой области макета нет.
		
		Если Макет.Области.Найти("ОбластьШтрихкода") <> Неопределено Тогда
			
			// Проверить картинку штрихкода в области "Штрихкод"
			ОбластьМакетаШтрихкод = Макет.ПолучитьОбласть("ОбластьШтрихкода");
			Если ЕстьКартинкаШтрихкодаВОбластиМакета(ОбластьМакетаШтрихкод) Тогда
				ОбластьМакета = ОбластьМакетаШтрихкод;
				ВыводитьШтрихкодВОтдельнуюОбласть = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки.КартинкаШтрихкода);
		Возврат;
	КонецЕсли;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(ОбластьМакета.Рисунки.КартинкаШтрихкода.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",         Штрихкод);
	ПараметрыШтрихкода.Вставить("ТипКода",         4); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    4);
	
	ОбластьМакета.Рисунки.КартинкаШтрихкода.Картинка = МенеджерОборудованияСервер.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
	Если ВыводитьШтрихкодВОтдельнуюОбласть Тогда
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьКартинкаШтрихкодаВОбластиМакета(ОбластьМакета)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КартинкаШтрихкода", Новый УникальныйИдентификатор);
	СтароеЗначение = СтруктураПоиска.КартинкаШтрихкода;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОбластьМакета.Рисунки);
	
	Возврат Не СтруктураПоиска.КартинкаШтрихкода = СтароеЗначение;
	
КонецФункции



Функция ПолучитьДанныеРасходныеОрдера_ВидатковаНакладнаУправлениеПоступлением(Распоряжение)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТовары.Номенклатура,
	|	СУММА(РасходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|ГДЕ
	|	РасходныйОрдерНаТоварыТовары.Ссылка.Распоряжение = &Распоряжение
	|	И РасходныйОрдерНаТоварыТовары.НеОтгружать = 0
	|	И ВЫБОР
	|			КОГДА РасходныйОрдерНаТоварыТовары.Ссылка.Склад.ИспользоватьСтатусыРасходныхОрдеров = ИСТИНА
	|				ТОГДА РасходныйОрдерНаТоварыТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТовары.Номенклатура"
	);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	Возврат ТаблицаРезультат;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

//Документ Акт Сверки Взаиморасчетов 
Функция ДетальныеРасчетыАктСверкиВзаиморасчетов(ДанныеДокумента)
	
	ЗапросНашихДанных = Новый Запрос;

	ТекстЗапроса = ТекстЗапросаОтборПоАналитикеАктСверкиВзаиморасчетов() + "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента	КАК Номер,
    |	ДанныеДокумента.ДатаВходящегоДокумента  КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|
	|ПОМЕСТИТЬ ДокументыИнтеркампани
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
    |	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Комиссионер = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК Номер,
    |	ДанныеДокумента.ДатаВходящегоДокумента 	КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ОрганизацияПолучатель = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
    |	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента,
	|				РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Номер)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор.ДатаВходящегоДокумента,
	|				РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Дата)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента.Договор
	|	КОНЕЦ										 КАК Договор,
	|	РасчетыСКлиентамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|		 ИЛИ РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход КАК СуммаДолгПартнера,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход КАК СуммаНашДолг,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(РеализацияТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|
	|ПОМЕСТИТЬ РасчетыСПартнерами
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказКлиента
	|				ИНАЧЕ
	|					ЗаказКлиента.Договор
	|				КОНЕЦ = &Договор)
	|	) КАК РасчетыСКлиентамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугРеглУчет
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = РеализацияТоваровУслугРеглУчет.Ссылка
	|		И РеализацияТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента,
	|				РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Номер)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.ДатаВходящегоДокумента,
	|				РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Дата)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику.Договор
	|	КОНЕЦ										 КАК Договор,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|		 ИЛИ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход КАК СуммаДолгПартнера,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход КАК СуммаНашДолг,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказПоставщику
	|				ИНАЧЕ
	|					ЗаказПоставщику.Договор
	|				КОНЕЦ = &Договор)
	|	) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслугРеглУчет
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ПоступлениеТоваровУслугРеглУчет.Ссылка
	|		И ПоступлениеТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ГДЕ
	|	НЕ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата				КАК Период,
	|	ДанныеДокумента.Ссылка				КАК Документ,
	|	Расшифровка.НомерВходящегоДокумента	КАК Номер,
	|	Расшифровка.ДатаВходящегоДокумента	КАК Дата,
	|	Расшифровка.Поставщик				КАК Партнер,
	|	ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Расшифровка.Заказ
	|	ИНАЧЕ
	|		Расшифровка.Заказ.Договор
	|	КОНЕЦ								КАК Договор,
	|	Расшифровка.ВалютаВзаиморасчетов	КАК Валюта,
	|	Истина								КАК ЭтоВходящийДокумент,
	|	Расшифровка.СуммаВзаиморасчетов		КАК СуммаДолгПартнера,
	|	0									КАК СуммаНашДолг,
	|	0									КАК СуммаНачальныйОстаток,
	|	0									КАК СуммаКонечныйОстаток,
	|	Неопределено						КАК ОрганизацияРеглУчет
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ОплатаПоставщикам КАК Расшифровка
	|		ПО Расшифровка.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И Расшифровка.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И (&НеИспользоватьОтборПоДоговору
	|		ИЛИ ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|			Расшифровка.Заказ
	|		ИНАЧЕ
	|			Расшифровка.Заказ.Договор
	|		КОНЕЦ = &Договор)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период				 		КАК Период,
	|	РасчетыСПартнерами.Документ				 		КАК Документ,
	|	РасчетыСПартнерами.Номер				 		КАК Номер,
	|	РасчетыСПартнерами.Дата					 		КАК Дата,
	|	%ПолеПартнер%
	|	%ПолеДоговор%
	|	РасчетыСПартнерами.Валюта				 		КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент	 		КАК ЭтоВходящийДокумент,
	|	СУММА(РасчетыСПартнерами.СуммаДолгПартнера)	 	КАК СуммаДолгПартнера,
	|	СУММА(РасчетыСПартнерами.СуммаНашДолг)			КАК СуммаНашДолг,
	|	СУММА(РасчетыСПартнерами.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(РасчетыСПартнерами.СуммаКонечныйОстаток)	КАК СуммаКонечныйОстаток,
	|	РасчетыСПартнерами.ОрганизацияРеглУчет			КАК ОрганизацияРеглУчет
	|ИЗ
	|	РасчетыСПартнерами КАК РасчетыСПартнерами
	|
	|СГРУППИРОВАТЬ ПО
	|	Период, Документ, Номер, Дата, %Партнер% %Договор% Валюта, ЭтоВходящийДокумент, ОрганизацияРеглУчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|
	|ИТОГИ ПО
	|	%Партнер%
	|	%Договор%
	|	Валюта
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеПартнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "РасчетыСПартнерами.Партнер КАК Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Партнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеДоговор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "РасчетыСПартнерами.Договор КАК Договор,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Договор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "Договор,", ""));
	ЗапросНашихДанных.Текст = ТекстЗапроса;
	
	ЗапросНашихДанных.УстановитьПараметр("НачалоПериодаСверки", ДанныеДокумента.НачалоПериода);
	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки",	КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросНашихДанных.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(
																   КонецДня(ДанныеДокумента.КонецПериода)+1,
																   ВидГраницы.Исключая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		    ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		    ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	    ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	    ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));
	
	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ВыборкаНашихДанных = РезультатЗапросаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаНашихДанных = Неопределено;
	КонецЕсли;

	Возврат ВыборкаНашихДанных;
	
КонецФункции

Функция ВывестиДетальныеЗаписиАктСверкиВзаиморасчетов(
	ВыборкаДетальныхЗаписей, 
	ДанныеДокумента, 
	ТекущийПартнер = Неопределено, 
	ТекущийДоговор = Неопределено, 
	СтруктураПредставленийУчастников, 
	Макет, 
	ТаблицаЗадолженности)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаПартнерВалюта");
	ОбластьМакетаШапка		 = Макет.ПолучитьОбласть("ШапкаТаблицыРасчеты");
	ОбластьМакетаНачОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетыНачОстаток");
	ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицыРасчеты");
	ОбластьМакетаКонОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетыКонОстаток");
	ОбластьМакетаИтогоОбороты  = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетыИтогоОбороты");
	СтрокаЗадолженности = ТаблицаЗадолженности.Добавить();
	СтрокаЗадолженности.Валюта = ВыборкаДетальныхЗаписей.Валюта;
	Если ТаблицаЗадолженности.Колонки.Найти("Партнер") <> Неопределено Тогда
		СтрокаЗадолженности.Партнер = ?(ДанныеДокумента.РасшифровкаПоПартнерам,
										ПредставлениеПартнераАктСверкиВзаиморасчетов(ТекущийПартнер),
										ПредставлениеПартнераАктСверкиВзаиморасчетов(ДанныеДокумента.Партнер));
	КонецЕсли;
	Если ТаблицаЗадолженности.Колонки.Найти("Договор") <> Неопределено Тогда
		СтрокаЗадолженности.Договор = ?(ДанныеДокумента.РасшифровкаПоДоговорам,
										ПредставлениеДоговораАктСверкиВзаиморасчетов(ТекущийДоговор),
										ПредставлениеДоговораАктСверкиВзаиморасчетов(ДанныеДокумента.Договор));
	КонецЕсли;
	Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда 
		ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтрокаЗадолженности.Партнер + ", " + НСтр("ru='в валюте: '") + ВыборкаДетальныхЗаписей.Валюта; 
	ИначеЕсли ДанныеДокумента.РасшифровкаПоДоговорам Тогда 
		ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтрокаЗадолженности.Договор + ", " + НСтр("ru='в валюте: '") + ВыборкаДетальныхЗаписей.Валюта; 
	Иначе
		ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = НСтр("ru='в валюте: '") + ВыборкаДетальныхЗаписей.Валюта; 
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
	
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	ПредставленияДокументов = ПредставленияДокументовАктСверкиВзаиморасчетов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументовАктСверкиВзаиморасчетов();
	
	ПредставлениеДокумента = "";
	ПредставлениеВладельцаДокумента = "";
	
	НачальныйОстаток = 0;
	КонечныйОстаток  = 0;
	ИтогНашДолг = 0;
	ИтогДолгПартнера = 0;
    	
	ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
	
	ПервыйПроход = Истина;
	Пока ДетальныеЗаписи.Следующий() Цикл
		
		Если ДетальныеЗаписи.Документ = Неопределено Тогда
			Если ДетальныеЗаписи.Период = ДанныеДокумента.НачалоПериода Тогда
				НачальныйОстаток = НачальныйОстаток + ДетальныеЗаписи.СуммаНачальныйОстаток;
			Иначе
				КонечныйОстаток = КонечныйОстаток + ДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЕсли;
		Иначе
			
			Если ПервыйПроход
				И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
				
				ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДФ='дд ММММ гггг'");
				Если НачальныйОстаток > 0 Тогда
					ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
					ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
				Иначе
					ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
					ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
				КонецЕсли;				
				ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
				
			КонецЕсли;
			
			ИмяДокумента = ДетальныеЗаписи.Документ.Метаданные().Имя;
			ПредставленияДокументов.Свойство(ИмяДокумента, ПредставлениеДокумента);
			ПредставленияВладельцевДокументов.Свойство(ИмяДокумента, ПредставлениеВладельцаДокумента);
			
			Если ЗначениеЗаполнено(ПредставлениеВладельцаДокумента) Тогда
				ПредставлениеВладельцаДокумента = ПредставлениеВладельцаДокумента + " " + ?(ДетальныеЗаписи.ЭтоВходящийДокумент,
					СтруктураПредставленийУчастников.КонтрагентНаименование,
					СтруктураПредставленийУчастников.ПредставлениеОрганизации);
			КонецЕсли;
				
			ПредставлениеДокумента = ПредставлениеДокумента + НСтр("ru=' №'") + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
																				ДетальныеЗаписи.Номер,
																				Ложь,
																				Истина);
			Если ЗначениеЗаполнено(ДетальныеЗаписи.ОрганизацияРеглУчет) Тогда
				
				СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДетальныеЗаписи.ОрганизацияРеглУчет, ДанныеДокумента.Дата);
				ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
					"ПолноеНаименование");
				
				ПредставлениеДокумента = НСтр("ru='Перенос задолженности'");
				ПредставлениеВладельцаДокумента = НСтр("ru='от '") + ПредставлениеОрганизации;
				
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Дата = Формат(ДетальныеЗаписи.Дата, "ДФ='дд.ММ.гггг'");
			ОбластьМакетаСтрока.Параметры.Документ = ПредставлениеДокумента; 
			ОбластьМакетаСтрока.Параметры.ОтКого = ПредставлениеВладельцаДокумента;
			ОбластьМакетаСтрока.Параметры.СуммаДолгПартнера = ДетальныеЗаписи.СуммаДолгПартнера;
			ОбластьМакетаСтрока.Параметры.СуммаНашДолг = ДетальныеЗаписи.СуммаНашДолг;
			ИтогНашДолг = ИтогНашДолг + ДетальныеЗаписи.СуммаНашДолг;
			ИтогДолгПартнера = ИтогДолгПартнера + ДетальныеЗаписи.СуммаДолгПартнера;
			ОбластьМакетаСтрока.Параметры.ДокументСсылка = ДетальныеЗаписи.Документ;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			ПервыйПроход = Ложь;
			
		КонецЕсли;
	
	КонецЦикла; 
	
	Если ПервыйПроход
		И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
		
		ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДФ='дд ММММ гггг'");
		Если НачальныйОстаток > 0 Тогда
			ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
			ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
		Иначе
			ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
			ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
		КонецЕсли;				
		ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
		
	КонецЕсли;
	
	ОбластьМакетаИтогоОбороты.Параметры.ИтогоСуммаДолгПартнера = ?(ЗначениеЗаполнено(ИтогДолгПартнера),ИтогДолгПартнера, 0);
	ОбластьМакетаИтогоОбороты.Параметры.ИтогоСуммаНашДолг 	   = ?(ЗначениеЗаполнено(ИтогНашДолг),ИтогНашДолг, 0);
	ТабличныйДокумент.Вывести(ОбластьМакетаИтогоОбороты);
	ОбластьМакетаКонОстаток.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'");
	Если КонечныйОстаток > 0 Тогда
		ОбластьМакетаКонОстаток.Параметры.СуммаНашДолг = 0;
		ОбластьМакетаКонОстаток.Параметры.СуммаДолгПартнера = КонечныйОстаток;
	Иначе
		ОбластьМакетаКонОстаток.Параметры.СуммаНашДолг = -КонечныйОстаток;
		ОбластьМакетаКонОстаток.Параметры.СуммаДолгПартнера = 0;
	КонецЕсли;				
	ТабличныйДокумент.Вывести(ОбластьМакетаКонОстаток);
	
	Если КонечныйОстаток <> 0 Тогда
		СтрокаЗадолженности.Сумма = КонечныйОстаток;
	Иначе
		ТаблицаЗадолженности.Удалить(СтрокаЗадолженности);
	КонецЕсли; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОстаткиРасчетовАктСверкиВзаиморасчетов(ДанныеДокумента) 

	ЗапросНашихДанных = Новый Запрос;
	
	ЗапросНашихДанных.Текст = ТекстЗапросаОтборПоАналитикеАктСверкиВзаиморасчетов() + "
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.ЗаказКлиента				КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.Валюта						КАК ВалютаВзаиморасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток > 0
	|			ТОГДА ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаДолгПартнера,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток < 0
	|			ТОГДА -ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаНашДолг
	|ПОМЕСТИТЬ ОстаткиЗадолженностиРазвернуто
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			&КонецПериодаСверки,
	|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
	|											ОтборПоАналитике.КлючАналитики
	|										 ИЗ
	|											ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказКлиента
	|				ИНАЧЕ
	|					ЗаказКлиента.Договор
	|				КОНЕЦ = &Договор)
	|			) КАК ОстаткиЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО ОстаткиЗадолженности.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.ЗаказПоставщику			КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.Валюта						КАК ВалютаВзаиморасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток > 0
	|			ТОГДА ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаДолгПартнера,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток < 0
	|			ТОГДА -ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаНашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&КонецПериодаСверки,
	|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
	|											ОтборПоАналитике.КлючАналитики
	|										 ИЗ
	|											ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказПоставщику
	|				ИНАЧЕ
	|					ЗаказПоставщику.Договор
	|				КОНЕЦ = &Договор)
	|			) КАК ОстаткиЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО ОстаткиЗадолженности.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		  КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	  КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	  КАК Партнер,
	|	СУММА(ОстаткиЗадолженности.СуммаДолгПартнера) КАК СуммаДолгПартнера,
	|	СУММА(ОстаткиЗадолженности.СуммаНашДолг)	  КАК СуммаНашДолг
	|ПОМЕСТИТЬ ОстаткиЗадолженности
	|ИЗ
	|	ОстаткиЗадолженностиРазвернуто КАК ОстаткиЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗадолженности.РасчетныйДокумент,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ПОМЕСТИТЬ ЗадолженностьПоДокументамРасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	Неопределено								КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	Неопределено								КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента 	КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.КорректировкаПоступления КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент		   КАК РасчетныйДокумент,
	|	ЗадолженностьПоДокументамРасчетов.НомерРасчетногоДокумента КАК НомерРасчетногоДокумента,
	|	ЗадолженностьПоДокументамРасчетов.ДатаРасчетногоДокумента  КАК ДатаРасчетногоДокумента,
	|	ЗадолженностьПоДокументамРасчетов.ВалютаВзаиморасчетов	   КАК ВалютаВзаиморасчетов,
	|	ЗадолженностьПоДокументамРасчетов.Партнер				   КАК Партнер,
	|	ЗадолженностьПоДокументамРасчетов.Договор				   КАК Договор,
	|	ЗадолженностьПоДокументамРасчетов.СуммаДолгПартнера		   КАК СуммаДолгПартнера,
	|	ЗадолженностьПоДокументамРасчетов.СуммаНашДолг			   КАК СуммаНашДолг
	|ИЗ
	|	ЗадолженностьПоДокументамРасчетов КАК ЗадолженностьПоДокументамРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	Неопределено											   КАК РасчетныйДокумент,
	|	Неопределено											   КАК НомерРасчетногоДокумента,
	|	Неопределено											   КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 				   КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 				   КАК Партнер,
	|
	|	ВЫБОР КОГДА ОстаткиЗадолженности.РасчетныйДокумент ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		ОстаткиЗадолженности.РасчетныйДокумент
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ													   КАК Договор,
	|
	|	ОстаткиЗадолженности.СуммаДолгПартнера					   КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг						   КАК СуммаНашДолг
	|ИЗ
	|	ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьПоДокументамРасчетов КАК ЗадолженностьПоДокументамРасчетов
	|		ПО ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент = ОстаткиЗадолженности.РасчетныйДокумент
	|		И ЗадолженностьПоДокументамРасчетов.ВалютаВзаиморасчетов = ОстаткиЗадолженности.ВалютаВзаиморасчетов
	|ГДЕ
	|	ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасчетногоДокумента,
	|	НомерРасчетногоДокумента
	|";

	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки", Новый Граница(
																  КонецДня(ДанныеДокумента.КонецПериода),
																  ВидГраницы.Включая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		   ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		   ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	   ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	   ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));

	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ТаблицаНашихДанных = РезультатЗапросаНашихДанных.Выгрузить();
		
		СписокПолейГруппировки = "ВалютаВзаиморасчетов";
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", РасчетныйДокумент, НомерРасчетногоДокумента, ДатаРасчетногоДокумента";
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Партнер";
		КонецЕсли;
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Договор";
		КонецЕсли;
		ТаблицаНашихДанных.Свернуть(СписокПолейГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
	Иначе
		ТаблицаНашихДанных = Неопределено;
	КонецЕсли;

	Возврат ТаблицаНашихДанных;
	
КонецФункции

Функция ВывестиТаблицуЗадолженностиАктСверкиВзаиморасчетов(
	ДанныеДокумента, 
	ТаблицаОстатков, 
	МассивВалют, 
	Партнер = Неопределено, 
	СтруктураПредставленийУчастников, 
	Макет, 
	ВыводитьПодвал = Ложь, 
	ТаблицаРасхождений = Неопределено, 
	ЭтоДанныеКонтрагента = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаПартнерВалюта");
	ОбластьМакетаШапка		 = Макет.ПолучитьОбласть("ШапкаТаблицыЗадолженность");
	ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженность");
	Если ВыводитьПодвал Тогда
		ОбластьМакетаПодвал  = Макет.ПолучитьОбласть("ПодвалТаблицыЗадолженность");
	КонецЕсли; 
	
	ПредставлениеПартнера = ПредставлениеПартнераАктСверкиВзаиморасчетов(Партнер);
	
	Для Каждого ВалютаВзаиморасчетов Из МассивВалют Цикл
		
		СуммаДолгПартнера = 0;
		СуммаНашДолг = 0;
		
		СтруктураОтбора = Новый Структура("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		Если Партнер <> Неопределено Тогда
			СтруктураОтбора.Вставить("Партнер", Партнер);
		КонецЕсли; 
		МассивСтрокЗадолженности = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокЗадолженности.Количество() > 0 Тогда
			Если Партнер <> Неопределено Тогда 
				ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = ПредставлениеПартнера + ", " + НСтр("ru='в валюте: '") + ВалютаВзаиморасчетов; 
			Иначе
				ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = НСтр("ru='в валюте: '") + ВалютаВзаиморасчетов; 
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);			
			ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);			
		КонецЕсли;
		
		Для Каждого СтрокаЗадолженности Из МассивСтрокЗадолженности Цикл
			
			ОбластьМакетаСтрока.Параметры.СуммаДолгПартнера = СтрокаЗадолженности.СуммаДолгПартнера;
			ОбластьМакетаСтрока.Параметры.СуммаНашДолг 		= СтрокаЗадолженности.СуммаНашДолг;
			Если ТаблицаОстатков.Колонки.Найти("РасчетныйДокумент") <> Неопределено Тогда
				ОбластьМакетаСтрока.Параметры.ДокументСсылка = СтрокаЗадолженности.РасчетныйДокумент;
			КонецЕсли; 
			Если НЕ ЭтоДанныеКонтрагента Тогда
				Если ТаблицаОстатков.Колонки.Найти("РасчетныйДокумент") <> Неопределено Тогда
					ОбластьМакетаСтрока.Параметры.Документ = ОписаниеРасчетногоДокументаАктСверкиВзаиморасчетов(СтрокаЗадолженности.РасчетныйДокумент,
						СтрокаЗадолженности.НомерРасчетногоДокумента,
						СтрокаЗадолженности.ДатаРасчетногоДокумента,
						СтруктураПредставленийУчастников,
						(СтрокаЗадолженности.СуммаДолгПартнера > 0));
				КонецЕсли;
			Иначе
				ОбластьМакетаСтрока.Параметры.Документ = СтрокаЗадолженности.ОписаниеДокумента;
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			СуммаДолгПартнера = СуммаДолгПартнера + СтрокаЗадолженности.СуммаДолгПартнера;
			СуммаНашДолг	  = СуммаНашДолг 	  + СтрокаЗадолженности.СуммаНашДолг;
			
		КонецЦикла; 
		
		Если ВыводитьПодвал Тогда
			ОбластьМакетаПодвал.Параметры.СуммаДолгПартнера = СуммаДолгПартнера;
			ОбластьМакетаПодвал.Параметры.СуммаНашДолг = СуммаНашДолг;
			ОбластьМакетаПодвал.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДФ='дд ММММ гггг'");
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		КонецЕсли; 
		
		Если ТаблицаРасхождений <> Неопределено Тогда
			СтрокаТаблицыРасхождений = ТаблицаРасхождений.Добавить();
			СтрокаТаблицыРасхождений.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			Если Партнер <> Неопределено Тогда
				СтрокаТаблицыРасхождений.Партнер = Партнер;
			КонецЕсли; 
			Если НЕ ЭтоДанныеКонтрагента Тогда
				СтрокаТаблицыРасхождений.СуммаДолгПартнера = СуммаДолгПартнера;
				СтрокаТаблицыРасхождений.СуммаНашДолг = СуммаНашДолг;
			Иначе
				СтрокаТаблицыРасхождений.СуммаДолгПартнера = -СуммаДолгПартнера;
				СтрокаТаблицыРасхождений.СуммаНашДолг = -СуммаНашДолг;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПредставлениеПартнераАктСверкиВзаиморасчетов(Партнер)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Партнеры.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|")
	;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеПартнера = Выборка.НаименованиеПолное;
	Иначе
		ПредставлениеПартнера = "";
	КонецЕсли;
	
	Возврат ПредставлениеПартнера;
	
КонецФункции

Функция ТекстЗапросаОтборПоАналитикеАктСверкиВзаиморасчетов()

	Возврат "
	|ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоАналитике
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И (АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		ИЛИ &НеИспользоватьОтборПоПартнеру)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";

КонецФункции

Функция ПредставлениеДоговораАктСверкиВзаиморасчетов(Договор)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК НаименованиеДляПечати
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|")
	;
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеДоговора = Выборка.НаименованиеДляПечати;
	Иначе
		ПредставлениеДоговора = "";
	КонецЕсли;
	
	Возврат ПредставлениеДоговора;
	
КонецФункции

Функция ПредставленияДокументовАктСверкиВзаиморасчетов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",						НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru='Акт выполненных работ'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатков",							НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВзаимозачетЗадолженности",				НСтр("ru='Взаимозачет задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",				НСтр("ru='Накладная (возврат)'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru='Накладная (возврат)'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыКлиентом", 			НСтр("ru='Выкуп возвратной тары'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 							НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 						НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПоступления",				НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",				НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",				НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru='Эквайринговая операция'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",						НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",		НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",		НСтр("ru='Накладная'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='Платежное поручение'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеТоваровУслуг",				НСтр("ru='Накладная'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов",			НСтр("ru='Акт'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",				НСтр("ru='Расходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 				НСтр("ru='Накладная'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",			НСтр("ru='Акт'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru='Платежное поручение'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеЗадолженности", 				НСтр("ru='Списание задолженности'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту", 					НСтр("ru='Счет на оплату'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 				НСтр("ru='Счет-фактура'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru='Таможенная декларация'"));
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ПредставленияВладельцевДокументовАктСверкиВзаиморасчетов()
	
	ВидыДокументовКонтрагента = Новый Структура;

	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",						НСтр("ru='получатель'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 							НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПоступления",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",						НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеТоваровУслуг",				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов", 		НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru='получатель'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",				НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов", 			НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru='плательщик'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 				НСтр("ru='от'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru='от'"));
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ОписаниеРасчетногоДокументаАктСверкиВзаиморасчетов(
	ДокументСсылка,
	Номер, 
	Дата, 
	СтруктураПредставленийУчастников,
	ЭтоДолгПартнера = Неопределено) Экспорт
	
	ПредставленияДокументов     	  = ПредставленияДокументовАктСверкиВзаиморасчетов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументовАктСверкиВзаиморасчетов();
	МассивДокументовКонтрагента		  = ИменаМетаданныхВходящихДокументовАктСверкиВзаиморасчетов();
	
	ПредставлениеДокумента = "";
	ПредставлениеВладельцаДокумента = "";
	
	Если ДокументСсылка <> Неопределено И НЕ ДокументСсылка.Пустая() Тогда

		ПредставленияДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеДокумента);
		
		ОписаниеДокумента = ?(ПредставлениеДокумента <> Неопределено, ПредставлениеДокумента, "");
		
		ОписаниеДокумента = ОписаниеДокумента
						  + НСтр("ru=' №'") + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, Ложь, Истина)
						  + НСтр("ru=' от '") + Формат(Дата, "ДЛФ=D") + НСтр("ru=' г.'");
		
		ПредставленияВладельцевДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеВладельцаДокумента);
		
		Если ЗначениеЗаполнено(ПредставлениеВладельцаДокумента) Тогда
			
			Если МассивДокументовКонтрагента.Найти(ДокументСсылка.Метаданные().Имя) <> Неопределено Тогда
				ВладелецДокумента = СтруктураПредставленийУчастников.КонтрагентНаименование;
			Иначе
				ВладелецДокумента = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
			КонецЕсли;
			
			ОписаниеДокумента = ОписаниеДокумента
							  + " (" + ПредставлениеВладельцаДокумента + " " + ВладелецДокумента + ")";
		КонецЕсли;
		
	ИначеЕсли ЭтоДолгПартнера = Неопределено Тогда
		
		ОписаниеДокумента = НСтр("ru='Предоплата от '");
		
	ИначеЕсли ЭтоДолгПартнера Тогда
		
		ОписаниеДокумента = НСтр("ru='Предоплата от '") + СтруктураПредставленийУчастников.ПредставлениеОрганизации;
		
	Иначе
		
		ОписаниеДокумента = НСтр("ru='Предоплата от '") + СтруктураПредставленийУчастников.КонтрагентНаименование;

	КонецЕсли;

	Возврат ОписаниеДокумента;

КонецФункции

Функция ИменаМетаданныхВходящихДокументовАктСверкиВзаиморасчетов()
	
	МассивДокументовКонтрагента = Новый Массив;
	
	МассивДокументовКонтрагента.Добавить("АвансовыйОтчет");
	МассивДокументовКонтрагента.Добавить("ВозвратТоваровОтКлиента");
	МассивДокументовКонтрагента.Добавить("ЗаказКлиента");
	МассивДокументовКонтрагента.Добавить("КорректировкаПоступления");
	МассивДокументовКонтрагента.Добавить("ОтчетКомиссионера");
	МассивДокументовКонтрагента.Добавить("ОтчетКомиссионераОСписании");
	МассивДокументовКонтрагента.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	МассивДокументовКонтрагента.Добавить("ПоступлениеТоваровУслуг");
	МассивДокументовКонтрагента.Добавить("ПоступлениеУслугПрочихАктивов");
	МассивДокументовКонтрагента.Добавить("СчетФактураПолученный");
	МассивДокументовКонтрагента.Добавить("ТаможеннаяДекларацияИмпорт");
	
	Возврат МассивДокументовКонтрагента; 
	
КонецФункции


Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип, ТаблицаЭтапыОплаты)
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	
	Если Тип = "Счет" ИЛИ Тип = "СчетКВозврату" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ТаблицаЭтапыОплаты.Количество() = 0 Тогда
			ДатаПлатежа = '00010101';
		ИначеЕсли ТаблицаЭтапыОплаты.Количество() = 1 Тогда
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		Иначе
			ТаблицаЭтапыОплаты.Сортировать("ДатаПлатежа Убыв");
			ДатаПлатежа = ТаблицаЭтапыОплаты[0].ДатаПлатежа;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Рахунок дійсний до %СрокДействия%. '");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%", Формат(ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН             = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП             = СведенияОПоставщике.КПП;
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Банк = ?(ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет.БанкДляРасчетов),
				ДанныеПечати.БанковскийСчет.БанкДляРасчетов,
				ДанныеПечати.БанковскийСчет.Банк
			);
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ?(ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет.БанкДляРасчетов),
				ДанныеПечати.БанковскийСчет.Банк.КоррСчет,
				ДанныеПечати.БанковскийСчет.НомерСчета
			);
			
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ПредставлениеПоставщикаДляПлатПоручения                  = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ПредставлениеПоставщикаДляПлатПоручения;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" ИЛИ Тип = "СчетКВозврату" Тогда
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Рахунок на оплату'"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
	ИначеЕсли Тип = "Заказ" Тогда
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Замовлення клієнта'"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
	ИначеЕсли Тип = "ЗаявкаНаЗамену" Тогда
		
		ТекстЗаголовка = СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Заявка на змаіну'"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет" ИЛИ Тип = "СчетКВозврату", НСтр("ru='Постачальник:'"), НСтр("ru='Виконавець:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет" ИЛИ Тип = "СчетКВозврату", НСтр("ru='Покупець:'"), НСтр("ru='Замовник:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС)
	
	// Вывести этапы графика оплаты
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		
		ТаблицаЭтапыОплаты.Сортировать("НомерСтроки Возр");
		
		ИмяКолонкиДатыОплаты = ?(Тип="СчетКВозврату", НСтр("ru='Дата оплаты или возврата'"), НСтр("ru='Дата оплаты'"));
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|НомерСтрокиТаблицаЭтапыОплаты");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Тип = "Заказ" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|ВариантОплатыТаблицаЭтапыОплаты");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|ДанныеТаблицаЭтапыОплаты");
		ОбластьМакета.Параметры.ИмяКолонкиДатыОплаты = ИмяКолонкиДатыОплаты;
		ТабличныйДокумент.Присоединить(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты|НДСТаблицаЭтапыОплаты");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
		
		ОбластьНомерСтроки = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|НомерСтрокиТаблицаЭтапыОплаты");
		ОбластьДанные      = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|ДанныеТаблицаЭтапыОплаты");
		ОбластьНДС         = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|НДСТаблицаЭтапыОплаты");
		
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			
			ОбластьНомерСтроки.Параметры.Заполнить(ТекЭтап);
			ТабличныйДокумент.Вывести(ОбластьНомерСтроки);
			
			Если Тип = "Заказ" Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты|ВариантОплатыТаблицаЭтапыОплаты");
				ОбластьМакета.Параметры.Заполнить(ТекЭтап);
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			
			ОбластьДанные.Параметры.Заполнить(ТекЭтап);
			ТабличныйДокумент.Присоединить(ОбластьДанные);
			
			ТекстНДС = ФормированиеПечатныхФорм.СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			
			ОбластьНДС.Параметры.ТекстНДС = ТекстНДС;
			ТабличныйДокумент.Присоединить(ОбластьНДС);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|НомерСтрокиТаблицаЭтапыОплаты");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Тип = "Заказ" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|ВариантОплатыТаблицаЭтапыОплаты");
			ТабличныйДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|ДанныеТаблицаЭтапыОплаты");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты|НДСТаблицаЭтапыОплаты");
		ТабличныйДокумент.Присоединить(ОбластьМакета);
		
	КонецЕсли;
	
	// Вывести дополнительную информацию
	Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
		
		ОбластьМакета                                    = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
		
	// Вывести подписи
	Если Тип = "Счет" ИЛИ Тип = "СчетКВозврату" Тогда
			
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = ФамилияИнициалыФизЛица(ДанныеПечати.Руководитель);
		ОбластьМакета.Параметры.ФИОБухгалтера   = ФамилияИнициалыФизЛица(ДанныеПечати.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОМенеджер     = ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
		ОбластьМакета.Параметры.ФИОМенеджер = ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция СформироватьЗаголовокДокумента(Шапка, НазваниеДокумента = "")
	
	//Если название документа не передано, получим название по представлению документа
	Если НазваниеДокумента = ""
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление,Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление,ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НазваниеДокумента + " № " + ПолучитьНомерНаПечать(Шапка.Номер, Ложь, Истина)
	                          + " від " + Формат(Шапка.Дата, "ДФ='дд ММММ гггг'") + " р.";
	
КонецФункции					  

Процедура ЗаполнитьШапкуФормыЗаявкиНаСборку(ТабДокумент, ВыборкаЗаголовкиДокументов, ПараметрыПечати, Макет)

	Заголовок 					= Макет.ПолучитьОбласть("Заголовок");
	ШапкаТаблицы 				= Макет.ПолучитьОбласть("ШапкаТаблицы");
	Заказчик 					= Макет.ПолучитьОбласть("Заказчик");
	НомерНакладнойСборки		= Макет.ПолучитьОбласть("НомерНакладнойСборки");
	НомерНакладнойРеализации	= Макет.ПолучитьОбласть("НомерНакладнойРеализации");
	ДатаИсполнения				= Макет.ПолучитьОбласть("ДатаИсполнения");
	ВремяИсполнения				= Макет.ПолучитьОбласть("ВремяИсполнения");
	ПрограмныеСредства			= Макет.ПолучитьОбласть("ПрограмныеСредства");
	ИмяСборки					= Макет.ПолучитьОбласть("ИмяСборки");
	СерийныйНомерСборки			= Макет.ПолучитьОбласть("СерийныеНомераСборки");
	Приметки					= Макет.ПолучитьОбласть("Сноска1");
	Менеджер					= Макет.ПолучитьОбласть("Менеджер");
	ПустаяОбласть				= Макет.ПолучитьОбласть("ПустаяОбласть");

	ТекстЗаголовка 				= "Форма-заявка на зборку системного блоку від %1";
	
	ТабДокумент.Вывести(ПустаяОбласть);
	
	Заголовок.Параметры.Заголовок = "Форма-заявка на зборку системного блоку.";
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, Заголовок, ВыборкаЗаголовкиДокументов.ДокументСборка);
	ТабДокумент.Вывести(Заголовок);
	
	Заказчик.Параметры.Заказчик = ВыборкаЗаголовкиДокументов.Заказчик;
	ТабДокумент.Вывести(Заказчик);
	
	НомерНакладнойСборки.Параметры.НомерСборки = ВыборкаЗаголовкиДокументов.НомерСборки;
	ТабДокумент.Вывести(НомерНакладнойСборки);

	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("ПрограмныеСредства") Тогда
			Если НЕ ПустаяСтрока(ПараметрыПечати.ПрограмныеСредства) Тогда
				ПрограмныеСредства.Параметры.ПрограмныеСредства	= ПараметрыПечати.ПрограмныеСредства;
				ТабДокумент.Вывести(ПрограмныеСредства);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Менеджер.Параметры.Менеджер = ВыборкаЗаголовкиДокументов.Менеджер;
	ТабДокумент.Вывести(Менеджер);
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("Приметки") Тогда
			Если НЕ ПустаяСтрока(ПараметрыПечати.Приметки) Тогда
				Приметки.Параметры.Приметки = ПараметрыПечати.Приметки;
				ТабДокумент.Вывести(Приметки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ТабДокумент.Вывести(ПустаяОбласть);
	ТабДокумент.Вывести(ШапкаТаблицы);
	
КонецПроцедуры


Функция ПолучитьТаблицуТоварыКоммерческоеПредложение(ДокументСсылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  | КоммерческоеПредложениеКлиентуТовары.НомерСтроки,
						  |	КоммерческоеПредложениеКлиентуТовары.Ссылка,
						  |	КоммерческоеПредложениеКлиентуТовары.Номенклатура,
						  |	КоммерческоеПредложениеКлиентуТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
						  |	КоммерческоеПредложениеКлиентуТовары.Характеристика,
						  |	КоммерческоеПредложениеКлиентуТовары.Упаковка,
						  |	КоммерческоеПредложениеКлиентуТовары.КоличествоУпаковок,
						  |	КоммерческоеПредложениеКлиентуТовары.Количество,
						  |	КоммерческоеПредложениеКлиентуТовары.ВидЦены,
						  |	КоммерческоеПредложениеКлиентуТовары.Цена,
						  | ВЫБОР
						  |	КОГДА КоммерческоеПредложениеКлиентуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
						  |	ТОГДА ПРЕДСТАВЛЕНИЕ(КоммерческоеПредложениеКлиентуТовары.Номенклатура.ЕдиницаИзмерения)
					   	  |	ИНАЧЕ ПРЕДСТАВЛЕНИЕ(КоммерческоеПредложениеКлиентуТовары.Упаковка.ЕдиницаИзмерения)
						  |	КОНЕЦ КАК ЕдиницаИзмерения,
						  | КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки + КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
						  |	КоммерческоеПредложениеКлиентуТовары.Сумма + КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки + КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
						  |	КоммерческоеПредложениеКлиентуТовары.СтавкаНДС,
						  |	КоммерческоеПредложениеКлиентуТовары.СуммаНДС,
						  |	КоммерческоеПредложениеКлиентуТовары.СуммаСНДС,
						  |	КоммерческоеПредложениеКлиентуТовары.Сумма,
						  |	КоммерческоеПредложениеКлиентуТовары.Активность,
						  |	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение, """") КАК ГарантийныйСрок
						  |ИЗ
						  |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
						  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
						  |		ПО КоммерческоеПредложениеКлиентуТовары.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
						  |			И (НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоГарантия)
						  |ГДЕ
						  |	КоммерческоеПредложениеКлиентуТовары.Ссылка = &Ссылка");
					  
	Запрос.УстановитьПараметр("СвойствоГарантия", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія"));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции



Функция ктсТекстЗапросаПоступлениеРеализацияТоваров(Ордер)//Поступление,реализация товаров
	Возврат "
	    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура	  								КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика									КАК Характеристика,     
		|	ВложенныйЗапрос.Количество										КАК	Количество,
		|	ВложенныйЗапрос.КоличествоОстаток								КАК КоличествоОстаток,
		|	ДопСведения.Значение											КАК Гарантия,
		|	ВложенныйЗапрос.ЕдиницаИзмерения 								КАК НоменклатураЕдиницаИзмерения,
		|	ВложенныйЗапрос.СерийныеНомера 									КАК СерийныеНомера
      	|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций 							КАК Док
		|
		|ПРАВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|		Док.Номенклатура 														КАК Номенклатура,
		|		Док.Характеристика														КАК Характеристика,
		|		Док." + ?(Ордер = "Поступление","КПоступлениюРасход","КОтгрузкеРасход + Док.СобираетсяОборот + Док.СобраноОборот") + "	КАК	Количество,
		|		Док.К" + ?(Ордер = "Поступление","Поступлению","Отгрузке") + "КонечныйОстаток	КАК КоличествоОстаток,
		|		Док.Номенклатура.ЕдиницаИзмерения										КАК ЕдиницаИзмерения,
		|		ВложенныйЗапрос1.СерийныеНомера 										КАК СерийныеНомера
		|	ИЗ
		|		РегистрНакопления.ТоварыК" + ?(Ордер = "Поступление","Поступлению","Отгрузке") + ".ОстаткиИОбороты 	КАК Док
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|			СерийныеНомераНоменклатуры.Регистратор						КАК Регистратор,
		|			СерийныеНомераНоменклатуры.СерийныеНомера 					КАК СерийныеНомера,
		|			СерийныеНомераНоменклатуры.Характеристика					КАК Характеристика,
		|			СерийныеНомераНоменклатуры.Номенклатура						КАК Номенклатура
		|		ИЗ
		|			РегистрНакопления.СерийныеНомераНоменклатуры 				КАК СерийныеНомераНоменклатуры
		|		ГДЕ
		|			СерийныеНомераНоменклатуры.Регистратор.Распоряжение В (&МассивОбъектов)) КАК ВложенныйЗапрос1
		|		
		|		ПО  Док.Документ" + ?(Ордер = "Поступление","Поступления","Отгрузки") + " = ВложенныйЗапрос1.Регистратор.Распоряжение
		|	 	И Док.Номенклатура = ВложенныйЗапрос1.Номенклатура
		|		И Док.Характеристика = ВложенныйЗапрос1.Характеристика
		|
		|	ГДЕ
		|		Док.Документ" + ?(Ордер = "Поступление","Поступления","Отгрузки") + " В (&МассивОбъектов) )	КАК ВложенныйЗапрос
		|		
		|	ПО Док.Номенклатура = ВложенныйЗапрос.Номенклатура
		|	И Док.Характеристика = ВложенныйЗапрос.Характеристика 
		|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения 				КАК ДопСведения
		//|		ПО ВложенныйЗапрос.Номенклатура = ДопСведения.Объект
		//|		И ДопСведения.Свойство = &Гарантия 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты 	КАК ДопСведения
		|		ПО ВложенныйЗапрос.Номенклатура = ДопСведения.Ссылка
		|		И  ДопСведения.Свойство = &Гарантия 
		|
		|ГДЕ
		|	Док.Регистратор В (&МассивОбъектов)
		|
		|";
КонецФункции
	
Функция ктсДокументОрденаяСхема(Док) //Использует ли документ ордерную схему
	ДокументИмя = Док.Метаданные().Имя;
	Склад = Док.Склад;
	
	Если ДокументИмя = "РеализацияТоваровУслуг" Тогда
		Возврат ?(Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, Истина, Ложь);
	ИначеЕсли ДокументИмя = "ПоступлениеТоваровУслуг" Тогда
		Возврат ?(Склад.ИспользоватьОрдернуюСхемуПриПоступлении, Истина, Ложь);
	ИначеЕсли ДокументИмя = "ПриходныйОрдерНаТовары" Тогда
		Возврат ?(Док.Склад.ИспользоватьОрдернуюСхемуПриПоступлении, Истина, Ложь);
	ИначеЕсли ДокументИмя = "РасходныйОрдерНаТовары" Тогда
		Возврат ?(Док.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, Истина, Ложь); 
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ктсПоискОрдера(Док)
	ДокументИмя = Док.Метаданные().Имя;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Ссылка							КАК ДокументСсылка,
		|	Док.Проведен						КАК Проведен,
		|	ВложенныйЗапрос.Количество			КАК Количество,
		|	СУММА(ВложенныйЗапрос.Количество)	КАК ОбщееКоличество,
		|	Док.Распоряжение					КАК Распроряжение
		|ИЗ
		|	Документ." + ?(ДокументИмя = "ПоступлениеТоваровУслуг","ПриходныйОрдерНаТовары","РасходныйОрдерНаТовары") + " КАК Док
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ДокТовары.Количество			КАК Количество,
		|		ДокТовары.Ссылка				КАК СсылкаТовары
		|	ИЗ
		|  		Документ." + ?(ДокументИмя = "ПоступлениеТоваровУслуг","ПриходныйОрдерНаТовары","РасходныйОрдерНаТовары") + ".Товары КАК ДокТовары
		|	СГРУППИРОВАТЬ ПО
		|		ДокТовары.Количество,
		|		ДокТовары.Ссылка
		|
		|	)	КАК	ВложенныйЗапрос
		|	ПО  ВложенныйЗапрос.СсылкаТовары = Док.Ссылка
		|
		|ГДЕ
		|	Док.Распоряжение = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.Проведен,
		|	ВложенныйЗапрос.Количество,
		|	Док.Распоряжение
		|");
	Если ДокументИмя = "ПоступлениеТоваровУслуг" Тогда
		Запрос.УстановитьПараметр("Документ",?(Док.ЗаказПоставщику.Пустая(), Док, Док.ЗаказПоставщику));
	Иначе
		Запрос.УстановитьПараметр("Документ",Док);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Выборка.ДокументСсылка;
	КонецЕсли;
	
КонецФункции

Функция ктсТекстЗапросаОрдера(Ордер)//Приходной,расходной ордер на товары с ордерной схемой
		Возврат "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Номенклатура 												КАК Номенклатура,
		|	Док.Характеристика												КАК Характеристика, 
		|	" + ?(Ордер = "Приходный","Док.Принимается + Док.КПоступлению",
						"Док.КОтгрузке + Док.Собирается + Док.Собрано") +"	КАК Количество,
		|	ДопСведения.Значение 											КАК Гарантия,
		|	Док.Номенклатура.ЕдиницаИзмерения 								КАК НоменклатураЕдиницаИзмерения,
		|	ВложенныйЗапрос.СерийныеНомера 									КАК СерийныеНомера

		|ИЗ
		|	РегистрНакопления.ТоварыК" + ?(Ордер = "Приходный","Поступлению","Отгрузке") + "  КАК Док //.ОстаткиИОбороты	КАК Док
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|		СерийныеНомераНоменклатуры.Регистратор						КАК Регистратор,
		|		СерийныеНомераНоменклатуры.СерийныеНомера 					КАК СерийныеНомера,
		|		СерийныеНомераНоменклатуры.Характеристика					КАК Характеристика,
		|		СерийныеНомераНоменклатуры.Номенклатура						КАК Номенклатура
		|	ИЗ
		|		РегистрНакопления.СерийныеНомераНоменклатуры 				КАК СерийныеНомераНоменклатуры
		|	ГДЕ
		|		СерийныеНомераНоменклатуры.Регистратор В (&МассивОбъектов)) КАК ВложенныйЗапрос
		|	ПО  Док.Регистратор = ВложенныйЗапрос.Регистратор
		|	 	И Док.Номенклатура = ВложенныйЗапрос.Номенклатура
		|		И Док.Характеристика = ВложенныйЗапрос.Характеристика
		|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения 			КАК ДопСведения
		//|		ПО Док.Номенклатура = ДопСведения.Объект
		//|		И ДопСведения.Свойство = &Гарантия 
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты 	КАК ДопСведения
		|ПО Док.Номенклатура = ДопСведения.Ссылка
		|И  ДопСведения.Свойство 		   = &Гарантия
		|
		|ГДЕ
		|	Док.Регистратор В (&МассивОбъектов) 
		|
		|УПОРЯДОЧИТЬ
		|	ПО Док.Номенклатура
		|";
КонецФункции
	
Функция ктсТекстЗапросаОсновной() // Документы делают движение по регистру накопления ТоварыНаСкладах
	 Возврат "
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ        
		|		*
		|ИЗ
		|	(   ВЫБРАТЬ
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(ТоварыИзСборки.Номенклатура, -1) = -1
		|		ТОГДА ДокТовары.Номенклатура 								
		|		ИНАЧЕ ТоварыИзСборки.Номенклатура 
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(ТоварыИзСборки.Номенклатура, -1) = -1
		|		ТОГДА ДокТовары.Характеристика 								
		|		ИНАЧЕ ТоварыИзСборки.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(ТоварыИзСборки.Номенклатура, -1) = -1
		|		ТОГДА 	ВЫБОР
		|					КОГДА ДокТовары.ВНаличии = NULL
		|					ТОГДА ДокТовары.КОтгрузке
		|					ИНАЧЕ ДокТовары.ВНаличии
		|				КОНЕЦ 
		|		ИНАЧЕ 	ВЫБОР
		|					КОГДА ТоварыИзСборки.ВНаличии = NULL
		|					ТОГДА ТоварыИзСборки.КОтгрузке
		|					ИНАЧЕ ТоварыИзСборки.ВНаличии
		|				КОНЕЦ
		|	КОНЕЦ 															КАК Количество,
		|	ДопСведения.Значение 											КАК Гарантия,
		|	ДокТовары.Номенклатура.ЕдиницаИзмерения 						КАК НоменклатураЕдиницаИзмерения,
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(ТоварыИзСборки.Номенклатура, -1) = -1
		|		ТОГДА ВложенныйЗапрос.СерийныеНомера 								
		|		ИНАЧЕ СНСборка.СерийныеНомера
		|	КОНЕЦ КАК СерийныеНомера
	    |
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах 								КАК ДокТовары
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|		СерийныеНомераНоменклатуры.Регистратор						КАК Регистратор,
		|		СерийныеНомераНоменклатуры.СерийныеНомера 					КАК СерийныеНомера,
		|		СерийныеНомераНоменклатуры.Характеристика					КАК Характеристика, 
		|		СерийныеНомераНоменклатуры.Номенклатура						КАК Номенклатура
		|	ИЗ
		|		РегистрНакопления.СерийныеНомераНоменклатуры 				КАК СерийныеНомераНоменклатуры
		|	ГДЕ
		|		СерийныеНомераНоменклатуры.Регистратор В (&МассивОбъектов)) КАК ВложенныйЗапрос
		|
		|	ПО 	ДокТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
		|	И 	ДокТовары.Характеристика = ВложенныйЗапрос.Характеристика  
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры КАК СНСборкаТемп
		|ПО ВложенныйЗапрос.СерийныеНомера = СНСборкаТемп.Сборка
		|
		|ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыИзСборки	
		|ПО ТоварыИзСборки.Регистратор 	 = СНСборкаТемп.Регистратор
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры КАК СНСборка
		|ПО ТоварыИзСборки.Регистратор 		= СНСборка.Регистратор
		|И	ТоварыИзСборки.Номенклатура 	= СНСборка.Номенклатура
		|И  ТоварыИзСборки.Характеристика	= СНСборка.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты 	КАК ДопСведения
		|ПО (ВЫБОР КОГДА ЕСТЬNULL(ТоварыИзСборки.Номенклатура, -1) = -1 ТОГДА ДокТовары.Номенклатура ИНАЧЕ ТоварыИзСборки.Номенклатура КОНЕЦ = ДопСведения.Ссылка)
		|И  ДопСведения.Свойство   = &Гарантия
		|
		|ГДЕ
		|	ДокТовары.Регистратор В (&МассивОбъектов) 
		|
		|) КАК ВлЗпрос
		|
		|СГРУППИРОВАТЬ ПО Номенклатура, Характеристика, Количество, Гарантия, НоменклатураЕдиницаИзмерения, СерийныеНомера 
		|
		|УПОРЯДОЧИТЬ
		|	ПО Номенклатура
	  //|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	  //  |	ДокТовары.Номенклатура 											КАК Номенклатура,
	  //  |	ДокТовары.Характеристика										КАК Характеристика,
	  //  |	ВЫБОР
	  //  |		КОГДА ДокТовары.ВНаличии = NULL
	  //  |			ТОГДА ДокТовары.ВРезерве
	  //  |		ИНАЧЕ ДокТовары.ВНаличии
	  //  |	КОНЕЦ 															КАК Количество,
	  //  |	ДопСведения.Значение 											КАК Гарантия,
	  //  |	ДокТовары.Номенклатура.ЕдиницаИзмерения 						КАК НоменклатураЕдиницаИзмерения,
	  //  |	ВложенныйЗапрос.СерийныеНомера 									КАК СерийныеНомера
	  //  |ИЗ
	  //  |	РегистрНакопления.ТоварыНаСкладах 								КАК ДокТовары
	  //  |
	  //  |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	  //  |		СерийныеНомераНоменклатуры.Регистратор						КАК Регистратор,
	  //  |		СерийныеНомераНоменклатуры.СерийныеНомера 					КАК СерийныеНомера,
	  //  |		СерийныеНомераНоменклатуры.Характеристика					КАК Характеристика, 
	  //  |		СерийныеНомераНоменклатуры.Номенклатура						КАК Номенклатура
	  //  |	ИЗ
	  //  |		РегистрНакопления.СерийныеНомераНоменклатуры 				КАК СерийныеНомераНоменклатуры
	  //  |	ГДЕ
	  //  |		СерийныеНомераНоменклатуры.Регистратор В (&МассивОбъектов)) КАК ВложенныйЗапрос
	  //  |
	  //  |	ПО ДокТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
	  //  |	И ДокТовары.Характеристика = ВложенныйЗапрос.Характеристика  
	  //  |
	  //  //|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения 			КАК ДопСведения
	  //  //|		ПО ДокТовары.Номенклатура = ДопСведения.Объект
	  //  //|		И ДопСведения.Свойство = &Гарантия  
	  //  |
	  //  |ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты 	КАК ДопСведения
	  //  |ПО ДокТовары.Номенклатура = ДопСведения.Ссылка
	  //  |И  ДопСведения.Свойство 		   = &Гарантия
	  //  |
	  //  |ГДЕ
	  //  |	ДокТовары.Регистратор В (&МассивОбъектов) 
	  //  |
	  //  |УПОРЯДОЧИТЬ
	  //  |	ПО ДокТовары.Номенклатура
		|";
КонецФункции

Функция ктсДанныеОДокументе(Док)
	Структура = Новый Структура;
	Организация = ктсОрганизацияИзДокумента(Док);
	
	Структура.Вставить("Имя",  			Док.Метаданные().Имя);
	Структура.Вставить("Дата",       	Док.Дата);
	Структура.Вставить("Номер",         Док.Номер);
	Структура.Вставить("Ответственный", ктсОтветственный(Док));
	Структура.Вставить("Организация",	Организация);
	Структура.Вставить("Префикс",		Организация.Префикс);
	
	Возврат Структура;
КонецФункции

Функция ктсОрганизацияИзДокумента(Док)
	ДокументИмя = Док.Метаданные().Имя;
	
	Если ДокументИмя = "РасходныйОрдерНаТовары" Или
		ДокументИмя = "ПриходныйОрдерНаТовары" Тогда
		Возврат Док.Распоряжение.Организация;
	Иначе
		Возврат Док.Организация;
	КонецЕсли;	
КонецФункции

Функция ктсОтветственный(Док)
	ДокументИмя = Док.Метаданные().Имя;
	
	Если ДокументИмя = "ВводОстатков" Или 
		ДокументИмя = "ЗаказНаВнутреннееПотребление" Или
		ДокументИмя = "ЗаказНаПеремещение" Или
		ДокументИмя = "ЗаказНаСборку" Или
		ДокументИмя = "ОприходованиеИзлишковТоваров" Или
		ДокументИмя = "ОрдерНаОтражениеИзлишковНедостачТоваров" Или
		ДокументИмя = "ОрдерНаПеремещениеТоваров" Или
		ДокументИмя = "ОтчетОРозничныхПродажах" Или
		ДокументИмя = "ПеремещениеТоваров" Или
		ДокументИмя = "ПересортицаТоваров" Или
		ДокументИмя = "ПересчетТоваров" Или
		ДокументИмя = "ПланПродажИВнутреннегоПотребления" Или
		ДокументИмя = "ПриходныйОрдерНаТовары" Или
		ДокументИмя = "РасходныйОрдерНаТовары" Или
		ДокументИмя = "РегистрацияЦенНоменклатурыПоставщика" Или
		ДокументИмя = "СборкаТоваров" Или
		ДокументИмя = "СписаниеНедостачТоваров" Или
		ДокументИмя = "ТребованиеНакладная" Или
		ДокументИмя = "УстановкаЦенНоменклатуры"
		Тогда
		Возврат Док.Ответственный;
	ИначеЕсли ДокументИмя = "ВозвратТоваровОтКлиента" Или
		ДокументИмя = "ВозвратТоваровПоставщику" Или
		ДокументИмя = "ЗаказКлиента" Или
		ДокументИмя = "ЗаказПоставщику" Или
		ДокументИмя = "КоммерческоеПредложениеКлиенту" Или
		ДокументИмя = "ОтчетКомиссионера" Или
		ДокументИмя = "ОтчетКомиссионераОСписании" Или
		ДокументИмя = "ОтчетПоКомиссииМеждуОрганизациями" Или
		ДокументИмя = "ПоступлениеТоваровУслуг" Или
		ДокументИмя = "РеализацияТоваровУслуг" 
		Тогда
		Возврат Док.Менеджер;
	ИначеЕсли ДокументИмя = "ЧекККМ" Или
		ДокументИмя = "ЧекККМВозврат"  
		Тогда
		Возврат Док.Кассир;
	ИначеЕсли ДокументИмя = "ЗаданиеТорговомуПредставителю" 
		Тогда
		Возврат Док.Куратор;
	Иначе//Если ДокументИмя = "ПередачаТоваровМеждуОрганизациями"	
	//	Тогда
		Возврат Неопределено;
	КонецЕсли; 	
КонецФункции

Функция ПроверитьНаличиеОплаты(МассивСсылок)
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Для Каждого Документ ИЗ МассивСсылок Цикл
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Ссылка = Документ;
		
	КонецЦикла;
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "
	|ВЫБРАТЬ
	|	ТабДокументов.Ссылка КАК ЗаказКлиента
	|
	|ПОМЕСТИТЬ ТабЗаказы
	|ИЗ
	|	&ТаблицаДокументов КАК ТабДокументов
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ЗаказКлиента В
	|				(ВЫБРАТЬ
	|					ВЫБОР 
	|						КОГДА ЗаказКлиента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) 
	|						  ИЛИ ЗаказКлиента.ЗаказКлиента = Неопределено 
	|						ТОГДА ЗаказКлиента 
	|						ИНАЧЕ ЗаказКлиента.ЗаказКлиента 
	|					КОНЕЦ
	|				ИЗ
	|					ТабЗаказы )) КАК РасчетыСКлиентамиОстатки";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВсеДокументыОплачены = РезультатЗапроса.Пустой();
	
	Возврат ВсеДокументыОплачены;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыТоварныйЧекСборка(Номенклатура, СерийныйНомер)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = "";
	
	Если ПустаяСтрока(СерийныйНомер) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	СборкаТоваров.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТабДокументСборка
		|ИЗ
		|	Документ.СборкаТоваров КАК СборкаТоваров
		|ГДЕ
		|	СборкаТоваров.Номенклатура = &Номенклатура
		|;";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	СерийныеНомераНоменклатурыОбороты.Регистратор.Распоряжение КАК ДокументСсылка
		|ПОМЕСТИТЬ ТабДокументыЗаказыНаСборку
		|ИЗ
		|	РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Номенклатура = &Номенклатура
		|				И СерийныеНомера = &СерийныйНомер) КАК СерийныеНомераНоменклатурыОбороты
		|ГДЕ
		|	СерийныеНомераНоменклатурыОбороты.Регистратор ССЫЛКА Документ.ПриходныйОрдерНаТовары
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СборкаТоваров.Ссылка, 0) = 0
		|			ТОГДА ТабДокументыЗаказыНаСборку.ДокументСсылка
		|		ИНАЧЕ СборкаТоваров.Ссылка
		|	КОНЕЦ КАК ДокументСсылка
		|ПОМЕСТИТЬ ТабДокументСборка
		|ИЗ
		|	ТабДокументыЗаказыНаСборку КАК ТабДокументыЗаказыНаСборку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК СборкаТоваров
		|		ПО ТабДокументыЗаказыНаСборку.ДокументСсылка = СборкаТоваров.ЗаказНаСборку
		|;";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	СборкаТоваровТовары.Номенклатура,
	|	СборкаТоваровТовары.КоличествоУпаковок / Ссылка.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СборкаТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СборкаТоваровТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ СборкаТоваровТовары.Упаковка
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СборкаТоваровТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ИспользоватьОрдернуюСхемуПриОтгрузке,
	|	СборкаТоваровТовары.Ссылка КАК ДокументСсылка
	|ПОМЕСТИТЬ ТабНоменклатура
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|ГДЕ
	|	СборкаТоваровТовары.Ссылка В(ВЫБРАТЬ ТабДокументСборка.ДокументСсылка ИЗ ТабДокументСборка)
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНоменклатура.Номенклатура КАК Номенклатура,
	|	ТабНоменклатура.Количество,
	|	ТабНоменклатура.ЕдиницаИзмерения,
	|	СерийныеНомераНоменклатурыОбороты.СерийныеНомера КАК СерийныйНомер
	|ИЗ
	|	ТабНоменклатура КАК ТабНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомераНоменклатуры.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						ТабНоменклатура.Номенклатура
	|					ИЗ
	|						ТабНоменклатура КАК ТабНоменклатура)
	|				) КАК СерийныеНомераНоменклатурыОбороты
	|		ПО ТабНоменклатура.Номенклатура = СерийныеНомераНоменклатурыОбороты.Номенклатура
	|			И (	ВЫБОР
	|					КОГДА ТабНоменклатура.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ТОГДА СерийныеНомераНоменклатурыОбороты.Регистратор.Распоряжение 	= ТабНоменклатура.ДокументСсылка
	|					ИНАЧЕ СерийныеНомераНоменклатурыОбороты.Регистратор 				= ТабНоменклатура.ДокументСсылка
	|				КОНЕЦ)
	|			И	СерийныеНомераНоменклатурыОбороты.СерийныеНомера В (ВЫБРАТЬ СерийныеНомера ИЗ РегистрНакопления.СерийныеНомераНоменклатуры ГДЕ Сборка = &СерийныйНомер)
	|ИТОГИ ПО ТабНоменклатура.Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗаполнитьТабличныйДокументСборкиТоварныйЧек_ЧП(РезультатыЗапроса, ОбластьНоменклатура, ОбластьПустыеЦены, ОбластьСерийныйНомер, НомерПозиции, ЭтоОрганизацияФ5)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВыборкаНоменклатура = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерПозицииНоменклатуры = 1;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		НоменклатураЗаполнена 	= Ложь;
		ВыборкаДетальныеЗаписи  = ВыборкаНоменклатура.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не НоменклатураЗаполнена Тогда
				
				ОбластьНоменклатура.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ОбластьНоменклатура.Параметры.Номер 	= Строка(НомерПозиции) + "." + Строка(НомерПозицииНоменклатуры) + ".";
				ОбластьНоменклатура.Параметры.Код		= Формат(Число(ВыборкаДетальныеЗаписи.Номенклатура.Код), "ЧГ=0");
				Если Не ЭтоОрганизацияФ5 Тогда
					ОбластьНоменклатура.Параметры.Гарантия 	= "";
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьНоменклатура);
				ТабличныйДокумент.Присоединить(ОбластьПустыеЦены);
				НоменклатураЗаполнена = Истина;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.СерийныйНомер) Тогда
				
				ОбластьСерийныйНомер.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				ТабличныйДокумент.Вывести(ОбластьСерийныйНомер);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерПозицииНоменклатуры = НомерПозицииНоменклатуры + 1;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЗаполнитьСоветЧек_ЧП(СписокВидыНоменклатуры)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Совет ИЗ РегистрСведений.Лояльность_СоветДня ГДЕ ВидНоменклатуры В (&Список)");
	Запрос.УстановитьПараметр("Список", СписокВидыНоменклатуры);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Запрос.Текст = "ВЫБРАТЬ Совет ИЗ РегистрСведений.Лояльность_СоветДня";
		Выгрузка = Запрос.Выполнить().Выгрузить();
	Иначе
		Выгрузка = Результат.Выгрузить();
	КонецЕсли;
		
	СлучайноеЧисло = GetLibrary("LoyaltyLibrary").ГенерироватьСлучайныеЧисла(0, Выгрузка.Количество() - 1);
	Возврат Выгрузка[СлучайноеЧисло].Совет;
	
КонецФункции

Функция ПолучитьНомерТелефонаПартнера(ПартнерСсылка)
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &Тип
	|И	ПартнерыКонтактнаяИнформация.Ссылка = &ПартнерСсылка";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ПартнерСсылка", ПартнерСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Результат + ", " + Выборка.Телефон;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьЗаголовокДокументаВидатковойНакладной(Шапка, НазваниеДокумента = "")
	
	Если НазваниеДокумента = ""
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление,Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление,ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НазваниеДокумента + " № " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Ложь, Истина)
	                          + " от " + Формат(ТекущаяДата(), "ДФ='дд ММММ гггг'") + " г.";
	
КонецФункции


// Функция формирует представление суммы прописью в указанной валюте
//
// Параметры:
//  Сумма - Число - Сумма, которую надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Знач Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь)
	
	Результат         = ?(Сумма < 0, -Сумма, Сумма);
	ЦелаяЧасть        = Цел(Результат);
	ФорматСтрока      = "Л=uk_UA; ДП=Ложь";
	ПараметрыПредмета = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Валюта, "ПараметрыПрописиНаРусском");
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
			
		Иначе
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьСуммуПрописью()

// Процедура предназначена для преобразования номера документа.
//
// Параметры:
//  Номер - Строка - Номер документа
//	Префикс - Строка - Префикс организации, указанной в документе
//
// Возвращаемое значение;
//  Строка - номер документа для печати
//
Функция ПолучитьНомерНаПечать(Знач Номер, Знач Префикс, Знач УдалитьВсеПрефиксы = Ложь)

	// Удаление префикса организации из номера документа.
	Если Найти(Номер, Префикс) = 1 Тогда 
		Номер = Сред(Номер, СтрДлина(Префикс) + 1);
	КонецЕсли;
	
	// Если номер документа не содержит "-", то удаляем из номера все префиксы.
	ПозицияМинус = Найти(Номер, "-");
	Если ПозицияМинус = 0 Тогда
		УдалитьВсеПрефиксы = Истина;
	КонецЕсли;
	
	// Удаление префикса информационной базы из номера документа.
	Если УдалитьВсеПрефиксы Тогда
		
		ПозицияМинус = Найти(Номер, "-");
		Если ПозицияМинус <> 0 Тогда
			Номер = Сред(Номер, ПозицияМинус + 1);
		КонецЕсли;
		
		// Удаление всех символьных префиксов.
		Пока Найти("0123456789", Лев(Номер, 1)) = 0 Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
		
	КонецЕсли;
	
	ПозицияМинус = Найти(Номер, "-");
	Если ПозицияМинус <> 0 Тогда
		ПрефиксНомера = Лев(Номер, ПозицияМинус);
		Номер = Сред(Номер, ПозицияМинус + 1);
	Иначе
		ПрефиксНомера = "";
	КонецЕсли;
	
	Если Найти("0123456789", Лев(Номер, 1)) = 0 Тогда
		ПрефиксНомера = ПрефиксНомера + Лев(Номер, 1);
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// Удаление ведущих нулей.
	Пока Лев(ПрефиксНомера, 1)= "0" Цикл
		ПрефиксНомера = Сред(ПрефиксНомера, 2);
	КонецЦикла;
	
	// Так же, может остаться "минус" впереди.
	Если Лев(ПрефиксНомера, 1) = "-" Тогда
		ПрефиксНомера = Сред(ПрефиксНомера, 2);
	КонецЕсли;
	
	Пока Лев(Номер, 1)= "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат ПрефиксНомера + Номер;

КонецФункции // ПолучитьНомерНаПечать()

// Функция формирует представление суммы в рублях и копейках.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//
// Возвращаемое значение
//  Строка - Отформатированная сумма.
//
Функция СуммаГрнКоп(Сумма, Валюта, ВалютаРегламентированногоУчета)
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		Гривны = Цел(Сумма);
		Копейки = Окр(100 * (Сумма - Гривны), 0, 1);
		СуммаРубКоп = "" 
			+ Формат(Гривны, "ЧДЦ=0; ЧГ=0")
			+ " грн. " 
			+ Цел(Копейки /10) 
			+ (Копейки - 10 * Цел(Копейки / 10))
			+" коп."
		;
	Иначе
		СуммаРубКоп = СуммаПлатежногоДокумента(Сумма, Ложь);
	КонецЕсли;
	
	Возврат СуммаРубКоп;
	
КонецФункции // СуммаРубКоп()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Строка - Отформатированная строка.
//
Функция СуммаПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек)
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, Найти(Результат, "="));
			
		Иначе
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СуммаПлатежногоДокумента()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Функция возвращает информацию о курсе валюты на основе ссылки на валюту.
// Данные возвращаются в виде структуры.
//
// Параметры:
// ВыбраннаяВалюта - Справочник.Валюты / Ссылка - ссылка на валюту, информацию
//                  о курсе которой необходимо получить
//
// Возвращаемое значение:
// ДанныеКурса   - стуктура, содержащая информацию о последней доступной 
//                 записи курса
//
Функция ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта)
	
	ДанныеКурса = Новый Структура("ДатаКурса, Курс, Кратность");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РегКурсы.Период, РегКурсы.Курс, РегКурсы.Кратность
	              | ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериодаЗагрузки, Валюта = &ВыбраннаяВалюта) КАК РегКурсы";
	Запрос.УстановитьПараметр("ВыбраннаяВалюта", ВыбраннаяВалюта);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ТекущаяДата());
	
	ВыборкаКурс = Запрос.Выполнить().Выбрать();
	ВыборкаКурс.Следующий();
	
	ДанныеКурса.ДатаКурса = ВыборкаКурс.Период;
	ДанныеКурса.Курс      = ВыборкаКурс.Курс;
	ДанныеКурса.Кратность = ВыборкаКурс.Кратность;
	
	Возврат ДанныеКурса;
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
// Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС)
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. ПДВ (%СтавкаНДС%):'"), НСтр("ru='ПДВ (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()

// Формирует описание характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание характеристик ТМЦ
//
Функция ПредставлениеХарактеристик(Выборка)
	
	Результат = "(";
	
	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;
	
	Результат = Результат + ")";
	
	Возврат ?(Результат = "()", "", " " + Результат)
	
КонецФункции // ПредставлениеХарактеристик()
                                                                       
Функция ПолучитьСписокБанковскихСчетов()
	                                                                            
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка Из Справочник.БанковскиеСчетаОрганизаций");
	ВыгрузкаБС = Запрос.Выполнить().Выгрузить();                        
	СписокБС   = Новый СписокЗначений;                                  
	СписокБС.ЗагрузитьЗначения(ВыгрузкаБС.ВыгрузитьКолонку("Ссылка"));
	                                                                             
	Возврат СписокБС;                                                   
	                                                                             
КонецФункции

Функция ПолучитьГлобальныеНастройкиПечатныхФорм()
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("ГлобальныеНастройкиВнешнихПечатныхФорм",,, "ГлобальныеНастройкиВнешнихПечатныхФорм");		
КонецФункции

Функция ПолучитьПредставлениеСклада(СкладПредставление, ПомещениеПредставление)

	СтрПредставление = СокрЛП(СкладПредставление);

	Если ЗначениеЗаполнено(ПомещениеПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ПомещениеПредставление);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ")
	

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(Не ПустаяСтрока(Фамилия), 
				Фамилия + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя                = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество           = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
				Фамилия + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");
				
КонецФункции // ФамилияИнициалыФизЛица()

// Получаем  данные об контактних данных
//
// Параметры:
//  КонтактноеЛицо  - СправочникСсылка.КонтактныеЛицаПартнеров -  контактное лицо из справочника МестаДоставки
//
// Возвращаемое значение:
//  Структура   - структура данных об контктном лице
Функция ПолучитьДанныеОбКонтактномЛице(КонтактноеЛицо)
	УстановитьПривилегированныйРежим(Истина);
	Данные = Новый Структура;	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = ПолучитьТекстЗапросаДанныеКонтактногоЛица();
	
	Если ТипЗнч(КонтактноеЛицо)=Тип("СправочникСсылка.Партнеры") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактныеЛицаПартнеров","Партнеры");
		ТекстЗапроса = ТекстЗапроса +"
			|ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) КАК Тип,
			|		НомерТелефона 											КАК Представление,
			|	 	&ТелефонПартнера 										КАК Вид
			|	ИЗ
			|		РегистрСведений.Лояльность_НомераТелефонов
			|	ГДЕ
			|		Партнер = &Абонент";
	КонецЕсли;
	ТелефонПартнера 	 = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	Запрос.Текст 		 = ТекстЗапроса;
	Запрос.УстановитьПараметр("Абонент",		КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТелефонПартнера",ТелефонПартнера);

	
	Выборка = Запрос.Выполнить().Выбрать();
	АдресАбонента 	= "";
	Телефон		= "";
	Скайп		= "";
	ICQ			= "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		    АдресАбонента 	= АдресАбонента + Выборка.Представление +"; ";
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Телефон 		= Телефон + Выборка.Представление +"; ";
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда  
			ВидСкайп			=  Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("aed91f0c-80be-11e2-8fd5-001e673c80fc"));
			ВидICQ				=  Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("aed91f0b-80be-11e2-8fd5-001e673c80fc")); 
			Если Выборка.Вид = ВидСкайп Тогда
				Скайп = Скайп + Выборка.Представление +"; ";
			ИначеЕсли  Выборка.Вид = ВидICQ Тогда
				ICQ   = ICQ + Выборка.Представление +"; "; 
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("Телефон",	Телефон);
	Данные.Вставить("АдресЭП",	АдресАбонента);
	Данные.Вставить("Скайп",	Скайп);
	Данные.Вставить("ICQ",		ICQ);

	
	Возврат Данные; 
КонецФункции // ПолучитьДанныеОбКонтактномЛице(КонтактноеЛицо)()

// Получить текстзапроса данные о контактном лице отправителя
//
// Параметры:
// НЕТ
// Возвращаемое значение:
// Строка   - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗапросаДанныеКонтактногоЛица()
	ТекстЗапроса="ВЫБРАТЬ
			|	Тип			   КАК  Тип,	 
			|	Представление  КАК  Представление,
			|   Вид 		   КАК Вид
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	Тип,
			|	Представление,
			|   Вид
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация 
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	Тип,
			|	Представление,
			|   Вид
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация 
			|ГДЕ
			|	Ссылка = &Абонент
			|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаДанныеКонтактногоЛица()

// Получить отправителя  задачи на маршрут
//
// Параметры:
//  МестоДоставки  - СправочникСсылка.МестаДоставки - текущая задача на маршрут
//
// Возвращаемое значение:
//   СправочныкСсылка.Партнер   - партнер-отправиетль задачи на маршрут 
//
Функция ПолучитьОтправителяМестаДоставки(МестоДоставки)
	УстановитьПривилегированныйРежим(Истина);
	ДанныеОтправителя = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗадачиОтправителяМестаДоставки();
	Запрос.УстановитьПараметр("Задача",МестоДоставки);
	РезультаЗапрос = Запрос.Выполнить();
	Если  НЕ РезультаЗапрос.Пустой() Тогда
		ТабЗнч 		= РезультаЗапрос.Выгрузить();
		Отправитель 		= ТабЗнч[0].Отправитель;
		АдресОтправителя    = ТабЗнч[0].АдресОтправителя;
		ДанныеОтправителя.Вставить("Отправитель",		Отправитель);
		ДанныеОтправителя.Вставить("АдресОтправителя",	АдресОтправителя);
		Возврат ДанныеОтправителя;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // ПолучитьОтправителяМестаДоставки()

// Получаем адрес партнера из карточки
//
// Параметры:
//   Партнер - СправочникСсылка.Партнеры -  партнер получаемого адреса 
//                 
//
// Возвращаемое значение:
//   Строка  - адрес партнера//
&НаСервере
Функция ПолучитьАдресПартнера(Партнер)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Представление
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация
		|ГДЕ
		|	Тип = &Тип
		|	И Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
						
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ()

// Получить текстзапроса данные об отправителе задачи на маршрут
//
// Параметры:
// НЕТ
// Возвращаемое значение:
// Строка   - текст запроса
//
&НаСервере
Функция ПолучитьТекстЗадачиОтправителяМестаДоставки()
	ТекстЗапроса="ВЫБРАТЬ
	             |	ВЫРАЗИТЬ(Отправитель КАК Справочник.Партнеры) 	КАК Отправитель,
				 |  АдресОтправителя 								КАК АдресОтправителя
	             |ИЗ
	             |	РегистрСведений.ЗадачиНаМаршрут.СрезПервых(, Место = &Задача)";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗадачиОтправителяМестаДоставки()

Функция ПолучитьНазвуДокументаДляЗаголовкаАктуНаЗаменуТоварра(ТекстЗаголовка,НомерДляПечати, ДатаДокумента)
	
	Возврат ТекстЗаголовка + НомерДляПечати+" від "+Формат(ДатаДокумента,"Л=uk_UA; ДЛФ=DD");

КонецФункции // ПолучитьНазвуДокументаДляЗаголовкаАктуНаЗаменуТоварра()


Функция ПолучитьТекстЗапросаДанныеДляПечатиФормыЗаказНаряд()
	
	Возврат 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.ЗаявкаСервисногоЦентра,
		|	РеализацияТоваровУслуг.Ссылка КАК РТиУ
		|ПОМЕСТИТЬ КешЗаявок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
		|	И РеализацияТоваровУслуг.ЗаявкаСервисногоЦентра <> ЗНАЧЕНИЕ(Документ.ГНАТ_ЗаявкаСервисногоЦентра.пустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГНАТ_ЗаявкаСервисногоЦентра.Ссылка,
		|	NULL
		|ИЗ
		|	Документ.ГНАТ_ЗаявкаСервисногоЦентра КАК ГНАТ_ЗаявкаСервисногоЦентра
		|ГДЕ
		|	ГНАТ_ЗаявкаСервисногоЦентра.Ссылка В(&МассивОбъектов)
		|;
		|ВЫБРАТЬ
		|	Ссылка 			КАК Склад,
		|	Представление 	КАК АдресСклада
		|ПОМЕСТИТЬ ТаблицаАдресовСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Тип = &ТипКонтакнойИнформацииАдрес
		|	И Вид = &ВидКонтакнойИнформацииАдресСклада  
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад  
		|;
		|ВЫБРАТЬ
		|	Ссылка 			КАК Склад,
		|	Представление 	КАК ТелефонСклада
		|ПОМЕСТИТЬ ТаблицаТелефонСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Тип = &ТипКонтакнойИнформацииТелефон
		|	И Вид = &ВидКонтакнойИнформацииТелефонСклад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГНАТ_ЗаявкаСервисногоЦентра.Номер,
		|	ГНАТ_ЗаявкаСервисногоЦентра.Дата,
		|	ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта.Наименование КАК Контрагент,
		|	ВЫРАЗИТЬ(ГНАТ_ЗаявкаСервисногоЦентра.ЗаявленыйДефект КАК СТРОКА(200)) КАК ЗаявленныйДефект,
		|	ГНАТ_ЗаявкаСервисногоЦентра.НомерРемонта,
		|	ГНАТ_ЗаявкаСервисногоЦентра.СерийныйНомер,
		|	ГНАТ_ЗаявкаСервисногоЦентра.ВидОперации КАК ТипРаботы,
		|	ГНАТ_ЗаявкаСервисногоЦентра.Номенклатура КАК Модель,
		|	ГНАТ_ЗаявкаСервисногоЦентра.Номенклатура.Марка КАК Бренд,
		|	ГНАТ_ЗаявкаСервисногоЦентра.Номенклатура.ВидНоменклатуры КАК ТоварнаяГруппа,
		|	ПартнерыАдрес.Представление КАК АдресКонтрагента,
		|	ВЫБОР
		|		КОГДА ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона = ПартнерыТелефон.НомерТелефона
		|				И ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона = ПартнерыМобильныйТелефон.НомерТелефона
		|			ТОГДА ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона
		|		КОГДА ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона = ПартнерыТелефон.НомерТелефона
		|				И ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона <> ПартнерыМобильныйТелефон.НомерТелефона
		|			ТОГДА ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона + "" "" + ПартнерыМобильныйТелефон.НомерТелефона
		|		КОГДА ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона <> ПартнерыТелефон.НомерТелефона
		|				И ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона <> ПартнерыМобильныйТелефон.НомерТелефона
		|				И ПартнерыТелефон.НомерТелефона <> ПартнерыМобильныйТелефон.НомерТелефона
		|			ТОГДА ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона + "" "" + ПартнерыТелефон.НомерТелефона + "" "" + ПартнерыМобильныйТелефон.НомерТелефона
		|		ИНАЧЕ ГНАТ_ЗаявкаСервисногоЦентра.НомерТелефона
		|	КОНЕЦ КАК ТелефоныКонтрагента,
		|	КешЗаявок.РТиУ,
		|	КешЗаявок.ЗаявкаСервисногоЦентра КАК Ссылка,
		|	ЕСТЬNULL(ТаблицаАдресовСкладов.АдресСклада, """") КАК АдресСклада,
		|	ЕСТЬNULL(ТаблицаТелефонСкладов.ТелефонСклада, """") КАК ТелефонСклада,
        |   ГНАТ_ЗаявкаСервисногоЦентра.Склад КАК Склад
		|         
		|ИЗ
		|	КешЗаявок КАК КешЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГНАТ_ЗаявкаСервисногоЦентра КАК ГНАТ_ЗаявкаСервисногоЦентра
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыАдрес
		|			ПО ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта = ПартнерыАдрес.Ссылка
		|				И (ПартнерыАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера))
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыТелефон
		|			ПО ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта = ПартнерыТелефон.Ссылка
		|				И (ПартнерыТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера))
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыМобильныйТелефон
		|			ПО ГНАТ_ЗаявкаСервисногоЦентра.ЗаказчикРемонта = ПартнерыМобильныйТелефон.Ссылка
		|				И (ПартнерыМобильныйТелефон.Вид = &МобильныйТелефон)
		|
		|           ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАдресовСкладов КАК ТаблицаАдресовСкладов
		|			ПО ГНАТ_ЗаявкаСервисногоЦентра.Склад = ТаблицаАдресовСкладов.Склад
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТелефонСкладов КАК ТаблицаТелефонСкладов
		|			ПО ГНАТ_ЗаявкаСервисногоЦентра.Склад = ТаблицаТелефонСкладов.Склад
		|
		|		ПО КешЗаявок.ЗаявкаСервисногоЦентра = ГНАТ_ЗаявкаСервисногоЦентра.Ссылка
		|ГДЕ
		|	ГНАТ_ЗаявкаСервисногоЦентра.Проведен
		|	И ГНАТ_ЗаявкаСервисногоЦентра.ВидОперации В(&СписокОпераций)";

КонецФункции //ПолучитьТекстЗапросаДанныеДляПечатиФормыЗаказНаряд()



// Получам тип организации. Функци нужна для выбора макета для печатной формы товарного чека.
// 
// Параметры:
// Организация - СправочникСсылка.Организации - организация для проверки.
//
// Возвращаемое значение:
// Истина - организация входит в сеть магазинов Ф5, Ложь - организация входит в сеть магазинов КТС.
//
Функция ПолучитьТипОрганизацииДляПечатиЧека(Организация)
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("83cb2377-5b57-11e4-80e2-001e676b0175")); // Свойство «Организация Ф5».

	Запрос 			= Новый Запрос;
	Запрос.Текст    = "ВЫБРАТЬ
	                  |	ВЫРАЗИТЬ(Объект КАК Справочник.Организации) КАК Организация,
	                  |	Значение									КАК Значение				
	                  |ИЗ
	                  |	РегистрСведений.ДополнительныеСведения
	                  |ГДЕ
	                  |	(ВЫРАЗИТЬ(Объект КАК Справочник.Организации)) = &Организация
	                  |	И Свойство = &Свойство";
					  
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Значение, Ложь);

КонецФункции // ПолучитьТипОрганизацииДляПечатиЧека()


// Получам тип организации. Функци нужна для выбора макета для печатной формы для сервисного центра.
// 
// Параметры:
// Склад - СправочникСсылка.Склады - склад для проверки.
//
// Возвращаемое значение:
// Истина - организация входит в сеть магазинов Ф5, Ложь - организация входит в сеть магазинов КТС.
//
Функция ПолучитьТипОрганизацииДляПечатиДокументовПоФ5(Склад)
    Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("83cb2377-5b57-11e4-80e2-001e676b0175")); // Свойство «Организация Ф5».

	Запрос 			= Новый Запрос;
	Запрос.Текст    = "ВЫБРАТЬ
                      | Модуль_ДоступныеСклады.Организация
                      |ПОМЕСТИТЬ Организация
                      |ИЗ
                      | РегистрСведений.Модуль_ДоступныеСклады КАК Модуль_ДоступныеСклады
                      |ГДЕ
                      | Модуль_ДоступныеСклады.Склад = &Склад
                      |;
                      |
                      |////////////////////////////////////////////////////////////////////////////////
                      |ВЫБРАТЬ
                      | ЕСТЬNULL(ДополнительныеСведения.Значение, ЛОЖЬ) КАК Значение
                      |ИЗ
                      | Организация КАК СпрОрганизация
                      |     
                      |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
                      |ПО (СпрОрганизация.Организация = (ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Организации)))
                      |И (ДополнительныеСведения.Свойство = &Свойство)";
					  
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Значение, Ложь);
КонецФункции

#КонецОбласти

