&НаКлиентеФункция ПодговитьДанныеПриЗакрытии() 	Перем Результат;		Результат = Новый Структура("ЧленыКомиссии, 				|Ответственные, НомерПриказа, ДатаПриказа,				|Город, ИмяПечатнойФормы, 				|ОрганизацияПолноеНаименование, ОрганизацияФормаСобственности, 				|РезультатПредоставить, НомерСчета, 				|ГлаваКомиссии, 				|ГлавныйОтветственный");									Результат["ГлаваКомиссии"] = ГлаваКомиссии;	Результат["ГлавныйОтветственный"] = ГлаваКомиссии; //Он же и есть главным ответственным, в теории директор.	Результат["ЧленыКомиссии"] = СписокЧленовКомиссии.ВыгрузитьЗначения();	Результат["Ответственные"] = СписокОтветственных.ВыгрузитьЗначения();	Результат["НомерПриказа"] = НомерПриказа;	Результат["ДатаПриказа"] = ДатаПриказа;	Результат["Город"] = Город;	Результат["РезультатПредоставить"] = РезультатПредоставить;	Результат["ОрганизацияПолноеНаименование"] = ОрганизацияПолноеНаименование;	Результат["ОрганизацияФормаСобственности"] = ОрганизацияФормаСобственности;	Результат["НомерСчета"] = НомерСчета;		Возврат Результат;	КонецФункции&НаКлиентеПроцедура ДобавитьВСписокУникальноеЗначение(Список, Значение)		Если Список.НайтиПоЗначению(Значение) = Неопределено Тогда		Список.Добавить(Значение);	КонецЕсли;	КонецПроцедуры&НаКлиентеПроцедура ДобавитьПользователейПоПодразделению(Список, Знач Подразделение)		МассивПользователей = ПолучитьСписокОтветственныхПоПодразделению(Подразделение);	Для Каждого ЭлементМассива Из МассивПользователей Цикл				Если ЭлементМассива = ГлаваКомиссии Тогда			Продолжить;		КонецЕсли;				ДобавитьВСписокУникальноеЗначение(Список, ЭлементМассива);	КонецЦикла;	КонецПроцедуры&НаКлиентеПроцедура ПечатьПриказаИРезультата(Команда)		СтруктураПередачи = ПодговитьДанныеПриЗакрытии();	СтруктураПередачи.Вставить("ИмяПечатнойФормы", "ПечатьПриказаНаИнвентаризациюИПечатьРезультатовИнвентаризации");		Закрыть(СтруктураПередачи);	КонецПроцедуры&НаКлиентеПроцедура РаспоряжениеНаИнвентаризациюПриИзменении(Элемент)		ПараметрыПоУмолчанию = ПодготовитьДанныеПоУмолчаниюНаСервере(РаспоряжениеНаИнвентаризацию);	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыПоУмолчанию);	 КонецПроцедуры&НаКлиентеПроцедура СписокПользователейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;	ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;		КонецПроцедуры&НаКлиентеПроцедура СписокПользователейОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)	КонецПроцедуры&НаКлиентеПроцедура СписокЧленовКомиссииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда		Возврат;	КонецЕсли;		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") 		ИЛИ 			(ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ПараметрыПеретаскивания.Значение[0].Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") )		Тогда				СтандартнаяОбработка = Ложь;		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;	КонецЕсли;		КонецПроцедуры&НаКлиентеПроцедура СписокЧленовКомиссииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	// Вставить содержимое обработчика.КонецПроцедуры&НаКлиентеПроцедура СписокЧленовКомиссииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда		Возврат;	КонецЕсли;		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") 		ИЛИ 			(ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ПараметрыПеретаскивания.Значение[0].Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") )		Тогда				СтандартнаяОбработка = Ложь;		Для Каждого элемент из ПараметрыПеретаскивания.Значение Цикл			Если ТипЗнч(Элемент) = ТИП("СтрокаГруппировкиДинамическогоСписка")				И ТипЗнч(Элемент.Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") Тогда				ДобавитьПользователейПоПодразделению(СписокЧленовКомиссии, Элемент.Ключ);			ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Пользователи") Тогда				ДобавитьВСписокУникальноеЗначение(СписокЧленовКомиссии, Элемент);			КонецЕсли;					КонецЦикла;			Иначе				Возврат;	КонецЕсли;КонецПроцедуры&НаКлиентеПроцедура СписокОтветственныхПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда		Возврат;	КонецЕсли;		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") 		ИЛИ 			(ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ПараметрыПеретаскивания.Значение[0].Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") )		Тогда				СтандартнаяОбработка = Ложь;		Для Каждого элемент из ПараметрыПеретаскивания.Значение Цикл			Если ТипЗнч(Элемент) = ТИП("СтрокаГруппировкиДинамическогоСписка")				И ТипЗнч(Элемент.Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") Тогда				ДобавитьПользователейПоПодразделению(СписокОтветственных, Элемент.Ключ);			ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Пользователи") Тогда				ДобавитьВСписокУникальноеЗначение(СписокОтветственных, Элемент);			КонецЕсли;					КонецЦикла;			Иначе				Возврат;	КонецЕсли;			КонецПроцедуры&НаКлиентеПроцедура СписокПользователейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда		Возврат;	КонецЕсли;		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") 		ИЛИ 			(ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ПараметрыПеретаскивания.Значение[0].Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") )		Тогда				СтандартнаяОбработка = Ложь;		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;	КонецЕсли;	КонецПроцедуры&НаКлиентеПроцедура СписокЧленовКомиссииОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)		СтандартнаяОбработка = Ложь;	КонецПроцедуры&НаКлиентеПроцедура СписокОтветственныхПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда		Возврат;	КонецЕсли;		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") 		ИЛИ 			(ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ПараметрыПеретаскивания.Значение[0].Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") )		Тогда				СтандартнаяОбработка = Ложь;		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;		ПараметрыПеретаскивания.Действие		   = ДействиеПеретаскивания.Перемещение;			КонецЕсли;	КонецПроцедуры                                                                             &НаКлиентеПроцедура СписокОтветственныхОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)		КонецПроцедуры                                                           &НаКлиентеПроцедура СписокПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)		Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.Пользователи") 		ИЛИ 			(ТипЗнч(ВыбраннаяСтрока) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ВыбраннаяСтрока.Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") )		Тогда						СтандартнаяОбработка = Ложь;		Если ТипЗнч(ВыбраннаяСтрока) = ТИП("СтрокаГруппировкиДинамическогоСписка")			И ТипЗнч(ВыбраннаяСтрока.Ключ) =  Тип("СправочникСсылка.СтруктураПредприятия") Тогда			ДобавитьПользователейПоПодразделению(СписокЧленовКомиссии, ВыбраннаяСтрока.Ключ);		ИначеЕсли ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.Пользователи") Тогда			ДобавитьВСписокУникальноеЗначение(СписокЧленовКомиссии, ВыбраннаяСтрока);		КонецЕсли;			КонецЕсли;		КонецПроцедуры&НаКлиентеПроцедура ПечатьРезультатов(Команда)	СтруктураПередачи = ПодговитьДанныеПриЗакрытии();	СтруктураПередачи.Вставить("ИмяПечатнойФормы", "ПечатьРезультатовИнвентаризации");		Закрыть(СтруктураПередачи);	КонецПроцедуры&НаКлиентеПроцедура ПечатьПриказа(Команда)		СтруктураПередачи = ПодговитьДанныеПриЗакрытии();	СтруктураПередачи.Вставить("ИмяПечатнойФормы", "ПечатьПриказаНаИнвентаризацию");		Закрыть(СтруктураПередачи);		КонецПроцедуры&НаСервереПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)		Если Параметры.Свойство("Ссылка") И ЗначениеЗаполнено(Параметры.Ссылка) Тогда 		//Добавленно для возможности отладки. 		РаспоряжениеНаИнвентаризацию = Параметры.Ссылка;		ПараметрыПоУмолчанию = ПодготовитьДанныеПоУмолчаниюНаСервере(РаспоряжениеНаИнвентаризацию);				ОрганизацияПолноеНаименование = ПараметрыПоУмолчанию.ОрганизацияПолноеНаименование;		ГлаваКомиссии = ПараметрыПоУмолчанию.ГлаваКомиссии;		СписокОтветственных = ПараметрыПоУмолчанию.СписокОтветственных;				Элементы.РаспоряжениеНаИнвентаризацию.Видимость = Ложь;		Элементы.ФормаПечатьТест.Видимость = Ложь;	КонецЕсли;		Элементы.СписокПользователей.РазрешитьНачалоПеретаскивания = Истина;	Элементы.СписокПользователей.РазрешитьПеретаскивание = Истина;	Элементы.СписокЧленовКомиссии.РазрешитьПеретаскивание = Истина;	Элементы.СписокОтветственных.РазрешитьПеретаскивание = Истина;	КонецПроцедуры&НаСервереФункция ПодготовитьДанныеПоУмолчаниюНаСервере(Знач ДокументСсылка)	Перем Результат;	Результат = Новый Структура("ОрганизацияПолноеНаименование, 	| ГлаваКомиссии, 	| СписокОтветственных");			                                    	Результат.ОрганизацияПолноеНаименование = ПолучитьОрганизацию(ДокументСсылка);	//Определеим главу комиссии. 	Запрос = Новый Запрос("ВЫБРАТЬ	|	Распоряжение.Склад,	|	Распоряжение.Склад.Подразделение КАК Подразделение,	|	Распоряжение.Склад.ТекущийОтветственный КАК Ответственный	|ПОМЕСТИТЬ ДанныеДокумента	|ИЗ	|	Документ.РаспоряжениеНаИнвентаризациюТоваров КАК Распоряжение	|ГДЕ	|	Распоряжение.Ссылка = &Ссылка	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ	|	Пользователи.Ссылка КАК Пользователь,	|	Пользователи.ФизическоеЛицо	|ПОМЕСТИТЬ Пользователи	|ИЗ	|	ДанныеДокумента КАК ДанныеДокумента	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи	|		ПО ДанныеДокумента.Ответственный = Пользователи.ФизическоеЛицо	|ГДЕ	|	НЕ Пользователи.ПометкаУдаления	|	И НЕ Пользователи.Недействителен	|;	|	|////////////////////////////////////////////////////////////////////////////////	|ВЫБРАТЬ	|	ДанныеДокумента.Склад,	|	ДанныеДокумента.Подразделение,	|	ДанныеДокумента.Ответственный,	|	Пользователи.Пользователь КАК ГлаваКомиссии	|ИЗ	|	ДанныеДокумента КАК ДанныеДокумента	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Пользователи КАК Пользователи	|		ПО ДанныеДокумента.Ответственный = Пользователи.ФизическоеЛицо");	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);	Выборка = Запрос.Выполнить().Выбрать();	Если Выборка.Следующий() Тогда 		Склад = Выборка.Склад;		Подразделение = Выборка.Подразделение;		Результат.ГлаваКомиссии = Выборка.ГлаваКомиссии;		//Список ответственных.		Если ЗначениеЗаполнено(Подразделение) Тогда 			Отвественные = Новый СписокЗначений;			Отвественные.ЗагрузитьЗначения(ПолучитьСписокОтветственныхПоПодразделению(Подразделение));			Если Отвественные.НайтиПоЗначению(ГлаваКомиссии) <> Неопределено Тогда 				Отвественные.Удалить(Отвественные.НайтиПоЗначению(ГлаваКомиссии));			КонецЕсли;						Результат.Вставить("СписокОтветственных", Отвественные);		КонецЕсли;	КонецЕсли;		Возврат Результат;	КонецФункции //ПодготовитьДанныеПоУмолчаниюНаСервере&НаСервереФункция ПолучитьОрганизацию(Знач ДокументСсылка) 		Возврат РеквизитФормыВЗначение("Объект").ПолучитьОрганизациюДляРаспоряжениеНаИнвентаризацию(ДокументСсылка);		КонецФункции&НаСервереБезКонтекста Функция ПолучитьСписокОтветственныхПоСкладу(Знач ДокументСсылка)	Перем Результат;			Склад = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументСсылка, "Склад");	Если ЗначениеЗаполнено(Склад) Тогда		Подразделение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Склад, "Подразделение"); 		Если ЗначениеЗаполнено(Подразделение) Тогда 			Результат = ПолучитьСписокОтветственныхПоПодразделению(Подразделение);			Возврат Результат;		КонецЕсли;	КонецЕсли;		Результат = Новый Массив;		Возврат Результат;		КонецФункции //ПолучитьСписокОтветственныхПоСкладу&НаСервереБезКонтекста Функция ПолучитьСписокОтветственныхПоПодразделению(Знач Подразделение) 	Запрос = Новый Запрос("ВЫБРАТЬ	                      |	Пользователи.Ссылка КАК Пользователь	                      |ИЗ	                      |	Справочник.Пользователи КАК Пользователи	                      |ГДЕ	                      |	Пользователи.Недействителен = ЛОЖЬ	                      |	И Пользователи.ПометкаУдаления = ЛОЖЬ	                      |	И Пользователи.ТекущееПодразделение = &Подразделение	                      |	                      |УПОРЯДОЧИТЬ ПО	                      |	Пользователи.Наименование");	Запрос.УстановитьПараметр("Подразделение", Подразделение);		РезультатЗапроса = Запрос.Выполнить();		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");		КонецФункции&НаСервереФункция ПечатьТестНаСервере(ПараметрыПечати)	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ПараметрыПечати.ИдентификаторКоманды);	РеквизитФормыВЗначение("Объект").Печать(ПараметрыПечати.ОбъектыНазначения, КоллекцияПечатныхФорм, ПараметрыПечати.ОбъектыНазначения, Неопределено);		Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;	КонецФункции&НаКлиентеПроцедура ПечатьТест(Команда)		Результат = ПодговитьДанныеПриЗакрытии();	Результат.Вставить("ИмяПечатнойФормы", "ПечатьРезультатовИнвентаризации");		ПараметрКоманды = Новый Массив;	ПараметрКоманды.Добавить(РаспоряжениеНаИнвентаризацию);		ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ПечатьРезультатовИнвентаризации", Ложь, Новый Структура("МассивДокументов, Параметры", ПараметрКоманды, Результат));		ТабличныйДокумент = ПечатьТестНаСервере(ПараметрыИсточника);	ТабличныйДокумент.Показать();КонецПроцедуры 