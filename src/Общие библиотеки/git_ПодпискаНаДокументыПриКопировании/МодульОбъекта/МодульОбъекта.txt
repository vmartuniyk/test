
#Область ИнтерфейсАвтоматическихТестов
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_СозданиеВозвратаНаОснованииЗаявкиСЦ");
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	ВерсияСчетчикНоменклатуры = ПолучитьВерсиюБибилиотеки("Счетчик номенклатуры");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияСчетчикНоменклатуры, "0.0.001", НСтр("ru='Для теста необходимо подключить библиотеку «Счетчик номенклатуры» версии 0.0.001 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияПодпискиНаСобытия = ПолучитьВерсиюБибилиотеки("Подписки на события");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияПодпискиНаСобытия, "3.8.15", НСтр("ru='Для теста необходимо подключить библиотеку «Подписки на события» версии 3.8.15 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияSerialLibrary = ПолучитьВерсиюБибилиотеки("SerialLibrary");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияSerialLibrary, "6.5.11", НСтр("ru='Для теста необходимо подключить библиотеку «SerialLibrary» версии 6.5.11 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияМодульДоставки = ПолучитьВерсиюБибилиотеки("МодульДоставки");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияМодульДоставки, "0.0.043", НСтр("ru='Для теста необходимо подключить библиотеку «МодульДоставки» версии 0.0.043 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияLoyaltyLibrary = ПолучитьВерсиюБибилиотеки("LoyaltyLibrary");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияLoyaltyLibrary, "2.0.42", НСтр("ru='Для теста необходимо подключить библиотеку «LoyaltyLibrary» версии 2.0.42 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияМодульПроведенияБонусыМенеджерамНачисленные = ПолучитьВерсиюБибилиотеки("МодульПроведенияБонусыМенеджерамНачисленные");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияМодульПроведенияБонусыМенеджерамНачисленные, "1.0.2", НСтр("ru='Для теста необходимо подключить библиотеку «МодульПроведенияБонусыМенеджерамНачисленные» версии 1.0.2 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ВерсияМаршрутыАдресныйКлассификатор = ПолучитьВерсиюБибилиотеки("Маршруты адресный классификатор");
	ЮнитТест.ПроверитьБольшеИлиРавно(ВерсияМаршрутыАдресныйКлассификатор, "1.2.082", НСтр("ru='Для теста необходимо подключить библиотеку «Маршруты адресный классификатор» версии 1.2.082 и больше.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Склады\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Склады».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Номенклатура».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\СерийныеНомераНоменклатуры\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Серийные номера номенклатуры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Организации\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Организации».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Партнеры\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Партнеры».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Контрагенты\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Контрагенты».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\СоглашениеСКлиентами\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Соглашение с клиентами».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\СоглашенияСПоставщками\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Соглашения с поставщиками».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Документы\ПоступлениеТоваровУслуг\СоздатьИПровестиДокумент.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания документа «Поступление товаров и услуг».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Документы\РеализацияТоваровУслуг\СоздатьИПровестиДокумент.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания документа «Реализация товаров и услуг».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания документа «Заявка сервисного центра».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура Тест_СозданиеВозвратаНаОснованииЗаявкиСЦ() Экспорт
	
	ДанныеДляТестирования = СоздатьДанныеДляТестирования();
	ДопСообщениеОшибки = НСтр("ru='#5106. При копировании документа поле ЗаявкаСервисногоЦентра не очищается.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьНеЗаполненность(ДанныеДляТестирования.ВозвратТоваровКопия.ЗаявкаСервисногоЦентра, ДопСообщениеОшибки);
	УничтожитьДанныеДляТестирования(ДанныеДляТестирования);
	
КонецПроцедуры


#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

Функция СоздатьДанныеДляТестирования()
	
	ДанныеДляТестирования = Новый Структура;
	
	Склад 					= СоздатьСклад();
	Номенклатура    		= СоздатьНоменклатуру();
	СерийныйНомер			= СоздатьСерийныйНомер(Номенклатура);
	Организация				= СоздатьОрганизацию();
	Поставщик				= СоздатьПоставщика();
	Клиент					= СоздатьКлиента();
	КонтрагентПоставщик 	= СоздатьКонтрагента(Поставщик);
	КонтрагентКлиент 		= СоздатьКонтрагента(Клиент);
	СоглашениеСКлиентом 	= СоздатьСоглашениеСКлиентами(Клиент		,КонтрагентКлиент		,Организация	,Склад);
	СоглашениеСПоставщиком 	= СоздатьСоглашенияСПоставщками(Поставщик	,КонтрагентПоставщик	,Организация	,Склад);
			
	ПоступлениеТоваров 		= СоздатьПоступлениеТоваровИУслуг(Поставщик,КонтрагентПоставщик,Организация,Склад,СоглашениеСПоставщиком,Номенклатура,СерийныйНомер);
	РеализацияТоваров  		= СоздатьРеализациюТоваровИУслуг(Клиент,КонтрагентКлиент,Организация,Склад,СоглашениеСКлиентом,Номенклатура,СерийныйНомер);
	Заявка			  		= СоздатьЗаявкуСервисногоЦентра(Клиент,Склад,Номенклатура,СерийныйНомер,РеализацияТоваров);
	ВозвратТоваров    		= СоздатьВозвратТоваровКлиентуНаОснованииЗаявки(Заявка);
	ВозвратТоваровКопия		= ВозвратТоваров.Скопировать(); 

	Попытка
	   ВозвратТоваровКопия.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	   ВозвратТоваровКопия = Документы.ВозвратТоваровОтКлиента.ПустаяСсылка();
	КонецПопытки;
	
	ДанныеДляТестирования.Вставить("Склад"					,Склад);
	ДанныеДляТестирования.Вставить("Номенклатура"			,Номенклатура);
	ДанныеДляТестирования.Вставить("СерийныйНомер"			,СерийныйНомер);
	ДанныеДляТестирования.Вставить("Организация"			,Организация);
	ДанныеДляТестирования.Вставить("Поставщик"				,Поставщик);
	ДанныеДляТестирования.Вставить("Клиент"					,Клиент);
	ДанныеДляТестирования.Вставить("КонтрагентПоставщик"	,КонтрагентПоставщик);
	ДанныеДляТестирования.Вставить("КонтрагентКлиент"		,КонтрагентКлиент);
	ДанныеДляТестирования.Вставить("СоглашениеСКлиентом"	,СоглашениеСКлиентом);
	ДанныеДляТестирования.Вставить("СоглашениеСПоставщиком"	,СоглашениеСПоставщиком);
	
	ДанныеДляТестирования.Вставить("ПоступлениеТоваров"		,ПоступлениеТоваров);
	ДанныеДляТестирования.Вставить("РеализацияТоваров"		,РеализацияТоваров);
	ДанныеДляТестирования.Вставить("Заявка"					,Заявка);
	ДанныеДляТестирования.Вставить("ВозвратТоваров"			,ВозвратТоваров);
	ДанныеДляТестирования.Вставить("ВозвратТоваровКопия"	,ВозвратТоваровКопия);
	
	Если ЗначениеЗаполнено(Заявка.ЗаказКлиента) Тогда
		ДанныеДляТестирования.Вставить("ЗаказКлиента"		,Заявка.ЗаказКлиента);
	КонецЕсли;
	
	Возврат ДанныеДляТестирования;
	
КонецФункции

Процедура УничтожитьДанныеДляТестирования(ДанныеДляТестирования)

	Если ТипЗнч(ДанныеДляТестирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
#Область ПометкаНаУдалениеДляДокументов

	Если ДанныеДляТестирования.Свойство("ВозвратТоваров") Тогда
		Если Не ДанныеДляТестирования.ВозвратТоваров.Пустая() Тогда
			ВозвратТоваров = ДанныеДляТестирования.ВозвратТоваров.ПолучитьОбъект();
			ВозвратТоваров.УстановитьПометкуУдаления(Истина);
			ВозвратТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Заявка") Тогда
		Заявка = ДанныеДляТестирования.Заявка.ПолучитьОбъект();
		
		СправочникОбъект = Заявка.ЕкспертПрийомщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
		Заявка.УстановитьПометкуУдаления(Истина);
		Заявка.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ВозвратТоваровКопия") Тогда
		ВозвратТоваровКопия = ДанныеДляТестирования.ВозвратТоваровКопия.ПолучитьОбъект();
		ВозвратТоваровКопия.УстановитьПометкуУдаления(Истина);
		ВозвратТоваровКопия.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
		
	Если ДанныеДляТестирования.Свойство("РеализацияТоваров") Тогда
		
		РеализацияТоваров = ДанныеДляТестирования.РеализацияТоваров.ПолучитьОбъект();
		РеализацияТоваров.УстановитьПометкуУдаления(Истина);
		РеализацияТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
		СправочникОбъект = РеализацияТоваров.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ЗаказКлиента") Тогда
		
		ЗаказКлиента = ДанныеДляТестирования.ЗаказКлиента.ПолучитьОбъект();
		ЗаказКлиента.УстановитьПометкуУдаления(Истина);
		ЗаказКлиента.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ПоступлениеТоваров") Тогда
		
		ПоступлениеТоваров = ДанныеДляТестирования.ПоступлениеТоваров.ПолучитьОбъект();
		ПоступлениеТоваров.УстановитьПометкуУдаления(Истина);
		ПоступлениеТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
		СправочникОбъект = ПоступлениеТоваров.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
#КонецОбласти 	
	
#Область УничтожениеСправочников

	Если ДанныеДляТестирования.Свойство("СоглашениеСКлиентом") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСКлиентом.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("СоглашениеСПоставщиком") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСПоставщиком.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("КонтрагентКлиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентКлиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("КонтрагентПоставщик") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентПоставщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Клиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Клиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Поставщик") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Поставщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ПартнерНашеПредприятие") Тогда
		СправочникОбъект = ДанныеДляТестирования.ПартнерНашеПредприятие.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("КонтрагентНашеПредприятие") Тогда
		СправочникОбъект = ДанныеДляТестирования.КонтрагентНашеПредприятие.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Организация") Тогда
		
		НаборЗаписей = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ДанныеДляТестирования.Организация);
		НаборЗаписей.Записать();
	
		СправочникОбъект = ДанныеДляТестирования.Организация.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("СерийныйНомер") Тогда
		СправочникОбъект = ДанныеДляТестирования.СерийныйНомер.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Номенклатура") Тогда
		СправочникОбъект = ДанныеДляТестирования.Номенклатура.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Склад") Тогда
		СправочникОбъект = ДанныеДляТестирования.Склад.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
#КонецОбласти

#Область УничтожениеДокументов

	Если ДанныеДляТестирования.Свойство("ВозвратТоваров") Тогда
		Если Не ДанныеДляТестирования.ВозвратТоваров.Пустая() Тогда
			ВозвратТоваров.ОбменДанными.Загрузка = Истина;
			ВозвратТоваров.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Заявка") Тогда
		Заявка.ОбменДанными.Загрузка = Истина;
		Заявка.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("РеализацияТоваров") Тогда
		РеализацияТоваров.ОбменДанными.Загрузка = Истина;
		РеализацияТоваров.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ЗаказКлиента") Тогда
		ЗаказКлиента.ОбменДанными.Загрузка = Истина;
		ЗаказКлиента.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ВозвратТоваровКопия") Тогда
		ВозвратТоваровКопия.ОбменДанными.Загрузка = Истина;
		ВозвратТоваровКопия.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ПоступлениеТоваров") Тогда
		ПоступлениеТоваров.ОбменДанными.Загрузка = Истина;
		ПоступлениеТоваров.Удалить();
	КонецЕсли;

#КонецОбласти 

КонецПроцедуры // УничтожитьДанныеДляТестирования()
 

#Область Справочники

Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

Функция СоздатьНоменклатуру()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				Наименование);   
	ПараметрыЗаполнения.Вставить("ИспользоватьУпаковки",		Ложь);
	ПараметрыЗаполнения.Вставить("ИспользоватьСерийныеНомера",	Истина);
	
	Бибилиотека = ПолучитьБиблиотекуНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

Функция СоздатьСерийныйНомер(НоменклатураСсылка)

	Код = ПреобразоватьУникальныйИдентификаторВНаименование("СерийныйНомер");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",	НоменклатураСсылка);   
	ПараметрыЗаполнения.Вставить("Код",			Код);
	
	Бибилиотека = ПолучитьБиблиотекуСерийныеНомера();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСерийныйНомер()

Функция СоздатьОрганизацию()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Организация");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуОрганизации();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьОрганизацию()

Функция СоздатьПоставщика()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Поставщик");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Поставщик", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКлиента()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Клиент");
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	Колонки = КонтактнаяИнформация.Колонки;
	Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Строка = КонтактнаяИнформация.Добавить();
	Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	Строка.Представление = "0971254825";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Клиент", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКонтрагента(Партнер)

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Контрагент");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуКонтаргенты();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьКонтрагента()

Функция СоздатьСоглашениеСКлиентами(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с клиентом");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашениеСКлиентами();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

Функция СоздатьСоглашенияСПоставщками(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с поставщиком");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашенияСПоставщками();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

#КонецОбласти

#Область Документы

Функция ИнициализироватьТаблицуТоваров()

	Товары = Новый ТаблицаЗначений;
	
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Товары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Товары;

КонецФункции // ИнициализироватьТаблицуТоваров()

Функция ИнициализироватьТаблицуСерийныхНомеров()

	СерийныеНомера = Новый ТаблицаЗначений;
	СерийныеНомера.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомераНоменклатуры"));
	СерийныеНомера.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат СерийныеНомера;

КонецФункции // ИнициализироватьТаблицуСерийныхНомеров()

Функция СоздатьПоступлениеТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
		
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	ПараметрыЗаполнения.Вставить("Товары", Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера", СерийныеНомера);
	
	Бибилиотека = ПолучитьБиблиотекуПоступлениеТоваров();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьРеализациюТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
	
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	ПараметрыЗаполнения.Вставить("Товары", Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера", СерийныеНомера);
	ПараметрыЗаполнения.Вставить("Статус", Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	Бибилиотека = ПолучитьБиблиотекуРеализацияТоваровИУслуг();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьЗаявкуСервисногоЦентра(Партнер, Склад, Номенклатура, СерийныйНомер, ОбъектОснование)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаЗначений.Колонки;
	Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ЭтапРаботы", Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы"));
	Колонки.Добавить("ПартнерАСЦ", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Колонки.Добавить("МесторасположениеФактическое", Новый ОписаниеТипов("СправочникСсылка.ГНАТ_МесторасположениеВСервисе"));
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата();
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято;
	НоваяСтрока.Комментарий 	= "Тестовый комментарий";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВидОперации", Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ГНАТ);
	ПараметрыЗаполнения.Вставить("ЗаказчикРемонта", Партнер);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Номенклатура", Номенклатура);
	ПараметрыЗаполнения.Вставить("СерийныйНомер", СерийныйНомер);
	ПараметрыЗаполнения.Вставить("РеализацияТоваровУслуг", ?(ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ГНАТ_ЗаявкаСервисногоЦентра"),ОбъектОснование.РеализацияТоваровУслуг,ОбъектОснование));
	ПараметрыЗаполнения.Вставить("ОбъектОснование", ОбъектОснование);
	ПараметрыЗаполнения.Вставить("ХодРабот", ТаблицаЗначений);
	
	Бибилиотека = ПолучитьБиблиотекуЗаявкаСервисногоЦентра();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(ПараметрыЗаполнения);
	
КонецФункции // СоздатьЗаявкуСервисногоЦентра()

Функция СоздатьВозвратТоваровКлиентуНаОснованииЗаявки(Заявка)
	
	РезультатЗаполнения = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ЗаполнитьРеквизитыВозвратаНаОснованииЗаявки(Заявка);
	
	Если ТипЗнч(РезультатЗаполнения) <> Тип("Структура") Тогда
		Возврат Документы.ВозвратТоваровОтКлиента.ПустаяСсылка();
	КонецЕсли;

	Документ 		= Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	Документ.Дата 	= ТекущаяДатаСеанса();
	
	ЗаполнитьЗначенияСвойств(Документ, РезультатЗаполнения.Объект);
	
	НоваяСтрокаТовары = Документ.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, РезультатЗаполнения.Товары);
	
	Если РезультатЗаполнения.Свойство("СерийныеНомера") Тогда
		НоваяСтрокаСерийныеНомера = Документ.СерийныеНомера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийныеНомера, РезультатЗаполнения.СерийныеНомера);
	КонецЕсли;
	
	Попытка
	    Документ.Записать(РежимЗаписиДокумента.Проведение);	
		Возврат Документ;
	Исключение
		Возврат Документы.ВозвратТоваровОтКлиента.ПустаяСсылка();
	КонецПопытки;	
	
КонецФункции // СоздатьВозвратТоваровКлиентуНаОснованииЗаявки()
 
Функция СоздатьПриходныйОрдерНаТоварыНаОснованииВозвратТоваровКлиенту(ВозвратТоваров, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Склад 							= ВозвратТоваров.Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
		
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация"		,ВозвратТоваров.Организация);
	ПараметрыЗаполнения.Вставить("Склад"			,ВозвратТоваров.Склад);
	ПараметрыЗаполнения.Вставить("Товары"			,Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера"	,СерийныеНомера);
	ПараметрыЗаполнения.Вставить("Основание"		,ВозвратТоваров);
	
	Бибилиотека = ПолучитьБиблиотекуПриходныйОрдерНаТовары();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

#КонецОбласти 

#Область Библиотеки

Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

Функция ПолучитьБиблиотекуСерийныеНомера()
	ПутьКБиблиотеке = "\tests\Справочники\СерийныеНомераНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСерийныеНомера()

Функция ПолучитьБиблиотекуОрганизации()
	ПутьКБиблиотеке = "\tests\Справочники\Организации\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуОрганизации()

Функция ПолучитьБиблиотекуПартнеры()
	ПутьКБиблиотеке = "\tests\Справочники\Партнеры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПартнеры()

Функция ПолучитьБиблиотекуКонтаргенты()
	ПутьКБиблиотеке = "\tests\Справочники\Контрагенты\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуКонтаргенты()

Функция ПолучитьБиблиотекуСоглашениеСКлиентами()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашениеСКлиентами\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашениеСКлиентами()

Функция ПолучитьБиблиотекуСоглашенияСПоставщками()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашенияСПоставщками\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашенияСПоставщками()

Функция ПолучитьБиблиотекуПоступлениеТоваров()
	ПутьКБиблиотеке = "\tests\Документы\ПоступлениеТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПоступлениеТоваров()

Функция ПолучитьБиблиотекуПриходныйОрдерНаТовары()
	ПутьКБиблиотеке = "\tests\Документы\ПриходныйОрдерНаТовары\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПоступлениеТоваров()

Функция ПолучитьБиблиотекуРеализацияТоваровИУслуг()
	ПутьКБиблиотеке = "\tests\Документы\РеализацияТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуРеализацияТоваровИУслуг()

Функция ПолучитьБиблиотекуЗаявкаСервисногоЦентра()
	ПутьКБиблиотеке = "\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуЗаявкаСервисногоЦентра()

#КонецОбласти 

#КонецОбласти


#КонецОбласти
	

#Область ПрограммныйИнтерфейс

Процедура ДокументыПриКопировании(Источник, ОбъектКопирования) Экспорт 
	
	//http://r.ktc-ua.com/issues/5106
	Если		ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")	Тогда	ВозвратТоваровОтКлиентаПриКопировании(Источник, ОбъектКопирования);
	ИначеЕсли	ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг")		Тогда	РеализацияТоваровУслугПриКопировании(Источник, ОбъектКопирования);
	ИначеЕсли	ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику")	Тогда	ВозвратТоваровПоставщикуПриКопировании(Источник, ОбъектКопирования);
	ИначеЕсли	ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента")				Тогда	ЗаказКлиентаПриКопировании(Источник, ОбъектКопирования);
	КонецЕсли;	
	//#5106
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//http://r.ktc-ua.com/issues/5106
Процедура ВозвратТоваровОтКлиентаПриКопировании(Источник, ОбъектКопирования)
	Источник.ЗаявкаСервисногоЦентра = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
КонецПроцедуры //ВозвратТоваровОтКлиентаПриКопировании()

Процедура РеализацияТоваровУслугПриКопировании(Источник, ОбъектКопирования)
	Источник.ЗаявкаСервисногоЦентра			=	Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
	Источник.ВидПодчиненногоДокументаГНАТ	=	Перечисления.ГНАТ_ВидыПодчиненныхДокументов.ПустаяСсылка(); 
КонецПроцедуры //РеализацияТоваровУслугПриКопировании()

Процедура ВозвратТоваровПоставщикуПриКопировании(Источник, ОбъектКопирования)
	Источник.ЗаявкаСервисногоЦентра = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
КонецПроцедуры //ВозвратТоваровПоставщикуПриКопировании()

Процедура ЗаказКлиентаПриКопировании(Источник, ОбъектКопирования)
	Источник.ЗаявкаСервисногоЦентра			=	Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
	Источник.ВидПодчиненногоДокументаГНАТ	=	Перечисления.ГНАТ_ВидыПодчиненныхДокументов.ПустаяСсылка(); 
КонецПроцедуры //ЗаказКлиентаПриКопировании()
//#5106
#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Документы при копировании");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

	
    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Документы при копировании [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Документы при копировании [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "РСDDP");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

