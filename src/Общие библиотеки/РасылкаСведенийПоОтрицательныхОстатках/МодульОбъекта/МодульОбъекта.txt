
#Область ИнтерфейсАвтоматическихТестов
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;	
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти


#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРассылкаПоОстаткам() Экспорт

	Тема = НСтр("ru='Рассылка информации по отрицательным остаткам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Тело = СформироватьТелоПисьма();
	
	Если Тело = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кому = ПолучитьМассивАдресатов();
	                
	Если ТипЗнч(Кому) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если Кому.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(Тема, Тело, Кому, , , , , , "HTML");
	ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);

КонецПроцедуры
 

#КонецОбласти


#Область ОбработчикиСобытий

Функция СформироватьТелоПисьма()

	ТекстПисьма = "";
	                                                 
	ТекстПисьма = ТекстПисьма + "<h3>Список товаров к передаче</h3>";
	
	ТаблицаТоваров = ПолучитьТаблицуТоваровКПередаче();	
	Если ТаблицаТоваров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстПисьма = ТекстПисьма + ТаблицаТоваров;
	ТекстПисьма = ТекстПисьма + "<br />";
	
	ТекстПисьма = ТекстПисьма + "<h3>Отрицательные остатки</h3>";
	
	ТаблицаОтрицательныхОстатков = ПолучитьТаблицуОтрицательныхОстатков();
	Если ТаблицаОтрицательныхОстатков = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстПисьма = ТекстПисьма + ПолучитьТаблицуОтрицательныхОстатков();
	ТекстПисьма = ТекстПисьма + "<br />";
	
	Возврат ТекстПисьма;

КонецФункции // СформироватьТекстЗаголовкаПисьма()

Функция ПолучитьМассивАдресатов()

	СписокАбонентов = Новый Массив;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("РасылкаСведенийПоОтрицательныхОстатках", , , "РасылкаСведенийПоОтрицательныхОстатках");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("СписокАдресовРассылки") Тогда
			СписокАдресовРассылки = Настройки.СписокАдресовРассылки;
			Для каждого СтрокаТаблицы Из СписокАдресовРассылки Цикл
				СписокАбонентов.Добавить(Новый Структура("Адрес, Представление", СтрокаТаблицы.АдресПочты, СтрокаТаблицы.Представление));	
			КонецЦикла;
			Возврат СписокАбонентов;
		КонецЕсли;
	КонецЕсли;
	                   
	Возврат Неопределено;

КонецФункции // ПолучитьмассивАдресатов()
 


Функция ПолучитьТаблицуТоваровКПередаче()

	СхемаКомпоновкиДанных 	= ПолучитьМакет("ТоварыКПередаче");
	ДокументРезультат		= Новый ТабличныйДокумент;
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Не удалось сформировать отчет по товарам к передаче.'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтрокаXML = СериализироватьДокументВXML(ДокументРезультат);
	СхемаXSL  = ПолучитьСхемуДанныхТоварыКПередаче();
			
	Возврат XML2HTML(СтрокаXML, СхемаXSL);

КонецФункции // ПолучитьТаблицуТоваровКПередаче()

Функция ПолучитьСхемуДанныхТоварыКПередаче()

	ТекстСхемы = "
	|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:a=""http://v8.1c.ru/8.2/data/spreadsheet"" xmlns:v8=""http://v8.1c.ru/8.1/data/core"">

	|	 <xsl:output method=""html"" encoding=""utf-8""/>

	|	 <xsl:template match=""/"" xml:space=""preserve"">

	|		<table border=""1"" style='border-collapse: collapse; border:1px solid white;'>

	|		<xsl:for-each select=""a:SpreadsheetDocument/a:rowsItem""> 
	|			<xsl:if test=""position() = 1"">
	|				<tr style='background: #9BF28D;'>
	|					<xsl:for-each select=""a:row/a:c/a:c/a:tl/v8:item/v8:content"">
	|						<td>
	|							<xsl:value-of select="".""/>
	|						</td>
	|					</xsl:for-each>
	|				</tr>
	|			</xsl:if>
	|			
	|			
	|		</xsl:for-each>

	|		<xsl:for-each select=""a:SpreadsheetDocument/a:rowsItem""> 
	|			<xsl:if test=""position() != 1"">
	|				<tr style='background: #F2CECE;'>
	|					<xsl:for-each select=""a:row/a:c/a:c/a:tl/v8:item/v8:content"">
	|						<td>
	|							<xsl:value-of select="".""/>
	|						</td>
	|					</xsl:for-each>
	|				</tr>
	|			</xsl:if>
	|			
	|			
	|		</xsl:for-each>

	|		</table>

	|	 </xsl:template>

	|</xsl:stylesheet>";

	Возврат ТекстСхемы;

КонецФункции // ПолучитьСхемуДанныхТоварыКПередаче()
 

Функция ПолучитьТаблицуОтрицательныхОстатков()

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаОтрицательныеОстатки();
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтрокаXML = СериализироватьДокументВXML(РезультатЗапроса);
	СхемаXSL  = ПолучитьСхемуОтрицательныхОстатков();
	
	Возврат XML2HTML(СтрокаXML, СхемаXSL);

КонецФункции // ПолучитьТаблицуОтрицательныхОстатков()

Функция ТекстЗапросаОтрицательныеОстатки()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Себестоимость.РазделУчета)				КАК РазделУчета,
		|	ПРЕДСТАВЛЕНИЕ(Себестоимость.ВидЗапасов) 				КАК ВидЗапасов,
		|	ПРЕДСТАВЛЕНИЕ(Себестоимость.Организация) 				КАК Организация,
		|	СУММА(Себестоимость.КоличествоОстаток) 					КАК Количество,
		|	ПРЕДСТАВЛЕНИЕ(АналитикаНоменклатуры.Номенклатура) 		КАК Номенклатура,
		|	ПРЕДСТАВЛЕНИЕ(АналитикаНоменклатуры.Характеристика) 	КАК Характеристика,
		|	ПРЕДСТАВЛЕНИЕ(АналитикаНоменклатуры.Склад)	 			КАК Склад
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки КАК Себестоимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
		|		ПО Себестоимость.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
		|ГДЕ
		|	Себестоимость.КоличествоОстаток < 0
		|
		|СГРУППИРОВАТЬ ПО
		|	АналитикаНоменклатуры.Характеристика,
		|	Себестоимость.РазделУчета,
		|	Себестоимость.ВидЗапасов,
		|	Себестоимость.Организация,
		|	АналитикаНоменклатуры.Номенклатура,
		|	АналитикаНоменклатуры.Склад";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаОтрицательныеОстатки()
 
Функция ПолучитьСхемуОтрицательныхОстатков()

	ТекстСхемы = "
	|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:a=""http://v8.1c.ru/8.1/data/core"">

	|	 <xsl:output method=""html"" encoding=""utf-8""/>

	|	 <xsl:template match=""/"" xml:space=""preserve"">

	|		<table border=""1"" style='border-collapse: collapse; border:1px solid white;'>

	|		<tr style='background: #9BF28D;'>
	|		<xsl:for-each select=""a:ValueTable/a:column"">
	|			<td>
	|				<xsl:for-each select=""a:Title"">
	|					<xsl:value-of select="".""/>
	|				</xsl:for-each>
	|			</td> 
	|		</xsl:for-each>
	|		</tr>

	|		<xsl:for-each select=""a:ValueTable/a:row"">
	|			<tr style='background: #9BF28D;'>
	|				<xsl:for-each select=""a:Value"">
	|					<td>
	|						<xsl:value-of select="".""/>
	|					</td>
	|				</xsl:for-each> 
	|			</tr>
	|		</xsl:for-each>

	|		</table>

	|	 </xsl:template>

	|</xsl:stylesheet>";
	
	Возврат ТекстСхемы;

КонецФункции // ПолучитьСхемуОтрицательныхОстатков()
 



Функция СериализироватьДокументВXML(Документ)
	ДокументXML			 = Новый ЗаписьXML;
	ДокументXML.УстановитьСтроку();	
	СериализаторXDTO.ЗаписатьXML(ДокументXML, Документ);	
	Возврат ДокументXML.Закрыть();
КонецФункции // СериализироватьДокументВXML()
 

Функция XML2HTML(СтрокаXML, СхемаXSL)
	
	Преобразование = Новый ПреобразованиеXSL;
	Преобразование.ЗагрузитьИзСтроки(СхемаXSL);
	
	Попытка
		СтрокаHTML = Преобразование.ПреобразоватьИзСтроки(СтрокаXML)
	Исключение
		ВызватьИсключение ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат СтрокаHTML;
	
КонецФункции // XML2HTML()
 

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "0.0.0067";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рег. расылка сведений по отрицательным остатках");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рег. расылка сведений по отрицательным остатках [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Рег. расылка сведений по отрицательным остатках [" + Версия + "]", "МРМ", "ОткрытиеФормы", Ложь, "РСПОО");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти