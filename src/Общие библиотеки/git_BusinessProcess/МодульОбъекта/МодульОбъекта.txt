
#Область БизнесПроцесЗачислениеПоставщиком

Процедура БизнесПроцесЗачислениеПоставщиком(ДокументОбъектЗСЦ,Знач ПараметрыДанных, СтруктураОшибок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	НачатьТранзакцию();	
	
	Комментарий = НСтр("ru = 'По супер - кнопке «Зачисление поставщиком».'");	
	
	ПараметрыЭтапа = Новый Структура();
	ПараметрыЭтапа.Вставить("Период"		,ТекущаяДата()-3);
	ПараметрыЭтапа.Вставить("Комментарий"	,Комментарий);
	ПараметрыЭтапа.Вставить("ЭтапРаботы"	,Справочники.ГНАТ_ЭтапыРаботы.ЗачисленыСредстваПоставщиком);
	ПараметрыЭтапа.Вставить("Ответственный"	,ПараметрыСеанса.ТекущийПользователь);
	ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъектЗСЦ,ПараметрыЭтапа);
	
	ПараметрыЭтапа.Период 		= ТекущаяДата()-2; 
	ПараметрыЭтапа.ЭтапРаботы	= Справочники.ГНАТ_ЭтапыРаботы.Выдано;
	ПараметрыДанных.Вставить("Комментарий"	,Комментарий);
	ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъектЗСЦ, ПараметрыЭтапа);
	
	Попытка
		ДокументОбъектЗСЦ.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		СтруктураОшибок.Вставить("pb_ошибка_1", НСтр("ru='Не удалось провести документ «Заявка сервисного центра»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();                                     
        Возврат;
	КонецПопытки;
	
	Склад = ПараметрыДанных.Склад;
	СоздатьРТиУ = Ложь;
	Если Не Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПроверитьНаПартнераНашегоПредприятия(ДокументОбъектЗСЦ.ЗаказчикРемонта) Тогда
		ДатаВозврата 			= ТекущаяДата() - 1;
		ВозвратТоваровОтКлиента = СоздатьВозвратТоваровОтКлиента(ДокументОбъектЗСЦ.Ссылка, СтруктураОшибок, ДатаВозврата,Комментарий);	
		Если ВозвратТоваровОтКлиента.Пустая() Тогда
			СтруктураОшибок.Вставить("pb_ошибка_2", НСтр("ru='Не удалось провести документ «Возврат товаров от клиента»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Истина Тогда
			ПриходнойОрдерНаТовары = СоздатьПриходныйОрдерНаТовары(ДокументОбъектЗСЦ.Ссылка, ВозвратТоваровОтКлиента,СтруктураОшибок);
			Если ПриходнойОрдерНаТовары.Пустая() Тогда
				СтруктураОшибок.Вставить("pb_ошибка_3", НСтр("ru='Не удалось провести документ «Приходный ордер на товары»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				ОтменитьТранзакцию();  
				Возврат;
			КонецЕсли; 	
		КонецЕсли;
	КонецЕсли;
	
	//Создание возврата товаров поставщику
	ПараметрыОбъекта = git_Templates.ПолучитьШаблонВозвратТоваровПоставщику();
	ПолучитьТаблицуТовары(ПараметрыОбъекта,ПараметрыДанных);
	ПараметрыДанных.Вставить("Товары", ПараметрыОбъекта.Товары);		
	Если Склад.ИспользоватьОрдернуюСхемуПриОтгрузке = Ложь И ПараметрыДанных.Номенклатура.ИспользоватьСерийныеНомера Тогда  
		НоваяСтрока							= ПараметрыОбъекта.СерийныеНомера.Добавить();
		НоваяСтрока.СерийныйНомер			= ДокументОбъектЗСЦ.СерийныйНомер;
		НоваяСтрока.КлючСвязиСерийныхНомеров= 1;
		ПараметрыДанных.Вставить("СерийныеНомера", ПараметрыОбъекта.СерийныеНомера);			
	КонецЕсли;

	НоваяСтрока							= ПараметрыОбъекта.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.Заказ 					= ПараметрыДанных.Договор;
	НоваяСтрока.Сумма 					= ПараметрыДанных.Цена;
	НоваяСтрока.СуммаВзаиморасчетов		= ПараметрыДанных.Цена;
	НоваяСтрока.ВалютаВзаиморасчетов	= ПараметрыДанных.Валюта;
	ПараметрыДанных.Вставить("Дата"					,ТекущаяДата());
    ПараметрыДанных.Вставить("РасшифровкаПлатежа"	,ПараметрыОбъекта.РасшифровкаПлатежа);
    ПараметрыДанных.Вставить("Подразделение"	 	,Склад.Подразделение);
	ПараметрыДанных.Вставить("Склад"	 			,ДокументОбъектЗСЦ.Склад); 
    ПараметрыДанных.Вставить("НалогообложениеНДС"	,ПараметрыДанных.Соглашение.НалогообложениеНДС);
	ПараметрыДанных.Вставить("Менеджер"		 	 	,ПараметрыСеанса.ТекущийПользователь);
	ПараметрыДанных.Вставить("ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	
	ВозвратТоваровПоставщику = git_Objcon.СоздатьДокумент("ВозвратТоваровПоставщику", ПараметрыДанных, СтруктураОшибок);
	Если СтруктураОшибок.Количество() Тогда 
		СтруктураОшибок.Вставить("pb_ошибка_4", НСтр("ru='Не удалось создать документ «Возврат товаров поставщику»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
        Возврат;
	КонецЕсли;
	
	Попытка
		ВозвратТоваровПоставщику.Статус = Перечисления.СтатусыВозвратовТоваровПоставщикам.Отгружено;
		ВозвратТоваровПоставщику.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СтруктураОшибок.Вставить("pb_ошибка_5", НСтр("ru='Не удалось провести документ «Возврат товаров поставщику»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
        Возврат;
	КонецПопытки;
		
	ЗафиксироватьТранзакцию();
	
#Область ВзаимодействияПоЗаявкеСЦ
	СформироватьВзаимодействияПоЭтапахЗСЦ(ПараметрыДанных, ДокументОбъектЗСЦ.Ссылка);
#КонецОбласти	
	
КонецПроцедуры

#КонецОбласти


#Область БизнесПроцессЗаменаПоставщиком

Процедура БизнесПроцесЗаменыТоваровПоставщиком(ДокументОбъектЗСЦ,Знач ПараметрыДанных, СтруктураОшибок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	НачатьТранзакцию();	
	Комментарий = НСтр("ru = 'По супер - кнопке «Замена поставщиком».'");	
#Область ЗаявкаСервисногоЦентра 
		
	//Добавление этапов работы в Заявку сервисного центра
	ПараметрыЭтапа = Новый Структура();
	ПараметрыЭтапа.Вставить("Период"		,ТекущаяДата()-4);
	ПараметрыЭтапа.Вставить("Комментарий"	,Комментарий);
	ПараметрыЭтапа.Вставить("ЭтапРаботы"	,Справочники.ГНАТ_ЭтапыРаботы.ФактическиПоступилаЗаменаСАСЦ);
	ПараметрыЭтапа.Вставить("Ответственный"	,ПараметрыСеанса.ТекущийПользователь);
	ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъектЗСЦ,ПараметрыЭтапа);
	
	ПараметрыЭтапа.Период 		= ТекущаяДата()-3; 
	ПараметрыЭтапа.ЭтапРаботы	= Справочники.ГНАТ_ЭтапыРаботы.Выдано;
	ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъектЗСЦ,ПараметрыЭтапа);
	ПараметрыДанных.Вставить("Комментарий"	,Комментарий);
	
	Попытка
		ДокументОбъектЗСЦ.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		СтруктураОшибок.Вставить("pb_ошибка_1", НСтр("ru='Не удалось провести документ «Заявка сервисного центра»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
        Возврат;
	КонецПопытки;
	
#КонецОбласти
	
#Область ВозвратТоваровОтКлиента	
	Склад = ПараметрыДанных.Склад;
	СоздатьРТиУ = Ложь;
	Если Не Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПроверитьНаПартнераНашегоПредприятия(ДокументОбъектЗСЦ.ЗаказчикРемонта) Тогда
		ДатаВозврата 			= ТекущаяДата() - 2;
		ВозвратТоваровОтКлиента = СоздатьВозвратТоваровОтКлиента(ДокументОбъектЗСЦ.Ссылка, СтруктураОшибок, ДатаВозврата, Комментарий);	
		Если ВозвратТоваровОтКлиента.Пустая() Тогда
			СтруктураОшибок.Вставить("pb_ошибка_2", НСтр("ru='Не удалось провести документ «Возврат товаров от клиента»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
#Область ПриходныйОрдерНаТовары
		Если ВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Истина Тогда
			ПриходнойОрдерНаТовары = СоздатьПриходныйОрдерНаТовары(ДокументОбъектЗСЦ.Ссылка, ВозвратТоваровОтКлиента,СтруктураОшибок);
			Если ПриходнойОрдерНаТовары.Пустая() Тогда
				СтруктураОшибок.Вставить("pb_ошибка_3", НСтр("ru='Не удалось провести документ «Приходный ордер на товары»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				ОтменитьТранзакцию();  
				Возврат;
			КонецЕсли; 	
		КонецЕсли;		
#КонецОбласти

		СоздатьРТиУ = Истина;
	КонецЕсли;
#КонецОбласти
	
#Область ВозвратТоваровПоставщику
	//Создание возврата товаров поставщику
	ПараметрыОбъекта = git_Templates.ПолучитьШаблонВозвратТоваровПоставщику();
	ПолучитьТаблицуТовары(ПараметрыОбъекта,ПараметрыДанных);
	ПараметрыДанных.Вставить("Товары", ПараметрыОбъекта.Товары);		
	Если Склад.ИспользоватьОрдернуюСхемуПриОтгрузке = Ложь И ПараметрыДанных.Номенклатура.ИспользоватьСерийныеНомера Тогда  
		НоваяСтрока							= ПараметрыОбъекта.СерийныеНомера.Добавить();
		НоваяСтрока.СерийныйНомер			= ДокументОбъектЗСЦ.СерийныйНомер;
		НоваяСтрока.КлючСвязиСерийныхНомеров= 1;
		ПараметрыДанных.Вставить("СерийныеНомера", ПараметрыОбъекта.СерийныеНомера);			
	КонецЕсли;

	НоваяСтрока							= ПараметрыОбъекта.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.Заказ 					= ПараметрыДанных.Договор;
	НоваяСтрока.Сумма 					= ПараметрыДанных.Цена;
	НоваяСтрока.СуммаВзаиморасчетов		= ПараметрыДанных.Цена;
	НоваяСтрока.ВалютаВзаиморасчетов	= ПараметрыДанных.Валюта;
	ПараметрыДанных.Вставить("Дата"					,ТекущаяДата());
	ПараметрыДанных.Вставить("Статус"				,Перечисления.СтатусыВозвратовТоваровПоставщикам.КОтгрузке);
    ПараметрыДанных.Вставить("РасшифровкаПлатежа"	,ПараметрыОбъекта.РасшифровкаПлатежа);
    ПараметрыДанных.Вставить("Подразделение"	 	,Склад.Подразделение);
	ПараметрыДанных.Вставить("Склад"	 			,ДокументОбъектЗСЦ.Склад); 
    ПараметрыДанных.Вставить("НалогообложениеНДС"	,ПараметрыДанных.Соглашение.НалогообложениеНДС);
	ПараметрыДанных.Вставить("Менеджер"		 	 	,ПараметрыСеанса.ТекущийПользователь);
	ПараметрыДанных.Вставить("ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	ПараметрыДанных.Вставить("Комментарий"	        ,Комментарий);
	
	ВозвратТоваровПоставщику = git_Objcon.СоздатьДокумент("ВозвратТоваровПоставщику", ПараметрыДанных, СтруктураОшибок);
	Если СтруктураОшибок.Количество() Тогда 
		СтруктураОшибок.Вставить("pb_ошибка_4", НСтр("ru='Не удалось создать документ «Возврат товаров поставщику»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
        Возврат;
	КонецЕсли;
	
	Попытка
		ВозвратТоваровПоставщику.Статус = Перечисления.СтатусыВозвратовТоваровПоставщикам.Отгружено;
		ВозвратТоваровПоставщику.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СтруктураОшибок.Вставить("pb_ошибка_5", НСтр("ru='Не удалось провести документ «Возврат товаров поставщику»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
        Возврат;
	КонецПопытки;
	
	РезультатЗаписи = ВыполнитьЗаписьЗамена(ВозвратТоваровПоставщику.Ссылка, 
												ПараметрыДанных.НоменклатураДляЗамены, 
												ПараметрыДанных.Номенклатура, 
												ПараметрыДанных.ЗаявкаСервисногоЦентра,
												ПараметрыДанных.Цена,
												ПАраметрыДанных.Валюта);
	Если РезультатЗаписи = Ложь Тогда
		СтруктураОшибок.Вставить("pb_ошибка_6", НСтр("ru='Не удалось выполнить запись по замене для документа «Возврат товаров поставщику»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
	    Возврат;
	КонецЕсли;
#КонецОбласти
		
#Область ПоступлениеТоваровИУслуг
	//Создание поступления товаров и услуг
	ПараметрыДанных.Вставить("ВалютаВзаиморасчетов", ПараметрыДанных.Валюта);
	ПараметрыДанных.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика); 
    ПараметрыДанных.Вставить("ДатаПлатежа", ТекущаяДата());
	ПараметрыДанных.Вставить("Склад", Склад); 
	ПараметрыДанных.Вставить("Номенклатура", ПараметрыДанных.НоменклатураДляЗамены); 
	ПараметрыДанных.Вставить("Комментарий" ,Комментарий);
	
	ПараметрыОбъекта = git_Templates.ПолучитьШаблонПоступлениеТоваровУслуг();
	ПолучитьТаблицуТовары(ПараметрыОбъекта,ПараметрыДанных,Склад);
	ПараметрыДанных.Вставить("Товары", ПараметрыОбъекта.Товары);		
	ПТиУ = git_Objcon.СоздатьДокумент("ПоступлениеТоваровУслуг", ПараметрыДанных, СтруктураОшибок);
	Если СтруктураОшибок.Количество() Тогда 
		СтруктураОшибок.Вставить("pb_ошибка_7", НСтр("ru='Не удалось создать документ «Поступление товаров и услуг»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
        Возврат;
	КонецЕсли;
	
	СерийныеНомера = ПараметрыОбъекта.СерийныеНомера;
	СерийныеНомера.Очистить();
	
	НоваяСтрока							 = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер			 = ПараметрыДанных.СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров = 1;
	
	Если Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Ложь И ПараметрыДанных.Номенклатура.ИспользоватьСерийныеНомера Тогда
		ПараметрыДанных.Вставить("СерийныеНомера", СерийныеНомера);
	КонецЕсли;

	
	Попытка
		ПТиУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СтруктураОшибок.Вставить("pb_ошибка_8", НСтр("ru='Не удалось провести документ «Поступление товаров и услуг»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	РезультатЗаписи = ВыполнитьЗаписьЗамена(ПТиУ.Ссылка, 
												ПараметрыДанных.НоменклатураДляЗамены, 
												ПараметрыДанных.НоменклатураДляЗамены, 
												ПараметрыДанных.ЗаявкаСервисногоЦентра,
												ПараметрыДанных.Цена,
												ПараметрыДанных.Валюта);
	Если РезультатЗаписи = Ложь Тогда
		СтруктураОшибок.Вставить("pb_ошибка_9", НСтр("ru='Не удалось выполнить запись по замене для документа «Возврат товаров поставщику»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ОтменитьТранзакцию();
	    Возврат;
	КонецЕсли;
	
#КонецОбласти

#Область ПриходныйОрдерНаТовары
	//Создание приходного ордера на товары
	Если Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Истина Тогда		
		ПараметрыДанных.Вставить("СерийныеНомера", СерийныеНомера);		
		ПараметрыДанных.Вставить("Распоряжение"		,ПТиУ.Ссылка);
		ПараметрыДанных.Вставить("Статус"			,Перечисления.СтатусыПриходныхОрдеров.Принят);
		ПараметрыДанных.Вставить("Комментарий"	    ,Комментарий);
		ДокОбъект = git_Objcon.СоздатьДокумент("ПриходныйОрдерНаТовары", ПараметрыДанных, СтруктураОшибок);
		Если СтруктураОшибок.Количество() Тогда
			СтруктураОшибок.Вставить("pb_ошибка_10", НСтр("ru='Не удалось создать документ «Приходный ордер на товары»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		    ОтменитьТранзакцию();
	        Возврат;
		КонецЕсли;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Склад = ДокОбъект.Склад;
		Исключение
			СтруктураОшибок.Вставить("pb_ошибка_11", НСтр("ru='Не удалось провести документ «Приходный ордер на товары»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		   	ОтменитьТранзакцию();
	        Возврат;
		КонецПопытки;
		
	КонецЕсли;
#КонецОбласти

#Область РеализацияТоваровИУслуг
	//Создание реализации товаров и услуг
	Если СоздатьРТиУ = Истина Тогда 
		Партнер = ВозвратТоваровОтКлиента.Партнер;
		Если ЭтоПартнер(Партнер) Тогда 
			
			//Заполнение товаров по шаблону не подходит
			ТоварыВозврата = ВозвратТоваровОтКлиента.Товары.Выгрузить();
			
			ПараметрыДанных.Вставить("ДокументОснование" ,ВозвратТоваровОтКлиента);
			ПараметрыДанных.Вставить("Статус"			 ,Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке);
			ПараметрыДанных.Вставить("Товары"			 ,ТоварыВозврата);
			ДокОбъект = git_Objcon.СоздатьДокумент("РеализацияТоваровУслуг", ПараметрыДанных, СтруктураОшибок);
			
			Если СтруктураОшибок.Количество() Тогда
				СтруктураОшибок.Вставить("pb_ошибка_12", НСтр("ru='Не удалось создать документ «Реализация товаров и услуг»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			    ОтменитьТранзакцию();
		        Возврат;
			КонецЕсли;
			
			Попытка
				Товары = ДокОбъект.Товары;
				ЗаполнитьЗначенияСвойств(Товары[0], ТоварыВозврата[0]);
				Товары[0].Номенклатура				= ПараметрыДанных.НоменклатураДляЗамены;
				Товары[0].ВидЦены					= Справочники.ВидыЦен.ПустаяСсылка();
				Товары[0].Склад						= Склад;				
				
				ДокОбъект.Дата						= ТекущаяДата();
				ДокОбъект.КТС_АдресДоставки 		= git_МодульДоставкиСервер.ПолучитьАдресДоставкиПоУмолчания(Партнер);
				ДокОбъект.Склад 					= Склад; 
				ДокОбъект.Комментарий 				= Комментарий;
				ДокОбъект.ЗаявкаСервисногоЦентра	= ПараметрыДанных.ЗаявкаСервисногоЦентра;
				ДокОбъект.Менеджер					= Партнер.ОсновнойМенеджер;

				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтруктураОшибок.Вставить("pb_ошибка_13", НСтр("ru='Не удалось провести документ «Реализация товаров и услуг»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			   	ОтменитьТранзакцию();
		        Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
#КонецОбласти

ЗафиксироватьТранзакцию();

#Область ВзаимодействияПоЗаявкеСЦ
СформироватьВзаимодействияПоЭтапахЗСЦ(ПараметрыДанных, ДокументОбъектЗСЦ.Ссылка);
#КонецОбласти

КонецПроцедуры

Функция ЭтоПартнер(ЗаказчикРемонта)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ГДЕ
		|	ПартнерыСегмента.Сегмент = &Сегмент
		|И 	ПартнерыСегмента.Партнер = &Партнер";
	Запрос.УстановитьПараметр("Партнер", ЗаказчикРемонта);
	//Партнеры
	Запрос.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")));
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции // ЭтоПартнер()


// Записывает информацию о замене номенклатуры в спец. регистр «Замена_СогласованиеНоменклатуры»
//
// Параметры:
//  Документ 						- ДокументСсылка.ПоступлениеТоваровУслуг,
//			   						  ДокументСсылка.ВозвратТоваровПоставщику - документ по которому нужно провести запись.
//  Номенклатура 					- СправочникСсылка.Номенклатура - номенклатура из помступления товаров.
//  НоменклатураВозвратаПоставщику  - СправочникСсылка.Номенклатура - номенклатура из возврата товаров поставщику.
//  ЗаявкаСервисногоЦентра			- ДокументСсылка.ГНАТ_ЗаявкаСервисногоЦентра - ЗСЦ по котором выполняли замену.
//	Цена							- Число - цена которая была записана в документе.
//  Валюта							- СправочникСсылка.Валюты - валюта в которой была записана цена.
//
// Возвращаемое значение:
//  Булево - Истина, если запись провелась успешно, Ложь, если не удалось выполнить запись в регистр.
//
Функция ВыполнитьЗаписьЗамена(Документ, Номенклатура, НоменклатураВозвратаПоставщику, ЗаявкаСервисногоЦентра, Цена, Валюта)

	НаборЗаписей = РегистрыСведений.Замена_СогласованиеНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.ЗаявкаСервисногоЦентра.Установить(ЗаявкаСервисногоЦентра);
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Номенклатура 					= Номенклатура;
	Запись.ЗаявкаСервисногоЦентра			= ЗаявкаСервисногоЦентра;
	Запись.Документ 						= Документ;
	Запись.Цена								= Цена;
	Запись.Валюта							= Валюта;
	Запись.НоменклатураВозвратаПоставщику   = НоменклатураВозвратаПоставщику;
	
	Попытка
		НаборЗаписей.Записать();    	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	    Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ВыполнитьЗаписьЗамена()

Процедура ПолучитьТаблицуТовары(ПараметрыОбъекта,ПараметрыДанных,Склад=Неопределено)

	НоваяСтрока							= ПараметрыОбъекта.Товары.Добавить();
	НоваяСтрока.Номенклатура			= ПараметрыДанных.Номенклатура;
	НоваяСтрока.КоличествоУпаковок		= 1;
	НоваяСтрока.Количество				= 1;
	НоваяСтрока.Цена					= ПараметрыДанных.Цена;
	НоваяСтрока.Сумма					= ПараметрыДанных.Цена;
	НоваяСтрока.СтавкаНДС 	 			= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаСНДС				= ПараметрыДанных.Цена;
	НоваяСтрока.КлючСвязиСерийныхНомеров= 1;
	Если Склад <> Неопределено Тогда 
		НоваяСтрока.Склад= Склад;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументаSMS(ДокументСообщениеSMS, Взаимодействие)

	ДокументСообщениеSMS.Дата = ТекущаяДатаСеанса();
	
	ДокументСообщениеSMS.Автор 			= ПараметрыСеанса.ТекущийПользователь;
	ДокументСообщениеSMS.Важность 		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ДокументСообщениеSMS.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	ДокументСообщениеSMS.ТекстСообщения = Взаимодействие.ТекстСМССообщения;
	ДокументСообщениеSMS.Состояние 		= Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
		                     
    НоваяСтрока 						= ДокументСообщениеSMS.Адресаты.Добавить();
	НоваяСтрока.Контакт 				= Взаимодействие.Контакт;
	
	СтрокаНомерТелефона					= СокрЛП(Взаимодействие.НомерТелефона);
	НомерТелефона 						= Прав(СтрокаНомерТелефона,7);
	КодОператора 						= Прав(Сред(СтрокаНомерТелефона,1, СтрДлина(СтрокаНомерТелефона)- 7),3);
	КодСтраны							= "+38";
	
	НоваяСтрока.КакСвязаться 			= КодСтраны+"("+КодОператора+")"+НомерТелефона;
	НоваяСтрока.НомерДляОтправки 		= КодСтраны+КодОператора+НомерТелефона;
	НоваяСтрока.ПредставлениеКонтакта 	= Взаимодействие.КонтактНаименование;
	НоваяСтрока.СостояниеСообщения		= Перечисления.СостоянияСообщенияSMS.Исходящее;
	
КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

Процедура ЗаписатьВзаимодействиеВРегистр(ДокументВзаимодействие,ЗаявкаСервисногоЦентра)

	Период = ТекущаяДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ГНАТ_ВзаимодействияПоЗаявкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Заявка.Установить(ЗаявкаСервисногоЦентра);
 	НаборЗаписей.Отбор.Взаимодействие.Установить(ДокументВзаимодействие);
	
	Запись 					= НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.Заявка 			= ЗаявкаСервисногоЦентра;
	Запись.Взаимодействие 	= ДокументВзаимодействие;
	Запись.Количество		= 1;
	НаборЗаписей.Записать();    			
КонецПроцедуры // ЗаписатьВзаимодействиеВРегистр()


Функция ПолучитьПараметрыПисьма(ПриведенныйПочтовыйАдрес, Взаимодействие)
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдрес) Тогда
		ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдрес);
	Иначе
		ШаблонОшибки = НСтр("ru='По этапу «%ЭтапРаботы%» не заполнено поле получателя.'");
		ТекстОшибки  = СтрЗаменить(ШаблонОшибки,"%ЭтапРаботы%",Взаимодействие.ЭтапРаботы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Взаимодействие.ТемаЭП) Тогда
		ПараметрыПисьма.Вставить("Тема", Взаимодействие.ТемаЭП);
	Иначе
		ШаблонОшибки = НСтр("ru='По этапу «%ЭтапРаботы%» не заполнено поле тема сообщения.'");
		ТекстОшибки  = СтрЗаменить(ШаблонОшибки,"%ЭтапРаботы%",Взаимодействие.ЭтапРаботы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Взаимодействие.ТекстЭП) Тогда
		ПараметрыПисьма.Вставить("Тело", Взаимодействие.ТекстЭП);
	Иначе
		ШаблонОшибки = НСтр("ru='По этапу «%ЭтапРаботы%» не заполнено поле текст сообщения.'");
		ТекстОшибки  = СтрЗаменить(ШаблонОшибки,"%ЭтапРаботы%",Взаимодействие.ЭтапРаботы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Взаимодействие.ПрофильОтправитель) Тогда
		ШаблонОшибки = НСтр("ru='По этапу «%ЭтапРаботы%» не заполнено поле профиля отправки.'");
		ТекстОшибки  = СтрЗаменить(ШаблонОшибки,"%ЭтапРаботы%",Взаимодействие.ЭтапРаботы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Процедура ЗаполнитьРеквизитыДокументаЭП(ЭлектронноеПисьмоИсходящее, Взаимодействие, ПолучателиПисьма)

	ЭлектронноеПисьмоИсходящее.Дата 						= ТекущаяДатаСеанса();	
	ЭлектронноеПисьмоИсходящее.Автор 						= ПараметрыСеанса.ТекущийПользователь;
	ЭлектронноеПисьмоИсходящее.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	ЭлектронноеПисьмоИсходящее.Ответственный 				= ПараметрыСеанса.ТекущийПользователь;
	ЭлектронноеПисьмоИсходящее.Тема 						= Взаимодействие.ТемаЭП; 
	ЭлектронноеПисьмоИсходящее.Текст 						= Взаимодействие.ТекстЭП;
	ЭлектронноеПисьмоИсходящее.ОтправительПредставление 	= Взаимодействие.ПрофильОтправитель.Наименование; 
	ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма		= Взаимодействие.Кому;
	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись				= Взаимодействие.ПрофильОтправитель;
	
	Для каждого СтрокаТаблицы Из ПолучателиПисьма Цикл
	    НоваяСтрока = ЭлектронноеПисьмоИсходящее.ПолучателиПисьма.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьРеквизитыДокумента()

#КонецОбласти


#Область ВзаимодействияПоЭтапах

Процедура СформироватьВзаимодействияПоЭтапахЗСЦ(ПараметрыДанных, ЗСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПараметрыДанных) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	//Взаимодействия
	Если ПараметрыДанных.Свойство("ТЧВзаимодействия") Тогда 
		
		ШаблонСообщенияЭП 	= НСтр("ru='Не удалось отправить эл.письмо по этапу работы «%ЭтапРаботы%». %ИнформацияОбОшибке%'");
		ШаблонСообщенияSMS	= НСтр("ru='Не удалось создать документ «SMS сообщение» по этапу работы «%ЭтапРаботы%». %ИнформацияОбОшибке%'");

		Для каждого Взаимодействие Из ПараметрыДанных.ТЧВзаимодействия Цикл
			//SMS cообщение
			Если Взаимодействие.ОтправлятьСМС = Истина Тогда 
				Попытка
					СообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
					ЗаполнитьРеквизитыДокументаSMS(СообщениеSMS,Взаимодействие);
					СообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
					Взаимодействия.ПриЗаписиВзаимодействияИзФормы(СообщениеSMS, Неопределено);
					СообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
					ЗаписатьВзаимодействиеВРегистр(СообщениеSMS.Ссылка, ЗСЦ);
				Исключение
					ТекстОшибки = СтрЗаменить(ШаблонСообщенияSMS	,"%ЭтапРаботы%"			,Взаимодействие.ЭтапРаботы);
					ТекстОшибки = СтрЗаменить(ТекстОшибки			,"%ИнформацияОбОшибке%"	,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;	

			//Email
			Если Взаимодействие.ОтправлятьЭП = Истина Или  Взаимодействие.ОтправлятьEmailПоЭтапу = Истина Тогда 
				Попытка
					Если Взаимодействие.ОтправлятьЭП = Истина И  Взаимодействие.ОтправлятьEmailПоЭтапу = Истина Тогда 
						Кому = Взаимодействие.ЗаказчикEmail+";"+Взаимодействие.Кому;
					ИначеЕсли Взаимодействие.ОтправлятьЭП = Истина Тогда 				
						Кому = Взаимодействие.ЗаказчикEmail;
					ИначеЕсли Взаимодействие.ОтправлятьEmailПоЭтапу = Истина Тогда 
						Кому = Взаимодействие.Кому;
					Иначе 
						Кому = " ";
					КонецЕсли;
					
					ПриведенныйПочтовыйАдрес	= ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
					ПараметрыПисьма 			= ПолучитьПараметрыПисьма(ПриведенныйПочтовыйАдрес,Взаимодействие);
					Если ПараметрыПисьма=Неопределено Тогда
						ТекстОшибки = СтрЗаменить(ШаблонСообщенияЭП	,"%ЭтапРаботы%"			,Взаимодействие.ЭтапРаботы);
						ТекстОшибки = СтрЗаменить(ТекстОшибки		,"%ИнформацияОбОшибке%"	,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						Продолжить;	
					КонецЕсли;
					ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(Взаимодействие.ПрофильОтправитель,ПараметрыПисьма);
					ЭлектронноеПисьмоИсходящее = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
					ЗаполнитьРеквизитыДокументаЭП(ЭлектронноеПисьмоИсходящее,Взаимодействие,ПараметрыПисьма.Кому);
					ЭлектронноеПисьмоИсходящее.Записать(РежимЗаписиДокумента.Запись);
					Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ЭлектронноеПисьмоИсходящее, ЭлектронноеПисьмоИсходящее.Предмет);
					ЭлектронноеПисьмоИсходящее.Записать(РежимЗаписиДокумента.Запись);
					ЗаписатьВзаимодействиеВРегистр(ЭлектронноеПисьмоИсходящее.Ссылка,ЗСЦ);
				Исключение
					ТекстОшибки = СтрЗаменить(ШаблонСообщенияЭП	,"%ЭтапРаботы%"			,Взаимодействие.ЭтапРаботы);
					ТекстОшибки = СтрЗаменить(ТекстОшибки		,"%ИнформацияОбОшибке%"	,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;			
  		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры// СформироватьВзаимодействияПоЭтапахЗСЦ()

Процедура СформироватьВзаимодействия(ЭтаФорма, ЗаявкаСервисногоЦентра, СписокЭтапыРаботы) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭтаФорма)<>Тип("УправляемаяФорма") Тогда 
		ВызватьИсключение НСтр("ru='Входные данные имеют не верный тип. Обратитесь в тех. поддержку!'");
	КонецЕсли;
	
	Если ТипЗнч(СписокЭтапыРаботы)<>Тип("СписокЗначений") Тогда 
		ВызватьИсключение НСтр("ru='Не верный тип списка добавляемых этапов. Обратитесь в тех. поддержку!'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаявкаСервисногоЦентра) Тогда 
		ВызватьИсключение НСтр("ru='Не найденная ссылка на документ заявки СЦ. Обратитесь в тех. поддержку!'");
	КонецЕсли;
		
	СоздатьДополнительныеРеквизитыФормыВзаимодействия(ЭтаФорма);	
	СоздатьЭлементыФормыВзаимодействия(ЭтаФорма);
	СоздатьУсловноеОформленияФормыВзаимодействия(ЭтаФорма);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст	= ПолучитьТекстЗапросаВзаимодействия();
	ЗаказчикРемонта = ЗаявкаСервисногоЦентра.ЗаказчикРемонта;
	Запрос.УстановитьПараметр("НомерТелефона"		, ЗаявкаСервисногоЦентра.НомерТелефона);
	Запрос.УстановитьПараметр("Партнер"				, ЗаказчикРемонта);
	Запрос.УстановитьПараметр("КонтактНаименование"	, ЗаказчикРемонта.Наименование);	
	Запрос.УстановитьПараметр("СписокЭтапыРаботы"	, СписокЭтапыРаботы);
	//Партнеры опт. отдела
	УИ 		= Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85");
	Сегмент = Справочники.СегментыПартнеров.ПолучитьСсылку(УИ);
	ШаблонАдресаЭП ="%СписокАдресЭП% ; %АдресЭП%";
	Запрос.УстановитьПараметр("Сегмент",Сегмент);
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЧ Из Таблица Цикл
		СтрокаТЧ.ТекстСМССообщения	 = ОбработатьШаблонСообщения(ЗаявкаСервисногоЦентра ,СтрокаТЧ.ЭтапРаботы ,"" ,СтрокаТЧ.ТекстСМССообщения);
		СтрокаТЧ.ТемаЭП 			 = ОбработатьШаблонСообщения(ЗаявкаСервисногоЦентра ,СтрокаТЧ.ЭтапРаботы ,"" ,СтрокаТЧ.ТемаЭП);
		СтрокаТЧ.ТекстЭП			 = ОбработатьШаблонСообщения(ЗаявкаСервисногоЦентра ,СтрокаТЧ.ЭтапРаботы ,"" ,СтрокаТЧ.ТекстЭП);
		СтрокаТЧ.ЗаказчикEmail		 = ?(СтрокаТЧ.ОтправлятьЭПЗаказчику=Ложь И СтрокаТЧ.ОтправлятьЭППартнеру = Ложь	,"",СтрокаТЧ.ЗаказчикEmail);

		СтрокаТЧ.ОтправлятьСМС		 = ?(Не ЗначениеЗаполнено(СтрокаТЧ.НомерТелефона) Или ПустаяСтрока(СтрокаТЧ.ТекстСМССообщения),Ложь,СтрокаТЧ.ОтправлятьСМС);
		Кому = "";
		Если СтрокаТЧ.ПроверятьДанныеЭППоЭтапу = Истина И СтрокаТЧ.ЭтоПартнер = Истина Тогда
			Для каждого Элемент Из СтрокаТЧ.ЭтапРаботы.ПолучателиЭлектронныхПисемПартнеры Цикл
				Если ПустаяСтрока(Кому) Тогда 
					Кому = Элемент.ЭлектроннаяПочта; 
					Продолжить;
				КонецЕсли;
				Кому = СтрЗаменить(ШаблонАдресаЭП,"%СписокАдресЭП%",Кому);
				Кому = СтрЗаменить(Кому,"%АдресЭП%",Элемент.ЭлектроннаяПочта);
			КонецЦикла;
		ИначеЕсли СтрокаТЧ.ПроверятьДанныеЭППоЭтапу = Истина Тогда 
			Для каждого Элемент Из СтрокаТЧ.ЭтапРаботы.ПолучателиЭлектронныхПисем Цикл
				Если ПустаяСтрока(Кому) Тогда 
					Кому = Элемент.ЭлектроннаяПочта; 
					Продолжить;
				КонецЕсли;
				Кому = СтрЗаменить(ШаблонАдресаЭП,"%СписокАдресЭП%",Кому);
				Кому = СтрЗаменить(Кому,"%АдресЭП%",Элемент.ЭлектроннаяПочта);
			КонецЦикла;
		КонецЕсли; 
		СтрокаТЧ.Кому = Кому; 
		
		ДанныеОтправкиЗаполненные = ?(ЗначениеЗаполнено(СтрокаТЧ.ПрофильОтправитель) И
						  			  Не ПустаяСтрока(СтрокаТЧ.ТемаЭП) И
						   			  Не ПустаяСтрока(СтрокаТЧ.ТекстЭП),
						   			  Истина, Ложь);

		СтрокаТЧ.ОтправлятьЭП		 	= ?((СтрокаТЧ.ОтправлятьЭПЗаказчику=Истина Или СтрокаТЧ.ОтправлятьЭППартнеру = Истина)  
											И ДанныеОтправкиЗаполненные = Истина
											И Не ПустаяСтрока(СтрокаТЧ.ЗаказчикEmail), 
											Истина, 
											Ложь); 
		СтрокаТЧ.ОтправлятьEmailПоЭтапу	    = Не ПустаяСтрока(Кому) И ДанныеОтправкиЗаполненные = Истина;
		СтрокаТЧ.ПроверятьДанныеЭППоЭтапу	= Не ПустаяСтрока(Кому);
	КонецЦикла;
	ЭтаФорма.ТЧВзаимодействия.Загрузить(Таблица);
	
КонецПроцедуры // СформироватьВзаимодействия()

Процедура СоздатьУсловноеОформленияФормыВзаимодействия(ЭтаФорма)
	
	Элементы 	= ЭтаФорма.Элементы;
	
	КрасныйЦвет = Новый Цвет(255, 0, 0);//Для отметки не заполненных ячеек, необходимых для взаимодействия
	СинийЦвет	= Новый Цвет(0, 0, 255);//Для отметки ячеек по которым создавать взаимодействия не нужно
	
	//Если отправлять sms / не заполненное поле ТекстСМССообщения
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТекстСМССообщения");

	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.НомерТелефона");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ТекстСМССообщения");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "SMS не отправится!Тут должен бить текст сообщения!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, КрасныйЦвет);
	
	///Если отправка sms по этапу не требуется / сообщение об этом
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТекстСМССообщения");

	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ОтправлятьСМС");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.НомерТелефона");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "Отправка sms по этапу не требуется!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, СинийЦвет);
	
	//Если отправка sms по этапу не требуется / запрет редактирования соответственных полей
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТекстСМССообщения");
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияОтправлятьСМС");
	
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.НомерТелефона");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Если отправлять email / не заполненное поле ТемаЭП
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТемаЭП");

	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ТемаЭП");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораИЛИ 				= ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбораИЛИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора 					= ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭПЗаказчику");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора 					= ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭППоЭтапу");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "Здесь должна быть тема письма!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, КрасныйЦвет);
	
	
	//Если отправлять email / не заполненное поле ТекстЭП
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТекстЭП");

	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ТекстЭП");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораИЛИ 				= ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбораИЛИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора 					= ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭПЗаказчику");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора 					= ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭППоЭтапу");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "Здесь должен быть текст эл. письма!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, КрасныйЦвет);
	
	
	//Если отправлять email / не заполненное поле ЕmailЗаказчика
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияЗаказчикEmail");
	
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ЗаказчикEmail");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭПЗаказчику");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "Эл. письмо не будет отправлено так как в заказчика не заполнен email!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, КрасныйЦвет);
	
	//Если отправлять email / не заполненное поле ПрофильОтправитель
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияПрофильОтправитель");
	
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПрофильОтправитель");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораИЛИ 				= ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбораИЛИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора 					= ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭПЗаказчику");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора 					= ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭППоЭтапу");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "Эл. письмо не будет отправлено так как не заполнен профиль отправителя в этапе!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, КрасныйЦвет);
	
	//Если отправлять email заказчику не требуется
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭПЗаказчику");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияЗаказчикEmail");
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияОтправлятьЭП");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"			, "Отправка эл. письма заказчику по этапу не требуется!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"		, СинийЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр"	, Истина);
	
	//Если отправлять email по этапу не требуется
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭППоЭтапу");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияКому");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст"		, "Отправка эл. письма по этапу не требуется!");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста"	, СинийЦвет);
	
	//Если не отправлять sms и email
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	
	ГруппаОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
	ГруппаОтбора.ТипГруппы 			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТемаЭП");
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияТекстЭП");
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияОтправлятьЭП");
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияОтправлятьEmailПоЭтапу");
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТЧВзаимодействияПрофильОтправитель");

	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭППоЭтапу");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;
	ЭлементОтбора 					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТЧВзаимодействия.ПроверятьДанныеЭПЗаказчику");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Ложь;	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
КонецПроцедуры	

Процедура СоздатьДополнительныеРеквизитыФормыВзаимодействия(ЭтаФорма)

	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("ТЧВзаимодействия"		, Новый ОписаниеТипов("ТаблицаЗначений")));
	Реквизиты.Добавить(Новый РеквизитФормы("ЭтапРаботы"				, Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы")				,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ОтправлятьСМС"			, Новый ОписаниеТипов("Булево")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ТекстСМССообщения"		, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ОтправлятьЭП"			, Новый ОписаниеТипов("Булево")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ТемаЭП"					, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ТекстЭП"				, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ЗаказчикEmail"			, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("НомерТелефона"			, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("Контакт"				, Новый ОписаниеТипов("СправочникСсылка.Партнеры")						,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("КонтактНаименование"	, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ПрофильОтправитель"		, Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")	,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("Кому"					, Новый ОписаниеТипов("Строка")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ОтправлятьEmailПоЭтапу"	, Новый ОписаниеТипов("Булево")											,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ПроверятьДанныеЭПЗаказчику"	, Новый ОписаниеТипов("Булево")										,"ТЧВзаимодействия"));
	Реквизиты.Добавить(Новый РеквизитФормы("ПроверятьДанныеЭППоЭтапу"	, Новый ОписаниеТипов("Булево")										,"ТЧВзаимодействия"));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);

КонецПроцедуры

Процедура СоздатьЭлементыФормыВзаимодействия(ЭтаФорма)

	Элементы = ЭтаФорма.Элементы;
	
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя", 						"ГруппаВзаимодействия");
	ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Заголовок", 					"Взаимодействия и этапы, что будут добавленные в ЗСЦ");
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ОбычнаяГруппа);
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппы.Вставить("Поведение", 					ПоведениеОбычнойГруппы.Свертываемая);
	ПараметрыГруппы.Вставить("ОтображениеУправления", 		ОтображениеУправленияОбычнойГруппы.Картинка);
	ПараметрыГруппы.Вставить("Отображение", 				ОтображениеОбычнойГруппы.СлабоеВыделение);
	ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Истина);
	ГруппаВзаимодействия = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыГруппы);
	
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя"						,"ТЧВзаимодействия");
	ПараметрыЭлемента.Вставить("ТипЭлемента"				,Тип("ТаблицаФормы"));
	ПараметрыЭлемента.Вставить("ПутьКДанным"				,"ТЧВзаимодействия");  
	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали"	,Истина);
	ПараметрыЭлемента.Вставить("ПоложениеКоманднойПанели"	,ПоложениеКоманднойПанелиЭлементаФормы.Нет);
	ТЧВзаимодействия = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, ПараметрыЭлемента, ГруппаВзаимодействия);	

	Если Элементы.Найти("ТЧВзаимодействия")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТЧВзаимодействия.УстановитьДействие("ПередУдалением"			,"ТЧВзаимодействия_ПередУдалением");
	ТЧВзаимодействия.УстановитьДействие("ПередНачаломДобавления"	,"ТЧВзаимодействия_ПередНачаломДобавления");
			
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"					,"ТЧВзаимодействияЭтапРаботы");	
	Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ЭтапРаботы");
	Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
	Параметры.Вставить("ТолькоПросмотр"			,Истина);
	Параметры.Вставить("РедактированиеТекста"	,Ложь);
	
	ЭлЭтапРаботы 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ТЧВзаимодействия);
	
#Область КолонкиОтправкиСМС

	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияСМС");
	ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Вертикальная);
	ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
	ГруппаКолонок_СМС = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ТЧВзаимодействия);
	
		ПараметрыГруппы = Новый Структура;
		ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияГруппаНомерТелефона");
		ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
		ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
		ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Горизонтальная);
		ПараметрыГруппы.Вставить("Поведение", 					ПоведениеОбычнойГруппы.Свертываемая);
		ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
		ГруппаКолонок_НомерТелефона = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ГруппаКолонок_СМС);

			Параметры = Новый Структура;
			Параметры.Вставить("Имя"					,"ТЧВзаимодействияОтправлятьСМС");	
			Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ОтправлятьСМС");
			Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеФлажка);
			Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
			Параметры.Вставить("Заголовок"				,"Отправлять");
			ЭлОтправлятьСМС 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_НомерТелефона);
			
			Параметры = Новый Структура;
			Параметры.Вставить("Имя"					,"ТЧВзаимодействияНомерТелефона");	
			Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.НомерТелефона");
			Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
			Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
			Параметры.Вставить("Заголовок"				,"Телефон");
			Параметры.Вставить("ТолькоПросмотр"			,Истина);
			ЭлНомерТелефона 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_НомерТелефона);
			
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"					,"ТЧВзаимодействияТекстСМССообщения");	
	Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ТекстСМССообщения");
	Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
	Параметры.Вставить("Заголовок"				,"Текст sms сообщения");
	ЭлТекстСМССообщения 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_СМС);
#КонецОбласти
		
#Область КолонокиОтправкиЭП

	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияГруппаЭП");
	ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
	ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
	ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Горизонтальная);
	ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
	ГруппаКолонок_ЭП = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ТЧВзаимодействия);

#Область ГруппаКолонокТЧВзаимодействияНастройкаЭП	
		ПараметрыГруппы = Новый Структура;
		ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияНастройкаЭП");
		ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
		ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
		ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Вертикальная);
		ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
		ГруппаКолонок_НастройкаЭП = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ГруппаКолонок_ЭП);

#Область ГруппаКолонокТЧВзаимодействияEmailПоЭтапу
			ПараметрыГруппы = Новый Структура;
			ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияГруппаEmailПоЭтапу");
			ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
			ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
			ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Горизонтальная);
			ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
			ГруппаКолонок_EmailПоЭтапу = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ГруппаКолонок_НастройкаЭП);
		
				Параметры = Новый Структура;
				Параметры.Вставить("Имя"					,"ТЧВзаимодействияОтправлятьEmailПоЭтапу");	
				Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ОтправлятьEmailПоЭтапу");
				Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеФлажка);
				Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
				Параметры.Вставить("Заголовок"				,"Отправлять");
				ЭлОтправлятьEmailПоЭтапу 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_EmailПоЭтапу);
			
				Параметры = Новый Структура;
				Параметры.Вставить("Имя"					,"ТЧВзаимодействияКому");	
				Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.Кому");
				Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
				Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
				Параметры.Вставить("Заголовок"				,"Email по этапу");
				Параметры.Вставить("ТолькоПросмотр"			,Истина);
				ЭлКому 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_EmailПоЭтапу);
#КонецОбласти				
				
#Область ГруппаКолонокТЧВзаимодействияEmailЗаказчику
	
			ПараметрыГруппы = Новый Структура;
			ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияГруппаEmail");
			ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
			ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
			ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Горизонтальная);
			ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
			ГруппаКолонок_EmailПоЭтапу = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ГруппаКолонок_НастройкаЭП);
		
				Параметры = Новый Структура;
				Параметры.Вставить("Имя"					,"ТЧВзаимодействияОтправлятьЭП");	
				Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ОтправлятьЭП");
				Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеФлажка);
				Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
				Параметры.Вставить("Заголовок"				,"Отправлять");
				ЭлОтправлятьЭП 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_EmailПоЭтапу);
			
				Параметры = Новый Структура;
				Параметры.Вставить("Имя"					,"ТЧВзаимодействияЗаказчикEmail");	
				Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ЗаказчикEmail");
				Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
				Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
				Параметры.Вставить("Заголовок"				,"Email заказчика");
				Параметры.Вставить("ТолькоПросмотр"			,Истина);
				ЭлЗаказчикEmail 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_EmailПоЭтапу);
#КонецОбласти				

		Параметры = Новый Структура;
		Параметры.Вставить("Имя"					,"ТЧВзаимодействияТемаЭП");	
		Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ТемаЭП");
		Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
		Параметры.Вставить("Заголовок"				,"Тема");
		ЭлТемаЭП 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_НастройкаЭП);

		Параметры = Новый Структура;
		Параметры.Вставить("Имя"					,"ТЧВзаимодействияТекстЭП");	
		Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ТекстЭП");
		Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
		Параметры.Вставить("Заголовок"				,"Текст");
		ЭлТекстЭП 	= git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_НастройкаЭП);
		
#КонецОбласти		

#Область ГруппаКолонокТЧВзаимодействияЭППрофильОтправителя

		ПараметрыГруппы = Новый Структура;
		ПараметрыГруппы.Вставить("Имя", 						"ТЧВзаимодействияГруппаЭППрофильОтправителя");
		ПараметрыГруппы.Вставить("ТипЭлемента", 				Тип("ГруппаФормы"));
		ПараметрыГруппы.Вставить("Вид", 						ВидГруппыФормы.ГруппаКолонок);
		ПараметрыГруппы.Вставить("Группировка", 				ГруппировкаКолонок.Вертикальная);
		ПараметрыГруппы.Вставить("ОтображатьЗаголовок", 		Ложь);
		ГруппаКолонок_ЭППрофильОтправителя = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы,ПараметрыГруппы,ГруппаКолонок_ЭП);
		
		
			Параметры = Новый Структура;
			Параметры.Вставить("Имя"					,"ТЧВзаимодействияПрофильОтправитель");	
			Параметры.Вставить("ПутьКДанным"			,"ТЧВзаимодействия.ПрофильОтправитель");
			Параметры.Вставить("Вид"					,ВидПоляФормы.ПолеВвода);
			Параметры.Вставить("ТипЭлемента"			,Тип("ПолеФормы"));
			Параметры.Вставить("ТолькоПросмотр"			,Истина);
			Параметры.Вставить("Заголовок"				,"Профиль отправитель");
			ЭлПрофильОтправитель = git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, ГруппаКолонок_ЭППрофильОтправителя);
#КонецОбласти

#КонецОбласти

	Если Элементы.Найти("ГруппаКоманд")<>Неопределено Тогда
		Элементы.Переместить(ГруппаВзаимодействия, ЭтаФорма, Элементы.ГруппаКоманд);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекстЗапросаВзаимодействия()

	ТекстЗапроса =
		"
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КИ.АдресЭП,"""")					КАК АдресЭП,
		|	ВЫБОР
		|		КОГДА ПартнерыСегмента.Партнер = &Партнер
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ 										КАК ЭтоПартнер,
		|	Партнеры.Ссылка                             КАК Партнер
		|ПОМЕСТИТЬ ВТ_ИнформацияПоПартнеру
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КИ
		|	ПО
		|		Партнеры.Ссылка		= КИ.Ссылка
		|	И	КИ.Тип				= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И	КИ.Вид				= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера)
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|	ПО 
		|		ПартнерыСегмента.Сегмент = &Сегмент
		|	И 	ПартнерыСегмента.Партнер = &Партнер
		|	
		|ГДЕ
		|	Партнеры.Ссылка = &Партнер
		|;
		|
		|ВЫБРАТЬ
		|	Ссылка
		|ПОМЕСТИТЬ ВТ_ЭтапыРабот
		|ИЗ
		|	Справочник.ГНАТ_ЭтапыРаботы
		|ГДЕ
		|	Ссылка В (&СписокЭтапыРаботы)
		|;
		|
		|ВЫБРАТЬ
		|	ГНАТ_ЭтапыРаботы.Ссылка 						КАК ЭтапРаботы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ) = ИСТИНА
		|		ТОГДА ГНАТ_ЭтапыРаботы.ТекстСМССообщенияПартнерам
		|	ИНАЧЕ 
		|			ГНАТ_ЭтапыРаботы.ТекстСМССообщения
		|	КОНЕЦ 											КАК ТекстСМССообщения,
		|	&НомерТелефона									КАК	НомерТелефона,
		|	ИСТИНА											КАК ОтправлятьСМС
		|ПОМЕСТИТЬ ВТ_СМССообщения
		|ИЗ
		|	Справочник.ГНАТ_ЭтапыРаботы КАК ГНАТ_ЭтапыРаботы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИнформацияПоПартнеру КАК ВТ_ИнформацияПоПартнеру
		|	ПО ИСТИНА
		|
		|ГДЕ
		|	ГНАТ_ЭтапыРаботы.Ссылка В (&СписокЭтапыРаботы)
		|И	ГНАТ_ЭтапыРаботы.ОтправлятьСМСПартнеру = ИСТИНА
		|;
		|
		|ВЫБРАТЬ
		|	ГНАТ_ЭтапыРаботы.Ссылка 							КАК ЭтапРаботы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ) = ИСТИНА
		|		ТОГДА ГНАТ_ЭтапыРаботы.ТемаЭлектронногоПисьмаПартнер
		|	ИНАЧЕ 
		|		ГНАТ_ЭтапыРаботы.ТемаЭлектронногоПисьма
		|	КОНЕЦ 												КАК ТемаЭП,
		|	ВТ_ИнформацияПоПартнеру.АдресЭП 					КАК ЗаказчикEmail,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ГНАТ_ЭтапыРаботы.ТекстЭлектронногоПисьмаПартнер
		|		ИНАЧЕ ГНАТ_ЭтапыРаботы.ТекстЭлектронногоПисьма
		|	КОНЕЦ 												КАК ТекстЭП,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ) = ИСТИНА
		|			ТОГДА ГНАТ_ЭтапыРаботы.УчетнаяЗаписьОтправкиПисьмаДляПартнера
		|		ИНАЧЕ ГНАТ_ЭтапыРаботы.УчетнаяЗаписьОтправкиПисьма
		|	КОНЕЦ 												КАК ПрофильОтправитель,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ) = ИСТИНА И ГНАТ_ЭтапыРаботы.ОтправлятьЭППартнеру = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ 												КАК ОтправлятьЭППартнеру,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ) = ЛОЖЬ И ГНАТ_ЭтапыРаботы.ОтправлятьЭПЗаказчику = ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ 												КАК ОтправлятьЭПЗаказчику,		
		|	ЕСТЬNULL(ВТ_ИнформацияПоПартнеру.ЭтоПартнер, ЛОЖЬ)	КАК ЭтоПартнер,
		|	ГНАТ_ЭтапыРаботы.ОтправлятьЭП						КАК ОтправлятьЭП
		|ПОМЕСТИТЬ ВТ_ЭП
		|ИЗ
		|	Справочник.ГНАТ_ЭтапыРаботы КАК ГНАТ_ЭтапыРаботы
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИнформацияПоПартнеру КАК ВТ_ИнформацияПоПартнеру
		|	ПО ИСТИНА
		|
		|ГДЕ
		|	ГНАТ_ЭтапыРаботы.Ссылка В (&СписокЭтапыРаботы)
		|И	ГНАТ_ЭтапыРаботы.ОтправлятьЭП = ИСТИНА
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_ЭтапыРабот.Ссылка				КАК ЭтапРаботы,
		|	ВТ_СМССообщения.НомерТелефона		КАК НомерТелефона,
		|	ВТ_СМССообщения.ТекстСМССообщения	КАК ТекстСМССообщения,
		|	ВТ_СМССообщения.ОтправлятьСМС 		КАК ОтправлятьСМС,
		|	ВТ_ЭП.ТемаЭП						КАК ТемаЭП,
		|	ВТ_ЭП.ТекстЭП						КАК ТекстЭП,
		|	ВТ_ЭП.ЗаказчикEmail					КАК ЗаказчикEmail,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(300))		КАК Кому,          
		|	ВЫБОР
		|		КОГДА ВТ_ЭП.ОтправлятьЭППартнеру = ИСТИНА ИЛИ ВТ_ЭП.ОтправлятьЭПЗаказчику = ИСТИНА 
		|		ТОГДА ИСТИНА 
		|   ИНАЧЕ
		|		ЛОЖЬ	
		|	КОНЕЦ 								КАК ОтправлятьЭП,
		|	ЛОЖЬ								КАК ОтправлятьEmailПоЭтапу,
		|	&Партнер							КАК Контакт,
		|	&КонтактНаименование				КАК КонтактНаименование,
		|	ВТ_ЭП.ПрофильОтправитель			КАК ПрофильОтправитель,
		|	ВТ_ЭП.ОтправлятьЭППартнеру			КАК ОтправлятьЭППартнеру,
		|	ВТ_ЭП.ОтправлятьЭПЗаказчику			КАК ОтправлятьЭПЗаказчику,
		|	ВТ_ЭП.ЭтоПартнер                    КАК ЭтоПартнер,
		|	ВЫБОР
		|		КОГДА ВТ_ЭП.ОтправлятьЭППартнеру = ИСТИНА ИЛИ ВТ_ЭП.ОтправлятьЭПЗаказчику = ИСТИНА 
		|		ТОГДА ИСТИНА 
		|   ИНАЧЕ
		|		ЛОЖЬ	
		|	КОНЕЦ 								КАК ПроверятьДанныеЭПЗаказчику,
		|	ВТ_ЭП.ОтправлятьЭП                  КАК ПроверятьДанныеЭППоЭтапу
		|ИЗ
		|	ВТ_ЭтапыРабот КАК ВТ_ЭтапыРабот
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СМССообщения КАК ВТ_СМССообщения
		|	ПО 
		|		ВТ_ЭтапыРабот.Ссылка = ВТ_СМССообщения.ЭтапРаботы
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЭП КАК ВТ_ЭП
		|	ПО 
		|		ВТ_ЭтапыРабот.Ссылка = ВТ_ЭП.ЭтапРаботы";	
		
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаВзаимодействия()

Функция ОбработатьШаблонСообщения(Ссылка, ЭтапРаботы, МесторасположениеФактическое, ТекстСообщения)
	УстановитьПривилегированныйРежим(Истина);
	Возврат Справочники.ГНАТ_ЭтапыРаботы.ОбработатьШаблонСообщения(Ссылка, ЭтапРаботы, МесторасположениеФактическое, ТекстСообщения);
КонецФункции

#КонецОбласти
 

#Область БизнесПроцессСозданияСуперСборки


Процедура БизнесПроцесСозданияСуперСборки(ПараметрыДанных,СтруктураОшибок,СтруктураДокументов) Экспорт
    
   	Если СтруктураОшибок.Количество() Тогда
        Возврат;
	КонецЕсли;
	
    НачатьТранзакцию();
	
	Если ПараметрыДанных.НоваяНоменклатура Тогда
		НоменклатураСсылка = СоздатьСправочникНоменклатура(ПараметрыДанных,СтруктураОшибок);
		Если НоменклатураСсылка.Пустая() Тогда
			СтруктураОшибок.Вставить("Ошибка"); 
            Отказ = Истина;
            ОтменитьТранзакцию();
            Возврат;
        Иначе 
            КомплектацияСсылка =  СоздатьСправочникВариантКомплектации(ПараметрыДанных,СтруктураОшибок);
			Если КомплектацияСсылка.Пустая() Тогда
				СтруктураОшибок.Вставить("Ошибка");
                Отказ = Истина;
                ОтменитьТранзакцию();
                Возврат;
            КонецЕсли;
        КонецЕсли;
    Иначе
        НоменклатураСсылка = ПараметрыДанных.Номенклатура;
        КомплектацияСсылка = ПараметрыДанных.Комплектация;
    КонецЕсли;
    
    ПараметрыДанных.Вставить("НоменклатураСсылка", НоменклатураСсылка);
    ПараметрыДанных.Вставить("КомплектацияСсылка", КомплектацияСсылка);
	
	СтруктураДокументов.Вставить("ЗаказыКлиентов", Новый Массив); 
    СтруктураДокументов.Вставить("ЗаказыНаПеремещение", Новый Массив);
	
	СвойствоВариантКомплектации= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("661818a9-c24c-11e4-80ea-001e676b0175"));  //Вариант комплектации под сборку

    Для Индекс = 1 По ПараметрыДанных.КоличествоКомплектов Цикл
		
        ЗаказКлиента = СоздатьДокументЗаказКлиента(ПараметрыДанных, СтруктураОшибок);
        Если ЗаказКлиента.Пустая() Тогда
            СтруктураОшибок.Вставить("Ошибка");
            НоменклатураСсылка = Неопределено;
            КомплектацияСсылка = Неопределено;
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ПроверитьНаличиПодЗаказ(ПараметрыДанных) Тогда
		
			 ЗаказНаПеремещение = СоздатьЗаказНаПеремещениеПодСборку(ПараметрыДанных,СтруктураОшибок);
			 Если ЗаказНаПеремещение.Пустая() Тогда
	            СтруктураОшибок.Вставить("Ошибка");
	            НоменклатураСсылка = Неопределено;
	            КомплектацияСсылка = Неопределено;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			СвойствоЗаказПодСборку= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("016f5acb-be6d-11e4-80ea-001e676b0175"));  //Заказ клиента под сборку
			ДобавитьЗаписьВРегистрДопСведенияПоСС(ЗаказНаПеремещение,СвойствоЗаказПодСборку,Истина); 
		КонецЕсли;
		
		СвойствоЗаказПодСборку= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("016f5acb-be6d-11e4-80ea-001e676b0175"));  //Заказ клиента под сборку
		ДобавитьЗаписьВРегистрДопСведенияПоСС(ЗаказКлиента,СвойствоЗаказПодСборку,Истина);
		
		СвойствоСкладДоставки= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("be08d848-be8a-11e4-80ea-001e676b0175"));  //Склад доставки Сборки	
		ДобавитьЗаписьВРегистрДопСведенияПоСС(ЗаказКлиента,СвойствоСкладДоставки,ПараметрыДанных.СкладДоставки); 
		
		СвойствоНоменклатура= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("980fcac5-c0b9-11e4-80ea-001e676b0175"));  //Номенклатура под сборку
		Если ПараметрыДанных.НоваяНоменклатура Тогда  
			ДобавитьЗаписьВРегистрДопСведенияПоСС(ЗаказКлиента,СвойствоНоменклатура,НоменклатураСсылка); 
		Иначе
			ДобавитьЗаписьВРегистрДопСведенияПоСС(ЗаказКлиента,СвойствоНоменклатура,ПараметрыДанных.Номенклатура); 
		КонецЕсли;
		
		ДобавитьЗаписьВРегистрДопСведенияПоСС(ЗаказКлиента,СвойствоВариантКомплектации,КомплектацияСсылка.УникальныйИдентификатор());
		
		СтруктураДокументов.ЗаказыКлиентов.Добавить(ЗаказКлиента);
		СтруктураДокументов.ЗаказыНаПеремещение.Добавить(ЗаказНаПеремещение);

	КонецЦикла; 
	
    ЗафиксироватьТранзакцию();
    Если ПараметрыДанных.НоваяНоменклатура Тогда   
        СтруктураДокументов.Вставить("Номенклатура",НоменклатураСсылка);
        СтруктураДокументов.Вставить("ВариантКомплектации",КомплектацияСсылка); 
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиПодЗаказ(ПараметрыДанных)
	
	Если ПараметрыДанных.Склад = ПараметрыДанных.СкладОжидания Тогда
		Возврат ЛОЖЬ;	
	КонецЕсли;
	
	ТЗ_Таблица = ПараметрыДанных.ЗаказКлиента.Товары;
	Результат = ТЗ_Таблица.НайтиСтроки(Новый Структура("ВариантОбеспечения",Перечисления.ВариантыОбеспечения.ПодЗаказ));
	
	Если Результат.Количество() = 0 Тогда
		Возврат ЛОЖЬ;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьНаличиПодЗаказ()

Процедура ДобавитьЗаписьВРегистрДопСведенияПоСС(ДокументСсылка,Свойство,Значение)
	НаборЗаписейКПП = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписейКПП.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписейКПП.Отбор.Свойство.Установить(Свойство);
	
		НоваяЗапись  = НаборЗаписейКПП.Добавить();
    	НоваяЗапись.Объект	 = ДокументСсылка;
    	НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Значение = Значение;
	НаборЗаписейКПП.Записать();   
КонецПроцедуры

Функция СоздатьСерийныйНомерНоменклатуры(ПараметрыДанных) Экспорт

	СтруктураОшибок     = Новый Структура();
    СпрОбъект   		= git_Objcon.СоздатьСправочник("СерийныеНомераНоменклатуры", ПараметрыДанных, СтруктураОшибок, Истина);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать новый серийный номер.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Справочники.Номенклатура.ПустаяСсылка();
    КонецЕсли;  
    
    Попытка
        СпрОбъект.Записать();
	Исключение
		СообщенияОбОшибке = НСтр("ru='Не удалось записать справочник Серийные номера номенклатуры.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Справочники.Номенклатура.ПустаяСсылка(); 
     КонецПопытки;

	СправочникСсылка = СпрОбъект.Ссылка;
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(СправочникСсылка)); 
    Возврат СправочникСсылка; 

КонецФункции // СоздатьСерийныйНомерНоменклатуры()

Функция ОтменитьСтрокиВЗаказеКлиента(ЗаказКлиента) Экспорт

	НачатьТранзакцию();
		
	РезультатОтмены = ОтменитьСтрокиВЗаказеКлиентуПриОтменеСборки(ЗаказКлиента);
	Если РезультатОтмены = Ложь Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	СвойствоВариантКомплектации 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("661818a9-c24c-11e4-80ea-001e676b0175")); // Вариант комплектации Сборки
	СвойствоДоставкаСборки			= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("be08d848-be8a-11e4-80ea-001e676b0175")); // Склад доставки сборки
	СвойствоНоменклатураПодСборку   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("980fcac5-c0b9-11e4-80ea-001e676b0175")); // Номенклатура под сборку
	СвойствоПеремещениеДляСборки    = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("016f5acb-be6d-11e4-80ea-001e676b0175")); // Перемещение для сборки
	
	Если Не ОчиститьДопСведениеБПСборки(ЗаказКлиента, СвойствоВариантКомплектации, "«Вариант комплектации»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;

	Если Не ОчиститьДопСведениеБПСборки(ЗаказКлиента, СвойствоДоставкаСборки, "«Доставка сборки»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОчиститьДопСведениеБПСборки(ЗаказКлиента, СвойствоНоменклатураПодСборку, "«Номенклатура под сборку»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОчиститьДопСведениеБПСборки(ЗаказКлиента, СвойствоПеремещениеДляСборки, "«Перемещение для сборки»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции // ОтменитьСтрокиВЗаказеКлиента()

#Область СозданиеНоменклатурыИВариантаКомплектации

#Область СправочникНоменклатура

Функция СоздатьСправочникНоменклатура(ПараметрыДанных,СтруктураОшибок) 
    
    СтруктураПараметров     = ПолучитьСтруктуруПарметровЗаполненияНоменклатуры(ПараметрыДанных);
    СпрНоменклатураОбъект   = git_Objcon.СоздатьСправочник("Номенклатура",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать новую номенклатуру.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Справочники.Номенклатура.ПустаяСсылка();
    КонецЕсли;  
    
    Попытка
        СпрНоменклатураОбъект.Записать();
		СправочникСсылка = СпрНоменклатураОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(СправочникСсылка));
		ПараметрыДанных.Вставить("НоменклатураСсылка",СправочникСсылка);
        Возврат СправочникСсылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать справочник  Номенклатура.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Справочники.Номенклатура.ПустаяСсылка(); 
     КонецПопытки;

 КонецФункции
 
Функция ПолучитьСтруктуруПарметровЗаполненияНоменклатуры(ПараметрыДанных)
    СтруктураПараметров	= git_Templates.ПолучитьШаблонНоменклатуры();
    СтруктураПараметров.Вставить("НаименованиеПолное",          ПараметрыДанных.Наименование); 
    СтруктураПараметров.Вставить("ВариантОформленияПродажи",    Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);    
    СтруктураПараметров.Вставить("ЕдиницаИзмерения",            Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт")); //получить ссылку
    СтруктураПараметров.Вставить("ИспользованиеХарактеристик",  Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
    СтруктураПараметров.Вставить("ТипНоменклатуры",             Перечисления.ТипыНоменклатуры.Товар);
    СтруктураПараметров.Вставить("СтавкаНДС",                   Перечисления.СтавкиНДС.НДС20);
    СтруктураПараметров.Вставить("ГруппаДоступа",               Справочники.ГруппыДоступаНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("8e09d39d-5c97-11e1-8707-001e67162d38"))); // Группа доступпа upload
    СтруктураПараметров.Вставить("Описание",                    ПараметрыДанных.Наименование);
    ЗаполнитьЗначенияСвойств(СтруктураПараметров,ПараметрыДанных);
    
	Если ПараметрыДанных.Свойство("Гарантия") Тогда
		Если ПустаяСтрока(ПараметрыДанных.Гарантия)=Ложь Тогда
			ДополнительныеРеквизиты = Новый ТаблицаЗначений;
	        ДополнительныеРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	        ДополнительныеРеквизиты.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	        ДополнительныеРеквизиты.Колонки.Добавить("ТекстоваяСтрока", Новый ОписаниеТипов("Строка")); 
	        НоваяСтрока = ДополнительныеРеквизиты.Добавить();
	        НоваяСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("a3e0fd0e-4712-11e0-9f98-001517115d85"));
	        НоваяСтрока.Значение = ПараметрыДанных.Гарантия; 
			СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		КонецЕсли;
    КонецЕсли;

    Возврат СтруктураПараметров;
КонецФункции

#КонецОбласти 

#Область СправочникВариантКомплектации

Функция СоздатьСправочникВариантКомплектации(ПараметрыДанных,СтруктураОшибок) 
    
    НоменклатураРодитель = ПараметрыДанных.НоменклатураСсылка;	
	СтруктураПараметров	= git_Templates.ПолучитьШаблонВариантКомплектации();
	СтруктураПараметров.Вставить("Наименование", НоменклатураРодитель.Наименование);  
    СтруктураПараметров.Вставить("Владелец", НоменклатураРодитель); 
    СтруктураПараметров.Вставить("Основной", Истина); 
    СтруктураПараметров.Вставить("Товары",ПолучитьТЧТоварыВариантаКомплектации(ПараметрыДанных)); 
    СпрВариантаКомплектацииОбъект   = git_Objcon.СоздатьСправочник("ВариантыКомплектацииНоменклатуры",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать новый  ВариантыКомплектацииНоменклатуры.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка();
    КонецЕсли;
    
    Попытка
        СпрВариантаКомплектацииОбъект.Записать();
		СправочникСсылка = СпрВариантаКомплектацииОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(СправочникСсылка));
		ПараметрыДанных.Вставить("КомплектацияСсылка",СправочникСсылка);   
        Возврат СправочникСсылка;
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать записать  ВариантыКомплектацииНоменклатуры.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка();
    КонецПопытки;                      

КонецФункции

Функция ПолучитьТЧТоварыВариантаКомплектации(ПараметрыДанных)
    
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапросаТЧТоварыВариантаКомплектации();
    Запрос.УстановитьПараметр("ТаблицаТовары", ПараметрыДанных.СписокНоменклатуры.Выгрузить());
    Запрос.УстановитьПараметр("ВходнаяЦена", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("ВалютаУпрУч", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРеглУч", Константы.ВалютаУправленческогоУчета.Получить());
    
    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТекстЗапросаТЧТоварыВариантаКомплектации()
    ТекстЗапроса =  "ВЫБРАТЬ
                    |   СписокНоменкчлатуры.НомерСтроки,
                    |   СписокНоменкчлатуры.Номенклатура КАК Номенклатура,
                    |   СписокНоменкчлатуры.Упаковка,
                    |   СписокНоменкчлатуры.ЕдиницаИзмерения,
                    |   СписокНоменкчлатуры.Количество,
                    |   СписокНоменкчлатуры.КоличествоУпаковок
                    |ПОМЕСТИТЬ ТабНоменклатура
                    |ИЗ
                    |   &ТаблицаТовары КАК СписокНоменкчлатуры
                    |
                    |ИНДЕКСИРОВАТЬ ПО
                    |   Номенклатура
                    |;
                    |
                    |////////////////////////////////////////////////////////////////////////////////
                    |ВЫБРАТЬ
                    |   ТабНоменклатура.НомерСтроки,
                    |   ТабНоменклатура.Номенклатура,
                    |   ТабНоменклатура.Упаковка,
                    |   ТабНоменклатура.Количество,
                    |   ТабНоменклатура.КоличествоУпаковок,
					|	ВЫБОР
					|  		КОГДА ЦеныНоменклатурыСрезПоследних.Валюта = &ВалютаУпрУч
					|  			ТОГДА 100 * ЕСТЬNULL(ТабНоменклатура.Упаковка.Коэффициент, 1) * ТабНоменклатура.КоличествоУпаковок * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)
					|  			ИНАЧЕ 100 * ЕСТЬNULL(ТабНоменклатура.Упаковка.Коэффициент, 1) * ТабНоменклатура.КоличествоУпаковок * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена,0) * КурсРеглУч.Курс / УпрКурс.Курс
					|  	КОНЕЦ КАК ДоляСтоимости
                    |
                    |ИЗ
                    |   ТабНоменклатура КАК ТабНоменклатура
                    |       
                    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                    |               ,
                    |               Номенклатура В
                    |                       (ВЫБРАТЬ
                    |                           ТабНоменклатура.Номенклатура
                    |                       ИЗ
                    |                           ТабНоменклатура КАК ТабНоменклатура)
                    |                   И ВидЦены = &ВходнаяЦена) КАК ЦеныНоменклатурыСрезПоследних
                    | ПО ТабНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					|
				    |  ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаРеглУч) КАК КурсРеглУч
				    |ПО Истина
					|
					|  ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУпрУч) КАК УпрКурс
				    |ПО Истина 					
					|";

	Возврат ТекстЗапроса;
    
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СозданиеДокументовSS

#Область ЗаявкаСЦ

Функция СоздатьДокументЗаявкаСервисногоЦентра(ПараметрыДанных,СтруктураОшибок)
   СтруктураПараметров     = ПолучитьСтруктуруПараметровДокументаЗСЦ(ПараметрыДанных);
   ДокументЗаявкуСЦОбъект    = git_Objcon.СоздатьДокумент("ГНАТ_ЗаявкаСервисногоЦентра",СтруктураПараметров,СтруктураОшибок);
   
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось документ ЗаявкаСЦ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ЗаказНаСборку.ПустаяСсылка();
    КонецЕсли;  
    
    Попытка
        ДокументЗаявкуСЦОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
		ДокументСсылка = ДокументЗаявкуСЦОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
        Возврат ДокументСсылка;
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаявкаСЦ.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
    КонецПопытки; 

КонецФункции

Функция ПолучитьСтруктуруПараметровДокументаЗСЦ(ПараметрыДанных)
    
    СтруктураПараметров = git_Templates.ПолучитьШаблонЗаявкаСервичногоЦентраСборка();
    ТекстЗаявкиУСЦ = "Создание сборки пользователем ";
    
    Если ПараметрыДанных.Свойство("СкладСЦ")Тогда
        Если ПараметрыДанных.СкладСЦ.Пустая() Тогда
		    СкладСЦ = ПараметрыДанных.СкладСЦ;
	    Иначе
		    СкладСЦ = ПараметрыДанных.Склад;
        КонецЕсли;
    Иначе
        СкладСЦ = ПараметрыДанных.Склад;       
	КонецЕсли; 
	
	ЗаказчикНаРемонт = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПолучитьПартнераПоСкладу(СкладСЦ);
	ПараметрыДанных.Вставить("ВидОперации", Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Сборка);
	ПараметрыДанных.Вставить("ВнешнийВид", ТекстЗаявкиУСЦ);
	ПараметрыДанных.Вставить("Дата", ТекущаяДата());
	ПараметрыДанных.Вставить("ДатаПринятия", ТекущаяДата());
	ПараметрыДанных.Вставить("ЗаказчикРемонта", ЗаказчикНаРемонт);
	ПараметрыДанных.Вставить("Номенклатура", ПараметрыДанных.НоменклатураСсылка);
	ПараметрыДанных.Вставить("ЗаявленыйДефект", ТекстЗаявкиУСЦ + ПараметрыСеанса.ТекущийПользователь);
	ПараметрыДанных.Вставить("Комплектность", ТекстЗаявкиУСЦ);
	ПараметрыДанных.Вставить("ОбъектОснование", ПараметрыДанных.ЗаказКлиента);
	ПараметрыДанных.Вставить("НомерТелефона", ПолучитьТелефонЗаказчика(ЗаказчикНаРемонт));
	ПараметрыДанных.Вставить("ЕкспертПрийомщик", ПараметрыДанных.Користувач);
	
	ХодРабот = Новый ТаблицаЗначений;
	ХодРабот.Колонки.Добавить("Комментарий", 					Новый ОписаниеТипов("Строка"));
	ХодРабот.Колонки.Добавить("МесторасположениеФактическое", 	Новый ОписаниеТипов("СправочникСсылка.ГНАТ_МесторасположениеВСервисе"));
	ХодРабот.Колонки.Добавить("Ответственный", 					Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ХодРабот.Колонки.Добавить("ПартнерАСЦ", 					Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ХодРабот.Колонки.Добавить("Период", 						Новый ОписаниеТипов("Дата"));
	ХодРабот.Колонки.Добавить("ЭтапРаботы", 					Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы"));
	
	Строка 					= ХодРабот.Добавить();
	Строка.Период 			= ТекущаяДата();
	Строка.Комментарий 		= "Сборка товаров";
	Строка.Ответственный 	= ПараметрыДанных.Користувач;
	Строка.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято;  
	Строка.МесторасположениеФактическое = ПараметрыДанных.Месторасположение;
	
	ПараметрыДанных.Вставить("ХодРабот", ХодРабот); 
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ПараметрыДанных);
	
    Возврат СтруктураПараметров;
КонецФункции

Функция ПолучитьТелефонЗаказчика(ЗаказчикРемонта)
	МобНомер				= 	Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("7da99962-488d-11e0-9f98-001517115d85"));  //Мобільний телефон
	МобНомерДоп				= 	Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор("a8ec65fe-c74a-11e1-9d4d-001e673c80fc"));  //Мобільний телефон (додатковий)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаНомераТелефоновПартнера();	
	Запрос.УстановитьПараметр("Партнер",		ЗаказчикРемонта);
	Запрос.УстановитьПараметр("МобНомер",		МобНомер);
	Запрос.УстановитьПараметр("МобНомерДоп",	МобНомерДоп);
	Выборка = Запрос.Выполнить().Выбрать(); 
	Возврат ?(Выборка.Следующий(),Выборка.НомерТелефона,"");
КонецФункции

Функция ПолучитьТекстЗапросаНомераТелефоновПартнера()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
	    |	НомерТелефона 				КАК НомерТелефона
		|ИЗ
	    | 	РегистрСведений.Лояльность_НомераТелефонов
		|	
		|ГДЕ
		| 	Партнер = &Партнер
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= &МобНомер
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.Партнеры.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка 	= &Партнер
		|И	Вид	   	= &МобНомерДоп
		|И	Тип 	= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
	    |ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка.Владелец = &Партнер
		|И	Вид	   			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)
		|И	Тип 			= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
	    |	Представление
		|ИЗ
	    | 	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация
		|	
		|ГДЕ
		| 	Ссылка.Владелец = &Партнер
		|И	Вид	   			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица)
		|И	Тип 			= ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаНомераТелефоновПартнера()

#КонецОбласти

#Область ЗаказКлиента

Функция СоздатьДокументЗаказКлиента(ПараметрыДанных, СтруктураОшибок)
	
   	СтруктураПараметров = ПолучитьСтруктуруПараметровДокументаЗаказКлиента(ПараметрыДанных);
   	ДокументОбъект = git_Objcon.СоздатьДокумент("ЗаказКлиента", СтруктураПараметров, СтруктураОшибок);
	 
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось документ заказ на клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ЗаказКлиента.ПустаяСсылка();
    КонецЕсли;
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ДокументСсылка = ДокументОбъект.Ссылка; 
        ПараметрыДанных.Вставить("ЗаказКлиента", ДокументСсылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
        Возврат ДокументСсылка;
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаказКлиента.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ЗаказКлиента.ПустаяСсылка();
    КонецПопытки; 

КонецФункции

Функция ПолучитьСтруктуруПараметровДокументаЗаказКлиента(ПараметрыДанных)
    	
	СтруктураПараметров = git_Templates.ПолучитьШаблонЗаказКлиента();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПараметрыДанных, , "Товары");
	СтруктураПараметров.Вставить("Дата", ТекущаяДата());
	СтруктураПараметров.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураПараметров.Вставить("ДатаОтгрузки",ТекущаяДата());
	СтруктураПараметров.Вставить("Менеджер",ПараметрыСеанса.ТекущийПользователь);
	СтруктураПараметров.Вставить("НалогообложениеНДС",Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	СтруктураПараметров.Вставить("Подразделение",ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	СтруктураПараметров.Вставить("Приоритет",Перечисления.Приоритеты.Низкий);
	СтруктураПараметров.Вставить("СкидкиРассчитаны",Ложь);
	СтруктураПараметров.Вставить("Согласован",Истина);
	СтруктураПараметров.Вставить("Статус",Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.РеализацияКлиенту);                          	
	СтруктураПараметров.Вставить("Товары", ЗаполнитьТаблицуТоваров(ПараметрыДанных));
	СтруктураПараметров.Вставить("НалогообложениеНДС",ПараметрыДанных.Соглашение.НалогообложениеНДС);
	СтруктураПараметров.Вставить("Подразделение",ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);   
	СтруктураПараметров.Вставить("Комментарий",НСтр("ru = 'Заказ клиента под сборку'"));  
	Возврат СтруктураПараметров;  
    
КонецФункции

Функция ЗаполнитьТаблицуТоваров(ПараметрыДанных)
	УстановитьПривилегированныйРежим(Истина);
	Запрос  = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТаблициЗначения();
	Запрос.УстановитьПараметр("Комплектация",ПараметрыДанных.КомплектацияСсылка);
	Запрос.УстановитьПараметр("Товары",ПараметрыДанных.Товары);  	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции //ЗаполнитьТаблицуТоваров ()

Функция ПолучитьТекстЗапросаТаблициЗначения()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	               |	ВариантыКомплектацииНоменклатурыТовары.НомерСтроки,
	               |	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	               |	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	               |	ВариантыКомплектацииНоменклатурыТовары.Упаковка,
	               |	ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок,
	               |	ВариантыКомплектацииНоменклатурыТовары.ДоляСтоимости,
	               |	ВариантыКомплектацииНоменклатурыТовары.Количество
	               |ПОМЕСТИТЬ ТЗ_Комплектация
	               |ИЗ
	               |	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	               |ГДЕ
	               |	ВариантыКомплектацииНоменклатурыТовары.Ссылка = &Комплектация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура,
	               |	Товары.НомерСтроки,
	               |	Товары.Количество,
	               |	Товары.КоличествоУпаковок,
	               |	Товары.Цена,
	               |	Товары.СтавкаНДС,
	               |	Товары.Склад
	               |ПОМЕСТИТЬ ТЗ_Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ_Товары.Номенклатура,
	               |	ТЗ_Товары.НомерСтроки,
	               |	ТЗ_Товары.Количество,
	               |	ТЗ_Товары.КоличествоУпаковок,
	               |	ТЗ_Товары.СтавкаНДС,
	               |	ТЗ_Товары.Склад,
	               |	ISNULL(ТЗ_Комплектация.ДоляСтоимости,1) КАК Цена
	               |ИЗ
	               |	ТЗ_Товары КАК ТЗ_Товары
	               |
				   |ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_Комплектация КАК ТЗ_Комплектация
	               |ПО ТЗ_Товары.Номенклатура = ТЗ_Комплектация.Номенклатура
	               |И ТЗ_Товары.НомерСтроки = ТЗ_Комплектация.НомерСтроки";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаТаблициЗначения()


#КонецОбласти

#Область ЗаказНаПеремещения
Функция СоздатьЗаказНаПеремещениеПодСборку(ПараметрыДанных,СтруктураОшибок) 
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДокументаЗаказНаПеремещения(ПараметрыДанных);
   	ДокументОбъект = git_Objcon.СоздатьДокумент("ЗаказНаПеремещение", СтруктураПараметров, СтруктураОшибок);
	 
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось документ заказ на клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ЗаказКлиента.ПустаяСсылка();
    КонецЕсли;
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        ДокументСсылка = ДокументОбъект.Ссылка; 
        ПараметрыДанных.Вставить("ЗаказНаПеремещение", ДокументСсылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
        Возврат ДокументСсылка;
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаказНаПеремещение.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ЗаказКлиента.ПустаяСсылка();
    КонецПопытки; 

КонецФункции // СоздатьЗаказНаПеремещениеПодСборку()

Функция ПолучитьСтруктуруПараметровДокументаЗаказНаПеремещения(ПараметрыДанных)

	СтруктураПараметров = git_Templates.ПолучитьШаблонЗаказНаПеремещение();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ПараметрыДанных,,"Товары");
	СтруктураПараметров.Вставить("СкладОтправитель",ПараметрыДанных.СкладОжидания);
	СтруктураПараметров.Вставить("СкладПолучатель",ПараметрыДанных.Склад);
	СтруктураПараметров.Вставить("Подразделение",ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	СтруктураПараметров.Вставить("МаксимальныйКодСтроки",1);
	СтруктураПараметров.Вставить("Ответственный",ПараметрыСеанса.ТекущийПользователь);
	СтруктураПараметров.Вставить("ИспользуетсяОбособленноеОбеспечение", Истина);
	СтруктураПараметров.Вставить("Комментарий",НСтр("ru = 'Заказ на перемещения под сборку'"));
		
	ТоварыТЗ = СтруктураПараметров.Товары;
	ТоварыТЗ.Очистить();
	
	КодСтроки = 1;
	Для каждого Строка  Из ПараметрыДанных.ЗаказКлиента.Товары Цикл
		Если 	Строка.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
			НоваяСтрока 					= ТоварыТЗ.Добавить();
			НоваяСтрока.НачалоОтгрузки 		= ТекущаяДата();
			НоваяСтрока.ОкончаниеПоступления= ТекущаяДата();
			НоваяСтрока.КодСтроки 			= КодСтроки;
			НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
			НоваяСтрока.Упаковка 			= Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.Количество 			= Строка.Количество;
			НоваяСтрока.КоличествоУпаковок 	= Строка.КоличествоУпаковок;
			//НоваяСтрока.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.ПодЗаказ;
			Если НЕ ПараметрыДанных.ЗаказКлиента.Пустая() Тогда
			    НоваяСтрока.Назначение         	= ПолучитьНазначение(ПараметрыДанных.ЗаказКлиента);
			КонецЕсли;
			КодСтроки = КодСтроки + 1;
		КонецЕсли;
	КонецЦикла; 
                    	
	СтруктураПараметров.Вставить("Товары", ТоварыТЗ); 
	Возврат СтруктураПараметров;    
КонецФункции // ПолучитьСтруктуруПараметровДокументаЗаказНаПеремещения()

Функция ПолучитьНазначение(ЗаказНаПеремещение)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.Назначения 
	|ГДЕ
	|	Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ",ЗаказНаПеремещение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(),Выборка.Ссылка, Справочники.Назначения.ПустаяСсылка()); 

КонецФункции // ПолучитьНазначение()
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполненияДанных

Процедура ПроверитьРеквизитФормы(ИмяРеквизита,СтруктураПараметров, СтруктураОшибок)
    Перем ДанныеДляПроверки; 
    Если СтруктураПараметров.Свойство(ИмяРеквизита, ДанныеДляПроверки) Тогда
		Если ЗначениеЗаполнено(ДанныеДляПроверки) =ЛОЖЬ  Тогда
            СообщенияОбОшибке = НСтр("ru='Реквизит формы %ИмяРеквизит% незаполнен.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ИмяРеквизит%",ИмяРеквизита);
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке,,ИмяРеквизита);
            СтруктураОшибок.Вставить(ИмяРеквизита,СообщенияОбОшибке);
        КонецЕсли;
	Иначе
		СообщенияОбОшибке = НСтр("ru='Реквизит формы %ИмяРеквизит% не найден.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ИмяРеквизит%",ИмяРеквизита);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке,,ИмяРеквизита);
        СтруктураОшибок.Вставить(ИмяРеквизита,СообщенияОбОшибке);		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСерийныйНомерДляОтмениСборки(НоменклатураСборка)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.СерийныеНомераНоменклатуры
	                      |ГДЕ
	                      |	Код = &Код");
						  
	Запрос.УстановитьПараметр("Код", "Зібрання відмінено");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыДаных = Новый Структура;
		ПараметрыДаных.Вставить("Код", "Зібрання відмінено");
		ПараметрыДаных.Вставить("Владелец", НоменклатураСборка);
		Возврат СоздатьСерийныйНомерНоменклатуры(ПараметрыДаных);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка

КонецФункции // ПолучитьСерийныйНомерДляОтмениСборки()

Функция ОтменитьСтрокиВЗаказеКлиентуПриОтменеСборки(ЗаказКлиента)

	ОбъектЗаказ = ЗаказКлиента.ПолучитьОбъект();
	Товары		= ОбъектЗаказ.Товары;
	
	ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("adddd602-248b-11e4-80d4-001e676b0175"));
	
	Для каждого СтрокаТовары Из Товары Цикл
		Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
			Если СтрокаТовары.ОтменитьЗаказПодЗаказ = Ложь Тогда
				СтрокаТовары.ОтменитьЗаказПодЗаказ = Истина;
			КонецЕсли;
		Иначе
			Если СтрокаТовары.Отменено = Ложь Тогда
				СтрокаТовары.Отменено 		= Истина;
				СтрокаТовары.ПричинаОтмены  = ПричинаОтмены;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	
	Попытка
		ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение);   			
	Исключение
	    ВызватьИсключение ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ОтменитьСтрокиВЗаказеКлиентуПриОтменеСборки()

#КонецОбласти

#КонецОбласти


#Область БизнесПроцессПеремещениеТоваров

Функция СоздатьБизнесПроцессПеремещение(ПараметрыДанных) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СкладОтправитель = ПараметрыДанных.СкладОтправитель;
	СкладПолучатель = ПараметрыДанных.СкладПолучатель;
	ТранзитныйСклад = ВыполнитьРасчетДоставкиНаСервере(ПараметрыДанных);	
 	Если ТранзитныйСклад.Пустая() = Истина Тогда
		
		Перемещение = СоздатьПеремещение(ПараметрыДанных);         
		СтруктураВозврата.Вставить("Перемещение", Перемещение);
		
	Иначе
		
		ПараметрыДанных.Вставить("СкладОтправитель", СкладОтправитель);
		ПараметрыДанных.Вставить("СкладПолучатель", ТранзитныйСклад);
		Перемещение = СоздатьПеремещение(ПараметрыДанных);
		
		ПараметрыДанных.Вставить("СкладОтправитель", ТранзитныйСклад);
		ПараметрыДанных.Вставить("СкладПолучатель", СкладПолучатель);
		ПараметрыДанных.Вставить("ЖелаемаяДатаПоступления", ТекущаяДата() + 86400 * 7);
		ПараметрыДанных.Вставить("МаксимальныйКодСтроки", ПараметрыДанных.Товары[0].КодСтроки);
		ПараметрыДанных.Вставить("Статус", Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
		ЗаказНаПеремещение = СоздатьЗаказНаПеремещение(ПараметрыДанных);
		
		СтруктураВозврата.Вставить("Перемещение", Перемещение);
        СтруктураВозврата.Вставить("ЗаказНаПеремещение", ЗаказНаПеремещение);
		
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции // СоздатьБизнесПроцессПеремещение()

Функция СоздатьПеремещение(СтруктураПараметров)
	
	СтруктураОшибок = Новый Структура;
	
    ДокументПеремещение = git_Objcon.СоздатьДокумент("ПеремещениеТоваров", СтруктураПараметров, СтруктураОшибок); 
    Если СтруктураОшибок.Количество() > 0 Тогда
		git_Objcon.ЗафиксироватьОшибкиВЖР("СозданиеПеремещенияТоваров", СтруктураОшибок, Истина);
	КонецЕсли;
	
	Возврат ДокументПеремещение;
    
КонецФункции // СоздатьПеремещение()

Функция СоздатьЗаказНаПеремещение(СтруктураПараметров)
	
	СтруктураОшибок = Новый Структура();

	ДокументЗаказНаПеремещение = git_Objcon.СоздатьДокумент("ЗаказНаПеремещение", СтруктураПараметров, СтруктураОшибок); 
    Если СтруктураОшибок.Количество() > 0 Тогда
		git_Objcon.ЗафиксироватьОшибкиВЖР("СозданиеЗаказПеремещенияТоваров", СтруктураОшибок, Истина);
	КонецЕсли;
	
	Возврат ДокументЗаказНаПеремещение;
	 
КонецФункции // СоздатьЗаказНаПеремещение()

Функция ВыполнитьРасчетДоставкиНаСервере(ПараметрыДанных) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаТранзитногоСклада();
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДата());	
	Запрос.УстановитьПараметр("СкладОтправитель", ПараметрыДанных.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", ПараметрыДанных.СкладПолучатель);
	РезультатПакета = Запрос.ВыполнитьПакет();	
	
	Выборка = РезультатПакета[4].Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли; 
	
	Выборка = РезультатПакета[13].Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СкладТранзит;
	КонецЕсли;  
	
КонецФункции // ВыполнитьРасчетДоставкиНаСервере()

Функция ПолучитьТекстЗапросаТранзитногоСклада()

	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Ссылка			КАК Склад,
		|	Представление   КАК Представление
		|ПОМЕСТИТЬ АдресаСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ПОМЕСТИТЬ МаршрутыОтОтправителя	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки
		|ГДЕ
		|	Склад = &СкладОтправитель
        |
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладПолучатель  = &СкладПолучатель
		|И	СкладОтправитель = &СкладОтправитель	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ПОМЕСТИТЬ МаршрутыКПолучателю
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СписокАдресов
		|ГДЕ
		|	ГородСклад = &СкладПолучатель
        |
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Ссылка КАК Маршрут
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладПолучатель  = &СкладПолучатель
		|И	СкладОтправитель = &СкладОтправитель
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	&СкладОтправитель								КАК СкладОтправитель,
		|	&СкладПолучатель								КАК СкладПолучатель,
		|	МаршрутыКПолучателю.Маршрут 					КАК Маршрут,
		|	МаршрутыКПолучателю.Маршрут.КалендарьМаршрута 	КАК КалендарьМаршрута,
		|	
		|	IsNull(СкладыОтгрузки.ПН, СкладыОтгрузкиРезерв.ПН) КАК ПН,
		|	IsNull(СкладыОтгрузки.ВТ, СкладыОтгрузкиРезерв.ВТ) КАК ВТ,
		|	IsNull(СкладыОтгрузки.СР, СкладыОтгрузкиРезерв.СР) КАК СР,
		|	IsNull(СкладыОтгрузки.ЧТ, СкладыОтгрузкиРезерв.ЧТ) КАК ЧТ,
		|	IsNull(СкладыОтгрузки.ПТ, СкладыОтгрузкиРезерв.ПТ) КАК ПТ,
		|	IsNull(СкладыОтгрузки.СБ, СкладыОтгрузкиРезерв.СБ) КАК СБ,
		|	IsNull(СкладыОтгрузки.ВС, СкладыОтгрузкиРезерв.ВС) КАК ВС,
		|	
		|	IsNull(СкладыОтгрузки.ВремяВыездаПН, СкладыОтгрузкиРезерв.ВремяВыездаПН) КАК ВремяВыездаПН,
		|	IsNull(СкладыОтгрузки.ВремяВыездаВТ, СкладыОтгрузкиРезерв.ВремяВыездаВТ) КАК ВремяВыездаВТ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаСР, СкладыОтгрузкиРезерв.ВремяВыездаСР) КАК ВремяВыездаСР,
		|	IsNull(СкладыОтгрузки.ВремяВыездаЧТ, СкладыОтгрузкиРезерв.ВремяВыездаЧТ) КАК ВремяВыездаЧТ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаПТ, СкладыОтгрузкиРезерв.ВремяВыездаПТ) КАК ВремяВыездаПТ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаСБ, СкладыОтгрузкиРезерв.ВремяВыездаСБ) КАК ВремяВыездаСБ,
		|	IsNull(СкладыОтгрузки.ВремяВыездаВС, СкладыОтгрузкиРезерв.ВремяВыездаВС) КАК ВремяВыездаВС
		|	
		|ПОМЕСТИТЬ МаршрутПрямойДоставки
		|ИЗ
		|	МаршрутыКПолучателю КАК МаршрутыКПолучателю
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителя КАК МаршрутыОтОтправителя
		|ПО МаршрутыОтОтправителя.Маршрут = МаршрутыКПолучателю.Маршрут
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
		|ПО	АдресаСкладаПолучателя.Склад = &СкладПолучатель 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
		|ПО	АдресаСкладаОтправителя.Склад = &СкладОтправитель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки 
		|ПО	СкладыОтгрузки.Ссылка = МаршрутыКПолучателю.Маршрут	
		|И	СкладыОтгрузки.Склад  = &СкладОтправитель
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузкиРезерв 
		|ПО	СкладыОтгрузкиРезерв.Ссылка = МаршрутыКПолучателю.Маршрут	
		|И	СкладыОтгрузкиРезерв.Склад  = &СкладПолучатель
        |
		|ГДЕ
		|	АдресаСкладаПолучателя.Представление <> АдресаСкладаОтправителя.Представление		 
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МаршрутПрямойДоставки.СкладОтправитель,
		|	МаршрутПрямойДоставки.СкладПолучатель,
		|	МаршрутПрямойДоставки.Маршрут,
		|	//МаршрутПрямойДоставки.КалендарьМаршрута, 
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафики.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыезда
		|ИЗ
		|	МаршрутПрямойДоставки КАК МаршрутПрямойДоставки
		|	
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ПО	КалендарныеГрафики.Календарь 	= МаршрутПрямойДоставки.КалендарьМаршрута
		|И	КалендарныеГрафики.ДатаГрафика >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
		|И	КалендарныеГрафики.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.СР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.СБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутПрямойДоставки.ВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
        |
		|ГДЕ
		|	&ДатаСеанса < КалендарныеГрафики.ДатаГрафика	
		|ИЛИ
		|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|ИЛИ
		|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика)
		|										КОГДА 1
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаПН
		|										КОГДА 2
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаВТ
		|										КОГДА 3
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаСР
		|										КОГДА 4
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаЧТ
		|										КОГДА 5
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаПТ
		|										КОГДА 6
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаСБ
		|										КОГДА 7
		|										ТОГДА МаршрутПрямойДоставки.ВремяВыездаВС
		|									КОНЕЦ
		|								) 	
		|	)		
        |
		|СГРУППИРОВАТЬ ПО
		|	МаршрутПрямойДоставки.СкладОтправитель,
		|	МаршрутПрямойДоставки.СкладПолучатель,
		|	МаршрутПрямойДоставки.Маршрут
		|	//,МаршрутПрямойДоставки.КалендарьМаршрута
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыОтОтправителя;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыКПолучателю;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутПрямойДоставки;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СкладыОтгрузки.Ссылка 										КАК МаршрутТранзит,
		|	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) 	КАК СкладТранзит
		|ПОМЕСТИТЬ МаршрутыОтОтправителяТранзит	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
		|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
		|И  ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &СкладПолучатель
		|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &СкладОтправитель
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
		|ПО ДоступныеСклады.Склад = СкладыОтгрузки.Ссылка
		|И  ДоступныеСклады.Транзитный
        |
		|ГДЕ
		|	СкладыОтгрузки.Склад = &СкладОтправитель	
		|	
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Ссылка 			КАК МаршрутТранзит,
		|	СкладПолучатель КАК СкладТранзит
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладОтправитель = &СкладОтправитель	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	&СкладОтправитель										КАК СкладОтправитель,
		|	СкладыОтгрузки.Склад									КАК СкладТранзит,
		|	&СкладПолучатель										КАК СкладПолучатель,
		|	МаршрутОтОтправителя.МаршрутТранзит						КАК МаршрутОтОтправителя,
		|	МаршрутОтОтправителя.МаршрутТранзит.КалендарьМаршрута	КАК КалендарьМаршрутаОтОтправителя,
		|	СкладыОтгрузки.Ссылка 									КАК МаршрутКПолучателю,
		|	СкладыОтгрузки.Ссылка.КалендарьМаршрута 				КАК КалендарьМаршрутаКПолучателю,
		|	
		|	СкладыТранзита.ПН,
		|	СкладыТранзита.ВТ,
		|	СкладыТранзита.СР,
		|	СкладыТранзита.ЧТ,
		|	СкладыТранзита.ПТ,
		|	СкладыТранзита.СБ,
		|	СкладыТранзита.ВС,
		|	
		|	СкладыТранзита.ВремяВыездаПН,
		|	СкладыТранзита.ВремяВыездаВТ,
		|	СкладыТранзита.ВремяВыездаСР,
		|	СкладыТранзита.ВремяВыездаЧТ,
		|	СкладыТранзита.ВремяВыездаПТ,
		|	СкладыТранзита.ВремяВыездаСБ,
		|	СкладыТранзита.ВремяВыездаВС,
		|	
		|	СкладыОтгрузки.ПН 				КАК тПН,
		|	СкладыОтгрузки.ВТ 				КАК тВТ,
		|	СкладыОтгрузки.СР 				КАК тСР,
		|	СкладыОтгрузки.ЧТ 				КАК тЧТ,
		|	СкладыОтгрузки.ПТ 				КАК тПТ,
		|	СкладыОтгрузки.СБ 				КАК тСБ,
		|	СкладыОтгрузки.ВС 				КАК тВС,
		|	
		|	СкладыОтгрузки.ВремяВыездаПН 	КАК тВремяВыездаПН,
		|	СкладыОтгрузки.ВремяВыездаВТ 	КАК тВремяВыездаВТ,
		|	СкладыОтгрузки.ВремяВыездаСР 	КАК тВремяВыездаСР,
		|	СкладыОтгрузки.ВремяВыездаЧТ 	КАК тВремяВыездаЧТ,
		|	СкладыОтгрузки.ВремяВыездаПТ 	КАК тВремяВыездаПТ,
		|	СкладыОтгрузки.ВремяВыездаСБ 	КАК тВремяВыездаСБ,
		|	СкладыОтгрузки.ВремяВыездаВС 	КАК тВремяВыездаВС
		|	
		|ПОМЕСТИТЬ МаршрутыКПолучателюТранзит	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителяТранзит КАК МаршрутОтОтправителя
		|ПО МаршрутОтОтправителя.СкладТранзит = СкладыОтгрузки.Склад
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
		|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
		|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) = &СкладПолучатель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита 
		|ПО	СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит	
		|И	СкладыТранзита.Склад  = &СкладОтправитель
        |
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
		|ПО	АдресаСкладаПолучателя.Склад = &СкладПолучатель
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаТранзита 
		|ПО	АдресаСкладаТранзита.Склад = СкладыОтгрузки.Склад 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
		|ПО	АдресаСкладаОтправителя.Склад = &СкладОтправитель 
        |
		|ГДЕ
		|	АдресаСкладаОтправителя.Представление <> АдресаСкладаПолучателя.Представление
		|И   АдресаСкладаОтправителя.Представление <> АдресаСкладаТранзита.Представление 	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	МаршрутыКПолучателюТранзит.СкладТранзит, 
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафикиОтправителя.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыездаОтОтправителя
		|ПОМЕСТИТЬ ТаблицаПрибытияНаТранзитныйСклад
		|ИЗ
		|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
		|	
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиОтправителя
		|ПО	КалендарныеГрафикиОтправителя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаОтОтправителя
		|И	КалендарныеГрафикиОтправителя.ДатаГрафика  >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
		|И	КалендарныеГрафикиОтправителя.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.СР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.СБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
        |
		|ГДЕ
		|	&ДатаСеанса < КалендарныеГрафикиОтправителя.ДатаГрафика	
		|ИЛИ
		|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|ИЛИ
		|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|										КОГДА 1
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|										КОГДА 2
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|										КОГДА 3
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|										КОГДА 4
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|										КОГДА 5
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|										КОГДА 6
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|										КОГДА 7
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|									КОНЕЦ
		|								) 	
		|	)		
        |
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	МаршрутыКПолучателюТранзит.СкладТранзит
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
		|	
		|	МаршрутыКПолучателюТранзит.СкладТранзит,
		|	
		|	МаршрутыКПолучателюТранзит.СкладПолучатель,
		|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю,
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафикиПолучателя.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыездаКПолучателю
		|ПОМЕСТИТЬ ВариантыТранзитов		
		|ИЗ
		|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрибытияНаТранзитныйСклад КАК ТаблицаПрибытияНаТранзитныйСклад
		|ПО	ТаблицаПрибытияНаТранзитныйСклад.МаршрутОтОтправителя 	= МаршрутыКПолучателюТранзит.МаршрутОтОтправителя
		|И	ТаблицаПрибытияНаТранзитныйСклад.СкладТранзит 			= МаршрутыКПолучателюТранзит.СкладТранзит
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиПолучателя
		|ПО	КалендарныеГрафикиПолучателя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаКПолучателю
		|И	КалендарныеГрафикиПолучателя.ДатаГрафика  >= НачалоПериода(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя, День)
		|И	КалендарныеГрафикиПолучателя.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тСР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тСБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
        |
		|ГДЕ
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя < КалендарныеГрафикиПолучателя.ДатаГрафика	
		|ИЛИ
		|	ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																					КОГДА 1
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																					КОГДА 2
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																					КОГДА 3
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																					КОГДА 4
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																					КОГДА 5
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																					КОГДА 6
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																					КОГДА 7
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																				КОНЕЦ
		|																			 )
		|ИЛИ
		|	(ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																					КОГДА 1
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																					КОГДА 2
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																					КОГДА 3
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																					КОГДА 4
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																					КОГДА 5
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																					КОГДА 6
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																					КОГДА 7
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																				КОНЕЦ
		|																			 )
		|	И МИНУТА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																							КОГДА 1
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																							КОГДА 2
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																							КОГДА 3
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																							КОГДА 4
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																							КОГДА 5
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																							КОГДА 6
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																							КОГДА 7
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																						КОНЕЦ
		|																					) 	
		|	)		
        |
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
		|	
		|	МаршрутыКПолучателюТранзит.СкладТранзит,
		|	
		|	МаршрутыКПолучателюТранзит.СкладПолучатель,
		|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	МИНИМУМ(ДатаВремяВыездаКПолучателю) КАК ДатаВремяВыездаКПолучателю
		|ПОМЕСТИТЬ КраткаяДоставкаТранзита
		|ИЗ
		|	ВариантыТранзитов
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ВариантыТранзитов.СкладОтправитель,
		|	ВариантыТранзитов.МаршрутОтОтправителя,
		|	ВариантыТранзитов.ДатаВремяВыездаОтОтправителя,
		|	ВариантыТранзитов.СкладТранзит,
		|	ВариантыТранзитов.СкладПолучатель,
		|	ВариантыТранзитов.МаршрутКПолучателю,
		|	ВариантыТранзитов.ДатаВремяВыездаКПолучателю		
		|ИЗ
		|	ВариантыТранзитов КАК ВариантыТранзитов
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КраткаяДоставкаТранзита КАК КраткаяДоставкаТранзита
		|ПО КраткаяДоставкаТранзита.ДатаВремяВыездаКПолучателю = ВариантыТранзитов.ДатаВремяВыездаКПолучателю
		|; 
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВариантыТранзитов;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КраткаяДоставкаТранзита; 		
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ АдресаСкладов;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыОтОтправителяТранзит;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МаршрутыКПолучателюТранзит;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПрибытияНаТранзитныйСклад;
		////////////////////////////////////////////////////////////////////////////////	
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаТранзитногоСклада()
	
#КонецОбласти 


#Область БизнесПроцесВозвратОтКлиентаИПереприйомНаСервере

Функция  ВозвратОтКлиентаИПереприйомНаСервере(ЭтаФорма,Метосрасположение,Отказ,СтруктураПараметров = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СтруктураОшибок = Новый Структура();
	ЗаявкаСЦ 		= ЭтаФорма.Объект.Ссылка; 
	Комментарий 	= НСтр("ru = 'По супер - кнопке «Возврат от клиента и переприём». '");	
	
	НачатьТранзакцию();
	
	ВозвратТоваровОтКлиента = 	СоздатьВозвратТоваровОтКлиента(ЗаявкаСЦ, СтруктураОшибок, ТекущаяДата(), Комментарий);	
	Если ВозвратТоваровОтКлиента.Пустая() Тогда
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗаявкаСЦ.Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Истина Тогда
		ПриходнойОрдерНаТовары = СоздатьПриходныйОрдерНаТовары(ЗаявкаСЦ, ВозвратТоваровОтКлиента,СтруктураОшибок);
		Если ПриходнойОрдерНаТовары.Пустая() Тогда
			Отказ = Истина;
			ОтменитьТранзакцию();  
			Возврат Неопределено;
		КонецЕсли; 	
	КонецЕсли;
	
	ДокументОбъект = ЭтаФорма.Объект;
	
	ПараметрыЭтапаПереприем = Новый Структура();
	ПараметрыЭтапаПереприем.Вставить("Период"			,ТекущаяДата()-2);
	ПараметрыЭтапаПереприем.Вставить("Комментарий"		,НСтр("ru = 'Возврат от клента и переприйомка.'"));
	ПараметрыЭтапаПереприем.Вставить("ЭтапРаботы"		,Справочники.ГНАТ_ЭтапыРаботы.ВозвратОтКлиентаИПереприйом);
	ПараметрыЭтапаПереприем.Вставить("Ответственный"	,ПараметрыСеанса.ТекущийПользователь);
	ПараметрыЭтапаПереприем.Вставить("ДанныеЗаписаны"	,1);
		
	ПараметрыЭтапаВыдано = Новый Структура();
	ПараметрыЭтапаВыдано.Вставить("Период"			,ТекущаяДата());
	ПараметрыЭтапаВыдано.Вставить("Комментарий"		,НСтр("ru = 'Возврат от клента и переприйомка. Видати заміну або гроші'"));
	ПараметрыЭтапаВыдано.Вставить("ЭтапРаботы"		,Справочники.ГНАТ_ЭтапыРаботы.Выдано);
	ПараметрыЭтапаВыдано.Вставить("Ответственный"	,ПараметрыСеанса.ТекущийПользователь);
	ПараметрыЭтапаВыдано.Вставить("ДанныеЗаписаны"	,1);
	
	ДокументЗСЦОбъект = ЗаявкаСЦ.ПолучитьОбъект();
	ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументЗСЦОбъект,ПараметрыЭтапаПереприем);
	ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументЗСЦОбъект,ПараметрыЭтапаВыдано); 
	
	Попытка
		ДокументЗСЦОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаявкаСЦ. %ОписаниеОшибки%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ОписаниеОшибки%",ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
		ОтменитьТранзакцию(); 
		Отказ=Истина;
		Возврат Неопределено;
	КонецПопытки;  

	НоваяЗаявкаЗСЦ = ПереприйнятьЗаявкуНаНашеПредприятия(ЗаявкаСЦ,Неопределено,Метосрасположение,СтруктураОшибок);
	Если НоваяЗаявкаЗСЦ.Пустая() Тогда
		Отказ = Истина;
		УдалитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъект,ПараметрыЭтапаВыдано);
		УдалитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъект,ПараметрыЭтапаПереприем);
		ОтменитьТранзакцию();  
		Возврат Неопределено;
	КонецЕсли;  
	
	ЗафиксироватьТранзакцию(); 
	
#Область ВзаимодействияПоЗаявкеСЦ
	СформироватьВзаимодействияПоЭтапахЗСЦ(СтруктураПараметров, ДокументЗСЦОбъект.Ссылка);
#КонецОбласти	

	Возврат  НоваяЗаявкаЗСЦ;
	
КонецФункции
 
Функция  ПереприйомТовараЗСЦ(ЭтаФорма, Склад, Метосрасположение, Отказ, СтруктураПараметров = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаявкаСЦ = ЭтаФорма.Объект.Ссылка;
	СтруктураОшибок = Новый Структура();
	НачатьТранзакцию();
	
		ДокументОбъект = ЭтаФорма.Объект;
		
		ПараметрыЭтапаПереприем = Новый Структура();
		ПараметрыЭтапаПереприем.Вставить("Период"			,ТекущаяДата()-2);
		ПараметрыЭтапаПереприем.Вставить("Комментарий"		,НСтр("ru = 'Возврат от клента и переприйомка.'"));
		ПараметрыЭтапаПереприем.Вставить("ЭтапРаботы"		,Справочники.ГНАТ_ЭтапыРаботы.ВозвратОтКлиентаИПереприйом);
		ПараметрыЭтапаПереприем.Вставить("Ответственный"	,ПараметрыСеанса.ТекущийПользователь);
		ПараметрыЭтапаПереприем.Вставить("ДанныеЗаписаны"	,1);
		
		ПараметрыЭтапаВыдано = Новый Структура();
		ПараметрыЭтапаВыдано.Вставить("Период"			,ТекущаяДата());
		ПараметрыЭтапаВыдано.Вставить("Комментарий"		,НСтр("ru = 'Возврат от клента и переприйомка. Видати заміну або гроші'"));
		ПараметрыЭтапаВыдано.Вставить("ЭтапРаботы"		,Справочники.ГНАТ_ЭтапыРаботы.Выдано);
		ПараметрыЭтапаВыдано.Вставить("Ответственный"	,ПараметрыСеанса.ТекущийПользователь);
		ПараметрыЭтапаВыдано.Вставить("ДанныеЗаписаны"	,1);

		
		ДокументЗСЦОбъект = ЗаявкаСЦ.ПолучитьОбъект();
		ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументЗСЦОбъект,ПараметрыЭтапаПереприем); 
		ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументЗСЦОбъект,ПараметрыЭтапаВыдано); 
		
		Попытка
			ДокументЗСЦОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаявкаСЦ. %ОписаниеОшибки%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ОписаниеОшибки%",ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
			ОтменитьТранзакцию(); 
			Отказ=Истина;
			Возврат Неопределено;
		КонецПопытки;   		
			
		НоваяЗаявкаЗСЦ = ПереприйнятьЗаявкуНаНашеПредприятия(ЗаявкаСЦ,Склад,Метосрасположение,СтруктураОшибок);
		Если НоваяЗаявкаЗСЦ.Пустая() Тогда
			Отказ = Истина;
			УдалитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъект,ПараметрыЭтапаВыдано);
			УдалитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъект,ПараметрыЭтапаПереприем);
			ОтменитьТранзакцию();  
			Возврат Неопределено;
		КонецЕсли; 
		
	ЗафиксироватьТранзакцию(); 
	
#Область ВзаимодействияПоЗаявкеСЦ
	СформироватьВзаимодействияПоЭтапахЗСЦ(СтруктураПараметров, ДокументЗСЦОбъект.Ссылка);
#КонецОбласти	
	
	Возврат  НоваяЗаявкаЗСЦ;
КонецФункции

#Область СлужебныеПроцедурыИФункции

Функция ПереприйнятьЗаявкуНаНашеПредприятия(ЗаявкаСЦ, Склад = Неопределено, Метосрасположение,СтруктураОшибок)
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = git_Templates.ПолучитьШаблонЗаявкаСервичногоЦентра();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ЗаявкаСЦ,,"Дата,ЗаказчикРемонта,НомерТелефона,ХодРабот,ОбъектОснование"); 

	Если Склад <> Неопределено И Склад.Пустая() = ЛОЖЬ Тогда
		СкладЗСЦ = Склад; 
	Иначе
		СкладЗСЦ = ЗаявкаСЦ.Склад;		
	КонецЕсли;
	
	Комментарий = НСтр("ru = 'По супер - кнопке «Возврат от клиента и переприём». '");	
	
	ЗаказчикНаРемонт = Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПолучитьПартнераПоСкладу(СкладЗСЦ);
	СтруктураПараметров.Вставить("Дата"						,ТекущаяДата());
	СтруктураПараметров.Вставить("РеализацияТоваровУслуг"	,ЗаявкаСЦ.РеализацияТоваровУслуг);
	СтруктураПараметров.Вставить("ДатаПринятия"				,ТекущаяДата());
	СтруктураПараметров.Вставить("ЗаказчикРемонта"			,ЗаказчикНаРемонт);
	СтруктураПараметров.Вставить("ОбъектОснование"			,ЗаявкаСЦ);
	СтруктураПараметров.Вставить("НомерТелефона"			,ПолучитьТелефонЗаказчика(ЗаказчикНаРемонт));
	СтруктураПараметров.Вставить("Склад"					,СкладЗСЦ);
	СтруктураПараметров.Вставить("ЕкспертПрийомщик"			,ПараметрыСеанса.ТекущийПользователь);
	СтруктураПараметров.Вставить("КомментарийПоЗСЦ"			,Комментарий);


	ХодРабот = СтруктураПараметров.ХодРабот;
	Строка 					= ХодРабот.Добавить();
	Строка.Период 			= ТекущаяДата();
	Строка.Комментарий 		= Комментарий;
	Строка.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	Строка.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято; 
	Строка.МесторасположениеФактическое = Метосрасположение;
	
	СтруктураПоследнийЭтапЗаявкиСЦ = ПолучитьПоследнийЭтапПередВыданоЗСЦ(ЗаявкаСЦ,Комментарий);
	Если СтруктураПоследнийЭтапЗаявкиСЦ.Свойство("ЭтапРаботы")=Истина Тогда
		ПоследнийЭтапЗаявкиСЦ = СтруктураПоследнийЭтапЗаявкиСЦ.ЭтапРаботы;
		Если ПоследнийЭтапЗаявкиСЦ <> Справочники.ГНАТ_ЭтапыРаботы.Принято Тогда
			НоваяСтрока 				= ХодРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоследнийЭтапЗаявкиСЦ);
			НоваяСтрока.Период 			= ТекущаяДата()+1;
		КонецЕсли;    	
	КонецЕсли;	
		
	ДокументОбъект    	= git_Objcon.СоздатьДокумент("ГНАТ_ЗаявкаСервисногоЦентра",СтруктураПараметров,СтруктураОшибок);     
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось документ ЗаявкаСЦ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументСсылка = ДокументОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
        Возврат ДокументСсылка;
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ЗаявкаСЦ. %ОписаниеОшибки%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ОписаниеОшибки%",ОписаниеОшибки());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
    КонецПопытки; 

КонецФункции

Функция ПолучитьПоследнийЭтапПередВыданоЗСЦ(ЗаявкаСЦ, Комментарий)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтапРаботы"					,Справочники.ГНАТ_ЭтапыРаботы.Принято);
	СтруктураПараметров.Вставить("МесторасположениеФактическое"	,Справочники.ГНАТ_МесторасположениеВСервисе.ПустаяСсылка());
	СтруктураПараметров.Вставить("Ответственный"				,ПараметрыСеанса.ТекущийПользователь);
	СтруктураПараметров.Вставить("ПартнерАСЦ"					,Справочники.Партнеры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Комментарий"					,Комментарий); 
	
	СписокЭтапов = Новый СписокЗначений;
	СписокЭтапов.Добавить(Справочники.ГНАТ_ЭтапыРаботы.ВозвратОтКлиентаИПереприйом);
	СписокЭтапов.Добавить(Справочники.ГНАТ_ЭтапыРаботы.Выдано);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоследнийЭтапЗСЦ();
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра"	,ЗаявкаСЦ);
	Запрос.УстановитьПараметр("СписокЭтапов"			,СписокЭтапов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка);	
		СтруктураПараметров.Комментарий = Формат(Выборка.Период,"ДЛФ=DT")+" "+Комментарий+Выборка.Комментарий;
	КонецЕсли;
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьПоследнийЭтапЗСЦ()

Функция ПолучитьТекстЗапросаПоследнийЭтапЗСЦ()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.МесторасположениеФактическое,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Ответственный,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ПартнерАСЦ,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Комментарий,
	               |	ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.Период
	               |ИЗ
	               |	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних(
	               |			,
	               |			ЗаявкаСервисногоЦентра = &ЗаявкаСервисногоЦентра
	               |				И ЭтапРаботы НЕ В (&СписокЭтапов)) КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПоследнийЭтапЗСЦ()

Функция СоздатьВозвратТоваровОтКлиента(ЗаявкаСЦ, СтруктураОшибок, ДатаВозврата, Комментарий)
	
	Склад = ЗаявкаСЦ.Склад;
	
	СтруктураПараметров = git_Templates.ПолучитьШаблонВозвратТоваровОтКлиента();
	ПараметрыЗаполнения = ЗаполнитьРеквизитыВозвратаНаОснованииЗаявки(ЗаявкаСЦ);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПараметрыЗаполнения.Объект);
	СтруктураПараметров.Вставить("Дата"						,ДатаВозврата);
	СтруктураПараметров.Вставить("ЗаявкаСервисногоЦентра"	,ЗаявкаСЦ);
	СтруктураПараметров.Вставить("Комментарий"				,Комментарий);
	
	Если ПараметрыЗаполнения.Свойство("Товары") Тогда
		Товары = СтруктураПараметров.Товары;
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыЗаполнения.Товары);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("СерийныеНомера") Тогда
		СерийныеНомера = СтруктураПараметров.СерийныеНомера;
		НоваяСтрокаСН  = СерийныеНомера.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСН,ПараметрыЗаполнения.СерийныеНомера);	
	КонецЕсли;

	Если ПараметрыЗаполнения.Свойство("РасшифровкаПлатежа") Тогда
		РасшифровкаПлатежа = СтруктураПараметров.РасшифровкаПлатежа;
		НоваяСтрокаРП 	   = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРП,ПараметрыЗаполнения.РасшифровкаПлатежа); 
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НаОснованииЗСЦ",Истина);	
		
	ДокументОбъект = git_Objcon.СоздатьДокумент("ВозвратТоваровОтКлиента",СтруктураПараметров,СтруктураОшибок);  
	
	Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ВозвратТоваровОтКлиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПустаяСсылка();
	КонецЕсли; 
	
	ДокументОбъект.Склад = Склад;
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументСсылка = ДокументОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
        Возврат ДокументСсылка; 
	Исключение
		СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ВозвратТоваровОтКлиента. %ОписаниеОшибки%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ОписаниеОшибки%",ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
        Возврат Документы.ВозвратТоваровОтКлиента.ПустаяСсылка();
     КонецПопытки;

КонецФункции

Функция СоздатьПриходныйОрдерНаТовары(ЗаявкаСЦ,ВозвратТоваровОтКлиента,СтруктураОшибок)
	
	ДокументОбъект = git_Objcon.СоздатьДокумент("ПриходныйОрдерНаТовары",ЗаполнитьРеквизитыПриходногоОрдераНаОснованииЗаявки(ВозвратТоваровОтКлиента,ЗаявкаСЦ),СтруктураОшибок);  
	
	Если СтруктураОшибок.Количество()>0 Тогда
	    Для каждого Строка Из СтруктураОшибок Цикл
	        СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
	    КонецЦикла;
	    СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПриходныйОрдерНаТовары.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
	    Возврат Документы.ПриходныйОрдерНаТовары.ПустаяСсылка();
	КонецЕсли;  
	
	Попытка
	    ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументСсылка = ДокументОбъект.Ссылка;
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСсылка));
	    Возврат ДокументСсылка; 
	Исключение
		
	    СообщенияОбОшибке = НСтр("ru='Не удалось записать документ ПриходныйОрдерНаТовары.%ОписаниеОшибки%'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СообщенияОбОшибке = СтрЗаменить(СообщенияОбОшибке,"%ОписаниеОшибки%",ОписаниеОшибки());
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщенияОбОшибке);
	    Возврат Документы.ПриходныйОрдерНаТовары.ПустаяСсылка();
	 КонецПопытки;

КонецФункции

Функция ЗаполнитьРеквизитыВозвратаНаОснованииЗаявки(знач ЗаявкаСервисногоЦентра) Экспорт
	Результат = Новый Структура;
	
	СтруктураЗаполнения = ПодготовитьСтруктуруЗаполненияВозврата();
	РезультатПоиска 	= ВыполнитьПоискПоСтруктуре(ЗаявкаСервисногоЦентра);
	Товары				= ПодготовитьСтруктуруТоварыДляВозврата();
	СерийныеНомера		= ПодготовитьТаблицуСерийныхНомеровДляВозврата();
	РасшифровкаПлатежа	= ПодготовитьТаблицуРасшифровкаПлатежа();
	
	Если Не ЗначениеЗаполнено(РезультатПоиска.Реализация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соглашение = РезультатПоиска.Реализация.Соглашение;
	
	Если РезультатПоиска.Партнер = ЗаявкаСервисногоЦентра.ЗаказчикРемонта Тогда
		Партнер	   = РезультатПоиска.Партнер;
		Контрагент = РезультатПоиска.Реализация.Контрагент;
		Если ЗначениеЗаполнено(РезультатПоиска.Реализация.Договор) Тогда
			СтруктураЗаполнения.Вставить("Договор", РезультатПоиска.Реализация.Договор);
		КонецЕсли;
	Иначе
		
		Партнер	   = ЗаявкаСервисногоЦентра.ЗаказчикРемонта;   		
		Контрагент = ПолучитьКонтаргентаДляВозврата(Партнер);
		Соглашение = ПолучитьСоглашениеДляВозврата(Партнер, Соглашение);
	КонецЕсли;
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер, Новый Структура("ВыбранноеСоглашение", Соглашение));
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, УсловияПродаж);
	
	СтруктураЗаполнения.Вставить("Валюта", Соглашение.Валюта);
	СтруктураЗаполнения.Вставить("Партнер", Партнер);
	СтруктураЗаполнения.Вставить("Контрагент", Контрагент);
	СтруктураЗаполнения.Вставить("Соглашение", Соглашение);
	СтруктураЗаполнения.Вставить("Организация", РезультатПоиска.Реализация.Организация);
	СтруктураЗаполнения.Вставить("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	СтруктураЗаполнения.Вставить("Склад", ЗаявкаСервисногоЦентра.Склад);
	СтруктураЗаполнения.Вставить("Подразделение", ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	СтруктураЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	
	СтрокаТовары = ПолучитьСтрокуТоварыДляВозврата(РезультатПоиска.Реализация, ЗаявкаСервисногоЦентра.Номенклатура, ЗаявкаСервисногоЦентра.СерийныйНомер);
	Если СтрокаТовары = Неопределено Тогда
		
		Цена = ПолучитьЦенуВовзрата(ЗаявкаСервисногоЦентра,СтруктураЗаполнения);
		
		Товары.Номенклатура 				= ЗаявкаСервисногоЦентра.Номенклатура; 
		Товары.КоличествоУпаковок 			= 1;
		Товары.Количество 					= 1;
		Товары.Цена 						= Цена;
		Товары.Сумма 						= Цена;
		Товары.СтавкаНДС 					= ?(СтруктураЗаполнения.Соглашение.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, ЗаявкаСервисногоЦентра.Номенклатура.СтавкаНДС);
		Товары.СуммаНДС						= Ценообразование.РассчитатьСуммуНДС(Товары.Сумма, Товары.СтавкаНДС, СтруктураЗаполнения.Соглашение.ЦенаВключаетНДС);
		Товары.СуммаСНДС					= Товары.Сумма + ?(СтруктураЗаполнения.Соглашение.ЦенаВключаетНДС, 0, Товары.СуммаНДС);
		Товары.КлючСвязиСерийныхНомеров 	= 1;
		
		СтруктураЗаполнения.Вставить("ЗаявкаСервисногоЦентра", ЗаявкаСервисногоЦентра);
		
	Иначе
		Если РезультатПоиска.Партнер = ЗаявкаСервисногоЦентра.ЗаказчикРемонта Тогда
			СтруктураЗаполнения.Вставить("ДокументРеализации", РезультатПоиска.Реализация);
			СтруктураЗаполнения.Вставить("ЗаявкаСервисногоЦентра", ЗаявкаСервисногоЦентра);
		Иначе
			СтруктураЗаполнения.Вставить("ЗаявкаСервисногоЦентра", ЗаявкаСервисногоЦентра);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Товары, СтрокаТовары);
		Товары.КлючСвязиСерийныхНомеров = 1;
	КонецЕсли;
	
	Если СтруктураЗаполнения.Договор<>Неопределено Тогда
		СуммаДокумента = Товары.СуммаСНДС;
		ПолучитьРасшифровкуПлатежа(СтруктураЗаполнения,РасшифровкаПлатежа,СуммаДокумента);
		Результат.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	КонецЕсли;

	Результат.Вставить("Объект", СтруктураЗаполнения);
	
	Если РезультатПоиска.Партнер <> ЗаявкаСервисногоЦентра.ЗаказчикРемонта Тогда
		Товары.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
	Результат.Вставить("Товары", Товары);
	
	Если Не ЗаявкаСервисногоЦентра.Склад.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
	
		СерийныеНомера.СерийныйНомер 			= ЗаявкаСервисногоЦентра.СерийныйНомер;
		СерийныеНомера.КлючСвязиСерийныхНомеров = 1;
		
		Результат.Вставить("СерийныеНомера", СерийныеНомера)
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьРеквизитыВозвратаНаОснованииЗаявки()

Процедура ДобавитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъект,ПараметрыЭтапа)Экспорт
	
	НоваяСтрока = ДокументОбъект.ХодРабот.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЭтапа);
	
КонецПроцедуры

Процедура УдалитьЭтапВЗаявкуСервисногоЦентра(ДокументОбъект,ПараметрыЭтапа)
	ХодРаботы = ДокументОбъект.ХодРабот;
	ОтборСтрок = ХодРаботы.НайтиСтроки(ПараметрыЭтапа);
	Если ОтборСтрок.Количество()>0 Тогда
		ХодРаботы.Удалить(ОтборСтрок[0]);	
	КонецЕсли; 
КонецПроцедуры

#Область ВнутреннегоИспользования
	
// Только для внутреннего использования
Функция ПодготовитьСтруктуруЗаполненияВозврата()

	СтруктураЗапонения = Новый Структура;
	СтруктураЗапонения.Вставить("Партнер");
	СтруктураЗапонения.Вставить("Контрагент");
	СтруктураЗапонения.Вставить("Организация");
	СтруктураЗапонения.Вставить("Договор");
	СтруктураЗапонения.Вставить("Соглашение");
	СтруктураЗапонения.Вставить("ЗаявкаСервисногоЦентра");
	СтруктураЗапонения.Вставить("ЦенаВключаетНДС");
	СтруктураЗапонения.Вставить("Подразделение");
	СтруктураЗапонения.Вставить("Менеджер");
	СтруктураЗапонения.Вставить("НалогообложениеНДС");
	СтруктураЗапонения.Вставить("ХозяйственнаяОперация");
	СтруктураЗапонения.Вставить("ДокументРеализации");
	СтруктураЗапонения.Вставить("Валюта");
	
	Возврат СтруктураЗапонения;

КонецФункции // ПодготовитьСтруктуруЗаполненияВозврата()

// Только для внутреннего использования
Функция ПодготовитьСтруктуруТоварыДляВозврата()

	Товары = Новый Структура;
	Товары.Вставить("Номенклатура");
	Товары.Вставить("Характеристика");
	Товары.Вставить("Упаковка");
	Товары.Вставить("КоличествоУпаковок");
	Товары.Вставить("Количество");
	Товары.Вставить("Цена");
	Товары.Вставить("Сумма");
	Товары.Вставить("СтавкаНДС");
	Товары.Вставить("СуммаНДС");
	Товары.Вставить("СуммаСНДС");
	Товары.Вставить("ДокументРеализации");
	Товары.Вставить("КлючСвязиСерийныхНомеров");
	
	Возврат Товары;

КонецФункции // ПолготовитьТаблицуТоварыДляВозврата()

// Только для внутреннего использования
Функция ПодготовитьТаблицуСерийныхНомеровДляВозврата()

	СерийныеНомера = Новый Структура;
	СерийныеНомера.Вставить("СерийныйНомер");
	СерийныеНомера.Вставить("КлючСвязиСерийныхНомеров");
	
	Возврат СерийныеНомера;

КонецФункции // ПодготовитьТаблицуСериныхНомеровДляВозврата()

// Только для внутреннего использования
Функция ПодготовитьТаблицуРасшифровкаПлатежа()

	РасшифровкаПлатежа = Новый Структура;
	РасшифровкаПлатежа.Вставить("Заказ");
	РасшифровкаПлатежа.Вставить("Сумма");
	РасшифровкаПлатежа.Вставить("ВалютаВзаиморасчетов");
	РасшифровкаПлатежа.Вставить("СуммаВзаиморасчетов"); 	
	Возврат РасшифровкаПлатежа;

КонецФункции // ПодготовитьТаблицуРасшифровкаПлатежа()

// Только для внутреннего использования
Функция ПолучитьКонтаргентаДляВозврата(Партнер)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Контаргент
	                      |ИЗ
	                      |	Справочник.Контрагенты
	                      |ГДЕ
	                      |	Партнер = &Партнер
	                      |	И НЕ ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СоздатьКонтрагента(Партнер);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Контаргент;

КонецФункции // ПолучитьКонтаргентаДляВозврата()
 
// Только для внутреннего использования
Функция ПолучитьСоглашениеДляВозврата(Партнер, Соглашение)
	
	Если Соглашение.Типовое Тогда
		
		Если ЗначениеЗаполнено(Соглашение.СегментПартнеров) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Сегмент,
			                      |	Партнер
			                      |ИЗ
			                      |	РегистрСведений.ПартнерыСегмента
			                      |ГДЕ
			                      |	Сегмент = &Сегмент
			                      |	И Партнер = &Партнер");
								  
			Запрос.УстановитьПараметр("Сегмент", Соглашение.СегментПартнеров);
			Запрос.УстановитьПараметр("Партнер", Партнер);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				НаборЗаписей = РегистрыСведений.ПартнерыСегмента.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сегмент.Установить(Соглашение.СегментПартнеров);
				НаборЗаписей.Отбор.Партнер.Установить(Партнер);
				
				Запись 			= НаборЗаписей.Добавить();
				Запись.Партнер 	= Партнер;
				Запись.Сегмент 	= Соглашение.СегментПартнеров;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Соглашение;
		
	КонецЕсли;
	
	Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();

КонецФункции // ПолучитьСоглашениеДляВозврата()
  
// Только для внутреннего использования
Функция ВыполнитьПоискПоСтруктуре(ЗаявкаСервисногоЦентра)

	РезультатПоиска = Новый Структура("Партнер, Реализация");
	ОснованиеЗаявки = ЗаявкаСервисногоЦентра.ОбъектОснование;
	
	Если ТипЗнч(ОснованиеЗаявки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РезультатПоиска.Вставить("Партнер", ОснованиеЗаявки.Партнер);
		РезультатПоиска.Вставить("Реализация", ОснованиеЗаявки);
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеЗаявки) = Тип("СправочникСсылка.МестаДоставки") Тогда
		ОснованиеМеста = ОснованиеЗаявки.ДокументОснования;
		Если ТипЗнч(ОснованиеМеста) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			РезультатПоиска.Вставить("Партнер", ОснованиеМеста.Партнер);
			РезультатПоиска.Вставить("Реализация", ОснованиеМеста);
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаСервисногоЦентра.РеализацияТоваровУслуг) Тогда
		РезультатПоиска.Вставить("Партнер", ЗаявкаСервисногоЦентра.РеализацияТоваровУслуг.Партнер);
		РезультатПоиска.Вставить("Реализация", ЗаявкаСервисногоЦентра.РеализацияТоваровУслуг);
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Возврат РезультатПоиска;

КонецФункции // ВыполнитьПоискПоСтруктуре()

// Только для внутреннего использования
Функция ПолучитьСтрокуТоварыДляВозврата(РеализацияТоваров, Номенклатура, СерийныйНомер)

	Запрос = Новый Запрос("
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслугТовары.Номенклатура,
	                      |	РеализацияТоваровУслугТовары.Характеристика,
	                      |	РеализацияТоваровУслугТовары.Упаковка,
	                      |	1 КАК КоличествоУпаковок,
	                      |	1 КАК Количество,
	                      |	РеализацияТоваровУслугТовары.Цена,
	                      |	РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Сумма,
	                      |	РеализацияТоваровУслугТовары.СтавкаНДС,
	                      |	РеализацияТоваровУслугТовары.СуммаНДС / РеализацияТоваровУслугТовары.КоличествоУпаковок КАК СуммаНДС,
	                      |	РеализацияТоваровУслугТовары.СуммаСНДС / РеализацияТоваровУслугТовары.КоличествоУпаковок КАК СуммаСНДС,
						  | &ДокументОснование КАК ДокументРеализации
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                      |ГДЕ
	                      |	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	                      |	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
						  
	Запрос.УстановитьПараметр("ДокументОснование", РеализацияТоваров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка, Неопределено);

КонецФункции // ПолучитьСтрокуТоварыДляВозврата()

Функция ПолучитьЦенуВовзрата(Объект,СтруктураЗаполнения)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартнерыСегмента.Партнер
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ГДЕ
		|	ПартнерыСегмента.Сегмент = &Сегмент
		|И 	ПартнерыСегмента.Партнер = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Объект.ЗаказчикРемонта);
	Запрос.УстановитьПараметр("Сегмент", Справочники.СегментыПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор("388032f2-44e0-11e0-9f98-001517115d85")));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВидЦен = СтруктураЗаполнения.Соглашение.ВидЦен;		
	Иначе
		ВидЦен = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fc-404c-11e0-9f98-001517115d85"));	
	КонецЕсли;
	
	Возврат ПолучитьЦенуПоВиду(Объект.Номенклатура, ВидЦен)
КонецФункции // ПолучитьЦенуВовзрата()

// Только для внутреннего использования
Функция ПолучитьЦенуПоВиду(Номенклатура, ВидЦен)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Цена
	                      |ИЗ
	                      |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                      |			,
	                      |			ВидЦены = &ВидЦены
	                      |				И Номенклатура = &Номенклатура)");
						  
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦен);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Цена, 0);   
КонецФункции // СформироватьСтрокуТоварыДляВозврата()

// Только для внутреннего использования
Процедура ПолучитьРасшифровкуПлатежа(СтруктураЗаполнения,РасшифровкаПлатежа,СуммаДокумента)
	ДокументРасчета = СтруктураЗаполнения.Договор;
	
	Если ДокументРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным 
		И СтруктураЗаполнения.Свойство("ДокументРеализации")= Истина Тогда
		РасшифровкаПлатежа.Вставить("Заказ", СтруктураЗаполнения.ДокументРеализации);
		РасшифровкаПлатежа.Вставить("Сумма", СуммаДокумента);
		РасшифровкаПлатежа.Вставить("ВалютаВзаиморасчетов", ДокументРасчета.ВалютаВзаиморасчетов);
	ИначеЕсли ДокументРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
		И СтруктураЗаполнения.Свойство("ДокументРеализации")=Истина Тогда
		Если  СтруктураЗаполнения.ДокументРеализации.ЗаказКлиента =Неопределено Тогда
		     РасшифровкаПлатежа.Вставить("Заказ", СтруктураЗаполнения.ДокументРеализации);
		Иначе
			 РасшифровкаПлатежа.Вставить("Заказ", СтруктураЗаполнения.ДокументРеализации.ЗаказКлиента);
		КонецЕсли;
		РасшифровкаПлатежа.Вставить("Сумма", СуммаДокумента);
		РасшифровкаПлатежа.Вставить("ВалютаВзаиморасчетов", ДокументРасчета.ВалютаВзаиморасчетов);
	Иначе 
		РасшифровкаПлатежа.Вставить("Заказ", ДокументРасчета);
		РасшифровкаПлатежа.Вставить("Сумма", СуммаДокумента);
		РасшифровкаПлатежа.Вставить("ВалютаВзаиморасчетов", ДокументРасчета.ВалютаВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры

// Только для внутреннего использования
Функция СоздатьКонтрагента(Партнер)
	
	ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ОбъектКонтрагент.Наименование 		= Партнер.НаименованиеПолное;
	ОбъектКонтрагент.НаименованиеПолное = Партнер.НаименованиеПолное;
	ОбъектКонтрагент.ЮрФизЛицо          = Перечисления.ЮрФизЛицо.ФизЛицо;
	ОбъектКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ОбъектКонтрагент.Партнер            = Партнер;
	ОбъектКонтрагент.Записать();
	
	Возврат ОбъектКонтрагент.Ссылка;
	
КонецФункции
#КонецОбласти

Функция ЗаполнитьРеквизитыПриходногоОрдераНаОснованииЗаявки(знач ВозвратТоваровОтКлиента,знач ЗаявкаСЦ) Экспорт
	
	СтруктураПараметров = git_Templates.ПолучитьШаблонПриходныйОрдерНаТовары();
	СтруктураПараметров.Вставить("Дата",ТекущаяДата()-1);
	СтруктураПараметров.Вставить("Статус",Перечисления.СтатусыПриходныхОрдеров.Принят);
	СтруктураПараметров.Вставить("Распоряжение",ВозвратТоваровОтКлиента);
	СтруктураПараметров.Вставить("Комментарий",ВозвратТоваровОтКлиента.Комментарий);
	
	Товары = СтруктураПараметров.Товары;
	НоваяСтрока = Товары.Добавить();	
	НоваяСтрока.Номенклатура 				= ЗаявкаСЦ.Номенклатура; 
	НоваяСтрока.КоличествоУпаковок 			= 1;
	НоваяСтрока.Количество 					= 1;
	НоваяСтрока.КлючСвязиСерийныхНомеров 	= 1;
	
	Если ВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
		СтрокаСН 				= СтруктураПараметров.СерийныеНомера.Добавить();
		СтрокаСН.СерийныйНомер	= ЗаявкаСЦ.СерийныйНомер;
		СтрокаСН.КлючСвязиСерийныхНомеров = 1;  	
	КонецЕсли;
	
	Возврат  СтруктураПараметров;
КонецФункции // ЗаполнитьРеквизитыВозвратаНаОснованииЗаявки()

#КонецОбласти	
#КонецОбласти


#Область БизнесПроцессЗавершенияСборки

// Процедура завершает бизнес процесс создания сборки товаров
// на основании ЗСЦ.
// Что нужно сделать:
//  1. Отмена заказа клиента который резервировал товар под сборку.
//  2. Создать документ Сборка товаров.
//  3. Создать документ Приходный ордер на товары (если склад на использует ордерную схему для прихода).
//  4. Создать перемещение, если указано свойство «Заказ по сборку» в документе «Заказ клиента».
//  4.1. Учитывать что у нас может быть транзитное перемещение.
//
// Параметры:
//  ЗаявкаСервисногоЦентра - Документ.ГНАТ_ЗаявкаСервисногоЦентра - документ на основании которого
//  необходимо завршить сборку.
//
// Возвращаемое значение:
//  Булево - Истина, если процедура отработала успешно. Если при создании документов возникали ошибки - Ложь.
Функция ЗавершитьБизнесПроцессСборкиТоваров(ЗаявкаСервисногоЦентра) Экспорт

	Если Не ПроверкаЗаполненияДокументаЗСЦ(ЗаявкаСервисногоЦентра) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойствоВариантКомплектации 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("661818a9-c24c-11e4-80ea-001e676b0175")); // Вариант комплектации Сборки
	СвойствоДоставкаСборки			= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("be08d848-be8a-11e4-80ea-001e676b0175")); // Склад доставки сборки
	СвойствоНоменклатураПодСборку   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("980fcac5-c0b9-11e4-80ea-001e676b0175")); // Номенклатура под сборку
	
	ПакетДанных = ПолучитьДанныеДляЗаполненияСборкиПоЗСЦ(ЗаявкаСервисногоЦентра, СвойствоВариантКомплектации, СвойствоДоставкаСборки);
	
	Если ПакетДанных[0].Пустой() Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить данные по заказу клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПакетДанных[1].Пустой() Тогда
		ТекстСообщения = НСтр("ru='Не удалось получить данные табличной части «Товары» для сборки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаРеквизиты = ПакетДанных[0].Выбрать();
	ВыборкаТовары	 = ПакетДанных[1].Выбрать();
	
	ВыборкаРеквизиты.Следующий();
	
	НачатьТранзакцию();
	
	Если Не ОтменитьЗаказКлиентаПоЗСЦ(ВыборкаРеквизиты) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ДокументСборка = СоздатьДокументСборкиЗСЦ(ВыборкаРеквизиты, ВыборкаТовары);
	Если ТипЗнч(ДокументСборка) <> Тип("ДокументСсылка.СборкаТоваров") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОчиститьДопСведениеБПСборки(ВыборкаРеквизиты.ЗаказКлиента, СвойствоВариантКомплектации, "«Вариант комплектации»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ПриходныйОрдер = СоздатьПриходныйОрдерДляСборкиЗСЦ(ВыборкаРеквизиты, ДокументСборка);
	Если ТипЗнч(ПриходныйОрдер) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СоздатьПеремещениеСборки(ВыборкаРеквизиты) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОчиститьДопСведениеБПСборки(ВыборкаРеквизиты.ЗаказКлиента, СвойствоДоставкаСборки, "«Доставка сборки»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОчиститьДопСведениеБПСборки(ВыборкаРеквизиты.ЗаказКлиента, СвойствоНоменклатураПодСборку, "«Номенклатура под сборку»") Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

	Возврат Истина;
	
КонецФункции // СоздатьДокументыСборкиТоваров()

Функция ПолучитьДанныеДляЗаполненияСборкиПоЗСЦ(ЗаявкаСервисногоЦентра, СвойствоВариантКомплектации, СвойствоСкладДоставки)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаДанныеДляЗаполненияСборкиПоЗСЦ();
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра", ЗаявкаСервисногоЦентра);
	Запрос.УстановитьПараметр("СвойствоВариантКомплектации", СвойствоВариантКомплектации);
	Запрос.УстановитьПараметр("СвойствоСкладДоставки", СвойствоСкладДоставки);
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции // ПолучитьДанныеДляЗаполненияСборкиПоЗСЦ()

Функция ТекстЗапросаДанныеДляЗаполненияСборкиПоЗСЦ()

	ТекстЗапроса = "
				   // Получаем реквизиты для заполнения сборки.
				   |ВЫБРАТЬ
				   |	Заявка.Ссылка																КАК ЗаявкаСервисногоЦентра,
				   |	ВЫРАЗИТЬ(Заявка.ОбъектОснование КАК Документ.ЗаказКлиента)					КАК ЗаказКлиента,
	               |	ВЫРАЗИТЬ(Заявка.ОбъектОснование КАК Документ.ЗаказКлиента).Организация 		КАК Организация,
				   |	ВЫРАЗИТЬ(Заявка.ОбъектОснование КАК Документ.ЗаказКлиента).Подразделение 	КАК Подразделение,
	               |	Заявка.Склад																КАК Склад,
				   |	Заявка.Склад.ИспользоватьОрдернуюСхемуПриПоступлении                    	КАК ИспользоватьОрдернуюСхемуПриПоступлении,
				   |	Заявка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке                    		КАК ИспользоватьОрдернуюСхемуПриОтгрузке,
	               |	Заявка.Номенклатура															КАК Номенклатура,
	               |	ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.СобраноРазобрано) 				КАК Статус,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих) 	КАК ТипОперации,
	               |	ВЫРАЗИТЬ(&ТекущийПользователь КАК Справочник.Пользователи) 					КАК Ответственный,
	               |	1 																			КАК Количество,
	               |	1 																			КАК КоличествоУпаковок,
	               |	&ТекущаяДата 																КАК ЖелаемаяДатаПоступления,
	               |	&ТекущаяДата 																КАК НачалоСборкиРазборки,
	               |	&ТекущаяДата 																КАК ОкончаниеСборкиРазборки,
				   |	Заявка.СерийныйНомер														КАК СерийныйНомер,
				   |	ЕСТЬNULL(ВариантКомплектацииСборки.Значение, """")							КАК ВариантКомплектации,
				   |	ЕСТЬNULL(СкладДоставкиСборки.Значение, """")								КАК СкладДоставки
	               |ИЗ
	               |	Документ.ГНАТ_ЗаявкаСервисногоЦентра КАК Заявка
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ВариантКомплектацииСборки
				   |		ПО ВЫРАЗИТЬ(Заявка.ОбъектОснование КАК Документ.ЗаказКлиента) = ВЫРАЗИТЬ(ВариантКомплектацииСборки.Объект КАК Документ.ЗаказКлиента)
				   |			И ВариантКомплектацииСборки.Свойство = &СвойствоВариантКомплектации
				   |
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СкладДоставкиСборки
				   |		ПО ВЫРАЗИТЬ(ОбъектОснование КАК Документ.ЗаказКлиента) = ВЫРАЗИТЬ(СкладДоставкиСборки.Объект КАК Документ.ЗаказКлиента)
				   |			И СкладДоставкиСборки.Свойство = &СвойствоСкладДоставки
	               |ГДЕ
	               |	Заявка.Ссылка = &ЗаявкаСервисногоЦентра
	               |;
	               |
				   // Получаем данные для заполнения табличной части сборки.
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура							КАК Номенклатура,
	               |	Количество								КАК Количество,
				   |	Количество								КАК КоличествоУпаковок,
	               |	СерийныйНомер   						КАК СерийныйНомер,
				   |	Ссылка.СерийныйНомер    				КАК СерийныйНомерКомплекта,
				   |	Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	               |ИЗ
	               |	Документ.ГНАТ_ЗаявкаСервисногоЦентра.КомплектацияСборки
	               |ГДЕ
	               |	Ссылка = &ЗаявкаСервисногоЦентра
	               |	И Отменено = ЛОЖЬ";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаДанныеДляЗаполненияСборкиПоЗСЦ()

Функция ПроверкаЗаполненияДокументаЗСЦ(ЗаявкаСервисногоЦентра)

	ДокументОбъект = ЗаявкаСервисногоЦентра.ПолучитьОбъект();
	Если ДокументОбъект.ПроверитьЗаполнение() = Ложь Тогда
		ТекстСообщения = НСтр("ru='Документ имеет не сохраненные данные.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаявкаСервисногоЦентра);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗаявкаСервисногоЦентра.Проведен Тогда
		ТекстСообщения = НСтр("ru='Необходимо провести документ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаявкаСервисногоЦентра);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаявкаСервисногоЦентра.СерийныйНомер) Тогда
		ТекстСообщения = НСтр("ru='СерийныйНомер не должен быть пустым!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаявкаСервисногоЦентра, "СерийныйНомер");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ЗаявкаСервисногоЦентра.ОбъектОснование) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ТекстСообщения = НСтр("ru='Документ основание должен быть заказ клиента!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаявкаСервисногоЦентра);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверкаЗаполненияДокумента() 

Функция ОтменитьЗаказКлиентаПоЗСЦ(знач ВыборкаДанных)
	
	ЗаказОбъект 			= ВыборкаДанных.ЗаказКлиента.ПолучитьОбъект();
	ТоварыЗаказа			= ЗаказОбъект.Товары;
	ПараметрыКорректировки	= git_Templates.ПолучитьШаблонКорректировкаНазначенияТоваров();
	ТоварыКорректировки		= ПараметрыКорректировки.Товары;	
	ПричинаОтмены			= Справочники.ПричиныОтменыЗаказовКлиентов.ПолучитьСсылку(Новый УникальныйИдентификатор("c25eefbd-8053-11e4-8e94-0007e90c5769"));
	
	ПараметрыКорректировки.Вставить("Заказ", ВыборкаДанных.ЗаказКлиента);
	ПараметрыКорректировки.Вставить("Организация", ВыборкаДанных.Организация);
	
	Для каждого СтрокаТовары Из ТоварыЗаказа Цикл
		Если СтрокаТовары.Отменено = Истина Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда
			НоваяСтрока = ТоварыКорректировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.ИсходноеНазначение = ЗаказОбъект.Назначение;
		КонецЕсли;
		СтрокаТовары.Отменено 		= Истина;
		СтрокаТовары.ПричинаОтмены  = ПричинаОтмены;
	КонецЦикла;
	
	ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	
	
	Если ТоварыКорректировки.Количество() > 0 Тогда
		СтруктураОшибок 	  = Новый Структура;
		ДокументКорректировка = git_Objcon.СоздатьДокумент("КорректировкаНазначенияТоваров", ПараметрыКорректировки, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение, ВыборкаДанных.ЗаявкаСервисногоЦентра);		
			КонецЦикла;
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			ДокументКорректировка.Записать(РежимЗаписиДокумента.Проведение);	
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ВыборкаДанных.ЗаявкаСервисногоЦентра);
		    ТекстСообщения = НСтр("ru='Не удалось провести корректировку заказа клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаДанных.ЗаявкаСервисногоЦентра);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ВыборкаДанных.ЗаявкаСервисногоЦентра);
		ТекстСообщения = НСтр("ru='Не удалось перепровести заказ клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаДанных.ЗаявкаСервисногоЦентра);
		Возврат Ложь;
	КонецПопытки;
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ВыборкаДанных.ЗаказКлиента));
		
	Возврат Истина;

КонецФункции // ОтменитьЗаказКлиентаПоЗСЦ()

Функция СоздатьДокументСборкиЗСЦ(знач ВыборкаРеквизиты, знач ВыборкаТовары)
	
	ПараметрыСборки  = git_Templates.ПолучитьШаблонСборкаТоваров();
	Товары			 = ПараметрыСборки.Товары;
	СерийныеНомера	 = ПараметрыСборки.СерийныеНомера;
	
	Если ПустаяСтрока(ВыборкаРеквизиты.ВариантКомплектации) Тогда
		ТекстСообщения = НСтр("ru='Не задан вариант комплектации для сборки в заказе клиента.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ВыборкаРеквизиты.ВариантКомплектации));
	Если ПустаяСтрока(ВариантКомплектации.ВерсияДанных) Тогда
		ТекстСообщения = НСтр("ru='Вариант комплектации для сборки в заказе клиента задан не верно.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСборки, ВыборкаРеквизиты);
	ПараметрыСборки.Вставить("Дата", ТекущаяДата());
	ПараметрыСборки.Вставить("ВариантКомплектации", ВариантКомплектации);
	ПараметрыСборки.Вставить("ДатаРаспоряжения", ТекущаяДата());
	ПараметрыСборки.Вставить("СборкаПодДеятельность", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	ПараметрыСборки.Вставить("ИспользуетсяОбособленноеОбеспечение", Ложь);
	ПараметрыСборки.Вставить("ЗаявкаСервисногоЦентра", ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
	
	КлючСвязиСерийныхНомеров = 1;
	КодСтроки				 = 1;
	
	Пока ВыборкаТовары.Следующий() Цикл
		НоваяСтрокаТовары = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаТовары);
		
		Если ВыборкаТовары.ИспользоватьСерийныеНомера Тогда
			НоваяСтрокаСерийныеНомера = СерийныеНомера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийныеНомера, ВыборкаТовары);
			НоваяСтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = КлючСвязиСерийныхНомеров;
		КонецЕсли;
		
		НоваяСтрокаТовары.КлючСвязиСерийныхНомеров  = КлючСвязиСерийныхНомеров;	
		НоваяСтрокаТовары.КодСтроки 				= КодСтроки;
		
		КлючСвязиСерийныхНомеров = КлючСвязиСерийныхНомеров + 1;
		КодСтроки			     = КодСтроки + 1;
	КонецЦикла;
	
	СтруктураОшибок = Новый Структура;
	ДокументСборка 	= git_Objcon.СоздатьДокумент("СборкаТоваров", ПараметрыСборки, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);					
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДокументСборка.Записать(РежимЗаписиДокумента.Проведение);    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
		ТекстСообщения = НСтр("ru='Не удалось провести документ «Сборка товаров».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
		Возврат Неопределено;
	КонецПопытки;
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументСборка.Ссылка));
	
	Возврат ДокументСборка.Ссылка;
	
КонецФункции // СоздатьДокументЗборкиЗСЦ()
 
Функция СоздатьПриходныйОрдерДляСборкиЗСЦ(знач Выборка, знач ДокументСборка)
	
	Если НЕ Выборка.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
		// Если не используем ордерную схему - ордер создавать не надо.
		Возврат Документы.ПриходныйОрдерНаТовары.ПустаяСсылка();
	КонецЕсли;
	
	ПараметрыОрдера = git_Templates.ПолучитьШаблонПриходныйОрдерНаТовары();
	Товары			= ПараметрыОрдера.Товары;
	СерийныеНомера	= ПараметрыОрдера.СерийныеНомера;
	
	ПараметрыОрдера.Вставить("Дата", ТекущаяДата());
	ПараметрыОрдера.Вставить("Распоряжение", ДокументСборка);
	ПараметрыОрдера.Вставить("Статус", Перечисления.СтатусыПриходныхОрдеров.Принят);
	ПараметрыОрдера.Вставить("Склад", Выборка.Склад);
	ПараметрыОрдера.Вставить("СкладскаяОперация", Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов);
	
	НоваяСтрокаТовары 							= Товары.Добавить();
	НоваяСтрокаТовары.Номенклатура 				= Выборка.Номенклатура;
	НоваяСтрокаТовары.КоличествоУпаковок 		= 1;
	НоваяСтрокаТовары.Количество 				= 1;
	НоваяСтрокаТовары.КлючСвязиСерийныхНомеров 	= 1;
	
	НоваяСтрокаСерийныеНомера							= СерийныеНомера.Добавить();
	НоваяСтрокаСерийныеНомера.СерийныйНомер				= Выборка.СерийныйНомер;
	НоваяСтрокаСерийныеНомера.КлючСвязиСерийныхНомеров	= 1;
	
	СтруктураОшибок = Новый Структура;
	ДокументОрдер	= git_Objcon.СоздатьДокумент("ПриходныйОрдерНаТовары", ПараметрыОрдера, СтруктураОшибок);
	
	Если СтруктураОшибок.Количество() > 0 Тогда
		Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение, Выборка.ЗаявкаСервисногоЦентра);					
		КонецЦикла;
		Возврат Неопределено; 
	КонецЕсли;
	
	Попытка
		ДокументОрдер.Записать(РежимЗаписиДокумента.Проведение);    			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Выборка.ЗаявкаСервисногоЦентра);
		ТекстСообщения = НСтр("ru='Не удалось провести документ «Приходный ордер на товары».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.ЗаявкаСервисногоЦентра);
		Возврат Неопределено;
	КонецПопытки;
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументОрдер.Ссылка));
	
	Возврат ДокументОрдер.Ссылка;
 
КонецФункции // СоздатьПриходныйОрдерДляСборкиЗСЦ()

Функция СоздатьПеремещениеСборки(знач ВыборкаРеквизиты)
	
	Если ВыборкаРеквизиты.Склад = ВыборкаРеквизиты.СкладДоставки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТранзитныйСклад = ПолучитьТранзитныйСклад(ВыборкаРеквизиты.Склад, ВыборкаРеквизиты.СкладДоставки);
	
	Если ТранзитныйСклад = Неопределено Тогда
		ПараметрыПеремещения = git_Templates.ПолучитьШаблонПеремещение();
		ПараметрыПеремещения.Вставить("СкладОтправитель", ВыборкаРеквизиты.Склад);
		ПараметрыПеремещения.Вставить("СкладПолучатель", ВыборкаРеквизиты.СкладДоставки);
		ПараметрыПеремещения.Вставить("Организация", ВыборкаРеквизиты.Организация);
		ПараметрыПеремещения.Вставить("Подразделение", ВыборкаРеквизиты.Подразделение);
		ПараметрыПеремещения.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		
		НоваяСтрокаТовары 							= ПараметрыПеремещения.Товары.Добавить();
		НоваяСтрокаТовары.КодСтроки 				= 1;
		НоваяСтрокаТовары.Количество 				= 1;
		НоваяСтрокаТовары.КоличествоУпаковок 		= 1;
		НоваяСтрокаТовары.Номенклатура 				= ВыборкаРеквизиты.Номенклатура;
		НоваяСтрокаТовары.КлючСвязиСерийныхНомеров 	= 1;
		НоваяСтрокаТовары.НачалоОтгрузки 			= ПараметрыПеремещения.Дата;
		НоваяСтрокаТовары.ОкончаниеПоступления 		= ПараметрыПеремещения.Дата;
		
		Если НЕ ВыборкаРеквизиты.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			НоваяСтрокаСерийныеНомера 						   = ПараметрыПеремещения.СерийныеНомера.Добавить();
			НоваяСтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = 1;
			НоваяСтрокаСерийныеНомера.СерийныйНомер			   = ВыборкаРеквизиты.СерийныйНомер;
		КонецЕсли;
		
		СтруктураОшибок		= Новый Структура;
		ДокументПеремещение = git_Objcon.СоздатьДокумент("ПеремещениеТоваров", ПараметрыПеремещения, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);					
			КонецЦикла;
			Возврат Ложь; 
		КонецЕсли;
		
		Попытка
			ДокументПеремещение.Записать(РежимЗаписиДокумента.Проведение);    					
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
		    ТекстСообщения = НСтр("ru='Не удалось провести документ «Перемещение товаров».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
			Возврат Ложь;
		КонецПопытки;
		
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументПеремещение.Ссылка));
	Иначе
		ПараметрыЗаказа = git_Templates.ПолучитьШаблонЗаказНаПеремещение();
		ПараметрыЗаказа.Вставить("Дата", ТекущаяДата());
		ПараметрыЗаказа.Вставить("СкладОтправитель", ТранзитныйСклад);
		ПараметрыЗаказа.Вставить("СкладПолучатель", ВыборкаРеквизиты.СкладДоставки);
		ПараметрыЗаказа.Вставить("Организация", ВыборкаРеквизиты.Организация);
		ПараметрыЗаказа.Вставить("Подразделение", ВыборкаРеквизиты.Подразделение);
		ПараметрыЗаказа.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		ПараметрыЗаказа.Вставить("МаксимальныйКодСтроки", 1);
		
		НоваяСтрокаТовары 							= ПараметрыЗаказа.Товары.Добавить();
		НоваяСтрокаТовары.КодСтроки 				= 1;
		НоваяСтрокаТовары.Количество 				= 1;
		НоваяСтрокаТовары.КоличествоУпаковок 		= 1;
		НоваяСтрокаТовары.Номенклатура 				= ВыборкаРеквизиты.Номенклатура;
		НоваяСтрокаТовары.НачалоОтгрузки 			= ПараметрыЗаказа.Дата;
		НоваяСтрокаТовары.ОкончаниеПоступления 		= ПараметрыЗаказа.Дата;
		НоваяСтрокаТовары.ВариантОбеспечения		= Перечисления.ВариантыОбеспечения.ПодЗаказ;
		
		СтруктураОшибок	= Новый Структура;
		ДокументЗаказ	= git_Objcon.СоздатьДокумент("ЗаказНаПеремещение", ПараметрыЗаказа, СтруктураОшибок);
		Если СтруктураОшибок.Количество() > 0 Тогда
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);					
			КонецЦикла;
			Возврат Ложь; 
		КонецЕсли;
		
		Попытка
			ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);    					
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
		    ТекстСообщения = НСтр("ru='Не удалось провести документ «Заказ на перемещение».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
			Возврат Ложь;
		КонецПопытки;
		
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументЗаказ.Ссылка));
		
		ПараметрыПеремещения = git_Templates.ПолучитьШаблонПеремещение();
		ПараметрыПеремещения.Вставить("СкладОтправитель", ВыборкаРеквизиты.Склад);
		ПараметрыПеремещения.Вставить("СкладПолучатель", ТранзитныйСклад);
		ПараметрыПеремещения.Вставить("Организация", ВыборкаРеквизиты.Организация);
		ПараметрыПеремещения.Вставить("Подразделение", ВыборкаРеквизиты.Подразделение);
		ПараметрыПеремещения.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		
		НоваяСтрокаТовары 							= ПараметрыПеремещения.Товары.Добавить();
		НоваяСтрокаТовары.КодСтроки 				= 1;
		НоваяСтрокаТовары.Количество 				= 1;
		НоваяСтрокаТовары.КоличествоУпаковок 		= 1;
		НоваяСтрокаТовары.Номенклатура 				= ВыборкаРеквизиты.Номенклатура;
		НоваяСтрокаТовары.КлючСвязиСерийныхНомеров 	= 1;
		НоваяСтрокаТовары.НачалоОтгрузки 			= ПараметрыПеремещения.Дата;
		НоваяСтрокаТовары.ОкончаниеПоступления 		= ПараметрыПеремещения.Дата;
		НоваяСтрокаТовары.Назначение 				= ДокументЗаказ.Назначение;

		Если НЕ ВыборкаРеквизиты.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			НоваяСтрокаСерийныеНомера 						   = ПараметрыПеремещения.СерийныеНомера.Добавить();
			НоваяСтрокаСерийныеНомера.КлючСвязиСерийныхНомеров = 1;
			НоваяСтрокаСерийныеНомера.СерийныйНомер			   = ВыборкаРеквизиты.СерийныйНомер;
		КонецЕсли;
		
		
		СтруктураОшибок		= Новый Структура;
		ДокументПеремещение = git_Objcon.СоздатьДокумент("ПеремещениеТоваров", ПараметрыПеремещения, СтруктураОшибок);
		
		Если СтруктураОшибок.Количество() > 0 Тогда
			Для каждого ОшибкаИзСтруктуры Из СтруктураОшибок Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаИзСтруктуры.Значение, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);					
			КонецЦикла;
			Возврат Ложь; 
		КонецЕсли;
		
		Попытка
			ДокументПеремещение.Записать(РежимЗаписиДокумента.Проведение);    					
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
		    ТекстСообщения = НСтр("ru='Не удалось провести документ «Перемещение товаров».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВыборкаРеквизиты.ЗаявкаСервисногоЦентра);
			Возврат Ложь;
		КонецПопытки;
		
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ДокументПеремещение.Ссылка));
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // СоздатьПеремещениеСборки()

Функция ПолучитьТранзитныйСклад(СкладОтправитель, СкладПолучатель)

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаТранзитныйСклад();
	
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДата());
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.СкладТранзит, Неопределено);

КонецФункции // ПолучитьТранзитныйСклад()
 
Функция ТекстЗапросаТранзитныйСклад()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Ссылка			КАК Склад,
		|	Представление   КАК Представление
		|ПОМЕСТИТЬ АдресаСкладов
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация
		|ГДЕ
		|	Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|;

		|
		|ВЫБРАТЬ
		|	СкладыОтгрузки.Ссылка 										КАК МаршрутТранзит,
		|	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) 	КАК СкладТранзит
		|ПОМЕСТИТЬ МаршрутыОтОтправителяТранзит	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
		|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
		|И  ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &СкладПолучатель
		|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) <> &СкладОтправитель
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Модуль_ДоступныеСклады КАК ДоступныеСклады
		|ПО ДоступныеСклады.Склад = СкладыОтгрузки.Ссылка
		|И  ДоступныеСклады.Транзитный
		|
		|ГДЕ
		|	СкладыОтгрузки.Склад = &СкладОтправитель	
		|	
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Ссылка 			КАК МаршрутТранзит,
		|	СкладПолучатель КАК СкладТранзит
		|ИЗ
		|	Справочник.ВариантыМаршрутов.ВозвратнаяДоставка
		|ГДЕ
		|	СкладОтправитель = &СкладОтправитель	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|//
		|ВЫБРАТЬ
		|	&СкладОтправитель										КАК СкладОтправитель,
		|	СкладыОтгрузки.Склад									КАК СкладТранзит,
		|	&СкладПолучатель										КАК СкладПолучатель,
		|	МаршрутОтОтправителя.МаршрутТранзит						КАК МаршрутОтОтправителя,
		|	МаршрутОтОтправителя.МаршрутТранзит.КалендарьМаршрута	КАК КалендарьМаршрутаОтОтправителя,
		|	СкладыОтгрузки.Ссылка 									КАК МаршрутКПолучателю,
		|	СкладыОтгрузки.Ссылка.КалендарьМаршрута 				КАК КалендарьМаршрутаКПолучателю,
		|	
		|	СкладыТранзита.ПН,
		|	СкладыТранзита.ВТ,
		|	СкладыТранзита.СР,
		|	СкладыТранзита.ЧТ,
		|	СкладыТранзита.ПТ,
		|	СкладыТранзита.СБ,
		|	СкладыТранзита.ВС,
		|	
		|	СкладыТранзита.ВремяВыездаПН,
		|	СкладыТранзита.ВремяВыездаВТ,
		|	СкладыТранзита.ВремяВыездаСР,
		|	СкладыТранзита.ВремяВыездаЧТ,
		|	СкладыТранзита.ВремяВыездаПТ,
		|	СкладыТранзита.ВремяВыездаСБ,
		|	СкладыТранзита.ВремяВыездаВС,
		|	
		|	СкладыОтгрузки.ПН 				КАК тПН,
		|	СкладыОтгрузки.ВТ 				КАК тВТ,
		|	СкладыОтгрузки.СР 				КАК тСР,
		|	СкладыОтгрузки.ЧТ 				КАК тЧТ,
		|	СкладыОтгрузки.ПТ 				КАК тПТ,
		|	СкладыОтгрузки.СБ 				КАК тСБ,
		|	СкладыОтгрузки.ВС 				КАК тВС,
		|	
		|	СкладыОтгрузки.ВремяВыездаПН 	КАК тВремяВыездаПН,
		|	СкладыОтгрузки.ВремяВыездаВТ 	КАК тВремяВыездаВТ,
		|	СкладыОтгрузки.ВремяВыездаСР 	КАК тВремяВыездаСР,
		|	СкладыОтгрузки.ВремяВыездаЧТ 	КАК тВремяВыездаЧТ,
		|	СкладыОтгрузки.ВремяВыездаПТ 	КАК тВремяВыездаПТ,
		|	СкладыОтгрузки.ВремяВыездаСБ 	КАК тВремяВыездаСБ,
		|	СкладыОтгрузки.ВремяВыездаВС 	КАК тВремяВыездаВС
		|	
		|ПОМЕСТИТЬ МаршрутыКПолучателюТранзит	
		|ИЗ
		|	Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыОтгрузки
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутыОтОтправителяТранзит КАК МаршрутОтОтправителя
		|ПО МаршрутОтОтправителя.СкладТранзит = СкладыОтгрузки.Склад
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СписокАдресов КАК СписокАдресов
		|ПО СписокАдресов.Ссылка = СкладыОтгрузки.Ссылка
		|И	ВЫРАЗИТЬ(СписокАдресов.ГородСклад КАК Справочник.Склады) = &СкладПолучатель
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита 
		|ПО	СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит	
		|И	СкладыТранзита.Склад  = &СкладОтправитель
		|
		|//|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыМаршрутов.СкладыОтгрузки КАК СкладыТранзита 
		|//|ПО	СкладыТранзита.Ссылка = МаршрутОтОтправителя.МаршрутТранзит	
		|//|И	СкладыТранзита.Склад  = СкладыОтгрузки.Склад
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаПолучателя 
		|ПО	АдресаСкладаПолучателя.Склад = &СкладПолучатель
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаТранзита 
		|ПО	АдресаСкладаТранзита.Склад = СкладыОтгрузки.Склад 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ АдресаСкладов КАК АдресаСкладаОтправителя 
		|ПО	АдресаСкладаОтправителя.Склад = &СкладОтправитель 
		|
		|ГДЕ
		|	АдресаСкладаОтправителя.Представление <> АдресаСкладаПолучателя.Представление
		|И   АдресаСкладаОтправителя.Представление <> АдресаСкладаТранзита.Представление 	
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|//
		|ВЫБРАТЬ
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	МаршрутыКПолучателюТранзит.СкладТранзит, 
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафикиОтправителя.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыездаОтОтправителя
		|ПОМЕСТИТЬ ТаблицаПрибытияНаТранзитныйСклад
		|ИЗ
		|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
		|	
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиОтправителя
		|ПО	КалендарныеГрафикиОтправителя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаОтОтправителя
		|И	КалендарныеГрафикиОтправителя.ДатаГрафика  >= НАЧАЛОПЕРИОДА(&ДатаСеанса, День)
		|И	КалендарныеГрафикиОтправителя.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.СР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.СБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.ВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
		|
		|ГДЕ
		|	&ДатаСеанса < КалендарныеГрафикиОтправителя.ДатаГрафика	
		|ИЛИ
		|	ЧАС(&ДатаСеанса) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|ИЛИ
		|	(ЧАС(&ДатаСеанса) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|									КОГДА 1
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|									КОГДА 2
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|									КОГДА 3
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|									КОГДА 4
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|									КОГДА 5
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|									КОГДА 6
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|									КОГДА 7
		|									ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|								КОНЕЦ
		|							 )
		|	И МИНУТА(&ДатаСеанса) <= МИНУТА(ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиОтправителя.ДатаГрафика)
		|										КОГДА 1
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПН
		|										КОГДА 2
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВТ
		|										КОГДА 3
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСР
		|										КОГДА 4
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаЧТ
		|										КОГДА 5
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаПТ
		|										КОГДА 6
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаСБ
		|										КОГДА 7
		|										ТОГДА МаршрутыКПолучателюТранзит.ВремяВыездаВС
		|									КОНЕЦ
		|								) 	
		|	)		
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	МаршрутыКПолучателюТранзит.СкладТранзит
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|//
		|ВЫБРАТЬ
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
		|	
		|	МаршрутыКПолучателюТранзит.СкладТранзит,
		|	
		|	МаршрутыКПолучателюТранзит.СкладПолучатель,
		|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю,
		|	Минимум(ДОБАВИТЬКДАТЕ(
		|				ДОБАВИТЬКДАТЕ(
		|							КалендарныеГрафикиПолучателя.ДатаГрафика, ЧАС, ЧАС(	
		|																	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																		КОГДА 1
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																		КОГДА 2
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																		КОГДА 3
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																		КОГДА 4
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																		КОГДА 5
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																		КОГДА 6
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																		КОГДА 7
		|																		ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																	КОНЕЦ
		|																	)
		|						), МИНУТА, МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|												КОГДА 1
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|												КОГДА 2
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|												КОГДА 3
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|												КОГДА 4
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|												КОГДА 5
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|												КОГДА 6
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|												КОГДА 7
		|												ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|											КОНЕЦ
		|											)
		|				)
		|			)	КАК ДатаВремяВыездаКПолучателю
		|ПОМЕСТИТЬ ВариантыТранзитов		
		|ИЗ
		|	МаршрутыКПолучателюТранзит КАК МаршрутыКПолучателюТранзит
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрибытияНаТранзитныйСклад КАК ТаблицаПрибытияНаТранзитныйСклад
		|ПО	ТаблицаПрибытияНаТранзитныйСклад.МаршрутОтОтправителя 	= МаршрутыКПолучателюТранзит.МаршрутОтОтправителя
		|И	ТаблицаПрибытияНаТранзитныйСклад.СкладТранзит 			= МаршрутыКПолучателюТранзит.СкладТранзит
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафикиПолучателя
		|ПО	КалендарныеГрафикиПолучателя.Календарь 	= МаршрутыКПолучателюТранзит.КалендарьМаршрутаКПолучателю
		|И	КалендарныеГрафикиПолучателя.ДатаГрафика  >= НачалоПериода(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя, День)
		|И	КалендарныеГрафикиПолучателя.ДеньВключенВГрафик
		|И	(ВЫБОР	ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|		КОГДА 1
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тПН
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 2
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тВТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 3
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тСР
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 4
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тЧТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 5
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тПТ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 6
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тСБ
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА 7
		|		ТОГДА 	ВЫБОР
		|					КОГДА МаршрутыКПолучателюТранзит.тВС
		|					ТОГДА Истина
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	КОНЕЦ)
		|
		|ГДЕ
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя < КалендарныеГрафикиПолучателя.ДатаГрафика	
		|ИЛИ
		|	ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																					КОГДА 1
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																					КОГДА 2
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																					КОГДА 3
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																					КОГДА 4
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																					КОГДА 5
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																					КОГДА 6
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																					КОГДА 7
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																				КОНЕЦ
		|																			 )
		|ИЛИ
		|	(ЧАС(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) = ЧАС(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																					КОГДА 1
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																					КОГДА 2
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																					КОГДА 3
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																					КОГДА 4
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																					КОГДА 5
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																					КОГДА 6
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																					КОГДА 7
		|																					ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																				КОНЕЦ
		|																			 )
		|	И МИНУТА(ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя) < МИНУТА(	ВЫБОР ДЕНЬНЕДЕЛИ(КалендарныеГрафикиПолучателя.ДатаГрафика)
		|																							КОГДА 1
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПН
		|																							КОГДА 2
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВТ
		|																							КОГДА 3
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСР
		|																							КОГДА 4
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаЧТ
		|																							КОГДА 5
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаПТ
		|																							КОГДА 6
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаСБ
		|																							КОГДА 7
		|																							ТОГДА МаршрутыКПолучателюТранзит.тВремяВыездаВС
		|																						КОНЕЦ
		|																					) 	
		|	)		
		|
		|СГРУППИРОВАТЬ ПО
		|	МаршрутыКПолучателюТранзит.СкладОтправитель,
		|	МаршрутыКПолучателюТранзит.МаршрутОтОтправителя,
		|	ТаблицаПрибытияНаТранзитныйСклад.ДатаВремяВыездаОтОтправителя,
		|	
		|	МаршрутыКПолучателюТранзит.СкладТранзит,
		|	
		|	МаршрутыКПолучателюТранзит.СкладПолучатель,
		|	МаршрутыКПолучателюТранзит.МаршрутКПолучателю
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|//
		|ВЫБРАТЬ
		|	МИНИМУМ(ДатаВремяВыездаКПолучателю) КАК ДатаВремяВыездаКПолучателю
		|ПОМЕСТИТЬ КраткаяДоставкаТранзита
		|ИЗ
		|	ВариантыТранзитов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|//
		|ВЫБРАТЬ
		|	ВариантыТранзитов.СкладОтправитель,
		|	ВариантыТранзитов.МаршрутОтОтправителя,
		|	ВариантыТранзитов.ДатаВремяВыездаОтОтправителя,
		|	ВариантыТранзитов.СкладТранзит,
		|	ВариантыТранзитов.СкладПолучатель,
		|	ВариантыТранзитов.МаршрутКПолучателю,
		|	ВариантыТранзитов.ДатаВремяВыездаКПолучателю		
		|ИЗ
		|	ВариантыТранзитов КАК ВариантыТранзитов
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КраткаяДоставкаТранзита КАК КраткаяДоставкаТранзита
		|ПО КраткаяДоставкаТранзита.ДатаВремяВыездаКПолучателю = ВариантыТранзитов.ДатаВремяВыездаКПолучателю";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТранзитныйСклад()

Функция ОчиститьДопСведениеБПСборки(Объект, Свойство, ИмяСвойства)
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
	Попытка
	    НаборЗаписей.Записать();			
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	    ТекстСообщения = НСтр("ru='Не удалось очистить дополнительное сведение %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяСвойства);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.11";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Business process");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Здесь хранятся шаблоны для создания справочников и документов [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Business process [" + Версия + "]", "Business process", "ОткрытиеФормы", Ложь, "Business process");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти