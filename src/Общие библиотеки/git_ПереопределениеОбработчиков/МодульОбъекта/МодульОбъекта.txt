
#Область ПрограммныйИнтерфейс

// Подменяет обработчик действия управляемой формы
//
// Параметры:
//  Форма        			- УправляемаяФорма - Форма в которой нужно переопределить обработчик события
//  ИмяСобытияФормы 		- Строка - Имя события формы или элемента формы
//	ПолноеИмяЭлементаФормы  - Строка - Полное имя элемента формы
//	НовоеДействие			- Строка - Имя нового обработчика события
//	ОбработкаИсключений		- Булево - Обрабатывать исключения
//
Процедура ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь) Экспорт
	
	Объект = Форма;
	ИмяЭлементаФормы = "";	
	Если НЕ ПустаяСтрока(ПолноеИмяЭлементаФормы) Тогда
		
		МассивФрагментов = РазобратьСтрокуВМассивПоРазделителю(ПолноеИмяЭлементаФормы);
        ИмяЭлементаФормы = МассивФрагментов[0];
		Объект = Форма.Элементы.Найти(ИмяЭлементаФормы);
		Если Объект = Неопределено Тогда
			ВызватьИсключение "Элемент формы: " + ИмяЭлементаФормы + " не найден!";	
		КонецЕсли;
       
        Если МассивФрагментов.Количество() > 1 Тогда 
            ИмяЭлементаФормы = ИмяЭлементаФормы + МассивФрагментов[1];
            Если ТипЗнч(Объект) = Тип("ТаблицаФормы") Тогда 
                Объект = Объект.Колонки[МассивФрагментов[1]].ЭлементУправления;
            ИначеЕсли ТипЗнч(Объект) = Тип("КоманднаяПанель") Тогда 
                Объект = Объект.Кнопки[МассивФрагментов[1]];
			Иначе
				ВызватьИсключение "Ошибка на этапе получения элемента формы. Тип значения(" + ТипЗнч(Объект) + ")";
            КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	СтарыеОбработчики = "OldHandlers";
	МассивРеквизитов = Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из МассивРеквизитов Цикл
		Если РеквизитФормы.Имя = СтарыеОбработчики Тогда
			СтарыеОбработчики = Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтарыеОбработчики = Неопределено Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(СтарыеОбработчики, 	Новый ОписаниеТипов("ТаблицаЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", 			Новый ОписаниеТипов("Строка"), СтарыеОбработчики, "Значение"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", 		Новый ОписаниеТипов("Строка"), СтарыеОбработчики, "Представление"));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);				
	КонецЕсли;
	
	
		
    Если ТипЗнч(Объект) = Тип("КнопкаФормы") Тогда
        СтароеДействие = Объект.ИмяКоманды;
    Иначе
        СтароеДействие = Объект.ПолучитьДействие(ИмяСобытияФормы);
    КонецЕсли;
	
	
	
	Если ОбработкаИсключений И НЕ СтароеДействие = Неопределено Тогда 
		ВызватьИсключение "Конфликт обработчиков события """ + ИмяСобытияФормы + """ объекта """ + Строка(Объект) + """";		 
	КонецЕсли;	
	
	
	
	Если ТипЗнч(Объект) = Тип("КнопкаФормы") Тогда
		Объект.ИмяКоманды = НовоеДействие;
	Иначе
		Объект.УстановитьДействие(ИмяСобытияФормы, НовоеДействие);
	КонецЕсли;
		
	OldHandlers = Форма.OldHandlers;
	Если СтароеДействие <> Неопределено И ПустаяСтрока(СтароеДействие) = Ложь Тогда
		ЗаписьДействие = OldHandlers.Добавить();
		ЗаписьДействие.Значение = ИмяЭлементаФормы + "." + ИмяСобытияФормы;
		ЗаписьДействие.Представление = СтароеДействие;
	КонецЕсли;
	
КонецПроцедуры // ПодменитьДействиеУправляемоеПриложение()

// Востанавливает обработчики событий формы по умолчанию
//
// Параметры:
//  Форма        			- УправляемаяФорма - Форма в которой нужно востановить обработчик события
//  ИмяСобытияФормы 		- Строка - Имя события формы или элемента формы
//	ПолноеИмяЭлементаФормы  - Строка - Полное имя элемента формы
//	СтароеДействие			- Строка - Имя обработчика события по умолчанию
//	ОбработкаИсключений		- Булево - Обрабатывать исключения
//
Процедура ВостановитьДействиеУправляемоеПриложение(Форма,  ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", СтароеДействие, ОбработкаИсключений = Ложь) Экспорт
	
	Объект = Форма;
	ИмяЭлементаФормы = "";
	Если НЕ ПустаяСтрока(ПолноеИмяЭлементаФормы) Тогда
		
		МассивФрагментов = РазобратьСтрокуВМассивПоРазделителю(ПолноеИмяЭлементаФормы);
        ИмяЭлементаФормы = МассивФрагментов[0];
		Объект = Форма.Элементы.Найти(ИмяЭлементаФормы);
		Если Объект = Неопределено Тогда
			ВызватьИсключение "Элемент формы: " + ИмяЭлементаФормы + " не найден!";	
		КонецЕсли;
       
        Если МассивФрагментов.Количество() > 1 Тогда 
            ИмяЭлементаФормы = ИмяЭлементаФормы + МассивФрагментов[1];
            Если ТипЗнч(Объект) = Тип("ТаблицаФормы") Тогда 
                Объект = Объект.Колонки[МассивФрагментов[1]].ЭлементУправления;
            ИначеЕсли ТипЗнч(Объект) = Тип("КоманднаяПанель") Тогда 
                Объект = Объект.Кнопки[МассивФрагментов[1]];
			Иначе
				ВызватьИсключение "Ошибка на этапе получения элемента формы. Тип значения(" + ТипЗнч(Объект) + ")";
            КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	Если ТипЗнч(Объект) = Тип("КнопкаФормы") Тогда
		Объект.ИмяКоманды = СтароеДействие;
	Иначе
		Объект.УстановитьДействие(ИмяСобытияФормы, СтароеДействие);
	КонецЕсли;
		
КонецПроцедуры // ВостановитьДействиеУправляемоеПриложение() 

// Выполнить востановление обработчики событий формы по умолчанию
//
// Параметры:
//  Форма - УправляемаяФорма - Форма в которой нужно востановить обработчики событий
//
Процедура ВыполнитьОткатОбработчиков(Форма) Экспорт
	Для Каждого Обработчик Из Форма.OldHandlers Цикл	
		Строка 		= Обработчик.Значение;
		ИндексТочки = Найти(Строка, ".");
		ВостановитьДействиеУправляемоеПриложение(Форма, Прав(Строка, СтрДлина(Строка)-ИндексТочки), Лев(Строка, ИндексТочки-1), Обработчик.Представление);	
	КонецЦикла;	
КонецПроцедуры // ВыполнитьОткатОбработчиков()

// Перемещает элемент в коллекции элементов формы 
//
// Параметры:
//  Элементы 			- ВсеЭлементыФормы 	- Элементы формы
//  ИмяЭлемента 		- Строка  			- Имя перемещаемого элемента
//  ИмяРодителя 	  	- Строка            - Новый родитель элемента. Может совпадать со старым
//  МестоРасположения 	- Строка            - Элемент, перед которым нужно разместить перемещаемый элемент
//
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения) Экспорт
	Элементы.Переместить(Элементы.Найти(ИмяЭлемента), Элементы.Найти(ИмяРодителя), Элементы.Найти(МестоРасположения));	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Перемещает элемент в коллекции элементов формы 
//
// Параметры:
//  Элементы 			- ВсеЭлементыФормы 													- Элементы формы
//  Элемент 			- ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - Перемещаемый элемент
//  Родитель 	  		- ГруппаФормы, ТаблицаФормы, УправляемаяФорма           			- Новый родитель элемента. Может совпадать со старым
//  МестоРасположения 	- ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - Элемент, перед которым нужно разместить перемещаемый элемент
//
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения = Неопределено) Экспорт
	Элементы.Переместить(Элемент, Родитель, МестоРасположения);	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Добавляет элемент в коллекцию элементов формы
// 
// Параметры:
//  Элементы 	- ВсеЭлементыФормы 								- Элементы формы
//	Параметры 	- Параметры 									- Параметры нового элемента формы
//	Родитель	- ГруппаФормы, ТаблицаФормы, УправляемаяФорма   - Родитель для добавляемого элемента
//
// Возвращаемое значение:
//    ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - Массив строк по разделителю
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Перем ИмяЭлемента, ТипЭлемента; 
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		ВызватьИсключение "Параметры элемента формы не заданы!";	
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Имя", ИмяЭлемента) Тогда
		ВызватьИсключение "Имя элемента формы не задано!";	
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ТипЭлемента", ТипЭлемента) Тогда
		ВызватьИсключение "Тип элемента формы не задан!";	
	КонецЕсли;
	
	Если НЕ Родитель = Неопределено Тогда
		Если ТипЗнч(Родитель) <> Тип("ГруппаФормы") 
		 И	 ТипЗнч(Родитель) <> Тип("ТаблицаФормы") 
		 И	 ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Тогда
			ВызватьИсключение "Родитель должен иметь один из перечисленных типов: ГруппаФормы; ТаблицаФормы; УправляемаяФорма.";	 
		КонецЕсли;	
	КонецЕсли;
		
	ЭлементФормы = Элементы.Добавить(ИмяЭлемента, ТипЭлемента, Родитель);	
    ЗаполнитьЗначенияСвойств(ЭлементФормы, Параметры);
	Возврат ЭлементФормы;	
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Добавляет команду в коллекцию команд формы
// 
// Параметры:
//  Элементы 	- КомандыФормы 	- Содержит коллекцию команд формы
//	Параметры 	- Параметры 	- Параметры новой команды формы
//
// Возвращаемое значение:
//    КомандаФормы - Новая команда формы
Функция ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры) Экспорт
	
	Перем ИмяЭлемента;
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		ВызватьИсключение "Параметры команды не заданы!";	
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Имя", ИмяЭлемента) Тогда
		ВызватьИсключение "Имя команды не задано!";	
	КонецЕсли;
	
	Команда = Команды.Добавить(ИмяЭлемента);
	ЗаполнитьЗначенияСвойств(Команда, Параметры);
	Возврат Команда;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
 
// Разбор строки на массив слов по разделителю
// 
// Параметры:
//  Строка 		- Строка - Строка для разбора
//	Разделитель - Строка - Строка-разделитель
//
// Возвращаемое значение:
//   Массив - Массив строк по разделителю
Функция РазобратьСтрокуВМассивПоРазделителю(Строка, Разделитель = ".") Экспорт
    МассивСтрок = Новый Массив;
    СтрокаЗамены = СтрЗаменить(Строка, Разделитель, Символы.ПС);
    Для i=1 По СтрЧислоСтрок(СтрокаЗамены) Цикл МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаЗамены, i)); КонецЦикла;
    Возврат МассивСтрок; 
КонецФункции // РазобратьСтрокуВМассивПоРазделителю()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "2.0.0";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Переопределение обработчиков");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

	
    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Переопределение обработчиков событий [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Переопределение обработчиков событий [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "ПОС");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
