

#Область ПрограммныйИнтерфейс

Процедура НарисоватьПодменюДополнительныхОбработок(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	
	СтруктураРезультатов = ПолучитьМассивДопОбработокИфункций();
	СоздатьТаблицуИдентификаторовНаФорме(ЭтаФорма);
	НарисоватьКнопкиЗаполнитьТаблицуИдентификаторов(ЭтаФорма, СтруктураРезультатов, ВнешнийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМассивДопОбработокИфункций()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
      |	ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка 				КАК ДополнительнаяОбработка,
	  |	ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка.Наименование 	КАК Наименование
	  |ИЗ
      |	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
      |ГДЕ
      |	ПользовательскиеНастройкиДоступаКОбработкам.Доступно
      |	И ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка.Вид = &ДополнительнаяОбработка
      |	И ПользовательскиеНастройкиДоступаКОбработкам.Пользователь = &ТекущийПользователь
      |	И НЕ ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка.ПометкаУдаления
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ
      |		ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка 				КАК ДополнительныйОтчет,
	  |	    ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка.Наименование 	КАК Наименование
      |ИЗ
      |	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
      |ГДЕ
      |	ПользовательскиеНастройкиДоступаКОбработкам.Доступно
      |	И ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка.Вид = &ДополнительныйОтчет
      |	И ПользовательскиеНастройкиДоступаКОбработкам.Пользователь = &ТекущийПользователь
      |	И НЕ ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка.ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ДополнительнаяОбработка", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
	Запрос.УстановитьПараметр("ДополнительныйОтчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ТЗ_ДополнительныхОбработок 	= ПакетРезультатов[0].Выгрузить();
	ТЗ_ДополнительныхОтчетов	= ПакетРезультатов[1].Выгрузить();
	
	Возврат Новый Структура("ТЗ_ДополнительныхОбработок, ТЗ_ДополнительныхОтчетов", 
							 ТЗ_ДополнительныхОбработок, ТЗ_ДополнительныхОтчетов);
	
КонецФункции

// Создать реквизит формы ТаблицаЗначений
// он необходим, чтобы сопоставить наименование команды формы к 
// внешней обработке или отчету.
Процедура СоздатьТаблицуИдентификаторовНаФорме(Форма)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(
								Новый РеквизитФормы(
														"ТаблицаИдентификаторов",
														Новый ОписаниеТипов("ТаблицаЗначений"),
														,
														"Таблица идентификаторов"));
														
	МассивРеквизитов.Добавить(
								Новый РеквизитФормы(
														"СсылкаНаВнешнююОбработкуОтчет",
														Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"),
														"ТаблицаИдентификаторов",
														"Таблица идентификаторов"));
														
    МассивРеквизитов.Добавить(
								Новый РеквизитФормы(
														"ИдентификаторКоманды",
														Новый ОписаниеТипов("Строка"),
														"ТаблицаИдентификаторов",
														"Таблица идентификаторов"));
														
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

// Нарисовать кнопки и заполнить таблицу идентификаторов
Процедура НарисоватьКнопкиЗаполнитьТаблицуИдентификаторов(Форма, СтруктураРезультатов, ВнешнийОбъект)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("СсылкаНаВнешнююОбработкуОтчет", Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторКоманды", Новый ОписаниеТипов("Строка"));
	
	МассивДополнительныхОбработок 	= СтруктураРезультатов.ТЗ_ДополнительныхОбработок;
	МассивДополнительныхОтчетов		= СтруктураРезультатов.ТЗ_ДополнительныхОтчетов;
	
	ПараметрыКнопки = Новый Структура;
	ПараметрыКнопки.Вставить("Имя", "ДополнительныеОбработки");
	ПараметрыКнопки.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыКнопки.Вставить("Вид", ВидГруппыФормы.Подменю);
	ПараметрыКнопки.Вставить("Заголовок", "Обработки");
	ПараметрыКнопки.Вставить("Картинка", БиблиотекаКартинок.Обработка);
	ГруппаДополнительныеОбработки = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Форма.Элементы, ПараметрыКнопки, Форма.КоманднаяПанель);
	
	ПараметрыКнопки = Новый Структура;
	ПараметрыКнопки.Вставить("Имя", "ДополнительныеОтчеты");
	ПараметрыКнопки.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	ПараметрыКнопки.Вставить("Вид", ВидГруппыФормы.Подменю);
	ПараметрыКнопки.Вставить("Заголовок", "Отчеты");
	ПараметрыКнопки.Вставить("Картинка", БиблиотекаКартинок.Отчет);
	ГруппаДополнительныеОтчеты = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Форма.Элементы, ПараметрыКнопки, Форма.КоманднаяПанель);
	
	Для Каждого Строка ИЗ МассивДополнительныхОбработок Цикл
		
		ИмяКоманды = "Обработка" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		
		НоваяСтрока 								= ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.СсылкаНаВнешнююОбработкуОтчет 	= Строка.ДополнительнаяОбработка;
		НоваяСтрока.ИдентификаторКоманды 			= ИмяКоманды;
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Имя", ИмяКоманды);
		ПараметрыКоманды.Вставить("Действие", "ЗапуститьОтчетИлиОбработку");
		ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Форма.Команды, ПараметрыКоманды);
		
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("Имя", ИмяКоманды);
		ПараметрыКнопки.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
		ПараметрыКнопки.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыКнопки.Вставить("Заголовок", Строка.Наименование);
		ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Форма.Элементы, ПараметрыКнопки, ГруппаДополнительныеОбработки);
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивДополнительныхОтчетов Цикл
		
		ИмяКоманды = "Отчет" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		
		НоваяСтрока 								= ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.СсылкаНаВнешнююОбработкуОтчет 	= Строка.ДополнительныйОтчет;
		НоваяСтрока.ИдентификаторКоманды 			= ИмяКоманды;
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Имя", ИмяКоманды);
		ПараметрыКоманды.Вставить("Действие", "ЗапуститьОтчетИлиОбработку");
		ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Форма.Команды, ПараметрыКоманды);
		
		ПараметрыКнопки = Новый Структура;
		ПараметрыКнопки.Вставить("Имя", ИмяКоманды);
		ПараметрыКнопки.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
		ПараметрыКнопки.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыКнопки.Вставить("Заголовок", Строка.Наименование);
		ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Форма.Элементы, ПараметрыКнопки, ГруппаДополнительныеОтчеты);
		
	КонецЦикла;
	
	Форма.ТаблицаИдентификаторов.Загрузить(ТаблицаИдентификаторов);
	
КонецПроцедуры

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.12";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Меню: Дополнительные обработки и отчеты");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Меню: Дополнительные обработки и отчеты [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Меню: Дополнительные обработки и отчеты [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "НВО");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков
	
// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти 