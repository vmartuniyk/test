
#Область ИнтерфейсАвтоматическихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиcокТестов = Новый Массив;
	СпиcокТестов.Добавить("Тест_ПроверитьВерсиюБиблиотеки");
	
	ПараметрыТестов = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж", Истина, Неопределено);
	СпиcокТестов.Добавить(ПараметрыТестов);

	#Область Задача_4749
	СпиcокТестов.Добавить("Тест_ВыполнитьРассылкуНоменклатурыПоЗаказу");
	#КонецОбласти	


	Возврат СпиcокТестов;
	
КонецФункции


Процедура Тест_ПроверитьВерсиюБиблиотеки() Экспорт

	ВнешниеПараметрыРегистрации = СведенияОВнешнейОбработке();
	ВнутрениеПараметрыРегистрации = git_КоефициентПриоритетностиПродажСервер.СведенияОВнешнейОбработке();	
	ЮнитТест.ПроверитьРавенство(ВнешниеПараметрыРегистрации.Версия, ВнутрениеПараметрыРегистрации.Версия, );

КонецПроцедуры // Тест_ПроверитьВерсиюБиблиотеки()
 
Процедура Тест_ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(Параметр) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");
	
	ПутьКРепозиторию 	 = WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту = ПутьКРепозиторию + "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
	
	ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);
	ЭлементНоменклатуры = ВнешнийОбъект.СоздатьЭлементСправочника();

	ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(Новый Структура("Период, Номенклатура, Значение, НеПересчитыватьАвтоматически", 
																		ТекущаяДата, 
																		ЭлементНоменклатуры,
																		Неопределено,
																		Истина), "КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж");
																		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭлементНоменклатуры);
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Опт();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Период <> ТекущаяДата Тогда
			ВызватьИсключение НСтр("ru='Период записи не совпадает!'");		
		ИначеЕсли Выборка.Номенклатура <> ЭлементНоменклатуры Тогда
			ВызватьИсключение НСтр("ru='Номенклатура записи не совпадает!'");
		ИначеЕсли Выборка.НеПересчитыватьАвтоматически_Опт <> Истина Тогда
			ВызватьИсключение НСтр("ru='НеПересчитыватьАвтоматически записи не совпадает!'");
		КонецЕсли;
	Иначе	
		ВызватьИсключение НСтр("ru='Данные не удалось записать'");	
	КонецЕсли;
																																			
КонецПроцедуры

#Область Задача_4749

Процедура Тест_ВыполнитьРассылкуНоменклатурыПоЗаказу() Экспорт

	ДопСообщениеОшибки = НСтр("ru=' Не верный тип запроса ""ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику"" '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику(), Тип("Строка"),ДопСообщениеОшибки);

	ДопСообщениеОшибки 	= НСтр("ru=' Не верный тип запроса ""ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента"" '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента(), Тип("Строка"),ДопСообщениеОшибки);	
	
	Адрес = "Тест poshta@ktc.rovno.ua Тест"; 
	ЮнитТест.ПроверитьРавенство(НормализироватьАдресЭлектроннойПочты(Адрес), "poshta@ktc.rovno.ua");
	
		
КонецПроцедуры // Тест_ВыполнитьРассылкуНоменклатурыПоЗаказу()

#КонецОбласти

#КонецОбласти
	
#Область ПрограммныйИнтерфейс
	
// Подготавливает управляемую форму к работе с коефициентом приоритетности продаж
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ПодготовитьКоефициентПриоритетностиПродажКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПодготовитьНоменклатуру(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
		ЗагрузитьЗначения_КПП_ВФормуСправочника(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьКоефициентПриоритетностиПродажКРаботе() 

Процедура ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(ПараметрыЗаполнения, ИмяРегистра) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПараметрыЗаполнения.Период);
		НаборЗаписей.Отбор.Номенклатура.Установить(ПараметрыЗаполнения.Номенклатура);
		
		ПараметрыЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ПараметрыЗаполнения);
		НаборЗаписей.Записать();	
	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж() 


// Рассылка номенклатуры без КПП розницы при проведении заказа поставщику ил заказа клиенту 
// по задаче http://r.ktc-ua.com/issues/4749
//
// Параметры:
//
//  Источник  		 - ДокументОбъект.ЗаказКлиента, ДокументОбъект.ЗаказПоставщику - ссылка на заказ 
//
//  Отказ  			 - Булево
//
//  РежимПроведения  - 
//
Процедура ВыполнитьРассылкуНоменклатурыПоЗаказу(Источник, Отказ, РежимПроведения) Экспорт

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
		
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Запрос 			= Новый Запрос;
	УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП(Источник,Запрос);
	ВыборкаЭлАдрес = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлАдрес.Следующий() Цикл
    	АдресЭлектроннойПочты = НормализироватьАдресЭлектроннойПочты(ВыборкаЭлАдрес.ЭлАдрес);
			
		Кому = Новый Массив;		
		Кому.Добавить(Новый Структура("Адрес, Представление", АдресЭлектроннойПочты, ""));
		ТекстПисьма = "";
		ВыборкаЗП = ВыборкаЭлАдрес.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗП.Следующий() Цикл
			ТекстПисьма = ТекстПисьма+"<h2>"+ПолучитьНавигационнуюСсылку(ВыборкаЗП.Заказ) +"</h2><BR>";
			ТекстПисьма = ТекстПисьма+"<table border=""1"">";
			Выборка = ВыборкаЗП.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстПисьма = ТекстПисьма+"<tr>"+Выборка.Номенклатура+"</tr>";
			КонецЦикла;
			ТекстПисьма = ТекстПисьма+"</table>"
		КонецЦикла;
		
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма("Не установлен КПП", ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);
			
 	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРозсылкуНоменклатурыПоЗаказуПоставщику()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Подготавливает форму справочника номенклатуры к работе с коефициентом приоритетности продаж 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма справчника номенклатуры
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки коефициента приоритетности продаж для подключения методов на клиенте
//
Процедура ПодготовитьНоменклатуру(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;	
	ГруппаКартинка = Элементы.Найти("ГруппаКартинка");
		
	ДобавляемыеРеквизиты = Новый Массив; 	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ККП_Опт", Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ККП_Розница", Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НеПересчитыватьАвтоматически_Опт", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НеПересчитыватьАвтоматически_Розница", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоефициентПриоритетностиПродажИмяБибилиотеки",  Новый ОписаниеТипов("Строка")));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма.КоефициентПриоритетностиПродажИмяБибилиотеки = ИмяОбработки;
			
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 							"Группа_КПП_Розница");
	Параметры.Вставить("Заголовок",						"Коефициент приоритетности продаж (розница)");
	Параметры.Вставить("Вид", 							ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	Параметры.Вставить("ОтображатьЗаголовок", Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка", Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	Группа_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаКартинка);
	
	    Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ККП_Розница");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "ККП_Розница");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("КнопкаОчистки", Истина);
		Параметры.Вставить("РедактированиеТекста", Ложь);
		Параметры.Вставить("БыстрыйВыбор", Истина);
		Параметры.Вставить("ЦветФона", Новый Цвет(255, 239, 213));		
		Параметры.Вставить("РастягиватьПоГоризонтали", Ложь);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеВвода_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Розница);
		ПолеВвода_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "НеПересчитыватьАвтоматически_Розница");
		Параметры.Вставить("Заголовок",	"Не изменять автоматически");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "НеПересчитыватьАвтоматически_Розница");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка", "Этот флажок позволяет зафиксировать КПП(розница) для данной номенклатуры");
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Розница);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");
		
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 							"Группа_КПП_Опт");
	Параметры.Вставить("Заголовок",						"Коефициент приоритетности продаж (опт)");
	Параметры.Вставить("Вид", 							ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	Параметры.Вставить("ОтображатьЗаголовок", Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка", Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	Группа_КПП_Опт = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаКартинка);
	
	    Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ККП_Опт");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "ККП_Опт");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("КнопкаОчистки", Истина);
		Параметры.Вставить("РедактированиеТекста", Ложь);
		Параметры.Вставить("БыстрыйВыбор", Истина);
		Параметры.Вставить("ЦветФона", Новый Цвет(255, 239, 213));		
		Параметры.Вставить("РастягиватьПоГоризонтали", Ложь);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеВвода_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Опт);
		ПолеВвода_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "НеПересчитыватьАвтоматически_Опт");
		Параметры.Вставить("Заголовок",	"Не изменять автоматически");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "НеПересчитыватьАвтоматически_Опт");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка", "Этот флажок позволяет зафиксировать КПП(опт) для данной номенклатуры");
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Опт);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
	
КонецПроцедуры // ПодготовитьНоменклатуру()

Процедура ЗагрузитьЗначения_КПП_ВФормуСправочника(ЭтаФорма)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭтаФорма.Объект.Ссылка);
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Розница();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка, "ККП_Розница, НеПересчитыватьАвтоматически_Розница");		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Опт();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка, "ККП_Опт, НеПересчитыватьАвтоматически_Опт");		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗначения_КПП_ВФормуСправочника()


Функция ПолучитьТекстЗапроса_КПП_Розница()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период							КАК Период,
		|	Номенклатура					КАК Номенклатура,
		|	Значение						КАК ККП_Розница,	
		|   НеПересчитыватьАвтоматически    КАК НеПересчитыватьАвтоматически_Розница
		|ИЗ
		|	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура = &Номенклатура)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Розница()

Функция ПолучитьТекстЗапроса_КПП_Опт()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период							КАК Период,
		|	Номенклатура					КАК Номенклатура, 
		|	Значение						КАК ККП_Опт,	
		|   НеПересчитыватьАвтоматически    КАК НеПересчитыватьАвтоматически_Опт
		|ИЗ
		|	РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура = &Номенклатура)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Опт()


//http://r.ktc-ua.com/issues/4749 
#Область Задача_4749

Процедура УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП(Источник, Запрос)
	
	ЭтоЗаказКлиента = ?(ТипЗнч(Источник)=Тип("ДокументОбъект.ЗаказКлиента"),Истина,Ложь);
	Документ =?(ЭтоЗаказКлиента,"ЗаказКлиента","ЗаказПоставщику");	
	УсловиеЭтоНовый = ?(ЭтоЗаказКлиента Или Источник.ЭтоНовый(), "", 
		" ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗП_Остатки
		|	ПО 
		|		Заказ.КодСтроки 	= ЗП_Остатки.КодСтроки
		|	И 	Заказ.Номенклатура	= ЗП_Остатки.Номенклатура
		|	И 	Заказ.Назначение 	= ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");	
	УсловиеОтмененныхСтрок = ?(ЭтоЗаказКлиента," И 	Заказ.Отменено ",""); 
	
	ТекстЗапроса 	= ?(ЭтоЗаказКлиента,
						ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента(),
						ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику());
	Запрос.Текст	= СтрЗаменить(ТекстЗапроса, "%2", УсловиеЭтоНовый);
	
	УИ = Новый УникальныйИдентификатор("edad1b9d-2d1a-11e4-9b74-0007e90c5769");
	
	Запрос.УстановитьПараметр("Ссылка"	, Источник.Ссылка);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УИ));
	
КонецПроцедуры // УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП()

Функция ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказ.Ссылка 		КАК Заказ,
		|	Заказ.Номенклатура 	КАК Номенклатура,
		|	ISNULL(Сведения.Значение,"""")		КАК ЭлАдрес,
		|	ISNULL(КПП_Розница.Значение,ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка))	КАК КПП
		|ПОМЕСТИТЬ ОсновнойКеш
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Заказ
		|	%2	
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сведения
		|	ПО 	
		|		Заказ.Номенклатура.ВидНоменклатуры	= Сведения.Объект
		|	И 	Сведения.Свойство 					= &Свойство
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, ) КАК КПП_Розница
		|	ПО 
		|		Заказ.Номенклатура = КПП_Розница.Номенклатура
		|ГДЕ
		|	Заказ.Ссылка = &Ссылка
		|	
		|;
		|ВЫБРАТЬ
		|	ОсновнойКеш.Заказ 					КАК Заказ,
		|	ОсновнойКеш.Номенклатура			КАК Номенклатура,
		|	ОсновнойКеш.ЭлАдрес 				КАК ЭлАдрес
		|ИЗ
		|	ОсновнойКеш КАК ОсновнойКеш
		|ГДЕ
		|	(ОсновнойКеш.КПП =ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка) 
		|		ИЛИ ОсновнойКеш.КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.Актуальный))
		|ИТОГИ ПО
		|	ЭлАдрес,
		|	Заказ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТекстЗапросаКППРассылкуНоменклатуры()

Функция ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Заказ,
	|	Заказ.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Сведения.Значение, """") КАК ЭлАдрес,
	|	ЕСТЬNULL(КПП_Розница.Значение, ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)) КАК КПП,
	|	СУММА(Заказ.Количество) КАК Количество
	|ПОМЕСТИТЬ ОсновнойКеш
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сведения
	|		ПО Заказ.Номенклатура.ВидНоменклатуры = Сведения.Объект
	|			И (Сведения.Свойство = &Свойство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, ) КАК КПП_Розница
	|		ПО Заказ.Номенклатура = КПП_Розница.Номенклатура
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка
	|	И Заказ.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ.Номенклатура,
	|	ЕСТЬNULL(Сведения.Значение, """"),
	|	ЕСТЬNULL(КПП_Розница.Значение, ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)),
	|	Заказ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнойКеш.Заказ КАК Заказ,
	|	ОсновнойКеш.Номенклатура КАК Номенклатура,
	|	ОсновнойКеш.ЭлАдрес КАК ЭлАдрес
	|ИЗ
	|	ОсновнойКеш КАК ОсновнойКеш
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки КАК СвободныеОстаткиОстатки
	|		ПО ОсновнойКеш.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|		ПО ОсновнойКеш.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	(ОсновнойКеш.КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ОсновнойКеш.КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.Актуальный))
	|	И ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) = ОсновнойКеш.Количество
	|ИТОГИ ПО
	|	ЭлАдрес,
	|	Заказ";	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТекстЗапросаКППРассылкуНоменклатуры()



Функция НормализироватьАдресЭлектроннойПочты(знач ПроверяемыйАдрес)	
		
	Результат  		 = РазобратьСтрокуСПочтовымиАдресами(ПроверяемыйАдрес);	
	КоличествоСтрок  = Результат.ВГраница();
	АдресРезультат	 = "";	
	
	Если Результат 		 = Неопределено 	Тогда Возврат Неопределено; КонецЕсли;
	Если КоличествоСтрок = -1 				Тогда Возврат Неопределено; КонецЕсли;

	
	Для Индекс = 0 По КоличествоСтрок Цикл
		АдресДляПроверки = Результат[Индекс].Адрес;
		Если СтрЧислоВхождений(АдресДляПроверки,"@") <> 1 Тогда
			Продолжить; 
		КонецЕсли;
		ДоменныйАдрес = Прав(АдресДляПроверки, СтрДлина(АдресДляПроверки) - Найти(АдресДляПроверки,"@"));
		Если СтрДлина(ДоменныйАдрес) > 0 Тогда
			Если СтрЧислоВхождений(ДоменныйАдрес,".") < 1 ИЛИ Лев(ДоменныйАдрес,1) = "." ИЛИ Прав(ДоменныйАдрес,1) = "." Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Возврат АдресДляПроверки;
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаАдресов)
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	СимволыРазделители = ";,";
	
	Индекс = 1;               
	Накопитель = "";          
	                          
	ПолноеИмяАдресата = "";   
	ПочтовыйАдрес = "";      
	СтадияРазбора = 1; 
		
	Пока Индекс <= СтрДлина(СтрокаАдресов) Цикл
		
		Символ = Сред(СтрокаАдресов, Индекс, 1);
		
		Если      Символ = " " Тогда
			Индекс = ? ((ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1) > Индекс,
			             ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1,
			             Индекс);
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
				СтадияРазбора = 3;
			КонецЕсли;
			Накопитель = "";
		ИначеЕсли Символ = "@" Тогда
			Если      СтадияРазбора = 1 Тогда
				СтадияРазбора = 2;
				
				Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
					Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
				
				Накопитель = Накопитель + Символ;
			ИначеЕсли СтадияРазбора = 2 Тогда
				Возврат Неопределено;
			ИначеЕсли СтадияРазбора = 3 Тогда
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли Найти(СимволыРазделители, Символ) > 0 Тогда
			
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
			КонецЕсли;
			
			СтадияРазбора = 1;
			
			Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
				Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
			КонецЕсли;
			
			ПочтовыйАдрес = "";
			ПолноеИмяАдресата = "";
			Накопитель = "";
		Иначе
			Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
				Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если      СтадияРазбора = 1 Тогда
		ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
	ИначеЕсли СтадияРазбора = 2 Тогда
		ПочтовыйАдрес = Накопитель;
	КонецЕсли;

	Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
		Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

Функция ПропуститьПробелы(знач Строка, знач ТекущийИндекс, знач ПропускаемыйСимвол)	
	Результат = ТекущийИндекс;	
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	Возврат ТекущийИндекс;	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.3";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "КоефициентПриоритетностиПродаж");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "КоефициентПриоритетностиПродаж [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "КоефициентПриоритетностиПродаж [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "КоефициентПриоритетностиПродаж");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков
	
// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти
