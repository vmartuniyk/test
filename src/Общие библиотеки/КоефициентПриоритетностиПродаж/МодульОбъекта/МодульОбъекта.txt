
#Область ИнтерфейсАвтоматическихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиcокТестов = Новый Массив;
	СпиcокТестов.Добавить("Тест_ПроверитьВерсиюБиблиотеки");
	
	ПараметрыТестов = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж", Истина, Неопределено);
	СпиcокТестов.Добавить(ПараметрыТестов);

	#Область Задача_4749
	СпиcокТестов.Добавить("Тест_ВыполнитьРассылкуНоменклатурыПоЗаказу");
	#КонецОбласти	


	Возврат СпиcокТестов;
	
КонецФункции


Процедура Тест_ПроверитьВерсиюБиблиотеки() Экспорт

	ВнешниеПараметрыРегистрации = СведенияОВнешнейОбработке();
	ВнутрениеПараметрыРегистрации = git_КоефициентПриоритетностиПродажСервер.СведенияОВнешнейОбработке();	
	ЮнитТест.ПроверитьРавенство(ВнешниеПараметрыРегистрации.Версия, ВнутрениеПараметрыРегистрации.Версия, );

КонецПроцедуры // Тест_ПроверитьВерсиюБиблиотеки()
 
Процедура Тест_ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(Параметр) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");
	
	ПутьКРепозиторию 	 = WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту = ПутьКРепозиторию + "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
	
	ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);
	ЭлементНоменклатуры = ВнешнийОбъект.СоздатьЭлементСправочника();

	ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(Новый Структура("Период, Номенклатура, Значение, НеПересчитыватьАвтоматически", 
																		ТекущаяДата, 
																		ЭлементНоменклатуры,
																		Неопределено,
																		Истина), "КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж");
																		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭлементНоменклатуры);
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Опт();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Период <> ТекущаяДата Тогда
			ВызватьИсключение НСтр("ru='Период записи не совпадает!'");		
		ИначеЕсли Выборка.Номенклатура <> ЭлементНоменклатуры Тогда
			ВызватьИсключение НСтр("ru='Номенклатура записи не совпадает!'");
		ИначеЕсли Выборка.НеПересчитыватьАвтоматически_Опт <> Истина Тогда
			ВызватьИсключение НСтр("ru='НеПересчитыватьАвтоматически записи не совпадает!'");
		КонецЕсли;
	Иначе	
		ВызватьИсключение НСтр("ru='Данные не удалось записать'");	
	КонецЕсли;
																																			
КонецПроцедуры

#Область Задача_4749

Процедура Тест_ВыполнитьРассылкуНоменклатурыПоЗаказу() Экспорт

	ДопСообщениеОшибки = НСтр("ru=' Не верный тип запроса ""ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику"" '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику(), Тип("Строка"),ДопСообщениеОшибки);

	ДопСообщениеОшибки 	= НСтр("ru=' Не верный тип запроса ""ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента"" '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьТип(ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента(), Тип("Строка"),ДопСообщениеОшибки);	
	
	Адрес = "Тест poshta@ktc.rovno.ua Тест"; 
	ЮнитТест.ПроверитьРавенство(НормализироватьАдресЭлектроннойПочты(Адрес), "poshta@ktc.rovno.ua");
	
	ДанныеДляТестирования = СоздатьДанныеДляТестирования();
	
	Если ЗначениеЗаполнено(ДанныеДляТестирования.Заказ) Тогда
		ЗаказКлиента = ДанныеДляТестирования.Заказ.ПолучитьОбъект();
		ЗаказКлиента.Товары[0].Отменено = Истина;
		ЗаказКлиента.Товары[0].ПричинаОтмены = ДанныеДляТестирования.ПричинаОтмены;
		ЗаказКлиента.Записать();
		Запрос = Новый Запрос;
		УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП(ЗаказКлиента, Запрос);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		ЮнитТест.ПроверитьЗаполненность(РезультатЗапроса.Найти(ДанныеДляТестирования.Заказ));
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ДанныеДляТестирования.ЗаказНаОсновнойСклад) Тогда
		ЗаказКлиента = ДанныеДляТестирования.ЗаказНаОсновнойСклад.ПолучитьОбъект();
		ЗаказКлиента.Товары[0].Отменено = Истина;
		ЗаказКлиента.Товары[0].ПричинаОтмены = ДанныеДляТестирования.ПричинаОтмены;
		ЗаказКлиента.Записать();
		Запрос = Новый Запрос;
		УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП(ЗаказКлиента, Запрос);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		ЮнитТест.ПроверитьЗаполненность(РезультатЗапроса.Найти(ДанныеДляТестирования.ЗаказНаОсновнойСклад));
	КонецЕсли;
	
	УничтожитьДанныеДляТестирования(ДанныеДляТестирования);
	
КонецПроцедуры // Тест_ВыполнитьРассылкуНоменклатурыПоЗаказу()

#КонецОбласти


Функция СоздатьДанныеДляТестирования()
	
	ДанныеДляТестирования = Новый Структура;
	
	Склад 					= СоздатьСклад();
	ОсновнойСклад           = СоздатьСклад();

	Запись 			= РегистрыСведений.Модуль_ДоступныеСклады.СоздатьМенеджерЗаписи();
	Запись.Период	= ТекущаяДата();
	Запись.Склад	= ОсновнойСклад;
	Запись.Основной = Истина;
	Запись.Записать();
	
	
	Номенклатура    		= СоздатьНоменклатуру("Номенклатура");
	СерийныйНомер			= СоздатьСерийныйНомер(Номенклатура);
	
	Сертификат	    		= СоздатьНоменклатуру("Сертификат");
	СертификатКТС			= СоздатьСерийныйНомер(Сертификат);
	
	Организация				= СоздатьОрганизацию();
	Поставщик				= СоздатьПоставщика();
	Клиент					= СоздатьКлиента("Клиент");
	КонтрагентПоставщик 	= СоздатьКонтрагента(Поставщик);
	КонтрагентКлиент 		= СоздатьКонтрагента(Клиент);
	СоглашениеСКлиентом 	= СоздатьСоглашениеСКлиентами(Клиент, КонтрагентКлиент, Организация, Склад);
	СоглашениеСПоставщиком 	= СоздатьСоглашенияСПоставщками(Поставщик, КонтрагентПоставщик, Организация, Склад);
	
	ПричинаОтмены 			= Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
	ПричинаОтмены.Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Тест");
	ПричинаОтмены.Записать();
	
	ПоступлениеТоваров 		= СоздатьПоступлениеТоваровИУслуг(Поставщик		,КонтрагентПоставщик	,Организация,
															  Склад			,СоглашениеСПоставщиком	,Номенклатура, 
															  СерийныйНомер);
															  
	Заказ	= СоздатьЗаказКлиента(Клиент, КонтрагентКлиент, Организация, СоглашениеСКлиентом,Склад,Номенклатура);
	
	ЗаказНаОсновнойСклад	= СоздатьЗаказКлиента(Клиент, КонтрагентКлиент, Организация, СоглашениеСКлиентом,ОсновнойСклад,Номенклатура);
	
	Запись.Удалить();

	ДанныеДляТестирования.Вставить("Склад"					, Склад);
	ДанныеДляТестирования.Вставить("ОсновнойСклад"			, ОсновнойСклад);
	ДанныеДляТестирования.Вставить("Номенклатура"			, Номенклатура);
	ДанныеДляТестирования.Вставить("СерийныйНомер"			, СерийныйНомер);
	ДанныеДляТестирования.Вставить("Сертификат"				, Сертификат);
	
	ДанныеДляТестирования.Вставить("Организация"			, Организация);
	ДанныеДляТестирования.Вставить("Поставщик"				, Поставщик);
	ДанныеДляТестирования.Вставить("Клиент"					, Клиент);
	ДанныеДляТестирования.Вставить("КонтрагентПоставщик"	, КонтрагентПоставщик);
	ДанныеДляТестирования.Вставить("КонтрагентКлиент"		, КонтрагентКлиент);
	ДанныеДляТестирования.Вставить("СоглашениеСКлиентом"	, СоглашениеСКлиентом);
	ДанныеДляТестирования.Вставить("СоглашениеСПоставщиком"	, СоглашениеСПоставщиком);
	
	ДанныеДляТестирования.Вставить("ПоступлениеТоваров"		, ПоступлениеТоваров);
	ДанныеДляТестирования.Вставить("ЗаказНаОсновнойСклад"	, ЗаказНаОсновнойСклад);
	ДанныеДляТестирования.Вставить("Заказ"					, Заказ);
	ДанныеДляТестирования.Вставить("ПричинаОтмены"			, ПричинаОтмены.Ссылка);
	
	Возврат ДанныеДляТестирования;
	
КонецФункции

Процедура УничтожитьДанныеДляТестирования(ДанныеДляТестирования)

	Если ТипЗнч(ДанныеДляТестирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
#Область ПометкаНаУдалениеДляДокументов


	Если ДанныеДляТестирования.Свойство("ЗаказНаОсновнойСклад") Тогда
		
		ЗаказНаОсновнойСклад = ДанныеДляТестирования.ЗаказНаОсновнойСклад.ПолучитьОбъект();
		
		СправочникОбъект = ЗаказНаОсновнойСклад.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		ЗаказНаОсновнойСклад.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Заказ") Тогда
		
		Заказ = ДанныеДляТестирования.Заказ.ПолучитьОбъект();
		
		СправочникОбъект = Заказ.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		Заказ.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("ПоступлениеТоваров") Тогда
		
		ПоступлениеТоваров = ДанныеДляТестирования.ПоступлениеТоваров.ПолучитьОбъект();
		
		СправочникОбъект = ПоступлениеТоваров.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
		ПоступлениеТоваров.Удалить();
		
	КонецЕсли;
	
#КонецОбласти 	
	
#Область УничтожениеСправочников

	Если ДанныеДляТестирования.Свойство("СоглашениеСКлиентом") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСКлиентом.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("СоглашениеСПоставщиком") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСПоставщиком.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("КонтрагентКлиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентКлиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("КонтрагентПоставщик") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентПоставщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Клиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Клиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Поставщик") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Поставщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Организация") Тогда
		
		НаборЗаписей = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ДанныеДляТестирования.Организация);
		НаборЗаписей.Записать();
	
		СправочникОбъект = ДанныеДляТестирования.Организация.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("СерийныйНомер") Тогда
		СправочникОбъект = ДанныеДляТестирования.СерийныйНомер.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Номенклатура") Тогда
		СправочникОбъект = ДанныеДляТестирования.Номенклатура.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если ДанныеДляТестирования.Свойство("Склад") Тогда
		СправочникОбъект = ДанныеДляТестирования.Склад.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ОсновнойСклад") Тогда
		СправочникОбъект = ДанныеДляТестирования.ОсновнойСклад.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ПричинаОтмены") Тогда
		СправочникОбъект = ДанныеДляТестирования.ПричинаОтмены.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
				
#КонецОбласти

КонецПроцедуры // УничтожитьДанныеДляТестирования()
 
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()



#Область Справочники

Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

Функция СоздатьНоменклатуру(УИНаименование)
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование(УИНаименование);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				Наименование);   
	ПараметрыЗаполнения.Вставить("ИспользоватьУпаковки",		Ложь);
	ПараметрыЗаполнения.Вставить("ИспользоватьСерийныеНомера",	Истина);
	
	Бибилиотека = ПолучитьБиблиотекуНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

Функция СоздатьСерийныйНомер(НоменклатураСсылка)

	Код = ПреобразоватьУникальныйИдентификаторВНаименование(НоменклатураСсылка.Наименование+"СерийныйНомер");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",	НоменклатураСсылка);   
	ПараметрыЗаполнения.Вставить("Код",			Код);
	
	Бибилиотека = ПолучитьБиблиотекуСерийныеНомера();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСерийныйНомер()

Функция СоздатьОрганизацию()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Организация");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуОрганизации();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьОрганизацию()

Функция СоздатьПоставщика()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Поставщик");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Поставщик", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКлиента(УИНаименование)

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование(УИНаименование);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Клиент", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()

Функция СоздатьКонтрагента(Партнер)

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Контрагент");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуКонтаргенты();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьКонтрагента()

Функция СоздатьСоглашениеСКлиентами(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с клиентом");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашениеСКлиентами();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

Функция СоздатьСоглашенияСПоставщками(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с поставщиком");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашенияСПоставщками();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()

#КонецОбласти

#Область Документы

Функция ИнициализироватьТаблицуТоваров()

	Товары = Новый ТаблицаЗначений;
	                                                            
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	Товары.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Товары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Товары;

КонецФункции // ИнициализироватьТаблицуТоваров()

Функция ИнициализироватьТаблицуСерийныхНомеров()

	СерийныеНомера = Новый ТаблицаЗначений;
	СерийныеНомера.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомераНоменклатуры"));
	СерийныеНомера.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат СерийныеНомера;

КонецФункции // ИнициализироватьТаблицуСерийныхНомеров()

Функция СоздатьПоступлениеТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Номенклатура, СерийныйНомер)

	Товары 			= ИнициализироватьТаблицуТоваров();
	СерийныеНомера  = ИнициализироватьТаблицуСерийныхНомеров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
		
	НоваяСтрока = СерийныеНомера.Добавить();
	НоваяСтрока.СерийныйНомер 					= СерийныйНомер;
	НоваяСтрока.КлючСвязиСерийныхНомеров		= 1;
	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер"			, Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент"		, Контрагент);
	ПараметрыЗаполнения.Вставить("Организация"		, Организация);
	ПараметрыЗаполнения.Вставить("Склад"			, Склад);
	ПараметрыЗаполнения.Вставить("Соглашение"		, Соглашение);
	ПараметрыЗаполнения.Вставить("Товары"			, Товары);
	ПараметрыЗаполнения.Вставить("СерийныеНомера"	, СерийныеНомера);
	
	Бибилиотека = ПолучитьБиблиотекуПоступлениеТоваров();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()

Функция СоздатьЗаказКлиента(Партнер,Контрагент,Организация,Соглашение, Склад, Номенклатура)
	
	Товары 		= ИнициализироватьТаблицуТоваров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Номенклатура;
	НоваяСтрока.ВариантОбеспечения				= Перечисления.ВариантыОбеспечения.СоСклада; 
	НоваяСтрока.ДатаОтгрузки 					= КонецМесяца(ТекущаяДата());
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер"			, Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент"		, Контрагент);
	ПараметрыЗаполнения.Вставить("Организация"		, Организация);
	ПараметрыЗаполнения.Вставить("Склад"			, Склад);
	ПараметрыЗаполнения.Вставить("Соглашение"		, Соглашение);
	ПараметрыЗаполнения.Вставить("Товары"			, Товары);
	ПараметрыЗаполнения.Вставить("Статус"			, Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	
	Бибилиотека = ПолучитьБиблиотекуЗаказКлиента();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции //СоздатьЗаказКлиента()

#КонецОбласти

#Область Библиотеки

Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

Функция ПолучитьВерсиюБибилиотеки(ИмяБибилиотеки)
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВерсиюВнешнегоОбъектаИзБазыДанных(ИмяБибилиотеки);
КонецФункции // ПолучитьВерсиюБибилиотеки()

Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

Функция ПолучитьБиблиотекуСерийныеНомера()
	ПутьКБиблиотеке = "\tests\Справочники\СерийныеНомераНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСерийныеНомера()

Функция ПолучитьБиблиотекуОрганизации()
	ПутьКБиблиотеке = "\tests\Справочники\Организации\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуОрганизации()

Функция ПолучитьБиблиотекуПартнеры()
	ПутьКБиблиотеке = "\tests\Справочники\Партнеры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПартнеры()

Функция ПолучитьБиблиотекуКонтаргенты()
	ПутьКБиблиотеке = "\tests\Справочники\Контрагенты\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуКонтаргенты()

Функция ПолучитьБиблиотекуСоглашениеСКлиентами()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашениеСКлиентами\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашениеСКлиентами()

Функция ПолучитьБиблиотекуСоглашенияСПоставщками()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашенияСПоставщками\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашенияСПоставщками()

Функция ПолучитьБиблиотекуПоступлениеТоваров()
	ПутьКБиблиотеке = "\tests\Документы\ПоступлениеТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПоступлениеТоваров()

Функция ПолучитьБиблиотекуЗаказКлиента()
	ПутьКБиблиотеке = "\tests\Документы\ЗаказКлиента\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуЗаказКлиента()

Функция ПолучитьБиблиотекуРеализацияТоваровИУслуг()
	ПутьКБиблиотеке = "\tests\Документы\РеализацияТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуРеализацияТоваровИУслуг()

Функция ПолучитьБиблиотекуЗаявкаСервисногоЦентра()
	ПутьКБиблиотеке = "\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуЗаявкаСервисногоЦентра()

#КонецОбласти 


#КонецОбласти

	
#Область ПрограммныйИнтерфейс
	
// Подготавливает управляемую форму к работе с коефициентом приоритетности продаж 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ПодготовитьКоефициентПриоритетностиПродажКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПодготовитьНоменклатуру(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
		ЗагрузитьЗначения_КПП_ВФормуСправочника(ЭтаФорма);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ПодготовитьВидыНоменклатуры(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьКоефициентПриоритетностиПродажКРаботе() 

Процедура ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(ПараметрыЗаполнения, ИмяРегистра) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПараметрыЗаполнения.Период);
		НаборЗаписей.Отбор.Номенклатура.Установить(ПараметрыЗаполнения.Номенклатура);
		
		ПараметрыЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ПараметрыЗаполнения);
		НаборЗаписей.Записать();	
		
		СвойствоКПП = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("35834101-47e9-11e4-91ba-0007e90c5769"));  //КПП
		НаборЗаписейКПП = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписейКПП.Отбор.Объект.Установить(ПараметрыЗаполнения.Номенклатура);
		НаборЗаписейКПП.Отбор.Свойство.Установить(СвойствоКПП);
		
			НоваяЗапись  = НаборЗаписейКПП.Добавить();
	    	НоваяЗапись.Объект	 = ПараметрыЗаполнения.Номенклатура;
	    	НоваяЗапись.Свойство = СвойствоКПП;
			НоваяЗапись.Значение = СокрЛ(Лев(Строка(ПараметрыЗаполнения.Значение),1));
		НаборЗаписейКПП.Записать();
		//НаборЗаписейКПП.Очистить();

	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж() 

// Рассылка листов по задаче http://r.ktc-ua.com/issues/4749
//
// Параметры:
//  Источник  		 - ДокументОбъект.ЗаказКлиента - ссылка на заказ клиента
//  Отказ  			 - Булево
//  РежимПроведения  - 
//
Процедура ВыполнитьРассылкуНоменклатурыПоЗаказу(Источник, Отказ, РежимПроведения) Экспорт

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
		
	//http://r.ktc-ua.com/issues/5250
	Если Не ДоступныйСклад(Источник.Склад) Тогда
		Возврат;		
	КонецЕсли;
	//#5250
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Запрос 			= Новый Запрос;
	УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП(Источник,Запрос);
	ВыборкаЭлАдрес = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлАдрес.Следующий() Цикл
    	АдресЭлектроннойПочты = НормализироватьАдресЭлектроннойПочты(ВыборкаЭлАдрес.ЭлАдрес);
			
		Кому = Новый Массив;		
		Кому.Добавить(Новый Структура("Адрес, Представление", АдресЭлектроннойПочты, ""));
		ТекстПисьма = "";
		ВыборкаЗП = ВыборкаЭлАдрес.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗП.Следующий() Цикл
			ТекстПисьма = ТекстПисьма+"<h2>"+ПолучитьНавигационнуюСсылку(ВыборкаЗП.Заказ) +"</h2><BR>";
			ТекстПисьма = ТекстПисьма+"<table border=""1"">";
			Выборка = ВыборкаЗП.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстПисьма = ТекстПисьма+"<tr>"+Выборка.Номенклатура+"</tr>";
			КонецЦикла;
			ТекстПисьма = ТекстПисьма+"</table>";
			
			ТемаПисьма = "По заказу "+?(ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента"),"клиента ","поставщика ")+"№("+Источник.Номер+") "+"не установлен КПП";
			ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(ТемаПисьма, ТекстПисьма, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
			ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);

		КонецЦикла;
 	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРозсылкуНоменклатурыПоЗаказуПоставщику()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Подготавливает форму справочника номенклатуры к работе с коефициентом приоритетности продаж 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма справчника номенклатуры
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки коефициента приоритетности продаж для подключения методов на клиенте
//
Процедура ПодготовитьНоменклатуру(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;	
	ГруппаКартинка = Элементы.Найти("ГруппаКартинка");
		
	ДобавляемыеРеквизиты = Новый Массив; 	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ККП_Опт", Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ККП_Розница", Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НеПересчитыватьАвтоматически_Опт", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НеПересчитыватьАвтоматически_Розница", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоефициентПриоритетностиПродажИмяБибилиотеки",  Новый ОписаниеТипов("Строка")));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма.КоефициентПриоритетностиПродажИмяБибилиотеки = ИмяОбработки;
			
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 							"Группа_КПП_Розница");
	Параметры.Вставить("Заголовок",						"Коефициент приоритетности продаж (розница)");
	Параметры.Вставить("Вид", 							ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	Параметры.Вставить("ОтображатьЗаголовок", Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка", Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	Группа_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаКартинка);
	
	    Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ККП_Розница");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "ККП_Розница");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("КнопкаОчистки", Истина);
		Параметры.Вставить("РедактированиеТекста", Ложь);
		Параметры.Вставить("БыстрыйВыбор", Истина);
		Параметры.Вставить("ЦветФона", Новый Цвет(255, 239, 213));		
		Параметры.Вставить("РастягиватьПоГоризонтали", Ложь);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеВвода_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Розница);
		ПолеВвода_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "НеПересчитыватьАвтоматически_Розница");
		Параметры.Вставить("Заголовок",	"Не изменять автоматически");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "НеПересчитыватьАвтоматически_Розница");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка", "Этот флажок позволяет зафиксировать КПП(розница) для данной номенклатуры");
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Розница);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");
		
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 							"Группа_КПП_Опт");
	Параметры.Вставить("Заголовок",						"Коефициент приоритетности продаж (опт)");
	Параметры.Вставить("Вид", 							ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	Параметры.Вставить("ОтображатьЗаголовок", Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка", Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	Группа_КПП_Опт = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаКартинка);
	
	    Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ККП_Опт");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "ККП_Опт");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("КнопкаОчистки", Истина);
		Параметры.Вставить("РедактированиеТекста", Ложь);
		Параметры.Вставить("БыстрыйВыбор", Истина);
		Параметры.Вставить("ЦветФона", Новый Цвет(255, 239, 213));		
		Параметры.Вставить("РастягиватьПоГоризонтали", Ложь);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеВвода_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Опт);
		ПолеВвода_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "НеПересчитыватьАвтоматически_Опт");
		Параметры.Вставить("Заголовок",	"Не изменять автоматически");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "НеПересчитыватьАвтоматически_Опт");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка", "Этот флажок позволяет зафиксировать КПП(опт) для данной номенклатуры");
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Опт);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
	
КонецПроцедуры // ПодготовитьНоменклатуру()

// Подготавливает форму справочника виды номенклатуры к работе с коефициентом приоритетности продаж 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма справчника виды номенклатуры
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки коефициента приоритетности продаж для подключения методов на клиенте
//
Процедура ПодготовитьВидыНоменклатуры(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;	
	ГруппаСтраницаОсновное = Элементы.Найти("СтраницаОсновное");
		
	ДобавляемыеРеквизиты = Новый Массив; 	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоефициентПриоритетностиПродажИмяБибилиотеки"	, Новый ОписаниеТипов("Строка")));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма.КоефициентПриоритетностиПродажИмяБибилиотеки = ИмяОбработки;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"						, "Группа_КПП");
	Параметры.Вставить("Заголовок"					, "Коефициент приоритетности продаж");
	Параметры.Вставить("Вид"						, ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава"	, Ложь);
	Параметры.Вставить("Отображение"				, ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка"				, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	Параметры.Вставить("ОтображатьЗаголовок"		, Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка"		, Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента"				, Тип("ГруппаФормы"));
	Группа_КПП = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаСтраницаОсновное);
	ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры.Имя, "СтраницаОсновное", "ГруппаНаименованиеДляПечатиИДекорация");

		Параметры = Новый Структура;
		Параметры.Вставить("Имя"						, "УстанавливатьАвтоматически_Розница");
		Параметры.Вставить("Заголовок"					, "Устанавливать по умолчанию КПП для товара на остатках, но без КПП (розница)");
		Параметры.Вставить("Вид"						, ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным"				, "Объект.УстанавливатьАвтоматически_Розница");
		Параметры.Вставить("ПоложениеЗаголовка"			, ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка"					, "Для товару, який є на залишках, але КПП (роздріб) для нього не встановлено буде автоматично встановлюватись вказане Вами КПП (роздріб)");
		Параметры.Вставить("ОтображениеПодсказки"		, ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента"				, Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");

		Параметры = Новый Структура;
		Параметры.Вставить("Имя"						, "УстанавливатьАвтоматически_Опт");
		Параметры.Вставить("Заголовок"					, "Устанавливать по умолчанию КПП для товара на остатках, но без КПП (опт)");
		Параметры.Вставить("Вид"						, ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным"				, "Объект.УстанавливатьАвтоматически_Опт");
		Параметры.Вставить("ПоложениеЗаголовка"			, ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка"					, "Для товару, який є на залишках, але КПП (опт) для нього не встановлено буде автоматично встановлюватись вказане Вами КПП (опт)");
		Параметры.Вставить("ОтображениеПодсказки"		, ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента"				, Тип("ПолеФормы"));
		ПолеФлажка_КПП_Опт = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
	
КонецПроцедуры // ПодготовитьВидыНоменклатуры()

Процедура ЗагрузитьЗначения_КПП_ВФормуСправочника(ЭтаФорма)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭтаФорма.Объект.Ссылка);
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Розница();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка, "ККП_Розница, НеПересчитыватьАвтоматически_Розница");		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Опт();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка, "ККП_Опт, НеПересчитыватьАвтоматически_Опт");		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗначения_КПП_ВФормуСправочника()


Функция ПолучитьТекстЗапроса_КПП_Розница()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период							КАК Период,
		|	Номенклатура					КАК Номенклатура,
		|	Значение						КАК ККП_Розница,	
		|   НеПересчитыватьАвтоматически    КАК НеПересчитыватьАвтоматически_Розница
		|ИЗ
		|	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура = &Номенклатура)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Розница()

Функция ПолучитьТекстЗапроса_КПП_Опт()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период							КАК Период,
		|	Номенклатура					КАК Номенклатура, 
		|	Значение						КАК ККП_Опт,	
		|   НеПересчитыватьАвтоматически    КАК НеПересчитыватьАвтоматически_Опт
		|ИЗ
		|	РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура = &Номенклатура)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Опт()


//http://r.ktc-ua.com/issues/4749 
#Область Задача_4749

Процедура УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП(Источник, Запрос)  
	
	ЭтоЗаказКлиента = ?(ТипЗнч(Источник)=Тип("ДокументОбъект.ЗаказКлиента"),Истина,Ложь);
	Документ =?(ЭтоЗаказКлиента,"ЗаказКлиента","ЗаказПоставщику");	
	УсловиеЭтоНовый = ?(ЭтоЗаказКлиента Или Источник.ЭтоНовый(), "", 
		"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|				&ТекущаяДата,
		|				(Номенклатура, КодСтроки) В
		|					(ВЫБРАТЬ
		|						КешСсылок.Номенклатура,
		|						КешСсылок.КодСтроки
		|					ИЗ
		|						КешСсылок КАК КешСсылок)) КАК ЗП_Остатки
		|		ПО КешСсылок.Ссылка = ЗП_Остатки.ЗаказПоставщику
		|			И КешСсылок.Номенклатура = ЗП_Остатки.Номенклатура
		|			И КешСсылок.КодСтроки = ЗП_Остатки.КодСтроки");
	
	ТекстЗапроса 	= ?(ЭтоЗаказКлиента,
						ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента(),
						ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику());
	Запрос.Текст	= СтрЗаменить(ТекстЗапроса, "%2", УсловиеЭтоНовый);
	
	УИ = Новый УникальныйИдентификатор("2cdef421-31b5-11e4-80d4-001e676b0175");
	
	Запрос.УстановитьПараметр("ТекущаяДата"	, ТекущаяДата());
	Запрос.УстановитьПараметр("Ссылка"		, Источник.Ссылка);
	Запрос.УстановитьПараметр("Свойство"	, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УИ));
	
КонецПроцедуры // УстановитьПараметрыЗапросаКППРассылкаНоменклатурыБезКПП()

Функция ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказПоставщику()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Ссылка 							КАК Ссылка,
		|	Номенклатура					КАК Номенклатура,
		|	Номенклатура.ВидНоменклатуры 	КАК ВидНоменклатуры,
		|	КодСтроки						КАК КодСтроки
		|ПОМЕСТИТЬ КешСсылок
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары
		|ГДЕ
		|	Ссылка = &Ссылка
		|	И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)

		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Номенклатура,
		|	ВидНоменклатуры
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Значение 						КАК ЭлАдрес,
		|	Объект 							КАК Объект
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения
		|ГДЕ
		|	Объект ССЫЛКА Справочник.ВидыНоменклатуры
		|	И Объект В
		|			(ВЫБРАТЬ
		|				ВидНоменклатуры
		|			ИЗ
		|				КешСсылок)
		|	И Свойство = &Свойство

		|СГРУППИРОВАТЬ ПО
		|	Значение,
		|	Объект

		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Значение, ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)) КАК КПП,
		|	Номенклатура																			   КАК Номенклатура
		|ПОМЕСТИТЬ КешКПП
		|ИЗ
		|	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(
		|			&ТекущаяДата,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Номенклатура
		|				ИЗ
		|					КешСсылок ))
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешСсылок.Номенклатура																			КАК Номенклатура,
		|	ЕСТЬNULL(ДопСведения.ЭлАдрес, """") 															КАК ЭлАдрес,
		|	ЕСТЬNULL(КешКПП.КПП, ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)) 	КАК КПП,
		|	КешСсылок.Ссылка 																				КАК Заказ
		|ПОМЕСТИТЬ ОсновнойКеш
		|ИЗ
		|	КешСсылок КАК КешСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|		ПО КешСсылок.ВидНоменклатуры = ДопСведения.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ КешКПП КАК КешКПП
		|		ПО КешСсылок.Номенклатура = КешКПП.Номенклатура
		|	%2
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура			КАК Номенклатура,
		|	ЭлАдрес 				КАК ЭлАдрес,
		|	Заказ 					КАК Заказ
		|ИЗ
		|	ОсновнойКеш 
		|ГДЕ
		|	(КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)
		|			ИЛИ КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.Актуальный))
		|ИТОГИ ПО
		|	ЭлАдрес,
		|	Заказ";
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТекстЗапросаКППРассылкуНоменклатуры()

Функция ПолучитьТекстЗапросаКППРассылкаНоменклатурыБезКППЗаказКлиента()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Ссылка 							КАК Заказ,
		|	Номенклатура		 			КАК Номенклатура,
		|	СУММА(Количество) 				КАК Количество,
		|	Номенклатура.ВидНоменклатуры	КАК ВидНоменклатуры
		|ПОМЕСТИТЬ КешСсылок
		|ИЗ
		|	Документ.ЗаказКлиента.Товары 
		|ГДЕ
		|	Ссылка = &Ссылка
		|	И Отменено

		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Ссылка,
		|	Номенклатура.ВидНоменклатуры

		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Значение КАК ЭлАдрес,
		|	ВЫРАЗИТЬ(Объект КАК Справочник.ВидыНоменклатуры) КАК Объект
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения
		|ГДЕ
		|	Свойство = &Свойство

		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Значение, ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)) КАК КПП,
		|	Номенклатура
		|ПОМЕСТИТЬ КешКПП
		|ИЗ
		|	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(
		|																						&ТекущаяДата,
		|																						Номенклатура В (ВЫБРАТЬ	Номенклатура ИЗ КешСсылок)
		|																					  )
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КешСсылок.Заказ							КАК Заказ,
		|	КешСсылок.Номенклатура					КАК Номенклатура,
		|	ЕСТЬNULL(ДопСведения.ЭлАдрес, """") 	КАК ЭлАдрес,
		|	ЕСТЬNULL(КешКПП.КПП, ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)) КАК КПП,
		|	КешСсылок.Количество					КАК Количество
		|ПОМЕСТИТЬ ОсновнойКеш
		|ИЗ
		|	КешСсылок КАК КешСсылок
		|	ЛЕВОЕ СОЕДИНЕНИЕ КешКПП КАК КешКПП
		|	ПО 
		|		КешСсылок.Номенклатура = КешКПП.Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|	ПО 
		|		КешСсылок.ВидНоменклатуры = ДопСведения.Объект
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновнойКеш.Заказ 			КАК Заказ,
		|	ОсновнойКеш.Номенклатура 	КАК Номенклатура,
		|	ОсновнойКеш.ЭлАдрес 		КАК ЭлАдрес
		|ИЗ
		|	ОсновнойКеш КАК ОсновнойКеш
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
		|																 &ТекущаяДата,
		|																 Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ОсновнойКеш)
		|																)КАК СвободныеОстаткиОстатки
		|	ПО 
		|		ОсновнойКеш.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|																&ТекущаяДата,
		|																Номенклатура В (ВЫБРАТЬ	Номенклатура ИЗ	ОсновнойКеш)
		|															   )КАК ТоварыНаСкладахОстатки
		|	ПО 
		|		ОсновнойКеш.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	(ОсновнойКеш.КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.ПустаяСсылка)
		|			ИЛИ ОсновнойКеш.КПП = ЗНАЧЕНИЕ(Справочник.КоефициентПриоритетностиНоменклатуры.Актуальный))
		|	И ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)- ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) = 0
		|	И ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) = ОсновнойКеш.Количество
		|ИТОГИ ПО
		|	ЭлАдрес,
		|	Заказ";	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаКППРассылкуНоменклатуры()
//#4749 


Функция НормализироватьАдресЭлектроннойПочты(знач ПроверяемыйАдрес)	
		
	Результат  		 = РазобратьСтрокуСПочтовымиАдресами(ПроверяемыйАдрес);	
	КоличествоСтрок  = Результат.ВГраница();
	АдресРезультат	 = "";	
	
	Если Результат 		 = Неопределено 	Тогда Возврат Неопределено; КонецЕсли;
	Если КоличествоСтрок = -1 				Тогда Возврат Неопределено; КонецЕсли;

	
	Для Индекс = 0 По КоличествоСтрок Цикл
		АдресДляПроверки = Результат[Индекс].Адрес;
		Если СтрЧислоВхождений(АдресДляПроверки,"@") <> 1 Тогда
			Продолжить; 
		КонецЕсли;
		ДоменныйАдрес = Прав(АдресДляПроверки, СтрДлина(АдресДляПроверки) - Найти(АдресДляПроверки,"@"));
		Если СтрДлина(ДоменныйАдрес) > 0 Тогда
			Если СтрЧислоВхождений(ДоменныйАдрес,".") < 1 ИЛИ Лев(ДоменныйАдрес,1) = "." ИЛИ Прав(ДоменныйАдрес,1) = "." Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Возврат АдресДляПроверки;
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаАдресов)
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	СимволыРазделители = ";,";
	
	Индекс = 1;               
	Накопитель = "";          
	                          
	ПолноеИмяАдресата = "";   
	ПочтовыйАдрес = "";      
	СтадияРазбора = 1; 
		
	Пока Индекс <= СтрДлина(СтрокаАдресов) Цикл
		
		Символ = Сред(СтрокаАдресов, Индекс, 1);
		
		Если      Символ = " " Тогда
			Индекс = ? ((ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1) > Индекс,
			             ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1,
			             Индекс);
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
				СтадияРазбора = 3;
			КонецЕсли;
			Накопитель = "";
		ИначеЕсли Символ = "@" Тогда
			Если      СтадияРазбора = 1 Тогда
				СтадияРазбора = 2;
				
				Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
					Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
				
				Накопитель = Накопитель + Символ;
			ИначеЕсли СтадияРазбора = 2 Тогда
				Возврат Неопределено;
			ИначеЕсли СтадияРазбора = 3 Тогда
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли Найти(СимволыРазделители, Символ) > 0 Тогда
			
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
			КонецЕсли;
			
			СтадияРазбора = 1;
			
			Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
				Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
			КонецЕсли;
			
			ПочтовыйАдрес = "";
			ПолноеИмяАдресата = "";
			Накопитель = "";
		Иначе
			Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
				Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если      СтадияРазбора = 1 Тогда
		ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
	ИначеЕсли СтадияРазбора = 2 Тогда
		ПочтовыйАдрес = Накопитель;
	КонецЕсли;

	Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
		Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

Функция ПропуститьПробелы(знач Строка, знач ТекущийИндекс, знач ПропускаемыйСимвол)	
	Результат = ТекущийИндекс;	
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	Возврат ТекущийИндекс;	
КонецФункции

//http://r.ktc-ua.com/issues/5250 
#Область Задача_5250

Функция ДоступныйСклад(Склад)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса_ДоступныйСклад();
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции // ДоступныйСклад()

Функция ПолучитьТекстЗапроса_ДоступныйСклад()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Склад КАК Склад 	
		|ПОМЕСТИТЬ ДостуныеСклады
		|ИЗ
		| 	РегистрСведений.Модуль_ДоступныеСклады
		|ГДЕ
		|	Основной = Истина
		|	И Склад = &Склад";
		
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Опт()

#КонецОбласти

#КонецОбласти


#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.6";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "КоефициентПриоритетностиПродаж");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "КоефициентПриоритетностиПродаж [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "КоефициентПриоритетностиПродаж [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "КоефициентПриоритетностиПродаж");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков
	
// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти

