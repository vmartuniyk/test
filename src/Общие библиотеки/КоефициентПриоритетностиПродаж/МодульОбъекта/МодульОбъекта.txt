
#Область ИнтерфейсАвтоматическихТестов
	
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиcокТестов = Новый Массив;
	СпиcокТестов.Добавить("Тест_ПроверитьВерсиюБиблиотеки");
	
	ПараметрыТестов = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж", Истина, Неопределено);
	СпиcокТестов.Добавить(ПараметрыТестов);
	
	Возврат СпиcокТестов;
	
КонецФункции


Процедура Тест_ПроверитьВерсиюБиблиотеки() Экспорт

	ВнешниеПараметрыРегистрации = СведенияОВнешнейОбработке();
	ВнутрениеПараметрыРегистрации = git_КоефициентПриоритетностиПродажСервер.СведенияОВнешнейОбработке();	
	ЮнитТест.ПроверитьРавенство(ВнешниеПараметрыРегистрации.Версия, ВнутрениеПараметрыРегистрации.Версия, );

КонецПроцедуры // Тест_ПроверитьВерсиюБиблиотеки()
 
Процедура Тест_ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(Параметр) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");
	
	ПутьКРепозиторию 	 = WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту = ПутьКРепозиторию + "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
	
	ВнешнийОбъект = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);
	ЭлементНоменклатуры = ВнешнийОбъект.СоздатьЭлементСправочника();

	ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(Новый Структура("Период, Номенклатура, Значение, НеПересчитыватьАвтоматически", 
																		ТекущаяДата, 
																		ЭлементНоменклатуры,
																		Неопределено,
																		Истина), "КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж");
																		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭлементНоменклатуры);
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Опт();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Период <> ТекущаяДата Тогда
			ВызватьИсключение НСтр("ru='Период записи не совпадает!'");		
		ИначеЕсли Выборка.Номенклатура <> ЭлементНоменклатуры Тогда
			ВызватьИсключение НСтр("ru='Номенклатура записи не совпадает!'");
		ИначеЕсли Выборка.НеПересчитыватьАвтоматически_Опт <> Истина Тогда
			ВызватьИсключение НСтр("ru='НеПересчитыватьАвтоматически записи не совпадает!'");
		КонецЕсли;
	Иначе	
		ВызватьИсключение НСтр("ru='Данные не удалось записать'");	
	КонецЕсли;
																																			
КонецПроцедуры

#КонецОбласти
	
#Область ПрограммныйИнтерфейс
	
// Подготавливает управляемую форму к работе с коефициентом приоритетности продаж 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки серийных номеров для подключения методов на клиенте
//
Процедура ПодготовитьКоефициентПриоритетностиПродажКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПодготовитьНоменклатуру(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
		ЗагрузитьЗначения_КПП_ВФормуСправочника(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьКоефициентПриоритетностиПродажКРаботе() 

Процедура ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж(ПараметрыЗаполнения, ИмяРегистра) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПараметрыЗаполнения.Период);
		НаборЗаписей.Отбор.Номенклатура.Установить(ПараметрыЗаполнения.Номенклатура);
		
		ПараметрыЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ПараметрыЗаполнения);
		НаборЗаписей.Записать();	
	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеВРегистрКоефициентПриоритетностиПродаж() 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Подготавливает форму справочника номенклатуры к работе с коефициентом приоритетности продаж 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма справчника номенклатуры
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки коефициента приоритетности продаж для подключения методов на клиенте
//
Процедура ПодготовитьНоменклатуру(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;	
	ГруппаКартинка = Элементы.Найти("ГруппаКартинка");
		
	ДобавляемыеРеквизиты = Новый Массив; 	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ККП_Опт", Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ККП_Розница", Новый ОписаниеТипов("СправочникСсылка.КоефициентПриоритетностиНоменклатуры")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НеПересчитыватьАвтоматически_Опт", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НеПересчитыватьАвтоматически_Розница", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоефициентПриоритетностиПродажИмяБибилиотеки",  Новый ОписаниеТипов("Строка")));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма.КоефициентПриоритетностиПродажИмяБибилиотеки = ИмяОбработки;
			
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 							"Группа_КПП_Розница");
	Параметры.Вставить("Заголовок",						"Коефициент приоритетности продаж (розница)");
	Параметры.Вставить("Вид", 							ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	Параметры.Вставить("ОтображатьЗаголовок", Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка", Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	Группа_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаКартинка);
	
	    Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ККП_Розница");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "ККП_Розница");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("КнопкаОчистки", Истина);
		Параметры.Вставить("РедактированиеТекста", Ложь);
		Параметры.Вставить("БыстрыйВыбор", Истина);
		Параметры.Вставить("ЦветФона", Новый Цвет(255, 239, 213));		
		Параметры.Вставить("РастягиватьПоГоризонтали", Ложь);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеВвода_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Розница);
		ПолеВвода_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "НеПересчитыватьАвтоматически_Розница");
		Параметры.Вставить("Заголовок",	"Не изменять автоматически");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "НеПересчитыватьАвтоматически_Розница");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка", "Этот флажок позволяет зафиксировать КПП(розница) для данной номенклатуры");
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Розница);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Розница");
		
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", 							"Группа_КПП_Опт");
	Параметры.Вставить("Заголовок",						"Коефициент приоритетности продаж (опт)");
	Параметры.Вставить("Вид", 							ВидГруппыФормы.ОбычнаяГруппа);
	Параметры.Вставить("РазрешитьИзменениеСостава", 	Ложь);
	Параметры.Вставить("Отображение", ОтображениеОбычнойГруппы.СильноеВыделение);
	Параметры.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	Параметры.Вставить("ОтображатьЗаголовок", Истина);
	Параметры.Вставить("ЦветТекстаЗаголовка", Новый Цвет(0, 0, 0));
	Параметры.Вставить("ТипЭлемента", Тип("ГруппаФормы"));
	Группа_КПП_Опт = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, ГруппаКартинка);
	
	    Параметры = Новый Структура;
		Параметры.Вставить("Имя", "ККП_Опт");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПутьКДанным", "ККП_Опт");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
		Параметры.Вставить("КнопкаОчистки", Истина);
		Параметры.Вставить("РедактированиеТекста", Ложь);
		Параметры.Вставить("БыстрыйВыбор", Истина);
		Параметры.Вставить("ЦветФона", Новый Цвет(255, 239, 213));		
		Параметры.Вставить("РастягиватьПоГоризонтали", Ложь);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеВвода_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Опт);
		ПолеВвода_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
		
		
		Параметры = Новый Структура;
		Параметры.Вставить("Имя", "НеПересчитыватьАвтоматически_Опт");
		Параметры.Вставить("Заголовок",	"Не изменять автоматически");
		Параметры.Вставить("Вид", ВидПоляФормы.ПолеФлажка);
		Параметры.Вставить("ПутьКДанным", "НеПересчитыватьАвтоматически_Опт");
		Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("Подсказка", "Этот флажок позволяет зафиксировать КПП(опт) для данной номенклатуры");
		Параметры.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
		Параметры.Вставить("ТипЭлемента", Тип("ПолеФормы"));
		ПолеФлажка_КПП_Розница = ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа_КПП_Опт);
		ПолеФлажка_КПП_Розница.УстановитьДействие("ПриИзменении", "КПП_ПриИзмененииДанных_Опт");
	
КонецПроцедуры // ПодготовитьНоменклатуру()

Процедура ЗагрузитьЗначения_КПП_ВФормуСправочника(ЭтаФорма)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭтаФорма.Объект.Ссылка);
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Розница();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка, "ККП_Розница, НеПересчитыватьАвтоматически_Розница");		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьТекстЗапроса_КПП_Опт();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка, "ККП_Опт, НеПересчитыватьАвтоматически_Опт");		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗначения_КПП_ВФормуСправочника()


Функция ПолучитьТекстЗапроса_КПП_Розница()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период							КАК Период,
		|	Номенклатура					КАК Номенклатура,
		|	Значение						КАК ККП_Розница,	
		|   НеПересчитыватьАвтоматически    КАК НеПересчитыватьАвтоматически_Розница
		|ИЗ
		|	РегистрСведений.КПП_Розница_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура = &Номенклатура)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Розница()

Функция ПолучитьТекстЗапроса_КПП_Опт()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Период							КАК Период,
		|	Номенклатура					КАК Номенклатура, 
		|	Значение						КАК ККП_Опт,	
		|   НеПересчитыватьАвтоматически    КАК НеПересчитыватьАвтоматически_Опт
		|ИЗ
		|	РегистрСведений.КПП_Опт_ЗначениеКоефициентаПриоритетностиПродаж.СрезПоследних(, Номенклатура = &Номенклатура)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса_КПП_Опт()

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "КоефициентПриоритетностиПродаж");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "КоефициентПриоритетностиПродаж [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "КоефициентПриоритетностиПродаж [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "КоефициентПриоритетностиПродаж");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков
	
// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти
