#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	Возврат СписокТестов;
	
КонецФункции



#КонецОбласти 


#Область ПрограммныйИнтерфейс

// Подготавливает управляемую форму документа к работе 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокумент(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "")  Экспорт
	ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
КонецПроцедуры //ПодготовитьДокумент()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Определение документа 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)  
	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		
		Реквизиты = Новый Массив; 
		Реквизиты.Добавить(Новый РеквизитФормы("ПодготовитьДокумент", Новый ОписаниеТипов("Строка")));
		ЭтаФорма.ИзменитьРеквизиты(Реквизиты);	
		ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;

		ПодготовитьДокументВнутреннееПотреблениеТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	КонецЕсли;
КонецПроцедуры //ПодготовитьДокументСсылка()

// Подготавливает форму документа "Внутреннее потребление товаров" к работе с Комментарием
// в табличной часте "Товары"
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументВнутреннееПотреблениеТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)   
	Элементы = ЭтаФорма.Элементы;
	Товары = Элементы.Найти("Товары");
	Если Товары <> Неопределено Тогда 	
		// Создание элемента страницы Комментарий
		Параметры = Новый Структура;
		Параметры.Вставить("Имя"				,"ТоварыКомментарий");
		Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеВвода);
		Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Авто);
		Параметры.Вставить("ПутьКДанным"		,"Объект.Товары.Комментарий");
		Параметры.Вставить("Подсказка"			,"Причины списания товаров");
		Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
		ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Товары);         	
	КонецЕсли;
КонецПроцедуры //ПодготовитьДокументВнутреннееПотреблениеТоваров()

#КонецОбласти 

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.0";
	Наименование = "Подготовить документ";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", Наименование);
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", Наименование+" [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Наименование+" [" + Версия + "]", "МАК", "ОткрытиеФормы", Ложь, "МАК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции //СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции //ПолучитьТаблицуКоманд()

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры //ДобавитьКоманду()

#КонецОбласти


#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры //ПодменитьДействиеУправляемоеПриложение()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()

// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

#КонецОбласти


