#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти 


#Область ПрограммныйИнтерфейс

// Подготавливает управляемую форму документа к работе 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокумент(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
КонецПроцедуры //ПодготовитьДокумент()


// Определяес доступность настроеной роли из "Библиотеки внешних обработок"
//
// Параметры:
//  Идентификатор  - Строка - уникальный идентификатор роли
//
// Возвращаемое значение:
//   Булево   - признак доступности настроеной роли
//
&НаСервере
Функция НастроеннаяРольДоступна(Идентификатор) Экспорт

	//Настройка рассылки
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиРолей", , , "ДополнительныеНастройкиРолей");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос 			= Новый Запрос;
	Запрос.Текст	= ПолучитьТекстЗапросаПроверкаДоступностиРоли();
	
	Запрос.УстановитьПараметр("Идентификатор"		,Идентификатор);
	Запрос.УстановитьПараметр("ВключитьРоль"		,Настройки.ВключитьРоль);
	Запрос.УстановитьПараметр("ИсключитьРоль"		,Настройки.ИсключитьРоль);
	Запрос.УстановитьПараметр("ТекущийПользователь"	,ПараметрыСеанса.ТекущийПользователь);
	 
	Возврат Не Запрос.Выполнить().Пустой();	

КонецФункции // НастроеннаяРольДоступна() 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Подготавливает форму документа к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументСсылка(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
 	Реквизиты = Новый Массив; 
	Реквизиты.Добавить(Новый РеквизитФормы("ПодготовитьДокумент", Новый ОписаниеТипов("Строка")));
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);	
	ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;

	СсылкаНаОбъект = ЭтаФорма.Объект.Ссылка;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		ПодготовитьДокументВнутреннееПотреблениеТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПодготовитьДокументРеализацияТоваровУслуг(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ПодготовитьДокументВозвратТоваровПоставщику(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ПодготовитьДокументЗаказКлиента(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ПодготовитьДокументВозвратТоваровОтКлиента(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		ПодготовитьДокументПересчетТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки); 
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		ПодготовитьДокументСписаниеНедостачТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		ПодготовитьДокументОприходованиеИзлишковТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ПодготовитьДокументПрочееОприходованиеТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки);		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ПодготовитьДокументСсылка()


// Подготавливает форму документа "Списание недостач Товаров" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументСписаниеНедостачТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;
	ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;
	//http://r.ktc-ua.com/issues/2899
	ПроверитьДоступностьСозданияДокумента(ЭтаФорма);
	//#2899	
		
КонецПроцедуры //ПодготовитьДокументВнутреннееПотреблениеТоваров()

// Подготавливает форму документа "Оприходование излишков товаров" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументОприходованиеИзлишковТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;
	ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;
	//http://r.ktc-ua.com/issues/2899
	ПроверитьДоступностьСозданияДокумента(ЭтаФорма);
	//#2899	
		
КонецПроцедуры //ПодготовитьДокументВнутреннееПотреблениеТоваров()

// Подготавливает форму документа "Оприходование излишков товаров" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументПрочееОприходованиеТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;
	ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;
	//http://r.ktc-ua.com/issues/2899
	ПроверитьДоступностьСозданияДокумента(ЭтаФорма);
	//#2899	
		
КонецПроцедуры //ПодготовитьДокументВнутреннееПотреблениеТоваров()

Процедура ПроверитьДоступностьСозданияДокумента(ЭтаФорма)

	Если ПустаяСтрока(ЭтаФорма.Объект.ВерсияДанных) И Не НастроеннаяРольДоступна("c3dd4104-e530-4bbd-973b-57b827f27d4c") И Не РольДоступна("ПолныеПрава") Тогда
		ВызватьИсключение НСтр("ru='У вас нет доступа на создание и проведения данного документа. #Задача 2899.'");
	ИначеЕсли Не ПустаяСтрока(ЭтаФорма.Объект.ВерсияДанных) И Не НастроеннаяРольДоступна("c3dd4104-e530-4bbd-973b-57b827f27d4c") И Не РольДоступна("ПолныеПрава") Тогда  	
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;	

КонецПроцедуры


// Подготавливает форму документа "Внутреннее потребление товаров" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументВнутреннееПотреблениеТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы = ЭтаФорма.Элементы;
	
	ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;
	
	Товары = Элементы.Найти("Товары");
	// Создание элемента страницы Комментарий
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,"ТоварыКомментарий");
	Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Авто);
	Параметры.Вставить("ПутьКДанным"		,"Объект.Товары.Комментарий");
	Параметры.Вставить("Подсказка"			,"Причины списания товаров");
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Товары);         	
	
	//http://r.ktc-ua.com/issues/2899
	ПроверитьДоступностьСозданияДокумента(ЭтаФорма);
	//#2899	
	
	
КонецПроцедуры //ПодготовитьДокументВнутреннееПотреблениеТоваров()

// Подготавливает форму документа "Реализация товаров услуг" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументРеализацияТоваровУслуг(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы  				 = ЭтаФорма.Элементы;
	Объект	  				 = ЭтаФорма.Объект;
	ПараметрыФормыРеализации = ЭтаФорма.Параметры;
		
	Группа = Элементы.Найти("ГруппаПараметрыПраво");	
	Если Группа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Создание элемента страницы Комментарий
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,"ВидПодчиненногоДокументаГНАТ");
	Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Авто);
	Параметры.Вставить("ПутьКДанным"		,"Объект.ВидПодчиненногоДокументаГНАТ");
	Параметры.Вставить("ТолькоПросмотр"		,Истина);
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа);
	
	Если ПараметрыФормыРеализации.Свойство("ЗаявкаСервисногоЦентра") И Объект.ЗаказКлиента.Пустая() Тогда
		ЗаявкаСервисногоЦентра = ПараметрыФормыРеализации.ЗаявкаСервисногоЦентра;
		Если ЗаявкаСервисногоЦентра.ВидОперации = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.Авторизация Тогда
			Элементы.Партнер.РедактированиеТекста 	= Ложь;
			Элементы.Контрагент.Доступность		 	= Ложь;
			Элементы.Соглашение.Доступность		 	= Ложь;
			Элементы.Договор.Доступность		 	= Ложь;
		ИначеЕсли ЗаявкаСервисногоЦентра.ВидОперации = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный Тогда
			Элементы.Партнер.РедактированиеТекста 	= Ложь;
			Элементы.Контрагент.Доступность		 	= Ложь;
			Элементы.Соглашение.Доступность		 	= Ложь;
			Элементы.Договор.Доступность		 	= Ложь;
		ИначеЕсли ЗаявкаСервисногоЦентра.ВидОперации = Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйБезналичный Тогда
			Элементы.Партнер.РедактированиеТекста 	= Ложь;
			Элементы.Контрагент.Доступность		 	= Ложь;
			Элементы.Соглашение.Доступность		 	= Ложь;
			Элементы.Договор.Доступность		 	= Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПодготовитьДокументРеализацияТоваровУслуг()

// Подготавливает форму документа "Возврат товаров поставщику" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументВозвратТоваровПоставщику(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Элементы  				 = ЭтаФорма.Элементы;
	Объект	  				 = ЭтаФорма.Объект;
	ПараметрыФормыРеализации = ЭтаФорма.Параметры;
		
	Группа = Элементы.Найти("ГруппаПараметрыЛево");	
	Если Группа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Создание элемента страницы ДатаЗачисления
	Параметры = Новый Структура;
	Параметры.Вставить("Имя"				,"ДатаЗачисления");
	Параметры.Вставить("Вид"				,ВидПоляФормы.ПолеВвода);
	Параметры.Вставить("ПоложениеЗаголовка"	,ПоложениеЗаголовкаЭлементаФормы.Авто);
	Параметры.Вставить("ПутьКДанным"		,"Объект.ДатаЗачисления");
	Параметры.Вставить("ТипЭлемента"		,Тип("ПолеФормы"));
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Группа);
		
КонецПроцедуры //ПодготовитьДокументЗаказПоставщику()

// Подготавливает документ "Заказ клиента" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументЗаказКлиента(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект 		= ЭтаФорма.Объект;
	Ссылка 		= Объект.Ссылка;
	Элементы	= ЭтаФорма.Элементы;
	
	ЗСЦСсылка   	= Документы.ГНАТ_ЗаявкаСервисногоЦентра.ПолучитьЗаявкуСЦНаОснованииЗаказаКлиента(Ссылка);
	ЗаказПодСборку  = ЭтоЗаказПодСборку(Ссылка);
	
	// Устанавливаем доступность элементов формы Заказа клиента
	// который резервирует товар по ЗСЦ с видом сборки
	Если ЗаказПодСборку = Истина И ЗСЦСсылка = Неопределено Тогда
		УстановитьДоступностьЭлементовФормыЗаказаКлиента(ЭтаФорма);
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Статус", "СтатусПриИзмененииИзЗСЦ");
	ИначеЕсли ТипЗнч(ЗСЦСсылка) = Тип("ДокументСсылка.ГНАТ_ЗаявкаСервисногоЦентра") Тогда
		 УстановитьДоступностьЭлементовФормыЗаказаКлиента(ЭтаФорма,Истина);
		//ЭтаФорма.Доступность = Ложь;
	Иначе
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма	,"ПриИзменении"				,"Товары"	,"ПриИзмененииТЗТоваров");
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма	,"ПередНачаломДобавления"	,"Товары"	,"ПередНачаломДобавленияТЗТоваров");
		
		Реквизиты = Новый Массив; 
		Реквизиты.Добавить(Новый РеквизитФормы("КопированиеСтроки"		,Новый ОписаниеТипов("Булево")));
		ЭтаФорма.ИзменитьРеквизиты(Реквизиты);	
		ЭтаФорма.ПодготовитьДокумент = ИмяОбработки;
	КонецЕсли;
	
	//Возможность редактировать "Ответственного менеджера"  в док. "Заказ клиента"
	ИдентификаторРоли = "286f5539-0a26-4c93-beec-d508aac8393c";
	Если Не НастроеннаяРольДоступна(ИдентификаторРоли) И Не РольДоступна("ПолныеПрава") Тогда 
		Элементы.Менеджер.ТолькоПросмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаТоварыПриКопированииСтроки()

Функция ЭтоЗаказПодСборку(ЗаказСсылка)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Значение КАК ЭтоЗаказПодСборку
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения
	                      |ГДЕ
	                      |	(ВЫРАЗИТЬ(Объект КАК Документ.ЗаказКлиента)) = &ЗаказСсылка
	                      |	И Свойство = &ЗаказПодСборку");
						  
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ЗаказПодСборку", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("016f5acb-be6d-11e4-80ea-001e676b0175")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ЭтоЗаказПодСборку, Ложь);

КонецФункции // ЭтоЗаказПодСборку()
 

Процедура УстановитьДоступностьЭлементовФормыЗаказаКлиента(ЭтаФорма, ЕстьЗСЦ = ЛОЖЬ)

	Элементы = ЭтаФорма.Элементы;
	
	ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	Для каждого ГруппаФормы Из ЭтаФорма.ПодчиненныеЭлементы Цикл
		Если ГруппаФормы.Имя <> "ГруппаШапка" Тогда
			ГруппаФормы.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;

	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаСтраницы.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Имя = "ГруппаКомментарий" Тогда
			Элементы.Комментарий.ТолькоПросмотр = Истина;
		ИначеЕсли ПодчиненныйЭлемент.Имя <> "ГруппаТовары" Тогда
			ПодчиненныйЭлемент.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ПодчиненныйЭлемент Из Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Имя <> "ТоварыСостояниеОбеспечения" Тогда
			ПодчиненныйЭлемент.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаШапкаЛево.ТолькоПросмотр = Истина;
	
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаШапкаПраво.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Имя <> "ГруппаСтатусПриоритет" ИЛИ ЕстьЗСЦ = ИСТИНА Тогда
			ПодчиненныйЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПодчиненныйЭлемент Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Имя <> "КоманднаяПанель" Тогда
			ПодчиненныйЭлемент.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПоказатьСообщения.Доступность = Ложь;
	Элементы.Приоритет.Доступность = Ложь;
	Элементы.КоманднаяПанельРасчетаСтатуса.Доступность = Ложь;
	Элементы.ЗаголовокСтатус.Доступность = Ложь;

КонецПроцедуры

// Возвращает текст запроса для проверки доступности настроеной роли из "Библиотеки внешних обработок"
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - текст запроса
//
Функция ПолучитьТекстЗапросаПроверкаДоступностиРоли()

	ТекстЗапроса =
		////////////////////////////////////////////////////////////////////////////////
		//0. Загружаем таблицу настроек с составом(пользователи, профили) которым не доступна роль
		"ВЫБРАТЬ
		|	ИсключитьРоль.Идентификатор КАК Идентификатор,
		|	ИсключитьРоль.Состав КАК Состав
		|ПОМЕСТИТЬ ИсключитьРоль
		|ИЗ
		|	&ИсключитьРоль КАК ИсключитьРоль
		|;
		|
		////////////////////////////////////////////////////////////////////////////////
		//1. Загружаем таблицу настроек с составом(пользователи, профили) которым доступна роль
		|ВЫБРАТЬ
		|	ВключитьРоль.Идентификатор КАК Идентификатор,
		|	ВключитьРоль.Состав КАК Состав
		|ПОМЕСТИТЬ ВключитьРоль
		|ИЗ
		|	&ВключитьРоль КАК ВключитьРоль
		|;
		////////////////////////////////////////////////////////////////////////////////
		//2. Формируем пользователей которым доступна роль
		//2.1 - составом загруженной таблицы настроек есть профили
		//- составом профиля есть пользователи
		|ВЫБРАТЬ
		|	Пользователь
		|ПОМЕСТИТЬ КешВключитьРоль
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи
		|ГДЕ
		|	Пользователь ССЫЛКА Справочник.Пользователи
		|И	Ссылка.Профиль В (ВЫБРАТЬ Состав ИЗ ВключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|И	НЕ Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		//- составом профиля есть группа доступа
		|ВЫБРАТЬ
		|	ГруппыПользователей.Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
		|	ПО 
		|		ГруппыПользователей.Ссылка = ГруппыДоступа.Пользователь
		|	И	НЕ ГруппыПользователей.Ссылка.ПометкаУдаления
		|	И 	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
		|
		|ГДЕ
		|	ГруппыДоступа.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|И	ГруппыДоступа.Ссылка.Профиль В (ВЫБРАТЬ Состав  ИЗ ВключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|		
		|ОБЪЕДИНИТЬ
		|		
		//2.2 - составом загруженной таблицы настроек есть пользователи
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В (ВЫБРАТЬ Состав  ИЗ ВключитьРоль ГДЕ Состав Ссылка Справочник.Пользователи И Идентификатор = &Идентификатор)
		|
		|;
		////////////////////////////////////////////////////////////////////////////////
		//3. Формируем пользователей которым не доступна роль
		//3.1 - составом загруженной таблицы настроек есть профили
		//- составом профиля есть пользователи
		|ВЫБРАТЬ
		|	ГруппыДоступа.Пользователь
		|ПОМЕСТИТЬ КешИсключитьРоль
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Пользователь ССЫЛКА Справочник.Пользователи
		|И  ГруппыДоступа.Ссылка.Профиль В (ВЫБРАТЬ Состав ИЗ ИсключитьРоль  ГДЕ  Идентификатор = &Идентификатор)
		|И	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		//- составом профиля есть группа доступа
		|ВЫБРАТЬ
		|	ГруппыПользователей.Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
		|	ПО 
		|		ГруппыПользователей.Ссылка = ГруппыДоступа.Пользователь
		|	И	НЕ ГруппыПользователей.Ссылка.ПометкаУдаления
		|	И 	НЕ ГруппыДоступа.Ссылка.ПометкаУдаления
		|
		|ГДЕ
		|	ГруппыДоступа.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|И	ГруппыДоступа.Ссылка.Профиль В (ВЫБРАТЬ Состав ИЗ ИсключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|
		|ОБЪЕДИНИТЬ
		|		
		//3.2 - составом загруженной таблицы настроек есть пользователи
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В (ВЫБРАТЬ Состав  ИЗ ИсключитьРоль ГДЕ Идентификатор = &Идентификатор)
		|;
		////////////////////////////////////////////////////////////////////////////////
		//4. Таблица email для рассылки
		|ВЫБРАТЬ
		|	КешВключитьРоль.Пользователь
		|ИЗ
		|	КешВключитьРоль КАК КешВключитьРоль
		|	
		|ГДЕ
		|	НЕ КешВключитьРоль.Пользователь В (ВЫБРАТЬ Пользователь ИЗ КешИсключитьРоль)
		|И	КешВключитьРоль.Пользователь = &ТекущийПользователь";
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПроверкаДоступностиРоли()

// Подготавливает документ "ВозвратТоваровОтКлиента" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументВозвратТоваровОтКлиента(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Объект = ЭтаФорма.Объект;
	Ссылка = Объект.Ссылка;
	ДокументРеализации = Объект.ДокументРеализации; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДокументРеализации <> Неопределено И ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ДокументРеализации.Пустая()=ЛОЖЬ Тогда		
		УстановитьДоступностьЭлементовФормыВозвратТоваровОтКлиента(ЭтаФорма);  	
	КонецЕсли;


КонецПроцедуры // ПодготовитьДокументВозвратТоваровОтКлиента()

// Подготавливает документ "ПересчетТоваров" к работе
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки для подключения методов на клиенте
//
Процедура ПодготовитьДокументПересчетТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)
	
	Команды = ЭтаФорма.Команды;
	Элементы = ЭтаФорма.Элементы;

	Команды.ПоискПоШтрихкоду.СочетаниеКлавиш =   Новый СочетаниеКлавиш(Клавиша.Нет);
	
	Группа = Элементы.Найти("ГруппаТорговоеОборудование");	
	Если Группа = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Параметры = Новый Структура;
	Параметры.Вставить("Имя", "ПоискПоСерийномуНомеруШтрихкодуКодуАртикулу");
	Параметры.Вставить("ИзменяетСохраняемыеДанные", Истина);    
	Параметры.Вставить("Заголовок", "Пересчет товару");
	Параметры.Вставить("Отображение", ОтображениеКнопки.Картинка); 
	Параметры.Вставить("Картинка", 	БиблиотекаКартинок.Лупа);
	Параметры.Вставить("Действие", "ПоискПоСерийномуНомеруШтрихкодуКодуАртикулуВыполнить");
	Параметры.Вставить("СочетаниеКлавиш ", Новый СочетаниеКлавиш(Клавиша.F7));
	
	ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры);  
	
	Параметры = Новый Структура;
	Параметры.Вставить("Имя", "ПоискПоСерийномуНомеруШтрихкодуКодуАртикулу");
	Параметры.Вставить("ИмяКоманды", "ПоискПоСерийномуНомеруШтрихкодуКодуАртикулу");
	Параметры.Вставить("Заголовок", "Пересчет товару");
	Параметры.Вставить("Вид", ВидКнопкиФормы.КнопкаКоманднойПанели);
	Параметры.Вставить("СочетаниеКлавиш ", Новый СочетаниеКлавиш(Клавиша.F7));
	Параметры.Вставить("ТипЭлемента", Тип("КнопкаФормы"));
	
	ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры,Группа);
	

	ТабТовары = ЭтаФорма.Объект.Товары.Выгрузить();
	Склад = ЭтаФорма.Объект.Склад;
	
	Если ТабТовары.Количество()>1 И Склад.Пустая()=ЛОЖЬ Тогда  			                                                                  
		ВыборкаНоменклатуры = ПолучитьВыборкуПоРезервуЗСЦ(ТабТовары,Склад);
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
			ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыНоменклатура");
			ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение	= ВыборкаНоменклатуры.Ссылка;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , ,Истина , , , ) );   		
		КонецЦикла;
	КонецЕсли;
	

КонецПроцедуры  // ПодготовитьДокументПересчетТоваров(ЭтаФорма, ВнешнийОбъект, ИмяОбработки)

Функция ПолучитьВыборкуПоРезервуЗСЦ(ТабТовары,Склад)

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРезервПоЗСЦ();
	Запрос.УстановитьПараметр("ТабТовары",ТабТовары);
	Запрос.УстановитьПараметр("Склад",Склад);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции // ПолучитьВыборкуПоРезервуЗСЦ()

Функция ТекстЗапросаРезервПоЗСЦ()

	ТекстЗапроса = "ВЫБРАТЬ
				|	ПересчетТоваровТовары.Номенклатура
				|ПОМЕСТИТЬ ДокТаб
				|ИЗ
				|	&ТабТовары КАК ПересчетТоваровТовары
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СерийныеНомераНоменклатурыОстатки.Номенклатура,
				|	СерийныеНомераНоменклатурыОстатки.СерийныеНомера
				|ПОМЕСТИТЬ СерийныеНомераПоОстаткам
				|ИЗ
				|	РегистрНакопления.СерийныеНомераНоменклатуры.Остатки(
				|			,
				|			Номенклатура В
				|				(ВЫБРАТЬ
				|					ДокТаб.Номенклатура
				|				ИЗ
				|					ДокТаб КАК ДокТаб
				|				ГДЕ
				|					ДокТаб.Номенклатура.ИспользоватьСерийныеНомера = ИСТИНА)
				|			И Склад = &Склад) КАК СерийныеНомераНоменклатурыОстатки
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗаявкиСервисногоЦентра.Регистратор,
				|	ЗаявкиСервисногоЦентра.Номенклатура,
				|	ЗаявкиСервисногоЦентра.СерийныйНомер
				|ПОМЕСТИТЬ ЗСЦПоНоменклатуре
				|ИЗ
				|	РегистрСведений.ГНАТ_ЗаявкиСервисногоЦентра.СрезПоследних(
				|			,
				|			Номенклатура В
				|				(ВЫБРАТЬ
				|					ДокТаб.Номенклатура
				|				ИЗ
				|					ДокТаб КАК ДокТаб)) КАК ЗаявкиСервисногоЦентра
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра.СрезПоследних КАК ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних
				|ПО ЗаявкиСервисногоЦентра.Регистратор = ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЗаявкаСервисногоЦентра
				|И (ГНАТ_ЭтапыРаботЗаявокСервисногоЦентраСрезПоследних.ЭтапРаботы <> ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано))
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СерийныеНомераПоОстаткам.Номенклатура   КАК Ссылка
				|ИЗ
				|	СерийныеНомераПоОстаткам КАК СерийныеНомераПоОстаткам
				|
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗСЦПоНоменклатуре КАК ЗСЦПоНоменклатуре
				|ПО СерийныеНомераПоОстаткам.Номенклатура = ЗСЦПоНоменклатуре.Номенклатура
				|И СерийныеНомераПоОстаткам.СерийныеНомера = ЗСЦПоНоменклатуре.СерийныйНомер

				|ОБЪЕДИНИТЬ

				|ВЫБРАТЬ
				|	ЗСЦПоНоменклатуре.Номенклатура
				|ИЗ
				|	ЗСЦПоНоменклатуре КАК ЗСЦПоНоменклатуре
				|ГДЕ
				|	ЗСЦПоНоменклатуре.Номенклатура.ИспользоватьСерийныеНомера = ЛОЖЬ";
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаРезервПоЗСЦ()


Процедура УстановитьДоступностьЭлементовФормыВозвратТоваровОтКлиента(ЭтаФорма)
	
	Если РольДоступна("ПолныеПрава") 
		ИЛИ git_ПодготовитьДокумент.НастроеннаяРольДоступна("8372aa51-6bbc-4c97-a3c4-8fe1b4c642e4")=ЛОЖЬ Тогда
		Возврат;	
	КонецЕсли;

	Элементы = ЭтаФорма.Элементы;
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыЦена");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументРеализации");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыСумма");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументРеализации");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыСуммаНДС");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументРеализации");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУсловногоОформления 		= ЭтаФорма.УсловноеОформление.Элементы.Добавить();       	
	ОформляемоеПоле 				= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных("ТоварыСуммаСНДС");
	ЭлементОтбора 					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументРеализации");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	
КонецПроцедуры //УстановитьДоступностьЭлементовФормыВозвратТоваровОтКлиента

#КонецОбласти 

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.17";
	Наименование = "Подготовить документ";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", Наименование);
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", Наименование+" [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Наименование+" [" + Версия + "]", "МАК", "ОткрытиеФормы", Ложь, "МАК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции //СведенияОВнешнейОбработке()

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции //ПолучитьТаблицуКоманд()

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры //ДобавитьКоманду()

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков

// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры //ПодменитьДействиеУправляемоеПриложение()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()

// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()


// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти
