Процедура ЗагрузитьРекурсивно(XMLДокумент, СтрокаДерева) 
	Пока XMLДокумент.Прочитать() Цикл
		Если XMLДокумент.ТипУзла = ТипУзлаXML.ИнструкцияОбработки Тогда
			НоваяСрокаДерева = СтрокаДерева.Добавить();
			НоваяСрокаДерева.ТипУзла = XMLДокумент.ТипУзла;
			НоваяСрокаДерева.ИмяXMLЭлементаДанных = XMLДокумент.Имя;
			НоваяСрокаДерева.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСрокаДерева = СтрокаДерева.Добавить();
			НоваяСрокаДерева.ТипУзла = XMLДокумент.ТипУзла;
			НоваяСрокаДерева.ИмяXMLЭлементаДанных = XMLДокумент.Имя;
			НоваяСрокаДерева.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
			Пока XMLДокумент.ПрочитатьАтрибут() Цикл
				НоваяСрокаДерева.СписокАтрибутов.Добавить(XMLДокумент.Имя, XMLДокумент.Значение);
			КонецЦикла;
			ЗагрузитьРекурсивно(XMLДокумент, НоваяСрокаДерева.Строки);
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат; Прервать;
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.Ничего Тогда
			Возврат; Прервать;
		ИначеЕсли XMLДокумент.ТипУзла = ТипУзлаXML.Текст Тогда
			Если СтрокаДерева.Количество() = 0 И СтрокаДерева.Родитель <> Неопределено Тогда
				СтрокаДерева.Родитель.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
			Иначе
				НоваяСрокаДерева = СтрокаДерева.Добавить();
				НоваяСрокаДерева.ТипУзла = XMLДокумент.ТипУзла;
				НоваяСрокаДерева.ИмяXMLЭлементаДанных = XMLДокумент.Имя;
				НоваяСрокаДерева.ЗначениеXMLЭлементаДанных = XMLДокумент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПрочитатьФайлОтвет(ФайлОтвет) 
	XMLДокумент = Новый ЧтениеXML;
	XMLДокумент.ОткрытьФайл(ФайлОтвет);
	
	ДеревоXMLДокумента = Новый ДеревоЗначений;
	ОписаниеСписокАтрибутов = Новый ОписаниеТипов("СписокЗначений");
	
	ДеревоXMLДокумента.Колонки.Очистить();
	ДеревоXMLДокумента.Колонки.Добавить("ТипУзла");
	ДеревоXMLДокумента.Колонки.Добавить("ИмяXMLЭлементаДанных");
	ДеревоXMLДокумента.Колонки.Добавить("ЗначениеXMLЭлементаДанных");
	ДеревоXMLДокумента.Колонки.Добавить("СписокАтрибутов", ОписаниеСписокАтрибутов);
	ЗагрузитьРекурсивно(XMLДокумент, ДеревоXMLДокумента.Строки);
	
	Возврат ДеревоXMLДокумента;
	
КонецФункции

Функция ОтправитьЗапрос(ФайлXML)
	АдресСервераОнлайнПроверки = "orders.novaposhta.ua";
	РесурсНаСервере = "/xml.php";
	Попытка
	    Соединение = Новый HTTPСоединение(АдресСервераОнлайнПроверки);
	Исключение
	    Сообщить("Не удалось установить соединение с сервером онлайн-проверки:" 
        	+ Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
    	Возврат Неопределено;
	КонецПопытки;

	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
	    Соединение.ОтправитьДляОбработки(ФайлXML, РесурсНаСервере, ФайлРезультата);
	    Соединение = Неопределено;
	Исключение
	    Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
	КонецПопытки;
	
	ДеревоXML = ПрочитатьФайлОтвет(ФайлРезультата);
	Возврат ДеревоXML;
КонецФункции

Функция ПолучитьТаблицуОтделений() Экспорт 
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Город");
	ТаблицаРезультат.Колонки.Добавить("Адрес");
	ТаблицаРезультат.Колонки.Добавить("НомерОтделения");
	
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъектЗапись = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("utf-8", , Ложь);
	ОбъектЗапись.ОткрытьФайл(ИмяФайлаЗапроса, ПараметрыЗаписиXML);
	ОбъектЗапись.ЗаписатьОбъявлениеXML();
	ОбъектЗапись.ЗаписатьНачалоЭлемента("file");
	ОбъектЗапись.ЗаписатьНачалоЭлемента("auth");
	ОбъектЗапись.ЗаписатьТекст(АПИКлюч);
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.ЗаписатьНачалоЭлемента("warenhouse");
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.Закрыть();	
	ДеревоXML = ОтправитьЗапрос(ИмяФайлаЗапроса);
	
	Если Не ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных = "200" Тогда 
		Сообщить("Статус ответа сервера " + ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных);
		Возврат ТаблицаОтделений;
	КонецЕсли;	
	
	Для Каждого ТекОтделение Из ДеревоXML.Строки[0].Строки[1].Строки[0].Строки Цикл 
		НоваяСтрока = ТаблицаРезультат.Добавить();
		Для Каждого ТекАтрибут Из ТекОтделение.Строки Цикл 
			Если ТекАтрибут.ИмяXMLЭлементаДанных = "cityRu" Тогда
				НоваяСтрока.Город = ТекАтрибут.ЗначениеXMLЭлементаДанных;
			ИначеЕсли ТекАтрибут.ИмяXMLЭлементаДанных = "addressRu" Тогда
				НоваяСтрока.Адрес = ТекАтрибут.ЗначениеXMLЭлементаДанных;
			ИначеЕсли ТекАтрибут.ИмяXMLЭлементаДанных = "number" Тогда
				НоваяСтрока.НомерОтделения  = ТекАтрибут.ЗначениеXMLЭлементаДанных;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
КонецФункции

Функция ВыгрузитьЗаказ(СтруктураЗаказа) Экспорт
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъектЗапись = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("utf-8", ,Ложь);
	ОбъектЗапись.ОткрытьФайл(ИмяФайлаЗапроса, ПараметрыЗаписиXML);
	ОбъектЗапись.ЗаписатьОбъявлениеXML();
	ОбъектЗапись.ЗаписатьНачалоЭлемента("file");
	ОбъектЗапись.ЗаписатьНачалоЭлемента("auth");
	ОбъектЗапись.ЗаписатьТекст(АПИКлюч);
	ОбъектЗапись.ЗаписатьКонецЭлемента(); //auth
	ОбъектЗапись.ЗаписатьНачалоЭлемента("order");
	Для Каждого ТекЭлемент Из СтруктураЗаказа Цикл 
		Если ТекЭлемент.Ключ = "order_cont" Тогда 
			Для Каждого ТекМесто Из ТекЭлемент.Значение ЦИкл 
				ОбъектЗапись.ЗаписатьНачалоЭлемента("order_cont");
				ОбъектЗапись.ЗаписатьАтрибут("cont_description", ТекМесто);
				ОбъектЗапись.ЗаписатьКонецЭлемента();
			КонецЦикла;
		Иначе 
			ОбъектЗапись.ЗаписатьАтрибут(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЕсли;
	КонецЦикла;
	ОбъектЗапись.ЗаписатьКонецЭлемента(); //order
	ОбъектЗапись.ЗаписатьКонецЭлемента(); //file
	ОбъектЗапись.Закрыть();	
	ДеревоXML = ОтправитьЗапрос(ИмяФайлаЗапроса);
	
	Если ДеревоXML = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ДеревоXML.Строки[0].ИмяXMLЭлементаДанных = "errors" Тогда 
		Сообщить("Ошибка выгрузки заказа: " + ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных);
		Возврат Неопределено;
	КонецЕсли;
	
	//Выгружаем один заказ, поэтому забираем сразу код, если несколько - надо соответствие в цикле строить
	Если ДеревоXML.Строки[0].ИмяXMLЭлементаДанных = "file" Тогда 
		Возврат ДеревоXML.Строки[0].Строки[0].СписокАтрибутов.НайтиПоЗначению("np_id");
	КонецЕсли;
КонецФункции

Функция ПолучитьСостояниеЗаказа(НомерЗаказа) Экспорт
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъектЗапись = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("utf-8", ,Ложь);
	ОбъектЗапись.ОткрытьФайл(ИмяФайлаЗапроса, ПараметрыЗаписиXML);
	ОбъектЗапись.ЗаписатьОбъявлениеXML();
	ОбъектЗапись.ЗаписатьНачалоЭлемента("file");
	ОбъектЗапись.ЗаписатьНачалоЭлемента("auth");
	ОбъектЗапись.ЗаписатьТекст(АПИКлюч);
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.ЗаписатьНачалоЭлемента("track");
	ОбъектЗапись.ЗаписатьНачалоЭлемента("en");
	ОбъектЗапись.ЗаписатьТекст(НомерЗаказа);
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	ОбъектЗапись.Закрыть();	
	ДеревоXML = ОтправитьЗапрос(ИмяФайлаЗапроса);
	
	Если ДеревоXML = Неопределено Тогда 
		Возврат "";
	КонецЕсли;
	
	Если ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных = "0" Тогда 
		Возврат "Некорректный номер ЕН";
	ИначеЕсли ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных = "1" Тогда 
		Возврат "Номер не найден";
	ИначеЕсли ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных = "2" Тогда 
		Возврат "Интернет-документ создан и обрабатывается";
	ИначеЕсли ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных = "3" Тогда 
		Возврат "Груз еще не получен";
	ИначеЕсли ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных = "4" Тогда 
		Возврат "Груз еще не получен";
	Иначе
		Сообщить("Ответ сервера: " + ДеревоXML.Строки[0].Строки[0].ЗначениеXMLЭлементаДанных);
		Возврат "";
	КонецЕсли;	
	Возврат "";
КонецФункции



Функция СведенияОВнешнейОбработке() Экспорт
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Новая почта");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", "1.0");    
    ПараметрыРегистрации.Вставить("Информация", "Новая почта");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Новая почта", "НП", "ОткрытиеФормы", Ложь, "НП");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры



