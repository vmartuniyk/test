




Процедура АвтоматическоеЗачтениеОплат() Экспорт
	
	Перем СсылкаНаДоговор;
		
	Свойство 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("cf300475-4c41-11e3-9318-001e673c80fc"));
	ВидПартнера = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("dae5e802-4c41-11e3-9318-001e673c80fc"));                                                                                                               
		ЗСОКлиент		= Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("2dd42cd7-4c42-11e3-9318-001e673c80fc"));
		ЗСОПоставщик 	= Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("361a3b83-4c42-11e3-9318-001e673c80fc"));
	СвойствоДоговор     = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("f586a250-4c41-11e3-9318-001e673c80fc"));

	Запрос 		 = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаИспользоватьАвтоСведение();

	Запрос.УстановитьПараметр("Свойство", Свойство);

	Результат = Запрос.Выполнить();
	ВыборкаПервая = Результат.Выбрать();
	Пока ВыборкаПервая.Следующий() Цикл
		
		УбратьПереплатыПоДокументамРасчетыСКлиентами(ВыборкаПервая.Ссылка);
		УбратьПереплатыПоДокументамРасчетыСПоставщиками(ВыборкаПервая.Ссылка);

		СсылкаНаДоговор = Неопределено;
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВидПартнера();
		Запрос.УстановитьПараметр("ВидПартнера", ВидПартнера);
		Запрос.УстановитьПараметр("Ссылка", ВыборкаПервая.Ссылка);

		Результат 		= Запрос.Выполнить();
        ВыборкаВторая 	= Результат.Выбрать();

		Пока ВыборкаВторая.Следующий() Цикл
			
			Запрос 			= Новый Запрос;
			Запрос.Текст 	= ПолучитьТекстЗапросаСсылкаНаДоговор();
			Запрос.УстановитьПараметр("Ссылка", ВыборкаПервая.Ссылка);
			Запрос.УстановитьПараметр("Свойство", СвойствоДоговор);

			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если НЕ ПустаяСтрока(Выборка.Значение) Тогда
					Попытка
						УИДДоговора = ПолучитьУИДпоНавигационнойСсылке(Выборка.Значение);
						СсылкаНаДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДоговора));	
					Исключение
						СообщениеОбОшибке = НСтр("ru='Неудалось получить ссылку на договор у партнера %Ссылка%.'");
                        СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаПервая.Ссылка);

						ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 

					 	// Записать в журнал регистрации
						
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
						
			Если ВыборкаВторая.Значение = ЗСОКлиент Тогда
				
				Если СсылкаНаДоговор <> Неопределено
				 И	СсылкаНаДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем 
				 И	СсылкаНаДоговор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					РазнестиОплатыПоДокументам(ВыборкаПервая.Ссылка, Истина, СсылкаНаДоговор);	 
				ИначеЕсли СсылкаНаДоговор = Неопределено Тогда 
					РазнестиОплатыПоДокументам(ВыборкаПервая.Ссылка, Истина); 
				Иначе
					
					СообщениеОбОшибке = НСтр("ru='Неверно указанный договор у партнера %Ссылка%. Вид договора не соответствует договору с покупателем.'");
                    СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаПервая.Ссылка);

					ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);
				 	//Записать в журнал что не сходится
					Продолжить;
				КонецЕсли; 

			ИначеЕсли ВыборкаВторая.Значение = ЗСОПоставщик Тогда
				Если СсылкаНаДоговор <> Неопределено
				 И	СсылкаНаДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком 
				 И	СсылкаНаДоговор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					РазнестиОплатыПоДокументам(ВыборкаПервая.Ссылка, Ложь, СсылкаНаДоговор);	 
				ИначеЕсли СсылкаНаДоговор = Неопределено Тогда 
					РазнестиОплатыПоДокументам(ВыборкаПервая.Ссылка, Ложь); 
				Иначе
					СообщениеОбОшибке = НСтр("ru='Неверно указанный договор у партнера %Ссылка%. Вид договора не соответствует договору с поставщиком.'");
                    СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаПервая.Ссылка);

					ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);
					
				 	//Записать в журнал что не сходится
					Продолжить;
				КонецЕсли; 

				
				
				
					
					
				
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неверно заполнин дополнительный реквизит ВидПартнера у партнера %Ссылка%.'");
                СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаПервая.Ссылка);

				ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

				
			
				//По стандрату зафиксировапть ошибку в журнале
				
				
			КонецЕсли; 
			
			
		КонецЦикла;

	

		
	КонецЦикла;


	
	
КонецПроцедуры




Процедура РазнестиОплатыПоДокументам(Партнер, ЭтоКлиент, СсылкаНаДоговор = Неопределено)
	
	Если ЭтоКлиент Тогда
		ПривязатьРКОРасчетыСКлиентами(Партнер);
		ПерезачетПоставщикКлиент(Партнер);
		ПерезачетПоставщикКлиентВозратОплаты(Партнер);
		ПривязатьСвободныеОплатыРасчетыСКлиентами(Партнер);
		Если СсылкаНаДоговор <> Неопределено Тогда
			РазнестиПоДоговорамСКлиентами(СсылкаНаДоговор,Партнер);
		КонецЕсли; 
	
	Иначе
		ПривязатьСвободныеОплатыРасчетыСПоставщиками(Партнер);
		//ПривязатьПКОРасчетыСПоставщиками(Партнер);
		ПерезачетКлиентПоставщик(Партнер);
		ПерезачетКлиентПоставщикВозратОплаты(Партнер);
		ПривязатьСвободныеОплатыРасчетыСПоставщиками(Партнер);			
		Если СсылкаНаДоговор <> Неопределено Тогда
			РазнестиПоДоговорамСПоставщиками(СсылкаНаДоговор, Партнер);
		КонецЕсли;
    КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаИспользоватьАвтоСведение() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПартнерыДополнительныеРеквизиты.Ссылка
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		| 	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
		|И	IsNull(ПартнерыДополнительныеРеквизиты.Значение, Ложь) = Истина";
	Возврат ТекстЗапроса;
	
КонецФункции //  ПолучитьТекстЗапросаИспользоватьАвтоСведения()

Функция ПолучитьТекстЗапросаВидПартнера() Экспорт

	Текст = 
			"ВЫБРАТЬ
			|	ПартнерыДополнительныеРеквизиты.Значение
			|ИЗ
			|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
			|ГДЕ
			|	ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка
			|	И ПартнерыДополнительныеРеквизиты.Свойство = &ВидПартнера
			|	И ЕСТЬNULL(ПартнерыДополнительныеРеквизиты.Значение, ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяСсылка)";

Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаВидПартнера()

Функция ПолучитьТекстЗапросаСсылкаНаДоговор() Экспорт

	Текст = 
		"ВЫБРАТЬ
		|	IsNull(ПартнерыДополнительныеРеквизиты.Значение, """") КАК Значение
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		|	ПартнерыДополнительныеРеквизиты.Ссылка = &Ссылка
		|	И ПартнерыДополнительныеРеквизиты.Свойство = &Свойство";
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаСсылкаНаДоговор()

Функция ПолучитьТекстЗапросаСуммаОбщейРазницы()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сумма(Вл.ОбщаяРазница) КАК ОбщаяРазница
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		IsNull(СуммаОстаток, 0) КАК ОбщаяРазница
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|				АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = 	&Партнер
		|											И	АналитикаПоПартнерам.Организация = &Организация	
		|											И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|											)
		|				И Валюта = &Валюта			
		|				)
		|				
		|	ОБЪЕДИНИТЬ
		|				
		|	ВЫБРАТЬ
		|		ISNULL(СуммаОстаток,0)
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|							АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = &Партнер
		|											И	АналитикаПоПартнерам.Организация = &Организация	
		|											И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|											)
		|							И Валюта = &Валюта			
		|										)
		|	) КАК Вл";

	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОбщейРазницыСКлиентами()


Функция ПолучитьТекстЗапросаПереплатыРасчетыСКлиентами()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент	КАК Контрагент,
		|	Валюта									КАК Валюта,
		|	ЗаказКлиента							КАК ЗаказКлиента,
		|	- СуммаОстаток    						КАК СуммаОстаток
 		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки
		|ГДЕ
		|	АналитикаУчетаПоПартнерам.Партнер = &Партнер
		|И	ЗаказКлиента <> Неопределено
		|И	ЗаказКлиента <> Значение(Документ.ЗаказКлиента.ПустаяСсылка)
		|И	(	ЗаказКлиента Ссылка Документ.ЗаказКлиента 
		|	ИЛИ ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|	ИЛИ	ЗаказКлиента Ссылка Документ.РеализацияУслугПрочихАктивов)
		|И	СуммаОстаток < 0";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПереплатыРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент	КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
		|	Валюта									КАК Валюта,
		|	СуммаОстаток    						КАК СуммаОстаток		
		|ИЗ
		|			РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|					АналитикаУчетаПоПартнерам В (
		|					ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Партнер = &Партнер
		|						)
		|					)
		|ГДЕ
		|	ЗаказКлиента = Неопределено";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРКОНеПривязаноРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаПоследнийЗаказРасчетыСКлиентами()

	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСКлиентами.ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер = &Партнер
		|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = &Организация
		|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
		|	И РасчетыСКлиентами.Валюта = &Валюта
		|   
      	|УПОРЯДОЧИТЬ ПО
		|	РасчетыСКлиентами.Период УБЫВ";
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПоследнийЗаказРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент	КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
		|	Валюта									КАК Валюта,
		|	ЗаказКлиента							КАК ЗаказКлиента,
		|	СуммаОстаток    						КАК СуммаОстаток
		|		
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,  
		|		АналитикаУчетаПоПартнерам В (
		|		ВЫБРАТЬ
		|			АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|		ИЗ
		|			РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|		ГДЕ
		|			АналитикаПоПартнерам.Партнер = &Партнер
		|		И	АналитикаПоПартнерам.Организация = &Организация	
		|		И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|			)
		|		И	Валюта = &Валюта
		|		)
		|ГДЕ
		|	ЗаказКлиента <> Неопределено
		|И	СуммаОстаток > 0

		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Справочник.ДоговорыКонтрагентов
		|		ТОГДА ЗаказКлиента
		|		ИНАЧЕ ЗаказКлиента.Дата
		|	КОНЕЦ Возр";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами()

Функция ПолучитьТекстЗапросаПерезачетПоставщикКлиент()
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|	РасчетыСПоставщикамиОстатки.Валюта КАК Валюта,
		|	-РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В
		|				(ВЫБРАТЬ
		|					АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|				ИЗ
		|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|				ГДЕ
		|					АналитикаПоПартнерам.Партнер = &Партнер)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
		|	И РасчетыСПоставщикамиОстатки.СуммаОстаток < 0
        |
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиОстатки.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|		ИНАЧЕ РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Дата
		|	КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаНеПривязаноКДоговоруСКлиентами()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер как Партнер,
		|	АналитикаУчетаПоПартнерам.Организация как Организация,
		|	АналитикаУчетаПоПартнерам.Контрагент как Контрагент,
		|	ЗаказКлиента как ЗаказКлиента,
		|	Валюта как Валюта,
		|	СуммаОстаток  как СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|											АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|										ИЗ
		|											РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|										ГДЕ
		|											АналитикаПоПартнерам.Партнер = &Партнер
		|										И	АналитикаПоПартнерам.Организация = &Организация	
		|										И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|										)
		|				И ЗаказКлиента <> &СсылкаНаДоговор
		|				И Валюта = &Валюта
		|				)";
	
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаНеПривязаноКДоговоруСклиентами()




Функция ПолучитьТекстЗапросаПереплатыРасчетыСПоставщиками()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер			КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Организация		КАК Организация,
		|	АналитикаУчетаПоПартнерам.Контрагент 		КАК Контрагент,
		|	ЗаказПоставщику								КАК ЗаказПоставщику,
		|	Валюта										КАК Валюта,
		|	СуммаОстаток                               	КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки
		|Где 
		|	АналитикаУчетаПоПартнерам.Партнер = &Партнер
		|	И	ЗаказПоставщику <> Неопределено
		|	И	СуммаОстаток > 0
		|	И	ЗаказПоставщику <> Значение(Документ.ЗаказПоставщику.ПустаяСсылка)
		|	И	(	ЗаказПоставщику Ссылка Документ.ЗаказПоставщику 
		|		ИЛИ ЗаказПоставщику Ссылка Документ.ПоступлениеТоваровУслуг
		|		ИЛИ	ЗаказПоставщику Ссылка Документ.ПоступлениеУслугПрочихАктивов)"; 
		
	
	Возврат ТекстЗапроса;
    
КонецФункции // ПолучитьТекстЗапросаПереплатыРасчетыСПоставщиками()

Функция ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиками()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Организация	КАК Организация,
		|	АналитикаУчетаПоПартнерам.Контрагент	КАК Контрагент,
		|	ЗаказПоставщику							КАК ЗаказПоставщику,
		|	Валюта									КАК Валюта,
		|	СуммаОстаток                            КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер)
		|Где 
		|	ЗаказПоставщику = Неопределено";
		
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиками()

Функция ПолучитьТекстЗапросаПоследнийЗаказРасчетыСПоставщиком()

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСПоставщиками.ЗаказПоставщику  как ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И РасчетыСПоставщиками.Валюта = &Валюта
	|	И ЗаказПоставщику <> Неопределено

	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПоставщиками.Период УБЫВ"; 
		
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПоследнийЗаказРасчетыСПоставщиком()

Функция ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиками()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АналитикаУчетаПоПартнерам.Партнер			КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Организация		КАК Организация,
		|	АналитикаУчетаПоПартнерам.Контрагент 		КАК Контрагент,
		|	ЗаказПоставщику								КАК ЗаказПоставщику,
		|	Валюта										КАК Валюта,
		|	-СуммаОстаток                               КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|						АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|											АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|										ИЗ
		|											РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|										ГДЕ
		|											АналитикаПоПартнерам.Партнер = &Партнер
		|										И	АналитикаПоПартнерам.Организация = &Организация	
		|										И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|										)
		|						И Валюта = &Валюта			
		|									)
		|Где 
		|	ЗаказПоставщику <> Неопределено
		|	И	СуммаОстаток < 0
		|УПОРЯДОЧИТЬ ПО
		|		ВЫБОР
		|			КОГДА ЗаказПоставщику Ссылка Справочник.ДоговорыКонтрагентов
		|			ТОГДА ЗаказПоставщику
		|			ИНАЧЕ ЗаказПоставщику.Дата
		|		КОНЕЦ Возр"; 
		
	
	Возврат ТекстЗапроса;
	

КонецФункции // ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиками()

Функция ПолучитьТекстЗапросаПерезачетКлиентПоставщик()
	
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.Партнер 			КАК Партнер,
	|	АналитикаУчетаПоПартнерам.Организация 		КАК Организация,
	|	АналитикаУчетаПоПартнерам.Контрагент 		КАК Контрагент,
	|	ЗаказКлиента 								КАК ЗаказКлиента,
	|	Валюта 										КАК Валюта,
	|	СуммаОстаток 								КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер)
	|ГДЕ
	|	ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|	И СуммаОстаток >= 0";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПерезачетКлиентПоставщик()

Функция ПолучитьТекстЗапросаПерезачетРасчетыСПоставщиками()

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Партнер как Партнер,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация как Организация,
		|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент как Контрагент,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента как ЗаказКлиента,
		|	РасчетыСКлиентамиОстатки.Валюта как Валюта,
		|	-РасчетыСКлиентамиОстатки.СуммаОстаток  как СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиОстатки
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|	И РасчетыСКлиентамиОстатки.СуммаОстаток < 0";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаПерезачетРасчетыСПоставщиками()


Функция ПолучитьТекстЗапросаНеПривязаноКДоговоруСПоставщиками()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Партнер 		как Партнер,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Организация 	как Организация,
		|	РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам.Контрагент	как Контрагент,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику							как ЗаказПоставщику,
		|	РасчетыСПоставщикамиОстатки.Валюта									как Валюта,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток                            как СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			,
		|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|											АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|										ИЗ
		|											РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|										ГДЕ
		|											АналитикаПоПартнерам.Партнер = &Партнер
		|										И	АналитикаПоПартнерам.Организация = &Организация	
		|										И 	АналитикаПоПартнерам.Контрагент = &Контрагент
		|										)
		|				И ЗаказПоставщику <> &СсылкаНаДоговор
		|				И Валюта = &Валюта
		|				) КАК РасчетыСПоставщикамиОстатки";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаНеПривязаноКДоговоруСПоставщиками()



 
Функция ПолучитьУИДпоНавигационнойСсылке(стрНавигационнаяССылка) Экспорт
	Результат=Неопределено;
	ПозицияНачалаНавССылки=Найти(стрНавигационнаяССылка,"?ref=");
	Если ПозицияНачалаНавССылки<>0 тогда       УидНавССылки=Сред(стрНавигационнаяССылка,ПозицияНачалаНавССылки+5,32);
		УидСтрока=Прав(УидНавССылки,8)+"-"+Сред(УидНавССылки,21,4)+"-"+Сред(УидНавССылки,17,4)+"-"+Лев(УидНавССылки,4)+"-"+Сред(УидНавССылки,5,12);
		УИД=Новый УникальныйИдентификатор(УидСтрока);
		Результат=УИД;
	КонецЕсли;
	Возврат(Результат);
КонецФункции

Функция ПолучитьДоступнуюКассу(Организация, Валюта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Ссылка
	|Из
	|	Справочник.Кассы
	|ГДЕ 
	|	Владелец 				= &Организация
	|И	ВалютаДенежныхСредств 	= &Валюта ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта",		 Валюта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


Процедура УбратьПереплатыПоДокументамРасчетыСКлиентами(Партнер)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПереплатыРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);
		
		
		НачатьТранзакцию();
		
		
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		Попытка
			Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка, Касса, Выборка.ЗаказКлиента);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом. Не создалась  заявка на расходование денежных средств."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО.Заполнить(Заявка.Ссылка);
			РКО.Дата 			= Заявка.Дата;
			РКО.Комментарий		= Заявка.Заметки;
			РКО.Касса			= Заявка.Касса;
			РКО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом.Не создался документ РасходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			СоздатьПКОПереплатыРасчетыСКлиентами(Выборка, РКО);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом.Не создался документ ПриходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;

		
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 
		
			//Журнал
		 	ОтменитьТранзакцию();
		КонецЕсли; 	
			
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьПереплатыПоДокументамРасчетыСПоставщиками(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПереплатыРасчетыСПоставщиками();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);
		
		
		НачатьТранзакцию();
		
		
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		
		
		Попытка
			ПКО = СоздатьПКОПереплатыРасчетыСПоставщиками(Выборка, Касса, Выборка.ЗаказПоставщику);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с поставщиками. Не создался документ ПриходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;

		Попытка
			Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(Выборка, ПКО);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с поставщиками. Не создалась  заявка на расходование денежных средств."+ОписаниеОшибки()+"'");
           
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО.Заполнить(Заявка.Ссылка);
			РКО.Дата 			= Заявка.Дата;
			РКО.Комментарий		= Заявка.Заметки;
			РКО.Касса			= Заявка.Касса;
			РКО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом.Не создался документ РасходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			СообщениеОбОшибке = НСтр("ru='Неудалось убрать переплаты по документам с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
            
			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке); 
			//Журнал
		 	ОтменитьТранзакцию();
		КонецЕсли; 	
			
	КонецЦикла;
	

КонецПроцедуры





Функция СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка, КассаВыдачиПолучения, ЗаказКлиента=Неопределено)
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосписание ДС по документу: %Ссылка%. Было принято больше денег чем нужно или был документ РКО без основания'");
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();		
	Заявка.Дата 					= ТДата;
	Заявка.ДатаПлатежа				= ТДата;
	Заявка.ЖелательнаяДатаПлатежа	= ТДата;
	
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	Заявка.Заметки 					= Заметка;
	Заявка.Организация				= Выборка.Организация;
	Заявка.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	Заявка.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	Заявка.Контрагент				= Выборка.Контрагент;
	Заявка.СуммаДокумента			= Выборка.СуммаОстаток;
	Заявка.Валюта					= Выборка.Валюта;
	
		НоваяЗапись = Заявка.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказКлиента;
		НоваяЗапись.Партнер 				= Выборка.Партнер;
		НоваяЗапись.Сумма					= Выборка.СуммаОстаток;
		НоваяЗапись.ВалютаВзаиморасчетов	= Выборка.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= Выборка.СуммаОстаток;

	Заявка.ФормаОплатыНаличная  			= Истина;
	Заявка.ФормаОплатыБезналичная			= Ложь;
    Заявка.ФормаОплатыПлатежнаяКарта 		= Ложь;
	Заявка.Касса							= КассаВыдачиПолучения;
	Заявка.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	Заявка.Приоритет						= Перечисления.Приоритеты.Низкий;
	Заявка.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	Заявка.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("3034809b-476e-11e0-9f98-001517115d85"));
	Заявка.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	
	Если Заявка.СуммаДокумента = 0 Тогда
		ВызватьИсключение "882.Выборка.СуммаОстаток:" + Строка(Выборка.СуммаОстаток) + "Партнер:" + Строка(Выборка.Партнер);	
	Иначе
		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		ВыполнитьЗаписьДополнительногоРеквизита(Заявка.Ссылка);
	КонецЕсли;

	Возврат Заявка.Ссылка;
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка)

Функция СоздатьЗаявкуНаРДСПерезачетПоставщикКлиент(Выборка, КассаВыдачиПолучения, ЗаказПоставщику)
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосписание ДС по документу: %Ссылка%. Перезачет поставщик -> клиент'");
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();		
	Заявка.Дата 					= ТДата;
	Заявка.ДатаПлатежа				= ТДата;
	Заявка.ЖелательнаяДатаПлатежа	= ТДата;
	
	Если ЗаказПоставщику<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказПоставщику);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	Заявка.Заметки 					= Заметка;
	Заявка.Организация				= Выборка.Организация;
	Заявка.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	Заявка.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	Заявка.Контрагент				= Выборка.Контрагент;
	Заявка.СуммаДокумента			= Выборка.СуммаОстаток;
	Заявка.Валюта					= Выборка.Валюта;
	
		НоваяЗапись = Заявка.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказПоставщику;
		НоваяЗапись.Партнер 				= Выборка.Партнер;
		НоваяЗапись.Сумма					= Выборка.СуммаОстаток;
		НоваяЗапись.ВалютаВзаиморасчетов	= Выборка.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= Выборка.СуммаОстаток;

	Заявка.ФормаОплатыНаличная  			= Истина;
	Заявка.ФормаОплатыБезналичная			= Ложь;
    Заявка.ФормаОплатыПлатежнаяКарта 		= Ложь;
	Заявка.Касса							= КассаВыдачиПолучения;
	Заявка.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	Заявка.Приоритет						= Перечисления.Приоритеты.Низкий;
	Заявка.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	Заявка.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	Заявка.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	Если Заявка.СуммаДокумента = 0 Тогда
		ВызватьИсключение "933.Выборка.СуммаОстаток:" + Строка(Выборка.СуммаОстаток) + "Партнер:" + Строка(Выборка.Партнер);	
	Иначе
		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		ВыполнитьЗаписьДополнительногоРеквизита(Заявка.Ссылка);
	КонецЕсли;	

	Возврат Заявка.Ссылка;
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка)

Функция СоздатьЗаявкуНаРДСПерезачетКлиентПоставщик(Выборка, КассаВыдачиПолучения, ЗаказКлиента)
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосписание ДС по документу: %Ссылка%. Перезачет клиент -> поставщик'");
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();		
	Заявка.Дата 					= ТДата;
	Заявка.ДатаПлатежа				= ТДата;
	Заявка.ЖелательнаяДатаПлатежа	= ТДата;
	
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	Заявка.Заметки 					= Заметка;
	Заявка.Организация				= Выборка.Организация;
	Заявка.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	Заявка.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	Заявка.Контрагент				= Выборка.Контрагент;
	Заявка.СуммаДокумента			= Выборка.СуммаОстаток;
	Заявка.Валюта					= Выборка.Валюта;
	
		НоваяЗапись = Заявка.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказКлиента;
		НоваяЗапись.Партнер 				= Выборка.Партнер;
		НоваяЗапись.Сумма					= Выборка.СуммаОстаток;
		НоваяЗапись.ВалютаВзаиморасчетов	= Выборка.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= Выборка.СуммаОстаток;

	Заявка.ФормаОплатыНаличная  			= Истина;
	Заявка.ФормаОплатыБезналичная			= Ложь;
    Заявка.ФормаОплатыПлатежнаяКарта 		= Ложь;
	Заявка.Касса							= КассаВыдачиПолучения;
	Заявка.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	Заявка.Приоритет						= Перечисления.Приоритеты.Низкий;
	Заявка.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	Заявка.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("3034809b-476e-11e0-9f98-001517115d85"));;
	Заявка.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	
	Если Заявка.СуммаДокумента = 0 Тогда
		ВызватьИсключение "984.Выборка.СуммаДокумента:" + Строка(Выборка.СуммаОстаток) + "Партнер:" + Строка(Выборка.Партнер);	
	Иначе
		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		ВыполнитьЗаписьДополнительногоРеквизита(Заявка.Ссылка);
	КонецЕсли;

	Возврат Заявка.Ссылка;
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка)



Функция СоздатьПКОПереплатыРасчетыСКлиентами(Выборка, РКО, ЗаказКлиента = Неопределено)

	//ПриходныйКассовыйОрдер
	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();				
	ПКО.Дата 					= РКО.Дата;
	ПКО.Комментарий				= РКО.Комментарий;
	ПКО.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ПКО.Касса					= РКО.Касса;
	ПКО.Контрагент				= РКО.Контрагент;
	ПКО.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ПКО.СуммаДокумента			= РКО.СуммаДокумента;
	ПКО.Валюта					= РКО.Валюта;
	ПКО.Организация				= РКО.Организация;
	
	Расшифровка 		= ПКО.РасшифровкаПлатежа.Добавить();
	Расшифровка.Заказ 	= ЗаказКлиента;
	Расшифровка.Партнер = РКО.Контрагент.Партнер;
	Расшифровка.Сумма	= РКО.СуммаДокумента;
			
	ПКО.Записать(РежимЗаписиДокумента.Проведение);

КонецФункции // СоздатьПКОПереплатыРасчетыСКлиентами()

Функция СоздатьПКОПерезачетПоставщикКлиентВозвратОплаты(Выборка, РКО, ЗаказПоставщику=Неопределено)

	//ПриходныйКассовыйОрдер
	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();				
	ПКО.Дата 					= РКО.Дата;
	ПКО.Комментарий				= РКО.Комментарий;
	ПКО.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	ПКО.Касса					= РКО.Касса;
	ПКО.Контрагент				= РКО.Контрагент;
	ПКО.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("ec958367-4c02-11e0-9f98-001517115d85"));
	ПКО.СуммаДокумента			= РКО.СуммаДокумента;
	ПКО.Валюта					= РКО.Валюта;
	ПКО.Организация				= РКО.Организация;
	
	Расшифровка 		= ПКО.РасшифровкаПлатежа.Добавить();
	Расшифровка.Заказ 	= ЗаказПоставщику;
	Расшифровка.Партнер = РКО.Контрагент.Партнер;
	Расшифровка.Сумма	= РКО.СуммаДокумента;
			
	ПКО.Записать(РежимЗаписиДокумента.Проведение);

КонецФункции // СоздатьПКОПереплатыРасчетыСКлиентами(

Функция СоздатьПКОПереплатыРасчетыСПоставщиком(Выборка, КассаВыдачиПолучения, ЗаказПоставщику)
	
	ТДата = ТекущаяДата();
    Заметка = НСтр("ru='Автосписание ДС по документу: %Ссылка%. Было принято больше денег чем нужно или был документ ПКО без основания'");

	//ПриходныйКассовыйОрдер
	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();				
	ПКО.Дата 					= ТДата;
	ПКО.Комментарий				= Заметка;
	ПКО.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ПКО.Касса					= КассаВыдачиПолучения;
	ПКО.Контрагент				= Выборка.Контрагент;
	ПКО.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ПКО.СуммаДокумента			= Выборка.СуммаОстаток;
	ПКО.Валюта					= Выборка.Валюта;
	ПКО.Организация				= Выборка.Организация;
	
	Расшифровка 		= ПКО.РасшифровкаПлатежа.Добавить();
	Расшифровка.Заказ 	= ЗаказПоставщику;
	Расшифровка.Партнер = Выборка.Контрагент.Партнер;
	Расшифровка.Сумма	= Выборка.СуммаОстаток;
			
	ПКО.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ПКО.Ссылка;

КонецФункции // СоздатьПКОПереплатыРасчетыСКлиентами()



Функция ПолучитьСуммуОбщейРазницы(Выборка)

	Запрос = Новый Запрос;
	Запрос.Текст =  ПолучитьТекстЗапросаСуммаОбщейРазницы();
	Запрос.УстановитьПараметр("Партнер", 	Выборка.Партнер);
	Запрос.УстановитьПараметр("Организация",Выборка.Организация);
	Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
	Запрос.УстановитьПараметр("Валюта", 	Выборка.Валюта);
	
	ВыборкаОбщейРазницы = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаОбщейРазницы.Следующий(), ВыборкаОбщейРазницы.ОбщаяРазница, 0);
		
КонецФункции // ПолучитьОбщуюРазницу()





Функция СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(Выборка, ПКО, ЗаказПоставщику=Неопределено)
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();		
	Заявка.Дата 					= ПКО.Дата;
	Заявка.ДатаПлатежа				= ПКО.Дата;
	Заявка.ЖелательнаяДатаПлатежа	= ПКО.Дата;
	
	Если ЗаказПоставщику<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказПоставщику);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	Заявка.Заметки 					= ПКО.Комментарий;
	Заявка.Организация				= ПКО.Организация;
	Заявка.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	Заявка.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	Заявка.Контрагент				= ПКО.Контрагент;
	Заявка.СуммаДокумента			= ПКО.СуммаДокумента;
	Заявка.Валюта					= ПКО.Валюта;
	
		НоваяЗапись = Заявка.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Заказ                   = ЗаказПоставщику;
		НоваяЗапись.Партнер 				= ПКО.Контрагент.Партнер;
		НоваяЗапись.Сумма					= ПКО.СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ПКО.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= ПКО.СуммаДокумента;

	Заявка.ФормаОплатыНаличная  			= Истина;
	Заявка.ФормаОплатыБезналичная			= Ложь;
    Заявка.ФормаОплатыПлатежнаяКарта 		= Ложь;
	Заявка.Касса							= ПКО.Касса;
	Заявка.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	Заявка.Приоритет						= Перечисления.Приоритеты.Низкий;
	Заявка.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	Заявка.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	Заявка.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	Если Заявка.СуммаДокумента = 0 Тогда
		ВызватьИсключение "1129.ПКО.СуммаДокумента:" + Строка(ПКО.СуммаДокумента) + "Партнер:" + Строка(ПКО.Контрагент.Партнер);	
	Иначе
		Заявка.Записать(РежимЗаписиДокумента.Проведение);
		ВыполнитьЗаписьДополнительногоРеквизита(Заявка.Ссылка);
	КонецЕсли;

	Возврат Заявка.Ссылка;
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка)

Функция СоздатьПКОПереплатыРасчетыСПоставщиками(Выборка, Касса, ЗаказПоставщику = Неопределено)  
		
	ТДата = ТекущаяДата();
    Заметка = НСтр("ru='Автосписание ДС по документу: %Ссылка%. Было принято больше денег чем нужно или был документ ПКО без основания'");

	//ПриходныйКассовыйОрдер
	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();				
	ПКО.Дата 					= ТДата;
	ПКО.Комментарий				= Заметка;
	ПКО.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	ПКО.Касса					= Касса;
	ПКО.Контрагент				= Выборка.Контрагент;
	ПКО.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор("ec958367-4c02-11e0-9f98-001517115d85")); //Возврат ДС от поставщика
	ПКО.СуммаДокумента			= Выборка.СуммаОстаток;
	ПКО.Валюта					= Выборка.Валюта;
	ПКО.Организация				= Выборка.Организация;
	
	Расшифровка 		= ПКО.РасшифровкаПлатежа.Добавить();
	Расшифровка.Заказ 	= ЗаказПоставщику;
	Расшифровка.Партнер = Выборка.Контрагент.Партнер;
	Расшифровка.Сумма	= Выборка.СуммаОстаток;
			
	ПКО.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ПКО.Ссылка;


КонецФункции // СоздатьПКОПереплатыРасчетыСКлиентами()




Процедура ПривязатьРКОРасчетыСКлиентами(Партнер)

	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			
			//Это нуно рознести на не оплаченные документы!!!!!!!!!!!!!!!
			Продолжить;
		КонецЕсли;
		
	    Запрос = Новый Запрос;
		Запрос.Текст   = ПолучитьТекстЗапросаПоследнийЗаказРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		ВыборкаПоследнийЗаказ = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаПоследнийЗаказ.Следующий() Тогда
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);
	
			НачатьТранзакцию();
			
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			Попытка 
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка, Касса, ВыборкаПоследнийЗаказ.ЗаказКлиента);
			Исключение
				СообщениеОбОшибке = НСтр("ru='Неудалось привязать РКО по партнеру %Ссылка%. Не создалась  заявка на расходование денежных средств."+ОписаниеОшибки()+"'");
                СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

				ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СообщениеОбОшибке = НСтр("ru='Неудалось привязать РКО по партнеру %Ссылка%.Не создался документ РасходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
                СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

				ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				СоздатьПКОПереплатыРасчетыСКлиентами(Выборка, РКО);
			Исключение
				СообщениеОбОшибке = НСтр("ru='Неудалось привязать РКО по партнеру %Ссылка%. Не создался документ ПриходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
                СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

				ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				СообщениеОбОшибке = НСтр("ru='Неудалось привязать РКО по партнеру %Ссылка%. Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
                СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

				ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

				//Журнал
			 	ОтменитьТранзакцию();
			КонецЕсли; 	

		
		КонецЕсли; 

	КонецЦикла;   
	
КонецПроцедуры // ПривязатьРКОРасчетыСКлиентами()

Процедура ПерезачетПоставщикКлиент(Партнер)

	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаПерезачетПоставщикКлиент();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			//Это переплаты!!!!!!!!!!!!!!!
			Продолжить;
		КонецЕсли;
		
	    ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);

		НачатьТранзакцию();
		
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		Попытка 
			Заявка = СоздатьЗаявкуНаРДСПерезачетПоставщикКлиент(Выборка, Касса, Выборка.ЗаказПоставщику);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму с поставщика на клиента по партнеру %Ссылка%. Не создалась  заявка на расходование денежных средств."+ОписаниеОшибки()+"'");
            СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО.Заполнить(Заявка.Ссылка);
			РКО.Дата 			= Заявка.Дата;
			РКО.Комментарий		= Заявка.Заметки;
			РКО.Касса			= Заявка.Касса;
			РКО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму с поставщика на клиента по партнеру %Ссылка%. Не создался документ РасходныйКассовыйОрдер."+ОписаниеОшибки()+"'");
            СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			СоздатьПКОПереплатыРасчетыСКлиентами(Выборка, РКО);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму с поставщика на клиента по партнеру %Ссылка%. Не создался документ ПриходныйКассовыйОрдер.."+ОписаниеОшибки()+"'");
            СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;

		
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму с поставщика на клиента по партнеру %Ссылка%. Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
            СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

			//Журнал
		 	ОтменитьТранзакцию();
		КонецЕсли; 	

	КонецЦикла;   
	
КонецПроцедуры

Процедура ПерезачетПоставщикКлиентВозратОплаты(Партнер)

	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиками();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			//???????
			Продолжить;
		КонецЕсли;
		
	    ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);

		НачатьТранзакцию();
		
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		Попытка 
			Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(Выборка, Касса);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму возврата оплаты по партнеру %Ссылка%. Не создалась  заявка на расходование денежных средств."+ОписаниеОшибки()+"'");
            СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО.Заполнить(Заявка.Ссылка);
			РКО.Дата 			= Заявка.Дата;
			РКО.Комментарий		= Заявка.Заметки;
			РКО.Касса			= Заявка.Касса;
			РКО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму возврата оплаты по партнеру %Ссылка%. Не создался документ РасходныйКассовыйОрдер.."+ОписаниеОшибки()+"'");
            СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			СоздатьПКОПерезачетПоставщикКлиентВозвратОплаты(Выборка, РКО);
		Исключение
			Сообщить(ОписаниеОшибки());
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;

		
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			//Журнал
		 	ОтменитьТранзакцию();
		КонецЕсли; 	

	КонецЦикла; 	

КонецПроцедуры

Процедура ПривязатьСвободныеОплатыРасчетыСКлиентами(Партнер)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСКлиентами();
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток >= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = -Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСКлиентами();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
		
		    ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);
	        Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 
			 
			
			НачатьТранзакцию();
			
			Попытка 
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(СтрокаРасчета, Касса);
			Исключение
				Сообщить(ОписаниеОшибки());
				ОстатокДС = ОстатокДСОтменаТранзакции;
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				ОстатокДС = ОстатокДСОтменаТранзакции;
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				СоздатьПКОПереплатыРасчетыСКлиентами(СтрокаРасчета, РКО, СтрокаРасчета.ЗаказКлиента);
			Исключение
				Сообщить(ОписаниеОшибки());
				ОстатокДС = ОстатокДСОтменаТранзакции;
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				//Журнал
			 	ОтменитьТранзакцию();
			КонецЕсли; 	

		КонецЦикла;


	КонецЦикла;	

КонецПроцедуры

Процедура РазнестиПоДоговорамСКлиентами(СсылкаНаДоговор, Партнер)
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноКДоговоруСКлиентами();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаДоговор.Контрагент);
	Запрос.УстановитьПараметр("Организация", СсылкаНаДоговор.Организация);
	Запрос.УстановитьПараметр("СсылкаНаДоговор", СсылкаНаДоговор);
	Запрос.УстановитьПараметр("Валюта", СсылкаНаДоговор.ВалютаВзаиморасчетов);
	
	ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
	
	Для каждого ОбъектРасчета ИЗ ОбъектыРасчета Цикл
	
		ОбщаяРазница = ПолучитьСуммуОбщейРазницы(ОбъектРасчета);

		Если ОбъектРасчета.СуммаОстаток < 0 Тогда
			
			ОбъектРасчета.СуммаОстаток = -ОбъектРасчета.СуммаОстаток;
			
			НачатьТранзакцию();
		
			Касса = ПолучитьДоступнуюКассу(ОбъектРасчета.Организация, ОбъектРасчета.Валюта);

			Попытка 
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(ОбъектРасчета, Касса, ОбъектРасчета.ЗаказКлиента);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				СоздатьПКОПереплатыРасчетыСКлиентами(ОбъектРасчета, РКО, СсылкаНаДоговор);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
		ИначеЕсли  ОбъектРасчета.СуммаОстаток > 0 Тогда
			
			НачатьТранзакцию();
		
			Касса = ПолучитьДоступнуюКассу(ОбъектРасчета.Организация, ОбъектРасчета.Валюта);

			Попытка 
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами(ОбъектРасчета, Касса, СсылкаНаДоговор);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				СоздатьПКОПереплатыРасчетыСКлиентами(ОбъектРасчета, РКО, ОбъектРасчета.ЗаказКлиента);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

		КонецЕсли;
			
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(ОбъектРасчета) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			//Журнал
		 	ОтменитьТранзакцию();
		КонецЕсли; 	

	
	КонецЦикла;


КонецПроцедуры





Процедура ПривязатьПКОРасчетыСПоставщиками(Партнер)

	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиками();
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			//Это нужно рознести на ПКО документы!!!!!!!!!!!!!!!
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаПоследнийЗаказРасчетыСПоставщиком();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		ВыборкаПоследнийЗаказ = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаПоследнийЗаказ.Следующий() Тогда
			ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);
	
			НачатьТранзакцию();
			
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			Попытка
				ПКО = СоздатьПКОПереплатыРасчетыСПоставщиками(Выборка, Касса);
			Исключение
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

			Попытка
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(Выборка, ПКО, ВыборкаПоследнийЗаказ.ЗаказПоставщику);
			Исключение
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				//Журнал
			 	ОтменитьТранзакцию();
			КонецЕсли; 	
		
		КонецЕсли; 

	КонецЦикла;   

КонецПроцедуры

Процедура ПерезачетКлиентПоставщик(Партнер)
  	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаПерезачетКлиентПоставщик();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			//не ясно
			Продолжить;	
		КонецЕсли;
		
		ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);

		НачатьТранзакцию();
		
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		
		Попытка
			ПКО = СоздатьПКОПереплатыРасчетыСПоставщиком(Выборка, Касса, Выборка.ЗаказКлиента);
		Исключение
			Сообщить(ОписаниеОшибки());
			
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(Выборка, ПКО);
		Исключение
			Сообщить(ОписаниеОшибки());
			
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО.Заполнить(Заявка.Ссылка);
			РКО.Дата 			= Заявка.Дата;
			РКО.Комментарий		= Заявка.Заметки;
			РКО.Касса			= Заявка.Касса;
			РКО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;

		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			//Журнал
			ОтменитьТранзакцию();
		КонецЕсли; 
		
	КонецЦикла;

	

КонецПроцедуры

Процедура ПерезачетКлиентПоставщикВозратОплаты(Партнер)

	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаПерезачетРасчетыСПоставщиками();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			//???????
			Продолжить;
		КонецЕсли;
		
	    ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);

		НачатьТранзакцию();
		
		Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
		Попытка 
			Заявка = СоздатьЗаявкуНаРДСПерезачетКлиентПоставщик(Выборка, Касса, Выборка.ЗаказКлиента);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму возврата оплаты по поставщику %Ссылка%. Не создалась  заявка на расходование денежных средств."+ОписаниеОшибки()+"'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);

			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		//
		Попытка
			РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РКО.Заполнить(Заявка.Ссылка);
			РКО.Дата 			= Заявка.Дата;
			РКО.Комментарий		= Заявка.Заметки;
			РКО.Касса			= Заявка.Касса;
			РКО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			СообщениеОбОшибке = НСтр("ru='Не удалось пересчетать сумму возврата оплаты по поставщику %Ссылка%. Не создался документ РасходныйКассовыйОрдер.."+ОписаниеОшибки()+"'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Партнер);

			ЗаписьЖурналаРегистрации("ru = 'АвтоРасчет'", 
										УровеньЖурналаРегистрации.Ошибка, 
										, 
										, 
										СообщениеОбОшибке);
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		//
		Попытка
			СоздатьПКОПереплатыРасчетыСПоставщиками(Выборка, Касса);
		Исключение
			Сообщить(ОписаниеОшибки());
			//Журнал
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;

		
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			//Журнал
		 	ОтменитьТранзакцию();
		КонецЕсли; 	

	КонецЦикла; 	


КонецПроцедуры

Процедура ПривязатьСвободныеОплатыРасчетыСПоставщиками(Партнер)
   	
	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноРасчетыСПоставщиками();
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОстаток <= 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ОстатокДС = Выборка.СуммаОстаток;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаОбъектРасчетаНеОплаченоРасчетыСПоставщиками();
		Запрос.УстановитьПараметр("Партнер", Выборка.Партнер);
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Запрос.УстановитьПараметр("Контрагент", Выборка.Контрагент);
		Запрос.УстановитьПараметр("Валюта", Выборка.Валюта);
		ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаРасчета Из ОбъектыРасчета Цикл
		
			ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка);
			Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
			
			ОстатокДСОтменаТранзакции = ОстатокДС;
			Если СтрокаРасчета.СуммаОстаток >= ОстатокДС Тогда
				СтрокаРасчета.СуммаОстаток = ОстатокДС;
				ОстатокДС = 0;
			Иначе
				ОстатокДС = ОстатокДС - СтрокаРасчета.СуммаОстаток;		
			КонецЕсли; 
			 
			
			НачатьТранзакцию();
			
			Попытка
				ПКО = СоздатьПКОПереплатыРасчетыСПоставщиками(СтрокаРасчета, Касса);
			Исключение
				Сообщить(ОписаниеОшибки());
				ОстатокДС = ОстатокДСОтменаТранзакции;

				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

			Попытка
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(СтрокаРасчета, ПКО, СтрокаРасчета.ЗаказПоставщику);
			Исключение
				Сообщить(ОписаниеОшибки());
				ОстатокДС = ОстатокДСОтменаТранзакции;


				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				ОстатокДС = ОстатокДСОтменаТранзакции;

				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

			
			 
			
			Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(Выборка) Тогда
				ЗафиксироватьТранзакцию();	
			Иначе
				ОстатокДС = ОстатокДСОтменаТранзакции;
				//Журнал
			 	ОтменитьТранзакцию();
			КонецЕсли; 	

		КонецЦикла;


	КонецЦикла;	

	

КонецПроцедуры

Процедура РазнестиПоДоговорамСПоставщиками(СсылкаНаДоговор, Партнер)

	Запрос = Новый Запрос();
	Запрос.Текст = ПолучитьТекстЗапросаНеПривязаноКДоговоруСПоставщиками();
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", СсылкаНаДоговор.Контрагент);
	Запрос.УстановитьПараметр("Организация", СсылкаНаДоговор.Организация);
	Запрос.УстановитьПараметр("СсылкаНаДоговор", СсылкаНаДоговор);
	Запрос.УстановитьПараметр("Валюта", СсылкаНаДоговор.ВалютаВзаиморасчетов);	
	ОбъектыРасчета = Запрос.Выполнить().Выгрузить();
	
	Для каждого ОбъектРасчета ИЗ ОбъектыРасчета Цикл
		
		ОбщаяРазница = ПолучитьСуммуОбщейРазницы(ОбъектРасчета);
		Если ОбъектРасчета.СуммаОстаток < 0 Тогда
			
			ОбъектРасчета.СуммаОстаток = -ОбъектРасчета.СуммаОстаток;
			
			НачатьТранзакцию();
		
			Касса = ПолучитьДоступнуюКассу(ОбъектРасчета.Организация, ОбъектРасчета.Валюта);
			
			Попытка
				ПКО = СоздатьПКОПереплатыРасчетыСПоставщиками(ОбъектРасчета, Касса, СсылкаНаДоговор);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(ОбъектРасчета, ПКО, ОбъектРасчета.ЗаказПоставщику);
			Исключение
				Сообщить(ОписаниеОшибки());
				
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
		ИначеЕсли ОбъектРасчета.СуммаОстаток > 0 Тогда
			
			НачатьТранзакцию();
		
			Касса = ПолучитьДоступнуюКассу(ОбъектРасчета.Организация, ОбъектРасчета.Валюта);
			
			Попытка
				ПКО = СоздатьПКОПереплатыРасчетыСПоставщиками(ОбъектРасчета, Касса, ОбъектРасчета.ЗаказПоставщику);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				Заявка = СоздатьЗаявкуНаРДСПереплатыРасчетыСПоставщиками(ОбъектРасчета, ПКО, СсылкаНаДоговор);
			Исключение
				Сообщить(ОписаниеОшибки());
				
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			Попытка
				РКО	= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				РКО.Заполнить(Заявка.Ссылка);
				РКО.Дата 			= Заявка.Дата;
				РКО.Комментарий		= Заявка.Заметки;
				РКО.Касса			= Заявка.Касса;
				РКО.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить(ОписаниеОшибки());
				//Журнал
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;

		КонецЕсли; 
		
		Если ОбщаяРазница = ПолучитьСуммуОбщейРазницы(ОбъектРасчета) Тогда
			ЗафиксироватьТранзакцию();	
		Иначе
			//Журнал
			ОтменитьТранзакцию();
		КонецЕсли; 

	
	КонецЦикла;
	
КонецПроцедуры



Процедура ВыполнитьЗаписьДополнительногоРеквизита(СсылкаНаЗаявку)
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("d110551f-4d23-11e3-9318-001e673c80fc"));
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаЗаявку);
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = СсылкаНаЗаявку;
		Запись.Свойство = Свойство;
		Запись.Значение = Истина;
		
	НаборЗаписей.Записать();
	
КонецПроцедуры






Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "4.0.1";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. автоматическое сведение взаимных расчетов [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. автоматическое сведение взаимных расчетов [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоматическое сведение взаимных расчетов [" + Версия + "]", "АвтоматическоеЗачтениеОплат();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры


