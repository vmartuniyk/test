////////////////////////////////////////////////////////////////////////////////
// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.040";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. автоматические перемещения [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. автоматические перемещения [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоматические перемещения [" + Версия + "]", "ВыполнитьАвтоперемещения();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	
	ВыполнитьАвтоперемещения();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура  ВыполнитьАвтоперемещения() Экспорт
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Автоматическое перемещение товаров по заказам на перемещение'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация, 
			,
			,
			НСтр("ru = 'Начало перемещения товаров по заказам на перемещение'"));

	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказовКОтгрузке();
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.ПолучитьСсылку(
		Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));
	РезультатПакета = Запрос.Выполнить();
	Выборка = РезультатПакета.Выбрать();	
	Пока Выборка.Следующий() Цикл
	
		ПараметрыОтбора = ПолучитьПараметрыОтбора(Выборка);
		ОбеспечениеТовары = ОбновитьСостояниеОбеспечения(Выборка.Ссылка, ПараметрыОтбора);
		
			Если ПараметрыОтбора.НеОтгружатьЧастями Тогда
				Продолжить;	
			КонецЕсли;
			            
			ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			ДокументОбъект.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаТоваров Из ОбеспечениеТовары Цикл
				
				Если СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.ЧастичноВНаличии Тогда
				 	РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
					Если РезультатПоиска <> Неопределено Тогда
						РезультатПоиска.Количество		   = СтрокаТоваров.ВНаличии;
						РезультатПоиска.КоличествоУпаковок = СтрокаТоваров.ВНаличии;	
					КонецЕсли;
				ИначеЕсли СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.НетВНаличии Тогда
					РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
					Если РезультатПоиска <> Неопределено Тогда
						ДокументОбъект.Товары.Удалить(РезультатПоиска);
					КонецЕсли;
				КонецЕсли; 		
				
				Если  СтрокаТоваров.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПодЗаказ Тогда 
					Запрос = Новый Запрос();
					Запрос.Текст = ПолучитьТекстЗапросаПроверкаНаличияПоЗаказу();
					Запрос.УстановитьПараметр("Номенклатура", СтрокаТоваров.Номенклатура);
					Запрос.УстановитьПараметр("ЗаказНаПеремещение",  СтрокаТоваров.Назначение.Заказ);
					Запрос.УстановитьПараметр("Склад", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85")));
					Запрос.УстановитьПараметр("ТекущаяДата",  		ТекущаяДата());
		 			РезультатЗапроса = Запрос.Выполнить().Выбрать();
					
					Если не РезультатЗапроса.Следующий() Тогда 
						РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
						Если РезультатПоиска <> Неопределено Тогда
							ДокументОбъект.Товары.Удалить(РезультатПоиска);
						КонецЕсли;
						
					Иначе 
						 	РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
							Если РезультатПоиска <> Неопределено Тогда
									РезультатПоиска.Количество		   = РезультатЗапроса.ВНаличии;
									РезультатПоиска.КоличествоУпаковок = РезультатЗапроса.ВНаличии;	
							КонецЕсли;
					КонецЕсли;
				
				КонецЕсли;			
			КонецЦикла; 
		
		Если ЗначениеЗаполнено(Выборка.Ссылка.Дата) 
		 И	 ТекущаяДата()  <  Выборка.Ссылка.Дата  Тогда
			ДокументОбъект.Дата = Выборка.Ссылка.Дата + 7200;
		Иначе
			ДокументОбъект.Дата = ТекущаяДата();		
		КонецЕсли;
		
		
		
		Попытка
			Если ДокументОбъект.Товары.Количество() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Информация, 
					,
					ДокументОбъект.Ссылка,
					НСтр("ru = 'Удачно сформирован документ: Перемещение товаров по заказу на перемещение'"));
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Выборка.Ссылка,
				НСтр("ru = 'Не удалось сформировать документ: Перемещение товаров по заказу на перемещение'") + ОписаниеОшибки());
			ВыполнитьОтправкуПисьма("Не удалось создать перемещение по заказу на перемещение", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		КонецПопытки;
			
	КонецЦикла;
	
	ЗакрытьЗаказыНаПеремещения();

	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация, 
			,
			,
			НСтр("ru = 'Завершено перемещение товаров по заказу на перемещение'"));
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОбновитьСостояниеОбеспечения(ЗаказНаПеремещение, Параметры)
	
	ПараметрыСостоянияОбеспечения = ПолучитьПараметрыСостоянияОбеспечения(Параметры);
	ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Истина);
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать(); 
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости);
	
	Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
		СтрокаТовары.Выбран = Истина;
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения); 
	
	РезультатПоиска = ОбработкаСостояниеОбеспечения.Товары.Найти(Истина, "СтрокаИзменена");
	Если РезультатПоиска <> Неопределено Тогда
		
		РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
		Если РезультатРасчета <> Неопределено Тогда
			
			ДокументОбъект = ЗаказНаПеремещение.ПолучитьОбъект();
			ДокументОбъект.Товары.Загрузить(РезультатРасчета);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое перемещение товаров по заказам на перемещение'"),
					УровеньЖурналаРегистрации.Информация, 
					,
					ЗаказНаПеремещение,
					НСтр("ru = 'Удачно расчитано дату отгрузки номенклатуры по заказу на перемещение'"));
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическое перемещение товаров по заказам на перемещение'"),
					УровеньЖурналаРегистрации.Ошибка, 
					,
					ЗаказНаПеремещение,
					НСтр("ru = 'Не удалось расчитать дату отгрузки номенклатуры по заказу на перемещение'") + ОписаниеОшибки()); 	
				ВыполнитьОтправкуПисьма("Не удалось создать перемещение по заказу на перемещение", ПолучитьНавигационнуюСсылку(ДокументОбъект.Ссылка));
			КонецПопытки;
				
		КонецЕсли;
		
	КонецЕсли;

	Возврат ОбработкаСостояниеОбеспечения.Товары;
	
КонецФункции

Функция ПоместитьТоварыВоВременноеХранилище(ЗаказКлиента)
	
	Возврат ПоместитьВоВременноеХранилище(ЗаказКлиента.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции 

Функция ПолучитьПараметрыОтбора(Выборка)

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заказ", Выборка.Ссылка);
	ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.СкладОтправитель);
	ПараметрыОтбора.Вставить("ЖелаемаяДатаПоступления",?(Выборка.Ссылка.ЖелаемаяДатаПоступления=Дата(1,1,1), КонецДня(Выборка.Ссылка.Дата), Выборка.Ссылка.ЖелаемаяДатаПоступления));
	ПараметрыОтбора.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище(Выборка.Ссылка));
	ПараметрыОтбора.Вставить("РассчитатьБезЗаказа", Ложь);
	ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Ложь);
	
	Возврат ПараметрыОтбора;

КонецФункции // ПолучитьПараметрыОтбора()

Функция ПолучитьПараметрыСостоянияОбеспечения(Параметры)

	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Ложь);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа",  Параметры.РассчитатьБезЗаказа);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаПоступления);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии);

	Возврат ПараметрыСостоянияОбеспечения;

КонецФункции // ПолучитьПараметрыСостоянияОбеспечения()
 
Функция ПолучитьТекстЗапросаЗаказовКОтгрузке()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗаказНаПеремещение КАК Ссылка
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение.СкладОтправитель = &Склад 
				   |				И ЗаказНаПеремещение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению))";
	Возврат ТекстЗапроса;

КонецФункции 

Функция ПолучитьТекстЗапросаПроверкаНаличияПоЗаказу()
	Текст =
			"ВЫБРАТЬ
			|	ОбеспечениеЗаказов.Регистратор КАК ПеремещениеТоваров,
			|	ОбеспечениеЗаказов.НомерСтроки,
			|	ОбеспечениеЗаказов.Номенклатура,
			|	ОбеспечениеЗаказов.Склад,
			|	ОбеспечениеЗаказов.Назначение
			|ПОМЕСТИТЬ КешПеремещений
			|ИЗ
			|	РегистрНакопления.ОбеспечениеЗаказов КАК ОбеспечениеЗаказов
			|ГДЕ
			|	ОбеспечениеЗаказов.Номенклатура = &Номенклатура
			|	И ОбеспечениеЗаказов.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
			|	И ОбеспечениеЗаказов.Назначение.Заказ = &ЗаказНаПеремещение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыНаСкладах.Период,
			|	ТоварыНаСкладах.Регистратор КАК ПриходныйОрдерНаТовары,
			|	ТоварыНаСкладах.НомерСтроки,
			|	ТоварыНаСкладах.Номенклатура,
			|	ТоварыНаСкладах.Склад,
			|	ТоварыНаСкладах.ВНаличии
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
			|ГДЕ
			|	ТоварыНаСкладах.Склад = &Склад
			|	И ТоварыНаСкладах.Номенклатура = &Номенклатура
			|	И ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ПриходныйОрдерНаТовары
			|	И ТоварыНаСкладах.Регистратор.Распоряжение В
			|			(ВЫБРАТЬ
			|				КешПеремещений.ПеремещениеТоваров
			|			ИЗ
			|				КешПеремещений КАК КешПеремещений)";
	Возврат Текст;

КонецФункции



Процедура ЗакрытьЗаказыНаПеремещения()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказНаПеремещение.Ссылка
	                      |ИЗ
	                      |	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	                      |ГДЕ
	                      |	ЗаказНаПеремещение.Проведен
	                      |	И ЗаказНаПеремещение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	                      |	И НЕ ЗаказНаПеремещение.Ссылка В
	                      |				(ВЫБРАТЬ
	                      |					ЗаказыНаПеремещение.ЗаказНаПеремещение
	                      |				ИЗ
	                      |					РегистрНакопления.ЗаказыНаПеремещение.Остатки КАК ЗаказыНаПеремещение)");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект 			= Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Статус 	= Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НаборЗаписей = РегистрыСведений.Регламент_Автоперемещения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказНаПеремещение.Установить(Выборка.Ссылка);
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОтправкуПисьма(ТекстЗаголовка, ТекстСообщения)

	ГлобальныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	Если НЕ ТипЗнч(ГлобальныеНастройки) = Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru=""Не найдена структура настроек 'ДополнительныеНастройкиОбработокМодификацииКонфигурации' библиотеки внешних обработок.""");
		Возврат;	
	КонецЕсли;
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");	
	
	Если НЕ ГлобальныеНастройки.Свойство("СтандартнаяУчетнаяЗаписьЭлектроннойПочты") Тогда
		ВызватьИсключение НСтр("ru=""Не задача сандарная учетная запись в библиотеке внешних обработок для отправки электронной почты.""");
		Возврат; 
	КонецЕсли;
	
	УчетнаяЗаписьЭлектроннойПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Кому = Новый Массив;
	Кому.Добавить(Новый Структура("Адрес, Представление", "akomar@ktc.rovno.ua", "Андрей Комар"));
	Кому.Добавить(Новый Структура("Адрес, Представление", "1clog@ktc-ua.com", "відділ підтримки 1С"));
	
	ПараметрыПисьма 	= БиблиотекаОбработок.СформироватьПараметрыПисьма(ТекстЗаголовка, ТекстСообщения, Кому,,,,,, ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(УчетнаяЗаписьЭлектроннойПочты, ПараметрыПисьма);

КонецПроцедуры
 


