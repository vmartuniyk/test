
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ВыполнитьАвтореализацию() Экспорт
		
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Автоматическая выписка реализаций по заказам клиентов'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация, 
			,
			,
			НСтр("ru = 'Начало выписки реализаций по заказам клиентов'"));

	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	СписатьТоварВНаличии = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
		Новый УникальныйИдентификатор("482344ab-fdce-11e2-883c-001e673c80fc"));	
	Склад =  Справочники.Склады.ПолучитьСсылку(	Новый УникальныйИдентификатор("d10d3409-40c2-11e0-9f98-001517115d85"));
			
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаказовКОтгрузке();
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("СписатьТоварВНаличии", СписатьТоварВНаличии);
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		ПараметрыОтбора = ПолучитьПараметрыОтбора(Выборка);
		ОбеспечениеТовары = ОбновитьСостояниеОбеспечения(Выборка.Ссылка, ПараметрыОтбора);
		
		Если ОчиститьДополнительныеСведения(ОбеспечениеТовары, Выборка.Ссылка, СписатьТоварВНаличии) Тогда
			Продолжить;
		КонецЕсли;  
		
		СостояниеНаличия = ОбеспечениеТовары.Выгрузить(, "СостояниеНаличия");	
		СостояниеНаличия.Свернуть("СостояниеНаличия");
		Если СостояниеНаличия.Количество() = 1
		 И   СостояниеНаличия[0].СостояниеНаличия = Перечисления.СостоянияНаличия.ПолностьюВНаличии Тогда
		 
			ПолностьюВНаличии = Истина;
			
		Иначе
			
			ПолностьюВНаличии = Ложь;
			
		КонецЕсли;
		
			
		Если Не ПолностьюВНаличии И ПараметрыОтбора.НеОтгружатьЧастями Тогда
			Продолжить;	
		КонецЕсли;
		
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Заполнить(Выборка.Ссылка);

		Для каждого СтрокаТоваров Из ОбеспечениеТовары Цикл
		 	
			Если 		СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.ПолностьюВНаличии Тогда
				
				Продолжить;
				
			ИначеЕсли 	СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.ЧастичноВНаличии Тогда
				
			  	РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
			  	Если РезультатПоиска <> Неопределено Тогда
			    
					РезультатПоиска.Количество = СтрокаТоваров.ВНаличии;
					РезультатПоиска.КоличествоУпаковок = СтрокаТоваров.ВНаличии;
					
					СтруктураДействий = Новый Структура;
					ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(РезультатПоиска, СтруктураДействий, Неопределено);			    	
			    	
				КонецЕсли;
				
			ИначеЕсли 	СтрокаТоваров.СостояниеНаличия = Перечисления.СостоянияНаличия.НетВНаличии Тогда
				
				РезультатПоиска = ДокументОбъект.Товары.Найти(СтрокаТоваров.КодСтроки, "КодСтроки");
				Если РезультатПоиска <> Неопределено Тогда
					ДокументОбъект.Товары.Удалить(РезультатПоиска);
				КонецЕсли;
				
			КонецЕсли; 		
		
		КонецЦикла; 
		
		
		
		
		Если ЗначениеЗаполнено(Выборка.Ссылка.ЖелаемаяДатаОтгрузки) 
		 И	 ТекущаяДата()  <  Выборка.Ссылка.ЖелаемаяДатаОтгрузки  Тогда
			ДокументОбъект.Дата = Выборка.Ссылка.ЖелаемаяДатаОтгрузки + 7200;
		Иначе
			ДокументОбъект.Дата = ТекущаяДата();		
		КонецЕсли;
		
		

		Попытка
							
			Если ДокументОбъект.Товары.Количество() Тогда
				
				ОбработатьПроблемныеЗаказы(Выборка.Ссылка, Склад);
				
				ДокументОбъект.Менеджер = Выборка.Ссылка.Менеджер;
				ДокументОбъект.Подразделение = ДокументОбъект.Менеджер.ТекущееПодразделение;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
								
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Информация, 
					,
					ДокументОбъект.Ссылка,
					НСтр("ru = 'Удачно сформирован документ: Реализация Товаров Услуг по заказу клиента'"));
			КонецЕсли;
			
		Исключение
			
			ОповеститьОтделТехническойПоддержки(Выборка.Ссылка, НСтр("ru = 'Не удалось сформировать документ: РеализацияТоваровУслуг по заказу клиенту'") + ОписаниеОшибки());	
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка, 
				,
				Выборка.Ссылка,
				НСтр("ru = 'Не удалось сформировать документ: РеализацияТоваровУслуг по заказу клиенту'") + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
			
	КонецЦикла;
		
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация, 
			,
			,
			НСтр("ru = 'Завершена выписка реализаций по заказам клиентов'"));
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьПроблемныеЗаказы(ЗаказКлиента, Склад)

	ГраницаГрафикаДоступности = ПолучитьГраницуГрафикаДоступности(Склад);
	
 	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПроблемныхЗаказов();
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("Склад", Склад);
    РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.ЗаказКлиента.ПолучитьОбъект();
		Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
			СтрокаТовары.ДатаОтгрузки = ГраницаГрафикаДоступности + 86400;
		КонецЦикла;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьПроблемныеЗаказы()

Функция ПолучитьГраницуГрафикаДоступности(Склад)

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ГраницаГрафикаДоступности
		|ИЗ
		|	РегистрСведений.НастройкаКонтроляОстатков
		|ГДЕ
		|	Склад = &Склад
		|";
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ГраницаГрафикаДоступности, ТекущаяДата());

КонецФункции // ПолучитьГраницуГрафикаДоступности()
 
 
Процедура ОповеститьОтделТехническойПоддержки(ЗаказКлиента, ОписаниеОшибки)
	
	БиблиотекаОбработок = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	Кому = Новый Массив;   
	Кому.Добавить(Новый Структура("Адрес, Представление", "777@ktc-ua.com",	"Отдел технической поддержки"));
	ТемаПисьма 					= "[ERROR] Автоматическая выписка реализаций по заказам клиентов";
	ТелоПисьма					= "";
	ТелоПисьма					= ТелоПисьма + " " + ОписаниеОшибки + "<br>";
	ТелоПисьма					= ТелоПисьма + " Навигационная ссылка: " + ПолучитьНавигационнуюСсылку(ЗаказКлиента) + "<br>"; 
	ПараметрыПисьма = БиблиотекаОбработок.СформироватьПараметрыПисьма(ТемаПисьма, ТелоПисьма, Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
	БиблиотекаОбработок.ОтправитьСообщениеПоSMTP(Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор("5a8d021b-4548-4020-8cab-9ae6f06c8bf7")), ПараметрыПисьма);
							
КонецПроцедуры



Функция ОчиститьДополнительныеСведения(Товары, Ссылка, Свойство)
	
	Если Товары.Количество() = 0 Тогда
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство);
		НаборЗаписей.Записать();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОчиститьДополнительныеСведения()

Функция ОбновитьСостояниеОбеспечения(ЗаказКлиента, Параметры)
	
	ПараметрыСостоянияОбеспечения = ПолучитьПараметрыСостоянияОбеспечения(Параметры);
	ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Ложь);
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать(); 
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости);
	
	Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
		СтрокаТовары.Выбран = Истина;
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения); 
	
	РезультатПоиска = ОбработкаСостояниеОбеспечения.Товары.Найти(Истина, "СтрокаИзменена");
	Если РезультатПоиска <> Неопределено Тогда
		
		РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
		Если РезультатРасчета <> Неопределено Тогда
			
			ДокументОбъект = ЗаказКлиента.ПолучитьОбъект();
			ДокументОбъект.Товары.Загрузить(РезультатРасчета);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическая выписка реализаций по заказам клиентов'"),
					УровеньЖурналаРегистрации.Информация, 
					,
					ЗаказКлиента,
					НСтр("ru = 'Удачно расчитано дату отгрузки номенклатуры по заказу клиента'"));
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Автоматическая выписка реализаций по заказам клиентов'"),
					УровеньЖурналаРегистрации.Ошибка, 
					,
					ЗаказКлиента,
					НСтр("ru = 'Не удалось расчитать дату отгрузки номенклатуры по заказу клиенту'") + ОписаниеОшибки()); 	
			КонецПопытки;
				
		КонецЕсли;
		
	КонецЕсли;

	Возврат ОбработкаСостояниеОбеспечения.Товары;
	
КонецФункции

Функция ПоместитьТоварыВоВременноеХранилище(ЗаказКлиента)
	
	Возврат ПоместитьВоВременноеХранилище(ЗаказКлиента.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции 

Функция ПолучитьПараметрыОтбора(Выборка)

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заказ", Выборка.Ссылка);
	ПараметрыОтбора.Вставить("Склад", Выборка.Ссылка.Склад);
	ПараметрыОтбора.Вставить("ЖелаемаяДатаОтгрузки", Выборка.Ссылка.ЖелаемаяДатаОтгрузки);
	ПараметрыОтбора.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище(Выборка.Ссылка));
	ПараметрыОтбора.Вставить("РассчитатьБезЗаказа", Ложь);
	ПараметрыОтбора.Вставить("НеОтгружатьЧастями", Выборка.Ссылка.НеОтгружатьЧастями);
	
	Возврат ПараметрыОтбора;

КонецФункции // ПолучитьПараметрыОтбора()

Функция ПолучитьПараметрыСостоянияОбеспечения(Параметры)

	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Параметры.НеОтгружатьЧастями);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа",  Параметры.РассчитатьБезЗаказа);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии);

	Возврат ПараметрыСостоянияОбеспечения;

КонецФункции // ПолучитьПараметрыСостоянияОбеспечения()
 
Функция ПолучитьТекстЗапросаЗаказовКОтгрузке()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
	               |ПОМЕСТИТЬ ЗаказыКлиентов
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СписатьТоварВНаличии
	               |	И ДополнительныеСведения.Значение = ИСТИНА
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокЗаказы.Ссылка
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ДокЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыКлиентов КАК ЗаказыКлиентов
	               |		ПО (ЗаказыКлиентов.ЗаказКлиента = ДокЗаказы.Ссылка)
	               |ГДЕ
				   |	ДокЗаказы.Проведен
	               |И	ДокЗаказы.Склад  = &Склад
	               |И 	ДокЗаказы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокЗаказы.Дата Возр";
	Возврат ТекстЗапроса;

КонецФункции // ()

Функция ПолучитьТекстЗапросаПроблемныхЗаказов()
	
	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 0.
		|ВЫБРАТЬ
		|	ЗаказКлиента,
		|	Номенклатура,
		|	Характеристика,
		|	КОформлениюОстаток
		|ПОМЕСТИТЬ КешЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказКлиента И Склад = &Склад)
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 1.
		|ВЫБРАТЬ
		|	ЗаказыКлиентов.ЗаказКлиента,
		|	ЗаказыКлиентов.Номенклатура,
		|	ЗаказыКлиентов.Характеристика
		|ПОМЕСТИТЬ ПроблемнаяНоменклатура		
		|ИЗ
		|	КешЗаказа КАК ЗаказыКлиентов
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешЗаказа) И Склад = &Склад ) КАК СвободныеОстатки
		|ПО	СвободныеОстатки.Номенклатура = ЗаказыКлиентов.Номенклатура
		|И	СвободныеОстатки.Характеристика = ЗаказыКлиентов.Характеристика
        |
		|ГДЕ
		|	ВНаличииОстаток > 0
		|И	ВНаличииОстаток < ВРезервеОстаток
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 2.
		|ВЫБРАТЬ
		|	ЗаказыКлиентов.ЗаказКлиента	
		|ИЗ
		|	ПроблемнаяНоменклатура КАК ПроблемнаяНоменклатура
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента <> &ЗаказКлиента 
		|															И (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешЗаказа)
		|															И Склад = &Склад) КАК ЗаказыКлиентов
		|ПО	ЗаказыКлиентов.Номенклатура 	= ПроблемнаяНоменклатура.Номенклатура
		|И	ЗаказыКлиентов.Характеристика 	= ПроблемнаяНоменклатура.Характеристика
		|
		|ГДЕ
		|	КОформлениюОстаток <> 0
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешЗаказа;
		|УНИЧТОЖИТЬ ПроблемнаяНоменклатура;		
	 	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
КонецПроцедуры

Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.1.17";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. автоматические реализации [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. автоматические реализации [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. автоматические реализации [" + Версия + "]", "ВыполнитьАвтореализацию();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	ВыполнитьАвтореализацию();	
КонецПроцедуры