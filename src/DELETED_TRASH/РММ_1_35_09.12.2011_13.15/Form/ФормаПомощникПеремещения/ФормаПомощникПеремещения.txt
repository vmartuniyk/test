
&НаКлиенте
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокОрганизаций());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОрганизаций()
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление
		|ИЗ
		|	Справочник.Организации КАК Организации";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выгрузить();

	Возврат ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("Представление");
	
КонецФункции

&НаКлиенте
Процедура СкладПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.СкладПолучатель.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСкладов(СкладОтправитель));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов(СкладИсключение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(Справочники.Склады.НайтиПоНаименованию(СкладИсключение));

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрСклады.Представление
		|ИЗ
		|	Справочник.Склады КАК СпрСклады
		|ГДЕ
		|	СпрСклады.Ссылка НЕ В (&МассивИсключений)";
		
	Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выгрузить();

	Возврат ВыборкаДетальныеЗаписи.ВыгрузитьКолонку("Представление");
	
КонецФункции

&НаКлиенте
Процедура Переместить(Команда)	
	
	Если ПустаяСтрока(СкладПолучатель) Тогда
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Поле обязательное для заполнения.";
		Сообщение.Поле	= "СкладПолучатель";
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СкладОтправитель) Тогда
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Поле обязательное для заполнения.";
		Сообщение.Поле	= "СкладОтправитель";
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	
	СоздатьДокументПеремещениеНаКлиенте("Проведение");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СкладОтправитель 			= Параметры.СкладОтправитель;
//	СерийныеНомераНоменклатуры  = Параметры.СерийныеНомера;
	
	//ТаблицаНоменклатуры = ЗначениеИзСтрокиВнутр(Параметры.ТаблицаСтрока);
	
	СписокНоменклатуры.Загрузить(ЗначениеИзСтрокиВнутр(Параметры.ТаблицаСтрока));
	
	ПроверитьНоменклатуруНаСервере();
	
	ктсСформироватьСписокОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.СкладОтправитель.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСкладов(СкладПолучатель));
	
КонецПроцедуры




&НаСервере
Процедура ПроверитьНоменклатуруНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабНоменклатура = Новый ТаблицаЗначений;
	
	ТабНоменклатура.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТабНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабНоменклатура.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТабНоменклатура.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТабНоменклатура.Колонки.Добавить("ОрганизацияОтправитель", Новый ОписаниеТипов("СправочникСсылка.Организации"));

	Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
		
		 НоваяСтрока = ТабНоменклатура.Добавить();
		 
		 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		 НоваяСтрока.ОрганизацияОтправитель = Справочники.Организации.НайтиПоНаименованию(СтрокаТЧ.ОрганизацияОтправитель);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаНоменклатура.Код,
	               |	ТаблицаНоменклатура.Номенклатура,
	               |	ТаблицаНоменклатура.Количество,
	               |	ТаблицаНоменклатура.ЕдиницаИзмерения,
	               |	ТаблицаНоменклатура.Упаковка,
	               |	ТаблицаНоменклатура.ОрганизацияОтправитель
	               |ПОМЕСТИТЬ Кеш
	               |ИЗ
	               |	&ТабНоменклатура КАК ТаблицаНоменклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Кеш.Код,
	               |	Кеш.Номенклатура,
	               |	Кеш.Количество,
	               |	Кеш.ЕдиницаИзмерения,
	               |	Кеш.Упаковка,
	               |	Кеш.ОрганизацияОтправитель,
				   |	ВЫБОР	
				   |		КОГДА Кеш.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
				   |		ТОГДА ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0)
	               |		ИНАЧЕ ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) / ЕСТЬNULL(Кеш.Упаковка.Коэффициент, 1) 
				   |	КОНЕЦ КАК КоличествоПоФакту
	               |ИЗ
	               |	Кеш КАК Кеш
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
	               |				,
	               |				Склад = &СкладОтправитель
	               |					И Характеристика = &Характеристика
	               |					И (Номенклатура, Организация) В
	               |						(ВЫБРАТЬ
	               |							Кеш.Номенклатура,
	               |							Кеш.ОрганизацияОтправитель КАК Организация
	               |						ИЗ
	               |							Кеш)) КАК ТоварыОрганизацийОстатки
	               |		ПО Кеш.Номенклатура = ТоварыОрганизацийОстатки.Номенклатура
	               |			И Кеш.ОрганизацияОтправитель = ТоварыОрганизацийОстатки.Организация";
				   
	Запрос.УстановитьПараметр("ТабНоменклатура", ТабНоменклатура);
	Запрос.УстановитьПараметр("СкладОтправитель", Справочники.Склады.НайтиПоНаименованию(СкладОтправитель));
	Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокНоменклатуры.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры




&НаКлиенте
Процедура СписокНоменклатурыКоличествоПриИзменении(Элемент)
	
	ПроверитьНоменклатуруНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпаковкаПриИзменении(Элемент)
	
	ПроверитьНоменклатуруНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыОрганизацияОтправительПриИзменении(Элемент)
	
	ПроверитьНоменклатуруНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	ПроверитьНоменклатуруНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлСписокНоменклатуры 	= Элементы.СписокНоменклатуры;
	ТекущиеДанные 			= ЭлСписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеВыбора = Новый СписокЗначений();
		ктсОбработкаВыбораУпаковки(ТекущиеДанные.Номенклатура, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ктсОбработкаВыбораУпаковки(Номенклатура, ДанныеВыбора)
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, НЕОПРЕДЕЛЕНО) КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(СпрУпаковки.Ссылка) КАК УпаковкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Владелец = ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СпрНоменклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|   И НЕ СпрУпаковки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрУпаковки.Коэффициент,
	|	СпрУпаковки.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеВыбора.Добавить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(),Номенклатура.ЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Упаковка <> Неопределено Тогда
			
			ДанныеВыбора.Добавить(Выборка.Упаковка, Выборка.УпаковкаПредставление);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура СписокНоменклатурыОрганизацияОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	
	ЭлСписокНоменклатуры 	= Элементы.СписокНоменклатуры;
	ТекущиеДанные 			= ЭлСписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеВыбора = Новый СписокЗначений();
		ктсОбработкаВыбораОрганизации(ТекущиеДанные.Номенклатура, СкладОтправитель, ДанныеВыбора);
		
		Элемент.СписокВыбора.ЗагрузитьЗначения(ДанныеВыбора.ВыгрузитьЗначения());

		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ктсОбработкаВыбораОрганизации(НоменклатураСсылка, СкладСтрока, ДанныеВыбора)
	
	УстановитьПривилегированныйРежим(Истина);

	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", НоменклатураСсылка);
	
	МассивСтрок 				= СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
	МассивВыбранныхОрганизаций  = Новый Массив;
	
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		
		МассивВыбранныхОрганизаций.Добавить(Справочники.Организации.НайтиПоНаименованию(СтрокаМассива.ОрганизацияОтправитель));
		
	КонецЦикла;
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыОрганизацийОстатки.Организация.Представление КАК Организация
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И Склад = &Склад) КАК ТоварыОрганизацийОстатки
		|ГДЕ
		|	НЕ ТоварыОрганизацийОстатки.Организация В (&МассивОрганизаций)";

	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивВыбранныхОрганизаций);
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(СкладСтрока));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеВыбора.Добавить(ВыборкаДетальныеЗаписи.Организация);
		
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры




&НаКлиенте
Процедура СоздатьДокументПеремещениеНаКлиенте(РежимЗаписи)
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
		
		Если СтрокаТЧ.Количество > СтрокаТЧ.КоличествоПоФакту Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Количество превышает фактическое количество.";
			Сообщение.Поле = "СписокНоменклатуры[" + Строка(НомерСтроки) + "].Номенклатура";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	МассивСсылок = СоздатьДокументПеремещениеНаСервере(КлючУникальности, РежимЗаписи);
	
	Для Каждого Ссылка ИЗ МассивСсылок Цикл
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НаименованиеДокумента", Строка(Ссылка.Ссылка));
		ПараметрыФормы.Вставить("НавигационнаяСсылка", Ссылка.НавигационнаяСсылка);
		
		ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаОповещения", ПараметрыФормы);
		
		ПоказатьОповещениеПользователя("Создан документ.", Ссылка.НавигационнаяСсылка, Строка(Ссылка.Ссылка), БиблиотекаКартинок.Информация32);
		
		Если Печать Тогда
								
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(Ссылка.Ссылка);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Документ.ПеремещениеТоваров",
				"НакладнаяНаПеремещение",
				МассивДокументов,
				Неопределено,
				Неопределено
			);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументПеремещениеНаСервере(СерийныеНомераНоменклатуры, РежимЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабНоменклатура = Новый ТаблицаЗначений;
	
	ТабНоменклатура.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТабНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТабНоменклатура.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТабНоменклатура.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТабНоменклатура.Колонки.Добавить("ОрганизацияОтправитель", Новый ОписаниеТипов("СправочникСсылка.Организации"));

	Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
		
		НоваяСтрока = ТабНоменклатура.Добавить();
		 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ОрганизацияОтправитель = Справочники.Организации.НайтиПоНаименованию(СтрокаТЧ.ОрганизацияОтправитель);
		
	КонецЦикла;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаНоменклатура.ОрганизацияОтправитель КАК Организация
				   |ПОМЕСТИТЬ КЕШ
	               |ИЗ
	               |	&ТабНоменклатура КАК ТаблицаНоменклатура;
				   |ВЫБРАТЬ
				   |	Организация
				   |ИЗ
				   |	КЕШ";
				   
	Запрос.УстановитьПараметр("ТабНоменклатура", ТабНоменклатура);
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	МассивДокументов  = Новый Массив;
	
	Для Каждого Организация ИЗ МассивОрганизаций Цикл
		
		ДокументПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		ДокументПеремещение.Заполнить(Неопределено);
		ДокументПеремещение.Дата = ТекущаяДата();
		ДокументПеремещение.УстановитьНовыйНомер();

		ДокументПеремещение.Организация 		= Справочники.Организации.НайтиПоНаименованию(Организация);
		ДокументПеремещение.СкладОтправитель 	= Справочники.Склады.НайтиПоНаименованию(СкладОтправитель);
		ДокументПеремещение.СкладПолучатель		= Справочники.Склады.НайтиПоНаименованию(СкладПолучатель);
		ДокументПеремещение.Ответственный		= ПараметрыСеанса.ТекущийПользователь;
		ДокументПеремещение.ВидЦены				= Справочники.ВидыЦен.НайтиПоНаименованию("Вхідна");
		ДокументПеремещение.СтатусОтгрузки		= Перечисления.СтатусыОтгрузки.КОтгрузке;
		ДокументПеремещение.Комментарий			= Комментарий;
		
		КлючСвязиСерийнихНомеров = 1;
		
		Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
			
			Если Справочники.Организации.НайтиПоНаименованию(СтрокаТЧ.ОрганизацияОтправитель) = Организация Тогда
				
				НоваяСтрока = ДокументПеремещение.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
					
					Коефициент						= ктсПолучитьКоэффициентУпаковки(СтрокаТЧ.Упаковка);
					НоваяСтрока.Количество 			= СтрокаТЧ.Количество * Коефициент;
					НоваяСтрока.КоличествоУпаковок 	= СтрокаТЧ.Количество;
					
				Иначе
								
					НоваяСтрока.Количество 			= СтрокаТЧ.Количество;
					НоваяСтрока.КоличествоУпаковок 	= СтрокаТЧ.Количество;
					
				КонецЕсли;
				
				
				МассивСН = СерийныеНомераНоменклатуры.Получить(СтрокаТЧ.Номенклатура);
				
				Если МассивСН <> Неопределено Тогда
								
					НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязиСерийнихНомеров;
					
					Для Каждого СерийныйНомер ИЗ МассивСН Цикл

						НоваяСтрока = ДокументПеремещение.СерийныеНомера.Добавить();
						НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязиСерийнихНомеров;
						НоваяСтрока.СерийныйНомер = СерийныйНомер;
						
					КонецЦикла;
					
					КлючСвязиСерийнихНомеров = КлючСвязиСерийнихНомеров + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РежимЗаписи = "Проведение" Тогда
			ДокументПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли РежимЗаписи = "Запись" Тогда
			ДокументПеремещение.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ДокументПеремещение.Ссылка));
		СтруктураВозврата.Вставить("Ссылка", ДокументПеремещение.Ссылка);
		
		МассивДокументов.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции


&НаСервереБезКонтекста
Функция ктсПолучитьКоэффициентУпаковки(УпаковкаСсылка)
	
	Возврат УпаковкаСсылка.Коэффициент;
	
КонецФункции



&НаКлиенте
Процедура ЗаписатьПеремещение(Команда)
	
	Если ПустаяСтрока(СкладПолучатель) Тогда
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Поле обязательное для заполнения.";
		Сообщение.Поле	= "СкладПолучатель";
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СкладОтправитель) Тогда
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Поле обязательное для заполнения.";
		Сообщение.Поле	= "СкладОтправитель";
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	
	СоздатьДокументПеремещениеНаКлиенте("Запись");
	
КонецПроцедуры




&НаКлиенте
Процедура ОстаткиПоОрганизациям(Команда)
	
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = ПолучитьОстаткиПоОрганизациям(ТекущиеДанные.Номенклатура);
	ТабличныйДокумент.Показать("Остатки товаров организаций.");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОстаткиПоОрганизациям(НоменклатураСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	Макет 		= ОбъектФормы.ПолучитьМакет("ОстаткиТоваровОрганизаций");
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	
	
	ОбластьОрганизация 	= Макет.ПолучитьОбласть("Организация");
	ОбластьДанные		= Макет.ПолучитьОбласть("Данные");
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыОрганизацийОстатки.Организация,
		|	ТоварыОрганизацийОстатки.Склад,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ТоварыОрганизацийОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыОрганизацийОстатки.Организация.Наименование";

	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Организация = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Организация <> ВыборкаДетальныеЗаписи.Организация Тогда
			Организация = ВыборкаДетальныеЗаписи.Организация;
			ОбластьОрганизация.Параметры.Организация = ВыборкаДетальныеЗаписи.Организация;
			ТабличныйДокумент.Вывести(ОбластьОрганизация);
		КонецЕсли;
		
		ОбластьДанные.Параметры.Склад = ВыборкаДетальныеЗаписи.Склад;
		ОбластьДанные.Параметры.КоличествоОстаток = ВыборкаДетальныеЗаписи.КоличествоОстаток;
		ТабличныйДокумент.Вывести(ОбластьДанные);
		
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
    Возврат ТабличныйДокумент;
	
КонецФункции





&НаСервере
Процедура ктсСформироватьСписокОрганизаций()
	
	УстановитьПривилегированныйРежим(Истина);
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Представление
		|ИЗ
		|	Справочник.Организации КАК Организации";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ктсСоздатьКнопку(Строка("_")+СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","_"), ВыборкаДетальныеЗаписи.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ктсСоздатьКнопку(ИмяКоманды, Заголовок)
	
	НоваяКоманда = Команды.Добавить(Строка("Команда" + ИмяКоманды));
	НоваяКоманда.Действие = "ктсУстановитьОрганизациюОтправительОбработчик";
	
	НовыйЭлемент = Элементы.Добавить(Строка("Кнопка" + ИмяКоманды), Тип("КнопкаФормы"), Элементы.УстановитьОрганизациюОтправитель);
	НовыйЭлемент.Заголовок = Заголовок;
	НовыйЭлемент.ИмяКоманды = Строка("Команда" + ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ктсУстановитьОрганизациюОтправительОбработчик(Команда)
	
	УстановитьОрганизациюОтправитель(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОрганизациюОтправитель(ИмяКоманды)
	
	ЭлементКнопка = Элементы.Найти(СтрЗаменить(ИмяКоманды, "Команда", "Кнопка"));
	Если ЭлементКнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ ИЗ СписокНоменклатуры Цикл
		
		СтрокаТЧ.ОрганизацияОтправитель = ЭлементКнопка.Заголовок;
		
	КонецЦикла;
	
	ПроверитьНоменклатуруНаСервере();
	
КонецПроцедуры




&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СписокНоменклатуры.Добавить();
	НоваяСтрока.Код = ТекущиеДанные.Код;
	НоваяСтрока.Номенклатура = ТекущиеДанные.Номенклатура;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
	НоваяСтрока.Упаковка = ТекущиеДанные.Упаковка;
	
	ПроверитьНоменклатуруНаСервере();
	
КонецПроцедуры
