
&НаКлиенте
Перем СтруктураКэшируемыеЗначения;

&НаКлиенте
Перем ПодборТекущаяНоменклатура;

&НаКлиенте
Перем МассивЗакладок;

&НаКлиенте
Перем СсылкаДляПоиска;

&НаКлиенте
Перем глЗагружатьНоменклатуру;

&НаКлиенте
Перем глОтбражатьВходнуюЦену;

&НаКлиенте
Перем objHTM;

&НаКлиенте
Перем СерийныеНомераКорзины;



&НаКлиенте
Процедура ПолучитьКэшируемыеЗначения()
	
	
	Если СтруктураКэшируемыеЗначения <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СтруктураЗапроса = Новый Структура;
	
	СтруктураЗапроса.Вставить(
		"Перечисления", Новый Структура("
			|ВариантыВеденияДополнительныхДанныхПоНоменклатуре", Новый Структура("
				|ИндивидуальныеДляНоменклатуры,
				|ОбщиеДляВидаНоменклатуры")
		)
	);
	СтруктураЗапроса.Перечисления.Вставить(
		"ТипыНоменклатуры", Новый Структура("
			|Товар,
			|Услуга")
	);
	СтруктураЗапроса.Перечисления.Вставить(
		"СпособыФормированияСегментов", Новый Структура("
			|ФормироватьДинамически")
	);
	СтруктураЗапроса.Вставить(
		"ФункциональныеОпции", Новый Структура("
			|ИспользоватьХарактеристикиНоменклатуры,
			|ИспользоватьУпаковкиНоменклатуры,
			|ИспользоватьПолнотекстовыйПоиск"
		)
	);
	СтруктураЗапроса.Вставить(
		"ПустыеСсылкиНаСправочники", Новый Структура("
			|УпаковкиНоменклатуры,
			|ХарактеристикиНоменклатуры"
		)
	);
	
	
	СтруктураКэшируемыеЗначения = ктсПолучитьПредопределенныеЗначения(СтруктураЗапроса);
	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ
                                                                                     
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Настройки = ктсХранилищеОбщихНастроекЗагрузить("ПодборТоваровВДокументПродажиНастройкиФормы",);
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ТолькоВНаличии") Тогда
			ТолькоВНаличии = Настройки.ТолькоВНаличии;
		КонецЕсли;
		
		Если Настройки.Свойство("ТолькоСЦенами") Тогда
			ТолькоСЦенами = Настройки.ТолькоСЦенами;
		КонецЕсли;
		
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
		КонецЕсли;
		
		Если Настройки.Свойство("ВыборКонтрагента") Тогда
			ВыборКонтрагента = Настройки.ВыборКонтрагента;
		КонецЕсли;
		
		////Если Настройки.Свойство("ТипЦен") Тогда
		////	ТипЦен = Настройки.ТипЦен;
		////КонецЕсли;
		
		//Если Настройки.Свойство("Валюта") Тогда
		//	Валюта = Настройки.Валюта;
		//КонецЕсли;
		
		Если Настройки.Свойство("ВыборСклада") Тогда
			ВыборСклада = Настройки.ВыборСклада;
		КонецЕсли;
		
		Если Настройки.Свойство("МассивЗакладок") Тогда
			
			Для каждого Закладка ИЗ Настройки.МассивЗакладок Цикл
				ктсСоздатьЗакладку(Закладка.Наименование);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ДиапазонОтображенияЦен") Тогда
			ДиапазонОтображенияЦен = Настройки.ДиапазонОтображенияЦен;
		КонецЕсли; 
		
		//Если ПустаяСтрока(ВыборСклада) Тогда
		//	ВыборСклада = "Весь справочник номенклатура";
		//КонецЕсли;
		
		Если Настройки.Свойство("ВариантОтбора") Тогда
			
			ВариантыНавигации = Элементы.ВариантыНавигации;
			ЭлементыНавигации = ВариантыНавигации.ПодчиненныеЭлементы;
			
			ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияИерархияНоменклатуры;
			
			//Если Настройки.ВариантОтбора = 1 Тогда
			//	ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияВидыНоменклатуры;
			//ИначеЕсли Настройки.ВариантОтбора = 2 Тогда
			//	ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияИерархияНоменклатуры;
			//ИначеЕсли Настройки.ВариантОтбора = 3 Тогда
			//	ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияСегментыНоменклатуры;
			//ИначеЕсли Настройки.ВариантОтбора = 4 Тогда
			//	ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияАктуальностьНоменклатуры;
			//ИначеЕсли Настройки.ВариантОтбора = 5 Тогда
			//	ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияРодительНоменклатуры;
			//КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ОтображениеНоменклатуры") Тогда
			
			ТаблицаНоменклатурыНаФорме = Элементы.ПодборТаблицаНоменклатура;
			
			Если Настройки.ОтображениеНоменклатуры = 1 Тогда
				ТаблицаНоменклатурыНаФорме.Отображение = ОтображениеТаблицы.Дерево
			ИначеЕсли Настройки.ОтображениеНоменклатуры = 2 Тогда
				ТаблицаНоменклатурыНаФорме.Отображение = ОтображениеТаблицы.ИерархическийСписок;
			ИначеЕсли Настройки.ОтображениеНоменклатуры = 3 Тогда
				ТаблицаНоменклатурыНаФорме.Отображение = ОтображениеТаблицы.Список;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Валюта.Пустая() Тогда
		
		ВыборкаСправочника = Справочники.Валюты.Выбрать();
		ВыборкаСправочника.Следующий();
		Валюта = ВыборкаСправочника.Ссылка;
		
	КонецЕсли;
	
	
	ИнформационнаяНадписьОтборПоСвойствам = НСтр("ru = 'Отбор по свойствам не установлен'");	

	
	ПеречисленияНоменклатуры 	= Перечисления.ТипыНоменклатуры;
		
	
	ИспользоватьОтборПоИерархииНоменклатуры  = Истина;
	
	
	ИнформационнаяНадпись = НСтр("ru = 'Подобрано 0 позиций'");
	
	
	ИнфоНадписьНаКорзине = НСтр("ru = 'Для отображения корзины установить флажок ""Показать корзину""'");
	
	
	//Если ПоказыватьПодобранныеТовары Тогда
	//	Элементы.ГруппаСтраницыКорзины.ТекущаяСтраница = Элементы.ГруппаСтраницыКорзины.ПодчиненныеЭлементы.ГруппаСКорзиной;
	//Иначе
	//	Элементы.ГруппаСтраницыКорзины.ТекущаяСтраница = Элементы.ГруппаСтраницыКорзины.ПодчиненныеЭлементы.ПустаяГруппа;
	//КонецЕсли;
	
	ктсСформироватьСписокДокументов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ПоказыватьПодобранныеТовары",		ПоказыватьПодобранныеТовары);
	ПараметрыЗакрытия.Вставить("ТолькоВНаличии",    				ТолькоВНаличии);
	ПараметрыЗакрытия.Вставить("ТолькоСЦенами",     				ТолькоСЦенами);
	ПараметрыЗакрытия.Вставить("ВыборКонтрагента", 					Объект.Партнер);
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		ПараметрыЗакрытия.Вставить("ТипЦен", 							ВидЦены);
	КонецЕсли;
	ПараметрыЗакрытия.Вставить("ВыборСклада", 						ВыборСклада);
	ПараметрыЗакрытия.Вставить("Валюта", 							Валюта);
	ПараметрыЗакрытия.Вставить("ДиапазонОтображенияЦен",			ДиапазонОтображенияЦен);
	ПараметрыЗакрытия.Вставить("МассивЗакладок",					МассивЗакладок);
	
	
	ВариантыНавигации = Элементы.ВариантыНавигации;
	ЭлементыНавигации = ВариантыНавигации.ПодчиненныеЭлементы;
	
	Если ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияВидыНоменклатуры Тогда
		ПараметрыЗакрытия.Вставить("ВариантОтбора", 1);
	ИначеЕсли ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияИерархияНоменклатуры Тогда
		ПараметрыЗакрытия.Вставить("ВариантОтбора", 2);
	ИначеЕсли ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияСегментыНоменклатуры Тогда
		ПараметрыЗакрытия.Вставить("ВариантОтбора", 3);
	ИначеЕсли ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияАктуальностьНоменклатуры Тогда
		ПараметрыЗакрытия.Вставить("ВариантОтбора", 4);
	ИначеЕсли ВариантыНавигации.ТекущаяСтраница = ЭлементыНавигации.НавигацияРодительНоменклатуры Тогда
		ПараметрыЗакрытия.Вставить("ВариантОтбора", 5);
	КонецЕсли;
	
	
	ТаблицаНоменклатурыНаФорме = Элементы.ПодборТаблицаНоменклатура;
	
	Если ТаблицаНоменклатурыНаФорме.Отображение = ОтображениеТаблицы.Дерево Тогда
		ПараметрыЗакрытия.Вставить("ОтображениеНоменклатуры", 1);
	ИначеЕсли ТаблицаНоменклатурыНаФорме.Отображение = ОтображениеТаблицы.ИерархическийСписок Тогда
		ПараметрыЗакрытия.Вставить("ОтображениеНоменклатуры", 2);
	ИначеЕсли ТаблицаНоменклатурыНаФорме.Отображение = ОтображениеТаблицы.Список Тогда
		ПараметрыЗакрытия.Вставить("ОтображениеНоменклатуры", 3);
	КонецЕсли;
	
	
	ктсХранилищеОбщихНастроекСохранить("ПодборТоваровВДокументПродажиНастройкиФормы", , ПараметрыЗакрытия);
	
	
	Если ПеренестиВДокумент Тогда
		
		АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
		Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		ПеренестиВДокумент = Истина;
		ОповеститьОВыборе(Структура);
		
	КонецЕсли;
	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// НАВИГАЦИЯ

&НаКлиенте
Процедура ВариантОтбораПриИзменении()
	
	
	//ПолучитьКэшируемыеЗначения();
	
	
	// Удаление всех наложенных отборов.
	//ОтборТаблицыНоменклатура 	= ПодборТаблицаНоменклатура.Отбор;
	
	//ЭлементыОтбораНоменклатуры 	= ОтборТаблицыНоменклатура.Элементы;
	
	//ЭлементыОтбораНоменклатуры.Очистить();	
	
	// Доступность отбора по свойствам.
	//ВидыНоменклатурыНаформе 		= Элементы.ВидыНоменклатуры;
	//ТекущиеДанныеВидаНоменклатуры 	= ВидыНоменклатурыНаформе.ТекущиеДанные;
	//ВариантыНавигацииНаФорме		= Элементы.ВариантыНавигации;
	//ЭлементыНавигации				= ВариантыНавигацииНаФорме.ПодчиненныеЭлементы;
	//ОтборПоСвойствамНаФорме			= Элементы.ОтборПоСвойствам;
	//СнятьОтборПоСфойствамНаФорме	= Элементы.СнятьОтборПоСвойствам;
	//
	//Если (ТекущиеДанныеВидаНоменклатуры = Неопределено) ИЛИ ТекущиеДанныеВидаНоменклатуры.ЭтоГруппа ИЛИ (ВариантыНавигацииНаФорме.ТекущаяСтраница <> ЭлементыНавигации.НавигацияВидыНоменклатуры) Тогда
	//	ОтборПоСвойствамНаФорме.Доступность 		= Ложь;
	//	СнятьОтборПоСфойствамНаФорме.Доступность 	= Ложь;
	//Иначе
	//	ОтборПоСвойствамНаФорме.Доступность 		= Истина;
	//	СнятьОтборПоСфойствамНаФорме.Доступность 	= Истина;
	//КонецЕсли;
	//
	//СтруктураПеречисления 			= СтруктураКэшируемыеЗначения.Перечисления;
	//ПеречисленияТиповНоменклатуры 	= СтруктураПеречисления.ТипыНоменклатуры;
	//
	//// Список без групп.
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	//	ПодборТаблицаНоменклатура,
	//	"Номенклатура.ЭтоГруппа",
	//	Ложь,
	//	Истина, ВидСравненияКомпоновкиДанных.Равно
	//);
	//
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
	//	ПодборТаблицаНоменклатура,
	//	"Номенклатура.ТипНоменклатуры",
	//	ПеречисленияТиповНоменклатуры.Товар,
	//	РежимПодбораБезУслуг, ВидСравненияКомпоновкиДанных.Равно
	//);
	//
	//
	////ГруппаОтбораТолькоВНаличииНоменклатура = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
	////	ОтборТаблицыНоменклатура.Элементы,
	////	"ГруппаТолькоВНаличии",
	////	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	////);
	//
	////ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
	////	ГруппаОтбораТолькоВНаличииНоменклатура,
	////	"Номенклатура.ТипНоменклатуры",
	////	ПеречисленияТиповНоменклатуры.Услуга,
	////	ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Равно
	////);
	//
	//
	//// Только с ценами
	////ГруппаОтбораЦена = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
	////	ОтборТаблицыНоменклатура.Элементы,
	////	"ЦеныНоменклатуры",
	////	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	////);

	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
	//	ГруппаОтбораЦена,
	//	"Цена",
	//	0,
	//	ТолькоСЦенами, ВидСравненияКомпоновкиДанных.Больше
	//);
	//
	//
	//ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура, "СегментНоменклатуры", Неопределено, Ложь);
	//
	//
	//ВидыНоменклатурыНаФорме 		= Элементы.ВидыНоменклатуры;
	//ИерархияНоменклатурыНаФорме 	= Элементы.ИерархияНоменклатуры;
	//СегментыНоменклатурыНаФорме 	= Элементы.СегментыНоменклатуры;
	//АктуальностьНоменклатурыНаФорме = Элементы.АктуальностьНоменклутры;
	//РодительНоменклатурыНаФорме 	= Элементы.РодительНоменклатуры;
	//
	//ВидыНоменклатурыНаФорме.ТекущаяСтрока     			= Неопределено;
	//ИерархияНоменклатурыНаФорме.ТекущаяСтрока 			= Неопределено;
	//СегментыНоменклатурыНаФорме.ТекущаяСтрока 			= Неопределено;
	//АктуальностьНоменклатурыНаФорме.ТекущаяСтрока  		= Неопределено;
	//РодительНоменклатурыНаФорме.ТекущаяСтрока			= Неопределено;
	//
	//
	//ПерейтиКСпискуНоменклатурыНаКлиенте();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоВидуНоменклатуры(Команда)
	
	
	ВариантыНавигацииНаФорме 	= Элементы.ВариантыНавигации;
	ЭлементыНавигации 			= ВариантыНавигацииНаФорме.ПодчиненныеЭлементы;
	
	ВариантыНавигацииНаФорме.ТекущаяСтраница = ЭлементыНавигации.НавигацияВидыНоменклатуры;
	
	Заголовок = "Отбор: "+ Элементы.ВариантыНавигации.ТекущаяСтраница.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
	
	ВариантОтбораПриИзменении();
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоАктуальностиНоменклатуры(Команда)
	
	
	ВариантыНавигацииНаФорме 	= Элементы.ВариантыНавигации;
	ЭлементыНавигации 			= ВариантыНавигацииНаФорме.ПодчиненныеЭлементы;
	
	ВариантыНавигацииНаФорме.ТекущаяСтраница = ЭлементыНавигации.НавигацияАктуальностьНоменклатуры;
	 
	Заголовок = "Отбор: "+ Элементы.ВариантыНавигации.ТекущаяСтраница.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
	
	ВариантОтбораПриИзменении();
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоИерархииНоменклатуры(Команда)
	
	
	ВариантыНавигацииНаФорме 	= Элементы.ВариантыНавигации;
	ЭлементыНавигации 			= ВариантыНавигацииНаФорме.ПодчиненныеЭлементы;
	
	ВариантыНавигацииНаФорме.ТекущаяСтраница = ЭлементыНавигации.НавигацияИерархияНоменклатуры;
	
	Заголовок = "Отбор: "+ Элементы.ВариантыНавигации.ТекущаяСтраница.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
	
	ВариантОтбораПриИзменении();
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоСегментуНоменклатуры(Команда)
	
	
	ВариантыНавигацииНаФорме 	= Элементы.ВариантыНавигации;
	ЭлементыНавигации 			= ВариантыНавигацииНаФорме.ПодчиненныеЭлементы;
	
	ВариантыНавигацииНаФорме.ТекущаяСтраница = ЭлементыНавигации.НавигацияСегментыНоменклатуры;
	
	Заголовок = "Отбор: "+ Элементы.ВариантыНавигации.ТекущаяСтраница.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
	
	ВариантОтбораПриИзменении();
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтбораПоРодителюНоменклатуры(Команда)
	
	
	ВариантыНавигацииНаФорме 	= Элементы.ВариантыНавигации;
	ЭлементыНавигации 			= ВариантыНавигацииНаФорме.ПодчиненныеЭлементы;
	
	ВариантыНавигацииНаФорме.ТекущаяСтраница = ЭлементыНавигации.НавигацияРодительНоменклатуры;
	
	Заголовок = "Отбор: "+ Элементы.ВариантыНавигации.ТекущаяСтраница.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
	
	//ВариантОтбораПриИзменении();
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатуры(ГруппаНоменклатуры)
	
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура",
		ГруппаНоменклатуры,
		ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии
	);
	
	ПерейтиКСпискуНоменклатурыНаКлиенте();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ктсВыполнитьЗапрос();
	
КонецПроцедуры




&НаКлиенте
Процедура УстановитьОтборПоВидуНоменклатуры(ГруппаВидаНоменклатуры)

	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура.ВидНоменклатуры",
		ГруппаВидаНоменклатуры,
		ЗначениеЗаполнено(ГруппаВидаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии
	);	
	
	ПерейтиКСпискуНоменклатурыНаКлиенте();

	
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ктсВыполнитьЗапросВидыНоменклатуры(Неопределено);
		
	Иначе
		
		ктсВыполнитьЗапросВидыНоменклатуры(ТекущиеДанные.Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтборПоАктуальностиНоменклатуры(ГруппаНоменклатуры)
	
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура",
		ГруппаНоменклатуры,
		ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии
	);	
	
	ПерейтиКСпискуНоменклатурыНаКлиенте();
	
	
КонецПроцедуры

&НаКлиенте
Процедура Акту0альностьНоменклутрыПриАктивизацииСтроки(Элемент)
	
	
	АктуальностьНоменклатурыНаФорме = Элементы.АктуальностьНоменклутры;
	ТаблицаНоменклатурыНаФорме		= Элементы.ПодборТаблицаНоменклатура;
	
	
	УстановитьОтборПоАктуальностиНоменклатуры(АктуальностьНоменклатурыНаФорме.ТекущаяСтрока);
	
	
	ТаблицаНоменклатурыНаФорме.ТекущаяСтрока = 1;
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтборПоРодителюНоменклатуры(ГруппаНоменклатуры)
	
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"РодительНоменклатуры",
		ГруппаНоменклатуры,
		Истина, ВидСравненияКомпоновкиДанных.Равно
	);	
	
	ПерейтиКСпискуНоменклатурыНаКлиенте();
	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНоменклатурыПриАктивизацииСтроки(Элемент)
	
	
	РодительНоменклатурыНаФорме = Элементы.РодительНоменклатуры;
	ТаблицаНоменклатурыНаФорме	= Элементы.ПодборТаблицаНоменклатура;
	
	
	УстановитьОтборПоРодителюНоменклатуры(РодительНоменклатурыНаФорме.ТекущаяСтрока);
	
	
	ТаблицаНоменклатурыНаФорме.ТекущаяСтрока = 1;	
	
	
	ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтборПоСегментуНоменклатуры(ГруппаСегментов)	
	
	СегментыНоменклатурыНаФорме = Элементы.СегментыНоменклатуры;
	ТекущиеДанные = СегментыНоменклатурыНаФорме.ТекущиеДанные;
	
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатура, "СегментНоменклатуры", ГруппаСегментов, ЗначениеЗаполнено(ГруппаСегментов));
	
	ПерейтиКСпискуНоменклатурыНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура СегментыНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоСегментуНоменклатуры(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СегментыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	
	//СегментыНоменклатурыНаФорме = Элементы.СегментыНоменклатуры;
	//ТаблиуаНоменклатурыНаФорме	= Элементы.ПодборТаблицаНоменклатура;
	//
	//
	//УстановитьОтборПоСегментуНоменклатуры(СегментыНоменклатурыНаФорме.ТекущаяСтрока);
	//
	//
	//ТаблиуаНоменклатурыНаФорме.ТекущаяСтрока = 1;
	//
	//
	//ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры();
	
	
КонецПроцедуры



&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)	
		
	ктсВыполнитьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСЦенамиПриИзменении(Элемент)
	
	
	ОтборТаблицыНоменклатура = ПодборТаблицаНоменклатура.Отбор;
	
	ГруппаОтбораЦена = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОтборТаблицыНоменклатура.Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораЦена,
		"Цена",
		0,
		ТолькоСЦенами, ВидСравненияКомпоновкиДанных.Больше
	);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбораЦена,
		"МаксимальнаяЦенаХарактеристики",
		0,
		ТолькоСЦенами, ВидСравненияКомпоновкиДанных.Больше
	);
	
КонецПроцедуры



&НаКлиенте
Процедура ОтборПоСвойствам(Команда)

	
	ВидыНоменклатурыНаФорме 		= Элементы.ВидыНоменклатуры;
	ТекущияДанныеВидыНоменклатуры 	= ВидыНоменклатурыНаФорме.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидНоменклатуры", ТекущияДанныеВидыНоменклатуры.Ссылка);
	ПараметрыФормы.Вставить("ТекущийОтбор", ОтборПоСвойствам);
	
	
	ВыбранноеЗначение = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ОтборПоСвойствам", ПараметрыФормы, ЭтаФорма);
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		
		
		ОтборПоСвойствам 				= ВыбранноеЗначение;
		ОтборПоКатегориямНоменклатуры 	= ВыбранноеЗначение.ОтборПоКатегориям;
		ОтборПоВидамНоменклатуры        = ВыбранноеЗначение.ОтборПоВидамНоменклатуры;
		
		
		ИнформационнаяНадписьОтборПоСвойствам = НСтр("ru = 'Установлен отбор по свойствам: '");
		
		
		Если ОтборПоКатегориямНоменклатуры.Количество() > 0 Тогда
			
			ЗначенияСвойств = ОтборПоКатегориямНоменклатуры[0].ЗначенияСвойств;
			
			Для каждого Элемент Из ЗначенияСвойств Цикл
				ИнформационнаяНадписьОтборПоСвойствам = ИнформационнаяНадписьОтборПоСвойствам + " " + Элемент.Свойство + ": " + Элемент.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
		
		Если ОтборПоВидамНоменклатуры.Количество() > 0 Тогда
			
			ЗначенияСвойств = ОтборПоВидамНоменклатуры[0].ЗначенияСвойств;
			
			Для каждого Элемент Из ЗначенияСвойств Цикл
				ИнформационнаяНадписьОтборПоСвойствам = ИнформационнаяНадписьОтборПоСвойствам + " " + Элемент.Свойство + ": " + Элемент.Значение;
			КонецЦикла;
			
			
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				ВидыНоменклатуры,
				"Ссылка",
				ВыбранноеЗначение.ОтборПоВидамНоменклатуры[0].ВидНоменклатуры,
				Истина
			);
			
		КонецЕсли;
		
		ПодборТоваровКлиентСервер.УстановитьОтборПоВидамНоменклатуры(
			ВыбранноеЗначение.ОтборПоВидамНоменклатуры,
			ПодборТаблицаНоменклатура,
			//ПодборТаблицаХарактеристики
		);
		
		ПодборТоваровКлиентСервер.УстановитьОтборПоКатегориям(
			ВыбранноеЗначение.ОтборПоКатегориям,
			ПодборТаблицаНоменклатура,
			//ПодборТаблицаХарактеристики
		);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоСвойствам(Команда)
	
	
	ОтборПоСвойствам = Неопределено;
	ИнформационнаяНадписьОтборПоСвойствам = НСтр("ru = 'Отбор по свойствам не установлен'");
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоВидамНоменклатуры(
		Новый Массив,
		ПодборТаблицаНоменклатура,
		//ПодборТаблицаХарактеристики
	);
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоКатегориям(
		Новый Массив,
		ПодборТаблицаНоменклатура,
		//ПодборТаблицаХарактеристики
	);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ВидыНоменклатуры,
		"Ссылка",
		Неопределено,
		Ложь
	);
	
	
КонецПроцедуры



&НаКлиенте
Процедура НастройкаВидимостиПолейТаблицыНоменклатуры(Команда)
	
	
	ПодборТаблицаНоменклатураКодНаФорме 				= Элементы.ПодборТаблицаНоменклатураКод;
	ПодборТаблицаНоменклатураАртикулНаФорме 			= Элементы.ПодборТаблицаНоменклатураАртикул;
	ПодборТаблицаНоменклатураЕдиницаИзмерения 			= Элементы.ПодборТаблицаНоменклатураЕдиницаИзмерения;
	ПодборТаблицаНоменклатураСвободныйОстатокНаФорме 	= Элементы.ПодборТаблицаНоменклатураСвободныйОстаток;
	ПодборТаблицаНоменклатураНаСкладеВрезервеНаФорме 	= Элементы.ПодборТаблицаНоменклатураНаСкладеВрезерве;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Код",                 ПодборТаблицаНоменклатураКодНаФорме.Видимость);
	ПараметрыФормы.Вставить("Артикул", 	       ПодборТаблицаНоменклатураАртикулНаФорме.Видимость);
	ПараметрыФормы.Вставить("Упаковка", 	ПодборТаблицаНоменклатураЕдиницаИзмерения.Видимость);
	ПараметрыФормы.Вставить("Остаток", ПодборТаблицаНоменклатураСвободныйОстатокНаФорме.Видимость);
	ПараметрыФормы.Вставить("Резерв", ПодборТаблицаНоменклатураНаСкладеВрезервеНаФорме.Видимость);
	
	
	ВыбранныеПоля = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаНастройкиВидимосьтПолейТаблицаНоменклатуры", ПараметрыФормы, ЭтаФорма);
	
	
	Если ВыбранныеПоля <> Неопределено Тогда
		
		ПодборТаблицаНоменклатураКодНаФорме.Видимость 				= ВыбранныеПоля.Код;	
		ПодборТаблицаНоменклатураАртикулНаФорме.Видимость 			= ВыбранныеПоля.Артикул;
		ПодборТаблицаНоменклатураЕдиницаИзмерения.Видимость 		= ВыбранныеПоля.Упаковка;
		ПодборТаблицаНоменклатураСвободныйОстатокНаФорме.Видимость 	= ВыбранныеПоля.Остаток;
		ПодборТаблицаНоменклатураНаСкладеВрезервеНаФорме.Видимость 	= ВыбранныеПоля.Резерв;
		
	КонецЕсли;
	
	
КонецПроцедуры



&НаКлиенте
Процедура УсловноеОформлениеНоменклатуры(Команда)
	
	
	СписокНоменклатурыСтраницы = Элементы.СтраницыСписокНоменклатуры;
	ПодчиненныеЭлементыСтраниц = СписокНоменклатурыСтраницы.ПодчиненныеЭлементы;
	
	СписокНоменклатурыСтраницы.ТекущаяСтраница = ПодчиненныеЭлементыСтраниц.ГруппаНастройкиОформленияНоменклатуры;
	
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеХарактеристик(Команда)
	
	СписокНоменклатурыСтраницы = Элементы.СтраницыСписокНоменклатуры;
	ПодчиненныеЭлементыСтраниц = СписокНоменклатурыСтраницы.ПодчиненныеЭлементы;
	
	СписокНоменклатурыСтраницы.ТекущаяСтраница = ПодчиненныеЭлементыСтраниц.ГруппаНастройкиОформленияХарактеристик;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПЕРЕНОС В ДОКУМЕНТ

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	
	ОбъектКорзина = Объект.Корзина;
	Товары = ОбъектКорзина.Выгрузить();
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
	
КонецФункции

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	//ПеренестиВДокумент = Истина;
	//Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ПОДБОРА

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если 	Поле.Имя <> "ПодборТаблицаНоменклатураСвободныйОстаток"
	И 		Поле.Имя <> "ПодборТаблицаНоменклатураНаСкладеВРезерве" 
	И 		Поле.Имя <> "ПодборТаблицаНоменклатураОжыдаемыйТовар" 
	И		Поле.Имя <> "ПодборТаблицаНоменклатураЕдиницаИзмерения"
	И		Поле.Имя <> "ПодборТаблицаНоменклатураДатаПоследнегоПоступления" Тогда
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			СкладОтправитель 	= "";
			СкладПолучатель 	= "";
			
			СтандартнаяОбработка = Ложь;
			
			СтруктураПараметрыНоменклатуры = Новый Структура;
			СтруктураПараметрыНоменклатуры.Вставить("Код", ТекущиеДанные.Код);
			СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);					
			Если ЗначениеЗаполнено(ВидЦены) Тогда
				СтруктураПараметрыНоменклатуры.Вставить("ВидЦены", ВидЦены);
			КонецЕсли;
			СтруктураПараметрыНоменклатуры.Вставить("Цена", ТекущиеДанные.Цена);
			СтруктураПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
			СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ТекущиеДанные.Упаковка);
			
			ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, 1);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ПодборТаблицаНоменклатураСвободныйОстаток" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
					
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ОстаткиТоваровНаСкладах", ПараметрыФормы, ЭтаФорма, ПодборТекущаяНоменклатура);
		
	ИначеЕсли Поле.Имя = "ПодборТаблицаНоменклатураНаСкладеВРезерве" Тогда 
		
		СсылкаНаобработку = ктсПолучитьСсылкуНаОбработкуОтчет("СостояниеВыполненияЗаказовКлиентов");
		ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаНаобработку, Ложь);
		МассивДокументов = ПолучитьМассивЗаказов(ТекущиеДанные.Номенклатура);
		
		ФормаОтчета = ПолучитьФорму("ВнешнийОтчет.СостояниеВыполненияЗаказовКлиентов.Форма", 
			Новый Структура("Отбор,СформироватьПриОткрытии", Новый Структура("Заказ", МассивДокументов), Истина),
			,
			"Заказ=" + МассивДокументов,
			Неопределено
		);
		
		ФормаОтчета.Открыть();
		ФормаОтчета.Активизировать();
		
	ИначеЕсли Поле.Имя = "ПодборТаблицаНоменклатураОжыдаемыйТовар" Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.ОжыдаемыйТовар > 0 Тогда
				//глЗагружатьНоменклатуру = Ложь;
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
				ПараметрыФормы.Вставить("Склад", ВыборСклада);
				ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаОжыдаемыйТовар", ПараметрыФормы);
				//ТабличныйДокумент = ктсДокументОснованияОжыдания(ТекущиеДанные.Номенклатура, ВыборСклада);
				//ТабличныйДокумент.Показать();
			КонецЕсли;
						
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ПодборТаблицаНоменклатураЕдиницаИзмерения" Тогда
		
		Если ЗначениеЗаполнено(ВидЦены) Тогда
		
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
			ПараметрыФормы.Вставить("ВидЦены", ВидЦены);
			ПараметрыФормы.Вставить("Валюта", Валюта);
			ПараметрыФормы.Вставить("Склад", ВыборСклада);
			
			ФормаУпаковок = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаПоУпаковкам", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор());
			
			Результат = ФормаУпаковок.ОткрытьМодально();
			
			Если Результат <> Неопределено Тогда
				
				Результат.Вставить("ВидЦены", ВидЦены);
				
				ДобавитьВКорзину(Результат, 1);
				
			КонецЕсли;
			
		КонецЕсли;	
			
	ИначеЕсли Поле.Имя = "ПодборТаблицаНоменклатураДатаПоследнегоПоступления" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаПоследнегоПоступления) Тогда
			
			Регистратор = ПолучитьРегистраторПоследнегоПоступления(ТекущиеДанные.Номенклатура, ВыборСклада);
			Если Регистратор <> Неопределено Тогда
				
				ОткрытьЗначение(Регистратор);
							
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ПодключитьОбработчикОжидания("ОткрытьОкноПоступления", 0.1, Истина);

	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОкноПоступления()
	
	ОткритыеОкно = ПолучитьОкна();
				
	Для Каждого ОткрытоеОкно ИЗ ОткритыеОкно Цикл
		
		Если Найти(ОткрытоеОкно.Заголовок, "Поступление товаров и услуг") <> 0 ИЛИ Найти(ОткрытоеОкно.Заголовок, "Заказ поставщику") <> 0 Тогда
			
			ОткрытоеОкно.Активизировать();
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегистраторПоследнегоПоступления(НоменклатураСсылка, СкладСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрТоварыНаСкладах.Регистратор
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК РегистрТоварыНаСкладах
	|ГДЕ
	|	РегистрТоварыНаСкладах.Период В (
    |
	|			ВЫБРАТЬ
	|				МАКСИМУМ(ПЕРИОД) КАК Дата
	|			ИЗ
	|				РегистрНакопления.ТоварыНаСкладах
	|			ГДЕ
	|				(ТИПЗНАЧЕНИЯ(Регистратор.Распоряжение) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|			ИЛИ  ТИПЗНАЧЕНИЯ(Регистратор.Распоряжение) = ТИП(Документ.ЗаказПоставщику))
    |
	|			И Номенклатура = &Номенклатура)
	//|			И Склад = &Склад )
	|	И Номенклатура = &Номенклатура
	//|	И Склад = &Склад 
	|	
	|СГРУППИРОВАТЬ ПО
	|	РегистрТоварыНаСкладах.Регистратор";
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	//Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(СкладСсылка));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Возврат Выборка.Регистратор.Распоряжение;
		Иначе 
			Возврат Выборка.Регистратор;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПустыеСсылкиНаСправочники = СтруктураКэшируемыеЗначения.ПустыеСсылкиНаСправочники;
	СтруктураФункциональныеОпции = СтруктураКэшируемыеЗначения.ФункциональныеОпции;
	
	
	ПолучитьКэшируемыеЗначения();
	
	Если ТекущиеДанные.Характеристика = "..." Тогда
		
		ПерейтиКСпискуНоменклатурыНаКлиенте();
		
	Иначе
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		
		Если ТекущиеДанные.Характеристика <> Неопределено Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		КонецЕсли;
		
		Если  Элемент.ТекущиеДанные.Упаковка = Неопределено Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ПустыеСсылкиНаСправочники.УпаковкиНоменклатуры);
		Иначе
			Если СтруктураФункциональныеОпции.ИспользоватьУпаковкиНоменклатуры Тогда
				СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ТекущиеДанные.Упаковка);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Упаковка", ПустыеСсылкиНаСправочники.УпаковкиНоменклатуры);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметрыНоменклатуры.Вставить("ВидЦены", ВидЦены);
		СтруктураПараметрыНоменклатуры.Вставить("Цена", ТекущиеДанные.Цена);
				
		ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
		
	//ктсЗаполнитьПоляПодбора(Элемент.ТекущаяСтрока, Валюта, ВидЦены);
	ПодключитьОбработчикОжидания("ктсПоказатьКартинку", 0.5, Истина);
			
КонецПроцедуры

&НаКлиенте
Процедура ктсАктивизацияСтрокиТаблицыПодбораНоменклатуры()
		
	ТаблицаНоменклатураНаФорме 		= Элементы.ПодборТаблицаНоменклатура;
	ДополнительнаяИнформацияНаФорме = Элементы.ГруппаДополнительнаяИнформация;	
	
	Если ТаблицаНоменклатураНаФорме.ТекущиеДанные <> Неопределено Тогда
		
		ДополнительнаяИнформацияНаФорме.Доступность = Истина;
		
		ТекущиеДанныеНоменклатуры = ТаблицаНоменклатураНаФорме.ТекущиеДанные;
		ПодборТекущаяНоменклатура = ТекущиеДанныеНоменклатуры.Номенклатура;
		
		ПолучитьКэшируемыеЗначения();
		
		СтруктураПеречислений 					= СтруктураКэшируемыеЗначения.Перечисления;
		ВариантыВведенияДополнительныхДанных    = СтруктураПеречислений.ВариантыВеденияДополнительныхДанныхПоНоменклатуре;
				
		Если ТекущиеДанныеНоменклатуры.Номенклатура <> Неопределено Тогда
			КартинкаНоменклатуры = ктсПолучитьАдрессКартинкиНоменклатуры(ТекущиеДанныеНоменклатуры.Номенклатура, УникальныйИдентификатор);
			//ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(ДополнительныеХарактеристики, "Номенклатура", ТекущиеДанныеНоменклатуры.Номенклатура, Истина);
		КонецЕсли;
		
	Иначе
		
		ДополнительнаяИнформацияНаФорме.Доступность = Ложь;
		КартинкаНоменклатуры = "";
		//ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(ДополнительныеХарактеристики, "Номенклатура", Неопределено, Истина);
		
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура ктсЗаполнитьПоляПодбора(ИндексТекущейСтроки, ВалютаЦен, ВидЦен)

	МассивНоменклатуры	= Новый Массив;
	МассивСтрок			= Новый Массив;
	ТаблицаНоменклатуры = Элементы.ПодборТаблицаНоменклатура;
	ТекущаяСтрока		= ИндексТекущейСтроки;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = 0;
	КонецЕсли;
	
	Для Инд = Окр(ДиапазонОтображенияЦен/2, 1)*(-1) По Окр(ДиапазонОтображенияЦен/2, 1) Цикл
		
		ИндексСтрокиДанных 	= ТекущаяСтрока + Инд;
		СтрокаДанных 		= ТаблицаНоменклатуры.ДанныеСтроки(ИндексСтрокиДанных);
		
		Если СтрокаДанных = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		МассивСтрок.Добавить(СтрокаДанных);
		
		МассивНоменклатуры.Добавить(СтрокаДанных.Номенклатура); 
	
	КонецЦикла;  
	
	СтруктураСПараметрами = ктсПолучитьСписокСоответствий(МассивНоменклатуры, ВидЦен, ВалютаЦен);
	ПараметрыНоменклатуры = ктсПолучитьЦеныНоменклатуры(МассивНоменклатуры, ВидЦен, ВалютаЦен,);
	
	Для каждого Строка Из МассивСтрок Цикл
		
		Строка.Цена 						= ПараметрыНоменклатуры[Строка.Номенклатура];		
		//Строка.ЕдиницаИзмерения				= СтруктураСПараметрами.СоответствиеИзЦенами[Строка.Номенклатура].ЕдиницаИзмерения;
		//Строка.Упаковка						= СтруктураСПараметрами.СоответствиеИзЦенами[Строка.Номенклатура].Упаковка;
		
		Строка.Гарантия 					= СтруктураСПараметрами.СоответсвиеИзГарантией[Строка.Номенклатура];
		//Строка.ДатаПоследнегоПоступления 	= СтруктураСПараметрами.СоотвествиеСДатами[Строка.Номенклатура];
		//Если СтруктураСПараметрами.СоответсвиеСОжыданием.Получить(Строка.Номенклатура) <> Неопределено Тогда
		//	Строка.ОжыдаемыйТовар			= СтруктураСПараметрами.СоответсвиеСОжыданием[Строка.Номенклатура]
		//КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры
 

&НаКлиенте
Процедура ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, Количество)
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
	
		ОбектКорзина = Объект.Корзина;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметрыНоменклатуры.Номенклатура);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения", СтруктураПараметрыНоменклатуры.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("Упаковка", СтруктураПараметрыНоменклатуры.Упаковка);
		
		РезультатПоиска = ОбектКорзина.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ТекущаяСтрока = ОбектКорзина.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметрыНоменклатуры);
			
		Иначе
			
			ТекущаяСтрока = РезультатПоиска[0];
			
		КонецЕсли;
		
		ТекущаяСтрока.Количество 	= Количество + ТекущаяСтрока.Количество;
		ТекущаяСтрока.Сумма 		= ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
		ТекущаяСтрока.СерийныйНомер	= ИспользоватьСН(СтруктураПараметрыНоменклатуры.Номенклатура);
		
		Остаток = 0;
		СписокНоменклатурыНаФорме 				= Элементы.СтраницыСписокНоменклатуры;
		ПодчиненныеЭлементыСпискаНоменклатуры   = СписокНоменклатурыНаФорме.ПодчиненныеЭлементы;
		
		ТаблицаНоменклатураНаФорме 			= Элементы.ПодборТаблицаНоменклатура;
		ТекущиеДанныеТаблицыНоменклатуры    = ТаблицаНоменклатураНаФорме.ТекущиеДанные;	
		
		ПараметрыНоменклатуры = Неопределено;
		Остаток = 0;
		Попытка
		Если ктсТипНоменклатурыТовар(ТекущаяСтрока.Номенклатура) Тогда
			
			ПараметрыНоменклатуры = ктсПолучитьОстатокПоСсылке(ТекущаяСтрока.Номенклатура, ВыборСклада, ВидЦены, Валюта, ТекущаяСтрока.Упаковка);
			Если ПараметрыНоменклатуры <> Неопределено Тогда
				Остаток = ПараметрыНоменклатуры.СвободныйОстаток;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Остаток >= ТекущаяСтрока.Количество ИЛИ НЕ ктсТипНоменклатурыТовар(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.ИндексКартинки = 0;
		Иначе
			ТекущаяСтрока.ИндексКартинки = 1;
		КонецЕсли;
		
		Исключение
		КонецПопытки;
		
		// Активизируем текущую строку табличной части
		ЭлементКорзина 					= Элементы.Корзина;
		ЭлементКорзина.ТекущаяСтрока 	= ТекущаяСтрока.ПолучитьИдентификатор();
		
		КорзинаПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьСН(НоменклатураСсылка)
	
	Возврат НоменклатураСсылка.ИспользоватьСерийныеНомера;
	
КонецФункции

&НаКлиенте
Процедура КорзинаКоличествоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
	
		ПолучитьКэшируемыеЗначения();
		
		ЭлементКорзина 		= Элементы.Корзина;
		ТекущиеДанные 		= ЭлементКорзина.ТекущиеДанные;
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
		
		СтруктураПеречисления 					= СтруктураКэшируемыеЗначения.Перечисления;
		ПеречисленияТиповНоменклатуры 			= СтруктураПеречисления.ТипыНоменклатуры;
			
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			Попытка
			Если ктсТипНоменклатурыТовар(ТекущиеДанные.Номенклатура) Тогда
				
				ПараметрыНоменклатуры = ктсПолучитьОстатокПоСсылке(ТекущиеДанные.Номенклатура, ВыборСклада, ВидЦены, Валюта, ТекущиеДанные.Упаковка);
				
				ТекущийОстаток = 0;
				Если ПараметрыНоменклатуры <> Неопределено Тогда
				
					ТекущийОстаток = ПараметрыНоменклатуры.СвободныйОстаток;
					
				КонецЕсли;
				
				Если ТекущиеДанные.Количество > ТекущийОстаток Тогда
					ТекущиеДанные.ИндексКартинки = 1;
				Иначе
					ТекущиеДанные.ИндексКартинки = 0;
				КонецЕсли;
			Иначе
				ТекущиеДанные.ИндексКартинки = 0;
			КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		КорзинаПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении()
		
	ОбъектКорзина = Объект.Корзина;	
			
	ИнформационнаяНадпись = НСтр("ru = 'Сумма %Сумма% %Валюта%'");
	//ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", Формат(ОбъектКорзина.Итог("Сумма"), "ЧДЦ=2"));
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);	
	
КонецПроцедуры

&НаКлиенте
Процедура ктсПоказатьКартинку()
	
	ТаблицаНоменклатураНаФорме 	= Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанныеНоменклатуры 	= ТаблицаНоменклатураНаФорме.ТекущиеДанные;
	
	Если ТекущиеДанныеНоменклатуры <> Неопределено Тогда
		
		//КартинкаНоменклатуры = ктсПолучитьАдрессКартинкиНоменклатуры(ТекущиеДанныеНоменклатуры.Номенклатура, УникальныйИдентификатор);
		//ВходнаяЦена = ктсПолучитьВходнуюЦену(ТекущиеДанныеНоменклатуры.Номенклатура, ВыборСклада);
		//ДатаОжиданияТовара = ктсПолучитьДатуПоступления(ТекущиеДанныеНоменклатуры.Номенклатура, ВыборСклада);
		СтруктураЗаполнения = ктсПеренаправитьВыделениеСтрокиНаСервер(ТекущиеДанныеНоменклатуры.Номенклатура, ВыборСклада, УникальныйИдентификатор);
		
		КартинкаНоменклатуры = СтруктураЗаполнения.КартинкаНоменклатуры;
		ВходнаяЦена = СтруктураЗаполнения.ВходнаяЦена;
		ДатаОжиданияТовара = СтруктураЗаполнения.ДатаОжиданияТовара;
		
		Если ВходнаяЦена = Неопределено Тогда
			СебестоимостьЦена = "";
		Иначе
			СебестоимостьЦена = ВходнаяЦена.Цена + " " + "USD";
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ПОДБОРА

&НаКлиенте
Процедура ПерейтиКСпискуНоменклатурыНаКлиенте()
	
	СписокНоменклатурыНаФорме 					= Элементы.СтраницыСписокНоменклатуры;
	ПодчиненныеЭлементыСпискаНоменклатуры 		= СписокНоменклатурыНаФорме.ПодчиненныеЭлементы;
	СписокНоменклатурыНаФорме.ТекущаяСтраница 	= ПодчиненныеЭлементыСпискаНоменклатуры.ГруппаНоменклатура;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПодборТаблицаНоменклатура; // Обход ошибки программного переключения страниц
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатуры(Команда)
	
	ПерейтиКСпискуНоменклатурыНаКлиенте();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОИСК

&НаСервереБезКонтекста
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = ""; 
	ПодборТоваров = Обработки.ПодборТоваровВДокументПродажи;
	РезультатПоиска = ПодборТоваров.ПоискТоваров(СтрокаПоиска, ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура ОстаткиНаСкладах(Команда)
	
	ЭлПодборТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлПодборТаблицаНоменклатура.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ПолучитьКэшируемыеЗначения();
	
	СтруктураФункциональныеОпции 	= СтруктураКэшируемыеЗначения.ФункциональныеОпции;
	СписокНоменклатурыНаФорме 		= Элементы.СтраницыСписокНоменклатуры;
	ПодчиненныеЭлементыНоменклатуры = СписокНоменклатурыНаФорме.ПодчиненныеЭлементы;
	//ТаблицаХарактеристикиНаФорме	= Элементы.ПодборТаблицаХарактеристики;
	//ТекущиеДанныеХарактеристик		= ТаблицаХарактеристикиНаФорме.ТекущиеДанные;
	ПустиеСсылкиНаСправочники		= СтруктураКэшируемыеЗначения.ПустыеСсылкиНаСправочники;
	
	//Если (Не СтруктураФункциональныеОпции.ИспользоватьХарактеристикиНоменклатуры)
	//	ИЛИ СписокНоменклатурыНаФорме.ТекущаяСтраница = ПодчиненныеЭлементыНоменклатуры.ГруппаНоменклатура
	//	//ИЛИ ТаблицаХарактеристикиНаФорме.ТекущиеДанные = Неопределено 
	//	Тогда
	//	ПараметрыФормы.Вставить("Характеристика", ПустиеСсылкиНаСправочники.ХарактеристикиНоменклатуры);
	//Иначе
	//	ПараметрыФормы.Вставить("Характеристика", ТекущиеДанныеХарактеристик.Характеристика);
	//КонецЕсли;
	
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ОстаткиТоваровНаСкладах", ПараметрыФормы, ЭтаФорма, ПодборТекущаяНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатуры(Команда)
	
	ЭлПодборТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлПодборТаблицаНоменклатура.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	ПолучитьКэшируемыеЗначения();
	
	СтруктураФункциональныеОпции 	= СтруктураКэшируемыеЗначения.ФункциональныеОпции;
	СписокНоменклатурыНаФорме 		= Элементы.СтраницыСписокНоменклатуры;
	ПодчиненныеЭлементыНоменклатуры = СписокНоменклатурыНаФорме.ПодчиненныеЭлементы;
	//ТаблицаХарактеристикиНаФорме	= Элементы.ПодборТаблицаХарактеристики;
	//ТекущиеДанныеХарактеристик		= ТаблицаХарактеристикиНаФорме.ТекущиеДанные;
	ПустиеСсылкиНаСправочники		= СтруктураКэшируемыеЗначения.ПустыеСсылкиНаСправочники;
	
	//Если (Не СтруктураФункциональныеОпции.ИспользоватьХарактеристикиНоменклатуры)
	//	ИЛИ СписокНоменклатурыНаФорме.ТекущаяСтраница = ПодчиненныеЭлементыНоменклатуры.ГруппаНоменклатура
	//	ИЛИ ТаблицаХарактеристикиНаФорме.ТекущиеДанные = Неопределено Тогда
	//	ПараметрыФормы.Вставить("Характеристика", ПустиеСсылкиНаСправочники.ХарактеристикиНоменклатуры);
	//Иначе
	//	ПараметрыФормы.Вставить("Характеристика", ТекущиеДанныеХарактеристик.Характеристика);
	//КонецЕсли;
	
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ЦеныНоменклатуры", ПараметрыФормы, ЭтаФорма, ПодборТекущаяНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПодбора(Команда)
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.НастройкиПодбора", , ЭтаФорма);
	Если Результат <> Неопределено Тогда
		
		ИспользоватьПолнотекстовыйПоиск          = Результат.ИспользоватьПолнотекстовыйПоиск;
		
		ПодборПоискНеУдачный = Ложь;
		
		ВариантОтбораПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Сигнал();
	ОтветНаВопрос = Вопрос(НСтр("ru = 'Вы действительно хотите закрыть ""Рабочее место менеджера""?'"), РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПодобранныеТоварыПриИзменении(Элемент)
	
	
	КорзинаНаФорме 				= Элементы.ГруппаСтраницыКорзины;
	ПодчиненныеЭЛементыКорзины 	= КорзинаНаФорме.ПодчиненныеЭлементы;
	
	Если ПоказыватьПодобранныеТовары Тогда
		КорзинаНаФорме.ТекущаяСтраница = ПодчиненныеЭЛементыКорзины.ГруппаСКорзиной;
	Иначе
		КорзинаНаФорме.ТекущаяСтраница = ПодчиненныеЭЛементыКорзины.ПустаяГруппа;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяКонтрагента = "Долг контрагента";
	КартинкаНоменклатурыНаФорме = Элементы.КартинкаНоменклатуры;
	КартинкаНоменклатурыНаФорме.РазмерКартинки = РазмерКартинки.Пропорционально;
	
	ВариантыНавигацииНаФорме = Элементы.ВариантыНавигации;
	ТекущаяСтраницаНавигации = ВариантыНавигацииНаФорме.ТекущаяСтраница;
	Заголовок = "Отбор: "+ ТекущаяСтраницаНавигации.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
	Если ДиапазонОтображенияЦен = 0 ИЛИ ДиапазонОтображенияЦен = Неопределено Тогда
	
		ДиапазонОтображенияЦен = 20;
	
	КонецЕсли; 
	
	Настройки = ктсХранилищеОбщихНастроекЗагрузить("ПодборТоваровВДокументПродажиНастройкиФормы",);
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("МассивЗакладок") Тогда
			
			МассивЗакладок = Настройки.МассивЗакладок; 
			
		Иначе
			
			МассивЗакладок = Новый Массив;	
		
		КонецЕсли; 
	
	Иначе
		
		МассивЗакладок = Новый Массив;
		
	КонецЕсли; 
	
	глЗагружатьНоменклатуру = Ложь;
	
	глОтбражатьВходнуюЦену = Истина;
	
	СерийныеНомераКорзины = Новый Соответствие;
	
	
	СписокГруппИзменения = "";
	Если ЗагрузитьНоменклатуруПриСтарте(СписокГруппИзменения) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокГрупп", СписокГруппИзменения);
		
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаЗагрузкиИзмененныхЦен", ПараметрыФормы);
		Если Результат <> Неопределено Тогда
			ДатаСравненияЦен = НачалоДня(НачалоДня(ТекущаяДата())-1);
			ктсЗагрузитьНоменклатуру(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры



&НаСервере
Функция ЗагрузитьНоменклатуруПриСтарте(СписокГрупп)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверитьДатуЗапуска() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если ПроверитьПрофили() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьНоменклатуруНаИзменениеЦены(СписокГрупп) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьДатуЗапуска()
	
	ДатаНачалаДня 		= НачалоДня(ТекущаяДата());
	ДатаТекущая			= ТекущаяДата();
	РазницаДат			= ДатаТекущая - ДатаНачалаДня;
	
	КоличествоСекунд    = 9*60*60 + 30*60;
	
	Если ДатаТекущая - ДатаНачалаДня > КоличествоСекунд Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПроверитьПрофили()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПрофилей = Новый Массив;
	МассивПрофилей.Добавить("Продавець");
	МассивПрофилей.Добавить("Касир-продавець");
	МассивПрофилей.Добавить("Старший продавець");
	МассивПрофилей.Добавить("Керівник магазину");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка КАК ГруппаДоступа,
	|	ГруппыДоступа.Ссылка.Наименование КАК Наименование,
	|	ГруппыДоступа.Ссылка.Профиль.Наименование КАК ПрофильНаименование,
	|	ГруппыДоступа.Ссылка.Описание КАК Описание,
	|	ГруппыДоступа.Ссылка.Администратор КАК Администратор
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ГруппыДоступа.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ПользователиГруппДоступа
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыПользователей
	|				ПО ПользователиГруппДоступа.Пользователь = ГруппыПользователей.ГруппаДоступа
	|					И (ГруппыПользователей.ЗначениеДоступа = &Пользователь)
	|					И (ТИПЗНАЧЕНИЯ(&Пользователь) = ТИП(Справочник.Пользователи)
	|						ИЛИ ТИПЗНАЧЕНИЯ(&Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|						ИЛИ ГруппыПользователей.ГруппаДоступа = &Пользователь)
	|			ПО ГруппыДоступа.Ссылка = ПользователиГруппДоступа.Ссылка
	|				И ((НЕ ГруппыДоступа.ПометкаУдаления))
	|				И ((НЕ ГруппыДоступа.Профиль.ПометкаУдаления))) КАК ГруппыДоступа
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыДоступа.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПрофилейПользователя = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрофильНаименование");
	
	Для Каждого Профиль ИЗ МассивПрофилей Цикл
		
		РезультатПоиска = МассивПрофилейПользователя.Найти(Профиль);
		Если РезультатПоиска <> Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьНоменклатуруНаИзменениеЦены(СписокГрупп)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатуры.Номенклатура.Родитель                      КАК Группа
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних() КАК ЦеныНоменклатуры
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(," + ?(ПустаяСтрока(ВыборСклада), "", " Склад В (&ПараметрСклад)") + ") КАК ТоварыНаСкладахОстатки
	|ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатуры.Номенклатура

	|ГДЕ
	|	ЦеныНоменклатуры.Период 							>= &ДатаСравненияЦен
	|И	ЦеныНоменклатуры.ВидЦены 							= &ТипЦен
	|И	ЦеныНоменклатуры.Валюта								= &Валюта
	|И	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)	> 0

	|СГРУППИРОВАТЬ ПО
	|	(ЦеныНоменклатуры.Номенклатура.Родитель)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.Номенклатура.Родитель.Наименование";
	
	Запрос.УстановитьПараметр("ДатаСравненияЦен", НачалоДня(НачалоДня(ТекущаяДата())-1));
	Запрос.УстановитьПараметр("ТипЦен", ВидЦены);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Если НЕ ПустаяСтрока(ВыборСклада) Тогда
		Запрос.УстановитьПараметр("ПараметрСклад", Справочники.Склады.НайтиПоНаименованию(ВыборСклада));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивГрупп = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Группа");
	
	СписокГрупп = "";
	
	Для Каждого Группа ИЗ МассивГрупп Цикл
		
		СписокГрупп = СписокГрупп + Группа.Наименование + Символы.ВК;
		
	КонецЦикла;
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции



&НаКлиенте
Процедура ВыборСкладаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ктсСформироватьСписокВыбораСправочника(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладаПриИзменении(Элемент)
	
	ктсВыполнитьЗапрос();
	
	ВариантыНавигацииНаФорме = Элементы.ВариантыНавигации;
	ТекущаяСтраницаНавигации = ВариантыНавигацииНаФорме.ТекущаяСтраница;
	Заголовок = "Отбор: "+ ТекущаяСтраницаНавигации.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
	
		ктсИзменитьВидыЦенВКорзине(ВидЦены);
		//ТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
		//ктсЗаполнитьПоляПодбора(ТаблицаНоменклатура.ТекущаяСтрока, Валюта, ВыбранноеЗначение); 
		ктсВыполнитьЗапрос();
		
		ВариантыНавигацииНаФорме = Элементы.ВариантыНавигации;
		ТекущаяСтраницаНавигации = ВариантыНавигацииНаФорме.ТекущаяСтраница;
		Заголовок = "Отбор: "+ ТекущаяСтраницаНавигации.Заголовок;
		Заголовок = Заголовок + "   Склад: " + ВыборСклада;
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
		КонецЕсли;
		Заголовок = Заголовок + "   Валюта: " + Валюта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаНоменклатурыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТаблицаНоменклатураНаФорме = Элементы.ПодборТаблицаНоменклатура;
	
	Если ТаблицаНоменклатураНаФорме.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанныеНоменклатуры = ТаблицаНоменклатураНаФорме.ТекущиеДанные;
		
		ФормаПросмотраКартинки = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаКартинки", , ЭтаФорма);
		ФормаПросмотраКартинки.Заголовок = ТекущиеДанныеНоменклатуры.Номенклатура;
		ФормаПросмотраКартинки.Картинка = КартинкаНоменклатуры;
		ФормаПросмотраКартинки.ВладелецФайла = ТекущиеДанныеНоменклатуры.Номенклатура;
		
		Результат = ФормаПросмотраКартинки.ОткрытьМодально();
		
		Если НЕ ПустаяСтрока(Результат) Тогда
			КартинкаНоменклатуры = Результат;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
 
	//ТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	//ктсЗаполнитьПоляПодбора(ТаблицаНоменклатура.ТекущаяСтрока, ВыбранноеЗначение, ВидЦены);   
	ктсВыполнитьЗапрос();
	
	ВариантыНавигацииНаФорме = Элементы.ВариантыНавигации;
	ТекущаяСтраницаНавигации = ВариантыНавигацииНаФорме.ТекущаяСтраница;
	Заголовок = "Отбор: "+ ТекущаяСтраницаНавигации.Заголовок;
	Заголовок = Заголовок + "   Склад: " + ВыборСклада;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Заголовок = Заголовок + "   Тип цены: " + ВидЦены;
	КонецЕсли;
	Заголовок = Заголовок + "   Валюта: " + Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ктсПерещитатьЦеныВКорзине(ТекущаяВалюта, НоваяВалюта)
	
	ОбъектКорзина = Объект.Корзина;
	
	Если ОбъектКорзина.Количество() > 0 Тогда
				
		ВалютныйКоефициент = ктсПолучитьКоефициентВалют(ТекущаяВалюта, НоваяВалюта);
		
		Для Каждого Строка ИЗ ОбъектКорзина Цикл
			
			Строка.Цена = Строка.Цена * ВалютныйКоефициент;
			Строка.Сумма = Строка.Сумма * ВалютныйКоефициент;
			
		КонецЦикла;
				
		ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", НоваяВалюта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ктсОбработкаСтрокиНаименованияЗакладкиКлиент(НаименованиеЗакладки)
	
	Закладка 		= НРег(НаименованиеЗакладки);
	МассивЗамены    = Новый Массив;
	
	Для Инд = 1 По СтрДлина(Закладка) Цикл
	
		КодСимволаСтроки = КодСимвола(Закладка, Инд);
		// Украинський и русский алфавиты
		Если КодСимволаСтроки > 1071 И КодСимволаСтроки < 1104 Тогда
		
			Продолжить;
			
		КонецЕсли;
		// Английський алфавит
		Если КодСимволаСтроки > 96 И КодСимволаСтроки < 123 Тогда
		
			Продолжить;
		
		КонецЕсли;
		// Буква ё
		Если КодСимволаСтроки = 1105 Тогда
		
			Продолжить;
		
		КонецЕсли;
		// Цыфри
		//Если КодСимволаСтроки > 47 И КодСимволаСтроки < 58 Тогда
		//
		//	Продолжить;
		//
		//КонецЕсли;
		// Буквы ї і ґ запрещены
		МассивЗамены.Добавить(Символ(КодСимволаСтроки));
			
	КонецЦикла; 
	
	Для каждого СимволДляЗамены Из МассивЗамены Цикл
	
		Закладка = СтрЗаменить(Закладка, СимволДляЗамены, "");
	
	КонецЦикла; 
	
	Возврат Закладка;
	
КонецФункции

&НаКлиенте
Процедура ктсИзменитьВидыЦенВКорзине(НовыйВидЦен)
	
	МассивНоменклатуры 	= Новый Массив;
	ОбъектКорзина		= Объект.Корзина;
	
	Если ОбъектКорзина.Количество() > 0 Тогда
	
		Для Каждого Строка Из ОбъектКорзина Цикл
		
			МассивНоменклатуры.Добавить(Строка.Номенклатура);
		
		КонецЦикла;
		
		//НовыеЦеныНоменклатуры = ктсПолучитьЦеныНоменклатуры(МассивНоменклатуры, НовыйВидЦен, Валюта);
		
		Для Каждого Строка Из ОбъектКорзина Цикл
			
			Если Строка.ИзменятьВидЦены Тогда
				ПараметрыНоменклатуры = ктсПолучитьОстатокПоСсылке(Строка.Номенклатура, ВыборСклада, НовыйВидЦен, Валюта, Строка.Упаковка);
				Строка.ВидЦены = НовыйВидЦен;
				Строка.Цена = ПараметрыНоменклатуры.Цена;
				Строка.Сумма = Строка.Цена * Строка.Количество;
			КонецЕсли;
		
		КонецЦикла;

		ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ктсМассивНоменклатурыПоВыделеннымСтрокам()
	
	МассивНоменклатуры 		= Новый Массив;
	ЭлПодборНоменклатуры 	= Элементы.ПодборТаблицаНоменклатура;
	ВыделенныеСтроки 		= ЭлПодборНоменклатуры.ВыделенныеСтроки;
	
	Для Каждого ИндексСтроки ИЗ ВыделенныеСтроки Цикл
		СтрокаТаблицы = ЭлПодборНоменклатуры.ДанныеСтроки(ИндексСтроки);
		МассивНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
	КонецЦикла;
	
	Возврат МассивНоменклатуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КНОПОК

&НаКлиенте
Процедура ОформитьПоступление(Команда)
	
	УникальныйИдентификаторДляФормы = Строка(ТекущаяДата()) + Строка(УникальныйИдентификатор);
	
	ОбъектКорзина = Объект.Корзина;
	
	Если ОбъектКорзина.Количество() > 0 Тогда
	
		ФормаДокумента = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта",,,УникальныйИдентификаторДляФормы,);
		ОбъектФормыДокумента = ФормаДокумента.Объект;
		
		
		ОбъектФормыДокумента.Дата = ТекущаяДата();
		
		
		КоефициентВалют = Неопределено;
		
		
		ПараметрыКонтрагента = ктсПолучитьПарметрыПоставщика(Объект.Партнер);
		
		Если ПараметрыКонтрагента <> Неопределено Тогда
			
			Если ПараметрыКонтрагента.Партнер <> Неопределено Тогда
				ОбъектФормыДокумента.Партнер = ПараметрыКонтрагента.Партнер;
				ОбъектФормыДокумента.Контрагент = Объект.Партнер;
			КонецЕсли;
			
			Если ПараметрыКонтрагента.Соглашение <> Неопределено Тогда
				ОбъектФормыДокумента.Соглашение = ПараметрыКонтрагента.Соглашение;
			КонецЕсли;
			
			Если ПараметрыКонтрагента.Организация <> Неопределено Тогда
				ОбъектФормыДокумента.Организация = ПараметрыКонтрагента.Организация;
			КонецЕсли;
			
			Если ПараметрыКонтрагента.Склад <> Неопределено Тогда
				ОбъектФормыДокумента.Склад = ПараметрыКонтрагента.Склад;
			Иначе
				Если ТипЗнч(ВыборСклада) = Тип("СправочникСсылка.Склады") Тогда
					ОбъектФормыДокумента.Склад = ВыборСклада;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыКонтрагента.Валюта <> Неопределено Тогда
				ОбъектФормыДокумента.Валюта = ПараметрыКонтрагента.Валюта;
				ОбъектФормыДокумента.ВалютаВзаиморасчетов = ПараметрыКонтрагента.Валюта;
				КоефициентВалют = ктсПолучитьКоефициентВалют(Валюта, ПараметрыКонтрагента.Валюта);
			Иначе
				ОбъектФормыДокумента.Валюта = Валюта;
				ОбъектФормыДокумента.ВалютаВзаиморасчетов = Валюта;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ВыборСклада) = Тип("СправочникСсылка.Склады") Тогда
				ОбъектФормыДокумента.Склад = ВыборСклада;
			КонецЕсли;
			
			ОбъектФормыДокумента.Валюта = Валюта;
			ОбъектФормыДокумента.ВалютаВзаиморасчетов = Валюта;
			
		КонецЕсли;
		
		Для Каждого Строка ИЗ Объект.Корзина Цикл
			
			НоваяСтрока 					= ОбъектФормыДокумента.Товары.Добавить();
			НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
			НоваяСтрока.Характеристика 		= Строка.Характеристика;
			НоваяСтрока.КоличествоУпаковок 	= Строка.Количество;
			НоваяСтрока.Количество 			= Строка.Количество;
			НоваяСтрока.Упаковка 			= Строка.Упаковка;
			
			Если КоефициентВалют <> Неопределено Тогда
				НоваяСтрока.Цена 	= Строка.Цена * КоефициентВалют;
				НоваяСтрока.Сумма 	= Строка.Сумма * КоефициентВалют;
			Иначе 
				НоваяСтрока.Цена 	= Строка.Цена;
				НоваяСтрока.Сумма	= Строка.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		ФормаДокумента.Открыть();
		
	Иначе
		
		ФормаДокумента = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта",,,УникальныйИдентификаторДляФормы,);
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщику(Команда)
	
	
	ОбъектКорзина = Объект.Корзина;
	
	Если ОбъектКорзина.Количество() > 0 Тогда
		
		ПолучитьКэшируемыеЗначения();
		
		ИнформацияОСвободныхОстатках = ктсОбработкаСвободногоОстатка();
		Инд = 0;
		СтруктураПеречисления 		= СтруктураКэшируемыеЗначения.Перечисления;
		СтруктураТиповНоменклатуры 	= СтруктураПеречисления.ТипыНоменклатуры;
		
		Для Каждого Строка Из ИнформацияОСвободныхОстатках Цикл
			
			Если Строка.ТипНоменклатуры = СтруктураТиповНоменклатуры.Товар Тогда
			
				Если Строка.Остаток < 1 Тогда
					Ответ = Вопрос(Строка.Номенклатура + ?(Строка.Характеристика <> Неопределено, " "+Строка.Характеристика, " ") + " нету на складе. Продолжить создание заказа?", РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
				ИначеЕсли Строка.Остаток - ОбъектКорзина[Инд].Количество < 0  Тогда
					Ответ = Вопрос(Строка.Номенклатура + ?(Строка.Характеристика <> Неопределено, " "+Строка.Характеристика, " ") + " недостаточно на складе. Продолжить создание заказа?", РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				Инд = Инд + 1;
				
			Иначе
				
				Инд = Инд + 1;
				
			КонецЕсли;
				
		КонецЦикла;
		
		ФормаДокумента = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаОбъекта");
		ОбъектФормыДокумента = ФормаДокумента.Объект;
		
		ПараметрыКонтрагента = ктсПолучитьПарметрыПоставщика(Объект.Партнер);
		Если ПараметрыКонтрагента <> Неопределено Тогда
		
			Если ПараметрыКонтрагента.Партнер <> Неопределено Тогда
				ОбъектФормыДокумента.Партнер = ПараметрыКонтрагента.Партнер;
				ОбъектФормыДокумента.Контрагент = Объект.Партнер;
			КонецЕсли;
			Если ПараметрыКонтрагента.Соглашение <> Неопределено Тогда
				ОбъектФормыДокумента.Соглашение = ПараметрыКонтрагента.Соглашение;
			КонецЕсли;
			Если ПараметрыКонтрагента.Организация <> Неопределено Тогда
				ОбъектФормыДокумента.Организация = ПараметрыКонтрагента.Организация;
			КонецЕсли;
			Если ПараметрыКонтрагента.Склад <> Неопределено Тогда
				ОбъектФормыДокумента.Склад = ПараметрыКонтрагента.Склад;
			Иначе
				Если ТипЗнч(ВыборСклада) = Тип("СправочникСсылка.Склады") Тогда
					ОбъектФормыДокумента.Склад = ВыборСклада;
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыКонтрагента.Валюта <> Неопределено Тогда
				ОбъектФормыДокумента.Валюта = ПараметрыКонтрагента.Валюта;
				КоефициентВалют = ктсПолучитьКоефициентВалют(Валюта, ПараметрыКонтрагента.Валюта);
			Иначе
				ОбъектФормыДокумента.Валюта = Валюта;
			КонецЕсли;
		
		Иначе
			Если ТипЗнч(ВыборСклада) = Тип("СправочникСсылка.Склады") Тогда
				ОбъектФормыДокумента.Склад = ВыборСклада;
			КонецЕсли;
			ОбъектФормыДокумента.Валюта = Валюта;
		КонецЕсли;
		
		Для Каждого Строка ИЗ ОбъектКорзина Цикл
		
			НоваяСтрока 					= ОбъектФормыДокумента.Товары.Добавить();
			НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
			НоваяСтрока.Характеристика 		= Строка.Характеристика;
			НоваяСтрока.КоличествоУпаковок 	= Строка.Количество;
			НоваяСтрока.Количество 			= Строка.Количество;
			НоваяСтрока.Упаковка 			= Строка.Упаковка;
			
			Если КоефициентВалют <> Неопределено Тогда
				НоваяСтрока.Цена = Строка.Цена * КоефициентВалют;
				НоваяСтрока.Сумма = Строка.Сумма * КоефициентВалют;
			Иначе 
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.Сумма = Строка.Сумма;
			КонецЕсли;
			
		КонецЦикла;
			
		ФормаДокумента.Открыть();
		
	Иначе
		
		ФормаДокумента = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаОбъекта");
		ФормаДокумента.Открыть();
		
	КонецЕсли;;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПолейЦен(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Диапазон", ДиапазонОтображенияЦен);
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаДиапазонаОтображенияЦен", ПараметрыФормы, ЭтаФорма);	
	
	Если Результат <> Неопределено Тогда
		
		ДиапазонОтображенияЦен = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЦены(Команда)
	
	ктсЗаполнитьПоляПодбора(Элементы.ПодборТаблицаНоменклатура.ТекущаяСтрока, Валюта, ВидЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиДС(Команда)
	
	Ключ = "Отчет.ОстаткиИДвиженияДенежныхСредств\ОстаткиДенежныхСредств";
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "ОстаткиДенежныхСредств");
	ОткрытьФорму("Отчет.ОстаткиИДвиженияДенежныхСредств.Форма", ПараметрыОтчета, Ключ);
	
КонецПроцедуры

&НаКлиенте
Процедура НаличныеДС(Команда)
	
	Ключ = "Отчет.НаличныеДенежныеСредства\НаличныеДенежныеСредства";
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "НаличныеДенежныеСредства");
	ОткрытьФорму("Отчет.НаличныеДенежныеСредства.Форма", ПараметрыОтчета, Ключ);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеДС(Команда)
	
	Ключ = "Отчет.ОстаткиИДвиженияДенежныхСредств\БезналичныеДенежныеСредства";
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "БезналичныеДенежныеСредства");
	ОткрытьФорму("Отчет.ОстаткиИДвиженияДенежныхСредств.Форма", ПараметрыОтчета, Ключ);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаРасчетаСКлиентами(Команда)
	
	Ключ = "Отчет.КарточкаРасчетовСКлиентами\Основной";
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "Основной");
	ОткрытьФорму("Отчет.КарточкаРасчетовСКлиентами.Форма", ПараметрыОтчета, Ключ);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеРасчетовСКлиентами(Команда)
	
	Ключ = "Отчет.СостояниеРасчетовСКлиентами\Основной";
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "ОсновнойПоЗаказам");
	ОткрытьФорму("Отчет.СостояниеРасчетовСКлиентами.Форма", ПараметрыОтчета, Ключ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	
	ОбъектКорзина = Объект.Корзина;
	
	ОбъектКорзина.Очистить();
	ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
	
	
	СерийныеНомераКорзины.Очистить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуру(Команда)
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМЕстоМенеджера.Форма.ФормаДатаСравненияЦен");
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ДатаСравненияЦен = Результат;
	КонецЕсли;
	
	Состояние("Загрузка списка номенклатуры в корзину....");
	
	Если Элементы.ИерархияНоменклатуры.ТекущиеДанные = Неопределено Тогда
		ктсЗагрузитьНоменклатуру(Неопределено);
	Иначе
		ктсЗагрузитьНоменклатуру(Элементы.ИерархияНоменклатуры.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОбъектКорзина = Объект.Корзина;
	
	ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
	
	
	
	МассивНоменклатуры = Новый Массив;
	СоотвествиеЦен = Новый Соответствие;
	СоотвествиеКоличества = Новый Соответствие;
	
	ктсСформироватьДанныеПечатиИзкорзины(МассивНоменклатуры, СоотвествиеЦен, СоотвествиеКоличества);
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("ВидПечати", "ПечатьИЗКорзины");
	СтруктураПередачи.Вставить("МассивНоменклатуры", МассивНоменклатуры);
	СтруктураПередачи.Вставить("ВидЦены", ВидЦены);
	СтруктураПередачи.Вставить("СоотвествиеЦен", СоотвествиеЦен);
	СтруктураПередачи.Вставить("СоотвествиеКоличества", СоотвествиеКоличества);
	
	ФормаБыстраяПечатьЦенников = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаБыстраяПечатьЦенников", СтруктураПередачи);
	ФормаБыстраяПечатьЦенников.Открыть();
	ФормаБыстраяПечатьЦенников.ПечатьЦенниковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокумента(Команда)
		
	Если НЕ ЗначениеЗаполнено(ВидЦены) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле обязательное для заполнения."; 
		Сообщение.Поле = "ВидЦены";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("ВидЦены", ВидЦены);
	
	ФормаВыбораДокументаДляЗагрузки = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаВыбораДокумента", СтруктураПередачи);
	ФормаВыбораДокументаДляЗагрузки.КлючУникальности = ЭтаФорма;
	
	МассивТоваров = ФормаВыбораДокументаДляЗагрузки.ОткрытьМодально();
	
	//Если ТипЗнч(МассивТоваров) = Тип("Массив") Тогда
	//
	//	Для Каждого Товар Из МассивТоваров Цикл
	//		
	//		НоваяСтрока = Объект.Корзина.Добавить();
	//		НоваяСтрока.Код = Товар.Код;
	//		НоваяСтрока.Номенклатура = Товар.Номенклатура;
	//		НоваяСтрока.Характеристика = Товар.Характеристика;
	//		НоваяСтрока.Количество = Товар.Количество;
	//		НоваяСтрока.ВидЦены = Товар.ВидЦены;
	//		НоваяСтрока.Цена = Товар.Цена;
	//		НоваяСтрока.Сумма = Товар.Сумма;
	//		
	//	КонецЦикла;
	//	
	//	КорзинаПриИзменении();
	//	
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзДокументаНаФорме(МассивТоваров) Экспорт
	
	Если ТипЗнч(МассивТоваров) = Тип("Массив") Тогда
	
		Для Каждого Товар Из МассивТоваров Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Код", Товар.Код);
			СтруктураПоиска.Вставить("ВидЦены", Товар.ВидЦены);
			
			МассивНайденныхСтрок = Объект.Корзина.НайтиСтроки(СтруктураПоиска);
			
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				
				МассивНайденныхСтрок[0].Количество = МассивНайденныхСтрок[0].Количество + Товар.Количество;
				МассивНайденныхСтрок[0].Сумма = МассивНайденныхСтрок[0].Сумма + Товар.Сумма;
				
			Иначе	
				
				НоваяСтрока = Объект.Корзина.Добавить();
				НоваяСтрока.Код = Товар.Код;
				НоваяСтрока.Номенклатура = Товар.Номенклатура;
				НоваяСтрока.Характеристика = Товар.Характеристика;
				НоваяСтрока.Количество = Товар.Количество;
				НоваяСтрока.ВидЦены = Товар.ВидЦены;
				НоваяСтрока.Цена = Товар.Цена;
				НоваяСтрока.Сумма = Товар.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
		КорзинаПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЗакладку(Команда)
	
	ПараметрыФормы 		= Новый Структура;
	ПередачаМассива		= Новый Структура;
	ТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	ТекДанные 			= ТаблицаНоменклатура.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("НаименованиеЗакладки", Строка(ТекДанные.Номенклатура));
	ПараметрыФормы.Вставить("Номенклатура", ТекДанные.Номенклатура);
	ФормаЗакладок = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаДобавитьЗакладку", ПараметрыФормы, ЭтаФорма);
	
	ПередачаМассива.Вставить("МассивЗакладок", МассивЗакладок);
	ФормаЗакладок.КлючУникальности = ПередачаМассива;
	
	Результат = ФормаЗакладок.ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда
		
		ТаблицаНоменклатуры = Элементы.ПодборТаблицаНоменклатура;
		ТекущаяСтрока 		=  ТаблицаНоменклатуры.ТекущаяСтрока;
		
		МассивЗакладок.Добавить(Результат);
		ктсСоздатьЗакладку(Результат.Наименование);
		
		ТаблицаНоменклатуры.ТекущаяСтрока = ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗакладку(Команда)
	
	ПередачаМассива		= Новый Структура;
	ФормаЗакладок 		= ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаУдалитьЗакладку", , ЭтаФорма);
	
	ПередачаМассива.Вставить("МассивЗакладок", МассивЗакладок);
	ФормаЗакладок.КлючУникальности = ПередачаМассива;

	Результат 			= ФормаЗакладок.ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда
		
		ТаблицаНоменклатуры = Элементы.ПодборТаблицаНоменклатура;
		ТекущаяСтрока 		=  ТаблицаНоменклатуры.ТекущаяСтрока;
		
		ктсУдалитьЗакладку(МассивЗакладок[Результат].Наименование);
		МассивЗакладок.Удалить(Результат);
		
		ТаблицаНоменклатуры.ТекущаяСтрока = ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ктсДействиеЗакладок(Команда)
	
	НаименованиеНоменклатуры = Неопределено;
	Для каждого Закладка Из МассивЗакладок Цикл
	
		ИмяЗакладки = ктсОбработкаСтрокиНаименованияЗакладкиКлиент(Закладка.Наименование);
		Если ИмяЗакладки = Команда.Имя Тогда
		  
			НаименованиеНоменклатуры = Закладка.НаименованиеНоменклатуры;
			Прервать;
		  
		КонецЕсли; 
	
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", НаименованиеНоменклатуры);
	ПараметрыФормы.Вставить("Дата", ТекущаяДата());
	ПараметрыФормы.Вставить("Валюта", Валюта);
	ПараметрыФормы.Вставить("ВидЦен", ВидЦены);
	Если ТипЗнч(ВыборСклада) = Тип("СправочникСсылка.Склады") Тогда
		ПараметрыФормы.Вставить("Склад", ВыборСклада);
	Иначе
		ПараметрыФормы.Вставить("Склад", ктсПолучитьСписокСкладовДляОтбора());
	КонецЕсли;

	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаРезультатПереходаПоЗакладке", ПараметрыФормы, ЭтаФорма);
	
	Если Результат <> Неопределено Тогда
		
		СтруктураДляПередачи = Результат;
		СтруктураДляПередачи.Вставить("ВидЦены", ВидЦены);
		ДобавитьВКорзину(СтруктураДляПередачи, 1);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВходнаяЦена(Команда)
	
	глОтбражатьВходнуюЦену = НЕ глОтбражатьВходнуюЦену;
	
	Если глОтбражатьВходнуюЦену Тогда
		
		Элементы.ГруппаИнформацияОЦенах.ТекущаяСтраница = Элементы.ГруппаВходнаяЦена;
		
	Иначе		
		
		Элементы.ГруппаИнформацияОЦенах.ТекущаяСтраница = Элементы.ГруппаБезЦени;
		
	КонецЕсли;
	
	//глЗагружатьНоменклатуру = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагентаПриИзменении(Элемент)
	
	ПустыеСсылки = ктсПолучитьПустиеСсылки();
	Объект.Соглашение = ПустыеСсылки.Соглашение;
	ВидыЦен = ПустыеСсылки.ВидЦены;
	Организация = ПустыеСсылки.Организация;
	Валюта = ПустыеСсылки.Валюта;
	Контрагент = ПустыеСсылки.Контрагент;
	
	ктсИзменитьВидыЦенВКорзине(ВидЦены);
	ТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	//ктсЗаполнитьПоляПодбора(ТаблицаНоменклатура.ТекущаяСтрока, Валюта, ВидЦены);
	ктсВыполнитьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	СтруктураПередачи = ктсПолучитьПараметрыСоглашения(Объект.Соглашение);
	Организация = СтруктураПередачи.Организация;
	Склад = СтруктураПередачи.Склад;
	Валюта = СтруктураПередачи.Валюта;
	ВидЦены = СтруктураПередачи.ВидЦены;
	
	ктсИзменитьВидыЦенВКорзине(ВидЦены);
	//ТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	//ктсЗаполнитьПоляПодбора(ТаблицаНоменклатура.ТекущаяСтрока, Валюта, ВидЦены);
	ктсВыполнитьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискОчистка(Элемент, СтандартнаяОбработка)
	
	Поиск = "";
	ктсВыполнитьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура Убавить(Команда)
	
	ЭлКорзина = Элементы.Корзина;
	ТекущиеДанныеКорзина = ЭлКорзина.ТекущиеДанные;
	
	СтруктураПеречисления 					= СтруктураКэшируемыеЗначения.Перечисления;
	ПеречисленияТиповНоменклатуры 			= СтруктураПеречисления.ТипыНоменклатуры;

	
	Попытка
	Если НЕ ТекущиеДанныеКорзина = Неопределено Тогда
		
		Если ктсТипНоменклатурыТовар(ТекущиеДанныеКорзина.Номенклатура) Тогда
			
			ТекущиеДанныеКорзина.Количество = ТекущиеДанныеКорзина.Количество - 1;
			ПараметрыКорзины = ктсПолучитьОстатокПоСсылке(ТекущиеДанныеКорзина.Номенклатура, ВыборСклада, ВидЦены, ТекущиеДанныеКорзина.Упаковка);
			
			ТекущийОстаток = 0;
			Если ПараметрыКорзины <> Неопределено Тогда
				
				ТекущийОстаток = ПараметрыКорзины.СвободныйОстаток;
				
			КонецЕсли;
			
			Если ТекущиеДанныеКорзина.Количество > ТекущийОстаток Тогда
				ТекущиеДанныеКорзина.ИндексКартинки = 1;
			Иначе
				ТекущиеДанныеКорзина.ИндексКартинки = 0;
			КонецЕсли;
			
		Иначе
			
			ТекущиеДанныеКорзина.ИндексКартинки = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ЭлТаблица = Элементы.ПодборТаблицаНоменклатура;
	ВыделенныеСтроки = ЭлТаблица.ВыделенныеСтроки;
	МассивКПередаче = Новый Массив;
	
	Для Каждого НомерСтроки ИЗ ВыделенныеСтроки Цикл
		
		МассивКПередаче.Добавить(ЭлТаблица.ДанныеСтроки(НомерСтроки));
		
	КонецЦикла;
	
	 ТабличныйДокумент = НапечататьДокумент(МассивКПередаче);
	 ТабличныйДокумент.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВидЦеныПриИзменении(Элемент)
	
	ЭлКорзина 									= Элементы.Корзина;
	КорзинаПодчиненныеЭлементы 					= ЭлКорзина.ПодчиненныеЭлементы;
	//КорзинаКоличественныеПараметры 				= КорзинаПодчиненныеЭлементы.КорзинаКоличественныеПараметры;
	//КолечественныеПараметрыПодчиненныхЭлементов = КорзинаКоличественныеПараметры.ПодчиненныеЭлементы;
	КорзинаЦена 								= КорзинаПодчиненныеЭлементы.КорзинаЦена;
	
	ЭлКорзина 				= Элементы.Корзина;
	ТекущиеДанныеКорзина 	= ЭлКорзина.ТекущиеДанные;
	
	
	ОбъектКорзина			= Объект.Корзина;
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		
		КорзинаЦена.ТолькоПросмотр = Ложь;
		ТекущиеДанныеКорзина.ИзменятьВидЦены = Ложь;
		
	Иначе
		
		//ТекущиеДанныеКорзина.Цена.ТолькоПросмотр = Истина;
		
		Если ТекущиеДанныеКорзина.ВидЦены = ВидЦены Тогда
			ТекущиеДанныеКорзина.ИзменятьВидЦены = Истина;
		Иначе
			ТекущиеДанныеКорзина.ИзменятьВидЦены = Ложь;
		КонецЕсли;
		
		Если НЕ ТекущиеДанныеКорзина = Неопределено Тогда
			
			Попытка
				Цена = ктсПолучитьОстатокПоСсылке(ТекущиеДанныеКорзина.Номенклатура, ВыборСклада, ТекущиеДанныеКорзина.ВидЦены, Валюта, ТекущиеДанныеКорзина.Упаковка).Цена;
			//Цена = ?(ЗначениеЗаполнено(Цена),Цена,0);
				ТекущиеДанныеКорзина.Цена = Цена;
				ТекущиеДанныеКорзина.Сумма = Цена * ТекущиеДанныеКорзина.Количество;
			Исключение
				ТекущиеДанныеКорзина.Цена = 0;
				ТекущиеДанныеКорзина.Сумма = 0;
			КонецПопытки;
			
			ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	
	ЭлКорзина 				= Элементы.Корзина;
	ТекущиеДанныеКорзина 	= ЭлКорзина.ТекущиеДанные;
	ОбъектКорзина			= Объект.Корзина;
	
	ТекущиеДанныеКорзина.ВидЦены = ктсПолучитьПустиеСсылки().ВидЦены;
	
	Если НЕ ТекущиеДанныеКорзина = Неопределено Тогда
		
		ТекущиеДанныеКорзина.Сумма = ТекущиеДанныеКорзина.Цена * ТекущиеДанныеКорзина.Количество;
		
		ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦену(Команда)
	
	ЭлТаблица = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлТаблица.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
	
		СтрукутраПередачи 			= Новый Структура;
		ПустаяСсылкаХарактеристика  = ктсПолучитьПустиеСсылки().Характеристика;  
		СтрукутраПередачи.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтрукутраПередачи.Вставить("Характеристика", ПустаяСсылкаХарактеристика);
		Форма = ПолучитьФорму("Обработка.УстановкаЦенНоменклатуры.Форма.Форма", СтрукутраПередачи, ЭтаФорма, Новый УникальныйИдентификатор());
		Форма.Открыть();
		
		ктсАктуализироватьЦеныВКорзине(); 
		ТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
		ктсЗаполнитьПоляПодбора(ТаблицаНоменклатура.ТекущаяСтрока, Валюта, ВидЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаНоменклатуры(Команда)
	
	ЭлТаблица = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлТаблица.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перемещение(Команда)
	
	//глЗагружатьНоменклатуру = Ложь;
	
	// Проверка количества введеных серийных номеров 
	Если НЕ СкладИспользуетОрдернуюСхемуПриОтгрузке() Тогда
	
		Для Каждого СтрокаТЧ ИЗ Объект.Корзина Цикл
			
			Если СтрокаТЧ.СерийныйНомер Тогда
				
				Результат = СерийныеНомераКорзины[СтрокаТЧ.Номенклатура];
				
				Если Результат = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Введено неверное количество серийных номеров.";
					Сообщение.Поле = "Объект.Корзина[" + Строка(СтрокаТЧ.НомерСтроки - 1) + "].Номенклатура";
					Сообщение.Сообщить();
					
					Возврат;	
					
				КонецЕсли;
				
				Если Результат.Количество() <> СтрокаТЧ.Количество Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Введено неверное количество серийных номеров.";
					Сообщение.Поле = "Объект.Корзина[" + Строка(СтрокаТЧ.НомерСтроки - 1) + "].Номенклатура";
					Сообщение.Сообщить();
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли
			
		КонецЦикла;
		
	КонецЕсли;

	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкладОтправитель", ВыборСклада);
	ПараметрыФормы.Вставить("ТаблицаСтрока", ПоготовитьКорзинуНаСервере());
	//ПараметрыФормы.Вставить("СерийныеНомера", СерийныеНомераКорзины);
	
	ФормаПомощника = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаПомощникПеремещения", ПараметрыФормы);
	ФормаПомощника.КлючУникальности = СерийныеНомераКорзины;
	ФормаПомощника.ОткрытьМодально();
	
	//Если Результат = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПроверкаКорзиныНаСервере() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтруктураДокумента = СоздатьДокументПеремещенияНаСервере(Результат, СерийныеНомераКорзины);
	//	
	//Если НЕ ПустаяСтрока(СтруктураДокумента) Тогда
	//	
	//	Если СтруктураДокумента.Свойство("СтруктураШапки") Тогда
	//		СоздатьДокументПеремещениеНаКлиенте(СтруктураДокумента);
	//	Иначе
	//		ПоказатьОповещениеПользователя("Создан документ.", СтруктураДокумента.НавигационнаяСсылка, СтруктураДокумента.Пояснение, БиблиотекаКартинок.Информация32);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//СкладОтправитель 	= "";
	//СкладПолучатель		= "";
	
КонецПроцедуры


&НаСервере
Функция СкладИспользуетОрдернуюСхемуПриОтгрузке()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СкладСсылка = Справочники.Склады.НайтиПоНаименованию(ВыборСклада);
	
	Возврат СкладСсылка.ИспользоватьОрдернуюСхемуПриОтгрузке;
	
КонецФункции

&НаСервере
Функция ПоготовитьКорзинуНаСервере()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("ОрганизацияОтправитель", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТЧ ИЗ Объект.Корзина Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		НоваяСтрока.Код = СтрокаТЧ.Код;
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
		НоваяСтрока.Упаковка = СтрокаТЧ.Упаковка;
		НоваяСтрока.ОрганизацияОтправитель = Организация.Наименование;
		
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(ТаблицаЗначений);
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументПеремещениеНаКлиенте(СтруктураДокумента)
	
	ФормаДокумента 			= ПолучитьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", ,Этаформа, Новый УникальныйИдентификатор);
	ОбъектФормыДокумента	= ФормаДокумента.Объект;
	
	ЗаполнитьЗначенияСвойств(ОбъектФормыДокумента, СтруктураДокумента.СтруктураШапки);
	
	Для Каждого СтрокаКорзины ИЗ СтруктураДокумента.МассивКорзина Цикл
		
		НоваяСтрока = ОбъектФормыДокумента.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорзины);
		
	КонецЦикла;
	
	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомерческоеПредложение(Команда)
	
	УникальныйИдентификаторДляФормы = Строка(ТекущаяДата()) + Строка(УникальныйИдентификатор);	
	
	ОбъектКорзина = Объект.Корзина;
	
	Если ОбъектКорзина.Количество() > 0 Тогда
		
		ОшыбкаФормированияПродажы = Ложь;
		
		ПолучитьКэшируемыеЗначения();
		
		ИнформацияОСвободныхОстатках = ктсОбработкаСвободногоОстатка();
		Инд = 0;
		СтруктураПеречисления 		= СтруктураКэшируемыеЗначения.Перечисления;
		СтруктураТиповНоменклатуры 	= СтруктураПеречисления.ТипыНоменклатуры;
		
		
		ФормаДокумента = ПолучитьФорму("Документ.КоммерческоеПредложениеКлиенту.ФормаОбъекта",,,УникальныйИдентификаторДляФормы,);
		ОбъектФормыДокумента = ФормаДокумента.Объект;
		
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ОбъектФормыДокумента.Партнер = Объект.Партнер;
			ОбъектФормыДокумента.Организация = Организация;
			ОбъектФормыДокумента.Соглашение = Объект.Соглашение;
		КонецЕсли;
		
		ОбъектФормыДокумента.Валюта = Валюта;
				
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение);
		ОбъектФормыДокумента.ХозяйственнаяОперация 	= УсловияПродаж.ХозяйственнаяОперация;
		ОбъектФормыДокумента.ЦенаВключаетНДС       	= УсловияПродаж.ЦенаВключаетНДС;
		ОбъектФормыДокумента.НалогообложениеНДС    	= УсловияПродаж.НалогообложениеНДС;
		
		Для Каждого Строка ИЗ ОбъектКорзина Цикл
			
			НоваяСтрока = ОбъектФормыДокумента.Товары.Добавить();
			
			НоваяСтрока.Номенклатура 		= Строка.Номенклатура;
			НоваяСтрока.Характеристика 		= Строка.Характеристика;
			НоваяСтрока.Количество 			= Строка.Количество;
			НоваяСтрока.КоличествоУпаковок 	= Строка.Количество;
			НоваяСтрока.ВидЦены 			= Строка.ВидЦены;
			НоваяСтрока.Цена 				= Строка.Цена;
			НоваяСтрока.Сумма				= Строка.Сумма;
			НоваяСтрока.СтавкаНДС			= ктсПолучитьСтакуНДСЗаНоменклатурой(Строка.Номенклатура);
			
		КонецЦикла;
		
		ФормаДокумента.Открыть();
		
	Иначе
		ФормаДокумента = ПолучитьФорму("Документ.КоммерческоеПредложениеКлиенту.ФормаОбъекта",,,УникальныйИдентификаторДляФормы,);
		ФормаДокумента.Открыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМакетГруппы(Команда)

	ЭлИерархияНоменклатуры 	= Элементы.ИерархияНоменклатуры;
	ТекущиеДанные			= ЭлИерархияНоменклатуры.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ФормаСписокСтандартныхЦенников = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаСписокСтандартныхЦенников");
		ФормаСписокСтандартныхЦенников.Заголовок = "Макеты ценников для группы " + Строка(ТекущиеДанные.Ссылка);
		ФормаСписокСтандартныхЦенников.ТипФормы = "Персональная";
		ФормаСписокСтандартныхЦенников.ТекущаяНоменклатура = ТекущиеДанные.Ссылка;
		
		ФормаСписокСтандартныхЦенников.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьМакетНоменклатура(Команда)
	
	ЭлПодборТаблицаНоменклатура 	= Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные					= ЭлПодборТаблицаНоменклатура.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ФормаСписокСтандартныхЦенников = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаСписокСтандартныхЦенников");
		ФормаСписокСтандартныхЦенников.Заголовок = "Макеты ценников для группы " + Строка(ТекущиеДанные.Номенклатура);
		ФормаСписокСтандартныхЦенников.ТипФормы = "Персональная";
		ФормаСписокСтандартныхЦенников.ТекущаяНоменклатура = ТекущиеДанные.Номенклатура;
		
		ФормаСписокСтандартныхЦенников.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстраяПечатьЦенника(Команда)
	
	МассивНоменклатуры = ктсМассивНоменклатурыПоВыделеннымСтрокам();
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("ВидПечати", "БыстраяПечать");
	СтруктураПередачи.Вставить("МассивНоменклатуры", МассивНоменклатуры);
	СтруктураПередачи.Вставить("ВидЦены", ВидЦены);
	
	ФормаБыстраяПечатьЦенников = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаБыстраяПечатьЦенников", СтруктураПередачи);
	ФормаБыстраяПечатьЦенников.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИзКорзины(Команда)
	
	МассивНоменклатуры = Новый Массив;
	СоотвествиеЦен = Новый Соответствие;
	СоотвествиеКоличества = Новый Соответствие;
	
	ктсСформироватьДанныеПечатиИзкорзины(МассивНоменклатуры, СоотвествиеЦен, СоотвествиеКоличества);
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("ВидПечати", "ПечатьИЗКорзины");
	СтруктураПередачи.Вставить("МассивНоменклатуры", МассивНоменклатуры);
	СтруктураПередачи.Вставить("ВидЦены", ВидЦены);
	СтруктураПередачи.Вставить("СоотвествиеЦен", СоотвествиеЦен);
	СтруктураПередачи.Вставить("СоотвествиеКоличества", СоотвествиеКоличества);
	
	ФормаБыстраяПечатьЦенников = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаБыстраяПечатьЦенников", СтруктураПередачи);
	ФормаБыстраяПечатьЦенников.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ктсСформироватьДанныеПечатиИзкорзины(МассивНоменклатуры, СоотвествиеЦен, СоотвествиеКоличества)
	
	Для Каждого СтрокаКорзины ИЗ Объект.Корзина Цикл
		
		МассивНоменклатуры.Добавить(СтрокаКорзины.Номенклатура);
		СоотвествиеЦен.Вставить(СтрокаКорзины.Номенклатура, СтрокаКорзины.Цена);
		СоотвествиеКоличества.Вставить(СтрокаКорзины.Номенклатура, СтрокаКорзины.Количество);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеШаблоныЦенников(Команда)
	
	ФормаСпискаСтандартных = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаСписокСтандартныхЦенников");
	
	ФормаСпискаСтандартных.Заголовок = "Список стандартных шаблонов";
	ФормаСпискаСтандартных.ТипФормы = "Стандартная";
	ФормаСпискаСтандартных.КлючУникальности = ЭтаФорма;
	ФормаСпискаСтандартных.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИзмененияЦен(Команда)
	
	ЭлПодборНоменклатуры = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлПодборНоменклатуры.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
	
		ОткрытьФорму("Отчет.ОтчетИзмененияЦен.Форма.ФормаОтчета", Новый Структура("Номенклатура, ВидЦены", ТекущиеДанные.Номенклатура, ВидЦены), ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ктсОтменаПоиска()
	
	Поиск = "";
	
	ВариантыНавигации = Элементы.ВариантыНавигации;
	Если ВариантыНавигации.ТекущаяСтраница = Элементы.НавигацияИерархияНоменклатуры Тогда
		
		ЭлИерархияНоменлатуры = Элементы.ИерархияНоменклатуры;
		ТекущиеДанные = ЭлИерархияНоменлатуры.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ктсВыполнитьЗапросИерархияНоменклатуры(Неопределено);
		Иначе
			ктсВыполнитьЗапросИерархияНоменклатуры(ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализации(Команда)
	
	ФормаСпискаДокументов = Получитьформу("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаДокументыРеализации");
	
	ФормаСпискаДокументов.Менеджер = ктсПолучитьТекущегоПользователя();
	ФормаСпискаДокументов.Партнер = Объект.Партнер;
	
	ФормаСпискаДокументов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьИзДокументаПостепления(Команда)
	
	ФормаСпискаДокументов = Получитьформу("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаДокументыПоступления");
	ФормаСпискаДокументов.ВидЦены = ВидЦены;
	ФормаСпискаДокументов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СвободныеСерийныеНомера(Команда)
	
	ЭлПодборТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлПодборТаблицаНоменклатура.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СсылкаНаОбработку = ктсПолучитьСсылкуНаОбработкуОтчет("Свободные серийные номера");
		ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаНаОбработку, Ложь);
		ОткрытьФорму("ВнешнийОтчет.СвободныеСерийныеНомера.Форма", Новый Структура("Номенклатура, Характеристика, Склад", ТекущиеДанные.Номенклатура, ктсПолучитьПустиеСсылки().Характеристика, ВыборСклада), ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоКомплектам(Команда)
	
	ЭлПодборТаблицаНоменклатура = Элементы.ПодборТаблицаНоменклатура;
	ТекущиеДанные = ЭлПодборТаблицаНоменклатура.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СсылкаНаОбработку = ктсПолучитьСсылкуНаОбработкуОтчет("Звіт по комплектах");
		ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаНаОбработку, Ложь);
		ОткрытьФорму("ВнешнийОтчет.ОтчетПоКомплектах.Форма", Новый Структура("Комплект", ТекущиеДанные.Номенклатура), ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодборНоменклатуры(Команда)
		
	ктсВыполнитьЗапрос();	
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Для Каждого ПараметрПеретаскивания ИЗ ПараметрыПеретаскивания.Значение Цикл
	
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Код", ПараметрПеретаскивания.Код);
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ПараметрПеретаскивания.Номенклатура);					
		СтруктураПараметрыНоменклатуры.Вставить("ВидЦены", ВидЦены);
		СтруктураПараметрыНоменклатуры.Вставить("Цена", ПараметрПеретаскивания.Цена);

		ДобавитьВКорзину(СтруктураПараметрыНоменклатуры, 1);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ктсСоздатьДокументОбработчик(Элемент)
	
	//глЗагружатьНоменклатуру = Ложь;
		
	ИмяДокумента 					= Сред(Элемент.Имя, 8 , СтрДлина(Элемент.Имя));
	УникальныйИдентификаторДляФормы = Строка(ТекущаяДата()) + Строка(УникальныйИдентификатор);
	ОбъектКорзина 					= Объект.Корзина;
	
	Если ИмяДокумента <> "КоммерческоеПредложениеКлиенту" И ИмяДокумента <> "ЗаказПоставщику" И ИмяДокумента <> "ПоступлениеТоваровУслуг" Тогда
	
		Если  ИмяДокумента <> "ЗаказКлиента" Тогда
		
			Если ПроверкаКорзиныНаСервере() Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если ПроверитьНаличияГрафикаВСклада(ВыборСклада) Тогда
				Если ПроверкаКорзиныНаСервере() Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	
	
		Если ИмяДокумента <> "ПеремещениеТоваров" Тогда
			
			СкладДокумента = ПроверитьДоступностьСклада(ВыборСклада);
			
			Если СкладДокумента = Ложь Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Сделайте пожалуйста перемещение. Склад " + ВыборСклада + " для вас недоступный.";
				Сообщение.Поле  = "ВыборСклада";
				
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаТЧ ИЗ Объект.Корзина Цикл
		
				Если СтрокаТЧ.СерийныйНомер Тогда
					
					Результат = СерийныеНомераКорзины[СтрокаТЧ.Номенклатура];
					
					Если Результат = Неопределено Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Введено неверное количество серийных номеров.";
						Сообщение.Поле = "Объект.Корзина[" + Строка(СтрокаТЧ.НомерСтроки - 1) + "].Номенклатура";
						Сообщение.Сообщить();
						
						Возврат;	
						
					КонецЕсли;
					
					Если Результат.Количество() <> СтрокаТЧ.Количество Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Введено неверное количество серийных номеров.";
						Сообщение.Поле = "Объект.Корзина[" + Строка(СтрокаТЧ.НомерСтроки - 1) + "].Номенклатура";
						Сообщение.Сообщить();
						
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли
				
			КонецЦикла;
			
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СкладОтправитель", ВыборСклада);
			ПараметрыФормы.Вставить("ТаблицаСтрока", ПоготовитьКорзинуНаСервере());
			//ПараметрыФормы.Вставить("СерийныеНомера", СерийныеНомераКорзины);
			
			ФормаПомощника = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаПомощникПеремещения", ПараметрыФормы);
			ФормаПомощника.КлючУникальности = СерийныеНомераКорзины;
			ФормаПомощника.ОткрытьМодально();
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ОбъектКорзина.Количество() > 0 Тогда
				
		
		
		ФормаДокумента		 = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",,,УникальныйИдентификаторДляФормы,);
		ОбъектФормыДокумента = ФормаДокумента.Объект;
		
		СтруктураРеквизитов 			= ктсПолучитьМассивИменРеквизитовДокументов(ИмяДокумента);
		МассивРеквизитовДокумента 		= СтруктураРеквизитов.МассивРеквизитовДокумента;
		МассивРеквизитовТабличнойЧасти  = СтруктураРеквизитов.МассивРеквизитовТабличнойЧасти;
				
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение);
		
		СтруктураЗаполнения = Новый Структура();
		СтруктураЗаполнения.Вставить("Партнер", Объект.Партнер);
		СтруктураЗаполнения.Вставить("Контрагент",  ктсПолучитьКонтрагента(Объект.Партнер));
		СтруктураЗаполнения.Вставить("Организация",  Организация);
		СтруктураЗаполнения.Вставить("Склад",  СкладДокумента);
		СтруктураЗаполнения.Вставить("Соглашение",  Объект.Соглашение);
		СтруктураЗаполнения.Вставить("Валюта",  Валюта);
		СтруктураЗаполнения.Вставить("ВалютаВзаиморасчетов",  Валюта);
		СтруктураЗаполнения.Вставить("ДатаПлатежа",  ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), УсловияПродаж.ГрафикОплаты));
		СтруктураЗаполнения.Вставить("ХозяйственнаяОперация",  УсловияПродаж.ХозяйственнаяОперация);
		СтруктураЗаполнения.Вставить("ЦенаВключаетНДС",  УсловияПродаж.ЦенаВключаетНДС);
		СтруктураЗаполнения.Вставить("НалогообложениеНДС", УсловияПродаж.НалогообложениеНДС);
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, СтруктураЗаполнения);
		
		СуммаВсего = 0;		
		
		Для Каждого Строка ИЗ ОбъектКорзина Цикл
			
			НоваяСтрока = ОбъектФормыДокумента.Товары.Добавить();
			Коефициент 	= 1;
			
			
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				Коефициент	= ктсПолучитьКоэффициентУпаковки(Строка.Упаковка);
			КонецЕсли;
						
			СтруктураЗаполнения = Новый Структура();
			СтруктураЗаполнения.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураЗаполнения.Вставить("Склад", СкладДокумента);
			СтруктураЗаполнения.Вставить("Характеристика",  Строка.Характеристика);
			СтруктураЗаполнения.Вставить("Цена",  Строка.Цена);
			СтруктураЗаполнения.Вставить("Упаковка",  Строка.Упаковка);
			СтруктураЗаполнения.Вставить("КоличествоУпаковок",   Строка.Количество);
			СтруктураЗаполнения.Вставить("Количество",   Строка.Количество * Коефициент);
			СтруктураЗаполнения.Вставить("ВидЦены",   Строка.ВидЦены);
			СтруктураЗаполнения.Вставить("Сумма",    Строка.Сумма);
			
			СуммаВсего = СуммаВсего + Строка.Сумма;
			
			Если ктсПроверитьНалогообложение() Тогда
				СтруктураЗаполнения.Вставить("СтавкаНДС",    ктсПолучитьСтакуНДСЗаНоменклатурой(Строка.Номенклатура));
				СтруктураЗаполнения.Вставить("СуммаНДС",   Строка.Сумма / 6);
			Иначе
				СтруктураЗаполнения.Вставить("СтавкаНДС",  ПолучитьНДС());
				СтруктураЗаполнения.Вставить("СуммаНДС",   0);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
			
		КонецЦикла;
		
		Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
			ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(ОбъектФормыДокумента, ФормаДокумента);
		КонецЕсли;
		
		Если ИмяДокумента = "ЗаказКлиента" Тогда
			
			МассивЭтаповОплаты = Новый Массив;
			ГрафикОплаты = ЗаполнитьЭтапыГрафикаОплаты(ТекущаяДата(), СуммаВсего, МассивЭтаповОплаты);
			Если НЕ ПустаяСтрока(ГрафикОплаты) Тогда
				ОбъектФормыДокумента.ГрафикОплаты = ГрафикОплаты;
			КонецЕсли;
			Для Каждого ЭтапОплаты ИЗ МассивЭтаповОплаты Цикл
				НоваяСтрокаГрафикаОплаты = ФормаДокумента.Объект.ЭтапыГрафикаОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаГрафикаОплаты, ЭтапОплаты);
			КонецЦикла;
			
		КонецЕсли;
		
		ФормаДокумента.Открыть();	
		
	Иначе		
		
		ФормаДокумента = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",,,УникальныйИдентификаторДляФормы,);
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЭтапыГрафикаОплаты(ДатаДокумента, СуммаКРаспределению, МассивКПередаче)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплатыЭтапы.НомерСтроки        КАК НомерСтроки,
		|	ГрафикиОплатыЭтапы.ВариантОплаты      КАК ВариантОплаты,
		|	ГрафикиОплатыЭтапы.Сдвиг              КАК Сдвиг,
		|	ГрафикиОплатыЭтапы.ПроцентПлатежа     КАК ПроцентПлатежа,
		|	ГрафикиОплатыЭтапы.Ссылка.Календарь   КАК Календарь,
		|	ГрафикиОплатыЭтапы.Ссылка.ФормаОплаты КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
		|ГДЕ
		|	ГрафикиОплатыЭтапы.Ссылка = &ГрафикОплаты
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты", Объект.Соглашение.ГрафикОплаты);
	//Сообщить(Объект.Соглашение.ГрафикОплаты.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	ЭтапыГрафикаОплаты = Новый ТаблицаЗначений();
	
	ЭтапыГрафикаОплаты.Колонки.Добавить("ВариантОплаты");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");

	Если Выгрузка.Количество() = 0 Тогда
		
		//ДокументПродажи.ЭтапыГрафикаОплаты.Очистить();
		Возврат "";
		
	КонецЕсли;
	
	РаспределеннаяСумма = 0;
	ТекущийЭтап         = 0;
	ОдинДень            = 86400;
	
	КоличествоЭтапов = Выгрузка.Количество();

	Если СуммаКРаспределению = 0 Тогда
		
		//ДокументПродажи.ЭтапыГрафикаОплаты.Очистить();
		Возврат "";
		
	КонецЕсли;
	
	Календарь   = Выгрузка[0].Календарь;
	
	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
	//ДатаДокумента = ?(ЗначениеЗаполнено(ДокументПродажи.Дата), ДокументПродажи.Дата, ТекущаяДата());
	ДатаОтгрузки = Дата("00010101");
	
	// Определим календарную дату для каждого этапа графика оплаты
	УчитыватьКалендарь = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УчитыватьКалендарь = Истина;
		
		СдвигиАвансовыхЭтапов = Новый Массив();
		СдвигиКредитныхЭтапов = Новый Массив();
		МассивДатПоКалендарю  = Новый Массив();

		Для Каждого Этап Из Выгрузка Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
				Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				СдвигиАвансовыхЭтапов.Добавить(Этап.Сдвиг);
			Иначе
				СдвигиКредитныхЭтапов.Добавить(Этап.Сдвиг);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
			
			МассивДатПоКалендарюАвансовыхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаДокумента, СдвигиАвансовыхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюАвансовыхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СдвигиКредитныхЭтапов.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
				
				Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
					Если МассивДатПоКалендарюАвансовыхЭтапов.Количество() > 0 Тогда
						ДатаОтгрузки = МассивДатПоКалендарюАвансовыхЭтапов[МассивДатПоКалендарюАвансовыхЭтапов.Количество()-1];
					КонецЕсли;
				Иначе
					ДатаОтгрузки = ДатаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивДатПоКалендарюКредитныхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаОтгрузки, СдвигиКредитныхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюКредитныхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			
			МаксСдвигАванса = 0;
		
			Для Каждого ТекЭтап Из Выгрузка Цикл
				
				Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
					ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
					
					МаксСдвигАванса = Макс(МаксСдвигАванса, ТекЭтап.Сдвиг);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаОтгрузки = ДатаДокумента + МаксСдвигАванса * ОдинДень;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Этап Из Выгрузка Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		ЭтапГрафикаОплаты               = ЭтапыГрафикаОплаты.Добавить();
		ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
				
		Если УчитыватьКалендарь Тогда
			ДатаПлатежа = МассивДатПоКалендарю[ТекущийЭтап-1];
		Иначе
			ДатаПлатежа = ?(ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки, ДатаОтгрузки, ДатаДокумента) + Этап.Сдвиг * ОдинДень;
		КонецЕсли;
		
		//Если (ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
		//	Или ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
		//	//И ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки)
		//	//И ДатаПлатежа > ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда 
		//	Тогда
		//	ДатаПлатежа = ДокументПродажи.ЖелаемаяДатаОтгрузки;
		//КонецЕсли;
		
		ЭтапГрафикаОплаты.ДатаПлатежа    = ДатаПлатежа;
		ЭтапГрафикаОплаты.ПроцентПлатежа = Этап.ПроцентПлатежа;
		СуммаЭтапа                       = Окр(СуммаКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаПлатежа   = ?(ТекущийЭтап = КоличествоЭтапов, СуммаКРаспределению - РаспределеннаяСумма, СуммаЭтапа);
		РаспределеннаяСумма              = РаспределеннаяСумма + ЭтапГрафикаОплаты.СуммаПлатежа;
		
	КонецЦикла;
	
	МассивКПередаче.Очистить();
	Для Каждого СтрокаТЗ ИЗ ЭтапыГрафикаОплаты Цикл
		
		//Сообщить(СтрокаТЗ.ВариантОплаты);
		
		СтруктураГрафикаОплаты = Новый Структура("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		ЗаполнитьЗначенияСвойств(СтруктураГрафикаОплаты, СтрокаТЗ);
		
		МассивКПередаче.Добавить(СтруктураГрафикаОплаты);
		
	КонецЦикла;
	
	Возврат Объект.Соглашение.ГрафикОплаты;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПроверитьНаличияГрафикаВСклада(СкладНаименование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Склад = Справочники.Склады.НайтиПоНаименованию(СкладНаименование);
	
	Если Склад.ВариантКонтроля = Перечисления.ВариантыКонтроля.ОстаткиСУчетомГрафика Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверкаКорзиныНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТабКорзина.НомерСтроки,
	               |	ТабКорзина.Номенклатура,
	               |	ТабКорзина.Характеристика,
				   |	ТабКорзина.ЕдиницаИзмерения,
	               |	ТабКорзина.Упаковка,
	               |	ТабКорзина.Количество
	               |ПОМЕСТИТЬ ТаблицаКорзина
	               |ИЗ
	               |	&ТабКорзина КАК ТабКорзина
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ТаблицаКорзина.НомерСтроки,
	               |	ТаблицаКорзина.Номенклатура,
	               |	ТаблицаКорзина.Характеристика,
				   |	ТаблицаКорзина.ЕдиницаИзмерения,
				   |	ТаблицаКорзина.Упаковка,
				   |	ВЫБОР	
				   |		КОГДА ТаблицаКорзина.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
				   |		ТОГДА ТаблицаКорзина.Количество
				   |		ИНАЧЕ ТаблицаКорзина.Количество * ЕСТЬNULL(ТаблицаКорзина.Упаковка.Коэффициент, 1) 
				   |	КОНЕЦ КАК Количество,
	               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеОстаток, 0) КАК КоличествоОстаток
	               |ИЗ
	               |	ТаблицаКорзина КАК ТаблицаКорзина
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				,
	               |				Склад = &Склад
	               |					И Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ТаблицаКорзина.Номенклатура
	               |						ИЗ
	               |							ТаблицаКорзина)
	               |					И Характеристика В
	               |						(ВЫБРАТЬ
	               |							ТаблицаКорзина.Характеристика
	               |						ИЗ
	               |							ТаблицаКорзина)) КАК СвободныеОстаткиОстатки
	               |		ПО ТаблицаКорзина.Номенклатура = СвободныеОстаткиОстатки.Номенклатура";
	               //|			И ТаблицаКорзина.Упаковка = СвободныеОстаткиОстатки.Характеристика";
				   
	Запрос.УстановитьПараметр("ТабКорзина", Объект.Корзина.Выгрузить());
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(ВыборСклада));
	
	Отказ = Ложь;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Выборка.Количество > Выборка.КоличествоОстаток Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Номенклатура превышает свободный остаток на " + Строка(Выборка.Количество - Выборка.КоличествоОстаток) + " " + Выборка.ЕдиницаИзмерения.Наименование;
			Сообщение.Поле = "Объект.Корзина[" + Строка(Выборка.НомерСтроки - 1) + "].Номенклатура";
			//Сообщение.ПутьКДанным = "Объект";
			
			Сообщение.Сообщить();
			
			Возврат Отказ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПроверитьДоступностьСклада(ИмяСклада)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДоступнихСкладов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МассивДоступнихСкладов.Найти(Справочники.Склады.НайтиПоНаименованию(ИмяСклада)) = Неопределено Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Справочники.Склады.НайтиПоНаименованию(ИмяСклада);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоздатьДокументПеремещенияНаСервере(СтруктураПараметров, СерийныеНомераКорзины)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Организации.Представление
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
				   
	РезультатЗапроса 	= Запрос.Выполнить();
	МассивОрганизаций   = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Представление");
	
	РезультатПоискаОрганизации 	= МассивОрганизаций.Найти(СтруктураПараметров.Организация);
	ОргнизацияНайденна 			= ?(РезультатПоискаОрганизации = Неопределено, Ложь, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Представление
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
				   
	РезультатЗапроса 	= Запрос.Выполнить();
	МассивСкладов		= РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Представление");
	
	РезультатПоискаСкладаОтправителя 	= МассивСкладов.Найти(СтруктураПараметров.СкладОтправитель);
	СкладОтправительНайден				= ?(РезультатПоискаСкладаОтправителя = Неопределено, Ложь, Истина);
	
	РезультатПоискаСкладаПолучателя		= МассивСкладов.Найти(СтруктураПараметров.СкладПолучатель);
	СкладПолучательНайден				= ?(РезультатПоискаСкладаПолучателя = Неопределено, Ложь, Истина);
	
	
	Если ОргнизацияНайденна И СкладОтправительНайден И СкладПолучательНайден Тогда
		
		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Организация", Справочники.Организации.НайтиПоНаименованию(СтруктураПараметров.Организация));
		СтруктураШапки.Вставить("СкладОтправитель", Справочники.Склады.НайтиПоНаименованию(СтруктураПараметров.СкладОтправитель));
		СтруктураШапки.Вставить("СкладПолучатель", Справочники.Склады.НайтиПоНаименованию(СтруктураПараметров.СкладПолучатель));
		СтруктураШапки.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		СтруктураШапки.Вставить("СтатусОтгрузки", Перечисления.СтатусыОтгрузки.КОтгрузке);
		
		МассивКорзина = Новый Массив;
		
		Для Каждого СтрокаКорзины ИЗ Объект.Корзина Цикл
			
			СтруктураПередачи = Новый Структура;
			СтруктураПередачи.Вставить("Номенклатура", СтрокаКорзины.Номенклатура);
			СтруктураПередачи.Вставить("Характеристика", СтрокаКорзины.Характеристика);
			СтруктураПередачи.Вставить("Упаковка", СтрокаКорзины.Упаковка);
			
			Если ЗначениеЗаполнено(СтрокаКорзины.Упаковка) Тогда
				
				Коефициент	= ктсПолучитьКоэффициентУпаковки(СтрокаКорзины.Упаковка);
				СтруктураПередачи.Вставить("Количество", СтрокаКорзины.Количество * Коефициент);
				СтруктураПередачи.Вставить("КоличествоУпаковок", СтрокаКорзины.Количество);
				
			Иначе
							
				СтруктураПередачи.Вставить("Количество", СтрокаКорзины.Количество);
				СтруктураПередачи.Вставить("КоличествоУпаковок", СтрокаКорзины.Количество);
				
			КонецЕсли;
			
			МассивКорзина.Добавить(СтруктураПередачи);
			
		КонецЦикла;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("СтруктураШапки", СтруктураШапки);
		СтруктураДокумента.Вставить("МассивКорзина", МассивКорзина);
		
		Возврат СтруктураДокумента;
		
	Иначе	
	
		УстановитьПривилегированныйРежим(Истина);
		
		мСкладОтправитель = Справочники.Склады.НайтиПоНаименованию(СтруктураПараметров.СкладОтправитель);
		
		ДокументПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		ДокументПеремещение.Заполнить(Неопределено);
		ДокументПеремещение.Дата = ТекущаяДата();
		ДокументПеремещение.УстановитьНовыйНомер();
		
		ДокументПеремещение.Организация 		= Справочники.Организации.НайтиПоНаименованию(СтруктураПараметров.Организация);
		ДокументПеремещение.СкладОтправитель 	= мСкладОтправитель;
		ДокументПеремещение.СкладПолучатель		= Справочники.Склады.НайтиПоНаименованию(СтруктураПараметров.СкладПолучатель);
		ДокументПеремещение.Ответственный		= ПараметрыСеанса.ТекущийПользователь;
		ДокументПеремещение.ВидЦены				= Справочники.ВидыЦен.НайтиПоНаименованию("Вхідна");
		ДокументПеремещение.СтатусОтгрузки		= Перечисления.СтатусыОтгрузки.КОтгрузке;
		
		КлючСвязиСерийнихНомеров = 1;
		
		Для Каждого СтрокаКорзины ИЗ Объект.Корзина Цикл
			
			НоваяСтрока = ДокументПеремещение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорзины);

			Если ЗначениеЗаполнено(СтрокаКорзины.Упаковка) Тогда
				
				Коефициент						= ктсПолучитьКоэффициентУпаковки(СтрокаКорзины.Упаковка);
				НоваяСтрока.Количество 			= СтрокаКорзины.Количество * Коефициент;
				НоваяСтрока.КоличествоУпаковок 	= СтрокаКорзины.Количество;
				
			Иначе
							
				НоваяСтрока.Количество 			= СтрокаКорзины.Количество;
				НоваяСтрока.КоличествоУпаковок 	= СтрокаКорзины.Количество;
				
			КонецЕсли;
			
			
			МассивСН = СерийныеНомераКорзины.Получить(СтрокаКорзины.Номенклатура);
			
			Если МассивСН <> Неопределено Тогда
							
				НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязиСерийнихНомеров;
				
				Для Каждого СерийныйНомер ИЗ МассивСН Цикл

					НоваяСтрока = ДокументПеремещение.СерийныеНомера.Добавить();
					НоваяСтрока.КлючСвязиСерийныхНомеров = КлючСвязиСерийнихНомеров;
					НоваяСтрока.СерийныйНомер = СерийныйНомер;
					
				КонецЦикла;
				
				КлючСвязиСерийнихНомеров = КлючСвязиСерийнихНомеров + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ДокументПеремещение.Ссылка));
		СтруктураВозврата.Вставить("Пояснение", Строка(ДокументПеремещение.Ссылка));
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
КонецФункции


&НаСервере
Функция ПолучитьНалогооблажение()
	
	Возврат Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	
КонецФункции

&НаСервере
Функция ПолучитьНДС()
	
	Возврат Перечисления.СтавкиНДС.БезНДС;
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС)
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		
		Возврат 0.1;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		
		Возврат 0.18;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ктсПроверитьНалогообложение()
	
	Если Объект.Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции
	

&НаКлиенте
Процедура СравнениеОстатковПоСкладам(Команда)
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("ВидЦены", ВидЦены);
	
	ФормаСравнениеОстатковПоСкладам = ПолучитьФорму("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаСравнениеОстатковПоСкладам", СтруктураПередачи, ЭтаФорма);
	Результат = ФормаСравнениеОстатковПоСкладам.ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда
		
		СкладОтправитель 	= Результат.СкладОтправитель;
		СкладПолучатель		= Результат.СкладПолучатель;
		
		ОбъектКорзина = Объект.Корзина;
		Для Каждого СтрокаКорзины ИЗ Результат.МассивПередачи Цикл
			
			НоваяСтрока = ОбъектКорзина.Добавить();
			НоваяСтрока.Код = СтрокаКорзины.Код;
			НоваяСтрока.СерийныйНомер = СтрокаКорзины.СерийныйНомер;
			НоваяСтрока.Номенклатура = СтрокаКорзины.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаКорзины.Характеристика;
			НоваяСтрока.Количество = СтрокаКорзины.Количество;
			НоваяСтрока.ВидЦены = СтрокаКорзины.ВидЦены;
			НоваяСтрока.Цена = СтрокаКорзины.Цена;
			НоваяСтрока.Сумма = СтрокаКорзины.Сумма;
			
		КонецЦикла;
		
		КорзинаПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ктсПроверитьЗаполненияСвойств()
	
	Возврат (
				ЗначениеЗаполнено(ВыборСклада)
			И	ЗначениеЗаполнено(Валюта)
			//И 	ЗначениеЗаполнено(ВидЦены)
			);
	
		КонецФункции
		
		

&НаКлиенте
Процедура ктсВыполнитьЗапрос()
	
	Если НЕ ктсПроверитьЗаполненияСвойств() Тогда
		ПодборТаблицаНоменклатура.Очистить();
		Возврат;
	КонецЕсли;
	
	Если глЗагружатьНоменклатуру Тогда
		
		Состояние("Загрузка списка номенклатуры....");
		
		ИерархияНоменклатурыНаФорме = Элементы.ИерархияНоменклатуры;
		ТекущиеДанные 				= ИерархияНоменклатурыНаФорме.ТекущиеДанные;
		ГруппаНоменклатуры			= Неопределено;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
				
				ГруппаНоменклатуры = ТекущиеДанные.Ссылка
				
		КонецЕсли;

		
		
		ктсВыполнитьЗапросИерархияНоменклатуры(ГруппаНоменклатуры);
							
	Иначе
		
		глЗагружатьНоменклатуру = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// МОИ СЕРВЕРНЫЕ ФУНКЦИИ	
 
&НаСервереБезКонтекста 
Процедура ктсСформироватьСписокВыбораСправочника(ДанныеВыбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Ссылка,
	               |	Склады.Представление
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатыВыполненияЗапроса = Запрос.Выполнить(); 
	ВыборкаИзРезультатовЗапроса = РезультатыВыполненияЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Выбор = Новый СписокЗначений;
		
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		Выбор.Добавить(ВыборкаИзРезультатовЗапроса.Представление);
	КонецЦикла;
	
	ДанныеВыбора = Выбор.Скопировать();
	
	Если ПривилегированныйРежим() Тогда
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсПолучитьАдрессКартинкиНоменклатуры(ТекущийЭлемент, УникальныйИдентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ФайлКартинки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	 
	Запрос.УстановитьПараметр("Номенклатура", ТекущийЭлемент.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	 
	РезультатыВыполненияЗапроса = Запрос.Выполнить(); 
	ВыборкаИзРезультатовЗапроса = РезультатыВыполненияЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	 
	АдрессКартинки = "";
	 
	Если ВыборкаИзРезультатовЗапроса.Следующий() Тогда
		
		ФайлКартинкиЗапроса = ВыборкаИзРезультатовЗапроса.ФайлКартинки;
		
		Если НЕ ФайлКартинкиЗапроса.Пустая() Тогда
			АдрессКартинки = ктсПолучитьНавигационнуюСсылкуКартинки(ФайлКартинкиЗапроса, УникальныйИдентификатор);
		Иначе
			АдрессКартинкиы = "";
		КонецЕсли;
	КонецЕсли;	
	
	Возврат АдрессКартинки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПустаяСсылкаСправочникаНоменклатура()
	
	Возврат Справочники.Номенклатура.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ктсПолучитьСписокСкладовДляОтбора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склад.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склад";
	
	РезультатыВыполненияЗапроса = Запрос.Выполнить(); 
	ВыборкаИзРезультатовЗапроса = РезультатыВыполненияЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Склады = Новый Массив;
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		Склады.Добавить(ВыборкаИзРезультатовЗапроса.Ссылка);
	КонецЦикла;
	
	Возврат Склады;
	
КонецФункции

&НаСервереБезконтекста
Функция ктсПолучитьКоефициентВалют(ТекущаяВалюта, НоваяВалюта)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыСрезПоследнихДляТекущейВалюты.Курс * КурсыСрезПоследнихДляНовойВалюты.Кратность / (КурсыСрезПоследнихДляНовойВалюты.Курс * КурсыСрезПоследнихДляТекущейВалюты.Кратность) КАК Коефициент
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаТекущая) КАК КурсыСрезПоследнихДляТекущейВалюты
    |
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаНовая) КАК КурсыСрезПоследнихДляНовойВалюты
	|ПО (Истина)";
	
	Запрос.УстановитьПараметр("ВалютаТекущая", ТекущаяВалюта);
	Запрос.УстановитьПараметр("ВалютаНовая", НоваяВалюта);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыВыполненияЗапроса = Запрос.Выполнить(); 
	ВыборкаИзРезультатовЗапроса = РезультатыВыполненияЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если ВыборкаИзРезультатовЗапроса.Следующий() Тогда
		Возврат ВыборкаИзРезультатовЗапроса.Коефициент;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

&НаСервере
Процедура ктсОчиститьКорзину()
	
	Объект.Корзина.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсПолучитьПарметрыПоставщика(Контрагент)
	
	Если Контрагент.Партнер.Поставщик Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияСПоставщиками.Партнер 	КАК Партнер,
		|	СоглашенияСПоставщиками.Ссылка  	КАК Соглашение,
		|	СоглашенияСПоставщиками.Организация КАК Организация,
		|	СоглашенияСПоставщиками.Склад		КАК Склад,
		|	СоглашенияСПоставщиками.Валюта		КАК Валюта
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Если РезультатЗапроса.Следующий() Тогда
			
			СтруктураПоставщика = Новый Структура;
			СтруктураПоставщика.Вставить("Партнер", РезультатЗапроса.Партнер);
			СтруктураПоставщика.Вставить("Соглашение", РезультатЗапроса.Соглашение);
			СтруктураПоставщика.Вставить("Организация", РезультатЗапроса.Организация);
			СтруктураПоставщика.Вставить("Склад", РезультатЗапроса.Склад);
			СтруктураПоставщика.Вставить("Валюта", РезультатЗапроса.Валюта);
			
			Возврат СтруктураПоставщика;
		Иначе
			
			СтруктураПоставщика = Новый Структура;
			СтруктураПоставщика.Вставить("Партнер", Контрагент.Партнер);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ктсОбработкаСвободногоОстатка()
	
	МассивЗначений = Новый Массив;
	
	Для Каждого Строка ИЗ Объект.Корзина Цикл
		
		НоменклатураКорзины 		= Строка.Номенклатура;
		ХарактеристикаНоменклауры   = Строка.Характеристика;
		ТипыНоменклатуры			= Перечисления.ТипыНоменклатуры;
		
		СтруктураПроверки = Новый Структура;
		
		Если НоменклатураКорзины.ТипНоменклатуры = ТипыНоменклатуры.Товар Тогда
		
			Запрос = Новый Запрос;      
			
			ПараметрыЗапроса = " Номенклатура=&Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураКорзины);
			Запрос.УстановитьПараметр("Упаковка", Строка.Упаковка);
			СтруктураПроверки.Вставить("Номенклатура", НоменклатураКорзины.Наименование);
			СтруктураПроверки.Вставить("Характеристика", ХарактеристикаНоменклауры.Наименование);
			Если НЕ Строка.Характеристика.Пустая() Тогда
				ПараметрыЗапроса = ПараметрыЗапроса + " И Характеристика=&Характеристика";
				Запрос.УстановитьПараметр("Характеристика", ХарактеристикаНоменклауры);
			КонецЕсли;
			Если ТипЗнч(ВыборСклада) = Тип("СправочникСсылка.Склады") Тогда
				ПараметрыЗапроса = ПараметрыЗапроса + " И Склад=&Склад";
				Запрос.УстановитьПараметр("Склад", ВыборСклада);
			КонецЕсли;
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Остатки.ВНаличииОстаток /
			|	ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 1)КАК Остаток
			|ИЗ
			|	РегистрНакопления.СвободныеОстатки.Остатки(,"+ПараметрыЗапроса+") КАК Остатки";
			
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			СвободныйОстаток = 0;
			Если РезультатЗапроса.Следующий() Тогда
				СвободныйОстаток = РезультатЗапроса.Остаток;
			КонецЕсли;
			
			СтруктураПроверки.Вставить("Остаток", СвободныйОстаток);
			
			СтруктураПроверки.Вставить("ТипНоменклатуры", ТипыНоменклатуры.Товар);
			
		Иначе
			
			СтруктураПроверки.Вставить("ТипНоменклатуры", ТипыНоменклатуры.Услуга);
			
		КонецЕсли;
		
		МассивЗначений.Добавить(СтруктураПроверки);
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

&НаСервере
Процедура ктсЗагрузитьНоменклатуру(ТекущаяГруппа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ТекущаяГруппа = Элементы.ИерархияНоменклатуры.ТекущиеДанные.Ссылка;
	
	Объект.Корзина.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатуры.Номенклатура.Код	КАК Код,
	|	ЦеныНоменклатуры.Номенклатура 		КАК Номенклатура,
	|	ЦеныНоменклатуры.Номенклатура.ИспользоватьСерийныеНомера КАК СерийныйНомер,
	|	ЦеныНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Характеристика     КАК Характеристика,
	|	ЦеныНоменклатуры.Цена				КАК Цена,
	|	ЦеныНоменклатуры.Валюта				КАК Валюта,
	|	ЦеныНоменклатуры.Упаковка			КАК Упаковка
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних() КАК ЦеныНоменклатуры
	|	
    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,"+?(ПустаяСтрока(ВыборСклада), "", " Склад В (&ПараметрСклад)")+") КАК ТоварыНаСкладахОстатки
	|ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|
	|ГДЕ
	|	ЦеныНоменклатуры.Период 							>= &ДатаСравненияЦен
	|И	ЦеныНоменклатуры.ВидЦены 							= &ТипЦен
	|И	ЦеныНоменклатуры.Валюта								= &Валюта
	|И	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)	> 0" +
	?(ТекущаяГруппа = Неопределено, " ","
	|И	ЦеныНоменклатуры.Номенклатура В ИЕРАРХИИ(&ГрупаНоменклатуры)");
	
	Запрос.УстановитьПараметр("ДатаСравненияЦен", ДатаСравненияЦен);
	Запрос.УстановитьПараметр("ТипЦен", ВидЦены);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Если НЕ ПустаяСтрока(ВыборСклада) Тогда
		Запрос.УстановитьПараметр("ПараметрСклад", Справочники.Склады.НайтиПоНаименованию(ВыборСклада));
	КонецЕсли;
	Если ТекущаяГруппа <> Неопределено Тогда
		Запрос.УстановитьПараметр("ГрупаНоменклатуры", ТекущаяГруппа);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока РезультатыЗапроса.Следующий() Цикл
		
		НоваяСтрока = Объект.Корзина.Добавить();
		НоваяСтрока.Код = РезультатыЗапроса.Код;
		НоваяСтрока.Номенклатура = РезультатыЗапроса.Номенклатура;
		НоваяСтрока.Характеристика = РезультатыЗапроса.Характеристика;
		НоваяСтрока.СерийныйНомер = РезультатыЗапроса.СерийныйНомер;
		НоваяСтрока.ЕдиницаИзмерения = РезультатыЗапроса.ЕдиницаИзмерения;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Упаковка = РезультатыЗапроса.Упаковка;
		НоваяСтрока.ВидЦены = ВидЦены;
		НоваяСтрока.Цена = РезультатыЗапроса.Цена;
		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсТипНоменклатурыТовар(Номенклатура)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьЦеныНоменклатуры(Номенклатура, ВидыЦен, Валюта, Упаковка = Неопределено)
	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(
	|		ВЫБОР 
	|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0 
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаОбработки.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаОбработки.Курс, 0) > 0 
	|							ТОГДА
	|								ВЫБОР
	|									КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|									ТОГДА
	|										(ЕСТЬNULL(ЦеныНоменклатуры.Цена,0)*(КурсыСрезПоследнихВалютаЦены.Курс / КурсыСрезПоследнихВалютаЦены.Кратность / (КурсыСрезПоследнихВалютаОбработки.Курс / КурсыСрезПоследнихВалютаОбработки.Кратность)))
	|									ИНАЧЕ
	|										(ЕСТЬNULL(ЦеныНоменклатуры.Цена,0)*(КурсыСрезПоследнихВалютаЦены.Курс / КурсыСрезПоследнихВалютаЦены.Кратность / (КурсыСрезПоследнихВалютаОбработки.Курс / КурсыСрезПоследнихВалютаОбработки.Кратность)))/ЦеныНоменклатуры.Упаковка.Коэффициент
	|									КОНЕЦ";
	
	ТекстЗапроса = ТекстЗапроса + "
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 
	|							ВЫБОР
	|								КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|								ТОГДА
	|									ЕСТЬNULL(ЦеныНоменклатуры.Цена,0)
	|								ИНАЧЕ
	|                                    ЕСТЬNULL(ЦеныНоменклатуры.Цена,0)/ЦеныНоменклатуры.Упаковка.Коэффициент
	|							КОНЕЦ";
	ТекстЗапроса = ТекстЗапроса + "
	|				КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КАК Число(15,2)) 														КАК Цена,
	|	ЦеныНоменклатуры.Номенклатура											КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены В (&ВидыЦен) И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатуры	
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
	|	ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаОбработки
	|	ПО (ИСТИНА)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура В (&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Результаты = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		//СтруктураПередачи = Новый Структура();
		//СтруктураПередачи.Вставить("Цена", Выборка.Цена);
		//СтруктураПередачи.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		//СтруктураПередачи.Вставить("Упаковка", Выборка.Упаковка);
				
		Результаты.Вставить(Выборка.Номенклатура, Выборка.Цена);
	
	КонецЦикла; 
	
	Возврат Результаты;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ктсОбработкаСтрокиНаименованияЗакладки(НаименованиеЗакладки)
	
	Закладка 		= НРег(НаименованиеЗакладки);
	МассивЗамены    = Новый Массив;
	
	Для Инд = 1 По СтрДлина(Закладка) Цикл
	
		КодСимволаСтроки = КодСимвола(Закладка, Инд);
		// Украинський и русский алфавиты
		Если КодСимволаСтроки > 1071 И КодСимволаСтроки < 1104 Тогда
		
			Продолжить;
			
		КонецЕсли;
		// Английський алфавит
		Если КодСимволаСтроки > 96 И КодСимволаСтроки < 123 Тогда
		
			Продолжить;
		
		КонецЕсли;
		// Буква ё
		Если КодСимволаСтроки = 1105 Тогда
		
			Продолжить;
		
		КонецЕсли;
		// Цыфри
		//Если КодСимволаСтроки > 47 И КодСимволаСтроки < 58 Тогда
		//
		//	Продолжить;
		//
		//КонецЕсли;
		// Буквы ї і ґ запрещены
		МассивЗамены.Добавить(Символ(КодСимволаСтроки));
			
	КонецЦикла; 
	
	Для каждого СимволДляЗамены Из МассивЗамены Цикл
	
		Закладка = СтрЗаменить(Закладка, СимволДляЗамены, "");
	
	КонецЦикла; 
	
	Возврат Закладка;
	
КонецФункции

&НаСервере
Процедура ктсСоздатьЗакладку(ИмяЗакладки)
	
	НаименованиеКоманды = ктсОбработкаСтрокиНаименованияЗакладки(ИмяЗакладки);
	НоваяКоманда = Команды.Добавить(НаименованиеКоманды);
	НоваяКоманда.Действие = "ктсДействиеЗакладок";
	НовыйЭлемент = Элементы.Добавить(НаименованиеКоманды, Тип("КнопкаФормы"), Элементы.ПодборТаблицаНоменклатураГруппаЗакладки);
	НовыйЭлемент.ИмяКоманды = НаименованиеКоманды;
	НовыйЭлемент.Заголовок = ИмяЗакладки;
	
КонецПроцедуры

&НаСервере
Процедура ктсУдалитьЗакладку(ИмяЗакладки)
	
	НаименованиеКоманды = ктсОбработкаСтрокиНаименованияЗакладки(ИмяЗакладки); 
	ЭлементКУдалению = Элементы.Найти(НаименованиеКоманды);
	Если ЭлементКУдалению <> Неопределено Тогда
	
		Элементы.Удалить(ЭлементКУдалению);
		
		КомандаКУдалению = Команды.Найти(НаименованиеКоманды);
		Если КомандаКУдалению <> Неопределено Тогда
		
			Команды.Удалить(КомандаКУдалению);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсПолучитьСоглашениеПоПартнеру(ПартнерСсылка)
	
	СтруктураПередачи = Новый Структура;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникСоглашенияСКлиентами.Ссылка 		КАК Соглашение,
	| 	СправочникСоглашенияСКлиентами.Организация  КАК Организация,
	|	СправочникСоглашенияСКлиентами.ВидЦен		КАК ВидЦены,
	|   СправочникСоглашенияСКлиентами.Склад		КАК Склад,
	|   СправочникСоглашенияСКлиентами.Валюта		КАК Валюта,
	|	Контрагенты.Ссылка							КАК Контрагент
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СправочникСоглашенияСКлиентами 
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|ПО
	|	Контрагенты.Партнер = &Партнер
	|ГДЕ
	|ВЫБОР
	|	КОГДА
	|		&Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ВЫБОР
	|			КОГДА (СправочникСоглашенияСКлиентами.Типовое
	|			И (СправочникСоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|			ИЛИ СправочникСоглашенияСКлиентами.СегментПартнеров В
	|				(ВЫБРАТЬ
	|					ПартнерыСегмента.Сегмент
	|				ИЗ
	|					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|				ГДЕ
	|					ПартнерыСегмента.Партнер = &Партнер))
	|				ИЛИ
	|					(НЕ СправочникСоглашенияСКлиентами.Типовое И
	|					СправочникСоглашенияСКлиентами.Партнер = &Партнер))
	|			ТОГДА
	|				ИСТИНА
	|			
	|			ИНАЧЕ
	|				ЛОЖЬ
	|
	|			КОНЕЦ
	|КОНЕЦ";
	
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка	= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПередачи.Вставить("Соглашение", Выборка.Соглашение);
		СтруктураПередачи.Вставить("Организация", Выборка.Организация);
		СтруктураПередачи.Вставить("ВидЦены", Выборка.ВидЦены);
		//СтруктураПередачи.Вставить("Склад", Выборка.Склад);
		СтруктураПередачи.Вставить("Валюта", Выборка.Валюта);
		Если НЕ Выборка.Контрагент = Неопределено Тогда
			СтруктураПередачи.Вставить("Контрагент", Выборка.Контрагент);
		Иначе
			СтруктураПередачи.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		КонецЕсли;
		
		Возврат СтруктураПередачи;
		
	КонецЕсли;
	
	СтруктураПередачи.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	СтруктураПередачи.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураПередачи.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	//СтруктураПередачи.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	СтруктураПередачи.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	СтруктураПередачи.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат СтруктураПередачи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьПустуюСсылкуПриВыбореКлиента()
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	СтруктураПередачи.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураПередачи.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	//СтруктураПередачи.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	СтруктураПередачи.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	СтруктураПередачи.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Возврат СтруктураПередачи;
	
КонецФункции

&НаСервереБезКонтекста
Функция  ктсПолучитьВидЦенИВалютуЗаСоглашением(СоглашениеСсылка)
	
	Запрос = Новый Запрос;
	СтруктураПередачи = Новый Структура;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.ВидЦен,
	|	Справочник.Валюта
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СоглашениеСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПередачи.Вставить("ВидЦены", Выборка.ВидЦен);
		СтруктураПередачи.Вставить("Валюта", Выборка.Валюта);
		
		Возврат СтруктураПередачи;
		
	КонецЕсли;
	
	СтруктураПередачи.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	СтруктураПередачи.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());	
	
	Возврат СтруктураПередачи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьпустуюЦениИВалюту()
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	СтруктураПередачи.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	
	Возврат СтруктураПередачи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьСтакуНДСЗаНоменклатурой(НоменклатураСсылка)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.СтавкаНДС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.СтавкаНДС;
		
	КонецЕсли;
	
	Возврат Перечисления.СтавкиНДС.НДС0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьГарантиюПоНоменклатуре(МассивСсылокНоменклатуры)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеРеквизиты.Значение,
	|	ДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В (&МассивСсылокНоменклатуры)
	|И
	|	ДополнительныеРеквизиты.Свойство = &СвойствоГарантия";
	
	Запрос.УстановитьПараметр("МассивСсылокНоменклатуры", МассивСсылокНоменклатуры);
	Запрос.УстановитьПараметр("СвойствоГарантия", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Гарантія"));
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Результаты = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Результаты.Вставить(Выборка.Ссылка, Выборка.Значение);
		
	КонецЦикла;
	
	Возврат Результаты;
	
КонецФункции

&НаСервере
Функция ктсПолучитьДанныеДляБыстрогоОтчетапоРезервам(НоменклатураСсылка)
	
	ВыборкаСкладов = Справочники.Склады.Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет =  РеквизитФормыВЗначение("Объект").ПолучитьМакет("БыстрыйОтчетПоОстаткам");
	
	Пока ВыборкаСкладов.Следующий() Цикл
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК СвободныйОстаток,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК ВРезервеОстаток
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склад)) КАК СвободныеОстатки
		|ГДЕ
		|	(СвободныеОстатки.Номенклатура = &НоменклатураСсылка)";
		Запрос.УстановитьПараметр("Склад", ВыборкаСкладов.Ссылка);
		Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			Секция = Макет.ПолучитьОбласть("ОстаткиНаСкладе");
			Секция.Параметры.Склад = ВыборкаСкладов.Ссылка;
			Секция.Параметры.Остаток = Выборка.СвободныйОстаток;
			Секция.Параметры.Резерв = Выборка.ВРезервеОстаток;
		
			ТабличныйДокумент.Присоединить(Секция);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьВходнуюЦену(НоменклатураСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(РегистрЦеныНоменклатуры.Цена,0) КАК Цена,
	|	РегистрЦеныНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	|			ВидЦены В
	|				(
	|					ВЫБРАТЬ 
	|						СправочникВидыЦен.Ссылка
	|					ИЗ
	|						Справочник.ВидыЦен КАК СправочникВидыЦен
	|					ГДЕ
	|						СправочникВидыЦен.Наименование = ""Вхідна""
	|				) И
	|			Номенклатура = &Номенклатура) КАК РегистрЦеныНоменклатуры";	
	
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	//Запрос.УстановитьПараметр("Склад", СкладСсылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатыЗапроса = Запрос.Выполнить();
	Выборка = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураЦены = Новый Структура;
		СтруктураЦены.Вставить("Цена", Формат(Выборка.Цена, "ЧДЦ=2"));
		СтруктураЦены.Вставить("Номенклатура", НоменклатураСсылка);
		Возврат СтруктураЦены;
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

&НаСервере
Процедура ктсПоискНоменклатурыПоКоду(КодНоменклатуры, ТочныйПоиск, ГруппаНоменклатуры = Неопределено)
	
	ПодборТаблицаНоменклатура.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Код	КАК Код,
	|	СпрНоменклатура.Артикул	КАК Артикул,
	|	СпрНоменклатура.Ссылка	КАК Номенклатура,
	|	0 КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ("""") КАК Гарантия,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК СвободныйОстаток,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК НаСкладеВРезерве,
	|	ДАТАВРЕМЯ(0001,01,01) КАК ДатаПоследнегоПоступления,
	|	0 КАК ОжыдаемыйТовар
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|								
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад В(&Склад)) КАК СвободныеОстатки
	|	ПО
	|		(СвободныеОстатки.Номенклатура = СпрНоменклатура.Ссылка)
	|				
	|ГДЕ
	|	СпрНоменклатура.Код";
	
	Если ТочныйПоиск Тогда
		ТекстЗапроса = ТекстЗапроса + " = &Код";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&Код+""%""";
	КонецЕсли;
	
	Если ТолькоВНаличии Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|И	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) > 0";
		
	КонецЕсли;
	
	Если НЕ ГруппаНоменклатуры = Неопределено Тогда
				
		ТекстЗапроса = ТекстЗапроса + "
		|И	СпрНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)";
		
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО СпрНоменклатура.Наименование ВОЗР";
	
	Запрос.УстановитьПараметр("Код", СокрЛП(КодНоменклатуры));
	Запрос.УстановитьПараметр("Склад", ВыборСклада);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить());	
	
КонецПроцедуры

&НаСервере
Процедура ктсВыполнитьПоиск(ПараметрПоиска, ТочныйПоиск, ГруппаНоменклатуры = Неопределено)
	
	ПодборТаблицаНоменклатура.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Код	КАК Код,
	|	СпрНоменклатура.Артикул	КАК Артикул,
	|	СпрНоменклатура.Ссылка	КАК Номенклатура,
	|	0 КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ("""") КАК Гарантия,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК СвободныйОстаток,
	|	ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК НаСкладеВРезерве,
	|	ДАТАВРЕМЯ(0001,01,01) КАК ДатаПоследнегоПоступления,
	|	ЕСТЬNULL(ТоварыКПоступлению.КПоступлениюОстаток,0) КАК ОжыдаемыйТовар
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|								
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад В(&Склад)) КАК СвободныеОстатки
	|	ПО
	|		(СвободныеОстатки.Номенклатура = СпрНоменклатура.Ссылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад) КАК ТоварыКПоступлению
	|	ПО
	|		ТоварыКПоступлению.Номенклатура = СпрНоменклатура.Ссылка
	|	И	ТоварыКПоступлению.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|
	|ГДЕ
	|	(СпрНоменклатура.Код";
	
	Если ТочныйПоиск Тогда
		ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЛИ	СпрНоменклатура.Артикул";
	Если ТочныйПоиск Тогда
		ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|ИЛИ	СпрНоменклатура.Наименование";
	Если ТочныйПоиск Тогда
		ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%"")";
	КонецЕсли;

	
	Если ТолькоВНаличии Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|И	
		|	(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) > 0
		|ИЛИ ЕСТЬNULL(ТоварыКПоступлению.КПоступлениюОстаток,0) > 0)";
		
	КонецЕсли;
	
	Если НЕ ГруппаНоменклатуры = Неопределено Тогда
				
		ТекстЗапроса = ТекстЗапроса + "
		|И	СпрНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)";
		
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО СпрНоменклатура.Наименование ВОЗР";
	
	Запрос.УстановитьПараметр("ПараметрПоиска", СокрЛП(ПараметрПоиска));
	Запрос.УстановитьПараметр("Склад", ВыборСклада);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ктсПоискНоменклатурыПоНаименованию(НаименованиеНоменклатуры, ТочныйПоиск, ГруппаНоменклатуры = Неопределено)
	
	ПодборТаблицаНоменклатура.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Ссылка	КАК Номенклатура,
	|	0 КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ("""") КАК Гарантия,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК СвободныйОстаток,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК НаСкладеВРезерве,
	|	ДАТАВРЕМЯ(0001,01,01) КАК ДатаПоследнегоПоступления,
	|	0 КАК ОжыдаемыйТовар
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|								
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склад)) КАК СвободныеОстатки
	|	ПО
	|		(СвободныеОстатки.Номенклатура = СпрНоменклатура.Ссылка)
	|				
	|ГДЕ
	|	СпрНоменклатура.Наименование";
	
	Если ТочныйПоиск Тогда
		ТекстЗапроса = ТекстЗапроса + " = &Наименование";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&Наименование+""%""";
	КонецЕсли;
	
	Если ТолькоВНаличии Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|И	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) > 0";
		
	КонецЕсли;
	
	Если НЕ ГруппаНоменклатуры = Неопределено Тогда
				
		ТекстЗапроса = ТекстЗапроса + "
		|И	СпрНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)";
		
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО СпрНоменклатура.Наименование ВОЗР";
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(НаименованиеНоменклатуры));
	Запрос.УстановитьПараметр("Склад", ВыборСклада);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ктсПоискНоменклатурыПоАртикулу(НаименованиеАртикула, ТочныйПоиск, ГруппаНоменклатуры)
	
	ПодборТаблицаНоменклатура.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Код	КАК Код,
	|	СпрНоменклатура.Артикул	КАК Артикул,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	0 КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ("""") КАК Гарантия,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК СвободныйОстаток,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК НаСкладеВРезерве,
	|	ДАТАВРЕМЯ(0001,01,01) КАК ДатаПоследнегоПоступления,
	|	0 КАК ОжыдаемыйТовар
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|								
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад В (&Склад)) КАК СвободныеОстатки
	|	ПО
	|		(СвободныеОстатки.Номенклатура = СпрНоменклатура.Ссылка)
	|				
	|ГДЕ
	|	СпрНоменклатура.Артикул";
	
	Если ТочныйПоиск Тогда
		ТекстЗапроса = ТекстЗапроса + " = &Артикул";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&Артикул+""%""";
	КонецЕсли;
	
	Если ТолькоВНаличии Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|И	ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) > 0";
		
	КонецЕсли;
	
	Если НЕ ГруппаНоменклатуры = Неопределено Тогда
				
		ТекстЗапроса = ТекстЗапроса + "
		|И	СпрНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры)";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	УПОРЯДОЧИТЬ ПО СпрНоменклатура.Наименование ВОЗР";
	
	Запрос.УстановитьПараметр("Артикул", СокрЛП(НаименованиеАртикула));
	Запрос.УстановитьПараметр("Склад", ВыборСклада);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить());
	
Конецпроцедуры

&НаСервереБезКонтекста
Функция ктсРозбитьСтроку(Строка, ТочныйПоиск)
	
	МассивВозврата = Новый Массив;
	ЧислоВхождений = СтрЧислоВхождений(Строка, ",");
	Для Инд = 0 По ЧислоВхождений Цикл
		
		ИндексКомы = Найти(Строка, ",");
		СтрокаВМассив = СокрЛП(Сред(Строка,1,ИндексКомы-1));
		Если НЕ ПустаяСтрока(СтрокаВМассив) Тогда
			//РезультатСтрока = СтрокаВМассив;
			//Если НЕ ТочныйПоиск Тогда
			//	//РезультатСтрока = СтрЗаменить(РезультатСтрока, " ", "%");
			//	РезультатСтрока = "%" + РезультатСтрока + "%";
			//КонецЕсли;
			МассивВозврата.Добавить(СтрокаВМассив);
		КонецЕсли;
		Строка = Сред(Строка,ИндексКомы+1, СтрДлина(Строка) - ИндексКомы)
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьОстатокПоСсылке(НоменклатураСсылка, Склад, ВидЦены, Валюта, Упаковка = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Ссылка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0))";
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		
		Запрос.Текст = Запрос.Текст + "/ ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 1)";
		
	КонецЕсли;
	 
	Запрос.Текст = Запрос.Текст + " КАК СвободныйОстаток,";
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		ТекстЦены = "
		|	(ЕСТЬNULL(ЦеныНоменклатуры.Цена,0)*(КурсыСрезПоследнихВалютаЦены.Курс / КурсыСрезПоследнихВалютаЦены.Кратность / (КурсыСрезПоследнихВалютаОбработки.Курс / КурсыСрезПоследнихВалютаОбработки.Кратность)))";
		
		Если ЗначениеЗаполнено(Упаковка) Тогда
			
			ТекстЦены = ТекстЦены + "* ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 1)";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБОР
		|	КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|	ТОГДА" + ТекстЦены + "
		|	ИНАЧЕ" + ТекстЦены + "/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)
		|КОНЕЦ КАК Цена,";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст = "
		|0 КАК Цена,";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 1) КАК Коэффициент";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|1 КАК Коэффициент";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
    |ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура И Склад = &Склад ) КАК СвободныеОстатки
	|ПО
	|	СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка";
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
			|									ВидЦены = &ВидЦены И
			|									Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
			|ПО
			|	ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыСрезПоследнихВалютаЦены
			|	ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаОбработки
			|	ПО (ИСТИНА)";
			
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура";

	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(Склад));
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	Если ЗначениеЗаполнено(Упаковка) Тогда
		
		Запрос.УстановитьПараметр("Упаковка", Упаковка);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	КонецЕсли;
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	РезультатыЗапроса = Запрос.Выполнить();
	Выборка = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПередачи = Новый Структура();
					
		СтруктураПередачи.Вставить("СвободныйОстаток", Выборка.СвободныйОстаток);
		СтруктураПередачи.Вставить("Коэффициент", Выборка.Коэффициент);
		СтруктураПередачи.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
		СтруктураПередачи.Вставить("Цена", Выборка.Цена);
		
		Возврат СтруктураПередачи;
		
	КонецЕсли;	
	
	СтруктураПередачи = Новый Структура();
					
	СтруктураПередачи.Вставить("СвободныйОстаток", 0);
	СтруктураПередачи.Вставить("Коэффициент", 0);
	СтруктураПередачи.Вставить("ЕдиницаИзмерения", 0);
	СтруктураПередачи.Вставить("Цена", 0);
	
	Возврат СтруктураПередачи;

	
КонецФункции

&НаСервере
Функция НапечататьДокумент(МассивПередачи)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектФормы.ПолучитьМакет("МакетПечати");
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Присоединить(Секция);
	
	Для Каждого Элемент ИЗ МассивПередачи Цикл
		
		Секция = Макет.ПолучитьОбласть("Тело");
		Если ЗначениеЗаполнено(Элемент.Код) Тогда
			Секция.Параметры.Код 				= Элемент.Код;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.Артикул) Тогда
			Секция.Параметры.Артикул  			= Элемент.Артикул;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.Номенклатура) Тогда
			Секция.Параметры.Номенклатура    	= Элемент.Номенклатура;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.Цена) Тогда
			Секция.Параметры.Цена				= Формат(Строка(Элемент.Цена), "ЧДЦ=2") + " " + Строка(Валюта);
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.Гарантия) Тогда
			Секция.Параметры.Гарантия			= Элемент.Гарантия;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.СвободныйОстаток) Тогда
			Секция.Параметры.СвободныйОстаток   = Элемент.СвободныйОстаток;
		КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.НаСкладеВРезерве) Тогда
			Секция.Параметры.Резерв				= Элемент.НаСкладеВРезерве;
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(Секция);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьСтатусИспользованияНоменклатуры()
	
	Возврат Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьПоследнююДатуПоступления(МассивНоменклатуры)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		МАКСИМУМ(РегистрСебестоимость.Период) КАК Период,
	|		РегистрАналитики.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК РегистрСебестоимость
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитики
	|	ПО
	|		РегистрАналитики.КлючАналитики = РегистрСебестоимость.АналитикаУчетаНоменклатуры
	|	И	РегистрАналитики.Номенклатура В (&Номенклатура)			
	|	ГДЕ
	|	(		
	|		ТИПЗНАЧЕНИЯ(РегистрСебестоимость.Регистратор) = ТИП(Документ.ВводОстатков)
	|		ИЛИ 
	|		ТИПЗНАЧЕНИЯ(РегистрСебестоимость.Регистратор) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|	)
	|	И
	|	РегистрСебестоимость.АналитикаУчетаНоменклатуры В
	|														(
	|															ВЫБРАТЬ
	|																РегистрАналитики.КлючАналитики
	|															ИЗ
	|																РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрАналитики
	|															ГДЕ
	|																РегистрАналитики.Номенклатура В (&Номенклатура)
	|														) 
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитики.Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	СоответствиеНоменклатуры = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.Период);
	КонецЦикла;
		
	Возврат СоответствиеНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ктсУстановитьОтборПоИерархииНоменклатуры(ГруппаНоменклатуры, ПеречисленияТиповНоменклатуры)
	
	ОтборТаблицыНоменклатура 	= ПодборТаблицаНоменклатура.Отбор;
		
	ПодборТаблицаНоменклатура.Отбор.Элементы.Очистить();
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура.ЭтоГруппа",
		Ложь,
		Истина, ВидСравненияКомпоновкиДанных.Равно
	);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура",
		ГруппаНоменклатуры,
		ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии
	);
	
	Если ТолькоВНаличии Тогда
		ГруппаОтбораТолькоВНаличииНоменклатура = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОтборТаблицыНоменклатура.Элементы,
			"ГруппаТолькоВНаличии",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
		);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбораТолькоВНаличииНоменклатура,
			"СвободныйОстаток",
			0,
			ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Больше
		);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбораТолькоВНаличииНоменклатура,
			"Номенклатура.ТипНоменклатуры",
			ПеречисленияТиповНоменклатуры.Услуга,
			ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Равно
		);
	КонецЕсли;

	//Поиск = "";
	
КонецПроцедуры

&НаСервере
Процедура ктсУстановитьОтборПоВидуНоменклатуры(ГруппаВидаНоменклатуры, ПеречисленияТиповНоменклатуры)
	
	ОтборТаблицыНоменклатура 	= ПодборТаблицаНоменклатура.Отбор;
	//ОтборТаблицыХарактеристика 	= ПодборТаблицаХарактеристики.Отбор;
	
	ПодборТаблицаНоменклатура.Отбор.Элементы.Очистить();
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура.ЭтоГруппа",
		Ложь,
		Истина, ВидСравненияКомпоновкиДанных.Равно
	);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура.ВидНоменклатуры",
		ГруппаВидаНоменклатуры,
		ЗначениеЗаполнено(ГруппаВидаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии
	);

	Если ТолькоВНаличии Тогда
		ГруппаОтбораТолькоВНаличииНоменклатура = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОтборТаблицыНоменклатура.Элементы,
			"ГруппаТолькоВНаличии",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
		);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбораТолькоВНаличииНоменклатура,
			"СвободныйОстаток",
			0,
			ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Больше
		);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбораТолькоВНаличииНоменклатура,
			"Номенклатура.ТипНоменклатуры",
			ПеречисленияТиповНоменклатуры.Услуга,
			ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Равно
		);
	КонецЕсли;
	
	//Поиск = "";
	
КонецПроцедуры

&НаСервере
Процедура ктсОчиститьОтборы(ПеречисленияТиповНоменклатуры)
	
	ОтборТаблицыНоменклатура 	= ПодборТаблицаНоменклатура.Отбор;
	
	ПодборТаблицаНоменклатура.Отбор.Элементы.Очистить();
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура.ЭтоГруппа",
		Ложь,
		Истина, ВидСравненияКомпоновкиДанных.Равно
	);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПодборТаблицаНоменклатура,
		"Номенклатура",
		Неопределено,
		Истина, ВидСравненияКомпоновкиДанных.ВИерархии
	);
	
	Если ТолькоВНаличии Тогда
		ГруппаОтбораТолькоВНаличииНоменклатура = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОтборТаблицыНоменклатура.Элементы,
			"ГруппаТолькоВНаличии",
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
		);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбораТолькоВНаличииНоменклатура,
			"СвободныйОстаток",
			0,
			ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Больше
		);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбораТолькоВНаличииНоменклатура,
			"Номенклатура.ТипНоменклатуры",
			ПеречисленияТиповНоменклатуры.Услуга,
			ТолькоВНаличии, ВидСравненияКомпоновкиДанных.Равно
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗаказов(НоменклатураСсылка)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрЗаказов.ЗаказКлиента КАК ДокументЗаказа
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки() КАК РегистрЗаказов
	|ГДЕ
	|	РегистрЗаказов.Номенклатура = &Номенклатура";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	МассивДокументов = ТаблицаРезультатов.ВыгрузитьКолонку("ДокументЗаказа");
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьОжыданиеНоменклатуры(СписокНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ЗаказПоставщику,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Остаток
	|ИЗ
	|	(
	|		ВЫБРАТЬ
	|			РегистрЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|			ДокументПоступление.Ссылка КАК ДокументПоступление,
	|			ДокументОрдер.Ссылка КАК ДокументОрдер,                    
	|			РегистрЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|			РегистрЗаказыПоставщикамОстатки.КОформлениюОстаток КАК Остаток
	|		ИЗ
	|			РегистрНакопления.ЗаказыПоставщикам.Остатки() РегистрЗаказыПоставщикамОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ДокументПоступление
	|		ПО
	|			ДокументПоступление.ЗаказПоставщику = РегистрЗаказыПоставщикамОстатки.ЗаказПоставщику
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ДокументОрдер
	|		ПО
	|			ДокументОрдер.Распоряжение = РегистрЗаказыПоставщикамОстатки.ЗаказПоставщику
	|
	|		ГДЕ
	|			РегистрЗаказыПоставщикамОстатки.Номенклатура В(&Номенклатура)
	|
	|) КАК ВложенныйЗапрос
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.ДокументПоступление, 0) = 0
	|И	ЕСТЬNULL(ВложенныйЗапрос.ДокументОрдер, 0) = 0";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	
	РезультатыЗапроса = Запрос.Выполнить();
	Выборка = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(Выборка.Номенклатура, Выборка.Остаток);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьСписокСоглашений(ПартнерСсылка)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СправочникСоглашения.Ссылка,
	|	СправочникСоглашения.Наименование
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СправочникСоглашения
    |
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК РегистрПартнерыСегмента
	|ПО
	|	РегистрПартнерыСегмента.Партнер = &Партнер
	| 
	|ГДЕ
	|	СправочникСоглашения.СегментПартнеров = РегистрПартнерыСегмента.Сегмент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникСоглашения.Ссылка,
	|	СправочникСоглашения.Наименование
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СправочникСоглашения
	|ГДЕ
	|	СправочникСоглашения.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗарпоса 	= Запрос.Выполнить();
	Выборка				= РезультатЗарпоса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокДанных = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		СписокДанных.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("СписокДанных", СписокДанных);
	СтруктураПередачи.Вставить("Контрагент", ктсПолучитьКонтрагента(ПартнерСсылка));
	
	Возврат СтруктураПередачи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьСписокСоответствий(МассивНоменклатуры, ВидЦен, Валюта)
	
	СтруктураСоответствий = Новый Структура;
	СтруктураСоответствий.Вставить("СоответствиеИзЦенами", ктсПолучитьЦеныНоменклатуры(МассивНоменклатуры, ВидЦен, Валюта));
	СтруктураСоответствий.Вставить("СоответсвиеИзГарантией", ктсПолучитьГарантиюПоНоменклатуре(МассивНоменклатуры));
	//СтруктураСоответствий.Вставить("СоотвествиеСДатами", ктсПолучитьПоследнююДатуПоступления(МассивНоменклатуры));
	СтруктураСоответствий.Вставить("СоответсвиеСОжыданием", ктсПолучитьОжыданиеНоменклатуры(МассивНоменклатуры));
	
	Возврат СтруктураСоответствий;
	
КонецФункции

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ктсНачалоВыбораСоглашенияСКлиентом(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		ТекущаяДата(),
		,
		,
		,
		Истина
	);

	
КонецПроцедуры

&НаКлиенте
Процедура ктсНачалоВыбораСоглашенияСКлиентом(Элемент,
	                                      СтандартнаяОбработка,
	                                      Партнер,
	                                      Документ,
	                                      ДатаДокумента='00010101',
	                                      ТолькоТиповые=Ложь,
	                                      ТолькоИспользуемыеВРаботеТП=Ложь,
	                                      ТолькоНаКомиссию=Ложь,
	                                      ТолькоКредитные=Ложь
	                                      ) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер = ОткрытьФормуМодально ("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Клиент", Истина)));
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	Иначе
		ОткрытьФорму (
			"Справочник.СоглашенияСКлиентами.ФормаВыбора",
			Новый Структура("ДатаДокумента,Партнер,ТолькоТиповые,ТолькоИспользуемыеВРаботеТП,ТолькоНаКомиссию,ТолькоКредитные,ТекущаяСтрока", ДатаДокумента, Партнер, ТолькоТиповые, ТолькоИспользуемыеВРаботеТП, ТолькоНаКомиссию, ТолькоКредитные, Документ),
			Элемент
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсПолучитьПустиеСсылки()
	
	Структура = Новый Структура;
	Структура.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	Структура.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Структура.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	Структура.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьПараметрыСоглашения(СоглашениеСсылка)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникСоглашения.Организация КАК Организация,
	|	СправочникСоглашения.ВидЦен КАК ВидЦены,
	|	СправочникСоглашения.Валюта КАК Валюта,
	|	СправочникСоглашения.Склад КАК Склад
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СправочникСоглашения
	|ГДЕ
	|	СправочникСоглашения.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", СоглашениеСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СтруктураВозврат = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		
		СтруктураВозврат.Вставить("Организация", Выборка.Организация);
		СтруктураВозврат.Вставить("ВидЦены", Выборка.ВидЦены);
		СтруктураВозврат.Вставить("Валюта", Выборка.Валюта);
		СтруктураВозврат.Вставить("Склад", Выборка.Склад);
		
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьКонтрагента(Партнер)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникКонтрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты
	|ГДЕ
 	|	СправочникКонтрагенты.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ктсПолучитьТекущегоПользователя()
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Возврат ТекПользователь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьСсылкуНаОбработкуОтчет(Наименование)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОбработки
	|ГДЕ
	|	ДополнительныеОбработки.Наименование = &Наименование
	|И	ДополнительныеОбработки.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ктсВыполнитьЗапросИерархияНоменклатуры(РодительСсылка, Обновить = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодборТаблицаНоменклатура.Очистить();
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
	
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ";
		
		Если РодительСсылка <> Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры) И";
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Поиск) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "(
			|СправочникНоменклатура.Код";
			
			Если ТочныйПоиск Тогда
				ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ИЛИ	СправочникНоменклатура.Артикул";
			Если ТочныйПоиск Тогда
				ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "
			|ИЛИ	СправочникНоменклатура.Наименование";
			Если ТочныйПоиск Тогда
				ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ") И";
			
			Запрос.УстановитьПараметр("ПараметрПоиска", Поиск);
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	(НЕ СправочникНоменклатура.ЭтоГруппа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникНоменклатуры.Номенклатура.Код КАК Код,
		|	ИсточникНоменклатуры.Номенклатура.Артикул КАК Артикул,
		|	ИсточникНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РегистрЦенаНоменклатуры.Упаковка, &ПустаяУпаковка) = &ПустаяУпаковка
		|		ТОГДА ИсточникНоменклатуры.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ &ПустаяЕдиницаИзмерения 
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(РегистрЦенаНоменклатуры.Цена,0) * ((КурсЦены.Курс / КурсЦены.Кратность)/(КурсОбработки.Курс/КурсОбработки.Кратность)) КАК Цена,
		|	ЕСТЬNULL(РегистрЦенаНоменклатуры.Упаковка, &ПустаяУпаковка) КАК Упаковка,
		|	ЕСТЬNULL(РегистрТоварыКПоступлению.КПоступлениюОстаток, 0) / ЕСТЬNULL(РегистрЦенаНоменклатуры.Упаковка.Коэффициент, 1) КАК ОжыдаемыйТовар,
		|	(ЕСТЬNULL(РегистрОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РегистрОстатки.ВРезервеОстаток, 0)) / ЕСТЬNULL(РегистрЦенаНоменклатуры.Упаковка.Коэффициент, 1) КАК СвободныйОстаток,
		|	ЕСТЬNULL(РегистрОстатки.ВРезервеОстаток, 0) / ЕСТЬNULL(РегистрЦенаНоменклатуры.Упаковка.Коэффициент, 1) КАК НаСкладеВРезерве,
		|   НоменклатураДополнительныеРеквизиты.Значение КАК Гарантия,
		|	ТабПоследнегоПоступления.Дата КАК ДатаПоследнегоПоступления
		|ИЗ
		|	ТаблицаНоменклатура КАК ИсточникНоменклатуры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
		|															ВидЦены = &ВидЦены
		|														И	Номенклатура В
		|															(
		|																ВЫБРАТЬ
		|																	ТаблицаНоменклатура.Номенклатура
		|																ИЗ
		|																	ТаблицаНоменклатура
		|															)
		|														И	Характеристика = &ПустаяХарактеристика) КАК РегистрЦенаНоменклатуры
		|ПО
		|	РегистрЦенаНоменклатуры.Номенклатура = ИсточникНоменклатуры.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(,Валюта = &ВалютаЦены) КАК КурсЦены
		|ПО
		|	(ИСТИНА)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(,Валюта = &ВалютаОбработки) КАК КурсОбработки
		|ПО
		|	(ИСТИНА)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(,
		|											Номенклатура В
		|												(
		|													ВЫБРАТЬ
		|														ТаблицаНоменклатура.Номенклатура
		|													ИЗ
		|														ТаблицаНоменклатура
		|												)
		|										И	Характеристика = &ПустаяХарактеристика
		|										И	Склад = &Склад) КАК РегистрТоварыКПоступлению
		|ПО
		|	РегистрТоварыКПоступлению.Номенклатура = ИсточникНоменклатуры.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,
		|											Номенклатура В
		|												(
		|													ВЫБРАТЬ
		|														ТаблицаНоменклатура.Номенклатура
		|													ИЗ
		|														ТаблицаНоменклатура
		|												)
		|										И	Характеристика = &ПустаяХарактеристика
		|										И	Склад = &Склад) КАК РегистрОстатки
		|ПО
		|	РегистрОстатки.Номенклатура = ИсточникНоменклатуры.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ПО 
		|	ИсточникНоменклатуры.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|И	НоменклатураДополнительныеРеквизиты.Свойство.Наименование = &Свойство
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (
		|				ВЫБРАТЬ
		|					МАКСИМУМ(ПЕРИОД) КАК Дата,
		|					Номенклатура
		|				ИЗ
		|					РегистрНакопления.ТоварыНаСкладах
		|				ГДЕ
		|					(ТИПЗНАЧЕНИЯ(Регистратор.Распоряжение) = ТИП(Документ.ПоступлениеТоваровУслуг)
		|				ИЛИ  ТИПЗНАЧЕНИЯ(Регистратор.Распоряжение) = ТИП(Документ.ЗаказПоставщику))
        |
		|				СГРУППИРОВАТЬ ПО Номенклатура
		|												)КАК ТабПоследнегоПоступления
		|ПО
		|	ТабПоследнегоПоступления.Номенклатура = ИсточникНоменклатуры.Номенклатура";
		
		Если ТолькоВНаличии Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|		ЕСТЬNULL(РегистрОстатки.ВналичииОстаток, 0) > 0
			|ИЛИ    ЕСТЬNULL(РегистрТоварыКПоступлению.КПоступлениюОстаток, 0) > 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникНоменклатуры.Номенклатура.Наименование";
		
		Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(ВыборСклада));
		Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

		Если ЗначениеЗаполнено(ВидЦены) Тогда
			Запрос.УстановитьПараметр("ВалютаЦены", ВидЦены.ВалютаЦены);
			Запрос.УстановитьПараметр("ВалютаОбработки", Валюта);
			Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
		КонецЕсли;
		Запрос.УстановитьПараметр("ГруппаНоменклатуры", РодительСсылка);
		Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		Запрос.УстановитьПараметр("Свойство", "Гарантія");
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой));
		
	Иначе
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ";
		
		Если РодительСсылка <> Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&ГруппаНоменклатуры) И";
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Поиск) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "(
			|СправочникНоменклатура.Код";
			
			Если ТочныйПоиск Тогда
				ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ИЛИ	СправочникНоменклатура.Артикул";
			Если ТочныйПоиск Тогда
				ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
			КонецЕсли;

			ТекстЗапроса = ТекстЗапроса + "
			|ИЛИ	СправочникНоменклатура.Наименование";
			Если ТочныйПоиск Тогда
				ТекстЗапроса = ТекстЗапроса + " = &ПараметрПоиска";
			Иначе
				ТекстЗапроса = ТекстЗапроса + " ПОДОБНО ""%""+&ПараметрПоиска+""%""";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ") И";
			
			Запрос.УстановитьПараметр("ПараметрПоиска", Поиск);
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	(НЕ СправочникНоменклатура.ЭтоГруппа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникНоменклатуры.Номенклатура.Код КАК Код,
		|	ИсточникНоменклатуры.Номенклатура.Артикул КАК Артикул,
		|	ИсточникНоменклатуры.Номенклатура КАК Номенклатура,
		|	ИсточникНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	0 КАК Цена,
		|	0 КАК Упаковка,
		|	ЕСТЬNULL(РегистрТоварыКПоступлению.КПоступлениюОстаток, 0) КАК ОжыдаемыйТовар,
		|	(ЕСТЬNULL(РегистрОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(РегистрОстатки.ВРезервеОстаток, 0)) КАК СвободныйОстаток,
		|	ЕСТЬNULL(РегистрОстатки.ВРезервеОстаток, 0) КАК НаСкладеВРезерве,
		|   НоменклатураДополнительныеРеквизиты.Значение КАК Гарантия
		|ИЗ
		|	ТаблицаНоменклатура КАК ИсточникНоменклатуры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(,
		|											Номенклатура В
		|												(
		|													ВЫБРАТЬ
		|														ТаблицаНоменклатура.Номенклатура
		|													ИЗ
		|														ТаблицаНоменклатура
		|												)
		|										И	Характеристика = &ПустаяХарактеристика
		|										И	Склад = &Склад) КАК РегистрТоварыКПоступлению
		|ПО
		|	РегистрТоварыКПоступлению.Номенклатура = ИсточникНоменклатуры.Номенклатура
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(,
		|											Номенклатура В
		|												(
		|													ВЫБРАТЬ
		|														ТаблицаНоменклатура.Номенклатура
		|													ИЗ
		|														ТаблицаНоменклатура
		|												)
		|										И	Характеристика = &ПустаяХарактеристика
		|										И	Склад = &Склад) КАК РегистрОстатки
		|ПО
		|	РегистрОстатки.Номенклатура = ИсточникНоменклатуры.Номенклатура
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ПО 
		|	ИсточникНоменклатуры.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|И	НоменклатураДополнительныеРеквизиты.Свойство.Наименование = &Свойство";
		
		Если ТолькоВНаличии Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|		ЕСТЬNULL(РегистрОстатки.ВналичииОстаток, 0) > 0
			|ИЛИ    ЕСТЬNULL(РегистрТоварыКПоступлению.КПоступлениюОстаток, 0) > 0";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникНоменклатуры.Номенклатура.Наименование";
		
		Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(ВыборСклада));
		Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

		Запрос.УстановитьПараметр("ГруппаНоменклатуры", РодительСсылка);
		Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
		Запрос.УстановитьПараметр("Свойство", "Гарантія");
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой));
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ктсВыполнитьЗапросВидыНоменклатуры(ВидНоменклатуры)
			
	ПодборТаблицаНоменклатура.Очистить();
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Код КАК Код,
	|	ВложенныйЗапрос.Артикул КАК Артикул,	
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК СвободныйОстаток,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) КАК Число(15,3)) КАК НаСкладеВРезерве
	|ИЗ
	|(
	|	ВЫБРАТЬ";
	
	Если ВидНоменклатуры = Неопределено ИЛИ ВидНоменклатуры.Наименование = "Товар" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|		РегистрАктуальность.Номенклатура.Код КАК Код,
		|		РегистрАктуальность.Номенклатура.Артикул КАК Артикул,
		|		РегистрАктуальность.Номенклатура КАК Номенклатура,
		|		РегистрАктуальность.Номенклатура.Наименование КАК Наименование
		|	ИЗ
		|		РегистрСведений.ktcАктуальность.СрезПоследних(,) КАК РегистрАктуальность
		|	ГДЕ
		|		РегистрАктуальность.Актуальность = ИСТИНА";
		
		Если НЕ ВидНоменклатуры = Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|И	РегистрАктуальность.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
			
		КонецЕсли;
				
	Иначе		
		
		ТекстЗапроса = ТекстЗапроса + "
		|		СпрНоменклатура.Код КАК Код,
		|		СпрНоменклатура.Артикул КАК Артикул,
		|		СпрНоменклатура.Ссылка КАК Номенклатура,
		|		СпрНоменклатура.Наименование КАК Наименование
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|	ГДЕ
		|		СпрНоменклатура.ЭтоГруппа = Ложь";
		
		Если НЕ ВидНоменклатуры = Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И	СпрНоменклатура.ВидНоменклатуры = &ВидНоменклатуры";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	
	|		
	|) КАК ВложенныйЗапрос
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &Склад) КАК СвободныеОстатки
	|ПО
	|	СвободныеОстатки.Номенклатура = ВложенныйЗапрос.Номенклатура";
	
	Если ТолькоВНаличии Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеОстаток, 0) > 0";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО ВложенныйЗапрос.Наименование";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("Склад", ВыборСклада);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодборТаблицаНоменклатура.Загрузить(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой));
		
КонецПроцедуры

&НаСервере
Процедура ктсАктуализироватьЦеныВКорзине()
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		ОбъектКорзина = Объект.Корзина;
		
		МассивНоменклатуры = ОбъектКорзина.Выгрузить(,"Номенклатура");
		СтруктураСПараметрами = ктсПолучитьСписокСоответствий(МассивНоменклатуры, ВидЦены, Валюта);
		
		Для Каждого Строка ИЗ ОбъектКорзина Цикл
			
			Строка.Цена = СтруктураСПараметрами.СоответствиеИзЦенами[Строка.Номенклатура];
			Строка.Сумма = Строка.Цена * Строка.Количество;
			
		КонецЦикла;
		
		ИнформационнаяНадпись = НСтр("ru = '%КоличествоТоваров% позиции(ия) на сумму %Сумма% %Валюта%'");
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", ОбъектКорзина.Количество());
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", ОбъектКорзина.Итог("Сумма"));
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ктсСформироватьСписокДокументов()
	
	МетаданныеДокументов = Метаданные.Документы;
	Для Каждого Метаданное ИЗ МетаданныеДокументов Цикл
		
		Если Метаданное.ТабличныеЧасти.Количество() = 0 ИЛИ (Метаданное.ТабличныеЧасти.Найти("Товары") = Неопределено И Метаданное.ТабличныеЧасти.Найти("Комплектующие") = Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ (ПравоДоступа("Чтение", Метаданное) И ПравоДоступа("Добавление", Метаданное)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ктсСоздатьКнопку(Метаданное.Имя, Метаданное.Представление());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ктсСоздатьКнопку(ИмяКоманды, Заголовок)
	
	НоваяКоманда = Команды.Добавить(Строка("Команда" + ИмяКоманды));
	НоваяКоманда.Действие = "ктсСоздатьДокументОбработчик";
	
	НовыйЭлемент = Элементы.Добавить(Строка("Кнопка" + ИмяКоманды), Тип("КнопкаФормы"), Элементы.ГруппаСоздатьДокумент);
	НовыйЭлемент.Заголовок = Заголовок;
	НовыйЭлемент.ИмяКоманды = Строка("Команда" + ИмяКоманды);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсПолучитьМассивИменРеквизитовДокументов(ИмяДокумента)
	
	МетаданныеДокумента 			= Метаданные.Документы[ИмяДокумента];
	МассивРеквизитовДокумента 		= Новый Массив; 
	МассивРеквизитовТабличнойЧасти  = Новый Массив;
	СтруктураПередачи				= Новый Структура;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		
		МассивРеквизитовДокумента.Добавить(Реквизит.Имя);
		
	КонецЦикла;
	
	ТаблицаТовары = МетаданныеДокумента.ТабличныеЧасти.Товары;
	Для Каждого Реквизит ИЗ ТаблицаТовары.Реквизиты Цикл
		МассивРеквизитовТабличнойЧасти.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	СтруктураПередачи.Вставить("МассивРеквизитовДокумента", МассивРеквизитовДокумента);
	СтруктураПередачи.Вставить("МассивРеквизитовТабличнойЧасти", МассивРеквизитовТабличнойЧасти);
	
	Возврат СтруктураПередачи;
	
КонецФункции

&НаСервере
Функция ктсДокументОснованияОжыдания(НоменклатураСсылка, СкладСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ФиксацияСверху = 1;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, 
	|		Номенклатура = &Номенклатура
	|И		Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|И		Склад = &Склад) КАК ТоварыКПоступлению";
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(СкладСсылка));
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ДокументСсылка = ?(Выборка.Следующий(), Выборка.ДокументПоступления, "Нет документа");
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	
	МакетДокументыПеремещения = ОбъектФормы.ПолучитьМакет("ДокументыПеремещения");
	
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	
	
	
	
	ОбластьЗаголовокДокумента 	= МакетДокументыПеремещения.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьДанные				= МакетДокументыПеремещения.ПолучитьОбласть("Данные");
	
	ОбластьЗаголовокДокумента.Параметры.Документ = ДокументСсылка;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокДокумента);
	
	Если ТипЗнч(ДокументСсылка) <> Тип("Строка") Тогда
		
		Если ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
			
			Для Каждого СтрокаТЧ ИЗ ДокументСсылка.Товары Цикл
				
				Попытка
					
					ОбластьДанные.Параметры.Код = СтрокаТЧ.Номенклатура.Код;
					ОбластьДанные.Параметры.Номенклатура = СтрокаТЧ.Номенклатура.Наименование;
					ОбластьДанные.Параметры.Количество   = СтрокаТЧ.Количество;
					
					ТабличныйДокумент.Вывести(ОбластьДанные);
					
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ктсОбработкаВыбораУпаковки(Номенклатура, ДанныеВыбора)
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, НЕОПРЕДЕЛЕНО) КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(СпрУпаковки.Ссылка) КАК УпаковкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Владелец = ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СпрНоменклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|   И НЕ СпрУпаковки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпрУпаковки.Коэффициент,
	|	СпрУпаковки.Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеВыбора.Добавить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(),Номенклатура.ЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Упаковка <> Неопределено Тогда
			
			ДанныеВыбора.Добавить(Выборка.Упаковка, Выборка.УпаковкаПредставление);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсХранилищеОбщихНастроекЗагрузить(Объект, Настройка)
	Возврат ХранилищеОбщихНастроек.Загрузить(Объект, Настройка);
КонецФункции

&НаСервереБезКонтекста
Процедура ктсХранилищеОбщихНастроекСохранить(Объект, Настройка, Значение)
	ХранилищеОбщихНастроек.Сохранить(Объект, Настройка, Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ктсПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат ктсПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
			МенеджерЗаписи.Прочитать();
			ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
			Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			КонецЕсли;
		Иначе
			ПолныйПуть = ктсПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				Иначе
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				КонецЕсли;
			Исключение
				
				СообщениеОбОшыбке = "Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					            | Файл: %1.%2";
				СообщениеОбОшыбке = СтрЗаменить(СообщениеОбОшыбке, "%1", ФайлОбъект.Наименование);
				СообщениеОбОшыбке = СтрЗаменить(СообщениеОбОшыбке, "%2", ФайлОбъект.Расширение);
				
				ВызватьИсключение СообщениеОбОшыбке;
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура("СсылкаНаДвоичныеДанныеФайла, ОтносительныйПуть, ДатаМодификацииУниверсальная, ИмяФайла, Наименование, Расширение, Размер, ФайлРедактируется, ФайлРедактируетТекущийПользователь, Зашифрован, Редактирует, ПодписанЭЦП, Зашифрован");
	ДополнительнаяИнформация.СсылкаНаДвоичныеДанныеФайла  = СсылкаНаДвоичныеДанныеФайла;
	ДополнительнаяИнформация.ОтносительныйПуть            = ктсПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\";
	ДополнительнаяИнформация.ДатаМодификацииУниверсальная = ФайлОбъект.ДатаМодификацииУниверсальная;
	ДополнительнаяИнформация.ИмяФайла                     = ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Наименование                 = ФайлОбъект.Наименование;
	ДополнительнаяИнформация.Расширение                   = ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Размер                       = ФайлОбъект.Размер;
	ДополнительнаяИнформация.Редактирует                  = ФайлОбъект.Редактирует;
	ДополнительнаяИнформация.ПодписанЭЦП                  = ФайлОбъект.ПодписанЭЦП;
	ДополнительнаяИнформация.Зашифрован                   = ФайлОбъект.Зашифрован;
	ДополнительнаяИнформация.ФайлРедактируется            = НЕ (ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка());
	ДополнительнаяИнформация.ФайлРедактируетТекущийПользователь =
	                            ?(ДополнительнаяИнформация.ФайлРедактируется,
	                              ФайлОбъект.Редактирует = ПараметрыСеанса.ТекущийПользователь,
	                              Ложь);
	
	Если ФайлОбъект.Зашифрован Тогда
		МассивСертификатовШифрования = Новый Массив;
		Для Каждого СтрокаТЧ Из ФайлОбъект.СертификатыШифрования Цикл
			МассивСертификатовШифрования.Добавить(Новый Структура("Отпечаток, Представление", СтрокаТЧ.Отпечаток, СтрокаТЧ.Представление));
		КонецЦикла;
		ДополнительнаяИнформация.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
	КонецЕсли;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолныйПутьТома(СсылкаНаТом)
	
	ТипПлатформыСервера = ктсТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат СсылкаНаТом.ПолныйПутьWindows;
	Иначе	
		Возврат СсылкаНаТом.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсТипПлатформыСервера()
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат СисИнфо.ТипПлатформы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьИдентификаторОбъекта(ВладелецФайлов)
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	ИдентификаторОбъекта
					|ИЗ
					|	РегистрСведений.НаличиеПрисоединенныхФайлов
					|ГДЕ
					|	ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьПредопределенныеЗначения(СтруктураЗапроса)
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	Для каждого КлючИЗначение Из СтруктураЗапроса Цикл
		
		Если КлючИЗначение.Ключ = "Перечисления" Тогда
			
			ВозвращаемаяСтруктура.Вставить("Перечисления", Новый Структура);
			
			Для каждого КлючИЗначениеПеречисления Из СтруктураЗапроса.Перечисления Цикл
				
				ПеречислениеМенеджер = Перечисления[КлючИЗначениеПеречисления.Ключ];
				
				ВозвращаемаяСтруктура2Уровень = Новый Структура;
				
				ВозвращаемаяСтруктура.Перечисления.Вставить(КлючИЗначениеПеречисления.Ключ, ВозвращаемаяСтруктура2Уровень);
				
				Для каждого КлючИЗначениеЗначенияПеречисления Из СтруктураЗапроса.Перечисления[КлючИЗначениеПеречисления.Ключ] Цикл
					
					Если КлючИЗначениеЗначенияПеречисления.Ключ = "ПустаяСсылка" Тогда
						ЗначениеПеречисления = ПеречислениеМенеджер.ПустаяСсылка();
						ВозвращаемаяСтруктура2Уровень.Вставить(КлючИЗначениеЗначенияПеречисления.Ключ, ЗначениеПеречисления);
					Иначе
						ЗначениеПеречисления = ПеречислениеМенеджер[КлючИЗначениеЗначенияПеречисления.Ключ];
						ВозвращаемаяСтруктура2Уровень.Вставить(КлючИЗначениеЗначенияПеречисления.Ключ, ЗначениеПеречисления);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли КлючИЗначение.Ключ = "ФункциональныеОпции" Тогда
			
			ВозвращаемаяСтруктура.Вставить("ФункциональныеОпции", Новый Структура);
			
			Для каждого КлючИЗначениеФО Из СтруктураЗапроса.ФункциональныеОпции Цикл
				
				ЗначениеФО = ПолучитьФункциональнуюОпцию(КлючИЗначениеФО.Ключ);
				
				ВозвращаемаяСтруктура.ФункциональныеОпции.Вставить(КлючИЗначениеФО.Ключ, ЗначениеФО);
				
			КонецЦикла;
			
		ИначеЕсли КлючИЗначение.Ключ = "ПустыеСсылкиНаСправочники" Тогда
			
			ВозвращаемаяСтруктура.Вставить("ПустыеСсылкиНаСправочники", Новый Структура);
			
			Для каждого КлючИЗначениеПС Из СтруктураЗапроса.ПустыеСсылкиНаСправочники Цикл
				
				ПустаяСсылка = Справочники[КлючИЗначениеПС.Ключ].ПустаяСсылка();
				
				ВозвращаемаяСтруктура.ПустыеСсылкиНаСправочники.Вставить(КлючИЗначениеПС.Ключ, ПустаяСсылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПолучитьКоэффициентУпаковки(УпаковкаСсылка)
	
	Возврат УпаковкаСсылка.Коэффициент;
	
КонецФункции


&НаСервереБезКонтекста
Функция ктсПолучитьДатуПоступления(НоменклатураСсылка, СкладСсылка)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ГрафикДвиженияТоваровОстатки.ДатаСобытия, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ГрафикДвиженияТоваров.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И Склад = &Склад) КАК ГрафикДвиженияТоваровОстатки";

	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоНаименованию(СкладСсылка));
	Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		СтрокаКВозврату = Строка(ВыборкаДетальныеЗаписи.ДатаПоступления);
		СтрокаКВозврату = СтрЗаменить(СтрокаКВозврату, "01.01.0001", "Не указана.");
		Возврат Сред(СтрокаКВозврату,1,СтрДлина(СтрокаКВозврату)-9);
		
	КонецЕсли;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ктсПеренаправитьВыделениеСтрокиНаСервер(НоменклатураСсылка, СкладСсылка, УникальныйИдентификаторФормы)
	
	КартинкаНоменклатуры = ктсПолучитьАдрессКартинкиНоменклатуры(НоменклатураСсылка, УникальныйИдентификаторФормы);
	ВходнаяЦена = ктсПолучитьВходнуюЦену(НоменклатураСсылка);
	ДатаОжиданияТовара = ктсПолучитьДатуПоступления(НоменклатураСсылка, СкладСсылка);
	
	Структура = Новый Структура();
	Структура.Вставить("КартинкаНоменклатуры", КартинкаНоменклатуры);
	Структура.Вставить("ВходнаяЦена", ВходнаяЦена);
	Структура.Вставить("ДатаОжиданияТовара", ДатаОжиданияТовара);
	
	Возврат Структура;
	
КонецФункции




&НаКлиенте
Процедура ПоискОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

	Поиск = Текст;
	
	ктсВыполнитьЗапрос();
		
КонецПроцедуры

&НаКлиенте
Функция ктсЭтоКод(СтрокаАнализа)
	
	ЭтоКод = Истина;
	Для Индекс = 1 ПО СтрДлина(СтрокаАнализа) Цикл
		
		КодСимволаСтроки = КодСимвола(СтрокаАнализа, Индекс);
		Если КодСимволаСтроки < 48 ИЛИ КодСимволаСтроки > 57 Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КорзинаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлКорзина = Элементы.Корзина;
	ТекущиеДанные = ЭлКорзина.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеВыбора = Новый СписокЗначений();
		ктсОбработкаВыбораУпаковки(ТекущиеДанные.Номенклатура, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда 
		
		ПолучитьКэшируемыеЗначения();
		
		ЭлементКорзина 		= Элементы.Корзина;
		ТекущиеДанные 		= ЭлементКорзина.ТекущиеДанные;
		
		СтруктураПеречисления 					= СтруктураКэшируемыеЗначения.Перечисления;
		ПеречисленияТиповНоменклатуры 			= СтруктураПеречисления.ТипыНоменклатуры;
		
		Попытка
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			Если ктсТипНоменклатурыТовар(ТекущиеДанные.Номенклатура) Тогда
				
				ПараметрыНоменклатуры = ктсПолучитьОстатокПоСсылке(ТекущиеДанные.Номенклатура, ВыборСклада, ТекущиеДанные.ВидЦены, Валюта, ТекущиеДанные.Упаковка);
				
				ТекущийОстаток = 0;
				Если ПараметрыНоменклатуры <> Неопределено Тогда
					
					ТекущийОстаток = ПараметрыНоменклатуры.СвободныйОстаток;
					
				КонецЕсли;
				
				Если ТекущиеДанные.Количество > ТекущийОстаток Тогда
					ТекущиеДанные.ИндексКартинки = 1;
				Иначе
					ТекущиеДанные.ИндексКартинки = 0;
				КонецЕсли;
				
				Если ПараметрыНоменклатуры <> Неопределено Тогда
					Если ПараметрыНоменклатуры.Цена <> 0 Тогда
						ТекущиеДанные.Цена 	= ПараметрыНоменклатуры.Цена;
						ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ТекущиеДанные.ИндексКартинки = 0;
			КонецЕсли;
			
		КонецЕсли;
		Исключение
		КонецПопытки;
		
		КорзинаПриИзменении();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ктсПерещитатьЦеныВКорзине(Валюта, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуфферОбмена(Команда)
	
	ЭлТаблицаНоменклатура 	= Элементы.ПодборТаблицаНоменклатура;
	Строки 					= ЭлТаблицаНоменклатура.ВыделенныеСтроки;
	ТекстБуффера 			= "";
	
	ТекстовийДокумент 		= Новый ТекстовыйДокумент;
	
	Для Каждого ИндексСтроки ИЗ Строки Цикл
		
		ВыделеннаяСтрока = ЭлТаблицаНоменклатура.ДанныеСтроки(ИндексСтроки);
		
		ТекстБуффера = ТекстБуффера + 
			СокрЛП(ВыделеннаяСтрока.Код) + 
			" " + 
			СокрЛП(ВыделеннаяСтрока.Артикул) + 
			" " + 
			СокрЛП(Строка(ВыделеннаяСтрока.Номенклатура)) + 
			" " +
			СокрЛП(Строка(ВыделеннаяСтрока.Цена)) + " " + Строка(Валюта) + 
			Символы.ВК + Символы.ПС;
		
	КонецЦикла;
		
	ТекстовийДокумент.ДобавитьСтроку(ТекстБуффера);	
	
	ТекстовийДокумент.Показать();

КонецПроцедуры







&НаКлиенте
Процедура КорзинаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле.Имя = "КорзинаНоменклатура" ИЛИ Поле.Имя = "КорзинаХарактеристика") И Элемент.ТекущиеДанные.СерийныйНомер Тогда
		
		ПарамтерыФормы = Новый Структура;
		ПарамтерыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Номенклатура);
		//ПарамтерыФормы.Вставить("Хараткеристика", Элемент.ТекущиеДанные.Хараткеристика);
		ПарамтерыФормы.Вставить("Склад", ?(ПустаяСтрока(СкладОтправитель), ВыборСклада, СкладОтправитель));
		ПарамтерыФормы.Вставить("КоличествоНоменклатуры", Элемент.ТекущиеДанные.Количество);
		
		МассивСН = СерийныеНомераКорзины.Получить(Элемент.ТекущиеДанные.Номенклатура);
		Если МассивСН = Неопределено Тогда
			ПарамтерыФормы.Вставить("МассивСН", Новый Массив);
		Иначе
			ПарамтерыФормы.Вставить("МассивСН", МассивСН);
		КонецЕсли;
		
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаСерийныеНомера", ПарамтерыФормы);
		
		Если Результат <> Неопределено Тогда
		
			СерийныеНомераКорзины.Вставить(Элемент.ТекущиеДанные.Номенклатура, Результат)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПередУдалением(Элемент, Отказ)
	
	МассивСН = СерийныеНомераКорзины.Получить(Элемент.ТекущиеДанные.Номенклатура);
	
	Если МассивСН <> Неопределено Тогда
		
		СерийныеНомераКорзины.Удалить(Элемент.ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры








&НаКлиенте
Процедура БыстраяСборка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Корзина", ПолучитьКорзинуВСтроке());
	ПараметрыФормы.Вставить("Склад", ВыборСклада);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	//глЗагружатьНоменклатуру = Ложь;
	
	ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоМенеджера.Форма.ФормаБыстройСборки", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКорзинуВСтроке()
	
	Возврат ЗначениеВСтрокуВнутр(Объект.Корзина.Выгрузить());
	
КонецФункции


