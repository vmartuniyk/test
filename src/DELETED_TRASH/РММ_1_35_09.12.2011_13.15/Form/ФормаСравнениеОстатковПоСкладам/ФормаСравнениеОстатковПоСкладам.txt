
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидЦены = Параметры.ВидЦены;
	
КонецПроцедуры


&НаКлиенте
Процедура Сформировать(Команда)
	
	//Если ПустаяСтрока(Организация) Тогда
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "необходимо заполнить организаци"
	//	
	//	Возврат;
	//	
	//КонецЕсли;

	Если ПустаяСтрока(СкладОтправитель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле необходимо заполнить.";
		Сообщение.Поле = "СкладОтправитель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СкладПолучатель) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле необходимо заполнить.";
		Сообщение.Поле = "СкладПолучатель";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ГруппаНоменклатуры) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле необходимо заполнить.";
		Сообщение.Поле = "ГруппаНоменклатуры";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Закрыть(СоздатьДокументПеремещениеТоваров());
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументПеремещениеТоваров()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НоменклатураХарактеристики.Номенклатура.Код КАК Код,
	               |	НоменклатураХарактеристики.Номенклатура.ИспользоватьСерийныеНомера КАК СерийныйНомер,
	               |	НоменклатураХарактеристики.Номенклатура КАК Номенклатура,
	               |	НоменклатураХарактеристики.Характеристика КАК Характеристика,
	               |	ЕСТЬNULL(ОстаткиОтгрузки.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиОтгрузки.ВРезервеОстаток, 0) КАК Количество,
	               |	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	               |	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	               |	ЕСТЬNULL(ОстаткиОтгрузки.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиОтгрузки.ВРезервеОстаток, 0) * ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Сумма
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СправочникНоменклатура.Ссылка КАК Номенклатура,
	               |		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	               |	ИЗ
	               |		Справочник.Номенклатура КАК СправочникНоменклатура
	               |	ГДЕ
	               |		(НЕ СправочникНоменклатура.ЭтоГруппа)
	               |		И СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&Группа)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СправочникНоменклатура.Ссылка,
	               |		СправочникХарактеристики.Ссылка
	               |	ИЗ
	               |		Справочник.Номенклатура КАК СправочникНоменклатура
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристики
	               |			ПО (СправочникХарактеристики.Владелец = СправочникНоменклатура.Ссылка
	               |					ИЛИ СправочникХарактеристики.Владелец = СправочникНоменклатура.ВидНоменклатуры)
	               |	ГДЕ
	               |		СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&Группа)) КАК НоменклатураХарактеристики
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				,
	               |				Номенклатура В ИЕРАРХИИ (&Группа)
	               |					И Склад = &СкладПриемки) КАК ОстаткиПриемки
	               |		ПО (ОстаткиПриемки.Номенклатура = НоменклатураХарактеристики.Номенклатура)
	               |			И (ОстаткиПриемки.Характеристика = НоменклатураХарактеристики.Характеристика)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	               |				,
	               |				Номенклатура В ИЕРАРХИИ (&Группа)
	               |					И Склад = &СкладОтгрузки) КАК ОстаткиОтгрузки
	               |		ПО (ОстаткиОтгрузки.Номенклатура = НоменклатураХарактеристики.Номенклатура)
	               |			И (ОстаткиОтгрузки.Характеристика = НоменклатураХарактеристики.Характеристика)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				ВидЦены = &ВидЦены
	               |					И Номенклатура В ИЕРАРХИИ (&Группа)) КАК ЦеныНоменклатуры
	               |		ПО (ЦеныНоменклатуры.Номенклатура = НоменклатураХарактеристики.Номенклатура)
	               |			И (ЦеныНоменклатуры.Характеристика = НоменклатураХарактеристики.Характеристика)
	               |ГДЕ
	               |	ЕСТЬNULL(ОстаткиОтгрузки.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиОтгрузки.ВРезервеОстаток, 0) > 0
	               |	И ЕСТЬNULL(ОстаткиПриемки.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиПриемки.ВРезервеОстаток, 0) <= &ЗаказПриКоличестве
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НоменклатураХарактеристики.Номенклатура.Родитель ИЕРАРХИЯ";	
				   
	Запрос.УстановитьПараметр("Группа", ГруппаНоменклатуры);
	Запрос.УстановитьПараметр("СкладПриемки", Справочники.Склады.НайтиПоНаименованию(СкладПолучатель));
	Запрос.УстановитьПараметр("СкладОтгрузки", Справочники.Склады.НайтиПоНаименованию(СкладОтправитель));
	Запрос.УстановитьПараметр("ЗаказПриКоличестве", ЗаказПриКоличестве);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка   			= РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	МассивПередачи		= Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПередачи = Новый Структура;
		СтруктураПередачи.Вставить("Код", Выборка.Код);
		СтруктураПередачи.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПередачи.Вставить("СерийныйНомер", Выборка.СерийныйНомер);
		СтруктураПередачи.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПередачи.Вставить("Количество", Выборка.Количество);
		СтруктураПередачи.Вставить("ВидЦены", Выборка.ВидЦены);
		СтруктураПередачи.Вставить("Цена", Выборка.Цена);
		СтруктураПередачи.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПередачи.Вставить("Сумма", Выборка.Сумма);
		
		МассивПередачи.Добавить(СтруктураПередачи);
		
	КонецЦикла;
	
	СтруктураПередачи = Новый Структура;
	СтруктураПередачи.Вставить("СкладПолучатель", СкладПолучатель);
	СтруктураПередачи.Вставить("СкладОтправитель", СкладОтправитель);
	СтруктураПередачи.Вставить("МассивПередачи", МассивПередачи);
	
	Возврат СтруктураПередачи;
			
КонецФункции




&НаКлиенте
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокОрганизаций());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОрганизаций()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Представление
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Представление");
	
КонецФункции



&НаКлиенте
Процедура СкладОтправительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.СкладОтправитель.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСкладов());
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.СкладПолучатель.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСкладов());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Представление
	               |ИЗ
	               |	Справочник.Склады КАК Склады";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Представление");
	
КонецФункции

