Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки 
	Версия = "1.0.29";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. обновление аткуальности номенклатуры [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. обновление аткуальности номенклатуры [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление аткуальности номенклатуры [" + Версия + "]", "РасчетАктуальностиНоменклатуры();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры





Процедура РасчетАктуальностиНоменклатуры() Экспорт
	
	Если Метаданные.РегистрыСведений.Найти("АктуальностьНоменклатуры") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	                  
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");	
	Если НЕ ТипЗнч(Настройки) = Тип("Структура") Тогда
		//Настройки не найдены!!!	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		//1. День обработки заказа
		|ВЫБРАТЬ
		|	Минимум(ДатаГрафика) КАК ДатаОбработкиЗаказа
		|	
		|ПОМЕСТИТЬ ДеньОбработкиЗаказа 
		|ИЗ 
		|	РегистрСведений.КалендарныеГрафики 
		|ГДЕ 
		|   Календарь 	= 	&Календарь
		|И  ДатаГрафика >= 	&Сегодня
		|И  ДеньВключенВГрафик 
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//2. День и номер дня обработки заказа
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
		|
		|ПОМЕСТИТЬ ДанныеОбработкиЗаказа
		|ИЗ
		|	ДеньОбработкиЗаказа
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ПО ДеньОбработкиЗаказа.ДатаОбработкиЗаказа = КалендарныеГрафики.ДатаГрафика
		|И  &Календарь 							 	= КалендарныеГрафики.Календарь
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
        |УНИЧТОЖИТЬ ДеньОбработкиЗаказа;
		//////////////////////////////////////////////////////////////////////////////////////////
		//3. Кешируем необходимые данные прайсов
		|ВЫБРАТЬ
		|	Соглашение, ФайлПрайсЛиста, ДнейАктуальности, deadline
		|ПОМЕСТИТЬ ПредКешТаблицаПрайсов
		|ИЗ
		|	&ТаблицаПрайсов КАК ТаблицаПрайсов
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		//4. Урезание не актуальных прайсов
		|ВЫБРАТЬ
		|	Соглашение,              
		|	Соглашение.СрокПоставки 					КАК СрокПоставки, 
		|	ФайлПрайсЛиста.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная, 
		|	ВЫБОР
		|		КОГДА (&Час >  ЧАС(deadline))
		|		 ИЛИ  (&Час >= ЧАС(deadline) И &Минута > МИНУТА(deadline))
		|     	ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПриемЗаказовЗавершен
		|
		|ПОМЕСТИТЬ КешТаблицаПрайсов
		|ИЗ
		|	ПредКешТаблицаПрайсов
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(ФайлПрайсЛиста.ДатаМодификацииУниверсальная, День, ДнейАктуальности) >= &Сегодня
		|ИЛИ ДнейАктуальности = 0
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПредКешТаблицаПрайсов;
		//////////////////////////////////////////////////////////////////////////////////////////
		//5. Строим верные даты доставки
		|ВЫБРАТЬ
		|	ТаблицаПрайсов.Соглашение,
		|	ТаблицаПрайсов.ДатаМодификацииУниверсальная,
		|	ДатаДоставкиЗаказа.ДатаГрафика
		|
		|ПОМЕСТИТЬ ДанныеОбработкиЗаказаПоСоглашениям
		|ИЗ
		|	КешТаблицаПрайсов КАК ТаблицаПрайсов
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДанныеОбработкиЗаказа КАК ДанныеОбработкиЗаказа
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаДоставкиЗаказа
		|ПО  ДанныеОбработкиЗаказа.КоличествоДнейВГрафикеСНачалаГода + ТаблицаПрайсов.СрокПоставки + ТаблицаПрайсов.ПриемЗаказовЗавершен = ДатаДоставкиЗаказа.КоличествоДнейВГрафикеСНачалаГода
		|И	 &Календарь = ДатаДоставкиЗаказа.Календарь
		|И   ДанныеОбработкиЗаказа.ДатаГрафика <= ДатаДоставкиЗаказа.ДатаГрафика
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	ТаблицаПрайсов.Соглашение,
		|	ТаблицаПрайсов.ДатаМодификацииУниверсальная,
		|	ДатаДоставкиЗаказа.ДатаГрафика
		|;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеОбработкиЗаказа;
		//////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешТаблицаПрайсов;
		//////////////////////////////////////////////////////////////////////////////////////////
		//6. Урезание не актуальных позиций 
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Характеристика,
		|	МИНИМУМ(ДатаГрафика) КАК Актуальность 	
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура,
		|		Характеристика,
		|		ДатаГрафика                                                                  
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ТекущаяДата) КАК РасчетАктуальности
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОбработкиЗаказаПоСоглашениям КАК ТаблицаПрайсов
		|	ПО РасчетАктуальности.Соглашение = ТаблицаПрайсов.Соглашение 
		|   И  РасчетАктуальности.Период     > ТаблицаПрайсов.ДатаМодификацииУниверсальная 
		|	) КАК Вл		
		|
		|СГРУППИРОВАТЬ ПО Номенклатура, Характеристика
		|";
	Запрос.УстановитьПараметр("Сегодня", 		НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Календарь", 		Настройки.ALPS_Календарь);
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата());
	Запрос.УстановитьПараметр("Час", 			Час(ТекущаяДата()));
	Запрос.УстановитьПараметр("Минута", 		Минута(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТаблицаПрайсов", Настройки.ТаблицаПрайсов);	
		
	РезультатПакета = Запрос.ВыполнитьПакет();	
	НаборЗаписей = РегистрыСведений.АктуальностьНоменклатуры.СоздатьНаборЗаписей();		
	НаборЗаписей.Загрузить(РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("ru = 'Обновление актуальности номенклатуры'", УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru = 'Актуальность номенклатуры обновить не удалось'"));	
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
	ЗаписьЖурналаРегистрации("ru = 'Обновление актуальности номенклатуры'", УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Обновлена актуальность номенклатуры'"));	
	
КонецПроцедуры