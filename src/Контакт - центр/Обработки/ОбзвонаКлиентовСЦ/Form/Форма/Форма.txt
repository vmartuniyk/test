
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаЗаявокСЦ");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияЗСЦСРемонтом");
	СписокТестов.Добавить(ПараметрыТеста);


	Возврат СписокТестов;
	
КонецФункции


&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаЗаявокСЦ() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокДокументовЗаявкиСЦ;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#5081. На форме обработки должен быть реквизит «СписокДокументовЗаявкиСЦ».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#5081. Реквизит «СписокДокументовЗаявкиСЦ» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокДокументовЗаявкиСЦ");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#5081. На форме должен быть элемент «СписокДокументовЗаявкиСЦ»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()


&НаКлиенте
Функция Тест_ПроверкаНаличияЗСЦСРемонтом() Экспорт
	
	Отказ = ПолучитьМассивОтбораЗаявкиСервисногоЦентра();
	ЮнитТест.ПроверитьИстину(Отказ, НСтр("ru='#5081. ТаблицеЗначения «СписокДокументовЗаявкиСЦ» не найдено заявка  СЦ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()

&НаСервере
Функция ПолучитьМассивОтбораЗаявкиСервисногоЦентра()
	
	Отказ = Ложь;

	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаЗначений.Колонки;
	Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ЭтапРаботы", Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы"));
	Колонки.Добавить("ПартнерАСЦ", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Колонки.Добавить("МесторасположениеФактическое", Новый ОписаниеТипов("СправочникСсылка.ГНАТ_МесторасположениеВСервисе"));
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата()-2;
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято;
	НоваяСтрока.Комментарий 	= "Тестовый комментарий";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата()-1;
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.ВнесеныВБазуСведенияОЗаменеРемонтеЗачислении;
	НоваяСтрока.Комментарий 	= "Внесены в базу сведения о замене / ремонте / зачислении";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата();
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Выдано;
	НоваяСтрока.Комментарий 	= "Выдано";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;

	ДокументСсылка = СоздатьЗаявкуСервисногоЦентра(Новый Структура("ХодРабот, ВидОперации", ТаблицаЗначений));
	
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
	
	Отбор = Новый Структура("ЗаявкаСЦ",ДокументСсылка);
	МассивОтбора = СписокДокументовЗаявкиСЦ.НайтиСтроки(Отбор);
	Если МассивОтбора.Количество()>0 Тогда
		Отказ = Истина;	
	КонецЕсли;
	УничтожитьЗаявкуСервисногоЦентра(ДокументСсылка);
	Возврат Отказ;
КонецФункции // СоздатьЗаявкуСервисногоЦентраСтатусПринят()

&НаСервереБезКонтекста
Процедура УничтожитьЗаявкуСервисногоЦентра(ДокументСсылка)

	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
	СправочникОбъект = ДокументОбъект.Номенклатура.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();
		
	Если НЕ ДокументОбъект.ЕкспертПрийомщик.Пустая() Тогда
		СправочникОбъект = ДокументОбъект.ЕкспертПрийомщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	ДокументОбъект.Удалить();
	
КонецПроцедуры // УничтожитьЗаявкуСервисногоЦентра()


#Область РаботаСБиблиотеками

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

&НаСервереБезКонтекста
Функция СоздатьЗаявкуСервисногоЦентра(ПараметрыЗаполнения)
	ВнешнийОбъект = ПолучитьБиблиотеку("\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf");
	Возврат ВнешнийОбъект.СоздатьИПровестиДокумент(ПараметрыЗаполнения);	
КонецФункции // СоздатьЗаявкуСервисногоЦентра()

	
#КонецОбласти
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициПредоставленныеУслуги

&НаКлиенте
Процедура ПредоставленныеУслугиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициСписокВзаимодействий

&НаКлиенте
Процедура СписокВзаимодействийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокВзаимодействийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициСписокЗСЦ

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПередУдалением(Элемент, Отказ)
	Отказ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер(ТекущиеДанные.ЗаявкаСЦ);
	ОчиститьДанныеКЦ();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ТДанные  = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;	
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ТДанные.ЗаявкаСЦ,ТДанные.Заказчик); 
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ();
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " УБЫВ";
		СортироватьСписокДокументовЗаявкиСЦ(СтруктураПередачи.Идентификатор,СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ();
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " ВОЗР";
		СортироватьСписокДокументовЗаявкиСЦ(СтруктураПередачи.Идентификатор,СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьЗвонок(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(NPS) Тогда 
		ТекстОшибки 	= НСтр("ru='Поле ""NPS"" обязательно для заполнения!'");
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст	= ТекстОшибки;
		Сообщение.Поле 	= "NPS";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	ИзменитьДокументЗаявкаСервисногоЦентра(ТекущиеДанные.ЗаявкаСЦ, 0);
	
	БиблиотекаВзаимодействий = ПолучитьИмяВнешнегоОбъекта("Библиотека взаимодействий");
	ПараметрыФормы 			 = Новый Структура("ЗаявкаСервисногоЦентра", ТекущиеДанные.ЗаявкаСЦ);
	
	ФормаВзаимодействия = ПолучитьФорму("ВнешняяОбработка." + БиблиотекаВзаимодействий + ".Форма.ФормаТелефонныйЗвонок", ПараметрыФормы);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЗвонокНаДень(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	ИзменитьДокументЗаявкаСервисногоЦентра(ТекущиеДанные.ЗаявкаСЦ, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЗвонокНаНеделю(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	ИзменитьДокументЗаявкаСервисногоЦентра(ТекущиеДанные.ЗаявкаСЦ, 7);
		
КонецПроцедуры

&НаКлиенте
Процедура НеЗвонитьБольше(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите запретить звонки для партнера?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		УстановитьЗапретЗвонковПартнеру(ТекущиеДанные.ЗаявкаСЦ,ТекущиеДанные.Заказчик);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Получить структуру данных имя элемента и идентификатор для элемента коллекции. 
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Структура   - 
//			*Отказ - Истина -проверка на получения данных элемента сортировки
//			* Идентификатор - Число - получаем идентификатор для элемента коллекции
//          * Имя - Строка - ИмяКолонки
&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ()
	ТДанные  = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	ТЭлемент = Элементы.СписокДокументовЗаявкиСЦ.ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
КонецФункции

// Загружаем список заявок сервисного в таблицу значения СписокДокументовЗаявкиСЦ
//
// Параметры:
//  НЕТ
//
&НаСервере
Процедура ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ЗаявкаСЦ = Неопределено, Заказчик=Неопределено) 
	УстановитьПривилегированныйРежим(Истина);
	РеквизитФормыВЗначение("Объект").ЗагрузитьСписокЗаявокСервисногоЦентра(ЭтаФорма);
	
	Если ЗаявкаСЦ <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ЗаявкаСЦ, Заказчик", ЗаявкаСЦ, Заказчик);
		РезультатПоиска = СписокДокументовЗаявкиСЦ.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокДокументовЗаявкиСЦ.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере()

// Сортировать таблицу значения СписокДокументовЗаявкиСЦ
//
// Параметры:
// НЕТ
//
&НаСервере
Процедура СортироватьСписокДокументовЗаявкиСЦ(знач Идентификатор, ИмяКолонки)
	
	ПолеСортировки = СтрЗаменить(ИмяКолонки,"СписокДокументовЗаявкиСЦ","");
	ДанныеТекущейСтроки = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(Идентификатор);
	
	ЗначениеКолонки = ДанныеТекущейСтроки[ПолеСортировки];

	Если ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Партнеры") Тогда
		ПолеСортировки = "ПартнерПредставления";
	ИначеЕсли ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПолеСортировки = "НоменклатураПредставления";
	КонецЕсли;
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ДанныеТекущейСтроки.ЗаявкаСЦ,ДанныеТекущейСтроки.Заказчик);	

КонецПроцедуры // СортироватьСписокДокументовЗаявкиСЦ()

&НаСервере
Процедура СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер(ЗаявкаСЦ)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьОписаниеРабот(ЗаявкаСЦ);
	СформироватьПредоставленныеУслуги(ЗаявкаСЦ);
	СформироватьСписокВзаимодействий(ЗаявкаСЦ);

КонецПроцедуры // СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер()

&НаСервере
Процедура ЗаполнитьОписаниеРабот(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РС_Этапы.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК РС_Этапы
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы КАК Этапы
		|	ПО РС_Этапы.ЭтапРаботы = Этапы.Ссылка
		|	И (Этапы.ЭтоРемонт)
		|ГДЕ
		|	РС_Этапы.ЗаявкаСервисногоЦентра = &ЗаявкаСервисногоЦентра";
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра",ЗаявкаСЦ);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ОписаниеРабот = "";
	ПредыдущееОписание = "";
	Для каждого Строка Из ТаблицаРезультат Цикл
		 
		Если ПустаяСтрока(Строка.Комментарий) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОписаниеРабот = ОписаниеРабот+?(ПустаяСтрока(ПредыдущееОписание),"","; ") +Строка.Комментарий; 
		ПредыдущееОписание	= Строка.Комментарий;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОписаниеРабот()

&НаСервере
Процедура СформироватьПредоставленныеУслуги(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ПОМЕСТИТЬ КешСсылок
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗаявкаСервисногоЦентра)
		|ГДЕ
		|	Ссылка ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И ВЫРАЗИТЬ(Ссылка КАК Документ.РеализацияТоваровУслуг).ВидПодчиненногоДокументаГНАТ = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыПодчиненныхДокументов.РеализацияЗапчастейУслуг)
		|;
		|ВЫБРАТЬ
		|	Номенклатура КАК Услуга,
		|	СуммаСНДС КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары 
		|ГДЕ
		|	Ссылка В
		|			(ВЫБРАТЬ
		|				КешСсылок.Ссылка
		|			ИЗ
		|				КешСсылок)
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра",ЗаявкаСЦ);
	ПредоставленныеУслуги.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры // СформироватьПредоставленныеУслуги()


&НаСервере
Процедура СформироватьСписокВзаимодействий(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.ГНАТ_ВзаимодействияПоЗаявкам
		|ГДЕ
		|	Заявка = &Заявка";
	Запрос.УстановитьПараметр("Заявка",ЗаявкаСЦ);
	СписокВзаимодействий.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры // СформироватьСписокВзаимодействий()

&НаСервере
Процедура ИзменитьДокументЗаявкаСервисногоЦентра(ЗаявкаСЦ, КолличествоОтложенныхДней)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(КомментарийПоЗвонку) Тогда 
		ТекстОшибки 	= НСтр("ru='Поле ""Комментарий по звонку"" обязательно для заполнения!'");
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст	= ТекстОшибки;
		Сообщение.Поле 	= "КомментарийПоЗвонку";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	

	ДокументОбъект	= ЗаявкаСЦ.ПолучитьОбъект();

	Если КолличествоОтложенныхДней = 0 Тогда 
		ДокументОбъект.NPS		  			= NPS;
		ДокументОбъект.МенеджерКЦ 			= ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.ДатаЗвонка 			= ТекущаяДата();
		ДокументОбъект.Претензия			= Претензия;
	Иначе 
		ДокументОбъект.ОтложеннаяДатаЗвонка = ТекущаяДата() + КолличествоОтложенныхДней*24*60*60;
	КонецЕсли;
	
	ДокументОбъект.КомментарийПоЗвонку 	= КомментарийПоЗвонку;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ДокументОбъект.Ссылка, ДокументОбъект.ЗаказчикРемонта);	
	Исключение
		ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Userstory #5085: Перепроведение документа ЗСЦ'");
	    ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Информация,
				,
				,
				НСтр("ru = 'Запись звонка в документ ""Заявка сервисного центра""'"));
	КонецПопытки;

КонецПроцедуры // ИзменитьДокументЗаявкаСервисногоЦентра()


&НаСервере
Процедура ОчиститьДанныеКЦ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	NPS 				= Перечисления.ГНАТ_NPS.ПустаяСсылка();
	КомментарийПоЗвонку = "";
	Претензия 			= Ложь;	
	
КонецПроцедуры // ОчиститьДанныеКЦ()

&НаСервере
Процедура УстановитьЗапретЗвонковПартнеру(ЗаявкаСЦ, Партнер)
	
	УстановитьПривилегированныйРежим(Истина);
	ЭлементСправочника 						= Партнер.ПолучитьОбъект();
	ЭлементСправочника.КлиентПротивОбзвона	= Истина;
	Попытка
		ЭлементСправочника.Записать();
	Исключение
		ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Userstory #5085: Перепроведение элемента справочника ""Партнеры""'");
	    ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Информация,
				,
				,
				НСтр("ru = 'Установка запрета на звонки партнеру'"));
	КонецПопытки;		
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ЗаявкаСЦ, Партнер);	
	ОчиститьДанныеКЦ();		
	
КонецПроцедуры // УстановитьЗапретЗвонковПартнеру()

&НаСервереБезКонтекста
Функция ПолучитьИмяВнешнегоОбъекта(ИмяОбработки)
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьИмяВнешнегоОбъекта(ИмяОбработки);	
	
КонецФункции


#КонецОбласти