
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	Возврат СписокТестов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициСписокЗСЦ

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПередУдалением(Элемент, Отказ)
	Отказ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Ложь;	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийКомандФормы
&НаКлиенте
Процедура Обновить(Команда)
	ТДанные  = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;	
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ТДанные.ЗаявкаСЦ,ТДанные.Заказчик); 
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ();
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " УБЫВ";
		СортироватьСписокДокументовЗаявкиСЦ(СтруктураПередачи.Идентификатор,СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ();
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " ВОЗР";
		СортироватьСписокДокументовЗаявкиСЦ(СтруктураПередачи.Идентификатор,СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Получить структуру данных имя элемента и идентификатор для элемента коллекции. 
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Структура   - 
//			*Отказ - Истина -проверка на получения данных элемента сортировки
//			* Идентификатор - Число - получаем идентификатор для элемента коллекции
//          * Имя - Строка - ИмяКолонки
&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ()
	ТДанные  = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	ТЭлемент = Элементы.СписокДокументовЗаявкиСЦ.ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
КонецФункции

// Загружаем список заявок сервисного в таблицу значения СписокДокументовЗаявкиСЦ
//
// Параметры:
//  НЕТ
//
&НаСервере
Процедура ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ЗаявкаСЦ = Неопределено, Заказчик=Неопределено) 
	УстановитьПривилегированныйРежим(Истина);
	РеквизитФормыВЗначение("Объект").ЗагрузитьСписокЗаявокСервисногоЦентра(ЭтаФорма);
	
	Если ЗаявкаСЦ <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ЗаявкаСЦ, Заказчик", ЗаявкаСЦ, Заказчик);
		РезультатПоиска = СписокДокументовЗаявкиСЦ.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокДокументовЗаявкиСЦ.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере()

// Сортировать таблицу значения СписокДокументовЗаявкиСЦ
//
// Параметры:
// НЕТ
//
&НаСервере
Процедура СортироватьСписокДокументовЗаявкиСЦ(знач Идентификатор, ИмяКолонки)
	
	ПолеСортировки = СтрЗаменить(ИмяКолонки,"СписокДокументовЗаявкиСЦ","");
	ДанныеТекущейСтроки = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(Идентификатор);
	
	ЗначениеКолонки = ДанныеТекущейСтроки[ПолеСортировки];

	Если ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Партнеры") Тогда
		ПолеСортировки = "ПартнерПредставления";
	ИначеЕсли ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПолеСортировки = "НоменклатураПредставления";
	КонецЕсли;
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ДанныеТекущейСтроки.ЗаявкаСЦ,ДанныеТекущейСтроки.Заказчик);	

КонецПроцедуры // СортироватьСписокДокументовЗаявкиСЦ()



#КонецОбласти