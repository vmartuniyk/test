
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияСпискаЗаявокСЦ");
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияЗСЦСРемонтом");
	СписокТестов.Добавить(ПараметрыТеста);
	
// Тесты по задаче http://r.ktc-ua.com/issues/5085
#Область ЭлементыТаРеквизитыФормы 

	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияРеквизитовТаЭлементовФормы");
	СписокТестов.Добавить(ПараметрыТеста);

#КонецОбласти
#Область КомандыФормы 

	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаНаличияКомандФормы");
	СписокТестов.Добавить(ПараметрыТеста);

#КонецОбласти
//#5085

	Возврат СписокТестов;
	
КонецФункции

// Тесты по задаче http://r.ktc-ua.com/issues/5085
#Область ЭлементыТаРеквизитыФормы_Исполнение

&НаКлиенте
Функция Тест_ПроверкаНаличияРеквизитовТаЭлементовФормы() Экспорт
	
	//ОписаниеРабот
	Попытка
		РеквизитОписаниеРабот = ЭтаФорма.ОписаниеРабот;
	Исключение
		ДопСообщениеОшибки = НСтр("ru='#5085. На форме обработки должен быть реквизит «ОписаниеРабот».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
		ЮнитТест.ПроверитьИстину(Ложь, ДопСообщениеОшибки);	
	КонецПопытки;
	
	ДопСообщениеОшибки = НСтр("ru='#5085. Реквизит «ОписаниеРабот» должен иметь тип «Строка».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(РеквизитОписаниеРабот, "Строка", ДопСообщениеОшибки);
	
	//ПредоставленныеУслуги
	Попытка
		РеквизитПредоставленныеУслуги = ЭтаФорма.ПредоставленныеУслуги;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#5085. На форме обработки должен быть реквизит «ПредоставленныеУслуги».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ДопСообщениеОшибки = НСтр("ru='#5085. Реквизит «ПредоставленныеУслуги» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(РеквизитПредоставленныеУслуги, Тип("ДанныеФормыКоллекция"), ДопСообщениеОшибки);
	
	//СписокВзаимодействий
	Попытка
		РеквизитСписокВзаимодействий = ЭтаФорма.СписокВзаимодействий;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#5085. На форме обработки должен быть реквизит «Список взаимодействий».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ДопСообщениеОшибки = НСтр("ru='#5085. Реквизит «СписокВзаимодействий» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(РеквизитСписокВзаимодействий, Тип("ДанныеФормыКоллекция"), ДопСообщениеОшибки);
	
	//NPS
	Попытка
		РеквизитNPS = ЭтаФорма.NPS;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#5085. На форме обработки должен быть реквизит «NPS».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ДопСообщениеОшибки = НСтр("ru='#5085. Реквизит «NPS» должен иметь тип «ПеречислениеСсылка.ГНАТ_NPS».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(РеквизитNPS, Тип("ПеречислениеСсылка.ГНАТ_NPS"), ДопСообщениеОшибки);
	
	//КомментарийПоЗвонку
	Попытка
		РеквизитКомментарийПоЗвонку = ЭтаФорма.КомментарийПоЗвонку;
	Исключение
		ДопСообщениеОшибки = НСтр("ru='#5085. На форме обработки должен быть реквизит «КомментарийПоЗвонку».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
		ЮнитТест.ПроверитьИстину(Ложь, ДопСообщениеОшибки);	
	КонецПопытки;
	
	ДопСообщениеОшибки = НСтр("ru='#5085. Реквизит «КомментарийПоЗвонку» должен иметь тип «Строка».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(РеквизитКомментарийПоЗвонку, "Строка", ДопСообщениеОшибки);
	
	//Претензия
	Попытка
		РеквизитПретензия = ЭтаФорма.Претензия;
	Исключение
		ДопСообщениеОшибки = НСтр("ru='#5085. На форме обработки должен быть реквизит «Претензия».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
		ЮнитТест.ПроверитьИстину(Ложь, ДопСообщениеОшибки);	
	КонецПопытки;
	
	ДопСообщениеОшибки = НСтр("ru='#5085. Реквизит «Претензия» должен иметь тип «Булево».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ЮнитТест.ПроверитьТип(РеквизитПретензия, "Булево", ДопСообщениеОшибки);
	
КонецФункции // Тест_ПроверкаНаличияРеквизитовТаЭлементовФормы()

#КонецОбласти
#Область КомандыФормы_Исполнение 

&НаКлиенте
Функция Тест_ПроверкаНаличияКомандФормы() Экспорт
	
	//ЗафиксироватьЗвонок
	КомандаЗафиксироватьЗвонок = Команды.Найти("ЗафиксироватьЗвонок");
	ТекстОшибки = НСтр("ru='#5085. На форме обработки должна быть команда «Зафиксировать звонок».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаЗафиксироватьЗвонок), Тип("КомандаФормы"), ТекстОшибки);
	
	//ОтложитьЗвонокНаДень
	КомандаОтложитьЗвонокНаДень = Команды.Найти("ОтложитьЗвонокНаДень");
	ТекстОшибки = НСтр("ru='#5085. На форме обработки должна быть команда «Отложить звонок на день».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаОтложитьЗвонокНаДень), Тип("КомандаФормы"), ТекстОшибки);
	
	//ОтложитьЗвонокНаНеделю
	КомандаОтложитьЗвонокНаНеделю = Команды.Найти("ОтложитьЗвонокНаНеделю");
	ТекстОшибки = НСтр("ru='#5085. На форме обработки должна быть команда «Отложить звонок на неделю».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаОтложитьЗвонокНаНеделю), Тип("КомандаФормы"), ТекстОшибки);
	
	//НеЗвонитьБольше
	КомандаНеЗвонитьБольше = Команды.Найти("НеЗвонитьБольше");
	ТекстОшибки = НСтр("ru='#5085. На форме обработки должна быть команда «Не звонить больше».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаНеЗвонитьБольше), Тип("КомандаФормы"), ТекстОшибки);
	
	//ВзаимодействияВсе
	КомандаВзаимодействияВсе = Команды.Найти("ВзаимодействияВсе");
	ТекстОшибки = НСтр("ru='#5085. На форме обработки должна быть команда «Взаимодействия все».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаВзаимодействияВсе), Тип("КомандаФормы"), ТекстОшибки);
	
	//ВзаимодействияТолькоКЦ
	КомандаВзаимодействияТолькоКЦ = Команды.Найти("ВзаимодействияТолькоКЦ");
	ТекстОшибки = НСтр("ru='#5085. На форме обработки должна быть команда «Взаимодействия только КЦ».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаВзаимодействияТолькоКЦ), Тип("КомандаФормы"), ТекстОшибки);
	
	//ОтборДатаВыдачи
	КомандаОтборДатаВыдачи = Команды.Найти("ОтборДатаВыдачи");
	ТекстОшибки = НСтр("ru='#5178. На форме обработки должна быть команда «Отбор по дате выдачи».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаОтборДатаВыдачи), Тип("КомандаФормы"), ТекстОшибки);
	
	//ОткрытьКалендарь
	КомандаОткрытьКалендарь = Команды.Найти("ОткрытьКалендарь");
	ТекстОшибки = НСтр("ru='#5205. На форме обработки должна быть команда «Открыть календарь».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьРавенство(ТипЗнч(КомандаОткрытьКалендарь), Тип("КомандаФормы"), ТекстОшибки);
	
КонецФункции

#КонецОбласти
//#5085

&НаКлиенте
Функция Тест_ПроверкаНаличияСпискаЗаявокСЦ() Экспорт
	
	Попытка
		РеквизитСписокНоменклатуры = ЭтаФорма.СписокДокументовЗаявкиСЦ;
	Исключение
		ЮнитТест.ПроверитьИстину(Ложь, НСтр("ru='#5081. На форме обработки должен быть реквизит «СписокДокументовЗаявкиСЦ».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	
	КонецПопытки;
	
	ЮнитТест.ПроверитьРавенство(ТипЗнч(РеквизитСписокНоменклатуры), Тип("ДанныеФормыКоллекция"), НСтр("ru='#5081. Реквизит «СписокДокументовЗаявкиСЦ» должен иметь тип «ТаблицаЗначений».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ЭлементТаблица = Элементы.Найти("СписокДокументовЗаявкиСЦ");
	ЮнитТест.ПроверитьНеРавенство(ЭлементТаблица, Неопределено, НСтр("ru='#5081. На форме должен быть элемент «СписокДокументовЗаявкиСЦ»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));	

КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()


&НаКлиенте
Функция Тест_ПроверкаНаличияЗСЦСРемонтом() Экспорт
	
	ДанныеДляТестирования = ПолучитьДанныеДляТестирования();
		
	МассивОтбора = СписокДокументовЗаявкиСЦ.НайтиСтроки(Новый Структура("ЗаявкаСЦ",ДанныеДляТестирования.ДокументСсылка));
	ЮнитТест.ПроверитьИстину(МассивОтбора.Количество()>0, НСтр("ru='#5081. ТаблицеЗначения «СписокДокументовЗаявкиСЦ» не найдено заявка  СЦ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ТолькоКЦ = Ложь;
	
	КомментарийПоЗвонку = "Тестовое взаимодействие";
	СоздатьВзаимодействие(ДанныеДляТестирования.ДокументСсылка);
	ДанныеДляТестирования.Вставить("Взаимодействие",ВзаимодействиеТелефонныйЗвонок);
	ДопОписаниеОшибки = НСтр("ru='#5085. Взаимодействие «Телефонный звонок» на основании заявка  СЦ не создано.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьНеРавенство(ВзаимодействиеТелефонныйЗвонок, ПредопределенноеЗначение("Документ.ТелефонныйЗвонок.ПустаяСсылка"), ДопОписаниеОшибки);
		
	СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер(ДанныеДляТестирования.ДокументСсылка);
	
	ОтборВзаимодействий = СписокВзаимодействий.НайтиСтроки(Новый Структура("Взаимодействие",ДанныеДляТестирования.Взаимодействие));
	ДопОписаниеОшибки 	= НСтр("ru='#5085. Взаимодействие «Телефонный звонок» не найдено в списке взаимодействий по заявке.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьИстину(ОтборВзаимодействий.Количество()>0, ДопОписаниеОшибки);
	
	ОтборПредоставленныеУслуги = ПредоставленныеУслуги.НайтиСтроки(Новый Структура("Услуга",ДанныеДляТестирования.Услуга));
	ДопОписаниеОшибки 	= НСтр("ru='#5085. Услугу не найдено в списке «Предоставленные услуги» по заявке.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ЮнитТест.ПроверитьИстину(ОтборПредоставленныеУслуги.Количество()>0, ДопОписаниеОшибки);

	//http://r.ktc-ua.com/issues/5205	
	//
	//Перезвонить = отложенная на 1 день
	ДатаОбзвона 					= ТекущаяДата()+24*60*60;
	СтандартныйПериод.ДатаНачала 	= Дата(1,1,1);
	СтандартныйПериод.ДатаОкончания = КонецДня(ДатаОбзвона);
	
	УстановитьЗаголовокФормы();
	ОчиститьДанныеКЦ();				
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
		
	МассивОтбора = СписокДокументовЗаявкиСЦ.НайтиСтроки(Новый Структура("ЗаявкаСЦ",ДанныеДляТестирования.ЗаявкаОтложенаяНаДень));
	ЮнитТест.ПроверитьИстину(МассивОтбора.Количество()>0, НСтр("ru='#5205. ТаблицеЗначения «СписокДокументовЗаявкиСЦ» не найдено заявка СЦ отложеная на 1 день.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	//Перезвонить = отложенная на 7 дней
	ДатаОбзвона 					= ТекущаяДата()+7*24*60*60;
	СтандартныйПериод.ДатаНачала 	= Дата(1,1,1);
	СтандартныйПериод.ДатаОкончания = КонецДня(ДатаОбзвона);
	
	УстановитьЗаголовокФормы();
	ОчиститьДанныеКЦ();				
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
		
	МассивОтбора = СписокДокументовЗаявкиСЦ.НайтиСтроки(Новый Структура("ЗаявкаСЦ",ДанныеДляТестирования.ЗаявкаОтложенаяНаНеделю));
	ЮнитТест.ПроверитьИстину(МассивОтбора.Количество()>0, НСтр("ru='#5205. ТаблицеЗначения «СписокДокументовЗаявкиСЦ» не найдено заявка СЦ отложеная на 7 дней.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	//
	//#5205
	
	УничтожитьДанныеДляТестирования(ДанныеДляТестирования);
	
КонецФункции // Тест_ПроверкаНаличияСпискаНоменклатуры()

&НаСервере
Функция ПолучитьДанныеДляТестирования()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаЗначений.Колонки;
	Колонки.Добавить("Период"						, Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ЭтапРаботы"					, Новый ОписаниеТипов("СправочникСсылка.ГНАТ_ЭтапыРаботы"));
	Колонки.Добавить("ПартнерАСЦ"					, Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Комментарий"					, Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Ответственный"				, Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Колонки.Добавить("МесторасположениеФактическое"	, Новый ОписаниеТипов("СправочникСсылка.ГНАТ_МесторасположениеВСервисе"));
	
	
	Склад 				= СоздатьСклад();
	Номенклатура    	= СоздатьНоменклатуру(Ложь);
	Услуга              = СоздатьНоменклатуру(Истина);

	СерийныйНомер		= СоздатьСерийныйНомер(Номенклатура);
	Организация			= СоздатьОрганизацию();
	Клиент				= СоздатьКлиента();
	КонтрагентКлиент 	= СоздатьКонтрагента(Клиент);
	СоглашениеСКлиентом = СоздатьСоглашениеСКлиентами(Клиент		,КонтрагентКлиент		,Организация	,Склад);
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата()-3;
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Принято;
	НоваяСтрока.Комментарий 	= "Тестовый комментарий";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата()-2;
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.ВнесеныВБазуСведенияОЗаменеРемонтеЗачислении;
	НоваяСтрока.Комментарий 	= "Внесены в базу сведения о замене / ремонте / зачислении";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	НоваяСтрока 				= ТаблицаЗначений.Добавить();
	НоваяСтрока.Период 			= ТекущаяДата()-1;
	НоваяСтрока.ЭтапРаботы 		= Справочники.ГНАТ_ЭтапыРаботы.Выдано;
	НоваяСтрока.Комментарий 	= "Выдано";
	НоваяСтрока.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;

	
	ДанныеДляТестирования = Новый Структура;
	ДанныеДляТестирования.Вставить("ВидОперации"			, Перечисления.ГНАТ_ВидыОперацийЗаявкиСервисногоЦентра.ПлатныйНаличный);
	ДанныеДляТестирования.Вставить("ЗаказчикРемонта"		, Клиент);
	ДанныеДляТестирования.Вставить("Склад"					, Склад);
	ДанныеДляТестирования.Вставить("Номенклатура"			, Номенклатура);
	ДанныеДляТестирования.Вставить("СерийныйНомер"			, СерийныйНомер);
	ДанныеДляТестирования.Вставить("ОтложеннаяДатаЗвонка"	, ТекущаяДата());	
	ДанныеДляТестирования.Вставить("ХодРабот"				, ТаблицаЗначений);
	
	ДокументСсылка 		= СоздатьЗаявкуСервисногоЦентра(ДанныеДляТестирования);
		
	ДанныеДляТестирования.Вставить("ОтложеннаяДатаЗвонка"	, ТекущаяДата()+24*60*60);
	ЗаявкаОтложенаяНаДень	= СоздатьЗаявкуСервисногоЦентра(ДанныеДляТестирования);
	
	ДанныеДляТестирования.ОтложеннаяДатаЗвонка = ТекущаяДата()+7*24*60*60;
	ЗаявкаОтложенаяНаНеделю	= СоздатьЗаявкуСервисногоЦентра(ДанныеДляТестирования);
	
	РеализацияТоваров  	= СоздатьРеализациюТоваровИУслуг(Клиент,КонтрагентКлиент,Организация,Склад,СоглашениеСКлиентом,Услуга,ДокументСсылка.Ссылка);
	
	ДанныеДляТестирования.Вставить("ДокументСсылка"				, ДокументСсылка.Ссылка);
	ДанныеДляТестирования.Вставить("ЗаявкаОтложенаяНаДень"		, ЗаявкаОтложенаяНаДень.Ссылка);
	ДанныеДляТестирования.Вставить("ЗаявкаОтложенаяНаНеделю"	, ЗаявкаОтложенаяНаНеделю.Ссылка);
	
	ДанныеДляТестирования.Вставить("Организация"				, Организация);
	ДанныеДляТестирования.Вставить("КонтрагентКлиент"			, КонтрагентКлиент);
	ДанныеДляТестирования.Вставить("Услуга"						, Услуга);
	ДанныеДляТестирования.Вставить("СоглашениеСКлиентом"		, СоглашениеСКлиентом);
	ДанныеДляТестирования.Вставить("РеализацияТоваров"			, РеализацияТоваров);
	
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
		
	Возврат ДанныеДляТестирования;
КонецФункции // СоздатьЗаявкуСервисногоЦентраСтатусПринят()

&НаСервере
Процедура УничтожитьДанныеДляТестирования(ДанныеДляТестирования)

	Если ТипЗнч(ДанныеДляТестирования) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ДанныеДляТестирования.ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	
	
	Если ДанныеДляТестирования.Свойство("РеализацияТоваров") Тогда
		ДокументОбъектРеализацияТоваров = ДанныеДляТестирования.РеализацияТоваров.ПолучитьОбъект();
		ДокументОбъектРеализацияТоваров.УстановитьПометкуУдаления(Истина);
		ДокументОбъектРеализацияТоваров.ОбменДанными.Загрузка = Истина;
		ДокументОбъектРеализацияТоваров.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		
		СправочникОбъект = ДокументОбъектРеализацияТоваров.Подразделение.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;	
	
	Если ДанныеДляТестирования.Свойство("СерийныйНомер") Тогда
		СправочникОбъект = ДанныеДляТестирования.СерийныйНомер.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Номенклатура") Тогда
		СправочникОбъект = ДанныеДляТестирования.Номенклатура.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

	Если НЕ ДокументОбъект.ЕкспертПрийомщик.Пустая() Тогда
		СправочникОбъект = ДокументОбъект.ЕкспертПрийомщик.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Взаимодействие") Тогда
		ДокументОбъектВзаимодействие = ДанныеДляТестирования.Взаимодействие.ПолучитьОбъект();
		ДокументОбъектВзаимодействие.УстановитьПометкуУдаления(Истина);
		ДокументОбъектВзаимодействие.Записать();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("СоглашениеСКлиентом") Тогда
		СправочникОбъект = ДанныеДляТестирования.СоглашениеСКлиентом.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Услуга") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Услуга.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Организация") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.Организация.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("КонтрагентКлиент") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.КонтрагентКлиент.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("ЗаказчикРемонта") Тогда
	
		СправочникОбъект = ДанныеДляТестирования.ЗаказчикРемонта.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
		
	КонецЕсли;
	
	Если ДанныеДляТестирования.Свойство("Склад") Тогда
		СправочникОбъект = ДанныеДляТестирования.Склад.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;	
	
	ДокументОбъект.Удалить();
	ДокументОбъектРеализацияТоваров.Удалить();
	ДокументОбъектВзаимодействие.Удалить();
	
	Если ДанныеДляТестирования.Свойство("ЗаявкаОтложенаяНаДень") Тогда
		ДокументОбъект = ДанныеДляТестирования.ЗаявкаОтложенаяНаДень.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		ДокументОбъект.Удалить();
	КонецЕсли;	
	
	Если ДанныеДляТестирования.Свойство("ЗаявкаОтложенаяНаНеделю") Тогда
		ДокументОбъект = ДанныеДляТестирования.ЗаявкаОтложенаяНаНеделю.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		ДокументОбъект.Удалить();
	КонецЕсли;	
	
КонецПроцедуры // УничтожитьЗаявкуСервисногоЦентра()


#Область Справочники

&НаСервереБезКонтекста
Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

&НаСервереБезКонтекста
Функция СоздатьНоменклатуру(Услуга)
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Номенклатура");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование",				Наименование);   
	ПараметрыЗаполнения.Вставить("ИспользоватьУпаковки",		Ложь);
	ПараметрыЗаполнения.Вставить("ИспользоватьСерийныеНомера",	Истина);
	ПараметрыЗаполнения.Вставить("ТипНоменклатуры",	?(Услуга, Перечисления.ТипыНоменклатуры.Услуга, Перечисления.ТипыНоменклатуры.Товар));
	
	Бибилиотека = ПолучитьБиблиотекуНоменклатуры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);
	
КонецФункции // СоздатьНоменклатуру()

&НаСервереБезКонтекста
Функция СоздатьСерийныйНомер(НоменклатураСсылка)

	Код = ПреобразоватьУникальныйИдентификаторВНаименование("СерийныйНомер");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",	НоменклатураСсылка);   
	ПараметрыЗаполнения.Вставить("Код",			Код);
	
	Бибилиотека = ПолучитьБиблиотекуСерийныеНомера();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСерийныйНомер()

&НаСервереБезКонтекста
Функция СоздатьКлиента()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Клиент");
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	Колонки = КонтактнаяИнформация.Колонки;
	Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));

	Строка = КонтактнаяИнформация.Добавить();
	Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	Строка.Представление = "0971111111";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Клиент", Истина);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	Бибилиотека = ПолучитьБиблиотекуПартнеры();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьПартнера()


&НаСервереБезКонтекста
Функция СоздатьОрганизацию()

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Организация");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуОрганизации();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьОрганизацию()

&НаСервереБезКонтекста
Функция СоздатьКонтрагента(Партнер)

	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Контрагент");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуКонтаргенты();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьКонтрагента()

&НаСервереБезКонтекста
Функция СоздатьСоглашениеСКлиентами(Партнер, Контрагент, Организация, Склад)

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", "Соглашение с клиентом");
	ПараметрыЗаполнения.Вставить("Партнер", Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	Бибилиотека = ПолучитьБиблиотекуСоглашениеСКлиентами();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСоглашениеСКлиентами()


&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуТоваров()

	Товары = Новый ТаблицаЗначений;
	
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Товары.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Товары.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат Товары;

КонецФункции // ИнициализироватьТаблицуТоваров()

&НаСервереБезКонтекста
Функция ИнициализироватьТаблицуСерийныхНомеров()

	СерийныеНомера = Новый ТаблицаЗначений;
	СерийныеНомера.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомераНоменклатуры"));
	СерийныеНомера.Колонки.Добавить("КлючСвязиСерийныхНомеров", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат СерийныеНомера;

КонецФункции // ИнициализироватьТаблицуСерийныхНомеров()

&НаСервереБезКонтекста
Функция СоздатьРеализациюТоваровИУслуг(Партнер, Контрагент, Организация, Склад, Соглашение, Услуга, Заявка)

	Товары 			= ИнициализироватьТаблицуТоваров();
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.Номенклатура 					= Услуга;
	НоваяСтрока.КоличествоУпаковок 				= 1;
	НоваяСтрока.Количество 						= 1;
	НоваяСтрока.Цена 							= 100;
	НоваяСтрока.Сумма 							= 100;
	НоваяСтрока.СтавкаНДС						= Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СуммаНДС 						= 0;
	НоваяСтрока.СуммаСНДС						= 100;
	НоваяСтрока.Склад 							= Склад;
	НоваяСтрока.КлючСвязиСерийныхНомеров 		= 1;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Партнер"						, Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент"					, Контрагент);
	ПараметрыЗаполнения.Вставить("Организация"					, Организация);
	ПараметрыЗаполнения.Вставить("Склад"						, Склад);
	ПараметрыЗаполнения.Вставить("Соглашение"					, Соглашение);
	ПараметрыЗаполнения.Вставить("Товары"						, Товары);                                                             
	ПараметрыЗаполнения.Вставить("Статус"						, Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	ПараметрыЗаполнения.Вставить("ЗаявкаСервисногоЦентра"		, Заявка);
	ПараметрыЗаполнения.Вставить("ВидПодчиненногоДокументаГНАТ"	, ПредопределенноеЗначение("Перечисление.ГНАТ_ВидыПодчиненныхДокументов.РеализацияЗапчастейУслуг"));
	 
	Бибилиотека = ПолучитьБиблиотекуРеализацияТоваровИУслуг();
	
	Возврат Бибилиотека.СоздатьИПровестиДокумент(Неопределено, ПараметрыЗаполнения);

КонецФункции // СоздатьПоступлениеТоваровИУслуг()


#КонецОбласти


#Область РаботаСБиблиотеками

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()


&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуНоменклатуры()
	ПутьКБиблиотеке = "\tests\Справочники\Номенклатура\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуНоменклатуры()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуСерийныеНомера()
	ПутьКБиблиотеке = "\tests\Справочники\СерийныеНомераНоменклатуры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСерийныеНомера()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуПартнеры()
	ПутьКБиблиотеке = "\tests\Справочники\Партнеры\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуПартнеры()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуОрганизации()
	ПутьКБиблиотеке = "\tests\Справочники\Организации\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуОрганизации()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуКонтаргенты()
	ПутьКБиблиотеке = "\tests\Справочники\Контрагенты\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуКонтаргенты()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуСоглашениеСКлиентами()
	ПутьКБиблиотеке = "\tests\Справочники\СоглашениеСКлиентами\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСоглашениеСКлиентами()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуРеализацияТоваровИУслуг()
	ПутьКБиблиотеке = "\tests\Документы\РеализацияТоваровУслуг\СоздатьИПровестиДокумент.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуРеализацияТоваровИУслуг()

&НаСервереБезКонтекста
Функция СоздатьЗаявкуСервисногоЦентра(ПараметрыЗаполнения)
	ВнешнийОбъект = ПолучитьБиблиотеку("\tests\Документы\ГНАТ_ЗаявкаСервисногоЦентра\СоздатьИПровестиДокумент.epf");
	Возврат ВнешнийОбъект.СоздатьИПровестиДокумент(ПараметрыЗаполнения);	
КонецФункции // СоздатьЗаявкуСервисногоЦентра()


&НаСервереБезКонтекста
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

	
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
		
	ДатаОбзвона = ТекущаяДата();
	ТолькоКЦ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
	УстановитьЗаголовокФормы();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициПредоставленныеУслуги

&НаКлиенте
Процедура ПредоставленныеУслугиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленныеУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициСписокВзаимодействий

&НаКлиенте
Процедура СписокВзаимодействийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокВзаимодействийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокВзаимодействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОткрытьЗначение(ТекущиеДанные.Взаимодействие); 
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблициСписокЗСЦ

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПередУдалением(Элемент, Отказ)
	Отказ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	 
	СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер(ТекущиеДанные.ЗаявкаСЦ);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовЗаявкиСЦВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОткрытьЗначение(ТекущиеДанные.ЗаявкаСЦ); КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ДатаОбзвона 					= ТекущаяДата();
	СтандартныйПериод.ДатаНачала 	= Дата(1,1,1);
	СтандартныйПериод.ДатаОкончания = ТекущаяДата();
	
	ТДанные  = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	Если ТДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;						
	ОчиститьДанныеКЦ();
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ТДанные.ЗаявкаСЦ,ТДанные.Заказчик); 
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ();
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " УБЫВ";
		СортироватьСписокДокументовЗаявкиСЦ(СтруктураПередачи.Идентификатор,СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СтруктураПередачи = ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ();
	Если НЕ СтруктураПередачи.Отказ Тогда
		Сортировка_Направление = " ВОЗР";
		СортироватьСписокДокументовЗаявкиСЦ(СтруктураПередачи.Идентификатор,СтруктураПередачи.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьЗвонок(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(NPS) Тогда 
		ТекстОшибки 	= НСтр("ru='Поле ""NPS"" обязательно для заполнения!'");
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст	= ТекстОшибки;
		Сообщение.Поле 	= "NPS";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если СписокДокументовЗаявкиСЦ.Количество()>1 Тогда 
		НовыеТекущиеДанные = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()+1);
	КонецЕсли;

	ИзменитьДокументЗаявкаСервисногоЦентра(ТекущиеДанные.ЗаявкаСЦ, 0); 
	СоздатьВзаимодействие(ТекущиеДанные.ЗаявкаСЦ);
	ОчиститьДанныеКЦ();	
	
	Если НовыеТекущиеДанные<>Неопределено Тогда 
		УстановитьТекущуюСтроку(НовыеТекущиеДанные.ЗаявкаСЦ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВзаимодействие(ЗаявкаСЦ)
	
	Если Не ЗначениеЗаполнено(КомментарийПоЗвонку) Тогда 
		Возврат;
	КонецЕсли;
	
	БиблиотекаВзаимодействий		= ПолучитьИмяВнешнегоОбъекта("Библиотека взаимодействий");
	ПараметрыФормы 			 		= Новый Структура("ЗаявкаСервисногоЦентра", ЗаявкаСЦ);
	
	ФормаВзаимодействия 			= ПолучитьФорму("ВнешняяОбработка." + БиблиотекаВзаимодействий + ".Форма.ФормаТелефонныйЗвонок", ПараметрыФормы);
	ФормаВзаимодействия.Тема 		= "Обзвон КЦ";
	ФормаВзаимодействия.Описание 	= КомментарийПоЗвонку;
	РезультатЗаписи = ФормаВзаимодействия.ЗаписатьДокументНаСервере();
		
	Если РезультатЗаписи Тогда 
		ВзаимодействиеТелефонныйЗвонок = ФормаВзаимодействия.СсылкаНаВзаимодействие;
	КонецЕсли;
	
КонецПроцедуры // СоздатьВзаимодействие()

&НаКлиенте
Процедура ОтложитьЗвонокНаДень(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Если СписокДокументовЗаявкиСЦ.Количество()>1 Тогда 
		НовыеТекущиеДанные = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()+1);
	КонецЕсли;
	
	ИзменитьДокументЗаявкаСервисногоЦентра(ТекущиеДанные.ЗаявкаСЦ, 1);
	СоздатьВзаимодействие(ТекущиеДанные.ЗаявкаСЦ);
	ОчиститьДанныеКЦ();	
	
	Если НовыеТекущиеДанные<>Неопределено Тогда 
		УстановитьТекущуюСтроку(НовыеТекущиеДанные.ЗаявкаСЦ);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьТекущуюСтроку(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаявкаСЦ = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	Массив = СписокДокументовЗаявкиСЦ.НайтиСтроки(Новый Структура("ЗаявкаСЦ",ЗаявкаСЦ));
	Если Массив.Количество() Тогда 
		Элементы.СписокДокументовЗаявкиСЦ.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры // УстановитьТекущуюСтроку()

&НаКлиенте
Процедура ОтложитьЗвонокНаНеделю(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Если СписокДокументовЗаявкиСЦ.Количество()>1 Тогда 
		НовыеТекущиеДанные = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()+1);
	КонецЕсли;
	
	ИзменитьДокументЗаявкаСервисногоЦентра(ТекущиеДанные.ЗаявкаСЦ, 7);
	СоздатьВзаимодействие(ТекущиеДанные.ЗаявкаСЦ);
	ОчиститьДанныеКЦ();
	
	Если НовыеТекущиеДанные<>Неопределено Тогда 
		УстановитьТекущуюСтроку(НовыеТекущиеДанные.ЗаявкаСЦ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеЗвонитьБольше(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КомментарийПоЗвонку) Тогда 
		ТекстОшибки 	= НСтр("ru='Поле ""Комментарий по звонку"" обязательно для заполнения!'");
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст	= ТекстОшибки;
		Сообщение.Поле 	= "КомментарийПоЗвонку";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите запретить звонки для партнера?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		
		Если СписокДокументовЗаявкиСЦ.Количество()>1 Тогда 
			НовыеТекущиеДанные = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()+1);
		КонецЕсли;
		
		СоздатьВзаимодействие(ТекущиеДанные.ЗаявкаСЦ);
		УстановитьЗапретЗвонковПартнеру(ТекущиеДанные.ЗаявкаСЦ,ТекущиеДанные.Заказчик);
		ОчиститьДанныеКЦ();
		
		Если НовыеТекущиеДанные<>Неопределено Тогда 
			УстановитьТекущуюСтроку(НовыеТекущиеДанные.ЗаявкаСЦ);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВсе(Команда)
	ТолькоКЦ = Ложь;
	Элементы.СписокВзаимодействийВзаимодействияВсе.Картинка		 = БиблиотекаКартинок.УстановитьФлажки;
	Элементы.СписокВзаимодействийВзаимодействияТолькоКЦ.Картинка = БиблиотекаКартинок.СнятьФлажки;	
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	СформироватьСписокВзаимодействий(ТекущиеДанные.ЗаявкаСЦ);
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияТолькоКЦ(Команда)
	ТолькоКЦ = Истина;
	Элементы.СписокВзаимодействийВзаимодействияТолькоКЦ.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Элементы.СписокВзаимодействийВзаимодействияВсе.Картинка 	 = БиблиотекаКартинок.СнятьФлажки;
	
	ТекущиеДанные = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	СформироватьСписокВзаимодействий(ТекущиеДанные.ЗаявкаСЦ);
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаВыдачи(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = СтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
	    СтандартныйПериод = Диалог.Период;
		Если СтандартныйПериод.ДатаОкончания = Дата(1,1,1) Тогда 
			СтандартныйПериод.ДатаОкончания = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	ДатаОбзвона = ТекущаяДата();
	ОчиститьДанныеКЦ();		
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Получить структуру данных имя элемента и идентификатор для элемента коллекции. 
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//   Структура   - 
//			*Отказ - Истина -проверка на получения данных элемента сортировки
//			* Идентификатор - Число - получаем идентификатор для элемента коллекции
//          * Имя - Строка - ИмяКолонки
&НаКлиенте
Функция ПолучитьИдентификаторИмяКолонкиСпискаЗСЦ()
	ТДанные  = Элементы.СписокДокументовЗаявкиСЦ.ТекущиеДанные;
	ТЭлемент = Элементы.СписокДокументовЗаявкиСЦ.ТекущийЭлемент;
	Возврат Новый Структура("Отказ, Идентификатор, Имя",  ТДанные = Неопределено ИЛИ ТЭлемент = Неопределено, 
														?(ТДанные = Неопределено, Неопределено, ТДанные.ПолучитьИдентификатор()), 
														?(ТЭлемент= Неопределено, Неопределено, ТЭлемент.Имя));		
КонецФункции

//Загружаем список заявок сервисного в таблицу значения СписокДокументовЗаявкиСЦ
//
// Параметры:
//  НЕТ
//
&НаСервере
Процедура ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ЗаявкаСЦ = Неопределено, Заказчик=Неопределено) 
	УстановитьПривилегированныйРежим(Истина);
	РеквизитФормыВЗначение("Объект").ЗагрузитьСписокЗаявокСервисногоЦентра(ЭтаФорма);
	
	Если ЗаявкаСЦ <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ЗаявкаСЦ, Заказчик", ЗаявкаСЦ, Заказчик);
		РезультатПоиска = СписокДокументовЗаявкиСЦ.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			Элементы.СписокДокументовЗаявкиСЦ.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере()

//Сортировать таблицу значения СписокДокументовЗаявкиСЦ
//
// Параметры:
// НЕТ
//
&НаСервере
Процедура СортироватьСписокДокументовЗаявкиСЦ(знач Идентификатор, ИмяКолонки)
	
	ПолеСортировки = СтрЗаменить(ИмяКолонки,"СписокДокументовЗаявкиСЦ","");
	ДанныеТекущейСтроки = СписокДокументовЗаявкиСЦ.НайтиПоИдентификатору(Идентификатор);
	
	ЗначениеКолонки = ДанныеТекущейСтроки[ПолеСортировки];

	Если ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Партнеры") Тогда
		ПолеСортировки = "ПартнерПредставления";
	ИначеЕсли ТипЗнч(ЗначениеКолонки) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПолеСортировки = "НоменклатураПредставления";
	КонецЕсли;
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ДанныеТекущейСтроки.ЗаявкаСЦ,ДанныеТекущейСтроки.Заказчик);	

КонецПроцедуры // СортироватьСписокДокументовЗаявкиСЦ()

&НаСервере
Процедура СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер(ЗаявкаСЦ)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьОписаниеРабот(ЗаявкаСЦ);
	СформироватьПредоставленныеУслуги(ЗаявкаСЦ);
	СформироватьСписокВзаимодействий(ЗаявкаСЦ);
	ВывестиДанные(ЗаявкаСЦ);

КонецПроцедуры // СписокДокументовЗаявкиСЦПриАктивизацииСтрокиСервер()

&НаСервере
Процедура ЗаполнитьОписаниеРабот(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РС_Этапы.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра КАК РС_Этапы
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГНАТ_ЭтапыРаботы КАК Этапы
		|	ПО РС_Этапы.ЭтапРаботы = Этапы.Ссылка
		|	И (Этапы.ЭтоРемонт)
		|ГДЕ
		|	РС_Этапы.ЗаявкаСервисногоЦентра = &ЗаявкаСервисногоЦентра";
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра",ЗаявкаСЦ);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ОписаниеРабот = "";
	ПредыдущееОписание = "";
	Для каждого Строка Из ТаблицаРезультат Цикл
		 
		Если ПустаяСтрока(Строка.Комментарий) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОписаниеРабот = ОписаниеРабот+?(ПустаяСтрока(ПредыдущееОписание),"","; ") +Строка.Комментарий; 
		ПредыдущееОписание	= Строка.Комментарий;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОписаниеРабот()

&НаСервере
Процедура СформироватьПредоставленныеУслуги(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ПОМЕСТИТЬ КешСсылок
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗаявкаСервисногоЦентра)
		|ГДЕ
		|	Ссылка ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И ВЫРАЗИТЬ(Ссылка КАК Документ.РеализацияТоваровУслуг).ВидПодчиненногоДокументаГНАТ = ЗНАЧЕНИЕ(Перечисление.ГНАТ_ВидыПодчиненныхДокументов.РеализацияЗапчастейУслуг)
		|;
		|ВЫБРАТЬ
		|	Номенклатура КАК Услуга,
		|	СуммаСНДС КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары 
		|ГДЕ
		|	Ссылка В
		|			(ВЫБРАТЬ
		|				КешСсылок.Ссылка
		|			ИЗ
		|				КешСсылок)
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	Запрос.УстановитьПараметр("ЗаявкаСервисногоЦентра",ЗаявкаСЦ);
	ПредоставленныеУслуги.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры // СформироватьПредоставленныеУслуги()

&НаСервере
Процедура СформироватьСписокВзаимодействий(ЗаявкаСЦ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.ГНАТ_ВзаимодействияПоЗаявкам
		|ГДЕ
		|	Заявка = &Заявка 
		|%1";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"%1",?(Не ТолькоКЦ , "", 
				"И ВЫРАЗИТЬ(Взаимодействие КАК Документ.ТелефонныйЗвонок).Ответственный.ТекущееПодразделение = &ПодразделениеКЦ"));
	Запрос.УстановитьПараметр("Заявка",ЗаявкаСЦ);
	
	УИ = Новый УникальныйИдентификатор("afa17273-094a-11e1-b8a7-001517115d85");
	ПодразделениеКЦ = Справочники.СтруктураПредприятия.ПолучитьСсылку(УИ);
	
	Запрос.УстановитьПараметр("ПодразделениеКЦ",ПодразделениеКЦ);
	СписокВзаимодействий.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры // СформироватьСписокВзаимодействий()

&НаСервере
Процедура ВывестиДанные(ЗаявкаСЦ)

	УстановитьПривилегированныйРежим(Истина);
	
	Если НачалоДня(ДатаОбзвона) <> НачалоДня(ТекущаяДата()) Тогда
	 	NPS 				= ЗаявкаСЦ.NPS;
		КомментарийПоЗвонку = ЗаявкаСЦ.КомментарийПоЗвонку;
		Претензия			= ЗаявкаСЦ.Претензия; 
	КонецЕсли;

КонецПроцедуры // ВывестиДанные()

&НаСервере
Процедура ИзменитьДокументЗаявкаСервисногоЦентра(ЗаявкаСЦ, КолличествоОтложенныхДней)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(КомментарийПоЗвонку) Тогда 
		ТекстОшибки 	= НСтр("ru='Поле ""Комментарий по звонку"" обязательно для заполнения!'");
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст	= ТекстОшибки;
		Сообщение.Поле 	= "КомментарийПоЗвонку";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	

	ДокументОбъект	= ЗаявкаСЦ.ПолучитьОбъект();

	Если КолличествоОтложенныхДней = 0 Тогда 
		ДокументОбъект.NPS		  			= NPS;
		ДокументОбъект.МенеджерКЦ 			= ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.ДатаЗвонка 			= ТекущаяДата();
		ДокументОбъект.Претензия			= Претензия;
	Иначе 
		ДокументОбъект.ОтложеннаяДатаЗвонка = ТекущаяДата() + КолличествоОтложенныхДней*24*60*60;
	КонецЕсли;
	
	ДокументОбъект.КомментарийПоЗвонку 	= КомментарийПоЗвонку;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ДокументОбъект.Ссылка, ДокументОбъект.ЗаказчикРемонта);	
	Исключение
		ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Userstory #5085: Перепроведение документа ЗСЦ'");
	    ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Информация,
				,
				,
				НСтр("ru = 'Запись звонка в документ ""Заявка сервисного центра""'"));
	КонецПопытки;
			
КонецПроцедуры // ИзменитьДокументЗаявкаСервисногоЦентра()

&НаСервере
Процедура ОчиститьДанныеКЦ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	NPS 				= Перечисления.ГНАТ_NPS.ПустаяСсылка();
	КомментарийПоЗвонку = "";
	Претензия 			= Ложь;	
	ВзаимодействиеТелефонныйЗвонок = Документы.ТелефонныйЗвонок.ПустаяСсылка();
	Элементы.ГруппаВнесенияИнформации.Доступность = НачалоДня(ДатаОбзвона) >= НачалоДня(ТекущаяДата());
	
КонецПроцедуры // ОчиститьДанныеКЦ()

&НаСервере
Процедура УстановитьЗапретЗвонковПартнеру(ЗаявкаСЦ, Партнер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ВзаимодействиеТелефонныйЗвонок) Тогда
		Возврат;	
	КонецЕсли;
	
	ЭлементСправочника 							= Партнер.ПолучитьОбъект();
	ЭлементСправочника.КлиентПротивОбзвона		= Истина;
	ЭлементСправочника.ВзаимодействиеПоОбзвону	= ВзаимодействиеТелефонныйЗвонок;
	Попытка
		ЭлементСправочника.Записать();
	Исключение
		ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Userstory #5085: Перепроведение элемента справочника ""Партнеры""'");
	    ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации,
				УровеньЖурналаРегистрации.Информация,
				,
				,
				НСтр("ru = 'Установка запрета на звонки партнеру'"));
	КонецПопытки;		
	ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере(ЗаявкаСЦ, Партнер);	
	ОчиститьДанныеКЦ();		
	
КонецПроцедуры // УстановитьЗапретЗвонковПартнеру()

&НаСервереБезКонтекста
Функция ПолучитьИмяВнешнегоОбъекта(ИмяОбработки)
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьИмяВнешнегоОбъекта(ИмяОбработки);	
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКалендарь(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальноеЗначение"	, ДатаОбзвона);	
	Форма = ПолучитьФорму("ОбщаяФорма.ВыборДаты", ПараметрыФормы);
	Форма.Элементы.ПоясняющийТекст.Видимость = Ложь;
	Форма.ОписаниеОповещенияОЗакрытии	= Новый ОписаниеОповещения("ВыполнитьПослеЗакрытия", ЭтаФорма,);   
	Форма.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт 

	Если ТипЗнч(Результат) = Тип("Дата") Тогда
		ДатаОбзвона 					= ?(Результат = Дата(1,1,1), ТекущаяДата(), КонецДня(Результат));
		СтандартныйПериод.ДатаНачала 	= Дата(1,1,1);
		СтандартныйПериод.ДатаОкончания = КонецДня(ДатаОбзвона);
		
		УстановитьЗаголовокФормы();
		ОчиститьДанныеКЦ();				
		ЗагрузитьСписокЗаявокСервисногоЦентраНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПослеВводаЗначения()


&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачалоДня(ДатаОбзвона) < НачалоДня(ТекущаяДата()) Тогда 
		ЭтаФорма.Заголовок = "Обзвон клиентов сервисного центра : Дата звонка ["+Формат(ДатаОбзвона,"ДФ=dd.MM.yyyy; ДП=-")+"]";
	ИначеЕсли НачалоДня(ДатаОбзвона) > НачалоДня(ТекущаяДата()) Тогда  
		ЭтаФорма.Заголовок = "Обзвон клиентов сервисного центра : Передзвонить ["+Формат(ДатаОбзвона,"ДФ=dd.MM.yyyy; ДП=-")+"]";
	Иначе 	
		ЭтаФорма.Заголовок = "Обзвон клиентов сервисного центра : Дата выдачи ["+Формат(СтандартныйПериод.ДатаНачала,"ДФ=dd.MM.yyyy; ДП=-")+ 
							 " - "+Формат(СтандартныйПериод.ДатаОкончания,"ДФ=dd.MM.yyyy; ДП=-")+"]";
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗаголовокФормы()

#КонецОбласти