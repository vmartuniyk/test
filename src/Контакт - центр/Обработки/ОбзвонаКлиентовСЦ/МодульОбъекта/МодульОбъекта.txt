
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	ПараметрыТеста = Новый Структура("ИмяТеста", "Тест_ПроверкаВалидностьЗапросаЗаявокСЦ");
	СписокТестов.Добавить(ПараметрыТеста);

	
	Возврат СписокТестов;
	
КонецФункции

Процедура Тест_ПроверкаВалидностьЗапросаЗаявокСЦ() Экспорт
	ТекстЗапроса = ПолучитьТекстЗапросаЗаявокСЦ();
	ЮнитТест.ПроверитьТип(ТекстЗапроса, Тип("Строка"));
КонецПроцедуры


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// http://r.ktc-ua.com/issues/5081
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// 	Загружаем список заявок сервисного в таблицу значения
//	http://r.ktc-ua.com/issues/5084
//
// Параметры:
//  НЕТ
//
Процедура ЗагрузитьСписокЗаявокСервисногоЦентра(ФормаОбработки) Экспорт
	
	ПолеСортировки =  ФормаОбработки.ПолеСортировки;
	Сортировка_Направление = ФормаОбработки.Сортировка_Направление;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ПолучитьТекстЗапросаЗаявокСЦ();
	Если НЕ ПустаяСтрока(ПолеСортировки)
		И НЕ ПустаяСтрока(Сортировка_Направление) Тогда
		ТекстЗапроса = ТекстЗапроса
				+ " УПОРЯДОЧИТЬ ПО " 
				+ ПолеСортировки + Сортировка_Направление;
	Иначе
		ТекстЗапроса = ТекстЗапроса
						+" УПОРЯДОЧИТЬ ПО
						  |ДатаВыдачи";
	КонецЕсли;
					  
	НачалоДняТД		= НачалоДня(ТекущаяДата());				  
	
	СтандартныйПериодОбробки = ФормаОбработки.СтандартныйПериод;
	ДатаНачала		= ?(СтандартныйПериодОбробки.ДатаНачала=Дата(1,1,1),ДобавитьМесяц(НачалоДняТД,-6),СтандартныйПериодОбробки.ДатаНачала);
	ДатаОкончания	= ?(СтандартныйПериодОбробки.ДатаОкончания=Дата(1,1,1),КонецДня(ТекущаяДата()),СтандартныйПериодОбробки.ДатаОкончания);
	ДатаОбзвона		= КонецДня(ФормаОбработки.ДатаОбзвона);

	Если НачалоДня(ДатаОбзвона) < НачалоДняТД Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%НеNPS%", " НЕ ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборДатаЗвонка%","ДатаЗвонка");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%НеNPS%", " ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборДатаЗвонка%","ОтложеннаяДатаЗвонка");
	КонецЕсли;
	
	Если ДатаНачала <> Дата(1,1,1) Или ДатаОкончания <> Дата(1,1,1) Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборДатаВыдачи%",	               
		"	И Период >= &ДатаНачала
		|	И Период <= &ДатаОкончания ");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборДатаВыдачи%","");
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НашПартнер"		,Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор("9bbd73c0-4748-11e0-9f98-001517115d85")));
	
	Запрос.УстановитьПараметр("ДатаОкончанияОбзвонка"	,ДатаОбзвона);
	Запрос.УстановитьПараметр("ДатаНачалаОбзвонка"		,?(НачалоДня(ДатаОбзвона) = НачалоДняТД, Дата(1,1,1), НачалоДня(ДатаОбзвона)));
	
	Запрос.УстановитьПараметр("ДатаНачала"		,ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	,ДатаОкончания);
	ФормаОбработки.СписокДокументовЗаявкиСЦ.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получаем  список заявок сервисного центра 
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  Строка   - текст запроса
//   
Функция ПолучитьТекстЗапросаЗаявокСЦ()
	ТекстЗапроса = "ВЫБРАТЬ
				|	ГНАТ_ЭтапыРаботы.Ссылка КАК ЭтапРаботы
				|ПОМЕСТИТЬ ЭтапиЗаявок
				|ИЗ
				|	Справочник.ГНАТ_ЭтапыРаботы КАК ГНАТ_ЭтапыРаботы
				|ГДЕ
				|	ГНАТ_ЭтапыРаботы.ЭтоРемонт
				|                
				|ОБЪЕДИНИТЬ
				|               
				|ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
				|                         
				|ИНДЕКСИРОВАТЬ ПО
				|	ЭтапРаботы
				|;  
				////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаявкаСервисногоЦентра КАК ЗаявкаСервисногоЦентра,
				|	ЭтапРаботы КАК ЭтапРаботы,
				|	Период КАК ДатаВыдачи
				|ПОМЕСТИТЬ ВсеВыданыеЗаявки
				|ИЗ
				|	РегистрСведений.ГНАТ_ЭтапыРаботЗаявокСервисногоЦентра
				|ГДЕ
				|	ЭтапРаботы В (ВЫБРАТЬ ЭтапРаботы ИЗ ЭтапиЗаявок)
				|	И ЭтапРаботы = ЗНАЧЕНИЕ(Справочник.ГНАТ_ЭтапыРаботы.Выдано)
				|	%ОтборДатаВыдачи%
				|               
				|ИНДЕКСИРОВАТЬ ПО
				|	ЗаявкаСервисногоЦентра
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Модуль_ДоступныеСклады.Партнер КАК Партнер
				|ПОМЕСТИТЬ СписокНашихПредприятий
				|ИЗ
				|	РегистрСведений.Модуль_ДоступныеСклады КАК Модуль_ДоступныеСклады
				|ГДЕ
				|	НЕ Модуль_ДоступныеСклады.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|                
				|ОБЪЕДИНИТЬ
				|       
				|ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)    
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(&НашПартнер КАК Справочник.Партнеры)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Партнер
				|;
				|
				////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ГНАТ_ЗаявкиСервисногоЦентра.Регистратор КАК ЗаявкаСервисногоЦентра,
				|	ВсеВыданыеЗаявки.ДатаВыдачи,
				|	ГНАТ_ЗаявкиСервисногоЦентра.Партнер,
				|	ГНАТ_ЗаявкиСервисногоЦентра.NPS,
				|	ГНАТ_ЗаявкиСервисногоЦентра.ДатаЗвонка,
				|	ГНАТ_ЗаявкиСервисногоЦентра.ОтложеннаяДатаЗвонка,
				|	ГНАТ_ЗаявкиСервисногоЦентра.Номенклатура
				|ПОМЕСТИТЬ ПартнерыДляОбзвонка
				|ИЗ
				|	РегистрСведений.ГНАТ_ЗаявкиСервисногоЦентра КАК ГНАТ_ЗаявкиСервисногоЦентра
				|
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеВыданыеЗаявки КАК ВсеВыданыеЗаявки
				|ПО ГНАТ_ЗаявкиСервисногоЦентра.Регистратор = ВсеВыданыеЗаявки.ЗаявкаСервисногоЦентра
				|И (ГНАТ_ЗаявкиСервисногоЦентра.Партнер НЕ В (ВЫБРАТЬ Партнер	ИЗ 	СписокНашихПредприятий))
				|И (НЕ ГНАТ_ЗаявкиСервисногоЦентра.Партнер.КлиентПротивОбзвона)
				|;
				|
				////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МИНИМУМ(ПартнерыДляОбзвонка.ДатаВыдачи) КАК ДатаВыдачи,
				|	ПартнерыДляОбзвонка.Партнер,
				|	НАЧАЛОПЕРИОДА(ПартнерыДляОбзвонка.ДатаВыдачи, НЕДЕЛЯ) КАК НачНеделя
				|ПОМЕСТИТЬ ПервыеЗаявкиЗаНеделю
				|ИЗ
				|	ПартнерыДляОбзвонка КАК ПартнерыДляОбзвонка
				|                                        
				|СГРУППИРОВАТЬ ПО
				|	НАЧАЛОПЕРИОДА(ПартнерыДляОбзвонка.ДатаВыдачи, НЕДЕЛЯ),
				|	ПартнерыДляОбзвонка.Партнер
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ДатаВыдачи,
				|	ПартнерыДляОбзвонка.Партнер
				|;       
				|
				////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПартнерыДляОбзвонка.ЗаявкаСервисногоЦентра,
				|	ПартнерыДляОбзвонка.Партнер,
				|	ПартнерыДляОбзвонка.ДатаВыдачи,
				|	ПартнерыДляОбзвонка.NPS,
				|	ПартнерыДляОбзвонка.ДатаЗвонка,
				|	ПартнерыДляОбзвонка.ОтложеннаяДатаЗвонка,
				|	ПартнерыДляОбзвонка.Номенклатура
				|ПОМЕСТИТЬ ВсеЗаявкиНужныеДляОбзвону
				|ИЗ
				|	ПартнерыДляОбзвонка КАК ПартнерыДляОбзвонка

				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервыеЗаявкиЗаНеделю КАК ПервыеЗаявкиЗаНеделю
				|ПО ПартнерыДляОбзвонка.Партнер = ПервыеЗаявкиЗаНеделю.Партнер
				|И ПартнерыДляОбзвонка.ДатаВыдачи = ПервыеЗаявкиЗаНеделю.ДатаВыдачи

				|ГДЕ
				|	%НеNPS% ПартнерыДляОбзвонка.NPS = ЗНАЧЕНИЕ(Перечисление.ГНАТ_NPS.ПустаяСсылка)
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1000
				|	ВсеЗаявкиНужныеДляОбзвону.ЗаявкаСервисногоЦентра КАК ЗаявкаСЦ,
				|	ВсеЗаявкиНужныеДляОбзвону.Партнер КАК Заказчик,
				|	ВсеЗаявкиНужныеДляОбзвону.ДатаЗвонка,
				|	ВсеЗаявкиНужныеДляОбзвону.ОтложеннаяДатаЗвонка,
				|	ВсеЗаявкиНужныеДляОбзвону.Номенклатура,
				|	ВсеЗаявкиНужныеДляОбзвону.ДатаВыдачи,
				|	ВсеЗаявкиНужныеДляОбзвону.ЗаявкаСервисногоЦентра.Номер КАК НомерЗСЦ,
				|	ВсеЗаявкиНужныеДляОбзвону.ЗаявкаСервисногоЦентра.НомерТелефона КАК Телефон,
				|	ВсеЗаявкиНужныеДляОбзвону.ЗаявкаСервисногоЦентра.ВидОперации КАК ТипЗСЦ,
				|	ВсеЗаявкиНужныеДляОбзвону.Партнер.Наименование КАК ПартнерПредставления,
				|	ВсеЗаявкиНужныеДляОбзвону.Номенклатура.Наименование КАК НоменклатураПредставления
				|ИЗ
				|	ВсеЗаявкиНужныеДляОбзвону КАК ВсеЗаявкиНужныеДляОбзвону
				|ГДЕ
				|	ВсеЗаявкиНужныеДляОбзвону.%ОтборДатаЗвонка% <= &ДатаОкончанияОбзвонка
				|	И ВсеЗаявкиНужныеДляОбзвону.%ОтборДатаЗвонка% >= &ДатаНачалаОбзвонка ";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапросаЗаявокСЦ()


#КонецОбласти


#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.9";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Обзвон клиентов сервисного центра");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Обзвон клиентов сервисного центра [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Обзвон клиентов сервисного центра [" + Версия + "]", "БиблиотекаВзаимодействий", "ОткрытиеФормы", Ложь, "БиблиотекаВзаимодействий");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти