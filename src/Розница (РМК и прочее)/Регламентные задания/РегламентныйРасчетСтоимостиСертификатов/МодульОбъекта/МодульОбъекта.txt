
////////////////////////////////////////////////////////////////////////////////
// Модуль используется для расчета стоимости сертификатов на 
// дополнительное техническое обслужывание и записи расчетных значений в
// дополнительные сведение. 
// Регламентное задание нужно для вывода информации на ценники.
//  
////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


Процедура РасчитатьСтоимостьСертификата() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск регламентного задания: Регл. расчет стоимости сертификатов'")
							, УровеньЖурналаРегистрации.Информация, 
							, 
							, НСтр("ru = 'Начало выполнения'"));
	
	ТЗ_НастройкаСертификатов = ПолучитьТаблицуНастроек();
	Если ТЗ_НастройкаСертификатов = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа регламентного задания: Регл. расчет стоимости сертификатов' прервана.")
							, УровеньЖурналаРегистрации.Ошибка, 
							, 
							, НСтр("ru = 'Необходимо задать настройки в обработке «КТС Помощь»'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаРасчетаСертификатов();
	
	Запрос.УстановитьПараметр("ТЗ_НастройкаСертификатов", ТЗ_НастройкаСертификатов);
	Запрос.УстановитьПараметр("РозничнаяЦена", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Отбор.Свойство.Установить(Выборка.Свойство);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Значение = Формат(Выборка.Значение, "ЧДЦ=0");
		НаборЗаписей.Записать();
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Остановка регламентного задания: Регл. расчет стоимости сертификатов'")
							, УровеньЖурналаРегистрации.Информация, 
							, 
							, НСтр("ru = 'Задание выполнено'"));

	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Обработка таблиц настроек

Функция ПолучитьТаблицуНастроек()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Сертификат				КАК Сертификат,
	                      |	ВидНоменклатуры			КАК ВидНоменклатуры,
	                      |	Процент					КАК Процент,
	                      |	ДополнительноеСведение  КАК ДополнительноеСведение
	                      |ИЗ
	                      |	РегистрСведений.КТС_НастройкаПроцентовСертификатов");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции // ПолучитьТаблицуНастроек()
 
Функция РазвернутьТаблицуПоВидамНоменклатуры(НастройкаСертификатов)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сертификат", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	Результат.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("ДополнительноеСведение", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	Для каждого СтрокаТаблицы Из НастройкаСертификатов Цикл
		МассивВидовНоменклатуры = СтрокаТаблицы.ВидыНоменклатуры.ВыгрузитьЗначения();
		Для каждого ВидНоменклатуры Из МассивВидовНоменклатуры Цикл
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ВидНоменклатуры = ВидНоменклатуры;		
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // РазвернутьТаблицуПоВидамЦены()



// Работа с основным запросом

Функция ПолучитьТекстЗапросаРасчетаСертификатов()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТЗ_НастройкаСертификатов.Сертификат КАК Сертификат,
	|	ТЗ_НастройкаСертификатов.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТЗ_НастройкаСертификатов.Процент КАК Процент,
	|	ТЗ_НастройкаСертификатов.ДополнительноеСведение КАК ДополнительноеСведение
	|ПОМЕСТИТЬ НастройкаСертификатов
	|ИЗ
	|	&ТЗ_НастройкаСертификатов КАК ТЗ_НастройкаСертификатов
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ КешОстатки
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(,
	|						Номенклатура.ВидНоменклатуры В
	|						(ВЫБРАТЬ
	|							ВидНоменклатуры
	|						ИЗ	
	|							НастройкаСертификатов))
	|;
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Цена
	|		ИНАЧЕ Цена * Упаковка.Коэффициент 
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ КешЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
	|					Номенклатура В
	|					(ВЫБРАТЬ
	|						Номенклатура
	|					ИЗ КешОстатки) И
	|					ВидЦены = &РозничнаяЦена)
	|;
	|
	|ВЫБРАТЬ
	|	КешОстатки.Номенклатура КАК Номенклатура,
	|	КешОстатки.ВидНоменклатуры КАК ВидНоменклатуры,
	|	КешЦены.Цена КАК Цена
	|ПОМЕСТИТЬ КешПредварительный
	|ИЗ
	|	КешОстатки КАК КешОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешЦены КАК КешЦены
	|		ПО КешОстатки.Номенклатура = КешЦены.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры	
	|;
	|
	|////////////////////////////////////////////////////////////////////
	|// Готовим набор для записи непосредственно в регистр
	|ВЫБРАТЬ
	|	КешПредварительный.Номенклатура КАК Объект,
	|	КешПредварительный.Цена * НастройкаСертификатов.Процент * 0.01 КАК Значение,
	|	НастройкаСертификатов.ДополнительноеСведение КАК Свойство
	|ИЗ
	|	КешПредварительный КАК КешПредварительный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаСертификатов КАК НастройкаСертификатов
	|		ПО НастройкаСертификатов.ВидНоменклатуры = КешПредварительный.ВидНоменклатуры
	|";
	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаРасчетаСертификатов()
 



// Сведения о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.7";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. расчет стоимости сертификатов");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. актуализация границы графика склада [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. расчет стоимости сертификатов [" + Версия + "]", "РасчитатьСтоимостьСертификата();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры
