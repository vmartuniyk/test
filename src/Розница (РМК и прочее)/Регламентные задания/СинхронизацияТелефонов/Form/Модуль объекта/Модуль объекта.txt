////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Синхронизирует номера телефонов регистра сведений Лояльность_НомераТелефонов 
//и контактные данные партнера
Процедура СинхронизацияТелефонов() Экспорт
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Начало синхронизации телефонов партнеров'");
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
		 	УровеньЖурналаРегистрации.Информация,
			,
		 	,
		 	НСтр("ru = 'Синхронизация телефонов партнеров: '"));

	
	Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вид", Вид);
	Запрос.Текст     = ПолучитьТекстЗапросаНомераТелефонов();
	РезультатЗапроса = Запрос.Выполнить();
    Выборка          = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СправочникОбъект  = Выборка.Партнер.ПолучитьОбъект();
		Если ПустаяСтрока(СправочникОбъект.НаименованиеПолное) Тогда 
			СправочникОбъект.НаименованиеПолное = СправочникОбъект.Наименование; 
		КонецЕсли;
		
	 	НомерТелефона = Выборка.НомерТелефона;
		Номер         = Прав(НомерТелефона, 7);
		КодГорода     = Лев(НомерТелефона, 3);
		
		НовыйНомер = "%КодСтраны% (%КодГорода%)%Номер%";
		НовыйНомер = СтрЗаменить(НовыйНомер,  "%КодСтраны%", 	"+38");
		НовыйНомер = СтрЗаменить(НовыйНомер,  "%КодГорода%", 	КодГорода);
		НовыйНомер = СтрЗаменить(НовыйНомер,  "%Номер%", 		Номер); 
		
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапросаНомерСтрокиТелефона();
		Запрос.УстановитьПараметр("Ссылка", СправочникОбъект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда 
			НоваяСтрока = СправочникОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
		Иначе
		 	СтруктураПоиска = Новый Структура("Тип, Вид", Тип, Вид);
			РезультатПоиска = СправочникОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
			Если РезультатПоиска.Количество() = 0 Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация телефонов партнеров'"),
		 		УровеньЖурналаРегистрации.Ошибка,
				,
		 		СправочникОбъект.Ссылка,
		 		НСтр("ru = 'Ошибка в поиске контактной информации в справочнике «Партнеры»'"));
				Продолжить;
			Иначе
				НоваяСтрока = РезультатПоиска[0];
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Представление = НовыйНомер;
		ШаблонЗначениеПоля =
		" <КонтактнаяИнформация xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" 
		| xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
		| xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
		| Представление=""%Представление%"">
		| <Комментарий/>
		| <Состав xsi:type=""НомерТелефона"" 
		| 						КодСтраны=""38"" 
		| 						КодГорода=""%КодГорода%"" 
		| 						Номер=""%Номер%"" 
		| /></КонтактнаяИнформация>";
		
		ШаблонЗначениеПоля = СтрЗаменить(ШаблонЗначениеПоля, 	"%Представление%",   НоваяСтрока.Представление);
		ШаблонЗначениеПоля = СтрЗаменить(ШаблонЗначениеПоля, 	"%КодГорода%", 		 КодГорода);
		ШаблонЗначениеПоля = СтрЗаменить(ШаблонЗначениеПоля, 	"%Номер%", 			 Номер); 
		НоваяСтрока.ЗначенияПолей = ШаблонЗначениеПоля;
		НоваяСтрока.НомерТелефона = НомерТелефона;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
		 	УровеньЖурналаРегистрации.Ошибка,
			,
		 	СправочникОбъект.Ссылка,
		 	НСтр("ru = 'Синхронизация телефонов партнеров: '"+ОписаниеОшибки()+""));
		КонецПопытки;	
	КонецЦикла; 
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Завершение синхронизации телефонов партнеров'"),
		 	УровеньЖурналаРегистрации.Информация,
			,
		 	,
		 	НСтр("ru = 'Регалментное задание успешно завершено.'"));

	
КонецПроцедуры






// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Возвращает текст запроса
Функция ПолучитьТекстЗапросаНомераТелефонов()
	
	 
	 Текст = 
	    "ВЫБРАТЬ
	 |	ПартнерыКонтактнаяИнформация.Ссылка,
	 |	ВЫБОР
	 |		КОГДА ПОДСТРОКА(ПартнерыКонтактнаяИнформация.НомерТелефона, 1, 10) = ПартнерыКонтактнаяИнформация.НомерТелефона
	 |			ТОГДА ПартнерыКонтактнаяИнформация.НомерТелефона
	 |		ИНАЧЕ ПОДСТРОКА(ПартнерыКонтактнаяИнформация.НомерТелефона, 3, 10)
	 |	КОНЕЦ КАК НомерТелефона
	 |ПОМЕСТИТЬ КешКонтактнаяИнформация
	 |ИЗ
	 |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	 |ГДЕ
	 |	ПартнерыКонтактнаяИнформация.Вид = &Вид
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ПартнерыКонтактнаяИнформация.Ссылка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Лояльность_НомераТелефонов.НомерТелефона КАК НомерТелефона,
	 |	Лояльность_НомераТелефонов.Партнер КАК Партнер
	 |ПОМЕСТИТЬ КешЛояльностьТелефонов
	 |ИЗ
	 |	РегистрСведений.Лояльность_НомераТелефонов КАК Лояльность_НомераТелефонов
	 |ГДЕ
	 |	Лояльность_НомераТелефонов.Основной
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	Партнер
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КешЛояльностьТелефонов.Партнер,
	 |	КешЛояльностьТелефонов.НомерТелефона
	 |ИЗ
	 |	КешЛояльностьТелефонов КАК КешЛояльностьТелефонов
	 |ГДЕ
	 |	КешЛояльностьТелефонов.НомерТелефона НЕ В
	 |				(ВЫБРАТЬ
	 |					КешКонтактнаяИнформация.НомерТелефона
	 |				ИЗ
	 |					КешКонтактнаяИнформация)";
	 
	 Возврат Текст;
	 
КонецФункции	

//Возвращает текст запроса
Функция ПолучитьТекстЗапросаНомерСтрокиТелефона()
	
	 ТекстЗапроса =
		 "ВЫБРАТЬ
		|	Ссылка,
		|	Тип
		|ПОМЕСТИТЬ ДоступныеВидыКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации
		|ГДЕ
		|	Родитель = Значение(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
		|И	Тип		 = Значение(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|;
		|ВЫБРАТЬ
		|	&Ссылка КАК Партнер,
		|	ДоступныеВидыКИ.Ссылка КАК Вид,
		|	ДоступныеВидыКИ.Тип КАК Тип,
		|	СпрПартнерыКИ.НомерТелефона КАК НомерТелефона		
		|ИЗ
		|	ДоступныеВидыКИ КАК ДоступныеВидыКИ
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК СпрПартнерыКИ
		|ПО	СпрПартнерыКИ.Ссылка = &Ссылка
		|И	СпрПартнерыКИ.Вид	 = ДоступныеВидыКИ.Ссылка

		|ГДЕ
		|	IsNull(НомерТелефона, Неопределено) = Неопределено";
	 
	 Возврат ТекстЗапроса;
	 
КонецФункции	






// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
// Предусмотрено 2 команды:
// 1. "Открыть форму обработки" для загрузки прайс-листа в диалоговом режиме
// 2. "Загрузить прайс-лист и сохранить протокол в файл" для загрузки прайс-листа по регламентному заданию и
// сохранения протокола в файл.
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия
	Версия = "1.0.3";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Регл. синхронизация телефонов [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Регл. синхронизация телефонов [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. синхронизация телефонов [" + Версия + "]", "СинхронизацияТелефонов();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры
