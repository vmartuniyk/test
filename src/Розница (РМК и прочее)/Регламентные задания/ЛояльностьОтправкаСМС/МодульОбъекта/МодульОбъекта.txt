
#Область ПрограммныйИнтерфейс

Процедура ОтправитьСМС() Экспорт
	
	Перем ДатаНачалаРассылки, ДнейКулдауна, ТекстСМС, МинимальнаяСуммаБонусов;
	
	НастройкиРассылки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокЛояльностьОтправкаСМС", , , "ДополнительныеНастройкиОбработокЛояльностьОтправкаСМС");
	Если НЕ ТипЗнч(НастройкиРассылки) = Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Настройки лояльность отправка СМС не заданы!'");	
	КонецЕсли;
	
	НастройкиРассылки.Свойство("ДнейКулдауна", ДнейКулдауна);
	НастройкиРассылки.Свойство("ДатаНачалаРассылки", ДатаНачалаРассылки);
	НастройкиРассылки.Свойство("МинимальнаяСуммаБонусов", МинимальнаяСуммаБонусов);
	НастройкиРассылки.Свойство("ТекстСМС", ТекстСМС);
	
	Если ТекущаяДатаСеанса() > ДатаНачалаРассылки Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаДляОтправкиСМС();
		Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата() - ДнейКулдауна * 86400));
		Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДата() - ДнейКулдауна * 86400 ));
		Запрос.УстановитьПараметр("МинимальнаяСуммаБонусов", МинимальнаяСуммаБонусов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтрЗаменить(ТекстСМС, "%Сумма%", Формат(Выборка.БонусОстаток, "ЧГ=0"));	
			
			ДокументСообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
			ДокументСообщениеSMS.Дата = ТекущаяДатаСеанса();
			ДокументСообщениеSMS.Автор 			= ПараметрыСеанса.ТекущийПользователь;
			ДокументСообщениеSMS.Важность 		= Перечисления.ВариантыВажностиВзаимодействия.Низкая;
			ДокументСообщениеSMS.Ответственный 	= ПараметрыСеанса.ТекущийПользователь;;
			ДокументСообщениеSMS.ТекстСообщения = ТекстСообщения;
			ДокументСообщениеSMS.Состояние 		= Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
				
		    НоваяСтрока 						= ДокументСообщениеSMS.Адресаты.Добавить();
			НоваяСтрока.Контакт 				= Выборка.Партнер;
			НоваяСтрока.КакСвязаться 			= "+38" + СокрЛП(Выборка.НомерТелефона);
			НоваяСтрока.НомерДляОтправки 		= СокрЛП(Выборка.НомерТелефона);
			НоваяСтрока.ПредставлениеКонтакта 	= Строка(Выборка.Партнер);
			НоваяСтрока.СостояниеСообщения 		= Перечисления.СостоянияСообщенияSMS.Исходящее;
			
			
			Попытка
				ДокументСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ДокументСообщениеSMS, Неопределено);
			
			Попытка
				ДокументСообщениеSMS.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОтправитьСМС()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстЗапросаДляОтправкиСМС()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Партнер
		|ПОМЕСТИТЬ КешОборотов
		|ИЗ
		|	РегистрНакопления.Лояльность_Бонусы.Обороты(&НачалоДня, &КонецДня) 
		|;
		|ВЫБРАТЬ
		|	Бонусы.Партнер,
		|	Бонусы.БонусОстаток,
		|	НТ.НомерТелефона
		|ИЗ
		|	РегистрНакопления.Лояльность_Бонусы.Остатки(&КонецДня, Партнер В (ВЫБРАТЬ Партнер ИЗ КешОборотов)) КАК Бонусы
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Лояльность_НомераТелефонов КАК НТ
		|ПО	НТ.Партнер = Бонусы.Партнер
		|И	НТ.Основной = Истина
		|
		|ГДЕ
		|	Бонусы.БонусОстаток > &МинимальнаяСуммаБонусов	
		|;
		|УНИЧТОЖИТЬ КешОборотов;	
		|";
	Возврат ТекстЗапроса;	
	
КонецФункции // ПолучитьТекстЗапросаДляОтправкиСМС();

#КонецОбласти

#Область  СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.0";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "ЛояльностьОтправкаСМС");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Обработка используется для оповещения покупателей о начисленых бонусах [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "ЛояльностьОтправкаСМС [" + Версия + "]", "ЛОСМС", "ОткрытиеФормы", Ложь, "ЛОСМС");
	ДобавитьКоманду(ТаблицаКоманд, "Лояльность отправка СМС [1.0.0]", "ОтправитьСМС();", "ВызовСерверногоМетода");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти
