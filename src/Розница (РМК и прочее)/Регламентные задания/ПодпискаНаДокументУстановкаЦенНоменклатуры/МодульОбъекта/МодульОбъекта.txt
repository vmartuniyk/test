
#Область ИнтерфейсАвтоТеста
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура обновляет заработок менеджера в свойствах номенклатуры и также заполняет старую цену
// 
// Параметры:
//  Нет
//
Процедура ВыполнитьОбновлениеЗаработкаРозничногоМенеджера() Экспорт
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Обновление заработка менеджера в свойствах номенклатуры'");
    ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Обновление заработка менеджера в свойствах номенклатуры'"));
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаКешаНоменклатуры();
	Запрос.Выполнить();
	
	ОбработатьИзмененияДополнительныхДанныхНоменклатуры(Запрос);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Обновлен заработка менеджера в свойствах номенклатуры'"));
	
КонецПроцедуры // ВыполнитьОбновлениеЗаработкаРозничногоМенеджера()

// Процедура обновляет заработок менеджера в свойствах номенклатуры и также заполняет старую цену
// 
// Параметры:
//  Источник 		- ДокументОбъект.УстановкаЦенНоменклатуры 	- Документ объект установки цен номенклатуры
//  Отказ			- Булево                               		- Выявлены ошибки при проведении документа
//  РежимПроведения - РежимПроведенияДокумента					- Режим проведения документа
//
Процедура ВыполнитьОбновлениеЗаработкаРозничногоМенеджераИзИсточника(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ ИЛИ НЕ Источник.Проведен Тогда 
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ПолучитьТекстЗапросаКешаНоменклатурыИзИсточника();
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85"))); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		ОбработатьИзмененияДополнительныхДанныхНоменклатуры(Запрос);
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ВыполнитьОбновлениеЗаработкаРозничногоМенеджераИзИсточника() 

// Процедура выполняет рассылку изменения цен номенклатуры
// 
// Параметры:
//  Источник 		- ДокументОбъект.УстановкаЦенНоменклатуры 	- Документ объект установки цен номенклатуры
//  Отказ			- Булево                               		- Выявлены ошибки при проведении документа
//  РежимПроведения - РежимПроведенияДокумента					- Режим проведения документа
//
Процедура ВыполнитьРассылкуИзмененияЦен(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ ИЛИ НЕ Источник.Проведен Тогда 
		Возврат; 
	КонецЕсли;
	
	ЗапросОповещение = Новый Запрос;
	ЗапросОповещение.Текст = ПолучитьТекстЗапросаИзмененияЦен();
		
	ЗапросОбновитьЦены = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.ALPS_ВидыЦен");
	Выборка = ЗапросОбновитьЦены.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
			
		ЗапросОповещение.УстановитьПараметр("Дата", 	Источник.Дата-1);
		ЗапросОповещение.УстановитьПараметр("Ссылка", 	Источник.Ссылка);
		ЗапросОповещение.УстановитьПараметр("ВидЦены", 	Выборка.ВидЦены);
		РезультатОповещение = ЗапросОповещение.ВыполнитьПакет();
		ВыборкаОповещение	= РезультатОповещение[РезультатОповещение.ВГраница()].Выбрать();
		
		СписокРассылки = Новый Соответствие;
		Пока ВыборкаОповещение.Следующий() Цикл
			
			СтруктураПисьма = СписокРассылки[ВыборкаОповещение.Склад];
			Если СтруктураПисьма = Неопределено Тогда
				Тема = 	"Внимание изменение цен!";
				Тело =  "<P><B>Дата:</B> "	    	+ Источник.Дата									+
						"<P><B>Пользователь:</B> "	+ ПараметрыСеанса.ТекущийПользователь 			+
						"<P><B>Комментарий:</B> " 	+ Источник.Ссылка.Комментарий		   			+
						"<P><B>Ссылка:</B> "  		+ ПолучитьНавигационнуюСсылку(Источник.Ссылка)  +
						"<table border=""1"" cellspacing=""0"" width=""95%"" style=""font-family:ms shell dlg font-size:8""> " +
							"<tr bgcolor=""#f7f3de"">" +
								"<td rowspan=""2"">Код</td>" +
								"<td rowspan=""2"">Артикул</td>" +
								"<td rowspan=""2"">Номенклатура</td>" +
								"<td colspan=""3"" align=""center"">" + Строка(Выборка.ВидЦены) + ", " + Строка(Выборка.ВидЦены.ВалютаЦены) + "</td>" +	
							"</tr>" +
							"<tr bgcolor=""#f7f3de"">" +
								"<td align=""center"">Старая цена</td>" +
								"<td align=""center"">%</td>" +
								"<td align=""center"">Новая цена</td>" +
							"</tr>";
				Кому = Новый Массив;
				Кому.Добавить(Новый Структура("Адрес, Представление", ВыборкаОповещение.Кому, "It's ROBOT"));	
				СтруктураПисьма = Новый Структура("Тема, Тело, Кому, Профиль", Тема, Тело, Кому, ВыборкаОповещение.Профиль);
				
				СписокРассылки.Вставить(ВыборкаОповещение.Склад, СтруктураПисьма); 
			КонецЕсли;
			
			СтруктураПисьма.Тело = СтруктураПисьма.Тело +
									"<tr>"
										"<td>" + ВыборкаОповещение.Код 						+ "</td>" +
										"<td>" + ВыборкаОповещение.Артикул 					+ "</td>" +
										"<td>" + ВыборкаОповещение.Номенклатура 			+ "</td>" +
										"<td  align=""center""><font color=gray>" + ВыборкаОповещение.OldPrice + "</font></td>" +
										"<td  align=""center"">" + ?(ВыборкаОповещение.Процент >= 0, Формат(ВыборкаОповещение.Процент, "ЧДЦ=2; ЧН=") + "%", "<font color=red>" + Формат(ВыборкаОповещение.Процент, "ЧДЦ=2; ЧН=") + "%</font>") + "</td>" +
										"<td  align=""center"">" + ВыборкаОповещение.Цена 	+ "</td>" +
									"</tr>";
			
		КонецЦикла;
		
		//Для Каждого ЭлементРассылки Из СписокРассылки Цикл
		//	СтруктураПисьма = ЭлементРассылки.Значение;
		//	ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(СтруктураПисьма.Тема, СтруктураПисьма.Тело, СтруктураПисьма.Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
		//	ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(СтруктураПисьма.Профиль, ПараметрыПисьма);	
		//КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // ВыполнитьРассылкуИзмененияЦен()
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования
Процедура ОбработатьИзмененияДополнительныхДанныхНоменклатуры(Запрос)
	
	СвойствоЗаработок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("904cd00e-c6ba-11e2-b7da-001e673c80fc"));
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоЗаработок);
	
	Запрос.Текст = ПолучитьТекстЗапросаЗаработокМенеджера();
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Розница", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("Входная", Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84fb-404c-11e0-9f98-001517115d85")));
	Запрос.УстановитьПараметр("СвойствоЗаработок", СвойствоЗаработок);
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница() - 2].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		Если Выборка.Значение <> 0  Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЕсли;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла; 


	
	ВыборкаОповещение = РезультатПакета[РезультатПакета.ВГраница() - 1].Выбрать();
	СписокРассылки = Новый Соответствие;
	Пока ВыборкаОповещение.Следующий() Цикл
		
		СтруктураПисьма = СписокРассылки[ВыборкаОповещение.Склад];
		Если СтруктураПисьма = Неопределено Тогда
			Тема = 	"Внимание заработок менеджера изменился!";
			Тело =  "<P><B>Дата:</B> "	    	+ ТекущаяДата()									+
					"<P><B>Пользователь:</B> "	+ ПараметрыСеанса.ТекущийПользователь 			+
					"<table border=""1"" cellspacing=""0"" width=""95%"" style=""font-family:ms shell dlg font-size:8""> " +
						"<tr bgcolor=""#f7f3de"">" +
							"<td ""2"">Код</td>" +
							"<td ""2"">Артикул</td>" +
							"<td ""2"">Номенклатура</td>" +
							"<td ""3"">Заробіток менеджера</td>" +

						"</tr>";
			Кому = Новый Массив;
			Кому.Добавить(Новый Структура("Адрес, Представление", ВыборкаОповещение.Кому, "It's ROBOT"));	
						
			СтруктураПисьма = Новый Структура("Тема, Тело, Кому, Профиль", Тема, Тело, Кому, ВыборкаОповещение.Профиль);
			
			СписокРассылки.Вставить(ВыборкаОповещение.Склад, СтруктураПисьма); 
		КонецЕсли;
		
		СтруктураПисьма.Тело = СтруктураПисьма.Тело +
								"<tr>"
									"<td>" + ВыборкаОповещение.Код 						+ "</td>" +
									"<td>" + ВыборкаОповещение.Артикул 					+ "</td>" +
									"<td>" + ВыборкаОповещение.Номенклатура 			+ "</td>" +
									"<td>" + ВыборкаОповещение.ЗаработокМенеджера		+ "</td>" +
								"</tr>";
		
	КонецЦикла;
	
	Для Каждого ЭлементРассылки Из СписокРассылки Цикл
		СтруктураПисьма = ЭлементРассылки.Значение;
		ПараметрыПисьма = ktcОбщийМодульПротоколов.СформироватьПараметрыПисьма(СтруктураПисьма.Тема, СтруктураПисьма.Тело, СтруктураПисьма.Кому, , , , , , ТипТекстаПочтовогоСообщения.HTML);
		ktcОбщийМодульПротоколов.ОтправитьСообщениеПоSMTP(СтруктураПисьма.Профиль, ПараметрыПисьма);	
	КонецЦикла;	
	
	
	
	СвойствоСтараяЦена = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("99ee07fc-c6c9-11e2-b7da-001e673c80fc"));
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоСтараяЦена);
	
	Запрос.Текст = ПолучитьТекстЗапросаСтарыхЦен();
    Запрос.УстановитьПараметр("СвойствоСтараяЦена", СвойствоСтараяЦена);
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакета[РезультатПакета.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		Если Выборка.Значение <> 0  Тогда
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЕсли; 
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
				
КонецПроцедуры // ОбработатьИзмененияДополнительныхДанныхНоменклатуры()


// Возвращает текст запроса кеша номенклатуры
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаКешаНоменклатуры()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//Временная таблица номеклатуры в наличии и актуальной номенклатуры
		|ВЫБРАТЬ
		|	Вл.Номенклатура
		|ПОМЕСТИТЬ Cache_Номенклатура	
		|ИЗ
		|	(
		|		ВЫБРАТЬ
		|			Номенклатура	
		|		ИЗ
		|			РегистрНакопления.ТоварыОрганизаций.Остатки
		|			
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			Номенклатура
		|		ИЗ
		|			РегистрСведений.ALPS_АктуальностьНоменклатуры.СрезПоследних
		|       ГДЕ
		|			Актуально
		|	) КАК Вл
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вл.Номенклатура
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаКешаНоменклатуры()

// Возвращает текст запроса кеша номенклатуры из источника
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаКешаНоменклатурыИзИсточника()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//Временная таблица номеклатуры из источника
		|ВЫБРАТЬ
		|	Номенклатура
		|ПОМЕСТИТЬ Cache_Номенклатура	
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.Товары
		|
		|ГДЕ
		|	Ссылка = &Ссылка	
		|И	ВидЦены = &ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		// 
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура		
		|ИЗ
		|	Cache_Номенклатура
		|";
	Возврат ТекстЗапроса;			
	
КонецФункции // ПолучитьТекстЗапросаКешаНоменклатурыИзИсточника()

// Возвращает текст запроса заработка менеджера
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаЗаработокМенеджера()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ПроцентНиз.НижняяГраница							КАК НижняяГраница,
		|	IsNull(Минимум(ПроцентВерх.НижняяГраница), 9999999) КАК ВерхняяГраница
		|ПОМЕСТИТЬ ПервыйКешГраниц	
		|Из
		|	РегистрСведений.ktcПроцентыМенеджера КАК ПроцентНиз
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ktcПроцентыМенеджера КАК ПроцентВерх
		|По ПроцентВерх.НижняяГраница > ПроцентНиз.НижняяГраница
        |
		|СГРУППИРОВАТЬ ПО
		|	ПроцентНиз.НижняяГраница
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ПервыйКешГраниц.НижняяГраница	КАК НижняяГраница,
		|	ПервыйКешГраниц.ВерхняяГраница	КАК ВерхняяГраница,
		|	Процент.ЗначениеПорога / 100	КАК Процент	
		|ПОМЕСТИТЬ ВторойКешГраниц
		|ИЗ
		|	ПервыйКешГраниц КАК ПервыйКешГраниц
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ktcПроцентыМенеджера КАК Процент
		|По Процент.НижняяГраница = ПервыйКешГраниц.НижняяГраница
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПервыйКешГраниц;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	(ВалютаВходная.Курс / ВалютаВходная.Кратность) / (ВалютаРозница.Курс / ВалютаРозница.Кратность) КАК Курс 
		|ПОМЕСТИТЬ КешКурсПересчета 		
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = ВЫРАЗИТЬ(&Входная КАК Справочник.ВидыЦен).ВалютаЦены) КАК ВалютаВходная
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ВалютаРозница
		|ПО ВалютаРозница.Валюта = ВЫРАЗИТЬ(&Розница КАК Справочник.ВидыЦен).ВалютаЦены
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СпрНоменклатура.Номенклатура,
		|	ВЫРАЗИТЬ(	ВЫБОР
		|					КОГДА IsNull(БонусыМенеджерам.Используется, Ложь)
		|					ТОГДА БонусыМенеджерам.Бонус
		|					КОГДА IsNull(ЦеныВходная.Цена, 0) = 0 
		|					ТОГДА 0
		|					КОГДА IsNull(ЦеныРозница.Цена, 0) = 0 
		|					ТОГДА 0
		|					ИНАЧЕ ЦеныРозница.Цена * IsNull(ВторойКешГраниц.Процент, 0)
		|				КОНЕЦ * IsNull(МножительПоМесяцам.Коэффициент, 1) КАК Число(10, 2))   КАК ЗаработокМенеджера
		|	
		|ПОМЕСТИТЬ КешЗаработка	
		|ИЗ
		|	Cache_Номенклатура КАК СпрНоменклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &Входная) КАК ЦеныВходная
		|ПО ЦеныВходная.Номенклатура = СпрНоменклатура.Номенклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &Розница) КАК ЦеныРозница
		|ПО ЦеныРозница.Номенклатура = СпрНоменклатура.Номенклатура
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешКурсПересчета КАК КурсПересчета
		|ПО ИСТИНА 
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ ВторойКешГраниц КАК ВторойКешГраниц
		|ПО ВторойКешГраниц.НижняяГраница <= 	ВЫБОР 
		|											КОГДА IsNull(ЦеныВходная.Цена, 0) = 0 
		|											ТОГДА 0 
		|											ИНАЧЕ (IsNull(ЦеныРозница.Цена, 0) / (IsNull(ЦеныВходная.Цена, 0) * КурсПересчета.Курс) - 1) * 100
		|										КОНЕЦ
		|И	ВторойКешГраниц.ВерхняяГраница > 	ВЫБОР 
		|											КОГДА IsNull(ЦеныВходная.Цена, 0) = 0 
		|											ТОГДА 0 
		|											ИНАЧЕ (IsNull(ЦеныРозница.Цена, 0) / (IsNull(ЦеныВходная.Цена, 0) * КурсПересчета.Курс) - 1) * 100
		|										КОНЕЦ
		|										
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БонусыМенеджерам КАК БонусыМенеджерам
		|ПО	БонусыМенеджерам.Дата         = &Сегодня
		|И	БонусыМенеджерам.Номенклатура = СпрНоменклатура.Номенклатура
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам КАК МножительПоМесяцам
		|ПО	МножительПоМесяцам.НачалоПериода <= &Сегодня
		|И	МножительПоМесяцам.КонецПериода  >= &Сегодня
        |
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВторойКешГраниц;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешКурсПересчета;
		////////////////////////////////////////////////////////////////////////////////
        //
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДопСведения.Объект КАК Справочник.Номенклатура) 	КАК Номенклатура,
		|	ДопСведения.Значение 										КАК Значение
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДопСведения
		|ГДЕ
		|	ДопСведения.Свойство = &СвойствоЗаработок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура 	
		|;
		////////////////////////////////////////////////////////////////////////////////
        //
		|ВЫБРАТЬ
		|	КешЗаработка.Номенклатура 		КАК Объект,
		|	&СвойствоЗаработок 				КАК Свойство,
		|	КешЗаработка.ЗаработокМенеджера КАК Значение
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	КешЗаработка КАК КешЗаработка
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|ПО	ДопСведения.Номенклатура = КешЗаработка.Номенклатура
   		|
		|ГДЕ
		|	IsNull(ДопСведения.Значение, -1) <> КешЗаработка.ЗаработокМенеджера	
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешЗаработка;
		////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		| 	Данные.Объект 	КАК Объект,
		|   Данные.Свойство КАК Свойство,
		|   Данные.Значение КАК Значение
		|ИЗ
		|	Данные КАК Данные
		|;
		////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ТоварыВНаличии.Номенклатура.Код КАК Код,
        |	ТоварыВНаличии.Номенклатура.Артикул КАК Артикул,
        |	ТоварыВНаличии.Номенклатура,
        |	ТоварыВНаличии.Склад,
        |	Регламент_EmailОповещение.Кому,
        |	Регламент_EmailОповещение.Профиль,
        |	Данные.Значение КАК ЗаработокМенеджера
        |ИЗ
        |	РегистрНакопления.ТоварыНаСкладах.Остатки(
        |			,
        |			Номенклатура В
        |				(ВЫБРАТЬ
        |					Данные.Объект
        |				ИЗ
        |					Данные КАК Данные)) КАК ТоварыВНаличии
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Данные КАК Данные
		|ПО Данные.Объект = ТоварыВНаличии.Номенклатура 
	    |
        |ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Регламент_EmailОповещение КАК Регламент_EmailОповещение
        |ПО Регламент_EmailОповещение.ВидЦены = &Розница
        |И 	ТоварыВНаличии.Склад = Регламент_EmailОповещение.Склад
	    |;
	    ////////////////////////////////////////////////////////////////////////////////
	    |УНИЧТОЖИТЬ Данные;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса старых цен
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаСтарыхЦен()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ДействующиеЦены.Период			КАК Период,
		|	ДействующиеЦены.Номенклатура 	КАК Номенклатура,
		|	ДействующиеЦены.ВидЦены			КАК ВидЦены,
		|	ДействующиеЦены.Цена         	КАК Цена
		|ПОМЕСТИТЬ ДействующиеЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Cache_Номенклатура) И ВидЦены = &Розница) КАК ДействующиеЦены
		|ИНДЕКСИРОВАТЬ ПО 
		|	Период, 
		|	Номенклатура,
		|	ВидЦены	
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СтарыеЦены.Номенклатура		КАК Номенклатура,
		|	Максимум(СтарыеЦены.Период) КАК Период
		|ПОМЕСТИТЬ СтарыеЦеныПериод			
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК СтарыеЦены
		|	
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеЦены КАК ДействующиеЦены
		|ПО	ДействующиеЦены.Период 		 > СтарыеЦены.Период
		|И	ДействующиеЦены.Номенклатура = СтарыеЦены.Номенклатура
		|И	ДействующиеЦены.ВидЦены		 = СтарыеЦены.ВидЦены	
        |
		|СГРУППИРОВАТЬ ПО
		|	СтарыеЦены.Номенклатура
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Номенклатура
		|;	
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	СтарыеЦены.Номенклатура	КАК Номенклатура,
		|	СтарыеЦены.Цена		    КАК Цена
		|ПОМЕСТИТЬ СтарыеЦены
		|ИЗ
		|	СтарыеЦеныПериод КАК СтарыеЦеныПериод
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК СтарыеЦены 
		|ПО	СтарыеЦены.Период 		= СтарыеЦеныПериод.Период
		|И	СтарыеЦены.Номенклатура = СтарыеЦеныПериод.Номенклатура
		|И	СтарыеЦены.ВидЦены		= &Розница
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	СтарыеЦены.Номенклатура	
		|;	
		////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтарыеЦеныПериод;
		////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		| 	ДействующиеЦены.Номенклатура КАК Номенклатура,
		| 	ВЫБОР
		| 		КОГДА IsNull(СтарыеЦены.Цена, 0) > ДействующиеЦены.Цена
		| 		ТОГДА СтарыеЦены.Цена
		| 		ИНАЧЕ 0
		| 	КОНЕЦ КАК Значение	
		|ПОМЕСТИТЬ ДанныеКЗаписи
		|ИЗ
		|	ДействующиеЦены КАК ДействующиеЦены
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЦены КАК СтарыеЦены
		|ПО СтарыеЦены.Номенклатура = ДействующиеЦены.Номенклатура	
		|;	
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДействующиеЦены;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтарыеЦены;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДопСведения;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДопСведения.Объект КАК Справочник.Номенклатура) 	КАК Номенклатура,
		|	ДопСведения.Значение 										КАК Значение
		|ПОМЕСТИТЬ ДопСведения
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДопСведения
		|ГДЕ
		|	ДопСведения.Свойство = &СвойствоСтараяЦена
        |
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура 	
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ДанныеКЗаписи.Номенклатура 	КАК Объект,
		| 	&СвойствоСтараяЦена			КАК Свойство,
		| 	ДанныеКЗаписи.Значение		КАК Значение
		//|ПОМЕСТИТЬ Данные
		|ИЗ
		| 	ДанныеКЗаписи КАК ДанныеКЗаписи
		| 	
		|ЛЕВОЕ СОЕДИНЕНИЕ ДопСведения КАК ДопСведения
		|ПО	ДопСведения.Номенклатура = ДанныеКЗаписи.Номенклатура
		| 
		|ГДЕ
		|	IsNull(ДопСведения.Значение, -1) <> ДанныеКЗаписи.Значение
		|;
 	    |";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСтарыхЦен()

// Возвращает текст запроса изменения цен
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаИзмененияЦен()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Номенклатура,
		|	Характеристика,
		|   ВидЦены,
		|   Цена
		|
		|ПОМЕСТИТЬ КешНоменклатуры
		|ИЗ
		| 	Документ.УстановкаЦенНоменклатуры.Товары
		|
		|ГДЕ
		|	Ссылка  = &Ссылка
		|И	ВидЦены = &ВидЦены
		|;
		////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ТабРезультат.Номенклатура,		
		|   ТабРезультат.Характеристика,
		|   ТабРезультат.Цена,
		|	ЕСТЬNULL(Цены.Цена, 0) КАК OldPrice
		|
		|ПОМЕСТИТЬ ТабРезультат
		|ИЗ КешНоменклатуры КАК ТабРезультат
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ВидЦены = &ВидЦены И Номенклатура В (ВЫБРАТЬ Номенклатура Из КешНоменклатуры)) КАК Цены
		|ПО Цены.Номенклатура 	= ТабРезультат.Номенклатура
		|И	Цены.Характеристика = ТабРезультат.Характеристика
		|
		|ГДЕ
		|	ТабРезультат.ВидЦены = &ВидЦены
		|;
		////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ	
		|	EmailОповещение.Кому,	
		|   EmailОповещение.Профиль,
		|	EmailОповещение.Склад,
		|	ТабРезультат.Номенклатура.Код 		КАК Код,
		|	ТабРезультат.Номенклатура.Артикул 	КАК Артикул,
		|	ТабРезультат.Номенклатура,
		|   ТабРезультат.Характеристика,
		|   ТабРезультат.Цена,
		|   ТабРезультат.OldPrice,
		|	ВЫРАЗИТЬ(	ВЫБОР
		|					КОГДА ТабРезультат.OldPrice = 0
		|					ТОГДА 0
		|					ИНАЧЕ (ТабРезультат.Цена / ТабРезультат.OldPrice - 1) * 100
		|				КОНЕЦ КАК Число(10,2)) КАК Процент
		|
		|ИЗ
		|	ТабРезультат КАК ТабРезультат 
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Регламент_EmailОповещение КАК EmailОповещение
		|ПО EmailОповещение.ВидЦены = &ВидЦены
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварВНаличии
		|ПО	ТоварВНаличии.Номенклатура 		= ТабРезультат.Номенклатура
		|И	ТоварВНаличии.Характеристика 	= ТабРезультат.Характеристика
		|И	ТоварВНаличии.Склад				= EmailОповещение.Склад
		|
		|УПОРЯДОЧИТЬ ПО ТабРезультат.Номенклатура.Родитель ИЕРАРХИЯ, ТабРезультат.Номенклатура.Наименование
		|;
		////////////////////////////////////////////////////////////////////////////////////
		|";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаСтарыхЦен()
#КонецОбласти

#Область СведенияОВнешнейОбработке
	
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Подписка на документ установки цен номенклатуры");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Подписка на документ установки цен номенклатуры [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Регл. обновление бонусов заработка менеджера [" + Версия + "]", "ВыполнитьОбновлениеЗаработкаРозничногоМенеджера();", "ВызовСерверногоМетода");
	    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	Выполнить(ИдентификаторКоманды);	
КонецПроцедуры

#КонецОбласти 
