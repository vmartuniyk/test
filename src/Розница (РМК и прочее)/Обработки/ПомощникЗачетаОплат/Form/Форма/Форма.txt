
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	Возврат СписокТестов;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//Документ = Параметры.Документ;
	//
	//Если Не ЗначениеЗаполнено(Документ) Тогда
	//	ТекстИсключения = НСтр("ru='Не предусмотрено непосредственное открытие формы обработки.'");
	//	ВызватьИсключение ТекстИсключения;
	//КонецЕсли;

	//ПолучитьРеквизитыРасчетовСПартнером();
	//ЗаполнитьТаблицуПоРасчетамСПартнерами();
	//УправлениеЭлементамиФормы();
	//
	//Если ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
	//	ТекстИсключения = НСтр("ru='Не предусмотрено выполнять зачет для валюты взаиморасчетов отличающейся от регламентированой валюты.'");
	//	ВызватьИсключение ТекстИсключения;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	РассчитатьСуммуЗачетаАванса();
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
	Отладка();	
	РассчитатьСуммуЗачетаАванса();   
КонецПроцедуры

Процедура Отладка()
	ПолучитьРеквизитыРасчетовСПартнером();
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	УправлениеЭлементамиФормы();
	
	Если ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекстИсключения = НСтр("ru='Не предусмотрено выполнять зачет для валюты взаиморасчетов отличающейся от регламентированой валюты.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;  	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийТЗОплаты

&НаКлиенте
Процедура ОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле.Имя = "ОплатыДокументОплаты" Тогда
		СтрокаТаблицы = Элементы.Оплаты.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено
		 И ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			ОткрытьЗначение(СтрокаТаблицы.ДокументОплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ЗачестьОплатуИЗакрыть(Команда)
	
	Перем МассивОбработанныхДокументов;
	
	Отказ = Ложь;
	СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов, Отказ);
	ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов);
	Оповестить("ЗачтенаОплата", Документ);
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	РассчитатьСуммуЗачетаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗачетОплаты(Команда)
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		МассивСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьСуммыЗачетаОплаты(МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуЗачетаАванса()
	
	СуммаЗачетаОплаты = Оплаты.Итог("СуммаЗачетаОплаты");
	Если СуммаЗачетаОплаты < СуммаВзаиморасчетов Тогда
		Недостает = СуммаВзаиморасчетов - СуммаЗачетаОплаты;
		Превышение = 0;
	Иначе
		Недостает = 0;
		Превышение = СуммаЗачетаОплаты - СуммаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыЗачетаОплаты(МассивСтрок)
	
	Отказ = Ложь;
	ЗаблокироватьДокументыДляРедактирования(МассивСтрок, Отказ);
	
	Если Не Отказ Тогда
		
		СписокСтрок = Новый СписокЗначений;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТаблицы = Оплаты.НайтиПоИдентификатору(НомерСтроки);
			Если СтрокаТаблицы <> Неопределено Тогда
				СписокСтрок.Добавить(СтрокаТаблицы, Оплаты.Индекс(СтрокаТаблицы));
			КонецЕсли;
		КонецЦикла;
		
		Если Недостает > 0 Тогда
			СписокСтрок.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		ИначеЕсли Превышение > 0 Тогда
			СписокСтрок.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		КонецЕсли;
				
		Для Каждого Строка Из СписокСтрок Цикл
			
			СтрокаТаблицы = Строка.Значение;
			Если СтрокаТаблицы.ДоступноРедактирование Тогда
				Если Недостает > 0 Тогда
					СтрокаТаблицы.СуммаЗачетаОплаты = Мин(СтрокаТаблицы.СуммаАванса, СтрокаТаблицы.СуммаЗачетаОплаты + Недостает);
					СтрокаТаблицы.ДанныеИзменены = Истина;
				ИначеЕсли Превышение > 0 Тогда
					СтрокаТаблицы.СуммаЗачетаОплаты = Макс(СтрокаТаблицы.СуммаЗачетаОплаты - Превышение, 0);
					СтрокаТаблицы.ДанныеИзменены = Истина;
				КонецЕсли;
				СтрокаТаблицы.ДоступноКЗачету = СтрокаТаблицы.СуммаАванса - СтрокаТаблицы.СуммаЗачетаОплаты;
				Если СтрокаТаблицы.ДанныеИзменены Тогда
					РассчитатьСуммуЗачетаАванса();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов)
	
	Если МассивОбработанныхДокументов.Количество() = 0 Тогда
		Текст = НСтр("ru='Изменений в зачете оплаты не было'");
		Пояснение = НСтр("ru='Изменений в документах при зачете оплаты не было'");
		ПоказатьОповещениеПользователя(
			Текст,
			, // НавигационнаяСсылка
			Пояснение,
			БиблиотекаКартинок.Информация32);
	Иначе
		Для Каждого ДокументСсылка Из МассивОбработанныхДокументов Цикл
			Текст = НСтр("ru='Изменен зачет оплаты'");
			Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменен зачет оплаты по документу: %1'"),
				ДокументСсылка);
			ПоказатьОповещениеПользователя(
				Текст,
				ПолучитьНавигационнуюСсылку(ДокументСсылка),
				Пояснение,
				БиблиотекаКартинок.Информация32);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры



&НаСервере
Процедура ПолучитьРеквизитыРасчетовСПартнером()
	
	ИмяДокумента = Документ.Метаданные().Имя;
	
	Попытка
		СтруктураРеквизитов = Документы[ИмяДокумента].ПолучитьРеквизитыДокумента(Документ);
	Исключение
		СтруктураРеквизитов = Неопределено;
	КонецПопытки;
	
	Если СтруктураРеквизитов <> Неопределено Тогда
		
		Организация = СтруктураРеквизитов.Организация;
		Партнер = СтруктураРеквизитов.Партнер;
		Контрагент = СтруктураРеквизитов.Контрагент;
		ВалютаВзаиморасчетов = СтруктураРеквизитов.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = СтруктураРеквизитов.ХозяйственнаяОперация;
		
		Если СтруктураРеквизитов.Свойство("ПоЗаказу") Тогда
			ПоЗаказу = СтруктураРеквизитов.ПоЗаказу;
		КонецЕсли;
		Если СтруктураРеквизитов.Свойство("Договор") Тогда
			Договор = СтруктураРеквизитов.Договор;
		КонецЕсли;
		Если СтруктураРеквизитов.Свойство("ПорядокРасчетов") Тогда
			РасчетыПоДоговорам = СтруктураРеквизитов.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
			РасчетыПоЗаказам   = СтруктураРеквизитов.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
		
		//МассивРасчетыСПоставщиками = Новый Массив;
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
		//Если Не КомиссионноеВознаграждение Тогда
		//	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитенту);
		//	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
		//Иначе
		//	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
		//КонецЕсли;
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером);
		//МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
		//ЕстьРасчетыСПоставщиками = МассивРасчетыСПоставщиками.Найти(ХозяйственнаяОперация) <> Неопределено;
		
		МассивРасчетыСКлиентами = Новый Массив;
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании);
		Если Не КомиссионноеВознаграждение Тогда
			МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
		Иначе
			МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитенту);
			МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
		КонецЕсли;
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияПрочихАктивов);
		ЕстьРасчетыСКлиентами = МассивРасчетыСКлиентами.Найти(ХозяйственнаяОперация) <> Неопределено;
		
		//МассивРасчетыМеждуОрганизациями = Новый Массив;
		//МассивРасчетыМеждуОрганизациями.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
		//МассивРасчетыМеждуОрганизациями.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
		//ЕстьРасчетыМеждуОрганизациями = МассивРасчетыМеждуОрганизациями.Найти(ХозяйственнаяОперация) <> Неопределено;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями Тогда
			Если КомиссионноеВознаграждение Тогда
				СуммаВзаиморасчетов = СтруктураРеквизитов.СуммаВознаграждения;
			Иначе
				СуммаВзаиморасчетов = СтруктураРеквизитов.СуммаВзаиморасчетов;
			КонецЕсли;
		Иначе
			СуммаВзаиморасчетов = ПолучитьСуммуКОплате();
		КонецЕсли;
			
		МассивОрганизаций = Новый Массив;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.ГоловнаяОрганизация КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &Организация
			|	И Организации.ДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию
			|	И (&ЕстьРасчетыСКлиентами ИЛИ &ЕстьРасчетыМеждуОрганизациями)
			|	И Организации.ОбособленноеПодразделение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Организации.ГоловнаяОрганизация КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &Организация
			|	И Организации.ДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию
			|	И (&ЕстьРасчетыСПоставщиками ИЛИ &ЕстьРасчетыМеждуОрганизациями)
			|	И Организации.ОбособленноеПодразделение
			|");
			Запрос.УстановитьПараметр("ЕстьРасчетыСКлиентами", ЕстьРасчетыСКлиентами);
			Запрос.УстановитьПараметр("ЕстьРасчетыСПоставщиками", ЕстьРасчетыСПоставщиками);
			Запрос.УстановитьПараметр("ЕстьРасчетыМеждуОрганизациями", ЕстьРасчетыМеждуОрганизациями);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		КонецЕсли;
		
		ПолучитьМассивОрганизаций(МассивОрганизаций);
		ДоступныеОрганизации.ЗагрузитьЗначения(МассивОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМассивОрганизаций(МассивОрганизаций)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КТС_КассыДляВзаиморасчетов.Организация КАК Организация 
	               |ИЗ
	               |	РегистрСведений.КТС_КассыДляВзаиморасчетов КАК КТС_КассыДляВзаиморасчетов
	               |
	               |ОБЪЕДИНИТЬ 
	               |
	               |ВЫБРАТЬ
	               |	&Организация";
	Запрос.УстановитьПараметр("Организация", Организация);  
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"); 

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТаблицуПоРасчетамСПартнерами()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (Не ЕстьРасчетыСКлиентами И Не ЕстьРасчетыСПоставщиками)
	 ИЛИ (ПоЗаказу И РасчетыПоЗаказам) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Зачет оплаты не требуется использовать для документа %1'"),
			Документ);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЕстьРасчетыСКлиентами Тогда
		ТекстЗапроса = ТекстЗапросаПоРасчетамСКлиентами();
	КонецЕсли;
	Если ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = ТекстЗапросаПоРасчетамСПоставщиками();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	Запрос.УстановитьПараметр("ЭтоУправленческаяОрганизация", (Организация = Справочники.Организации.УправленческаяОрганизация));
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВалютаРеглУч", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ОбъектРасчетов", ?(РасчетыПоДоговорам, Договор, Документ));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.Текст = ТекстЗапроса;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Оплаты.Очистить();
	ТаблицаОплат = Оплаты.Выгрузить(,);
	
	МассивКУдалению = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоЗаказам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		ВыборкаПоПартнерам = ВыборкаПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПартнерам.Следующий() Цикл
		
			ВыборкаПоВалютам = ВыборкаПоПартнерам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВалютам.Следующий() Цикл
				
				СуммаАванса = ВыборкаПоВалютам.СуммаАванса;
				
				Выборка = ВыборкаПоВалютам.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НоваяСтрока = ТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.СуммаАванса = Мин(Выборка.СуммаОплаты, СуммаАванса);
					НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента * НоваяСтрока.СуммаАванса / Выборка.СуммаОплаты;
					
					СуммаАванса = СуммаАванса - НоваяСтрока.СуммаАванса;
					
					Если ВалютаВзаиморасчетов <> Выборка.ВалютаВзаиморасчетов Тогда
						Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаВзаиморасчетов, Выборка.ВалютаВзаиморасчетов, Выборка.Дата);
						НоваяСтрока.СуммаАванса = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаАванса / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					КонецЕсли;
					
					НоваяСтрока.ДоступноКЗачету = НоваяСтрока.СуммаАванса;
					НоваяСтрока.ВерсияДанных = ВерсияДанныхДокумента(Выборка.ДокументОплаты);
					
					Если РасчетыПоДоговорам И Выборка.Заказ = Договор Тогда
						НоваяСтрока.СуммаЗачетаОплаты = НоваяСтрока.СуммаАванса;
						НоваяСтрока.ДоступноКЗачету = 0;
					ИначеЕсли Не РасчетыПоДоговорам И Выборка.Заказ = Документ Тогда
						НоваяСтрока.СуммаЗачетаОплаты = НоваяСтрока.СуммаАванса;
						НоваяСтрока.ДоступноКЗачету = 0;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументОплаты)
					 ИЛИ НоваяСтрока.СуммаАванса = 0 Тогда
						МассивКУдалению.Добавить(НоваяСтрока);
					КонецЕсли;
					
					Если СуммаАванса <= 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивКУдалению Цикл
		ТаблицаОплат.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	ТаблицаОплат.Свернуть(
		"Организация, Партнер, ДокументОплаты, Дата, Валюта, ВерсияДанных, ДоступноРедактирование, СтрокаДоступнаКЗачету",
		"СуммаДокумента, СуммаАванса, СуммаЗачетаОплаты, ДоступноКЗачету");
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		Если СтрокаТаблицы.ДоступноКЗачету <> 0 Тогда
			СтрокаТаблицы.СтрокаДоступнаКЗачету = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОплат.Сортировать("СтрокаДоступнаКЗачету Убыв, Дата");
	Оплаты.Загрузить(ТаблицаОплат);

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОплатыОрганизация.Видимость = ДоступныеОрганизации.Количество() > 1;
	Элементы.ОплатыПартнер.Видимость = (Партнер <> Справочники.Партнеры.НашеПредприятие);
	
	Элементы.ОплатыСуммаЗачетаОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Зачтено оплат (%1)'"),
		Строка(ВалютаВзаиморасчетов));
	Элементы.ОплатыДоступноКЗачету.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Доступно к зачету (%1)'"),
		Строка(ВалютаВзаиморасчетов));
	Элементы.ОплатыСуммаАванса.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма аванса (%1)'"),
		Строка(ВалютаВзаиморасчетов));
	Если РасчетыПоДоговорам Тогда
		Заголовок = НСтр("ru = 'Зачет оплат по договору: '") + Строка(Договор);
	Иначе
		Заголовок = НСтр("ru = 'Зачет оплат по документу: '") + Строка(Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьЗачетОплатыВДокументе(ДокументСсылка, ПартнерВДокументе, ОрганизацияВДокументе, Валюта, Знач СуммаВВалютеДокумента, Знач СуммаВВалютеВзаиморасчетов, Знач ИндексСтроки, Отказ)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ЭтоАвансовыйОтчет = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет"));
	ЭтоВводОстатков = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводОстатков"));
	Если ЭтоАвансовыйОтчет Тогда
		ИмяТабличнойЧасти = "ОплатаПоставщикам";
	ИначеЕсли ЭтоВводОстатков Тогда
		Если ЕстьРасчетыМеждуОрганизациями Тогда
			ИмяТабличнойЧасти = "РасчетыМеждуОрганизациями";
		Иначе
			ИмяТабличнойЧасти = "РасчетыСПартнерами";
		КонецЕсли;
	Иначе
		ИмяТабличнойЧасти = "РасшифровкаПлатежа";
	КонецЕсли;
	
	ТаблицаРасшифровкаПлатежа = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(,);
	Колонки = ТаблицаРасшифровкаПлатежа.Колонки;
	
	Если Колонки.Найти("СуммаВзаиморасчетов") = Неопределено Тогда
		Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если Колонки.Найти("Заказ") = Неопределено Тогда
		Колонки.Добавить("Заказ");
	КонецЕсли;
	
	Если ЭтоВводОстатков Тогда
		МассивОбъектовРасчетов = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("РасчетныйДокумент");
		ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивОбъектовРасчетов, "Заказ");
		
		МассивСумм = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("Сумма");
		ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаВзаиморасчетов");
	КонецЕсли;
	
	ИменаКолонок = "";
	МассивИсключаемыхКолонок = Новый Массив;
	МассивИсключаемыхКолонок.Добавить("НомерСтроки");
	МассивИсключаемыхКолонок.Добавить("Сумма");
	МассивИсключаемыхКолонок.Добавить("СуммаВзаиморасчетов");
	МассивИсключаемыхКолонок.Добавить("СуммаРегл");
	Для Каждого Колонка Из Колонки Цикл
		Если МассивИсключаемыхКолонок.Найти(Колонка.Имя) = Неопределено Тогда
			ИменаКолонок = ИменаКолонок + Колонка.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок) - 1);
	ИменаКолонокСуммирования = "Сумма, СуммаВзаиморасчетов";
	Если ЭтоВводОстатков Тогда
		ИменаКолонокСуммирования = ИменаКолонокСуммирования + ", СуммаРегл";
	КонецЕсли;
	
	ТаблицаРасшифровкаПлатежа.Свернуть(ИменаКолонок, ИменаКолонокСуммирования);
	ТаблицаРасшифровкаПлатежа.Сортировать("Заказ Убыв");
	
	ЕстьКолонкаПартнер = Ложь;
	ЕстьКолонкаПоставщик = Ложь;
	
	СтруктураОтбор = Новый Структура();
	Если Колонки.Найти("Партнер") <> Неопределено И (Партнер <> Справочники.Партнеры.НашеПредприятие) Тогда
		СтруктураОтбор.Вставить("Партнер", ПартнерВДокументе);
		ЕстьКолонкаПартнер = Истина;
	КонецЕсли;
	Если Колонки.Найти("Поставщик") <> Неопределено Тогда
		СтруктураОтбор.Вставить("Поставщик", ПартнерВДокументе);
		ЕстьКолонкаПоставщик = Истина;
	КонецЕсли;
	Если Колонки.Найти("Контрагент") <> Неопределено Тогда
		СтруктураОтбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЭтоВводОстатков Тогда
		СтруктураОтбор.Вставить("ВалютаВзаиморасчетов", Валюта);
	КонецЕсли;
	
	ЕстьОснованиеПлатежа = (Колонки.Найти("ОснованиеПлатежа") <> Неопределено);
	
	ДанныеИзменены = Ложь;
	
	Если СтруктураОтбор.Количество() = 0 Тогда
		МассивСтрок = ТаблицаРасшифровкаПлатежа;
	Иначе
		МассивСтрок = ТаблицаРасшифровкаПлатежа.НайтиСтроки(СтруктураОтбор);
	КонецЕсли;
	Для Каждого СтрокаДокумента Из МассивСтрок Цикл
		
		Если (СтрокаДокумента.Заказ = Документ И ОрганизацияВДокументе = Организация)
		 ИЛИ (СтрокаДокумента.Заказ = Договор И ОрганизацияВДокументе = Организация)
		 ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
		
			Если СуммаВВалютеДокумента = 0 Тогда
				Если СтрокаДокумента.Заказ <> Неопределено Тогда
					СтрокаДокумента.Заказ = Неопределено;
					Если Не ЭтоВводОстатков Тогда
						СтрокаДокумента.ВалютаВзаиморасчетов = Неопределено;
						СтрокаДокумента.СуммаВзаиморасчетов = 0;
					КонецЕсли;
					ДанныеИзменены = Истина;
				КонецЕсли;
			Иначе
				УменьшениеСуммы = 0;
				УменьшениеСуммыРегл = 0;
				Если СтрокаДокумента.Сумма > СуммаВВалютеДокумента Тогда
					УменьшениеСуммы = СтрокаДокумента.Сумма - СуммаВВалютеДокумента;
					Если ЭтоВводОстатков Тогда
						СуммаРегл = ?(СтрокаДокумента.Сумма <> 0, СтрокаДокумента.СуммаРегл * СуммаВВалютеДокумента / СтрокаДокумента.Сумма, 0);
						УменьшениеСуммыРегл = СтрокаДокумента.СуммаРегл - СуммаРегл;
						СтрокаДокумента.СуммаРегл = СуммаРегл;
					КонецЕсли;
					СтрокаДокумента.Сумма = СуммаВВалютеДокумента;
					СтрокаДокумента.СуммаВзаиморасчетов = СуммаВВалютеВзаиморасчетов;
					СуммаВВалютеДокумента = 0;
					СуммаВВалютеВзаиморасчетов = 0;
					ДанныеИзменены = Истина;
				Иначе 
					СтрокаДокумента.СуммаВзаиморасчетов = ?(СуммаВВалютеДокумента <> 0, СтрокаДокумента.Сумма * СуммаВВалютеВзаиморасчетов / СуммаВВалютеДокумента, 0);
					СуммаВВалютеДокумента = СуммаВВалютеДокумента - СтрокаДокумента.Сумма;
					СуммаВВалютеВзаиморасчетов = СуммаВВалютеВзаиморасчетов - СтрокаДокумента.СуммаВзаиморасчетов;
				КонецЕсли;
				
				Если УменьшениеСуммы <> 0 Тогда
					НоваяСтрока = ТаблицаРасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
					НоваяСтрока.Сумма = УменьшениеСуммы;
					НоваяСтрока.СуммаВзаиморасчетов = ?(ЭтоВводОстатков, УменьшениеСуммы, 0);
					НоваяСтрока.Заказ = Неопределено;
					Если ЭтоВводОстатков Тогда
						НоваяСтрока.СуммаРегл = УменьшениеСуммыРегл;
					КонецЕсли;
					ДанныеИзменены = Истина;
				КонецЕсли;
				
				Если СтрокаДокумента.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетов Тогда
					СтрокаДокумента.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
					ДанныеИзменены = Истина;
				КонецЕсли;

				Если РасчетыПоДоговорам И СтрокаДокумента.Заказ <> Договор Тогда
					СтрокаДокумента.Заказ = Договор;
					ДанныеИзменены = Истина;
				ИначеЕсли Не РасчетыПоДоговорам И СтрокаДокумента.Заказ <> Документ Тогда
					СтрокаДокумента.Заказ = Документ;
					ДанныеИзменены = Истина;
				КонецЕсли;
				
				Если ДанныеИзменены И ПартнерВДокументе <> Партнер Тогда
					Если ЕстьКолонкаПартнер Тогда
						СтрокаДокумента.Партнер = Партнер;
					КонецЕсли;
					Если ЕстьКолонкаПоставщик Тогда
						СтрокаДокумента.Поставщик = Партнер;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьОснованиеПлатежа
				 И Не ЗначениеЗаполнено(СтрокаДокумента.ОснованиеПлатежа) Тогда
					СтрокаДокумента.ОснованиеПлатежа = СтрокаДокумента.Заказ;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеИзменены Тогда
		
		Если ЭтоВводОстатков Тогда
			
			МассивОбъектовРасчетов = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("Заказ");
			ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивОбъектовРасчетов, "РасчетныйДокумент");
			
			МассивСумм = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("СуммаВзаиморасчетов");
			ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "Сумма");
			
			Если РасчетыПоДоговорам Тогда
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Дата, Номер");
			Иначе
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Номер");
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из ТаблицаРасшифровкаПлатежа Цикл
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
				 И Не ЗначениеЗаполнено(СтрокаТаблицы.НомерРасчетногоДокумента) Тогда
					СтрокаТаблицы.НомерРасчетногоДокумента = ЗначенияРеквизитов.Номер;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
				 И Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасчетногоДокумента) Тогда
					СтрокаТаблицы.ДатаРасчетногоДокумента = ЗначенияРеквизитов.Дата;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
					СтрокаТаблицы.НомерРасчетногоДокумента = "";
					СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДокументОбъект[ИмяТабличнойЧасти].Загрузить(ТаблицаРасшифровкаПлатежа);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось записать документ %1. %2'"),
					ДокументСсылка,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					, // КлючДанных
					"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать документ %1'"),
				ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, // КлючДанных
				"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов, Отказ = Ложь)
	
	МассивОбработанныхДокументов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		
		НачатьТранзакцию();
		
		Если СтрокаТаблицы.ДанныеИзменены И СтрокаТаблицы.ДоступноРедактирование Тогда
			СуммаВВалютеДокумента = ?(СтрокаТаблицы.СуммаАванса <> 0, Окр(СтрокаТаблицы.СуммаЗачетаОплаты * СтрокаТаблицы.СуммаДокумента / СтрокаТаблицы.СуммаАванса, 2), 0);
			ИндексСтроки = Оплаты.Индекс(СтрокаТаблицы);
			ОтразитьЗачетОплатыВДокументе(
				СтрокаТаблицы.ДокументОплаты,
				СтрокаТаблицы.Партнер,
				СтрокаТаблицы.Организация,
				СтрокаТаблицы.Валюта,
				СуммаВВалютеДокумента,
				СтрокаТаблицы.СуммаЗачетаОплаты, // СуммаВВалютеВзаиморасчетов
				ИндексСтроки,
				Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
			Если СтрокаТаблицы.ДанныеИзменены Тогда
				МассивОбработанныхДокументов.Добавить(СтрокаТаблицы.ДокументОплаты);
				СтрокаТаблицы.ДанныеИзменены = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Восстановим последовательность расчетов с партнером.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Партнер = &Партнер
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|");
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("КлючАналитики");
	
	Если ЕстьРасчетыСКлиентами Тогда
	//	ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(МассивАналитикУчетаПоПартнерам);
	КонецЕсли;
	Если ЕстьРасчетыСПоставщиками Тогда
	//	ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСПоставщиками(МассивАналитикУчетаПоПартнерам);
	КонецЕсли;
	
	РазблокироватьДокументыДляРедактирования();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДокументыДляРедактирования()
	
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		
		Попытка
			РазблокироватьДанныеДляРедактирования(
				, // Ключ
				УникальныйИдентификатор);
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДокументыДляРедактирования(МассивСтрок, Отказ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
		
		СтрокаТаблицы = Оплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИндексСтроки = Оплаты.Индекс(СтрокаТаблицы);
		
		Если СтрокаТаблицы.ВерсияДанных <> ВерсияДанныхДокумента(СтрокаТаблицы.ДокументОплаты) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось заблокировать %1. Данные были изменены или удалены другим пользователем.'"),
				СтрокаТаблицы.ДокументОплаты);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, // КлючДанных
				"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
			Отказ = Истина;
			
		Иначе
		
			Попытка
				ЗаблокироватьДанныеДляРедактирования(
					СтрокаТаблицы.ДокументОплаты,
					,// ВерсияДанных
					УникальныйИдентификатор);
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось заблокировать %1. %2'"),
					СтрокаТаблицы.ДокументОплаты,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					, // КлючДанных
					"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСуммуКОплате()
	
	УстановитьПривилегированныйРежим(Истина);

    Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация = &Организация
	|	И АналитикаПоПартнерам.Партнер = &Партнер
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщиками.КОплатеРасход, 0)) КАК КОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,,Регистратор,
	|		&ЕстьРасчетыСПоставщиками
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказПоставщику = &ОбъектРасчетов
	|	) КАК РасчетыСПоставщиками
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщиками.КОплатеРасход, 0)) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход, 0)) КАК КОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,Регистратор,
	|		&ЕстьРасчетыСКлиентами
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказКлиента = &ОбъектРасчетов
	|	) КАК РасчетыСКлиентами
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход, 0)) > 0
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ?(РасчетыПоДоговорам, Договор, Документ));
	Запрос.УстановитьПараметр("ЕстьРасчетыСКлиентами", ЕстьРасчетыСКлиентами);
	Запрос.УстановитьПараметр("ЕстьРасчетыСПоставщиками", ЕстьРасчетыСПоставщиками);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КОплате = Выборка.КОплате;
	Иначе
		КОплате = 0;
	КонецЕсли;
	
	Возврат КОплате;
	
КонецФункции // ПолучитьСуммуКОплате()

&НаСервере
Функция ВерсияДанныхДокумента(ДокументСсылка)
	
	ИмяДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка)).Имя;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияДанных = Выборка.ВерсияДанных;
	Иначе
		ВерсияДанных = "            ";
	КонецЕсли;
	
	Возврат ВерсияДанных;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоРасчетамСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаПартнеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НеизвестныйПартнер) КАК Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Родитель КАК Партнер
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Партнер = &Партнер
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|	И АналитикаПоПартнерам.Партнер В (
	|		ВЫБРАТЬ
	|			ТаблицаПартнеров.Партнер
	|		ИЗ
	|			ТаблицаПартнеров КАК ТаблицаПартнеров
	|	)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	РасчетыСПоставщиками.СуммаОстаток КАК СуммаАванса
	|
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|			И ЗаказПоставщику = НЕОПРЕДЕЛЕНО
	|	) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта,
	|	РасчетыСПоставщиками.СуммаПриход
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,, Период,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказПоставщику = &ОбъектРасчетов
	|	) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказПоставщику,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатков.Партнер КАК Партнер,
	|	ТаблицаОстатков.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаОстатков.Валюта КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаОтбораДокументов
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ЗаказПоставщику,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.СуммаОстаток КАК СуммаДолга
	|
	|ПОМЕСТИТЬ ТаблицаОстатковРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
	|		&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|		И &ЭтоУправленческаяОрганизация
	|		И ЗаказПоставщику ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				АналитикаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				И АналитикаПоПартнерам.Контрагент = &Контрагент
	|				И АналитикаПоПартнерам.Партнер В (
	|					ВЫБРАТЬ
	|						ТаблицаПартнеров.Партнер
	|					ИЗ
	|						ТаблицаПартнеров КАК ТаблицаПартнеров
	|					)
	|			)
	|		) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаОстаток < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ КАК Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма) КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И (ДанныеДокумента.ОрганизацияПолучатель = &Контрагент
	|		ИЛИ ДанныеДокумента.КассаПолучатель.Владелец = &Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне)
	|	)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.БанковскийСчетПолучатель.Владелец = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Поставщик КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|		И ТаблицаРасшифровкаПлатежа.Контрагент = &Контрагент
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Поставщик = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Поставщик,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Партнер = &Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	&ЭтоУправленческаяОрганизация
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Партнер = &Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|		И (ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|			ИЛИ НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
	|ГДЕ
	|	ДанныеДокумента.Организация В(&Организация)
	|	И (ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ДанныеДокумента.Контрагент = &Контрагент И ДанныеДокумента.Партнер = &Партнер
	|		ИЛИ НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ДанныеДокумента.ОрганизацияПолучатель = &Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.РасчетныйДокумент,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.РасчетныйДокумент = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.Организация В(&Организация)
	|	И ДанныеДокумента.ТипОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам)
	|		)
	|	И ТаблицаРасшифровкаПлатежа.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.РасчетныйДокумент,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.РасчетныйДокумент,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыМеждуОрганизациями КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО 
	|		ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.РасчетныйДокумент = ТаблицаОтбораДокументов.ЗаказПоставщику
	|		И ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|ГДЕ
	|	ДанныеДокумента.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам)
	|	И ДанныеДокумента.Организация = &Контрагент
	|	И ДанныеДокумента.ОрганизацияПолучатель В(&Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.РасчетныйДокумент,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику = &ОбъектРасчетов
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноРедактирование,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
	|	РасчетыСПоставщиками.Регистратор КАК ДокументОплаты,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(2999, 12, 1)) КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСПоставщиками.Валюта) КАК Валюта,
	|	РасчетыСПоставщиками.СуммаПриход КАК СуммаОплаты,
	|	ТаблицаОстатков.СуммаАванса КАК СуммаАванса,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,, Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И (ЗаказПоставщику, Валюта) В (
	|			ВЫБРАТЬ
	|				ТаблицаОстатков.ЗаказПоставщику,
	|				ТаблицаОстатков.Валюта
	|			ИЗ
	|				ТаблицаОстатков КАК ТаблицаОстатков
	|			)
	|		) КАК РасчетыСПоставщиками
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
	|		И РасчетыСПоставщиками.Валюта = ТаблицаОстатков.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасчетыСПоставщиками.Регистратор = ТаблицаДокументов.Ссылка
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаДокументов.Заказ
	|		И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер = ТаблицаДокументов.Партнер
	|		И РасчетыСПоставщиками.Валюта = ТаблицаДокументов.ВалютаВзаиморасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатковРеглУчет КАК ТаблицаОстатковРеглУчет
	|	ПО
	|		РасчетыСПоставщиками.Регистратор = ТаблицаОстатковРеглУчет.ЗаказПоставщику
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаПриход > 0
	|	И ЕСТЬNULL(ТаблицаОстатковРеглУчет.СуммаДолга, 0) >= 0
	|	И РасчетыСПоставщиками.Регистратор <> &Документ
	|	И (
	|		ВЫБОР КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг ТОГДА
	|			ВЫБОР КОГДА Не ТаблицаДокументов.Ссылка ЕСТЬ NULL ТОГДА
	|				Истина
	|			ИНАЧЕ
	|				Ложь
	|			КОНЕЦ
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Порядок,
	|	Дата УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(СуммаАванса)
	|ПО
	|	Заказ,
	|	Партнер,
	|	ВалютаВзаиморасчетов
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоРасчетамСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаПартнеров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НеизвестныйПартнер) КАК Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Родитель КАК Партнер
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Партнер = &Партнер
	|;   
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В(&Организация)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|	И АналитикаПоПартнерам.Партнер В (
	|		ВЫБРАТЬ
	|			ТаблицаПартнеров.Партнер
	|		ИЗ
	|			ТаблицаПартнеров КАК ТаблицаПартнеров
	|	)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	-РасчетыСКлиентами.СуммаОстаток КАК СуммаАванса
	|
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|	) КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.СуммаОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта,
	|	РасчетыСКлиентами.СуммаРасход
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,, Период,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказКлиента = &ОбъектРасчетов
	|	) КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.СуммаРасход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказКлиента,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатков.Партнер КАК Партнер,
	|	ТаблицаОстатков.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаОстатков.Валюта КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаОтбораДокументов
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ЗаказКлиента,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентами.СуммаОстаток КАК СуммаДолга
	|
	|ПОМЕСТИТЬ ТаблицаОстатковРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
	|		&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		И &ЭтоУправленческаяОрганизация
	|		И ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				АналитикаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				И АналитикаПоПартнерам.Контрагент = &Контрагент
	|				И АналитикаПоПартнерам.Партнер В (
	|					ВЫБРАТЬ
	|						ТаблицаПартнеров.Партнер
	|					ИЗ
	|						ТаблицаПартнеров КАК ТаблицаПартнеров
	|					)
	|			)
	|	) КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.СуммаОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ КАК Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма) КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровОтКлиента.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Партнер = &Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	&Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	&ЭтоУправленческаяОрганизация
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Партнер = &Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта,
	|	ТаблицаРасшифровкаПлатежа.Заказ,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.РасчетныйДокумент,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма),
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.РасчетныйДокумент = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.ТипОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов)
	|		)
	|	И ТаблицаРасшифровкаПлатежа.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.РасчетныйДокумент,
	|	ТаблицаРасшифровкаПлатежа.Партнер,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА РасчетыСКлиентами.ЗаказКлиента = &ОбъектРасчетов ТОГДА
	|		1
	|	ИНАЧЕ
	|		2
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР КОГДА ТаблицаДокументов.Ссылка Ссылка Документ.ВозвратТоваровОтКлиента ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ДоступноРедактирование,
	|
	|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
	|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентами.Регистратор КАК ДокументОплаты,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(2999, 12, 1)) КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСКлиентами.Валюта) КАК Валюта,
	|	РасчетыСКлиентами.СуммаРасход КАК СуммаОплаты,
	|	ТаблицаОстатков.СуммаАванса КАК СуммаАванса,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,	Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И (ЗаказКлиента, Валюта) В (
	|			ВЫБРАТЬ
	|				ТаблицаОстатков.ЗаказКлиента,
	|				ТаблицаОстатков.Валюта
	|			ИЗ
	|				ТаблицаОстатков КАК ТаблицаОстатков
	|			)
	|	) КАК РасчетыСКлиентами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
	|		И РасчетыСКлиентами.Валюта = ТаблицаОстатков.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасчетыСКлиентами.Регистратор = ТаблицаДокументов.Ссылка
	|		И РасчетыСКлиентами.ЗаказКлиента = ТаблицаДокументов.Заказ
	|		И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер = ТаблицаДокументов.Партнер
	|		И РасчетыСКлиентами.Валюта = ТаблицаДокументов.ВалютаВзаиморасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатковРеглУчет КАК ТаблицаОстатковРеглУчет
	|	ПО
	|		РасчетыСКлиентами.Регистратор = ТаблицаОстатковРеглУчет.ЗаказКлиента
	|ГДЕ
	|	РасчетыСКлиентами.СуммаРасход > 0
	|	И ЕСТЬNULL(ТаблицаОстатковРеглУчет.СуммаДолга, 0) <= 0
	|	И РасчетыСКлиентами.Регистратор <> &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Порядок,
	|	Дата УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(СуммаАванса)
	|ПО
	|	Заказ,
	|	Партнер,
	|	ВалютаВзаиморасчетов
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции


&НаСервере
Процедура ВзаиморасчетиМеждуОрганизацией(Выборка,ВыборкаОсновной)
	НачатьТранзакцию(); 
	
	ОбщаяРазница = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновной = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	Разница = ОбщаяРазница + ОбщаяРазницаОсновной;

		
	Касса = ПолучитьДоступнуюКассу(Выборка.Организация, Выборка.Валюта);
	Если Касса.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", Выборка.Партнер);
		ЗафиксироватьОшибку(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;

	КассаОсновной = ПолучитьДоступнуюКассу(ВыборкаОсновной.Организация, ВыборкаОсновной.Валюта);
	Если КассаОсновной.Пустая() Тогда
		СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборкаОсновной.Партнер);
		ЗафиксироватьОшибку(СообщениеОбОшибке);
		Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат; 		
	КонецЕсли;
	 	
	РазрешитьПлатежиБезУказанияЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "РазрешитьПлатежиБезУказанияЗаявок");
	РКО = Неопределено;

	Если РазрешитьПлатежиБезУказанияЗаявок Тогда 
		РКО = СоздатьРКОРасчетыСКлиентами(Выборка,Касса,Выборка.СуммаОстаток);
	Иначе 
		Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентами(Выборка,Касса,Выборка.СуммаОстаток); 							
		Если Заявка = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		РКО = СоздатьРКОПоЗаявке(Заявка);
	КонецЕсли;

	Если РКО = Неопределено Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;

	ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиента(ВыборкаОсновной,КассаОсновной,Выборка.СуммаОстаток);
	Если ПКО = Неопределено Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;    

	СвестиВзаиморасчетыМеждуОрганизациями(Выборка,ВыборкаОсновной,Выборка.ЗаказКлиента, Выборка.СуммаОстаток,Отказ);
	Если Отказ = Истина Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;        				
			
	ОбщаяРазницаПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка);
	ОбщаяРазницаОсновнойПосле = ПолучитьСуммуОбщейРазницыПоПартнеру(ВыборкаОсновной);
	РазницаПосле = ОбщаяРазницаПосле + ОбщаяРазницаОсновнойПосле;
	Если Разница = РазницаПосле Тогда
		ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети с клиентом.Общая разница по клиенту не совпадает."+ОписаниеОшибки()+"'");
	    ЗафиксироватьОшибку(СообщениеОбОшибке);
		ОтменитьТранзакцию(); 
		Возврат;
	КонецЕсли;  

КонецПроцедуры


#Область МеждуОрганизацией

Функция СоздатьЗаявкуНаРДСРасчетыСКлиентами(ВыборкаЗаказ,Касса,СуммаОстаток)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияЗаявкиРКО(ВыборкаЗаказ,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ПКО)

Функция ПолучитьСтруктуруЗаполненияЗаявкиРКО(ВыборкаЗаказ,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");
	ЗаказКлиента = ВыборкаЗаказ.ЗаказКлиента;
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	СтруктураПараметров.ДатаПлатежа				= ТДата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ТДата;    	   
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	СтруктураПараметров.Заметки 				= Заметка;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	
	НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВыборкаЗаказ.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;

	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратОплатыКлиенту();
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;

	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом()

Функция СоздатьРКОРасчетыСКлиентами(ВыборкаЗаказ,Касса,СуммаОстаток)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияРКО(ВыборкаЗаказ,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("РасходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ РасходныйКассовыйОрдер.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  РасходныйКассовыйОрдер.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьРКОРасчетыСКлиентамиПоПКО(ПКО)

Функция ПолучитьСтруктуруЗаполненияРКО(ВыборкаЗаказ,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонРасходныйКассовыйОрдер(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");
	ЗаказКлиента = ВыборкаЗаказ.ЗаказКлиента;
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	СтруктураПараметров.Комментарий         = Заметка;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.Кассир					= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	
	НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();   		
		НоваяЗапись.Заказ 					= ЗаказКлиента;
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВыборкаЗаказ.Валюта;
		НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;

	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСВозвратОплатыКлиенту();
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;

	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом()


Процедура СвестиВзаиморасчетыМеждуОрганизациями(ВыборОтправитель,ВыборПолучатель, Заказ,СуммаОстаток,Отказ)
	
	Если СуммаОстаток = 0 Тогда
		Отказ = Истина;
		Возврат;       	
	КонецЕсли;
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	//НачатьТранзакцию();   
		
		КассаОтправитель = ПолучитьДоступнуюКассу(ВыборПолучатель.Организация, ВыборПолучатель.Валюта);
		Если КассаОтправитель.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", КассаОтправитель.Партнер);
			Отказ = Истина;
			//ОтменитьТранзакцию();
			Возврат; 		
		КонецЕсли;
		
		КассаПолучатель = ПолучитьДоступнуюКассу(ВыборОтправитель.Организация, ВыборОтправитель.Валюта);
		Если КассаПолучатель.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru='Неудалось  получить кассу для зведения взаиморасчетов.Для партнера %Ссылка%'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Ссылка%", ВыборПолучатель.Партнер);
			Отказ = Истина;
			//ОтменитьТранзакцию();
			Возврат; 		
		КонецЕсли;     
		
		ОбщаяРазница = ПолучитьРазницуРасчетовМеждуКассами(ВыборОтправитель,КассаОтправитель,КассаПолучатель,ВыборПолучатель);
		
		Если ОбщаяРазница = 0 И СуммаОстаток = 0 Тогда
			Отказ = Истина;
			//ОтменитьТранзакцию();
			Возврат;  		
		КонецЕсли;
		
		РазрешитьПлатежиБезУказанияЗаявок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаОтправитель, "РазрешитьПлатежиБезУказанияЗаявок");
		РКО = Неопределено;
		
		Если РазрешитьПлатежиБезУказанияЗаявок Тогда 
			РКО = СоздатьРКОРасчетыСКлиентамиМеждуОрганизациями(ВыборПолучатель,КассаОтправитель,КассаПолучатель,ВыборОтправитель.Организация,Заказ, СуммаОстаток, ВалютаУпрУчета)
		Иначе 
			
			Заявка = СоздатьЗаявкуНаРДСРасчетыСКлиентамиМеждуОрганизациями(ВыборПолучатель,КассаОтправитель,КассаПолучатель,ВыборОтправитель.Организация,Заказ, СуммаОстаток, ВалютаУпрУчета); 							
			Если Заявка = Неопределено Тогда
				Отказ = Истина;  
				//ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			РКО = СоздатьРКОПоЗаявке(Заявка);
		КонецЕсли;
		
		Если РКО = Неопределено Тогда
			Отказ = Истина;       
			//ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		ПКО = СоздатьПриходныйКассовыйОрдерРасчетСКлиентаМеждуОрганизациями(ВыборОтправитель,КассаПолучатель,РКО,СуммаОстаток);
		Если ПКО = Неопределено Тогда
			//ОтменитьТранзакцию();
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
	Если ОбщаяРазница = ПолучитьРазницуРасчетовМеждуКассами(ВыборОтправитель,КассаОтправитель,КассаПолучатель,ВыборПолучатель) Тогда
		//ЗафиксироватьТранзакцию();	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неудалось звести расчети между организациями.Общая разница по кассам  не совпадает."+ОписаниеОшибки()+"'");
		//ОтменитьТранзакцию(); 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПриходныйКассовыйОрдерРасчетСКлиентаМеждуОрганизациями(Выборка,Касса, РКО, СуммаОстаток)

	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполнениМеждуОрганизациями(Выборка,Касса,РКО,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
			ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
КонецФункции

Функция ПолучитьСтруктуруПарметровЗаполнениМеждуОрганизациями(Выборка,Касса,РКО,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП.'");
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);

	СтруктураПараметров.Дата 	= ТДата;	
	СтруктураПараметров.Комментарий						= Заметка;
	СтруктураПараметров.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеДСИзДругойОрганизации();
	СтруктураПараметров.Подразделение					= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.Касса							= Касса;    
	СтруктураПараметров.СуммаДокумента					= СуммаДокумента;
	СтруктураПараметров.Вставить("РасходныйКассовыйОрдер",РКО);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,"Контрагент,Валюта,Организация");
	
	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса)

Функция СоздатьЗаявкуНаРДСРасчетыСКлиентамиМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель,Заказ, СуммаОстаток, ВалютаВзаиморасчетов)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияЗаявкиРКОМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель,Заказ, СуммаОстаток, ВалютаВзаиморасчетов);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ЗаявкаНаРасходованиеДенежныхСредств",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
			ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ заявка на расходование.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ЗаявкаНаРасходованиеДенежныхСредств.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьЗаявкуНаРДСРасчетыСКлиентамиПоПКО(ПКО)

Функция СоздатьРКОРасчетыСКлиентамиМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель,Заказ, СуммаОстаток, ВалютаВзаиморасчетов)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруЗаполненияРКОМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель,Заказ, СуммаОстаток, ВалютаВзаиморасчетов);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("РасходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
			ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ РасходныйКассовыйОрдер.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  РасходныйКассовыйОрдер.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено;
	КонецПопытки;  
КонецФункции // СоздатьРКОРасчетыСКлиентамиМеждуОрганизациями

Функция СоздатьПриходныйКассовыйОрдерРасчетСКлиента(Выборка,Касса,СуммаОстаток)

	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса,СуммаОстаток);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("ПриходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
            ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ ПКО по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
        ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  ПКО по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
КонецФункции

Функция ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса,СуммаОстаток)

	СтруктураПараметров     = git_Templates.ПолучитьШаблонПриходныйКассовыйОрдер();
	
	ТДата = ТекущаяДата();
	ЗаказКлиента = Выборка.ЗаказКлиента;
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП. ДС по документу: %Ссылка%. '");
	Если ЗаказКлиента<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаказКлиента);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	СтруктураПараметров.Дата 	= ТДата;	
	СтруктураПараметров.Комментарий						= Заметка;
	СтруктураПараметров.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= ктс_ПредопределенныеЗначенияПовтИсп.СвойствоСтатьяДДСПоступлениеОплатыОтКлиента();
	СтруктураПараметров.Подразделение					= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.Касса							= Касса;    
	СтруктураПараметров.СуммаДокумента					= СуммаДокумента;
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка,"Контрагент,Валюта,Организация");
	
	РасшифровкаПлатежа 			= СтруктураПараметров.РасшифровкаПлатежа.Добавить();
	РасшифровкаПлатежа.Заказ 	= ЗаказКлиента;
	РасшифровкаПлатежа.Партнер 	= Выборка.Партнер;
	РасшифровкаПлатежа.Сумма	= СуммаДокумента;  
	
	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруПарметровЗаполненияПКОСКлиентом(Выборка,Касса)

Функция ПолучитьСтруктуруЗаполненияЗаявкиРКОМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель, Заказ, СуммаОстаток, Знач ВалютаВзаиморасчетов = Неопределено)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонЗаявкаНаРасходованиеДенежныхСредств(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");

	Если Заказ<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Заказ);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	СтруктураПараметров.ДатаПлатежа				= ТДата;
	СтруктураПараметров.ЖелательнаяДатаПлатежа	= ТДата;    	   
	
	Если ТипЗнч(ВыборкаЗаказ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ,"Расшифровка"); 	
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = Неопределено ИЛИ Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда 
		ВалютаВзаиморасчетов = ВыборкаЗаказ.Валюта;
	КонецЕсли;
	
	СтруктураПараметров.Заметки 				= Заметка;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.КтоЗаявил				= ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	СтруктураПараметров.Вставить("КассаПолучатель",КассаПолучатель);   
	СтруктураПараметров.Вставить("ОрганизацияПолучатель",ОрганизацияПолучатель); 
	
		НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		//НоваяЗапись.Заказ                   = Заказ;
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВалютаВзаиморасчетов;
		Если ВалютаВзаиморасчетов = ВыборкаЗаказ.Валюта Тогда 
			НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;
		КонецЕсли;

	СтруктураПараметров.ФормаОплатыНаличная  			= Истина;
	СтруктураПараметров.ФормаОплатыБезналичная			= Ложь;
    СтруктураПараметров.ФормаОплатыПлатежнаяКарта 		= Ложь;
	СтруктураПараметров.Касса							= Касса;
	СтруктураПараметров.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	СтруктураПараметров.Приоритет						= Перечисления.Приоритеты.Низкий;
	СтруктураПараметров.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	СтруктураПараметров.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию;
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;

	Возврат СтруктураПараметров;     	


КонецФункции // ПолучитьСтруктуруЗаполненияЗаявкиРКОПОПКОСклиентом()

Функция ПолучитьСтруктуруЗаполненияРКОМеждуОрганизациями(ВыборкаЗаказ,Касса,КассаПолучатель,ОрганизацияПолучатель, Заказ, СуммаОстаток, Знач ВалютаВзаиморасчетов = Неопределено)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонРасходныйКассовыйОрдер(ЛОЖЬ);
	
	ТДата = ТекущаяДата();
	Заметка = НСтр("ru='Автосведения расчетов по партнерам ЗП ДС по документу: %Ссылка%.'");

	Если Заказ<>Неопределено Тогда
	    НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Заказ);
		Заметка = СтрЗаменить(Заметка, "%Ссылка%", НавигационнаяСсылка);
	КонецЕсли;
	
	СуммаДокумента			= ?(СуммаОстаток<0,-СуммаОстаток,СуммаОстаток);
	
	СтруктураПараметров.Дата 					= ТДата;
 	
	Если ТипЗнч(ВыборкаЗаказ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ,"Расшифровка"); 	
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,ВыборкаЗаказ); 	
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = Неопределено ИЛИ Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда 
		ВалютаВзаиморасчетов = ВыборкаЗаказ.Валюта;
	КонецЕсли;
	
	СтруктураПараметров.Комментарий 			= Заметка;
	СтруктураПараметров.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("ebe6f504-3ffd-11e0-9f98-001517115d85"));
	СтруктураПараметров.СуммаДокумента			= СуммаДокумента;
	
	СтруктураПараметров.Касса					= Касса;  
	
	СтруктураПараметров.Вставить("КассаПолучатель",КассаПолучатель);   
	СтруктураПараметров.Вставить("ОрганизацияПолучатель",ОрганизацияПолучатель); 

	
		НоваяЗапись = СтруктураПараметров.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Партнер 				= ВыборкаЗаказ.Партнер;
		НоваяЗапись.Сумма					= СуммаДокумента;
		НоваяЗапись.ВалютаВзаиморасчетов	= ВалютаВзаиморасчетов;
		Если ВалютаВзаиморасчетов = ВыборкаЗаказ.Валюта Тогда 
			НоваяЗапись.СуммаВзаиморасчетов		= СуммаДокумента;
		КонецЕсли;

	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию);
	СтруктураПараметров.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;

	Возврат СтруктураПараметров;


КонецФункции // ПолучитьСтруктуруЗаполненияРКОМеждуОрганизациями()

Функция ПолучитьРазницуРасчетовМеждуКассами(ВыборОтправитель,КассаОтправитель,КассаПолучатель,ВыборПолучатель)

	Запрос = Новый Запрос;
	Запрос.Текст =  ПолучитьТекстЗапросаСуммаОбщейРазницыМеждуОрганизацией();
	Запрос.УстановитьПараметр("КассаОтправитель", 	КассаОтправитель);
	Запрос.УстановитьПараметр("ОрганизацияОтпр",	ВыборПолучатель.Организация);
	Запрос.УстановитьПараметр("КассаПолучатель", 	КассаПолучатель);
	Запрос.УстановитьПараметр("ОрганизацияПол", 	ВыборОтправитель.Организация);  
	
	ВыборкаОбщейРазницы = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаОбщейРазницы.Следующий(), ВыборкаОбщейРазницы.ОбщаяРазница, 0);  
КонецФункции // ПолучитьРазницуРасчетовМеждуКассами()

Функция ПолучитьТекстЗапросаСуммаОбщейРазницыМеждуОрганизацией()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.СуммаОстаток) КАК ОбщаяРазница
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДенежныеСредстваНаличныеОстатки.СуммаОстаток КАК СуммаОстаток
	               |	ИЗ
	               |		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	               |				,
	               |				Организация = &ОрганизацияОтпр
	               |					И Касса = &КассаОтправитель) КАК ДенежныеСредстваНаличныеОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ДенежныеСредстваНаличныеОстатки.СуммаОстаток
	               |	ИЗ
	               |		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	               |				,
	               |				Организация = &ОрганизацияПол
	               |					И Касса = &КассаПолучатель) КАК ДенежныеСредстваНаличныеОстатки) КАК ВложенныйЗапрос";
	
	Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОбщейРазницыМеждуОрганизацией()

Функция ПолучитьДоступнуюКассу(Организация, Валюта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
				   |	Касса КАК Касса
	               |ИЗ
	               |	РегистрСведений.КТС_КассыДляВзаиморасчетов
	               |ГДЕ
	               |	Организация = &Организация
	               |	И Валюта = &Валюта";
				   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта",	Валюта); 	
	
	Выборка = Запрос.Выполнить().Выбрать();  
	
	Возврат ?(Выборка.Следующий(),Выборка.Касса, Справочники.Кассы.ПустаяСсылка());		
КонецФункции

Функция СоздатьРКОПоЗаявке(Заявка)
	
	СтруктураОшибок 	= Новый Структура;
	СтруктураПараметров = ПолучитьСтруктуруПарметровЗаполненияРКООПредоплате(Заявка);
	ДокументОбъект	   	= git_Objcon.СоздатьДокумент("РасходныйКассовыйОрдер",СтруктураПараметров,СтруктураОшибок);
    
    Если СтруктураОшибок.Количество()>0 Тогда
        Для каждого Строка Из СтруктураОшибок Цикл
            СообщенияОбОшибке = СтруктураОшибок[Строка.Ключ];
			ЗафиксироватьОшибку(СообщенияОбОшибке);
        КонецЦикла;
        СообщенияОбОшибке = НСтр("ru='Не удалось создать документ РКО предоплат по клиенту.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
        Возврат Неопределено; 
    КонецЕсли;  
    
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
        Возврат ДокументОбъект.Ссылка; 
    Исключение
        СообщенияОбОшибке = НСтр("ru='Не удалось провести документ  РКО предоплат по клиенту.'"+ ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗафиксироватьОшибку(СообщенияОбОшибке);
		Возврат Неопределено; 
	КонецПопытки;  
	
КонецФункции // СоздатьЗаявкуНаРДСПереплатыРасчетыСКлиентами()

Функция ПолучитьСтруктуруПарметровЗаполненияРКООПредоплате(Заявка)
	
	СтруктураПараметров     = git_Templates.ПолучитьШаблонРасходныйКассовыйОрдер();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров,Заявка,,"РасшифровкаПлатежа");
	СтруктураПараметров.Дата 			= Заявка.Дата;
	СтруктураПараметров.Комментарий		= Заявка.Заметки;
	СтруктураПараметров.Касса			= Заявка.Касса;
	СтруктураПараметров.ЗаявкаНаРасходованиеДенежныхСредств = Заявка;
	
	Возврат СтруктураПараметров;     	

КонецФункции // ПолучитьСтруктуруПарметровЗаполненияЗаявкиНаРДСПОПредоплате()


Функция ПолучитьСуммуОбщейРазницыПоПартнеру(Выборка)

	Запрос = Новый Запрос;
	Запрос.Текст =  ПолучитьТекстЗапросаСуммаОбщейРазницыПоПартнеру();
	Запрос.УстановитьПараметр("Партнер", 	Выборка.Партнер);
	Запрос.УстановитьПараметр("Валюта", 	Выборка.Валюта);
	
	ВыборкаОбщейРазницы = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаОбщейРазницы.Следующий(), ВыборкаОбщейРазницы.ОбщаяРазница, 0);
		
КонецФункции // ПолучитьОбщуюРазницу()

Функция ПолучитьТекстЗапросаСуммаОбщейРазницыПоПартнеру()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сумма(Вл.ОбщаяРазница) КАК ОбщаяРазница
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		IsNull(СуммаОстаток, 0) КАК ОбщаяРазница
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|				АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = 	&Партнер
		|											)
		|				И Валюта = &Валюта			
		|				)
		|				
		|	ОБЪЕДИНИТЬ
		|				
		|	ВЫБРАТЬ
		|		ISNULL(СуммаОстаток,0)
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|							АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
		|												АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|											ИЗ
		|												РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|											ГДЕ
		|												АналитикаПоПартнерам.Партнер = &Партнер
		|											)
		|							И Валюта = &Валюта			
		|										)
		|	) КАК Вл";

	
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСуммаОбщейРазницыСКлиентами()


Функция ЗафиксироватьОшибку(СообщениеОбОшибке)  
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
КонецФункции // ЗафиксироватьОшибкуВЖР()

#КонецОбласти
























#КонецОбласти

