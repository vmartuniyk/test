Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "2.3.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рабочее место кассира (РМК) [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рабочее место кассира (РМК) [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Рабочее место кассира (РМК) [" + Версия + "]", "РМК", "ОткрытиеФормы", Ложь, "РМК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


#Область ПрограммныйИнтерфейс

Процедура ДобавитьСсылкуВИсториюРаботыПользователя(Ссылка) Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));
	
КонецПроцедуры // ДобавитьСсылкуВИсториюРаботыПользователя()


Функция ВерсияДанныхДокумента(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &ДокументСсылка
		|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияДанных = Выборка.ВерсияДанных;
	Иначе
		ВерсияДанных = "";
	КонецЕсли;
	
	Возврат ВерсияДанных;
	
КонецФункции // ВерсияДанныхДокумента()
	
#КонецОбласти 


// РАБОТА С ВНЕШНИМИ БИБЛИОТЕКАМИ

Функция ПолучитьБиблиотеку(ИмяБиблиотеки) Экспорт
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);	
	ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;
КонецФункции

Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки) Экспорт
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);	
	ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
КонецФункции


