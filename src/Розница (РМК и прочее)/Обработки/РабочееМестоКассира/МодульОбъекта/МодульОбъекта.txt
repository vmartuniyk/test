Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "2.4.18";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "Рабочее место кассира (РМК) [" + Версия + "]");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Рабочее место кассира (РМК) [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Рабочее место кассира (РМК) [" + Версия + "]", "РМК", "ОткрытиеФормы", Ложь, "РМК");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры


#Область ПрограммныйИнтерфейс

Процедура ДобавитьСсылкуВИсториюРаботыПользователя(Ссылка) Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));
	
КонецПроцедуры // ДобавитьСсылкуВИсториюРаботыПользователя()

Функция ВерсияДанныхДокумента(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &ДокументСсылка
		|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияДанных = Выборка.ВерсияДанных;
	Иначе
		ВерсияДанных = "";
	КонецЕсли;
	
	Возврат ВерсияДанных;
	
КонецФункции // ВерсияДанныхДокумента()

// Функция возвращает структуру настроек кассы которая была считана
// из регистра КТС_КассыЭквайрингаСервисногоЦентра.
//
// Параметры:
//  КассаСсылка - СправочникСсылка.Кассы - касса которую выбрал пользователь.
//
// Возвращаемое значение:
//  НастройкиКассы - Структура - сожержит свойства:
//		* КассаСервисногоЦентраВМагазине - СправочникСсылка.Кассы 			- касса сервисного центра в магазине.
//		* ОрганизацияМагазина 			 - СправочникСсылка.Организации     - организация розничного магазина.
//		* КассаСервисногоЦентра			 - СправочникСсылка.Кассы			- касса сервисного центра, куда будут сводится взаиморасчеты.
//		* ОрганизацияСервисногоЦентра	 - СправочникСсылка.Организации     - организация сервисного центра.
//  Если настройки для кассы не заданы - возвращается Неопределено.
//
Функция ПолучитьНастройкиКассы(КассаСсылка) Экспорт

	НастройкиКассы = Новый Структура("КассаСервисногоЦентраВМагазине, ОрганизацияМагазина, КассаСервисногоЦентра, ОрганизацияСервисногоЦентра");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КассаСервисногоЦентраВМагазине	КАК КассаСервисногоЦентраВМагазине,
	                      |	ОрганизацияМагазина				КАК ОрганизацияМагазина,
	                      |	КассаСервисногоЦентра			КАК КассаСервисногоЦентра,
	                      |	ОрганизацияСервисногоЦентра		КАК ОрганизацияСервисногоЦентра
	                      |ИЗ
	                      |	РегистрСведений.КТС_КассыЭквайрингаСервисногоЦентра
	                      |ГДЕ
	                      |	КассаСервисногоЦентра = &Касса");
						  
	Запрос.УстановитьПараметр("Касса", КассаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(НастройкиКассы, Выборка);
	
	Возврат НастройкиКассы;

КонецФункции // ПолучитьНастройкиКассы()

// Процедура делает 4 документа РКО-ПКО для сведения баланса
// по взаиморасчетам между организацией магазина и организацией
// сервисного центра.
//
// Параметры:
//  НастройкиКассы - Структура - сожержит свойства:
//		* КассаСервисногоЦентраВМагазине - СправочникСсылка.Кассы 			- касса сервисного центра в магазине.
//		* ОрганизацияМагазина 			 - СправочникСсылка.Организации     - организация розничного магазина.
//		* КассаСервисногоЦентра			 - СправочникСсылка.Кассы			- касса сервисного центра, куда будут сводится взаиморасчеты.
//		* ОрганизацияСервисногоЦентра	 - СправочникСсылка.Организации     - организация сервисного центра.
//  Сумма - Число - сумма на которую нужно свети взаиморасчеты.
//  ДокументСсылка - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ЗаказКлиента - Документ на основании которого будет проводится ПКО.
//
Процедура СвестиВзаиморасчетыИзСервиснойОрганизацией(НастройкиКассы, Сумма, ДокументСсылка) Экспорт

	ПКО = СоздатьПКОВКассуСЦ(НастройкиКассы, Сумма, ДокументСсылка);
	РКО = СоздатьРКОИзКассыСЦ(НастройкиКассы, Сумма, ДокументСсылка, ПКО.Валюта);
	СоздатьПКОВКассуМагазина(РКО);
	СоздатьРКОИзКассыМагазина(НастройкиКассы, Сумма, ДокументСсылка, ПКО.Валюта);

КонецПроцедуры
 
#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

Функция СоздатьПКОВКассуСЦ(НастройкиКассы, Сумма, ДокументСсылка)

	ДокументПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокументПКО.Заполнить(ДокументСсылка);
	
	ДокументПКО.Дата 							= ТекущаяДатаСеанса();
	ДокументПКО.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументПКО.Касса   						= НастройкиКассы.КассаСервисногоЦентра;
	ДокументПКО.Контрагент						= ДокументСсылка.Контрагент;
	ДокументПКО.СтатьяДвиженияДенежныхСредств   = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	ДокументПКО.Организация						= НастройкиКассы.ОрганизацияСервисногоЦентра;
	ДокументПКО.СуммаДокумента					= Сумма;
	ДокументПКО.Валюта							= НастройкиКассы.КассаСервисногоЦентра.ВалютаДенежныхСредств;
	
	РасшифровкаПлатежа = ДокументПКО.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Расшифровка = РасшифровкаПлатежа.Добавить();
	Иначе
		Расшифровка = РасшифровкаПлатежа[0];
	КонецЕсли;
	
	Расшифровка.Заказ 	= ДокументСсылка;
	Расшифровка.Партнер = ДокументПКО.Контрагент.Партнер;
	Расшифровка.Сумма	= Сумма;
			
	ДокументПКО.Записать(РежимЗаписиДокумента.Проведение);
	
	ДобавитьСсылкуВИсториюРаботыПользователя(ДокументПКО.Ссылка);
	
	Возврат ДокументПКО.Ссылка;

КонецФункции

Функция СоздатьРКОИзКассыСЦ(НастройкиКассы, Сумма, ДокументСсылка, Валюта)

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	РКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	
	Если НЕ НастройкиКассы.КассаСервисногоЦентра.РазрешитьПлатежиБезУказанияЗаявок Тогда	
		Заявка = СоздатьЗаявкуИзКассыСЦ(НастройкиКассы, Сумма, ДокументСсылка, Валюта);
		РКО.Заполнить(Заявка);
	КонецЕсли;
	
	РКО.Дата = ТекущаяДатаСеанса();
	РКО.Организация						= НастройкиКассы.ОрганизацияСервисногоЦентра;			
	РКО.ОрганизацияПолучатель			= НастройкиКассы.ОрганизацияМагазина;
	РКО.Касса							= НастройкиКассы.КассаСервисногоЦентра;
	РКО.СуммаДокумента					= Сумма;
	РКО.ХозяйственнаяОперация			= Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
	РКО.КассаПолучатель					= НастройкиКассы.КассаСервисногоЦентраВМагазине;
	РКО.Валюта							= Валюта;
	РКО.Кассир							= ТекущийПользователь;
	РКО.СтатьяДвиженияДенежныхСредств   = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию;
	
	РасшифровкаПлатежа = РКО.РасшифровкаПлатежа;
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	Иначе
		НоваяСтрока = РасшифровкаПлатежа[0];
	КонецЕсли;
	
	НоваяСтрока.Сумма = Сумма;
	
	РКО.Записать(РежимЗаписиДокумента.Проведение);
	
	ДобавитьСсылкуВИсториюРаботыПользователя(РКО.Ссылка);
	
	Возврат РКО.Ссылка;

КонецФункции

Функция СоздатьЗаявкуИзКассыСЦ(НастройкиКассы, Сумма, ДокументСсылка, Валюта)

	ТДата 					= ТекущаяДатаСеанса();
	ТекущийПользователь		= ПараметрыСеанса.ТекущийПользователь;
	ТекущееПодразделение    = ТекущийПользователь.ТекущееПодразделение;
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	Заявка.Дата 					= ТДата;
	Заявка.ДатаПлатежа				= ТДата;
	Заявка.ЖелательнаяДатаПлатежа	= ТДата;
	
	Заявка.Организация				= НастройкиКассы.ОрганизацияСервисногоЦентра;
	Заявка.ОрганизацияПолучатель	= НастройкиКассы.ОрганизацияМагазина;
	Заявка.Подразделение			= ТекущееПодразделение;
	Заявка.КтоЗаявил				= ТекущийПользователь;
	Заявка.КтоРешил					= ТекущийПользователь;
	Заявка.Автор					= ТекущийПользователь;
	Заявка.Контрагент				= ДокументСсылка.Контрагент;
	Заявка.СуммаДокумента			= Сумма;
	Заявка.Валюта					= Валюта;
	Заявка.ПланированиеСуммы		= Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа;
	
		НоваяЗапись = Заявка.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Партнер 				= ДокументСсылка.Партнер;
		НоваяЗапись.Сумма					= Сумма;
		//НоваяЗапись.ВалютаВзаиморасчетов	= Валюта;
		//НоваяЗапись.СуммаВзаиморасчетов		= Сумма;

	Заявка.ФормаОплатыНаличная  			= Истина;
	Заявка.ФормаОплатыБезналичная			= Ложь;
    Заявка.ФормаОплатыПлатежнаяКарта 		= Ложь;
	Заявка.Касса							= НастройкиКассы.КассаСервисногоЦентра;
	Заявка.КассаПолучатель					= НастройкиКассы.КассаСервисногоЦентраВМагазине;
	Заявка.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	Заявка.Приоритет						= Перечисления.Приоритеты.Низкий;
	Заявка.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	Заявка.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ОплатаДенежныхСредствВДругуюОрганизацию;
	Заявка.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
	
	Заявка.Записать(РежимЗаписиДокумента.Проведение);
	
	ДобавитьСсылкуВИсториюРаботыПользователя(Заявка.Ссылка);
	
	Возврат Заявка.Ссылка;

КонецФункции // СоздатьЗаявкуИзКассыСЦ()

Процедура СоздатьПКОВКассуМагазина(РКО)

	ПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ПКО.Заполнить(РКО);
	
	ПКО.Дата 					= ТекущаяДатаСеанса();
	ПКО.ХозяйственнаяОперация   = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
	ПКО.Кассир					= ПараметрыСеанса.ТекущийПользователь;
	
	ПКО.Записать(РежимЗаписиДокумента.Проведение);

	ДобавитьСсылкуВИсториюРаботыПользователя(ПКО.Ссылка);
	
КонецПроцедуры // СоздатьПКОВКассуМагазина()

Функция СоздатьЗаявкуИзКассыМагазина(НастройкиКассы, Сумма, ДокументСсылка, Валюта)
	
	ТДата 					= ТекущаяДатаСеанса();
	ТекущийПользователь		= ПараметрыСеанса.ТекущийПользователь;
	ТекущееПодразделение    = ТекущийПользователь.ТекущееПодразделение;
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	Заявка.Дата 					= ТДата;
	Заявка.ДатаПлатежа				= ТДата;
	Заявка.ЖелательнаяДатаПлатежа	= ТДата;
	
	Заявка.Организация				= НастройкиКассы.ОрганизацияМагазина;
	Заявка.Подразделение			= ТекущееПодразделение;
	Заявка.КтоЗаявил				= ТекущийПользователь;
	Заявка.КтоРешил					= ТекущийПользователь;
	Заявка.Автор					= ТекущийПользователь;
	Заявка.Контрагент				= ДокументСсылка.Контрагент;
	Заявка.СуммаДокумента			= Сумма;
	Заявка.Валюта					= Валюта;
	Заявка.ПланированиеСуммы		= Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа;
	
		НоваяЗапись = Заявка.РасшифровкаПлатежа.Добавить();
		НоваяЗапись.Партнер 				= ДокументСсылка.Партнер;
		НоваяЗапись.Сумма					= Сумма;
		//НоваяЗапись.ВалютаВзаиморасчетов	= Валюта;
		//НоваяЗапись.СуммаВзаиморасчетов		= Сумма;

	Заявка.ФормаОплатыНаличная  			= Истина;
	Заявка.ФормаОплатыБезналичная			= Ложь;
    Заявка.ФормаОплатыПлатежнаяКарта 		= Ложь;
	Заявка.Касса							= НастройкиКассы.КассаСервисногоЦентраВМагазине;
	Заявка.Статус   						= Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	Заявка.Приоритет						= Перечисления.Приоритеты.Низкий;
	Заявка.ФормаОплатыЗаявки				= Перечисления.ФормыОплаты.Наличная;
	Заявка.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет;
	Заявка.ХозяйственнаяОперация    		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	
	Заявка.Записать(РежимЗаписиДокумента.Проведение);
	
	ДобавитьСсылкуВИсториюРаботыПользователя(Заявка.Ссылка);
	
	Возврат Заявка.Ссылка;
	
КонецФункции

Процедура СоздатьРКОИзКассыМагазина(НастройкиКассы, Сумма, ДокументСсылка, Валюта)

	РКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	
	Если НЕ НастройкиКассы.КассаСервисногоЦентра.РазрешитьПлатежиБезУказанияЗаявок Тогда
		Заявка = СоздатьЗаявкуИзКассыМагазина(НастройкиКассы, Сумма, ДокументСсылка, Валюта);
		РКО.Заполнить(Заявка);	
	КонецЕсли;
	
	РКО.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	РКО.Касса   						= НастройкиКассы.КассаСервисногоЦентраВМагазине;
	РКО.Контрагент						= ДокументСсылка.Контрагент;
	РКО.СтатьяДвиженияДенежныхСредств   = Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет;
	РКО.Организация						= НастройкиКассы.ОрганизацияМагазина;
	РКО.СуммаДокумента					= Сумма;
	РКО.Валюта							= Валюта;
	
	
	РасшифровкаПлатежа = РКО.РасшифровкаПлатежа;
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Расшифровка = РасшифровкаПлатежа.Добавить();
	Иначе
		Расшифровка = РасшифровкаПлатежа[0];
	КонецЕсли;
	
	Расшифровка.Партнер = РКО.Контрагент.Партнер;
	Расшифровка.Сумма	= Сумма;
			
	РКО.Дата = ТекущаяДатаСеанса();
			
	РКО.Записать(РежимЗаписиДокумента.Проведение);
	
	ДобавитьСсылкуВИсториюРаботыПользователя(РКО.Ссылка);

КонецПроцедуры
 

#КонецОбласти

// РАБОТА С ВНЕШНИМИ БИБЛИОТЕКАМИ

Функция ПолучитьБиблиотеку(ИмяБиблиотеки) Экспорт
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);	
	ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ИмяВнОбработки = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
	ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяВнОбработки);
	Возврат ОбработкаОбъект;
КонецФункции

Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки) Экспорт
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);	
	ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
КонецФункции


