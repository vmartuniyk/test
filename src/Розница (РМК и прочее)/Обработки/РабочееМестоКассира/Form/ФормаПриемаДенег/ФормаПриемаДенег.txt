
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗакрыватьПриЗакрытииВладельца = Истина;

	Касса 							= Параметры.Касса;
	ВалютаКассы						= Касса.ВалютаДенежныхСредств;
	ИмяТаблицы						= Параметры.ИмяТаблицы;
	Партнер 						= Параметры.Партнер;
	Документ 						= Параметры.Документ;
	ЭквайринговыйТерминал   		= Параметры.ЭквайринговыйТерминал;
	ВидПлатежнойКарты				= Параметры.ВидПлатежнойКарты;
	СтрокаИстория					= Параметры.СтрокаИстория;
	ПринтерТоварногоЧека			= Параметры.ПринтерТоварногоЧека;
	ПринтерТоварногоЧекаКВО			= Параметры.ПринтерТоварногоЧекаКВО;
	ВыводитьГарантиюНаПечать		= Параметры.ВыводитьГарантиюНаПечать;
	ИмяПринтераГарантии				= Параметры.ИмяПринтераГарантии;
	БанковскийСчетОрганизации		= Параметры.БанковскийСчетОрганизации;
	
	ДолгПоДокументу 		= ПолучитьДолгПоДокументу(Документ, ВалютаКассы, ИмяТаблицы);
	СуммаДоступныйхБонусов  = ПолучитьБонусыПоПартнеру(Документ, ВалютаКассы);
	СуммаОплатить			= ДолгПоДокументу;
	
	Заголовок = "Долг по документу: " + Формат(СуммаОплатить, "ЧДЦ=2;ЧН='0,00'") +  " " +  ВалютаКассы.Наименование + "   Партнер: " + Параметры.Партнер.Наименование;
	
	РасчитатьСуммуПодвалаСдача();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаВнешнююОбработку(ИмяБиблиотеки) 
	Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);	
КонецФункции



&НаСервереБезКонтекста
Функция ПолучитьКоэффициент(Период, ВалютаДокумента, ВалютаКассы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР 
		|		КОГДА &ВалютаКассы = &ВалютаДок
		|		ТОГДА 1
		|	ИНАЧЕ ВЫРАЗИТЬ((ДокКурс.Курс / ДокКурс.Кратность) / (КурсКассы.Курс / КурсКассы.Кратность) КАК Число (15,5))
		|	КОНЕЦ КАК Коэффициент
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДок) КАК ДокКурс
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
		|ПО	Истина";
	Запрос.УстановитьПараметр("ВалютаКассы", ВалютаКассы);
	Запрос.УстановитьПараметр("ВалютаДок", 	 ВалютаДокумента);
	Запрос.УстановитьПараметр("Период", 	 Период);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Коэффициент;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДолгПоДокументу(ДокументСсылка, ВалютаКассы, ИмяТаблицы)
	
	Коэффициент = ПолучитьКоэффициент(ДокументСсылка.Дата, ДокументСсылка.Валюта, ВалютаКассы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоИмениТаблицы(ИмяТаблицы);
	Запрос.УстановитьПараметр("ЗаказКлиента",ДокументСсылка);
	Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
	Запрос.УстановитьПараметр("ВалютаКассы", ВалютаКассы);
	Запрос.УстановитьПараметр("ВалютаДок", 	 ДокументСсылка.Валюта);
	Запрос.УстановитьПараметр("Период", 	 ДокументСсылка.Дата);
    Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ДолгОстаток, 0);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоИмениТаблицы(ИмяТаблицы)

	Если ИмяТаблицы = "СписокДокументовОплаты" Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| 	ВЫБОР
			|       КОГДА &ВалютаКассы <> &ВалютаДок
			|       ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОстаткиДляОплаты.СуммаОстаток, 0) * &Коэффициент КАК Число(15,2))
			|		КОГДА &ВалютаДок = ОстаткиДляОплаты.Валюта
			|		ТОГДА ОстаткиДляОплаты.СуммаОстаток
			|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ОстаткиДляОплаты.СуммаОстаток, 0) * ((ВЗМКурс.Курс / ВЗМКурс.Кратность) * (ДокКурс.Курс / ДокКурс.Кратность)) КАК Число(15,2))
			|	КОНЕЦ КАК ДолгОстаток
			|ИЗ
			|	 РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ОстаткиДляОплаты
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДок) КАК ДокКурс
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ВЗМКурс
			|ПО	ВЗМКурс.Валюта = ОстаткиДляОплаты.Валюта";	
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ   
			| 	ВЫБОР
			|       КОГДА &ВалютаКассы <> &ВалютаДок
			|       ТОГДА ВЫРАЗИТЬ((ОстаткиДляОплаты.КОплатеПриход - ОстаткиДляОплаты.КОплатеРасход) * &Коэффициент КАК Число(15,2))
			|		КОГДА &ВалютаДок = ОстаткиДляОплаты.Валюта
			|		ТОГДА ОстаткиДляОплаты.КОплатеПриход - ОстаткиДляОплаты.КОплатеРасход
			|		ИНАЧЕ ВЫРАЗИТЬ((ОстаткиДляОплаты.КОплатеПриход - ОстаткиДляОплаты.КОплатеРасход) * ((ВЗМКурс.Курс / ВЗМКурс.Кратность) * (ДокКурс.Курс / ДокКурс.Кратность)) КАК Число(15,2))
			|	КОНЕЦ КАК ДолгОстаток
			|ИЗ
			|	 РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента = &ЗаказКлиента) КАК ОстаткиДляОплаты
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДок) КАК ДокКурс
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ВЗМКурс
			|ПО	ВЗМКурс.Валюта = ОстаткиДляОплаты.Валюта";	
	КонецЕсли;
		
	Возврат ТекстЗапроса;	
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьБонусыПоПартнеру(ДокументСсылка, ВалютаКассы)

	Коэффициент = ПолучитьКоэффициент(ТекущаяДата(), Константы.ВалютаРегламентированногоУчета.Получить(), ВалютаКассы);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Вл.Бонус, 0) - Сумма(ВЫБОР 
		|									КОГДА ЛояльностьБонусы.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
		|									ТОГДА ЕСТЬNULL(ЛояльностьБонусы.Бонус, 0)
		|									ИНАЧЕ - ЕСТЬNULL(ЛояльностьБонусы.Бонус, 0)
		|								  КОНЕЦ) КАК Бонусы
		|ИЗ (
		|	ВЫБРАТЬ
		|		СУММА(ЛояльностьБонусы.Бонус) КАК Бонус
		|	Из
		|		РегистрНакопления.Лояльность_Бонусы КАК ЛояльностьБонусы
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|			ГДЕ
		|				АналитикаПоПартнерам.Партнер = &Партнер
		|			)) КАК РасчетыСКлиентами
		|	ПО 	ВЫБОР
		|			КОГДА ЛояльностьБонусы.Регистратор.ЗаказКлиента = Неопределено
		|			ТОГДА ЛояльностьБонусы.Регистратор		
		|			КОГДА ЛояльностьБонусы.Регистратор.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка)
		|			ТОГДА ЛояльностьБонусы.Регистратор
		|			ИНАЧЕ ЛояльностьБонусы.Регистратор.ЗаказКлиента
		|		КОНЕЦ  = РасчетыСКлиентами.ЗаказКлиента		
		|			
		|	ГДЕ
		|		Партнер = &Партнер
		|	И	ЛояльностьБонусы.Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|	И	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) <= 0
		|	) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Лояльность_Бонусы КАК ЛояльностьБонусы
		|ПО	ЛояльностьБонусы.Партнер = &Партнер
        |И	ТипЗначения(ЛояльностьБонусы.Регистратор) <> Тип(Документ.РеализацияТоваровУслуг)
        |
		|СГРУППИРОВАТЬ ПО Вл.Бонус";
	Запрос.УстановитьПараметр("Партнер", ДокументСсылка.Партнер); 
    Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	БонусыСКоэффициентом = Выборка.Бонусы * Коэффициент;
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
	Возврат БонусыСКоэффициентом;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетПоКассе(КассаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	               |ГДЕ
	               |	БанковскиеСчетаОрганизаций.Владелец = &Владелец";
				   
	Запрос.УстановитьПараметр("Владелец", КассаСсылка.Владелец);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка				= РезультатЗапроса.Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.БанковскийСчет, Неопределено);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокБанковскихСчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Ссылка,
	               |	БанковскиеСчетаОрганизаций.Представление
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций";
				   
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка			    = РезультатЗапроса.Выбрать();
	СписокЗначений		= Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокЗначений.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеализациюПоЗаказу(ЗаказСсылка)
	
	МассивДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ЗаказКлиента 				= &ЗаказКлиента
	|И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) 	= ТИП(Документ.РеализацияТоваровУслуг)";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказСсылка);
	Выборка	= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Документ);	
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПлатежныхКарт(ДоговорЭквайринга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыЭквайрингаВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
	               |ИЗ
	               |	Справочник.ДоговорыЭквайринга.ВидыПлатежныхКарт КАК ДоговорыЭквайрингаВидыПлатежныхКарт
	               |ГДЕ
	               |	ДоговорыЭквайрингаВидыПлатежныхКарт.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", ДоговорЭквайринга.Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидПлатежнойКарты"));
	
	Возврат СписокЗначений;
	
КонецФункции




&НаСервере
Функция ОплатитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	

	
	ВалютаВзаиморасчетов = ?(ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), Документ.ВалютаВзаиморасчетов, Документ.Валюта);
	ДолгОстаток = ПолучитьДолгПоДокументу(Документ, ВалютаКассы, ИмяТаблицы);	
	Если ДолгОстаток <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Долг клиента полностю погашен.");
		Возврат Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если СуммаОплатить 		> 0 Тогда
			СформироватьПриходныйКассовыйОрдер(ВалютаВзаиморасчетов);
		КонецЕсли;
		
		Если СуммаЭквайринга 	> 0 Тогда
			СформироватьОперацияПоПлатежнойКарте(ВалютаВзаиморасчетов);		
		КонецЕсли;
		
		Если СуммаБонусов 		> 0 Тогда
			СформироватьСписаниеЗадолженности(ВалютаВзаиморасчетов);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		ОтменитьТранзакцию();
	    Возврат Истина;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
	
	
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат Ложь;
	
КонецФункции





&НаСервере
Процедура СформироватьЗаписьВТаблицеИстории(ДокументСсылка)

	ТаблицаИстории 		 = ЗначениеИзСтрокиВнутр(СтрокаИстория);
	
	НоваяЗапись			 = ТаблицаИстории.Добавить();
	НоваяЗапись.Дата     = ДокументСсылка.Дата;
	НоваяЗапись.Документ = ДокументСсылка;
	НоваяЗапись.Сумма	 = ДокументСсылка.СуммаДокумента;
	НоваяЗапись.Валюта	 = ДокументСсылка.Валюта;
	
	СтрокаИстория = ЗначениеВСтрокуВнутр(ТаблицаИстории);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПриходныйКассовыйОрдер(ВалютаВзаиморасчетов)
	
	ПриходныйКассовыйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();		
	ПриходныйКассовыйОрдер.Заполнить(Документ);
	
	ПриходныйКассовыйОрдер.Дата				= ТекущаяДата();
	ПриходныйКассовыйОрдер.Касса			= Касса;
	ПриходныйКассовыйОрдер.Валюта			= ВалютаКассы;
	ПриходныйКассовыйОрдер.ПринятоОт		= Документ.Партнер.Наименование;
	ПриходныйКассовыйОрдер.СуммаДокумента   = СуммаОплатить - Сдача;
	ПриходныйКассовыйОрдер.Комментарий		= Комментарий;
	ПриходныйКассовыйОрдер.ХозяйственнаяОперация   			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ПриходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	Запись 						= ПриходныйКассовыйОрдер.РасшифровкаПлатежа[0];
	Запись.Сумма                = СуммаОплатить - Сдача;
	Запись.СуммаВзаиморасчетов	= 0;
	Запись.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов; 
	
	ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	СформироватьЗаписьВТаблицеИстории(ПриходныйКассовыйОрдер.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперацияПоПлатежнойКарте(ВалютаВзаиморасчетов)
	
	ОперацияПоПлатежнойКарте = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();		
	ОперацияПоПлатежнойКарте.Заполнить(Документ);
	
	ОперацияПоПлатежнойКарте.Дата					= ТекущаяДата();
	ОперацияПоПлатежнойКарте.Валюта					= ВалютаКассы;	
	ОперацияПоПлатежнойКарте.ЭквайринговыйТерминал	= ЭквайринговыйТерминал;
	ОперацияПоПлатежнойКарте.ДоговорЭквайринга 		= ЭквайринговыйТерминал.Владелец;
	ОперацияПоПлатежнойКарте.ВидПлатежнойКарты 		= ВидПлатежнойКарты;
	ОперацияПоПлатежнойКарте.НомерПлатежнойКарты	= НомерКарты;
	ОперацияПоПлатежнойКарте.СуммаДокумента   		= СуммаЭквайринга;
	ОперацияПоПлатежнойКарте.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ОперацияПоПлатежнойКарте.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	Запись 						= ОперацияПоПлатежнойКарте.РасшифровкаПлатежа[0];
	Запись.Заказ				= Документ;
	Запись.Партнер				= Документ.Партнер;
	Запись.Сумма                = СуммаЭквайринга;
	Запись.СуммаВзаиморасчетов	= 0;
	Запись.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов; 
	
	ОперацияПоПлатежнойКарте.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	СформироватьЗаписьВТаблицеИстории(ОперацияПоПлатежнойКарте.Ссылка);
	
КонецПроцедуры

&НаСервере 
Процедура СформироватьСписаниеЗадолженности(ВалютаВзаиморасчетов)
		
	СписаниеЗадолженности = Документы.СписаниеЗадолженности.СоздатьДокумент();
	СписаниеЗадолженности.Заполнить(Документ);
	
	СписаниеЗадолженности.Дата						= ТекущаяДата();
	СписаниеЗадолженности.ЭтоОплатаБонусами			= Истина;
	СписаниеЗадолженности.РасчетыМеждуОрганизациями = Ложь;
	СписаниеЗадолженности.АналитикаДоходов			= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	СписаниеЗадолженности.АналитикаРасходов         = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	СписаниеЗадолженности.СтатьяРасходов    		= ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("16ae3f7c-7b54-11e2-8fd5-001e673c80fc"));
	СписаниеЗадолженности.Контрагент	    		= Документ.Контрагент;
	СписаниеЗадолженности.Организация				= Документ.Организация;
	СписаниеЗадолженности.ТипЗадолженности			= Перечисления.ТипыЗадолженности.Дебиторская;
		
	Запись 						= СписаниеЗадолженности.Задолженность.Добавить();
	Запись.Заказ				= Документ;
	Запись.Партнер				= Документ.Партнер;
	Запись.Сумма                = СуммаБонусов / ПолучитьКоэффициент(Документ.Дата, ВалютаВзаиморасчетов, ВалютаКассы);
	Запись.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	Запись.ТипРасчетов			= Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	СписаниеЗадолженности.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
КонецПроцедуры









&НаКлиенте
Процедура Покупюрка(Команда)
	
	ФормаПокупюрка 	= ПолучитьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПокупюрка");
	
	Результат		= ФормаПокупюрка.ОткрытьМодально();	
	Если НЕ Результат = Неопределено Тогда
		СуммаОплатить = Результат;
		ПересчитатьСуммыПолей(СуммаОплатить, СуммаЭквайринга, СуммаБонусов);
		ТекущийЭлемент = Элементы.ФормаОплатить;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	ВидПлатежнойКарты = "";
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ЭквайринговыйТерминал.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокЭквайринговыхТерминалов());
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЭквайринговыхТерминалов()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Ссылка
		|
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы
		|ГДЕ
		|	Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	ЭквайринговыеТерминалы = Запрос.Выполнить().Выгрузить();	
	МассивВидовЦен = ЭквайринговыеТерминалы.ВыгрузитьКолонку("Ссылка");
	Возврат МассивВидовЦен;	
	
КонецФункции

&НаКлиенте
Процедура ВидПлатежнойКартыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка 		= Ложь;	
	ДанныеВыбора 				= ПолучитьСписокПлатежныхКарт(ЭквайринговыйТерминал);	
КонецПроцедуры



&НаКлиенте
Процедура СуммаНаличнымиПриИзменении(Элемент)	
	ПересчитатьСуммыПолей(СуммаОплатить, СуммаЭквайринга, СуммаБонусов);	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЭквайрингаПриИзменении(Элемент)	
	ПересчитатьСуммыПолей(СуммаЭквайринга, СуммаОплатить, СуммаБонусов);	
КонецПроцедуры

&НаКлиенте
Процедура СуммаБонусовПриИзменении(Элемент)	
	ПересчитатьСуммыПолей(СуммаБонусов, СуммаОплатить, СуммаЭквайринга);	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПолей(ВысокийПриоритет, СреднийПриоритет, НизкийПриоритет)
	
	ДолгПоДокументу 		= ПолучитьДолгПоДокументу(Документ, ВалютаКассы, ИмяТаблицы);
	СуммаДоступныйхБонусов  = ПолучитьБонусыПоПартнеру(Документ, ВалютаКассы);
	
	Если СуммаБонусов > СуммаДоступныйхБонусов Тогда
		СуммаБонусов = СуммаДоступныйхБонусов;		
	КонецЕсли;
	
	Если СуммаБонусов > 0 И СуммаБонусов + 1 > ДолгПоДокументу Тогда
		СуммаБонусов = ДолгПоДокументу - 1;	
	КонецЕсли;
	
	Если СуммаЭквайринга > ДолгПоДокументу Тогда	
		СуммаЭквайринга = ДолгПоДокументу;
	КонецЕсли;
		
	СуммаСдача = ВысокийПриоритет + СреднийПриоритет + НизкийПриоритет - ДолгПоДокументу;
	Если СуммаСдача > 0 Тогда
		СтароеЗначение		= НизкийПриоритет;
		НизкийПриоритет 	= ?(СуммаСдача > НизкийПриоритет, 	0, 	НизкийПриоритет - СуммаСдача);
		СуммаСдача 			= ?(СуммаСдача > СтароеЗначение, 	СуммаСдача - СтароеЗначение, 0);
		
		СтароеЗначение		= СреднийПриоритет;
		СреднийПриоритет  	= ?(СуммаСдача > СреднийПриоритет, 	0, 	СреднийПриоритет - СуммаСдача);
		СуммаСдача 			= ?(СуммаСдача > СтароеЗначение, 	СуммаСдача - СтароеЗначение, 0);
	КонецЕсли;
	
	РасчитатьСуммуПодвалаСдача();
	
КонецПроцедуры

Процедура РасчитатьСуммуПодвалаСдача()
	
	СуммаИтого = СуммаОплатить + СуммаБонусов + СуммаЭквайринга;
	
	Элементы.ДекорацияНаличнымиЧисло.Заголовок 	= ?(СуммаОплатить 	> 0, Формат(СуммаОплатить, 		"ЧДЦ=2; ЧГ=0"), "0,00");
	Элементы.ДекорацияКартойЧисло.Заголовок 	= ?(СуммаЭквайринга > 0, Формат(СуммаЭквайринга, 	"ЧДЦ=2; ЧГ=0"), "0,00");
	Элементы.ДекорацияБонусамиЧисло.Заголовок 	= ?(СуммаБонусов 	> 0, Формат(СуммаБонусов, 		"ЧДЦ=2; ЧГ=0"), "0,00");
	Элементы.ДекорацияИтогиЧисло.Заголовок 		= ?(СуммаИтого 		> 0, Формат(СуммаИтого, 		"ЧДЦ=2; ЧГ=0"), "0,00");

	
	СдачаТМП = СуммаИтого - ДолгПоДокументу;
	Если СдачаТМП > 0 Тогда
		Сдача = СдачаТМП;
	Иначе
		Сдача = 0;
	КонецЕсли;
	
	Если СуммаОплатить = 0 И СуммаЭквайринга = 0 И СуммаБонусов = 0 Тогда
		Сдача = 0;	
	КонецЕсли;
	
	Если ДолгПоДокументу = 0 Тогда
		Сдача = 0;
	КонецЕсли;
	
	Элементы.ДекорацияСдачаЧисло.Заголовок = ?(Сдача > 0, Формат(Сдача, "ЧДЦ=2; ЧГ=0"), "0,00");
		
КонецПроцедуры





&НаКлиенте
Функция ПроверитьЗаполнениеПередОплатой(Отказ = Ложь)
	
	Если СуммаОплатить = 0 И СуммаЭквайринга = 0 И СуммаБонусов = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать сумму для оплаты или оплату карточкой.", , "СуммаОплатить");
		Отказ = Истина;
	КонецЕсли;
	
	Если СуммаОплатить < 1 И СуммаЭквайринга < 1 И СуммаБонусов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо минимально заплатить 1 гривну наличными или оплатить картой.", , "СуммаОплатить");
		Отказ = Истина;
	КонецЕсли;
	
	Если СуммаЭквайринга > 0 Тогда
		Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При оплате картой необходимо указать терминал.", , "ЭквайринговыйТерминал");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ВидПлатежнойКарты) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При оплате картой необходимо указать вид платежной карты.", , "ВидПлатежнойКарты");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(НомерКарты) Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При оплате картой необходимо указать номер платежной карты.", , "НомерКарты");
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрДлина(НомерКарты) < 4 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В номере платежной карты должно быть 4 цифры.", , "НомерКарты");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПодтверждение()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СуммаОплатить", 	СуммаОплатить - Сдача);
	ПараметрыФормы.Вставить("СуммаЭйкваринга", 	СуммаЭквайринга);
	ПараметрыФормы.Вставить("СуммаБонусами",	СуммаБонусов);
	ПараметрыФормы.Вставить("Валюта", 			ВалютаКассы);
	ПараметрыФормы.Вставить("Партнер",          Партнер);
	
	Если СуммаОплатить > 0 И СуммаЭквайринга > 0 И СуммаБонусов = 0 Тогда
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПодтвержденияОплаты", ПараметрыФормы);	
	ИначеЕсли СуммаБонусов > 0 Тогда
		Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПодтвержденияОплатыБонусами", ПараметрыФормы);	
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Оплатить(Команда)
	
	Если ПроверитьЗаполнениеПередОплатой() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьПодтверждение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОплатитьНаСервере() Тогда
		Возврат;	
	КонецЕсли;
	
	
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ВыводитьГарантиюНаПечать Тогда
			ПечатьГарантийногоСоглашения(Документ);
		КонецЕсли;
		ПечатьТоварногоЧека(Документ);
	Иначе
		
		МассивДокументов = ПолучитьРеализациюПоЗаказу(Документ);
		Если МассивДокументов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Печать невозможна, документ реализации не создан.");
		Иначе
			Для Каждого ДокИзМассива Из МассивДокументов Цикл
				Если ВыводитьГарантиюНаПечать Тогда
					ПечатьГарантийногоСоглашения(ДокИзМассива);
				КонецЕсли;
				ПечатьТоварногоЧека(ДокИзМассива);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	СтруктураВозврата.Вставить("ВидПлатежнойКарты", ВидПлатежнойКарты);
	СтруктураВозврата.Вставить("СтрокаИстория", СтрокаИстория);
	СтруктураВозврата.Вставить("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
			
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры 





&НаКлиенте
Процедура ПечатьТоварногоЧека(ДокументСсылка)
		
	Если ПустаяСтрока(ПринтерТоварногоЧека) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите чековый принтер для печати чека (вкладка 'Настройки').");		
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;	
	ПараметрКоманды.Добавить(ДокументСсылка);
	
	Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(ПараметрКоманды, ЭтаФорма) Тогда
			
		ТабличныеДокументы = СформироватьКолекциюПечатныхФорм(ПараметрКоманды, "ТоварныйЧек_ЧП", "Обработка 'Внешние печатные формы'");
		
		Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
			ТабличныйДокумент.ИмяПринтера = ПринтерТоварногоЧека;
			Для Инд = 1 По ПринтерТоварногоЧекаКВО Цикл
				ТабличныйДокумент.Напечатать();
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоСоглашения(ДокументСсылка)
	
	Если ПустаяСтрока(ИмяПринтераГарантии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите принтер для печати гарантийного соглашения (вкладка 'Настройки').");
		Возврат;	
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;	
	ПараметрКоманды.Добавить(ДокументСсылка);	
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм(ПараметрКоманды, "ГарантийноеСоглашение", "Обработка 'Внешние печатные формы'");
			
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ИмяПринтераГарантии;
		ТабличныйДокумент.Напечатать();		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция СформироватьКолекциюПечатныхФорм(ПараметрКоманды, ИмяПечФормы, ИмяВнешнегоИсточника)	
	Перем КоллекцияПечатныхФорм, ПараметрыВывода;
	ОбъектыПечати = Новый СписокЗначений;
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", ИмяПечФормы, Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ПолучитьСсылкуНаВнешнююОбработку(ИмяВнешнегоИсточника), ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");					
КонецФункции


