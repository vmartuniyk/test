
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументСсылка = Параметры.ДокументСсылка;
	ПартнерСсылка = ДокументСсылка.Партнер;
	ВерсияДанных = РеквизитФормыВЗначение("Объект").ВерсияДанныхДокумента(ДокументСсылка);	
	
	Касса = Параметры.Касса;
	
	НастройкиКассы = РеквизитФормыВЗначение("Объект").ПолучитьНастройкиКассы(Касса);
	Если НастройкиКассы = Неопределено Тогда
		КассаОтбор = Параметры.Касса;
	Иначе
		КассаОтбор = НастройкиКассы.КассаСервисногоЦентраВМагазине;
	КонецЕсли;
	
	ВалютаКассы	= Касса.ВалютаДенежныхСредств;
	ЭквайринговыйТерминал = Параметры.ЭквайринговыйТерминал;
	
	ИмяТаблицы = Параметры.ИмяТаблицы;
	
	Если НЕ Параметры.ИспользуетсяБонуснаяСистема Тогда
		Элементы.ГруппаБонусами.Видимость = Ложь;
		Элементы.ГруппаСуммаБонусов.Видимость = Ложь;
	КонецЕсли;
	
	ДолгПоДокументу 		= ПолучитьДолгПоДокументу(ДокументСсылка, ВалютаКассы, ИмяТаблицы);
	СуммаДоступныйхБонусов  = ПолучитьБонусыПоПартнеру(ДокументСсылка, ВалютаКассы);
	СуммаОплатить			= ДолгПоДокументу;
	ДоступныеБонусы			= ПолучитьДоступныеБонусыПоПартнеру(ДокументСсылка,ВалютаКассы);
	Элементы.ДекорацияПримечанеНадпись.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ДекорацияПримечанеНадпись.Заголовок,ДоступныеБонусы);
	
	Заголовок = "Долг по документу: " + Формат(СуммаОплатить, "ЧДЦ=2;ЧН='0,00'") +  " " +  Строка(ВалютаКассы) + "   Партнер: " + Строка(ПартнерСсылка);
	
	ОбновитьДанныеКТСПомощи(ДокументСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РасчитатьСуммуПодвалаСдача();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия	= "ПереносСуммыКупюр" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("СуммаКупюр") Тогда
				СуммаОплатить = Параметр.СуммаКупюр;
				ПересчитатьСуммыПолей(СуммаОплатить, СуммаЭквайринга, СуммаБонусов);
				ТекущийЭлемент = Элементы.ФормаОплатить;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодтверждениеОплаты" Тогда 
		
		Если ТипЗнч(Параметр) = Тип("Булево") Тогда
				
			Если Параметр = Истина Тогда
				ОплатитьНаКлиенте();					
			КонецЕсли;
			
			Элементы.СтраницыОплаты.ТекущаяСтраница = Элементы.СтраницаОплаты;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СуммаНаличнымиПриИзменении(Элемент)	
	ПересчитатьСуммыПолей(СуммаОплатить, СуммаЭквайринга, СуммаБонусов);	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЭквайрингаПриИзменении(Элемент)	
	ПересчитатьСуммыПолей(СуммаЭквайринга, СуммаОплатить, СуммаБонусов);	
КонецПроцедуры

&НаКлиенте
Процедура СуммаБонусовПриИзменении(Элемент)	
	ПересчитатьСуммыПолей(СуммаБонусов, СуммаОплатить, СуммаЭквайринга);	
КонецПроцедуры


&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	ВидПлатежнойКарты = "";
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ЭквайринговыйТерминал.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокЭквайринговыхТерминалов(КассаОтбор));
КонецПроцедуры

&НаКлиенте
Процедура ВидПлатежнойКартыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ДанныеВыбора = ПолучитьСписокПлатежныхКарт(ЭквайринговыйТерминал);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Оплатить(Команда)
	
	Элементы.СтраницыОплаты.ТекущаяСтраница = Элементы.СтраницаОжидания;
	
	Если ПроверитьЗаполнениеПередОплатой() Тогда
		Элементы.СтраницыОплаты.ТекущаяСтраница = Элементы.СтраницаОплаты;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СуммаОплатить", 	СуммаОплатить - Сдача);
	ПараметрыФормы.Вставить("СуммаЭйкваринга", 	СуммаЭквайринга);
	ПараметрыФормы.Вставить("СуммаБонусами",	СуммаБонусов);
	ПараметрыФормы.Вставить("Валюта", 			ВалютаКассы);
	ПараметрыФормы.Вставить("Партнер",          ПартнерСсылка);
	
	Если СуммаОплатить > 0 И СуммаЭквайринга > 0 И СуммаБонусов = 0 Тогда
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПодтвержденияОплаты", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	ИначеЕсли СуммаБонусов > 0 Тогда
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПодтвержденияОплатыБонусами", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОплатитьНаКлиенте();	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Покупюрка(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПокупюрка", , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПересчитатьСуммыПолей(ВысокийПриоритет, СреднийПриоритет, НизкийПриоритет)
	
	ДолгПоДокументу 		= ПолучитьДолгПоДокументу(ДокументСсылка, ВалютаКассы, ИмяТаблицы);
	СуммаДоступныйхБонусовПоДокумент  = ПолучитьДоступныеБонусыПоПартнеру(ДокументСсылка, ВалютаКассы);
	СуммаДоступныйхБонусов  = ПолучитьБонусыПоПартнеру(ДокументСсылка, ВалютаКассы);
	
	Если СуммаБонусов > СуммаДоступныйхБонусовПоДокумент Тогда
		СуммаБонусов = СуммаДоступныйхБонусовПоДокумент;		
	КонецЕсли;
	
	Если СуммаБонусов > 0 И СуммаБонусов + 1 > ДолгПоДокументу Тогда
		СуммаБонусов = ДолгПоДокументу - 1;	
	КонецЕсли;
	
	Если СуммаЭквайринга > ДолгПоДокументу Тогда	
		СуммаЭквайринга = ДолгПоДокументу;
	КонецЕсли;
		
	СуммаСдача = ВысокийПриоритет + СреднийПриоритет + НизкийПриоритет - ДолгПоДокументу;
	Если СуммаСдача > 0 Тогда
		СтароеЗначение		= НизкийПриоритет;
		НизкийПриоритет 	= ?(СуммаСдача > НизкийПриоритет, 	0, 	НизкийПриоритет - СуммаСдача);
		СуммаСдача 			= ?(СуммаСдача > СтароеЗначение, 	СуммаСдача - СтароеЗначение, 0);
		
		СтароеЗначение		= СреднийПриоритет;
		СреднийПриоритет  	= ?(СуммаСдача > СреднийПриоритет, 	0, 	СреднийПриоритет - СуммаСдача);
		СуммаСдача 			= ?(СуммаСдача > СтароеЗначение, 	СуммаСдача - СтароеЗначение, 0);
	КонецЕсли;
	
	РасчитатьСуммуПодвалаСдача();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуПодвалаСдача()
	
	СуммаИтого = СуммаОплатить + СуммаБонусов + СуммаЭквайринга;
	
	Элементы.ДекорацияНаличнымиЧисло.Заголовок 	= ?(СуммаОплатить 	> 0, Формат(СуммаОплатить, 		"ЧДЦ=2; ЧГ=0"), "0,00");
	Элементы.ДекорацияКартойЧисло.Заголовок 	= ?(СуммаЭквайринга > 0, Формат(СуммаЭквайринга, 	"ЧДЦ=2; ЧГ=0"), "0,00");
	Элементы.ДекорацияБонусамиЧисло.Заголовок 	= ?(СуммаБонусов 	> 0, Формат(СуммаБонусов, 		"ЧДЦ=2; ЧГ=0"), "0,00");
	Элементы.ДекорацияИтогиЧисло.Заголовок 		= ?(СуммаИтого 		> 0, Формат(СуммаИтого, 		"ЧДЦ=2; ЧГ=0"), "0,00");

	
	СдачаТМП = СуммаИтого - ДолгПоДокументу;
	Если СдачаТМП > 0 Тогда
		Сдача = СдачаТМП;
	Иначе
		Сдача = 0;
	КонецЕсли;
	
	Если СуммаОплатить = 0 И СуммаЭквайринга = 0 И СуммаБонусов = 0 Тогда
		Сдача = 0;	
	КонецЕсли;
	
	Если ДолгПоДокументу = 0 Тогда
		Сдача = 0;
	КонецЕсли;
	
	Элементы.ДекорацияСдачаЧисло.Заголовок = ?(Сдача > 0, Формат(Сдача, "ЧДЦ=2; ЧГ=0"), "0,00");
		
КонецПроцедуры


&НаКлиенте
Функция ПроверитьЗаполнениеПередОплатой(Отказ = Ложь)
	
	Если СуммаОплатить = 0 И СуммаЭквайринга = 0 И СуммаБонусов = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать сумму для оплаты или оплату карточкой.", , "СуммаОплатить");
		Отказ = Истина;
	КонецЕсли;
	
	Если СуммаОплатить < 1 И СуммаЭквайринга < 1 И СуммаБонусов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо минимально заплатить 1 гривну наличными или оплатить картой.", , "СуммаОплатить");
		Отказ = Истина;
	КонецЕсли;
	
	Если СуммаЭквайринга > 0 Тогда
		Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При оплате картой необходимо указать терминал.", , "ЭквайринговыйТерминал");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ВидПлатежнойКарты) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При оплате картой необходимо указать вид платежной карты.", , "ВидПлатежнойКарты");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(НомерКарты) Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При оплате картой необходимо указать номер платежной карты.", , "НомерКарты");
			Отказ = Истина;
		КонецЕсли;
		
		Если СтрДлина(НомерКарты) < 4 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В номере платежной карты должно быть 4 цифры.", , "НомерКарты");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// http://r.ktc-ua.com/issues/5578
	Если ПроверятьЗаполнениеМенеджераУслуг И МенеджерУслуг.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите менеджера который выполнил услугу «КТС Помощь»", , "МенеджерУслуг");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции


&НаСервере
Процедура СформироватьПриходныйКассовыйОрдер(ВалютаВзаиморасчетов)
	
	ПриходныйКассовыйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();		
	ПриходныйКассовыйОрдер.Заполнить(ДокументСсылка);
	
	ПриходныйКассовыйОрдер.Дата				= ТекущаяДата();
	ПриходныйКассовыйОрдер.Касса			= Касса;
	ПриходныйКассовыйОрдер.Организация		= Касса.Владелец;
	ПриходныйКассовыйОрдер.Валюта			= ВалютаКассы;
	ПриходныйКассовыйОрдер.ПринятоОт		= Строка(ПартнерСсылка);
	ПриходныйКассовыйОрдер.СуммаДокумента   = СуммаОплатить - Сдача;
	ПриходныйКассовыйОрдер.Комментарий		= Комментарий;
	ПриходныйКассовыйОрдер.ХозяйственнаяОперация   			= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ПриходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	Запись 						= ПриходныйКассовыйОрдер.РасшифровкаПлатежа[0];
	Запись.Сумма                = СуммаОплатить - Сдача;
	Запись.СуммаВзаиморасчетов	= 0;
	Запись.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов; 
	
	ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	РеквизитФормыВЗначение("Объект").ДобавитьСсылкуВИсториюРаботыПользователя(ПриходныйКассовыйОрдер.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОперацияПоПлатежнойКарте(ВалютаВзаиморасчетов)
	
	НастройкиКассы = РеквизитФормыВЗначение("Объект").ПолучитьНастройкиКассы(Касса);
	
	ОперацияПоПлатежнойКарте = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
	Если НастройкиКассы = Неопределено Тогда
		ОперацияПоПлатежнойКарте.Заполнить(ДокументСсылка);
	Иначе
		ОперацияПоПлатежнойКарте.Организация = НастройкиКассы.ОрганизацияМагазина;
		ОперацияПоПлатежнойКарте.Касса		 = НастройкиКассы.КассаСервисногоЦентраВМагазине;
		ОперацияПоПлатежнойКарте.Контрагент	 = ДокументСсылка.Контрагент;
	КонецЕсли;
	
	ОперацияПоПлатежнойКарте.Дата					= ТекущаяДата();
	ОперацияПоПлатежнойКарте.Валюта					= ВалютаКассы;	
	ОперацияПоПлатежнойКарте.ЭквайринговыйТерминал	= ЭквайринговыйТерминал;
	ОперацияПоПлатежнойКарте.ДоговорЭквайринга 		= ЭквайринговыйТерминал.Владелец;
	ОперацияПоПлатежнойКарте.ВидПлатежнойКарты 		= ВидПлатежнойКарты;
	ОперацияПоПлатежнойКарте.НомерПлатежнойКарты	= НомерКарты;
	ОперацияПоПлатежнойКарте.СуммаДокумента   		= СуммаЭквайринга;
	ОперацияПоПлатежнойКарте.ХозяйственнаяОперация   		= Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ОперацияПоПлатежнойКарте.СтатьяДвиженияДенежныхСредств 	= Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	РасшифровкаПлатежа = ОперацияПоПлатежнойКарте.РасшифровкаПлатежа;
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Запись = РасшифровкаПлатежа.Добавить();
	Иначе
		Запись = ОперацияПоПлатежнойКарте.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	Если НастройкиКассы = Неопределено Тогда
		Запись.Заказ = ДокументСсылка;
	КонецЕсли;	
	
	Запись.Партнер				= ПартнерСсылка;
	Запись.Сумма                = СуммаЭквайринга;
	Запись.СуммаВзаиморасчетов	= 0;
	Запись.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов; 
	
	ОперацияПоПлатежнойКарте.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	РеквизитФормыВЗначение("Объект").ДобавитьСсылкуВИсториюРаботыПользователя(ОперацияПоПлатежнойКарте.Ссылка);
	
	Если ТипЗнч(НастройкиКассы) = Тип("Структура") Тогда
		РеквизитФормыВЗначение("Объект").СвестиВзаиморасчетыИзСервиснойОрганизацией(НастройкиКассы, СуммаЭквайринга, ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура СформироватьСписаниеЗадолженности(ВалютаВзаиморасчетов)
		
	СписаниеЗадолженности = Документы.СписаниеЗадолженности.СоздатьДокумент();
	СписаниеЗадолженности.Заполнить(ДокументСсылка);
	
	СписаниеЗадолженности.Дата						= ТекущаяДата();
	СписаниеЗадолженности.ЭтоОплатаБонусами			= Истина;
	СписаниеЗадолженности.РасчетыМеждуОрганизациями = Ложь;
	СписаниеЗадолженности.АналитикаДоходов			= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	СписаниеЗадолженности.АналитикаРасходов         = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	СписаниеЗадолженности.СтатьяРасходов    		= ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("16ae3f7c-7b54-11e2-8fd5-001e673c80fc"));
	СписаниеЗадолженности.Контрагент	    		= ДокументСсылка.Контрагент;
	СписаниеЗадолженности.Организация				= ДокументСсылка.Организация;
	СписаниеЗадолженности.ТипЗадолженности			= Перечисления.ТипыЗадолженности.Дебиторская;
		
	Запись 						= СписаниеЗадолженности.Задолженность.Добавить();
	Запись.Заказ				= ДокументСсылка;
	Запись.Партнер				= ПартнерСсылка;
	Запись.Сумма                = СуммаБонусов / ПолучитьКоэффициент(ДокументСсылка.Дата, ВалютаВзаиморасчетов, ВалютаКассы);
	Запись.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	Запись.ТипРасчетов			= Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	СписаниеЗадолженности.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
КонецПроцедуры


&НаКлиенте
Процедура ОплатитьНаКлиенте()
	
	Если ОплатитьНаСервере() Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура;
	СтруктураСобытия.Вставить("ДокументСсылка", ДокументСсылка);
	СтруктураСобытия.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	Оповестить("ОплатаУспешноПроизведена", СтруктураСобытия);
	
	Закрыть();

КонецПроцедуры

&НаСервере
Функция ОплатитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяВерсияДанных = РеквизитФормыВЗначение("Объект").ВерсияДанныхДокумента(ДокументСсылка);
	Если ВерсияДанных <> ТекущаяВерсияДанных Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ был перезаписан, закройте окно и попробуйте заново.'"));
		Возврат Истина;	
	КонецЕсли;
	
	ВалютаВзаиморасчетов = ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), ДокументСсылка.ВалютаВзаиморасчетов, ДокументСсылка.Валюта);
	ДолгОстаток = ПолучитьДолгПоДокументу(ДокументСсылка, ВалютаКассы, ИмяТаблицы);	
	Если ДолгОстаток <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Долг клиента полностю погашен.'"));
		Возврат Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Если СуммаОплатить > 0 Тогда
			СформироватьПриходныйКассовыйОрдер(ВалютаВзаиморасчетов);
		КонецЕсли;
		
		Если СуммаЭквайринга > 0 Тогда
			СформироватьОперацияПоПлатежнойКарте(ВалютаВзаиморасчетов);		
		КонецЕсли;
		
		Если СуммаБонусов > 0 Тогда
			СформироватьСписаниеЗадолженности(ВалютаВзаиморасчетов);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		ОтменитьТранзакцию();
	    Возврат Истина;
	КонецПопытки;
	
	Попытка
 		ЗаписатьДанныеКТСПомощи(ДокументСсылка);	
 	Исключение
     	ОтменитьТранзакцию();
	    Возврат Истина;
 	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Ложь;
	
КонецФункции // ОплатитьНаСервере()


&НаСервере
Процедура ОбновитьДанныеКТСПомощи(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// http://r.ktc-ua.com/issues/5578
	Если Не ПолучитьРазрешениеНаОтображениеКТСПомощь(ДокументСсылка) Тогда
		МенеджерУслуг = Справочники.Пользователи.ПустаяСсылка();
		Элементы.ГруппаМенеджерУслуг.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиПроцентовКТСПомощь", , , "ДополнительныеНастройкиПроцентовКТСПомощь");
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо установить настройки 'КТС Помощь'. Обратитесь в службу поддержки 777.'"));
		Возврат;				
	КонецЕсли;	
	Настройки.Свойство("СвойствоПомощьКТС", СвойствоКТСПомощь);

	СписокДокументов = ПолучитьСписокДокументовКТСПомощь(ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументовКТСПомощь();
	Запрос.УстановитьПараметр("Свойство", СвойствоКТСПомощь);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерУслуг = Выборка.Менеджер;
		Элементы.МенеджерУслуг.АвтоОтметкаНезаполненного = Истина;
		ПроверятьЗаполнениеМенеджераУслуг				 = Истина;
	Иначе
		Элементы.ГруппаМенеджерУслуг.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеКТСПомощи()	

&НаСервере
Процедура ЗаписатьДанныеКТСПомощи(ДокументСсылка)

	УстановитьПривилегированныйРежим(Истина);
	
	Если СвойствоКТСПомощь.Пустая() = Ложь Тогда
		Если МенеджерУслуг.Пустая() = Ложь Тогда
			СписокДокументов = ПолучитьСписокДокументовКТСПомощь(ДокументСсылка);
			Для каждого ЭлементСписка Из СписокДокументов Цикл
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(ЭлементСписка.Значение);
				НаборЗаписей.Отбор.Свойство.Установить(СвойствоКТСПомощь);
					Запись = НаборЗаписей.Добавить();
					Запись.Объект = ЭлементСписка.Значение;
					Запись.Свойство = СвойствоКТСПомощь;
					Запись.Значение	= МенеджерУслуг;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеКТСПомощи()

// Процедура проверяет, можно ли в РМК выполнять услуги «КТС Помощь».
// Если свойство "«КТС Помощь» рассчитывается в" устанволено в "БРМ"
// процедура выполнения услуг «КТС Помощь» дожна выполнятся из БРМ.
// Если свойство "«КТС Помощь» рассчитывается в" устанволено в "РМК"
// процедура выполнения услуг «КТС Помощь» дожна выполнятся из РМК.
//
// Возвращаемое значение:
//   Истина - процедура выполнения услуги «КТС Помощь» выполняется из
//    РМК, Ложь - процедура выполнения услуги «КТС Помощь» выполняется из БРМ. 
//
// Задача на трекере:
//  http://r.ktc-ua.com/issues/5578
//
&НаСервереБезКонтекста
Функция ПолучитьРазрешениеНаОтображениеКТСПомощь(ДокументСсылка)

	Свойство 			= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("8b2f9087-68bd-11e4-80e2-001e676b0175")); // Свойство «КТС Помощь» рассчитывается в
	ЗначениеСвойстваРМК = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("7d3de0ad-68db-11e4-80e2-001e676b0175")); // Значение свойства РМК
	ЗначениеСвойстваБРМ = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("ace53bda-68bd-11e4-80e2-001e676b0175")); // Значение свойства БРМ
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.ДополнительныеСведения
	                      |ГДЕ
	                      |	(ВЫРАЗИТЬ(Объект КАК Справочник.Организации)) = &Объект
	                      |	И Свойство = &Свойство");
						  
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Объект",   ДокументСсылка.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если запрос пустой - для организации не заданы настройки, значит выполняем КТС помощь из БРМ.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗначениеСвойства = Выборка.Значение;
	
	Если ЗначениеСвойства = ЗначениеСвойстваРМК Тогда // Выполняем услугу КТС помощь из РМК
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь; // Если значение свойства не "РМК", значит выполняем КТС Помощь из БРМ

КонецФункции // ПолучитьРазрешениеНаОтображениеКТСПомощь()
 

&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовКТСПомощь(ДокументСсылка)

	СписокДокументов = Новый СписокЗначений;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СписокДокументов.Добавить(ДокументСсылка);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаСтруктурыПодчиненностиЗаказаКлиента();
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		СписокДокументов.ЗагрузитьЗначения(Выгрузка.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат СписокДокументов;

КонецФункции // ПолучитьСписокДокументовКТСПомощь()
 
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаСтруктурыПодчиненностиЗаказаКлиента()

	ТекстЗапроса = "
		|ВЫБРАТЬ
       	|	СвязанныеДокументы.Ссылка
       	|ИЗ
       	|	КритерийОтбора.СвязанныеДокументы(&ДокументСсылка) КАК СвязанныеДокументы
	   	|ГДЕ
	   	|	СвязанныеДокументы.Ссылка Ссылка Документ.РеализацияТоваровУслуг
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаСтруктурыПодчиненностиЗаказаКлиента()

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДокументовКТСПомощь()

	ТекстЗапроса = "
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Объект КАК Документ.РеализацияТоваровУслуг) КАК ДокументСсылка
		|ПОМЕСТИТЬ КешДокументовРеализаций
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|И	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК Справочник.Пользователи) = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументСсылка	
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
      	|	КешДокументов.ДокументСсылка 			КАК ДокументСсылка,
      	|	КешДокументов.ДокументСсылка.Менеджер 	КАК Менеджер
      	|ИЗ
      	|	КешДокументовРеализаций КАК КешДокументов
      	|ГДЕ
      	|	КешДокументов.ДокументСсылка В (&СписокДокументов)
		|;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешДокументовРеализаций;
		|";
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаДокументовКТСПомощь()
 

&НаСервереБезКонтекста
Функция ПолучитьКоэффициент(Период, ВалютаДокумента, ВалютаКассы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР 
		|		КОГДА &ВалютаКассы = &ВалютаДок
		|		ТОГДА 1
		|	ИНАЧЕ (ДокКурс.Курс / ДокКурс.Кратность) / (КурсКассы.Курс / КурсКассы.Кратность)
		|	КОНЕЦ КАК Коэффициент
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДок) КАК ДокКурс
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
		|ПО	Истина";
	Запрос.УстановитьПараметр("ВалютаКассы", ВалютаКассы);
	Запрос.УстановитьПараметр("ВалютаДок", 	 ВалютаДокумента);
	Запрос.УстановитьПараметр("Период", 	 Период);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Коэффициент;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДолгПоДокументу(ДокументСсылка, ВалютаКассы, ИмяТаблицы)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Коэффициент = ПолучитьКоэффициент(ДокументСсылка.Дата, ДокументСсылка.Валюта, ВалютаКассы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоИмениТаблицы(ИмяТаблицы);
	Запрос.УстановитьПараметр("ЗаказКлиента",ДокументСсылка);
	Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
	Запрос.УстановитьПараметр("ВалютаКассы", ВалютаКассы);
	Запрос.УстановитьПараметр("ВалютаДок", 	 ДокументСсылка.Валюта);
	Запрос.УстановитьПараметр("Период", 	 ДокументСсылка.Дата);
    Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ДолгОстаток, 0);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБонусыПоПартнеру(ДокументСсылка, ВалютаКассы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Коэффициент = ПолучитьКоэффициент(ТекущаяДата(), Константы.ВалютаРегламентированногоУчета.Получить(), ВалютаКассы);
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(ДокументСсылка.Партнер);
	БонусОстаток = git_ПереопределениеОбработчиковСервер.ВыполнитьПеренаправлениеВызоваФункции("LoyaltyLibrary", "git_СистемаЛояльностиСервер", "ПолучитьБонусыПоПартнеру", МассивПараметров);	
	БонусыСКоэффициентом = БонусОстаток * Коэффициент;
	
	Возврат БонусыСКоэффициентом;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеБонусыПоПартнеру(ДокументСсылка, ВалютаКассы)      
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(ДокументСсылка);
	МассивПараметров.Добавить(ВалютаКассы);
	
	БонусОстаток = git_ПереопределениеОбработчиковСервер.ВыполнитьПеренаправлениеВызоваФункции("LoyaltyLibrary", "git_СистемаЛояльностиСервер", "ПолучитьДоступныеБонусыПоДокументу", МассивПараметров);	
	
	Возврат БонусОстаток	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоИмениТаблицы(ИмяТаблицы)

	Если ИмяТаблицы = "СписокДокументовОплаты" Тогда
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| 	ВЫБОР
			|       КОГДА &ВалютаКассы <> &ВалютаДок
			|       ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОстаткиДляОплаты.СуммаОстаток, 0) * &Коэффициент КАК Число(15,2))
			|		КОГДА &ВалютаДок = ОстаткиДляОплаты.Валюта
			|		ТОГДА ОстаткиДляОплаты.СуммаОстаток
			|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ОстаткиДляОплаты.СуммаОстаток, 0) * ((ВЗМКурс.Курс / ВЗМКурс.Кратность) * (ДокКурс.Курс / ДокКурс.Кратность)) КАК Число(15,2))
			|	КОНЕЦ КАК ДолгОстаток
			|ИЗ
			|	 РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ОстаткиДляОплаты
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДок) КАК ДокКурс
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ВЗМКурс
			|ПО	ВЗМКурс.Валюта = ОстаткиДляОплаты.Валюта";	
	Иначе
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ   
			| 	ВЫБОР
			|       КОГДА &ВалютаКассы <> &ВалютаДок
			|       ТОГДА ВЫРАЗИТЬ((ОстаткиДляОплаты.КОплатеПриход - ОстаткиДляОплаты.КОплатеРасход) * &Коэффициент КАК Число(15,2))
			|		КОГДА &ВалютаДок = ОстаткиДляОплаты.Валюта
			|		ТОГДА ОстаткиДляОплаты.КОплатеПриход - ОстаткиДляОплаты.КОплатеРасход
			|		ИНАЧЕ ВЫРАЗИТЬ((ОстаткиДляОплаты.КОплатеПриход - ОстаткиДляОплаты.КОплатеРасход) * ((ВЗМКурс.Курс / ВЗМКурс.Кратность) * (ДокКурс.Курс / ДокКурс.Кратность)) КАК Число(15,2))
			|	КОНЕЦ КАК ДолгОстаток
			|ИЗ
			|	 РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента = &ЗаказКлиента) КАК ОстаткиДляОплаты
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаДок) КАК ДокКурс
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
			|ПО	Истина
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ВЗМКурс
			|ПО	ВЗМКурс.Валюта = ОстаткиДляОплаты.Валюта";	
	КонецЕсли;
		
	Возврат ТекстЗапроса;	
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьСписокЭквайринговыхТерминалов(Касса)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Ссылка
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы
		|ГДЕ
		|	Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Касса.Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	МассивЭквТерминалов = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	Возврат МассивЭквТерминалов;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПлатежныхКарт(ДоговорЭквайринга)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
	    |	ДоговорыЭквайрингаВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
	    |ИЗ
	    |	Справочник.ДоговорыЭквайринга.ВидыПлатежныхКарт КАК ДоговорыЭквайрингаВидыПлатежныхКарт
	    |ГДЕ
	    |	ДоговорыЭквайрингаВидыПлатежныхКарт.Ссылка = &Ссылка";			   
	Запрос.УстановитьПараметр("Ссылка", ДоговорЭквайринга.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидПлатежнойКарты"));
	
	Возврат СписокЗначений;
	
КонецФункции

#КонецОбласти 



















































