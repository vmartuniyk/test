
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодДокументовОплаты.Вариант 			= ВариантСтандартногоПериода.Сегодня;
	ПериодДокументовВыдачиДенег.Вариант 	= ВариантСтандартногоПериода.Сегодня;
	ПериодДокументовПервогоВзноса.Вариант 	= ВариантСтандартногоПериода.Сегодня;

	СтрокаИстория = ЗначениеВСтрокуВнутр(История.Выгрузить());
	ПринтерТоварногоЧекаКВО = 1;
		
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОплата;
	Элементы.ЗакладкаОплата.Пометка = Истина;
	Элементы.ЗакладкаОплата.Шрифт = Новый Шрифт(, 8, Истина, , , );
	
	ПредыдущаяКоманда = "ЗакладкаОплата";
	ИмяТаблицы		  = "СписокДокументовОплаты";
	
	Заголовок = "Рабочее место кассира 2.01.41.     Поддержка 1C: 1c@ktc-ua.com, инфрастуктура: support@ktc-ua.com, веб-сайты: webdev@ktc-ua.com";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаВнешнююОбработку(ИмяБиблиотеки) 
	Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяБиблиотеки);	
КонецФункции





//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
//               Ч Е Т О  ВЫШЕ МОЕГО ПОНИМАНИЯ, НАХЕРА?..                           //
//                                                                                  //

&НаКлиенте
Процедура ПринятоНаличнымиНажатие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаУниверсальногоОтчета", Новый Структура("Касса, ТипОтчета", Касса, "ОтчетПоПКО"));
КонецПроцедуры

&НаКлиенте                                                                                       
Процедура ВыданоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаУниверсальногоОтчета", Новый Структура("Касса, ТипОтчета", Касса, "ОтчетПоРКО"));	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоКартойНажатие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
    ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаУниверсальногоОтчета", Новый Структура("Касса, ТипОтчета", Касса, "ОтчетПоЭквайрингу"));	
КонецПроцедуры

&НаКлиенте
Функция СформироватьОтчет(ИмяОтчета, НаименованиеОтчета, ПараметрыОтчета)
	
	Попытка
		ПодключитьВнешнююОбработку(ИмяОтчета, Ложь);	
		ФормаОтчета = ПолучитьФорму("ВнешнийОтчет." + НаименованиеОтчета + ".Форма", 
		ПараметрыОтчета,
		ЭтаФорма,
		УникальныйИдентификатор);
		
		ФормаОтчета.Открыть();
		ФормаОтчета.Активизировать();
	Исключение
		Сообщить("Отчет " + ИмяОтчета + " не найден");
	КонецПопытки;
	
КонецФункции
  
&НаСервере
Функция ПодключитьВнешнююОбработку(НаименованиеОтчета, БезопасныйРежим)
	
	ВнешняяОбработка = ПолучитьСсылкуНаОбработкуОтчет(НаименованиеОтчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанныеОбработки 	= ВнешняяОбработка.ПолучитьОбъект().ХранилищеОбработки.Получить();
	АдресВоВременномХранилище 	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВнешниеОтчеты.Подключить(АдресВоВременномХранилище,, БезопасныйРежим);
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаОбработкуОтчет(Наименование)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОбработки
	|ГДЕ
	|	ДополнительныеОбработки.Наименование = &Наименование
	|И	ДополнительныеОбработки.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	
КонецФункции

//                                                                                  //
//               Ч Е Т О  ВЫШЕ МОЕГО ПОНИМАНИЯ, НАХЕРА?..                           //
//                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СейчасВКассеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Касса", Касса);
	ПараметрыФормы.Вставить("СтрокаИстория", СтрокаИстория);
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПередача", ПараметрыФормы);
	
	Если Результат <> Неопределено Тогда
		
		Если Не ПустаяСтрока(Результат) Тогда
			
			СтрокаИстория = Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПараметрыКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДолгПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ФормаОтчета = ПолучитьФорму("Отчет.СостояниеРасчетовСКлиентами.Форма.ФормаОтчета");
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].ПравоеЗначение = ТекущиеДанные.Организация;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Использование = Истина;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].ПравоеЗначение = ТекущиеДанные.Партнер;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Использование = Истина;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].ПравоеЗначение = ТекущиеДанные.Контрагент;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Использование = Истина;
		ФормаОтчета.СкомпоноватьРезультат();
		ФормаОтчета.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыКассы()
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "
	//0.
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.Касса,
	|	ДенежныеСредства.Касса.ВалютаДенежныхСредств КАК Валюта,
	|		
	|	ДенежныеСредства.СуммаПриход 			КАК ПринятоНаличными,
	|	ДенежныеСредства.СуммаРасход 			КАК Выдано,
	|	ДенежныеСредства.СуммаКонечныйОстаток 	КАК СейчасВКассе
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.ОстаткиИОбороты(&Дата, , Авто, , Касса = &Касса) КАК ДенежныеСредства
	|;
	//1.
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ        
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.Валюта КАК Валюта,
	|	ДенежныеСредства.СуммаПриход * ((ЕСТЬNULL(КурсДенежныхСредств.Курс,0)/ЕСТЬNULL(КурсДенежныхСредств.Кратность,1))/(ЕСТЬNULL(КурсКассы.Курс, 1)/ЕСТЬNULL(КурсКассы.Кратность,1))) КАК ПринятоКартой
	|ИЗ
	|	РегистрНакопления.РасчетыПоЭквайрингу.ОстаткиИОбороты(&Дата, , Авто, , Организация = &Организация) КАК ДенежныеСредства
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсДенежныхСредств
	|ПО КурсДенежныхСредств.Валюта = ДенежныеСредства.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
	|ПО (ИСТИНА);";	
	Запрос.УстановитьПараметр("Дата", 			НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Касса", 			Касса);
	Запрос.УстановитьПараметр("Организация", 	Касса.Владелец);
	Запрос.УстановитьПараметр("ВалютаКассы", 	КассаВалюта);
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	ВыборкаПоНаличным 	= РезультатПакета[0].Выбрать();
	ВыборкаПоЭквайрингу = РезультатПакета[1].Выбрать();
	
	Если ВыборкаПоНаличным.Следующий() Тогда	
		НадписьСейчасВКассе 	= Формат(ВыборкаПоНаличным.СейчасВКассе,		"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьПринятоНаличными = Формат(ВыборкаПоНаличным.ПринятоНаличными, 	"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьВыдано			= Формат(ВыборкаПоНаличным.Выдано, 				"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	Иначе
		НадписьСейчасВКассе 	= Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьПринятоНаличными = Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьВыдано			= Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	КонецЕсли;
	
	Если ВыборкаПоЭквайрингу.Следующий() Тогда
		НадписьПринятоКартой = Формат(ВыборкаПоЭквайрингу.ПринятоКартой, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	Иначе
		НадписьПринятоКартой = Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	КонецЕсли;
			 	
КонецПроцедуры
	






&НаКлиенте
Процедура ОбработчикСкрытияИнфыПоКассе()
	ИнформацияПоКассе 							= Ложь;
	Элементы.ГруппаИнформацияПоКассе.Видимость 	= ИнформацияПоКассе;	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоКассе(Команда)
	
	ИнформацияПоКассе = Не ИнформацияПоКассе;
	Элементы.ГруппаИнформацияПоКассе.Видимость = ИнформацияПоКассе;
	
	Если ИнформацияПоКассе Тогда
		ЗаполнитьПараметрыКассы();
		ПодключитьОбработчикОжидания("ОбработчикСкрытияИнфыПоКассе", 60, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаИстория", СтрокаИстория);
	ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаИстория", ПараметрыФормы);
КонецПроцедуры

 &НаКлиенте
Процедура Покупюрка(Команда)
	ФормаПокупюрка 	= ПолучитьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПокупюрка");
	ФормаПокупюрка.Элементы.ФормаПереместить.Видимость = Ложь;
	ФормаПокупюрка.Открыть();
КонецПроцедуры



&НаКлиенте
Процедура ПринятьОплатуОтПартнера(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Касса", 						Касса);
	ПараметрыФормы.Вставить("СтрокаИстория", 				СтрокаИстория);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаОплатыОтКлиента", ПараметрыФормы);
	
	Если НЕ Результат = Неопределено Тогда
		
		Если Результат.Свойство("СтрокаИстория") Тогда
			Если НЕ ПустаяСтрока(Результат.СтрокаИстория) Тогда
				СтрокаИстория = Результат.СтрокаИстория;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МобильнаяКорзина(Команда)
	ТекущаяСтрока = Элементы.СписокДокументовОплаты.ТекущаяСтрока;
	ТекущиеДанные = Элементы.СписокДокументовОплаты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено И ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.Документ = Неопределено Тогда
		ПараметрыМКП = ПолучитьПараметрыМобильнойКорзины(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму(ПараметрыМКП.ИмяФормы, ПараметрыМКП, ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыМобильнойКорзины(Идентификатор)
	
	СсылкаНаБиблиотеку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Мобильная корзина продаж");        
    ДвоичныеДанные = СсылкаНаБиблиотеку.ХранилищеОбработки.Получить();
    АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
    МобильнаяКорзинаПродаж = ВнешниеОбработки.Подключить(АдресХранилища, , Ложь);
		
	СтрокаТаблицы = ТЗДокументовОплаты.НайтиПоИдентификатору(Идентификатор);	
	ПараметрыМКП = Новый Структура("ИмяФормы, Соглашение, Партнер");
	ПараметрыМКП.Вставить("ИмяФормы", "ВнешняяОбработка." + МобильнаяКорзинаПродаж + ".Форма.Форма");
	ПараметрыМКП.Вставить("Партнер", СтрокаТаблицы.Документ.Партнер); 
	ПараметрыМКП.Вставить("Соглашение", СтрокаТаблицы.Документ.Соглашение); 
	Возврат ПараметрыМКП
	
КонецФункции

&НаКлиенте
Процедура ПечатьДокументаПКОИзСписка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", ПериодДокументовОплаты);
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаСписокПКО", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Результат);
		
		Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(МассивДокументов) Тогда
			
			ПечатнаяФормаПКО = СформироватьДокументПечатиНаСервере(Результат);
			Если НЕ ПустаяСтрока(ПринтерГарантийногоСоглашенияИПКО) Тогда
				ПечатнаяФормаПКО.ИмяПринтера = ПринтерГарантийногоСоглашенияИПКО;
				ПечатнаяФормаПКО.Напечатать();
			Иначе
				ВывестиСообщениеПользователю("Выберите принтер для печати ПКО (вкладка 'Настройки')!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументПечатиНаСервере(ДокументСсылка)
	
	Перем КоллекцияПечатныхФорм, ПараметрыВывода;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ДокументСсылка);
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ПриходныйКассовыйОрдер", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ОбъектыПечати 	= Новый СписокЗначений;
		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(ПолучитьСсылкуНаВнешнююОбработку("Обработка 'Внешние печатные формы'"), ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;				
	
КонецФункции



&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНавигационнуюСсылкуДокумента(Команда)
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаНавигационнойСсылки", Новый Структура("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ТекущиеДанные.Документ)));
	КонецЕсли;
	
КонецПроцедуры





&НаКлиенте
Процедура ЗакладкаОплата(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОплата;
	Элементы.ЗакладкаОплата.Пометка 		= Истина;
	
	Элементы[ПредыдущаяКоманда].Шрифт 	= Новый Шрифт(, 8, Ложь, , , );
	Элементы.ЗакладкаОплата.Шрифт 		= Новый Шрифт(, 8, Истина, , , );
	
	ПредыдущаяКоманда 	= "ЗакладкаОплата";
	ИмяТаблицы			= "СписокДокументовОплаты";
	
	ОбновитьСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаПервыйВзнос(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПервыйВзнос;
	Элементы.ЗакладкаПервыйВзнос.Пометка 	= Истина;
	
	Элементы[ПредыдущаяКоманда].Шрифт 	= Новый Шрифт(, 8, Ложь, , , );
	Элементы.ЗакладкаПервыйВзнос.Шрифт 	= Новый Шрифт(, 8, Истина, , , );
	
	ПредыдущаяКоманда 	= "ЗакладкаПервыйВзнос";
	ИмяТаблицы 			= "СписокДокументовПервыйВзнос";
	
	ОбновитьСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаВыдача(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыдача;
	Элементы.ЗакладкаВыдача.Пометка 		= Истина;
	
	Элементы[ПредыдущаяКоманда].Шрифт 	= Новый Шрифт(, 8, Ложь, , , );
	Элементы.ЗакладкаВыдача.Шрифт 		= Новый Шрифт(, 8, Истина, , , );
	
	ПредыдущаяКоманда 	= "ЗакладкаВыдача";
	ИмяТаблицы 			= "СписокДокументовВыдачиДенег";
	
	ОбновитьСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкаНастройки(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройки;
	Элементы.ЗакладкаНастройки.Пометка 		= Истина;
	
	Элементы[ПредыдущаяКоманда].Шрифт 	= Новый Шрифт(, 8, Ложь, , , );
	Элементы.ЗакладкаНастройки.Шрифт 	= Новый Шрифт(, 8, Истина, , , );
	
	ПредыдущаяКоманда 	= "ЗакладкаНастройки";
	ИмяТаблицы 			= Неопределено;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                     //
//      		                      ПРОЦЕДУРЫ ПЕРЕРИСОВКИ ИНТЕРФЕЙСА                                 //
//                                                                                                     //

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСтраницу();
	ПодключитьОбработчикОжидания("ОбновитьСтраницу", 300);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)	
	Ответ = Вопрос("Вы действительно хотите закрыть рабочее место кассира.", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда Отказ = Истина; КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура Страница_Обновить(Команда)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницу()
	
	Перем ПараметрыОтбора;
	
	Если 		ИмяТаблицы 	= "СписокДокументовОплаты" 		Тогда	
		ТаблицаОбъект = ТЗДокументовОплаты;
	ИначеЕсли 	ИмяТаблицы 	= "СписокДокументовПервыйВзнос" Тогда
		ТаблицаОбъект = ТЗДокументовПервыйВзнос;
	ИначеЕсли 	ИмяТаблицы 	= "СписокДокументовВыдачиДенег" Тогда
		ТаблицаОбъект = ТЗДокументовВыдачиДенег;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	//Запомнили ссылку на документ, что бы востановить позицию при обновлении списка
	Если НЕ Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено Тогда
		 ПараметрыОтбора = Новый Структура("Документ", Элементы[ИмяТаблицы].ТекущиеДанные.Документ);
	КонецЕсли;
	
	
	//Обновляем страницу на сервере
	ОбновитьСтраницуНаСервере();
	
	
	//Востанавливаем курсор на нужный документ, если он не пропал из выгрузки	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = ТаблицаОбъект.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда Элементы[ИмяТаблицы].ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьСтраницуНаСервере()
	
	Если 		ИмяТаблицы = "СписокДокументовПервыйВзнос" Тогда
		ОбновитьТЗДокументовПервыйВзнос();
	ИначеЕсли 	ИмяТаблицы = "СписокДокументовОплаты" Тогда
		ОбновитьТЗДокументовОплаты();
	ИначеЕсли 	ИмяТаблицы = "СписокДокументовВыдачиДенег" Тогда
		ОбновитьТЗДокументовВыдачиДенег();
	КонецЕсли;
	
	КассаВалюта = Касса.ВалютаДенежныхСредств;
	Если ИнформацияПоКассе Тогда ЗаполнитьПараметрыКассы(); КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПервыйВзносОбороты(ВсеДокументы)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		//|	ВЫБОР
		//|		КОГДА КОплатеПриход = 0
		//|		ТОГДА 0
		//|		ИНАЧЕ ВЫРАЗИТЬ(КОплатеРасход / КОплатеПриход * 100 КАК ЧИСЛО(15,0))	
		//|	КОНЕЦ КАК ПроцентОплаты,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|			И ЗаказКлиента.СуммаДокумента > 0
        |   	ТОГДА
		|			ВЫРАЗИТЬ(ЕСТЬNULL(КОплатеРасход, 0) / ЗаказКлиента.СуммаДокумента * 100 КАК ЧИСЛО(15, 0))	
		|   	ИНАЧЕ 0
		|   КОНЕЦ КАК ПроцентОплаты, 
		//|	ВЫБОР
		//|		КОГДА КОтгрузкеРасход = 0
		//|		ТОГДА 0
		//|		ИНАЧЕ ВЫРАЗИТЬ(КОтгрузкеПриход / КОтгрузкеРасход * 100 КАК ЧИСЛО(15,0))	
		//|	КОНЕЦ КАК ПроцентОтгрузки,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|		И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
		|		И ЗаказКлиента.СуммаДокумента > 0
        |   ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(КОтгрузкеПриход, 0) / ЗаказКлиента.СуммаДокумента * 100 КАК ЧИСЛО(15, 0)) 
		|   ИНАЧЕ 0
		|   КОНЕЦ КАК ПроцентОтгрузки,
		|	ЗаказКлиента.Номер 			КАК Номер,
		|	ЗаказКлиента.Дата 			КАК Дата,
		|	ЗаказКлиента.Статус 		КАК Статус,
		|	ЗаказКлиента.СуммаДокумента КАК Сумма,
		|	Валюта 						КАК Валюта,
		|	ЗаказКлиента 				КАК Документ,
		|	ЗаказКлиента.Менеджер 		КАК Менеджер,
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент 	КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
		|	ЗаказКлиента.Склад 			КАК Склад
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаНачало, &ДатаОкончания, ,АналитикаУчетаПоПартнерам В 
		|														(ВЫБРАТЬ
		|															АналитикаПоПартнерам.КлючАналитики
		|														 ИЗ
		|															РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|														 ГДЕ
		|															АналитикаПоПартнерам.Организация = &Организация)
		//|														 И  ЗаказКлиента.Дата >= &ДатаНачало
		|														 И  ЗаказКлиента Ссылка Документ.ЗаказКлиента " 
		+ ?(НЕ ВсеДокументы, "
		|														 И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|														 И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|				 ", " ") + "
		|													)
		|
		|УПОРЯДОЧИТЬ ПО ЗаказКлиента.Дата ";
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ОбновитьТЗДокументовПервыйВзнос()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПервыйВзносОбороты(ВсеДокументы);
	Запрос.УстановитьПараметр("ДатаНачало", 	ПериодДокументовПервогоВзноса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ПериодДокументовПервогоВзноса.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", 	?(ЗначениеЗаполнено(Касса), Касса.Владелец, Справочники.Организации.ПустаяСсылка()));
	
	ТЗДокументовПервыйВзнос.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаОплатыОбороты()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ  
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Номер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Номер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Дата
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Дата
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).СуммаДокумента
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).СуммаДокумента
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Менеджер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Менеджер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Менеджер,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Склад
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Склад
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Склад,
		|	Валюта 									КАК Валюта,
		|	ЗаказКлиента 							КАК Документ,
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент 	КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация
		|	
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаНачало, &ДатаОкончание, ,АналитикаУчетаПоПартнерам В 
		|														(ВЫБРАТЬ
		|															АналитикаПоПартнерам.КлючАналитики
		|														 ИЗ
		|															РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|														 ГДЕ
		|															АналитикаПоПартнерам.Организация = &Организация)
		|														 И  (ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|														ИЛИ  ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг)
		|													) КАК Обороты
		|
		|УПОРЯДОЧИТЬ ПО Дата ";
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаОплатыОстатки()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Номер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Номер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Дата
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Дата
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).СуммаДокумента
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).СуммаДокумента
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Менеджер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Менеджер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Менеджер,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Склад
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Склад
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Склад,
        |
		|	СуммаОстаток							КАК ОстатокКОплате,
		|	Валюта 									КАК Валюта,
		|	ЗаказКлиента 							КАК Документ,
		|	АналитикаУчетаПоПартнерам.Партнер 		КАК Партнер,
		|	АналитикаУчетаПоПартнерам.Контрагент 	КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 	КАК Организация
		|	
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						АналитикаПоПартнерам.Организация = &Организация)
		|					И (ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
		|				   ИЛИ ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
		|				   ИЛИ ЗаказКлиента = Неопределено)) 
		|ГДЕ
		|	СуммаОстаток > 0
        |
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Возврат ТекстЗапроса;	
	
КонецФункции

&НаСервере
Процедура ОбновитьТЗДокументовОплаты()
		
	Запрос = Новый Запрос;
	Запрос.Текст = ?(ВсеДокументы, ПолучитьТекстЗапросаОплатыОбороты(), ПолучитьТекстЗапросаОплатыОстатки()); 	
	Запрос.УстановитьПараметр("ДатаНачало", 	ПериодДокументовОплаты.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончание", 	ПериодДокументовОплаты.ДатаОкончания);
	
	Попытка
		Запрос.УстановитьПараметр("Организация", 	?(ЗначениеЗаполнено(Касса), Касса.Владелец, Справочники.Организации.ПустаяСсылка()));
	Исключение
		Касса = Неопределено;
		Возврат;
	КонецПопытки;
	
	Результат = Запрос.Выполнить();
	Выгрузка  = Результат.Выгрузить(); 
	ТЗДокументовОплаты.Загрузить(Выгрузка);
	ОбщаяЗадолженность = ТЗДокументовОплаты.Итог("ОстатокКОплате");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЗДокументовВыдачиДенег()
		
	Запрос = Новый Запрос;	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.Номер КАК Номер,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.Дата КАК Дата,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ,
	|	ВЫБОР
	|		КОГДА ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаКонечныйОстаток < 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Оплачена,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.Статус КАК Статус,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента КАК Сумма,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.Валюта КАК Валюта,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.АналитикаУчетаПоПартнерам.Партнер    	КАК Партнер,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.АналитикаУчетаПоПартнерам.Контрагент 	КАК Контрагент,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.КтоЗаявил КАК Менеджер,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.АналитикаУчетаПоПартнерам.Организация 	КАК Организация,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаКонечныйОстаток,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаОборот,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаПриход,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаРасход,
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаНачальныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.ОстаткиИОбороты(&ДатаНачало, &ДатаОкончание, Авто, , ) КАК ДенежныеСредстваКВыплатеОстаткиИОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств) = ТИП(Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|	И (НЕ ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления)
	|	И
	|		ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.Организация = &Организация
	|		КОНЕЦ 
	|	И	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание" +
	?(ВсеДокументы, " " , "
	|	И	ДенежныеСредстваКВыплатеОстаткиИОбороты.СуммаКонечныйОстаток < 0");
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеСредстваКВыплатеОстаткиИОбороты.ЗаявкаНаРасходованиеДенежныхСредств.МоментВремени";
	
	Запрос.УстановитьПараметр("ДатаНачало", ПериодДокументовВыдачиДенег.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончание", ПериодДокументовВыдачиДенег.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Касса.Владелец);
		
	ТЗДокументовВыдачиДенег.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//                                                                                                       //
//                                   ПРОЦЕДУРЫ ПЕРЕРИСОВКИ ИНТЕРФЕЙСА                                    //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////



&НаКлиенте
Процедура КассаПриИзменении(Элемент)	
	ОбновитьСтраницу();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКасс()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Кассы.Ссылка КАК Касса
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Кассы.Наименование";
				   
	Результат 			= Запрос.Выполнить();
	ТаблицаРезультатов 	= Результат.Выгрузить();
	
	Возврат ТаблицаРезультатов.ВыгрузитьКолонку("Касса");
	
КонецФункции

&НаКлиенте
Процедура КассаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокКасс());
КонецПроцедуры



&НаКлиенте
Процедура ВсеДокументыПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовОплатыПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовПервогоВзносаПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовВыдачиДенегПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры





&НаКлиенте
Процедура ОчиститьИнформациюПоПартнеру()
	НадписьДолгПартнера = "0,00 " + КассаВалюта;
	НадписьНашДолг		= "0,00 " + КассаВалюта;
	НадписьПоДокументу 	= "0,00 " + КассаВалюта;
	НадписьСальдо 		= "0,00 " + КассаВалюта;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыделенияСтроки()
	
	Если ИмяТаблицы 	= "СписокДокументовОплаты" 			
	 ИЛИ ИмяТаблицы 	= "СписокДокументовПервыйВзнос" 
	 ИЛИ ИмяТаблицы 	= "СписокДокументовВыдачиДенег" Тогда
		ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено Тогда ОбработатьВыделенияСтрокиНаСервере(ТекущиеДанные.Документ, ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, Касса); КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыделенияСтрокиНаСервере(ДокументСсылка, ПартнерСсылка, КонтрагентСсылка, Касса)
	УстановитьПривилегированныйРежим(Истина);	
	ПолучитьДолгПоПартнеру(ПартнерСсылка);
	ПолучитьДолгПоДокументу(ДокументСсылка);
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДолгПоПартнеру(ПартнерСсылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА ДолгКлиента ИНАЧЕ ВЫРАЗИТЬ(ДолгКлиента 	* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК ДолгПартнера,
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА НашДолг		ИНАЧЕ ВЫРАЗИТЬ(НашДолг 		* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК НашДолг
		|	
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 ТОГДА  СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК ДолгКлиента,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК НашДолг
		|	ИЗ	
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСКлиентами
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта
		|
		|	ОБЪЕДИНИТЬ 
		|
		|	ВЫБРАТЬ 
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 И ЗаказПоставщику = Неопределено 	ТОГДА СуммаОстаток ИНАЧЕ 0 КОНЕЦ),
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 										ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) 				 
		|	ИЗ	
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСПоставщиками
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта  ) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Курсы
		|ПО Вл.Валюта = Курсы.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ЗапросВалютРегламент
		|ПО ЗапросВалютРегламент.Валюта = &ВалютаКассы ";	
	Запрос.УстановитьПараметр("Партнер", 		ПартнерСсылка);
	Запрос.УстановитьПараметр("ВалютаКассы", 	КассаВалюта);

	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		СуммаКонечныйДолг 	= Выборка.ДолгПартнера;
		СуммаНашДолг		= Выборка.НашДолг;
	Иначе
		СуммаКонечныйДолг 	= 0;
		СуммаНашДолг		= 0;
	КонецЕсли;
					
	НадписьДолгПартнера = Формат(СуммаКонечныйДолг, 			"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	НадписьНашДолг		= Формат(СуммаНашДолг, 					"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	НадписьСальдо       = Формат(СуммаКонечныйДолг-СуммаНашДолг,"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДолгПоДокументу(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументСсылка);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| 	СуммаОстаток,
			|	Валюта
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) ";	 
 	Иначе
	    Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СуммаОстаток,0) < 0
			|	ТОГДА ЕСТЬNULL(СуммаОстаток,0) 
			|	ИНАЧЕ 0
			|КОНЕЦ КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств = &ЗаказКлиента)";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НадписьПоДокументу = Формат(Выборка.СуммаОстаток, "ЧДЦ=2;ЧН='0,00'") + " " + ?(ДокументСсылка = Неопределено, "", ДокументСсылка.Валюта);
	Иначе
		НадписьПоДокументу = Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + ДокументСсылка.Валюта;
	КонецЕсли;
		
КонецПроцедуры




&НаСервереБезКонтекста
Функция ПолучитьДолгПартнераПоДокументу(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
   	| 	ОстаткиДляОплаты.ЗаказКлиента,
	| 	ОстаткиДляОплаты.СуммаОстаток,
	|	ОстаткиДляОплаты.Валюта
   	| ИЗ
   	|	 РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ОстаткиДляОплаты;";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка			 = РезультатЗапроса.Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции
             
&НаКлиенте
Процедура ОткрытьФормуОплаты()
	
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		ВывестиСообщениеПользователю("Касса не выбрана!", "КассаОплаты");
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.Документ = Неопределено Тогда
			Предупреждение("Пока не работает, для сведения взаиморасчетов пишите на 1c@ktc-ua.com");
			Возврат;
		КонецЕсли;
		
		Если НЕ ПолучитьДолгПартнераПоДокументу(ТекущиеДанные.Документ) И ТипЗнч(ТекущиеДанные.Документ) <> ТИП("ДокументСсылка.ЗаказКлиента") Тогда
			ВывестиСообщениеПользователю("Долг по документу полностью погашен. Для открытия документа воспользуйтесь контекстным меню списка документов!");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяТаблицы", 				ИмяТаблицы);
		ПараметрыФормы.Вставить("Документ", 				ТекущиеДанные.Документ);
		ПараметрыФормы.Вставить("Касса", 					Касса);
		ПараметрыФормы.Вставить("ВидПлатежнойКарты", 		ВидПлатежнойКарты);
		ПараметрыФормы.Вставить("ЭквайринговыйТерминал", 	ЭквайринговыйТерминал);
		ПараметрыФормы.Вставить("СтрокаИстория", 			СтрокаИстория);
		ПараметрыФормы.Вставить("ПринтерТоварногоЧека", 	ПринтерТоварногоЧека);
		ПараметрыФормы.Вставить("ПринтерТоварногоЧекаКВО", 	ПринтерТоварногоЧекаКВО);
		ПараметрыФормы.Вставить("ИмяПринтераГарантии", 		ПринтерГарантийногоСоглашенияИПКО);
		ПараметрыФормы.Вставить("ВыводитьГарантиюНаПечать", ВыводитьГарантиюНаПечать); 
		ПараметрыФормы.Вставить("Партнер", 					ТекущиеДанные.Партнер);
		ПараметрыФормы.Вставить("БанковскийСчетОрганизации",БанковскийСчетОрганизации);
		
		ФормаПриемаДенег = ПолучитьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПриемаДенег", ПараметрыФормы, ЭтаФорма);
		Результат = ФормаПриемаДенег.ОткрытьМодально();
		Если НЕ Результат = Неопределено Тогда
			ЭквайринговыйТерминал 		= Результат.ЭквайринговыйТерминал;
			ВидПлатежнойКарты 			= Результат.ВидПлатежнойКарты;
			БанковскийСчетОрганизации   = Результат.БанковскийСчетОрганизации;
			
			Если Результат.Свойство("СтрокаИстория") Тогда
				Если НЕ ПустаяСтрока(Результат.СтрокаИстория) Тогда
					СтрокаИстория = Результат.СтрокаИстория;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОплатыПриАктивизацииСтроки(Элемент)
	ОчиститьИнформациюПоПартнеру();
	ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ОткрытьФормуОплаты();
	ОчиститьИнформациюПоПартнеру();
    ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);	
КонецПроцедуры



&НаКлиенте
Процедура СписокДокументовПервыйВзносПриАктивизацииСтроки(Элемент)
	ОчиститьИнформациюПоПартнеру();
	ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПервыйВзносВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуОплаты();
	ОчиститьИнформациюПоПартнеру();
    ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьФормуВыдачи()
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ТекущиеДанные.Оплачена Тогда
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Документ", 		ТекущиеДанные.Документ);
			ПараметрыФормы.Вставить("Касса", 			Касса);
			ПараметрыФормы.Вставить("СтрокаИстория", 	СтрокаИстория);
			
			ФормаВыдачиДенег = ПолучитьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаВыдачиДенег", ПараметрыФормы, ЭтаФорма);
			Результат = ФормаВыдачиДенег.ОткрытьМодально();
			Если НЕ Результат = Неопределено Тогда				
				Если НЕ ПустаяСтрока(Результат) Тогда
					СтрокаИстория = Результат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьСтраницу();
			
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыдачиДенегПриАктивизацииСтроки(Элемент)
	ОчиститьИнформациюПоПартнеру();
	ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыдачиДенегВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуВыдачи();	
	ОчиститьИнформациюПоПартнеру();
    ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);	
КонецПроцедуры




Процедура ВывестиСообщениеПользователю(ТекстСообщения, Поле="", ОчищатьСообщения = Ложь)
	
#Если ТонкийКлиент Тогда	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
#КонецЕсли	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле);
	
КонецПроцедуры

