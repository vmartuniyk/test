
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодДокументовОплаты.Вариант 			= ВариантСтандартногоПериода.Сегодня;
	ПериодДокументовВыдачиДенег.Вариант 	= ВариантСтандартногоПериода.Сегодня;
	ПериодДокументовПервогоВзноса.Вариант 	= ВариантСтандартногоПериода.Сегодня;

	ПринтерТоварногоЧекаКВО = 1;
	ПериодАвтоОбновления = 300;
			
	Заголовок = "Рабочее место кассира 2.3.1. Техническая поддержка: 777@ktc-ua.com";
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСтраницу();
	ПодключитьОбработчикОжидания("ОбновитьСтраницу", ПериодАвтоОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)	
	
	Ответ = Вопрос("Вы действительно хотите закрыть рабочее место кассира.", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Отказ = Истина; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия	= "ОплатаУспешноПроизведена" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("ЭквайринговыйТерминал") Тогда
				
				ЭквайринговыйТерминал = Параметр.ЭквайринговыйТерминал;
				
			КонецЕсли;
			
			Если Параметр.Свойство("ДокументСсылка") Тогда
				
				ДокументСсылка = Параметр.ДокументСсылка; 
				Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					
					Если ВыводитьГарантиюНаПечать Тогда
						ПечатьГарантийногоСоглашения(ДокументСсылка);
					КонецЕсли;
					ПечатьТоварногоЧека(ДокументСсылка);
					
				Иначе
					
					МассивДокументов = ПолучитьРеализациюПоЗаказу(ДокументСсылка);
					Если МассивДокументов.Количество() = 0 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать невозможна, документ реализации не создан.'"));
					Иначе
						Для Каждого ЭлементМассива Из МассивДокументов Цикл
							Если ВыводитьГарантиюНаПечать Тогда
								ПечатьГарантийногоСоглашения(ЭлементМассива);
							КонецЕсли;
							ПечатьТоварногоЧека(ЭлементМассива);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
			ОбновитьСтраницу();
				
		КонецЕсли;
		

	КонецЕсли;
	
	
КонецПроцедуры

	
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КассаПриИзменении(Элемент)	
	ОбновитьСтраницу();	
	ТоварыОчистить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КассаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокКасс());
КонецПроцедуры


&НаКлиенте
Процедура ВсеДокументыПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовОплатыПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовПервогоВзносаПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовВыдачиДенегПриИзменении(Элемент)
	ОбновитьСтраницу();
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьСтраницу();	
КонецПроцедуры



&НаКлиенте
Процедура СписокДокументовОплатыПриАктивизацииСтроки(Элемент)
	ОчиститьИнформациюПоПартнеру();
	ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ОткрытьФормуОплаты();
	ОчиститьИнформациюПоПартнеру();
    ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);	
КонецПроцедуры


&НаКлиенте
Процедура СписокДокументовПервыйВзносПриАктивизацииСтроки(Элемент)
	ОчиститьИнформациюПоПартнеру();
	ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПервыйВзносВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуОплаты();
	ОчиститьИнформациюПоПартнеру();
    ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры


&НаКлиенте
Процедура СписокДокументовВыдачиДенегПриАктивизацииСтроки(Элемент)
	ОчиститьИнформациюПоПартнеру();
	ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыдачиДенегВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ОткрытьФормуВыдачи();	
	ОчиститьИнформациюПоПартнеру();  
    ПодключитьОбработчикОжидания("ОбработчикВыделенияСтроки", 0.2, Истина);	
КонецПроцедуры





&НаКлиенте
Процедура СтрокаСканерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаСканерОбработатьНаСервере(СокрЛП(Текст));
	
	ОбновитьСуммаИтог();
	
	СтрокаСканер = "";
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТоварыПриАктивизацииСтрокиСервер(ТекущиеДанные.Номенклатура, ТекущиеДанные.КлючСвязиСерийныхНомеров);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийЭлементТовары = Элемент.ТекущийЭлемент;
	Если ТекущиеДанные <> Неопределено И ТекущийЭлементТовары <> Неопределено Тогда
		Если ТекущийЭлементТовары.Имя = "ТоварыНоменклатура" Тогда 		
        	СсылкаНаСайт = "http://www.ktc-ua.com/id/" + Формат(Число(ТекущиеДанные.Код), "ЧГ=0");
			ЗапуститьПриложение(СсылкаНаСайт);
		КонецЕсли;       
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьСодержанииеТоварыКлиент();
	ОбновитьСуммаИтог();
КонецПроцедуры



&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ОбновитьСодержанииеТоварыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	ОбновитьСодержанииеТоварыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено Тогда	
		Элементы.ТоварыУпаковка.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокУпаковокНоменклатуры(ТекущиеДанные.Номенклатура));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ОбновитьСодержанииеТоварыКлиент();
КонецПроцедуры


&НаКлиенте
Процедура СерийныеНомераНоменклатурыДоступныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеДост = Элементы.СерийныеНомераНоменклатурыДоступные.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанныеДост <> Неопределено Тогда
		
		Если ТекущиеДанныеДост.Выбран Тогда
			ПараметрыПоиска = Новый Структура("СерийныйНомер, КлючСвязиСерийныхНомеров", ТекущиеДанныеДост.СерийныйНомер, ТекущиеДанные.КлючСвязиСерийныхНомеров);
			РезультатПоиска = СерийныеНомера.НайтиСтроки(ПараметрыПоиска);
			Если РезультатПоиска.Количество() Тогда
				СерийныеНомера.Удалить(РезультатПоиска[0]);		
			КонецЕсли;
		Иначе
			
			git_СерийныеНомераКлиент.ПроверитьКлючСвязи(ЭтаФорма, ТекущиеДанные.КлючСвязиСерийныхНомеров);
			Если git_СерийныеНомераКлиент.ПроверитьКоличествоСерийныхНомеров(ЭтаФорма, ТекущиеДанные.Количество, ТекущиеДанные.КлючСвязиСерийныхНомеров) Тогда
				Предупреждение(НСтр("ru='Количество серийных номеров больше чем количество номенклатуры!'"));
				Возврат;	
			КонецЕсли;
					
			Если СерийныеНомера.НайтиСтроки(Новый Структура("СерийныйНомер, КлючСвязиСерийныхНомеров", ТекущиеДанныеДост.СерийныйНомер, ТекущиеДанные.КлючСвязиСерийныхНомеров)).Количество() = 0 Тогда
				НоваяСтрока = СерийныеНомера.Добавить();
				НоваяСтрока.СерийныйНомер = ТекущиеДанныеДост.СерийныйНомер;
				НоваяСтрока.КлючСвязиСерийныхНомеров = ТекущиеДанные.КлючСвязиСерийныхНомеров;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСодержанииеКорзиныСервер();
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Покупюрка(Команда)
	ФормаПокупюрка 	= ПолучитьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПокупюрка");
	ФормаПокупюрка.Элементы.ФормаПереместить.Видимость = Ложь;
	ФормаПокупюрка.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаИстория", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Страница_Обновить(Команда)
	ОбновитьСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоКассе(Команда)
	
	ИнформацияПоКассе = Не ИнформацияПоКассе;
	Элементы.ГруппаИнформацияПоКассе.Видимость = ИнформацияПоКассе;
	
	Если ИнформацияПоКассе Тогда
		ЗаполнитьПараметрыКассы();
		ПодключитьОбработчикОжидания("ОбработчикСкрытияИнфыПоКассе", 60, Истина);
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ПечатьДокументаПКОИзСписка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", ПериодДокументовОплаты);
	
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаСписокПКО", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Результат);
		
		Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(МассивДокументов) Тогда
			
			ПечатнаяФормаПКО = СформироватьДокументПечатиНаСервере(Результат);
			Если НЕ ПустаяСтрока(ПринтерГарантийногоСоглашенияИПКО) Тогда
				ПечатнаяФормаПКО.ИмяПринтера = ПринтерГарантийногоСоглашенияИПКО;
				ПечатнаяФормаПКО.Напечатать();
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите принтер для печати ПКО (вкладка 'Настройки')!'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОплатуОтПартнера(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Касса", 						Касса);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	
	ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаОплатыОтКлиента", ПараметрыФормы);
		
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ИмяТаблицы = ПолучитьИмяТаблицыТекущейСтраницы();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;		
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНавигационнуюСсылкуДокумента(Команда)
	
	ТекущиеДанные = Элементы[ПолучитьИмяТаблицыТекущейСтраницы()].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаНавигационнойСсылки", Новый Структура("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ТекущиеДанные.Документ)));
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыОчистить(Команда)
	Товары.Очистить();
	СерийныеНомера.Очистить();
	СерийныеНомераНоменклатурыДоступные.Очистить();
	ОтветственныйМенеджер = Неопределено;
	ОбновитьСуммаИтог();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПродажуИРасчет(Команда)
	
	Если ОтветственныйМенеджер.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нужно указать ответственного менеджера!'"), , "ОтветственныйМенеджер");
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет товаров для оформления продажи!'"));
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ПолучитьДокументПродажиСервер();
	Если НЕ ДокументСсылка.Пустая() Тогда
		
		ТоварыОчистить(Неопределено);
		
		ИмяТаблицы = ПолучитьИмяТаблицыТекущейСтраницы();				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяТаблицы", ИмяТаблицы);
		ПараметрыФормы.Вставить("ДокументСсылка", ДокументСсылка);
		ПараметрыФормы.Вставить("Касса", Касса);
		ПараметрыФормы.Вставить("ИспользуетсяБонуснаяСистема", ИспользуетсяБонуснаяСистема);
		ПараметрыФормы.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПриемаДенег", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПечатьТоварногоЧека(ДокументСсылка)
		
	Если ПустаяСтрока(ПринтерТоварногоЧека) И НеобходимВыборПринтераПриПечати = Ложь Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите чековый принтер для печати чека (вкладка 'Настройки').");		
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;	
	ПараметрКоманды.Добавить(ДокументСсылка);
	
	Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(ПараметрКоманды, ЭтаФорма) Тогда
			
		ТабличныеДокументы = СформироватьКолекциюПечатныхФорм(ПараметрКоманды, "ТоварныйЧек_ЧП", "Обработка 'Внешние печатные формы'");
		
		Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
			ТабличныйДокумент.ИмяПринтера = ПринтерТоварногоЧека;
			Для Инд = 1 По ПринтерТоварногоЧекаКВО Цикл
				ТабличныйДокумент.Напечатать(?(НеобходимВыборПринтераПриПечати, РежимИспользованияДиалогаПечати.Использовать, РежимИспользованияДиалогаПечати.НеИспользовать));
			КонецЦикла;	
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоСоглашения(ДокументСсылка)
	
	Если ПустаяСтрока(ПринтерГарантийногоСоглашенияИПКО) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите принтер для печати гарантийного соглашения (вкладка 'Настройки').");
		Возврат;	
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;	
	ПараметрКоманды.Добавить(ДокументСсылка);	
	
	ТабличныеДокументы = СформироватьКолекциюПечатныхФорм(ПараметрКоманды, "ГарантийноеСоглашение", "Обработка 'Внешние печатные формы'");
			
	Для Каждого ТабличныйДокумент ИЗ ТабличныеДокументы Цикл
		ТабличныйДокумент.ИмяПринтера = ПринтерГарантийногоСоглашенияИПКО;
		ТабличныйДокумент.Напечатать();		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьКолекциюПечатныхФорм(ПараметрКоманды, ИмяПечФормы, ИмяВнешнегоИсточника)	
	
	Перем КоллекцияПечатныхФорм, ПараметрыВывода;
	ОбъектыПечати = Новый СписокЗначений;
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", ИмяПечФормы, Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект(ИмяВнешнегоИсточника), 
															ПараметрыИсточника, 
															КоллекцияПечатныхФорм, 
															ОбъектыПечати, 
															ПараметрыВывода);	
	Возврат КоллекцияПечатныхФорм.ВыгрузитьКолонку("ТабличныйДокумент");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеализациюПоЗаказу(ДокументСсылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКлиентами.Регистратор КАК ДокументСсылка
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ЗаказКлиента 			   = &ЗаказКлиента
		|И 	ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.Регистратор) = ТИП(Документ.РеализацияТоваровУслуг)";	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументСсылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументСсылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимВыборПринтераПриПечати(Организация)
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("	
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, ЛОЖЬ) КАК ВыбиратьПринтер
 		|ИЗ
 		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения		
		|ГДЕ
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Организации) = &Организация
		|И  ДополнительныеСведения.Свойство = &Свойство");	
	Запрос.УстановитьПараметр("Организация", Организация);	                                                                                     
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("bee65cb8-601f-11e4-80e2-001e676b0175")));	
	Выборка = Запрос.Выполнить().Выбрать();	
	Возврат ?(Выборка.Следующий(), Выборка.ВыбиратьПринтер, Ложь);

КонецФункции // НеобходимВыборПринтераПриПечати()




&НаКлиенте
Процедура ОчиститьИнформациюПоПартнеру()
	НадписьДолгПартнера = "0,00 " + КассаВалюта;
	НадписьНашДолг		= "0,00 " + КассаВалюта;
	НадписьПоДокументу 	= "0,00 " + КассаВалюта;
	НадписьСальдо 		= "0,00 " + КассаВалюта;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыделенияСтроки()
	
	ИмяТаблицы = ПолучитьИмяТаблицыТекущейСтраницы();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ОбработатьВыделенияСтрокиНаСервере(ТекущиеДанные.Документ, ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент, Касса); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыделенияСтрокиНаСервере(ДокументСсылка, ПартнерСсылка, КонтрагентСсылка, Касса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьДолгПоПартнеру(ПартнерСсылка);
	ПолучитьДолгПоДокументу(ДокументСсылка);
	
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьФормуОплаты()
	
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Касса не выбрана!'"), , "КассаОплаты"); 
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ПолучитьИмяТаблицыТекущейСтраницы();	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.Документ = Неопределено Тогда
			Предупреждение("Пока не работает, для сведения взаиморасчетов пишите на 777@ktc-ua.com");
			Возврат;
		КонецЕсли;
		
		Если НЕ ПолучитьДолгПартнераПоДокументу(ТекущиеДанные.Документ) И ТипЗнч(ТекущиеДанные.Документ) <> ТИП("ДокументСсылка.ЗаказКлиента") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Долг по документу полностью погашен. Для открытия документа воспользуйтесь контекстным меню списка документов!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИмяТаблицы", ИмяТаблицы);
		ПараметрыФормы.Вставить("ДокументСсылка", ТекущиеДанные.Документ);
		ПараметрыФормы.Вставить("Касса", Касса);
		ПараметрыФормы.Вставить("ИспользуетсяБонуснаяСистема", ИспользуетсяБонуснаяСистема);
		ПараметрыФормы.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			
		ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПриемаДенег", ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ОбновитьСтраницу()
	
	//Обновляем страницу на сервере
	ОбновитьСтраницуНаСервере();
		
КонецПроцедуры 

&НаСервере
Процедура ОбновитьСтраницуНаСервере()
	
	Перем ПараметрыОтбора;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяТаблицы = ПолучитьИмяТаблицыТекущейСтраницы();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбъект = ЭтаФорма[ИмяТаблицы];
	ТаблицаНаФорме = Элементы[ИмяТаблицы];
	Если ТаблицаНаФорме.ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = ТаблицаОбъект.НайтиПоИдентификатору(ТаблицаНаФорме.ТекущаяСтрока);	
		Если СтрокаТаблицы <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура("Документ", СтрокаТаблицы.Документ);	
		КонецЕсли;
	КонецЕсли;
	
	
	НастройкиКассы = РеквизитФормыВЗначение("Объект").ПолучитьНастройкиКассы(Касса);
	Если Не ЗначениеЗаполнено(Касса) Тогда
		Организация 			= Справочники.Организации.ПустаяСсылка();
		ОрганизацияДляОтборов   = Справочники.Организации.ПустаяСсылка();
		КассаОтбор				= Справочники.Кассы.ПустаяСсылка();
	ИначеЕсли НастройкиКассы = Неопределено Тогда
		Организация 			= Касса.Владелец;
		ОрганизацияДляОтборов   = Организация;
		КассаОтбор				= Касса;
	Иначе
		Организация				= НастройкиКассы.ОрганизацияМагазина;
		ОрганизацияДляОтборов	= НастройкиКассы.ОрганизацияСервисногоЦентра;
		КассаОтбор				= НастройкиКассы.КассаСервисногоЦентраВМагазине;
	КонецЕсли;
	
	Если БанковскийСчетОрганизации.Владелец <> Организация Тогда
		БанковскийСчетОрганизации = Неопределено;	
	КонецЕсли;
	
	Если ЭквайринговыйТерминал.Касса <> КассаОтбор Тогда
		ЭквайринговыйТерминал = Неопределено;
	КонецЕсли;
	
	НеобходимВыборПринтераПриПечати = НеобходимВыборПринтераПриПечати(Организация);
	ОбновитьНастройкиДоступностиЭлементовРМК();
	
	Если ИмяТаблицы = "СписокДокументовОплаты" Тогда
		ОбновитьТЗДокументовОплаты(НастройкиКассы);
	ИначеЕсли ИмяТаблицы = "СписокДокументовПервыйВзнос" Тогда
		ОбновитьТЗДокументовПервыйВзнос();
	ИначеЕсли ИмяТаблицы = "СписокДокументовВыдачиДенег" Тогда
		ОбновитьТЗДокументовВыдачиДенег();
	КонецЕсли;
	
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Массив = ТаблицаОбъект.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда 
			ТаблицаНаФорме.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); 
		КонецЕсли;
	КонецЕсли;
	
	
	КассаВалюта = Касса.ВалютаДенежныхСредств;
	Если ИнформацияПоКассе Тогда 
		ЗаполнитьПараметрыКассы(); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиДоступностиЭлементовРМК()

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Лояльность_Настройки.РозничныйКлиент
		|ИЗ
		|	РегистрСведений.Лояльность_Настройки КАК Лояльность_Настройки
		|ГДЕ
		|	Лояльность_Настройки.Организация = &Организация
		|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	ИспользуетсяБонуснаяСистема = ?(Выборка.Следующий(), Истина, Ложь);
	
	СвойствоПартнерДляПродажиПоУмолчанию		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("f740dde4-5f7a-11e4-80e2-001e676b0175")); 
	СвойствоСоглашениеДляПродажиПоУмолчанию		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("31022512-5f7b-11e4-80e2-001e676b0175")); 
	СвойствоИспользуетсяДляПродажиТоваров  		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("8bf1b201-5f7b-11e4-80e2-001e676b0175")); 
	СвойствоИспользуетсяОплатаПоДокументам      = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("5df31f43-5f7b-11e4-80e2-001e676b0175")); 
	СвойствоИспользуетсяОплатаПоЗаказам         = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("4a06b9a2-5f7b-11e4-80e2-001e676b0175")); 
	СвойствоИспользуетсяВыдачаДенежныхСредств   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("772a07c9-5f7b-11e4-80e2-001e676b0175")); 
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Организации) = &Организация	
		|И	ДополнительныеСведения.Свойство = &Свойство
		|";
		
	Запрос.УстановитьПараметр("Свойство", СвойствоИспользуетсяДляПродажиТоваров);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИспользуетсяДляПродажиТоваров = Выборка.Значение;
	Иначе
		ИспользуетсяДляПродажиТоваров = Ложь;	
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Свойство", СвойствоИспользуетсяОплатаПоДокументам);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИспользуетсяОплатаПоДокументам = Выборка.Значение;
	Иначе
		ИспользуетсяОплатаПоДокументам = Ложь;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство", СвойствоИспользуетсяОплатаПоЗаказам);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИспользуетсяОплатаПоЗаказам = Выборка.Значение;	
	Иначе
		ИспользуетсяОплатаПоЗаказам = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство", СвойствоИспользуетсяВыдачаДенежныхСредств);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИспользуетсяВыдачаДенежныхСредств = Выборка.Значение;
	Иначе
		ИспользуетсяВыдачаДенежныхСредств = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство", СвойствоПартнерДляПродажиПоУмолчанию);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПартнерПоУмолчанию = Выборка.Значение;
	Иначе
		ПартнерПоУмолчанию = Неопределено;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство", СвойствоСоглашениеДляПродажиПоУмолчанию);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СоглашениеПоУмолчанию = Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор(Выборка.Значение));
		СоглашениеСклад = СоглашениеПоУмолчанию.Склад;
		СоглашениеВалюта = СоглашениеПоУмолчанию.Валюта;
		ПродажаОблагаетсяНДС = СоглашениеПоУмолчанию.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Элементы.ТоварыСтавкаНДС.Видимость = ПродажаОблагаетсяНДС;
		Элементы.ТоварыСуммаНДС.Видимость  = ПродажаОблагаетсяНДС;
	Иначе
		СоглашениеПоУмолчанию = Неопределено;	
	КонецЕсли;
	
	Элементы.ГруппаОплата.Видимость = ИспользуетсяОплатаПоДокументам;
	Элементы.ГруппаПервыйВзнос.Видимость = ИспользуетсяОплатаПоЗаказам;
	Элементы.ГруппаВыдача.Видимость = ИспользуетсяВыдачаДенежныхСредств;
	Элементы.ГруппаПродажаТоваров.Видимость = ИспользуетсяДляПродажиТоваров;
	
КонецПроцедуры // ОбновитьНастройкиДоступностиЭлементовРМК()


&НаКлиенте 
Процедура ОбновитьСуммаИтог()
	СуммаИтого = Формат(Товары.Итог("СуммаВсего"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " " + СоглашениеВалюта; //+  " [Бонус:" +
 			 // Формат(ТЗ_Корзина.Итог("КолонкаБонусы"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " " + СоглашениеВалюта + "]";	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСодержанииеТоварыКлиент()
	
	ОбновитьСодержанииеКорзиныСервер();
	ОбновитьСуммаИтог();
	
КонецПроцедуры // ОбновитьСодержанииеТоварыКлиент()





Функция ПолучитьИмяТаблицыТекущейСтраницы()

	ИмяСтраницы = "";
	
	ГруппаСтраница = Элементы.ГруппаСтраницы;	
	Если ГруппаСтраница.ТекущаяСтраница	= Элементы.ГруппаОплата Тогда
		ИмяСтраницы = "СписокДокументовОплаты";
	ИначеЕсли ГруппаСтраница.ТекущаяСтраница = Элементы.ГруппаПервыйВзнос Тогда
		ИмяСтраницы = "СписокДокументовПервыйВзнос";
	ИначеЕсли ГруппаСтраница.ТекущаяСтраница = Элементы.ГруппаВыдача Тогда
		ИмяСтраницы = "СписокДокументовВыдачиДенег";
	КонецЕсли;
	
	Возврат ИмяСтраницы;

КонецФункции // ПолучитьИмяТаблицыТекущейСтраницы()





&НаСервере
Процедура СтрокаСканерОбработатьНаСервере(Текст)
	
	ТекстКод = Текст;
	Если СтрДлина(ТекстКод) < 11 Тогда
		ТекстКод = Прав("00000000000" + ТекстКод, 11);
	КонецЕсли;;
	
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТекстКод);
	Если НЕ Номенклатура.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, ЕдиницаИзмерения", Номенклатура, Номенклатура.ЕдиницаИзмерения));
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", Текст);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Номенклатура = Выборка.Номенклатура; 
		Если НЕ Номенклатура.Пустая() Тогда
			ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, ЕдиницаИзмерения", Номенклатура, Номенклатура.ЕдиницаИзмерения));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Текст);
	Если НЕ Номенклатура.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, ЕдиницаИзмерения", Номенклатура, Номенклатура.ЕдиницаИзмерения));
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = Справочники.СерийныеНомераНоменклатуры.НайтиПоКоду(Текст);
	Если НЕ СерийныйНомер.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, ЕдиницаИзмерения, СерийныйНомер", СерийныйНомер.Владелец, , СерийныйНомер));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ТоварыПриАктивизацииСтрокиСервер(Номенклатура, КлючСвязиСерийныхНомеров);

	СерийныеНомераНоменклатурыДоступные.Очистить();
	Если Номенклатура.ИспользоватьСерийныеНомера Тогда
		ПараметрыОтбора = Новый Структура("КлючСвязиСерийныхНомеров", КлючСвязиСерийныхНомеров);
		ТаблицаЗначений = git_СерийныеНомераСервер.ПолучитьТаблицуСерийныхНомеровСУчетомВыбранных(Номенклатура, СоглашениеСклад, СерийныеНомера.Выгрузить(ПараметрыОтбора, "СерийныйНомер"));
		СерийныеНомераНоменклатурыДоступные.Загрузить(ТаблицаЗначений);
	КонецЕсли;

КонецПроцедуры // ТоварыПриАктивизацииСтрокиСервер();
 

&НаСервере
Процедура ОбработатьИзменениеКорзины(ПараметрыВвода, Цена = 0)
		
	Если ПараметрыВвода.Номенклатура = Неопределено Тогда 
		ПараметрыВвода.Номенклатура = Справочники.Номенклатура.ПустаяСсылка(); 
	КонецЕсли;
	
	Если ПараметрыВвода.ЕдиницаИзмерения = Неопределено Тогда 
		ПараметрыВвода.ЕдиницаИзмерения = ПараметрыВвода.Номенклатура.ЕдиницаИзмерения; 		
	КонецЕсли;
	
	Номенклатура = ПараметрыВвода.Номенклатура;
	
	ПараметрыПоиска = Новый Структура("Номенклатура, ЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ПараметрыВвода);	
	РезультатПоиска = Товары.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество() Тогда
		РезультатСтрока = РезультатПоиска[0];
		РезультатСтрока.КоличествоУпаковок = РезультатСтрока.КоличествоУпаковок + 1;
	Иначе
		РезультатСтрока = Товары.Добавить();
		РезультатСтрока.Код = Номенклатура.Код;
		РезультатСтрока.Номенклатура   	   = Номенклатура;
		РезультатСтрока.Склад			   = СоглашениеПоУмолчанию.Склад;
		РезультатСтрока.КоличествоУпаковок = 1;
		РезультатСтрока.ЕдиницаИзмерения   = ПараметрыВвода.ЕдиницаИзмерения;
		РезультатСтрока.ВидЦены			   = СоглашениеПоУмолчанию.ВидЦен;
		РезультатСтрока.Цена		       = Цена;
		РезультатСтрока.СтавкаНДС		   = ?(СоглашениеПоУмолчанию.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, Номенклатура.СтавкаНДС);
		РезультатСтрока.КлючСвязиСерийныхНомеров = git_СерийныеНомераСервер.СоздатьКлючСвязиНаСервере(Товары, СерийныеНомера);
	КонецЕсли;
	
	Если ПараметрыВвода.Свойство("СерийныйНомер") Тогда
		ПараметрыПоиска = Новый Структура("СерийныйНомер, КлючСвязиСерийныхНомеров", ПараметрыВвода.СерийныйНомер, РезультатСтрока.КлючСвязиСерийныхНомеров);
		РезультатПоиска = СерийныеНомера.НайтиСтроки(ПараметрыПоиска);
		Если РезультатПоиска.Количество() = 0 Тогда
			Если git_СерийныеНомераСервер.СерийныйНомерДоступенНаСкладе(Номенклатура, ПараметрыВвода.СерийныйНомер, РезультатСтрока.Склад) Тогда
				ЗаполнитьЗначенияСвойств(СерийныеНомера.Добавить(), ПараметрыПоиска);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбновитьСодержанииеКорзиныСервер(); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСодержанииеКорзиныСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаОбновленияКорзины();	
	Запрос.УстановитьПараметр("ТабКорзина", Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТабСерийныеНомера", СерийныеНомера.Выгрузить());
	Запрос.УстановитьПараметр("ВалютаСоглашения", СоглашениеВалюта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",	СоглашениеПоУмолчанию.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("НалогообложениеНДС",	СоглашениеПоУмолчанию.НалогообложениеНДС);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	
КонецПроцедуры // ОбновитьСодержанииеКорзиныСервер()



&НаСервере
Функция ПолучитьДокументПродажиСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДата();
	
	УсловияПродаж  = ПродажиСервер.ПолучитьУсловияПродаж(СоглашениеПоУмолчанию);
	УсловияПродаж.Вставить("Партнер", 				ПартнерПоУмолчанию);
	УсловияПродаж.Вставить("Контрагент",			ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерПоУмолчанию));
	УсловияПродаж.Вставить("ВалютаДокумента", 		УсловияПродаж.Валюта);
	УсловияПродаж.Вставить("ВалютаВзаиморасчетов", 	СоглашениеВалюта);
	УсловияПродаж.Вставить("ВалютаВзаиморасчетовДокумента", СоглашениеВалюта);
	УсловияПродаж.Вставить("ДатаПлатежа",  			ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение));
	УсловияПродаж.Вставить("Дата",					ТекущаяДата());
	УсловияПродаж.Вставить("ЖелаемаяДатаОтгрузки",	ТекущаяДата());
	УсловияПродаж.Вставить("ГлавныйБухгалтер", ПолучитьОтветственноеЛицоОрганизации(УсловияПродаж.Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер));
	УсловияПродаж.Вставить("Руководитель", ПолучитьОтветственноеЛицоОрганизации(УсловияПродаж.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияПродаж.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияПродаж.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияПродаж.Организация);
	СтруктураПараметров.Вставить("Соглашение", СоглашениеПоУмолчанию);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		СтруктураПараметров,
		?(УсловияПродаж.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			УсловияПродаж.ХозяйственнаяОперация
		),
		УсловияПродаж.Валюта
	);

	УсловияПродаж.Вставить("Договор", Договор);
	

	ЗаполнитьЗначенияСвойств(ДокументОбъект, УсловияПродаж);	
	
	ДокументОбъект.РеализацияПоЗаказам = Ложь;
	ДокументОбъект.ЗаказКлиента = Неопределено;
	
	ДокументОбъект.Касса = Касса;
	ДокументОбъект.БанковскийСчетОрганизации = БанковскийСчетОрганизации;
	
	ДокументОбъект.Менеджер = ОтветственныйМенеджер;
	ДокументОбъект.Подразделение = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	
	ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	ДокументОбъект.Согласован = Истина;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ДокументОбъект.Валюта, СоглашениеВалюта, ТекущаяДата());
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	ДокументОбъект.СуммаДокумента = СуммаДокумента;
	ДокументОбъект.СуммаВзаиморасчетов = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СуммаДокумента / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	
	
	ДокументОбъект.Товары.Загрузить(Товары.Выгрузить());
	ДокументОбъект.СерийныеНомера.Загрузить(СерийныеНомера.Выгрузить());
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ДокументОбъект.Товары, СтруктураДействий, Неопределено);
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ОбновитьСтраницуНаСервере();
		ПараметрыПоиска = Новый Структура("Документ", ДокументОбъект.Ссылка);
		РезультатПоиска = СписокДокументовОплаты.НайтиСтроки(ПараметрыПоиска);
		Если РезультатПоиска.Количество() Тогда
			Элементы.СписокДокументовОплаты.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();	
		КонецЕсли;
		
		РеквизитФормыВЗначение("Объект").ДобавитьСсылкуВИсториюРаботыПользователя(ДокументОбъект.Ссылка);
		
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // ПолучитьДокументПродажиСервер()

&НаСервереБезКонтекста
Функция ПолучитьСписокКасс()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Кассы.Ссылка КАК Касса
       	|ИЗ
       	|	Справочник.Кассы КАК Кассы
       	|
       	|УПОРЯДОЧИТЬ ПО
       	|	Кассы.Наименование
		|";			   
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов 	= Результат.Выгрузить();
	
	Возврат ТаблицаРезультатов.ВыгрузитьКолонку("Касса");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтветственноеЛицоОрганизации(Организация, ОтветственноеЛицо)

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственноеЛицо = &ОтветственноеЛицо
		|И	(ДатаОкончания > &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
		|И	Владелец = &Организация";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
    Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции // ПолучитьОтветственноеЛицоОрганизации()
 
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаОбновленияКорзины() 
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//0. Кешируем содержание корзины
		|ВЫБРАТЬ
		|	ТабКорзина.Код,
		|	ТабКорзина.КлючСвязиСерийныхНомеров,
		|
		|   ТабКорзина.Номенклатура,
		|
		|	ТабКорзина.Склад,
		|   ТабКорзина.КоличествоУпаковок,
		|	ТабКорзина.ЕдиницаИзмерения,
		|	ТабКорзина.Упаковка,
		|
		|   ТабКорзина.ВидЦены,
		|   ТабКорзина.Цена,
		|	ТабКорзина.ПроцентРучнойСкидки,
		|	ТабКорзина.СуммаРучнойСкидки,
		|	ТабКорзина.ПроцентАвтоматическойСкидки,
		|	ТабКорзина.СуммаАвтоматическойСкидки,	
		|
		|	ТабКорзина.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА 0.1
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА 0.18
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|			ТОГДА 0.2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтавкаНДСЧислом
		|
		|ПОМЕСТИТЬ КешКорзина
		|ИЗ 
		|	&ТабКорзина КАК ТабКорзина
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидЦены
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//1. Кешируем серийные номера
		|ВЫБРАТЬ
		|	ТабСерийныеНомера.СерийныйНомер,
		|   ТабСерийныеНомера.КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ КешСерийныеНомера
		|ИЗ
		|	&ТабСерийныеНомера КАК ТабСерийныеНомера	
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//2. Количество серийных номеров по ключу связи
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(КешСерийныеНомера.СерийныйНомер) КАК Количество,
		|   КешСерийныеНомера.КлючСвязиСерийныхНомеров  КАК КлючСвязиСерийныхНомеров
		|ПОМЕСТИТЬ КешКоличествоСерийныхНомеров
		|ИЗ
		|	КешСерийныеНомера КАК КешСерийныеНомера
		|СГРУППИРОВАТЬ ПО
		|	КешСерийныеНомера.КлючСвязиСерийныхНомеров	
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//3. Расчитываем цены и прочие значения
		|ВЫБРАТЬ
		|	КешКорзина.Код,
		|	КешКорзина.КлючСвязиСерийныхНомеров,
		|	ВЫБОР
		|		КОГДА КешКорзина.Номенклатура.ИспользоватьСерийныеНомера
		|		ТОГДА 	ВЫБОР
		|					КОГДА КешКорзина.КоличествоУпаковок <> IsNull(КешКоличествоСерийныхНомеров.Количество, 0)
		|					ТОГДА 1
		|					ИНАЧЕ 2
		|				КОНЕЦ 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СерийныеНомераСтатус,
		|
		|   КешКорзина.Номенклатура,
		|
		|	КешКорзина.Склад,
		|   КешКорзина.КоличествоУпаковок,
		|	КешКорзина.ЕдиницаИзмерения,
		|	КешКорзина.Упаковка,
		|
		|   КешКорзина.ВидЦены,
		|   ВЫБОР 
		|		КОГДА КешКорзина.ВидЦены = Значение(Справочник.ВидыЦен.ПустаяСсылка)
		|		ТОГДА КешКорзина.Цена
		|		ИНАЧЕ ЦеныКорзины.Цена * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) * (КурсЦены.Курс /  КурсЦены.Кратность) / (КурсСоглашения.Курс / КурсСоглашения.Кратность)
		|	КОНЕЦ КАК Цена,
		|
		|	КешКорзина.ПроцентРучнойСкидки,
		|	КешКорзина.СуммаРучнойСкидки,
		|
		|	КешКорзина.ПроцентАвтоматическойСкидки,
		|	КешКорзина.СуммаАвтоматическойСкидки,
		|
		|	КешКорзина.СтавкаНДС,
		|   КешКорзина.СтавкаНДСЧислом,
		|
		|   КурсСоглашения.Курс / КурсСоглашения.Кратность  КАК КурсПоСоглашению,
		|	ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1)	КАК Коэффициент,
		|   ВЫБОР
		|		КОГДА КешКорзина.КоличествоУпаковок * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) <= (ОстатокНаСкладе.ВНаличииОстаток - ОстатокНаСкладе.ВРезервеОстаток)
		|       ТОГДА Ложь
		|      	КОГДА КешКорзина.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|       ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК Доступно
		|
		|ПОМЕСТИТЬ ПредварительныйРезультат
		|ИЗ
		|	КешКорзина КАК КешКорзина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, ВидЦены)  В (ВЫБРАТЬ Номенклатура, ВидЦены ИЗ КешКорзина)) КАК ЦеныКорзины
		|ПО КешКорзина.Номенклатура 	= ЦеныКорзины.Номенклатура
		|И	КешКорзина.ВидЦены			= ЦеныКорзины.ВидЦены
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК КурсСоглашения
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦены
		|ПО ЦеныКорзины.Валюта = КурсЦены.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешКоличествоСерийныхНомеров КАК КешКоличествоСерийныхНомеров
		|ПО КешКоличествоСерийныхНомеров.КлючСвязиСерийныхНомеров = КешКорзина.КлючСвязиСерийныхНомеров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Склад) В (ВЫБРАТЬ Номенклатура, Склад ИЗ КешКорзина)) КАК ОстатокНаСкладе
		|ПО КешКорзина.Номенклатура 	= ОстатокНаСкладе.Номенклатура
		|И	КешКорзина.Склад			= ОстатокНаСкладе.Склад 
		|
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешКорзина;
		////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешСерийныеНомера;
		////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КешКоличествоСерийныхНомеров;
		////////////////////////////////////////////////////////////////////////////////////////////
		//7. Оборот если продажа осуществится 
		//|ВЫБРАТЬ
		//|	Сумма(Цена * КоличествоУпаковок) КАК Оборот
		//|
		//|ПОМЕСТИТЬ КешБудущийОборот
		//|ИЗ
		//|	PreResult	
		//|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//8.
		//|ВЫБРАТЬ
		//|	КешПредвРезультат.Номенклатура,	
		//|	КешПредвРезультат.Характеристика,
		//|	ВЫБОР
		//|  		КОГДА КешПредвРезультат.ВидЦены <> УчПолБонусы.ВидЦеныБонус
		//|       ТОГДА 0
		//|		КОГДА КешПредвРезультат.ПроцентРучнойСкидки <> 0 ИЛИ КешПредвРезультат.ПроцентАвтоматическойСкидки <> 0
		//|       ТОГДА 0
		//|		КОГДА Ставки.Значение = 0
		//|       ТОГДА 0
		//|   	КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
		//|		 И НЕ УчПолБонусы.ЕстьСкидкиДляАкций
		//|		ТОГДА 0
		//|		ИНАЧЕ Ставки.Значение  
		//|	КОНЕЦ КАК БонусПроцент
		//|
		//|ПОМЕСТИТЬ КешПроценты
		//|ИЗ
		//|	PreResult КАК КешПредвРезультат
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешКорзина) И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних)) КАК ВходнаяЦена
		//|ПО ВходнаяЦена.Номенклатура 	= КешПредвРезультат.Номенклатура
		//|И  ВходнаяЦена.Характеристика 	= КешПредвРезультат.Характеристика
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦена
		//|ПО КурсЦена.Валюта = ВходнаяЦена.Валюта
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ КешБудущийОборот КАК КешБудущийОборот
		//|ПО Истина
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК Ставки
		//|ПО 	Ставки.НижняяГраница  / КешПредвРезультат.КурсПоСоглашению <= 	&Оборот + КешБудущийОборот.Оборот
		//|И	(	Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению > 	&Оборот + КешБудущийОборот.Оборот 
		//|	ИЛИ Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению = 	0)
		//|
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних КАК УчПолБонусы
		//|ПО Истина
		//|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//9. Результат пересчета
		|ВЫБРАТЬ
		|	ПР.Код,
		|	ПР.КлючСвязиСерийныхНомеров,
		|	ПР.СерийныеНомераСтатус,
		|
		|	ПР.Номенклатура, 
		|
		|   ПР.Склад,
		|	ПР.Коэффициент * ПР.КоличествоУпаковок КАК Количество,
		|   ПР.КоличествоУпаковок,
		|   ПР.ЕдиницаИзмерения,
		|   ПР.Упаковка,
		|
		|   ПР.ВидЦены,
		|	ПР.Цена,
		|   ПР.КоличествоУпаковок * ПР.Цена - ПР.СуммаРучнойСкидки - ПР.СуммаАвтоматическойСкидки КАК Сумма,
		|   ПР.ПроцентРучнойСкидки,
		|	ПР.СуммаРучнойСкидки,
		|   ПР.ПроцентАвтоматическойСкидки,
		|	ПР.СуммаАвтоматическойСкидки,
		|   ПР.СтавкаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|					КОГДА &ЦенаВключаетНДС
		|					ТОГДА (ПР.КоличествоУпаковок * ПР.Цена - ПР.СуммаРучнойСкидки - ПР.СуммаАвтоматическойСкидки) / (1 + ПР.СтавкаНДСЧислом ) * ПР.СтавкаНДСЧислом
		|					ИНАЧЕ (ПР.КоличествоУпаковок * ПР.Цена - ПР.СуммаРучнойСкидки - ПР.СуммаАвтоматическойСкидки) * ПР.СтавкаНДСЧислом
		|			  КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|				    КОГДА &ЦенаВключаетНДС
		|				  	ТОГДА ПР.КоличествоУпаковок * ПР.Цена - ПР.СуммаРучнойСкидки - ПР.СуммаАвтоматическойСкидки
		|					ИНАЧЕ(ПР.КоличествоУпаковок * ПР.Цена - ПР.СуммаРучнойСкидки - ПР.СуммаАвтоматическойСкидки) * (1 + ПР.СтавкаНДСЧислом)
		|			  КОНЕЦ 
		|		ИНАЧЕ КоличествоУпаковок * Цена  
		|	КОНЕЦ КАК СуммаВсего,
		|
		//|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
		//|	КешПроценты.БонусПроцент														КАК ОборотПроцент,
		|                                         						                    
		|	ПР.Доступно КАК Доступно
		|
		|ИЗ
		| 	ПредварительныйРезультат КАК ПР
		|
		//|ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
		//|ПО КешПроценты.Номенклатура   = PreResult.Номенклатура   
		//|И  КешПроценты.Характеристика = PreResult.Характеристика 
		|
		|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокУпаковокНоменклатуры(Номенклатура)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка
		|
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры
		|ГДЕ
		|	Владелец = ВЫБОР КОГДА &НаборУпаковок =  ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|                    ТОГДА &Номенклатура
		|                    КОГДА &НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|                    ТОГДА &НаборУпаковок
		|					 ИНАЧЕ Неопределено
		|			   КОНЕЦ 
		|И  ПометкаУдаления = Ложь
		|");
	Запрос.УстановитьПараметр("Номенклатура",  Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	Упаковки = Запрос.Выполнить().Выгрузить();
	МассивУпаковок = Упаковки.ВыгрузитьКолонку("Ссылка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;

КонецФункции
	
#КонецОбласти 




//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
//               Ч Е Т О  ВЫШЕ МОЕГО ПОНИМАНИЯ, НАХЕРА?..                           //
//                                                                                  //

&НаКлиенте
Процедура ПринятоНаличнымиНажатие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаУниверсальногоОтчета", Новый Структура("Касса, ТипОтчета", Касса, "ОтчетПоПКО"));
КонецПроцедуры

&НаКлиенте                                                                                       
Процедура ВыданоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаУниверсальногоОтчета", Новый Структура("Касса, ТипОтчета", Касса, "ОтчетПоРКО"));	
КонецПроцедуры

&НаКлиенте
Процедура ПринятоКартойНажатие(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
    ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаУниверсальногоОтчета", Новый Структура("Касса, ТипОтчета", Касса, "ОтчетПоЭквайрингу"));	
КонецПроцедуры

&НаКлиенте
Функция СформироватьОтчет(ИмяОтчета, НаименованиеОтчета, ПараметрыОтчета)
	
	Попытка
		ПодключитьВнешнююОбработку(ИмяОтчета, Ложь);	
		ФормаОтчета = ПолучитьФорму("ВнешнийОтчет." + НаименованиеОтчета + ".Форма", 
		ПараметрыОтчета,
		ЭтаФорма,
		УникальныйИдентификатор);
		
		ФормаОтчета.Открыть();
		ФормаОтчета.Активизировать();
	Исключение
		Сообщить("Отчет " + ИмяОтчета + " не найден");
	КонецПопытки;
	
КонецФункции
  
&НаСервере
Функция ПодключитьВнешнююОбработку(НаименованиеОтчета, БезопасныйРежим)
	
	ВнешняяОбработка = ПолучитьСсылкуНаОбработкуОтчет(НаименованиеОтчета);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанныеОбработки 	= ВнешняяОбработка.ПолучитьОбъект().ХранилищеОбработки.Получить();
	АдресВоВременномХранилище 	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВнешниеОтчеты.Подключить(АдресВоВременномХранилище,, БезопасныйРежим);
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаОбработкуОтчет(Наименование)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОбработки
	|ГДЕ
	|	ДополнительныеОбработки.Наименование = &Наименование
	|И	ДополнительныеОбработки.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	
КонецФункции

//                                                                                  //
//               Ч Е Т О  ВЫШЕ МОЕГО ПОНИМАНИЯ, НАХЕРА?..                           //
//                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СейчасВКассеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Касса", Касса);
	ОткрытьФормуМодально("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаПередача", ПараметрыФормы, ЭтаФорма);
	
	ЗаполнитьПараметрыКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДолгПартнераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы[ПолучитьИмяТаблицыТекущейСтраницы()].ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ФормаОтчета = ПолучитьФорму("Отчет.СостояниеРасчетовСКлиентами.Форма.ФормаОтчета");
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].ПравоеЗначение = ТекущиеДанные.Организация;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Использование = Истина;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].ПравоеЗначение = ТекущиеДанные.Партнер;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Использование = Истина;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].ПравоеЗначение = ТекущиеДанные.Контрагент;
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Использование = Истина;
		ФормаОтчета.СкомпоноватьРезультат();
		ФормаОтчета.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыКассы()
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "
	//0.
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.Касса,
	|	ДенежныеСредства.Касса.ВалютаДенежныхСредств КАК Валюта,
	|		
	|	ДенежныеСредства.СуммаПриход 			КАК ПринятоНаличными,
	|	ДенежныеСредства.СуммаРасход 			КАК Выдано,
	|	ДенежныеСредства.СуммаКонечныйОстаток 	КАК СейчасВКассе
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.ОстаткиИОбороты(&Дата, , Авто, , Касса = &Касса) КАК ДенежныеСредства
	|;
	//1.
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ        
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.Валюта КАК Валюта,
	|	ДенежныеСредства.СуммаПриход * ((ЕСТЬNULL(КурсДенежныхСредств.Курс,0)/ЕСТЬNULL(КурсДенежныхСредств.Кратность,1))/(ЕСТЬNULL(КурсКассы.Курс, 1)/ЕСТЬNULL(КурсКассы.Кратность,1))) КАК ПринятоКартой
	|ИЗ
	|	РегистрНакопления.РасчетыПоЭквайрингу.ОстаткиИОбороты(&Дата, , Авто, , Организация = &Организация) КАК ДенежныеСредства
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсДенежныхСредств
	|ПО КурсДенежныхСредств.Валюта = ДенежныеСредства.Валюта
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаКассы) КАК КурсКассы
	|ПО (ИСТИНА);";	
	Запрос.УстановитьПараметр("Дата", 			НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Касса", 			Касса);
	Запрос.УстановитьПараметр("Организация", 	Касса.Владелец);
	Запрос.УстановитьПараметр("ВалютаКассы", 	КассаВалюта);
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	ВыборкаПоНаличным 	= РезультатПакета[0].Выбрать();
	ВыборкаПоЭквайрингу = РезультатПакета[1].Выбрать();
	
	Если ВыборкаПоНаличным.Следующий() Тогда	
		НадписьСейчасВКассе 	= Формат(ВыборкаПоНаличным.СейчасВКассе,		"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьПринятоНаличными = Формат(ВыборкаПоНаличным.ПринятоНаличными, 	"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьВыдано			= Формат(ВыборкаПоНаличным.Выдано, 				"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	Иначе
		НадписьСейчасВКассе 	= Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьПринятоНаличными = Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
		НадписьВыдано			= Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	КонецЕсли;
	
	Если ВыборкаПоЭквайрингу.Следующий() Тогда
		НадписьПринятоКартой = Формат(ВыборкаПоЭквайрингу.ПринятоКартой, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	Иначе
		НадписьПринятоКартой = Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	КонецЕсли;
			 	
КонецПроцедуры
	



&НаКлиенте
Процедура ОбработчикСкрытияИнфыПоКассе()
	ИнформацияПоКассе 							= Ложь;
	Элементы.ГруппаИнформацияПоКассе.Видимость 	= ИнформацияПоКассе;	
КонецПроцедуры


&НаСервере
Функция СформироватьДокументПечатиНаСервере(ДокументСсылка)
	
	Перем КоллекцияПечатныхФорм, ПараметрыВывода;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ДокументСсылка);
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, БезопасныйРежим, ОбъектыНазначения", "ПриходныйКассовыйОрдер", Ложь, Новый Структура("МассивДокументов", ПараметрКоманды));
	
	ОбъектыПечати 	= Новый СписокЗначений;
		
	УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(git_ПереопределениеОбработчиковСервер.ПолучитьСсылкуНаВнешнийОбъект("Обработка 'Внешние печатные формы'"), ПараметрыИсточника, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;				
	
КонецФункции



/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                     //
//      		                      ПРОЦЕДУРЫ ПЕРЕРИСОВКИ ИНТЕРФЕЙСА                                 //
//                                                                                                     //

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПервыйВзносОбороты(ВсеДокументы)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		//|	ВЫБОР
		//|		КОГДА КОплатеПриход = 0
		//|		ТОГДА 0
		//|		ИНАЧЕ ВЫРАЗИТЬ(КОплатеРасход / КОплатеПриход * 100 КАК ЧИСЛО(15,0))	
		//|	КОНЕЦ КАК ПроцентОплаты,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|			И ЗаказКлиента.СуммаДокумента > 0
        |   	ТОГДА
		|			ВЫРАЗИТЬ(ЕСТЬNULL(КОплатеРасход, 0) / ЗаказКлиента.СуммаДокумента * 100 КАК ЧИСЛО(15, 0))	
		|   	ИНАЧЕ 0
		|   КОНЕЦ КАК ПроцентОплаты, 
		//|	ВЫБОР
		//|		КОГДА КОтгрузкеРасход = 0
		//|		ТОГДА 0
		//|		ИНАЧЕ ВЫРАЗИТЬ(КОтгрузкеПриход / КОтгрузкеРасход * 100 КАК ЧИСЛО(15,0))	
		//|	КОНЕЦ КАК ПроцентОтгрузки,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|		И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
		|		И ЗаказКлиента.СуммаДокумента > 0
        |   ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(КОтгрузкеПриход, 0) / ЗаказКлиента.СуммаДокумента * 100 КАК ЧИСЛО(15, 0)) 
		|   ИНАЧЕ 0
		|   КОНЕЦ КАК ПроцентОтгрузки,
		|	ЗаказКлиента.Номер 			КАК Номер,
		|	ЗаказКлиента.Дата 			КАК Дата,
		|	ЗаказКлиента.Статус 		КАК Статус,
		|	ЗаказКлиента.СуммаДокумента КАК Сумма,
		|	Валюта 						КАК Валюта,
		|	ЗаказКлиента 				КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента) КАК ДокументПредставление,
		|	ЗаказКлиента.Менеджер 		КАК Менеджер,
		|	АналитикаУчетаПоПартнерам.Партнер 					КАК Партнер,
		|	ПРЕДСТАВЛЕНИЕ(АналитикаУчетаПоПартнерам.Партнер) 	КАК ПартнерПредставление,
		|	АналитикаУчетаПоПартнерам.Контрагент 				КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 				КАК Организация,
		|	ЗаказКлиента.Склад 									КАК Склад,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Склад)                   КАК СкладПредставление
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаНачало, &ДатаОкончания, ,АналитикаУчетаПоПартнерам В 
		|														(ВЫБРАТЬ
		|															АналитикаПоПартнерам.КлючАналитики
		|														 ИЗ
		|															РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|														 ГДЕ
		|															АналитикаПоПартнерам.Организация = &Организация)
		//|														 И  ЗаказКлиента.Дата >= &ДатаНачало
		|														 И  ЗаказКлиента Ссылка Документ.ЗаказКлиента " 
		+ ?(НЕ ВсеДокументы, "
		|														 И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|														 И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|				 ", " ") + "
		|													)
		|
		|УПОРЯДОЧИТЬ ПО ЗаказКлиента.Дата ";
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ОбновитьТЗДокументовПервыйВзнос()
		
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПервыйВзносОбороты(ВсеДокументы);
	Запрос.УстановитьПараметр("ДатаНачало", 	ПериодДокументовПервогоВзноса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ПериодДокументовПервогоВзноса.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", 	?(ЗначениеЗаполнено(Касса), ОрганизацияДляОтборов, Справочники.Организации.ПустаяСсылка()));
	
	СписокДокументовПервыйВзнос.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаОплатыОбороты(НастройкиКассы)
	
	ТекстЗапроса = "
		|%1
		|ВЫБРАТЬ //РАЗРЕШЕННЫЕ  
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Номер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Номер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Дата
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Дата
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).СуммаДокумента
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).СуммаДокумента
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Менеджер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Менеджер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Менеджер,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Склад
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Склад
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Склад)
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Склад)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК СкладПредставление,
		|
		|	Валюта 												КАК Валюта,
		|	ЗаказКлиента										КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента) 						КАК ДокументПредставление,
		|	АналитикаУчетаПоПартнерам.Партнер 					КАК Партнер,
		|	ПРЕДСТАВЛЕНИЕ(АналитикаУчетаПоПартнерам.Партнер) 	КАК ПартнерПредставление,
		|	АналитикаУчетаПоПартнерам.Контрагент 				КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 				КАК Организация
		|	
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаНачало, &ДатаОкончание, ,АналитикаУчетаПоПартнерам В 
		|														(ВЫБРАТЬ
		|															АналитикаПоПартнерам.КлючАналитики
		|														 ИЗ
		|															РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|														 ГДЕ
		|															%2
		|															АналитикаПоПартнерам.Организация = &Организация)
		|														 И  (ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|														ИЛИ  ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг)
		|													) КАК Обороты
		|
		|УПОРЯДОЧИТЬ ПО Дата ";
		
		
	// http://r.ktc-ua.com/issues/5623
	// Нужно чтобы кассиру в список оплат не попадали документы СЦ выписанные на вендоров.
	
	Если НастройкиКассы = Неопределено Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "", "");	
	Иначе
		ТекстЗапросаВендоры = "ВЫБРАТЬ
		                      |	Партнер КАК Партнер
		                      |ПОМЕСТИТЬ ТаблицаВендоровСЦ
		                      |ИЗ
		                      |	РегистрСведений.ГНАТ_ВендорыСервисногоЦентра
							  |;";
		ТекстЗапросаОграничение = " АналитикаПоПартнерам.Партнер НЕ В (ВЫБРАТЬ Партнер ИЗ ТаблицаВендоровСЦ) И ";
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстЗапросаВендоры, ТекстЗапросаОграничение);
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаОплатыОстатки(НастройкиКассы)
	
	ТекстЗапроса = "
		|%1	
		|ВЫБРАТЬ //РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Номер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Номер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Дата
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Дата
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).СуммаДокумента
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).СуммаДокумента
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Менеджер
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Менеджер
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Менеджер,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Склад
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Склад
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР 
		|		КОГДА ЗаказКлиента Ссылка Документ.ЗаказКлиента
		|		ТОГДА ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Склад)
		|		КОГДА ЗаказКлиента Ссылка Документ.РеализацияТоваровУслуг
		|		ТОГДА ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Склад)
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК СкладПредставление,
        |
		|	СуммаОстаток										КАК ОстатокКОплате,
		|	Валюта 												КАК Валюта,
		|	ЗаказКлиента 										КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента) 						КАК ДокументПредставление,
		|	АналитикаУчетаПоПартнерам.Партнер 					КАК Партнер,
		|	ПРЕДСТАВЛЕНИЕ(АналитикаУчетаПоПартнерам.Партнер) 	КАК ПартнерПредставление,
		|	АналитикаУчетаПоПартнерам.Контрагент 				КАК Контрагент,
		|	АналитикаУчетаПоПартнерам.Организация 				КАК Организация
		|	
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|			АналитикаУчетаПоПартнерам В
		|					(ВЫБРАТЬ
		|						АналитикаПоПартнерам.КлючАналитики
		|					ИЗ
		|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|					ГДЕ
		|						%2
		|						АналитикаПоПартнерам.Организация = &Организация)
		|					И (ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
		|				   ИЛИ ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
		|				   ИЛИ ЗаказКлиента = Неопределено)) 
		|ГДЕ
		|	СуммаОстаток > 0
        |
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	// http://r.ktc-ua.com/issues/5623
	// Нужно чтобы кассиру в список оплат не попадали документы СЦ выписанные на вендоров.
		
	Если НастройкиКассы = Неопределено Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "", "");	
	Иначе
		ТекстЗапросаВендоры = "ВЫБРАТЬ
		                      |	Партнер КАК Партнер
		                      |ПОМЕСТИТЬ ТаблицаВендоровСЦ
		                      |ИЗ
		                      |	РегистрСведений.ГНАТ_ВендорыСервисногоЦентра
							  |;";
		ТекстЗапросаОграничение = " АналитикаПоПартнерам.Партнер НЕ В (ВЫБРАТЬ Партнер ИЗ ТаблицаВендоровСЦ) И ";
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ТекстЗапросаВендоры, ТекстЗапросаОграничение);
	КонецЕсли;	
		
	Возврат ТекстЗапроса;	
	
КонецФункции

&НаСервере
Процедура ОбновитьТЗДокументовОплаты(НастройкиКассы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ?(ВсеДокументы, ПолучитьТекстЗапросаОплатыОбороты(НастройкиКассы), ПолучитьТекстЗапросаОплатыОстатки(НастройкиКассы)); 	
	Запрос.УстановитьПараметр("ДатаНачало", 	ПериодДокументовОплаты.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончание", 	ПериодДокументовОплаты.ДатаОкончания);
	
	Попытка
		Запрос.УстановитьПараметр("Организация", 	?(ЗначениеЗаполнено(Касса), ОрганизацияДляОтборов, Справочники.Организации.ПустаяСсылка()));
	Исключение
		Касса = Неопределено;
		Возврат;
	КонецПопытки;
	
	Результат = Запрос.Выполнить();
	Выгрузка  = Результат.Выгрузить(); 
	СписокДокументовОплаты.Загрузить(Выгрузка);
	ОбщаяЗадолженность = СписокДокументовОплаты.Итог("ОстатокКОплате");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЗДокументовВыдачиДенег()   
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = ПолучитьТекстЗапросаВыдачиДенегПоЗаявке();
 	ОтборПодокументам = ?(ВсеДокументы, " " , "
	|	И	ДСКВыплате.СуммаКонечныйОстаток < 0");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ОтборПодокументам);
	
	Запрос.УстановитьПараметр("ДатаНачало", ПериодДокументовВыдачиДенег.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончание", ПериодДокументовВыдачиДенег.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Свойство", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоЗаявкаСозданаИзB2B());    
		
	СписокДокументовВыдачиДенег.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаВыдачиДенегПоЗаявке()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК ЗаявкаРДС,
	               |	ДополнительныеСведения.Значение
	               |ПОМЕСТИТЬ ДокЗаявка
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Значение = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Номер КАК Номер,
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Дата КАК Дата,
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК Документ,
	               |	ВЫБОР
	               |		КОГДА ДСКВыплате.СуммаКонечныйОстаток < 0
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Оплачена,
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Статус КАК Статус,
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).СуммаДокумента КАК Сумма,
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Валюта КАК Валюта,
	               |	ДСКВыплате.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	ДСКВыплате.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).КтоЗаявил КАК Менеджер,
	               |	ДСКВыплате.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	ДСКВыплате.СуммаКонечныйОстаток,
	               |	ДСКВыплате.СуммаОборот,
	               |	ДСКВыплате.СуммаПриход,
	               |	ДСКВыплате.СуммаРасход,
	               |	ДСКВыплате.СуммаНачальныйОстаток
	               |ПОМЕСТИТЬ ДСКВыдаче
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредстваКВыплате.ОстаткиИОбороты(
	               |			&ДатаНачало,
	               |			&ДатаОкончание,
	               |			Авто,
	               |			,
	               |			ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	               |				И ВЫБОР
	               |					КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ВЫРАЗИТЬ(ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Организация = &Организация
	               |				КОНЕЦ) КАК ДСКВыплате
	               |ГДЕ
	               |	ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Дата >= &ДатаНачало
	               |	И ВЫРАЗИТЬ(ДСКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Дата <= &ДатаОкончание
				   |    %1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДСКВыдаче.Номер,
	               |	ДСКВыдаче.Дата,
	               |	ДСКВыдаче.Документ,
	               |	ДСКВыдаче.Оплачена,
	               |	ДСКВыдаче.Статус,
	               |	ДСКВыдаче.Сумма,
	               |	ДСКВыдаче.Валюта,
	               |	ДСКВыдаче.Партнер,
	               |	ДСКВыдаче.Контрагент,
	               |	ДСКВыдаче.Менеджер,
	               |	ДСКВыдаче.Организация,
	               |	ДСКВыдаче.СуммаКонечныйОстаток,
	               |	ДСКВыдаче.СуммаОборот,
	               |	ДСКВыдаче.СуммаПриход,
	               |	ДСКВыдаче.СуммаРасход,
	               |	ДСКВыдаче.СуммаНачальныйОстаток,
	               |	ЕСТЬNULL(ДокЗаявка.Значение, ЛОЖЬ) КАК ЗаявкаИзСайта
	               |ПОМЕСТИТЬ ДокГруппировка
	               |ИЗ
	               |	ДСКВыдаче КАК ДСКВыдаче
	               |ЛЕВОЕ СОЕДИНЕНИЕ ДокЗаявка КАК ДокЗаявка
	               |ПО ДСКВыдаче.Документ = ДокЗаявка.ЗаявкаРДС
	               |ГДЕ
	               |	ЕСТЬNULL(ДокЗаявка.Значение, ЛОЖЬ) = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ДСКВыдаче.Номер,
	               |	ДСКВыдаче.Дата,
	               |	ДСКВыдаче.Документ,
	               |	ДСКВыдаче.Оплачена,
	               |	ДСКВыдаче.Статус,
	               |	ДСКВыдаче.Сумма,
	               |	ДСКВыдаче.Валюта,
	               |	ДСКВыдаче.Партнер,
	               |	ДСКВыдаче.Контрагент,
	               |	ДСКВыдаче.Менеджер,
	               |	ДСКВыдаче.Организация,
	               |	ДСКВыдаче.СуммаКонечныйОстаток,
	               |	ДСКВыдаче.СуммаОборот,
	               |	ДСКВыдаче.СуммаПриход,
	               |	ДСКВыдаче.СуммаРасход,
	               |	ДСКВыдаче.СуммаНачальныйОстаток,
	               |	ЕСТЬNULL(ДокЗаявка.Значение, ЛОЖЬ)
	               |ИЗ
	               |	ДСКВыдаче КАК ДСКВыдаче
	               |ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокЗаявка КАК ДокЗаявка
	               |ПО ДСКВыдаче.Документ = ДокЗаявка.ЗаявкаРДС
				   |
	               |ГДЕ
	               |	ДСКВыдаче.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокГруппировка.Номер,
	               |	ДокГруппировка.Дата,
	               |	ДокГруппировка.Документ,
	               |	ДокГруппировка.Оплачена,
	               |	ДокГруппировка.Статус,
	               |	ДокГруппировка.Сумма,
	               |	ДокГруппировка.Валюта,
	               |	ДокГруппировка.Партнер,
	               |	ДокГруппировка.Контрагент,
	               |	ДокГруппировка.Менеджер,
	               |	ДокГруппировка.Организация,
	               |	ДокГруппировка.СуммаКонечныйОстаток,
	               |	ДокГруппировка.СуммаОборот,
	               |	ДокГруппировка.СуммаПриход,
	               |	ДокГруппировка.СуммаРасход,
	               |	ДокГруппировка.СуммаНачальныйОстаток,
				   |	ДокГруппировка.ЗаявкаИзСайта КАК ЗаявкаИзСайта,
				   |	ДокГруппировка.Документ.Представление КАК ДокументПредставления,
				   |	ДокГруппировка.Партнер.Представление КАК  ПартнерПредставления
	               |ИЗ
	               |	ДокГруппировка КАК ДокГруппировка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	
	Возврат ТекстЗапроса;	

КонецФункции // ПолучитьТекстЗапросаВыдачиДенегПоЗаявке()


//                                                                                                       //
//                                   ПРОЦЕДУРЫ ПЕРЕРИСОВКИ ИНТЕРФЕЙСА                                    //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////






&НаСервере
Процедура ПолучитьДолгПоПартнеру(ПартнерСсылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА ДолгКлиента ИНАЧЕ ВЫРАЗИТЬ(ДолгКлиента 	* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК ДолгПартнера,
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА НашДолг		ИНАЧЕ ВЫРАЗИТЬ(НашДолг 		* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК НашДолг
		|	
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 ТОГДА  СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК ДолгКлиента,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК НашДолг
		|	ИЗ	
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСКлиентами
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта
		|
		|	ОБЪЕДИНИТЬ 
		|
		|	ВЫБРАТЬ 
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 И ЗаказПоставщику = Неопределено 	ТОГДА СуммаОстаток ИНАЧЕ 0 КОНЕЦ),
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 										ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) 				 
		|	ИЗ	
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСПоставщиками
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта  ) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Курсы
		|ПО Вл.Валюта = Курсы.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ЗапросВалютРегламент
		|ПО ЗапросВалютРегламент.Валюта = &ВалютаКассы ";	
	Запрос.УстановитьПараметр("Партнер", 		ПартнерСсылка);
	Запрос.УстановитьПараметр("ВалютаКассы", 	КассаВалюта);

	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		СуммаКонечныйДолг 	= Выборка.ДолгПартнера;
		СуммаНашДолг		= Выборка.НашДолг;
	Иначе
		СуммаКонечныйДолг 	= 0;
		СуммаНашДолг		= 0;
	КонецЕсли;
					
	НадписьДолгПартнера = Формат(СуммаКонечныйДолг, 			"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	НадписьНашДолг		= Формат(СуммаНашДолг, 					"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	НадписьСальдо       = Формат(СуммаКонечныйДолг-СуммаНашДолг,"ЧДЦ=2;ЧН='0,00'") + " " + КассаВалюта;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДолгПоДокументу(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументСсылка);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| 	СуммаОстаток,
			|	Валюта
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) ";	 
 	Иначе
	    Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СуммаОстаток,0) < 0
			|	ТОГДА ЕСТЬNULL(СуммаОстаток,0) 
			|	ИНАЧЕ 0
			|КОНЕЦ КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств = &ЗаказКлиента)";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НадписьПоДокументу = Формат(Выборка.СуммаОстаток, "ЧДЦ=2;ЧН='0,00'") + " " + ?(ДокументСсылка = Неопределено, "", ДокументСсылка.Валюта);
	Иначе
		НадписьПоДокументу = Формат(0, "ЧДЦ=2;ЧН='0,00'") + " " + ДокументСсылка.Валюта;
	КонецЕсли;
		
КонецПроцедуры




&НаСервереБезКонтекста
Функция ПолучитьДолгПартнераПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
   	| 	ОстаткиДляОплаты.ЗаказКлиента,
	| 	ОстаткиДляОплаты.СуммаОстаток,
	|	ОстаткиДляОплаты.Валюта
   	| ИЗ
   	|	 РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ОстаткиДляОплаты;";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка			 = РезультатЗапроса.Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции
             

&НаКлиенте
Процедура ОткрытьФормуВыдачи()

	ИмяТаблицы = ПолучитьИмяТаблицыТекущейСтраницы();
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ТекущиеДанные.Оплачена Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Документ", 					ТекущиеДанные.Документ);
			ПараметрыФормы.Вставить("ЗаявкаИзПартнерскогоСайта", 	ТекущиеДанные.ЗаявкаИзСайта);
			ПараметрыФормы.Вставить("Касса", 						Касса);

			ОповещениеПослеЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытииФормаВыдачиДенег",ЭтаФорма);
			ОткрытьФорму("ВнешняяОбработка.РабочееМестоКассира.Форма.ФормаВыдачиДенег",ПараметрыФормы,ЭтаФорма,Новый УникальныйИдентификатор,,,ОповещениеПослеЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецЕсли; 		
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗакрытииФормаВыдачиДенег(Результат,ДопольнительныеПараметры) Экспорт 
	ОбновитьСтраницу();  
КонецПроцедуры // ПослеЗакрытииФормаНабивкиНоменклатуры()















