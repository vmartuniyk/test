
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаявкаИзПартнерскогоСайта  = Параметры.ЗаявкаИзПартнерскогоСайта;
	
	Если  ЗаявкаИзПартнерскогоСайта = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);	
	КонецЕсли;

	Документ 		= Параметры.Документ;
	Касса			= Параметры.Касса;         
	
	КомментарийЗаголовок = "Комментарий:";
	
	Заголовок = Касса.Наименование;
	
	ПолучитьДолгДокументу();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВнешнююОбработку(ИмяОбработки)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Библиотека = ОбработкаОбъект.ПолучитьБиблиотеку(ИмяОбработки);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Возврат Библиотека;
КонецФункции



&НаСервере
Процедура ПолучитьДолгДокументу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ВЫБОР
	|	КОГДА ДенежныеСредстваКВыплатеОстатки.СуммаОстаток < 0
	|	ТОГДА ДенежныеСредстваКВыплатеОстатки.СуммаОстаток * (-1)
	|	ИНАЧЕ 0
	|КОНЕЦ КАК СуммаКОплате
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств = &Заявка) КАК ДенежныеСредстваКВыплатеОстатки";
	
	Запрос.УстановитьПараметр("Заявка", Документ);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка				= РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаПоДокументуЗаголовок 	= "Сумма по документу:";
		СуммаПоДокументуВалюта		= Документ.Валюта.Наименование;
		СуммаПоДокументу			= Выборка.СуммаКОплате;
	
		СуммаВыдатьЗаголовок 	= "Выдать:";
		СуммаВыдатьВалюта		= Документ.Валюта.Наименование;
		СуммаВыдать				= Выборка.СуммаКОплате;
	Иначе
		СуммаПоДокументуЗаголовок 	= "Сумма по документу:";
		СуммаПоДокументуВалюта		= Документ.Валюта.Наименование;
		СуммаПоДокументу			= 0;
	
		СуммаВыдатьЗаголовок 	= "Выдать:";
		СуммаВыдатьВалюта		= Документ.Валюта.Наименование;
		СуммаВыдать				= 0;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура Выдать(Команда)
	
	Если ПроверкаЗаполнения() Тогда
				
		ДокументРКО			= СоздатьДокументРКО(Документ);
		Если ДокументРКО 	= Неопределено Тогда Возврат; КонецЕсли;
		НСДокументРКО		= ПолучитьНавигационнуюСсылку(ДокументРКО);
		ПоказатьОповещениеПользователя("Документ создан.", НСДокументРКО, Строка(ДокументРКО), БиблиотекаКартинок.Информация32);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	Если СуммаВыдать = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = "Сумма к выдаче должна быть больше 0.";
		Сообщение.Поле	= "СуммаВыдать";
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СуммаВыдать > СуммаПоДокументу Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = "Сумма к выдаче больше чем сумма по документу.";
		Сообщение.Поле	= "СуммаВыдать";
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
				
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Функция СоздатьДокументРКО(ДокументОснование)
		
	УстановитьПривилегированныйРежим(Истина);
	
	
	
	ДокументЗаявка = ДокументОснование.ПолучитьОбъект();
	ДокументЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	
	Если НЕ ДокументЗаявка.ПроверитьЗаполнение() Тогда 
		Возврат Неопределено; 
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ДокументЗаявка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	
	ДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	
	ДокументРКО.Заполнить(Неопределено);
	ДокументРКО.Дата = ТекущаяДата();
	ДокументРКО.УстановитьНовыйНомер();
	
	ПолучитьДанныеДляЗаполненияРКО(ДокументРКО.Валюта, ДокументРКО, ДокументОснование);
		
	Если НЕ ДокументРКО.ПроверитьЗаполнение() Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено; 
	КонецЕсли;
	
	Попытка
		ДокументРКО.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	РеквизитФормыВЗначение("Объект").ДобавитьСсылкуВИсториюРаботыПользователя(ДокументЗаявка.Ссылка);
	РеквизитФормыВЗначение("Объект").ДобавитьСсылкуВИсториюРаботыПользователя(ДокументРКО.Ссылка);
		
	Возврат ДокументРКО.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеДляЗаполненияРКО(Знач ВалютаДокумента, ДанныеЗаполнения, ДокументЗаявка)
	
	// Заполним данные шапки документа.
	Запрос	 	= Новый Запрос("
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	Заявка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.Контрагент КАК Контрагент,
	|	Заявка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	Заявка.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	Заявка.ПодотчетноеЛицо.Наименование КАК ПодотчетноеЛицоНаименование,
	|	Заявка.АвансовыйОтчет КАК АвансовыйОтчет,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	|	Заявка.КурсКонвертации КАК КурсКонвертации,
	|	Заявка.Статус КАК Статус,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ПеречислениеВБюджет,
	|
	|	Заявка.Касса КАК Касса,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	|	ТОГДА
	|		Заявка.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	|	ТОГДА
	|		Заявка.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|	Заявка.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ЕСТЬNULL(-ДенежныеСредства.СуммаОстаток, 0) КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка) КАК ДенежныеСредства
	|   ПО
	|		Истина
	|ГДЕ
	|	Заявка.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументЗаявка);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Библиотека 			= ПолучитьВнешнююОбработку("Библиотека внешних обработок");
	
	//Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
	//	ДанныеЗаполнения.Вставить(Колонка.Имя);
	//КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	ДанныеЗаполнения.СуммаДокумента = СуммаВыдать;
	
	Если Выборка.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		Текст = НСтр("ru = 'Заявка на расходование денежных средств не утверждена'");
		Библиотека.СообщитьПользователю(Текст);
		ДанныеЗаполнения = Неопределено;
		Возврат; 
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		ДанныеЗаполнения.Выдать = ФизическиеЛица.ФамилияИнициалыФизЛица(Выборка.ПодотчетноеЛицоНаименование);
	ИначеЕсли Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
		ДанныеЗаполнения.Выдать = Выборка.КонтрагентНаименованиеПолное;
	Иначе
		ДанныеЗаполнения.Выдать = Выборка.КонтрагентНаименование;
	КонецЕсли;

	// Заполним кассу.
	ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения);
	
	Коэффициенты = ПолучитьКоэффициентыПересчетаВалюты(
		Выборка.ВалютаЗаявки,
		?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, ДанныеЗаполнения.Валюта),
		ТекущаяДата()
	);
	
	// Заполним табличную часть документа.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Аналитика.Партнер КАК Партнер,
	|	ДенежныеСредства.Заказ КАК Заказ,
	|	ДенежныеСредства.СтатьяРасходов КАК СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов КАК АналитикаРасходов,
	|	&Подразделение КАК Подразделение,
	|	СУММА(
	|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-ДенежныеСредства.Сумма
	|		ИНАЧЕ
	|			ДенежныеСредства.Сумма
	|		КОНЕЦ
	|	) * &КоэффициентПересчетаВВалютуДокумента
	|	КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ДенежныеСредства.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Партнер,
	|	ДенежныеСредства.Заказ,
	|	ДенежныеСредства.СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов
	|";
	Запрос.УстановитьПараметр("Подразделение", ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуДокумента", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	
	ДанныеЗаполнения.РасшифровкаПлатежа.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сумма > 0 Тогда
			Сумма = Мин(Выборка.Сумма, ДанныеЗаполнения.СуммаДокумента);
			ДанныеЗаполнения.СуммаДокумента = ДанныеЗаполнения.СуммаДокумента - Сумма;
			Если Сумма > 0 Тогда
				НоваяСтрока = ДанныеЗаполнения.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Сумма = Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполнения.СуммаДокумента = ДанныеЗаполнения.РасшифровкаПлатежа.Итог("Сумма");
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	 И ДанныеЗаполнения.КурсКонвертации <> 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаПослеКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения)
			
	Если ЗначениеЗаполнено(Касса) Тогда
		Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
		ДанныеЗаполнения.Касса  = Касса;
		ДанныеЗаполнения.Валюта = Валюта;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, ВалютаВзаиморасчетов, Период)Экспорт

	ВалютаУпр  = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период,
	|		Валюта = &ВалютаУпр ИЛИ Валюта = &ВалютаРегл ИЛИ Валюта = &ВалютаВзаиморасчетов ИЛИ Валюта = &ВалютаДокумента
	|	) КАК КурсыВалют
	|");
	Запрос.УстановитьПараметр("Период",               Период);
	Запрос.УстановитьПараметр("ВалютаУпр",            ВалютаУпр);
	Запрос.УстановитьПараметр("ВалютаРегл",           ВалютаРегл);
	Запрос.УстановитьПараметр("ВалютаДокумента",      ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);

	КурсВалютыУпр            = 1;
	КратностьВалютыУпр       = 1;

	КурсВалютыРегл           = 1;
	КратностьВалютыРегл      = 1;

	КурсВзаиморасчетов       = 1;
	КратностьВзаиморасчетов  = 1;

	КурсВалютыДокумента      = 1;
	КратностьВалютыДокумента = 1;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Валюта = ВалютаУпр Тогда

			КурсВалютыУпр      = Выборка.Курс;
			КратностьВалютыУпр = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаРегл Тогда

			КурсВалютыРегл      = Выборка.Курс;
			КратностьВалютыРегл = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаВзаиморасчетов Тогда

			КурсВзаиморасчетов      = Выборка.Курс;
			КратностьВзаиморасчетов = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаДокумента Тогда

			КурсВалютыДокумента      = Выборка.Курс;
			КратностьВалютыДокумента = Выборка.Кратность;

		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("КоэффициентПересчетаВВалютуВзаиморасчетов, КоэффициентПересчетаВВалютуУПР, КоэффициентПересчетаВВалютуРегл");

	Результат.КоэффициентПересчетаВВалютуУпр  = КурсВалютыДокумента * КратностьВалютыУпр / (КратностьВалютыДокумента * КурсВалютыУпр); 
	Результат.КоэффициентПересчетаВВалютуРегл = КурсВалютыДокумента * КратностьВалютыРегл / (КратностьВалютыДокумента * КурсВалютыРегл);
	Результат.КоэффициентПересчетаВВалютуВзаиморасчетов = КурсВалютыДокумента * КратностьВзаиморасчетов / (КратностьВалютыДокумента * КурсВзаиморасчетов);

	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьКонтрагента(ПартнерСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Партнер = &Партнер";
				   
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	
	РезультатЗапрос = Запрос.Выполнить();
	Выборка			= РезультатЗапрос.Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции