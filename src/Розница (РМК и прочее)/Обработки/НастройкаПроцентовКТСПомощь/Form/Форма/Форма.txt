
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаНаличияМетаданныхПланаПродаж");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаРеквизитовИЭлементовФормы");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаЗагрузкиТаблицыНастройкаКоэффициентов");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаЗаписиТаблицыНастройкаКоэффициентов");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Склады\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Склады».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

#Область ПроверкаНаличияМетаданныхПланаПродаж

&НаКлиенте
Процедура Тест_ПроверкаНаличияМетаданныхПланаПродаж(Параметр) Экспорт
	РезультатПроверки = ВыполнитьПроверкуНаличияПланаПродажНаСервере();
	ЮнитТест.ПроверитьИстину(РезультатПроверки.Результат, РезультатПроверки.СообщениеОбОшибке);
КонецПроцедуры // Тест_ПроверкаНаличияМетаданныхПланаПродаж()

&НаСервереБезКонтекста
Функция ВыполнитьПроверкуНаличияПланаПродажНаСервере()

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
#Область Регистр_ЗаработокМенеджераВыполнениеПлана

	Регистр_ЗаработокМенеджераВыполнениеПлана = Метаданные.РегистрыСведений.Найти("ЗаработокМенеджераВыполнениеПлана");
	Если Регистр_ЗаработокМенеджераВыполнениеПлана = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В конфигурации не удалось найти регистр сведений «Зароботок менеджера выполнение плана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИзмерениеКонецПериода = Регистр_ЗаработокМенеджераВыполнениеПлана.Измерения.Найти("КонецПериода");
	Если ИзмерениеКонецПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера выполнение плана» нету измерения «КонецПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеКонецПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера выполнение плана» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИзмерениеНачалоПериода = Регистр_ЗаработокМенеджераВыполнениеПлана.Измерения.Найти("НачалоПериода");
	Если ИзмерениеНачалоПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера выполнение плана» нету измерения «НачалоПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеНачалоПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера выполнение плана» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	ИзмерениеСклад = Регистр_ЗаработокМенеджераВыполнениеПлана.Измерения.Найти("Склад");
	Если ИзмерениеСклад = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера выполнение плана» нету измерения «Склад».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	Если ИзмерениеСклад.Тип <> Новый ОписаниеТипов("СправочникСсылка.Склады") Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «Склад» в регистре «Зароботок менеджера выполнение плана» должно иметь тип СправочникСсылка.Склады.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

#КонецОбласти 

#Область Регистр_ЗаработокМенеджераМножительПоМесяцам

	Регистр_ЗаработокМенеджераМножительПоМесяцам = Метаданные.РегистрыСведений.Найти("ЗаработокМенеджераМножительПоМесяцам");
	Если Регистр_ЗаработокМенеджераМножительПоМесяцам = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В конфигурации не удалось найти регистр сведений «Зароботок менеджера множитель по месяцам».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	ИзмерениеКонецПериода = Регистр_ЗаработокМенеджераМножительПоМесяцам.Измерения.Найти("КонецПериода");
	Если ИзмерениеКонецПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету измерения «КонецПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеКонецПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИзмерениеНачалоПериода = Регистр_ЗаработокМенеджераМножительПоМесяцам.Измерения.Найти("НачалоПериода");
	Если ИзмерениеНачалоПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету измерения «НачалоПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеНачалоПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РесурсКоэффициент = Регистр_ЗаработокМенеджераМножительПоМесяцам.Ресурсы.Найти("Коэффициент");
	Если РесурсКоэффициент = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету ресурса «Коэффициент».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РесурсКоэффициент.Тип <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «Коэффициент» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Число(5,2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Ресурс_КПП_Плюс = Регистр_ЗаработокМенеджераМножительПоМесяцам.Ресурсы.Найти("КПП_Плюс");
	Если Ресурс_КПП_Плюс = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету ресурса «КПП_Плюс».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Ресурс_КПП_Плюс.Тип <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КПП_Плюс» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Число(10,2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Ресурс_КПП_Минус = Регистр_ЗаработокМенеджераМножительПоМесяцам.Ресурсы.Найти("КПП_Минус");
	Если Ресурс_КПП_Минус = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету ресурса «КПП_Минус».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Ресурс_КПП_Минус.Тип <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КПП_Минус» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Число(10,2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
#КонецОбласти 
	
	Возврат РезультатПроверки;

КонецФункции // ВыполнитьПроверкуНаличияПланапродажНаСервере()
 
#КонецОбласти

#Область ПроверкаЭлеметовИРеквизитовФормы

&НаКлиенте
Процедура Тест_ПроверкаРеквизитовИЭлементовФормы(Параметр) Экспорт
	РезультатПроверки = ПроверкаРеквизитовИЭлементовФормыНаСервере();
	ЮнитТест.ПроверитьИстину(РезультатПроверки.Результат, РезультатПроверки.СообщениеОбОшибке);
КонецПроцедуры // Тест_ПроверкаРеквизитовИЭлементовФормы()

&НаСервере
Функция ПроверкаРеквизитовИЭлементовФормыНаСервере()

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
	ТЗ_НастройкаКоэффициентов = РеквизитФормыВЗначение("НастройкаКоэффициентов", Тип("ТаблицаЗначений"));
	
	Колонка_КПП_Плюс = ТЗ_НастройкаКоэффициентов.Колонки.Найти("КПП_Плюс");
	Если Колонка_КПП_Плюс = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='На форме в таблице «НастройкаКоэффициентов» не найдено колонку «КПП_Плюс».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Колонка_КПП_Минус = ТЗ_НастройкаКоэффициентов.Колонки.Найти("КПП_Минус");
	Если Колонка_КПП_Минус = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='На форме в таблице «НастройкаКоэффициентов» не найдено колонку «КПП_Минус».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Колонка_Склады = ТЗ_НастройкаКоэффициентов.Колонки.Найти("Склады");
	Если Колонка_Склады = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='На форме в таблице «НастройкаКоэффициентов» не найдено колонку «Склады».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Колонка_КПП_Плюс.ТипЗначения <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Тип колонки «КПП_Плюс» должен быть число(10, 2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Колонка_КПП_Минус.ТипЗначения <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Тип колонки «КПП_Минус» должен быть число(10, 2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Колонка_Склады.ТипЗначения <> Новый ОписаниеТипов("СписокЗначений") Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Тип колонки «Склады» должен быть СписокЗначений.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	Элемент_КПП_Плюс = Элементы.Найти("НастройкаКоэффициентовКПП_Плюс");
	Если Элемент_КПП_Плюс = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не найдено элемента формы НастройкаКоэффициентовКПП_Плюс.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Элемент_КПП_Минус = Элементы.Найти("НастройкаКоэффициентовКПП_Минус");
	Если Элемент_КПП_Минус = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не найдено элемента формы НастройкаКоэффициентовКПП_Минус.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	Элемент_Склады = Элементы.Найти("НастройкаКоэффициентовСклады");
	Если Элемент_Склады = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не найдено элемента формы НастройкаКоэффициентовСклады.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверкаРеквизитовИЭлементовФормыНаСервере()
 	
#КонецОбласти 

#Область ПроверкаЗагрузкиТаблицыНастройкаКоэффициентов

&НаКлиенте
Процедура Тест_ПроверкаЗагрузкиТаблицыНастройкаКоэффициентов(Параметр) Экспорт

	ДанныеДляЗагрузки = СформироватьДанныеКоэффициентовДляЗагрузки();
	
	СписокМесяцов.Очистить();
	
	Год = Год(ТекущаяДата());
	СформироватьСписокВыбораМесяца();
	СформироватьСписокВыбораГода();
	ЗаполнитьНастройкаКоэффициентов();
	
	РезультатПоиска = ВыполнитьПоискКоэффициентовЗаПериод(ДанныеДляЗагрузки);
	
	УничтожитьДанныеКоэффициентовПоМесяцам(ДанныеДляЗагрузки);
	
	ЮнитТест.ПроверитьИстину(РезультатПоиска.Результат, РезультатПоиска.СообщениеОбОшибке);

КонецПроцедуры // Тест_ПроверкаЗагрузкиТаблицыНастройкаКоэффициентов()

&НаСервереБезКонтекста
Функция СформироватьДанныеКоэффициентовДляЗагрузки()

	ДанныеДляЗагрузки = Новый Структура;
	
	Период = НачалоМесяца(ТекущаяДатаСеанса());
	Склад1 = СоздатьСклад();
	Склад2 = СоздатьСклад();
	Склад3 = СоздатьСклад();
	
	ВыполнитьТестовуюЗаписьВРегистрМножительПоМесяцам(Период);
	
	ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад1);
	ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад2);
	ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад3);
	
	ДанныеДляЗагрузки.Вставить("Период", Период);
	ДанныеДляЗагрузки.Вставить("Склад1", Склад1);
	ДанныеДляЗагрузки.Вставить("Склад2", Склад2);
	ДанныеДляЗагрузки.Вставить("Склад3", Склад3);
	
	Возврат ДанныеДляЗагрузки;

КонецФункции // СформироватьДанныеКоэффициентовДляЗагрузки()

&НаСервереБезКонтекста
Процедура УничтожитьДанныеКоэффициентовПоМесяцам(ДанныеДляЗагрузки)

	Если ТипЗнч(ДанныеДляЗагрузки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеДляЗагрузки.Период);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеДляЗагрузки.Период);
	НаборЗаписей.Записать();
	
	Если ДанныеДляЗагрузки.Свойство("Склад1") Тогда
		СправочникОбъект = ДанныеДляЗагрузки.Склад1.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("Склад2") Тогда
		СправочникОбъект = ДанныеДляЗагрузки.Склад2.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("Склад3") Тогда
		СправочникОбъект = ДанныеДляЗагрузки.Склад3.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

КонецПроцедуры // УничтожитьДанныеКоэффициентовПоМесяцам()
 

&НаСервереБезКонтекста
Процедура ВыполнитьТестовуюЗаписьВРегистрМножительПоМесяцам(Период)

	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.НачалоПериода.Установить(Период);
	НаборЗаписей.Отбор.КонецПериода.Установить(КонецМесяца(Период));
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.НачалоПериода 	= Период;
	Запись.КонецПериода 	= КонецМесяца(Период);
	Запись.Коэффициент 		= 10;
	Запись.КПП_Плюс 		= 15;
	Запись.КПП_Минус 		= 5;
	
	НаборЗаписей.Записать();

КонецПроцедуры // ВыполнитьТестовуюЗаписьВРегистрМножительПоМесяцам()

&НаСервереБезКонтекста
Процедура ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад)

	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.НачалоПериода.Установить(Период);
	НаборЗаписей.Отбор.КонецПериода.Установить(КонецМесяца(Период));
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.НачалоПериода 	= Период;
	Запись.КонецПериода 	= КонецМесяца(Период);
	Запись.Склад 			= Склад;
	
	НаборЗаписей.Записать();	

КонецПроцедуры // ВыполнитьтестовуюЗаписьВРегистрВыполнениеПлана()


&НаСервере
Функция ВыполнитьПоискКоэффициентовЗаПериод(ДанныеДляЗагрузки)

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
	СтруктураПоиска = Новый Структура("НачалоПериода, КонецПериода", ДанныеДляЗагрузки.Период, НачалоДня(КонецМесяца(ДанныеДляЗагрузки.Период)));	
	РезультатПоиска = НастройкаКоэффициентов.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 ИЛИ РезультатПоиска.Количество() > 1 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РезультатПоиска[0].Коэффициент <> 10 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить Коэффициент в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РезультатПоиска[0].КПП_Плюс <> 15 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить КПП_Плюс в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РезультатПоиска[0].КПП_Минус <> 5 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить КПП_Минус в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТестовыйСписокСкладов = РезультатПоиска[0].Склады;
	
	Если ТестовыйСписокСкладов.Количество() <> 3 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить Склады в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТестовыйСписокСкладов.НайтиПозначению(ДанныеДляЗагрузки.Склад1) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать склад №1 в регистр «ЗаработокМенеджераВыполнениеПлана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТестовыйСписокСкладов.НайтиПозначению(ДанныеДляЗагрузки.Склад2) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать склад №2 в регистр «ЗаработокМенеджераВыполнениеПлана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТестовыйСписокСкладов.НайтиПозначению(ДанныеДляЗагрузки.Склад3) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать склад №3 в регистр «ЗаработокМенеджераВыполнениеПлана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ВыполнитьТестовыйПоискКоэффициентовЗаПериод()
 

#КонецОбласти 

#Область ПроверкаЗаписиТаблицыНастройкаКоэффициентов

&НаКлиенте
Процедура Тест_ПроверкаЗаписиТаблицыНастройкаКоэффициентов(Параметр) Экспорт

	СписокМесяцов.Очистить();
	
	Год = Год(ТекущаяДата());
	СформироватьСписокВыбораМесяца();
	СформироватьСписокВыбораГода();
	ЗаполнитьНастройкаКоэффициентов();
	
	ЮнитТест.ПроверитьНеРавенство(НастройкаКоэффициентов.Количество(), 0, НСтр("ru='Не удалось загрузить таблицу настройки коэффициентов.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Период 			= НастройкаКоэффициентов[0].НачалоПериода;
	СписокСкладов 	= ПолучитьСписокСкладовДляТеста();
	
	НастройкаКоэффициентов[0].Коэффициент 	= 50;
	НастройкаКоэффициентов[0].КПП_Плюс 		= 10;
	НастройкаКоэффициентов[0].КПП_Минус 	= 20;
	НастройкаКоэффициентов[0].Склады 		= СписокСкладов;
	
	СохранитьНастройкиКоэффициентов();
	
	РезультатПроверки = ПроверитьРезультатЗаписиНастройкиКоэффициентовНаСервере(Период, СписокСкладов);
	
	ОчиститьРезультатыНастройкиКоэффициентовНаСервере(Период, СписокСкладов);
	
	ЮнитТест.ПроверитьИстину(РезультатПроверки.Результат, РезультатПроверки.СообщениеОбОшибке);
	
КонецПроцедуры // Тест_ПроверкаЗаписиТаблицыНастройкаКоэффициентов()

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладовДляТеста()

	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(СоздатьСклад());
	СписокСкладов.Добавить(СоздатьСклад());
	СписокСкладов.Добавить(СоздатьСклад());
	
	Возврат СписокСкладов;

КонецФункции // ПолучитьСписокСкладовДляТеста()
 
&НаСервереБезКонтекста
Функция ПроверитьРезультатЗаписиНастройкиКоэффициентовНаСервере(Период, СписокСкладов)

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Коэффициент КАК Коэффициент,
	                      |	КПП_Плюс	КАК КПП_Плюс,
	                      |	КПП_Минус 	КАК КПП_Минус
	                      |ИЗ
	                      |	РегистрСведений.ЗаработокМенеджераМножительПоМесяцам.СрезПоследних(
	                      |			,
	                      |			НачалоПериода = &НачалоПериода
	                      |				И КонецПериода = &КонецПериода)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Склад КАК Склад
	                      |ИЗ
	                      |	РегистрСведений.ЗаработокМенеджераВыполнениеПлана.СрезПоследних(
	                      |			,
	                      |			НачалоПериода = &НачалоПериода
	                      |				И КонецПериода = &КонецПериода)");
						  
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(КонецМесяца(Период)));
	
	РезультатыЗапроса 		= Запрос.ВыполнитьПакет();
	ВыборкаКоэффициенты 	= РезультатыЗапроса[0].Выбрать();
	МассивТестовыхСкладов   = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
	
	Если Не ВыборкаКоэффициенты.Следующий() Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать коэффициенты в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ВыборкаКоэффициенты.Коэффициент <> 50 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать Коэффициент в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ВыборкаКоэффициенты.КПП_Плюс <> 10 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать КПП_Плюс в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ВыборкаКоэффициенты.КПП_Минус <> 20 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать КПП_Минус в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если МассивТестовыхСкладов.Найти(СписокСкладов[0].Значение) = Неопределено ИЛИ МассивТестовыхСкладов.Найти(СписокСкладов[1].Значение) = Неопределено ИЛИ МассивТестовыхСкладов.Найти(СписокСкладов[2].Значение) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать Склады в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверитьРезультатЗаписиНастройкиКоэффициентовНаСервере()

&НаСервереБезКонтекста
Процедура ОчиститьРезультатыНастройкиКоэффициентовНаСервере(Период, СписокСкладов)

	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Записать();
	
	СправочникОбъект = СписокСкладов[0].Значение.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();
	
	СправочникОбъект = СписокСкладов[1].Значение.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();
	
	СправочникОбъект = СписокСкладов[2].Значение.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();

КонецПроцедуры // ОчиститьРезультатыНастройкиКоэффициентовНаСервере()

#КонецОбласти 

#Область Справочники

&НаСервереБезКонтекста
Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

#КонецОбласти 

#Область Библиотеки

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

&НаКлиенте
Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

&НаСервереБезКонтекста
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	ОтветственныйПользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("df42269d-c4e0-11e1-9d4d-001e673c80fc"));
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ОтветственныйПользователь = ТекущийПользователь Или РольДоступна("ПолныеПрава") Тогда 
		Элементы.НастройкиКоэффициентовЗП.Видимость = Истина;
	Иначе 
		Элементы.НастройкиКоэффициентовЗП.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагрузитьНастройкиКТСПомощи();
	ЗагрузитьНастройкиПроцентов();
	ЗагрузитьНастройкиСертификатов();
	
	Год = Год(ТекущаяДата());
	СформироватьСписокВыбораМесяца();
	СформироватьСписокВыбораГода();
	ЗаполнитьНастройкаКоэффициентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		РезультатОтвета = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
			ЗаписатьНастройкиНаСервере();
		ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроцентПродажыУслугиПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентИсполненияУслугиПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоПомощьКТСПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСертификаты1ПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтПродажыСертификатаПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	Если Модифицированность Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;                                 
		Ответ = Вопрос("Значение коэффициентов было изменено.Сохранить изменения?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
	    	СохранитьНастройкиКоэффициентов();
		КонецЕсли;
    КонецЕсли;
	Если ЗначениеЗаполнено(Число(Элемент.ТекстРедактирования)) Тогда 
		ЗаполнитьНастройкаКоэффициентов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаПроцетов

&НаКлиенте
Процедура НастройкаПроцетовПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаКоэффициентов

&НаКлиенте
Процедура НастройкаКоэффициентовКоэффициентПриИзменении(Элемент)
	//Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоэффициентовСкладыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.НастройкаКоэффициентов.ТекущиеДанные.Склады.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаСертификатов

&НаКлиенте
Процедура НастройкаСертификатовПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыВыбора(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.ЗагрузитьЗначения(Результат);
	
КонецПроцедуры // ОбработкаЗакрытияФормыВыбора()
 

&НаКлиенте
Процедура НастройкаСертификатовСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидНоменклатурыСертификаты.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо задать настройку вида номенклатуры для сертификатов'"), , "ВидНоменклатурыСертификаты");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкаСертификатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		Номенклатура = ТекущиеДанные.Сертификат;
	КонецЕсли;
	
	ПараметрыФормы 		= Новый Структура("Номенклатура, ВидНоменклатуры", Номенклатура, ВидНоменклатурыСертификаты);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыВыбораСертификата", ЭтаФорма, ТекущиеДанные);
	
	ОткрытьФорму("ВнешняяОбработка.НастройкаПроцентовКТСПомощь.Форма.ФормаВыбораСертификата", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);							
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыВыбораСертификата(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.Сертификат	= Результат;

КонецПроцедуры // ОбработкаЗакрытияформыВыбораСертификата()
 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	ПроверитьНаЗаполнение();
	ЗаписатьНастройкиНаСервере();
	Модифицированность=Ложь;
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ПроверитьНаЗаполнение();
	ЗаписатьНастройкиНаСервере();
	Модифицированность=Ложь;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройкиКТСПомощи()

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаКТСПомощь();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);

КонецПроцедуры // ЗагрузитьНастройкиКТСПомощи()

&НаСервере
Функция ТекстЗапросаКТСПомощь()

	ТекстЗапоса = "ВЫБРАТЬ
	              |	КТС_Константы_ПроцентПродажыУслуги.Значение КАК ПроцентПродажыУслуги,
	              |	ЕСТЬNULL(КТС_Константы_ПроцентИсполненияУслуги.Значение, 0) КАК ПроцентИсполненияУслуги,
	              |	ЕСТЬNULL(КТС_Константы_СвойствоПомощьКТС.Значение, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)) КАК СвойствоПомощьКТС,
	              |	ЕСТЬNULL(КТС_Константы_ВидНоменклатурыСертификаты.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатурыСертификаты,
	              |	ЕСТЬNULL(КТС_Константы_ПроцентОтПродажыСертификата.Значение, 0) КАК ПроцентОтПродажыСертификата
	              |ИЗ
	              |	Справочник.КТС_Константы КАК КТС_Константы_ПроцентПродажыУслуги
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ПроцентИсполненияУслуги
	              |		ПО (КТС_Константы_ПроцентИсполненияУслуги.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ПроцентИсполненияУслуги))
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_СвойствоПомощьКТС
	              |		ПО (КТС_Константы_СвойствоПомощьКТС.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.СвойствоПомощьКТС))
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ВидНоменклатурыСертификаты
	              |		ПО (КТС_Константы_ВидНоменклатурыСертификаты.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ВидНоменклатурыСертификаты))
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ПроцентОтПродажыСертификата
	              |		ПО (КТС_Константы_ПроцентОтПродажыСертификата.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ПроцентОтПродажыСертификата))
				  |ГДЕ
				  |	КТС_Константы_ПроцентПродажыУслуги.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ПроцентПродажыУслуги)";
	
	Возврат ТекстЗапоса;

КонецФункции // ТекстЗапросаКТСПомощь()
 

&НаСервере
Процедура ЗагрузитьНастройкиПроцентов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КТСПомощь.Номенклатура,
	                      |	КТСПомощь.ПроцентПродажы,
	                      |	КТСПомощь.ПроцентИсполнения
	                      |ИЗ
	                      |	РегистрСведений.КТСПомощь КАК КТСПомощь");
						  
	НастройкаПроцентов.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьНастройкиПроцентов()

&НаСервере
Процедура ЗагрузитьНастройкиСертификатов()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Сертификат					КАК Сертификат,
	                      |	ВидНоменклатуры				КАК ВидНоменклатуры,
	                      |	Процент						КАК Процент,
	                      |	ДополнительноеСведение		КАК ДополнительноеСведение
	                      |ИЗ
	                      |	РегистрСведений.КТС_НастройкаПроцентовСертификатов");
						  
	НастройкаСертификатов.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьНастройкиСертификатов()()
 
&НаСервере
Процедура ЗаписатьНастройкиНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьЗначениеКТСКонстанты("ПроцентПродажыУслуги", ПроцентПродажыУслуги);	
	ЗаписатьЗначениеКТСКонстанты("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	ЗаписатьЗначениеКТСКонстанты("СвойствоПомощьКТС", СвойствоПомощьКТС);
	ЗаписатьЗначениеКТСКонстанты("ВидНоменклатурыСертификаты", ВидНоменклатурыСертификаты);
	ЗаписатьЗначениеКТСКонстанты("ПроцентОтПродажыСертификата", ПроцентОтПродажыСертификата);
	
	СохранитьНастройкиПроцентов();
	СохранитьНастройкиСертификатов();
	СохранитьНастройкиКоэффициентов();

КонецПроцедуры // ЗаписатьНастройкиНаСервере()

&НаСервере
Процедура ЗаписатьЗначениеКТСКонстанты(ИмяКонстанты, Значение)
	СпрОбъект = ПредопределенноеЗначение("Справочник.КТС_Константы." + ИмяКонстанты).ПолучитьОбъект();
	СпрОбъект.Значение = Значение;
	СпрОбъект.Записать();
КонецПроцедуры // ЗаписатьЗначениеКТСКонстанты()
 

&НаСервере
Процедура СохранитьНастройкиПроцентов()
	
	НаборЗаписей = РегистрыСведений.КТСПомощь.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(НастройкаПроцентов.Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьНастройкиПроцентов()

&НаСервере
Процедура СохранитьНастройкиСертификатов()

	НаборЗаписей = РегистрыСведений.КТС_НастройкаПроцентовСертификатов.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(НастройкаСертификатов.Выгрузить());
	НаборЗаписей.Записать();

КонецПроцедуры // СохранитьНастройкиСертификатов()

&НаСервере
Процедура СформироватьСписокВыбораМесяца()
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  1; ЭлементСписка.Значение = "Январь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  2; ЭлементСписка.Значение = "Февраль";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  3; ЭлементСписка.Значение = "Март";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  4; ЭлементСписка.Значение = "Апрель";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  5; ЭлементСписка.Значение = "Май";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  6; ЭлементСписка.Значение = "Июнь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  7; ЭлементСписка.Значение = "Июль";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  8; ЭлементСписка.Значение = "Август";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  9; ЭлементСписка.Значение = "Сентябрь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление = 10; ЭлементСписка.Значение = "Октябрь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление = 11; ЭлементСписка.Значение = "Ноябрь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление = 12; ЭлементСписка.Значение = "Декабрь";
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораГода()
	СписокГодов = Новый  СписокЗначений;
	Индекс = 0;
	ГодНачалаИспользование = 2013;
	Пока Индекс <= 10 Цикл 
		 СписокГодов.Добавить(ГодНачалаИспользование+Индекс);
		 Индекс = Индекс+1;
	КонецЦикла;
	Элементы.Год.СписокВыбора.ЗагрузитьЗначения(СписокГодов.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкаКоэффициентов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкаКоэффициентов.Очистить();
	
	Для Каждого Элемент Из СписокМесяцов Цикл 
		НоваяСтрока 				= НастройкаКоэффициентов.Добавить();
		НоваяСтрока.Год 			= Год;
		НоваяСтрока.Месяц 			= Элемент.Значение;
		НоваяСтрока.НачалоПериода	= НачалоДня(Дата(Год,Число(Элемент.Представление),01));
		НоваяСтрока.Период			= НоваяСтрока.НачалоПериода;
		НоваяСтрока.КонецПериода   	= КонецМесяца(НоваяСтрока.НачалоПериода);
	КонецЦикла;
	
	Запрос 			= Новый Запрос();
	Запрос.Текст	= ПолучитьТекстЗапросаПоискКоэффициентов();
	Запрос.УстановитьПараметр("НастройкиКоэффициентов", НастройкаКоэффициентов.Выгрузить());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатыЗапроса 	= Запрос.ВыполнитьПакет();
	ТаблицаСкладов		= РезультатыЗапроса[2].Выгрузить();
	НастройкаКоэффициентов.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
	Для каждого СтрокаТаблицы Из НастройкаКоэффициентов Цикл
		СтруктураПоиска  = Новый Структура("НачалоПериода, КонецПериода", СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.КонецПериода);
		РезультатыПоиска = ТаблицаСкладов.НайтиСтроки(СтруктураПоиска);
		СписокСкладов	 = Новый СписокЗначений;
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			СписокСкладов.Добавить(РезультатПоиска.Склад);    					
		КонецЦикла;
		СтрокаТаблицы.Склады = СписокСкладов;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиКоэффициентов()
	
	НаборЗаписей 		= РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписейПлан 	= РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	
	Для каждого Запись Из НастройкаКоэффициентов Цикл
		
		НаборЗаписей.Отбор.НачалоПериода.Установить(Запись.НачалоПериода);        
		НаборЗаписей.Отбор.КонецПериода.Установить(Запись.КонецПериода);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Запись);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
		МассивСкладов = Новый Массив;
		НаборЗаписейПлан.Отбор.НачалоПериода.Установить(Запись.НачалоПериода);        
  		НаборЗаписейПлан.Отбор.КонецПериода.Установить(Запись.КонецПериода);        
		НаборЗаписейПлан.Записать();
		НаборЗаписейПлан.Очистить();
		
		Для Каждого Склад Из Запись.Склады Цикл
			
			Если МассивСкладов.Найти(Склад) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСкладов.Добавить(Склад);
			
			НаборЗаписейПлан.Отбор.НачалоПериода.Установить(Запись.НачалоПериода);        
	  		НаборЗаписейПлан.Отбор.КонецПериода.Установить(Запись.КонецПериода);        
	  		НаборЗаписейПлан.Отбор.Склад.Установить(Склад.Значение);
			
			ЗаписьПлан = НаборЗаписейПлан.Добавить();
			ЗаписьПлан.НачалоПериода 	= Запись.НачалоПериода;
			ЗаписьПлан.КонецПериода 	= Запись.КонецПериода;
			ЗаписьПлан.Период 			= Запись.Период;
			ЗаписьПлан.Склад 			= Склад.Значение;
			
			НаборЗаписейПлан.Записать();
			НаборЗаписейПлан.Очистить();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // СохранитьНастройкиКоэффициентов()

&НаКлиенте
Функция ПроверитьНаЗаполнение()
	
	Если Не ЗначениеЗаполнено(Год) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Не заполнено поле года'"),,
		"Год");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеНаСервере() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеНаСервере()

	Результат = Истина;
	
	Для каждого СтрокаТабличнойЧасти Из НастройкаСертификатов Цикл
		ИндексСтроки = НастройкаСертификатов.Индекс(СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Сертификат.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле «Сертификат» должно быть заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					"НастройкаСертификатов[" + ИндексСтроки + "].Сертификат",
					,);
			Результат = Ложь;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ВидНоменклатуры.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле «Вид номенклатуры» должно быть заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					"НастройкаСертификатов[" + ИндексСтроки + "].ВидНоменклатуры",
					,);
			Результат = Ложь;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ДополнительноеСведение.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле «Дополнительное сведение» должно быть заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					"НастройкаСертификатов[" + ИндексСтроки + "].ДополнительноеСведение",
					,);
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеНаСервере()

&НаСервере
Функция ПолучитьТекстЗапросаПоискКоэффициентов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиКоэффициентов.НачалоПериода 	КАК НачалоПериода,
		|	НастройкиКоэффициентов.НачалоПериода 	КАК Период,
		|	НастройкиКоэффициентов.КонецПериода 	КАК КонецПериода,
		|	НастройкиКоэффициентов.Год 				КАК Год,
		|	НастройкиКоэффициентов.Месяц 			КАК Месяц
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&НастройкиКоэффициентов КАК НастройкиКоэффициентов
		|;
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцамСрезПоследних.Коэффициент, 1) 	КАК Коэффициент,
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцамСрезПоследних.КПП_Плюс, 1) 	КАК КПП_Плюс,
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцамСрезПоследних.КПП_Минус, 1) 	КАК КПП_Минус,
		|	ТЗ.НачалоПериода 															КАК НачалоПериода,
		|	ТЗ.КонецПериода 															КАК КонецПериода,
		|	ТЗ.Год 																		КАК Год,
		|	ТЗ.Месяц 																	КАК Месяц,
		|	ТЗ.Период 																	КАК Период
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам.СрезПоследних(&ТекущаяДата,) КАК ЗаработокМенеджераМножительПоМесяцамСрезПоследних
		|		ПО ТЗ.НачалоПериода = ЗаработокМенеджераМножительПоМесяцамСрезПоследних.НачалоПериода
		|			И ТЗ.КонецПериода = ЗаработокМенеджераМножительПоМесяцамСрезПоследних.КонецПериода
		|;
		|ВЫБРАТЬ
		|	ЗаработокМенеджераВыполнениеПлана.НачалоПериода 	КАК НачалоПериода,
		|	ЗаработокМенеджераВыполнениеПлана.КонецПериода 		КАК КонецПериода,
		|	ЗаработокМенеджераВыполнениеПлана.Склад 			КАК Склад
		|ИЗ
		|	РегистрСведений.ЗаработокМенеджераВыполнениеПлана.СрезПоследних(&ТекущаяДата,) КАК ЗаработокМенеджераВыполнениеПлана
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО ТЗ.НачалоПериода 	= ЗаработокМенеджераВыполнениеПлана.НачалоПериода
		|			И ТЗ.КонецПериода 	= ЗаработокМенеджераВыполнениеПлана.КонецПериода
		|;";
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура НастройкаКоэффициентовПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

#КонецОбласти

