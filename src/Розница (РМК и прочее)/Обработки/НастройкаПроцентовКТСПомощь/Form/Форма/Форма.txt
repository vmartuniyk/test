
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаНаличияМетаданныхПланаПродаж");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаРеквизитовИЭлементовФормы");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаЗагрузкиТаблицыНастройкаКоэффициентов");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверкаЗаписиТаблицыНастройкаКоэффициентов");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
	Файл = Новый Файл(ПолучитьПутьКБиблиотеке("\tests\Справочники\Склады\СоздатьЭлементСправочника.epf"));
	ЮнитТест.ПроверитьИстину(Файл.Существует(), НСтр("ru='Для работы теста необходимо подключить библиотеку создания элемента справочника «Склады».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

#Область ПроверкаНаличияМетаданныхПланаПродаж

&НаКлиенте
Процедура Тест_ПроверкаНаличияМетаданныхПланаПродаж(Параметр) Экспорт
	РезультатПроверки = ВыполнитьПроверкуНаличияПланаПродажНаСервере();
	ЮнитТест.ПроверитьИстину(РезультатПроверки.Результат, РезультатПроверки.СообщениеОбОшибке);
КонецПроцедуры // Тест_ПроверкаНаличияМетаданныхПланаПродаж()

&НаСервереБезКонтекста
Функция ВыполнитьПроверкуНаличияПланаПродажНаСервере()

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
#Область Регистр_ЗаработокМенеджераВыполнениеПлана

	Регистр_ЗаработокМенеджераВыполнениеПлана = Метаданные.РегистрыСведений.Найти("ЗаработокМенеджераВыполнениеПлана");
	Если Регистр_ЗаработокМенеджераВыполнениеПлана = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В конфигурации не удалось найти регистр сведений «Зароботок менеджера выполнение плана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИзмерениеКонецПериода = Регистр_ЗаработокМенеджераВыполнениеПлана.Измерения.Найти("КонецПериода");
	Если ИзмерениеКонецПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера выполнение плана» нету измерения «КонецПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеКонецПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера выполнение плана» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИзмерениеНачалоПериода = Регистр_ЗаработокМенеджераВыполнениеПлана.Измерения.Найти("НачалоПериода");
	Если ИзмерениеНачалоПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера выполнение плана» нету измерения «НачалоПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеНачалоПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера выполнение плана» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	ИзмерениеСклад = Регистр_ЗаработокМенеджераВыполнениеПлана.Измерения.Найти("Склад");
	Если ИзмерениеСклад = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера выполнение плана» нету измерения «Склад».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	Если ИзмерениеСклад.Тип <> Новый ОписаниеТипов("СправочникСсылка.Склады") Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «Склад» в регистре «Зароботок менеджера выполнение плана» должно иметь тип СправочникСсылка.Склады.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

#КонецОбласти 

#Область Регистр_ЗаработокМенеджераМножительПоМесяцам

	Регистр_ЗаработокМенеджераМножительПоМесяцам = Метаданные.РегистрыСведений.Найти("ЗаработокМенеджераМножительПоМесяцам");
	Если Регистр_ЗаработокМенеджераМножительПоМесяцам = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В конфигурации не удалось найти регистр сведений «Зароботок менеджера множитель по месяцам».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	ИзмерениеКонецПериода = Регистр_ЗаработокМенеджераМножительПоМесяцам.Измерения.Найти("КонецПериода");
	Если ИзмерениеКонецПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету измерения «КонецПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеКонецПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИзмерениеНачалоПериода = Регистр_ЗаработокМенеджераМножительПоМесяцам.Измерения.Найти("НачалоПериода");
	Если ИзмерениеНачалоПериода = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету измерения «НачалоПериода».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ИзмерениеНачалоПериода.Тип <> Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КонецПериода» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Дата.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РесурсКоэффициент = Регистр_ЗаработокМенеджераМножительПоМесяцам.Ресурсы.Найти("Коэффициент");
	Если РесурсКоэффициент = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету ресурса «Коэффициент».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РесурсКоэффициент.Тип <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «Коэффициент» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Число(5,2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Ресурс_КПП_Плюс = Регистр_ЗаработокМенеджераМножительПоМесяцам.Ресурсы.Найти("КПП_Плюс");
	Если Ресурс_КПП_Плюс = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету ресурса «КПП_Плюс».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Ресурс_КПП_Плюс.Тип <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КПП_Плюс» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Число(10,2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Ресурс_КПП_Минус = Регистр_ЗаработокМенеджераМножительПоМесяцам.Ресурсы.Найти("КПП_Минус");
	Если Ресурс_КПП_Минус = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='В регистре «Зароботок менеджера множитель по месяцам» нету ресурса «КПП_Минус».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Ресурс_КПП_Минус.Тип <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Измерения «КПП_Минус» в регистре «Зароботок менеджера множитель по месяцам» должно иметь тип Число(10,2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
#КонецОбласти 
	
	Возврат РезультатПроверки;

КонецФункции // ВыполнитьПроверкуНаличияПланапродажНаСервере()
 
#КонецОбласти

#Область ПроверкаЭлеметовИРеквизитовФормы

&НаКлиенте
Процедура Тест_ПроверкаРеквизитовИЭлементовФормы(Параметр) Экспорт
	РезультатПроверки = ПроверкаРеквизитовИЭлементовФормыНаСервере();
	ЮнитТест.ПроверитьИстину(РезультатПроверки.Результат, РезультатПроверки.СообщениеОбОшибке);
КонецПроцедуры // Тест_ПроверкаРеквизитовИЭлементовФормы()

&НаСервере
Функция ПроверкаРеквизитовИЭлементовФормыНаСервере()

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
	ТЗ_НастройкаКоэффициентов = РеквизитФормыВЗначение("НастройкаКоэффициентов", Тип("ТаблицаЗначений"));
	
	Колонка_КПП_Плюс = ТЗ_НастройкаКоэффициентов.Колонки.Найти("КПП_Плюс");
	Если Колонка_КПП_Плюс = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='На форме в таблице «НастройкаКоэффициентов» не найдено колонку «КПП_Плюс».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Колонка_КПП_Минус = ТЗ_НастройкаКоэффициентов.Колонки.Найти("КПП_Минус");
	Если Колонка_КПП_Минус = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='На форме в таблице «НастройкаКоэффициентов» не найдено колонку «КПП_Минус».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Колонка_Склады = ТЗ_НастройкаКоэффициентов.Колонки.Найти("Склады");
	Если Колонка_Склады = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='На форме в таблице «НастройкаКоэффициентов» не найдено колонку «Склады».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Колонка_КПП_Плюс.ТипЗначения <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Тип колонки «КПП_Плюс» должен быть число(10, 2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Колонка_КПП_Минус.ТипЗначения <> Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)) Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Тип колонки «КПП_Минус» должен быть число(10, 2).'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если Колонка_Склады.ТипЗначения <> Новый ОписаниеТипов("СписокЗначений") Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Тип колонки «Склады» должен быть СписокЗначений.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	Элемент_КПП_Плюс = Элементы.Найти("НастройкаКоэффициентовКПП_Плюс");
	Если Элемент_КПП_Плюс = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не найдено элемента формы НастройкаКоэффициентовКПП_Плюс.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Элемент_КПП_Минус = Элементы.Найти("НастройкаКоэффициентовКПП_Минус");
	Если Элемент_КПП_Минус = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не найдено элемента формы НастройкаКоэффициентовКПП_Минус.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;

	Элемент_Склады = Элементы.Найти("НастройкаКоэффициентовСклады");
	Если Элемент_Склады = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не найдено элемента формы НастройкаКоэффициентовСклады.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверкаРеквизитовИЭлементовФормыНаСервере()
 	
#КонецОбласти 

#Область ПроверкаЗагрузкиТаблицыНастройкаКоэффициентов

&НаСервереБезКонтекста
Функция СформироватьДанныеКоэффициентовДляЗагрузки()

	ДанныеДляЗагрузки = Новый Структура;
	
	Период = НачалоМесяца(ТекущаяДатаСеанса());
	Склад1 = СоздатьСклад();
	Склад2 = СоздатьСклад();
	Склад3 = СоздатьСклад();
	
	ВыполнитьТестовуюЗаписьВРегистрМножительПоМесяцам(Период);
	
	ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад1);
	ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад2);
	ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад3);
	
	ДанныеДляЗагрузки.Вставить("Период", Период);
	ДанныеДляЗагрузки.Вставить("Склад1", Склад1);
	ДанныеДляЗагрузки.Вставить("Склад2", Склад2);
	ДанныеДляЗагрузки.Вставить("Склад3", Склад3);
	
	Возврат ДанныеДляЗагрузки;

КонецФункции // СформироватьДанныеКоэффициентовДляЗагрузки()

&НаСервереБезКонтекста
Процедура УничтожитьДанныеКоэффициентовПоМесяцам(ДанныеДляЗагрузки)

	Если ТипЗнч(ДанныеДляЗагрузки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеДляЗагрузки.Период);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДанныеДляЗагрузки.Период);
	НаборЗаписей.Записать();
	
	Если ДанныеДляЗагрузки.Свойство("Склад1") Тогда
		СправочникОбъект = ДанныеДляЗагрузки.Склад1.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("Склад2") Тогда
		СправочникОбъект = ДанныеДляЗагрузки.Склад2.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("Склад3") Тогда
		СправочникОбъект = ДанныеДляЗагрузки.Склад3.ПолучитьОбъект();
		СправочникОбъект.УстановитьПометкуУдаления(Истина);
		СправочникОбъект.Записать();
		СправочникОбъект.Удалить();
	КонецЕсли;

КонецПроцедуры // УничтожитьДанныеКоэффициентовПоМесяцам()
 

&НаСервереБезКонтекста
Процедура ВыполнитьТестовуюЗаписьВРегистрМножительПоМесяцам(Период)

	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.НачалоПериода.Установить(Период);
	НаборЗаписей.Отбор.КонецПериода.Установить(КонецМесяца(Период));
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.НачалоПериода 	= Период;
	Запись.КонецПериода 	= КонецМесяца(Период);
	Запись.Коэффициент 		= 10;
	Запись.КПП_Плюс 		= 15;
	Запись.КПП_Минус 		= 5;
	
	НаборЗаписей.Записать();

КонецПроцедуры // ВыполнитьТестовуюЗаписьВРегистрМножительПоМесяцам()

&НаСервереБезКонтекста
Процедура ВыполнитьТестовуюЗаписьВРегистрВыполнениеПлана(Период, Склад)

	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.НачалоПериода.Установить(Период);
	НаборЗаписей.Отбор.КонецПериода.Установить(КонецМесяца(Период));
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период 			= Период;
	Запись.НачалоПериода 	= Период;
	Запись.КонецПериода 	= КонецМесяца(Период);
	Запись.Склад 			= Склад;
	
	НаборЗаписей.Записать();	

КонецПроцедуры // ВыполнитьтестовуюЗаписьВРегистрВыполнениеПлана()


&НаСервере
Функция ВыполнитьПоискКоэффициентовЗаПериод(ДанныеДляЗагрузки)

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
	СтруктураПоиска = Новый Структура("НачалоПериода, КонецПериода", ДанныеДляЗагрузки.Период, НачалоДня(КонецМесяца(ДанныеДляЗагрузки.Период)));	
	РезультатПоиска = НастройкаКоэффициентов.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 ИЛИ РезультатПоиска.Количество() > 1 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РезультатПоиска[0].Коэффициент <> 10 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить Коэффициент в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РезультатПоиска[0].КПП_Плюс <> 15 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить КПП_Плюс в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если РезультатПоиска[0].КПП_Минус <> 5 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить КПП_Минус в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТестовыйСписокСкладов = РезультатПоиска[0].Склады;
	
	Если ТестовыйСписокСкладов.Количество() <> 3 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось загрузить Склады в таблицу «НастройкаКоэффициентов».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТестовыйСписокСкладов.НайтиПозначению(ДанныеДляЗагрузки.Склад1) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать склад №1 в регистр «ЗаработокМенеджераВыполнениеПлана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТестовыйСписокСкладов.НайтиПозначению(ДанныеДляЗагрузки.Склад2) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать склад №2 в регистр «ЗаработокМенеджераВыполнениеПлана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТестовыйСписокСкладов.НайтиПозначению(ДанныеДляЗагрузки.Склад3) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать склад №3 в регистр «ЗаработокМенеджераВыполнениеПлана».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ВыполнитьТестовыйПоискКоэффициентовЗаПериод()
 

#КонецОбласти 

#Область ПроверкаЗаписиТаблицыНастройкаКоэффициентов

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладовДляТеста()

	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(СоздатьСклад());
	СписокСкладов.Добавить(СоздатьСклад());
	СписокСкладов.Добавить(СоздатьСклад());
	
	Возврат СписокСкладов;

КонецФункции // ПолучитьСписокСкладовДляТеста()
 
&НаСервереБезКонтекста
Функция ПроверитьРезультатЗаписиНастройкиКоэффициентовНаСервере(Период, СписокСкладов)

	РезультатПроверки = Новый Структура("Результат, СообщениеОбОшибке", Истина, "");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Коэффициент КАК Коэффициент,
	                      |	КПП_Плюс	КАК КПП_Плюс,
	                      |	КПП_Минус 	КАК КПП_Минус
	                      |ИЗ
	                      |	РегистрСведений.ЗаработокМенеджераМножительПоМесяцам.СрезПоследних(
	                      |			,
	                      |			НачалоПериода = &НачалоПериода
	                      |				И КонецПериода = &КонецПериода)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Склад КАК Склад
	                      |ИЗ
	                      |	РегистрСведений.ЗаработокМенеджераВыполнениеПлана.СрезПоследних(
	                      |			,
	                      |			НачалоПериода = &НачалоПериода
	                      |				И КонецПериода = &КонецПериода)");
						  
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(КонецМесяца(Период)));
	
	РезультатыЗапроса 		= Запрос.ВыполнитьПакет();
	ВыборкаКоэффициенты 	= РезультатыЗапроса[0].Выбрать();
	МассивТестовыхСкладов   = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
	
	Если Не ВыборкаКоэффициенты.Следующий() Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать коэффициенты в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ВыборкаКоэффициенты.Коэффициент <> 50 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать Коэффициент в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ВыборкаКоэффициенты.КПП_Плюс <> 10 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать КПП_Плюс в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ВыборкаКоэффициенты.КПП_Минус <> 20 Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать КПП_Минус в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если МассивТестовыхСкладов.Найти(СписокСкладов[0].Значение) = Неопределено ИЛИ МассивТестовыхСкладов.Найти(СписокСкладов[1].Значение) = Неопределено ИЛИ МассивТестовыхСкладов.Найти(СписокСкладов[2].Значение) = Неопределено Тогда
		РезультатПроверки.Результат 		= Ложь;
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru='Не удалось записать Склады в регистр ЗаработокМенеджераМножительПоМесяцам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции // ПроверитьРезультатЗаписиНастройкиКоэффициентовНаСервере()

&НаСервереБезКонтекста
Процедура ОчиститьРезультатыНастройкиКоэффициентовНаСервере(Период, СписокСкладов)

	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераМножительПоМесяцам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ЗаработокМенеджераВыполнениеПлана.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Записать();
	
	СправочникОбъект = СписокСкладов[0].Значение.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();
	
	СправочникОбъект = СписокСкладов[1].Значение.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();
	
	СправочникОбъект = СписокСкладов[2].Значение.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Истина);
	СправочникОбъект.Записать();
	СправочникОбъект.Удалить();

КонецПроцедуры // ОчиститьРезультатыНастройкиКоэффициентовНаСервере()

#КонецОбласти 

#Область Справочники

&НаСервереБезКонтекста
Функция СоздатьСклад()
	
	Наименование = ПреобразоватьУникальныйИдентификаторВНаименование("Склад");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	Бибилиотека = ПолучитьБиблиотекуСклад();
	
	Возврат Бибилиотека.СоздатьЭлементСправочника(ПараметрыЗаполнения);

КонецФункции // СоздатьСклад()

#КонецОбласти 

#Область Библиотеки

&НаСервереБезКонтекста
Функция ПолучитьБиблиотеку(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектИзФайловойСистемы(ПутьКВнешнемуОбъекту);

КонецФункции // ПолучитьБиблиотеку()

&НаКлиенте
Функция ПолучитьПутьКБиблиотеке(ПутьКБиблиотеке)

	WshShell 	= Новый COMobject("wscript.shell"); 
	WshEnvirUsr = WshShell.Environment("USER");

	ПутьКРепозиторию 		= WshEnvirUsr.Item("TEST_REPOSITORY");
	ПутьКВнешнемуОбъекту 	= ПутьКРепозиторию + ПутьКБиблиотеке;
	
	Возврат ПутьКВнешнемуОбъекту;

КонецФункции // ПолучитьПутьКБиблиотеке()

&НаСервереБезКонтекста
Функция ПреобразоватьУникальныйИдентификаторВНаименование(Префикс)
	Идентификатор = Новый УникальныйИдентификатор;
	Возврат Префикс + СтрЗаменить(Строка(Идентификатор), "-", "_");
КонецФункции // ПереобразоватьУникальныйИдентификаторВНаименование()

&НаСервереБезКонтекста
Функция ПолучитьБиблиотекуСклад()
	ПутьКБиблиотеке = "\tests\Справочники\Склады\СоздатьЭлементСправочника.epf";
 	Возврат ПолучитьБиблиотеку(ПутьКБиблиотеке);
КонецФункции // ПолучитьБиблиотекуСклад()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;	
	КонецЕсли;
	
	ОтветственныйПользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("df42269d-c4e0-11e1-9d4d-001e673c80fc"));
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ОтветственныйПользователь = ТекущийПользователь Или РольДоступна("ПолныеПрава") Тогда 
		Элементы.НастройкиКоэффициентовЗП.Видимость = Истина;
	Иначе 
		Элементы.НастройкиКоэффициентовЗП.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Год 				= НачалоГода(ТекущаяДата());
	ГодПредставление    = Формат(Год, "ДФ=yyyy");
	
	ЗагрузитьНастройкиКТСПомощи();
	ЗагрузитьНастройкиПроцентов();
	ЗагрузитьНастройкиСертификатов();
	ЗагрузитьНастройкиЗПРозница();

	
	СформироватьСписокВыбораМесяца();
	ЗаполнитьНастройкаКоэффициентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		РезультатОтвета = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
			ЗаписатьНастройкиНаСервере();
		ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроцентПродажыУслугиПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентИсполненияУслугиПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвойствоПомощьКТСПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСертификаты1ПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтПродажыСертификатаПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГодПредставлениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если Модифицированность Тогда 
		Режим 					= РежимДиалогаВопрос.ДаНет;
		ТекстВопроса 			= НСтр("ru='Значение коэффициентов было изменено. Сохранить изменения?'");
		ЗаголовокВопроса		= НСтр("ru='Сохранение изменений'");
		ОповещаниеСохранения    = Новый ОписаниеОповещения("ОповещениеОСохраненииСпискаКоэффициентов", ЭтаФорма);
		ПоказатьВопрос(ОповещаниеСохранения, ТекстВопроса, Режим, 0, КодВозвратаДиалога.Да, ЗаголовокВопроса);
		Возврат;
	КонецЕсли;
	
	ВыборГодаНаКлиенте(Элемент, Год);	

КонецПроцедуры

&НаКлиенте
Процедура ГодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда 
		Режим 					= РежимДиалогаВопрос.ДаНет;
		ТекстВопроса 			= НСтр("ru='Значение коэффициентов было изменено. Сохранить изменения?'");
		ЗаголовокВопроса		= НСтр("ru='Сохранение изменений'");
		ОповещаниеСохранения    = Новый ОписаниеОповещения("ОповещениеОСохраненииСпискаКоэффициентов", ЭтаФорма);
		ПоказатьВопрос(ОповещаниеСохранения, ТекстВопроса, Режим, 0, КодВозвратаДиалога.Да, ЗаголовокВопроса);
		Возврат;
	КонецЕсли;
	
	ВыборГодаНаКлиенте(Элемент, Год);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаПроцетов

&НаКлиенте
Процедура НастройкаПроцетовПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаКоэффициентов

&НаКлиенте
Процедура НастройкаКоэффициентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоэффициентовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоэффициентовКоэффициентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаКоэффициентов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		ЗаписатьКоэффициентПоМагазину(ТекущиеДанные.Месяц, ТекущиеДанные.Коэффициент);
	КонецЕсли;
	
	ЗаписатьКоэффициентПоСкладу(ТекущиеДанные.Месяц, ТекущиеДанные.Склад, ТекущиеДанные.Коэффициент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоэффициентовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаКоэффициентов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		КоэффицентыМенеджера.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		КоэффицентыМенеджера.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТаблицуКоэффициентовМенеджеров(ТекущиеДанные.Месяц, ТекущиеДанные.Склад);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникКомпетентностиПродавцов(Команда)
	ОткрытьФорму("ВнешняяОбработка.НастройкаПроцентовКТСПомощь.Форма.ФормаСправочникаКомпетентности", , ЭтаФорма, Новый УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКоэффицентыМенеджера

&НаКлиенте
Процедура КоэффицентыМенеджераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КоэффицентыМенеджераПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КоэффицентыМенеджераКоэффициентПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 		= Ложь;
	СписокКоэффициентов  		= ПолучитьСписокЗначенийКоэффициентовМенеджеров();
	ОписаниеВыбораКоэффициента  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораКоэффициента", ЭтаФорма);
	
	ТекущиеДанные = Элементы.КоэффицентыМенеджера.ТекущиеДанные;
	
	СписокКоэффициентов.ПоказатьВыборЭлемента(ОписаниеВыбораКоэффициента, НСтр("ru='Выберите коэффициент эфективности продавца'"), ТекущиеДанные.Коэффициент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВыбораКоэффициента(ВыбЭлемент, Параметры) Экспорт

	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.КоэффицентыМенеджера.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеКоэфф 						= ЗаписатьКоэффициентМенеджера(ТекущиеДанные.Месяц, ТекущиеДанные.Менеджер, ВыбЭлемент.Значение);
	ТекущиеДанные.Коэффициент 				= ВыбЭлемент.Значение;
	ТекущиеДанные.КоэффициентПредставление 	= ПредставлениеКоэфф;

КонецПроцедуры // ОписаниеОповещенияВЫборка()
 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаСертификатов

&НаКлиенте
Процедура НастройкаСертификатовПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыВыбора(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.ЗагрузитьЗначения(Результат);
	
КонецПроцедуры // ОбработкаЗакрытияФормыВыбора()
 

&НаКлиенте
Процедура НастройкаСертификатовСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидНоменклатурыСертификаты.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо задать настройку вида номенклатуры для сертификатов'"), , "ВидНоменклатурыСертификаты");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкаСертификатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		Номенклатура = ТекущиеДанные.Сертификат;
	КонецЕсли;
	
	ПараметрыФормы 		= Новый Структура("Номенклатура, ВидНоменклатуры", Номенклатура, ВидНоменклатурыСертификаты);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыВыбораСертификата", ЭтаФорма, ТекущиеДанные);
	
	ОткрытьФорму("ВнешняяОбработка.НастройкаПроцентовКТСПомощь.Форма.ФормаВыбораСертификата", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);							
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыВыбораСертификата(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.Сертификат	= Результат;

КонецПроцедуры // ОбработкаЗакрытияформыВыбораСертификата()
 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаСертикатов

&НаКлиенте
Процедура НастройкаЗПРозницаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗПРозницаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗПРозницаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Истина;
КонецПроцедуры  
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	Если ПроверитьНаЗаполнение() = ЛОЖЬ Тогда
		Возврат;	
	КонецЕсли;
	ЗаписатьНастройкиНаСервере();
	Модифицированность=Ложь;
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если ПроверитьНаЗаполнение() = ЛОЖЬ Тогда
		Возврат;	
	КонецЕсли;
	ЗаписатьНастройкиНаСервере();
	Модифицированность=Ложь;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборГодаНаКлиенте(Элемент, знач НачалоПериода)	
	ВидПериода	 		= ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
	СписокВыбора 		= ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	НачальноеЗначение 	= СписокВыбора.НайтиПоЗначению(НачалоПериода);
	Обработчик 			= Новый ОписаниеОповещения("ВыборПериодаИзВыпадающегоСписка", ЭтаФорма, Новый Структура("Элемент", Элемент));
	ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальноеЗначение);	
КонецПроцедуры // ВыборГодаНаКлиенте()

&НаКлиенте
Процедура ВыборПериодаИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") И ВыбранныйЭлемент.ПолучитьИдентификатор() = 0 Тогда
		ВыборГодаНаКлиенте(ДополнительныеПараметры.Элемент, ВыбранныйЭлемент.Значение);
	ИначеЕсли ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") И ВыбранныйЭлемент.ПолучитьИдентификатор() = 8 Тогда
		ВыборГодаНаКлиенте(ДополнительныеПараметры.Элемент, ВыбранныйЭлемент.Значение);
	Иначе
		Год 				= ВыбранныйЭлемент.Значение;
		ГодПредставление    = ВыбранныйЭлемент.Представление;
		ЗаполнитьНастройкаКоэффициентов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеОСохраненииСпискаКоэффициентов(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		// СохранитьНастройкаКоэффициентов();
	КонецЕсли;
	ВыборГодаНаКлиенте(Элементы.ГодПредставление, Год);	
КонецФункции // ОповещениеОСохраненииСпискаКоэффициентов()
 

&НаСервере
Процедура ЗаписатьКоэффициентПоМагазину(Месяц, Коэффициент)

	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.КТС_КоэффициентыСезонностиМагазинов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Месяц);
	
	Запись 				= НаборЗаписей.Добавить();
	Запись.Период 		= Месяц;
	Запись.Коэффициент 	= Коэффициент;
	
	НаборЗаписей.Записать();

КонецПроцедуры // ЗаписатьКоэффициентПоМАгазину()

&НаСервере
Процедура ЗаписатьКоэффициентПоСкладу(Месяц, Склад, Коэффициент)

	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.КТС_КоэффициентыВыполненияПланаМагазинами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Месяц);
	НаборЗаписей.Отбор.Склад.Установить(Склад);
	
	Запись 				= НаборЗаписей.Добавить();
	Запись.Период 		= Месяц;
	Запись.Склад 		= Склад;
	Запись.Коэффициент 	= Коэффициент;
	
	НаборЗаписей.Записать();                                           

КонецПроцедуры // ЗаписатьКоэффициентПоСкладу()

&НаСервере
Процедура ЗагрузитьТаблицуКоэффициентовМенеджеров(Месяц, Склад)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаТаблицаКоэффициентовМенеджера();
	
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Месяц", Месяц);
	
	КоэффицентыМенеджера.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьТаблицуКоэффициентовПродавцов()

&НаСервере
Функция ТекстЗапросаТаблицаКоэффициентовМенеджера()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	Склады.Подразделение
	               |ПОМЕСТИТЬ ТаблицаПодразделенийСклада
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.Ссылка = &Склад
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ПОМЕСТИТЬ ПользователиПодразделения
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодразделенийСклада КАК ТаблицаПодразделенийСклада
	               |		ПО Пользователи.ТекущееПодразделение = ТаблицаПодразделенийСклада.Подразделение
	               |			И (Пользователи.ПометкаУдаления = ЛОЖЬ)
	               |			И (Пользователи.Недействителен = ЛОЖЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Месяц КАК Месяц,
	               |	ПользователиПодразделения.Ссылка КАК Менеджер,
	               |	ЕСТЬNULL(КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.КоэффициентЭффективности, ЗНАЧЕНИЕ(Справочник.КТС_КоэффициентыКомпетентностиМенеджеров.ПустаяСсылка)) КАК Коэффициент,
	               |	ЕСТЬNULL(КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.КоэффициентЭффективности.Наименование, """") КАК КоэффициентПредставление
	               |ИЗ
	               |	ПользователиПодразделения КАК ПользователиПодразделения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТС_КоэффициентыЭффективностиПродавца.СрезПоследних(&ДатаСреза, ) КАК КТС_КоэффициентыЭффективностиПродавцаСрезПоследних
	               |		ПО ПользователиПодразделения.Ссылка = КТС_КоэффициентыЭффективностиПродавцаСрезПоследних.Менеджер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПользователиПодразделения.Ссылка.Наименование";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаТаблицаКоэффициентовМенеджера()

&НаСервереБезКонтекста
Функция ПолучитьСписокЗначенийКоэффициентовМенеджеров()
	УстановитьПривилегированныйРежим(Истина);
	СписокКоэффициентов = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка КАК Значение,
	                      |	Наименование КАК Представление
	                      |ИЗ
	                      |	Справочник.КТС_КоэффициентыКомпетентностиМенеджеров
	                      |ГДЕ
	                      |	ПометкаУдаления = ЛОЖЬ");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКоэффициентов.Добавить(Выборка.Значение, Выборка.Представление);
	КонецЦикла;
	Возврат СписокКоэффициентов;
КонецФункции // ПолучитьСписокЗначенийКоэффициентовМенеджеров()

&НаСервере
Функция ЗаписатьКоэффициентМенеджера(Месяц, Менеджер, Коэффициент)

	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.КТС_КоэффициентыЭффективностиПродавца.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Месяц);
	НаборЗаписей.Отбор.Менеджер.Установить(Менеджер);
	
	Запись 								= НаборЗаписей.Добавить();
	Запись.Период 						= Месяц;
	Запись.Менеджер 					= Менеджер;
	Запись.КоэффициентЭффективности 	= Коэффициент;
	Запись.Значения 					= Коэффициент.Коэффициент;
	
	НаборЗаписей.Записать();
	
	Возврат Коэффициент.Наименование;

КонецФункции // ЗаписатьКоэффициентМенеджера()
 



&НаСервере
Процедура ЗагрузитьНастройкиКТСПомощи()

	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаКТСПомощь();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);

КонецПроцедуры // ЗагрузитьНастройкиКТСПомощи()

&НаСервере
Функция ТекстЗапросаКТСПомощь()

	ТекстЗапоса = "ВЫБРАТЬ
	              |	КТС_Константы_ПроцентПродажыУслуги.Значение КАК ПроцентПродажыУслуги,
	              |	ЕСТЬNULL(КТС_Константы_ПроцентИсполненияУслуги.Значение, 0) КАК ПроцентИсполненияУслуги,
	              |	ЕСТЬNULL(КТС_Константы_СвойствоПомощьКТС.Значение, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)) КАК СвойствоПомощьКТС,
	              |	ЕСТЬNULL(КТС_Константы_ВидНоменклатурыСертификаты.Значение, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатурыСертификаты,
	              |	ЕСТЬNULL(КТС_Константы_ПроцентОтПродажыСертификата.Значение, 0) КАК ПроцентОтПродажыСертификата,
				  |	ЕСТЬNULL(КТС_Константы_ОсновнойКалендарьЗП.Значение, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)) КАК Календарь
	              |ИЗ
	              |	Справочник.КТС_Константы КАК КТС_Константы_ПроцентПродажыУслуги
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ПроцентИсполненияУслуги
	              |		ПО (КТС_Константы_ПроцентИсполненияУслуги.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ПроцентИсполненияУслуги))
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_СвойствоПомощьКТС
	              |		ПО (КТС_Константы_СвойствоПомощьКТС.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.СвойствоПомощьКТС))
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ВидНоменклатурыСертификаты
	              |		ПО (КТС_Константы_ВидНоменклатурыСертификаты.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ВидНоменклатурыСертификаты))
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ПроцентОтПродажыСертификата
	              |		ПО (КТС_Константы_ПроцентОтПродажыСертификата.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ПроцентОтПродажыСертификата))
				  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КТС_Константы КАК КТС_Константы_ОсновнойКалендарьЗП
	              |		ПО (КТС_Константы_ОсновнойКалендарьЗП.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ОсновнойКалендарьЗП))
				  |ГДЕ
				  |	КТС_Константы_ПроцентПродажыУслуги.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ПроцентПродажыУслуги)";
	
	Возврат ТекстЗапоса;

КонецФункции // ТекстЗапросаКТСПомощь()
 

&НаСервере
Процедура ЗагрузитьНастройкиПроцентов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КТСПомощь.Номенклатура,
	                      |	КТСПомощь.ПроцентПродажы,
	                      |	КТСПомощь.ПроцентИсполнения
	                      |ИЗ
	                      |	РегистрСведений.КТСПомощь КАК КТСПомощь");
						  
	НастройкаПроцентов.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьНастройкиПроцентов()

&НаСервере
Процедура ЗагрузитьНастройкиСертификатов()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Сертификат					КАК Сертификат,
	                      |	ВидНоменклатуры				КАК ВидНоменклатуры,
	                      |	Процент						КАК Процент,
	                      |	ДополнительноеСведение		КАК ДополнительноеСведение
	                      |ИЗ
	                      |	РегистрСведений.КТС_НастройкаПроцентовСертификатов");
						  
	НастройкаСертификатов.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьНастройкиСертификатов()()
 
&НаСервере
Процедура ЗаписатьНастройкиНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьЗначениеКТСКонстанты("ПроцентПродажыУслуги", ПроцентПродажыУслуги);	
	ЗаписатьЗначениеКТСКонстанты("ПроцентИсполненияУслуги", ПроцентИсполненияУслуги);
	ЗаписатьЗначениеКТСКонстанты("СвойствоПомощьКТС", СвойствоПомощьКТС);
	ЗаписатьЗначениеКТСКонстанты("ВидНоменклатурыСертификаты", ВидНоменклатурыСертификаты);
	ЗаписатьЗначениеКТСКонстанты("ПроцентОтПродажыСертификата", ПроцентОтПродажыСертификата);
	
	СохранитьНастройкиПроцентов();
	СохранитьНастройкиСертификатов();
	СохранитьНастройкиЗПРозница();


КонецПроцедуры // ЗаписатьНастройкиНаСервере()

&НаСервере
Процедура ЗаписатьЗначениеКТСКонстанты(ИмяКонстанты, Значение)
	СпрОбъект = ПредопределенноеЗначение("Справочник.КТС_Константы." + ИмяКонстанты).ПолучитьОбъект();
	СпрОбъект.Значение = Значение;
	СпрОбъект.Записать();
КонецПроцедуры // ЗаписатьЗначениеКТСКонстанты()
 

&НаСервере
Процедура СохранитьНастройкиПроцентов()
	
	НаборЗаписей = РегистрыСведений.КТСПомощь.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(НастройкаПроцентов.Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры // СохранитьНастройкиПроцентов()

&НаСервере
Процедура СохранитьНастройкиСертификатов()

	НаборЗаписей = РегистрыСведений.КТС_НастройкаПроцентовСертификатов.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(НастройкаСертификатов.Выгрузить());
	НаборЗаписей.Записать();

КонецПроцедуры // СохранитьНастройкиСертификатов()

&НаСервере
Процедура СформироватьСписокВыбораМесяца()
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  1; ЭлементСписка.Значение = "Январь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  2; ЭлементСписка.Значение = "Февраль";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  3; ЭлементСписка.Значение = "Март";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  4; ЭлементСписка.Значение = "Апрель";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  5; ЭлементСписка.Значение = "Май";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  6; ЭлементСписка.Значение = "Июнь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  7; ЭлементСписка.Значение = "Июль";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  8; ЭлементСписка.Значение = "Август";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление =  9; ЭлементСписка.Значение = "Сентябрь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление = 10; ЭлементСписка.Значение = "Октябрь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление = 11; ЭлементСписка.Значение = "Ноябрь";
	ЭлементСписка = СписокМесяцов.Добавить(); ЭлементСписка.Представление = 12; ЭлементСписка.Значение = "Декабрь";
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкаКоэффициентов()
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос 			= Новый Запрос;
	Запрос.Текст    = ТекстЗапросаНастройкаКоэффициентов();
	
	Запрос.УстановитьПараметр("Год", Год(Год));
	Запрос.УстановитьПараметр("СвойствоСкладКоэффициентЗП", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоКоэффициентЗПДляСклада());
	
	РезультатыЗапроса 	= Запрос.ВыполнитьПакет();
	
	ДеревоКоэффициентов = РезультатыЗапроса[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ТаблицаСкладов		= РезультатыЗапроса[5].Выгрузить();
	
	Для Каждого СтрокаДерева ИЗ ДеревоКоэффициентов.Строки Цикл
		СтруктураПоиска  = Новый Структура("Месяц", СтрокаДерева.Месяц);
		РезультатыПоиска = ТаблицаСкладов.НайтиСтроки(СтруктураПоиска);
		СтрокиРодителя	 = СтрокаДерева.Строки;
		Для каждого РезультатПоиска Из РезультатыПоиска Цикл
			НоваяСтрока = СтрокиРодителя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатПоиска);
		КонецЦикла; 
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ДеревоКоэффициентов, "НастройкаКоэффициентов");
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаНастройкаКоэффициентов()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	КТС_Константы.Значение КАК Календарь
	               |ПОМЕСТИТЬ ТаблицаКалендарь
	               |ИЗ
	               |	Справочник.КТС_Константы КАК КТС_Константы
	               |ГДЕ
	               |	КТС_Константы.Ссылка = ЗНАЧЕНИЕ(Справочник.КТС_Константы.ОсновнойКалендарьЗП)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ) КАК Месяц,
	               |	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	               |	0 КАК Коэффициент
	               |ПОМЕСТИТЬ ТаблицаДат
	               |ИЗ
	               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКалендарь КАК ТаблицаКалендарь
	               |		ПО КалендарныеГрафики.Календарь = ТаблицаКалендарь.Календарь
	               |			И (КалендарныеГрафики.Год = &Год)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДат.Месяц КАК Месяц,
	               |	ТаблицаДат.Склад,
	               |	ЕСТЬNULL(КТС_КоэффициентыСезонностиМагазинов.Коэффициент, 1) КАК Коэффициент,
	               |	1 КАК ИндексСтроки
	               |ИЗ
	               |	ТаблицаДат КАК ТаблицаДат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТС_КоэффициентыСезонностиМагазинов КАК КТС_КоэффициентыСезонностиМагазинов
	               |		ПО ТаблицаДат.Месяц = КТС_КоэффициентыСезонностиМагазинов.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Месяц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Склады) КАК Склад
	               |ПОМЕСТИТЬ ТаблицаСкладов
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СвойствоСкладКоэффициентЗП
	               |	И ДополнительныеСведения.Значение = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДат.Месяц,
	               |	ТаблицаСкладов.Склад
	               |ПОМЕСТИТЬ ПериодыПоСкладам
	               |ИЗ
	               |	ТаблицаДат КАК ТаблицаДат
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
	               |		ПО (ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыПоСкладам.Месяц,
	               |	ПериодыПоСкладам.Склад,
	               |	ЕСТЬNULL(ТабКоэфф.Коэффициент, 1) КАК Коэффициент,
	               |	0 КАК ИндексСтроки
	               |ИЗ
	               |	ПериодыПоСкладам КАК ПериодыПоСкладам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КТС_КоэффициентыВыполненияПланаМагазинами КАК ТабКоэфф
	               |		ПО ПериодыПоСкладам.Месяц = ТабКоэфф.Период
	               |			И ПериодыПоСкладам.Склад = ТабКоэфф.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодыПоСкладам.Склад.Наименование";
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаНастройкаКоэффициентов()

&НаКлиенте
Функция ПроверитьНаЗаполнение()
	
	Если Не ЗначениеЗаполнено(Год) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Не заполнено поле года'"),,
		"Год");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеНаСервере() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СуммаБезДМ = НастройкаЗПРозница.Итог("ПроцентБезДМ");
	СуммаСДМ = НастройкаЗПРозница.Итог("ПроцентСДМ");
	
	Если СуммаБезДМ > 0 И СуммаБезДМ <> 100 Тогда 	
		СообщениеОбОшибке = НСтр("ru='В закладке «Настройки  процент ЗП от продаж». Сумма по процентам БезДМ должна быть 100.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;	
	КонецЕсли;
	
	Если СуммаСДМ > 0 И СуммаСДМ <> 100 Тогда   	
		СообщениеОбОшибке = НСтр("ru=''В закладке «Настройки  процент ЗП от продаж». Сумма по процентам СДМ должна быть 100.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;   
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеНаСервере()

	Результат = Истина;
	
	Для каждого СтрокаТабличнойЧасти Из НастройкаСертификатов Цикл
		ИндексСтроки = НастройкаСертификатов.Индекс(СтрокаТабличнойЧасти);
		Если СтрокаТабличнойЧасти.Сертификат.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле «Сертификат» должно быть заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					"НастройкаСертификатов[" + ИндексСтроки + "].Сертификат",
					,);
			Результат = Ложь;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ВидНоменклатуры.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле «Вид номенклатуры» должно быть заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					"НастройкаСертификатов[" + ИндексСтроки + "].ВидНоменклатуры",
					,);
			Результат = Ложь;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ДополнительноеСведение.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле «Дополнительное сведение» должно быть заполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					,
					"НастройкаСертификатов[" + ИндексСтроки + "].ДополнительноеСведение",
					,);
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ПроверитьЗаполнениеНаСервере()

&НаСервере
Функция ПолучитьТекстЗапросаПоискКоэффициентов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиКоэффициентов.НачалоПериода 	КАК НачалоПериода,
		|	НастройкиКоэффициентов.НачалоПериода 	КАК Период,
		|	НастройкиКоэффициентов.КонецПериода 	КАК КонецПериода,
		|	НастройкиКоэффициентов.Год 				КАК Год,
		|	НастройкиКоэффициентов.Месяц 			КАК Месяц
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&НастройкиКоэффициентов КАК НастройкиКоэффициентов
		|;
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцамСрезПоследних.Коэффициент, 1) 	КАК Коэффициент,
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцамСрезПоследних.КПП_Плюс, 1) 	КАК КПП_Плюс,
		|	ЕСТЬNULL(ЗаработокМенеджераМножительПоМесяцамСрезПоследних.КПП_Минус, 1) 	КАК КПП_Минус,
		|	ТЗ.НачалоПериода 															КАК НачалоПериода,
		|	ТЗ.КонецПериода 															КАК КонецПериода,
		|	ТЗ.Год 																		КАК Год,
		|	ТЗ.Месяц 																	КАК Месяц,
		|	ТЗ.Период 																	КАК Период
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокМенеджераМножительПоМесяцам.СрезПоследних(&ТекущаяДата,) КАК ЗаработокМенеджераМножительПоМесяцамСрезПоследних
		|		ПО ТЗ.НачалоПериода = ЗаработокМенеджераМножительПоМесяцамСрезПоследних.НачалоПериода
		|			И ТЗ.КонецПериода = ЗаработокМенеджераМножительПоМесяцамСрезПоследних.КонецПериода
		|;
		|ВЫБРАТЬ
		|	ЗаработокМенеджераВыполнениеПлана.НачалоПериода 	КАК НачалоПериода,
		|	ЗаработокМенеджераВыполнениеПлана.КонецПериода 		КАК КонецПериода,
		|	ЗаработокМенеджераВыполнениеПлана.Склад 			КАК Склад
		|ИЗ
		|	РегистрСведений.ЗаработокМенеджераВыполнениеПлана.СрезПоследних(&ТекущаяДата,) КАК ЗаработокМенеджераВыполнениеПлана
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО ТЗ.НачалоПериода 	= ЗаработокМенеджераВыполнениеПлана.НачалоПериода
		|			И ТЗ.КонецПериода 	= ЗаработокМенеджераВыполнениеПлана.КонецПериода
		|;";
		
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура НастройкаКоэффициентовПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры


#КонецОбласти

#Область ЗагрузитьНастройкиЗПРозница

&НаСервере
Процедура ЗагрузитьНастройкиЗПРозница()
	ИнициализироватьТаблицуНастройкиЗПРозница();
	ЗаполнитьТаблицуНастройкиЗПРозница();	
КонецПроцедуры//ЗагрузитьНастройкиЗПРозница

&НаСервере
Процедура ИнициализироватьТаблицуНастройкиЗПРозница()
	
	РегистрНастроек = Метаданные.РегистрыСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера;
	Индекс = 0;
	Для каждого Ресурс Из РегистрНастроек.Ресурсы Цикл
		НоваяСтрока = НастройкаЗПРозница.Добавить();
		НоваяСтрока.Наименование = Ресурс.Синоним; 
		НоваяСтрока.Индекс = Индекс;
		Индекс = Индекс +1; 		
	КонецЦикла; 	

КонецПроцедуры // ИнициализироватьТаблицуНастройкиЗПРозница()

&НаСервере
Процедура ЗаполнитьТаблицуНастройкиЗПРозница()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаЗаписиТаблицаНастройков();
	Запрос.УстановитьПараметр("ОтборНаименование",НастройкаЗПРозница.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТСтрока					= НастройкаЗПРозница.Получить(Выборка.Индекс);
		ТСтрока.ПроцентСДМ 		= Выборка.ПроцентСДМ;
		ТСтрока.ПроцентБезДМ 	= Выборка.ПроцентБезДМ;  			
	КонецЦикла;    	
КонецПроцедуры // ЗаполнитьТаблицуНастройкиЗПРозница()

&НаСервере
Функция ПолучитьТекстЗапросаЗаписиТаблицаНастройков()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ОтборНаименование.Наименование КАК СТРОКА(200)) КАК Наименование,
	               |	ОтборНаименование.Индекс КАК Индекс
	               |ПОМЕСТИТЬ ТЗ_Отбор
	               |ИЗ
	               |	&ОтборНаименование КАК ОтборНаименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОтбрНаименование.Наименование КАК Наименование,
	               |	ОтбрНаименование.Индекс,
	               |	ЕСТЬNULL(ЗП_СДМ.ПроцентМенеджераПоЗаказуКлиента, 0) КАК ПроцентСДМ,
	               |	ЕСТЬNULL(ЗП_БезДМ.ПроцентМенеджераПоЗаказуКлиента, 0) КАК ПроцентБезДМ
	               |ИЗ
	               |	ТЗ_Отбор КАК ОтбрНаименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СрезПоследних(, ) КАК ЗП_БезДМ
	               |		ПО (ЗП_БезДМ.ОтборПоМенеджеру = ЗНАЧЕНИЕ(Перечисление.ЗП_ОтборПоМенеджеру.БезДопольнительногоМенеджера))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СрезПоследних(, ) КАК ЗП_СДМ
	               |		ПО (ЗП_СДМ.ОтборПоМенеджеру = ЗНАЧЕНИЕ(Перечисление.ЗП_ОтборПоМенеджеру.СДопольнительнымМенеджером))
	               |ГДЕ
	               |	ОтбрНаименование.Наименование = ""Процент менеджера по заказу клиента""
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ОтбрНаименование.Наименование,
	               |	ОтбрНаименование.Индекс,
	               |	ЕСТЬNULL(ЗП_СДМ.ПроцентДопольнительногоМенеджераПоЗаказуКлиента, 0),
	               |	ЕСТЬNULL(ЗП_БезДМ.ПроцентДопольнительногоМенеджераПоЗаказуКлиента, 0)
	               |ИЗ
	               |	ТЗ_Отбор КАК ОтбрНаименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СрезПоследних(, ) КАК ЗП_БезДМ
	               |		ПО (ЗП_БезДМ.ОтборПоМенеджеру = ЗНАЧЕНИЕ(Перечисление.ЗП_ОтборПоМенеджеру.БезДопольнительногоМенеджера))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СрезПоследних(, ) КАК ЗП_СДМ
	               |		ПО (ЗП_СДМ.ОтборПоМенеджеру = ЗНАЧЕНИЕ(Перечисление.ЗП_ОтборПоМенеджеру.СДопольнительнымМенеджером))
	               |ГДЕ
	               |	ОтбрНаименование.Наименование = ""Процент допольнительного менеджера по заказу клиента""
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ОтбрНаименование.Наименование,
	               |	ОтбрНаименование.Индекс,
	               |	ЕСТЬNULL(ЗП_СДМ.ПроцентМенеджераПоРеализации, 0),
	               |	ЕСТЬNULL(ЗП_БезДМ.ПроцентМенеджераПоРеализации, 0)
	               |ИЗ
	               |	ТЗ_Отбор КАК ОтбрНаименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СрезПоследних(, ) КАК ЗП_БезДМ
	               |		ПО (ЗП_БезДМ.ОтборПоМенеджеру = ЗНАЧЕНИЕ(Перечисление.ЗП_ОтборПоМенеджеру.БезДопольнительногоМенеджера))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СрезПоследних(, ) КАК ЗП_СДМ
	               |		ПО (ЗП_СДМ.ОтборПоМенеджеру = ЗНАЧЕНИЕ(Перечисление.ЗП_ОтборПоМенеджеру.СДопольнительнымМенеджером))
	               |ГДЕ
	               |	ОтбрНаименование.Наименование = ""Процент менеджера по реализации""";
	
	Возврат  ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапросаЗаписиТаблицаНастройков()

&НаСервере
Процедура СохранитьНастройкиЗПРозница()
	
	Период 			= ТекущаяДата();
	Ответственный 	= ПараметрыСеанса.ТекущийПользователь;
	
	ЗП_БезДП = Перечисления.ЗП_ОтборПоМенеджеру.БезДопольнительногоМенеджера;
	ЗП_СДП	 = Перечисления.ЗП_ОтборПоМенеджеру.СДопольнительнымМенеджером;
	
	СтруктураЗаписиЗП_БезДП = ПолучитьСтрЗаписиКолонки("ПроцентБезДМ",ЗП_БезДП);
	СтруктураЗаписиЗП_СДП 	= ПолучитьСтрЗаписиКолонки("ПроцентСДМ",ЗП_СДП);  	
	
	НачатьТранзакцию();
		НаборЗаписей = РегистрыСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.ОтборПоМенеджеру.Установить(ЗП_БезДП);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураЗаписиЗП_БезДП);
		Запись.Период = Период;
		Запись.Ответственный = Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать настройки процент ЗП от продаж.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()); 
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;

		НаборЗаписей = РегистрыСведений.ЗП_ПроцентНастройкиЗаработкаМенеджера.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.ОтборПоМенеджеру.Установить(ЗП_СДП);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураЗаписиЗП_СДП);
		Запись.Период = Период;
		Запись.Ответственный = Ответственный;

		Попытка
			НаборЗаписей.Записать();    					
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать настройки процент ЗП от продаж.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	
	ЗафиксироватьТранзакцию(); 	

КонецПроцедуры // СохранитьНастройкиЗПРозница()


&НаСервере
Функция ПолучитьСтрЗаписиКолонки(ИмяКолонки,ОтборПоМенеджеру)
	Стр = ИнициализироватьСтрЗаписи();
	Стр.ОтборПоМенеджеру = ОтборПоМенеджеру;
	Для каждого Строка Из НастройкаЗПРозница Цикл		
		Если Строка.Наименование = "Процент менеджера по заказу клиента" Тогда
			Стр.ПроцентМенеджераПоЗаказуКлиента = Строка[ИмяКолонки];			
		ИначеЕсли Строка.Наименование = "Процент допольнительного менеджера по заказу клиента" Тогда
			Стр.ПроцентДопольнительногоМенеджераПоЗаказуКлиента = Строка[ИмяКолонки];			
		ИначеЕсли Строка.Наименование = "Процент менеджера по реализации" Тогда   
			Стр.ПроцентМенеджераПоРеализации = Строка[ИмяКолонки];		
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат Стр;

КонецФункции // ПолучитьСтрЗаписиКолонки()


&НаСервереБезКонтекста
Функция ИнициализироватьСтрЗаписи()
	Стр = Новый Структура;
	Стр.Вставить("ОтборПоМенеджеру");
	Стр.Вставить("ПроцентМенеджераПоЗаказуКлиента",0); 
	Стр.Вставить("ПроцентДопольнительногоМенеджераПоЗаказуКлиента",0);
	Стр.Вставить("ПроцентМенеджераПоРеализации",0);
	Возврат Стр;   
КонецФункции // ИнициализироватьСтрЗаписи()





	
#КонецОбласти