
#Область ИнтерфейсАвтоматическихТестов

&НаКлиенте
Перем ЮнитТест;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	ПараметрыТеста = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_Заглушка");	
	СписокТестов.Добавить(ПараметрыТеста);
	
	Возврат СписокТестов;
	
КонецФункции

&НаКлиенте
Процедура Тест_Заглушка(Параметр) Экспорт
	ЮнитТест.ПроверитьИстину(Истина, );
КонецПроцедуры // Тест_Заглушка()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузитьСписокНоменквлатуры(Параметры.ВидНоменклатуры);
	УстановитьТекущуюСтроку(Параметры.Номенклатура);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьВыборЗначения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьЗначение(Команда)
	ВыполнитьВыборЗначения();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьВыборЗначения()
	
	ТекущеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущеДанные <> Неопределено Тогда
		Закрыть(ТекущеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьвыборЗначения()

&НаСервере
Процедура ЗагрузитьСписокНоменквлатуры(ВидНоменклатуры)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Ссылка КАК Номенклатура,
	                      |	ВЫБОР
	                      |		КОГДА ЕстьТоварыДругогоКачества
	                      |			ТОГДА 4 + ВЫБОР
	                      |					КОГДА ПометкаУдаления
	                      |						ТОГДА 1
	                      |					ИНАЧЕ 0
	                      |				КОНЕЦ + ВЫБОР
	                      |					КОГДА ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	                      |						ТОГДА 0
	                      |					ИНАЧЕ 2
	                      |				КОНЕЦ
	                      |		ИНАЧЕ ВЫБОР
	                      |				КОГДА ПометкаУдаления
	                      |					ТОГДА 1
	                      |				ИНАЧЕ 0
	                      |			КОНЕЦ + ВЫБОР
	                      |				КОГДА ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	                      |					ТОГДА 0
	                      |				ИНАЧЕ 2
	                      |			КОНЕЦ
	                      |	КОНЕЦ КАК ИндексКартинки
	                      |ИЗ
	                      |	Справочник.Номенклатура
	                      |ГДЕ
	                      |	НЕ ПометкаУдаления
	                      |	И ВидНоменклатуры = &ВидНоменклатуры
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Наименование");
						  
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	СписокНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗагрузитьСписокНоменквлатуры()

&НаСервере
Процедура УстановитьТекущуюСтроку(Номенклатура)

	СтруктураПоиска = Новый Структура("Номенклатура", Номенклатура);
	НайденныеСтроки = СписокНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.СписокНоменклатуры.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

