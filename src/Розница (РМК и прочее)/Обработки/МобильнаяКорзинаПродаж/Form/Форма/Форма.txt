&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДИ_Партнер = Параметры.Партнер;
	Соглашение = Параметры.Соглашение;
	
	Заголовок = "Партнер: " + Строка(ДИ_Партнер) + " \ Соглашение: " + Строка(Соглашение);	
	
	ИнициализироватьПараметрыПоСоглашению(Соглашение);
	ИнициализироватьПраваПользователей();
	ОбновитьПанельВзаиморасчетов(ДИ_Партнер);
	
	ИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	Элементы.ТЗ_КорзинаХарактеристика.Видимость = ИспользоватьХарактеристики;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	ОбновитьСуммаИтог();	
КонецПроцедуры




&НаСервере
Функция ЛояльностьИспользуется(Организация) 
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ЛояльностьИспользуетсяПодразделением()
	
	Подразделение = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Подразделение = &Подразделение");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////И С Т О Ч Н И К////////////////////////////////////////////

&НаСервере
Процедура ИнициализироватьПараметрыПоСоглашению(ПараметрСоглашение)
		
	СоглашениеОрганизация 	= ПараметрСоглашение.Организация;
	СоглашениеСклад			= ПараметрСоглашение.Склад;
	СоглашениеВидЦены		= ПараметрСоглашение.ВидЦен; 
	СоглашениеВалюта		= ПараметрСоглашение.Валюта;
	//ДИ_Партнер				= ПараметрСоглашение.Партнер;
	
	ЛояльностьИспользуеться = РеквизитФормыВЗначение("Объект").GetLibrary("LoyaltyLibrary").ЛояльностьИспользуеться(СоглашениеОрганизация);
	
	ПродажаОблагаетсяНДС = ПараметрСоглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Элементы.ТЗ_КорзинаСтавкаНДС.Видимость = ПродажаОблагаетсяНДС;
	Элементы.ТЗ_КорзинаСуммаНДС.Видимость  = ПродажаОблагаетсяНДС;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПраваПользователей()
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) И НЕ РольДоступна(Метаданные.Роли.ОтклонениеОтУсловийПродаж) Тогда
		Элементы.ТЗ_КорзинаВидЦены.ТолькоПросмотр = Истина;
	КонецЕсли;
			
КонецПроцедуры


////////////////////////////////////////////Н О М Е Н К Л А Т У Р А////////////////////////////////////

&НаСервере
Процедура ОбработатьЗаписьБонусМенеджера(Номенклатура, РазмерБонуса)
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.БонусыМенеджерам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Дата.Установить(ТекущаяДата());
	Если РазмерБонуса<>0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Дата			= ТекущаяДата();
		Запись.Номенклатура = Номенклатура;
		Запись.Бонус 		= РазмерБонуса;
		Запись.Используется = Истина;
	КонецЕсли;
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеОтчета(Номенклатура, Характеристика, ИмяФормы)
	ПараметрыФормы = Новый Структура;  
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	Если ИмяФормы = "ОтчетПоРезервам" Тогда
		ФормаОчета = ПолучитьФорму("РегистрСведений.ALPS_АктуальностьНоменклатуры.Форма.ОтчетПоРезервам", ПараметрыФормы);	
	Иначе	
		ФормаОчета = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма." + ИмяФормы, ПараметрыФормы);
	КонецЕсли; 	
	ОткрытьФорму(ФормаОчета);		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеДиаграммы(Номенклатура, Характеристика, ИмяФормы)
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Номенклатура",   Номенклатура);
	ПараметрыФормы.Вставить("ВидЦены",   	  СоглашениеВидЦены);
	ПараметрыФормы.Вставить("НачалоПериода",  '20111217');
	ПараметрыФормы.Вставить("КонецПериода",   '20120220');
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	
	ФормаОчета = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма." + ИмяФормы, ПараметрыФормы);
	ФормаОчета.Открыть();		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНоменклатуры(Номенклатура, Характеристика, Цена)
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Номенклатура, Характеристика, Неопределено);
	
	ОбработатьИзменениеКорзины(ПараметрыОтбора, Цена);
	
	Если ЛояльностьИспользуеться Тогда
		Если НЕ ОбновитьСообщениеПроАкционныеТовары(Номенклатура, СоглашениеСклад) Тогда
			ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаОповещения").ОткрытьМодально();
			//ПоказатьОповещениеПользователя("Увага! Товар приймає участь у акції!", , "Не забудьте запропонувати повні акційні комплекти та розрахувати знижки.", БиблиотекаКартинок.Внимание);		
		КонецЕсли;
	КонецЕсли;
	
	РезультатОтбора = ТЗ_Корзина.НайтиСтроки(ПараметрыОтбора);
	Если РезультатОтбора.Количество() Тогда
		Элементы.ТЗ_Корзина.ТекущаяСтрока = РезультатОтбора[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьСуммаИтог();
	
КонецПроцедуры





&НаКлиенте
Процедура НоменклатураПриАктивизацииСтроки()	
	ТекущиеДанные = Элементы.ТЗ_Номенклатура.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОбновитьПанельДополнительнойИнформации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельДополнительнойИнформации(Номенклатура)
	УстановитьПривилегированныйРежим(Истина);
	
	ДИ_СсылкаНаСайт = Номенклатура.НаименованиеПолное; 
	ДИ_Гарантия		= ПолучитьЗначениеСвойства("Гарантія", Номенклатура);	
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументПоступления,
		|	МАКСИМУМ(ВЫБОР 
		|				КОГДА ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|				ТОГДА ТоварыЗаказ.ДатаПоступления
		|				ИНАЧЕ ДокументПоступления.Дата
		|			 КОНЕЦ) КАК ДатаПоступления	
		|ИЗ
		|    РегистрНакопления.ТоварыКПоступлению.Обороты(, , , Номенклатура = &Номенклатура) КАК ТоварыКПоступлению
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказ
		|ПО ТоварыЗаказ.Ссылка			= ТоварыКПоступлению.ДокументПоступления
		|И	ТоварыЗаказ.Номенклатура 	= ТоварыКПоступлению.Номенклатура
		|И	ТоварыЗаказ.Характеристика 	= ТоварыКПоступлению.Характеристика
        |
		|ГДЕ
		|		ДокументПоступления Ссылка Документ.ПоступлениеТоваровУслуг
		|ИЛИ	ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|			 
		|СГРУППИРОВАТЬ ПО ДокументПоступления, 	ВЫБОР 
		|											КОГДА ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|											ТОГДА ТоварыЗаказ.ДатаПоступления
		|											ИНАЧЕ ДокументПоступления.Дата
		|									 	КОНЕЦ 
        |
		|УПОРЯДОЧИТЬ ПО 	ВЫБОР 
		|					КОГДА ДокументПоступления Ссылка Документ.ЗаказПоставщику
		|					ТОГДА ТоварыЗаказ.ДатаПоступления
		|					ИНАЧЕ ДокументПоступления.Дата
		|			 	КОНЕЦ Убыв
		|");
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Партнер", 		ДИ_Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
   	Если Выборка.Следующий() Тогда
		ДИ_ДатаПоступления 		= Выборка.ДатаПоступления;
		ДИ_ДокументПоступления 	= Выборка.ДокументПоступления;	
	КонецЕсли;
	
	
	
	
	
	ФайлКартинки = Номенклатура.ФайлКартинки;	
	Если НЕ Номенклатура.ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка() Тогда
		Если ФайлКартинки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлКартинки;
			МенеджерЗаписи.Прочитать();
			ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
			Картинка = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
	Иначе
		Картинка = "";
	КонецЕсли;
	
	
		
	
	
	Если Элементы.СтраницыИнформацияПродажи.ТекущаяСтраница = Элементы.СтраницаИнформацияПродажи Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Цена
			|
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура 	= &Номенклатура И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.ALPS_ВидыЦен ГДЕ Входная))
			|
			|";
		Выборка = Запрос.Выполнить().Выбрать();
		ДИ_ВходнаяЦена = ?(Выборка.Следующий(), Выборка.Цена, 0);
		
		
		
		Запрос.Текст = "
			|ВЫБРАТЬ 
			|	СуммаВыручки / Количество КАК ПоследняяПродажа
			|
			|ИЗ
			|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
			|
			|ГДЕ
			|	АналитикаУчетаПоПартнерам.Партнер 		= &Партнер
			|И	АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
			|И	Выручка.Регистратор Ссылка Документ.РеализацияТоваровУслуг
			|			
			|
			|УПОРЯДОЧИТЬ ПО Выручка.Период Убыв ";
		Выборка = Запрос.Выполнить().Выбрать();
		ДИ_ПоследняяПродажа = ?(Выборка.Следующий(), Выборка.ПоследняяПродажа, 0);

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеСвойства(ИмяСвойства, Объект)
	
	СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);
	Если СсылкаНаСвойство.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ?(СсылкаНаСвойство.ЭтоДополнительноеСведение 
				, "ВЫБРАТЬ Значение ИЗ РегистрСведений.ДополнительныеСведения 		   ГДЕ Объект = &Объект И Свойство = &СсылкаНаСвойство" 
				, "ВЫБРАТЬ Значение ИЗ Справочник.Номенклатура.ДополнительныеРеквизиты ГДЕ Ссылка = &Объект И Свойство = &СсылкаНаСвойство");
	Запрос.УстановитьПараметр("СсылкаНаСвойство", 	СсылкаНаСвойство);				
	Запрос.УстановитьПараметр("Объект", 			Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Значение, Неопределено);
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизита(АдресРеквизита, Объект)
	Перем ЗначениеРеквизита;
	Выполнить("ЗначениеРеквизита = Объект." + АдресРеквизита + ";");
	Возврат ЗначениеРеквизита;
КонецФункции






&НаКлиенте
Процедура ОткрытьЭлементСправочникаНоменклатуры(Команда)	
	ТекущиеДанные = Элементы.ТЗ_Корзина.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;	
КонецПроцедуры

///////////////////////////О Б Р А Б О Т К А     Д Е Й С Т В И Й   К О Р З И Н Ы//////////////////////

&НаСервере
Процедура ОбновитьПанельВзаиморасчетов(Партнер)
	УстановитьПривилегированныйРежим(Истина);
	ПолучитьДолгПоПартнеру(Партнер);
	ПолучитьБонусыПоПартнеру(Партнер);
	ПолучитьОборотПоПартнеру(Партнер);
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДолгПоПартнеру(Партнер)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА ДолгКлиента ИНАЧЕ ВЫРАЗИТЬ(ДолгКлиента 	* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК ДолгПартнера,
		|	ЕСТЬNULL(Сумма(ВЫБОР КОГДА ЗапросВалютРегламент.Валюта = Курсы.Валюта ТОГДА НашДолг		ИНАЧЕ ВЫРАЗИТЬ(НашДолг 		* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) КОНЕЦ), 0) КАК НашДолг
		|	
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 ТОГДА  СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК ДолгКлиента,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) КАК НашДолг
		|	ИЗ	
		|		РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСКлиентами
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта
		|
		|	ОБЪЕДИНИТЬ 
		|
		|	ВЫБРАТЬ 
		|		Валюта,
		|		Сумма(ВЫБОР КОГДА СуммаОстаток > 0 И ЗаказПоставщику = Неопределено 	ТОГДА СуммаОстаток ИНАЧЕ 0 КОНЕЦ),
		|		Сумма(ВЫБОР КОГДА СуммаОстаток < 0 										ТОГДА -СуммаОстаток ИНАЧЕ 0 КОНЕЦ) 				 
		|	ИЗ	
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ 
		|																								КлючАналитики
		|																							ИЗ
		|																								РегистрСведений.АналитикаУчетаПоПартнерам
		|																							ГДЕ
		|																								Партнер = &Партнер	
		|																							)) КАК РасчетыСПоставщиками
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|			ПО	Аналитика.КлючАналитики = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
		|
		|	СГРУППИРОВАТЬ ПО Валюта  ) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК Курсы
		|ПО Вл.Валюта = Курсы.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК ЗапросВалютРегламент
		|ПО ЗапросВалютРегламент.Валюта = &ВалютаКассы ";	
	Запрос.УстановитьПараметр("Партнер", 		Партнер);
	Запрос.УстановитьПараметр("ВалютаКассы", 	СоглашениеВалюта);

	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		Партнер_ДолгКлиента = Выборка.ДолгПартнера;
		Партнер_НашДолг		= Выборка.НашДолг;
	Иначе
		Партнер_ДолгКлиента = 0;
		Партнер_НашДолг		= 0;
	КонецЕсли;
						
КонецПроцедуры

&НаСервере
Процедура ПолучитьБонусыПоПартнеру(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Вл.Бонус, 0) - Сумма(ВЫБОР 
		|									КОГДА ЛояльностьБонусы.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
		|									ТОГДА ЕСТЬNULL(ЛояльностьБонусы.Бонус, 0)
		|									ИНАЧЕ - ЕСТЬNULL(ЛояльностьБонусы.Бонус, 0)
		|								  КОНЕЦ) КАК Бонусы
		|ИЗ (
		|	ВЫБРАТЬ
		|		СУММА(ЛояльностьБонусы.Бонус) КАК Бонус
		|	Из
		|		РегистрНакопления.Лояльность_Бонусы КАК ЛояльностьБонусы
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(, АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|			ГДЕ
		|				АналитикаПоПартнерам.Партнер = &Партнер
		|			)) КАК РасчетыСКлиентами
		|	ПО 	ВЫБОР
		|			КОГДА ЛояльностьБонусы.Регистратор.ЗаказКлиента = Неопределено
		|			ТОГДА ЛояльностьБонусы.Регистратор		
		|			КОГДА ЛояльностьБонусы.Регистратор.ЗаказКлиента = Значение(Документ.ЗаказКлиента.ПустаяСсылка)
		|			ТОГДА ЛояльностьБонусы.Регистратор
		|			ИНАЧЕ ЛояльностьБонусы.Регистратор.ЗаказКлиента
		|		КОНЕЦ  = РасчетыСКлиентами.ЗаказКлиента		
		|			
		|	ГДЕ
		|		Партнер = &Партнер
		|	И	ЛояльностьБонусы.Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|	И	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток, 0) <= 0
		|	) КАК Вл
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Лояльность_Бонусы КАК ЛояльностьБонусы
		|ПО	ЛояльностьБонусы.Партнер = &Партнер
        |И	ТипЗначения(ЛояльностьБонусы.Регистратор) <> Тип(Документ.РеализацияТоваровУслуг)
        |
		|СГРУППИРОВАТЬ ПО Вл.Бонус";
	Запрос.УстановитьПараметр("Партнер", Партнер); 
    Выборка = Запрос.Выполнить().Выбрать();
	Партнер_Бонусы = ?(Выборка.Следующий(), Выборка.Бонусы, 0);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОборотПоПартнеру(Партнер)
	Запрос = Новый Запрос;
	Запрос.Текст = "		
		|ВЫБРАТЬ
		|	Вл.Партнер,
		|	Сумма(
		|			ВЫБОР
		|				КОГДА Курсы.Валюта = &ВалютаСоглашения
		|				ТОГДА ЕСТЬNULL(СуммаПриход, 0)
		|				ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(СуммаПриход * ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)), 0)
		|		  	КОНЕЦ
		|		  ) - ЕСТЬNULL(ВлЗапрос.Долг, 0) + ЕСТЬNULL(ДопОборот.Сумма, 0) КАК ОборотПоПартнеру
		|
		|ИЗ
		|	(ВЫБРАТЬ 
		|		Ссылка КАК Партнер
		|	ИЗ 
		|		Справочник.Партнеры
		|	ГДЕ
		|		Ссылка = &Партнер) КАК Вл 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК ОборотыСКлиентами 
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК ЗапросВалютРегламент
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют.СрезПоследних() КАК Курсы
		|ПО ОборотыСКлиентами.Валюта = Курсы.Валюта
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			 Аналитика.Партнер,
		|			 Сумма(
		|				ВЫБОР
		|					КОГДА Курсы.Валюта = &ВалютаСоглашения
		|					ТОГДА Долг
		|					ИНАЧЕ ВЫРАЗИТЬ(Долг * ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2))
		|		  		КОНЕЦ) КАК Долг
		|		ИЗ
		|			РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|				ПО	Аналитика.КлючАналитики = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|				И	Аналитика.Партнер		= &Партнер
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК ЗапросВалютРегламент
		|			ПО Истина
		|
		|   		ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют.СрезПоследних() КАК Курсы
		|   		ПО РасчетыСКлиентами.Валюта = Курсы.Валюта
		|	
		|		ГДЕ	
		|			РасчетыСКлиентами.Регистратор Ссылка Документ.ВозвратТоваровОтКлиента 
		|		СГРУППИРОВАТЬ ПО Аналитика.Партнер) КАК ВлЗапрос 
		|ПО ВлЗапрос.Партнер  = &Партнер
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Лояльность_НачальныйОборот КАК ДопОборот
		|ПО ДопОборот.Партнер =  &Партнер
		|
		|СГРУППИРОВАТЬ ПО Вл.Партнер, ВлЗапрос.Долг, ДопОборот.Сумма 
		|;";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ВалютаСоглашения", СоглашениеВалюта);
	Выборка = Запрос.Выполнить().Выбрать();
	Партнер_Оборот = ?(Выборка.Следующий(), Выборка.ОборотПоПартнеру, 0);
	
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	Значение   
		|ИЗ 
		|	РегистрСведений.СкидкаПоОборотуБонусы 
		|ГДЕ 
		|	НижняяГраница <= &Оборот И (ВерхняяГраница > &Оборот ИЛИ ВерхняяГраница = 0)";
	Запрос.УстановитьПараметр("Оборот", Партнер_Оборот);
	Выборка = Запрос.Выполнить().Выбрать();
	Партнер_Процент   = ?(Выборка.Следующий(), Выборка.Значение, 0);
	
КонецПроцедуры










&НаКлиенте
Процедура ТЗ_КорзинаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока 		= Элемент.ТекущаяСтрока;
	ТекущиеДанные 		= Элемент.ТекущиеДанные;
	ТекущийЭлементТЗ 	= Элемент.ТекущийЭлемент;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено И НЕ ТекущийЭлементТЗ = Неопределено Тогда
		Если ТекущийЭлементТЗ.Имя = "ТЗ_КорзинаНоменклатура" Тогда 		
        	СсылкаНаСайт = "http://www.ktc-ua.com/id/" + Формат(Число(ПолучитьЗначениеРеквизита("Код", ТекущиеДанные.Номенклатура)), "ЧГ=0");
			ЗапуститьПриложение(СсылкаНаСайт);
		КонецЕсли;          
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаПослеУдаления(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
	ОбновитьСуммаИтог();
КонецПроцедуры

&НаКлиенте
Процедура Корзина_Очистить(Команда)
	ТЗ_Корзина.Очистить();
	ОбновитьСуммаИтог();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	Если ТЗ_Корзина.Количество() = 0 Тогда
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма");
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПолучитьДанныеДляПечатиЦенников();
	
	СтруктураПараметры = Новый Структура("АдресВХранилище, НазначениеШаблона");
	СтруктураПараметры.АдресВХранилище = АдресВХранилище;
	
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары", СтруктураПараметры, , Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляПечатиЦенников()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", 	СоглашениеОрганизация);
	СтруктураДействий.Вставить("ЗаполнитьСклад",       	СоглашениеСклад);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     	СоглашениеВидЦены);
	СтруктураДействий.Вставить("УстановитьРежим", 		"ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу", Истина);
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", ТЗ_Корзина.Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);	
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуВыделенныхСтрок(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьСуммаИтог()
	СуммаИтого = Формат(ТЗ_Корзина.Итог("СуммаВсего"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " " + СоглашениеВалюта +  " [Бонус:" +
 			  Формат(ТЗ_Корзина.Итог("КолонкаБонусы"), "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " " + СоглашениеВалюта + "]";	
КонецПроцедуры



&НаКлиенте
Процедура ТЗ_КорзинаСкладПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаСкладНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)	
	ТекущиеДанные = Элементы.ТЗ_Корзина.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Соответствие = ПолучитьСписокНаличияСкладов(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	Элементы.ТЗ_КорзинаСклад.СписокВыбора.Очистить();
	Для Каждого ЭлС ИЗ Соответствие Цикл Элементы.ТЗ_КорзинаСклад.СписокВыбора.Добавить(ЭлС.Ключ, , , ?(ЭлС.Значение = 0, БиблиотекаКартинок.Удалить, БиблиотекаКартинок.ОформитьПродажу)); КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаКоличествоПриИзменении(Элемент)	
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаУпаковкаПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаУпаковкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТЗ_Корзина.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено Тогда	
		Элементы.ТЗ_КорзинаУпаковка.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокУпаковокНоменклатуры(ТекущиеДанные.Номенклатура));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаВидЦеныПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаВидЦеныНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТЗ_Корзина.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Элементы.ТЗ_КорзинаВидЦены.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокВидовЦенНоменклатуры());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаЦенаПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗ_КорзинаСтавкаНДСПриИзменении(Элемент)
	ОбновитьСодержанииеКорзиныКлиент();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНаличияСкладов(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка,
		|	ЕСТЬNULL(Склады.ВНаличииОстаток, 0) КАК ВНаличии
		|
		|ИЗ
		|	Справочник.Склады
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК Склады
		|ПО Склады.Склад = Ссылка 
		|");                                  	
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока Выборка.Следующий() Цикл Соответствие.Вставить(Выборка.Ссылка, Выборка.ВНаличии); КонецЦикла;
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокУпаковокНоменклатуры(Номенклатура)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка
		|
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры
		|ГДЕ
		|	Владелец = ВЫБОР КОГДА &НаборУпаковок =  ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|                    ТОГДА &Номенклатура
		|                    КОГДА &НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
		|                    ТОГДА &НаборУпаковок
		|					 ИНАЧЕ Неопределено
		|			   КОНЕЦ 
		|И  ПометкаУдаления = Ложь
		|");
	Запрос.УстановитьПараметр("Номенклатура",  Номенклатура);
	Запрос.УстановитьПараметр("НаборУпаковок", Номенклатура.НаборУпаковок);
	Упаковки = Запрос.Выполнить().Выгрузить();
	МассивУпаковок = Упаковки.ВыгрузитьКолонку("Ссылка");
	МассивУпаковок.Вставить(0, Номенклатура.ЕдиницаИзмерения);
	Возврат МассивУпаковок;

КонецФункции

&НаСервере 
Функция ПолучитьСписокВидовЦенНоменклатуры()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
       	|	Ссылка
		|
		|ИЗ
		|	Справочник.ВидыЦен ");
	ВидыЦен = Запрос.Выполнить().Выгрузить();	
	МассивВидовЦен = ВидыЦен.ВыгрузитьКолонку("Ссылка");
	Возврат МассивВидовЦен;	
	
КонецФункции



&НаКлиенте
Процедура Корзина_ОформитьПродажу(Команда)
	ОбновитьСодержанииеКорзиныКлиент();
	РезультатПоиска = ТЗ_Корзина.НайтиСтроки(Новый Структура("Доступно", Истина));
	Если РезультатПоиска.Количество() Тогда ВывестиСообщениеПользователю("Не весь товар доступен, сформируйте заказ!"); Возврат; КонецЕсли;	
	СоздатьДокумент("РеализацияТоваровУслуг");	
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ОформитьЗаказКлиента(Команда)
	СоздатьДокумент("ЗаказКлиента");
КонецПроцедуры

&НаКлиенте
Процедура Корзина_ОформитьКоммерческоеПредложение(Команда)
	СоздатьДокумент("КоммерческоеПредложениеКлиенту");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	
	ИмяСклад = "Склад";
	СтруктураЗаполнения = ПолучитьСтруктурыЗаполненияКлиент(); 
	НазначитьАвтоматическиВариантОбеспечения();

	Для Каждого СкладИзСтруктуры Из СтруктураЗаполнения.СписокСкладов Цикл
				
		ФормаДокумента = ПолучитьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", , , Новый УникальныйИдентификатор , );
		ЗаполнитьЗначенияСвойств(ФормаДокумента, СтруктураЗаполнения);
		ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, СтруктураЗаполнения);
		ФормаДокумента.Объект[ИмяСклад]	= СкладИзСтруктуры;
		
		РезультатОтбора = ТЗ_Корзина.НайтиСтроки(Новый Структура("Склад", СкладИзСтруктуры));
		ПродажаОблагаетсяНДС   = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
		ПродажаНеОблагаетсяНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС");
		СтавкаБезНДС	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		Для Каждого ТекущаяСтрока Из РезультатОтбора Цикл
			НоваяСтрока = ФормаДокумента.Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			Если НоваяСтрока.Свойство("СтавкаНДС") Тогда
				Если 	  СтруктураЗаполнения.НалогообложениеНДС = ПродажаОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС 	= ПолучитьЗначениеРеквизита("СтавкаНДС", НоваяСтрока.Номенклатура);
					ТекПроцентНДС 			= ПолучитьСтавкуНДСЧислом(НоваяСтрока.СтавкаНДС);
					НоваяСтрока.СуммаНДС 	= РассчитатьСуммуНДС(НоваяСтрока.Сумма, ТекПроцентНДС, СтруктураЗаполнения.ЦенаВключаетНДС);
				ИначеЕсли СтруктураЗаполнения.НалогообложениеНДС = ПродажаНеОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС = СтавкаБезНДС;
					НоваяСтрока.СуммаНДС  = 0;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьСтрокуТабличнойЧастиДокумента(НоваяСтрока, СтруктураЗаполнения.ЦенаВключаетНДС);
		КонецЦикла;
		
		_Объект = ФормаДокумента.Объект;
		Если 	  ИмяДокумента = "ЗаказКлиента" Тогда	
			Партнер_Скидка 			= 0;

			Если СтруктураЗаполнения.ТребуетсяДоговор Тогда 
				ФормаДокумента.Элементы.Договор.Доступность = Истина; 
			КонецЕсли;
			
			РассчитатьИтоговыеПоказателиЗаказКлиента(ФормаДокумента);
			ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(_Объект, ФормаДокумента.СуммаЗаказано, Истина);
			Для Каждого ЭтапОплаты Из _Объект.ЭтапыГрафикаОплаты Цикл 
				НоваяСтрока = ФормаДокумента.Объект.ЭтапыГрафикаОплаты.Добавить(); ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапОплаты); 
			КонецЦикла;
		ИначеЕсли  ИмяДокумента = "КоммерческоеПредложениеКлиенту" Тогда
			Партнер_Скидка 			= 0;
			РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ФормаДокумента);
			ФормаДокумента.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует");
			ФормаДокумента.Объект.СрокДействия = ТекущаяДата() + 86400;
		ИначеЕсли  ИмяДокумента = "ЗаказПоставщику" Тогда
			
			Если СтруктураЗаполнения.ТребуетсяДоговор Тогда 
				ФормаДокумента.Элементы.Договор.Доступность = Истина; 
			КонецЕсли;
			
			РассчитатьИтоговыеПоказателиЗаказПоставщику(ФормаДокумента);
			ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(_Объект, ФормаДокумента.СуммаЗаказано, Истина);
			Для Каждого ЭтапОплаты Из _Объект.ЭтапыГрафикаОплаты Цикл 
				НоваяСтрока = ФормаДокумента.Объект.ЭтапыГрафикаОплаты.Добавить(); ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапОплаты); 
			КонецЦикла;
		ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда
			Партнер_Скидка 			= 0;
			
			Если СтруктураЗаполнения.ТребуетсяДоговор Тогда 
				ФормаДокумента.Элементы.Договор.Доступность = Истина; 
			КонецЕсли;
			
			РассчитатьИтоговыеПоказателиРеализации(ФормаДокумента);
		ИначеЕсли ИмяДокумента = "ПеремещениеТоваров" Тогда
			ФормаВыбораСклада = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаВыбораСклада", Новый Структура("Склад", СоглашениеСклад));
			ПараметрыПеремещения = ФормаВыбораСклада.ОткрытьМодально();
			Если ПараметрыПеремещения = КодВозвратаДиалога.Отмена ИЛИ ПараметрыПеремещения = Неопределено Тогда Возврат; КонецЕсли;
			ФормаДокумента.Объект.СкладПолучатель  = ПараметрыПеремещения.СкладПолучатель;
			ФормаДокумента.Объект.СкладОтправитель = ПараметрыПеремещения.СкладОтправитель;
			ФормаДокумента.Объект.ВидЦены          = ПараметрыПеремещения.ВидЦены;
		ИначеЕсли ИмяДокумента = "ЗаказНаПеремещение" Тогда
			ФормаВыбораСклада = ПолучитьФорму("ВнешняяОбработка.МногофунциональноеРабочееМесто.Форма.ФормаВыбораСклада", Новый Структура("Склад", СоглашениеСклад));
			ПараметрыПеремещения = ФормаВыбораСклада.ОткрытьМодально();
			Если ПараметрыПеремещения = КодВозвратаДиалога.Отмена ИЛИ ПараметрыПеремещения = Неопределено Тогда Возврат; КонецЕсли;
			ФормаДокумента.Объект.СкладПолучатель  = ПараметрыПеремещения.СкладПолучатель;
			ФормаДокумента.Объект.СкладОтправитель = ПараметрыПеремещения.СкладОтправитель;
			ФормаДокумента.Объект.Статус           = ПредопределенноеЗначение("Перечисление.СтатусыВнутреннихЗаказов.КВыполнению");
		КонецЕсли;
		
		ФормаДокумента.Открыть();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		
		Возврат 0.1;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		
		Возврат 0.18;
		
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")
		ИЛИ СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда
		
		Возврат 0.2;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуТабличнойЧастиДокумента(Приемник, ЦенаВключаетНДС)
	//11.0.9.8
	Если Приемник.Свойство("СуммаСНДС")  			Тогда Приемник.СуммаСНДС 		   = ?(ЦенаВключаетНДС, Приемник.Сумма, Приемник.Сумма + Приемник.СуммаНДС); КонецЕсли;
	Если Приемник.Свойство("Активность") 			Тогда Приемник.Активность 		   = Истина; КонецЕсли;
	Если Приемник.Свойство("СуммаАктивность")   	Тогда Приемник.СуммаАктивность     = Приемник.Сумма; КонецЕсли;
	Если Приемник.Свойство("СуммаСНДСАктивность")   Тогда Приемник.СуммаСНДСАктивность = Приемник.СуммаСНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаНДСАктивность")   	Тогда Приемник.СуммаНДСАктивность  = Приемник.СуммаНДС; КонецЕсли;
	//11.1.1.17
	Если Приемник.Свойство("СуммаСНДСАктивностьБезВозвратнойТары")  Тогда Приемник.СуммаСНДСАктивностьБезВозвратнойТары = Приемник.СуммаСНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаНДСАктивностьБезВозвратнойТары")   Тогда Приемник.СуммаНДСАктивностьБезВозвратнойТары  = Приемник.СуммаНДС; КонецЕсли;
	Если Приемник.Свойство("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары")  Тогда  КонецЕсли;
	Если Приемник.Свойство("СуммаРучнойСкидкиАктивностьБезВозвратнойТары")   		Тогда  КонецЕсли;
	Если Приемник.Свойство("СуммаСНДСБезВозвратнойТары")   							Тогда Приемник.СуммаСНДСБезВозвратнойТары = ?(ЦенаВключаетНДС, Приемник.Сумма, Приемник.Сумма + Приемник.СуммаНДС); КонецЕсли;
	Если Приемник.Свойство("СуммаАктивностьБезВозвратнойТары")   					Тогда Приемник.СуммаАктивностьБезВозвратнойТары = Приемник.Сумма; КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказКлиента(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;

	Форма.СуммаЗаказано     = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаНДСЗаказано  = КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары");
	Форма.СуммаАвтоСкидки   = КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары");;
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары") = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Заполнение итогов по этапам оплаты
	
	ПредыдущееЗначениеДаты = Дата(1,1,1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	ПроцентПлатежейОбщий = 0;
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки")
	);
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор странцицы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		
	Иначе
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказПоставщику(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаОтменено = КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаЗаказано = КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано = КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаРучнойСкидки);
	ИначеЕсли Форма.СуммаРучнойСкидки > 0 Тогда
		Форма.ПроцентРучнойСкидки = 100;
	Иначе
		Форма.ПроцентРучнойСкидки = 0;
	КонецЕсли;
	
	// Заполнение итогов по таблице этапы оплаты
	
	Форма.СуммаАвансаДоПодтверждения     = 0;
	Форма.СуммаПредоплатыДоПоступления   = 0;
	Форма.СуммаКредитаПослеПоступления   = 0;
	Форма.ПроцентАвансаДоПодтверждения   = 0;
	Форма.ПроцентПредоплатыДоПоступления = 0;
	Форма.ПроцентКредитаПослеПоступления = 0;
	ПроцентПлатежейОбщий                 = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоПодтверждения", "ПроцентАвансаДоПодтверждения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоПоступления", "ПроцентПредоплатыДоПоступления")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеПоступления", "ПроцентКредитаПослеПоступления")
	);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор страницы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаАктивныхСтрок 	= КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары");
	Форма.СуммаНДСАктивныхСтрок = КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары");
	Форма.СуммаАвтоСкидки 		= КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары");
	Форма.СуммаРучнойСкидки 	= КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары");
	Форма.СуммаСкидки 			= Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего 			= КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары");
	
	СуммаАктивныхСтрокБезНДС = КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары");
	
	Если СуммаАктивныхСтрокБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиРеализации(Форма)
	
	Форма.СуммаВсего = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	Форма.СуммаНДС = Форма.Объект.Товары.Итог("СуммаНДСБезВозвратнойТары");
	Форма.СуммаАвтоСкидки   = Форма.Объект.Товары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = Форма.Объект.Товары.Итог("СуммаРучнойСкидкиБезВозвратнойТары");
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	
	Если Форма.СуммаВсего > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (Форма.СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (Форма.СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	Иначе
		
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
	 Или Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктурыЗаполненияКлиент()
	
	Если НЕ ДИ_Партнер.Пустая() И НЕ Соглашение.СегментПартнеров.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ПартнерыСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Соглашение.СегментПартнеров);
		НаборЗаписей.Отбор.Партнер.Установить(ДИ_Партнер);
			Запись = НаборЗаписей.Добавить();
			Запись.Партнер = ДИ_Партнер;
			Запись.Сегмент = Соглашение.СегментПартнеров;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УсловияПродаж  = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
	УсловияПродаж.Вставить("Партнер", 				ДИ_Партнер);
	УсловияПродаж.Вставить("Контрагент",			ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДИ_Партнер));
	УсловияПродаж.Вставить("ВалютаДокумента", 		УсловияПродаж.Валюта);
	УсловияПродаж.Вставить("ВалютаВзаиморасчетов", 	СоглашениеВалюта);
	УсловияПродаж.Вставить("ВалютаВзаиморасчетовДокумента", СоглашениеВалюта);
	УсловияПродаж.Вставить("ДатаПлатежа",  			ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение));
	УсловияПродаж.Вставить("АдресДоставки", 		ПолучитьАдресПартнера(ДИ_Партнер));
	УсловияПродаж.Вставить("СписокСкладов",			ПолучитьСписокСкладов(ТЗ_Корзина));
	УсловияПродаж.Вставить("Дата",					ТекущаяДата());
	УсловияПродаж.Вставить("ЖелаемаяДатаОтгрузки",	ТекущаяДата());
	УсловияПродаж.Вставить("ГлавныйБухгалтер", ПолучитьОтветственноеЛицоОрганизации(УсловияПродаж.Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер));
	УсловияПродаж.Вставить("Руководитель", ПолучитьОтветственноеЛицоОрганизации(УсловияПродаж.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияПродаж.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияПродаж.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияПродаж.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		СтруктураПараметров,
		?(УсловияПродаж.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			УсловияПродаж.ХозяйственнаяОперация
		),
		УсловияПродаж.Валюта
	);

	УсловияПродаж.Вставить("Договор",	Договор);
	УсловияПродаж.Вставить("ТребуетсяДоговор",	Соглашение.ИспользуютсяДоговорыКонтрагентов);
	
	Возврат УсловияПродаж;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктурыЗаполненияПоставщик(Соглашение)
		
	УсловияЗакупки  = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
	УсловияЗакупки.Вставить("Партнер", 				Соглашение.Партнер);
	УсловияЗакупки.Вставить("ВалютаВзаиморасчетов", СоглашениеВалюта);
	УсловияЗакупки.Вставить("ДатаПлатежа",  		ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДата(), Соглашение));
	УсловияЗакупки.Вставить("СписокСкладов",		ПолучитьСписокСкладов(ТЗ_Корзина));
	УсловияЗакупки.Вставить("Дата",					ТекущаяДата());
	
	ХозяйственнаяОперацияДоговора = ?(
			УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
		Или УсловияЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
		Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
		УсловияЗакупки.ХозяйственнаяОперация
	);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", УсловияЗакупки.Партнер);
	СтруктураПараметров.Вставить("Контрагент", УсловияЗакупки.Контрагент);
	СтруктураПараметров.Вставить("Организация", УсловияЗакупки.Организация);
	СтруктураПараметров.Вставить("Соглашение", Соглашение);
	СтруктураПараметров.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
	    СтруктураПараметров,
		ХозяйственнаяОперацияДоговора,
		УсловияЗакупки.Валюта);
	
	УсловияЗакупки.Вставить("Договор",	Договор);
	УсловияЗакупки.Вставить("ТребуетсяДоговор",	Соглашение.ИспользуютсяДоговорыКонтрагентов);
	УсловияЗакупки.Вставить("ЖелаемаяДатаПоступления", ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(УсловияЗакупки.Дата, Перечисления.Периодичность.День, УсловияЗакупки.СрокПоставки) + 1);
		
	Возврат УсловияЗакупки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресПартнера(ПартнерСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|И	ПартнерыКонтактнаяИнформация.Тип = &Тип");	
	Запрос.УстановитьПараметр("Тип", 	Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", ПартнерСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Представление, "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов(ТабКорзина)
	
	Запрос = Новый Запрос("	ВЫБРАТЬ 
							|	ТабКорзина.Склад 
							|
							|ПОМЕСТИТЬ Кеш 
							|Из 
							|	&ТабКорзина КАК ТабКорзина
							|
							|; 
							|ВЫБРАТЬ РАЗЛИЧНЫЕ 
							|	Склад
							|
							|Из
							|	Кеш
							|;");
	Запрос.УстановитьПараметр("ТабКорзина", ТабКорзина.Выгрузить());
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтветственноеЛицоОрганизации(Организация, ОтветственноеЛицо)

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственноеЛицо = &ОтветственноеЛицо
		|И	(ДатаОкончания > &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
		|И	Владелец = &Организация";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
    Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции // ПолучитьОтветственноеЛицоОрганизации()
 





&НаСервере
Процедура ОбработатьИзменениеКорзины(ПараметрыОтбора, Цена = 0)
		
	Если ПараметрыОтбора.Номенклатура 	  = Неопределено Тогда ПараметрыОтбора.Номенклатура 	= Справочники.Номенклатура.ПустаяСсылка(); 				КонецЕсли;
	Если ПараметрыОтбора.Характеристика   = Неопределено Тогда ПараметрыОтбора.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();КонецЕсли;
	Если ПараметрыОтбора.ЕдиницаИзмерения = Неопределено Тогда ПараметрыОтбора.ЕдиницаИзмерения = ПараметрыОтбора.Номенклатура.ЕдиницаИзмерения; 		КонецЕсли;
	
	Номенклатура 	= ПараметрыОтбора.Номенклатура;
	Характеристика 	= ПараметрыОтбора.Характеристика;
	ЕдиницаИзмерения= ПараметрыОтбора.ЕдиницаИзмерения;
	
	РезультатСтрока = ТЗ_Корзина.НайтиСтроки(ПараметрыОтбора);
	Если РезультатСтрока.Количество() Тогда
		РезультатСтрока[0].КоличествоУпаковок = РезультатСтрока[0].КоличествоУпаковок + 1;
	Иначе
		РезультатСтрока = ТЗ_Корзина.Добавить();
		РезультатСтрока.Номенклатура   	   = Номенклатура;
		РезультатСтрока.Характеристика     = Характеристика;
		РезультатСтрока.Склад			   = СоглашениеСклад;
		РезультатСтрока.КоличествоУпаковок = 1;
		РезультатСтрока.ЕдиницаИзмерения   = ЕдиницаИзмерения;
		РезультатСтрока.ВидЦены			   = СоглашениеВидЦены;
		РезультатСтрока.Цена		       = Цена;
		РезультатСтрока.ПроцентРучнойСкидки= Партнер_Скидка;
		РезультатСтрока.СтавкаНДС		   = ?(Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС, Перечисления.СтавкиНДС.БезНДС, Номенклатура.СтавкаНДС);
	КонецЕсли;

	ОбновитьСодержанииеКорзины(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСодержанииеКорзиныКлиент()
	//Запомнили ссылку на номенклатуру, что бы востановить позицию при обновлении списка
	Перем ПараметрыОтбора;	
	ТекущаяСтрока = Элементы.ТЗ_Корзина.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ТЗ_Корзина.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
		 ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения, Упаковка",  ТекущиеДанные.Номенклатура, 
		 																								ТекущиеДанные.Характеристика,
																										ТекущиеДанные.ЕдиницаИзмерения,
																										ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	ОбновитьСодержанииеКорзины();
	
	//Востанавливаем курсор на нужную строку, если он не пропал	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		Массив = ТЗ_Корзина.НайтиСтроки(ПараметрыОтбора);
		Если Массив.Количество() Тогда Элементы.ТЗ_Корзина.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор(); КонецЕсли;
	КонецЕсли;
	
	ОбновитьСуммаИтог();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСодержанииеКорзины()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
		//0. Кешируем содержание корзины
		|ВЫБРАТЬ 
		|   ТабКорзина.Номенклатура,
		|   ТабКорзина.Характеристика,
		|
		|	ТабКорзина.Склад,
		|   ТабКорзина.КоличествоУпаковок,
		|	ТабКорзина.ЕдиницаИзмерения,
		|	ТабКорзина.Упаковка,
		|
		|   ТабКорзина.ВидЦены,
		|   ТабКорзина.Цена,
		|	ТабКорзина.ПроцентРучнойСкидки,
		|	ТабКорзина.СуммаРучнойСкидки,
		|	ТабКорзина.ПроцентАвтоматическойСкидки,
		|	ТабКорзина.СуммаАвтоматическойСкидки,	
		|
		|	ТабКорзина.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА 0.1
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА 0.18
		|		КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|		  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|			ТОГДА 0.2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтавкаНДСЧислом
		|
		|ПОМЕСТИТЬ КешКорзина
		|ИЗ 
		|	&ТабКорзина КАК ТабКорзина
		|;
		//1. Расчитываем цены и прочие значения
		|ВЫБРАТЬ
		|   КешКорзина.Номенклатура,
		|   КешКорзина.Характеристика,
		|
		|	КешКорзина.Склад,
		|   КешКорзина.КоличествоУпаковок,
		|	КешКорзина.ЕдиницаИзмерения,
		|	КешКорзина.Упаковка,
		|
		|   КешКорзина.ВидЦены,
		|   ВЫБОР 
		|		КОГДА КешКорзина.ВидЦены = Значение(Справочник.ВидыЦен.ПустаяСсылка)
		|		ТОГДА КешКорзина.Цена
		|		ИНАЧЕ ЦеныКорзины.Цена * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) * (КурсЦены.Курс /  КурсЦены.Кратность) / (КурсСоглашения.Курс / КурсСоглашения.Кратность)
		|	КОНЕЦ КАК Цена,
		|
		|	КешКорзина.ПроцентРучнойСкидки,
		|	КешКорзина.СуммаРучнойСкидки,
		|
		|	КешКорзина.ПроцентАвтоматическойСкидки,
		|	КешКорзина.СуммаАвтоматическойСкидки,
		|
		|	КешКорзина.СтавкаНДС,
		|   КешКорзина.СтавкаНДСЧислом,
		|
		|   КурсСоглашения.Курс / КурсСоглашения.Кратность  КАК КурсПоСоглашению,
		|	ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1)	КАК Коэффициент,
		|   ВЫБОР
		|		КОГДА КешКорзина.КоличествоУпаковок * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) <= (ОстатокНаСкладе.ВНаличииОстаток - ОстатокНаСкладе.ВРезервеОстаток)
		|       ТОГДА Ложь
		|      	КОГДА КешКорзина.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|       ТОГДА Ложь
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК Доступно
		|
		|ПОМЕСТИТЬ PreResult
		|ИЗ
		|	КешКорзина КАК КешКорзина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика)  В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешКорзина)) КАК ЦеныКорзины
		|ПО КешКорзина.Номенклатура 	= ЦеныКорзины.Номенклатура
		|И  КешКорзина.Характеристика 	= ЦеныКорзины.Характеристика
		|И	КешКорзина.ВидЦены			= ЦеныКорзины.ВидЦены
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК КурсСоглашения
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦены
		|ПО ЦеныКорзины.Валюта = КурсЦены.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, (Номенклатура, Характеристика, Склад) В (ВЫБРАТЬ Номенклатура, Характеристика, Склад ИЗ КешКорзина)) КАК ОстатокНаСкладе
		|ПО КешКорзина.Номенклатура 	= ОстатокНаСкладе.Номенклатура
		|И  КешКорзина.Характеристика 	= ОстатокНаСкладе.Характеристика
		|И	КешКорзина.Склад			= ОстатокНаСкладе.Склад 
		|
		|;
		//2. Оборот если продажа осуществится 
		|ВЫБРАТЬ
		|	Сумма(Цена * КоличествоУпаковок) КАК Оборот
		|
		|ПОМЕСТИТЬ КешБудущийОборот
		|ИЗ
		|	PreResult	
		|;
		//3.
		|ВЫБРАТЬ
		|	КешПредвРезультат.Номенклатура,	
		|	КешПредвРезультат.Характеристика,
		|	ВЫБОР
		|  		КОГДА КешПредвРезультат.ВидЦены <> УчПолБонусы.ВидЦеныБонус
		|       ТОГДА 0
		|		КОГДА КешПредвРезультат.ПроцентРучнойСкидки <> 0 ИЛИ КешПредвРезультат.ПроцентАвтоматическойСкидки <> 0
		|       ТОГДА 0
		|		КОГДА Ставки.Значение = 0
		|       ТОГДА 0
		|   	КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
		|		 И НЕ УчПолБонусы.ЕстьСкидкиДляАкций
		|		ТОГДА 0
		|		ИНАЧЕ Ставки.Значение  
		|	КОНЕЦ КАК БонусПроцент
		|
		|ПОМЕСТИТЬ КешПроценты
		|ИЗ
		|	PreResult КАК КешПредвРезультат
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, (Номенклатура, Характеристика) В (ВЫБРАТЬ Номенклатура, Характеристика ИЗ КешКорзина) И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних)) КАК ВходнаяЦена
		|ПО ВходнаяЦена.Номенклатура 	= КешПредвРезультат.Номенклатура
		|И  ВходнаяЦена.Характеристика 	= КешПредвРезультат.Характеристика
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦена
		|ПО КурсЦена.Валюта = ВходнаяЦена.Валюта
        |
		|ЛЕВОЕ СОЕДИНЕНИЕ КешБудущийОборот КАК КешБудущийОборот
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК Ставки
        |ПО 	Ставки.НижняяГраница  / КешПредвРезультат.КурсПоСоглашению <= 	&Оборот + КешБудущийОборот.Оборот
		|И	(	Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению > 	&Оборот + КешБудущийОборот.Оборот 
		|	ИЛИ Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению = 	0)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних КАК УчПолБонусы
		|ПО Истина
		|;
		//4. Результат пересчета
		|ВЫБРАТЬ 
		|	PreResult.Номенклатура, 
		|	PreResult.Характеристика,
		|
		|   PreResult.Склад,
		|	PreResult.Коэффициент * PreResult.КоличествоУпаковок КАК Количество,
		|   PreResult.КоличествоУпаковок,
		|   PreResult.ЕдиницаИзмерения,
		|   PreResult.Упаковка,
		|
		|   PreResult.ВидЦены,
		|	PreResult.Цена,
		|   PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки КАК Сумма,
		|   PreResult.ПроцентРучнойСкидки,
		|	PreResult.СуммаРучнойСкидки,
		|   PreResult.ПроцентАвтоматическойСкидки,
		|	PreResult.СуммаАвтоматическойСкидки,
		|   PreResult.СтавкаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|					КОГДА &ЦенаВключаетНДС
		|					ТОГДА (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) / (1 + PreResult.СтавкаНДСЧислом ) * PreResult.СтавкаНДСЧислом
		|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * PreResult.СтавкаНДСЧислом
		|			  КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНДС,
		|   ВЫБОР
		|   	КОГДА &НалогообложениеНДС = Значение(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|       ТОГДА ВЫБОР 
		|				    КОГДА &ЦенаВключаетНДС
		|				  	ТОГДА PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки
		|					ИНАЧЕ(PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * (1 + PreResult.СтавкаНДСЧислом)
		|			  КОНЕЦ 
		|		ИНАЧЕ КоличествоУпаковок * Цена  
		|	КОНЕЦ КАК СуммаВсего,
		|
		|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
		|	КешПроценты.БонусПроцент														КАК ОборотПроцент,
		|                                         						
		|	PreResult.Доступно 
		|
		|ИЗ
		| 	PreResult КАК PreResult
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
		|ПО КешПроценты.Номенклатура   = PreResult.Номенклатура   
		|И  КешПроценты.Характеристика = PreResult.Характеристика 
		|;");
	Запрос.УстановитьПараметр("Оборот", 			Партнер_Оборот);
	Запрос.УстановитьПараметр("НачалоДня", 			НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТабКорзина", 		ТЗ_Корзина.Выгрузить());
	Запрос.УстановитьПараметр("ВалютаСоглашения",	СоглашениеВалюта);
	Запрос.УстановитьПараметр("НалогообложениеНДС",	Соглашение.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",	Соглашение.ЦенаВключаетНДС);
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	ТЗ_Корзина.Загрузить(РезультатПакета[РезультатПакета.ВГраница()].Выгрузить());
	
	Если ПривилегированныйРежим() Тогда УстановитьПривилегированныйРежим(Ложь); КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ОбновитьСообщениеПроАкционныеТовары(Номенклатура, Склад)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СегментыНоменклатуры.Номенклатура
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|				   &ТекущаяДата,
		|				   (ДатаОкончания >= &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
		|				   И (Склад = &Склад ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|				) КАК ДействиеСкидокНаценок
		|				
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК Условия
		|ПО Условия.Ссылка = ДействиеСкидокНаценок.СкидкаНаценка
        |
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК СегментыНоменклатуры
		|ПО 	СегментыНоменклатуры.Сегмент  = Условия.УсловиеПредоставления.СегментНоменклатурыОграничения
		|И	СегментыНоменклатуры.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("ТекущаяДата",  ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", 		  Склад);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции










/////////////////////////////////////////////////////////// 




Процедура ВывестиСообщениеПользователю(ТекстСообщения, Поле="", ОчищатьСообщения = Ложь)
	
#Если ТонкийКлиент Тогда	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
#КонецЕсли	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле);
	
КонецПроцедуры


///////////////////////////////////   РАБОТА С ВНЕШНИМИ ОБРАБОТКАМИ ////////////////////////////

Функция ПолучитьБиблиотекуФорм(ИмяБиблиотеки)
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	БиблиотекаФорм = ОбъектОбработки.ПолучитьБиблиотекуФорм(ИмяБиблиотеки);
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	Возврат БиблиотекаФорм;
КонецФункции

&НаКлиенте
Процедура СтрокаИнсертОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	InsertCodeСервер(Текст);
	Поиск_СтрокаИнсерт = "";
КонецПроцедуры

&НаСервере
Процедура InsertCodeСервер(input)
	
	input_code = input;
	Пока СтрДлина(input_code) < 11 Цикл
		input_code = "0" + input_code;
	КонецЦикла;
	
	Ссылка_input = Справочники.Номенклатура.НайтиПоКоду(input_code);
	Если НЕ Ссылка_input.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input));
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", input);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка_input = Выборка.Номенклатура; 
		Если НЕ Ссылка_input.Пустая() Тогда
			ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Ссылка_input = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", input);
	Если НЕ Ссылка_input.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input));
		Возврат;
	КонецЕсли;
	
	Ссылка_input = Справочники.СерийныеНомераНоменклатуры.НайтиПоКоду(input);
	Если НЕ Ссылка_input.Пустая() Тогда
		ОбработатьИзменениеКорзины(Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", Ссылка_input.Владелец));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапоминание(Команда)
	ОткрытьФормуМодально("РегистрСведений.НапоминанияПользователя.Форма.Напоминание");
КонецПроцедуры















&НаКлиенте
Процедура ПечататьШтрихкод(Команда)
	
	Если ТЗ_Корзина.Количество() Тогда
		
		ТабличныйДокумент = СформироватьКолекциюПечатныхФорм();	
		ТабличныйДокумент.ИмяПринтера = "eti_shtrih";
		ТабличныйДокумент.Напечатать(); //Показать(); //
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьКолекциюПечатныхФорм()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПРИХОДНЫЙ_ОРДЕР_ПЕЧАТЬ_ШТРИХКОДА";
	
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСнизу  = 0;
	ТабличныйДокумент.ПолеСлева  = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.МасштабПечати			  = 85;
		
	Макет = РеквизитФормыВЗначение("Объект").GetLibrary("Обработка 'Внешние печатные формы'").ПолучитьМакет("ПФ_MXL_ПриходныйОрдерНаТовары_МакетШтрихкода");
		
	НомерТипаДокумента = 0;	
	Для Каждого СтрокаИзКорзины Из ТЗ_Корзина Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ Штрихкод ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", СтрокаИзКорзины.Номенклатура);
		ВыборкаШтрихкод = Запрос.Выполнить().Выбрать();
		Если ВыборкаШтрихкод.Следующий() Тогда
			ЗначениеШтрихкода = ВыборкаШтрихкод.Штрихкод;
		Иначе
			Продолжить;
		КонецЕсли;
				
		ОбластьКодТовара 	 		   = Макет.ПолучитьОбласть("КодТовара");
		ОбластьКодТовара.Параметры.Код = Формат(Число(СтрокаИзКорзины.Номенклатура.Код), "ЧГ=0");
			
		ОбластьШтрихкода 	= Макет.ПолучитьОбласть("ОбластьШтрихкода");
		ВнешняяКомпонента 	= Обработки.ПечатьЭтикетокИЦенников.ПодключитьВнешнююКомпонентуПечатиШтрихкода();	
		Эталон 				= Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
		КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

		Рисунок = ОбластьШтрихкода.Рисунки[0];
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
		ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкода);
		ПараметрыШтрихкода.Вставить("ТипКода",         4);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("РазмерШрифта",    10);
		Рисунок.Картинка = Обработки.ПечатьЭтикетокИЦенников.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
			
		Для НомерШтрихкода = 1 ПО СтрокаИзКорзины.КоличествоУпаковок Цикл
        	Если НомерШтрихкода > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьКодТовара);
			ТабличныйДокумент.Вывести(ОбластьШтрихкода);
		КонецЦикла;
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерТипаДокумента, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

	
КонецФункции






&НаСервере
Процедура НазначитьАвтоматическиВариантОбеспечения()
	УстановитьПривилегированныйРежим(Истина);
	Запрос =Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаВариантыОбеспеченияНоменклатуры();
	Запрос.УстановитьПараметр("Оборот", 			Партнер_Оборот);
	Запрос.УстановитьПараметр("НачалоДня", 			НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТабКорзина", 		ТЗ_Корзина.Выгрузить());
	Запрос.УстановитьПараметр("ВалютаСоглашения",	СоглашениеВалюта);
	Запрос.УстановитьПараметр("НалогообложениеНДС",	Соглашение.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",	Соглашение.ЦенаВключаетНДС);
    Результат = Запрос.Выполнить().Выгрузить();
	ТЗ_Корзина.Очистить();
	ТЗ_Корзина.Загрузить(Результат);
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли; 
КонецПроцедуры // НазначитьАвтоматическиВариантОбеспечения(СкладОтправителя)

&НаСервере
Функция ПолучитьТекстЗапросаВариантыОбеспеченияНоменклатуры()
 ТекстЗапроса = "ВЫБРАТЬ 
			|	ТабКорзина.Номенклатура,
			|	ТабКорзина.Характеристика,
			|	ТабКорзина.Склад,
			|	ТабКорзина.Количество,
			|	ТабКорзина.КоличествоУпаковок,
			|	ТабКорзина.ЕдиницаИзмерения,
			|	ТабКорзина.Упаковка,
			|	ТабКорзина.ВидЦены,
			|	ТабКорзина.Цена,
			|	ТабКорзина.ПроцентРучнойСкидки,
			|	ТабКорзина.СуммаРучнойСкидки,
			|	ТабКорзина.ПроцентАвтоматическойСкидки,
			|	ТабКорзина.СуммаАвтоматическойСкидки,	
			|	ТабКорзина.СтавкаНДС,
			|	ВЫБОР
			|			КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
			|			  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
			|				ТОГДА 0.1
			|			КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
			|			  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
			|				ТОГДА 0.18
			|			КОГДА ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
			|			  ИЛИ ТабКорзина.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
			|				ТОГДА 0.2
			|			ИНАЧЕ 0
			|	КОНЕЦ КАК СтавкаНДСЧислом

			|ПОМЕСТИТЬ КешНоменклатура
			|ИЗ 
			|	&ТабКорзина КАК ТабКорзина

			|;

			////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатура.Номенклатура,
			|	КешНоменклатура.Характеристика,
			|	КешНоменклатура.Склад,
			|	КешНоменклатура.Количество,
			|	КешНоменклатура.КоличествоУпаковок,
			|	КешНоменклатура.ЕдиницаИзмерения,
			|	КешНоменклатура.Упаковка,
			|	КешНоменклатура.ВидЦены,
			|	КешНоменклатура.Цена,
			|	КешНоменклатура.ПроцентРучнойСкидки,
			|	КешНоменклатура.СуммаРучнойСкидки,
			|	КешНоменклатура.ПроцентАвтоматическойСкидки,
			|	КешНоменклатура.СуммаАвтоматическойСкидки,
			|	КешНоменклатура.СтавкаНДС,
			|	КешНоменклатура.СтавкаНДСЧислом,
			|	"""" КАК Назначения
			|ПОМЕСТИТЬ КешУслуга
			|ИЗ
			|	КешНоменклатура КАК КешНоменклатура
			|ГДЕ
			|	КешНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатура.Номенклатура,
			|	КешНоменклатура.Характеристика,
			|	КешНоменклатура.Склад,
			|	КешНоменклатура.Количество,
			|	КешНоменклатура.КоличествоУпаковок,
			|	КешНоменклатура.ЕдиницаИзмерения,
			|	КешНоменклатура.Упаковка,
			|	КешНоменклатура.ВидЦены,
			|	КешНоменклатура.Цена,
			|	КешНоменклатура.ПроцентРучнойСкидки,
			|	КешНоменклатура.СуммаРучнойСкидки,
			|	КешНоменклатура.ПроцентАвтоматическойСкидки,
			|	КешНоменклатура.СуммаАвтоматическойСкидки,
			|	КешНоменклатура.СтавкаНДС,
			|	КешНоменклатура.СтавкаНДСЧислом
			|ПОМЕСТИТЬ КешНоменклатураБезУслуг
			|ИЗ
			|	КешНоменклатура КАК КешНоменклатура
			|ГДЕ
			|	КешНоменклатура.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатураБезУслуг.Номенклатура,
			|	КешНоменклатураБезУслуг.Характеристика,
			|	КешНоменклатураБезУслуг.Склад,
			|	КешНоменклатураБезУслуг.Количество,
			|	КешНоменклатураБезУслуг.КоличествоУпаковок,
			|	КешНоменклатураБезУслуг.ЕдиницаИзмерения,
			|	КешНоменклатураБезУслуг.Упаковка,
			|	КешНоменклатураБезУслуг.ВидЦены,
			|	КешНоменклатураБезУслуг.Цена,
			|	КешНоменклатураБезУслуг.ПроцентРучнойСкидки,
			|	КешНоменклатураБезУслуг.СуммаРучнойСкидки,
			|	КешНоменклатураБезУслуг.ПроцентАвтоматическойСкидки,
			|	КешНоменклатураБезУслуг.СуммаАвтоматическойСкидки,
			|	КешНоменклатураБезУслуг.СтавкаНДС,
			|	КешНоменклатураБезУслуг.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеОстаток > 0
			|			ТОГДА СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток
			|ПОМЕСТИТЬ КешОстаток
			|ИЗ
			|	КешНоменклатураБезУслуг КАК КешНоменклатураБезУслуг
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
			|				,
			|				Номенклатура В
			|					(ВЫБРАТЬ
			|						КешНоменклатура.Номенклатура
			|					ИЗ
			|						КешНоменклатура)) КАК СвободныеОстаткиОстатки
			|		ПО (СвободныеОстаткиОстатки.Номенклатура = КешНоменклатураБезУслуг.Номенклатура)
			|			И (СвободныеОстаткиОстатки.Склад = КешНоменклатураБезУслуг.Склад)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешОстаток.Номенклатура,
			|	КешОстаток.Характеристика,
			|	КешОстаток.Склад,
			|	КешОстаток.Упаковка,
			|	ВЫБОР
			|		КОГДА КешОстаток.КоличествоУпаковок <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.КоличествоУпаковок
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешОстаток.Количество
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.Количество
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешОстаток.Количество
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК Количество,
			|	КешОстаток.Цена,
			|	КешОстаток.ЕдиницаИзмерения,
			|	КешОстаток.ВидЦены,
			|	КешОстаток.ПроцентРучнойСкидки,
			|	КешОстаток.СуммаРучнойСкидки,
			|	КешОстаток.ПроцентАвтоматическойСкидки,
			|	КешОстаток.СуммаАвтоматическойСкидки,
			|	КешОстаток.СтавкаНДС,
			|	КешОстаток.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество > КешОстаток.Остаток
			|			ТОГДА -(КешОстаток.Остаток - КешОстаток.Количество)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешОстатокСоСклада
			|ИЗ
			|	КешОстаток КАК КешОстаток
			|ГДЕ
			|	КешОстаток.Остаток = 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешОстаток.Номенклатура,
			|	КешОстаток.Характеристика,
			|	КешОстаток.Склад,
			|	КешОстаток.Упаковка,
			|	ВЫБОР
			|		КОГДА КешОстаток.КоличествоУпаковок <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.КоличествоУпаковок
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА 0
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество <= КешОстаток.Остаток
			|			ТОГДА КешОстаток.Количество
			|		КОГДА КешОстаток.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА 0
			|		ИНАЧЕ КешОстаток.Остаток
			|	КОНЕЦ КАК Количество,
			|	КешОстаток.Цена,
			|	КешОстаток.ЕдиницаИзмерения,
			|	КешОстаток.ВидЦены,
			|	КешОстаток.ПроцентРучнойСкидки,
			|	КешОстаток.СуммаРучнойСкидки,
			|	КешОстаток.ПроцентАвтоматическойСкидки,
			|	КешОстаток.СуммаАвтоматическойСкидки,
			|	КешОстаток.СтавкаНДС,
			|	КешОстаток.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешОстаток.Количество > КешОстаток.Остаток
			|			ТОГДА -(КешОстаток.Остаток - КешОстаток.Количество)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешСоСклада
			|ИЗ
			|	КешОстаток КАК КешОстаток
			|ГДЕ
			|	КешОстаток.Остаток > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешНоменклатура.Номенклатура,
			|	КешНоменклатура.Характеристика,
			|	КешНоменклатура.Склад,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.КПоступлениюОстаток, 0) < ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - ЕСТЬNULL(КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.КПоступлениюОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КПоступлениюОстаток
			|ПОМЕСТИТЬ КешПоступленияОстаток
			|ИЗ
			|	КешНоменклатура КАК КешНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(
			|				,
			|				Номенклатура В
			|					(ВЫБРАТЬ
			|						КешНоменклатура.Номенклатура
			|					ИЗ
			|						КешНоменклатура)) КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешНоменклатура.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешНоменклатура.Склад)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КТС_ТоварыКПоступлениюПодОбеспечение.Остатки(
			|				,
			|				Номенклатура В
			|					(ВЫБРАТЬ
			|						КешНоменклатура.Номенклатура
			|					ИЗ
			|						КешНоменклатура)) КАК КТС_ТоварыКПоступлениюПодОбеспечениеОстатки
			|		ПО (КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Номенклатура = КешНоменклатура.Номенклатура)
			|			И (КТС_ТоварыКПоступлениюПодОбеспечениеОстатки.Склад = КешНоменклатура.Склад)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК Количество,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	"""" КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешОстатокСАвто
			|ИЗ
			|	КешОстатокСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	КешСоСклада.Остаток > 0

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	""""
			|ИЗ
			|	КешСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	КешСоСклада.Остаток > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК КоличествоУпаковок,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ КАК Количество,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|				И КешСоСклада.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Остаток,
			|	"""" КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешАвто
			|ИЗ
			|	КешОстатокСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	ВЫБОР
			|			КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|				ТОГДА ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ИНАЧЕ 1
			|		КОНЕЦ > 0

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток <= ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|			ТОГДА КешСоСклада.Остаток
			|		КОГДА КешСоСклада.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА КешСоСклада.Остаток
			|		ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|	КОНЕЦ,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	ВЫБОР
			|		КОГДА КешСоСклада.Остаток > ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0)
			|				И КешСоСклада.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА -(ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) - КешСоСклада.Остаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	""""
			|ИЗ
			|	КешСоСклада КАК КешСоСклада
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПоступленияОстаток КАК ТоварыКПоступлениюОстатки
			|		ПО (ТоварыКПоступлениюОстатки.Номенклатура = КешСоСклада.Номенклатура)
			|			И (ТоварыКПоступлениюОстатки.Склад = КешСоСклада.Склад)
			|ГДЕ
			|	ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюОстаток, 0) > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешАвто.Номенклатура,
			|	КешАвто.Характеристика,
			|	КешАвто.Упаковка,
			|	КешАвто.Склад,
			|	КешАвто.Остаток КАК КоличествоУпаковок,
			|	КешАвто.Остаток КАК Количество,
			|	КешАвто.Цена,
			|	КешАвто.ЕдиницаИзмерения,
			|	КешАвто.ВидЦены,
			|	КешАвто.ПроцентРучнойСкидки,
			|	КешАвто.СуммаРучнойСкидки,
			|	КешАвто.ПроцентАвтоматическойСкидки,
			|	КешАвто.СуммаАвтоматическойСкидки,
			|	КешАвто.СтавкаНДС,
			|	КешАвто.СтавкаНДСЧислом,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ) КАК ВариантОбеспечения
			|ПОМЕСТИТЬ КешПодЗаказ
			|ИЗ
			|	КешОстатокСАвто КАК КешАвто
			|ГДЕ
			|	КешАвто.Остаток > 0

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешАвто.Номенклатура,
			|	КешАвто.Характеристика,
			|	КешАвто.Упаковка,
			|	КешАвто.Склад,
			|	КешАвто.Остаток,
			|	КешАвто.Остаток,
			|	КешАвто.Цена,
			|	КешАвто.ЕдиницаИзмерения,
			|	КешАвто.ВидЦены,
			|	КешАвто.ПроцентРучнойСкидки,
			|	КешАвто.СуммаРучнойСкидки,
			|	КешАвто.ПроцентАвтоматическойСкидки,
			|	КешАвто.СуммаАвтоматическойСкидки,
			|	КешАвто.СтавкаНДС,
			|	КешАвто.СтавкаНДСЧислом,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
			|ИЗ
			|	КешАвто КАК КешАвто
			|ГДЕ
			|	КешАвто.Остаток > 0
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешСоСклада.Номенклатура,
			|	КешСоСклада.Характеристика,
			|	КешСоСклада.Упаковка,
			|	КешСоСклада.Склад,
			|	КешСоСклада.КоличествоУпаковок,
			|	КешСоСклада.Количество,
			|	КешСоСклада.Цена,
			|	КешСоСклада.ЕдиницаИзмерения,
			|	КешСоСклада.Упаковка КАК Упаковка1,
			|	КешСоСклада.ВидЦены,
			|	КешСоСклада.ПроцентРучнойСкидки,
			|	КешСоСклада.СуммаРучнойСкидки,
			|	КешСоСклада.ПроцентАвтоматическойСкидки,
			|	КешСоСклада.СуммаАвтоматическойСкидки,
			|	КешСоСклада.СтавкаНДС,
			|	КешСоСклада.СтавкаНДСЧислом,
			|	КешСоСклада.ВариантОбеспечения
			|ПОМЕСТИТЬ КешВариантыОбечспечения
			|ИЗ
			|	КешСоСклада КАК КешСоСклада

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешАвто.Номенклатура,
			|	КешАвто.Характеристика,
			|	КешАвто.Упаковка,
			|	КешАвто.Склад,
			|	КешАвто.КоличествоУпаковок,
			|	КешАвто.Количество,
			|	КешАвто.Цена,
			|	КешАвто.ЕдиницаИзмерения,
			|	КешАвто.Упаковка,
			|	КешАвто.ВидЦены,
			|	КешАвто.ПроцентРучнойСкидки,
			|	КешАвто.СуммаРучнойСкидки,
			|	КешАвто.ПроцентАвтоматическойСкидки,
			|	КешАвто.СуммаАвтоматическойСкидки,
			|	КешАвто.СтавкаНДС,
			|	КешАвто.СтавкаНДСЧислом,
			|	КешАвто.ВариантОбеспечения
			|ИЗ
			|	КешАвто КАК КешАвто

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешПодЗаказ.Номенклатура,
			|	КешПодЗаказ.Характеристика,
			|	КешПодЗаказ.Упаковка,
			|	КешПодЗаказ.Склад,
			|	КешПодЗаказ.КоличествоУпаковок,
			|	КешПодЗаказ.Количество,
			|	КешПодЗаказ.Цена,
			|	КешПодЗаказ.ЕдиницаИзмерения,
			|	КешПодЗаказ.Упаковка,
			|	КешПодЗаказ.ВидЦены,
			|	КешПодЗаказ.ПроцентРучнойСкидки,
			|	КешПодЗаказ.СуммаРучнойСкидки,
			|	КешПодЗаказ.ПроцентАвтоматическойСкидки,
			|	КешПодЗаказ.СуммаАвтоматическойСкидки,
			|	КешПодЗаказ.СтавкаНДС,
			|	КешПодЗаказ.СтавкаНДСЧислом,
			|	КешПодЗаказ.ВариантОбеспечения
			|ИЗ
			|	КешПодЗаказ КАК КешПодЗаказ

			|ОБЪЕДИНИТЬ ВСЕ

			|ВЫБРАТЬ
			|	КешУслуга.Номенклатура,
			|	КешУслуга.Характеристика,
			|	КешУслуга.Упаковка,
			|	КешУслуга.Склад,
			|	КешУслуга.КоличествоУпаковок,
			|	КешУслуга.Количество,
			|	КешУслуга.Цена,
			|	КешУслуга.ЕдиницаИзмерения,
			|	NULL,
			|	КешУслуга.ВидЦены,
			|	КешУслуга.ПроцентРучнойСкидки,
			|	КешУслуга.СуммаРучнойСкидки,
			|	КешУслуга.ПроцентАвтоматическойСкидки,
			|	КешУслуга.СуммаАвтоматическойСкидки,
			|	КешУслуга.СтавкаНДС,
			|	КешУслуга.СтавкаНДСЧислом,
			|	КешУслуга.Назначения
			|ИЗ
			|	КешУслуга КАК КешУслуга
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КешВариантыОбечспечения.Номенклатура,
			|	КешВариантыОбечспечения.Характеристика,
			|	КешВариантыОбечспечения.Упаковка,
			|	КешВариантыОбечспечения.Склад,
			|	КешВариантыОбечспечения.КоличествоУпаковок,
			|	КешВариантыОбечспечения.Количество,
			|	КешВариантыОбечспечения.Цена,
			|	КешВариантыОбечспечения.ЕдиницаИзмерения,
			|	КешВариантыОбечспечения.Упаковка КАК Упаковка1,
			|	КешВариантыОбечспечения.ВидЦены,
			|	КешВариантыОбечспечения.ПроцентРучнойСкидки,
			|	КешВариантыОбечспечения.СуммаРучнойСкидки,
			|	КешВариантыОбечспечения.ПроцентАвтоматическойСкидки,
			|	КешВариантыОбечспечения.СуммаАвтоматическойСкидки,
			|	КешВариантыОбечспечения.СтавкаНДС,
			|	КешВариантыОбечспечения.СтавкаНДСЧислом,
			|	КешВариантыОбечспечения.ВариантОбеспечения
			|ПОМЕСТИТЬ КешКорзина
			|ИЗ
			|	КешВариантыОбечспечения КАК КешВариантыОбечспечения
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешКорзина.Номенклатура,
			|	КешКорзина.Характеристика,
			|	КешКорзина.Склад,
			|	КешКорзина.КоличествоУпаковок,
			|	КешКорзина.ЕдиницаИзмерения,
			|	КешКорзина.Упаковка,
			|	КешКорзина.ВидЦены,
			|	ВЫБОР
			|		КОГДА КешКорзина.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			ТОГДА КешКорзина.Цена
			|		ИНАЧЕ ЦеныКорзины.Цена * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) * (КурсЦены.Курс / КурсЦены.Кратность) / (КурсСоглашения.Курс / КурсСоглашения.Кратность)
			|	КОНЕЦ КАК Цена,
			|	КешКорзина.ПроцентРучнойСкидки,
			|	КешКорзина.СуммаРучнойСкидки,
			|	КешКорзина.ПроцентАвтоматическойСкидки,
			|	КешКорзина.СуммаАвтоматическойСкидки,
			|	КешКорзина.СтавкаНДС,
			|	КешКорзина.СтавкаНДСЧислом,
			|	КурсСоглашения.Курс / КурсСоглашения.Кратность КАК КурсПоСоглашению,
			|	ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) КАК Коэффициент,
			|	ВЫБОР
			|		КОГДА КешКорзина.КоличествоУпаковок * ЕСТЬNULL(КешКорзина.Упаковка.Коэффициент, 1) <= ОстатокНаСкладе.ВНаличииОстаток - ОстатокНаСкладе.ВРезервеОстаток
			|			ТОГДА ЛОЖЬ
			|		КОГДА КешКорзина.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Доступно,
			|	КешКорзина.ВариантОбеспечения
			|ПОМЕСТИТЬ PreResult
			|ИЗ
			|	КешКорзина КАК КешКорзина
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						КешКорзина.Номенклатура,
			|						КешКорзина.Характеристика
			|					ИЗ
			|						КешКорзина)) КАК ЦеныКорзины
			|		ПО КешКорзина.Номенклатура = ЦеныКорзины.Номенклатура
			|			И КешКорзина.Характеристика = ЦеныКорзины.Характеристика
			|			И КешКорзина.ВидЦены = ЦеныКорзины.ВидЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаСоглашения) КАК КурсСоглашения
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦены
			|		ПО (ЦеныКорзины.Валюта = КурсЦены.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
			|				,
			|				(Номенклатура, Характеристика, Склад) В
			|					(ВЫБРАТЬ
			|						КешКорзина.Номенклатура,
			|						КешКорзина.Характеристика,
			|						КешКорзина.Склад
			|					ИЗ
			|						КешКорзина)) КАК ОстатокНаСкладе
			|		ПО КешКорзина.Номенклатура = ОстатокНаСкладе.Номенклатура
			|			И КешКорзина.Характеристика = ОстатокНаСкладе.Характеристика
			|			И КешКорзина.Склад = ОстатокНаСкладе.Склад
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(PreResult.Цена * PreResult.КоличествоУпаковок) КАК Оборот
			|ПОМЕСТИТЬ КешБудущийОборот
			|ИЗ
			|	PreResult КАК PreResult
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КешПредвРезультат.Номенклатура,
			|	КешПредвРезультат.Характеристика,
			|	ВЫБОР
			|		КОГДА КешПредвРезультат.ВидЦены <> УчПолБонусы.ВидЦеныБонус
			|			ТОГДА 0
			|		КОГДА КешПредвРезультат.ПроцентРучнойСкидки <> 0
			|				ИЛИ КешПредвРезультат.ПроцентАвтоматическойСкидки <> 0
			|			ТОГДА 0
			|		КОГДА Ставки.Значение = 0
			|			ТОГДА 0
			|		КОГДА КешПредвРезультат.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
			|				И НЕ УчПолБонусы.ЕстьСкидкиДляАкций
			|			ТОГДА 0
			|		ИНАЧЕ Ставки.Значение
			|	КОНЕЦ КАК БонусПроцент,
			|	КешПредвРезультат.Склад
			|ПОМЕСТИТЬ КешПроценты
			|ИЗ
			|	PreResult КАК КешПредвРезультат
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				(Номенклатура, Характеристика) В
			|						(ВЫБРАТЬ
			|							КешКорзина.Номенклатура,
			|							КешКорзина.Характеристика
			|						ИЗ
			|							КешКорзина)
			|					И ВидЦены В
			|						(ВЫБРАТЬ
			|							РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних.ВидЦены
			|						ИЗ
			|							РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних)) КАК ВходнаяЦена
			|		ПО (ВходнаяЦена.Номенклатура = КешПредвРезультат.Номенклатура)
			|			И (ВходнаяЦена.Характеристика = КешПредвРезультат.Характеристика)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсЦена
			|		ПО (КурсЦена.Валюта = ВходнаяЦена.Валюта)
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешБудущийОборот КАК КешБудущийОборот
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК Ставки
			|		ПО (Ставки.НижняяГраница / КешПредвРезультат.КурсПоСоглашению <= &Оборот + КешБудущийОборот.Оборот)
			|			И (Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению > &Оборот + КешБудущийОборот.Оборот
			|				ИЛИ Ставки.ВерхняяГраница / КешПредвРезультат.КурсПоСоглашению = 0)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних КАК УчПолБонусы
			|		ПО (ИСТИНА)
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	PreResult.Номенклатура,
			|	ПРЕДСТАВЛЕНИЕ(PreResult.Номенклатура) КАК Содержание,
			|	PreResult.Характеристика,
			|	PreResult.Склад,
			|	PreResult.Коэффициент * PreResult.КоличествоУпаковок КАК Количество,
			|	PreResult.КоличествоУпаковок,
			|	PreResult.ЕдиницаИзмерения,
			|	PreResult.Упаковка,
			|	PreResult.ВидЦены,
			|	PreResult.Цена,
			|	PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки КАК Сумма,
			|	PreResult.ПроцентРучнойСкидки,
			|	PreResult.СуммаРучнойСкидки,
			|	PreResult.ПроцентАвтоматическойСкидки,
			|	PreResult.СуммаАвтоматическойСкидки,
			|	PreResult.СтавкаНДС,
			|	ВЫБОР
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
			|			ТОГДА ВЫБОР
			|					КОГДА &ЦенаВключаетНДС
			|						ТОГДА (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) / (1 + PreResult.СтавкаНДСЧислом) * PreResult.СтавкаНДСЧислом
			|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * PreResult.СтавкаНДСЧислом
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаНДС,
			|	ВЫБОР
			|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
			|			ТОГДА ВЫБОР
			|					КОГДА &ЦенаВключаетНДС
			|						ТОГДА PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки
			|					ИНАЧЕ (PreResult.КоличествоУпаковок * PreResult.Цена - PreResult.СуммаРучнойСкидки - PreResult.СуммаАвтоматическойСкидки) * (1 + PreResult.СтавкаНДСЧислом)
			|				КОНЕЦ
			|		ИНАЧЕ PreResult.КоличествоУпаковок * PreResult.Цена
			|	КОНЕЦ КАК СуммаВсего,
			|	PreResult.Цена * PreResult.КоличествоУпаковок * КешПроценты.БонусПроцент * 0.01 КАК КолонкаБонусы,
			|	КешПроценты.БонусПроцент КАК ОборотПроцент,
			|	PreResult.Доступно,
			|	PreResult.ВариантОбеспечения КАК ВариантОбеспечения
			|ИЗ
			|	PreResult КАК PreResult
			|		ЛЕВОЕ СОЕДИНЕНИЕ КешПроценты КАК КешПроценты
			|		ПО (КешПроценты.Номенклатура = PreResult.Номенклатура)
			|			И (КешПроценты.Характеристика = PreResult.Характеристика)
			|			И PreResult.Склад = КешПроценты.Склад";
 Возврат ТекстЗапроса;	
КонецФункции // ПолучитьТекстЗапросаВариантыОбеспеченияНоменклатуры()



































 








