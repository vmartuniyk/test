
&НаКлиенте
Перем ТекущиеДанныеИсходноеСостояние;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	ИспользоватьОбменСПодключаемымОборудованиемOffline = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованиемOffline");
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Объект.НазначениеШаблона = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров;
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Объект.ИсходныеДанныеТовары.Загрузить(СтруктураДанных.Товары);
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьОрганизацию", ПараметрДействия) Тогда
				Объект.Организация = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "Склад", ПараметрДействия, ЗначениеЗаполнено(ПараметрДействия));
				Объект.Склад = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьВидЦены", ПараметрДействия) Тогда
				Объект.ВидЦены = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьПравилоОбмена", ПараметрДействия) Тогда
				Объект.ПравилоОбмена = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ПоказыватьКолонкуКоличествоВДокументе", ПараметрДействия) Тогда
				Элементы.ТоварыКоличествоВДокументе.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента", ПараметрДействия) Тогда
				ПечатьИзДокумента = Истина;
				Элементы.Настройки.Видимость = Ложь;
			КонецЕсли;
			
			ЗаполнитьКоличествоЭтикетокПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ПараметрДействия);
			ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе", ПараметрДействия);
			ЗаполнитьКоличествоЦенниковПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЦенниковПоДокументу", ПараметрДействия);
			ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе", ПараметрДействия);
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежим", ПараметрДействия) Тогда
				УстановитьРежим(ПараметрДействия);
			Иначе
				ВызватьИсключение НСтр("ru = 'Режим печати не установлен'");;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров", ПараметрДействия) Тогда
				ЗаполнитьТаблицуТоваровНаСервере(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Вызов обработки из интерфейса
		ЗаполнитьКоличествоЭтикетокПоДокументу        = Ложь;
		ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе = Истина;
		ЗаполнитьКоличествоЦенниковПоДокументу        = Ложь;
		ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе = Истина;
		
		УстановитьРежимПечатьЭтикетокИЦенниковНаСервере();
		
	КонецЕсли;
	
	ОбновитьШаблоныВлияющиеНаВидимостьЭлементов();
	
	ОбновитьВидимостьЗависимыхОтШаблонаПолей();
	
	Элементы.ТоварыУстановитьНовыйШтрихкод.Доступность = Пользователи.РолиДоступны("РегистрацияШтрихкодовНоменклатуры");
	
	Если ИспользоватьАссортимент Тогда
		Объект.РежимПолученияЦен = 2;
	Иначе
		Объект.РежимПолученияЦен = 1;
		Элементы.Склад.Видимость = Ложь;
	КонецЕсли;
	ПереключательРежимаПолученияЦенПриИзмененииСервер();
	
	ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныЭтикетокИЦенников" Тогда
		
		ОбновитьШаблоныВлияющиеНаВидимостьЭлементов();
		ОбновитьВидимостьЗависимыхОтШаблонаПолей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если ЭтоАдресВременногоХранилища(СохраненныеНастройки) Тогда
		
		ТаблицаСохраненныеНастройки = ПолучитьИзВременногоХранилища(СохраненныеНастройки);
		Для Каждого СтрокаТЧ Из ТаблицаСохраненныеНастройки Цикл
			Настройки.Вставить(СтрокаТЧ.Ключ, СтрокаТЧ.Значение);
		КонецЦикла;
		
	Иначе
		
		// Сохранение отбора выполняется только если это не печать из документа
		Настройки.Вставить("НастройкиОтбора",Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("АдресВХранилище") И ЭтоАдресВременногоХранилища(Параметры.АдресВХранилище) Тогда
		
		ТаблицаСохраненныеНастройки = Новый ТаблицаЗначений;
		ТаблицаСохраненныеНастройки.Колонки.Добавить("Ключ");
		ТаблицаСохраненныеНастройки.Колонки.Добавить("Значение");
		
		Для Каждого КлючИЗначение Из Настройки Цикл
			НоваяСтрока = ТаблицаСохраненныеНастройки.Добавить();
			НоваяСтрока.Ключ = КлючИЗначение.Ключ;
			НоваяСтрока.Значение = КлючИЗначение.Значение;
		КонецЦикла;
		
		СохраненныеНастройки = ПоместитьВоВременноеХранилище(ТаблицаСохраненныеНастройки, УникальныйИдентификатор);
		
		Настройки.Очистить();
		
	Иначе
		
		ВидимостьОтбора = Настройки.Получить("ВидимостьОтбора");
		Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
		Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
		
		ВидимостьРежимаЗаполнения = Настройки.Получить("ВидимостьРежимаЗаполнения");
		Элементы.ГруппаРежимЗаполнения.Видимость = ВидимостьРежимаЗаполнения;
		Элементы.РежимЗаполнения.Заголовок = ?(ВидимостьРежимаЗаполнения, НСтр("ru = 'Скрыть режим заполнения'"), НСтр("ru = 'Показать режим заполнения'"));
		
		НастройкиОтбора = Настройки.Получить("НастройкиОтбора");
		Если НастройкиОтбора <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтбора.Получить());
		Иначе
			ЗагрузитьНастройкиОтбораПоУмолчанию();
		КонецЕсли;
		
		Режим = Настройки.Получить("Режим");
		Если ЗначениеЗаполнено(Режим)
			И (Режим = "ПечатьЭтикетокИЦенников" ИЛИ Режим = "ПечатьЦенников" ИЛИ Режим = "ПечатьЭтикеток") Тогда
			УстановитьРежим(Режим);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "Склад", Объект.Склад, ЗначениеЗаполнено(Объект.Склад));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыШаблонЦенникаПриИзменении(Элемент)
	ОбновитьВидимостьЗависимыхОтШаблонаПолей();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиПриИзменении(Элемент)
	ОбновитьВидимостьЗависимыхОтШаблонаПолей();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоПоУмолчанию(Команда)
	
	УстановитьКоличествоПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваров(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Истина, Ложь);
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Сохранить данные о количестве, шаблонах в табличной части при перезаполнении?'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Истина, Истина);
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Необходимо заполнить поле «Организация».'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ВыполнитьПроверку();
	Если Не РезультатПроверки.ТоварыВыбраны Тогда
		Предупреждение(НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки.ПроверкаВыполнена Тогда
		
		ПараметрКоманды = Новый Массив;   // Добавим объект обработки печати ценников и этикеток в массив параметров печати.
		ПараметрКоманды.Добавить(ПолучитьПараметры()); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0]
		
		ИменаМакетов = "";
		
		Если Режим = "ПечатьЭтикетокИЦенников" Тогда
			ИменаМакетов = "ЭтикеткаТовары,ЦенникТовары";
		ИначеЕсли Режим = "ПечатьЦенников" Тогда
			ИменаМакетов = "ЦенникТовары";
		ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
			ИменаМакетов = "ЭтикеткаТовары";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
			ИменаМакетов,
			ПараметрКоманды,
			ЭтаФорма,); // Форма владелец
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.Отбор.Заголовок = ?(ВидимостьОтбора, НСтр("ru = 'Скрыть отбор'"), НСтр("ru = 'Показать отбор'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьРежимЗаполнения(Команда)
	
	ВидимостьРежимаЗаполнения = НЕ ВидимостьРежимаЗаполнения;
	Элементы.ГруппаРежимЗаполнения.Видимость = ВидимостьРежимаЗаполнения;
	Элементы.РежимЗаполнения.Заголовок = ?(ВидимостьРежимаЗаполнения, НСтр("ru = 'Скрыть режим заполнения'"), НСтр("ru = 'Показать режим заполнения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЦенников(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЧисло(ВыбранноеЗначение, НСтр("ru = 'Введите количество ценников'"), 10, 2) Тогда
		
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЦенников  = ВыбранноеЗначение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЭтикеток(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Неопределено;
	Если ВвестиЧисло(ВыбранноеЗначение, НСтр("ru = 'Введите количество'"), 10, 2) Тогда
		
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЭтикеток  = ВыбранноеЗначение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенников(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	СписокЦенников 		 = ПолучитьСписокДоступныхЦенников(Объект.Организация);
	ПараметрыФормыВыбора = Новый Структура;
	
	Если СписокЦенников = Неопределено Тогда
		ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Назначение", ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров")));
	Иначе
		ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Ссылка", СписокЦенников));
	КонецЕсли;
	
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработкаУстановкиШаблоновЦенников", ЭтаФорма, МассивСтрок);
	ВыбранноеЗначение   = ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора", ПараметрыФормыВыбора, ЭтаФорма, Новый УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУстановкиШаблоновЦенников(Результат, Параметр) Экспорт
	
	Если Результат <> Неопределено Тогда
		УстановитьШаблонЦенниковНаСервере(Результат, Параметр);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУстановкиШаблоновЦенников()
 
&НаСервере
Процедура УстановитьШаблонЦенниковНаСервере(ШаблонЦенника, МассивСтрок)

	Для каждого СтрокаМассива Из МассивСтрок Цикл
		НайденнаяСтрока					= Объект.Товары.НайтиПоИдентификатору(СтрокаМассива);
		НайденнаяСтрока.ШаблонЦенника   = ШаблонЦенника;
	КонецЦикла; 

КонецПроцедуры // УстановитьШаблонЦенниковНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхЦенников(ОрганизацияСсылка)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШаблонЦенника КАК ШаблонЦенника
	                      |ИЗ
	                      |	РегистрСведений.КТС_НастройкиЦенников.СрезПоследних(&ТекущаяДата, Организация = &Организация)");
						  
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ШаблонЦенника");
	
КонецФункции // ПолучитьСписокДоступныхЦенников()
 
 

&НаКлиенте
Процедура УстановитьШаблонЭтикеток(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Назначение", ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров")));
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора", ПараметрыФормыВыбора, ЭтаФорма);	
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенников(Команда)
	
	УстановитьРежимПечатьЦенниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЭтикетокИЦенников(Команда)
	
	УстановитьРежимПечатьЭтикетокИЦенниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЭтикеток(Команда)
	
	УстановитьРежимПечатьЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN13(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьОбменСПодключаемымОборудованиемOffline И ЕстьВесовыеТовары() И Не ЗначениеЗаполнено(Объект.ПравилоОбмена) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Правило обмена""'"),,"ПравилоОбмена", "Объект.ПравилоОбмена");
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Результат = УстановитьНовыеШтрихкодыEAN13НаСервере(ОписаниеОшибки);
	
	Если Результат = 0 И ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Предупреждение(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОтбораПоУмолчанию(Команда)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "DownloadDocument",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);
				
				Если Результат Тогда
					
					ТаблицаЗагрузкиИзТСД = Новый Массив();
					Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
						
						Штрихкод   = ВыходныеПараметры[0][Индекс * 2 + 0];
						Количество = ВыходныеПараметры[0][Индекс * 2 + 1];
						
						ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, ?(Количество <> Неопределено, Количество, 0)));
						
					КонецЦикла;
					
					ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
					
				Иначе
					
					ТекстСообщения = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
					                          |%ОписаниеОшибки%
					                          |Данные из терминала сбора данных не загружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				                          |%ОписаниеОшибки%
				                          |Данные из терминала сбора данных не загружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("Документ ",                               ПредопределенноеЗначение("Документ.УстановкаЦенНоменклатуры.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Заголовок",                               НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("Дата",                                    ТекущаяДата());
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение и инициализация

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Объект.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(Объект.ВидЦены);
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьРозничныйСкладПоУмолчанию(Объект.Склад);
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПолучитьПараметры()
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаДополнительно", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТЧ ИЗ Объект.Товары Цикл
		Если Не СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ШаблонЭтикетки) Тогда
			НоваяСтрока.КоличествоЭтикеток = 0;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ШаблонЦенника) Тогда
			НоваяСтрока.КоличествоЦенников = 0;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация",   Объект.Организация);
	ПараметрыПечати.Вставить("ПравилоОбмена", Объект.ПравилоОбмена);
	ПараметрыПечати.Вставить("ВидЦены",       Объект.ВидЦены);
	ПараметрыПечати.Вставить("Дата",          Объект.Дата);
	ПараметрыПечати.Вставить("Склад",         Объект.Склад);
	ПараметрыПечати.Вставить("ВидЦеныДополнительно", Объект.ВидЦеныДополнительно);
	ПараметрыПечати.Вставить("ДатаДополнительно",    Объект.ДатаДополнительно);
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимПечатьЭтикетокИЦенниковНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = "ПечатьЭтикетокИЦенников";
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать этикеток и ценников из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать этикеток и ценников'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЭтикетокНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = "ПечатьЭтикеток";
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать этикеток из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать этикеток'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ВидимостьЭтикетки = Ложь;
	ВидимостьЦенники  = Ложь;
		
	Если Режим = "ПечатьЭтикетокИЦенников" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Режим = "ПечатьЦенников" Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоЭтикеток.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыШаблонЭтикетки.Видимость                   = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьШаблонЭтикеток.Видимость         = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьКоличествоЭтикеток.Видимость     = ВидимостьЭтикетки;
	Элементы.РежимЗаполненияЭтикеток.Видимость                = ВидимостьЭтикетки;
	Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = ВидимостьЭтикетки И ПечатьИзДокумента;
	
	Элементы.ТоварыКоличествоЦенников.Видимость               = ВидимостьЦенники;
	Элементы.ТоварыШаблонЦенника.Видимость                    = ВидимостьЦенники;
	Элементы.ТоварыУстановитьШаблонЦенников.Видимость         = ВидимостьЦенники;
	Элементы.ТоварыУстановитьКоличествоЦенников.Видимость     = ВидимостьЦенники;
	Элементы.РежимЗаполненияЦенников.Видимость                = ВидимостьЦенники;
	Элементы.ЗаполнитьКоличествоЦенниковПоДокументу.Видимость = ВидимостьЦенники И ПечатьИзДокумента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковНаСервере()
	
	АвтоЗаголовок = Ложь;
	Режим = "ПечатьЦенников";
	
	Если ПечатьИзДокумента Тогда
		Заголовок = НСтр("ru = 'Печать ценников из документа'");
	Иначе
		Заголовок = НСтр("ru = 'Печать ценников'");
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежим(ПараметрРежим)
	
	Если ПараметрРежим = "ПечатьЭтикетокИЦенников" Тогда
		УстановитьРежимПечатьЭтикетокИЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЦенников" Тогда
		УстановитьРежимПечатьЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЭтикеток" Тогда
		УстановитьРежимПечатьЭтикетокНаСервере();
	Иначе
		ВызватьИсключение НСтр("ru = 'Установленный режим печати не поддерживается'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВесовыеТовары()
	
	ЕстьВесовыеТовары = Ложь;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТЧ.Весовой Тогда
			ЕстьВесовыеТовары = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьВесовыеТовары;
	
КонецФункции

&НаСервере
Функция УстановитьНовыеШтрихкодыEAN13НаСервере(ОписаниеОшибки = "")
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Штрихкоды = Новый Соответствие;
	
	ПрефиксШтучногоТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксШтучногоТовара();
	ПрефиксВесовогоТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксВесовогоТовара();
	ПрефиксВнутреннегоШтрихкода = Формат(Константы.ПрефиксШтучногоШтрихкода.Получить(),"ЧЦ=2; ЧН=; ЧВН=");
	
	НачатьТранзакцию();
	
	Попытка
	
	МаксимальныйКод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом(ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода);
	МаксимальныйКодВесовогоТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаВесовогоШтрихкодаЧислом(ПрефиксВесовогоТовара);
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			Количество = Количество + 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовыйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Номенклатура = СтрокаТЧ.Номенклатура; 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка       = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		Если Не СтрокаТЧ.Весовой Тогда
			НовыйШтрихкод.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоКоду(Мин(МаксимальныйКод + 1, 99999999), ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода);
			НовыйШтрихкод.Записать();
			
			Штрихкоды.Вставить(СтрокаТЧ, НовыйШтрихкод.Штрихкод);
			МаксимальныйКод = МаксимальныйКод + 1;
		Иначе
			НовыйШтрихкод.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(Мин(МаксимальныйКодВесовогоТовара + 1, 99999), ПрефиксВесовогоТовара);
			НовыйШтрихкод.Записать();
			
			Штрихкоды.Вставить(СтрокаТЧ, НовыйШтрихкод.Штрихкод);
			МаксимальныйКодВесовогоТовара = МаксимальныйКодВесовогоТовара + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При записи штрихкодов произошла ошибка.
		                      |Запись штрихкодов не выполнена.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат 0;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Для Каждого КлючИЗначение Из Штрихкоды Цикл
		КлючИЗначение.Ключ.Штрихкод = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	
	// Расчет количества Этикеток.
	Если ЗаполнитьКоличествоЭтикетокПоДокументу И НЕ ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
	ИначеЕсли ЗаполнитьКоличествоЭтикетокПоДокументу И ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.КоличествоВДокументе > СтрокаТЧ.ОстатокНаСкладе,СтрокаТЧ.ОстатокНаСкладе,СтрокаТЧ.КоличествоВДокументе);
	ИначеЕсли НЕ ЗаполнитьКоличествоЭтикетокПоДокументу И ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
	КонецЕсли;
	
	// Расчет количества Ценников.
	Если ЗаполнитьКоличествоЦенниковПоДокументу И НЕ ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.КоличествоВДокументе > 0, 1, 0);
	ИначеЕсли ЗаполнитьКоличествоЦенниковПоДокументу И ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.ОстатокНаСкладе > 0 ИЛИ СтрокаТЧ.КоличествоВДокументе > 0, 1, 0);
	ИначеЕсли НЕ ЗаполнитьКоличествоЦенниковПоДокументу И ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе Тогда
		СтрокаТЧ.КоличествоЦенников = ?(СтрокаТЧ.ОстатокНаСкладе > 0, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДанных(СтруктураНастроек)
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Организация",          Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("Дата",             Объект.Дата);
	Иначе
		СтруктураНастроек.ПараметрыДанных.Вставить("Дата",             ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаДополнительно) Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("ДатаДополнительно",    Объект.ДатаДополнительно);
	Иначе
		СтруктураНастроек.ПараметрыДанных.Вставить("ДатаДополнительно",    ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",              Объект.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦеныДополнительно", Объект.ВидЦеныДополнительно);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоОбмена",        Объект.ПравилоОбмена);
	СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина",       ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Склад, "ФорматМагазина"));
	
КонецПроцедуры


&НаСервере
Процедура УстановитьОбязательныеПоляДанных(СтруктураНастроек, ДобавитьШаблоны = Ложь)
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("Весовой");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ДатаПоследнегоИзмененияЦены");
	
	Если ИспользоватьВидЦеныДополнительно И ЗначениеЗаполнено(Объект.ВидЦеныДополнительно) Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("ЦенаДополнительно");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно");
	КонецЕсли;
	
	// Шаблоны этикеток и ценников.
	Если ДобавитьШаблоны Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЦенника");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ШаблонЭтикетки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ШаблонЦенника");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(ПроверятьЗаполнение = Истина, Сохранять = Истина)
	
	Если ПроверятьЗаполнение И ЭтаФорма.ПроверитьЗаполнение() = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если ИспользоватьАссортимент <> Истина Тогда
		ИспользоватьАссортимент = Ложь;
	КонецЕсли;
	
	// Сохранение выбранных позиций для их последующего восстановления.
	Если Сохранять Тогда
		ТаблицаВыбранныеПозиции = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Упаковка, ШаблонЦенника, КоличествоЦенников, ШаблонЭтикетки, КоличествоЭтикеток");
	КонецЕсли;
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	
	УстановитьОбязательныеПоляДанных(СтруктураНастроек, Истина);
	
	УстановитьПараметрыДанных(СтруктураНастроек);
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	Если Объект.ИсходныеДанныеТовары.Количество() > 0 ИЛИ ПечатьИзДокумента Тогда
		Если ИспользоватьАссортимент Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТоварыАссортимент";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТовары";
		КонецЕсли;
		СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанныеТовары.Выгрузить();
	Иначе
		Если ИспользоватьАссортимент Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТоварыАссортимент";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТовары";
		КонецЕсли;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = РеквизитФормыВЗначение("Объект").ПодготовитьСтруктуруДанных(СтруктураНастроек, "Товары");
	Для Каждого СтрокаТЧ Из СтруктураРезультата.Таблица Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Цена                        = СтрокаТЧ.Цена;
		НоваяСтрока.ДатаПоследнегоИзмененияЦены = СтрокаТЧ.ДатаПоследнегоИзмененияЦены;
		Если ЗначениеЗаполнено(Объект.ВидЦеныДополнительно) Тогда
			НоваяСтрока.ЦенаДополнительно                        = СтрокаТЧ.ЦенаДополнительно;
			НоваяСтрока.ДатаПоследнегоИзмененияЦеныДополнительно = СтрокаТЧ.ДатаПоследнегоИзмененияЦеныДополнительно;
		КонецЕсли;
		
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		
		ШаблонЦенникаВидаНоменклатуры    = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ВидНоменклатуры.ШаблонЦенника")];
		ШаблонЦенникаНоменклатуры        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ШаблонЦенника")];
		
		Если СтруктураРезультата.ИмяМакета = "ПоляШаблонаБДТовары" ИЛИ СтруктураРезультата.ИмяМакета = "ПоляШаблонаТовары" Тогда
			Если СтрокаТЧ.ШаблонЦенникаДляВидаНоменклатуры = Неопределено И СтрокаТЧ.ОбщийШаблонЦенника = Неопределено Тогда
				НоваяСтрока.ШаблонЦенника = ?(ЗначениеЗаполнено(ШаблонЦенникаНоменклатуры), ШаблонЦенникаНоменклатуры, ШаблонЦенникаВидаНоменклатуры);
			ИначеЕсли СтрокаТЧ.ШаблонЦенникаДляВидаНоменклатуры = Неопределено Тогда
				НоваяСтрока.ШаблонЦенника = СтрокаТЧ.ОбщийШаблонЦенника;
			Иначе
				НоваяСтрока.ШаблонЦенника = СтрокаТЧ.ШаблонЦенникаДляВидаНоменклатуры;
			КонецЕсли;
		Иначе
			НоваяСтрока.ШаблонЦенника = ?(ЗначениеЗаполнено(ШаблонЦенникаНоменклатуры), ШаблонЦенникаНоменклатуры, ШаблонЦенникаВидаНоменклатуры);
		КонецЕсли;
		
		ШаблонЦенникаВидаНоменклатуры    = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки")];
		ШаблонЦенникаНоменклатуры        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Номенклатура.ШаблонЭтикетки")];
		НоваяСтрока.ШаблонЭтикетки       = ?(ЗначениеЗаполнено(ШаблонЦенникаНоменклатуры), ШаблонЦенникаНоменклатуры, ШаблонЦенникаВидаНоменклатуры);
		
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.КоличествоВДокументе = СтрокаТЧ.Количество;
		НоваяСтрока.Весовой              = СтрокаТЧ.Весовой;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		// Восстановление позиций, сохраненных перед заполнением ТЧ.
		Если Сохранять Тогда
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
				ПараметрыОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
				ПараметрыОтбора.Вставить("Упаковка", НоваяСтрока.Упаковка);
			КонецЕсли;
			НайденныеСтроки = ТаблицаВыбранныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Выбран = Истина;
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверку()
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = СтрокаТЧ.НомерСтроки - 1;
		
		Если Режим = "ПечатьЭтикетокИЦенников" Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КоличествоЦенников) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено количество ценников в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не выбран шаблон ценника в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КоличествоЭтикеток) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено количество этикеток в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
				
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не выбран шаблон этикетки в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
			
			Если СтрокаТЧ.КоличествоЭтикеток = 0 Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено количество этикеток в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не выбран шаблон этикетки в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Режим = "ПечатьЦенников" Тогда
			
			Если СтрокаТЧ.КоличествоЦенников = 0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено количество ценников в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не выбран шаблон ценника в строке: %1'"),
					НомерСтроки+1);
				Сообщение.Поле = "Объект.Товары["+НомерСтроки+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;

	Возврат Новый Структура("ТоварыВыбраны, ПроверкаВыполнена", Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() > 0, Не ЕстьОшибки И ЭтаФорма.ПроверитьЗаполнение());
	
КонецФункции

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ);		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УстановитьЭлементОтбораСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, Использование = Истина)

	НайденныйЭлемент = Неопределено;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			НайденныйЭлемент = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		ПравоеЗначение = СписокЗначений;
	Иначе
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныйЭлемент.Использование  = Использование;
	НайденныйЭлемент.ЛевоеЗначение  = Поле;
	НайденныйЭлемент.ПравоеЗначение = ПравоеЗначение;
	
	Возврат НайденныйЭлемент;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаТовары");
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаКлиенте
Функция ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
	
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте: не заполнены либо количество, либо не задан шаблон ценника (этикетки). В этом случае отметка выбора для строк не может быть установлена.'");
	
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя("Операция выполнена", ,Текст);
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСтроки()
	
	Количество = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		СтрокаТЧ.Выбран = Истина;
		
		Если СтрокаТЧ.Выбран Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВсего = Объект.Товары.Количество();
	
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки()

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииНоменклатуры(ТекущиеДанные)
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	
	УстановитьОбязательныеПоляДанных(СтруктураНастроек);
	
	УстановитьПараметрыДанных(СтруктураНастроек);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Таблица.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТовары";
	СтруктураНастроек.ИсходныеДанные                 = Таблица;
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек, "Товары");
	Данные = СтруктураРезультата.Таблица[0];
	
	ВозвращаемоеЗначение = Новый Структура("Штрихкод, Весовой, ОстатокНаСкладе, Цена");
	ВозвращаемоеЗначение.Штрихкод        = Данные[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["Штрихкод"]];
	ВозвращаемоеЗначение.Цена            = Данные[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["Цена"]];
	ВозвращаемоеЗначение.Весовой         = Данные[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["Весовой"]];
	ВозвращаемоеЗначение.ОстатокНаСкладе = Данные[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["ОстатокНаСкладе"]];
	
	Если ТекущиеДанные.Свойство("СтараяУпаковка") Тогда
		КоличествоВДокументе = ТекущиеДанные.СтароеКоличествоВДокументе
		/ ?(ЗначениеЗаполнено(ТекущиеДанные.Упаковка.Коэффициент), ТекущиеДанные.Упаковка.Коэффициент, 1)
		* ?(ЗначениеЗаполнено(ТекущиеДанные.СтараяУпаковка.Коэффициент), ТекущиеДанные.СтараяУпаковка.Коэффициент, 1);
		ВозвращаемоеЗначение.Вставить("КоличествоВДокументе", КоличествоВДокументе);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Элементы.Товары.ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ПриИзмененииНоменклатуры(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Элементы.Товары.ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ПриИзмененииНоменклатуры(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Новый Структура("Номенклатура, Характеристика, Упаковка, СтараяУпаковка, СтароеКоличествоВДокументе");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Элементы.Товары.ТекущиеДанные);
	ТекущиеДанные.СтараяУпаковка = ТекущиеДанныеИсходноеСостояние.Упаковка;
	ТекущиеДанные.СтароеКоличествоВДокументе = ТекущиеДанныеИсходноеСостояние.КоличествоВДокументе;
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ПриИзмененииНоменклатуры(ТекущиеДанные));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШтрихкодыНоменклатуры(Структура)
	
	Возврат РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(
		Структура.Номенклатура,
		Структура.Характеристика,
		Структура.Упаковка);
	
КонецФункции

&НаКлиенте
Процедура ТоварыШтрихкодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	Структура.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	Структура.Вставить("Упаковка",       ТекущиеДанные.Упаковка);
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьШтрихкодыНоменклатуры(Структура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШтрихкодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка 	= Ложь;
	Обработчик 				= Новый ОписаниеОповещения("ВыборШтрихкодИзВыпадающегоСписка", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	СписокВыбора			= Новый СписокЗначений;
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	Структура.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	Структура.Вставить("Упаковка",       ТекущиеДанные.Упаковка);
	
	СписокВыбора.ЗагрузитьЗначения(ПолучитьШтрихкодыНоменклатуры(Структура));
	
	НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(ТекущиеДанные.Штрихкод);
	Если НачальныйЭлемент = Неопределено Тогда
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент);
	Иначе 
		ПоказатьВыборИзСписка(Обработчик, СписокВыбора, Элемент, НачальныйЭлемент);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ВыборШтрихкодИзВыпадающегоСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ДополнительныеПараметры.ТекущиеДанные.Штрихкод = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ДобавитьНоменклатуруПоШтрихкодам(ДанныеШтрихкодов)
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	ТаблицаШтрихкоды = Новый ТаблицаЗначений;
	ТаблицаШтрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Для Каждого ЭлементМассива Из ДанныеШтрихкодов Цикл
		НоваяСтрока = ТаблицаШтрихкоды.Добавить();
		НоваяСтрока.Штрихкод = ЭлементМассива.Штрихкод;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаШтрихкоды.Штрихкод КАК СТРОКА(200)) КАК Штрихкод
	|ПОМЕСТИТЬ ТаблицаШтрихкоды
	|ИЗ
	|	&ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШтрихкоды.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ШтрихкодыНоменклатуры.Штрихкод = ТаблицаШтрихкоды.Штрихкод)";
	
	Запрос.УстановитьПараметр("ТаблицаШтрихкоды", ТаблицаШтрихкоды);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Таблица.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Номенклатура   = Выборка.Номенклатура;
			НоваяСтрока.Характеристика = Выборка.Характеристика;
			НоваяСтрока.Упаковка       = Выборка.Упаковка;
			
		Иначе
			НеизвестныеШтрихкоды.Добавить(Новый Структура("Штрихкод, Количество", Выборка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьТовары(Таблица);
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции

&НаСервере
Процедура ДобавитьТовары(Таблица)
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	
	УстановитьОбязательныеПоляДанных(СтруктураНастроек);
	
	УстановитьПараметрыДанных(СтруктураНастроек);
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаТовары";
	СтруктураНастроек.ИсходныеДанные = Таблица;
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек, "Товары");
	Для Каждого СтрокаТЧ Из СтруктураРезультата.Таблица Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Штрихкод        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["Штрихкод"]];
		НоваяСтрока.Цена            = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["Цена"]];
		НоваяСтрока.Весовой         = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["Весовой"]];
		НоваяСтрока.ОстатокНаСкладе = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы["ОстатокНаСкладе"]];
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("НеизвестныеШтрихкоды", ДобавитьНоменклатуруПоШтрихкодам(МассивШтрихкодов));
	СтруктураПараметровДействия.Вставить("ФормаВладелец",        УникальныйИдентификатор);
	
	Если ПравоРегистрацииШтрихкодовНоменклатурыДоступно
		И СтруктураПараметровДействия.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры", СтруктураПараметровДействия, СтруктураПараметровДействия.ФормаВладелец, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()
// Конец МеханизмВнешнегоОборудования

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Таблица = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ДобавитьТовары(Таблица);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЗависимыхОтШаблонаПолей()
	
	Если ШаблоныВлияющиеНаВидимостьЭлементов = Неопределено Тогда
		ОбновитьШаблоныВлияющиеНаВидимостьЭлементов();
	КонецЕсли;
	
	Если Режим = "ПечатьЭтикеток" Или Режим = "ПечатьЭтикетокИЦенников" Тогда
		Шаблоны = Объект.Товары.Выгрузить(, "ШаблонЭтикетки").ВыгрузитьКолонку("ШаблонЭтикетки");
	Иначе
		Шаблоны = Новый Массив;
	КонецЕсли;
	Если Режим = "ПечатьЦенников" Или Режим = "ПечатьЭтикетокИЦенников" Тогда
		Ценники = Объект.Товары.Выгрузить(, "ШаблонЦенника").ВыгрузитьКолонку("ШаблонЦенника");
		Для Каждого Шаблон Из Ценники Цикл
			Если Шаблоны.Найти(Шаблон) = Неопределено Тогда
				Шаблоны.Добавить(Шаблон);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИспользоватьВидЦеныДополнительно = Ложь;
	ВидимостьПравилоОбмена = Ложь;
	Для Каждого Шаблон Из Шаблоны Цикл
		Если ШаблоныВлияющиеНаВидимостьЭлементов.ВидЦеныДополнительно.Найти(Шаблон) <> Неопределено Тогда
			ИспользоватьВидЦеныДополнительно = Истина;
		КонецЕсли;
		Если ШаблоныВлияющиеНаВидимостьЭлементов.ПравилоОбмена.Найти(Шаблон) <> Неопределено Тогда
			ВидимостьПравилоОбмена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ВидЦеныДополнительно.Видимость     = ИспользоватьВидЦеныДополнительно;
	Элементы.ДатаВидЦеныДополнительно.Видимость = ИспользоватьВидЦеныДополнительно;
	Элементы.ТоварыЦенаДополнительно.Видимость  = ИспользоватьВидЦеныДополнительно;
	Элементы.ПравилоОбмена.Видимость            = ВидимостьПравилоОбмена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПереключательРежимаПолученияЦенПриИзменении(Элемент)
	
	ПереключательРежимаПолученияЦенПриИзмененииСервер();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервере
Процедура ПереключательРежимаПолученияЦенПриИзмененииСервер()
	
	Элементы.ВидЦены.Видимость = Объект.РежимПолученияЦен = 1;
	Элементы.Склад.Видимость  = Объект.РежимПолученияЦен = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеИсходноеСостояние = Новый Структура;
	ТекущиеДанныеИсходноеСостояние.Вставить("Упаковка",             ТекущиеДанные.Упаковка);
	ТекущиеДанныеИсходноеСостояние.Вставить("КоличествоВДокументе", ТекущиеДанные.КоличествоВДокументе);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШаблоныВлияющиеНаВидимостьЭлементов()
	
	ШаблоныВлияющиеНаВидимостьЭлементов = Новый Структура;
	ШаблоныВлияющиеНаВидимостьЭлементов.Вставить("ВидЦеныДополнительно", Новый Массив);
	ШаблоныВлияющиеНаВидимостьЭлементов.Вставить("ПравилоОбмена", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныЭтикетокИЦенников.Ссылка,
	|	ШаблоныЭтикетокИЦенников.Шаблон
	|ИЗ
	|	Справочник.ШаблоныЭтикетокИЦенников КАК ШаблоныЭтикетокИЦенников
	|ГДЕ
	|	ШаблоныЭтикетокИЦенников.Назначение В(&Назначение)";
	Назначения = Новый Массив;
	Назначения.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров);
	Назначения.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров);
	Запрос.УстановитьПараметр("Назначение", Назначения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Шаблон = Выборка.Шаблон;
		
		ПараметрыМакета = Шаблон.Получить();
		Для Каждого Параметр Из ПараметрыМакета.ПараметрыШаблона Цикл
			Если Найти(Параметр.Ключ ,"КодПодключаемогоОборудованияOffline") > 0 Тогда
				Если ШаблоныВлияющиеНаВидимостьЭлементов.ПравилоОбмена.Найти(Выборка.Ссылка) = Неопределено Тогда
					ШаблоныВлияющиеНаВидимостьЭлементов.ПравилоОбмена.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			Если Найти(Параметр.Ключ ,"ЦенаДополнительно") > 0 Тогда
				Если ШаблоныВлияющиеНаВидимостьЭлементов.ВидЦеныДополнительно.Найти(Выборка.Ссылка) = Неопределено Тогда
					ШаблоныВлияющиеНаВидимостьЭлементов.ВидЦеныДополнительно.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			Если Найти(Параметр.Ключ, "ВидЦеныДополнительно") > 0 Тогда
				Если ШаблоныВлияющиеНаВидимостьЭлементов.ВидЦеныДополнительно.Найти(Выборка.Ссылка) = Неопределено Тогда
					ШаблоныВлияющиеНаВидимостьЭлементов.ВидЦеныДополнительно.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры




&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.Товары.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекстВопроса = НСтр("ru='После смены организации список товаров будет очищен. Продолжить?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Ответ		 = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаСообщения		 = НСтр("ru='Перед выбором шаблона ценника необходимо указать организацию.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Номенклатура.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаСообщения		 = НСтр("ru='Перед выбором шаблона ценника необходимо указать номенклатуру.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,, "Объект.Товары[" + Объект.Товары.Индекс(ТекущиеДанные) + "].Номенклатура");
		Возврат;
	КонецЕсли;
	
	ДоступныйЦенник = ПолучитьСписокДоступныхШаблонов(Объект.Организация, ТекущиеДанные.Номенклатура);
	Если ДоступныйЦенник <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(ДоступныйЦенник);
		
		ТекстЗаголовока 	= НСтр("ru='Выберите ценник.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВыбранныйЭлемент    = СписокВыбора.ВыбратьЭлемент(ТекстЗаголовока);
		
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ТекущиеДанные.ШаблонЦенника = ВыбранныйЭлемент.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхШаблонов(ОрганизацияСсылка, НоменклатураСсылка)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
						  |ВЫБРАТЬ ПЕРВЫЕ 1
						  |	ВложенныйЗапрос.ШаблонЦенника КАК ШаблонЦенника
						  |ИЗ
						  |	(
						  |		ВЫБРАТЬ
	                      |			ШаблонЦенника КАК ШаблонЦенника
	                      |		ИЗ
	                      |			РегистрСведений.КТС_НастройкиЦенников.СрезПоследних(
	                      |				&ТекущаяДата,
	                      |				Организация = &Организация
	                      |					И ВидНоменклатуры = &ВидНоменклатуры)
	                      |
	                      |		ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |		ВЫБРАТЬ
	                      |			ШаблонЦенника КАК ШаблонЦенника
	                      |		ИЗ
	                      |			РегистрСведений.КТС_НастройкиЦенников.СрезПоследних(
	                      |				&ТекущаяДата,
	                      |				Организация = &Организация
	                      |					И ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка))) КАК ВложенныйЗапрос");
						  
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", НоменклатураСсылка.ВидНоменклатуры);
						  
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ШаблонЦенника, Неопределено);

КонецФункции // ПолучитьСписокДоступныхШаблонов()


