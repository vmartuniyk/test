
#Область ПрограммныйИнтерфейсс

// Подготавливает форму документа к работе с лояльностью к клиентам 
//
// Параметры:
//  ЭтаФорма 		- УправляемаяФорма 				- Форма документа
//  ВнешнийОбъект 	- Неопределено, ОбработкаОбъект - Внешний объект для переопределения событий формы
//  ИмяОбработки 	- Строка           				- Имя внешней обработки лояльности для подключения методов на клиенте
//
Процедура ПодготовитьЛояльностьКРаботе(ЭтаФорма, ВнешнийОбъект, ИмяОбработки = "") Экспорт
	
	ОбъектСсылка = ЭтаФорма.Объект.Ссылка;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
	 ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаказКлиента")
	 ИЛИ ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "НачалоВыбора", "Партнер"    , "ЛояльностьНачалоВыбораПартнер");                    
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Организация", "ЛояльностьПриИзмененииОрганизация");                
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "НачалоВыбора", "Соглашение" , "ЛояльностьНачалоВыбораСоглашение");                 
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПриИзменении", "Соглашение" , "ЛояльностьПриИзмененииСоглашение");				   
		ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, ЭтаФорма, "ПередЗаписью", 			 , "ЛояльностьПередЗаписью");
		
		Реквизиты = Новый Массив; 
		Реквизиты.Добавить(Новый РеквизитФормы("LoyaltyLibraryName",  Новый ОписаниеТипов("Строка")));
		Реквизиты.Добавить(Новый РеквизитФормы("ЛояльностьИспользуетсяПодразделением",  Новый ОписаниеТипов("Булево")));
		ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
		ЭтаФорма.LoyaltyLibraryName = ИмяОбработки;
	
		Если ЛояльностьИспользуетсяПодразделением() Тогда
			ЭтаФорма.Элементы.Партнер.РедактированиеТекста = Ложь;
			ЭтаФорма.ЛояльностьИспользуетсяПодразделением = Истина;
		Иначе
			ЭтаФорма.ЛояльностьИспользуетсяПодразделением = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьЛояльностьКРаботе()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Проверка подключения организации к системе лояльности
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Элемент справочника организации 
//
// Возвращаемое значение:
//   Булево - Используется или нет
Функция ЛояльностьИспользуеться(Организация) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ЛояльностьИспользуеться()

// Проверка подключения подразделения к системе лояльности
// 
// Параметры:
//  Нет 
//
// Возвращаемое значение:
//   Булево - Используется или нет
Функция ЛояльностьИспользуетсяПодразделением() Экспорт
	
	Подразделение = ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Подразделение = &Подразделение");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ЛояльностьИспользуетсяПодразделением()

// Проверка подключения организации к системе лояльности
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Элемент справочника организации
//  Партнер 	- СправочникСсылка.Партнеры	   - Элемент справочника партнеры
//  Сумма       - Число						   - Сумма документа
//
// Возвращаемое значение:
//   Булево - Используется или нет
Функция ПроверитьПревышениеСуммыБезРегистрации(Организация, Партнер, Сумма) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Организация = &Организация И РозничныйКлиент = &Партнер И СуммаБезРегистрации < &Сумма");	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Партнер", 	Партнер);
	Запрос.УстановитьПараметр("Сумма", 		Сумма);
	Возврат НЕ Запрос.Выполнить().Пустой();	
	
КонецФункции // ПроверитьПревышениеСуммыБезРегистрации()

Функция ПолучитьПартнераПоУмолчанию(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	РегистрСведений.Лояльность_Настройки 
		|ГДЕ 
		|	Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.РозничныйКлиент, Неопределено);
	
КонецФункции

Функция ЭтотПартнерПоУмолчанию(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	РозничныйКлиент 
		|ИЗ 
		|	РегистрСведений.Лояльность_Настройки 
		|ГДЕ 
		|	РозничныйКлиент = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Истина, Ложь);
	
КонецФункции

Функция ПолучитьПартнераПоНомеру(Номер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	РегистрСведений.Лояльность_НомераТелефонов
		|ГДЕ
		|	НомерТелефона = &Номер";
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Партнер, Неопределено);
	
КонецФункции

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "2.0.43";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "LoyaltyLibrary");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "LoyaltyLibrary [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "LoyaltyLibrary [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "LoyaltyLibrary");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПереопределенияОбработчиков
	
// Только для внутреннего использования
Процедура ПодменитьДействиеУправляемоеПриложение(ВнешнийОбъект, Форма, ИмяСобытияФормы = "", ПолноеИмяЭлементаФормы = "", НовоеДействие, ОбработкаИсключений = Ложь)

	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	Иначе
		ВнешнийОбъект.ПодменитьДействиеУправляемоеПриложение(Форма, ИмяСобытияФормы, ПолноеИмяЭлементаФормы, НовоеДействие, ОбработкаИсключений);
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормы(Элементы, ИмяЭлемента, ИмяРодителя, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Процедура ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(ВнешнийОбъект, Элементы, Элемент, Родитель, МестоРасположения = Неопределено)
	
	Если ВнешнийОбъект = Неопределено Тогда
		git_ПереопределениеОбработчиковСервер.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	Иначе
		ВнешнийОбъект.ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска(Элементы, Элемент, Родитель, МестоРасположения);
	КонецЕсли;
	
КонецПроцедуры // ПереместитьЭлементВКоллекциюЭлементовФормыБезПоиска()


// Только для внутреннего использования
Функция ДобавитьЭлементВКоллекциюЭлементовФормы(ВнешнийОбъект, Элементы, Параметры, Родитель = Неопределено) Экспорт
	
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьЭлементВКоллекциюЭлементовФормы(Элементы, Параметры, Родитель);
	КонецЕсли;
	
КонецФункции // ДобавитьЭлементВКоллекциюЭлементовФормы()

// Только для внутреннего использования
Функция ДобавитьКомандуВКоллекциюКомандФормы(ВнешнийОбъект, Команды, Параметры) 
		
	Если ВнешнийОбъект = Неопределено Тогда
		Возврат git_ПереопределениеОбработчиковСервер.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	Иначе
		Возврат ВнешнийОбъект.ДобавитьКомандуВКоллекциюКомандФормы(Команды, Параметры);
	КонецЕсли;
		
КонецФункции // ДобавитьКомандуВКоллекциюКомандФормы()

#КонецОбласти





Функция ГенерироватьСлучайныеЧисла(Начало, Конец) Экспорт
	
	UID			= Новый УникальныйИдентификатор();
	UID 		= СтрЗаменить(UID,"-","");
	Значение 	= "";
	Для ind = 1 По СтрДлина(UID) Цикл
		Симв 		= Сред(UID, ind, 1);
		Значение 	= Значение + Прав(КодСимвола(Симв), 1);
	КонецЦикла;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Значение));
	Возврат ГСЧ.СлучайноеЧисло(Начало, Конец);
		
КонецФункции

Функция ГенерироватьПинДоступа() Экспорт
		
	UID			= Новый УникальныйИдентификатор();
	UID 		= СтрЗаменить(UID,"-","");
	Значение 	= "";
	Для ind = 1 По СтрДлина(UID) Цикл
		Симв 		= Сред(UID, ind, 1);
		Значение 	= Значение + Прав(КодСимвола(Симв), 1);
	КонецЦикла;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(Число(Значение));
	Пин = Формат(ГСЧ.СлучайноеЧисло(1000, 9999), "ЧГ=0");
	
	Возврат Пин;
	
КонецФункции

Функция ПолучитьМассивЭА(Лояльность_Событие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Оповещение ГДЕ Лояльность_Событие = &Парам";
	Запрос.УстановитьПараметр("Парам", Лояльность_Событие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Кому = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Кому.Добавить(Новый Структура("Адрес, Представление", Выборка.Кому, Выборка.Представление));	
	КонецЦикла;
	
	Возврат Кому;
	
КонецФункции



Функция ВыборкаИнфоИзРгЛояльностьНомераТелефонов(Номер = Неопределено, Партнер = Неопределено, Основной = Неопределено) Экспорт
	
	ПараметрыНомер 		= "";
	ПараметрыПартнер 	= "";
	ПараметрыОсновной	= "";	
	
	Если Номер <> Неопределено Тогда
		ПараметрыНомер 		= " НомерТелефона = &Номер ";
	КонецЕсли;
	
	Если Партнер <> Неопределено Тогда
		ПараметрыПартнер 	= " Партнер = &Партнер ";	
	КонецЕсли;
	
	Если Основной <> Неопределено Тогда
		ПараметрыОсновной 	= " Основной = &Основной ";	
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПараметрыНомер) Тогда
		ПараметрыОграничения = "ГДЕ " + ПараметрыНомер 	+ ?(ПустаяСтрока(ПараметрыПартнер), " ", " И " + ПараметрыПартнер) + ?(ПустаяСтрока(ПараметрыОсновной), " ", " И " + ПараметрыОсновной); 	
	ИначеЕсли НЕ ПустаяСтрока(ПараметрыПартнер) Тогда
		ПараметрыОграничения = "ГДЕ " + ПараметрыПартнер+ ?(ПустаяСтрока(ПараметрыОсновной), " ", " И " + ПараметрыОсновной);
	ИначеЕсли НЕ ПустаяСтрока(ПараметрыОсновной) Тогда
		ПараметрыОграничения = "ГДЕ " + ПараметрыОсновной;
	Иначе
		ПараметрыОграничения = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_НомераТелефонов " + ПараметрыОграничения;
	Запрос.УстановитьПараметр("Номер", 		Номер);
	Запрос.УстановитьПараметр("Партнер", 	Партнер);
	Запрос.УстановитьПараметр("Основной", 	Основной);
	
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции



Функция ЛояльностьИспользуетьсяCДаты(Организация, ДатаПодключения) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_Настройки ГДЕ Организация = &Организация И ДатаПодключения < &ДатаПодключения");
	Запрос.УстановитьПараметр("Организация", 	 Организация);
	Запрос.УстановитьПараметр("ДатаПодключения", ДатаПодключения);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции



Функция СоглашениеРавноОрганизации(Соглашение, Организация) Экспорт
	
	Возврат Соглашение.Организация = Организация;	
	
КонецФункции




Функция РезультатЗапросаИнфоИзРгЛояльностьНомераТелефонов(Номер = Неопределено, Партнер = Неопределено) Экспорт
	
	Если Номер <> Неопределено И Партнер <> Неопределено Тогда
		ПараметрыОграничения = "ГДЕ НомерТелефона = &Номер И Партнер = &Партнер";	
	ИначеЕсли Номер <> Неопределено Тогда
		ПараметрыОграничения = "ГДЕ НомерТелефона = &Номер";
	ИначеЕсли Партнер <> Неопределено ТОгда
		ПараметрыОграничения = "ГДЕ Партнер = &Партнер";
	Иначе
		ПараметрыОграничения = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений.Лояльность_НомераТелефонов " + ПараметрыОграничения;
	Запрос.УстановитьПараметр("Номер", 		Номер);
	Запрос.УстановитьПараметр("Партнер", 	Партнер);	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьСписокНомеровТелефонов(Партнер) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(РезультатЗапросаИнфоИзРгЛояльностьНомераТелефонов(, Партнер).Выгрузить().ВыгрузитьКолонку("НомерТелефона"));
	Возврат СписокЗначений;
	
КонецФункции



///////////////////////////////////////////////////// Проведение по лояльности ////////////////////////////////////////////////////////
//                                                                                                                                   //

Процедура ВыполнитьДвижения(Источник, Отказ, РежимПроведения = Неопределено) Экспорт
	                                               
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента			= Источник.Метаданные();		
	ДокументСсылка 				= Источник.Ссылка;
	Объект		   				= Источник;
	Движения       				= Источник.Движения;
	ДополнительныеСвойства 		= Источник.ДополнительныеСвойства;
	
	
	Если РежимПроведения = Неопределено Тогда  
		//Контроль не нужен так как механизм схож с механизмом взаиморасчетов	
		ВыполнитьУдалениеПроведенияДокумента(ДокументСсылка, Объект, Движения, ДополнительныеСвойства, Отказ);	
	Иначе		
		ВыполнитьПроведениеДокумента(ДокументСсылка, Объект, Движения, РежимПроведения, ДополнительныеСвойства, Отказ);		
	КонецЕсли;
			   
КонецПроцедуры

Процедура ВыполнитьПроведениеДокумента(ДокументСсылка, Объект, Движения, РежимПроведения, ДополнительныеСвойства, Отказ)
	
	Свойства = ИнициализироватьСвойстваДляПроведения(ДокументСсылка, РежимПроведения, ДополнительныеСвойства);		
	
	ТаблицаДвижений = ИнициализироватьДанныеДокумента(ДокументСсылка, Свойства, Отказ);
	Если ТаблицаДвижений.Количество() = 0 Тогда Возврат; КонецЕсли;

	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект); 
	
	ОтразитьДвижения(ДополнительныеСвойства, Движения, ТаблицаДвижений, ДокументСсылка, Отказ);

	ЗаписатьНаборыЗаписей(Объект, Движения, Свойства);	
	
КонецПроцедуры

Процедура ВыполнитьУдалениеПроведенияДокумента(ДокументСсылка, Объект, Движения, ДополнительныеСвойства, Отказ)
//	
//	ДополнительныеСвойстваЛояльность = ИницДополнительныеСвойстваДляПроведения(ДокументСсылка, , ДополнительныеСвойства);
//	
//	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
//	
//	ЗаписатьНаборыЗаписей(Объект, Движения, ДополнительныеСвойстваЛояльность);
//		
//	//ВыполнитьКонтрольРезультатовПроведения(Объект, ДополнительныеСвойстваЛояльность, Отказ);
//	
//	ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойстваЛояльность);
//	
КонецПроцедуры



Функция ИнициализироватьСвойстваДляПроведения(ДокументСсылка, РежимПроведения = Неопределено, ДополнительныеСвойства)

	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяДокумента  	   	= МетаданныеДокумента.Имя;
	
	ДополнительныеСвойстваЛояльность = Новый Структура;
	ДополнительныеСвойстваЛояльность.Вставить("РежимЗаписи", 	ДополнительныеСвойства.РежимЗаписи);
	ДополнительныеСвойстваЛояльность.Вставить("ЭтоНовый", 		ДополнительныеСвойства.ЭтоНовый);
	ДополнительныеСвойстваЛояльность.Вставить("ИмяДокумента", 	ИмяДокумента);
	ДополнительныеСвойстваЛояльность.Вставить("Реквизиты", 		ПолучитьСтруктуруРеквизитовПоСсылке(ДокументСсылка, МетаданныеДокумента));
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойстваЛояльность.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойстваЛояльность.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	//ДополнительныеСвойстваЛояльность.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойстваЛояльность.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойстваЛояльность.ДляПроведения.Вставить("МетаданныеДокумента",       МетаданныеДокумента);
	ДополнительныеСвойстваЛояльность.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
	Возврат ДополнительныеСвойстваЛояльность;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовПоСсылке(ДокументСсылка, МетаданныеДокумента)
	
	Пользователь 	= ПараметрыСеанса.ТекущийПользователь; 
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Период", 						ДокументСсылка.Дата);
	СтруктураРеквизитов.Вставить("Ссылка", 						ДокументСсылка);
	СтруктураРеквизитов.Вставить("Организация", 				ДокументСсылка.Организация);
	СтруктураРеквизитов.Вставить("Подразделение", 				Пользователь.ТекущееПодразделение);
	СтруктураРеквизитов.Вставить("Партнер", 					ДокументСсылка.Контрагент.Партнер);
	СтруктураРеквизитов.Вставить("ВалютаРегламентногоУчета", 	Константы.ВалютаРегламентированногоУчета.Получить());
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Отказ)
	
	МетаданныеДокумента 		= ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента;
	ИмяДокумента	    		= ДополнительныеСвойства.ИмяДокумента;
	Реквизиты 					= ДополнительныеСвойства.Реквизиты;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Реквизиты.Организация);
	МассивПараметров.Добавить(Реквизиты.Период);
	ЛояльностьИспользуеться = git_ПереопределениеОбработчиковСервер.ВыполнитьПеренаправлениеВызоваФункции("LoyaltyLibrary", 
																										"git_СистемаЛояльностиСервер", 
																										"ЛояльностьИспользуетьсяCДаты", 
																										МассивПараметров);
	Если ЛояльностьИспользуеться = Ложь Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 					Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Период",     				Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",    			Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",    			Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Партнер",    				Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ВалютаРегламентногоУчета",   Реквизиты.ВалютаРегламентногоУчета);
	
	Если 		ИмяДокумента = "РеализацияТоваровУслуг" Тогда
		КСписанияЗадолженности = ПолучитьКоэффициентСписания(ДокументСсылка);
		
		Запрос.Текст = ПолучитьТекстЗапросаДляРеализацияТоваровУслуг();
		Запрос.УстановитьПараметр("СписанияЗадолженности", 	КСписанияЗадолженности);
		Запрос.УстановитьПараметр("ЭтоОплатаБонусами", ?(КСписанияЗадолженности = 1, 1, 0));
		РезультатПакета = Запрос.ВыполнитьПакет();
		Возврат РезультатПакета[РезультатПакета.ВГраница()].Выгрузить();	
	ИначеЕсли 	ИмяДокумента = "ВозвратТоваровОтКлиента" Тогда
		Запрос.УстановитьПараметр("ДокументРеализации", ДокументСсылка.ДокументРеализации);
		ТекстЗапроса = ПолучитьТекстЗапросаДляВозвратТоваровОтКлиента();
	ИначеЕсли   ИмяДокумента = "СписаниеЗадолженности" Тогда
		Если ДокументСсылка.ТипЗадолженности = Перечисления.ТипыЗадолженности.Кредиторская Тогда	
			Возврат Новый ТаблицаЗначений;
		КонецЕсли;
		ТекстЗапроса = ПолучитьТекстЗапросаДляСписаниеЗадолженности();	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРеализацияТоваровУслуг()
	
	ТекстЗапроса = "
		////////////////////////////////////////////////////////////////////////////////////////////
		//0. Кеш аналитики учета по партнерам
		|ВЫБРАТЬ
		|	Ссылка КАК КлючАналитики	
		|ПОМЕСТИТЬ АУП
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоПартнерам 
		|ГДЕ
		|	Партнер = &Партнер
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		//1. Временная таблица оборота клиента
		|ВЫБРАТЬ
		|	ОборотыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|   Сумма(
		|		ВЫБОР
		|			КОГДА Курсы.Валюта = &ВалютаРегламентногоУчета
		|			ТОГДА СуммаОборот
		|			ИНАЧЕ ВЫРАЗИТЬ(СуммаОборот 	* ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2))
		|		  КОНЕЦ
		|		 ) + ЕСТЬNULL(ДопОборот.Сумма, 0) КАК ОборотПоПартнеру
		|
		|ПОМЕСТИТЬ ВтТаблицаОборот
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(, &Период, Регистратор, АналитикаУчетаПоПартнерам В (ВЫБРАТЬ КлючАналитики ИЗ АУП)) КАК ОборотыСКлиентами 
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ АУП КАК Аналитика
		|ПО Аналитика.КлючАналитики = ОборотыСКлиентами.АналитикаУчетаПоПартнерам
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентногоУчета) КАК ЗапросВалютРегламент
		|ПО ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК Курсы
		|ПО ОборотыСКлиентами.Валюта = Курсы.Валюта
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Лояльность_НачальныйОборот КАК ДопОборот
		|ПО ДопОборот.Партнер = &Партнер
		|И  ДопОборот.Дата   <= &Период 
		|
		|ГДЕ
		|		Регистратор Ссылка Документ.РеализацияТоваровУслуг
		|ИЛИ	Регистратор Ссылка Документ.ВозвратТоваровОтКлиента 
		|	
		|СГРУППИРОВАТЬ ПО 
		|	АналитикаУчетаПоПартнерам.Партнер, 
		|	ДопОборот.Сумма
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		// 2.
		|ВЫБРАТЬ
		//|	КодСтроки,
		|	ВидЦены,
		|	Номенклатура,
		|	СУММА(Количество) 																		КАК Количество,
		|	СРЕДНЕЕ(Цена * (1 - (ПроцентРучнойСкидки * 0.01 + ПроцентАвтоматическойСкидки * 0.01))) КАК Цена,
		|	СУММА(Цена * Количество / 100) 															КАК ОдинПроцент,
		|	СРЕДНЕЕ(ПроцентРучнойСкидки)															КАК ПроцентРучнойСкидки,
		|	СРЕДНЕЕ(ПроцентАвтоматическойСкидки)													КАК ПроцентАвтоматическойСкидки,
		|	Ссылка 
		|
		|ПОМЕСТИТЬ ТабТовары
		|ИЗ 
		|	Документ.РеализацияТоваровУслуг.Товары 
		|ГДЕ 
		|	Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО  
		|	Номенклатура, 
		|	ВидЦены, 
		|	Ссылка 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидЦены
		|;
		////////////////////////////////////////////////////////////////////////////////////////////
		// 3. 
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
		|	&Период	 								КАК Период,
		|	&Организация                            КАК Организация,
		|   &Подразделение                          КАК Подразделение,
		|	&Партнер 								КАК Партнер,
		|
		//|	ТабТовары.КодСтроки,
		|	ТабТовары.Номенклатура,
		|
		|	ВЫБОР
		|		КОГДА &ЭтоОплатаБонусами = 0
		|		ТОГДА 0
	  	|
		|		КОГДА ЕСТЬNULL(ТаблицаОбПроцент.Значение, 0) = 0
		|		ТОГДА 0
		|
		|      	КОГДА ТабТовары.ВидЦены НЕ В (ВЫБРАТЬ ВидЦеныБонус ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних(&Период))
		|		ТОГДА 0
		|
		|   	КОГДА ТабТовары.Номенклатура.ЦеноваяГруппа = УчПолБонусы.АкционнаяЦеноваяГруппа
		|		 И НЕ УчПолБонусы.ЕстьСкидкиДляАкций
		|		ТОГДА 0
		|
		|		ИНАЧЕ    	
		|			ВЫБОР 
		|				КОГДА ТабТовары.ПроцентАвтоматическойСкидки = 0
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ТабТовары.Ссылка.Валюта = ЗапросКурсРегламент.Валюта
		|       				ТОГДА ТабТовары.ОдинПроцент * ЕСТЬNULL(ТаблицаОбПроцент.Значение, 0) * &ЭтоОплатаБонусами
		|						ИНАЧЕ ТабТовары.ОдинПроцент * ЕСТЬNULL(ТаблицаОбПроцент.Значение, 0) * &ЭтоОплатаБонусами * (ЗапросКурсДок.Курс / ЗапросКурсДок.Кратность) / (ЗапросКурсРегламент.Курс / ЗапросКурсРегламент.Кратность)
		|					КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК Бонус,
		|	ВЫБОР
		|		КОГДА ТабТовары.Ссылка.Валюта = ЗапросКурсРегламент.Валюта
		|		ТОГДА ТабТовары.Цена 
		|		ИНАЧЕ ТабТовары.Цена * (ЗапросКурсДок.Курс / ЗапросКурсДок.Кратность) / (ЗапросКурсРегламент.Курс / ЗапросКурсРегламент.Кратность)
		|	КОНЕЦ КАК Цена,
		|	ТабТовары.Количество,
		|   (ВЫБОР
		|		КОГДА ТабТовары.Ссылка.Валюта = ЗапросКурсРегламент.Валюта
		|		ТОГДА ТабТовары.Цена
		|		ИНАЧЕ ТабТовары.Цена * (ЗапросКурсДок.Курс / ЗапросКурсДок.Кратность) / (ЗапросКурсРегламент.Курс / ЗапросКурсРегламент.Кратность)
		|	КОНЕЦ * ТабТовары.Количество) * (1 - &СписанияЗадолженности) 	КАК ОплаченоБонусами,
		|   (ВЫБОР
		|		КОГДА ТабТовары.Ссылка.Валюта = ЗапросКурсРегламент.Валюта
		|		ТОГДА ТабТовары.Цена
		|		ИНАЧЕ ТабТовары.Цена * (ЗапросКурсДок.Курс / ЗапросКурсДок.Кратность) / (ЗапросКурсРегламент.Курс / ЗапросКурсРегламент.Кратность)
		|	КОНЕЦ * ТабТовары.Количество) * &СписанияЗадолженности		 	КАК ОплаченоНаличными
		|
		|ИЗ
		|	ТабТовары КАК ТабТовары	
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних(&Период) КАК УчПолБонусы
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура  В (ВЫБРАТЬ Номенклатура ИЗ ТабТовары) 
		|																		И ВидЦены В (ВЫБРАТЬ ВидЦены ИЗ РегистрСведений.УчетнаяПолитикаБонусы.СрезПоследних(&Период))) КАК ВходнаяЦена
		|ПО ВходнаяЦена.Номенклатура = ТабТовары.Номенклатура
		|
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентногоУчета) КАК ЗапросКурсРегламент
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК ЗапросКурсВходнаяЦена
		|ПО ЗапросКурсВходнаяЦена.Валюта = ВходнаяЦена.Валюта
	    |
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК ЗапросКурсДок
		|ПО ЗапросКурсДок.Валюта = ТабТовары.Ссылка.Валюта
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаОборот КАК ТаблицаОборот
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкаПоОборотуБонусы КАК ТаблицаОбПроцент
		|ПО ТаблицаОбПроцент.НижняяГраница 	<= 	ТаблицаОборот.ОборотПоПартнеру
		|И	(ТаблицаОбПроцент.ВерхняяГраница > 	ТаблицаОборот.ОборотПоПартнеру 
		|ИЛИ ТаблицаОбПроцент.ВерхняяГраница = 	0)
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДинамическаяСкидкаБонусы КАК ТаблицаДинПроцент
		|ПО ТаблицаДинПроцент.НижняяГраница <= ВЫБОР 
		|											КОГДА ЕСТЬNULL(ВходнаяЦена.Цена, 0) 	= 0 
		|											 ИЛИ  ЕСТЬNULL(ТабТовары.Количество, 0) = 0
		|											 ИЛИ  &ЭтоОплатаБонусами				= 0
		|											ТОГДА 0
		|											ИНАЧЕ 
		|		   									  (
		|												ВЫБОР
		|													КОГДА ЗапросКурсДок.Валюта = ЗапросКурсВходнаяЦена.Валюта 
		|													ТОГДА (ТабТовары.Цена / ВходнаяЦена.Цена - 1) * 100
		|													ИНАЧЕ (ТабТовары.Цена * ((ЗапросКурсДок.Курс / ЗапросКурсДок.Кратность) / (ЗапросКурсВходнаяЦена.Курс / ЗапросКурсВходнаяЦена.Кратность)) / ВходнаяЦена.Цена - 1) * 100
		|												КОНЕЦ
		|											   )
		|										КОНЕЦ 
		|И (ТаблицаДинПроцент.ВерхняяГраница >  ВЫБОР 
		|											КОГДА ЕСТЬNULL(ВходнаяЦена.Цена, 0) 	= 0 
		|											 ИЛИ  ЕСТЬNULL(ТабТовары.Количество, 0) = 0
		|											 ИЛИ  &ЭтоОплатаБонусами				= 0
		|											ТОГДА 0
		|											ИНАЧЕ 
		|		   									  (
		|												ВЫБОР
		|													КОГДА ЗапросКурсДок.Валюта = ЗапросКурсВходнаяЦена.Валюта 
		|													ТОГДА (ТабТовары.Цена / ВходнаяЦена.Цена - 1) * 100
		|													ИНАЧЕ (ТабТовары.Цена * ((ЗапросКурсДок.Курс / ЗапросКурсДок.Кратность) / (ЗапросКурсВходнаяЦена.Курс / ЗапросКурсВходнаяЦена.Кратность)) / ВходнаяЦена.Цена - 1) * 100
		|												КОНЕЦ
		|											   )
		|										КОНЕЦ
		|ИЛИ ТаблицаДинПроцент.ВерхняяГраница = 0)
	    |
		|ГДЕ
		|	&Партнер НЕ В (ВЫБРАТЬ РозничныйКлиент ИЗ РегистрСведений.Лояльность_Настройки)
		|;";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВозвратТоваровОтКлиента()
	
	ТекстЗапроса = "
	//0. Временная таблица оборота клиента
	|ВЫБРАТЬ
	|	&ДокументРеализации КАК Документ,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	КАК ВидДвижения,		
	|	&Период	 								КАК Период,
	|	&Организация                            КАК Организация,
	|   &Подразделение                          КАК Подразделение,
	|	&Партнер 								КАК Партнер,
	|	Продажи.Номенклатура,
	|	Продажи.Характеристика,
	|	Продажи.Бонус * ВозвратТовары.Количество / Продажи.Количество КАК Бонус,
	|	Продажи.Цена,
	|	ВозвратТовары.Количество,
	|   Продажи.ОплаченоБонусами * ВозвратТовары.Количество / Продажи.Количество КАК ОплаченоБонусами,
	|   Продажи.ОплаченоНаличными* ВозвратТовары.Количество / Продажи.Количество КАК ОплаченоНаличными
	|
	|ИЗ
	|	РегистрСведений.Лояльность_Продажи КАК Продажи
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТовары 
	|ПО ВозвратТовары.Ссылка		 = &Ссылка
	|И  ВозвратТовары.Номенклатура 	 = Продажи.Номенклатура
	|И  ВозвратТовары.Характеристика = Продажи.Характеристика
	|
	|ГДЕ
	|	Продажи.Регистратор = &ДокументРеализации	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДокументРеализации КАК Документ,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),		
	|	&Период,
	|	NULL,
	|   NULL,
	|	&Партнер,
	|	Продажи.Номенклатура,
	|	Продажи.Характеристика,
	|	Продажи.ОплаченоБонусами * ВозвратТовары.Количество / Продажи.Количество,
	|	Продажи.Цена,
	|	ВозвратТовары.Количество,
	|   0,
	|   0
	|
	|ИЗ
	|	РегистрСведений.Лояльность_Продажи КАК Продажи
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТовары 
	|ПО ВозвратТовары.Ссылка		 = &Ссылка
	|И  ВозвратТовары.Номенклатура 	 = Продажи.Номенклатура
	|И  ВозвратТовары.Характеристика = Продажи.Характеристика
	|
	|ГДЕ
	|	Продажи.Регистратор		 = &ДокументРеализации
	|И	Продажи.ОплаченоБонусами > 0
	|";
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДляСписаниеЗадолженности()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	КАК ВидДвижения,
		|	&Период	 								КАК Период,
		|	Задолженность.Партнер 					КАК Партнер,		
		|   ВЫБОР
		|   	КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентногоУчета
		|       ТОГДА Задолженность.Сумма
		|       ИНАЧЕ ВЫРАЗИТЬ(Задолженность.Сумма * ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2)) 
		|	КОНЕЦ 									КАК Бонус,
		|	Задолженность.Заказ
		|
		|ИЗ
		|	Документ.СписаниеЗадолженности.Задолженность КАК Задолженность
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентногоУчета) КАК ЗапросВалютРегламент
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК Курсы
		|ПО Задолженность.ВалютаВзаиморасчетов = Курсы.Валюта
        |
		|ГДЕ
		|	Задолженность.Ссылка					= &Ссылка
		|И	Задолженность.Ссылка.ЭтоОплатаБонусами 	= Истина
		|
		|";
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьКоэффициентСписания(ДокументСсылка)
	
	Если 		ДокументСсылка.ЗаказКлиента = Неопределено Тогда
		ЗаказКлиента = ДокументСсылка;
	ИначеЕсли 	ДокументСсылка.ЗаказКлиента.Пустая() Тогда
		ЗаказКлиента = ДокументСсылка;
	Иначе
		ЗаказКлиента = ДокументСсылка.ЗаказКлиента;
	КонецЕсли;
	                        
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|		КОГДА &ВалютаРегламентногоУчета = РасчетыСКлиентами.Валюта
		|		ТОГДА РасчетыСКлиентами.Сумма
		|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентами.Сумма * ((Курсы.Курс / Курсы.Кратность) / (ЗапросВалютРегламент.Курс / ЗапросВалютРегламент.Кратность)) КАК Число (15,2))
		|	КОНЕЦ), 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентногоУчета) КАК ЗапросВалютРегламент
		|ПО Истина
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК Курсы
		|ПО РасчетыСКлиентами.Валюта = Курсы.Валюта
		|
		|ГДЕ 
		|	Регистратор Ссылка Документ.СписаниеЗадолженности
		|И	ЗаказКлиента = &ЗаказКлиента
		|И	ВЫРАЗИТЬ(Регистратор КАК Документ.СписаниеЗадолженности).ЭтоОплатаБонусами");
	Запрос.УстановитьПараметр("ЗаказКлиента", 				ЗаказКлиента);
	Запрос.УстановитьПараметр("ВалютаРегламентногоУчета", 	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Период", 					ЗаказКлиента.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат 1 - ?(Выборка.Сумма > 0, Выборка.Сумма, -Выборка.Сумма) / ДокументСсылка.СуммаДокумента;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции



Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект)
	
	ЕстьДвиженияПродажи = НЕ Объект.Движения.Найти("Лояльность_Продажи") = Неопределено;
	
	Если ЕстьДвиженияПродажи Тогда
		Если Объект.Движения.Лояльность_Продажи.Количество() > 0 Тогда
			Объект.Движения.Лояльность_Продажи.Очистить();
		КонецЕсли;
	КонецЕсли;

	Если Объект.Движения.Лояльность_Бонусы.Количество() > 0 Тогда
		Объект.Движения.Лояльность_Бонусы.Очистить();
	КонецЕсли;
	
	Если Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		// Регистры, движения по которым формируются не из модуля менеджера документа.
		Если ЕстьДвиженияПродажи Тогда
       		Объект.Движения.Лояльность_Продажи.Записывать = Истина;
		КонецЕсли;
		Объект.Движения.Лояльность_Бонусы.Записывать 	  = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Таблица, ДокументСсылка, Отказ) 
	
	ЕстьДвиженияПродажи = НЕ Движения.Найти("Лояльность_Продажи") = Неопределено;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьДвиженияПродажи Тогда
		Движения.Лояльность_Продажи.Записывать = Истина;
		Движения.Лояльность_Продажи.Загрузить(Таблица);
	КонецЕсли;
	
	Движения.Лояльность_Бонусы.Записывать = Истина;	
	Если ЕстьДвиженияПродажи Тогда
		Таблица.Свернуть("ВидДвижения, Период, Партнер", "Бонус");
		Движения.Лояльность_Бонусы.Загрузить(Таблица);
		Если Таблица.Количество() = 2 Тогда 
			ОтразитьВозвратБонусныхСредств(ДокументСсылка, Движения, Таблица[1]);//ДополнительныеСвойства, Движения, Таблица[1], ДокументСсылка.ДокументРеализации) 
		КонецЕсли;
	Иначе
		Движения.Лояльность_Бонусы.Загрузить(Таблица);
		Для Каждого Строка ИЗ Таблица Цикл
			Если НЕ Строка.Заказ.Пустая() Тогда 
				Если ТипЗнч(Строка.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				 	Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Ссылка
						|ИЗ
						|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора)
						|ГДЕ
						|	Ссылка Ссылка Документ.РеализацияТоваровУслуг";
					Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", Строка.Заказ);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
					 	ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЦикла; 
				Иначе
					ДокументОбъект = Строка.Заказ.ПолучитьОбъект();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьВозвратБонусныхСредств(Ссылка, Движения, Запись)	
	МетаданныеДокумента = Ссылка.Метаданные(); 	
	Если МетаданныеДокумента.Имя = "ВозвратТоваровОтКлиента" Тогда
		
		ЭлементДвижения = Движения.РасчетыСКлиентами[0];
		КурсВалюты = ПолучитьКурсВалюты(ЭлементДвижения.Валюта, ЭлементДвижения.ДатаРегистратора);
		
		СуммаВозвратаБонусныхСредств = Запись.Бонус/(КурсВалюты.Курс/КурсВалюты.Кратность);
		СформироватьСписаниеЗадолженности(Ссылка, ЭлементДвижения.Валюта, СуммаВозвратаБонусныхСредств);
		
		Сообщить("Внимание!" + Символы.ПС + "Сумма выплат по документу уменьшена!" + Символы.ПС + "Товар оплачивался бонусами, итого сумма выплаты: " + (ЭлементДвижения.Сумма - СуммаВозвратаБонусныхСредств));
	КонецЕсли;	
КонецПроцедуры

Процедура СформироватьСписаниеЗадолженности(СсылкаНаВозврат, Валюта, СуммаВозвратаБонусныхСредств)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументРеализации = СсылкаНаВозврат.ДокументРеализации;
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить("ДополнительныеНастройкиОбработокМодификацииКонфигурации", , , "ДополнительныеНастройкиОбработокМодификацииКонфигурации");
	
	CommonLibrary = git_ПереопределениеОбработчиковСервер.ПолучитьВнешнийОбъектПоИмени("Библиотека внешних обработок");
	RefDebtRelief = Настройки.СвойствоЛояльностьСписаниеЗадолжености;
	RefGoodReturn = Настройки.СвойствоЛояльностьВозвратТоваровОтКлиента; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ 
		|	Значение
		|Из 
		|	РегистрСведений.ДополнительныеСведения 
		|ГДЕ 
		|	ВЫРАЗИТЬ(Объект КАК Документ.ВозвратТоваровОтКлиента) = &Ссылка 
		|И  Свойство = &Свойство";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаВозврат);
	Запрос.УстановитьПараметр("Свойство", RefDebtRelief);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СписаниеЗадолженности = CommonLibrary.ПолучитьСсылкуПоНавигационнойСсылке(Документы.СписаниеЗадолженности, Выборка.Значение).ПолучитьОбъект();
		СписаниеЗадолженности.Задолженность.Очистить();
	Иначе
		СписаниеЗадолженности = Документы.СписаниеЗадолженности.СоздатьДокумент();
		СписаниеЗадолженности.Заполнить(ДокументРеализации);
		СписаниеЗадолженности.Дата = ТекущаяДата();
	КонецЕсли;
	
	СписаниеЗадолженности.ТипЗадолженности	= Перечисления.ТипыЗадолженности.Кредиторская;
	СписаниеЗадолженности.ЭтоОплатаБонусами	= Истина;
	СписаниеЗадолженности.АналитикаДоходов	= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	СписаниеЗадолженности.СтатьяДоходов     = ПланыВидовХарактеристик.СтатьиДоходов.НайтиПоКоду("00-000007");
	
	СписаниеЗадолженности.АналитикаРасходов	= ПараметрыСеанса.ТекущийПользователь.ТекущееПодразделение;
	СписаниеЗадолженности.СтатьяРасходов    = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор("16ae3f7c-7b54-11e2-8fd5-001e673c80fc"));//ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("00-000015");
	
	СписаниеЗадолженности.Контрагент	    = ДокументРеализации.Контрагент;
	СписаниеЗадолженности.Организация		= ДокументРеализации.Организация;
	СписаниеЗадолженности.Комментарий		= "Ссылка на реализацию товаров услуг:" + ПолучитьНавигационнуюСсылку(ДокументРеализации);
		
	Запись 						= СписаниеЗадолженности.Задолженность.Добавить();
	Запись.Партнер				= ДокументРеализации.Партнер;
	Запись.Сумма                = СуммаВозвратаБонусныхСредств;
	Запись.ВалютаВзаиморасчетов = Валюта;
	Запись.ТипРасчетов			= Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	СписаниеЗадолженности.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	
	
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаВозврат);
	НаборЗаписей.Отбор.Свойство.Установить(RefDebtRelief);
	Запись = НаборЗаписей.Добавить();
	Запись.Объект 	= СсылкаНаВозврат;
	Запись.Свойство = RefDebtRelief;
	Запись.Значение = ПолучитьНавигационнуюСсылку(СписаниеЗадолженности.Ссылка);
	НаборЗаписей.Записать();
	
	
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СписаниеЗадолженности.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(RefGoodReturn);
	Запись = НаборЗаписей.Добавить();
	Запись.Объект 	= СписаниеЗадолженности.Ссылка;
	Запись.Свойство = RefGoodReturn;
	Запись.Значение = ПолучитьНавигационнуюСсылку(СсылкаНаВозврат);
	НаборЗаписей.Записать();
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьКурсВалюты(Валюта, ДатаКурса)

	Возврат РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	
КонецФункции

Процедура ЗаписатьНаборыЗаписей(Объект, Движения, ДополнительныеСвойства) 
	
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	//Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
	//	Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
	//		Если НаборЗаписей.Записывать Тогда

	//			// Установка флага регистрации изменений в наборе записей.
	//			НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
	//			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

	//			// Структура для передачи данных в модули наборов записей.
	//			НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
	//					Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
		
	Объект.Движения.Записать();
	
КонецПроцедуры



