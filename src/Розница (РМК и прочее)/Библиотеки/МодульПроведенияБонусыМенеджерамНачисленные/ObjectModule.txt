
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура выполняет формирование движений по регистру накопления БонусыМенеджерамНачисленые
// Вызывается из подписки на событие документов при проведении.
// 
Процедура ВыполнитьДвижения(Источник, Отказ, РежимПроведения) Экспорт
	                                               
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента			= Источник.Метаданные();		
	ДокументСсылка 				= Источник.Ссылка;
	Объект		   				= Источник;
	Движения       				= Источник.Движения;
	ДополнительныеСвойства 		= Источник.ДополнительныеСвойства;
			
	ВыполнитьПроведениеДокумента(ДокументСсылка, Объект, Движения, РежимПроведения, ДополнительныеСвойства, Отказ);		
			   
КонецПроцедуры

Процедура ВыполнитьПроведениеДокумента(ДокументСсылка, Объект, Движения, РежимПроведения, ДополнительныеСвойства, Отказ)
	
	ДополнительныеСвойстваВнешние = ИнициализироватьСвойстваДляПроведения(ДокументСсылка, РежимПроведения, ДополнительныеСвойства);		
	ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваВнешние, Отказ);
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект); 
	ОтразитьДвиженияБонусыМенеджеров(ДополнительныеСвойстваВнешние, Движения, Отказ);
	ЗаписатьНаборыЗаписей(Объект, Движения, ДополнительныеСвойстваВнешние);	
	
КонецПроцедуры





// Процедура инициализирует общие структуры, используемые при проведении документов.
//
Функция ИнициализироватьСвойстваДляПроведения(ДокументСсылка, РежимПроведения, ДополнительныеСвойства)

	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяДокумента  	   	= МетаданныеДокумента.Имя;
	
	ДополнительныеСвойстваВнешние = Новый Структура;
	ДополнительныеСвойстваВнешние.Вставить("РежимЗаписи", 	ДополнительныеСвойства.РежимЗаписи);
	ДополнительныеСвойстваВнешние.Вставить("ЭтоНовый", 		ДополнительныеСвойства.ЭтоНовый);
	ДополнительныеСвойстваВнешние.Вставить("ИмяДокумента", 	ИмяДокумента);
	ДополнительныеСвойстваВнешние.Вставить("Реквизиты", 	ПолучитьСтруктуруРеквизитовПоСсылке(ДокументСсылка));
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойстваВнешние.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойстваВнешние.Вставить("ДляПроведения", Новый Структура);
	
	ДополнительныеСвойстваВнешние.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойстваВнешние.ДляПроведения.Вставить("МетаданныеДокумента",       МетаданныеДокумента);
	ДополнительныеСвойстваВнешние.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
	Возврат ДополнительныеСвойстваВнешние;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Отказ)
		
	Реквизиты = ДополнительныеСвойства.Реквизиты;
	ИмяДокумента = ДополнительныеСвойства.ИмяДокумента;
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", 	 	Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Период",     	Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", 	Реквизиты.Организация);
	Запрос.УстановитьПараметр("Менеджер", 	 	Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Подразделение", 	Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ВидЦеныБезнал", 	Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf8500-404c-11e0-9f98-001517115d85")));
	
	Если 		ИмяДокумента = "РеализацияТоваровУслуг" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаДляРеализацияТоваровУслуг();	
	ИначеЕсли 	ИмяДокумента = "ВозвратТоваровОтКлиента" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаДляВозвратТоваровОтКлиента();
	Иначе	
		ТаблицыДляДвижений.Вставить("ТаблицаДвиженияБонусыМенеджеров", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	ТаблицыДляДвижений.Вставить("ТаблицаДвиженияБонусыМенеджеров", Запрос.Выполнить().Выгрузить());
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект)
	
	Если Объект.Движения.БонусыМенеджерамНачисленые.Количество() > 0 Тогда
		Объект.Движения.БонусыМенеджерамНачисленые.Очистить();
	КонецЕсли;
	
	Если Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		// Регистры, движения по которым формируются не из модуля менеджера документа.
		Объект.Движения.БонусыМенеджерамНачисленые.Записывать = Истина;
	КонецЕсли;	
	
КонецПроцедуры // ПодготовитьНаборыЗаписейКРегистрацииДвижений 

// Процедура формирования движений по регистру "Бонусы менеджерам начисленые".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДвиженияБонусыМенеджеров(ДополнительныеСвойства, Движения, Отказ) 
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияБонусыМенеджеров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.БонусыМенеджерамНачисленые.Записывать = Истина;
	Движения.БонусыМенеджерамНачисленые.Загрузить(Таблица);
		
КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// в данном случаэ контроль не нужен.
//
Процедура ЗаписатьНаборыЗаписей(Объект, Движения, ДополнительныеСвойства) 
	
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	//Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
	//	Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
	//		Если НаборЗаписей.Записывать Тогда

	//			// Установка флага регистрации изменений в наборе записей.
	//			НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
	//			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

	//			// Структура для передачи данных в модули наборов записей.
	//			НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
	//					Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
		
	Объект.Движения.Записать();
	
КонецПроцедуры



// Служебные процедуры и функции

Функция ПолучитьСтруктуруРеквизитовПоСсылке(ДокументСсылка)
	
	СтруктураРеквизитов = КонструкторСтруктуруРеквизитовПоСсылке();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ДокументСсылка);
	СтруктураРеквизитов.Период = ДокументСсылка.Дата;	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьСтруктуруРеквизитовПоСсылке

Функция КонструкторСтруктуруРеквизитовПоСсылке()

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Период");
	СтруктураРеквизитов.Вставить("Ссылка");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Менеджер");
	СтруктураРеквизитов.Вставить("Подразделение");
	Возврат СтруктураРеквизитов;

КонецФункции // КонструкторСтруктуруРеквизитовПоСсылке()


Функция ПолучитьТекстЗапросаДляРеализацияТоваровУслуг()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	БонусыМенеджерам.Номенклатура,
		|   БонусыМенеджерам.Характеристика,
		|   БонусыМенеджерам.Бонус
		|ПОМЕСТИТЬ КешБонусов
		|ИЗ
		|	РегистрСведений.БонусыМенеджерам КАК БонусыМенеджерам
		|ГДЕ
		|	БонусыМенеджерам.Дата 					  <= &Период
		|И	КонецПериода(БонусыМенеджерам.Дата, День) >= &Период
		|И	БонусыМенеджерам.Используется
		|;
		|ВЫБРАТЬ
		|	&Период			КАК Период,
		|	&Менеджер 		КАК Менеджер,
		|	&Организация 	КАК Организация, 
		|	БонусыМенеджерам.Номенклатура,
		|	БонусыМенеджерам.Характеристика,
		|	РеализацияТовары.Количество КАК Количество,
		|	БонусыМенеджерам.Бонус * РеализацияТовары.Количество КАК Бонус
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешБонусов КАК БонусыМенеджерам
		|ПО  БонусыМенеджерам.Номенклатура 	 = РеализацияТовары.Номенклатура
		|И	 БонусыМенеджерам.Характеристика = РеализацияТовары.Характеристика
		|
		|ГДЕ
		|	РеализацияТовары.Ссылка = &Ссылка
		|И	(&Организация, &Подразделение) В (ВЫБРАТЬ Организация, Подразделение ИЗ РегистрСведений.Лояльность_Настройки) 	
		|И	(РеализацияТовары.ВидЦены В (ВЫБРАТЬ ВидЦеныБонус Из РегистрСведений.УчетнаяПолитикаБонусы))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Добавляю ось так, так як на запитання як правильно отримав відповідь - я нічого не знаю.
		|ВЫБРАТЬ
		|	&Период			КАК Период,
		|	&Менеджер 		КАК Менеджер,
		|	&Организация 	КАК Организация, 
		|	БонусыМенеджерам.Номенклатура,
		|	БонусыМенеджерам.Характеристика,
		|	РеализацияТовары.Количество КАК Количество,
		|	БонусыМенеджерам.Бонус * РеализацияТовары.Количество КАК Бонус
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешБонусов КАК БонусыМенеджерам
		|ПО  БонусыМенеджерам.Номенклатура 	 = РеализацияТовары.Номенклатура
		|И	 БонусыМенеджерам.Характеристика = РеализацияТовары.Характеристика
		|
		|ГДЕ
		|	РеализацияТовары.Ссылка = &Ссылка
		|И	(&Подразделение) В (ВЫБРАТЬ Подразделение ИЗ РегистрСведений.Лояльность_Настройки) 	
		|И	(РеализацияТовары.ВидЦены = &ВидЦеныБезнал)
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВозвратТоваровОтКлиента()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&Период										КАК Период,
		|	БонусыМенеджерамНачисленые.Менеджер			КАК Менеджер,
		|	БонусыМенеджерамНачисленые.Организация		КАК Организация,
		|	БонусыМенеджерамНачисленые.Номенклатура		КАК Номенклатура,
		|	БонусыМенеджерамНачисленые.Характеристика	КАК Характеристика,
		| - ВозвратТоваровОтКлиентаТовары.Количество	КАК Количество,
		| - БонусыМенеджерамНачисленые.Бонус * (ВозвратТоваровОтКлиентаТовары.Количество / БонусыМенеджерамНачисленые.Количество) КАК Бонус
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
		|		
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БонусыМенеджерамНачисленые КАК БонусыМенеджерамНачисленые
		|ПО ВозвратТоваровОтКлиентаТовары.ДокументРеализации = БонусыМенеджерамНачисленые.Регистратор
		|И 	ВозвратТоваровОтКлиентаТовары.Номенклатура 		 = БонусыМенеджерамНачисленые.Номенклатура
		|И 	ВозвратТоваровОтКлиентаТовары.Характеристика 	 = БонусыМенеджерамНачисленые.Характеристика 
		|
		|ГДЕ
		|	ВозвратТоваровОтКлиентаТовары.Ссылка = &Ссылка";
	Возврат ТекстЗапроса;

КонецФункции



// Информация о внешней обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	//Версия обработки
	Версия = "1.0.2";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "МодульПроведенияБонусыМенеджерамНачисленные");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "Внешний модуль проведения по регистру: БонусыМенеджерамНачисленные [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Внешний модуль проведения по регистру: БонусыМенеджерамНачисленные [" + Версия + "]", "Форма", "ОткрытиеФормы", Ложь, "БМН");
    
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры








