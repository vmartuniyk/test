#Область ИнтерфейсВнешнегоОбъекта
	
#Область ПрограммныйИнтерфейс
// Процедура записивает допольнительнных сведений и реквизитов при проведении документа Источник 
// Вызывается из подписки на событие документов при проведении.
// 
// Параметры:
//  Источник 		- ДокументОбъект.УстановкаЦенНоменклатуры 	- Документ объект установки цен номенклатуры
//  Отказ			- Булево                               		- Выявлены ошибки при проведении документа
Процедура ЗаписатьДопольнительниеСведенияИРеквизитыПриПроведенииИзминенииДокумента(Источник, Отказ) Экспорт
	                                               
	Если Отказ Тогда 
		Возврат; 
	КонецЕсли;	
    
    ДокументСсылка = Источник.Ссылка; 
	
    СвойствоКопейкиРозница = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоЦенаБезКопеекРозница(); 
	СвойствоЦенаБезКопеекРозница = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоЦенаБезКопеекРозница(); 
	ВидЦеныРозница = ктс_ПредопределенныеЗначенияПовтИсп.ВидЦеныРозничная();
	
	ЗаписатьДопольнительниеСведенияИРеквизитыЦенаБезКопеекИКопейки(ДокументСсылка,ВидЦеныРозница,СвойствоКопейкиРозница,СвойствоЦенаБезКопеекРозница);
	
	СвойствоКопейкиФ5 = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоКопейкиФ5();
	СвойствоЦенаБезКопеекФ5 = ктс_ПредопределенныеЗначенияПовтИсп.СвойствоЦенаБезКопеекФ5(); 
	ВидЦеныЦенаФ5 = ктс_ПредопределенныеЗначенияПовтИсп.ВидЦеныЦенаФ5();

	ЗаписатьДопольнительниеСведенияИРеквизитыЦенаБезКопеекИКопейки(ДокументСсылка,ВидЦеныЦенаФ5,СвойствоКопейкиФ5,СвойствоЦенаБезКопеекФ5);
	
	
	ВидЦеныРозница = ктс_ПредопределенныеЗначенияПовтИсп.ВидЦеныРозничная();
	ЗаписатьДопольнительниеСведенияИРеквизитыСвойствоПДО3годаТелевизор(ДокументСсылка,ВидЦеныРозница);

КонецПроцедуры
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьДопольнительниеСведенияИРеквизитыЦенаБезКопеекИКопейки(ДокументСсылка,ВидЦены, СвойствоКопейки,СвойствоЦенаБезКопеек) 
	
	Если ЗначениеЗаполнено(ВидЦены) = ЛОЖЬ  Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойствоКопейки) = ЛОЖЬ 
		ИЛИ  ЗначениеЗаполнено(СвойствоЦенаБезКопеек) = ЛОЖЬ  Тогда
		Возврат;	
	КонецЕсли;
	
    Запрос = Новый Запрос;
    Запрос.Текст = ПолучитьТекстЗапросаИзминенияЦеныНоменклатури();
    Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
    Запрос.УстановитьПараметр("ВидЦены", ВидЦены); 
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат;
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
       
   	НаборЗаписейЦенаБК = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписейЦенаБК.Отбор.Свойство.Установить(СвойствоЦенаБезКопеек);    

    НаборЗаписейКопейки = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписейКопейки.Отбор.Свойство.Установить(СвойствоКопейки);

    Пока Выборка.Следующий() Цикл

		#Область ЦенаБезКопеек
            НаборЗаписейЦенаБК.Отбор.Объект.Установить(Выборка.Номенклатура);
            НоваяЗапись  = НаборЗаписейЦенаБК.Добавить();
            НоваяЗапись.Объект	 = Выборка.Номенклатура;
            НоваяЗапись.Свойство = СвойствоЦенаБезКопеек;
            НоваяЗапись.Значение = Строка(Выборка.ЦенаБезКопеек);
            НаборЗаписейЦенаБК.Записать();	
            НаборЗаписейЦенаБК.Очистить();
        #КонецОбласти

        #Область КопейкиОтЦени
            НаборЗаписейКопейки.Отбор.Объект.Установить(Выборка.Номенклатура);
            НоваяЗапись  = НаборЗаписейКопейки.Добавить();
            НоваяЗапись.Объект	 = Выборка.Номенклатура;
            НоваяЗапись.Свойство = СвойствоКопейки;
            Копейки = Формат(Выборка.Копейки,"ЧЦ=2"); 
            НоваяЗапись.Значение = Прав("00"+Копейки,2);
            НаборЗаписейКопейки.Записать();	
            НаборЗаписейКопейки.Очистить();
        #КонецОбласти
        
    КонецЦикла
  
КонецПроцедуры

Процедура ЗаписатьДопольнительниеСведенияИРеквизитыСвойствоПДО3годаТелевизор(ДокументСсылка,ВидЦены) 
	
	Если ЗначениеЗаполнено(ВидЦены) = ЛОЖЬ  Тогда
		Возврат;	
	КонецЕсли;

    Запрос = Новый Запрос;
    Запрос.Текст = ПолучитьТекстЗапросаИзминенияЦеныНоменклатуриПоПДО();
    Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
    Запрос.УстановитьПараметр("ВидЦены", ВидЦены); 
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат;
	КонецЕсли; 
	
   	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Отбор.Свойство.Установить(Выборка.Свойство);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Значение = Формат(Выборка.Значение, "ЧДЦ=0");
		НаборЗаписей.Записать();
	КонецЦикла;  
КонецПроцедуры   

#Область ТекстЗапроса

// Возвращает текст запроса  цен номенклатури
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаИзминенияЦеныНоменклатури()
	
	ТекстЗапроса = "ВЫБРАТЬ
        |    Номенклатура,
        |    ВидЦены
        |ПОМЕСТИТЬ СпрНоменклатура
        |ИЗ
        |    Документ.УстановкаЦенНоменклатуры.Товары
        |ГДЕ
        |    Ссылка = &Ссылка
        |    И ВидЦены = &ВидЦены
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	Номенклатура,
        |	ВидЦены
        |;
        ////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |    СпрНоменклатура.Номенклатура,
        |    СпрНоменклатура.ВидЦены,
        |    ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена
        |ПОМЕСТИТЬ СрезПоследнихПоЦенам
        |ИЗ
        |    СпрНоменклатура КАК СпрНоменклатура
        |        
        |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, 
		|                                                                Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ СпрНоменклатура)
        |                                                                И ВидЦены = &ВидЦены
        |                                                                ) КАК ЦеныНоменклатуры
        |ПО СпрНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
        |И СпрНоменклатура.ВидЦены = ЦеныНоменклатуры.ВидЦены
        |;
        ////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СрезЦен.Номенклатура,
        |   СрезЦен.Цена,
		|   Выбор	
		|		Когда СрезЦен.Цена =0 Тогда
		|				0
		|			Иначе
		|				ВЫРАЗИТЬ(СрезЦен.Цена - 0.5 КАК ЧИСЛО(15, 0))
		|		Конец КАК ЦенаБезКопеек,
		|	Выбор	
		|		Когда СрезЦен.Цена =0 Тогда
		|			0
		|		Иначе
		|			100 * (СрезЦен.Цена - (ВЫРАЗИТЬ(СрезЦен.Цена - 0.5 КАК ЧИСЛО(15, 0)))) 
		|	Конец КАК Копейки
		|ИЗ
        |    СрезПоследнихПоЦенам КАК СрезЦен";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИзминенияЦеныНоменклатури()

// Возвращает текст запроса  цен номенклатури
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//    Строка - Текст запроса
Функция ПолучитьТекстЗапросаИзминенияЦеныНоменклатуриПоПДО()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КТС_НастройкаПроцентовСертификатов.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	КТС_НастройкаПроцентовСертификатов.Процент,
	               |	КТС_НастройкаПроцентовСертификатов.ДополнительноеСведение
	               |ПОМЕСТИТЬ КешНастройкиСертификатов
	               |ИЗ
	               |	РегистрСведений.КТС_НастройкаПроцентовСертификатов КАК КТС_НастройкаПроцентовСертификатов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УстановкаЦенНоменклатурыТовары.Номенклатура,
	               |	УстановкаЦенНоменклатурыТовары.ВидЦены
	               |ПОМЕСТИТЬ СпрНоменклатура
	               |ИЗ
	               |	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	               |ГДЕ
	               |	УстановкаЦенНоменклатурыТовары.Ссылка = &Ссылка
	               |	И УстановкаЦенНоменклатурыТовары.ВидЦены = &ВидЦены
	               |	И УстановкаЦенНоменклатурыТовары.Номенклатура.ВидНоменклатуры В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				КешНастройкиСертификатов.ВидНоменклатуры
	               |			ИЗ
	               |				КешНастройкиСертификатов КАК КешНастройкиСертификатов)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	УстановкаЦенНоменклатурыТовары.Номенклатура,
	               |	УстановкаЦенНоменклатурыТовары.ВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпрНоменклатура.Номенклатура,
	               |	СпрНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	               |		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)
	               |	КОНЕЦ КАК Цена
	               |ПОМЕСТИТЬ СрезПоследнихПоЦенам
	               |ИЗ
	               |	СпрНоменклатура КАК СпрНоменклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							СпрНоменклатура.Номенклатура
	               |						ИЗ
	               |							СпрНоменклатура)
	               |					И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
	               |		ПО СпрНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
	               |			И СпрНоменклатура.ВидЦены = ЦеныНоменклатуры.ВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СрезЦен.Номенклатура КАК Объект,
	               |	СрезЦен.Цена * КешНастройкиСертификатов.Процент * 0.01 КАК Значение,
	               |	КешНастройкиСертификатов.ДополнительноеСведение КАК Свойство
	               |ИЗ
	               |	СрезПоследнихПоЦенам КАК СрезЦен
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешНастройкиСертификатов КАК КешНастройкиСертификатов
	               |		ПО СрезЦен.ВидНоменклатуры = КешНастройкиСертификатов.ВидНоменклатуры";
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИзминенияЦеныНоменклатури()

#КонецОбласти

#КонецОбласти

#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.6";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "ЗаписьДополнительныхСведенийИРеквизитов");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);    
    ПараметрыРегистрации.Вставить("Информация", "ЗаписьДополнительныхСведенийИРеквизитов [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "ЗаписьДополнительныхСведенийИРеквизитов [" + Версия + "]", "МЛ", "ОткрытиеФормы", Ложь, "МЛ");
	
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Процедура ВыполнитьКоманду(Индентификатор) Экспорт
	Выполнить(Индентификатор);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


