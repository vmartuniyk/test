Перем юТест;
Перем ЮнитТестированиеИмя;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
    юТест = ЮнитТестирование;
	
	//ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();
    
    ВсеТесты = Новый Массив;
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Проверим для пустой ссылки на справочник вернет пустую строку", 
			"Тест_ДолженДляПустойСсылкиВернутьПустуюТаблицу", Истина);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Загрузим номенклатуру по умолчанию", 
			"Тест_ДолженЗагрузитьИзМакетаДанныеИПоместитьВКонтекст", Ложь, "Номенклатура");
	ВсеТесты.Добавить(ОписаниеТеста);
	
	//LenovoIdeaPadG50_3015_6_IntelCeleronN28402_16GHz_2GB_320GB_HDGraphics_NoODD_Win8 :Lenovo IdeaPad G50-30 15.6" Intel Celeron N2840 2,16 GHz / 2GB / 320GB / HD Graphics / No ODD / Win8
	
	//Для номенклатуры 'LenovoIdeaPadG50_3015_6_IntelCeleronN28402_16GHz_2GB_320GB_HDGraphics_NoODD_Win8' истановим поиск аналогов по полю содержание со значением  '%G50%'
	//	И вызовем функция получения аналогов 
	//	И в результате получим таблицу в одной из строк которой в колонке номенклатура будет номенклатура с именем содержащая 'g50' в любом регистре.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("LenovoIdeaPadG50_3015_6_IntelCeleronN28402_16GHz_2GB_320GB_HDGraphics_NoODD_Win8");
	МассивПараметров.Добавить("G50");
	МассивПараметров.Добавить("g50");
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Проверить поиск аналогов для номенклатуры по соответствию содержанию", 
			"Тест_ПолучитьТаблицуАналоговДляНоменклатуры", Ложь, МассивПараметров);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("LenovoIdeaPadG50_3015_6_IntelCeleronN28402_16GHz_2GB_320GB_HDGraphics_NoODD_Win8");
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Проверить поиск аналогов для номенклатуры по соответствию производитель", 
			"Тест_ПолучитьТаблицуАналоговДляНоменклатурыПоПроизводителю", Истина, МассивПараметров);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Проверить поиск аналогов для номенклатуры по соответствию товарной категории", 
			"Тест_ПолучитьТаблицуАналоговДляНоменклатурыПоТоварнойКатегории", Ложь, МассивПараметров);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста, Транзакция, Параметр", "Проверить поиск аналогов для номенклатуры по соответствию виду цены", 
			"Тест_ПолучитьТаблицуАналоговДляНоменклатурыПоВидуЦены", Ложь, МассивПараметров);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	//
	//ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Проверка знания элемента формули <ПродажиПоСотруднику>", 
	//		"ТестДолжен_ЗнатьЭлементФормулы", Истина, "ПродажиПоПодразделению");
	//ВсеТесты.Добавить(ОписаниеТеста);
	//
	//
	//ВсеТесты.Добавить("Тест_ФормаДолжнаЗнатьОПоказателе");
	//ВсеТесты.Добавить("Тест_ПроверитьВалидациюФормулы"); //Тут параметрический тест, и передаем в параметрах различные формулы. 
	//ВсеТесты.Добавить("Тест_ПроверитьНевернуюВалидациюФормулы"); //Самый последний тест "негативные тесты", самые сложные и все варианты не предусмотришь, поэтому их оставлюят нереализованными. 
	//

    Возврат ВсеТесты;
КонецФункции

Процедура Тест_ДолженДляПустойСсылкиВернутьПустуюТаблицу(Параметр = Неопределено) Экспорт
	ПустаяСсылка = Справочники.ПД_АналогиНоменклатуры.ПустаяСсылка();
	Таблица = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатуры(ПустаяСсылка);
	юТест.ПроверитьРавенство(Таблица.Количество(), 0);
КонецПроцедуры


Процедура Тест_ДолженЗагрузитьИзМакетаДанныеИПоместитьВКонтекст(ИмяМакета) Экспорт
	
	ДанныеМакета = юТест.СоздатьДанныеПоМакетам(ЭтотОбъект, ИмяМакета);
	Контекст = юТест.ПолучитьКонтекст();
	Если Контекст = Неопределено Тогда 
		Контекст = Новый Структура;
	КонецЕсли;
	Контекст.Вставить(ИмяМакета, ДанныеМакета);
	юТест.УстановитьКонтекст(Контекст);	
КонецПроцедуры

Функция УстановитьАктивностьУНоменклатуры(Знач Номенклатура, Актуально=Истина, ГаранитияДоставки=Истина)
	
	Если ТипЗнч(Номенклатура) = Тип("Строка") Тогда 
		Контекст = юТест.ПолучитьКонтекст();
		НоменклатураСсылка = Неопределено;
		юТест.Проверить(Контекст["Номенклатура"].Свойство(Номенклатура, НоменклатураСсылка), "Для переменной не удалось найти значение в контексте "+Номенклатура);
		Номенклатура = НоменклатураСсылка;
	КонецЕсли;
	
	Сообщить(Номенклатура);
	
	НаборЗаписей = РегистрыСведений.ALPS_АктуальностьНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда 
		Строка = НаборЗаписей.Добавить();
		Строка.Номенклатура = Номенклатура;
		Строка.Период = НачалоДня(ТекущаяДата());
	Иначе
		Строка = НаборЗаписей[0];
	КонецЕсли;
	
	Строка.Актуально = Актуально;
	Строка.ГарантияДоставки = ГаранитияДоставки;
	
	НаборЗаписей.Записать();
	
КонецФункции

Процедура Тест_ПолучитьТаблицуАналоговДляНоменклатуры(ИмяПеременноНом, Содержание=Неопределено, ПроверкаНаименования=Неопределено) Экспорт
	
	Номенклатура = Неопределено;
	
	Контекст = юТест.ПолучитьКонтекст();
	юТест.Проверить(Контекст["Номенклатура"].Свойство(ИмяПеременноНом, Номенклатура), "Для переменной не удалось найти значение в контексте "+ИмяПеременноНом);
	
	СправочникСсылка = Справочники.ПД_АналогиНоменклатуры.НайтиПоНаименованию(Строка(Содержание));
	Если СправочникСсылка.Пустая() Тогда 
		
		СправочникОбъект = Справочники.ПД_АналогиНоменклатуры.СоздатьЭлемент();
	Иначе 
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.Настройки.Очистить();
	КонецЕсли;
	
	СправочникОбъект.Наименование = Строка(Содержание);
	СправочникОбъект.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	Отбор = СправочникОбъект.Настройки.Добавить();
	Отбор.Содержит = Содержание;
	
	СправочникОбъект.ОбменДанными.Загрузка = Истина;	
	СправочникОбъект.Записать();
	
	ТаблицаАналогов = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатуры(СправочникОбъект.Ссылка, Номенклатура, Ложь);
	юТест.ПроверитьТип(ТаблицаАналогов, "ТаблицаЗначений", "Не удалось получить правильный тип для ПолучитьАналогиНоменклатуры");
	
	юТест.ПроверитьБольше(ТаблицаАналогов.Количество(), 0, "Таблица аналогов пустая");
	
	Нашли = Ложь;
	
	Для каждого СтрокаТаблици из ТаблицаАналогов Цикл 
		Если Найти(Строка(СтрокаТаблици.Наименование), ПроверкаНаименования) > 0 Тогда 
			Нашли=Истина;
		КонецЕсли;
	КонецЦикла;
	
	юТест.Проверить(Нашли, "в таблице "+Строка(ТаблицаАналогов.Количество()) + " не нашли ни одной ном. с "  + ПроверкаНаименования);
	
КонецПроцедуры
	
Процедура Тест_ПолучитьТаблицуАналоговДляНоменклатурыПоПроизводителю(ИмяПеременноНом) Экспорт
	
	Номенклатура = Неопределено;
	
	Контекст = юТест.ПолучитьКонтекст();
	юТест.Проверить(Контекст["Номенклатура"].Свойство(ИмяПеременноНом, Номенклатура), "Для переменной не удалось найти значение в контексте "+ИмяПеременноНом);
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	
	СправочникСсылка = Справочники.ПД_АналогиНоменклатуры.НайтиПоНаименованию(Строка(Идентификатор));
	Если СправочникСсылка.Пустая() Тогда 
		
		СправочникОбъект = Справочники.ПД_АналогиНоменклатуры.СоздатьЭлемент();
	Иначе 
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.Настройки.Очистить();
	КонецЕсли;
	
	СправочникОбъект.Наименование = Строка(Идентификатор);
	СправочникОбъект.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	Отбор = СправочникОбъект.Настройки.Добавить();
	//Отбор.Содержит = Содержание;
	Отбор.Производитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Производитель");
	
	СправочникОбъект.ОбменДанными.Загрузка = Истина;	
	СправочникОбъект.Записать();
	
	Для каждого КлючЗначение из Контекст["Номенклатура"] Цикл 
		Если ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда 
			УстановитьАктивностьУНоменклатуры(КлючЗначение.Значение, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаАналогов = Справочники.ПД_АналогиНоменклатуры.ПолучитьАналогиНоменклатуры(СправочникОбъект.Ссылка, Номенклатура, Ложь);
	юТест.ПроверитьТип(ТаблицаАналогов, "ТаблицаЗначений", "Не удалось получить правильный тип для ПолучитьАналогиНоменклатуры");
	
	юТест.ПроверитьБольше(ТаблицаАналогов.Количество(), 0, "Таблица аналогов пустая");
	
	//Нашли = Ложь;
	//
	//Для каждого СтрокаТаблици из ТаблицаАналогов Цикл 
	//	Если Найти(Строка(СтрокаТаблици.Наименование), ПроверкаНаименования) > 0 Тогда 
	//		Нашли=Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//юТест.Проверить(Нашли, "в таблице "+Строка(ТаблицаАналогов.Количество()) + " не нашли ни одной ном. с "  + ПроверкаНаименования);
	//
КонецПроцедуры
	