&НаКлиенте
Перем юТест;

&НаКлиенте
Перем ЮнитТестированиеИмя;


#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
    юТест = ЮнитТестирование;
	
	ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();
	
    ВсеТесты = Новый Массив;
	
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Найти или добавить свойство пользователя 'Партнер пользователя для ЗП'", 
			"ТестДолжен_НайтиИЛИСоздатьСвойствоПользователя", Ложь, "Партнер пользователя для ЗП");
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Найти или добавить свойство справочника кассы 'Касса используется для выдачи з/п через b2b'", 
			"ТестДолжен_НайтиИЛИСоздатьСвойствоКассы", Ложь, "Касса используется для выдачи з/п через b2b");
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Найти или добавить свойство документа «Заявка на расходование денежных средств» 'Заявка создана из сайта orderb2b'", 
			"ТестДолжен_НайтиИЛИСоздатьСвойствоЗаявкаНВДС", Ложь, "Свойство заявка создана из сайта orderb2b");
	ВсеТесты.Добавить(ОписаниеТеста);

	
	ВсеТесты.Добавить("ЗагрузитьПервоначальныеДанные");
	ВсеТесты.Добавить("ОтключитьНапоминаниеОКопииБазы");
	ВсеТесты.Добавить("УстановкаИденитфикаторовУПоказателей");
	ВсеТесты.Добавить("УстановкаКалендаряПоУмолчанию");
	
    Возврат ВсеТесты;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПервоначальныеДанные() Экспорт
	ЗагрузитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьНапоминаниеОКопииБазы() Экспорт
	ОтключитьНапоминаниеОКопииБазыСервер();		
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_НайтиИЛИСоздатьСвойствоПользователя(НаименованиеСвойства) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Наименование", 		НаименованиеСвойства);
	СтруктураПараметров.Вставить("КонтейнерСвойства", 	ПредопределенноеЗначение("Справочник.КТС_Константы.СвойствоПартнерЗП")); 
	СтруктураПараметров.Вставить("НаборСведений", 		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Пользователи"));
	СтруктураПараметров.Вставить("ТипСвойства", 		Новый ОписаниеТипов("СправочникСсылка.Партнеры")); 
	СтруктураПараметров.Вставить("Ю", 					ЮнитТестированиеИмя);
	НайтиИЛИСоздатьСвойствоНаСервере(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_НайтиИЛИСоздатьСвойствоКассы(НаименованиеСвойства) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Наименование", 		НаименованиеСвойства);
	СтруктураПараметров.Вставить("КонтейнерСвойства", 	ПредопределенноеЗначение("Справочник.КТС_Константы.СвойствоКассаИспользуетсяДляВидачиЗП")); 
	СтруктураПараметров.Вставить("НаборСведений", 		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Кассы"));
	СтруктураПараметров.Вставить("ТипСвойства", 		Новый ОписаниеТипов("Булево"));
	СтруктураПараметров.Вставить("Ю", 					ЮнитТестированиеИмя);
	НайтиИЛИСоздатьСвойствоНаСервере(СтруктураПараметров);
КонецПроцедуры // ТестДолжен_НайтиИЛИСоздатьСвойствоКассы()

&НаКлиенте
Процедура ТестДолжен_НайтиИЛИСоздатьСвойствоЗаявкаНВДС(НаименованиеСвойства) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Наименование", 		НаименованиеСвойства);
	СтруктураПараметров.Вставить("КонтейнерСвойства", 	ПредопределенноеЗначение("Справочник.КТС_Константы.СвойствоЗаявкаСозданаИзВ2В"));
	СтруктураПараметров.Вставить("НаборСведений", 		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаявкаНаРасходованиеДенежныхСредств"));
	СтруктураПараметров.Вставить("ТипСвойства", 		Новый ОписаниеТипов("Булево"));
	СтруктураПараметров.Вставить("Ю", 					ЮнитТестированиеИмя);
	НайтиИЛИСоздатьСвойствоНаСервере(СтруктураПараметров);
КонецПроцедуры // ТестДолжен_НайтиИЛИСоздатьСвойствоЗаявкаНВДС()
 

&НаКлиенте
Процедура Тест_ПроверитьРавно() Экспорт
    юТест.ПроверитьРавенство(2, 2, "Ошибка неравенства");
КонецПроцедуры

&НаКлиенте
Процедура УстановкаИденитфикаторовУПоказателей() Экспорт
    УстановитьИдентификаторыВПокзателяРасчета();
КонецПроцедуры

&НаКлиенте
Процедура УстановкаКалендаряПоУмолчанию() Экспорт
    УстановкаКалендаряПоУмолчаниюСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	ПодключитьОбработчикОжидания("ОжиданиеЗапускТеста", 1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеЗапускТеста()
	
	ФормуНашли = Ложь;
	ФормаxUnitFor1c = Неопределено;
	
	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			Если Найти(Строка(Окн.Заголовок), "xUnitFor1C")>0 Тогда
				ФормуНашли = Истина;
				ФормаxUnitFor1c = Окн.ПолучитьСодержимое();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ФормуНашли Тогда
		МассивТестов = ПолучитьСписокТестов(ФормаxUnitFor1c);
		ТестДолжен_НайтиИЛИСоздатьСвойствоЗаявкаНВДС("Свойство заявка создана из сайта orderb2b");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере 
Процедура ЗагрузитьТестовыеДанныеСервер(Знач ЮнитТестирование) 
	юТест = ВнешниеОбработки.Создать(ЮнитТестирование);
	
	//1. Тут нам необходимо записать еще свойство для справочника пользоатели. 
	
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить(Объект().ПолучитьМакет("НачальноеЗаполнение"));
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
КонецПроцедуры

// Универсальная функция которая ищет или создает дополнительное свойство в базе
// и при необходимости заполняет необходимые настройки в  правочнике КТС_Константы.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит свойства:
//   * Наименование 		- Строка 							- наименование свойства которое нужно найти или создать в базе.
//   * КонтейнерСвойства 	- СправочникСсылка.КТС_Константы 	- предопределенное значение справочника КТС_Константы,
//																  в которое нужно сохранить настройки.
//	 * НаборСведений		- СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
//																- предопределенное значение справочника НаборыДополнительныхРеквизитовИСведений
//																  в которое нужно сохранить настройки.
//	 * ТипСвойства			- ОписаниеТипов						- тип дополнительного сведения, если его нужно создать.
//   * Ю					- ОбъектЮнитТест					- объект xddUnitTest.
//
&НаСервере
Процедура НайтиИЛИСоздатьСвойствоНаСервере(СтруктураПараметров)

	юТест = ВнешниеОбработки.Создать(СтруктураПараметров.Ю);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДополнительныеРеквизитыИСведения.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", СтруктураПараметров.Наименование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		НовыйЭлемент 							= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		НовыйЭлемент.Наименование 				= СтруктураПараметров.Наименование;
		НовыйЭлемент.ТипЗначения 				= СтруктураПараметров.ТипСвойства;
		НовыйЭлемент.ЭтоДополнительноеСведение 	= Истина;
		НовыйЭлемент.ОбменДанными.Загрузка 		= Истина;
		
		юТест.ПроверитьМетодВыполнился(НовыйЭлемент, "Записать", ,"Записываем новый элемент ПВХ Дополнительные сведения " + СтруктураПараметров.Наименование);
				
		ЭлементОбъект 				= СтруктураПараметров.НаборСведений.ПолучитьОбъект();
		НоваяСтрока 				= ЭлементОбъект.ДополнительныеСведения.Добавить();
		НоваяСтрока.Свойство 		= НовыйЭлемент.Ссылка;
		ЭлементОбъект.Записать();
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда 
			НовыйЭлемент = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.КонтейнерСвойства, "Значение");
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		УстановитьЗначениеОбъекта(СтруктураПараметров.КонтейнерСвойства, НовыйЭлемент.Ссылка, "Значение");
	КонецЕсли;	

КонецПроцедуры // НайтиИЛИСоздатьСвойствоЗаявкаНВДСНаСервере()
 

&НаСервере
Процедура УстановитьИдентификаторыВПокзателяРасчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗП_ПоказателиРасчетаЗарплаты.Ссылка,
	               |	ЗП_ПоказателиРасчетаЗарплаты.Идентификатор
	               |ИЗ
	               |	Справочник.ЗП_ПоказателиРасчетаЗарплаты КАК ЗП_ПоказателиРасчетаЗарплаты";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементОбъект.Идентификатор = ЭлементОбъект.Наименование;
		ЭлементОбъект.ИдентификаторСлужебный = "["+ЭлементОбъект.Наименование + "]";
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановкаКалендаряПоУмолчаниюСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Календари.Ссылка
	               |ИЗ
	               |	Справочник.Календари КАК Календари
	               |ГДЕ
	               |	Календари.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", "Календарь для партнеров (актуальність)");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЭлементОбъект = ПредопределенноеЗначение("Справочник.КТС_Константы.ОсновнойКалендарьЗП").ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ЭлементОбъект.Значение) Тогда 
			ЭлементОбъект.Значение = Выборка.Ссылка;
			ЭлементОбъект.Записать();
		КонецЕсли;
	Иначе 
		ВызватьИсключение "Не найденно ни одного календаря";
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьНапоминаниеОКопииБазыСервер() 
	
	ВарианатОповещения = РезервноеКопированиеИБСервер.ПолучитьВариантОповещения();
	Если Найти(Врег(ВарианатОповещения), "НЕОПОВЕЩАТЬ") = 0 Тогда 
		Параметры = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования();
		Параметры.Вставить("ВыборПунктаНастройки", 2);
		РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеОбъекта(Ссылка, Значение, ИмяРеквизита)
	
	ЭлементОбъект = Ссылка.ПолучитьОбъект();
	ЭлементОбъект[ИмяРеквизита] = Значение;
	ЭлементОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти
