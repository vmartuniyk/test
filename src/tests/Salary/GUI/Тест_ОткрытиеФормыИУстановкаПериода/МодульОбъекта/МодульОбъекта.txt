#Если Не ВебКлиент Тогда

//{ код для обеспечения работы теста в xUnitFor1C

#Область ПрограммныйИнтерфейс

&НаКлиенте
Перем юТест;

&НаКлиенте
Перем массивТестовыхПриложений;

&НаКлиенте
Перем ЮнитТестированиеИмя;

&НаКлиенте
Перем тестовоеПриложение;

&НаСервере
Функция ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров) Экспорт

	Макет = Объект().ПолучитьМакет(ИмяМакета);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, КоллекцияПараметров);
	
	НовыйТабДок = Новый ТабличныйДокумент;
	НовыйТабДок.Вывести(Макет);

	Возврат НовыйТабДок;
	
КонецФункции

&НаСервере
Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры


#Область ИнтерфейсТестов

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();	
	СисИнфо 			= Новый СистемнаяИнформация;	
	юТест 				= ЮнитТестирование;	
	ВсеТесты 			= Новый Массив;
		 
	Если СисИнфо.ВерсияПриложения < "8.3.0.0" Тогда
		Возврат ВсеТесты;
	КонецЕсли;
	
	ВсеТесты.Добавить("Тест_ЗапуститьПриложения");
	ВсеТесты.Добавить("Тест_ТестовыйСценарий_ОткрытиеФормыИУстановкаМесяца");
	ВсеТесты.Добавить("Тест_ЗавершитьПриложения");

	Возврат ВсеТесты;
	
КонецФункции

&НаКлиенте
Процедура Тест_ЗапуститьПриложения() Экспорт 
	
	Если ТипЗнч(массивТестовыхПриложений) = Тип("Массив") Тогда 
		ЗавершитьВсеСеансыРаботыСТестовымиПриложениями();
	КонецЕсли;
	
	массивТестовыхПриложений = Новый Массив;
	
	имяПользователя = "Администратор"; //"Роль1";
	Пароль = "";
	Порт = 1538;
	ТаймаутОжиданияПриложенияВСекундах = 60;
	
	тестовоеПриложение = ЗапуститьТестовоеПриложение(имяПользователя, Пароль, Порт, ТаймаутОжиданияПриложенияВСекундах);
			
КонецПроцедуры

&НаКлиенте
Процедура Тест_ЗавершитьПриложения() Экспорт
	
	Если ТипЗнч(массивТестовыхПриложений) = Тип("Массив")
		ИЛИ ТипЗнч(массивТестовыхПриложений) = Тип("ФиксированныйМассив") Тогда 
		ЗавершитьВсеСеансыРаботыСТестовымиПриложениями();
	КонецЕсли;
	
	массивТестовыхПриложений = Новый Массив;
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ТестовыйСценарий_ОткрытиеФормыИУстановкаМесяца() Экспорт

	ТестовоеПриложение = Новый ТестируемоеПриложение();
	ВремяОкончанияОжидания = ТекущаяДата() + 60;
	Подключен = Ложь;
	ОписаниеОшибкиСоединения = "";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	Если Не Подключен Тогда
		ТестовоеПриложение = Неопределено;
		Сообщить("Не смогли установить соединение! " + Символы.ПС + ОписаниеОшибкиСоединения);
		Возврат;
	КонецЕсли;

	ОкноПриложенияОсновноеКнопкаНачисениеЗарплатыНажать(ТестовоеПриложение);
	ОкноПриложенияНачислениеЗарплатыПолеКоличествоМесяцевЗакрыть(ТестовоеПриложение);

КонецПроцедуры // Тест_ТестовыйСценарий_ОткрытиеФормыИУстановкаМесяца()

#КонецОбласти 

#КонецОбласти


#Область ТестовыйСценарийОткрытиеФормыИУстановкаМесяца

&НаКлиенте
Процедура ОкноПриложенияОсновноеКнопкаНачисениеЗарплатыНажать(ТестовоеПриложение)
	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновноеФормаТекущиеДела = ОкноПриложенияОсновное.НайтиОбъект(Тип("ТестируемаяФорма"), "Текущие дела");
	КнопкаНачисениеЗарплаты = ОкноПриложенияОсновноеФормаТекущиеДела.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Начисение зарплаты");
	КнопкаНачисениеЗарплаты.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияНачислениеЗарплатыПолеКоличествоМесяцевЗакрыть(ТестовоеПриложение)

	ОкноПриложенияНачислениеЗарплаты = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Начисление зарплаты", , 30);
	ОкноПриложенияНачислениеЗарплатыФормаНачислениеЗарплаты = ОкноПриложенияНачислениеЗарплаты.НайтиОбъект(Тип("ТестируемаяФорма"), "Начисление зарплаты");
	ПолеМесяц = ОкноПриложенияНачислениеЗарплатыФормаНачислениеЗарплаты.НайтиОбъект(Тип("ТестируемоеПолеФормы"), "Месяц");
	ПолеМесяц.ВыбратьИзСпискаВыбора();

	ПолеКоличествоМесяцев = ОкноПриложенияНачислениеЗарплатыФормаНачислениеЗарплаты.НайтиОбъект(Тип("ТестируемоеПолеФормы"), "Количество месяцев");
	ПолеКоличествоМесяцев.Активизировать();

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("1");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("2");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("3");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("4");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("5");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("6");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("7");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("8");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("9");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("10");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("11");

	ПолеКоличествоМесяцев.УвеличитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("12");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("11");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("10");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("9");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("8");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("7");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("6");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("5");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("4");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("3");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("2");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("1");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("1");

	ПолеКоличествоМесяцев.УменьшитьЗначение();

	ПолеКоличествоМесяцев.ВвестиТекст("1");

	ОкноПриложенияНачислениеЗарплаты.Закрыть();

КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	Если ТестовыеДанныеУФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЮТест = ВнешниеОбработки.Создать(ЮТестПуть);
	
	//лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	//ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, "лПользователь должен существовать");
	
	ТестовыеДанные = Новый Структура;
	Для каждого Строка Из ТестовыеДанныеУФ Цикл
		Если Строка.Ключ = "ПользовательИнформационнойБазы" Тогда
			ЭлементСпискаЗначений = Строка.Значение[0];
			лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ЭлементСпискаЗначений.Значение));
			ТестовыеДанные.Вставить(ЭлементСпискаЗначений.Представление, лПользователь);
		Иначе
			ТестовыеДанные.Вставить(Строка.Ключ, Строка.Значение[0].Значение);
		КонецЕсли;
	КонецЦикла;
	
	юТест.УдалитьСозданныеДанные(ТестовыеДанные);
	
	//лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	//ЮТест.ПроверитьРавенство(лПользователь, Неопределено, "лПользователь должен быть удален");
	
	ТестовыеДанныеУФ.Очистить();
КонецПроцедуры

&НаСервере
Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ПользовательИмя); //"ТестИмя");
	//Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Функция ЗапуститьТестовоеПриложение(ИмяПользователя, Пароль, Порт, ТаймаутОжиданияПриложенияВСекундах)
	Перем тестовоеПриложение;
	строкаЗапуска = ПолучитьСтрокуЗапуска(ИмяПользователя, Пароль, Порт);
	//Предупреждение("строкаЗапуска "+Символы.ПС+строкаЗапуска, 3);
	//Предупреждение("Порт "+Порт);
 	ЗапуститьПриложение(строкаЗапуска);
	тестовоеПриложение = Неопределено;
	Выполнить("тестовоеПриложение = Новый ТестируемоеПриложение(, XMLСтрока(Порт));");

	Подключен = Ложь;
	ВремяОкончанияОжидания = ТекущаяДата() + ТаймаутОжиданияПриложенияВСекундах; //60;
	ОписаниеОшибкиСоединения = "";
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			тестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

	сообщениеОшибки = "Не смогли установить соединение с тестовым приложением для пользователя "+ИмяПользователя+" !" + Символы.ПС + ОписаниеОшибкиСоединения; 
		//юТест.ПроверитьИстину(Подключен, сообщениеОшибки);
	Если Не Подключен Тогда 
    	тестовоеПриложение = Неопределено;
		ВызватьИсключение сообщениеОшибки;
	КонецЕсли;
	
	массивТестовыхПриложений.Добавить(тестовоеПриложение);

	Возврат тестовоеПриложение;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВсеСеансыРаботыСТестовымиПриложениями()
	Если массивТестовыхПриложений.Количество() <> 0 Тогда
		Для Каждого Подопытный Из массивТестовыхПриложений Цикл
			Подопытный.РазорватьСоединение();
		КонецЦикла;	

		ЗавершитьВсеТестовыеПриложенияПринудительно();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеТестовыеПриложенияПринудительно()
		юТест.ПроверитьЗаполненность(массивТестовыхПриложений.Количество(), "массивТестовыхПриложений.Количество()");

	Scr = Новый COMОбъект("MSScriptControl.ScriptControl");
	Scr.Language = "vbscript";
	Scr.AddCode("
		|Option Explicit
		|
		|Dim objWMIService, objProcess, colProcess
		|
		|Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"") 
		|
		|Set colProcess = objWMIService.ExecQuery(""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"")
		|
		|For Each objProcess in colProcess
		|	objProcess.Terminate()
		|Next
		|");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуЗапуска(ИмяПользователя = "", Пароль = "", Порт = "")
		//Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		//	ИмяПользователя = "Администратор";
		//КонецЕсли;	
	
	Результат = КаталогПрограммы() + "1cv8c.exe ENTERPRISE " +
		"/IBConnectionString""" + СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """""") + """" +
		"/N""" + ИмяПользователя + """" + "/P""" + Пароль + """" +  
		" /TESTCLIENT -TPort" + XMLСтрока(Порт);

	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли 
