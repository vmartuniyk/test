&НаКлиенте
Перем юТест;

&НаКлиенте
Перем ЮнитТестированиеИмя, ИмяПользователя, ИмяПодразделения, ИмяОрганизации;

//Для проверки проведения рассчета нам необходимо проверять как ui поведение, так и сам порядок расчета. 
// т.к. это прототип, то сейчас просто расматриваем поведение пользователя и поведение программы, там где необходимо ui тесты
// добавляю коммент и их потом необходимо будет вывести в более высокие тесты. 
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
    юТест = ЮнитТестирование;
	
	ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();    
	
	ВсеТесты = Новый Массив;
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", "Найти пользователя '"+ИмяПользователя+"' и партнера для дальнейшей работы", 
			"Тест_ДолженНайтиПользователияИПартнера", Ложь, Новый Структура("Наименование", ИмяПользователя ));
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", 
			"Найти организацию '"+ИмяОрганизации+"' и подразделение '"+ИмяПодразделения+"' для дальнейшей работы", 
			"Тест_ДолженНайтиОрганизациюИПодразделение",
			Ложь,
			Новый Структура("Организация, Подразделение", ИмяОрганизации, ИмяПодразделения)
	);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	

	ВсеТесты.Добавить("Тест_РасчетПустыхПоказателей");
	
	//В Транзакции, создаем вид начисления и пытаемся его расчитать. 
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр",
			"Расчет по Партнер по умолчанию '"+ИмяПользователя+"' вызов процедуры расчета", 
			"Тест_РасчитатьПартнерПоУмолчанию", Истина);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр", 
			"Расчет по партнеру '"+ИмяПользователя+"' вида показателя 'ЗП_ДнейВМесяце'", 
			"Тест_РасчитатьПоПартнеруПоказатель", Истина, Новый Структура("Партнер, Показатель", ИмяПользователя, "ЗП_ДнейВМесяце" )
		);
	ВсеТесты.Добавить(ОписаниеТеста);
	
	ОписаниеТеста = Новый Структура("ПредставлениеТеста, ИмяТеста,Транзакция,Параметр",
			"Расчет по партнеру '"+ИмяПользователя+"' показателя 'ЗП_ЗаработокМенеджера'", 
			"Тест_РасчитатьЗаработокМенеджера", Истина, 
			Новый Структура("Партнер, ВидПоказателя", ИмяПользователя, "ЗП_ЗаработокМенеджера")
		);
	ВсеТесты.Добавить(ОписаниеТеста);
	
    Возврат ВсеТесты;
КонецФункции

Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

Процедура РасчитатьНачисленияПустыеНаСервере(Знач Ю) Экспорт 
	юТест = ВнешниеОбработки.Создать(Ю);
	
	Таблица = Новый ТаблицаЗначений;
		
	git_РасчетЗарплаты.РасчитатьНачисления(Таблица, ТекущаяДата(), Неопределено);
	
	
КонецПроцедуры

Процедура РасчитатьНачисленияВсеЗначенияПоУмолчанию(Знач Ю) Экспорт 
	юТест = ВнешниеОбработки.Создать(Ю);
	
	Таблица = git_РасчетЗарплаты.ПустаяТаблицаНачисления();
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Партнер = Партнер;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Подразделение = Подразделение;
	НоваяСтрока.Формула = "[ЗП_ДнейВМесяце]*5";
	НоваяСтрока.Рассчитывается = Истина;
	
	
	НовыйВидНачисления = Справочники.ЗП_ВидыРасчетов.СоздатьЭлемент();
	НовыйВидНачисления.Наименование = Новый УникальныйИдентификатор;
	НовыйВидНачисления.ОчередностьРасчета = 1;
	Показатель = НовыйВидНачисления.Показатели.Добавить();
	//Показатель.Показатель = ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ДнейВМесяце");	
	//Показатель.Показатель = ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты.ЗП_ЗаработокМенеджера");
	
	НовыйВидНачисления.Записать();
	НоваяСтрока.Начисление = НовыйВидНачисления.Ссылка;
	
	Результат = git_РасчетЗарплаты.РасчитатьНачисления(Таблица, ТекущаяДата(), Неопределено);
	Сообщить(Результат[0].Сумма);
	
	
КонецПроцедуры //РасчитатьНачисленияВсеЗначенияПоУмолчанию

Процедура НайтиПользователяИПартнераЗППоНаименованию(НаименованиеПользователя) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Наименование = &Наименование" ;
				   
	Запрос.УстановитьПараметр("Наименование", НаименованиеПользователя);
	Выборка = Запрос.Выполнить().Выбрать();
	Если не Выборка.Следующий() Тогда 
		ВызватьИсключение "Не нашли справочник Пользователи с наименованием "+НаименованиеПользователя;
	КонецЕсли;
	
	Пользователь = Выборка.Ссылка;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Свойство,
	               |	ДополнительныеСведения.Значение КАК Партнер
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Пользователь
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Свойство", ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда 
		ВызватьИсключение "Не найден партнер для пользователя "+Пользователь+ " в свойстве "+ ктс_ПредопределенныеЗначенияПовтИсп.СвойствоПартнерЗП();
	КонецЕсли;
	
	Партнер = Выборка.Партнер;
	
КонецПроцедуры

Процедура НайтиОрганизациюИПодразделение(НаименованиеОрганизации, НаименованиеПодразделения) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Спр
	               |ГДЕ
	               |	Спр.Наименование = &Наименование" ;
				   
	Запрос.УстановитьПараметр("Наименование", НаименованиеОрганизации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если не Выборка.Следующий() Тогда 
		ВызватьИсключение "Не нашли справочник Организация с наименованием "+НаименованиеОрганизации;
	КонецЕсли;
	
	Организация = Выборка.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК Спр
	               |ГДЕ
	               |	Спр.Наименование = &Наименование" ;
				   
	Запрос.УстановитьПараметр("Наименование", НаименованиеПодразделения);
	Выборка = Запрос.Выполнить().Выбрать();
	Если не Выборка.Следующий() Тогда 
		СтрокаОшибки = "Не нашли справочник Подразделение с наименованием "+НаименованиеПодразделения  ;
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
	Подразделение = Выборка.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ДолженНайтиПользователияИПартнера(ПараметрыПоиска) Экспорт 
	НайтиПользователяИПартнераЗППоНаименованию(ПараметрыПоиска.Наименование);
КонецПроцедуры

&НаКлиенте
Процедура Тест_РасчетПустыхПоказателей() Экспорт
    РасчитатьНачисленияПустыеНаСервере(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура Тест_РасчитатьПартнерПоУмолчанию(Параметры) Экспорт
    РасчитатьНачисленияВсеЗначенияПоУмолчанию(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура Тест_ДолженНайтиОрганизациюИПодразделение(ПараметрыПоиска) Экспорт 
	 НайтиОрганизациюИПодразделение(ПараметрыПоиска.Организация, ПараметрыПоиска.Подразделение);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПоМакету(Ю, ИмяМакета)
	юТест = ВнешниеОбработки.Создать(Ю);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить(Объект().ПолучитьМакет(ИмяМакета));
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_РасчитатьЗаработокМенеджера(ПараметрыРасчета) Экспорт 
	
	ЗагрузитьДанныеПоМакету(ЮнитТестированиеИмя, "ЗаработокМенеджераПроцишин");
	Тест_РасчитатьПоказатель(ЮнитТестированиеИмя, Партнер, Подразделение, Организация, "ЗП_ЗаработокМенеджера", 0);
	//ВызватьИсключение "Еще не реализовано";
	//РасчитатьЗаработокМенеджераПоФамилиИПоказателю(ПараметрыРасчета.Партнер, ПараметрыРасчета.ВидРасчета);
	
	
КонецПроцедуры

&НаСервере
Процедура Тест_РасчитатьПоказатель(Ю, Партнер, Подразделение, Организация, ИмяПоказателя, Эталон = 0)
	Перем ЗП_Показатель, Идентификатор;
	
	ЗП_Показатель = ПредопределенноеЗначение("Справочник.ЗП_ПоказателиРасчетаЗарплаты."+ИмяПоказателя);
	Сообщить(ЗП_Показатель);
	Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗП_Показатель, "Идентификатор");
	
	юТест = ВнешниеОбработки.Создать(Ю);
	
	
	#Область ЗаполнениеДанных
			
	//Создадим таблицу с одним сотрудником. 
	Таблица = git_РасчетЗарплаты.ПустаяТаблицаНачисления();
	ТаблицаНачислений = git_РасчетЗарплаты.ПустаяТаблицаНачисления();
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Партнер = Партнер;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Подразделение = Подразделение;
	
	
	НовыйВидНачисления = Справочники.ЗП_ВидыРасчетов.СоздатьЭлемент();
	НовыйВидНачисления.Наименование = Новый УникальныйИдентификатор;
	НовыйВидНачисления.ОчередностьРасчета = 1;
	Показатель = НовыйВидНачисления.Показатели.Добавить();
	Показатель.Показатель = ЗП_Показатель;	
	
	НовыйВидНачисления.Записать();
	НоваяСтрока.Начисление = НовыйВидНачисления.Ссылка;
	
	Результат = Новый Структура;
	Данные = Новый Структура("ДатаНачала, ДатаОкончания, Начисления, ДанныеДляНачисления, МесяцРасчета", 
		НачалоМесяца(ТекущаяДата()), 
		КонецМесяца(ТекущаяДата()), 
		ТаблицаНачислений,
		Таблица, 
		ТекущаяДата());
	#КонецОбласти	
	
	МВТ = Новый МенеджерВременныхТаблиц;
	git_РасчетЗарплаты.ПодготовкаПолученныхДанныхДляВыполненияРасчета(Данные, Результат);
	git_РасчетЗарплаты.ПодготовитьПервоначальныйЗапросПоТЧ(МВТ, Данные.Начисления);
	
	git_РасчетЗарплаты.РассчитатьЗначенияПереопределяемыхПоказателей(Результат.РасчетПереопределяемыхПоказателей,
		Новый Структура("МенеджерВременныхТаблиц, МесяцНачисления, ДатаНачала, ДатаОкончания", МВТ, Данные.ДатаНачала, Данные.ДатаНачала, Данные.ДатаОкончания)
		);
		
		
	//Блок проверки
	
	Для Каждого СтрокаРасчета Из Результат.РасчетПереопределяемыхПоказателей Цикл
		ИсходныеДанные =Результат.ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
		юТест.ПроверитьРавенство(СтрокаРасчета.Значение, Эталон, "Для вида показателя "+ЗП_Показатель + " эталоном считаем "+Эталон);
	//	//ИсходныеДанные.Вставить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасчета.Показатель, "Идентификатор"), СтрокаРасчета.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭталонДляПоказателяЗПДней()
	
	ГрафикПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенноеЗначение("Справочник.КТС_Константы.ОсновнойКалендарьЗП"), "Значение");
	Эталон = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
								ГрафикПоУмолчанию, НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
				
	Возврат Эталон;
КонецФункции
 
&НаКлиенте
Процедура Тест_РасчитатьПоПартнеруПоказатель(ПараметрыТеста) Экспорт
	//Вызываем серверную процедуру и там добавляем показатель и партнера. 
	НайтиПользователяИПартнераЗППоНаименованию(ПараметрыТеста.Партнер);
	Тест_РасчитатьПоказатель(ЮнитТестированиеИмя, Партнер, Подразделение, Организация, ПараметрыТеста.Показатель, ПолучитьЭталонДляПоказателяЗПДней());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОжиданиеЗапускТеста", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеЗапускТеста()
	
	
	ФормуНашли = Ложь;
	ФормаxUnitFor1c = Неопределено;
	
	Окна = ПолучитьОкна();
	Для каждого Окн Из Окна Цикл
		Если ТипЗнч(Окн) = Тип("ОкноКлиентскогоПриложения") Тогда
			Если Найти(Строка(Окн.Заголовок), "xUnitFor1C")>0 Тогда
				ФормуНашли = Истина;
				ФормаxUnitFor1c = Окн.ПолучитьСодержимое();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФормуНашли Тогда
		
		МассивТестов = ПолучитьСписокТестов(ФормаxUnitFor1c);
		//т.к. у нас зависимые тесты друг с дугом, то запускаем по массиву, пока не подойдет наш случай. 
		Для каждого ЭлементМассива из МассивТестов Цикл
			Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда 
				Выполнить(""+ЭлементМассива);
			Иначе
				Строка =  ""+ЭлементМассива.ИмяТеста+"("+ЭлементМассива.Параметр+")";
				Выполнить(Строка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


ИмяПользователя = "Процишин Юрій Олександрович";
ИмяПодразделения = "Відділ закупівлі";
ИмяОрганизации = "КТС Поставка";
	