
#Область ИнтерфейсАвтоматическихТестов

Перем ЮнитТест;
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	СписокТестов = Новый Массив;
	//СписокТестов.Добавить("ПолучитьНаборДанных");
	ПараметрыТестов = Новый Структура("ИмяТеста, Транзакция, Параметр", "Тест_ПроверитьМетодВыполнился", Ложь, "ПолучитьНаборДанных");
	СписокТестов.Добавить(ПараметрыТестов);
	
	Возврат СписокТестов;
	
	
КонецФункции



Процедура Тест_ПроверитьМетодВыполнился(Параметр) Экспорт
	
	ЮнитТест.ПроверитьМетодВыполнился(ЭтотОбъект, Параметр);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограмныйИнтерфейс

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)  

	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	НаборДанных					= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить("Данные",НаборДанных);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедуриИФункции

Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено И ПараметрПользовательскойНастройки.Использование Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
		Иначе
			Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНаборДанных() Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор("482344ab-fdce-11e2-883c-001e673c80fc");
	СписатьТоварВНаличии = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(УникальныйИдентификатор);	
	
	Период 			= ПолучитьЗначениеПараметра("Период");
		
	Партнер			= ПолучитьЗначениеПараметра("Партнер");
	Заказ			= ПолучитьЗначениеПараметра("Заказ");
	
	Запрос 		 	= Новый Запрос;
	ТекстЗапроса 	= ПолучитьТекстЗапросаНаборДанных();
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса,"%1",?(ЗначениеЗаполнено(Заказ),"И ЗаказКлиента = &Заказ"," "));
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса,"%2",?(ЗначениеЗаполнено(Партнер),"
	            																| И	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).Партнер = &Партнер "," "));	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаОкончания", 				?(Период.ДатаОкончания = Дата(1,1,1),КонецДня(ТекущаяДата()),Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаНачала", 				Период.ДатаНачала);
	Запрос.УстановитьПараметр("Партнер", 					Партнер);
	Запрос.УстановитьПараметр("Заказ", 						Заказ);
	
	Запрос.УстановитьПараметр("СписатьТоварВНаличии", 		СписатьТоварВНаличии);
	НаборДанных =  Запрос.Выполнить().Выгрузить();
	
	
	Возврат НаборДанных;
	
КонецФункции // ПолучитьНаборДанных()

Функция ПолучитьТекстЗапросаНаборДанных()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).Партнер КАК Партнер,
	               |	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).Дата КАК Период,
	               |	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
	               |	ЕСТЬNULL(ДополнительныеСведения.Значение, ЛОЖЬ) КАК Автовыписка
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
	               |			&ДатаОкончания,
	               |			ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	               |				И ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	               |				%1) КАК ЗаказыКлиентовОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |		ПО ЗаказыКлиентовОстатки.ЗаказКлиента = ДополнительныеСведения.Объект
	               |			И (ДополнительныеСведения.Объект ССЫЛКА Документ.ЗаказКлиента)
	               |			И (ДополнительныеСведения.Свойство = &СписатьТоварВНаличии)
				   |ГДЕ
				   |	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).Дата >=&ДатаНачала
				   | %2 ";	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


#Область    СведенияОВнешнемОтчете
Функция 	СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.0";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Отчет по автореализации в заказе клиента");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "Отчет по автореализации в заказе клиента");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Отчет по автореализации в заказе клиента", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция 	ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура 	ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры
	
#КонецОбласти

