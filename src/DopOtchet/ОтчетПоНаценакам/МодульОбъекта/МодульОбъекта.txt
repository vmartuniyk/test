#Область АвтоТест
Перем ЮнитТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	ЮнитТест = ЮнитТестирование;
	
	СпиокТестов = Новый Массив;	
	Возврат СпиокТестов;
	
КонецФункции
#КонецОбласти

#Область ПрограмныйИнтерфейс
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ОтчетПоНаценакам			= ПолучитьНаборДанных();
	ВнешниеНаборыДанных 		= Новый Структура;
	ВнешниеНаборыДанных.Вставить("СписокНоменклатуры",ОтчетПоНаценакам);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедуриИФункции
Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки.Значение;
		Иначе
			Возврат ПараметрДанных.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНаборДанных()
	Запрос 		 	= Новый Запрос;
	ТекстЗапроса 	= ПолучитьТекстЗапросаНаборДанных();
	ПериодОтчета 	= ПолучитьЗначениеПараметра("ПериодОтчета");
	ВидЦены			= ПолучитьЗначениеПараметра("ВидЦены");
	ТекущаяДата		= ?(ПериодОтчета.ДатаОкончания>ТекущаяДата(),ТекущаяДата(),ПериодОтчета.ДатаОкончания);
	
	//ВидЦены			= Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор("8bdf84ff-404c-11e0-9f98-001517115d85")); // розничная цена	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Валюта", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("НачалоПериода", 	ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	ПериодОтчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата);
	Запрос.УстановитьПараметр("ВидЦены", 		ВидЦены);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНаборДанных()



Функция ПолучитьТекстЗапросаНаборДанных()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ КешНоменклатура
	               |ИЗ
	               |	РегистрНакопления.ТоварыОрганизаций.Остатки(&КонецПериода, ) КАК ТоварыОрганизацийОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Аналитика.Номенклатура КАК Номенклатура,
	               |	Аналитика.Склад КАК Склад,
	               |	СтоимостьТоваровСрезПоследних.Организация КАК Организация,
	               |	СтоимостьТоваровСрезПоследних.Стоимость + СтоимостьТоваровСрезПоследних.СтоимостьДопРасходы КАК Стоимость,
	               |	СтоимостьТоваровСрезПоследних.СтоимостьБезНДС + СтоимостьТоваровСрезПоследних.СтоимостьДопРасходыБезНДС КАК СтоимостьБезНДС
	               |ПОМЕСТИТЬ КешСтоимостьТоваров
	               |ИЗ
	               |	РегистрСведений.СтоимостьТоваров.СрезПоследних(
	               |			,
	               |			Период = НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ)
	               |				И АналитикаУчетаНоменклатуры.Номенклатура В
	               |					(ВЫБРАТЬ
	               |						КешНоменклатура.Номенклатура
	               |					ИЗ
	               |						КешНоменклатура)) КАК СтоимостьТоваровСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	               |		ПО СтоимостьТоваровСрезПоследних.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Номенклатура,
	               |	ЦеныНоменклатуры.Цена * КурсыВалют.Курс / КурсыУпрУч.Курс КАК Цена
	               |ПОМЕСТИТЬ КешЦеныНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			,
	               |			Номенклатура В
	               |					(ВЫБРАТЬ
	               |						КешНоменклатура.Номенклатура
	               |					ИЗ
	               |						КешНоменклатура)
	               |				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыУпрУч
	               |		ПО (ИСТИНА)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалют
	               |		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыОрганизацийОстатки.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыОрганизацийОстатки.Склад КАК Склад,
	               |	ТоварыОрганизацийОстатки.Организация,
	               |	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Количество,
	               |	ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 0.0000001) КАК Стоимость,
	               |	ЕСТЬNULL(КешСтоимостьТоваров.СтоимостьБезНДС, 0) КАК СтоимостьБезНДС,
	               |	ЕСТЬNULL(КешЦеныНоменклатуры.Цена, 0) КАК ЦенаНоменклатуры,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 0) <> 0
	               |			ТОГДА ((ВЫРАЗИТЬ(ЕСТЬNULL(КешЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 0) КАК ЧИСЛО(15, 2)))) / (ВЫРАЗИТЬ(ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 1) КАК ЧИСЛО(15, 2)))
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Наценка,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 0) <> 0
	               |			ТОГДА 100 * ((ВЫРАЗИТЬ(ЕСТЬNULL(КешЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 0) КАК ЧИСЛО(15, 2)))) / (ВЫРАЗИТЬ(ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 1) КАК ЧИСЛО(15, 2)))
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НаценкаПроцент,
	               |	(ВЫРАЗИТЬ(ЕСТЬNULL(КешЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ЕСТЬNULL(КешСтоимостьТоваров.Стоимость, 0) КАК ЧИСЛО(15, 2))) КАК Маржа
	               |ИЗ
	               |	РегистрНакопления.ТоварыОрганизаций.Остатки КАК ТоварыОрганизацийОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КешСтоимостьТоваров КАК КешСтоимостьТоваров
	               |		ПО ТоварыОрганизацийОстатки.Номенклатура = КешСтоимостьТоваров.Номенклатура
	               |			И ТоварыОрганизацийОстатки.Склад = КешСтоимостьТоваров.Склад
	               |			И ТоварыОрганизацийОстатки.Организация = КешСтоимостьТоваров.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КешЦеныНоменклатуры КАК КешЦеныНоменклатуры
	               |		ПО ТоварыОрганизацийОстатки.Номенклатура = КешЦеныНоменклатуры.Номенклатура";	
	Возврат ТекстЗапроса;
	
КонецФункции

	
#КонецОбласти

#Область    СведенияОВнешнемОтчете
Функция 	СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.1";
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Отчет по наценакам");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", Версия);    
	ПараметрыРегистрации.Вставить("Информация", "Отчет по наценакам'");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Отчет по наценакам", "ФормаОтчета", "ОткрытиеФормы", Ложь, "");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция 	ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура 	ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры


	
#КонецОбласти

