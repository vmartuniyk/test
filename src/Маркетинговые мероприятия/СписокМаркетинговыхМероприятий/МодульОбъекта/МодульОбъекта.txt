
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт

	Выполнить(ИдентификаторКоманды);
	
КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДвиженияПоступленийТоваровИУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ПТУ.Ссылка 				КАК Регистратор,
		|	ПТУ.Номенклатура		КАК Номенклатура,
		|	СУММА(ПТУ.Количество) 	КАК Количество,
		|	СУММА(ПТУ.Сумма) 		КАК Сумма
		|ПОМЕСТИТЬ ПТУ
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПТУ	
		|ГДЕ
		|	Ссылка.Проведен = Истина
		|И	Ссылка.ПометкаУдаления = Ложь
		|И	ПТУ.Номенклатура.ТипНоменклатуры <> Значение(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПТУ.Ссылка,
		|	ПТУ.Номенклатура
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ММ_З.Регистратор КАК Документ.ПоступлениеТоваровУслуг)	КАК Регистратор,
		|	ММ_З.Номенклатура					КАК Номенклатура,
		|	ISNUll(СУММА(ММ_З.Количество), 0) 	КАК Количество,
		|	ISNUll(СУММА(ММ_З.Сумма), 0) 		КАК Сумма
		|ПОМЕСТИТЬ ММ_З
		|ИЗ
		|	РегистрНакопления.ММ_Закупки КАК ММ_З	
		|
		|СГРУППИРОВАТЬ ПО
		|	ММ_З.Регистратор,
		|	ММ_З.Номенклатура
		|;
		////////////////////////////////////////////////////////////////////////////////
		//
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПТУ.Регистратор	КАК Регистратор
		|ИЗ
		|	ПТУ КАК ПТУ
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ММ_З КАК ММ_З
		|ПО	ММ_З.Регистратор 	= ПТУ.Регистратор
		|И	ММ_З.Номенклатура 	= ПТУ.Номенклатура
		|			
		|ГДЕ 
		|	ПТУ.Количество 	<> IsNull(ММ_З.Количество, 0)
		|ИЛИ ПТУ.Сумма 		<> IsNull(ММ_З.Сумма, 0)
		|;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПТУ;
		////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ММ_З;
		|";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Документы.МаркетинговыеМероприятия.ВыполнитьДвижения(Выборка.Регистратор.ПолучитьОбъект(), Ложь, РежимПроведенияДокумента.Оперативный);
	КонецЦикла;

КонецПроцедуры // ОбновитьДвиженияПоступленийТоваровИУслуг()
 
#КонецОбласти

#Область  СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	Версия = "1.0.0";
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
    ПараметрыРегистрации = Новый Структура;

    // Объявим еще одну переменную, которая нам потребуется ниже
    МассивНазначений = Новый Массив;
    
    // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
    // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
    ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

    // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
    // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
    // которые поддерживают механизм ВПФ
	//СчитатьДокументыНазначений(МассивНазначений);
	
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
    
    // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
    ПараметрыРегистрации.Вставить("Наименование", "СписокДокументовМаркетинговыхМероприятий");
    
    // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
    ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);

    // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
    ПараметрыРегистрации.Вставить("Версия", Версия);
	ПараметрыРегистрации.Вставить("ВерсияБСП", "2.1.3.50");
    ПараметрыРегистрации.Вставить("Информация", "Управление ассортиментными матрицами [" + Версия + "]");
    
    // Создадим таблицу команд (подробнее смотрим ниже)
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, "Список маркетинговых мероприятий [" + Версия + "]", "СММ", "ОткрытиеФормы", Ложь, "СММ");
	ДобавитьКоманду(ТаблицаКоманд, "[ММ]ОбновитьДвиженияПоступленийТоваровИУслуг", "ОбновитьДвиженияПоступленийТоваровИУслуг()", "ВызовСерверногоМетода");
	
    // Сохраним таблицу команд в параметры регистрации обработки
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    
    // Теперь вернем системе наши параметры
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

   // Создадим пустую таблицу команд и колонки в ней
   Команды = Новый ТаблицаЗначений;

   // Как будет выглядеть описание печатной формы для пользователя
   Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

   // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
   Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

   // Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
   Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

   // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
   Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

   // Для печатной формы должен содержать строку ПечатьMXL 
   Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
   
   Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

#КонецОбласти
