
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ВыполнитьПарсингАвтоматически(ПараметрЗапуска) Экспорт
		
	Перем ПутьКФайлуПарсинга, ПутьККаталогуРезультата, КаталогРаспаковки, ТаблицаОбъектов;
	
	СоответствиеВидовФайлов = ПолучитьСоответствиеВидоФайлов();
	СтруктураПараметров = ПолучитьСтруктуруПараметровЗапуска(ПараметрЗапуска, ";");	
	
	Если СтруктураПараметров.Свойство("decompile") = Ложь Тогда
		Возврат СтруктураПараметров;	
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("pathToCF", ПутьКФайлуПарсинга) 	 И НЕ ПустаяСтрока(ПутьКФайлуПарсинга)
	 И	 СтруктураПараметров.Свойство("pathOut", ПутьККаталогуРезультата)И НЕ ПустаяСтрока(ПутьККаталогуРезультата) Тогда
	 
	 	ФайлДляПарсинга = Новый Файл(ПутьКФайлуПарсинга);
		Если ФайлДляПарсинга.Существует() Тогда
			Если СоответствиеВидовФайлов[ФайлДляПарсинга.Расширение] <> Неопределено Тогда
				РежимВыбораОбъекта = СоответствиеВидовФайлов[ФайлДляПарсинга.Расширение];
			Иначе 
				РежимВыбораОбъекта = 100;
			КонецЕсли;	
		КонецЕсли;
		
		СтруктураРезультат = ВыполнитьПарсингКонфигурации(ПутьКФайлуПарсинга, ПутьККаталогуРезультата, РежимВыбораОбъекта);
		Если ТипЗнч(СтруктураРезультат) = Тип("Структура") Тогда
			
			Если НЕ СтруктураРезультат.Свойство("КаталогРаспаковки", КаталогРаспаковки) Тогда
				Возврат СтруктураПараметров;
			КонецЕсли;
			
			Если НЕ СтруктураРезультат.Свойство("ТаблицаОбъектов", ТаблицаОбъектов) Тогда
				Возврат СтруктураПараметров;
			КонецЕсли; 
			
			Для каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
				
				Если СтрокаТаблицы.Объект <> "МОД" И СтрокаТаблицы.Объект <> "Ф" И СтрокаТаблицы.Объект <> "М" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаТаблицы.ПутьКОбъекту) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийКаталог = НайтиФайлы(КаталогРаспаковки, СтрокаТаблицы.ПутьКОбъекту);
				Для каждого ТекущийФайл Из ТекущийКаталог Цикл
			
					Если СтрокаТаблицы.Объект = "МОД" Тогда
						
						СтрокаТаблицы.ПутьКОбъекту = ТекущийФайл.ПолноеИмя;
						Если ТекущийФайл.ЭтоКаталог() Тогда
							СтрокаТаблицы.ПутьКОбъекту = ТекущийФайл.ПолноеИмя + "\text";
						КонецЕсли;
						ТекстовыйДокумент = Новый ТекстовыйДокумент;
						ТекстовыйДокумент.Прочитать(СтрокаТаблицы.ПутьКОбъекту, КодировкаТекста.UTF8);
						СтрокаТаблицы.Хеш = ПолучитьХешМодуля(СтрокаТаблицы.ПутьКОбъекту);
						
					КонецЕсли;
					
					Если СтрокаТаблицы.Объект = "Ф" Тогда
						Если ПустаяСтрока(ТекущийФайл.Расширение) Тогда
							
							ФайлПроверка = Новый Файл(ТекущийФайл.ПолноеИмя + ".0");
							Если ФайлПроверка.ЭтоКаталог() Тогда
								СтрокаТаблицы.ПутьКОбъекту = ТекущийФайл.ПолноеИмя + ".0\module";
								ТекстовыйДокумент = Новый ТекстовыйДокумент;
								ТекстовыйДокумент.Прочитать(СтрокаТаблицы.ПутьКОбъекту, КодировкаТекста.UTF8);
							Иначе
								СтрокаТаблицы.ПутьКОбъекту = ТекущийФайл.ПолноеИмя + ".0";
								ТекстовыйДокумент = Новый ТекстовыйДокумент;
								ТекстовыйДокумент.Прочитать(СтрокаТаблицы.ПутьКОбъекту, КодировкаТекста.UTF8);
								XMLТело = СтрокаВнутрВХМЛТело(ТекстовыйДокумент.ПолучитьТекст());
								ТекстовыйДокумент.УстановитьТекст(ПолучитьТекстМодуля(XMLТело));
								ТекстовыйДокумент.Записать(СтрокаТаблицы.ПутьКОбъекту);		
							КонецЕсли;
							СтрокаТаблицы.Хеш = ПолучитьХешМодуля(СтрокаТаблицы.ПутьКОбъекту)
							
						КонецЕсли;
					КонецЕсли;
					
					Если СтрокаТаблицы.Объект = "М" Тогда
						
						СтрокаТаблицы.ПутьКОбъекту = ТекущийФайл.ПолноеИмя + ".0";
						ФайлПроверка = Новый Файл(СтрокаТаблицы.ПутьКОбъекту);
						Если ФайлПроверка.Существует() Тогда
							ТекстовыйДокумент = Новый ТекстовыйДокумент;
							ТекстовыйДокумент.Прочитать(ФайлПроверка.ПолноеИмя, КодировкаТекста.UTF8);
							XMLСтрокаМакета = ТекстовыйДокумент.ПолучитьТекст();
							XMLСтрокаМакета = Прав(XMLСтрокаМакета, СтрДлина(XMLСтрокаМакета) - Найти(XMLСтрокаМакета, "<?xml version=""1.0"" encoding=""UTF-8""?>") + 1);
							ТекстовыйДокумент.УстановитьТекст(XMLСтрокаМакета);
							ТекстовыйДокумент.Записать(СтрокаТаблицы.ПутьКОбъекту);
							СтрокаТаблицы.Хеш = ПолучитьХешМодуля(СтрокаТаблицы.ПутьКОбъекту);
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЦикла; 
			
			КонецЦикла; 

			РазложитьПоПапкам(ТаблицаОбъектов, ПутьККаталогуРезультата);
			
			Попытка
				УдалитьФайлы(КаталогРаспаковки);
			Исключение
					
			КонецПопытки;
			
		КонецЕсли; 		
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
		
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСоответствиеВидоФайлов()
	
	СоответствиеВидовФайлов = Новый Соответствие;
	СоответствиеВидовФайлов.Вставить(".cf", 0);
	СоответствиеВидовФайлов.Вставить(".cfu", 2);
	СоответствиеВидовФайлов.Вставить(".epf", 1);
	СоответствиеВидовФайлов.Вставить(".erf", 3);
	СоответствиеВидовФайлов.Вставить(".ssf", 4);
	СоответствиеВидовФайлов.Вставить(".form", 4);
	СоответствиеВидовФайлов.Вставить(".mxl", 100);
	СоответствиеВидовФайлов.Вставить(".txt", 101);
	Возврат СоответствиеВидовФайлов;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровЗапуска(Строка, Разделитель = ".") Экспорт
   
	СтруктураПараметров = Новый Структура;
	
    СтрокаЗамены 	= СтрЗаменить(Строка, Разделитель, Символы.ПС);
	КоличествоСтрок = СтрЧислоСтрок(СтрокаЗамены);
	Для i=1 По КоличествоСтрок Цикл
		
		Строка = СтрПолучитьСтроку(СтрокаЗамены, i);
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("decompile") Тогда
			СтруктураПараметров.Вставить("decompile");
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("ЗавершитьРаботуПосле") Тогда
			СтруктураПараметров.Вставить("ЗавершитьРаботуПосле");
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("pathToCF") И i + 1 <= КоличествоСтрок Тогда
			СтруктураПараметров.Вставить("pathToCF", СтрПолучитьСтроку(СтрокаЗамены, i + 1));
		КонецЕсли;
		
		Если ВРег(Строка) = ВРег("pathOut") И i + 1 <= КоличествоСтрок Тогда
			СтруктураПараметров.Вставить("pathOut", СтрПолучитьСтроку(СтрокаЗамены, i + 1));	
		КонецЕсли;
		 
	КонецЦикла;
	
 	Возврат СтруктураПараметров;
   
КонецФункции

Функция ВыполнитьПарсингКонфигурации(ПутьКФайлуПарсинга, ПутьККаталогуРезультата, Режим)
	
	Перем НаименованиеКонфигурации, ИдентификаторМодулейПриложения;
	
	КаталогРаспаковки = ВыполнитьРаспаковкуФайлаКонфигурации(ПутьКФайлуПарсинга, ПутьККаталогуРезультата);
	ДополнитьСлешВПуть(КаталогРаспаковки);
	
		
	// Файл root
	ФайлРут	= Новый Файл(КаталогРаспаковки + "root");
	Если НЕ ФайлРут.Существует() Тогда
		ТекстСообщения 	= НСтр("ru='Возникла ошибка при распаковке файла. Не удалось получить root'");
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле 	= "ИсходныйФайл";
		Сообщение.Сообщить(); 
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстовыйДокументРут = Новый ТекстовыйДокумент;	
	ТекстовыйДокументРут.Прочитать(КаталогРаспаковки + "root");
	
	// Файл описания
	ИмяФайлаОписания = ТекстовыйДокументРут.ПолучитьСтроку(1);
	ИмяФайлаОписания = Сред(ИмяФайлаОписания, Найти(ИмяФайлаОписания, ",") + 1);
	Если Найти(ИмяФайлаОписания, ",") > 0 Тогда
		ИмяФайлаОписания = Лев(ИмяФайлаОписания, Найти(ИмяФайлаОписания, ",") - 1);
	Иначе
		ИмяФайлаОписания = Лев(ИмяФайлаОписания, СтрДлина(ИмяФайлаОписания) - 1);
	КонецЕсли; 
	
	ТекстовыйДокументОписание = Новый ТекстовыйДокумент();
	ТекстовыйДокументОписание.Прочитать(КаталогРаспаковки + ИмяФайлаОписания);
	ТекстОписание = ТекстовыйДокументОписание.ПолучитьТекст();

	
	// Версия
	ВерсияФайла = ПолучитьВерсиюФайла(КаталогРаспаковки);
	ПолучитьДанныеМассиваЗначений(ТекстОписание, НаименованиеКонфигурации, ИдентификаторМодулейПриложения);
	
	
	ТаблицаОбъектов = ИнициализироватьТаблицуОбъектов();	
	КаталогФайлов = НайтиФайлы(КаталогРаспаковки, ИдентификаторМодулейПриложения + ".*");
	Для каждого ФайлКаталога Из КаталогФайлов Цикл
		Если ПустаяСтрока(ФайлКаталога.Расширение) Тогда
			Продолжить;
		КонецЕсли;
		ОбработатьФайлПоРасширению(ФайлКаталога, ТаблицаОбъектов);
	КонецЦикла;
	
	
	РегулярноеВыражениеДляФМ			= Новый COMОбъект("VBScript.RegExp");
	РегулярноеВыражениеДляФМ.Multiline	= Истина;
	РегулярноеВыражениеДляФМ.IgnoreCase	= Истина;
	
	МассивFM = ИнициализироватьМассивFM();	
	Для каждого ЭлементМассива Из МассивFM Цикл
		
		ОбъектСтроки		= ЭлементМассива["Объект"];
		ВидОбъектаСтроки	= ЭлементМассива["Поле"];
		
		НоваяСтрока					= ТаблицаОбъектов.Добавить();
		НоваяСтрока.Наименование	= ЭлементМассива["Название"];
		НоваяСтрока.Идентификатор	= ЭлементМассива["Идентификатор"];
		НоваяСтрока.Синоним			= ЭлементМассива["Название"];
		НоваяСтрока.Объект			= ОбъектСтроки;
		
		Если ОбъектСтроки <> "РО" тогда
			РегулярноеВыражениеДляФМ.Pattern = НоваяСтрока.Идентификатор + ",\d+((,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12}))*)";
		Иначе 
			Если Режим = 1 Тогда
				РегулярноеВыражениеДляФМ.Pattern = НоваяСтрока.Идентификатор + НайтиПаттерн(ВидОбъектаСтроки, "Обработка");
			ИначеЕсли Режим = 3 Тогда
				РегулярноеВыражениеДляФМ.Pattern = НоваяСтрока.Идентификатор + НайтиПаттерн(ВидОбъектаСтроки, "Отчет");
			КонецЕсли;
		КонецЕсли;
		
		MatchesFM = РегулярноеВыражениеДляФМ.Execute(ТекстОписание);
		Если MatchesFM.Count = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого MatchFM Из MatchesFM Цикл
			ТекстПараметра = MatchFM.SubMatches(0);
		КонецЦикла;
		
		Если MatchFM.SubMatches(1) <> Неопределено И ОбъектСтроки <> "РО" Тогда
			ЗаполнитьФМ(ТекстПараметра, ТаблицаОбъектов, ОбъектСтроки , КаталогРаспаковки);
		ИначеЕсли MatchFM.SubMatches(1) <> Неопределено тогда
			Если Режим = 1 Тогда
				ЗаполнитьРО(ТекстПараметра, ТаблицаОбъектов, ВидОбъектаСтроки, "Обработка");
			ИначеЕсли Режим = 3 Тогда
				ЗаполнитьРО(ТекстПараметра, ТаблицаОбъектов, ВидОбъектаСтроки, "Отчет");
			КонецЕсли;
		Иначе 
			ТаблицаОбъектов.Удалить(НоваяСтрока);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("КаталогРаспаковки, ТаблицаОбъектов", КаталогРаспаковки, ТаблицаОбъектов);
			
КонецФункции

Функция ВыполнитьРаспаковкуФайлаКонфигурации(ПутьКФайлуРаспаковки, ПутьККаталогуРезультата)
	
	ФайлДляРаспаковки = Новый Файл(ПутьКФайлуРаспаковки);	
	КаталогРаспаковки = Новый Файл(КаталогВременныхФайлов() + ФайлДляРаспаковки.Имя + ".und");
	Если КаталогРаспаковки.Существует() Тогда
		Попытка
			УдалитьФайлы(КаталогРаспаковки.ПолноеИмя);
		Исключение
			ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата() - Дата('00010101'));
			КаталогРаспаковки = Новый Файл(КаталогВременныхФайлов() + ФайлДляРаспаковки.Имя + Строка(ГСЧ.СлучайноеЧисло(0, 10000)) +".und");	
		КонецПопытки;
	КонецЕсли;
	
	ФайлБиблиотеки = ИнициализацияБиблиотеки();
	ФайлПрограммыРаспаковки = ИнициализацияПрограммыРаспаковки();
	
	СтрокаЗапуска = """" + ФайлПрограммыРаспаковки.ПолноеИмя + """ -parse """ + ФайлДляРаспаковки.ПолноеИмя + """ """ + КаталогРаспаковки.ПолноеИмя + """";
	WshShell = Новый COMОбъект("WScript.Shell");
	WshShell.Run(СтрокаЗапуска, 0, Истина);
	
	ФинализацияБиблиотеки(ФайлБиблиотеки);
	ФинализацияПрограммыРаспаковки(ФайлПрограммыРаспаковки);
	
	Возврат КаталогРаспаковки.ПолноеИмя;
		
КонецФункции

Функция ИнициализацияПрограммыРаспаковки()
	
	ДвоичныеДанныеПрограммыРаспаковки = ЭтотОбъект.ПолучитьМакет("UnpackV8");	
	ДвоичныеДанныеПрограммыРаспаковки.Записать(КаталогВременныхФайлов() + "UnpackV8.exe");
	Возврат Новый Файл(КаталогВременныхФайлов() + "UnpackV8.exe");
		
КонецФункции

Функция ИнициализацияБиблиотеки()
	
	ДвоичныеДанныеDLL = ЭтотОбъект.ПолучитьМакет("zlib1");
	ДвоичныеДанныеDLL.Записать(КаталогВременныхФайлов() + "zlib1.dll");	
	Возврат Новый Файл(КаталогВременныхФайлов() + "zlib1.dll");
	
КонецФункции

Функция ИнициализироватьТаблицуОбъектов()

	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("ПутьКОбъекту", 	Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Наименование", 	Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Объект", 			Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Синоним",			Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Хеш");
	Возврат ТаблицаОбъектов;				

КонецФункции // ИнициализироватьТаблицуОбъектов()

Функция ИнициализироватьМассивFM()
	
	МассивFM = Новый Массив;
	МассивFM.Добавить(Новый Структура("Название, Поле, Индекс, ИндексПодч, Объект, Идентификатор",
									"Реквизиты",
									"Реквизит",
									"77",
									"80",
									"РО",
									"ec6bb5e5-b7a8-4d75-bec9-658107a699cf"));
	МассивFM.Добавить(Новый Структура("Название, Поле, Индекс, ИндексПодч, Объект, Идентификатор",
									"Табличные части",
									"ТабличнаяЧасть",
									"78",
									"79",
									"РО",
									"2bcef0d1-0981-11d6-b9b8-0050bae0a95d"));
	МассивFM.Добавить(Новый Структура("Название, Поле, Индекс, ИндексПодч, Объект, Идентификатор",
									"Формы",
									"Форма",
									"16",
									"51",
									"Ф",
									"d5b0e5ed-256d-401c-9c36-f630cafd8a62"));
	МассивFM.Добавить(Новый Структура("Название, Поле, Индекс, ИндексПодч, Объект, Идентификатор",
									"Макеты",
									"Макет",
									"18",
									"53",
									"М",
									"3daea016-69b7-4ed4-9453-127911372fe6"));
	Возврат МассивFM;
	
КонецФункции // ИнициализироватьМассивFM
 
Функция ПолучитьВерсиюФайла(КаталогРаспаковки)
	
	ТекстВерсия	= Новый ТекстовыйДокумент;
	ТекстВерсия.Прочитать(КаталогРаспаковки + "version");
	ВерсияСтрока = Сред(ТекстВерсия.ПолучитьТекст(), 4, 3);
	Если ВерсияСтрока = "6,0" Тогда  
		Возврат "v8_0";
	ИначеЕсли ВерсияСтрока="106" Тогда   
		Возврат "v8_1";
	Иначе   
		Возврат "v8_2";
	КонецЕсли;	
	
КонецФункции

Функция НайтиПаттерн(ВидОбъектаСтроки, ВидМетаданныхОбъекта)
	
	Если ВидОбъектаСтроки = "Измерение" И ВидМетаданныхОбъекта = "Последовательность" Тогда
		Паттерн = ",[\d]+((,\n\{\n\{\d,\n\{2,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\n\{(0,[\d]+(,\n\{[^\}]+(,\n)+\{[^\{\}]+\}\n\})*)[\n]*\},\n\{(0,[\d]+(,\n\{[^\}]+(,\n)+\{[^\{\}]+\}\n\})*)[\n]*\}\n\},\d\})*)";
	ИначеЕсли ВидОбъектаСтроки = "Значение" Тогда
		Паттерн = ",\d+((,\n\{\n\{0,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\}\n\},\d\})*)";
	ИначеЕсли ВидОбъектаСтроки = "Графа" Тогда
		Паттерн = ",\d+((,\n\{\n\{\d,\n\{\d,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{(\d,[\d]+(,\n\{[^\}]+(,\n)+\{[^\{\}]+\}\n\})*)[\n]*\},(\d)\},(\d)\})*)";
	ИначеЕсли ВидОбъектаСтроки = "ТабличнаяЧасть" Тогда
		Если ВидМетаданныхОбъекта = "Обработка" Тогда
			ИдентификаторРеквизитов = "5d24a9d1-098e-11d6-b9b8-0050bae0a95d";
		ИначеЕсли ВидМетаданныхОбъекта = "Отчет" Тогда
			ИдентификаторРеквизитов = "c339c860-29e2-11d6-a3c7-0050bae0a776";
		Иначе 
			ИдентификаторРеквизитов = "888744e1-b616-11d4-9436-004095e12fc7";
		КонецЕсли;
		Паттерн = ",[\d]+((,\n\{\n\{\d,\n\{[\d]+,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{0,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\}\n\},\d,\n\{(0|\d,\n\{\d,\d(,\n\{-[\d]+\},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d,[\d]+(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{(""[DSNBU]"".*|""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},(\d|\n.*\n|\n.*\n.*\n|\n.*\n.*\n.*\n|\n.*\n.*\n.*\n.*\n|\n.*\n.*\n.*\n.*\n.*\n|\n.*\n.*\n.*\n.*\n.*\n\}\n))?\})+\n\})+\n)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\}\n\}[^\}]*\},\d,\n\{" + ИдентификаторРеквизитов + ",[\d]+(,\n\{\n\{\d,\n\{25,\n\{2,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\d,"".*"",\d,\n\{""[#DSNBU]"".*\},\n\{""[#DSNBU]"".*\},\d,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\d,\d,\n\{5004(,0|(,\d,"".*"",\d(,\n\{(-\d|0(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12})?)\})*)+,\d)\},\n\{3,(0,0|\d(,\n\{.*\})*,\d)\},\n\{0,(0|\d(,"".*"",\n(\{""[DSNBU]"".*|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d+(,\n\{""[DSNBU]"".*|,\n\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})+\n\}\n)\})+\n)\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n(\{""[DSNBU]"".*\}|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\}),\d\}[^\}]*\},\d\})*\n\}\n\})*)";
	Иначе
		Паттерн = ",[\d]+((,\n\{\n\{\d,\n\{25,\n\{2,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\d,"".*"",\d,\n\{""[#DSNBU]"".*\},\n\{""[#DSNBU]"".*\},\d,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\d,\d,\n\{5004(,0|(,\d,"".*"",\d(,\n\{(-\d|0(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12})?)\})*)+,\d)\},\n\{3,(0,0|\d(,\n\{.*\})*,\d)\},\n\{0,(0|\d(,"".*"",\n(\{""[DSNBU]"".*|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d+(,\n\{""[DSNBU]"".*|,\n\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})+\n\}\n)\})+\n)\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n(\{""[DSNBU]"".*\}|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\}),\d\}[^\}]*\},\d\})*)";
	КонецЕсли;	
	Возврат Паттерн;
	
КонецФункции

Функция ПолучитьНазваниеПараметра(ИдентификаторПараметра, КаталогРаспаковки)
	
	Перем ИмяОбъекта;	
	
	ТекстОписанияОбъекта = Новый ТекстовыйДокумент();
	ТекстОписанияОбъекта.Прочитать(КаталогРаспаковки + ИдентификаторПараметра);
	Текст = ТекстОписанияОбъекта.ПолучитьТекст();
	ПолучитьДанныеМассиваЗначений(Текст, ИмяОбъекта);
	Возврат ИмяОбъекта;
	
КонецФункции

Функция ПолучитьХешМодуля(ПутьКФайлу)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХешированиеДанных.ДобавитьФайл(ПутьКФайлу);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

Функция СтрокаВнутрВХМЛТело(вхСтрока)
	
	//{ Получение одной длинной строки
	выхХМЛТело = СтрЗаменить(вхСтрока, СИМВОЛЫ.ПС, "#%");
	выхХМЛТело = СтрЗаменить(выхХМЛТело, СИМВОЛЫ.ВК, "#%");
	//}
	
	//{ Заменяем символы, критичные для XML
	// & на "&amp;"
	// < на "&lt;"
	// > на "&gt;"
	выхХМЛТело = СтрЗаменить(выхХМЛТело, "&", "&amp;");
	выхХМЛТело = СтрЗаменить(выхХМЛТело, "<", "&lt;");
	выхХМЛТело = СтрЗаменить(выхХМЛТело, ">", "&gt;");
	//}
	
	//{Решаем проблему с кавычками:
	выхХМЛТело = СтрЗаменить(выхХМЛТело, """""" , "^$^$");
	выхХМЛТело = СтрЗаменить(выхХМЛТело, """" , Символы.ПС + "^$");
	//}
		
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(выхХМЛТело);
	новХМЛТелоДок = Новый ТекстовыйДокумент;
	Максимум = СтрЧислоСтрок(выхХМЛТело);
	
	//{Обрабатываем документ построчно:
	КавычкаОткрыта = истина;
	Для НомерСтроки = 1 по Максимум цикл
		КавычкаОткрыта = Не КавычкаОткрыта;
		выхСтрока = ТекстДок.ПолучитьСтроку(НомерСтроки);
		Если КавычкаОткрыта Тогда
			
			//{Решаем проблему с получением модуля в управляемой форме
			выхСтрока = СтрЗаменить(выхСтрока, "#%", Символы.ВК);
			//}
			новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
			Продолжить;
		КонецЕсли;
		
		//{ Замена одинарных символов
		выхСтрока = СтрЗаменить(выхСтрока, ",", "</data><data>");
		выхСтрока = СтрЗаменить(выхСтрока, "{", "<elem><data>");
		выхСтрока = СтрЗаменить(выхСтрока, "}", "</data></elem>");
		//}
		
		новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
		
	КонецЦикла;
	
	новХМЛТело = новХМЛТелоДок.ПолучитьТекст();
	//}
	
	//{ Восстановление кавычек
	новХМЛТело = СтрЗаменить(новХМЛТело, Символы.ПС + "^$", "^$");
	новХМЛТело = СтрЗаменить(новХМЛТело, "^$", """");
	новХМЛТело = СтрЗаменить(новХМЛТело, "#%", "");
	//}
	
	//{ Удаление лишних блоков 
	новХМЛТело = СтрЗаменить(новХМЛТело, "<data><elem>", "<elem>");
	новХМЛТело = СтрЗаменить(новХМЛТело, "</elem></data>", "</elem>");
	//}
	
	//{ Добавление переносов строк для удобства поиска различий
	новХМЛТело = СтрЗаменить(новХМЛТело, "</elem>", "</elem>" + СИМВОЛЫ.ПС);
	новХМЛТело = СтрЗаменить(новХМЛТело, "</data>", "</data>" + СИМВОЛЫ.ПС);
	//}
	
	Возврат новХМЛТело;
	
КонецФункции

Функция ПолучитьТекстМодуля(XMLСтрокаФормы)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрокаФормы);
	ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		ЧтениеXML.Пропустить();
		ЧтениеXML.Пропустить();
		ЧтениеXML.Пропустить();
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();	
	ТекстМодуля = Прав(ЧтениеXML.Значение, СтрДлина(ЧтениеXML.Значение) - 1);
	ТекстМодуля = Лев(ТекстМодуля, СтрДлина(ТекстМодуля) - 1);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, """""", """");
	Возврат ТекстМодуля;
	
КонецФункции



Процедура ФинализацияПрограммыРаспаковки(ФайлПрограммыРаспаковки) 
	
	Если ТипЗнч(ФайлПрограммыРаспаковки) = Тип("Файл") Тогда
		Попытка
			УдалитьФайлы(ФайлПрограммыРаспаковки.ПолноеИмя);
		Исключение
			
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

Процедура ФинализацияБиблиотеки(ФайлБиблиотеки) 
		
	Если ТипЗнч(ФайлБиблиотеки) = Тип("Файл") Тогда
		Попытка
			УдалитьФайлы(ФайлБиблиотеки.ПолноеИмя);
		Исключение
			
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьДанныеМассиваЗначений(Текст, НаименованиеКонфигурации, ИдентификаторМодулейПриложения = Неопределено)
	
	МассивЗначений = Новый Массив(2);
	РегулярноеВыражениеX			= Новый COMОбъект("VBScript.RegExp");     //для получения из текстового файла объекта пары идентификатор/наименование
	РегулярноеВыражениеX.Multiline	= Истина;
	РегулярноеВыражениеX.Pattern	= "\{\d,[\d]+,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n?";
	
	Matches = РегулярноеВыражениеX.Execute(Текст);
	Для каждого Match Из Matches Цикл
		МассивЗначений[0] = Match.SubMatches(0);
		МассивЗначений[1] = Match.SubMatches(1);
	КонецЦикла;
	
	НаименованиеКонфигурации = МассивЗначений[1];
	ИдентификаторМодулейПриложения = МассивЗначений[0];
	
КонецПроцедуры

Процедура ОбработатьФайлПоРасширению(ТекущийКаталог, ТаблицаОбъектов)
	
	МакетРасширений = ПолучитьМакет("МакетРасширений");
	ОбластьМакета	= МакетРасширений.Область("Остальные");	
	Ячейка			= МакетРасширений.НайтиТекст(ТекущийКаталог.Расширение, , ОбластьМакета, Истина, Истина);
	
	Позиция			= Найти(Ячейка.Имя, "C");
	РезультатЛев 	= Лев(Ячейка.Имя, Позиция);
	РезультутПрав 	= Число(Прав(Ячейка.Имя, СтрДлина(Ячейка.Имя) - Позиция));
	
	ЗначениеЯчейки					= РезультатЛев + Строка(РезультутПрав + 1);
	ЗначениеЯчейкиСинонима			= РезультатЛев + Строка(РезультутПрав + 4);
	ЗначениеЯчейкиОбъекта			= РезультатЛев + Строка(РезультутПрав + 2);
	
	СтруктураПоиска	= Новый Структура("Наименование", МакетРасширений.Область(ЗначениеЯчейки).Текст);
	РезультатПоиска = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Наименование	= МакетРасширений.Область(ЗначениеЯчейки).Текст;
		НоваяСтрока.Объект			= МакетРасширений.Область(ЗначениеЯчейкиОбъекта).Текст;
		НоваяСтрока.Синоним			= МакетРасширений.Область(ЗначениеЯчейкиСинонима).Текст;
		НоваяСтрока.ПутьКОбъекту	= ТекущийКаталог.Имя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФМ(ИдентификаторыПараметров, ТаблицаОбъектов, ОбъектСтроки, КаталогРаспаковки)
	
	СсылкиПараметров			= Сред(ИдентификаторыПараметров, 1);
	СсылкиПараметров			= Сред(СсылкиПараметров, Найти(СсылкиПараметров, ",") + 1);
	СсылкиПараметровПС			= СтрЗаменить(СсылкиПараметров, ",", Символы.ПС);
	КоличествоСсылокПараметров	= СтрЧислоСтрок(СсылкиПараметровПС);
	
	Для НомерСсылкиПараметров = 1 По КоличествоСсылокПараметров Цикл
		ИдентификаторПараметра = СтрПолучитьСтроку(СсылкиПараметровПС, НомерСсылкиПараметров);
		Файл = Новый Файл(КаталогРаспаковки + ИдентификаторПараметра);
		Если Файл.Существует() Тогда
			
			СтрокиФМ				= ТаблицаОбъектов.Добавить();
			СтрокиФМ.Идентификатор	= ИдентификаторПараметра;
			СтрокиФМ.Объект			= ОбъектСтроки;
			СтрокиФМ.Наименование	= ПолучитьНазваниеПараметра(ИдентификаторПараметра, КаталогРаспаковки);
			СтрокиФМ.Синоним		= СтрокиФМ.Наименование;
			СтрокиФМ.ПутьКОбъекту	= ИдентификаторПараметра;
			
			КаталогФайла = НайтиФайлы(КаталогРаспаковки, ИдентификаторПараметра + ".*");
			Для к = 0 по КаталогФайла.Количество() - 1 цикл
				ТекущийКаталог = КаталогФайла.Получить(к);
				Если ПустаяСтрока(ТекущийКаталог.Расширение) Тогда
					Продолжить;
				КонецЕсли;
				ОбработатьФайлПоРасширению(ТекущийКаталог, ТаблицаОбъектов);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРО(ТекстПараметра, ТаблицаОбъектов, ВидОбъектаСтроки, ВидМетаданныхОбъекта)
	
	РегулярноеВыражениеР1				= Новый COMОбъект("VBScript.RegExp");
	РегулярноеВыражениеР1.Multiline 	= Истина;
	РегулярноеВыражениеР1.IgnoreCase	= Истина;
	РегулярноеВыражениеР1.Global		= Истина;
	
	РегулярноеВыражениеР3				= Новый COMОбъект("VBScript.RegExp");
	РегулярноеВыражениеР3.Multiline		= Истина;
	РегулярноеВыражениеР3.IgnoreCase	= Истина;
	РегулярноеВыражениеР3.Global		= Истина;
	
	РегулярноеВыражениеР4				= Новый COMОбъект("VBScript.RegExp");
	РегулярноеВыражениеР4.Multiline		= Истина;
	РегулярноеВыражениеР4.IgnoreCase	= Истина;
	РегулярноеВыражениеР4.Global		= Истина;
	РегулярноеВыражениеР4.Pattern		= "\{\n\{\d,\n\{25,\n\{2,\n\{0,\n\{0,0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\d,"".*"",\d,\n\{""[#DSNBU]"".*\},\n\{""[#DSNBU]"".*\},\d,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\d,\d,\n\{5004(,0|(,\d,"".*"",\d(,\n\{(-\d|0(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12})?)\})*)+,\d)\},\n\{3,(0,0|\d(,\n\{.*\})*,\d)\},\n\{0,(0|\d(,"".*"",\n(\{""[DSNBU]"".*|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d+(,\n\{""[DSNBU]"".*|,\n\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})+\n\}\n)\})+\n)\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n(\{""[DSNBU]"".*\}|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})";
	
	РегулярноеВыражение1				= Новый COMОбъект("VBScript.RegExp");
	РегулярноеВыражение1.Multiline		= Истина;
	РегулярноеВыражение1.IgnoreCase		= Истина;
	РегулярноеВыражение1.Global			= Истина;
	РегулярноеВыражение1.Pattern		= "(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})";
	
	Если ВидОбъектаСтроки <> "ТабличнаяЧасть" Тогда        
		Если ВидОбъектаСтроки = "Измерение" И ВидМетаданныхОбъекта = "Последовательность" Тогда
			РегулярноеВыражениеР1.Pattern = ",\n\{\n\{\d,\n\{2,\n\{0,\n\{0,0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\n\{(0,[\d]+(,\n\{[^\}]+(,\n)+\{[^\{\}]+\}\n\})*)[\n]*\},\n\{(0,[\d]+(,\n\{[^\}]+(,\n)+\{[^\{\}]+\}\n\})*)[\n]*\}\n\},\d\}";
		ИначеЕсли ВидОбъектаСтроки = "Значение" Тогда
			РегулярноеВыражениеР1.Pattern = ",\n\{\n\{0,\n\{0,\n\{0,0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\}\n\},\d\}";
		ИначеЕсли ВидОбъектаСтроки = "Графа" Тогда
			РегулярноеВыражениеР1.Pattern = ",\n\{\n\{\d,\n\{\d,\n\{0,0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{(\d,[\d]+(,\n\{[^\}]+(,\n)+\{[^\{\}]+\}\n\})*)[\n]*\},(\d)\},(\d)\}";
		Иначе
			РегулярноеВыражениеР1.Pattern = ",\n\{\n\{\d,\n\{25,\n\{2,\n\{0,\n\{0,0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\d,"".*"",\d,\n\{""[#DSNBU]"".*\},\n\{""[#DSNBU]"".*\},\d,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\d,\d,\n\{5004(,0|(,\d,"".*"",\d(,\n\{(-\d|0(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12})?)\})*)+,\d)\},\n\{3,(0,0|\d(,\n\{.*\})*,\d)\},\n\{0,(0|\d(,"".*"",\n(\{""[DSNBU]"".*|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d+(,\n\{""[DSNBU]"".*|,\n\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})+\n\}\n)\})+\n)\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n(\{""[DSNBU]"".*\}|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\}),\d\}[^\}]*\},\d\}";
		КонецЕсли;
		Matches1 = РегулярноеВыражениеР1.Execute(ТекстПараметра);
		Для каждого Match1 из Matches1 Цикл
			СтрокиРО						= ТаблицаОбъектов.Добавить();
			СтрокиРО.Наименование   		= Match1.SubMatches(1);
			СтрокиРО.Идентификатор  		= Match1.SubMatches(0);
			СтрокиРО.Объект					= "РО";
			СтрокиРО.Синоним				= СтрокиРО.Наименование;
		КонецЦикла;
		
	Иначе
		Если ВидМетаданныхОбъекта = "Обработка" тогда
			ИдентификаторРеквизитов = "5d24a9d1-098e-11d6-b9b8-0050bae0a95d";
		ИначеЕсли ВидМетаданныхОбъекта = "Отчет" тогда
			ИдентификаторРеквизитов = "c339c860-29e2-11d6-a3c7-0050bae0a776";
		Иначе 
			ИдентификаторРеквизитов = "888744e1-b616-11d4-9436-004095e12fc7";
		КонецЕсли;
		РегулярноеВыражениеР1.Pattern = ",\n\{\n\{\d,\n\{[\d]+,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\w{8}-\w{4}-\w{4}-\w{4}-\w{12}),\n\{0,\n\{0,\n\{0,0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},""(\S+?)"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\}\n\},\d,\n\{(0|\d,\n\{\d,\d(,\n\{-[\d]+\},\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d,[\d]+(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{(""[DSNBU]"".*|""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},(\d|\n.*\n|\n.*\n.*\n|\n.*\n.*\n.*\n|\n.*\n.*\n.*\n.*\n|\n.*\n.*\n.*\n.*\n.*\n|\n.*\n.*\n.*\n.*\n.*\n\}\n))?\})+\n\})+\n)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\}\n\}[^\}]*\},\d,\n\{("+ИдентификаторРеквизитов+",[\d]+(,\n\{\n\{\d,\n\{25,\n\{2,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\d,"".*"",\d,\n\{""[#DSNBU]"".*\},\n\{""[#DSNBU]"".*\},\d,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\d,\d,\n\{5004(,0|(,\d,"".*"",\d(,\n\{(-\d|0(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12})?)\})*)+,\d)\},\n\{3,(0,0|\d(,\n\{.*\})*,\d)\},\n\{0,(0|\d(,"".*"",\n(\{""[DSNBU]"".*|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d+(,\n\{""[DSNBU]"".*|,\n\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})+\n\}\n)\})+\n)\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n(\{""[DSNBU]"".*\}|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\}),\d\}[^\}]*\},\d\})*\n\}\n\})";
		Matches1=РегулярноеВыражениеР1.Execute(ТекстПараметра);
		Для каждого Match1 из Matches1 Цикл
			СтрокиТЧ				= ТаблицаОбъектов.Добавить();
			СтрокиТЧ.Наименование	= Match1.SubMatches(2);
			СтрокиТЧ.Идентификатор	= Match1.SubMatches(1);
			СтрокиТЧ.Объект			= "РО"; 
			СтрокиТЧ.Синоним		= СтрокиТЧ.Наименование;
			
			СтрокаСсылок 	= Match1.SubMatches(0);
			Matches2		= РегулярноеВыражение1.Execute(СтрокаСсылок);
			
			РегулярноеВыражениеР3.Pattern 	= ИдентификаторРеквизитов + ",[\d]+((,\n\{\n\{\d,\n\{25,\n\{2,\n\{0,\n\{0,0,\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\},""\S+?"",\n?\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},"".*""\},\n\{""Pattern""(,\n\{""[#DSNBU]"".*\})*\n?\}\n\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\d,"".*"",\d,\n\{""[#DSNBU]"".*\},\n\{""[#DSNBU]"".*\},\d,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\d,\d,\n\{5004(,0|(,\d,"".*"",\d(,\n\{(-\d|0(,\w{8}-\w{4}-\w{4}-\w{4}-\w{12})?)\})*)+,\d)\},\n\{3,(0,0|\d(,\n\{.*\})*,\d)\},\n\{0,(0|\d(,"".*"",\n(\{""[DSNBU]"".*|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n\{\d+(,\n\{""[DSNBU]"".*|,\n\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\})+\n\}\n)\})+\n)\},\d,\n\{(0|\d(,[^,]*,""(""""|[^""]*)*"")+)\},\n(\{""[DSNBU]"".*\}|\{""#"",\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n.*\n\}),\d\}[^\}]*\},\d\})*\n\}\n\})";
			Matches3						= РегулярноеВыражениеР3.Execute(Match1.SubMatches(14));
			Для каждого Match3 из Matches3 Цикл
				Matches4=РегулярноеВыражениеР4.Execute(Match3.SubMatches(0));
				Для каждого Match4 из Matches4 Цикл
					СтрокиРТЧ				= ТаблицаОбъектов.Добавить();
					СтрокиРТЧ.Наименование	= Match4.SubMatches(1);
					СтрокиРТЧ.Идентификатор	= Match4.SubMatches(0);
					СтрокиРТЧ.Синоним		= СтрокиРТЧ.Наименование;
					СтрокиРТЧ.Объект		= "РО";
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура ДополнитьСлешВПуть
//
// Параметры:
// Нет
//
// Описание:
// Процедура дополняет слеш в путь в конец строки, если он отсутствует
//
Процедура ДополнитьСлешВПуть(Каталог) 
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры

Процедура РазложитьПоПапкам(ТаблицаОбъектов, ПутьККаталогуРезультата)
	
	ДополнитьСлешВПуть(ПутьККаталогуРезультата);
	ФайлКаталога = Новый Файл(ПутьККаталогуРезультата);
	Если НЕ ФайлКаталога.Существует() Тогда
		СоздатьКаталог(ФайлКаталога.ПолноеИмя);
	КонецЕсли;
	
	КешФайлов = Новый Соответствие;
	МассивФайлов = НайтиФайлы(ФайлКаталога.ПолноеИмя, "*", Истина);
	Для каждого Файл Из МассивФайлов Цикл
		КешФайлов[Файл.ПолноеИмя] = Файл;	
	КонецЦикла;
	
	Для каждого Объект Из ТаблицаОбъектов Цикл
		
		Если ПустаяСтрока(Объект.ПутьКОбъекту) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Объект.Объект = "МОД" Тогда
			
			ФайлОбъект = Новый Файл(ПутьККаталогуРезультата + Объект.Синоним);
			ПутьКМодулю = ФайлОбъект.ПолноеИмя + "\" + Объект.Синоним + ".txt";
			Если ФайлОбъект.Существует() Тогда
				
				КешФайлов.Удалить(ФайлОбъект.ПолноеИмя);
				ФайлОбъект = Новый Файл(ПутьКМодулю);
				Если ФайлОбъект.Существует() Тогда
					КешФайлов.Удалить(ФайлОбъект.ПолноеИмя);
					Если Объект.Хеш <> ПолучитьХешМодуля(ПутьКМодулю) Тогда	
					 	КопироватьФайл(Объект.ПутьКОбъекту, ПутьКМодулю);
					КонецЕсли;
				Иначе
					КопироватьФайл(Объект.ПутьКОбъекту, ПутьКМодулю);	
				КонецЕсли;
				
			Иначе
				СоздатьКаталог(ФайлОбъект.ПолноеИмя);
				КопироватьФайл(Объект.ПутьКОбъекту, ПутьКМодулю);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Объект = "Ф" ИЛИ Объект.Объект = "М" Тогда
			
			ФайлОбъект = Новый Файл(ПутьККаталогуРезультата + ?(Объект.Объект = "Ф", "Form", "СКД"));
			Если ФайлОбъект.Существует() Тогда
				КешФайлов.Удалить(ФайлОбъект.ПолноеИмя);
				ФайлОбъект = Новый Файл(ФайлОбъект.ПолноеИмя + "\" + Объект.Синоним);
				Если ФайлОбъект.Существует() Тогда
					КешФайлов.Удалить(ФайлОбъект.ПолноеИмя);
					ФайлОбъект = Новый Файл(ФайлОбъект.ПолноеИмя + "\" + Объект.Синоним + ".txt");
					Если ФайлОбъект.Существует() Тогда
						КешФайлов.Удалить(ФайлОбъект.ПолноеИмя);
						Если Объект.Хеш <> ПолучитьХешМодуля(ФайлОбъект.ПолноеИмя) Тогда	
						 	КопироватьФайл(Объект.ПутьКОбъекту, ФайлОбъект.ПолноеИмя);
						КонецЕсли;
					Иначе
						КопироватьФайл(Объект.ПутьКОбъекту, ФайлОбъект.ПолноеИмя);		
					КонецЕсли;
				Иначе
					СоздатьКаталог(ФайлОбъект.ПолноеИмя);
					КопироватьФайл(Объект.ПутьКОбъекту, ФайлОбъект.ПолноеИмя + "\" + Объект.Синоним + ".txt");	
				КонецЕсли;
			Иначе
				СоздатьКаталог(ФайлОбъект.ПолноеИмя);
				СоздатьКаталог(ФайлОбъект.ПолноеИмя + "\" + Объект.Синоним);
				КопироватьФайл(Объект.ПутьКОбъекту, ФайлОбъект.ПолноеИмя + "\" + Объект.Синоним + "\" + Объект.Синоним + ".txt");	
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЦикла; 
	
	Для каждого Файл Из КешФайлов Цикл
		Попытка
			УдалитьФайлы(Файл.Ключ);
		Исключение
		
		КонецПопытки; 
	КонецЦикла; 
	
КонецПроцедуры
